<?php

namespace telconet\schemaBundle\Repository;
use Doctrine\ORM\EntityRepository;
use telconet\schemaBundle\Service\UtilService;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use telconet\planificacionBundle\Service\PlanificarService;
use telconet\schemaBundle\Entity\ReturnResponse;
class InfoServicioTecnicoRepository extends EntityRepository
{   
    /**
     * 
     * Función para consultar los servicios adicionales Dual Band atados a un servicio técnico
     * 
     * @param array $arrayParametros [
     *                                  "intIdPunto"                => Id del punto,
     *                                  "intElementoClienteId"      => Id del elemento cliente asociado al servicio
     *                                  "intInterfaceElemClienteId" => Id de la interface del elemento cliente asociado al servicio
     *                                  "strNombreTecnicoProducto"  => Nombre técnico del producto Dual Band
     *                                ]
     * @return array $arrayRespuesta [
     *                                  "total"     => Total de registros
     *                                  "resultado" => Registros de la consulta
     *                                ]
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec> 
     * @version 1.0 23-09-2020 
     * 
     */   
    public function getServiciosAdicDualBandPorDataTecnica($arrayParametros)
    {
        $arrayRespuesta['total']     = 0;
        $arrayRespuesta['resultado'] = array();
        try
        {
            $objRsm            = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery       = $this->_em->createNativeQuery(null, $objRsm);
            $objRsmCount       = new ResultSetMappingBuilder($this->_em);
            $objNtvQueryCount  = $this->_em->createNativeQuery(null, $objRsmCount);
            
            $strSelectCount = " SELECT COUNT(DISTINCT SERVICIO.ID_SERVICIO) AS TOTAL ";
            
            $strSelect      = " SELECT SERVICIO.ID_SERVICIO ";
            
            $strFrom        = " FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO
                                INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PROD
                                ON PROD.ID_PRODUCTO = SERVICIO.PRODUCTO_ID
                                INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO ST
                                ON ST.SERVICIO_ID = SERVICIO.ID_SERVICIO ";
            
            $strWhere       = " WHERE SERVICIO.PUNTO_ID = :intIdPunto
                                AND SERVICIO.ESTADO = :strEstadoActivo
                                AND ST.ELEMENTO_CLIENTE_ID = :intElementoClienteId
                                AND ST.INTERFACE_ELEMENTO_CLIENTE_ID = :intInterfaceElemClienteId
                                AND PROD.NOMBRE_TECNICO = :strNombreTecnicoProducto
                                AND SERVICIO.PUNTO_FACTURACION_ID IS NOT NULL
                                AND SERVICIO.MESES_RESTANTES IS NOT NULL ";
            
            
            $strOrderBy     = " ORDER BY SERVICIO.FE_CREACION DESC ";
            
            $objRsm->addScalarResult('ID_SERVICIO', 'idServicio', 'integer');
            
            $objRsmCount->addScalarResult('TOTAL', 'total', 'integer');
            
            $objNtvQuery->setParameter('intIdPunto', $arrayParametros['intIdPunto']);
            $objNtvQueryCount->setParameter('intIdPunto', $arrayParametros['intIdPunto']);
            
            $objNtvQuery->setParameter('strEstadoActivo', 'Activo');
            $objNtvQueryCount->setParameter('strEstadoActivo', 'Activo');
            
            $objNtvQuery->setParameter('intElementoClienteId', $arrayParametros['intElementoClienteId']);
            $objNtvQueryCount->setParameter('intElementoClienteId', $arrayParametros['intElementoClienteId']);
            
            $objNtvQuery->setParameter('intInterfaceElemClienteId', $arrayParametros['intInterfaceElemClienteId']);
            $objNtvQueryCount->setParameter('intInterfaceElemClienteId', $arrayParametros['intInterfaceElemClienteId']);
            
            $objNtvQuery->setParameter('strNombreTecnicoProducto', $arrayParametros['strNombreTecnicoProducto']);
            $objNtvQueryCount->setParameter('strNombreTecnicoProducto', $arrayParametros['strNombreTecnicoProducto']);
            
            $strQuerySql        = $strSelect . $strFrom. $strWhere .$strOrderBy;
            
            $objNtvQuery->setSQL($strQuerySql);
            $arrayResultado = $objNtvQuery->getResult();
            
            $strQuerySqlCount   = $strSelectCount . $strFrom .$strWhere;
            $objNtvQueryCount->setSQL($strQuerySqlCount);
            $intTotal           = $objNtvQueryCount->getSingleScalarResult();
            
            $arrayRespuesta["total"]        = $intTotal;
            $arrayRespuesta['resultado']    = $arrayResultado;
            
        }
        catch(\Exception $e)
        {
            error_log("No se ha podido obtener el servicio Dual Band por data técncia ".$e->getMessage());
        }

        return $arrayRespuesta;
    }
    
    /**
     * Función que sirve para invocar el procedimiento creado para el conteo de servicios Ips tanto dentro de un plan como en servicios adicionales
     * para realizar el proceso de reserva de ips por migración de tecnología de Tellion a Huawei/ZTE
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 29-10-2019
     * 
     * @param array $arrayParametros [
     *                                  "intIdElementoOlt"          => Id del olt,
     *                                  "strRetornaDataServicios"   => 'SI' o 'NO' se necesita obtener la información de los servicios Ips,
     *                                  "strRetornaTotalServicios"  => 'SI' o 'NO' se necesita obtener el total de Ips,
     *                                  "strDatabaseDsn"            => Conexión a la Base de Datos
     *                                  "strUserComercial"          => Usuario del esquema Comercial
     *                                  "strPasswordComercial"      => Password del esquema Comercial
     *                                ]
     * @return array $arrayRespuesta [
     *                                  "status"                => OK o ERROR,
     *                                  "mensaje"               => Mensaje de error,
     *                                  "objCursorServiciosIps" => Cursor con la información de los servicios Ips
     *                                  "intTotalServiciosIps"  => Total de Ips
     *                                ]
     */
    public function getRespuestaServiciosIpMigracion($arrayParametros)
    {
        $intIdElementoOlt           = ( isset($arrayParametros['intIdElementoOlt']) && !empty($arrayParametros['intIdElementoOlt']) )  
                                        ? $arrayParametros['intIdElementoOlt'] : 0;
        $strRetornaDataServicios    = ( isset($arrayParametros['strRetornaDataServicios']) && !empty($arrayParametros['strRetornaDataServicios'])) 
                                        ? $arrayParametros['strRetornaDataServicios'] : "";
        $strRetornaTotalServicios   = ( isset($arrayParametros['strRetornaTotalServicios'])  && !empty($arrayParametros['strRetornaTotalServicios']))
                                        ? $arrayParametros['strRetornaTotalServicios'] : "";
        $strStatus                  = "";
        $strMsjError                = "";
        $intTotalServiciosIps       = 0;
        $strDatabaseDsn             = ( isset($arrayParametros['strDatabaseDsn']) && !empty($arrayParametros['strDatabaseDsn']) )
                                        ? $arrayParametros['strDatabaseDsn'] : null;
        $strUserComercial           = ( isset($arrayParametros['strUserComercial']) && !empty($arrayParametros['strUserComercial']) )
                                        ? $arrayParametros['strUserComercial'] : null;
        $strPasswordComercial       = ( isset($arrayParametros['strPasswordComercial']) 
                                        && !empty($arrayParametros['strPasswordComercial']) ) ? $arrayParametros['strPasswordComercial'] : null;
        try
        {
            if( !empty($strDatabaseDsn) && !empty($strUserComercial) && !empty($strPasswordComercial) )
            {
                $objOciConexion             = oci_connect($strUserComercial, $strPasswordComercial, $strDatabaseDsn);
                $objCursorServiciosIps      = oci_new_cursor($objOciConexion);
                $strSQL                     = "BEGIN DB_COMERCIAL.TECNK_SERVICIOS.P_GET_SERV_IPS_MIGRACION(
                                                                                                            :intIdElementoOlt,
                                                                                                            :strRetornaDataServicios,
                                                                                                            :strRetornaTotalServicios,
                                                                                                            :strStatus,
                                                                                                            :strMsjError,
                                                                                                            :objCursorServiciosIps,
                                                                                                            :intTotalServiciosIps); 
                                               END;";
                $objStmt                    = oci_parse($objOciConexion,    $strSQL);
                oci_bind_by_name($objStmt, ":intIdElementoOlt",         $intIdElementoOlt);
                oci_bind_by_name($objStmt, ":strRetornaDataServicios",  $strRetornaDataServicios);
                oci_bind_by_name($objStmt, ":strRetornaTotalServicios", $strRetornaTotalServicios);
                oci_bind_by_name($objStmt, ":strStatus",                $strStatus, 5);
                oci_bind_by_name($objStmt, ":strMsjError",              $strMsjError, 4000);
                oci_bind_by_name($objStmt, ":objCursorServiciosIps",    $objCursorServiciosIps, -1, OCI_B_CURSOR);
                oci_bind_by_name($objStmt, ":intTotalServiciosIps",     $intTotalServiciosIps, 10);
                oci_execute($objStmt);
                oci_execute($objCursorServiciosIps, OCI_DEFAULT);
            }
            else
            {
                throw new \Exception('No se han enviado los parámetros adecuados para consultar la información del envío masivo. Database('.
                                     $strDatabaseDsn.'), UsrComercial('.$strUserComercial.'), PassComunicacion('.$strPasswordComercial.').');
            }
        }
        catch(\Exception $e)
        {
            $strStatus      = "ERROR";
            $strMsjError    = "Ha ocurrido una excepción al intentar realizar la consulta";
            error_log("Error en getRespuestaServiciosIpMigracion ".$e->getMessage());
            
        }
        $arrayRespuesta = array("status"                => $strStatus,
                                "mensaje"               => $strMsjError,
                                "objCursorServiciosIps" => $objCursorServiciosIps,
                                "intTotalServiciosIps"  => $intTotalServiciosIps);
        return $arrayRespuesta;
    }
    
    /**
     * Funcion que sirve para cargar los elementos clientes de un punto seleccionado
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 23-05-2016  
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 26-07-2016 - Se modifica para busque los CPEs a partir de la interface de la roseta/radio que preceda al CPE
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.3 10-08-2016 - Se modifica para que cuando el elemento CPE se encuentre directo en elemento_cliente_id se añada directamente
     *                           a la lista de cpes disponibles y cuando no se directo el CPE realiza la busqueda por enlaces
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.4 15-08-2016    - Cambio en la obtencion de MAC por CPE por cliente y devolver en arreglo el id del cpe a relacionar para luego
     *                              obtener las interfaces wan
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.5 26-10-2016    - Mostrar elementos clientes CPE solo los que no se encuentre eliminados
     * 
     * @author David León <mdleon@telconet.ec>
     * @version 1.6 07-01-2020    - Permite obtener CPE de servicios Security Ng Firewall.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.7 22-03-2021 Se abre la programacion para servicios Internet SDWAN
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.8 14-06-2021 Se verifica si el tipo de red es GPON, se valida que existe el id del servicio misma última milla.
     * @since 1.0
     */
    public function getJsonElementosClientesPorPunto($arrayParams)
    {
        $arrayCpes             = array();
        $intServicioId         = $arrayParams['idServicio'];
        $strEstado             = $arrayParams['estado'];
        $serviceTecnico        = $arrayParams['tecnicoService'];
        $intIdEmpresa          = $arrayParams['intIdEmpresa'];
        $idServicioReferencial = null;
        
        $objServicio = $this->_em->getRepository('schemaBundle:InfoServicio')->find($intServicioId);
        
        ///validamos para servicios sdwan
        $objProducto = $this->_em->getRepository('schemaBundle:AdmiProducto')->find($objServicio->getProductoId());
        if(is_object($objServicio) && !empty($objServicio) && 
            is_object($objServicio) && !empty($objServicio) && ($objProducto->getNombreTecnico() == 'INTMPLS' || 
                                                               $objProducto->getNombreTecnico() == 'INTERNET SDWAN'))
            {

                      $objServProdCaractSDWAN   = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                        'SDWAN',
                                                                                                        $objServicio->getProductoId()
                                                                                                        );
                        if(is_object($objServProdCaractSDWAN))
                        {
                            $arrayParamsInfoProds   = array("strCodEmpresa"     => $intIdEmpresa,
                                                            "intIdProducto"     => $objProducto->getId(),
                                                            "strNombreAsociadoProd"  => "PRODUCTO_RELACIONADO_SDWAN");
                            $arrayInfoMapeoProds    = $this->_em->getRepository('schemaBundle:InfoServicio')
                                                                        ->obtenerInfoMapeoProdsAsociados($arrayParamsInfoProds);
                            if(isset($arrayInfoMapeoProds) && !empty($arrayInfoMapeoProds) && $arrayInfoMapeoProds["strStatus"] == "OK")
                            {
                                $arrayData                  = $arrayInfoMapeoProds["arrayData"];
                                $intIdProductoAsoc          = $arrayData[0]["intIdProductoAsoc"];
                                $strNombreTecnicoProdAsoc   = $arrayData[0]["strNombreTecnicoProdAsoc"];
                                $strDescripcionProdAsoc     = $arrayData[0]["strDescripcionProdAsoc"];
                            }
                            else
                            {
                                $arrayRespuestaFinal[] = array('status'  => 'ERROR', 
                                                               'mensaje' => 'No se ha podido obtener la relación del producto Intenet Mpls'
                                                                                . 'para realizar migración a Sdwan');
                                return $arrayRespuestaFinal;
                            }
                            if(isset($strNombreTecnicoProdAsoc) && !empty($strNombreTecnicoProdAsoc)&&
                               isset($intIdProductoAsoc) && !empty($intIdProductoAsoc) &&
                               !empty($strDescripcionProdAsoc) )
                                {
                                $arrayParametroProducto = array("id"                    => $intIdProductoAsoc,
                                                                "descripcionProducto"   => $strDescripcionProdAsoc,
                                                                "nombreTecnico"         => $strNombreTecnicoProdAsoc,
                                                                "empresaCod"            => $intIdEmpresa, 
                                                                "estado"                => "Activo");
                               
                                $objProdAsoc                = $this->_em->getRepository('schemaBundle:AdmiProducto')
                                                                                ->findOneBy($arrayParametroProducto);
                                if(is_object($objProdAsoc) && !empty($objProdAsoc))
                                {
                                    $arrayServiciosTecnicosPorPuntoPro = $this->getElementosPorPuntoProduct($objServicio,$objProdAsoc);     
        
                                }
                                else
                                {
                                    $arrayRespuestaFinal[]  = array('status'    => 'ERROR', 
                                                                    'mensaje'   => 'No se ha podido obtener el producto ip asociado');
                                    return $arrayRespuestaFinal;
                                }
                                
                                foreach($arrayServiciosTecnicosPorPuntoPro as $arrayDatosServTecProd)
                                { 
                                    if(!$idServicioReferencial || ($idServicioReferencial && 
                                        $idServicioReferencial == $arrayDatosServTecProd['servicioId']))
                                    {
                                        $arrayDatoCpe['propiedad']  = "N/A";
                                        $arrayDatoCpe['gestion']    = "N/A";
                                        $arrayDatoCpe['administra'] = "N/A";
                                        $arrayDatoCpe['mac']        = "N/A";  
                                
                                        if($arrayDatosServTecProd["elementoClienteId"])
                                        {
                                            //Verificar que el elemento cliente no sea directamente el CPE
                                            $objElemento = $this->_em->getRepository('schemaBundle:InfoElemento')
                                                                        ->find($arrayDatosServTecProd["elementoClienteId"]);
                                            if($objElemento && $objElemento->getEstado()!='Eliminado')
                                            {
                                                $objDetElePropiedad = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                ->findOneBy(array("elementoId"       => $objElemento->getId(),
                                                                                                    "detalleNombre"    => "PROPIEDAD",
                                                                                                    "estado"           => "Activo"));



                                                if($objDetElePropiedad)
                                                {
                                                    $arrayDatoCpe['propiedad'] = $objDetElePropiedad->getDetalleValor();
                                                }


                                                $arrayDatoCpe['idElemento']         = $objElemento->getId();
                                                $arrayDatoCpe['nombreElemento']     = $objElemento->getNombreElemento();
                                                $arrayDatoCpe['serieElemento']      = $objElemento->getSerieFisica();
                                                $arrayDatoCpe['modeloElemento']     = $objElemento->getModeloElementoId()->getNombreModeloElemento();
                                                $arrayDatoCpe['versionElemento']    = $objElemento->getVersionOs();
                                                $arrayDatoCpe['servicioId']         = $arrayDatosServTecProd['servicioId'];

                                                if(!$this->verificarCpeRepetido($arrayCpes,$arrayDatoCpe))
                                                {
                                                    $arrayCpes[] = $arrayDatoCpe;
                                                }            
                                            }
                                        }
                                    }
                                }
                            }
                        }
            }
        
        //
        //Obtener si el servicio proviene de una ultima milla existente
        $objServProdCaractMismaUM   = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                         'SERVICIO_MISMA_ULTIMA_MILLA',
                                                                                         $objServicio->getProductoId()
                                                                                         );
        //Se utiliza ultima Milla existente
        if($objServProdCaractMismaUM)
        {
            $idServicioReferencial  = $objServProdCaractMismaUM->getValor();
        }

        //obtener tipo red
        $strTipoRed = "MPLS";
        $objCaractTipoRed = $serviceTecnico->getServicioProductoCaracteristica($objServicio, 'TIPO_RED',
                                                                               $objServicio->getProductoId());
        if(is_object($objCaractTipoRed))
        {
            $strTipoRed = $objCaractTipoRed->getValor();
        }
        //se verifica si el servicio es tipo de red GPON
        $booleanTipoRedGpon = false;
        $arrayParVerTipoRed = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                'COMERCIAL',
                                                                                                '',
                                                                                                'VERIFICAR TIPO RED',
                                                                                                'VERIFICAR_GPON',
                                                                                                $strTipoRed,
                                                                                                '',
                                                                                                '',
                                                                                                '');
        if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
        {
            $booleanTipoRedGpon = true;
        }
        if(empty($idServicioReferencial) && $booleanTipoRedGpon)
        {
            return '{encontrados:[]}';
        }

        $arrayServiciosTecnicosPorPunto = $this->getElementosClientesPorPunto($objServicio,$strEstado);
       
        foreach($arrayServiciosTecnicosPorPunto as $arrayDatosServicioTecnico)
        { 
            if(!$idServicioReferencial || ($idServicioReferencial && $idServicioReferencial == $arrayDatosServicioTecnico['servicioId']))
            {
                $arrayDatoCpe['propiedad']  = "N/A";
                $arrayDatoCpe['gestion']    = "N/A";
                $arrayDatoCpe['administra'] = "N/A";
                $arrayDatoCpe['mac']        = "N/A";       

                //obtener servicio
                $objServicioCpe    = $this->_em->getRepository('schemaBundle:InfoServicio')->find($arrayDatosServicioTecnico['servicioId']);
                //obtener tipo red
                $strTipoRedServCpe = "MPLS";
                if(is_object($objServicioCpe) && is_object($objServicioCpe->getProductoId()))
                {
                    $objCaractTipoRed = $serviceTecnico->getServicioProductoCaracteristica($objServicioCpe, 'TIPO_RED',
                                                                                           $objServicioCpe->getProductoId());
                    if(is_object($objCaractTipoRed))
                    {
                        $strTipoRedServCpe = $objCaractTipoRed->getValor();
                    }
                }

                //Si el servicio tiene informacion de cpe ( servicios de internet ) se presentarán los cps relacionados
                //se verifica que los servicios sean del mismo tipo red
                if(isset($arrayDatosServicioTecnico["elementoClienteId"]) && $strTipoRed == $strTipoRedServCpe)
                {
                    //Verificar que el elemento cliente no sea directamente el CPE
                    $objElemento = $this->_em->getRepository('schemaBundle:InfoElemento')->find($arrayDatosServicioTecnico["elementoClienteId"]);

                    if($objElemento->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento() != 'CPE')
                    {
                        $arrayDatosServicioTecnico['tipoElemento']                = "CPE";
                        $arrayDatosServicioTecnico['interfaceElementoConectorId'] = $arrayDatosServicioTecnico["interfaceElementoClienteId"];                       

                        $arrayDatoCpe = $this->_em->getRepository('schemaBundle:InfoElemento')
                                                  ->getElementoClienteByTipoElemento($arrayDatosServicioTecnico);
                        if($arrayDatoCpe['msg'] == "FOUND")
                        {
                            $objElemento = $this->_em->getRepository('schemaBundle:InfoElemento')->find($arrayDatoCpe['idElemento']);


                        }
                    }

                    if($objElemento && $objElemento->getEstado()!='Eliminado')
                    {
                        $objDetElePropiedad = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                        ->findOneBy(array("elementoId"       => $objElemento->getId(),
                                                                            "detalleNombre"    => "PROPIEDAD",
                                                                            "estado"           => "Activo"));

                        $objDetEleGestion = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                    ->findOneBy(array("elementoId"       => $objElemento->getId(),
                                                                        "detalleNombre"    => "GESTION REMOTA",
                                                                        "estado"           => "Activo"));

                        $objDetEleAdministra = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                    ->findOneBy(array("elementoId"       => $objElemento->getId(),
                                                                        "detalleNombre"    => "ADMINISTRA",
                                                                        "estado"           => "Activo"));

                        $arrayRespuesta = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                                    ->getMacCpePorServicioInterface($intServicioId);

                        $strMac= "";

                        if($arrayRespuesta)
                        {
                            $strMac = $arrayRespuesta['mac'];
                        }

                        if($objDetElePropiedad)
                        {
                            $arrayDatoCpe['propiedad'] = $objDetElePropiedad->getDetalleValor();
                        }

                        if($objDetEleGestion)
                        {
                            $arrayDatoCpe['gestion'] = $objDetEleGestion->getDetalleValor();
                        }

                        if($objDetEleAdministra)
                        {
                            $arrayDatoCpe['administra'] = $objDetEleAdministra->getDetalleValor();
                        }

                        $arrayDatoCpe['mac']                = $strMac;
                        $arrayDatoCpe['idElemento']         = $objElemento->getId();
                        $arrayDatoCpe['nombreElemento']     = $objElemento->getNombreElemento();
                        $arrayDatoCpe['serieElemento']      = $objElemento->getSerieFisica();
                        $arrayDatoCpe['modeloElemento']     = $objElemento->getModeloElementoId()->getNombreModeloElemento();
                        $arrayDatoCpe['versionElemento']    = $objElemento->getVersionOs();
                        $arrayDatoCpe['servicioId']         = $arrayDatosServicioTecnico['servicioId'];

                        if(!$this->verificarCpeRepetido($arrayCpes,$arrayDatoCpe))
                        {
                            $arrayCpes[] = $arrayDatoCpe;
                        }            
                    }
                
                }
            }
        }
       
        $data      = json_encode($arrayCpes);
        $resultado = '{encontrados:' . $data . '}';

        return $resultado;
    }
    
    public function verificarCpeRepetido($arrayCpes , $cpeNuevo)
    {        
        foreach($arrayCpes as $infoCpe)
        {
            if($cpeNuevo['idElemento'] == $infoCpe['idElemento'])
            {
                return true;
            }
        }
        
        return false;
    }
    
   /**
     * Funcion que sirve para obtener el elemento cliente de un servicio wifi
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 02-09-2016   
     * 
     * @since 1.0
     */    
    
    public function getJsonElementosClientesPorPuntoWifi($idServicio, $elementoClienteId)
    {
        $arrayCpes = array();
                
        $objElemento = $this->_em->getRepository('schemaBundle:InfoElemento')->find($elementoClienteId);

        $objDetElePropiedad = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                      ->findOneBy(array("elementoId"       => $objElemento->getId(),
                                                        "detalleNombre"    => "PROPIEDAD",
                                                        "estado"           => "Activo"));

        $objDetEleGestion = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                      ->findOneBy(array("elementoId"       => $objElemento->getId(),
                                                        "detalleNombre"    => "GESTION REMOTA",
                                                        "estado"           => "Activo"));

        $objDetEleAdministra = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                      ->findOneBy(array("elementoId"       => $objElemento->getId(),
                                                        "detalleNombre"    => "ADMINISTRA",
                                                        "estado"           => "Activo"));

        $arrayRespuesta = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')->getMacCpePorServicioInterface($idServicio);
                
        $strMac= "";

        if($arrayRespuesta)
        {
            $strMac = $arrayRespuesta['mac'];
        }       

        if($objDetElePropiedad)
        {
            $arrayDatoCpe['propiedad'] = $objDetElePropiedad->getDetalleValor();
        }

        if($objDetEleGestion)
        {
            $arrayDatoCpe['gestion'] = $objDetEleGestion->getDetalleValor();
        }

        if($objDetEleAdministra)
        {
            $arrayDatoCpe['administra'] = $objDetEleAdministra->getDetalleValor();
        }
        
        $arrayDatoCpe['mac']                = $strMac;        
        $arrayDatoCpe['nombreElemento']     = $objElemento->getNombreElemento();
        $arrayDatoCpe['serieElemento']      = $objElemento->getSerieFisica();
        $arrayDatoCpe['modeloElemento']     = $objElemento->getModeloElementoId()->getNombreModeloElemento();
        $arrayDatoCpe['versionElemento']    = $objElemento->getVersionOs();
        $arrayDatoCpe['servicioId']         = $idServicio;
        $arrayDatoCpe['idElemento']         = $objElemento->getId();
        $arrayDatoCpe['tipoElemento']       = 'WIFI';

        $arrayCpes = $arrayDatoCpe;        
   
        $data      = json_encode($arrayCpes);
        $resultado = '{encontrados:' . $data . '}';

        return $resultado;
    }    
    
    /**
     * Funcion que sirve para obtenere registros de elementos de cliente por punto
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 23-05-2016   
     * 
     * @since 1.0
     */
    public function getElementosClientesPorPunto($objServicio, $strEstado)
    {
        $rsm                = new ResultSetMappingBuilder($this->_em);
        $query              = $this->_em->createNativeQuery(null, $rsm);
        
        $objServicioTecnico = $this->_em
                                   ->getRepository('schemaBundle:InfoServicioTecnico')
                                   ->findOneBy(array("servicioId"=>$objServicio->getId()));

        $sql = "SELECT servicio.id_servicio AS ID_SERVICIO,
                    tecnico.elemento_cliente_id AS ELEMENTO_CLIENTE_ID,
                    tecnico.interface_elemento_cliente_id AS INTERFACE_ELEMENTO_CLIENTE_ID,
                    tecnico.INTERFACE_ELEMENTO_CONECTOR_ID AS INTERFACE_ELEMENTO_CONECTOR_ID,
                    tecnico.ELEMENTO_CONECTOR_ID AS ELEMENTO_CONECTOR_ID,
                    tipoMedio.NOMBRE_TIPO_MEDIO AS NOMBRE_TIPO_MEDIO
                    FROM info_servicio servicio,
                    info_punto punto,
                    info_servicio_tecnico tecnico,
                    admi_tipo_medio tipoMedio
                  WHERE servicio.id_servicio  = tecnico.servicio_id
                  AND servicio.punto_id       = punto.id_punto
                  AND tipoMedio.id_tipo_medio = tecnico.ultima_milla_id
                  AND punto.id_punto          = :idPunto                  
                  AND servicio.estado         IN (:estados)";

        $query->setParameter("idPunto", $objServicio->getPuntoId());        
        $query->setParameter("estados", array("Activo","EnPruebas","In-Corte"));

        $rsm->addScalarResult('ID_SERVICIO',                    'servicioId',                   'integer');
        $rsm->addScalarResult('ELEMENTO_CLIENTE_ID',            'elementoClienteId',            'integer');
        $rsm->addScalarResult('INTERFACE_ELEMENTO_CLIENTE_ID',  'interfaceElementoClienteId',   'integer');
        $rsm->addScalarResult('INTERFACE_ELEMENTO_CONECTOR_ID', 'interfaceElementoConectorId',  'integer');
        $rsm->addScalarResult('ELEMENTO_CONECTOR_ID',           'elementoConectorId',           'integer');
        $rsm->addScalarResult('NOMBRE_TIPO_MEDIO',              'nombreTipoMedio',              'string' );
        
        $query->setSQL($sql);
        $datos = $query->getScalarResult();

        return $datos;
    }
    
     /**
     * Obtiene la info servicio tecnico segun el id punto y el producto
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 27-11-2015
     * 
     * @param integer $idPunto
     * @param integer $nombreTecnicoProd
     * 
     * @return array $arraResult
     **/
    public function getServiciotecnicoByPuntoProd($idPunto, $nombreTecnicoProd)
    {
        $rsm = new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null, $rsm);

        $sql = "SELECT ST.SERVICIO_ID,
                  ST.ELEMENTO_ID,
                  ST.INTERFACE_ELEMENTO_ID,
                  ST.ELEMENTO_CLIENTE_ID,
                  ST.INTERFACE_ELEMENTO_CLIENTE_ID,
                  ST.ELEMENTO_CONTENEDOR_ID,
                  ST.ELEMENTO_CONECTOR_ID,
                  ST.INTERFACE_ELEMENTO_CONECTOR_ID
                FROM INFO_SERVICIO S,
                  INFO_PLAN_DET PD,
                  ADMI_PRODUCTO P,
                  INFO_SERVICIO_TECNICO ST
                WHERE S.PLAN_ID      = PD.PLAN_ID
                AND PD.PRODUCTO_ID   = P.ID_PRODUCTO
                AND ST.SERVICIO_ID = S.ID_SERVICIO
                AND P.NOMBRE_TECNICO = :nombreTecnicoProd
                AND S.PUNTO_ID = :puntoId";

        $query->setParameter("puntoId", $idPunto);
        $query->setParameter("nombreTecnicoProd", $nombreTecnicoProd);

        $rsm->addScalarResult('SERVICIO_ID', 'servicio', 'integer');
        $rsm->addScalarResult('ELEMENTO_ID', 'elemento', 'integer');
        $rsm->addScalarResult('INTERFACE_ELEMENTO_ID', 'interfaceElemento', 'integer');
        $rsm->addScalarResult('ELEMENTO_CLIENTE_ID', 'elementoCliente', 'integer');
        $rsm->addScalarResult('INTERFACE_ELEMENTO_CLIENTE_ID', 'interfaceElementoCliente', 'integer');
        $rsm->addScalarResult('ELEMENTO_CONTENEDOR_ID', 'elementoContenedor', 'integer');
        $rsm->addScalarResult('ELEMENTO_CONECTOR_ID', 'elementoConector', 'integer');
        $rsm->addScalarResult('INTERFACE_ELEMENTO_CONECTOR_ID', 'interfaceElementoConector', 'integer');
        
        $query->setSQL($sql);
        $datos = $query->getScalarResult();

        return $datos;
    }
    
    /*
     * INICIO - FUNCIONES DE SERVICIO PARTE TECNICA
     */
    
    /**
     * Obtiene los hilos disponibles del elemento conector 
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 29-03-2016
     * 
     * Se agrega campo que concatena numero hilo con color de hilo, también se agregan los estados
     * a los enlaces y al registro de buffer_hilo.
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 02-05-2016
     * @param array $arrayParametros [ idElemento, estadosInterfaces, estadoInterfaceConect, empresaCod ]
     * @return array $arrDatosTecnicos
     **/
    public function getHilosDisponibles($arrayParametros)
    {        
        $objResultSetMap    = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery     = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        $strSql             = " SELECT PUERTO.ID_INTERFACE_ELEMENTO ID_INTERFACE_ELEMENTO,
                                    PUERTO.NOMBRE_INTERFACE_ELEMENTO NOMBRE_INTERFACE_ELEMENTO,
                                    HILO.ID_HILO ID_HILO,
                                    HILO.COLOR_HILO COLOR_HILO,
                                    HILO.NUMERO_HILO NUMERO_HILO,
                                    HILO.NUMERO_HILO ||' - '|| HILO.COLOR_HILO NUMERO_COLOR_HILO,
                                    PUERTO_FIN.ID_INTERFACE_ELEMENTO ID_INTERFACE_ELEMENTO_OUT,
                                    PUERTO_FIN.NOMBRE_INTERFACE_ELEMENTO NOMBRE_INTERFACE_ELEMENTO_OUT
                                FROM DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO PUERTO,
                                     DB_INFRAESTRUCTURA.INFO_ENLACE             ENLACE,
                                     DB_INFRAESTRUCTURA.INFO_BUFFER_HILO        BUFFER_HILO,
                                     DB_INFRAESTRUCTURA.ADMI_HILO               HILO,
                                     DB_INFRAESTRUCTURA.INFO_ENLACE             ENLACE2,
                                     DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO PUERTO_FIN
                                WHERE ENLACE.INTERFACE_ELEMENTO_FIN_ID = PUERTO.ID_INTERFACE_ELEMENTO
                                AND ENLACE.ESTADO                      = :estadoEnlace
                                AND ENLACE.BUFFER_HILO_ID              = BUFFER_HILO.ID_BUFFER_HILO
                                AND BUFFER_HILO.HILO_ID                = HILO.ID_HILO
                                AND BUFFER_HILO.EMPRESA_COD            = :empresaCod
                                AND BUFFER_HILO.ESTADO                 = :estadoEnlace
                                AND PUERTO.ELEMENTO_ID                 = :idElemento 
                                AND PUERTO.ESTADO                      = :estadoInterfaceConect
                                AND PUERTO.ID_INTERFACE_ELEMENTO       = ENLACE2.INTERFACE_ELEMENTO_INI_ID
                                AND ENLACE2.ESTADO                     = :estadoEnlace
                                AND ENLACE2.INTERFACE_ELEMENTO_FIN_ID  = PUERTO_FIN.ID_INTERFACE_ELEMENTO
                                AND PUERTO_FIN.ESTADO IN (:estadosInterfaces)";
        
        $objResultSetMap->addScalarResult('ID_INTERFACE_ELEMENTO',          'idInterfaceElemento',          'integer');
        $objResultSetMap->addScalarResult('NOMBRE_INTERFACE_ELEMENTO',      'nombreInterfaceElemento',      'string');
        $objResultSetMap->addScalarResult('ID_HILO',                        'idHilo',                       'integer');
        $objResultSetMap->addScalarResult('COLOR_HILO',                     'colorHilo',                    'string');
        $objResultSetMap->addScalarResult('NUMERO_HILO',                    'numeroHilo',                   'integer');
        $objResultSetMap->addScalarResult('NUMERO_COLOR_HILO',              'numeroColorHilo',              'string');
        $objResultSetMap->addScalarResult('ID_INTERFACE_ELEMENTO_OUT',      'idInterfaceElementoOut',       'integer');
        $objResultSetMap->addScalarResult('NOMBRE_INTERFACE_ELEMENTO_OUT',  'nombreInterfaceElementoOut',   'string');
        
        $objNativeQuery->setParameter("idElemento",             $arrayParametros['idElemento']);
        $objNativeQuery->setParameter("estadosInterfaces",      $arrayParametros['estadosInterfaces']);
        $objNativeQuery->setParameter("estadoInterfaceConect",  $arrayParametros['estadoInterfaceConect']);
        $objNativeQuery->setParameter("empresaCod",             $arrayParametros['empresaCod']);
        $objNativeQuery->setParameter("estadoEnlace",           "Activo");
        
        $objNativeQuery->setSQL($strSql);
        
        $arrDatosTecnicos = $objNativeQuery->getResult();

        return $arrDatosTecnicos;
    }
    
    /**
     * Funcion que ejecuta un sql para obtener los datos técnicos de un servicio
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 17-12-2015
     * @author Kenneth Jimenez <kjimenez@telconet.ec>
     * @version 2.0 28-03-2016
     * @author Juan Lafuente <jlafuente@telconet.ec>
     * @version 3.0 11-04-2016 - Se agrega dos campos mas (ID_INTERFACE_ELEMENTO_CON, NOMBRE_INTERFACE_ELEMENTO_CON)
     * 
     * @author Francisco Adum <fadum@telconet.e>
     * @version 3.1 02-05-2016 - Se agrega campo que concatena numero hilo con color de hilo.
     * 
     * @author Duval Medina C. <dmedina@telconet.ec>
     * @version 3.2 2016-05-21 Obtener el createNativeQuery usando el Schema Comercial recibido
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 3.3 2016-05-23 Obtener el createNativeQuery usando el Schema Comercial recibido
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 3.4 2016-07-22 Discriminar consultas dado el tipo de factibilidad enviado como parametro
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 3.5 2017-05-10 Se agrega condicion para que soporte ultima milla TERCERIZADA y SATELITAL
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 3.6 2017-09-19 Se agrega condicion para que soporte flujos de DATACENTER
     * 
     * @author 3.7 <ppin@telconet.ec>
     * @version 3.7 2019-11-20 - Se agrega soporte para servicios GPON, con ultima milla FTTx y de tipo RUTA.
     * 
     * Costo ( Consulta para flujos DC ) : 9
     * 
     * @param $arrayParametros [idServicioTecnico, idServicio, idElemento, nombreELemento, idInterfaceElemento, nombreInterfaceElemento,
     *                          idElementoConector, capacidad1, capacidad2]
     * 
     * @return $arrayDatosTecnicos ['idServicio', 'emComercial']
     */
    public function getDatosFactibilidad($arrayParametros)
    {
        try
        {
            $objResultSetMap    = new ResultSetMappingBuilder($arrayParametros['emComercial']);
            $objNativeQuery     = $arrayParametros['emComercial']->createNativeQuery(null, $objResultSetMap);
            $boolIsClearChannel = false;
            $boolEsDataCenter = false;
            if(isset($arrayParametros['idServicio']) )
            {
                $objInfoServicioInternet = $this->_em->getRepository('schemaBundle:InfoServicio')
                    ->find($arrayParametros['idServicio']);
                $boolIsClearChannel = ($objInfoServicioInternet->getProductoId()
                            ->getDescripcionProducto()=='CLEAR CHANNEL PUNTO A PUNTO')?true:false;
            }
            if(isset($arrayParametros['esDataCenter']) && $arrayParametros['esDataCenter'] == "SI")
            {
                $boolEsDataCenter = true;
            }
            
            if ($arrayParametros['ultimaMilla'] == "Fibra Optica" && $arrayParametros['tipoUM'] == 'RUTA' && !$boolIsClearChannel)
            {
                $strSql             = " SELECT 
                                            TECNICO.ID_SERVICIO_TECNICO                     ID_SERVICIO_TECNICO, 
                                            SERVICIO.ID_SERVICIO                            ID_SERVICIO, 
                                            ELEMENTO.ID_ELEMENTO                            ID_ELEMENTO, 
                                            ELEMENTO.NOMBRE_ELEMENTO                        NOMBRE_ELEMENTO, 
                                            DETALLE_ANILLO.DETALLE_VALOR                    ANILLO,
                                            PUERTO.ID_INTERFACE_ELEMENTO                    ID_INTERFACE_ELEMENTO, 
                                            PUERTO.NOMBRE_INTERFACE_ELEMENTO                NOMBRE_INTERFACE_ELEMENTO,
                                            ELEMENTO_CONECTOR.ID_ELEMENTO                   ID_ELEMENTO_CONECTOR,
                                            ELEMENTO_CONECTOR.NOMBRE_ELEMENTO               NOMBRE_ELEMENTO_CONECTOR,
                                            ELEMENTO_CONTENEDOR.ID_ELEMENTO                 ID_ELEMENTO_CONTENEDOR,
                                            ELEMENTO_CONTENEDOR.NOMBRE_ELEMENTO             NOMBRE_ELEMENTO_CONTENEDOR,
                                            PUERTO_CONECTOR.ID_INTERFACE_ELEMENTO           ID_INTERFACE_ELEMENTO_CON, 
                                            PUERTO_CONECTOR.NOMBRE_INTERFACE_ELEMENTO       NOMBRE_INTERFACE_ELEMENTO_CON,
                                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,'CAPACIDAD1') CAPACIDAD1,                      
                                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,'CAPACIDAD2') CAPACIDAD2,
                                            HILO.COLOR_HILO                                 COLOR_HILO,
                                            HILO.NUMERO_HILO ||' - '|| HILO.COLOR_HILO      NUMERO_COLOR_HILO
                                        FROM 
                                            DB_COMERCIAL.INFO_SERVICIO_TECNICO              TECNICO,
                                            DB_COMERCIAL.INFO_SERVICIO                      SERVICIO,
                                            DB_INFRAESTRUCTURA.INFO_ELEMENTO                ELEMENTO,
                                            DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO      PUERTO,
                                            DB_INFRAESTRUCTURA.INFO_ELEMENTO                ELEMENTO_CONECTOR,
                                            DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO      PUERTO_CONECTOR,
                                            DB_INFRAESTRUCTURA.INFO_ELEMENTO                ELEMENTO_CONTENEDOR,
                                            DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO        DETALLE_ANILLO,
                                            DB_INFRAESTRUCTURA.INFO_ENLACE                  ENLACE,
                                            DB_INFRAESTRUCTURA.INFO_ENLACE                  ENLACE_INI,
                                            DB_INFRAESTRUCTURA.INFO_BUFFER_HILO             BUFFER_HILO,
                                            DB_INFRAESTRUCTURA.ADMI_HILO                    HILO
                                        WHERE 
                                            SERVICIO.ID_SERVICIO                        = TECNICO.SERVICIO_ID
                                            AND TECNICO.ELEMENTO_ID                     = ELEMENTO.ID_ELEMENTO
                                            AND ELEMENTO.ID_ELEMENTO                    = DETALLE_ANILLO.ELEMENTO_ID
                                            AND DETALLE_ANILLO.DETALLE_NOMBRE           = :detalleNombre
                                            AND DETALLE_ANILLO.ESTADO                   = :estadoDetalle
                                            AND TECNICO.INTERFACE_ELEMENTO_ID           = PUERTO.ID_INTERFACE_ELEMENTO
                                            AND TECNICO.ELEMENTO_CONECTOR_ID            = ELEMENTO_CONECTOR.ID_ELEMENTO
                                            AND TECNICO.ELEMENTO_CONTENEDOR_ID          = ELEMENTO_CONTENEDOR.ID_ELEMENTO
                                            AND TECNICO.INTERFACE_ELEMENTO_CONECTOR_ID  = PUERTO_CONECTOR.ID_INTERFACE_ELEMENTO
                                            AND TECNICO.INTERFACE_ELEMENTO_CONECTOR_ID  = ENLACE.INTERFACE_ELEMENTO_FIN_ID
                                            AND ENLACE.ESTADO                           = :estadoDetalle
                                            AND ENLACE.INTERFACE_ELEMENTO_INI_ID        = ENLACE_INI.INTERFACE_ELEMENTO_FIN_ID
                                            AND ENLACE_INI.ESTADO                       = :estadoDetalle
                                            AND ENLACE_INI.BUFFER_HILO_ID               = BUFFER_HILO.ID_BUFFER_HILO
                                            AND BUFFER_HILO.HILO_ID                     = HILO.ID_HILO
                                            AND SERVICIO.ID_SERVICIO                    = :idServicio";


                $objResultSetMap->addScalarResult('ID_SERVICIO_TECNICO',            'idServicioTecnico',                'integer');
                $objResultSetMap->addScalarResult('ID_SERVICIO',                    'idServicio',                       'integer');
                //....
                $objResultSetMap->addScalarResult('ID_ELEMENTO',                    'idElemento',                       'integer');
                $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO',                'nombreElemento',                   'string');
                $objResultSetMap->addScalarResult('ANILLO',                         'anillo',                           'string');
                $objResultSetMap->addScalarResult('ID_INTERFACE_ELEMENTO',          'idInterfaceElemento',              'integer');
                $objResultSetMap->addScalarResult('NOMBRE_INTERFACE_ELEMENTO',      'nombreInterfaceElemento',          'string');
                //....
                $objResultSetMap->addScalarResult('ID_ELEMENTO_CONECTOR',           'idElementoConector',               'integer');
                $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO_CONECTOR',       'nombreElementoConector',           'string');
                $objResultSetMap->addScalarResult('ID_INTERFACE_ELEMENTO_CON',      'idInterfaceElementoConector',      'integer');
                $objResultSetMap->addScalarResult('NOMBRE_INTERFACE_ELEMENTO_CON',  'nombreInterfaceElementoConector',  'string');
                //.....
                $objResultSetMap->addScalarResult('ID_ELEMENTO_CONTENEDOR',         'idElementoContenedor',             'integer');
                $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO_CONTENEDOR',     'nombreElementoContenedor',         'string');
                //.....
                $objResultSetMap->addScalarResult('CAPACIDAD1',                     'capacidad1',                       'integer');
                $objResultSetMap->addScalarResult('CAPACIDAD2',                     'capacidad2',                       'integer');
                $objResultSetMap->addScalarResult('COLOR_HILO',                     'colorHilo',                        'string');
                $objResultSetMap->addScalarResult('NUMERO_COLOR_HILO',              'numeroColorHilo',                  'string');
            }
            else if ($arrayParametros['ultimaMilla'] == "Radio" && !$boolIsClearChannel)
            {
                $strSql             = " SELECT 
                                            TECNICO.ID_SERVICIO_TECNICO                     ID_SERVICIO_TECNICO, 
                                            SERVICIO.ID_SERVICIO                            ID_SERVICIO, 
                                            ELEMENTO.ID_ELEMENTO                            ID_ELEMENTO, 
                                            ELEMENTO.NOMBRE_ELEMENTO                        NOMBRE_ELEMENTO, 
                                            DETALLE_ANILLO.DETALLE_VALOR                    ANILLO,
                                            PUERTO.ID_INTERFACE_ELEMENTO                    ID_INTERFACE_ELEMENTO, 
                                            PUERTO.NOMBRE_INTERFACE_ELEMENTO                NOMBRE_INTERFACE_ELEMENTO,
                                            ELEMENTO_CONECTOR.ID_ELEMENTO                   ID_ELEMENTO_CONECTOR,
                                            ELEMENTO_CONECTOR.NOMBRE_ELEMENTO               NOMBRE_ELEMENTO_CONECTOR,
                                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,'CAPACIDAD1') CAPACIDAD1,                      
                                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,'CAPACIDAD2') CAPACIDAD2
                                        FROM 
                                            DB_COMERCIAL.INFO_SERVICIO_TECNICO              TECNICO,
                                            DB_COMERCIAL.INFO_SERVICIO                      SERVICIO,
                                            DB_INFRAESTRUCTURA.INFO_ELEMENTO                ELEMENTO,
                                            DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO      PUERTO,
                                            DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO        DETALLE_ANILLO,
                                            DB_INFRAESTRUCTURA.INFO_ELEMENTO                ELEMENTO_CONECTOR
                                        WHERE SERVICIO.ID_SERVICIO                      = TECNICO.SERVICIO_ID
                                            AND TECNICO.ELEMENTO_ID                     = ELEMENTO.ID_ELEMENTO
                                            AND ELEMENTO.ID_ELEMENTO                    = DETALLE_ANILLO.ELEMENTO_ID
                                            AND DETALLE_ANILLO.DETALLE_NOMBRE           = :detalleNombre
                                            AND DETALLE_ANILLO.ESTADO                   = :estadoDetalle
                                            AND TECNICO.INTERFACE_ELEMENTO_ID           = PUERTO.ID_INTERFACE_ELEMENTO
                                            AND TECNICO.ELEMENTO_CONECTOR_ID            = ELEMENTO_CONECTOR.ID_ELEMENTO
                                            AND SERVICIO.ID_SERVICIO                    = :idServicio";


                $objResultSetMap->addScalarResult('ID_SERVICIO_TECNICO',            'idServicioTecnico',                'integer');
                $objResultSetMap->addScalarResult('ID_SERVICIO',                    'idServicio',                       'integer');
                //....
                $objResultSetMap->addScalarResult('ID_ELEMENTO',                    'idElemento',                       'integer');
                $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO',                'nombreElemento',                   'string');
                $objResultSetMap->addScalarResult('ANILLO',                         'anillo',                           'string');
                $objResultSetMap->addScalarResult('ID_INTERFACE_ELEMENTO',          'idInterfaceElemento',              'integer');
                $objResultSetMap->addScalarResult('NOMBRE_INTERFACE_ELEMENTO',      'nombreInterfaceElemento',          'string');
                //....
                $objResultSetMap->addScalarResult('ID_ELEMENTO_CONECTOR',           'idElementoConector',               'integer');
                $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO_CONECTOR',       'nombreElementoConector',           'string');
                //.....
                $objResultSetMap->addScalarResult('CAPACIDAD1',                     'capacidad1',                       'integer');
                $objResultSetMap->addScalarResult('CAPACIDAD2',                     'capacidad2',                       'integer');
            }
            else if($arrayParametros['ultimaMilla'] == "FTTx" && $arrayParametros['tipoUM'] == 'RUTA' && !$boolIsClearChannel )
            {
                $strSql             = "SELECT SERVICIO.ID_SERVICIO                              ID_SERVICIO,
                                              ELEMENTO.NOMBRE_ELEMENTO                          NOMBRE_ELEMENTO,
                                              ELEMENTO.ID_ELEMENTO                              ID_ELEMENTO, 
                                              ELEMENTO_CONECTOR.ID_ELEMENTO                     ID_ELEMENTO_CONECTOR,
                                              ELEMENTO_CONECTOR.NOMBRE_ELEMENTO                 NOMBRE_ELEMENTO_CONECTOR,
                                              PUERTO.NOMBRE_INTERFACE_ELEMENTO                  NOMBRE_INTERFACE_ELEMENTO,
                                              PUERTO_CONECTOR.ID_INTERFACE_ELEMENTO             ID_INTERFACE_ELEMENTO_CON, 
                                              PUERTO_CONECTOR.NOMBRE_INTERFACE_ELEMENTO         NOMBRE_INTERFACE_ELEMENTO_CON,
                                              DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT
                                                  (SERVICIO.ID_SERVICIO, 'CAPACIDAD1')          CAPACIDAD1,
                                              DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT
                                                  (SERVICIO.ID_SERVICIO, 'CAPACIDAD2')          CAPACIDAD2
                                       FROM 
                                              DB_COMERCIAL.INFO_SERVICIO                        SERVICIO,
                                              DB_COMERCIAL.INFO_SERVICIO_TECNICO                TECNICO,
                                              DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO        PUERTO,
                                              DB_INFRAESTRUCTURA.INFO_ELEMENTO                  ELEMENTO_CONECTOR,
                                              DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO        PUERTO_CONECTOR,
                                              DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO
                                       WHERE 
                                              SERVICIO.ID_SERVICIO = TECNICO.SERVICIO_ID
                                         AND  TECNICO.ELEMENTO_ID = ELEMENTO.ID_ELEMENTO
                                         AND  TECNICO.INTERFACE_ELEMENTO_ID = PUERTO.ID_INTERFACE_ELEMENTO
                                         AND  TECNICO.ELEMENTO_CONECTOR_ID = ELEMENTO_CONECTOR.ID_ELEMENTO
                                         AND  TECNICO.INTERFACE_ELEMENTO_CONECTOR_ID  = PUERTO_CONECTOR.ID_INTERFACE_ELEMENTO
                                         AND  SERVICIO.ID_SERVICIO = :idServicio";


                $objResultSetMap->addScalarResult(
                    'NOMBRE_INTERFACE_ELEMENTO',
                    'nombreInterfaceElemento',
                    'string');
                $objResultSetMap->addScalarResult(
                    'NOMBRE_ELEMENTO',
                    'nombreElemento',
                    'string');
                $objResultSetMap->addScalarResult(
                    'ID_SERVICIO',
                    'idServicio',
                    'integer');
                $objResultSetMap->addScalarResult(
                    'CAPACIDAD1',
                    'capacidad1',
                    'integer');
                $objResultSetMap->addScalarResult(
                    'CAPACIDAD2',
                    'capacidad2',
                    'integer');
                $objResultSetMap->addScalarResult(
                    'ID_ELEMENTO',
                    'idElemento',
                    'integer');
                $objResultSetMap->addScalarResult('ID_ELEMENTO_CONECTOR',
                    'idElementoConector',
                    'integer');
                $objResultSetMap->addScalarResult(
                    'NOMBRE_ELEMENTO_CONECTOR',
                    'nombreElementoConector',
                    'string');
                $objResultSetMap->addScalarResult(
                    'NOMBRE_INTERFACE_ELEMENTO_CON',
                    'puertoElementoConector',
                    'string');

            }
            else if (($arrayParametros['ultimaMilla'] == "UTP"         || 
                     $arrayParametros['ultimaMilla'] == "TERCERIZADA" || 
                     $arrayParametros['ultimaMilla'] == "SATELITAL"   ||
                    ($arrayParametros['ultimaMilla'] == "Fibra Optica" && $arrayParametros['tipoUM'] == 'DIRECTO')) &&
                     !$boolEsDataCenter && !$boolIsClearChannel) 
            {
                $strSql             = " SELECT 
                                            TECNICO.ID_SERVICIO_TECNICO                     ID_SERVICIO_TECNICO, 
                                            SERVICIO.ID_SERVICIO                            ID_SERVICIO, 
                                            ELEMENTO.ID_ELEMENTO                            ID_ELEMENTO, 
                                            ELEMENTO.NOMBRE_ELEMENTO                        NOMBRE_ELEMENTO, 
                                            DETALLE_ANILLO.DETALLE_VALOR                    ANILLO,
                                            PUERTO.ID_INTERFACE_ELEMENTO                    ID_INTERFACE_ELEMENTO, 
                                            PUERTO.NOMBRE_INTERFACE_ELEMENTO                NOMBRE_INTERFACE_ELEMENTO,
                                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,'CAPACIDAD1') CAPACIDAD1,                      
                                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,'CAPACIDAD2') CAPACIDAD2
                                        FROM 
                                            DB_COMERCIAL.INFO_SERVICIO_TECNICO              TECNICO,
                                            DB_COMERCIAL.INFO_SERVICIO                      SERVICIO,
                                            DB_INFRAESTRUCTURA.INFO_ELEMENTO                ELEMENTO,
                                            DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO      PUERTO,
                                            DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO        DETALLE_ANILLO
                                        WHERE SERVICIO.ID_SERVICIO                      = TECNICO.SERVICIO_ID
                                            AND TECNICO.ELEMENTO_ID                     = ELEMENTO.ID_ELEMENTO
                                            AND ELEMENTO.ID_ELEMENTO                    = DETALLE_ANILLO.ELEMENTO_ID
                                            AND DETALLE_ANILLO.DETALLE_NOMBRE           = :detalleNombre
                                            AND DETALLE_ANILLO.ESTADO                   = :estadoDetalle
                                            AND TECNICO.INTERFACE_ELEMENTO_ID           = PUERTO.ID_INTERFACE_ELEMENTO
                                            AND SERVICIO.ID_SERVICIO                    = :idServicio";


                $objResultSetMap->addScalarResult('ID_SERVICIO_TECNICO',            'idServicioTecnico',                'integer');
                $objResultSetMap->addScalarResult('ID_SERVICIO',                    'idServicio',                       'integer');
                //....
                $objResultSetMap->addScalarResult('ID_ELEMENTO',                    'idElemento',                       'integer');
                $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO',                'nombreElemento',                   'string');
                $objResultSetMap->addScalarResult('ANILLO',                         'anillo',                           'string');
                $objResultSetMap->addScalarResult('ID_INTERFACE_ELEMENTO',          'idInterfaceElemento',              'integer');
                $objResultSetMap->addScalarResult('NOMBRE_INTERFACE_ELEMENTO',      'nombreInterfaceElemento',          'string');
                //.....
                $objResultSetMap->addScalarResult('CAPACIDAD1',                     'capacidad1',                       'integer');
                $objResultSetMap->addScalarResult('CAPACIDAD2',                     'capacidad2',                       'integer');
            }
            //Si Ultima Milla es FO o UTP y es flujo DC
            else
            {
                if(isset($arrayParametros['isCloud']) && !$arrayParametros['isCloud'])
                {
                    $strSql             = " SELECT 
                                            TECNICO.ID_SERVICIO_TECNICO                     ID_SERVICIO_TECNICO, 
                                            SERVICIO.ID_SERVICIO                            ID_SERVICIO, 
                                            ELEMENTO.ID_ELEMENTO                            ID_ELEMENTO, 
                                            ELEMENTO.NOMBRE_ELEMENTO                        NOMBRE_ELEMENTO,
                                            PUERTO.ID_INTERFACE_ELEMENTO                    ID_INTERFACE_ELEMENTO, 
                                            PUERTO.NOMBRE_INTERFACE_ELEMENTO                NOMBRE_INTERFACE_ELEMENTO,
                                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT
                                                        (SERVICIO.ID_SERVICIO,'CAPACIDAD1') CAPACIDAD1,                      
                                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT
                                                        (SERVICIO.ID_SERVICIO,'CAPACIDAD2') CAPACIDAD2
                                        FROM 
                                            DB_COMERCIAL.INFO_SERVICIO_TECNICO              TECNICO,
                                            DB_COMERCIAL.INFO_SERVICIO                      SERVICIO,
                                            DB_INFRAESTRUCTURA.INFO_ELEMENTO                ELEMENTO,
                                            DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO      PUERTO
                                        WHERE SERVICIO.ID_SERVICIO                      = TECNICO.SERVICIO_ID
                                            AND TECNICO.ELEMENTO_ID                     = ELEMENTO.ID_ELEMENTO
                                            AND TECNICO.INTERFACE_ELEMENTO_ID           = PUERTO.ID_INTERFACE_ELEMENTO
                                            AND SERVICIO.ID_SERVICIO                    = :idServicio";
                    
                    $objResultSetMap->addScalarResult('ID_SERVICIO_TECNICO',            'idServicioTecnico',                'integer');
                    $objResultSetMap->addScalarResult('ID_ELEMENTO',                    'idElemento',                       'integer');
                    $objResultSetMap->addScalarResult('ID_INTERFACE_ELEMENTO',          'idInterfaceElemento',              'integer');
                }
                else//Cuando es de cloud no existen recursos tecnicos generados en cuanto a backbone
                {
                    $strSql             = " SELECT 
                                            SERVICIO.ID_SERVICIO                            ID_SERVICIO,
                                            'No definido'                                   NOMBRE_ELEMENTO,
                                            'No definido'                                   NOMBRE_INTERFACE_ELEMENTO,
                                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT
                                                        (SERVICIO.ID_SERVICIO,'CAPACIDAD1') CAPACIDAD1,                      
                                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT
                                                        (SERVICIO.ID_SERVICIO,'CAPACIDAD2') CAPACIDAD2
                                        FROM
                                            DB_COMERCIAL.INFO_SERVICIO                SERVICIO
                                        WHERE SERVICIO.ID_SERVICIO                    = :idServicio";
                }
                
                $objResultSetMap->addScalarResult('NOMBRE_INTERFACE_ELEMENTO',      'nombreInterfaceElemento',          'string');
                $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO',                'nombreElemento',                   'string');
                $objResultSetMap->addScalarResult('ID_SERVICIO',                    'idServicio',                       'integer');
                $objResultSetMap->addScalarResult('CAPACIDAD1',                     'capacidad1',                       'integer');
                $objResultSetMap->addScalarResult('CAPACIDAD2',                     'capacidad2',                       'integer');
            }
            
            $objNativeQuery->setParameter("idServicio", $arrayParametros['idServicio']);
            $objNativeQuery->setParameter("detalleNombre", "ANILLO");
            $objNativeQuery->setParameter("estadoDetalle", "Activo");

            $objNativeQuery->setSQL($strSql);

            $arrDatosTecnicos = $objNativeQuery->getOneOrNullResult();
            
            if($arrDatosTecnicos)
            {
                $objResultado = array(
                                'status' => 'OK' ,
                                'data'   => $arrDatosTecnicos
                                );
            }
            else
            {
                $objResultado = array(
                                'status' => 'ERROR' ,
                                'msg'    => "Imposible Asignar Recursos de Red. Favor verificar datos de Factibilidad y Capacidades"
                                );
            }
        }
        catch(\Doctrine\ORM\NonUniqueResultException $ex)
        {   
            $objResultado = array(
                                'status' => 'ERROR' ,
                                'msg'    => "Imposible Asignar Recursos de Red. Error en los Enlaces de Factibilidad"
                                );
        }
        
        return $objResultado;
    }        
    
     /**
     * Funcion que ejecuta un sql para obtener los datos técnicos de un servicio
     *      
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 2016-11-16 Discriminar consultas dado el tipo de factibilidad enviado como parametro
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 2017-06-08 Se agrega condicion al query adicionales que contemplen estado en los detalles
     * 
     * Costo 1
     * 
     * @param $arrayParametros [idServicio   id del Servicio a obtener informacion tecnica ]
     * 
     * @return $arrayDatosTecnicos [
     *                                 status       Status de respuesta OK / ERROR
     *                                 msg          Mensaje de Error en caso se existir
     *                                 data         Array [
     *                                                       idElementoEdificio   id del Elemento Edificio ( pseudoPe )
     *                                                       idElementoPe         id del Pe a conectar al edificio
     *                                                       nombreEdificio       Nombre del Edificio
     *                                                       nombrePe             Nombre del Pe/router
     *                                                       interfacePe          Interface default del Pe
     *                                                       administradoPor      Quien administra el edificio
     *                                                       capacidad1           Capacidad Up del servicio
     *                                                       capacidad2           Capacidad Down del servicio
     *                                                    ]
     *                            ]
     */
    public function getDatosFactibilidadPseudoPe($arrayParametros)
    {
        try
        {
            $objResultSetMap    = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery     = $this->_em->createNativeQuery(null, $objResultSetMap);
            
            $strSql = "SELECT 
                        ELEMENTO_E.ID_ELEMENTO              ID_ELEMENTO_EDIFICIO,
                        ELEMENTO_E.NOMBRE_ELEMENTO          NOMBRE_EDIFICIO,
                        ELEMENTO_RO.ID_ELEMENTO             ID_ELEMENTO_PE,
                        ELEMENTO_RO.NOMBRE_ELEMENTO         NOMBRE_PE,
                        INTERFACE.NOMBRE_INTERFACE_ELEMENTO INTERFACE_PE,
                        INTERFACE.ID_INTERFACE_ELEMENTO     ID_INTERFACE_PE,
                        ELEMENTO_SWHUB.NOMBRE_ELEMENTO      NOMBRE_SWHUB,
                        INTERFACE_SWHUB.NOMBRE_INTERFACE_ELEMENTO INTERFACE_SWHUB,
                        (SELECT DETALLE_VALOR
                        FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO
                        WHERE DETALLE_NOMBRE = :detalleNombre
                        AND ELEMENTO_ID      = ELEMENTO_E.ID_ELEMENTO
                        AND ESTADO           = :estado
                        ) ADMINSTRADOR_POR,
                        DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:capacidad1) CAPACIDAD1,
                        DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:capacidad2) CAPACIDAD2
                      FROM 
                        DB_COMERCIAL.INFO_PUNTO_DATO_ADICIONAL     PDA,
                        DB_COMERCIAL.INFO_SERVICIO                 SERVICIO,
                        DB_COMERCIAL.INFO_SERVICIO_TECNICO         SERVICIO_TECNICO,
                        DB_INFRAESTRUCTURA.INFO_ELEMENTO           ELEMENTO_E,
                        DB_INFRAESTRUCTURA.INFO_ELEMENTO           ELEMENTO_RO,
                        DB_INFRAESTRUCTURA.INFO_ELEMENTO           ELEMENTO_SWHUB,
                        DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO  RE,
                        DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO   DETALLE,
                        DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INTERFACE,
                        DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INTERFACE_SWHUB,
                        DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO    MODELO,
                        DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO      TIPO
                      WHERE 
                            SERVICIO.PUNTO_ID            = PDA.PUNTO_ID
                      AND SERVICIO_TECNICO.SERVICIO_ID   = SERVICIO.ID_SERVICIO
                      AND ELEMENTO_SWHUB.ID_ELEMENTO     = SERVICIO_TECNICO.ELEMENTO_ID
                      AND INTERFACE_SWHUB.ID_INTERFACE_ELEMENTO = SERVICIO_TECNICO.INTERFACE_ELEMENTO_ID
                      AND PDA.ELEMENTO_ID                = ELEMENTO_E.ID_ELEMENTO
                      AND RE.ELEMENTO_ID_A               = ELEMENTO_E.ID_ELEMENTO
                      AND RE.ELEMENTO_ID_B               = ELEMENTO_RO.ID_ELEMENTO
                      AND ELEMENTO_E.ID_ELEMENTO         = DETALLE.ELEMENTO_ID
                      AND ELEMENTO_RO.MODELO_ELEMENTO_ID = MODELO.ID_MODELO_ELEMENTO
                      AND MODELO.TIPO_ELEMENTO_ID        = TIPO.ID_TIPO_ELEMENTO
                      AND TIPO.NOMBRE_TIPO_ELEMENTO      = :nombreTipoElemento
                      AND DETALLE.DETALLE_VALOR          = INTERFACE.ID_INTERFACE_ELEMENTO
                      AND DETALLE.ESTADO                 = :estado
                      AND DETALLE.DETALLE_NOMBRE         = :detalleNombreInterface
                      AND PDA.DEPENDE_DE_EDIFICIO        = :dependeEdificio
                      AND SERVICIO.ID_SERVICIO           = :idServicio
                      AND ELEMENTO_E.ESTADO              = :estado 
                      AND RE.ESTADO                      = :estado ";
            
            $objResultSetMap->addScalarResult('ID_ELEMENTO_EDIFICIO',  'idElementoEdificio',  'integer');            
            $objResultSetMap->addScalarResult('ID_ELEMENTO_PE',        'idElemento',          'integer');
            $objResultSetMap->addScalarResult('NOMBRE_EDIFICIO',       'nombreEdificio',      'string');
            $objResultSetMap->addScalarResult('NOMBRE_PE',             'nombrePe',            'string');
            $objResultSetMap->addScalarResult('NOMBRE_SWHUB',          'nombreSwHub',         'string');
            $objResultSetMap->addScalarResult('INTERFACE_SWHUB',       'interfaceSwHub',      'string');
            $objResultSetMap->addScalarResult('INTERFACE_PE',          'interfacePe',         'string');
            $objResultSetMap->addScalarResult('ID_INTERFACE_PE',       'idInterfacePe',       'integer');
            $objResultSetMap->addScalarResult('ADMINSTRADOR_POR',      'administradoPor',     'string');            
            $objResultSetMap->addScalarResult('CAPACIDAD1',            'capacidad1',          'integer');
            $objResultSetMap->addScalarResult('CAPACIDAD2',            'capacidad2',          'integer');
            
            $objNativeQuery->setParameter("idServicio", $arrayParametros['idServicio']);
            $objNativeQuery->setParameter("dependeEdificio", "S");
            $objNativeQuery->setParameter("detalleNombreInterface", "INTERFACE_ELEMENTO_ID");
            $objNativeQuery->setParameter("capacidad1", "CAPACIDAD1");
            $objNativeQuery->setParameter("capacidad2", "CAPACIDAD2");
            $objNativeQuery->setParameter("detalleNombre", "ADMINISTRA");
            $objNativeQuery->setParameter("nombreTipoElemento", "ROUTER");
            $objNativeQuery->setParameter("estado", "Activo");
            
            $objNativeQuery->setSQL($strSql);
            
            $arrayDatosTecnicos = $objNativeQuery->getOneOrNullResult();
            
            if($arrayDatosTecnicos)
            {
                $objResultado = array(
                                'status' => 'OK' ,
                                'data'   => $arrayDatosTecnicos
                                );
            }
            else
            {
                $objResultado = array(
                                'status' => 'ERROR' ,
                                'msg'    => "Imposible Asignar Recursos de Red. Favor verificar datos de Factibilidad y Capacidades"
                                );
            }
        } 
        catch (\Exception $ex) 
        {
            $objResultado = array(
                                'status' => 'ERROR' ,
                                'msg'    => "Imposible Asignar Recursos de Red. Error en los Enlaces de Factibilidad"
                                );
        }
        
        return $objResultado;
    }
    
    /**
     * Funcion que ejecuta un sql para obtener los datos técnicos de un servicio que realizara cambio de UM
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 28-06-2016
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 28-07-2016 - Se modifica para que la informacion a cargar en cambio de UM se discrimine de UTP Fibra RUTA/DIRECTO
     * 
     * @param $arrayParametros [idServicioTecnico, idServicio, idElemento, nombreELemento, idInterfaceElemento, nombreInterfaceElemento,
     *                          idElementoConector, capacidad1, capacidad2]
     * 
     * @return $arrayDatosTecnicos ['idServicio', 'emComercial']
     */
    public function getDatosFactibilidadUltimaMilla($arrayParametros)
    {
        try
        {
            $objResultSetMap    = new ResultSetMappingBuilder($arrayParametros['emInfraestructura']);
            $objNativeQuery     = $arrayParametros['emInfraestructura']->createNativeQuery(null, $objResultSetMap);
            
            if ($arrayParametros['ultimaMilla'] == "Fibra Optica" && $arrayParametros['tipoUM'] == 'RUTA')
            {
                $strSql             = " SELECT 
                                            DET.ID_DETALLE_SOLICITUD,
                                            SERV.ID_SERVICIO                        ID_SERVICIO,
                                            SW.ID_ELEMENTO                          ID_ELEMENTO,
                                            SW.NOMBRE_ELEMENTO                      NOMBRE_ELEMENTO,
                                            INTERFACE_SW.ID_INTERFACE_ELEMENTO      ID_INTERFACE_ELEMENTO,
                                            INTERFACE_SW.NOMBRE_INTERFACE_ELEMENTO  NOMBRE_INTERFACE_ELEMENTO,
                                            CONECTOR.ID_ELEMENTO                    ID_ELEMENTO_CONECTOR,
                                            CONECTOR.NOMBRE_ELEMENTO                NOMBRE_ELEMENTO_CONECTOR,
                                            INTERFACE_OUT.ID_INTERFACE_ELEMENTO     ID_INTERFACE_ELEMENTO_CON,
                                            INTERFACE_OUT.NOMBRE_INTERFACE_ELEMENTO NOMBRE_INTERFACE_ELEMENTO_CON,
                                            CONTENEDOR.ID_ELEMENTO                  ID_ELEMENTO_CONTENEDOR,
                                            CONTENEDOR.NOMBRE_ELEMENTO              NOMBRE_ELEMENTO_CONTENEDOR,
                                            (SELECT DETALLE_VALOR
                                            FROM INFO_DETALLE_ELEMENTO
                                            WHERE ELEMENTO_ID  = SW.ID_ELEMENTO
                                            AND DETALLE_NOMBRE = :detalleNombre
                                            )                                       ANILLO,
                                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERV.ID_SERVICIO,'CAPACIDAD1') CAPACIDAD1,
                                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERV.ID_SERVICIO,'CAPACIDAD2') CAPACIDAD2,
                                            HILO.COLOR_HILO                         COLOR_HILO,
                                            HILO.NUMERO_HILO||' - '
                                            || HILO.COLOR_HILO                      NUMERO_COLOR_HILO 
                                          FROM 
                                            INFO_DETALLE_SOLICITUD DET,
                                            INFO_SERVICIO SERV,
                                            INFO_ELEMENTO SW,
                                            INFO_ELEMENTO CONTENEDOR,
                                            INFO_ELEMENTO CONECTOR,
                                            INFO_INTERFACE_ELEMENTO INTERFACE_SW,
                                            INFO_INTERFACE_ELEMENTO INTERFACE_OUT,
                                            INFO_ENLACE ENLACE,
                                            INFO_ENLACE ENLACE_INI,
                                            INFO_BUFFER_HILO BUFFER_HILO,
                                            DB_INFRAESTRUCTURA.ADMI_HILO HILO
                                          WHERE DET.ID_DETALLE_SOLICITUD = :idSolicitud
                                          AND DET.SERVICIO_ID            = SERV.ID_SERVICIO
                                          AND SW.ID_ELEMENTO             =
                                            (SELECT S.VALOR
                                            FROM INFO_DETALLE_SOL_CARACT S,
                                              ADMI_CARACTERISTICA C
                                            WHERE S.CARACTERISTICA_ID        = C.ID_CARACTERISTICA
                                            AND C.DESCRIPCION_CARACTERISTICA = 'ELEMENTO_ID'
                                            AND S.DETALLE_SOLICITUD_ID       = DET.ID_DETALLE_SOLICITUD
                                            )
                                          AND CONTENEDOR.ID_ELEMENTO =
                                            (SELECT S.VALOR
                                            FROM INFO_DETALLE_SOL_CARACT S,
                                              ADMI_CARACTERISTICA C
                                            WHERE S.CARACTERISTICA_ID        = C.ID_CARACTERISTICA
                                            AND C.DESCRIPCION_CARACTERISTICA = 'ELEMENTO_CONTENEDOR_ID'
                                            AND S.DETALLE_SOLICITUD_ID       = DET.ID_DETALLE_SOLICITUD
                                            )
                                          AND CONECTOR.ID_ELEMENTO =
                                            (SELECT S.VALOR
                                            FROM INFO_DETALLE_SOL_CARACT S,
                                              ADMI_CARACTERISTICA C
                                            WHERE S.CARACTERISTICA_ID        = C.ID_CARACTERISTICA
                                            AND C.DESCRIPCION_CARACTERISTICA = 'ELEMENTO_CONECTOR_ID'
                                            AND S.DETALLE_SOLICITUD_ID       = DET.ID_DETALLE_SOLICITUD
                                            )
                                          AND INTERFACE_SW.ID_INTERFACE_ELEMENTO =
                                            (SELECT S.VALOR
                                            FROM INFO_DETALLE_SOL_CARACT S,
                                              ADMI_CARACTERISTICA C
                                            WHERE S.CARACTERISTICA_ID        = C.ID_CARACTERISTICA
                                            AND C.DESCRIPCION_CARACTERISTICA = 'INTERFACE_ELEMENTO_ID'
                                            AND S.DETALLE_SOLICITUD_ID       = DET.ID_DETALLE_SOLICITUD
                                            )
                                          AND INTERFACE_OUT.ID_INTERFACE_ELEMENTO =
                                            (SELECT S.VALOR
                                            FROM INFO_DETALLE_SOL_CARACT S,
                                              ADMI_CARACTERISTICA C
                                            WHERE S.CARACTERISTICA_ID        = C.ID_CARACTERISTICA
                                            AND C.DESCRIPCION_CARACTERISTICA = 'INTERFACE_ELEMENTO_CONECTOR_ID'
                                            AND S.DETALLE_SOLICITUD_ID       = DET.ID_DETALLE_SOLICITUD
                                            )
                                          AND INTERFACE_OUT.ID_INTERFACE_ELEMENTO = ENLACE.INTERFACE_ELEMENTO_FIN_ID
                                          AND ENLACE.INTERFACE_ELEMENTO_INI_ID    = ENLACE_INI.INTERFACE_ELEMENTO_FIN_ID
                                          AND ENLACE_INI.BUFFER_HILO_ID           = BUFFER_HILO.ID_BUFFER_HILO
                                          AND BUFFER_HILO.HILO_ID                 = HILO.ID_HILO
                                          AND ENLACE.ESTADO                       = :estadoDetalle
                                          AND ENLACE_INI.ESTADO                   = :estadoDetalle";


                $objResultSetMap->addScalarResult('ID_DETALLE_SOLICITUD',           'idSolicitud',                      'integer');
                $objResultSetMap->addScalarResult('ID_SERVICIO',                    'idServicio',                       'integer');
                //....
                $objResultSetMap->addScalarResult('ID_ELEMENTO',                    'idElemento',                       'integer');
                $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO',                'nombreElemento',                   'string');
                $objResultSetMap->addScalarResult('ANILLO',                         'anillo',                           'string');
                $objResultSetMap->addScalarResult('ID_INTERFACE_ELEMENTO',          'idInterfaceElemento',              'integer');
                $objResultSetMap->addScalarResult('NOMBRE_INTERFACE_ELEMENTO',      'nombreInterfaceElemento',          'string');
                //....
                $objResultSetMap->addScalarResult('ID_ELEMENTO_CONECTOR',           'idElementoConector',               'integer');
                $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO_CONECTOR',       'nombreElementoConector',           'string');
                $objResultSetMap->addScalarResult('ID_INTERFACE_ELEMENTO_CON',      'idInterfaceElementoConector',      'integer');
                $objResultSetMap->addScalarResult('NOMBRE_INTERFACE_ELEMENTO_CON',  'nombreInterfaceElementoConector',  'string');
                //.....
                $objResultSetMap->addScalarResult('ID_ELEMENTO_CONTENEDOR',         'idElementoContenedor',             'integer');
                $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO_CONTENEDOR',     'nombreElementoContenedor',         'string');
                //.....
                $objResultSetMap->addScalarResult('CAPACIDAD1',                     'capacidad1',                       'integer');
                $objResultSetMap->addScalarResult('CAPACIDAD2',                     'capacidad2',                       'integer');
                $objResultSetMap->addScalarResult('COLOR_HILO',                     'colorHilo',                        'string');
                $objResultSetMap->addScalarResult('NUMERO_COLOR_HILO',              'numeroColorHilo',                  'string');     
                
                $objNativeQuery->setParameter("estadoDetalle", "Activo");
            }       
            else if ($arrayParametros['ultimaMilla'] == "UTP" || 
                ($arrayParametros['ultimaMilla'] == "Fibra Optica" && $arrayParametros['tipoUM'] == 'DIRECTO'))
            {
                $strSql             = " SELECT 
                                            DET.ID_DETALLE_SOLICITUD,
                                            SERV.ID_SERVICIO                        ID_SERVICIO,
                                            SW.ID_ELEMENTO                          ID_ELEMENTO,
                                            SW.NOMBRE_ELEMENTO                      NOMBRE_ELEMENTO,
                                            INTERFACE_SW.ID_INTERFACE_ELEMENTO      ID_INTERFACE_ELEMENTO,
                                            INTERFACE_SW.NOMBRE_INTERFACE_ELEMENTO  NOMBRE_INTERFACE_ELEMENTO,                      
                                            (SELECT DETALLE_VALOR
                                            FROM INFO_DETALLE_ELEMENTO
                                            WHERE ELEMENTO_ID  = SW.ID_ELEMENTO
                                            AND DETALLE_NOMBRE = :detalleNombre
                                            )                                       ANILLO,
                                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERV.ID_SERVICIO,'CAPACIDAD1') CAPACIDAD1,
                                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERV.ID_SERVICIO,'CAPACIDAD2') CAPACIDAD2

                                          FROM 
                                            INFO_DETALLE_SOLICITUD DET,
                                            INFO_SERVICIO SERV,
                                            INFO_ELEMENTO SW,                                          
                                            INFO_INTERFACE_ELEMENTO INTERFACE_SW                                          
                                          WHERE DET.ID_DETALLE_SOLICITUD = :idSolicitud
                                          AND DET.SERVICIO_ID            = SERV.ID_SERVICIO
                                          AND SW.ID_ELEMENTO             =
                                            (SELECT S.VALOR
                                            FROM INFO_DETALLE_SOL_CARACT S,
                                              ADMI_CARACTERISTICA C
                                            WHERE S.CARACTERISTICA_ID        = C.ID_CARACTERISTICA
                                            AND C.DESCRIPCION_CARACTERISTICA = 'ELEMENTO_ID'
                                            AND S.DETALLE_SOLICITUD_ID       = DET.ID_DETALLE_SOLICITUD
                                            )                                                                                
                                          AND INTERFACE_SW.ID_INTERFACE_ELEMENTO =
                                            (SELECT S.VALOR
                                            FROM INFO_DETALLE_SOL_CARACT S,
                                              ADMI_CARACTERISTICA C
                                            WHERE S.CARACTERISTICA_ID        = C.ID_CARACTERISTICA
                                            AND C.DESCRIPCION_CARACTERISTICA = 'INTERFACE_ELEMENTO_ID'
                                            AND S.DETALLE_SOLICITUD_ID       = DET.ID_DETALLE_SOLICITUD
                                            )         ";


                $objResultSetMap->addScalarResult('ID_SERVICIO_TECNICO',            'idServicioTecnico',                'integer');
                $objResultSetMap->addScalarResult('ID_SERVICIO',                    'idServicio',                       'integer');
                //....
                $objResultSetMap->addScalarResult('ID_ELEMENTO',                    'idElemento',                       'integer');
                $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO',                'nombreElemento',                   'string');
                $objResultSetMap->addScalarResult('ANILLO',                         'anillo',                           'string');
                $objResultSetMap->addScalarResult('ID_INTERFACE_ELEMENTO',          'idInterfaceElemento',              'integer');
                $objResultSetMap->addScalarResult('NOMBRE_INTERFACE_ELEMENTO',      'nombreInterfaceElemento',          'string');
                //.....
                $objResultSetMap->addScalarResult('CAPACIDAD1',                     'capacidad1',                       'integer');
                $objResultSetMap->addScalarResult('CAPACIDAD2',                     'capacidad2',                       'integer');                                
            }
                        
            $objNativeQuery->setParameter("idSolicitud", $arrayParametros['idSolicitud']);
            $objNativeQuery->setParameter("detalleNombre", "ANILLO");            
            
            $objNativeQuery->setSQL($strSql);
            
            $arrDatosTecnicos = $objNativeQuery->getOneOrNullResult();
            
            if($arrDatosTecnicos)
            {
                $objResultado = array(
                                'status' => 'OK' ,
                                'data'   => $arrDatosTecnicos
                                );
            }
            else
            {
                $objResultado = array(
                                'status' => 'ERROR' ,
                                'msg'    => "Imposible Asignar Recursos de Red. Favor verificar datos de Factibilidad y Capacidades"
                                );
            }
        } 
        catch (\Doctrine\ORM\NonUniqueResultException $ex) 
        {            
            $objResultado = array(
                                'status' => 'ERROR' ,
                                'msg'    => "Imposible Asignar Recursos de Red. Error en los Enlaces de Factibilidad"
                                );
        }
        
        return $objResultado;
    }
    
    /**
     * Funcion que ejecuta un sql para obtener los datos técnicos de un servicio que realizara cambio de UM Radio
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 30-07-2016
     * 
     * @param $arrayParametros [idServicioTecnico, idServicio, idElemento, nombreELemento, idInterfaceElemento, nombreInterfaceElemento,
     *                          idElementoConector, capacidad1, capacidad2]
     * 
     * @return $arrayDatosTecnicos ['idServicio', 'emComercial']
     */
    public function getDatosFactibilidadUltimaMillaRadio($arrayParametros)
    {
        try
        {
            $objResultSetMap    = new ResultSetMappingBuilder($arrayParametros['emInfraestructura']);
            $objNativeQuery     = $arrayParametros['emInfraestructura']->createNativeQuery(null, $objResultSetMap);
            
            $strSql             = " SELECT 
                                        DET.ID_DETALLE_SOLICITUD,
                                        SERV.ID_SERVICIO                        ID_SERVICIO,
                                        SW.ID_ELEMENTO                          ID_ELEMENTO,
                                        SW.NOMBRE_ELEMENTO                      NOMBRE_ELEMENTO,
                                        INTERFACE_SW.ID_INTERFACE_ELEMENTO      ID_INTERFACE_ELEMENTO,
                                        INTERFACE_SW.NOMBRE_INTERFACE_ELEMENTO  NOMBRE_INTERFACE_ELEMENTO,
                                        CONECTOR.ID_ELEMENTO                    ID_ELEMENTO_CONECTOR,
                                        CONECTOR.NOMBRE_ELEMENTO                NOMBRE_ELEMENTO_CONECTOR,
                                        (SELECT DETALLE_VALOR
                                        FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO
                                        WHERE ELEMENTO_ID  = SW.ID_ELEMENTO
                                        AND DETALLE_NOMBRE = :detalleNombre
                                        )                                       ANILLO,
                                        DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERV.ID_SERVICIO,'CAPACIDAD1') CAPACIDAD1,
                                        DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERV.ID_SERVICIO,'CAPACIDAD2') CAPACIDAD2
                                      FROM 
                                        DB_COMERCIAL.INFO_DETALLE_SOLICITUD DET,
                                        DB_COMERCIAL.INFO_SERVICIO SERV,
                                        DB_INFRAESTRUCTURA.INFO_ELEMENTO SW,
                                        DB_INFRAESTRUCTURA.INFO_ELEMENTO CONECTOR,
                                        DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INTERFACE_SW
                                      WHERE DET.ID_DETALLE_SOLICITUD = :idSolicitud
                                      AND DET.SERVICIO_ID            = SERV.ID_SERVICIO
                                      AND SW.ID_ELEMENTO             =
                                        (SELECT S.VALOR
                                        FROM DB_COMERCIAL.INFO_DETALLE_SOL_CARACT S,
                                          DB_COMERCIAL.ADMI_CARACTERISTICA C
                                        WHERE S.CARACTERISTICA_ID        = C.ID_CARACTERISTICA
                                        AND C.DESCRIPCION_CARACTERISTICA = 'ELEMENTO_ID'
                                        AND S.DETALLE_SOLICITUD_ID       = DET.ID_DETALLE_SOLICITUD
                                        )
                                      AND CONECTOR.ID_ELEMENTO =
                                        (SELECT S.VALOR
                                        FROM DB_COMERCIAL.INFO_DETALLE_SOL_CARACT S,
                                          DB_COMERCIAL.ADMI_CARACTERISTICA C
                                        WHERE S.CARACTERISTICA_ID        = C.ID_CARACTERISTICA
                                        AND C.DESCRIPCION_CARACTERISTICA = 'ELEMENTO_CONECTOR_ID'
                                        AND S.DETALLE_SOLICITUD_ID       = DET.ID_DETALLE_SOLICITUD
                                        )
                                      AND INTERFACE_SW.ID_INTERFACE_ELEMENTO =
                                        (SELECT S.VALOR
                                        FROM DB_COMERCIAL.INFO_DETALLE_SOL_CARACT S,
                                          DB_COMERCIAL.ADMI_CARACTERISTICA C
                                        WHERE S.CARACTERISTICA_ID        = C.ID_CARACTERISTICA
                                        AND C.DESCRIPCION_CARACTERISTICA = 'INTERFACE_ELEMENTO_ID'
                                        AND S.DETALLE_SOLICITUD_ID       = DET.ID_DETALLE_SOLICITUD
                                        )";


            $objResultSetMap->addScalarResult('ID_DETALLE_SOLICITUD',           'idSolicitud',                      'integer');
            $objResultSetMap->addScalarResult('ID_SERVICIO',                    'idServicio',                       'integer');
            //....
            $objResultSetMap->addScalarResult('ID_ELEMENTO',                    'idElemento',                       'integer');
            $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO',                'nombreElemento',                   'string');
            $objResultSetMap->addScalarResult('ANILLO',                         'anillo',                           'string');
            $objResultSetMap->addScalarResult('ID_INTERFACE_ELEMENTO',          'idInterfaceElemento',              'integer');
            $objResultSetMap->addScalarResult('NOMBRE_INTERFACE_ELEMENTO',      'nombreInterfaceElemento',          'string');
            //....
            $objResultSetMap->addScalarResult('ID_ELEMENTO_CONECTOR',           'idElementoConector',               'integer');
            $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO_CONECTOR',       'nombreElementoConector',           'string');
            //.....
            $objResultSetMap->addScalarResult('CAPACIDAD1',                     'capacidad1',                       'integer');
            $objResultSetMap->addScalarResult('CAPACIDAD2',                     'capacidad2',                       'integer');
            
            $objNativeQuery->setParameter("idSolicitud", $arrayParametros['idSolicitud']);
            $objNativeQuery->setParameter("detalleNombre", "ANILLO");
            $objNativeQuery->setParameter("estadoDetalle", "Activo");
            
            $objNativeQuery->setSQL($strSql);
            
            $arrDatosTecnicos = $objNativeQuery->getOneOrNullResult();
            
            if($arrDatosTecnicos)
            {
                $objResultado = array(
                                      'status' => 'OK' ,
                                      'data'   => $arrDatosTecnicos
                                     );
            }
            else
            {
                $objResultado = array(
                                      'status' => 'ERROR' ,
                                      'msg'    => "Imposible Asignar Recursos de Red. Favor verificar datos de Factibilidad y Capacidades"
                                     );
            }
        } 
        catch (\Doctrine\ORM\NonUniqueResultException $ex) 
        {            
            $objResultado = array(
                                  'status' => 'ERROR' ,
                                  'msg'    => "Imposible Asignar Recursos de Red. Error en los Enlaces de Factibilidad"
                                 );
        }
        return $objResultado;
    }
    
    /**
     * Funcion que sirve para obtener el json con el resultado del puerto del elemento por hilo
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 06-04-2016
     * @param $arrayParametros ['idInterfaceElementoConector', 'empresaCod']
     * @return json
     */
    public function getJsonPuertoSwitchByHilo($arrayParametros)
    {
        $arrResultado = $this->_em->getRepository('schemaBundle:InfoElemento')
                             ->getElementoPadre($arrayParametros['idInterfaceElementoConector'], 'INTERFACE', 'SWITCH');
        if($arrResultado){
            $objInterfaceElemento = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')->find($arrResultado[0]['IDINTERFACEELEMENTO']);
        
            $arrayRespuesta = array('idInterfaceElemento'       => $objInterfaceElemento->getId(), 
                                'nombreInterfaceElemento'   => $objInterfaceElemento->getNombreInterfaceElemento());
        
            
            
        
        }else{
            $arrayRespuesta = array(
                                'status' => 'ERROR' ,
                                'msg'    => "Error de enlace entre los elementos. Notificar a GIS"
                                );
        }
        $objJson      = json_encode($arrayRespuesta);
        $resultado    = $objJson;
        return $resultado;
    }
    
    /**
     * Funcion que sirve para obtener el json con el resultado del puerto del elemento por hilo
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 22-06-2016
     * @param $arrayParametros ['idInterfaceElementoConector', 'empresaCod']
     * @return json
     */
    public function getJsonPuertoOdfByHilo($arrayParametros)
    {
        $arrResultado = $this->_em->getRepository('schemaBundle:InfoElemento')
                             ->getElementoPadre($arrayParametros['idInterfaceElementoConector'], 'INTERFACE', 'ODF');
        if($arrResultado)
        {
            $objInterfaceElemento = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')->find($arrResultado[0]['IDINTERFACEELEMENTO']);
        
            $arrayRespuesta = array('idInterfaceElemento'       => $objInterfaceElemento->getId(), 
                                    'nombreInterfaceElemento'   => $objInterfaceElemento->getNombreInterfaceElemento());       
            
            
        
        }
        else
        {
            $arrayRespuesta = array(
                                'status' => 'ERROR' ,
                                'msg'    => "Error de enlace entre los elementos. Notificar a GIS"
                                );
        }
        $objJson      = json_encode($arrayRespuesta);
        $resultado    = $objJson;
        return $resultado;
    }    
    
    /**
     * Funcion que ejecuta un paquete en sql para obtener los datos necesarios
     * a mostrar en el grid de servicios tecnicos.
     * 
     * @author Allan Suarez         <arsuarez@telconet.ec>    
     * @version 1.0 27-04-2016
     * 
     * @author Eduardo Plua <eplua@telconet.ec>
     * @version 1.1 26-05-2016 - Se pasa como parametro ServiceTecnico para uso interno
     * 
     * @author Comentario: Duval Medina C <dmedina@telconet.ec>
     * @version 1.1 2016-05-03 - Se recibe como parametro adicional loginForma para mejorar costo de consulta
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.2 2020-01-24 - Se modifica funcionamiento para evitar que se envie consultas cuando el estado es vacio o nulo.
     * 
     * @param Array $arrayParametros [ servicios , plan , producto , login , loginForma , tipoServicio , punto , estado ,
     *                                 start , empresa , ultimaMilla , elemento  , interface , ociCon, serviceTecnico ]
     */
    public function generarJsonClientes($arrayParametros)
    {
        $resultado = '{"total":"0","encontrados":[]}';

        if (!is_null($arrayParametros['estado']) && !empty($arrayParametros['estado'])) 
        {
            $arrayResultado = $this->generarArrayClientes($arrayParametros);

            if ($arrayResultado['total'] !== 0) 
            {

                $data       =  json_encode($arrayResultado['resultado']);
                $resultado  = '{"total":"' . $arrayResultado['total'] . '","encontrados":' . $data . '}';
            }
        }

        return $resultado;
    }
    
    /**
     * getJsonEquiposFacturar
     *
     * Método que retorna la lista de equipos a facturar en formato json                              
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.0 29-08-2018
     * 
     * Se evalúa fórmula de amortización para precio de equipos.
     * @author Madeline Haz <mhaz@telconet.ec>
     * @version 1.1    24-06-2019
     * 
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.2    30-01-2020 Se reversa envío de id contrato conmo parámetro.
     * 
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.3    01-03-2021 Se agrega funcionalidad y validación para agregar equipos a facturar por servicio Netlifecam.
     * 
     * @author Emmanuel Martillo <emartillo@telconet.ec>
     * @version 1.4    19-10-2022 - Se agrega parametrizacion de  los productos NetlifeCam.
     * 
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.5    28-07-2022 Se agrega idServicio en el arreglo de respuesta de los equipos a facturar. 
     *                            Se agrega validacion para que busque los equipos asociados al cliente y si no encuentra que busque de la plantilla.
     * 
     */
    public function getJsonEquiposFacturar($arrayParametros)
    {
        $arrayEncontrados      = array();
        $strDescripcion        = '';
        $strTecnologia         = '';
        $strPrecio             = '0';
        $intTotal              = 0;
        $fltPrecioNeto	       = 0;
        $strFacturaNetlifecam  ='N';
        $serviceSolicitudes    = $arrayParametros['serviceSolicitud'];       
        $strEmpresaCod         = $arrayParametros['strEmpresaCod']; 
        $intServicioId         = $arrayParametros['intServicioId'];
        $intPtoSessionId       = $arrayParametros['intPtoSessionId'];
        $strDescripProducto    = $arrayParametros['descripcionProducto'];
        
        $intPermanenciaExtender = 1;
        $serviceUtil            = new UtilService;
        $arrayProduNetlifeCam   = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                            ->get('PROYECTO NETLIFECAM',
                                            'INFRAESTRUCTURA',
                                            '',
                                            'PARAMETRIZACION DE NOMBRES TECNICOS DE PRODUCTOS NETLIFE CAM',
                                            '',
                                            '',
                                            '',
                                            '',
                                            '',
                                            '18');
        $arrayParamProducNetCam   = $serviceUtil->obtenerValoresParametro($arrayProduNetlifeCam); 
                        

 
        try
        {
            
            $objInfoServicio = $this->_em->getRepository('schemaBundle:InfoServicio')->find($intServicioId);
            $strCodigoProducto                 = is_object($objInfoServicio->getProductoId()) ? 
                                                 $objInfoServicio->getProductoId()->getCodigoProducto() : null;    
                      
            if(is_object($objInfoServicio))
            {
                $intPuntoId = $objInfoServicio->getPuntoId()->getId();
                
                $arrayServiciosPto = $this->_em->getRepository('schemaBundle:InfoServicio')
                                                    ->findBy(array('puntoId' => $intPuntoId));
                
                $strTieneSmartWifi = "NO";
                
                foreach( $arrayServiciosPto as $objServicioPto )
                {
                    
                    if($objServicioPto->getProductoId() > 0)
                    {

                        $strTieneSmartWifi      = $objServicioPto->getProductoId()->getNombreTecnico() == "SMARTWIFI" &&
                                                  (strpos($objServicioPto->getProductoId()->getDescripcionProducto(), 'Renta') !== false)
                                                  ?"SI":"NO";
                    }
                    else if($objServicioPto->getPlanId() > 0)
                    {
                        $intIdPlan          = $objServicioPto->getPlanId()->getId();
                        $arrayProductosPlan = $this->_em->getRepository('schemaBundle:InfoPlanDet')
                                                        ->findBy(array('planId'=>$intIdPlan));

                        foreach($arrayProductosPlan as $objProd)
                        {
                            $objProducto = $this->_em->getRepository("schemaBundle:AdmiProducto")
                                                     ->find($objProd->getProductoId());
                            if ($objProducto->getNombreTecnico() == "SMARTWIFI")
                            {
                                $strTieneSmartWifi = "SI";
                            }
                        }
                    }
                    // Se verifica si existen servicios con producto NETLIFECAM VISEG
                    if(is_object($objServicioPto->getProductoId()) && 
                        in_array($objServicioPto->getProductoId()->getNombreTecnico(), $arrayParamProducNetCam))
                    {
                        $objAdmiProducto = $objServicioPto->getProductoId();
                        $arrayParamNetlifeCam                  = array();
                        $arrayParamNetlifeCam['intIdProducto'] = $objAdmiProducto->getId();      
                        $arrayParamNetlifeCam['strCodEmpresa'] = $strEmpresaCod;
                        $strFacturaNetlifecam    = $this->getEsServicioNetlifeCam($arrayParamNetlifeCam);
                        $intIdServicioNetlifeCam = $objServicioPto->getId();
                        $strNombreTecnico                  = is_object($objServicioPto->getProductoId()) ? 
                                                $objServicioPto->getProductoId()->getNombreTecnico() : null;
                    }
                    
                }    
              
                $intCantidad                       = 0;
                $arrayParamEquipo                  = array();
                $arrayParamEquipo['intServicioId'] = $intServicioId;          
                $arrayParamEquipo['strEmpresaCod'] = $strEmpresaCod;
                   
                $objInfoServicioTecnico = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')
                                                    ->findOneBy(array('servicioId' => $arrayParamEquipo['intServicioId']));
                
                
                $arrayParamProdAdSinEquipos                           = array();
                $arrayParamProdAdSinEquipos['strNombreParametroCab']  = 'PRODUCTOS_ADICIONALES_CV';
                $arrayParamProdAdSinEquipos['strEstado']              = 'Activo';
                $arrayParamProdAdSinEquipos['strPresentaEquipos']     = 'N';
                $arrayParamProdAdSinEquipos['intIdEmpresa']           = $strEmpresaCod;

                $arrayProdAdicionalSinEquipos = array();               
                foreach( $this->getProdAdicionalesCV($arrayParamProdAdSinEquipos) as $arrayRegistro )
                {
               
                    array_push($arrayProdAdicionalSinEquipos, strtoupper($arrayRegistro['nombre']));
                }
                
                if (in_array(strtoupper($strDescripProducto), $arrayProdAdicionalSinEquipos)) 
                {
                    $arrayEncontrados[] = null;
                }
                else
                {
                    
                    if(is_object($objInfoServicioTecnico) && $strDescripProducto === 'INTERNET')
                    {
                        $arrayParamEquipo["intElementoClienteId"] = $objInfoServicioTecnico->getElementoClienteId();
                        $arrayRespuestaEquipo = $serviceSolicitudes->getEquipoPorServicioId($arrayParamEquipo);

                        if(count($arrayRespuestaEquipo)>0)
                        {
                            $strTecnologia = $arrayRespuestaEquipo[0]["strNombreMarcaElemento"];

                            $arrayParametrosResultado = $this->_em->getRepository("schemaBundle:AdmiParametroDet")
                                                                  ->get($arrayParametros['strParametro'], $arrayParametros['strModulo'],
                                                                        $arrayParametros['strProceso'],null, $strTecnologia,null,null,
                                                                        null,'S', $arrayParamEquipo['strEmpresaCod'], null);


                            if($strTecnologia!=='CISCO' && $strTieneSmartWifi === "SI")
                            {

                                $arrayParametrosResultadoSW = $this->_em->getRepository("schemaBundle:AdmiParametroDet")
                                                                    ->get($arrayParametros['strParametro'], $arrayParametros['strModulo'],
                                                                          $arrayParametros['strProceso'], null,'CISCO',null,null,null,'S',
                                                                          $arrayParamEquipo['strEmpresaCod'], null);

                                $arrayParametrosResultado = array_merge($arrayParametrosResultado,$arrayParametrosResultadoSW);

                            }

                            if($arrayParametrosResultado)
                            {
                                foreach( $arrayParametrosResultado as $arrayParametroDet )
                                {

                                    if(isset($arrayParametroDet['descripcion']) && !empty($arrayParametroDet['descripcion']))
                                    {
                                        $strDescripcion = $arrayParametroDet['descripcion'];
                                    }

                                    if(isset($arrayParametroDet['valor1']) && !empty($arrayParametroDet['valor1']))
                                    {
                                        $strTecnologia = $arrayParametroDet['valor1'];
                                    }

                                    if (isset($arrayParametroDet['valor6']) && !empty($arrayParametroDet['valor6'])) 
                                    {
                                        $intNumMesesActivo  = str_pad(' ', 30);

                                        $strSql  = "BEGIN 
                                                   :Ln_NumMesesActivo:=
                                                    DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_MESES_ACTIVO(:Fn_IdServicio); END;";

                                        $objStmt = $this->_em->getConnection()->prepare($strSql);
                                        $objStmt->bindParam('Fn_IdServicio', $intServicioId);
                                        $objStmt->bindParam('Ln_NumMesesActivo', $intNumMesesActivo);
                                        $objStmt->execute();

                                        $intPermanenciaMinima  = str_pad(' ', 30);
                                        $strSql  = "BEGIN
                                                    :Ln_ParamPermanencia := 
                                                     DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_PERMANENCIA_VIGENTE(:Fv_EmpresaCod," . "
                                                                                                                  :Fn_IdPunto); END;";
                                        $objStmt = $this->_em->getConnection()->prepare($strSql);
                                        $objStmt->bindParam('Fv_EmpresaCod', $strEmpresaCod);
                                        $objStmt->bindParam('Fn_IdPunto', $intPtoSessionId);
                                        $objStmt->bindParam('Ln_ParamPermanencia', $intPermanenciaMinima);
                                        $objStmt->execute();

                                        if (isset($intPermanenciaMinima) && isset($intNumMesesActivo))
                                        {
                                            if ($intNumMesesActivo > $intPermanenciaMinima) 
                                            {
                                                $strPrecio = 0;

                                            } 
                                            else 
                                            {
                                                $fltPrecioNeto = $arrayParametroDet['valor6'];
                                                $strPrecio = round($fltPrecioNeto-($fltPrecioNeto/$intPermanenciaMinima)*($intNumMesesActivo-1),2);

                                            }
                                        }

                                    }                                    

                                    if(isset($arrayParametroDet['valor3']) && !empty($arrayParametroDet['valor3']))
                                    {
                                        $strCaracteristicaId = $arrayParametroDet['id'];
                                    }                    

                                    $arrayCaracteristicas[] = $strCaracteristicaId;

                                    $arrayCont = array_count_values($arrayCaracteristicas);

                                    $intCantidad = $arrayCont[$strCaracteristicaId];

                                    $arrayEncontrados[] = array('id'          => $strCaracteristicaId,
                                                                'descripcion' => $strDescripcion,
                                                                'tecnologia'  => $strTecnologia,
                                                                'precio'      => $strPrecio,
                                                                'cantidad'    => $intCantidad,
                                                                'idServicio'  => $intServicioId);
                                }                        
                             }                                                        
                        }
                    }
                    else if ($strDescripProducto === 'NETLIFECAM' ||  $strFacturaNetlifecam === 'S') 
                    {

                        $strCumplePermanenciaMinima = 'N';
                        // Se obtiene permanencia mínima de servicio Netlifecam

                        $arrayParametrosDet = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne("CANCELACION VOLUNTARIA","FINANCIERO","FACTURACION",
                                                        "", "PERMANENCIA MINIMA NETLIFECAM", "", "", "", "", "18");

                        if (!empty($arrayParametrosDet)) 
                        {
                            $intPermanenciaNetlifeCam = intval($arrayParametrosDet['valor2']);
                        }


                        $intNumMesesActivoNtlCam = str_pad(' ', 30);

                        $strSql = "BEGIN 
                                   :Ln_NumMesesActivo := 
                                    DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_MESES_ACTIVO(:Fn_IdServicio); END;";
                        $objStmt = $this->_em->getConnection()->prepare($strSql);
                        $objStmt->bindParam('Fn_IdServicio', $intServicioId);
                        $objStmt->bindParam('Ln_NumMesesActivo', $intNumMesesActivoNtlCam);

                        $objStmt->execute();

                        if ($intNumMesesActivoNtlCam > $intPermanenciaNetlifeCam)
                        {
                            $strCumplePermanenciaMinima = 'S';
                            $floatValorNetlifeCam       = 0;
                        }



                        $objProducto = $this->_em->getRepository('schemaBundle:AdmiProducto')
                                            ->findBy(array('nombreTecnico' => $strDescripProducto,
                                                           'grupo' => $strDescripProducto,
                                                           'estado' => 'Activo'));

                        $arrayGetEquiposAsociadosCliente = $this->getEquiposAsociadosCliente($arrayParametros);
                        $strExisteEquipoPlantilla        = 'N';

                        if (count($arrayGetEquiposAsociadosCliente) > 0 && count($objProducto) > 0)
                        {
                            $arrayParamValidaEquiposPlantilla = array();
                            $arrayParamValidaEquiposPlantilla['strParametro']            = $arrayParametros['strParametro'];
                            $arrayParamValidaEquiposPlantilla['strModulo']               = $arrayParametros['strModulo'];
                            $arrayParamValidaEquiposPlantilla['strProceso']              = $arrayParametros['strProceso'];
                            $arrayParamValidaEquiposPlantilla['strDescripcionEquipo']    = $arrayGetEquiposAsociadosCliente[0]['nombreElemento'];
                            $arrayParamValidaEquiposPlantilla['strCodEmpresa']           = $arrayParamEquipo['strEmpresaCod'];
                            $arrayParamValidaEquiposPlantilla['intIdProducto']           = $objProducto[0]->getId();

                            $strExisteEquipoPlantilla = $this->getValidaEquipoPlantilla($arrayParamValidaEquiposPlantilla);

                        }

                        if ($strExisteEquipoPlantilla=='S' && count($objProducto) > 0)
                        {

                            $arrayParamEquiposAsocPlantilla = array();
                            $arrayParamEquiposAsocPlantilla['strParametro']            = $arrayParametros['strParametro'];
                            $arrayParamEquiposAsocPlantilla['strModulo']               = $arrayParametros['strModulo'];
                            $arrayParamEquiposAsocPlantilla['strProceso']              = $arrayParametros['strProceso'];
                            $arrayParamEquiposAsocPlantilla['strDescripcionEquipo']    = $arrayGetEquiposAsociadosCliente[0]['nombreElemento'];
                            $arrayParamEquiposAsocPlantilla['strCodEmpresa']           = $arrayParamEquipo['strEmpresaCod'];
                            $arrayParamEquiposAsocPlantilla['intIdProducto']           = $objProducto[0]->getId();
                            $arrayParamEquiposAsocPlantilla['strParamEquipoAdicional'] = 'EQ_ADICIONAL';

                            $arrayParametrosResulNetlifeCam = $this->getEquiposAsociadosPlantilla($arrayParamEquiposAsocPlantilla);

                        } 
                        else 
                        {
                            $arrayParametrosResulNetlifeCam = $this->_em->getRepository("schemaBundle:AdmiParametroDet")
                                                                        ->get($arrayParametros['strParametro'],
                                                                        $arrayParametros['strModulo'],
                                                                        $arrayParametros['strProceso'],
                                                                        null, '', null, null, 'VISEG', 'S',
                                                                        $arrayParamEquipo['strEmpresaCod'], null);
                        }

                        if (count($arrayParametrosResulNetlifeCam) > 0)
                        {                          
                            foreach ($arrayParametrosResulNetlifeCam as $arrayParametroDet)
                            {
                                if ($strCumplePermanenciaMinima === 'N')
                                {
                                    $fltPrecioNeto = $arrayParametroDet['valor6'];
                                    if ($intNumMesesActivoNtlCam > 0) 
                                    {
                                        $floatValorNetlifeCam = round($fltPrecioNeto - ($fltPrecioNeto / $intPermanenciaNetlifeCam) *
                                                                     ($intNumMesesActivoNtlCam - 1), 2);
                                    } else 
                                    {
                                        $floatValorNetlifeCam = round($fltPrecioNeto - ($fltPrecioNeto / $intPermanenciaNetlifeCam) *
                                                                     ($intNumMesesActivoNtlCam), 2);
                                    }
                                }

                                $arrayEncontrados[] = array('id' => $arrayParametroDet['id'],
                                                            'descripcion' => $arrayParametroDet['descripcion'],
                                                            'tecnologia'  => $arrayParametroDet['valor1'],
                                                            'precio'      => $floatValorNetlifeCam,
                                                            'cantidad'    => 1,
                                                            'idServicio'  => $intServicioId);
                            }
                        }
                    }
                    else
                    {   
                        $objProducto = $this->_em->getRepository('schemaBundle:AdmiProducto')
                                                              ->findBy(array('nombreTecnico' => $strDescripProducto,
                                                                             'estado' => 'Activo'));

                        $arrayGetEquiposAsociadosCliente = $this->getEquiposAsociadosCliente($arrayParametros);                        
                        $strExisteEquipoPlantilla        = 'N';

                        if (count($arrayGetEquiposAsociadosCliente) > 0 && count($objProducto) > 0)
                        {
                            $arrayParamValidaEquiposPlantilla = array();
                            $arrayParamValidaEquiposPlantilla['strParametro']            = $arrayParametros['strParametro'];
                            $arrayParamValidaEquiposPlantilla['strModulo']               = $arrayParametros['strModulo'];
                            $arrayParamValidaEquiposPlantilla['strProceso']              = $arrayParametros['strProceso'];
                            $arrayParamValidaEquiposPlantilla['strDescripcionEquipo']    = $arrayGetEquiposAsociadosCliente[0]['nombreElemento'];
                            $arrayParamValidaEquiposPlantilla['strCodEmpresa']           = $arrayParamEquipo['strEmpresaCod'];
                            $arrayParamValidaEquiposPlantilla['intIdProducto']           = $objProducto[0]->getId();

                            $strExisteEquipoPlantilla = $this->getValidaEquipoPlantilla($arrayParamValidaEquiposPlantilla);

                        }

                        if ($strExisteEquipoPlantilla=='S' && count($objProducto) > 0)
                        {            
                            $arrayParamEquiposAsocPlantilla = array();
                            $arrayParamEquiposAsocPlantilla['strParametro']            = $arrayParametros['strParametro'];
                            $arrayParamEquiposAsocPlantilla['strModulo']               = $arrayParametros['strModulo'];
                            $arrayParamEquiposAsocPlantilla['strProceso']              = $arrayParametros['strProceso'];
                            $arrayParamEquiposAsocPlantilla['strDescripcionEquipo']    = $arrayGetEquiposAsociadosCliente[0]['nombreElemento'];
                            $arrayParamEquiposAsocPlantilla['strCodEmpresa']           = $arrayParamEquipo['strEmpresaCod'];
                            $arrayParamEquiposAsocPlantilla['intIdProducto']           = $objProducto[0]->getId();
                            $arrayParamEquiposAsocPlantilla['strParamEquipoAdicional'] = 'EQ_ADICIONAL';

                            $arrayParamResulProductoAdicional = $this->getEquiposAsociadosPlantilla($arrayParamEquiposAsocPlantilla);

                        } 
                        else
                        {
                            $arrayParamServInternet                    = array();
                            $arrayParamServInternet['intPtoSessionId'] = $intPtoSessionId;
                            $arrayServicioInternet                     = $this->getServicioInternet($arrayParamServInternet);

                            $arrayParamEquipo                  = array();
                            $arrayParamEquipo['intServicioId'] = $arrayServicioInternet[0]['idServicioInternet'];          
                            $arrayParamEquipo['strEmpresaCod'] = $strEmpresaCod;

                            $objInfoServicioTecnico = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')
                                                                ->findOneBy(array('servicioId' => $arrayParamEquipo['intServicioId']));

                            if(is_object($objInfoServicioTecnico) )
                            {
                                $arrayParamEquipo["intElementoClienteId"] = $objInfoServicioTecnico->getElementoClienteId();
                                $arrayRespuestaEquipo = $serviceSolicitudes->getEquipoPorServicioId($arrayParamEquipo);

                                if(count($arrayRespuestaEquipo)>0)
                                {
                                    $strTecnologia = $arrayRespuestaEquipo[0]["strNombreMarcaElemento"];

                                }    
                            }

                            $arrayParamResulProductoAdicional = $this->_em->getRepository("schemaBundle:AdmiParametroDet")
                                                                      ->get($arrayParametros['strParametro'], $arrayParametros['strModulo'],
                                                                            $arrayParametros['strProceso'], null, $strTecnologia,null,null,
                                                                            null,'S', $arrayParamEquipo['strEmpresaCod'], null );       
                        }

                        if (count($arrayParamResulProductoAdicional) > 0) 
                        {
                            foreach ($arrayParamResulProductoAdicional as $arrayParametroDet) 
                            {
                                $fltPrecioNeto = $arrayParametroDet['valor6'];

                                if ($strDescripProducto === 'EXTENDER_DUAL_BAND') 
                                {
                                    $intNumMesesActivoExtender = str_pad(' ', 30);

                                    $strSql = "BEGIN 
                                               :Ln_NumMesesActivo := 
                                                DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_MESES_ACTIVO(:Fn_IdServicio); END;";
                                    $objStmt = $this->_em->getConnection()->prepare($strSql);
                                    $objStmt->bindParam('Fn_IdServicio', $intServicioId);
                                    $objStmt->bindParam('Ln_NumMesesActivo', $intNumMesesActivoExtender);

                                    $objStmt->execute();            

                                    $arrayParamPermMinExtender = $this->_em->getRepository("schemaBundle:AdmiParametroDet")
                                                                        ->get('PROD_PROM_PERMANENCIA_MINIMA_CV',
                                                                        'COMERCIAL', '',
                                                                        'PERMANENCIA_MIN_EXTENDER_CV', '', '', '', '', '',
                                                                        18);

                                    if(count($arrayParamPermMinExtender)>0)
                                    {
                                        $intPermanenciaExtender = $arrayParamPermMinExtender[0]['valor1'];
                                    }


                                    if ($intNumMesesActivoExtender > $intPermanenciaExtender)
                                    {
                                        $strCumplePermMinimaExtender = 'S';
                                        $fltPrecioNeto       = 0;
                                    }                               

                                    if($strCumplePermMinimaExtender == 'N')
                                    {

                                        if ($intNumMesesActivoExtender > 0) 
                                        {

                                            $fltPrecioNeto = round($fltPrecioNeto-
                                                                  ($fltPrecioNeto/$intPermanenciaExtender)*($intNumMesesActivoExtender - 1), 2);
                                        } 
                                        else 
                                        {
                                            $fltPrecioNeto = round($fltPrecioNeto-
                                                                  ($fltPrecioNeto/$intPermanenciaExtender)*($intNumMesesActivoExtender), 2);
                                        } 
                                    }            

                                }

                                $arrayEncontrados[] = array('id'          => $arrayParametroDet['id'],
                                                            'descripcion' => $arrayParametroDet['descripcion'],
                                                            'tecnologia'  => $arrayParametroDet['valor1'],
                                                            'precio'      => $fltPrecioNeto,
                                                            'cantidad'    => 1,
                                                            'idServicio'  => $intServicioId
                                );
                            }
                        }
                    } 
                }
                    
                
            }
        } 
        catch (\Exception $ex) 
        {
            error_log("Error ->> " . $ex->getMessage());
        }
        $arrayRespuesta = array('total' => $intTotal, 'equipos' => $arrayEncontrados);
        
        $objJsonData       = json_encode($arrayRespuesta);

        return $objJsonData;
    }
    
        
     /**
     * getServicioInternet
     *
     * Método que retorna el id del Servicio de Internet mandatorio.                             
     *
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0    31-08-2022      * 
     */
    public function getServicioInternet($arrayParametros)
    {
        $objResultSet = new ResultSetMappingBuilder($this->_em);
        $objResultSet->addScalarResult('ID_SERVICIO', 'idServicioInternet', 'integer');

        $objQuery  = $this->_em->createNativeQuery(null, $objResultSet);
        $strSelect = "SELECT       
                              ISE.ID_SERVICIO  
                         FROM 
                              DB_COMERCIAL.INFO_SERVICIO ISE,       
                              DB_COMERCIAL.INFO_PUNTO IP,
                              DB_COMERCIAL.ADMI_TIPO_NEGOCIO ATN,
                              DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER,
                              DB_COMERCIAL.INFO_PERSONA IPE,
                              DB_COMERCIAL.INFO_EMPRESA_ROL IER,
                              DB_GENERAL.ADMI_ROL AR,     
                              DB_COMERCIAL.INFO_PLAN_DET IPD,
                              DB_COMERCIAL.ADMI_PRODUCTO APR

                         WHERE ISE.ESTADO                 ='Activo'
                           AND ISE.CANTIDAD               > 0
                           AND IER.EMPRESA_COD            = '18'
                           AND ISE.ES_VENTA               = 'S'
                           AND AR.DESCRIPCION_ROL         = 'Cliente'
                           AND ISE.PRECIO_VENTA           > 0
                           AND ISE.FRECUENCIA_PRODUCTO    = 1
                           AND IP.ID_PUNTO                = ISE.PUNTO_ID    
                           AND IP.TIPO_NEGOCIO_ID         = ATN.ID_TIPO_NEGOCIO
                           AND IPER.ID_PERSONA_ROL        = IP.PERSONA_EMPRESA_ROL_ID
                           AND IPE.ID_PERSONA             = IPER.PERSONA_ID
                           AND IER.ID_EMPRESA_ROL         = IPER.EMPRESA_ROL_ID
                           AND AR.ID_ROL                  = IER.ROL_ID           
                           AND ISE.PLAN_ID                = IPD.PLAN_ID
                           AND IPD.PRODUCTO_ID            = APR.ID_PRODUCTO
                           AND APR.CODIGO_PRODUCTO        = 'INTD'
                           AND IP.ID_PUNTO                =:intPtoSessionId 
                           GROUP BY ISE.ID_SERVICIO
                           ORDER BY ISE.ID_SERVICIO ASC ";

        $objQuery->setParameter('intPtoSessionId', $arrayParametros['intPtoSessionId']);
        $strSql = $strSelect;

        return $objQuery->setSQL($strSql)->getArrayResult();
    }
    
        
    
    /**
     * getValidaEquipoPlantilla
     *
     * Método que valida si el equipo asociado al cliente existe en la plantilla                            
     *
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0    31-08-2022    
     *  
     */
    public function getValidaEquipoPlantilla($arrayParametros)
    {
        $strExisteEquipoPlantilla = 'N';
        
        $objResultSet = new ResultSetMappingBuilder($this->_em);
        $objResultSet->addScalarResult('ID_PARAMETRO_DET', 'id', 'integer');
        $objResultSet->addScalarResult('DESCRIPCION', 'descripcion', 'string');
        $objResultSet->addScalarResult('VALOR1', 'valor1', 'string');
        $objResultSet->addScalarResult('VALOR2', 'valor2', 'string');
        $objResultSet->addScalarResult('VALOR3', 'valor3', 'string');
        $objResultSet->addScalarResult('VALOR4', 'valor4', 'string');
        $objResultSet->addScalarResult('VALOR5', 'valor5', 'string');
        $objResultSet->addScalarResult('ESTADO', 'estado', 'string');
        $objResultSet->addScalarResult('VALOR6', 'valor6', 'string');
        $objResultSet->addScalarResult('VALOR7', 'valor7', 'string');
        $objResultSet->addScalarResult('OBSERVACION', 'observacion', 'string');       

        $objQuery  = $this->_em->createNativeQuery(null, $objResultSet);
        $strSelect = "SELECT APD.ID_PARAMETRO_DET,APD.DESCRIPCION, APD.VALOR1, APD.VALOR2, 
                             APD.VALOR3, APD.VALOR4, APD.VALOR5, APD.ESTADO, APD.VALOR6,
                             APD.VALOR7, APD.OBSERVACION 
                      FROM DB_GENERAL.ADMI_PARAMETRO_CAB APC,
                           DB_GENERAL.ADMI_PARAMETRO_DET APD

                      WHERE APC.ID_PARAMETRO = APD.PARAMETRO_ID
                        AND APC.NOMBRE_PARAMETRO =:strParametro
                        AND APC.MODULO           =:strModulo 
                        AND APC.PROCESO          =:strProceso
                        AND APD.DESCRIPCION      =:strDescripcionEquipo
                        AND APD.EMPRESA_COD      =:strCodEmpresa
                        AND APD.VALOR7           =:intIdProducto";

        $objQuery->setParameter('strParametro', $arrayParametros['strParametro']);    
        $objQuery->setParameter('strModulo', $arrayParametros['strModulo']);
        $objQuery->setParameter('strProceso', $arrayParametros['strProceso']);
        $objQuery->setParameter('strDescripcionEquipo', $arrayParametros['strDescripcionEquipo']);
        $objQuery->setParameter('strCodEmpresa', $arrayParametros['strCodEmpresa']);
        $objQuery->setParameter('intIdProducto', $arrayParametros['intIdProducto']);
        $strSql = $strSelect;

        
        if(count($objQuery->setSQL($strSql)->getArrayResult())>0)
        {
            $strExisteEquipoPlantilla = 'S';
        }
        
        return $strExisteEquipoPlantilla;
    }
    
    /**
     * getEquiposAsociadosPlantilla
     *
     * Método que retorna los equipos asociados al cliente con sus valores provenientes de la plantilla                             
     *
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0    31-08-2022      * 
     */
    public function getEquiposAsociadosPlantilla($arrayParametros)
    {
        $objResultSet = new ResultSetMappingBuilder($this->_em);
        $objResultSet->addScalarResult('ID_PARAMETRO_DET', 'id', 'integer');
        $objResultSet->addScalarResult('DESCRIPCION', 'descripcion', 'string');
        $objResultSet->addScalarResult('VALOR1', 'valor1', 'string');
        $objResultSet->addScalarResult('VALOR2', 'valor2', 'string');
        $objResultSet->addScalarResult('VALOR3', 'valor3', 'string');
        $objResultSet->addScalarResult('VALOR4', 'valor4', 'string');
        $objResultSet->addScalarResult('VALOR5', 'valor5', 'string');
        $objResultSet->addScalarResult('ESTADO', 'estado', 'string');
        $objResultSet->addScalarResult('VALOR6', 'valor6', 'string');
        $objResultSet->addScalarResult('VALOR7', 'valor7', 'string');
        $objResultSet->addScalarResult('OBSERVACION', 'observacion', 'string');       

        $objQuery  = $this->_em->createNativeQuery(null, $objResultSet);
        $strSelect = "SELECT APD.ID_PARAMETRO_DET,APD.DESCRIPCION, APD.VALOR1, APD.VALOR2, 
                             APD.VALOR3, APD.VALOR4, APD.VALOR5, APD.ESTADO, APD.VALOR6,
                             APD.VALOR7, APD.OBSERVACION 
                      FROM DB_GENERAL.ADMI_PARAMETRO_CAB APC,
                           DB_GENERAL.ADMI_PARAMETRO_DET APD

                      WHERE APC.ID_PARAMETRO = APD.PARAMETRO_ID
                        AND APC.NOMBRE_PARAMETRO =:strParametro
                        AND APC.MODULO           =:strModulo 
                        AND APC.PROCESO          =:strProceso
                        AND APD.DESCRIPCION      =:strDescripcionEquipo
                        AND APD.EMPRESA_COD      =:strCodEmpresa
                        AND APD.VALOR7           =:intIdProducto
        
                      UNION
 
                      SELECT APD.ID_PARAMETRO_DET, APD.DESCRIPCION, APD.VALOR1, APD.VALOR2,
                             APD.VALOR3, APD.VALOR4, APD.VALOR5, APD.ESTADO, APD.VALOR6, 
                             APD.VALOR7, APD.OBSERVACION 
                      FROM DB_GENERAL.ADMI_PARAMETRO_CAB APC,
                           DB_GENERAL.ADMI_PARAMETRO_DET APD

                      WHERE APC.ID_PARAMETRO = APD.PARAMETRO_ID
                        AND APC.NOMBRE_PARAMETRO =:strParametro
                        AND APC.MODULO           =:strModulo
                        AND APC.PROCESO          =:strProceso
                        AND APD.EMPRESA_COD      =:strCodEmpresa
                        AND APD.VALOR7           =:intIdProducto
                        AND APD.VALOR8           =:strParamEquipoAdicional ";

        $objQuery->setParameter('strParametro', $arrayParametros['strParametro']);    
        $objQuery->setParameter('strModulo', $arrayParametros['strModulo']);
        $objQuery->setParameter('strProceso', $arrayParametros['strProceso']);
        $objQuery->setParameter('strDescripcionEquipo', $arrayParametros['strDescripcionEquipo']);
        $objQuery->setParameter('strCodEmpresa', $arrayParametros['strCodEmpresa']);
        $objQuery->setParameter('intIdProducto', $arrayParametros['intIdProducto']);
        $objQuery->setParameter('strParamEquipoAdicional', $arrayParametros['strParamEquipoAdicional']);
        $strSql = $strSelect;

        return $objQuery->setSQL($strSql)->getArrayResult();
    }
    
    
    
    /**
     * getEquiposAsociadosCliente
     * 
     * Función que obtiene los Productos asociados al cliente para la Cancelacion Voluntaria
     * 
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0 - 28-08-2022
     *
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function getEquiposAsociadosCliente($arrayParametros)
    {
        $objResultSet = new ResultSetMappingBuilder($this->_em);
        $objResultSet->addScalarResult('NOMBRE_MODELO_ELEMENTO', 'nombreElemento', 'string');
        $objResultSet->addScalarResult('DESCRIPCION_PRODUCTO', 'descripcionProducto', 'string');
        $objResultSet->addScalarResult('ESTADO', 'estado', 'string');
        $objResultSet->addScalarResult('NOMBRE_TIPO_ELEMENTO', 'nombreTipoElemento', 'string');

        $objQuery  = $this->_em->createNativeQuery(null, $objResultSet);
        $strSelect = "SELECT DISTINCT AMD.NOMBRE_MODELO_ELEMENTO, 
                             AP.DESCRIPCION_PRODUCTO,
                             AP.ESTADO, 
                             ATE.NOMBRE_TIPO_ELEMENTO
                        FROM DB_COMERCIAL.INFO_SERVICIO ISER,
                          DB_COMERCIAL.INFO_SERVICIO_TECNICO IST, 
                          DB_INFRAESTRUCTURA.INFO_ELEMENTO IE,
                          DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AMD, 
                          DB_COMERCIAL.ADMI_PRODUCTO AP,
                          DB_INFRAESTRUCTURA.admi_tipo_elemento ATE,
                          DB_COMERCIAL.INFO_PUNTO IP
                        WHERE ISER.ID_SERVICIO          = IST.SERVICIO_ID
                          AND AP.ID_PRODUCTO            = ISER.PRODUCTO_ID
                          AND IST.ELEMENTO_CLIENTE_ID   = IE.ID_ELEMENTO
                          AND AMD.ID_MODELO_ELEMENTO    = IE.MODELO_ELEMENTO_ID
                          AND AMD.TIPO_ELEMENTO_ID      = ATE.ID_TIPO_ELEMENTO
                          AND ISER.PUNTO_FACTURACION_ID = IP.ID_PUNTO
                          AND ISER.ID_SERVICIO          =:intIdServicio
                        ORDER BY 1 DESC ";

        $objQuery->setParameter('intIdServicio', $arrayParametros['intServicioId']);
        $strSql = $strSelect;

        return $objQuery->setSQL($strSql)->getArrayResult();
    }
    
   /**
    * getProdAdicionalesCV
    * 
    * Función que obtiene los Productos Adicionales para la Cancelacion Voluntaria
    * 
    * @author Hector Lozano <hlozano@telconet.ec>
    * @version 1.0 - 28-08-2022
    *
    * @return \Symfony\Component\HttpFoundation\JsonResponse
    */
    public function getProdAdicionalesCV($arrayParametros)
    {
        $objResultSet = new ResultSetMappingBuilder($this->_em);
        $objResultSet->addScalarResult('VALOR1', 'nombre', 'string');

        $objQuery  = $this->_em->createNativeQuery(null, $objResultSet);
        $strSelect = "SELECT APD.VALOR1 ";
        $strFrom   = "FROM DB_GENERAL.ADMI_PARAMETRO_CAB APC "
                   . "JOIN DB_GENERAL.ADMI_PARAMETRO_DET APD ON APC.ID_PARAMETRO = APD.PARAMETRO_ID ";
        $strWhere  = "WHERE APC.NOMBRE_PARAMETRO = :strNombreParametro
                        AND APD.EMPRESA_COD= :intIdEmpresa
                        AND APD.ESTADO= :strEstado
                        AND APC.ESTADO= :strEstado";
        
        if(isset($arrayParametros['strPresentaInterfaz']) && $arrayParametros['strPresentaInterfaz']!= "")
        {
            $objQuery->setParameter('strPresentaInterfaz', $arrayParametros['strPresentaInterfaz']);
            $strWhere  = $strWhere." AND APD.VALOR2 = :strPresentaInterfaz ";
        }
        
        if(isset($arrayParametros['strPresentaEquipos']) && $arrayParametros['strPresentaEquipos']!= "")
        {
            $objQuery->setParameter('strPresentaEquipos', $arrayParametros['strPresentaEquipos']);
            $strWhere  = $strWhere." AND APD.VALOR3= :strPresentaEquipos ";
        }

        $objQuery->setParameter('intIdEmpresa', $arrayParametros['intIdEmpresa']);
        $objQuery->setParameter('strNombreParametro', $arrayParametros['strNombreParametroCab']);
        $objQuery->setParameter('strEstado', $arrayParametros['strEstado']);
        $strSql = $strSelect . $strFrom . $strWhere;

        return $objQuery->setSQL($strSql)->getArrayResult();
    }
    
    
   /**
    * getPlanProductosClienteCV
    * 
    * Función que obtiene los Planes y Productos del Cliente, realizando la busqueda por idPunto o idServicio.
    * 
    * @author Hector Lozano <hlozano@telconet.ec>
    * @version 1.0 - 28-08-2022
    *
    * @return \Symfony\Component\HttpFoundation\JsonResponse
    */
    public function getPlanProductosClienteCV($arrayParametros)
    {
        $intIdServicio           = $arrayParametros['intIdServicio'];
        $strDescripcionProducto  = $arrayParametros['strDescripcionProducto']; 
        $intIdPunto              = $arrayParametros['intIdPunto'];
        $arrayEstados            = $arrayParametros['arrayEstados'];
        
        $objResultSet = new ResultSetMappingBuilder($this->_em);
        $objResultSet->addScalarResult('ID_SERVICIO', 'idServicio', 'integer');
        $objResultSet->addScalarResult('NOMBRE_TECNICO', 'nombreProducto', 'string');
        $objResultSet->addScalarResult('DESCRIPCION_PRODUCTO', 'descripcionProducto', 'string');
        $objResultSet->addScalarResult('ID_PRODUCTO', 'idProducto', 'integer');

        $objQuery  = $this->_em->createNativeQuery(null, $objResultSet);
        $strSqlPlan = "SELECT ISE.ID_SERVICIO, APR.NOMBRE_TECNICO, APR.DESCRIPCION_PRODUCTO, APR.ID_PRODUCTO 
                        FROM  DB_COMERCIAL.INFO_PUNTO IP,  
                              DB_COMERCIAL.INFO_SERVICIO ISE,  
                              DB_COMERCIAL.INFO_PLAN_DET IPD,  
                              DB_COMERCIAL.ADMI_PRODUCTO APR  
                        WHERE IP.ID_PUNTO             = ISE.PUNTO_ID   
                          AND ISE.PLAN_ID             = IPD.PLAN_ID  
                          AND IPD.PRODUCTO_ID         = APR.ID_PRODUCTO  
                          AND APR.CODIGO_PRODUCTO     = 'INTD' 
                          AND APR.ESTADO              = 'Activo'
                          AND ISE.ESTADO              IN (:arrayEstados) ";  
        
        
        $strSqlProd = " SELECT  ISE.ID_SERVICIO, APR.NOMBRE_TECNICO, APR.DESCRIPCION_PRODUCTO, APR.ID_PRODUCTO 
                        FROM DB_COMERCIAL.INFO_PUNTO IP,  
                             DB_COMERCIAL.INFO_SERVICIO ISE,  
                             DB_COMERCIAL.ADMI_PRODUCTO APR  
                        WHERE IP.ID_PUNTO             = ISE.PUNTO_ID   
                          AND ISE.PRODUCTO_ID         = APR.ID_PRODUCTO  
                          AND APR.ESTADO              = 'Activo'
                          AND ISE.ESTADO              IN (:arrayEstados) ";  
        
        if($strDescripcionProducto=="INTERNET")
        {
            $strSqlPlan = $strSqlPlan."AND IP.ID_PUNTO = :intIdPunto";
            $strSqlProd = $strSqlProd."AND IP.ID_PUNTO = :intIdPunto";
            
            $objQuery->setParameter('intIdPunto', $intIdPunto);
            $objQuery->setParameter('arrayEstados', $arrayEstados);
        }
        else
        {
            $strSqlPlan = $strSqlPlan."AND ISE.ID_SERVICIO = :intIdServicio";
            $strSqlProd = $strSqlProd."AND ISE.ID_SERVICIO = :intIdServicio";
            
            $objQuery->setParameter('intIdServicio',$intIdServicio);
            $objQuery->setParameter('arrayEstados', $arrayEstados);
        }

         $strSql = $strSqlPlan." UNION ALL".$strSqlProd;
        

        return $objQuery->setSQL($strSql)->getArrayResult();
    }
      
    
    /**
    * getPromoVigenteServicio
    * 
    * Función que obtiene promocion vigente por medio del idServicio.
    * 
    * @author Hector Lozano <hlozano@telconet.ec>
    * @version 1.0 - 28-08-2022
    *
    * @return \Symfony\Component\HttpFoundation\JsonResponse
    */
    public function getPromoVigenteServicio($arrayParametros)
    {
        $intIdServicio  = $arrayParametros['intIdServicio'];
        $strCodEmpresa  = $arrayParametros['strCodEmpresa'];
        
        $objResultSet = new ResultSetMappingBuilder($this->_em);

        $objResultSet->addScalarResult('GRUPO_PROMOCION_ID', 'idGrupoPromocion', 'integer');
        $objResultSet->addScalarResult('TIPO_PROMOCION_ID', 'idTipoPromocion', 'integer');
        $objResultSet->addScalarResult('PUNTO_ID', 'idPunto', 'integer');      

        $objQuery  = $this->_em->createNativeQuery(null, $objResultSet);
        
        $strSelectMapPromo = " SELECT DBIDMP.GRUPO_PROMOCION_ID, DBIDMP.TIPO_PROMOCION_ID, DBIDMP.PUNTO_ID ";  
        
        $strCuerpoMapeoPromo = " FROM DB_COMERCIAL.INFO_DETALLE_MAPEO_PROMO DBIDMP  
                                   WHERE DBIDMP.ID_DETALLE_MAPEO IN 
                                     (SELECT NVL(MAX(IDMP.ID_DETALLE_MAPEO),0) AS ID_DETALLE_MAPEO  
                                        FROM DB_COMERCIAL.INFO_DETALLE_MAPEO_PROMO IDMP 
                                        WHERE IDMP.ID_DETALLE_MAPEO IN (SELECT IDMS.DETALLE_MAPEO_ID  
                                                                          FROM DB_COMERCIAL.INFO_DETALLE_MAPEO_SOLICITUD IDMS  
                                                                            WHERE IDMS.SERVICIO_ID = :intIdServicio) 
                                    AND IDMP.EMPRESA_COD = :strCodEmpresa  
                                    AND IDMP.TIPO_PROMOCION IN ('PROM_MPLA','PROM_MPRO','PROM_TOT','PROM_MIX')
                              ) ";  
                 
        $objQuery->setParameter('intIdServicio',$intIdServicio);
        $objQuery->setParameter('strCodEmpresa',$strCodEmpresa);
        
        $strSql = $strSelectMapPromo.$strCuerpoMapeoPromo;
        
        return $objQuery->setSQL($strSql)->getArrayResult();
    }
      
    
    
   /**
    * getValidaPromoVigente
    * 
    * Función que valida si el servicio tiene aplicada una promocion vigente.
    * 
    * @author Hector Lozano <hlozano@telconet.ec>
    * @version 1.0 - 28-08-2022
    *
    * @return \Symfony\Component\HttpFoundation\JsonResponse
    */
    public function getValidaPromoVigente($arrayParametros)
    {
                                
        $strPromocionVigente   = 'N';
        $strValidaServAplPromo = str_pad(' ', 30);
        
        $intIdServicio    = $arrayParametros['intIdServicio'];
        $strCodEmpresa    = $arrayParametros['strCodEmpresa'];         
        $strTipoPromocion = 'PROM_MENS';
        
        $strSql  = " BEGIN 
                    :Fv_AplicaServicioPromo := 
                     DB_COMERCIAL.CMKG_PROMOCIONES.F_VALIDA_SERVICIO(:Fn_IntIdServicio,:Fv_TipoPromocion,:Fv_CodEmpresa); END;";

        $objStmt = $this->_em->getConnection()->prepare($strSql);
        $objStmt->bindParam('Fn_IntIdServicio', $intIdServicio);
        $objStmt->bindParam('Fv_TipoPromocion', $strTipoPromocion);
        $objStmt->bindParam('Fv_CodEmpresa', $strCodEmpresa);
        $objStmt->bindParam('Fv_AplicaServicioPromo', $strValidaServAplPromo);
        $objStmt->execute();                
        
        if($strValidaServAplPromo == 'N')
        {
            $strPromocionVigente = 'S';
        }
        else
        {
            $strPromocionVigente = 'N';
        }

        return $strPromocionVigente;
    }

    /**
    * getFechaMapPromoServicio
    * 
    * Función que obtiene la fecha minima de mapeo del servicio con promoción.
    * 
    * @author Hector Lozano <hlozano@telconet.ec>
    * @version 1.0 - 28-08-2022
    *
    * @return \Symfony\Component\HttpFoundation\JsonResponse
    */
    public function getFechaMapPromoServicio($arrayParametros)
    {
        $objResultSet = new ResultSetMappingBuilder($this->_em);
        $objResultSet->addScalarResult('FE_MAPEO', 'fechaMapeoPromo', 'string');

        $objQuery  = $this->_em->createNativeQuery(null, $objResultSet);
        $strSql = " SELECT TO_CHAR(MIN(IDMP.FE_MAPEO)) AS FE_MAPEO
                        FROM DB_COMERCIAL.INFO_DETALLE_MAPEO_PROMO IDMP
                         WHERE IDMP.GRUPO_PROMOCION_ID = :intIdGrupoPromo
                           AND IDMP.TIPO_PROMOCION_ID = :intIdTipoPromo
                           AND IDMP.PUNTO_ID = :intIdPunto ";

        $objQuery->setParameter('intIdGrupoPromo', $arrayParametros['intIdGrupoPromo']);
        $objQuery->setParameter('intIdTipoPromo', $arrayParametros['intIdTipoPromo']);
        $objQuery->setParameter('intIdPunto', $arrayParametros['intIdPunto']);

        return $objQuery->setSQL($strSql)->getOneOrNullResult();
    }
    
    
    /**
    * getCaractProducto
    * 
    * Función que obtiene el idCaracteristica asociado a un producto parametrizado para facturar.
    * 
    * @author Hector Lozano <hlozano@telconet.ec>
    * @version 1.0 - 7-09-2022
    *
    * @return \Symfony\Component\HttpFoundation\JsonResponse
    */
    public function getCaractProducto($arrayParametros)
    {
        $objResultSet = new ResultSetMappingBuilder($this->_em);
        $objResultSet->addScalarResult('VALOR3', 'idCaractProducto', 'string');

        $objQuery  = $this->_em->createNativeQuery(null, $objResultSet);
        $strSql = " SELECT DET.VALOR3
                      FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB,
                        DB_GENERAL.ADMI_PARAMETRO_DET DET
                      WHERE CAB.NOMBRE_PARAMETRO = 'FACTURACION SOLICITUD DETALLADA'
                      AND CAB.ESTADO       = 'Activo'
                      AND CAB.ID_PARAMETRO = DET.PARAMETRO_ID
                      AND DET.ESTADO       = 'Activo'
                      AND DET.valor9       = :intIdProducto";

        $objQuery->setParameter('intIdProducto', $arrayParametros['idProducto']);
        
        return $objQuery->setSQL($strSql)->getOneOrNullResult();
    }
    
   /**
    * getPermanenciaMinimaPromoCV
    * 
    * Función que obtiene la caracteristica de permanencia minima que esta ligada a la promoción del servicio.
    * 
    * @author Hector Lozano <hlozano@telconet.ec>
    * @version 1.0 - 28-08-2022
    *
    * @return \Symfony\Component\HttpFoundation\JsonResponse
    */
    public function getPermanenciaMinimaPromoCV($arrayParametros)
    {
        $objResultSet = new ResultSetMappingBuilder($this->_em);
        $objResultSet->addScalarResult('VALOR', 'permMinimaPromoCV', 'string');

        $objQuery  = $this->_em->createNativeQuery(null, $objResultSet);
        $strSql = " SELECT AGPR.VALOR 
                      FROM DB_COMERCIAL.ADMI_GRUPO_PROMOCION_REGLA AGPR,
                           DB_COMERCIAL.ADMI_CARACTERISTICA AC
                    WHERE AGPR.CARACTERISTICA_ID=AC.ID_CARACTERISTICA
                     AND AC.DESCRIPCION_CARACTERISTICA= :strDescripcionCaract
                     AND AGPR.GRUPO_PROMOCION_ID= :intIdGrupoPromo";

        $objQuery->setParameter('strDescripcionCaract', $arrayParametros['strDescripcionCaract']);
        $objQuery->setParameter('intIdGrupoPromo', $arrayParametros['intIdGrupoPromo']);

        return $objQuery->setSQL($strSql)->getOneOrNullResult();
    }
    
    

    /**
     * getJsonParamFacturaracionDetallada
     *
     * Método que obtiene parametros de facturación detallada a visualizarse en pantalla de cancelación voluntaria.                       
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.0 29-08-2018
     * 
     */
    public function getJsonParamFacturaracionDetallada($arrayParametros)
    {
        $arrayEncontrados  = array();
        $strDescripcion    = '';
        $intTotal          = 0;
        $strGeneraNc       = 'N';
        
        try
        {
            
            
            $arrayParametrosResultado = $this->_em->getRepository("schemaBundle:AdmiParametroDet")
                                                  ->findParametrosDet($arrayParametros);
           
            if( $arrayParametrosResultado )
            {
                foreach( $arrayParametrosResultado['arrayResultado'] as $arrayParametroDet )
                {
                    $strGeneraNc = 'N';
                    
                    $strEditable = 'N';                    

                    if(isset($arrayParametroDet['strDescripcionDet']) && !empty($arrayParametroDet['strDescripcionDet']))
                    {
                        $strDescripcion = $arrayParametroDet['strDescripcionDet'];
                    }

                    if(isset($arrayParametroDet['strValor5']) && !empty($arrayParametroDet['strValor5']))
                    {
                        $strGeneraNc = 'S';
                    }
                    
                    if(isset($arrayParametroDet['strValor6']) && !empty($arrayParametroDet['strValor6']))
                    {
                        $strEditable = $arrayParametroDet['strValor6'];
                    }                    
                    
                    if(isset($arrayParametroDet['intIdParametroDet']) && !empty($arrayParametroDet['intIdParametroDet']))
                    {
                        $intIdParametroDet = $arrayParametroDet['intIdParametroDet'];
                    }                    

                    $arrayEncontrados[] = array(
                                                'intId'          => $intIdParametroDet,
                                                'strDescripcion' => $strDescripcion,
                                                'strGeneraNc'    => $strGeneraNc,
                                                'strEditable'    => $strEditable
                                              );
                }
            }
        } 
        catch (\Exception $ex) 
        {
            error_log("Error ->> " . $ex->getMessage());
        }
        $arrayRespuesta = array('total' => $intTotal, 'parametros' => $arrayEncontrados);
        
        $objJsonData       = json_encode($arrayRespuesta);

        return $objJsonData;
    }
    
    
    /**
     * getJsonValoresFacturar
     *
     * Método que retorna la lista de valores a facturar en formato json                              
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.0 29-08-2018
     * 
     * Se modifica el método de validación de la permanencia mínima mediante función 
     * invocada desde el paquete de FNCK_CANCELACION_VOL.     
     *
     * @author Madeline Haz <mhaz@telconet.ec>
     * @version 1.1 21-06-2019          
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.2 08-01-2020 Se elimina parámetro id contrato de funciones invocadas desde paquete FNCK_CANCELACION_VOL.
     * 
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.3 25-02-2021 Se enceran valores restanten el validación de permanencia mínima. 
     * 
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.4 02-03-2021 Se agrega funcionalidad para obtener valores a facturar por servicio de Netlifecam.
     * 
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 1.5 28-09-2021 Se agrega funcionalidad para obtener valores a facturar por servicio de: El Canal del Futbol.
     * 
     * @author Emmanuel Martillo <emartillo@telconet.ec>
     * @version 1.6 19-10-2022 - Se agrega parametrizacion de  los productos NetlifeCam.
     *
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.7 31-08-2022 Se modifica parametros de retorno, devolviendo un solo valor en base al valor del producto adicional 
     *                         ($floatValorProducto). Se agrega la descripcion del producto en el arreglo de retorno.   
     */
    public function getJsonValoresFacturar($arrayParametros)
    {
        $floatValorDctos               = 0;
        $floatValorProducto            = 0;  
        $floatValorDctoNetlifecam      = 0;
        $floatValorDctoAdicional       = 0;
        $floatValorInst                = 0;
        $floatValorNetlifeCloud        = 0;
        $floatValorEcdf                = 0;
        $floatValorNetlifeAssistance   = 0;
        $intNumMesesActivo             = 0;
        $intNumMesesActivoNtlAss       = 0;
        $intPermanenciaAdicionales     = 0;
        $intPermanenciaNetlifeCam      = 0;
        $intNumMesesActivoNtlCam       = 0;
        $floatValorNetlifeCam          = 0;
        
        $intContratoId                 = null;
        $strDescripProducto            = $arrayParametros['descripProducto'];
        
        $intServicioId          = ( isset($arrayParametros['intIdServicio']) && !empty($arrayParametros['intIdServicio']) )
                                   ? $arrayParametros['intIdServicio'] : null;

        $strEmpresaCod          = ( isset($arrayParametros['strEmpresaCod']) && !empty($arrayParametros['strEmpresaCod']) )
                                   ? $arrayParametros['strEmpresaCod'] : null; 
                      
        $strFacturaNetlifecam  ='N';
        $strMsjNetlifecam      = '';
        $strFechaActivacion    = '';


        $serviceUtil            = new UtilService;
        $arrayProduNetlifeCam   = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                            ->get('PROYECTO NETLIFECAM',
                                            'INFRAESTRUCTURA',
                                            '',
                                            'PARAMETRIZACION DE NOMBRES TECNICOS DE PRODUCTOS NETLIFE CAM',
                                            '',
                                            '',
                                            '',
                                            '',
                                            '',
                                            '18');
        $arrayParamProducNetCam   = $serviceUtil->obtenerValoresParametro($arrayProduNetlifeCam); 

        
        try
        {
                        
            $objInfoServicio    = $this->_em->getRepository('schemaBundle:InfoServicio')->find($intServicioId);
                       
            $objProdActual = $objInfoServicio->getProductoId();            
            if(is_object($objInfoServicio))
            {       
                
                $floatValorDctos               = str_pad(' ', 30);
                $floatValorDctoNetlifecam      = str_pad(' ', 30);
                $floatValorDctoAdicional       = str_pad(' ', 100);
                $floatValorInst                = str_pad(' ', 30);
                $floatValorNetlifeCloud        = str_pad(' ', 30);
                $floatValorEcdf                = str_pad(' ', 30);
                $floatValorNetlifeAssistance   = str_pad(' ', 30);                

                $intPtoId = $objInfoServicio->getPuntoId()->getId();
                $strSql   = "BEGIN DB_FINANCIERO.FNCK_CANCELACION_VOL.P_GET_VALORES_FACT(   :strEmpresaCod,  "
                                                                                         . ":intPtoId,"
                                                                                         . ":intServicioId, "
                                                                                         . ":strDescripProducto, "
                                                                                         . ":floatValorDctos, "
                                                                                         . ":floatValorInst,"
                                                                                         . ":floatValorNetlifeCloud ,"
                                                                                         . ":floatValorNetlifeAssistance,"
                                                                                         . ":floatValorECDF); END;";
                $objStmt = $this->_em->getConnection()->prepare($strSql);              
                $objStmt->bindParam('strEmpresaCod' , $strEmpresaCod);
                $objStmt->bindParam('intPtoId' , $intPtoId);
                $objStmt->bindParam('intServicioId' , $intServicioId);
                $objStmt->bindParam('strDescripProducto' , $strDescripProducto);
                $objStmt->bindParam('floatValorDctos' , $floatValorDctos);
                $objStmt->bindParam('floatValorInst' , $floatValorInst);                
                $objStmt->bindParam('floatValorNetlifeCloud',$floatValorNetlifeCloud);
                $objStmt->bindParam('floatValorNetlifeAssistance',$floatValorNetlifeAssistance);
                $objStmt->bindParam('floatValorECDF',$floatValorEcdf);
                $objStmt->execute();
                
                $strCodigoTipoProp = 'FACP';
                $strSql  = " BEGIN 
                            :Ln_ValorDctoAdicional := 
                             DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_DCTO_FACTURADO_SERVICIO(:Fn_IdPunto,:Fn_IdServicio,:Fv_CodigoTipoDoc); END;";

                $objStmt = $this->_em->getConnection()->prepare($strSql);
                $objStmt->bindParam('Fn_IdPunto', $intPtoId);
                $objStmt->bindParam('Fn_IdServicio', $intServicioId);
                $objStmt->bindParam('Fv_CodigoTipoDoc', $strCodigoTipoProp);
                $objStmt->bindParam('Ln_ValorDctoAdicional', $floatValorDctoAdicional);
                $objStmt->execute();                
                
                $intNumMesesActivo  = str_pad(' ', 30);

                $strSql  = " BEGIN 
                            :Ln_NumMesesActivo := 
                             DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_MESES_ACTIVO(:Fn_IdServicio); END;";

                $objStmt = $this->_em->getConnection()->prepare($strSql);
                $objStmt->bindParam('Fn_IdServicio', $intServicioId);
                $objStmt->bindParam('Ln_NumMesesActivo', $intNumMesesActivo);
                $objStmt->execute();

                $intPermanenciaMinima  = str_pad(' ', 30);
                $strSql  = "BEGIN 
                           :Ln_ParamPermanencia :=
                            DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_PERMANENCIA_VIGENTE(:Fv_EmpresaCod," . "
                                                                                         :Fn_IdPunto); END;";
                $objStmt = $this->_em->getConnection()->prepare($strSql);
                $objStmt->bindParam('Fv_EmpresaCod', $strEmpresaCod);
                $objStmt->bindParam('Fn_IdPunto', $intPtoId);
                $objStmt->bindParam('Ln_ParamPermanencia', $intPermanenciaMinima);
                $objStmt->execute();

                if ((isset($intPermanenciaMinima) && isset($intNumMesesActivo)) &&
                    ($intNumMesesActivo > $intPermanenciaMinima))
                {                    
                        $floatValorInst  = 0;
                        $floatValorDctos = 0;
                        $floatValorNetlifeCloud=0;
                        $floatValorNetlifeAssistance=0;
                        $floatValorDctoAdicional    =0;

                }
                
                if(in_array($strDescripProducto, $arrayParamProducNetCam) || $strDescripProducto === 'NETLIFECAM')
                {
                    $floatValorInst  = $objInfoServicio->getProductoId()->getInstalacion();
                    
                    if(!isset($floatValorInst))
                    {
                       $floatValorInst = 0; 
                    }
                }
            }
            
            // Se obtiene permanencia mínima de servicios adicionales
            
            $arrayParametrosDet = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne("CANCELACION VOLUNTARIA", 
                                                     "FINANCIERO", 
                                                     "FACTURACION", 
                                                     "", 
                                                     "PERMANENCIA SERVICIOS ADICIONALES", 
                                                     "", 
                                                     "",
                                                     "",
                                                     "",
                                                     "18"
                                                   );
             if(!empty($arrayParametrosDet))
             {
                 $intPermanenciaAdicionales = intval($arrayParametrosDet['valor2']); 
             }             
             
             $arrayServiciosPunto = $this->_em->getRepository('schemaBundle:InfoServicio')
                                              ->findBy(array("id" => $intServicioId,"estado" => 'Activo'));
           
            foreach($arrayServiciosPunto as $objServicioPunto)
            {
                if($objServicioPunto->getProductoId())
                {
                    $objProducto = $this->_em->getRepository('schemaBundle:AdmiProducto')
                                             ->find($objInfoServicio->getProductoId());

                    if (is_object($objProducto) && !is_null($objProducto->getDescripcionProducto()))
                    {
                        $strNombreTecnico   = is_object($objServicioPunto->getProductoId()) ? 
                                             $objServicioPunto->getProductoId()->getNombreTecnico() : null;
                        $strCodigoProducto  = is_object($objServicioPunto->getProductoId()) ? 
                                             $objServicioPunto->getProductoId()->getCodigoProducto() : null;
                        // Se verifica si existen servicios con producto NETLIFECAM VISEG
                        $arrayParamNetlifeCam                  = array();
                        $arrayParamNetlifeCam['intIdProducto'] = $objProducto->getId();      
                        $arrayParamNetlifeCam['strCodEmpresa'] = $strEmpresaCod;
                        if(in_array($objProducto->getNombreTecnico(),$arrayParamProducNetCam))
                        {
                            $strFacturaNetlifecam = $this->getEsServicioNetlifeCam($arrayParamNetlifeCam);
                        }
                        
                        if( $strFacturaNetlifecam === 'S' && in_array($objProducto->getNombreTecnico(),$arrayParamProducNetCam))
                        {                            
                            $arrayParamMsjNetlifecam = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne("CANCELACION VOLUNTARIA", 
                                                                     "FINANCIERO", 
                                                                     "FACTURACION", 
                                                                     "", 
                                                                     "MENSAJE NETLIFECAM", 
                                                                     "", 
                                                                     "",
                                                                     "",
                                                                     "",
                                                                     "18"
                                                                   );
                            if(!empty($arrayParamMsjNetlifecam))
                            {
                                $strMsjNetlifecam = $arrayParamMsjNetlifecam['valor2'];
                            }                                

                            // Se obtiene permanencia mínima de servicio Netlifecam

                            $arrayParametrosDet = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne("CANCELACION VOLUNTARIA", 
                                                                     "FINANCIERO", 
                                                                     "FACTURACION", 
                                                                     "", 
                                                                     "", 
                                                                     "", 
                                                                     $strNombreTecnico,
                                                                     "",
                                                                     "",
                                                                     "18"
                                                                   );
                            if(!empty($arrayParametrosDet))
                            {
                                $intPermanenciaNetlifeCam = intval($arrayParametrosDet['valor2']); 
                            }
                            
                            $intNumMesesActivoNtlCam  = str_pad(' ', 30);           

                            $strSql  = "BEGIN 
                                       :Ln_NumMesesActivo := 
                                        DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_MESES_ACTIVO(:Fn_IdServicio); END;";
                            $objStmt = $this->_em->getConnection()->prepare($strSql);
                            $objStmt->bindParam('Fn_IdServicio', $objInfoServicio->getId());
                            $objStmt->bindParam('Ln_NumMesesActivo', $intNumMesesActivoNtlCam);

                            $objStmt->execute();

                            if($intNumMesesActivoNtlCam > $intPermanenciaNetlifeCam)
                            {
                                $floatValorNetlifeCam     = 0;
                                $floatValorDctoNetlifecam = 0;
                            }
                            {
                                $strCodigoNetlifeCam = $objProducto->getCodigoProducto();
                                $strCodigoTipoFac    = 'FAC';
                                $strSql  = " BEGIN 
                                            :Ln_ValorDctoNetlifecam := 
                                             DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_DCTO_BY_PRODUCTO(:Fn_IdPunto,:Fn_IdServicio,
                                                                                                       :Fv_CodigoProducto,
                                                                                                       :Fv_TipoDoc); 
                                             END;";

                                $objStmt = $this->_em->getConnection()->prepare($strSql);
                                $objStmt->bindParam('Fn_IdPunto', $intPtoId);
                                $objStmt->bindParam('Fn_IdServicio', $objInfoServicio->getId());
                                $objStmt->bindParam('Fv_CodigoProducto', $strCodigoNetlifeCam);
                                $objStmt->bindParam('Fv_TipoDoc', $strCodigoTipoFac);
                                $objStmt->bindParam('Ln_ValorDctoNetlifecam', $floatValorDctoNetlifecam);
                                $objStmt->execute();
                                
                                // Si vigencia de internet ya cumplió permanencia mínima pero Netlifecam no
                                if (((isset($intPermanenciaMinima) && isset($intNumMesesActivo)) &&
                                    ($intNumMesesActivo > $intPermanenciaMinima)) || 
                                    (in_array($objProducto->getNombreTecnico(),$arrayParamProducNetCam)&&
                                    $intNumMesesActivoNtlCam < $intPermanenciaNetlifeCam))
                                {
                                    if(is_object($objProdActual) && in_array($objProdActual->getNombreTecnico(),$arrayParamProducNetCam))
                                    {
                                        $floatValorDctos  = $floatValorDctoNetlifecam;
                                    }
                                    $intPlanId               = $objInfoServicio->getPlanId();
                                    if(in_array($objProducto->getNombreTecnico(),$arrayParamProducNetCam) && !isset($intPlanId))
                                    {
                                       
                                        $strSql  = " BEGIN 
                                                    :Ln_ValorDctoNetlifecamAdic := 
                                                     DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_DCTO_BY_PRODUCTO(:Fn_IdPunto,
                                                                                                               :Fn_IdServicio,
                                                                                                               :Fv_CodigoProducto,
                                                     :Fv_TipoDoc);END;";

                                        $objStmt = $this->_em->getConnection()->prepare($strSql);
                                        $objStmt->bindParam('Fn_IdPunto', $intPtoId);
                                        $objStmt->bindParam('Fn_IdServicio', $objInfoServicio->getId());
                                        $objStmt->bindParam('Fv_CodigoProducto', $strCodigoNetlifeCam);
                                        $objStmt->bindParam('Fv_TipoDoc', $strCodigoTipoProp);
                                        $objStmt->bindParam('Ln_ValorDctoNetlifecamAdic', $floatValorDctoAdicional);
                                        $objStmt->execute();                                    
                                        
                                    }
                                }                                
                            }

                        }
                                                             
                        if ($objProducto->getDescripcionProducto() === 'NETLIFEASSISTANCE')
                        {                        

                            $intNumMesesActivoNtlAss  = str_pad(' ', 30);           
                            $strSql  = "BEGIN 
                                        :Ln_NumMesesActivo := 
                                        DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_MESES_ACTIVO(:Fn_IdServicio); END;";
                            $objStmt = $this->_em->getConnection()->prepare($strSql);
                            $objStmt->bindParam('Fn_IdServicio', $objInfoServicio->getId());
                            $objStmt->bindParam('Fn_IdContrato', $intContratoId);
                            $objStmt->bindParam('Ln_NumMesesActivo', $intNumMesesActivoNtlAss);

                            $objStmt->execute();

                            if($intNumMesesActivoNtlAss > $intPermanenciaAdicionales)
                            {
                                $floatValorNetlifeAssistance = 0;
                            }

                        }                      
                    }
                }                
            }
            //Dcto Proporcional de traslado
            $intPuntoTrasladado = null;
            $intPuntoTrasladado = str_pad(' ', 30); 
            $strSql  = " BEGIN 
                        :Ln_IdPuntoTrasladado := 
                         DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_ID_PTO_TRASLADADO(:Fn_IdServicio);END;";

            $objStmt = $this->_em->getConnection()->prepare($strSql);
            $objStmt->bindParam('Fn_IdServicio', $intServicioId);
            $objStmt->bindParam('Ln_IdPuntoTrasladado', $intPuntoTrasladado);
            $objStmt->execute();

            if(isset($intPuntoTrasladado) )
            {
                $floatValorDctoAdicionalTraslado = 0;
                $floatValorDctoAdicionalTraslado = str_pad(' ', 30); 
                $floatValorDctoTrasladoRec       = 0;
                $floatValorDctoTrasladoRec       = str_pad(' ', 30);  
                
                if((is_object($objProdActual) && in_array($objProdActual->getNombreTecnico(),$arrayParamProducNetCam)))
                {
                    $strSql  = " BEGIN 
                                :Ln_ValorDctoNetlifecamAdicTrasl := 
                                 DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_DCTO_BY_PRODUCTO(:Fn_IdPunto,:Fn_IdServicio,:Fv_CodigoProducto,
                                 :Fv_TipoDoc);END;";

                    $objStmt = $this->_em->getConnection()->prepare($strSql);
                    $objStmt->bindParam('Fn_IdPunto', $intPuntoTrasladado);
                    $objStmt->bindParam('Fn_IdServicio', $intServicioId);
                    $objStmt->bindParam('Fv_CodigoProducto', $strCodigoNetlifeCam);
                    $objStmt->bindParam('Fv_TipoDoc', $strCodigoTipoProp);
                    $objStmt->bindParam('Ln_ValorDctoNetlifecamAdicTrasl', $floatValorDctoAdicionalTraslado);
                    $objStmt->execute();
                    
                    
                    $strSql  = " BEGIN 
                                :Ln_ValorDctoNetlifecamAdicTraslRec := 
                                 DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_DCTO_BY_PRODUCTO(:Fn_IdPunto,:Fn_IdServicio,:Fv_CodigoProducto,
                                 :Fv_TipoDoc);END;";

                    $objStmt = $this->_em->getConnection()->prepare($strSql);
                    $objStmt->bindParam('Fn_IdPunto', $intPuntoTrasladado);
                    $objStmt->bindParam('Fn_IdServicio', $intServicioId);
                    $objStmt->bindParam('Fv_CodigoProducto', $strCodigoNetlifeCam);
                    $objStmt->bindParam('Fv_TipoDoc', $strCodigoTipoFac);
                    $objStmt->bindParam('Ln_ValorDctoNetlifecamAdicTraslRec', $floatValorDctoTrasladoRec);
                    $objStmt->execute();
                    if($intNumMesesActivoNtlCam > $intPermanenciaNetlifeCam)
                    {
                        $floatValorDctoTrasladoRec       = 0;
                        $floatValorDctoAdicionalTraslado = 0;
                    }                 
                }
                else
                {

                    $strSql  = " BEGIN 
                                :Ln_ValorDcto := 
                                 DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_DCTO_FACTURADO_SERVICIO(:Fn_IdPunto,:Fn_IdServicio,:Fv_TipoDoc);END;";
                   
                    $objStmt = $this->_em->getConnection()->prepare($strSql);
                    $objStmt->bindParam('Fn_IdPunto', $intPuntoTrasladado);
                    $objStmt->bindParam('Fn_IdServicio', $intServicioId);
                    $objStmt->bindParam('Fv_TipoDoc', $strCodigoTipoProp);
                    $objStmt->bindParam('Ln_ValorDcto', $floatValorDctoAdicionalTraslado);
                    $objStmt->execute();
                    
                    if ((isset($intPermanenciaMinima) && isset($intNumMesesActivo)) &&
                       ($intNumMesesActivo > $intPermanenciaMinima))
                    {                    
                           $floatValorDctoAdicionalTraslado  = 0;
                    }                   

                }
                if($floatValorDctoTrasladoRec>0)
                {
                    $floatValorDctos += $floatValorDctoTrasladoRec;
                }                 
                if($floatValorDctoAdicionalTraslado>0)
                {
                    $floatValorDctoAdicional += $floatValorDctoAdicionalTraslado;
                }                
            }             
        } 
        catch (\Exception $ex) 
        {
            error_log("Error al consultar valores a facturar: ". $ex->getMessage());
        }
        
        if($strDescripProducto=="INTERNET")
        {
           $floatValorProducto=0; 
        }
        else
        {
            if($floatValorNetlifeCloud > 0 && $strDescripProducto=="NETLIFECLOUD")
            {
               $floatValorProducto = $floatValorNetlifeCloud;
            }
            elseif($floatValorDctoNetlifecam>0 && $strDescripProducto=="NETLIFECAM")
            {
                $floatValorProducto = $floatValorDctoNetlifecam;
            }
            elseif($floatValorNetlifeAssistance>0 && $strDescripProducto=="NETLIFEASSISTANCE")
            {
                $floatValorProducto = $floatValorNetlifeAssistance;
            }
            elseif($floatValorEcdf > 0 && $strDescripProducto=="ECDF")
            {
                $floatValorProducto =$floatValorEcdf;
            }
            else
            {
                $floatValorProducto=0;
            }
        }
        
                
        // Se obtiene fecha de activación del servicio.
        
        $arrayParamFecha                      = array();
        $arrayParamFecha['intIdServicio']     = $intServicioId;
        $arrayParamFecha['intPtoSessionId']   = $intPtoId;
        $arrayParamFecha['descripProducto']   = $strDescripProducto;    
        $arrayParamFecha['emFinanciero']      = $this->_em;
        
        $arrayFechaActivacion = $this->getFechaActivacionProdCV($arrayParamFecha);
        
        if(!empty($arrayFechaActivacion))
        {
            $strFechaActivacion = $arrayFechaActivacion['fechaActivacion'];
        }

                
        $arrayRespuesta = array('totalDctos'                  => $floatValorDctos,
                                'totalInstalacion'            => $floatValorInst, 
                                'totalValorProducto'          => $floatValorProducto, 
                                'totalDctoAdicional'          => $floatValorDctoAdicional,
                                'productoCancelar'            => $strDescripProducto,
                                'fechaActivacion'             => $strFechaActivacion
                            );
        
        $objJsonData       = json_encode($arrayRespuesta);

        return $objJsonData; 
    }
    
    
    
        

    /**
     * getFechaActivacionProdCV
     *
     * Método que obtiene las fchas de activacion del Servicio de Internet y de los productos adicionales del cliente.                      
     *
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0 31-08-2022
     * 
     */
    public function getFechaActivacionProdCV($arrayParametros)
    {

        $strDescripProducto     = $arrayParametros['descripProducto'];
            
        $intPtoSessionId        = ( isset($arrayParametros['intPtoSessionId']) && !empty($arrayParametros['intPtoSessionId']) )
                                   ? $arrayParametros['intPtoSessionId'] : null;
       
        $strFechaActivacion     = '';
      
              
        //  Se obtienen datos del servicio mandatorio Internet
        $objInfoServicio = $this->_em->getRepository('schemaBundle:InfoServicio')->find($arrayParametros['intIdServicio']);
        
       
        if($strDescripProducto=='INTERNET')
        {
            if($objInfoServicio->getTipoOrden()==='T')
            {
                $strFechaActivacion  = str_pad($strFechaActivacion, 50, " ");                                
                $strSql = " BEGIN
                            :Lv_FechaAct := 
                             DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_FE_ACT_INT( :Fn_IdPunto ); END;";                    
                $objStmtInternet = $this->_em->getConnection()->prepare($strSql);
                $objStmtInternet->bindParam('Fn_IdPunto', $intPtoSessionId);
                $objStmtInternet->bindParam('Lv_FechaAct', $strFechaActivacion);
                $objStmtInternet->execute();               
            }
            else
            {
                $strFechaActivacion = $this->_em->getRepository("schemaBundle:InfoServicioTecnico")
                                                ->getFechaActivacionServicioOrigen($arrayParametros);                   
            }                                 
        }
        
        elseif($strDescripProducto=='NETLIFECAM')
        {
            $arrayParamNetlifeCam = array();
            $arrayParamNetlifeCam['intIdServicio'] = $objInfoServicio->getId();
            $arrayParamNetlifeCam['emFinanciero']  = $arrayParametros['emFinanciero'];
            $strFechaActivacion = $this->_em->getRepository("schemaBundle:InfoServicioTecnico")
                                            ->getFechaActivacionServicioOrigen($arrayParamNetlifeCam);

        }
        
        elseif($strDescripProducto=='NETLIFECLOUD')
        {
            $strAccionHist = 'renovarLicenciaOffice365';
            $strParametro  = 'Accion';
            $objFechaFin  = null;

            $strFechaActivacion  = str_pad($strFechaActivacion, 50, " ");

            $strSqlNlc = "BEGIN :Lv_FechaNetlifeCloud := COMEK_CONSULTAS.F_GET_FECHA_CREACION_HISTORIAL( :Fn_IdServicio,"
                                                                                                      . ":Fv_Buscar,"
                                                                                                      . ":Fv_Parametro,"
                                                                                                      . ":Fd_FechaFin ); END;";

            $objStmtNlc = $this->_em->getConnection()->prepare($strSqlNlc);

            $objStmtNlc->bindParam('Fn_IdServicio', $objInfoServicio->getId());
            $objStmtNlc->bindParam('Fv_Buscar', $strAccionHist);
            $objStmtNlc->bindParam('Fv_Parametro', $strParametro);
            $objStmtNlc->bindParam('Fd_FechaFin', $objFechaFin);
            $objStmtNlc->bindParam('Lv_FechaNetlifeCloud', $strFechaActivacion);
            $objStmtNlc->execute();

            if(is_null($strFechaActivacion))
            {
                $strAccionHist       = 'confirmarServicio';
                $strParametro        = 'Accion';
                $objFechaFin         = null;
                $strFechaActivacion  = '';
                $strFechaActivacion  = str_pad($strFechaActivacion, 50, " ");

                $strSqlNlc = "BEGIN :Lv_FechaNetlifeCloud := COMEK_CONSULTAS.F_GET_FECHA_CREACION_HISTORIAL( :Fn_IdServicio,"
                                                                                                          . ":Fv_Buscar,"
                                                                                                          . ":Fv_Parametro,"
                                                                                                          . ":Fd_FechaFin ); END;";

                $objStmtNlc = $this->_em->getConnection()->prepare($strSqlNlc);

                $objStmtNlc->bindParam('Fn_IdServicio', $objInfoServicio->getId());
                $objStmtNlc->bindParam('Fv_Buscar', $strAccionHist);
                $objStmtNlc->bindParam('Fv_Parametro', $strParametro);
                $objStmtNlc->bindParam('Fd_FechaFin', $objFechaFin);
                $objStmtNlc->bindParam('Lv_FechaNetlifeCloud', $strFechaActivacion);
                $objStmtNlc->execute();                            

            }
            
        }
        else
        {
            $strAccionHist       = 'confirmarServicio';
            $strParametro        = 'Accion';
            $objFechaFin         = null;
            $strFechaActivacion  = '';
            $strFechaActivacion  = str_pad($strFechaActivacion, 50, " ");

            $strSqlOtros = "BEGIN :Lv_FechaActivacion := COMEK_CONSULTAS.F_GET_FECHA_CREACION_HISTORIAL( :Fn_IdServicio,"
                                                                                                      . ":Fv_Buscar,"
                                                                                                      . ":Fv_Parametro,"
                                                                                                      . ":Fd_FechaFin ); END;";

            $objStmtOtros = $this->_em->getConnection()->prepare($strSqlOtros);

            $objStmtOtros->bindParam('Fn_IdServicio', $objInfoServicio->getId());
            $objStmtOtros->bindParam('Fv_Buscar', $strAccionHist);
            $objStmtOtros->bindParam('Fv_Parametro', $strParametro);
            $objStmtOtros->bindParam('Fd_FechaFin', $objFechaFin);
            $objStmtOtros->bindParam('Lv_FechaActivacion', $strFechaActivacion);
            $objStmtOtros->execute();

            if(is_null($strFechaActivacion))
            {
                $strFechaActivacion  = '';
                $strFechaActivacion  = str_pad($strFechaActivacion, 50, " ");                                
                $strAccionHist       = '%Se creo el servicio%';
                $strParametro        = 'Observacion';
                $objFechaFin         = null;
                $objStmtOtros = $this->_em->getConnection()->prepare($strSqlOtros);
                $objStmtOtros->bindParam('Fn_IdServicio', $objInfoServicio->getId());
                $objStmtOtros->bindParam('Fv_Buscar', $strAccionHist);
                $objStmtOtros->bindParam('Fv_Parametro', $strParametro);
                $objStmtOtros->bindParam('Fd_FechaFin', $objFechaFin);
                $objStmtOtros->bindParam('Lv_FechaActivacion', $strFechaActivacion);
                $objStmtOtros->execute();                                
            }

        }

        $strFechaActivacion = ''.date('d-m-Y',strtotime($strFechaActivacion));
        
        $arrayRespuesta = array('fechaActivacion' => $strFechaActivacion);

        return $arrayRespuesta;

    }
    
    

    /**
     * Funcion que ejecuta un paquete en sql para obtener el array del resultado
     * a mostrar en el grid de servicios tecnicos.
     *
     * @author Allan Suarez         <arsuarez@telconet.ec>
     * @author Alexander Samaniego  <awsamaniego@telconet.ec>
     * @author Francisco Adum       <fadum@telconet.ec>
     * @author John Vera            <javera@telconet.ec>
     * @author Jesus Bozada         <jbozada@telconet.ec>
     * @version 1.0     28-10-2014
     *
     * @version 1.1     27-04-2016 Se modifica proceso y se agregan validaciones para migracion de clientes TELLION CNR
     *
     * @author Jesus Bozada         <jbozada@telconet.ec>
     * @version 1.2     06-05-2016  Se corrige parametro idEmpresa utilizado en recuperación de producto internet dedicado
     *
     * @author Eduardo Plua <eplua@telconet.ec>
     * @version 1.3 26-05-2016 - Se pasa como parametro ServiceTecnico para uso interno
     *
     * @author Duval Medina C. <dmedina@telconet.ec>
     * @version 1.4 2016-06-03 - Se pasa como parametro loginForma para segmentar la consulta por login y disminir costo un 99%
     *
     * @author Francisco Adum  <fadum@telconet.ec>
     * @version 1.5 10-06-2016
     * Se agrega parametro de producto EsEnlace y se captura excepcion para obtener elemento padre (router)
     *
     * @author Duval Medina C.  <dmedina@telconet.ec>
     * @version 1.6 2016-08-08 - Se incluye valiacion isset() de 2 variables para eliminar los PHP Notice del Log
     *
     * @author Jesus Bozada  <jbozada@telconet.ec>
     * @version 1.7 08-08-2016
     * Se agrega validacion de informacion de servicios Radio TN y se agrega parametro de salida informacionRadio para mostrar boton de regularización
     *
     * @author Allan Suarez  <arsuarez@telconet.ec>
     * @version 1.8 22-11-2016
     * Se agrega informacion que determina si un servicio es pseudope o es un servicio normal
     *
     * @author Allan Suarez  <arsuarez@telconet.ec>
     * @version 1.9 30-01-2017
     * Se devuelve informacion de acuerdo a si un servicio es factible realizar migracion a esquema pseudope o no cuando se trate de FO migrado sin
     * data GIS
     *
     * @author Allan Suarez  <arsuarez@telconet.ec>
     * @version 2.0 01-02-2017
     * Se agrega validacion adicional que contemple solamente peroductos con clasificacion DATOS restringiendo productos que no poseen
     * data tecnica necesaria para flujo pseudope
     *
     * @author Allan Suarez  <arsuarez@telconet.ec>
     * @version 2.1 07-02-2017
     * Se agrega validacion ternaria que envia SI o NO en el request si la variable booleana que determina si es o no pseudo PE es true o false
     *
     * @author Allan Suárez  <arsuarez@telconet.ec>
     * @version 2.2 17-02-2017
     * Se envia informacion de protocolo de enrutamiento
     *
     * @author Allan Suárez  <arsuarez@telconet.ec>
     * @version 2.3 21-02-2017
     * Se envia informacion de asprivado para servicios de INTMPLS
     *
     * @author Jesus Bozada  <jbozada@telconet.ec>
     * @version 2.4 23-02-2017
     * Se agrega codigo para recuperar información de solicitudes(estado Asignada) generadas en cambio de planes que incluyen producto SmartWifi
     * dentro de su detalle
     * @since 2.1
     *
     * @author Allan Suárez  <arsuarez@telconet.ec>
     * @version 2.5 03-03-2017
     * Se envia informacion de tipo de subred para servicios de INTMPLS
     * Envio de VRF correcta para Servicios con INTMPLS
     * Envio de informacion que validad si el servicio ya posee una solicitud de cambio de subred
     *
     * @author Allan Suarez  <arsuarez@telconet.ec>
     * @version 2.6 28-03-2017
     * Si el Servicio es Concentrador Backup se ajusta para que obtenga las capacidades a partir de su Concentrador Principal enlazado
     *
     * @author Allan Suarez  <arsuarez@telconet.ec>
     * @version 2.7 22-06-2017
     * Enviar informacion de subredes asignadas para servicios VSAT
     *
     * @author Francisco Adum <fadum@netlife.net.ec>
     * @version 2.8 08-09-2017  Se agrega quer retorne valor [ipv4Publico] para enviar al OSS.
     *
     * @author Allan Suarez  <arsuarez@telconet.ec>
     * @version 2.9 11-09-2017
     * Se envio informacion de grupo/solucion de productos en caso de existir para mostrar los mismos de manera agrupada
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.9 08-12-2017  Se realizan validaciones para el flujo del producto Internet Small Business
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 3.0 19-02-2018 Se agrega información para saber si un servicio es Internet Small Business
     *
     * @author Allan Suarez  <arsuarez@telconet.ec>
     * @version 3.0 29-01-2018
     * Se envia informacion indicando si un servicio tiene o hereda informacion de factibilidad de otro servicios ( caso FARMAENLACE )
     * Se agrega validacion para que soporte nombre tecnico CONCINTER ( Concentrador de Interconexion )
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 3.1 07-03-2018  Se ajusta para que el nombre de la solucion  muestra la forma de multi solución ( NxN )
     *                          Se muestra informacion configurada para enlace Conc L2 DC
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 3.2 30-07-2018  Se ajusta para que se devuelva bandera indicando si productos con nombre técnico OTROS se active o no en función
     *                          de flujos determinados
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 3.2 17-07-2018 - Se enviá nuevo parámetro al método getPeBySwitch
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 3.3 15-08-2018 - Se realizan ajustes para obtener si un producto es concentrador y así poder retornar esa información
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 3.4 03-08-2018 - Se agregan validaciones necesarias para procesar y mostrar botones de acciones telcograf
     * @since 3.3
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 3.5 30-08-2018 - Se agrega variable $strEsNodoWifi, para identificar si son nodos wifi y habilitar las
     *                           herramientas: Crear Ruta Estática y Ver Rutas Estáticas para los enlace Backup
     * @since 3.4
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 3.6 19-09-2018 - Se realizan ajustes para implementar el concepto de SDWAN cuando se reutiliza la misma UM, esto abarca los productos
     *                           DATOSDC e INTERNETDC
     * @since 3.5
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 3.7 18-12-2018 - Se verifica si existe un producto Extender Dual Band dentro del plan y si se permite el reintento
     *                           de activación de McAfee
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 3.8 21-01-2019 - Se verifica si el servicio tiene asociada la característica ORIGEN_ACTIVACION, para determinar si el botón
     *                           confirmar servicio de un plan debe o no ser mostrado desde el Telcos Web
     * @since 3.7
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 3.9 21-01-2019 - Se realizan ajustes para ingresar información de los equipos de seguridad logica
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 4.0 08-02-2019  Se realizan validaciones para flujo de servicios TelcoHome y sus ips adicionales
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 4.1 25-02-2019 - Se realizan ajustes para habilitar la creación de rutas estáticas en servicios Backup
     * @since 3.9
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 4.2 06-03-2019 - Se realiza regularización de cambio en caliente en la lin. 2837
     * @since 4.1
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 4.3 28-02-2019 - Se obtiene información para verificar si el servicio requiere traslado de un equipo EXTENDER DUAL BAND
     * @since 3.8
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 4.4 25-03-2019 Se retorna parametro:configuracionPeHsrp que va permitir habilitar si una orden de servicio puede utilizar
     *                         la herramienta que define el esquema de Pe-Hsrp
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 4.5 20-03-2019 - Se modifica el parámetro enviado como código de la empresa a la función obtenerInfoMapeoProdPrefYProdsAsociados,
     *                            para que se pueda usar esta función al cancelar por solicitud masiva un servicio TelcoHome
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 4.6 01-04-2019 - Se agregan nuevos parámetros de respuesta (strCorreoMcAfee, intIdCaractCorreoMcAfee) utilizados
     *                           en nuevo botón de edición de correo electrónico referentes al producto McAfee
     *
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 4.7
     * @since 21-03-2019 Dentro de la validación de servicios SDWAN se agrega validación para que el productoTecnico pueda ser 'DATOSDC'
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 4.8 28-03-2019 - Se agrega el servicio de planificación para poder acceder al método getTipoEsquema
     *                           y obtener el esquema del servicio para devolverlo en la respuesta.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 4.9 26-04-2019 - Se agrega validación para que en los servicios que tienen como descripción PLAN CLOUD no pida información del
     *                           equipo, adicional se realizara un desarrollo para dejar de manera dinámica para que pueda validar otro tipo de
     *                           descripciones
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 5.0 05-06-2019 - Se agrega programación para obtener información necesaria para poder realizar la actualización
     *                           de correos electrónicos de suscripciones mcafee
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 5.1 24-06-2019 - Se agrega validación del parámetro filtroXEmpresa que será enviada con 'NO' para que no se filtre
     *                            la consulta por empresa y se obtenga los servicios Small Business e Ips Small Business para realizar
     *                            correctamente el conteo de ips en el proceso de migración
     *
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 5.1 05-06-2019 - Se agrega programación para recuperar caracteristicas e información de equipos necesaria para
     *                           gestionar los productos Dual Band
     * @since 5.0
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 5.2 01-07-2019 - Se inserta el Nombre Tecnico "INTERNET SDWAN". para que realice la consulta del pe.
     *                              Se ingresa INTERNET SDWAN como parte del monitoreo de TelcoGraph
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 5.2 09-07-2019 - Se obtiene la solicitud de migración en estado PendienteExtender asociada a un servicio cuyo plan necesita
     *                            agregar un equipo Extender Dual Band
     *
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 5.3 09-07-2019 - Se retorna parametro 'tieneProgresoActa' que indica si el servicio tiene progreso de ACTAS; utilizado
     *                           para visualizar botón de generación de acta.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 5.4 24-05-2019 - Se agrega funcionalidad que permite agregar un arreglo con la informacion de la solicitud Wifi en caso de que
     *                           se trate de un servicio INTERNET WIFI para agregarlo al array de respuesta.
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 5.5 06-08-2019 - Se agregan validaciones para obtener los valores necesarios para el flujo de I. PROTEGIDO MULTI PAID
     *                            con la nueva tecnología Kaspersky
     *                            $strNuevoAntivirus: Si el servicio como producto adicional tiene la característica ANTIVIRUS
     *                            $strNuevoAntivirusActivo: Si el servicio como plan o producto adicional tiene la característica SUSCRIBER_ID
     *                            $strReintentoNuevoAntivirus: Si el servicio como plan o producto adicional tiene la característica NUMERO REINTENTOS
     *                            $strPermiteCancelLogica: Si el servicio como plan o producto adicional tiene la característica
     *                                                     PERMITE_CANCELACION_LOGICA
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 5.6 05-08-2019 - Se inserta el Nombre Tecnico "L3MPLS SDWAN". para que realice la consulta del pe.
     *                           Se agrega el producto L3MPLS Sdwan como As_privado.
     *                           Se agrega el producto L3MPLS Sdwan a validación de rutas estaticas.
     *                           Se ingresa L3MPLS SDWAN como parte del monitoreo de TelcoGraph.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 5.7 28-08-2019 - Se consulta el estado de la solicitud: SOLICITUD MIGRACION DE VLAN y se lo retorna al .js
     *
     * @author David León <mdleon@telconet.ec>
     * @version 5.8 04-09-2019 - Se ajusta para que los enlaces de internet dc sdwan y datos dc sdwan soporte utilización de misma última milla.
     *                           Se agrega el producto DATOS DC SDWAN en la validación de AsPrivado.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 5.9 25-09-2019 - Se agrega una validacion para poder incluir un arreglo con los parametros de validacion cuando el producto sea
     *                           WIFI Alquiler Equipos.
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 5.10 16-09-2019 - Se recupera información utilizada en el proceso de reintento de proceso de promoción
     * @since 5.7
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 5.11 21-09-2019 - Se agrega las variables $strTieneFibra y $strTieneMateriales para saber si el servicio tiene
     *                           Progreso de RUTA_FIBRA y INGRESO_MATERIALES
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 6.0 15-11-2019 - Se retorna el tipo de red: MPLS o GPON al .js y adicional para productos GPON se establece que el flujo es TN
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 6.1 14-11-2019 - Se agrega el número de bobinas a visualizar para una tarea de instalación Megadatos.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 6.2 16-12-2019 - Se agrega la variable 'strMostrarInfoTelcoGraph', para mostrar la información técnica
     *                           del monitoreo de telcograf de un cliente.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 6.3 09-01-2020 - Para servicios L3MPLS se verifica si la asignación de recursos de red es nueva o existentes.
     *
     * @author Pablo Pin <ppin@telcone.ec>
     * @version 6.4 10-12-2019 - Se agrega funcionalidad para buscar mediante login auxiliar.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 6.5 31-01-2020 - Se agrega la variable 'strCrearMonitoreoTG', para mostrar el botón de crear el monitoreo de telcograf
     *                           bajo demanda.
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 6.4 26-02-2020 - Se elimina la obtención de las capacidades de Small Business Zte, ya que están siendo guardadas a nivel 
     *                           de característica del servicio
     *
     * @author Walther Joao Gaibor C. <wgaibor@telconet.ec>
     * @version 6.5 26-03-2020 - Se adiciona parametro para identificar si un servicio de MD tiene activado un NETLIFE_CLOUD.
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 6.6 26-03-2020 - Se valida que el producto tenga la marca de activación simultánea
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 6.7 29-04-2020 - Se modifica la obtención de la descripción de la característica velocidad asociada a servicios Small Business y
     *                            TelcoHome invocando a la nueva función obtenerParametrosProductosTnGpon debido a la reestructuración de la 
     *                            programación de dichos productos
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 6.8 05-05-2020 - Se agrega el tipo de solicitud: 'SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO'
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 6.9 16-05-2020 - Se agrega en la respuesta el envío de la marca del elemento olt
     *
     * @author Ronny Morán <mlcruz@telconet.ec>
     * @version 6.10 31-03-2020 - Se modifica el progreso de ingreso de fibra por el código INGRESO_FIBRA. 
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 7.0 31-05-2020 - Se agregan dos indices al arrreglo de respuesta 'boolRequiereRegistro' y 'boolTieneFlujo', 
     *                            para controlar comportamiento de servicios con caracteristica INSTALACION_SIMULTANEA sin flujo.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 7.1 10-06-2020 - Se agrega logica para validar que productos son permitidos para la herramienta: 'Reversar estado Orden Trabajo'.
     *
     * @author Germán Valenzuela<gvalenzuela@telconet.ec>
     * @version 7.2 14-07-2020 - Si el servicio es parte de una solución DC, se obtiene la data de las nuevas estructuras.
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 7.3 23-07-2020 Se elimina validación duplicada para validar si existe la característica TRASLADAR EXTENDER DUAL BAND
     *                          asociada al servicio
     *                           
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 7.4 15-07-2020 - Se agregan parametros para precargar equipos en instalaciones TN.  
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 7.5 16-07-2020 - Se consulta si el producto requiere flujo para obtener la tarea principal.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 7.6 23-09-2020 Se agregan validaciones para mostrar botones en servicios asociados a producto W+AP
     * 
     * @author David Leon <mdleon@telconet.ec>
     * @version 7.7 23-09-2020 - Se agrega validación para mostrar el estado de un producto perteneciente a un plan segun su solicitud y habilitar 
     *                           las opciones de botones.
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 7.8 24-09-2020 - Se agrega el parámetro del id del departamento para consultar si se debe visualizar el botón de la cofirmación
     *                           del servicio y consulta si el producto tiene características adicionales.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 7.9 20-10-2020 - Se agrega programación para consultar si un producto sin flujo esta hablitado para que se realice la activacion y
     *                           registro de elementos
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 8.0 16-11-2020 - Se consulta si el servicio principal de internet esta in-corte
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 8.1 03-12-2020 - Se agrega el parámetro de visualización de pantalla de fibra para los productos que se encuentran parametrizados
     *                           como Cableado Estructurado.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 8.1 09-11-2020 - Se permite el traslado del extender a los servicios W+AP 
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 8.2 17-12-2020 - Se valida el objeto emSoporte ya que en la ejecución de los planes masivo viene vacío el objeto.
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 8.2 26-10-2020 - Se agrega el parámetro de respuesta tipo de plan para clientes Pyme MD
     * 
     * @author Jonathan Mazón Sánchez <jmazon@telconet.ec>
     * @version 8.2 18-12-2020 - Se agrega el envio del punto Id del servicio para utilizarlos con los productos Paramount y Noggin
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 8.3 22-03-2021 Se abre la programacion para servicios Internet SDWAN
     *
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 8.4 26-03-2021 Se mejoro funcionalidad para mostrar el estado de la solicitud cuando es CE empaquetado y si es adicional
     *                         se mostrara el estado del servicio en el grid tecnico.
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 8.5 12-04-2021 - Se agregan los parámetros necesarios para distinguir si una solicitud permite realizar el cambio de un ont
     *                           por agregación de extender
     *
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 8.6 23-07-2021 - Se obtiene variable $intIdServicioInternet del servicio de internet.
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 8.7 03-08-2021 - Se agrega la caracteristica de productos konibit para mostrar el boton de activacion manual
     *                           en el grid tecnico de servicios
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 8.6 16-07-2021 - Se agregan los parámetros para pantalla de activación de Secure Cpe
     * 
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 8.7 11-04-2021 - Se agregan parámetros para precargar los dispositivos del cliente que se encuentran en el nodo.
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 8.8 28-07-2021 - Se agregan los parámetros para visualizar boton de migración
     *
     * @author Antonio Ayala <gvalenzuela@telconet.ec>
     * @version 8.9 29-09-2021 - Se agregan parámetros para visualización de botón de cambio de velocidad.
     *
     * @author Christian Castro <cxcastro@telconet.ec>
     * @version 9.0 15-11-2021 - Se agregan parámetros para quitar campos de datos tecnicos.
     * 
     * @author Christian Castro <cxcastro@telconet.ec>
     * @version 9.0 15-11-2021 - Se agregan parámetros para quitar campos de datos tecnicos.
     *
     * @author Javier Hidalgo <jihidalgo@telconet.ec>
     * @version 9.1 09-12-2021 - Se agrega parámetro para indicar si un servicio correspondiente a un cliente se encuentra en estado Inaudit.
     * 
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 9.2 11-04-2021 - Se agregan parámetros para precargar los dispositivos del cliente que se encuentran en el nodo.
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 9.3 21-12-2021 - Se agregan parámetros para servicios FTTX de telconet
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 9.4 25-01-2022 - Se agrega la validación para servicios adicionales GPON SafeCiy.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 9.5 16-02-2022 - Se valida la consulta de los productos adicionales automáticos por el esquema del repository.
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 9.6 09-03-2022 - Se agrega vañidacion para permitir solo las velocidades establecidas para producto
     *                           que se encuentra en el parametro
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 9.6 11-04-2022 Se agregan validaciones para verificar si el usuario en sesión puede acceder al grid y obtener las opciones 
     *                         que se encuentran parametrizadas.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 9.7 01-08-2022 Se obtiene loss parametros para las activaciones safecity de los servicios INTERNET VPNoGPON,
     *                         SAFE ANALYTICS CAM y SECURITY NG FIREWALL.
     * 
     * @author Joel Muñoz M <jrmunoz@telconet.ec>
     * @version 9.8 03-10-2022 - Se agregan validaciones para obtener data tecnica de productos NG FIREWALL
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 9.9 03-10-2022 Se obtiene las características de cooperativa, tipo transporte y placa del producto SEG VEHICULO.
     * 
     * @author Steven Ruano <sruano@telconet.ec> 
     * @version 10 20-03-2023  Se Agrega al arrayinfServicio la obtencion del nombre tecnico del servicio a generar.
     * 
     * @author Josue Valencia <ajvalencia@telconet.ec>
     * @version 10.1 20-11-2022 Se agrega parémetros para diferenciar productos de tipo Clear Channel Punto A Punto
     *                         que NO requerien transporte.
     * 
     * @author Josue Valencia <ajvalencia@telconet.ec>
     * @version 10.2 30-12-2022 Se agrega parémetros para reconocer si requiere transporte BACKUP de Clear Channel Punto a Punto.
     * 
     * @author Joel Muñoz <jrmunoz@telconet.ec>
     * @version 10.3 14-04-2023 Se agregan campos en la respuesta para migtación SDWAN
     * 
     * @author Jorge Gómez <jigomez@telconet.ec>
     * @version 10.4 04-05-2023 - Se agregan los parámetros de ubicacion del punto: Latitud, Longitud, Dirección y Ciudad.
     * 
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 10.0 20-01-2023 Se valida si pasa por el producto _paquete_horas_soporte o su recarga
     *                          y se envía el uuid_paquete de punto en sesión.
     *
     * @author Jonathan Burgos <jsburgos@telconet.ec>
     * @version 10.4 28-04-2023 Se validaciones para mostar boton de reenvio de adendum por cambio de plan.
     * 
     * @param array $arrayParametros [ servicios , plan , producto , login , loginForma , tipoServicio , punto , estado ,
     *                                 start , empresa , ultimaMilla , elemento  , interface , ociCon, serviceTecnico,
     *                                 servicioCliente, planificarService, Pv_ServiciosFTTxTN ]
     * 
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 10.5 26-06-2023   Se valida que llegue con valor las variables> productoNombre, emGeneral.
     * @return array
     */
    public function generarArrayClientes($arrayParametros)
    {
        
        //inicializacion de variables
        $total                  = 0;
        $serviceTecnico         = $arrayParametros['serviceTecnico'];
        $serviceUtilidades      = is_object($arrayParametros['serviceUtilidades']) ? $arrayParametros['serviceUtilidades']: null;
        $objPlanificarService   = is_object($arrayParametros['planificarService']) ? $arrayParametros['planificarService']: null;
        $arr_encontrados        = array();
        $strInformacionRadio    = "OK";
        $strEsConcentrador      = "";
        $strPrefijoEmpresaTN    = "TN";
        $strEsSdwan             = "N";
        $strEsNodoWifi          = "N";
        $objServProdCaractSdWan = null;
        $strRegistroEquipo      = "N";
        $strClientePermitido    = "N";
        $arrayParametrosWs      = array();
        $arrayClientesEstatica  = array();
        $strPermiteRutasEstaticas = "N";
        $strClienteMigracionVlan  = "N";
        $strNetlifeCloud          = "N";
        $strPuntoDireccion = '';
        $strPuntoLatitud  = '';
        $strPuntoLongitud = '';
        $strPuntoCanton = '';
        $strLoginSesion           = $arrayParametros['strLoginSesion'];
        $strPrefijoEmpresa = $arrayParametros['strPrefijoSesion'];
        $emGeneral                = isset($arrayParametros['emGeneral']) ? $arrayParametros['emGeneral'] : null;
        $emSoporte                = isset($arrayParametros['emSoporte']) ? $arrayParametros['emSoporte'] : null;
        $emComercial              = isset($arrayParametros['emComercial']) ? $arrayParametros['emComercial'] : null;
        
        $arrayPersonalizacionOpcionesGridTecnico = array();
        $arrayParamsVerifPerfilesActivacion = array("strPrefijoSesion"      => $arrayParametros['strPrefijoSesion'],
                                                    "strUserSesion"         => $arrayParametros['strLoginSesion'],
                                                    "strCodEmpresaSesion"   => $arrayParametros['empresa'],
                                                    "strProcesoEjecutante"  => 'GESTION_TECNICA');
        
        if(method_exists($objPlanificarService, 'obtenerInfoPerfilesParamsCoordinacionYActivacion') )
        {
            $arrayRespInfoPerfilesCoordYActiv           = $objPlanificarService->obtenerInfoPerfilesParamsCoordinacionYActivacion(
                                                            $arrayParamsVerifPerfilesActivacion);
            $arrayPersonalizacionOpcionesGridTecnico    =  $arrayRespInfoPerfilesCoordYActiv["arrayPersonalizacionOpcionesGridTecnico"];
        }
        
        $intSolicitudAgregarEquipo              = null;
        $strEsAgregarEquipoMasivo               = "NO";
        $strEsCambioEquiSoporteMasivo           = "NO";
        $strProductoPermitidoHerramientaReverso = "N";
        $intIdServicioInternet                  = $arrayParametros['intIdServicioInternet'];
        
         //Variable de consulta si el estado del servicio esta In-Audit
        $strServicioInternetInAudit = 'N';

        if(isset($arrayParametros['filtroXEmpresa']) && !empty($arrayParametros['filtroXEmpresa']) && $arrayParametros['filtroXEmpresa'] === "NO")
        {
            $strCodEmpresaQuery = '';
        }
        else
        {
            $strCodEmpresaQuery = $arrayParametros['empresa'];
        }

        $arrayParametros['intServicioFTTxTN'] = isset($arrayParametros['intServicioFTTxTN']) ? $arrayParametros['intServicioFTTxTN'] : null;
        //definicion del procedure
        $sql = 'BEGIN TECNK_SERVICIOS.COMP_LISTADO_SERVICIO(:Pn_PlanBusquedaId,
                                                         :Pn_ProductoBusquedaId,
                                                         :Pv_LoginBusqueda,
                                                         :Pv_LoginForma,
                                                         :Pv_TipoServicioBusqueda,
                                                         :Pn_PuntoBusquedaId,
                                                         :Pv_EstadoBusqueda,
                                                         :Pn_TipoMedioBusquedaId,
                                                         :Pn_ElementoBusquedaId,
                                                         :Pn_InterfaceElementoBusquedaId,
                                                         :Pn_start,
                                                         :Pn_codEmpresa,
                                                         :Pn_servicios,
                                                         :Pv_ServiciosFTTxTN,
                                                         :Pn_TotalRegistros,
                                                         :Pv_MensaError,
                                                         :Prf_Result); END;';
                
        $arrayOciCon = $arrayParametros['ociCon'];
        $rscCon = oci_connect($arrayOciCon['user_comercial'], $arrayOciCon['passwd_comercial'], $arrayOciCon['dsn']);
        $stmt = oci_parse($rscCon,$sql);
        $cursorResult = oci_new_cursor($rscCon);                        
        
        oci_bind_by_name($stmt,':Pn_PlanBusquedaId'      ,$arrayParametros['plan']);
        oci_bind_by_name($stmt,':Pn_ProductoBusquedaId'  ,$arrayParametros['producto']);
        oci_bind_by_name($stmt,':Pv_LoginBusqueda'       ,$arrayParametros['login']);
        oci_bind_by_name($stmt,':Pv_LoginForma'          ,$arrayParametros['loginForma']);
        oci_bind_by_name($stmt,':Pv_TipoServicioBusqueda',$arrayParametros['tipoServicio']);
        oci_bind_by_name($stmt,':Pn_PuntoBusquedaId'     ,$arrayParametros['punto']);
        oci_bind_by_name($stmt,':Pv_EstadoBusqueda'      ,$arrayParametros['estado']);
        oci_bind_by_name($stmt,':Pn_TipoMedioBusquedaId' ,$arrayParametros['ultimaMilla']);
        oci_bind_by_name($stmt,':Pn_ElementoBusquedaId'  ,$arrayParametros['elemento']);
        oci_bind_by_name($stmt,':Pn_InterfaceElementoBusquedaId',$arrayParametros['interface']);
        oci_bind_by_name($stmt,':Pn_start'               ,$arrayParametros['start']);
        oci_bind_by_name($stmt,':Pn_codEmpresa'          ,$strCodEmpresaQuery);
        oci_bind_by_name($stmt,':Pn_servicios'           ,$arrayParametros['servicios']);
        oci_bind_by_name($stmt,':Pv_ServiciosFTTxTN'     ,$arrayParametros['intServicioFTTxTN']);
        oci_bind_by_name($stmt,':Pn_TotalRegistros'      ,$total, 10);
        oci_bind_by_name($stmt,':Pv_MensaError'          ,$mensajeError,2000);
        oci_bind_by_name($stmt,':Prf_Result'             ,$cursorResult,-1,OCI_B_CURSOR);
        
        oci_execute($stmt);
        oci_execute($cursorResult, OCI_DEFAULT);
        $intIndex = 0;
        //recorrer el cursor para obtener los datos
        while($row = oci_fetch_array($cursorResult))
        {
            $strNetlifeCloud = "N";
            /* 
             Para la funcion de busqueda por Login Aux.
             Valida si esta seteada la variable strLoginAux y si ese valor esta dentro
             del login auxiliar que esta recorriendo el bucle.
            */
            if(isset($arrayParametros['strLoginAux']) &&
            $row['LOGIN_AUX'] !== $arrayParametros['strLoginAux'])
            {
                continue;
            }

            $strRegistroEquipo              = "N";
            $strInformacionRadio            = "OK";
            $ldap                           = 'NO';
            $strReenvioCredencialTelcograph = "NO";
            $strReintentoCreacionTelcograph = "NO";
            $strCambioPassTelcograph        = "NO";
            $strMostrarInfoTelcoGraph       = "NO";
            $strTrasladarExtenderDualBand   = "NO";
            $strSincronizarExtenderDualBand = "NO";
            $strReintentoPromoBw            = "NO";
            $strCrearMonitoreoTG            = "SI";
            $strRucTg                       = "";
            $floatValorFacturacion          = 0;
            $intNumBobinaIns                = 0;
            $strEstadoNumBobinaIns          = "";
            $intCantidadInstMd              = 0;
            $strFlagActivSim                = "N";
            $strTipoPlan                    = "";
            $strEsIpWan                     = "N";
            $strTipoRed                     = "";
            $booleanTipoRedGpon             = false;
			$boolResumenCompra= false;
            $boolCambioPlanCP= false;

            if(isset($row['PUNTO_ID']) &&  $row['PUNTO_ID'] != '')
            {
                $objPunto = $this->_em->getRepository('schemaBundle:InfoPunto')->find($row['PUNTO_ID']);
                if(is_object($objPunto))
                {
                    $strPuntoDireccion      = $objPunto->getDireccion();
                    $strPuntoLatitud        = $objPunto->getLatitud();
                    $strPuntoLongitud       = $objPunto->getLongitud();

                    $objPuntoCanton = $this->_em->getRepository('schemaBundle:AdmiCanton')
                                     ->find($objPunto->getSectorId()->getParroquiaId()->getCantonId());
                    if(is_object($objPuntoCanton))
                    {
                        $strPuntoCanton = $objPuntoCanton->getNombreCanton();
                    }      
                                                                         
                }
            }
            
            //obtener tipo red
            $objServicio = $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);
			  /*Validamos que el Entity Manager haya sido recibido.*/
              $boolResumenCompra= false;
              $boolCambioPlanCP= false;
            if (is_object($emGeneral) && isset($emGeneral))
            {
                $arrayParamFechaResCompra = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                ->getOne('CRC_FECHA_REENVIO_CORREO',
                            '',
                            '',
                            'CRC_FECHA_REENVIO_CORREO_RESUMEN',
                            '',
                            '',
                            '',
                            '',
                            '',
                        '18');

                $objParametroCambioPlan   = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')->findOneBy(
                        array('nombreParametro' => 'REGULARIZACION_CAMBIO_DE_PLAN',
                            'estado'          => 'Activo'));
                
                if(is_object($objParametroCambioPlan))
                {
                    $objEjecutaCambioDePlan     = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')->findOneBy(
                        array("parametroId" => $objParametroCambioPlan->getId(),
                            "valor1"      => "EMPRESA_CAMBIO_PLAN",
                            "estado"      => "Activo"));

                    if(is_object($objEjecutaCambioDePlan) && $objEjecutaCambioDePlan->getValor2() == $strPrefijoEmpresa )
                    {
                        $objParFechaDespliegue     = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')->findOneBy(
                            array("parametroId" => $objParametroCambioPlan->getId(),
                                "valor1"      => "FECHA_DESPLIEGUE",
                                "estado"      => "Activo"));
                        if(is_object($objParFechaDespliegue))
                        {
                            $strFechaActualCP  = $objParFechaDespliegue->getValor2();
                            $objAntHistServicioCP = $this->_em->getRepository('schemaBundle:InfoServicioHistorial')
                                        ->findListaHistorialPorObservacion(array('intServicioId' => $objServicio->getId(),
                                            'strObservacion' => 'Se cambio de plan'));
                            if (!is_null($objAntHistServicioCP) && count($objAntHistServicioCP)>0) 
                            {
                                $intIndicePerfecto = 0;
                    
                                for ($intCont=0; $intCont < count($objAntHistServicioCP); $intCont++) 
                                { 
                                    if (!is_null($objAntHistServicioCP[$intCont+1]) 
                                    && $objAntHistServicioCP[$intCont+1]->getId() <= $objAntHistServicioCP[$intCont]->getId()) 
                                    {
                                        $intIndicePerfecto = $intCont;
                                    }
                                }
                                $objUltimoRegistro = $objAntHistServicioCP[$intIndicePerfecto];
                                $strFechaServicioV=(($objUltimoRegistro->getFeCreacion()->format('Y-m-d')));
                                $strDateV =date_create_from_format('Y-m-d', $strFechaActualCP);
                                $strFechaV= date_format($strDateV, 'Y-m-d');
                                
                                if ($strFechaServicioV >= $strFechaV) 
                                {
                                    $boolCambioPlanCP= true;
                                }
                            }
                        }
                    }
                }    

                if(!empty($arrayParamFechaResCompra['valor1']) && $objServicio->getPlanId()==null &&
                ($objServicio->getEstado()!='Anulado' && $objServicio->getEstado()!='Eliminado') )
                {
                    $strFechaServicio=(($objServicio->getFeCreacion()->format('d/m/Y')));
                    $strFechaAcutalE= $arrayParamFechaResCompra['valor1'];
                    $strDate =date_create_from_format('d/m/Y', $strFechaAcutalE);
                    $strFecha= date_format($strDate, 'd/m/Y');
                    if( $strFechaServicio >= $strFecha)
                    {
                        $objAntHistServicio = $this->_em->getRepository('schemaBundle:InfoServicioHistorial')
                                    ->findListaHistorialPorObservacion(array('intServicioId' => $objServicio->getId(),
                                        'strObservacion' => 'Correo Resumen Compra'));
                        if(!empty($objAntHistServicio))
                        {
                            $boolResumenCompra= true;
                        }                        
                    }
                }
            }


            if(is_object($objServicio) && is_object($objServicio->getProductoId()))
            {
                //se verifica si el producto tambien pertenece a GPON para setear por default tipo red MPLS
                $arrayParProductoGpon = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne('NUEVA_RED_GPON_TN',
                                                     'COMERCIAL',
                                                     '',
                                                     'PARAMETRO PARA DEFINIR EL TIPO DE RED GPON DE UN PRODUCTO',
                                                     $objServicio->getProductoId()->getId(),
                                                     '',
                                                     '',
                                                     'S',
                                                     'RELACION_PRODUCTO_CARACTERISTICA',
                                                     $row['COD_EMPRESA']);
                if(isset($arrayParProductoGpon) && !empty($arrayParProductoGpon))
                {
                    $strTipoRed = "MPLS";
                }
                //obtener tipo red
                $objServProdCaractTipoRed = $serviceTecnico->getServicioProductoCaracteristica($objServicio,'TIPO_RED',
                                                                                               $objServicio->getProductoId());
                if(is_object($objServProdCaractTipoRed))
                {
                    $strTipoRed = $objServProdCaractTipoRed->getValor();
                }
                elseif($objServicio->getEstado() == "Cancel")
                {
                    $objCaractTipoRed = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                           ->findOneBy(array( "descripcionCaracteristica" => 'TIPO_RED',
                                                              "estado"                    => "Activo"));
                    if(is_object($objCaractTipoRed))
                    {
                        $objProdCaractTipoRed = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                               ->findOneBy(array( "productoId"       => $objServicio->getProductoId()->getId(),
                                                                  "caracteristicaId" => $objCaractTipoRed->getId(),
                                                                  "estado"           => "Activo"));
                        if(is_object($objProdCaractTipoRed))
                        {
                            $objServProdCaractTipoRed = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                       ->findOneBy(array( "servicioId"                => $objServicio->getId(),
                                                                          "productoCaracterisiticaId" => $objProdCaractTipoRed->getId(),
                                                                          "estado"                    => "Eliminado"));
                            if(is_object($objServProdCaractTipoRed))
                            {
                                $strTipoRed = $objServProdCaractTipoRed->getValor();
                            }
                        }
                    }
                }
            }
            //verificar si el tipo de red es GPON
            if(!empty($strTipoRed))
            {
                $arrayParVerTipoRed = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                'COMERCIAL',
                                                                                                '',
                                                                                                'VERIFICAR TIPO RED',
                                                                                                'VERIFICAR_GPON',
                                                                                                $strTipoRed,
                                                                                                '',
                                                                                                '',
                                                                                                '');
                if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                {
                    $booleanTipoRedGpon = true;
                }
            }

            $boolSecureCpe                  = "N";
            
            //verifico si el olt esta aprovisionando el CNR
            if($row['NOMBRE_MODELO_ELEMENTO'] == 'EP-3116')
            {
                 $objDetalleElemento = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                 ->findOneBy(array(  'detalleNombre' => 'OLT MIGRADO CNR',
                                                                     'elementoId' => $row['ID_ELEMENTO']));
                 if($objDetalleElemento)
                 {
                    $ldap = 'SI';
                }
            }
            else
            {
                $ldap = 'SI';
            }
            //determinar si el producto es de un plan o viene directamente del producto del servicio
            if($row['ID_PLAN']==null || $row['ID_PLAN']=="")
            {
                $productoId         = $row['ID_PRODUCTO1'];
                $productoNombre     = $row['DESCRIPCION_PRODUCTO1'];
                $productoTecnico    = $row['NOMBRE_TECNICO1'];
                $objProducto        = $this->_em->getRepository('schemaBundle:AdmiProducto')->find($productoId);
                $productoEsEnlace   = $objProducto->getEsEnlace();
            }
            else
            {
                $productoId         = $row['ID_PRODUCTO'];
                $productoNombre     = $row['DESCRIPCION_PRODUCTO'];
                $productoTecnico    = $row['NOMBRE_TECNICO'];
                $productoEsEnlace   = "";
            }
            if($row['PREFIJO'] == 'MD')
            {
                //Obtenemos caracteristica Inaudit desde tabla AdmiCaracteristica
                $objAdmiCaractInaudit = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array(
                    'descripcionCaracteristica' => 'InAudit', //deberia ir aracteristica de Inaudit
                    'estado' => 'Activo'
                ));
                //Obtenemos servicio con caracteristica Inaudit en tabla InfoServicioCaracteristica
                $objInfoServCaract = $emComercial->getRepository("schemaBundle:InfoServicioCaracteristica")
                ->findOneBy(array(
                    'servicioId' => $objServicio,
                    'caracteristicaId' => $objAdmiCaractInaudit,
                    'estado' => 'Activo'));
                if(is_object($objInfoServCaract))
                {
                    $strServicioInternetInAudit = 'S';
                }
                $arrayParametrosValor = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('VALIDA_PROD_ADICIONAL', 
                                                                         'COMERCIAL', 
                                                                         '',
                                                                         '',
                                                                         'PROD_ADIC_PLANIFICA',
                                                                         $productoId,
                                                                         '',
                                                                         '',
                                                                         '',
                                                                         $row['COD_EMPRESA']);
                if(is_array($arrayParametrosValor) && !empty($arrayParametrosValor))
                {
                    $objAdmiTipoSolicitudPla = $this->_em->getRepository("schemaBundle:AdmiTipoSolicitud")
                                              ->findOneBy(array('descripcionSolicitud' => 'SOLICITUD PLANIFICACION',
                                                                'estado'               => 'Activo'));
                    if(is_object($objAdmiTipoSolicitudPla) && !empty($objAdmiTipoSolicitudPla))
                    {
                        $arrayParametrosPla = array ('Servicio'      => $row['ID_SERVICIO'],
                                              'TipoSolicitud' => $objAdmiTipoSolicitudPla->getId(),
                                              'Producto'      => $productoId);
                        $arrayDetalleSolicitudPla = $this->_em->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                                                            ->getEstadoSolicitudAdicional($arrayParametrosPla);
                        if(is_array($arrayDetalleSolicitudPla) && !empty($arrayDetalleSolicitudPla))
                        {
                            $objDetalleSol   = $arrayDetalleSolicitudPla[0];
                            $row['ESTADO']   = $objDetalleSol->getEstado();
                            $row['BOTONES']  = 'SI';
                        }
                    }
                }
            }  
            $elementoPadre      = "Sin informacion";
            $intIdElementoPadre = 0;
            $anillo             = "Sin informacion";
            $servicioTecnico    = null;
            $strEsSdwan         = "N";
            
            //******************* Proceso de Activación Simultánea ******************//
            //Consultamos si el producto es COU LINEA TELEFONIA y si es de activación simultánea
            //Obtener la caracteristica del producto para conocer que flujo seguir
            if ($productoId == 1204)
            {
                $objServicio= $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);
                if(is_object($objServicio))
                {
                    $objCaract = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                'CATEGORIAS TELEFONIA',
                                                                                $objServicio->getProductoId());
                    if(is_object($objCaract))
                    {
                        $strCategoria = $objCaract->getValor();
                        if ($strCategoria == 'FIJA ANALOGA' || $strCategoria == 'FIJA SIP TRUNK' || $strCategoria == 'FIJA SMB')
                        {
                            //Preguntamos si es activación simultánea y consultamos el estado del servicio tradicional
                            $arrayCouSim = $objPlanificarService->getIdTradInstSim($objServicio->getId());
                            $intIdServTradicional = $arrayCouSim[0];
                            if ($intIdServTradicional !== null)
                            {
                                $strFlagActivSim = 'S';
                            }
                        }
                    }
                }
            }
            
            if ($productoNombre == 'L3MPLS' && $row['ESTADO'] == 'Pre-servicio')
            {
                $objServicio= $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);
                if(is_object($objServicio))
                {
                    $arrayCouSim = $objPlanificarService->getIdTradInstSimCanaTelefonia($objServicio->getId(),$productoId);
                    $intIdServTradicional = $arrayCouSim[0];
                    if ($intIdServTradicional !== null)
                    {
                        $objServTradicional = $this->_em->getRepository("schemaBundle:InfoServicio")->find($intIdServTradicional);
                        if((is_object($objServTradicional)) && ($objServTradicional->getEstado() == 'Activo'))
                        {
                            $strFlagActivSim    = 'S';
                        }
                    }
                }
            }
            // VERIFICAR SI EL PRODUCTO SE ACTIVA CON NUEVO CORREO O ACTUALIZACION
            if($row['PREFIJO'] == 'MD' && $productoTecnico === "ECDF")
            {
                $objServicio= $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);
                if(is_object($objServicio))
                {
                    $objServProdCaractCorreo = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                            'CORREO ELECTRONICO',$objServicio->getProductoId());
                    
                    if(is_object($objServProdCaractCorreo) && $objServProdCaractCorreo->getEstado() == "Activo")
                    {
                        $strCorreoECDF  = $objServProdCaractCorreo->getValor();
                    }
                }
            }
            // VERIFICAR SI EL PRODUCTO NO GENERA CREDENCIALES Y SI AÚN NO HA CREADO UNA CONTRASEÑA
            // CONSULTAR PRODUCTOS QUE NO REQUIEREN CREAR CREDENCIALES
            $objProdGenCred = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                ->getOne('PRODUCTOS_STREAMING_SIN_CREDENCIALES',//nombre parametro cab
                      'COMERCIAL', //modulo cab
                      'OBTENER_NOMBRE_TECNICO',//proceso cab
                      'PRODUCTOS_STREAMING_SIN_CREDENCIALES', //descripcion det
                      $productoTecnico,'','','','', $row['COD_EMPRESA']);
            if($row['PREFIJO'] == 'MD' && is_array($objProdGenCred) && !empty($objProdGenCred))
            {
                $objServicio= $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);
                if(is_object($objServicio))
                {
                    $objServProdCaractCorreo = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                            $objProdGenCred["valor7"],$objServicio->getProductoId());
                    $strTienePassword  = "NO";
                    if(is_object($objServProdCaractCorreo) && $objServProdCaractCorreo->getEstado() == "Activo")
                    {
                        $strTienePassword  = "SI";
                    }
                }
            }
            //*******************Se verifica si es un servicio SDWAN******************//
            if($productoTecnico == "INTERNETDC" || $productoTecnico == "DATOSDC" || $productoTecnico == "INTERNET SDWAN"
                || $productoTecnico == "L3MPLS SDWAN" || $productoTecnico == "INTMPLS")
            {
                $objServicio= $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);

                if(is_object($objServicio))
                {
                    $objServProdCaractSdWan = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                'SDWAN',
                                                                                                $objServicio->getProductoId());

                    if(is_object($objServProdCaractSdWan))
                    {
                        $strEsSdwan  = $objServProdCaractSdWan->getValor();
                    }
                }
            }
            //*******************Se verifica si es un servicio SDWAN******************//

            if(($productoTecnico=="L3MPLS" || $productoTecnico=="INTERNET" || $strEsSdwan =="S" ||
                $productoTecnico=="INTMPLS"|| $productoTecnico=="CONCINTER" || $productoTecnico == 'INTERNETDC' ||
                $productoTecnico == 'DATOSDC' || $productoTecnico=="INTERNET SDWAN" || $productoTecnico=="L3MPLS SDWAN" ||
                $productoTecnico == 'INTERNET DC SDWAN' || $productoTecnico == 'DATOS DC SDWAN') 
                && $row['FLUJO_TECNICO']=="TN" )
            {
                //PE
                $servicioTecnico    = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')
                                                ->findOneBy(array("servicioId"=>intval($row['ID_SERVICIO'])));

                if($servicioTecnico)
                {
                    try
                    {
                        $arrayParametrosWs["intIdElemento"] = $servicioTecnico->getElementoId();
                        $arrayParametrosWs["intIdServicio"] = intval($row['ID_SERVICIO']);

                        if($booleanTipoRedGpon)
                        {
                            $objElementoPe  = $serviceTecnico->getPeByOlt($arrayParametrosWs);
                        }
                        else
                        {
                            $objElementoPe  = $serviceTecnico->getPeBySwitch($arrayParametrosWs);
                        }

                        $datosElementoPadre = $this->_em->getRepository('schemaBundle:InfoElemento')
                                                        ->getInfoBackboneByElemento($servicioTecnico->getElementoId(),$objElementoPe,"N");
                        if (count($datosElementoPadre)>0)
                        {
                            $elementoPadre      = $datosElementoPadre['nombreElementoPadre'];
                            $anillo             = $datosElementoPadre['anillo'];
                            $intIdElementoPadre = $datosElementoPadre['idElementoPadre'];
                        }
                    }
                    catch(\Exception $e)
                    {
                        $elementoPadre  = $e->getMessage();
                        $anillo         = $e->getMessage();
                    }
                    
                    if ($row['NOMBRE_TIPO_MEDIO'] == "Radio" && !$servicioTecnico->getElementoConectorId())
                    {
                        $strInformacionRadio = "ERROR";
                    }
                }
            }
            
            //determinar si se debe mostrar capacidad internacional o promocional de subida (1)
            if($row['CAPACIDAD_INT1']==null || $row['CAPACIDAD_INT1']=="")
            {
                $capacidad3 = $row['CAPACIDAD_PROM1'];
            }
            else
            {
                $capacidad3 = $row['CAPACIDAD_INT1'];
            }
            
            //determinar si se debe mostrar capacidad internacional o promocional de descarga (2)
            if($row['CAPACIDAD_INT2']==null || $row['CAPACIDAD_INT2']=="")
            {
                $capacidad4 = $row['CAPACIDAD_PROM2'];
            }
            else
            {
                $capacidad4 = $row['CAPACIDAD_INT2'];
            }
            
            if ($productoTecnico == "IP" && 
                $row['PREFIJO'] == 'MD' &&
                is_object($serviceUtilidades))
            {
                $objServicioIp= $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);
                if (is_object($objServicioIp->getProductoId()))
                {
                    $arrayParametrosCaracteristicasIpWan = array('intIdProducto'         => $objServicioIp->getProductoId()->getId(),
                                                                 'strDescCaracteristica' => 'IP WAN',
                                                                 'strEstado'             => 'Activo' );
                    $strEsIpWan = $serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaracteristicasIpWan);
                }
            }

            if ($row['REF_SERVICIO'] && ($row['NOMBRE_MARCA_ELEMENTO'] == "HUAWEI" || $strEsIpWan === "S"))
            {
                $entityServicioInternet   = $this->_em->getRepository('schemaBundle:InfoServicio')
                                                      ->find($row['REF_SERVICIO']);
                $nombreTipoNegocioPlan    = $entityServicioInternet->getPuntoId()->getTipoNegocioId()->getNombreTipoNegocio();

                if ($row['ESTADO'] == "Asignada" && $productoTecnico == "IP" && ($nombreTipoNegocioPlan == 'PRO' || $strEsIpWan === "S"))
                {
                    $productoInternetDedicado = $this->_em->getRepository('schemaBundle:AdmiProducto')
                                                     ->findOneBy(array("empresaCod"          => $arrayParametros['empresa'], 
                                                                       "descripcionProducto" => "INTERNET DEDICADO",
                                                                       "estado"              => "Activo"));
                    $strTipoMacTmp = 'MAC ONT';
                    if ($row['PREFIJO'] == 'MD' && $strEsIpWan === "S" && $row['NOMBRE_MARCA_ELEMENTO'] === 'TELLION')
                    {
                        $strTipoMacTmp = 'MAC WIFI';
                    }
                    $carac     = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                           ->findOneBy(array( "descripcionCaracteristica" => $strTipoMacTmp,
                                                              "estado"                    => "Activo"));
                    $prodCarac = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                           ->findOneBy(array( "productoId"       => $productoInternetDedicado->getId(),
                                                              "caracteristicaId" => $carac->getId(), 
                                                              "estado"           => "Activo"));
                    if($prodCarac){
                        $servProdCarac = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                   ->findOneBy(array( "servicioId"                => $entityServicioInternet->getId(),
                                                                      "productoCaracterisiticaId" => $prodCarac->getId() , 
                                                                      "estado"                    => "Activo"));
                    }
                    else{
                        $servProdCarac = null;
                    }
                    if ($servProdCarac)
                    {
                        $row['MAC_IP_FIJA']   = $servProdCarac->getValor();
                        $row['TIENE_IP_FIJA'] = NULL;
                    }
                }
            }
            
            if($row['NOMBRE_MODELO_ELEMENTO'] != "")
            {
                $nombreModeloElemento = $row['NOMBRE_MODELO_ELEMENTO'];
            }
            else
            {
                $nombreModeloElemento = $row['NOMBRE_MODELO_ELEMENTO_PROD'];
            }
                       
            if (!$row['IP_RESERVADA'])
            {
                $objIpAdicional = $this->_em->getRepository('schemaBundle:InfoIp')->findOneBy(
                                                        array( "servicioId" => $row['ID_SERVICIO'],
                                                               "estado"     => "Activo"));
                if ($objIpAdicional)
                {
                    $row['IP_RESERVADA'] = $objIpAdicional->getIp();
                }
            }
            
            $mac                     = $row['MAC'];
            $usaUltimaMillaExistente = 'NO';
            $strVlan                 = $row['VLAN'];
            $strMigrarAPseudoPe      = 'NO';
            $strProtocoloBgp         = 'NO';
            $strAsPrivado            = 'NA';
            $strVrf                  = $row['VRF'];
            $strTieneSolCambioIp     = 'NO';
            $intCapacidadUno         = $row['CAPACIDAD1'];
            $intCapacidadDos         = $row['CAPACIDAD2'];
            $strIpv4Publico          = $row['IPV4'];
            $strSubredVsatBackbone   = '';
            $strSubredVsatCliente    = '';
            $boolEsPseudoPe          = false;
            $strVlanAdmin            = "";
            $strVrfAdmin             = "";
            $strActivarSwPoeGpon     = "N";
            $strExisteSwPoeGpon      = "N";
            $strMigrarSwPoe          = "N";
            $intIdServicioSwPoe      = null;
            $intIdSwPoeGpon          = null;
            $strNombreSwPoeGpon      = "";
            $strSerieSwPoeGpon       = "";
            $strMacSwPoeGpon         = "";
            $strMarcaSwPoeGpon       = "";
            $strModeloSwPoeGpon      = "";
            $intIdInterfaceOnt       = null;
            $intIdInterfaceOntSwPoe  = null;
            $strMombreElementoCliente = "";
            $strModeloElementoCliente = "";
            $strSerieElementoCliente  = "";
            $strMacElementoCliente    = "";
            $strServicioEnSwPoe       = "N";
            $intIdServicioEleReqGpon  = null;
            $intIdElementoReqGpon     = null;
            $intIdInterfaceOntEleReq  = null;
            $strNombreElementoReqGpon = "";
            $strSerieElementoReqGpon  = "";
            $strMacElementoReqGpon    = "";
            $strModeloElementoReqGpon = "";
            $strMarcaElementoReqGpon  = "";
            
            if($row['PREFIJO'] == 'TN' && $productoTecnico !== "INTERNET SMALL BUSINESS" && $productoTecnico !== "TELCOHOME")
            {               
                //Verificar si se trata de producto INTMPLS obtener la VRF de forma especial
                if($productoTecnico == 'INTMPLS' || $productoTecnico == 'INTERNET SDWAN')
                {
                    $arrayParametrosResultado = $this->_em->getRepository("schemaBundle:AdmiParametroDet")
                                                          ->getOne('VRF-INTERNET',
                                                                   'TECNICO',
                                                                   '',
                                                                   'VRF-INTERNET',
                                                                   '','','','','',
                                                                   $row['COD_EMPRESA'],
                                                                   null
                                                                   );
                    
                    if(isset($arrayParametrosResultado['valor1']) && !empty($arrayParametrosResultado['valor1']))
                    {
                        $strVrf = $arrayParametrosResultado['valor1'];
                    }
                    else
                    {
                        $strVrf = 'telconet';
                    }
                }
               
                //Verificar si posee protocolo BGP
                $arrayParametrosExisteBgp                      = array();
                $arrayParametrosExisteBgp['strProceso']        = 'PROTOCOLO';
                $arrayParametrosExisteBgp['intIdServicio']     = $row['ID_SERVICIO'];
                $arrayParametrosExisteBgp['strCaracteristica'] = 'PROTOCOLO_ENRUTAMIENTO';
                $arrayParametrosExisteBgp['strValor']          = 'BGP';
                $strProtocoloBgp = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                             ->getExisteValorCaracteristicaPorProceso($arrayParametrosExisteBgp);
                
                $objProducto        = $this->_em->getRepository('schemaBundle:AdmiProducto')->find($productoId);
                $productoEsEnlace   = $objProducto->getEsEnlace();
                if(is_object($objProducto))
                {
                    $strEsConcentrador = $objProducto->getEsConcentrador();
                }
                if($productoEsEnlace=="SI" && $row['ESTADO']!='Cancel')
                {
                    $mac  = $serviceTecnico->getMacPorServicio($row['ID_SERVICIO']); 
                }

                $objServicio = $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);
                
                //Se obtiene caracteristica si servicio se activa con ultima milla existente
                $objServProdCaractMismaUM   = $serviceTecnico
                                            ->getServicioProductoCaracteristica($objServicio,'SERVICIO_MISMA_ULTIMA_MILLA',$objProducto);
                
                //Validar si es pseudoPe para obtener la VLAN del Servicio involucrado
                $boolEsPseudoPe = $this->_em->getRepository('schemaBundle:InfoServicio')->esServicioPseudoPe($objServicio);

                if($objServProdCaractMismaUM)
                {
                    $usaUltimaMillaExistente = 'SI';
                }       
                else
                {
                    //Si no existe la informacion de caracteristica se verifica si el puerto y switch de este servicio no exista en otro
                    //login del mismo punto, si existe se determina que es misma ultima milla
                    if($servicioTecnico && !$boolEsPseudoPe && $servicioTecnico->getElementoId() && $servicioTecnico->getInterfaceElementoId())
                    {                                      
                        $arrayParametros['idServicio']  = $objServicio->getId();
                        $arrayParametros['elementoId']  = $servicioTecnico->getElementoId();
                        $arrayParametros['interfaceId'] = $servicioTecnico->getInterfaceElementoId();

                        //Se determina si servicio proviene de una misma Ultima milla siempre y cuando pertenezca al mismo punto
                        $boolTieneMismaUM = $this->tieneMismaUltimaMilla($arrayParametros);

                        if($boolTieneMismaUM)
                        {
                            $usaUltimaMillaExistente = 'SI';
                        }
                    }
                }

                if($boolEsPseudoPe)
                {
                    $objServProdCaractVlanPseudoPe   = $serviceTecnico
                                                       ->getServicioProductoCaracteristica($objServicio,'VLAN_PROVEEDOR',$objProducto);
                    
                    if(is_object($objServProdCaractVlanPseudoPe))
                    {
                        $strVlan = $objServProdCaractVlanPseudoPe->getValor();
                    }
                }
                else //Si no es PseudoPe se verifica las condiciones establecidas para poder agregar a un edificio Pseudope
                {
                    //Si la UM es FO y esta es directo o es migrado sin data GIS es posible realizar migracion a pseudoPe
                    //Adicional se verifcia si el tipo de producto es DATOS omitiendo productos sin inforamacion tecnica necesaria
                    if(is_object($objServicio))
                    {
                        if($row['NOMBRE_TIPO_MEDIO'] == "Fibra Optica" && $objServicio->getProductoId()->getClasificacion() == 'DATOS')
                        {
                            //Se determina tipo de factibilidad
                            $objServProdCaractTipoFact = $serviceTecnico
                                                         ->getServicioProductoCaracteristica($objServicio,
                                                                                             'TIPO_FACTIBILIDAD',
                                                                                             $objServicio->getProductoId()
                                                                                            );
                            if(is_object($objServProdCaractTipoFact))
                            {
                                if($objServProdCaractTipoFact->getValor() == 'DIRECTO')
                                {
                                    $strMigrarAPseudoPe = 'SI';
                                }                   
                            }
                            else
                            {                    
                                //Si no existe la caracteristica y no contiene informacion de GIS se lo determina como DIRECTO 
                                //y es admisible migrar a UTP
                                if(is_object($servicioTecnico))
                                {
                                    if($servicioTecnico->getInterfaceElementoConectorId() == null)
                                    {
                                        $strMigrarAPseudoPe = 'SI';
                                    }                       
                                }
                            }
                        }
                        else if($row['NOMBRE_TIPO_MEDIO'] == "UTP")
                        {
                            $strMigrarAPseudoPe = 'SI';
                        }
                    }
                } 
                
                //AS PRIVADO PARA INTMPLS
                if($productoTecnico == 'INTMPLS' || $productoTecnico == 'INTERNET SDWAN')
                {
                    if($strProtocoloBgp == 'SI')
                    {
                        $objAsPrivado = $serviceTecnico->getServicioProductoCaracteristica($objServicio,"AS_PRIVADO",$objServicio->getProductoId());
                        
                        if(is_object($objAsPrivado))
                        {
                            $strAsPrivado = $objAsPrivado->getValor();
                        }
                    }
                }
                else if($productoTecnico == 'L3MPLS' || $productoTecnico == 'L3MPLS SDWAN' || $productoTecnico == 'CONCINTER' 
                        || $productoTecnico == 'DATOSDC' || $productoTecnico == 'DATOS DC SDWAN')
                {
                    $strAsPrivado = $row['AS_PRIVADO'];
                }
                
                //*************** SERVICIOS BACKUP ********************
                //Si el Servicio es un Concentrador Backup obtener las capacidades de su servicio PRINCIPAL
                if(is_object($servicioTecnico))
                {
                    if($servicioTecnico->getTipoEnlace() == 'BACKUP' && $objProducto->getEsConcentrador() == 'SI')
                    {
                        $arrayCapacidadesBackup = $serviceTecnico->getArrayCapacidadesConcentradorBackup($objServicio);

                        if(isset($arrayCapacidadesBackup['intCapacidadUno']))
                        {
                            $intCapacidadUno = $arrayCapacidadesBackup['intCapacidadUno'];
                        }

                        if(isset($arrayCapacidadesBackup['intCapacidadDos']))
                        {
                            $intCapacidadDos = $arrayCapacidadesBackup['intCapacidadDos'];
                        }
                    }
                }
                
                //Satelital
                if($row['NOMBRE_TIPO_MEDIO'] == 'SATELITAL')
                {
                    $objCaractSubredVsat = $serviceTecnico->getServicioProductoCaracteristica($objServicio,"SUBRED_VSAT",$objServicio->getProductoId());
                    
                    if(is_object($objCaractSubredVsat))
                    {
                        $objSubredBb = $this->_em->getRepository("schemaBundle:InfoSubred")->find($objCaractSubredVsat->getValor());
                        
                        if(is_object($objSubredBb))
                        {
                            $strSubredVsatBackbone = $objSubredBb->getSubred();
                        }
                    }
                    
                    $objInfoIp  = $this->_em->getRepository("schemaBundle:InfoIp")->findOneBy(array('servicioId' => $objServicio->getId(),
                                                                                                    'estado'     => 'Activo')
                                                                                             );
                     if(is_object($objInfoIp))
                    {
                        $objSubredCliente = $this->_em->getRepository("schemaBundle:InfoSubred")
                                                      ->findOneBy(array('id'     => $objInfoIp->getSubredId(),
                                                                        'estado' => 'Ocupado')
                                                                 );
                        if(is_object($objSubredCliente))
                        {
                            $strSubredVsatCliente = $objSubredCliente->getSubred();
                        }
                    }
                }
            }
            else
            {
                $mac  = $row['MAC'];
            }
            
            //Obtener informacion si un servicio posee solicitud de cambio de Ip Pendiente, se obtiene la informacion de Subred anterior
            $objAdmiTipoSolicitud = $this->_em->getRepository("schemaBundle:AdmiTipoSolicitud")
                                              ->findOneBy(array('descripcionSolicitud' => 'SOLICITUD CAMBIO IP',
                                                                'estado'               => 'Activo'));
            
            if(is_object($objAdmiTipoSolicitud))
            {
                //Se busca solicitudes pendientes de cambio de subred de un cliente
                $objDetalleSolicitud = $this->_em->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                 ->findOneBy(array('servicioId'      => $row['ID_SERVICIO'],
                                                                   'estado'          => 'Pendiente',
                                                                   'tipoSolicitudId' => $objAdmiTipoSolicitud->getId())
                                                               );
                if(is_object($objDetalleSolicitud))
                {
                    $strTieneSolCambioIp = 'SI';
                }
            }
            
            $intIdServicioVerifMcAfee   = $row['ID_SERVICIO'];
            $intIdPlanVerifMcAfee       = $row['ID_PLAN'];
            $strNombrePlanVerifMacAfee  = $row['NOMBRE_PLAN'];
            $strPermiteReintentoMcAfee  = 'NO';
            $strMcAfeeActivo            = 'NO';
            $strNuevoAntivirus          = 'NO';
            $strNuevoAntivirusActivo    = 'NO';
            $strReintentoNuevoAntivirus = 'NO';
            $strPermiteCancelLogica     = 'NO';
            $strCorreoMcAfee            = "";
            $intIdCaractCorreoMcAfee    = null;
            $intProductoMcAfeeId        = null;
            if(isset($strNombrePlanVerifMacAfee) && !empty($strNombrePlanVerifMacAfee) 
                && isset($productoNombre) && !empty($productoNombre) 
                && strpos($productoNombre, 'I. PROTEGIDO MULTI PAID') !== false
                && isset($intIdServicioVerifMcAfee) && !empty($intIdServicioVerifMcAfee) && intval($intIdServicioVerifMcAfee) > 0 
                && isset($intIdPlanVerifMcAfee) && !empty($intIdPlanVerifMcAfee) && intval($intIdPlanVerifMcAfee) > 0 )
            {
                $arrayRespuestaVerifIProtegido  = $serviceTecnico->obtieneInfoInternetProtegido(array(  "intIdServicio"     => 
                                                                                                        intval($intIdServicioVerifMcAfee),
                                                                                                        "strCodEmpresa"   => 
                                                                                                        $arrayParametros['empresa']));
                $strPermiteReintentoMcAfee      = $arrayRespuestaVerifIProtegido["strPermiteReintentoAntivirus"];
                $strCorreoMcAfee                = $arrayRespuestaVerifIProtegido["strCorreoAntivirus"];
                $intIdCaractCorreoMcAfee        = $arrayRespuestaVerifIProtegido["intIdCaractCorreoAntivirus"];
                $strMcAfeeActivo                = $arrayRespuestaVerifIProtegido["strAntivirusActivo"];
                $strNuevoAntivirusActivo        = $arrayRespuestaVerifIProtegido["strNuevoAntivirusActivo"];
                $strReintentoNuevoAntivirus     = $arrayRespuestaVerifIProtegido["strReintentoNuevoAntivirus"];
                $intProductoMcAfeeId            = $productoId;
                if (empty($strCorreoMcAfee) )
                {
                    $objServicio       = $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);
                    $objProductoMcAfee = $this->_em->getRepository('schemaBundle:AdmiProducto')->find($productoId);
                    if(is_object($objServicio) && is_object($objProductoMcAfee))
                    {
                        $intProductoMcAfeeId   = $objProductoMcAfee->getId();
                        $objCaractCorreoMcAfee = $serviceTecnico->getServicioProductoCaracteristica($objServicio,"CORREO ELECTRONICO",$objProductoMcAfee);
                        if(is_object($objCaractCorreoMcAfee))
                        {
                            $strCorreoMcAfee = $objCaractCorreoMcAfee->getValor();
                        }
                    }
                }
            }
            else if($productoTecnico == "OTROS" && 
                    strpos($productoNombre, 'I. ') !== false &&
                    $intIdServicioVerifMcAfee > 0)
            {
                $objServicio       = $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);
                $objProductoMcAfee = $this->_em->getRepository('schemaBundle:AdmiProducto')->find($productoId);
                if(is_object($objServicio) && is_object($objProductoMcAfee))
                {
                    $intProductoMcAfeeId   = $objProductoMcAfee->getId();
                    $objCaractCorreoMcAfee = $serviceTecnico->getServicioProductoCaracteristica($objServicio,"CORREO ELECTRONICO",$objProductoMcAfee);
                    if(is_object($objCaractCorreoMcAfee))
                    {
                        $strCorreoMcAfee            = $objCaractCorreoMcAfee->getValor();
                        $intIdCaractCorreoMcAfee    = $objCaractCorreoMcAfee->getId();
                    }
                    $objSpcNumReintentos = $serviceTecnico->getServicioProductoCaracteristica($objServicio, "NUMERO REINTENTOS", $objProductoMcAfee);
                    if(is_object($objSpcNumReintentos))
                    {
                        $strReintentoNuevoAntivirus = "SI";
                    }
                    $objSpcAntivirus = $serviceTecnico->getServicioProductoCaracteristica($objServicio, "ANTIVIRUS", $objProductoMcAfee);
                    if(is_object($objSpcAntivirus))
                    {
                        $strNuevoAntivirus = "SI";
                    }
                    $objSpcSuscriberId  = $serviceTecnico->getServicioProductoCaracteristica($objServicio, "SUSCRIBER_ID", $objProductoMcAfee);
                    if(is_object($objSpcSuscriberId))
                    {
                        $strNuevoAntivirusActivo = "SI";
                    }
                    else
                    {
                        $objSpcSku = $serviceTecnico->getServicioProductoCaracteristica($objServicio, "SKU", $objProductoMcAfee);
                        if(is_object($objSpcSku))
                        {
                            $strMcAfeeActivo = "SI";
                        }
                    }
                    $objSpcPermiteCancelLogica = $serviceTecnico->getServicioProductoCaracteristica($objServicio, 
                                                                                                    "PERMITE_CANCELACION_LOGICA", 
                                                                                                    $objProductoMcAfee);
                    if(is_object($objSpcPermiteCancelLogica))
                    {
                        $strPermiteCancelLogica = "SI";
                    }
                }
            }

            // Validamos si posee un producto konibit incluido en plan para presentar el boton de activacion
            $strActivoKonibit = "";
            if($productoTecnico == "OTROS")
            {
                $arrayListadoServicios = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->get('PRODUCTOS ADICIONALES AUTOMATICOS','COMERCIAL','',
                                                        'Lista de productos adicionales automaticos',
                                                        '','','','','',$strCodEmpresaQuery);
                foreach($arrayListadoServicios as $objListado)
                {
                    if ($productoId == $objListado['valor1'])
                    {
                        $objServKonibit = $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);
                        $objProdKonibit = $this->_em->getRepository('schemaBundle:AdmiProducto')->find($productoId);
                        if(is_object($objServKonibit) && is_object($objProdKonibit))
                        {
                            $objProdCaracteristica = $serviceTecnico->getServicioProductoCaracteristica($objServKonibit,
                                                                            "ACTIVO KONIBIT", $objProdKonibit);
                            if(is_object($objProdCaracteristica))
                            {
                                $strActivoKonibit = $objProdCaracteristica->getValor();
                            }
                        }
                    }
                }
            }

            /* codigo utilizado para recuperar información de solicitudes(estado Asignada) generadas en cambio de planes
             * que incluyen producto SmartWifi dentro de su detalle
             */
            $strEsCambioOntPorSolAgregarEquipo  = "NO";
            $strTipoOntNuevoPorSolAgregarEquipo = "";
            $strEsSmartWifi             = 'NO';
            $strCambioAWifiDualBand     = 'NO';
            $strAgregaExtenderDualBand  = 'NO';
            if (!empty($row['SOLICITUD_AGREGAR_EQUIPO']))
            {
                $intSolicitudAgregarEquipo = $row['SOLICITUD_AGREGAR_EQUIPO'];
                $objDetalleSolicitudAgregarEquipo = $this->_em
                                                         ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                         ->find($row['SOLICITUD_AGREGAR_EQUIPO']);
                
                if(!is_object($objDetalleSolicitudAgregarEquipo) && !empty($row['ID_SERVICIO']))
                {
                    $objTipoSolAgregarEquiMasivo  = $this->_em->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                              ->findOneByDescripcionSolicitud('SOLICITUD AGREGAR EQUIPO MASIVO');

                    if(is_object($objTipoSolAgregarEquiMasivo))
                    {
                        $objDetalleSolicitudAgregarEquipo = $this->_em->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                     ->findOneBy(array("servicioId"        => $row['ID_SERVICIO'],
                                                                                       "tipoSolicitudId"   => $objTipoSolAgregarEquiMasivo->getId(),
                                                                                       "estado"            => array("Asignada")));
                    }
                }

                if (is_object($objDetalleSolicitudAgregarEquipo))
                {
                   
                    $intSolicitudAgregarEquipo = $objDetalleSolicitudAgregarEquipo->getId();
                    //Se busca la zona predefinida y se la cambia a estado Finalizado
                    $objAdmiCaracteristicaSmartWifi = $this->_em
                                                           ->getRepository("schemaBundle:AdmiCaracteristica")
                                                           ->findOneBy(array('descripcionCaracteristica' => 'SMART WIFI',
                                                                             'estado'                    => 'Activo'));
                    if (is_object($objAdmiCaracteristicaSmartWifi))
                    {
                        $objDetalleSolCaractSmartWifi = $this->_em
                                                             ->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                             ->findOneBy(
                                                                         array(
                                                                               "detalleSolicitudId"=> $objDetalleSolicitudAgregarEquipo,
                                                                               "caracteristicaId"  => $objAdmiCaracteristicaSmartWifi,
                                                                               "estado"            => 'Asignada'
                                                                              )
                                                                        );
                        if(is_object($objDetalleSolCaractSmartWifi))
                        {
                            $strEsSmartWifi = $objDetalleSolCaractSmartWifi->getValor();
                        }
                    }
                                   
                    $objAdmiCaractMotivoCreacionSol = $this->_em
                                                           ->getRepository("schemaBundle:AdmiCaracteristica")
                                                           ->findOneBy(array(   'descripcionCaracteristica' => 'MOTIVO_CREACION_SOLICITUD',
                                                                                'estado'                    => 'Activo'));
                    $objAdmiCaractTipoOnt           = $this->_em
                                                           ->getRepository("schemaBundle:AdmiCaracteristica")
                                                           ->findOneBy(array(   'descripcionCaracteristica' => 'TIPO_ONT_NUEVO',
                                                                                'estado'                    => 'Activo'));
                    if (is_object($objAdmiCaractMotivoCreacionSol) && is_object($objAdmiCaractTipoOnt))
                    {
                        $objDetSolCaractMotivoCreacionSolXExt   = $this->_em
                                                                       ->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                       ->findOneBy(array(
                                                                                        "detalleSolicitudId"=> $objDetalleSolicitudAgregarEquipo,
                                                                                        "caracteristicaId"  => $objAdmiCaractMotivoCreacionSol,
                                                                                        "valor"             => "CAMBIO ONT POR AGREGAR EXTENDER",
                                                                                        "estado"            => 'Asignada'
                                                                                        )
                                                                                   );
                        $objDetSolCaractTipoOntXExt             = $this->_em
                                                                       ->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                       ->findOneBy(
                                                                                    array(
                                                                                        "detalleSolicitudId"=> $objDetalleSolicitudAgregarEquipo,
                                                                                        "caracteristicaId"  => $objAdmiCaractTipoOnt,
                                                                                        "estado"            => 'Asignada'
                                                                                        )
                                                                                   );
                        if(is_object($objDetSolCaractMotivoCreacionSolXExt) && is_object($objDetSolCaractTipoOntXExt))
                        {
                            $strEsCambioOntPorSolAgregarEquipo    = "SI";
                            $strTipoOntNuevoPorSolAgregarEquipo   = $objDetSolCaractTipoOntXExt->getValor();
                        }
                    }
                    
                    
                    if($strEsCambioOntPorSolAgregarEquipo === "NO")
                    {
                        $objAdmiCaracteristicaWifiDualBand  = $this->_em
                                                                   ->getRepository("schemaBundle:AdmiCaracteristica")
                                                                   ->findOneBy(array(   'descripcionCaracteristica' => 'WIFI DUAL BAND',
                                                                                        'estado'                    => 'Activo'));
                        if (is_object($objAdmiCaracteristicaWifiDualBand))
                        {
                            $objDetalleSolCaractWifiDualBand = $this->_em
                                                                    ->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                    ->findOneBy(
                                                                                array(
                                                                                      "detalleSolicitudId"=> $objDetalleSolicitudAgregarEquipo,
                                                                                      "caracteristicaId"  => $objAdmiCaracteristicaWifiDualBand,
                                                                                      "estado"            => 'Asignada'
                                                                                     )
                                                                               );
                            if(is_object($objDetalleSolCaractWifiDualBand))
                            {
                                $strCambioAWifiDualBand = $objDetalleSolCaractWifiDualBand->getValor();
                            }
                        }


                        $objAdmiCaracteristicaExtenderDualBand  = $this->_em
                                                                       ->getRepository("schemaBundle:AdmiCaracteristica")
                                                                       ->findOneBy(array(   'descripcionCaracteristica' => 'EXTENDER DUAL BAND',
                                                                                            'estado'                    => 'Activo'));
                        if (is_object($objAdmiCaracteristicaExtenderDualBand))
                        {
                            $objDetalleSolCaractExtenderDualBand    = $this->_em
                                                                           ->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                           ->findOneBy(
                                                                                        array(
                                                                                              "detalleSolicitudId"  => 
                                                                                              $objDetalleSolicitudAgregarEquipo,
                                                                                              "caracteristicaId"    => 
                                                                                              $objAdmiCaracteristicaExtenderDualBand,
                                                                                              "estado"              => 'Asignada'
                                                                                             )
                                                                                       );
                            if(is_object($objDetalleSolCaractExtenderDualBand))
                            {
                                $strAgregaExtenderDualBand = $objDetalleSolCaractExtenderDualBand->getValor();
                            }
                        }
                    }
                }
            }

            ////////////////////   Si no tiene solicitud de agregar equipo se consulta por la masiva/////////////////////////                     
            if (empty($row['SOLICITUD_AGREGAR_EQUIPO']))
            {                
                if(!empty($row['ID_SERVICIO']))
                {
                    $objTipoSolAgregarEquiMasivo  = $this->_em->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                              ->findOneByDescripcionSolicitud('SOLICITUD AGREGAR EQUIPO MASIVO');

                    if(is_object($objTipoSolAgregarEquiMasivo))
                    {
                        $objDetalleSolicitudAgregarEquipo = $this->_em->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                     ->findOneBy(array("servicioId"        => $row['ID_SERVICIO'],
                                                                                       "tipoSolicitudId"   => $objTipoSolAgregarEquiMasivo->getId(),
                                                                                       "estado"            => array("Asignada")));
                    }
                }

                if (is_object($objDetalleSolicitudAgregarEquipo))
                {
                    $strEsAgregarEquipoMasivo  = "SI";
                    $intSolicitudAgregarEquipo = $objDetalleSolicitudAgregarEquipo->getId();
                    //Se busca la zona predefinida y se la cambia a estado Finalizado
                    $objAdmiCaracteristicaSmartWifi = $this->_em
                                                           ->getRepository("schemaBundle:AdmiCaracteristica")
                                                           ->findOneBy(array('descripcionCaracteristica' => 'SMART WIFI',
                                                                             'estado'                    => 'Activo'));
                    if (is_object($objAdmiCaracteristicaSmartWifi))
                    {
                        $objDetalleSolCaractSmartWifi = $this->_em
                                                             ->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                             ->findOneBy(
                                                                         array(
                                                                               "detalleSolicitudId"=> $objDetalleSolicitudAgregarEquipo,
                                                                               "caracteristicaId"  => $objAdmiCaracteristicaSmartWifi,
                                                                               "estado"            => 'Asignada'
                                                                              )
                                                                        );
                        if(is_object($objDetalleSolCaractSmartWifi))
                        {
                            $strEsSmartWifi = $objDetalleSolCaractSmartWifi->getValor();
                        }
                    }
                    
                    $objAdmiCaracteristicaWifiDualBand  = $this->_em
                                                               ->getRepository("schemaBundle:AdmiCaracteristica")
                                                               ->findOneBy(array(   'descripcionCaracteristica' => 'WIFI DUAL BAND',
                                                                                    'estado'                    => 'Activo'));
                    if (is_object($objAdmiCaracteristicaWifiDualBand))
                    {
                        $objDetalleSolCaractWifiDualBand = $this->_em
                                                                ->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                ->findOneBy(
                                                                            array(
                                                                                  "detalleSolicitudId"=> $objDetalleSolicitudAgregarEquipo,
                                                                                  "caracteristicaId"  => $objAdmiCaracteristicaWifiDualBand,
                                                                                  "estado"            => 'Asignada'
                                                                                 )
                                                                           );
                        if(is_object($objDetalleSolCaractWifiDualBand))
                        {
                            $strCambioAWifiDualBand = $objDetalleSolCaractWifiDualBand->getValor();
                        }
                    }
                    
                    
                    $objAdmiCaracteristicaExtenderDualBand  = $this->_em
                                                                   ->getRepository("schemaBundle:AdmiCaracteristica")
                                                                   ->findOneBy(array(   'descripcionCaracteristica' => 'EXTENDER DUAL BAND',
                                                                                        'estado'                    => 'Activo'));
                    if (is_object($objAdmiCaracteristicaExtenderDualBand))
                    {
                        $objDetalleSolCaractExtenderDualBand    = $this->_em
                                                                       ->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                       ->findOneBy(
                                                                                    array(
                                                                                          "detalleSolicitudId"  => $objDetalleSolicitudAgregarEquipo,
                                                                                          "caracteristicaId"    => 
                                                                                          $objAdmiCaracteristicaExtenderDualBand,
                                                                                          "estado"              => 'Asignada'
                                                                                         )
                                                                                   );
                        if(is_object($objDetalleSolCaractExtenderDualBand))
                        {
                            $strAgregaExtenderDualBand = $objDetalleSolCaractExtenderDualBand->getValor();
                        }
                    }
                }
            }      
            ////////////////////   Si no tiene solicitud de agregar equipo se consulta por la masiva/////////////////////////                     
            
            $strActivacionOrigen    = "";
            $strEsActivacionPorWeb  = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                ->getExisteValorCaracteristicaPorProceso(array(
                                                                                               'strProceso'        => 'PROTOCOLO',
                                                                                               'intIdServicio'     => $row['ID_SERVICIO'],
                                                                                               'strCaracteristica' => 'ORIGEN_ACTIVACION',
                                                                                               'strValor'          => 'WEB'));
            if(isset($strEsActivacionPorWeb) && !empty($strEsActivacionPorWeb) && $strEsActivacionPorWeb === "SI")
            {
                $strActivacionOrigen    = "WEB";
            }
            
            $strEsActivacionPorMovil    = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                    ->getExisteValorCaracteristicaPorProceso(array(
                                                                                                    'strProceso'        => 'PROTOCOLO',
                                                                                                    'intIdServicio'     => $row['ID_SERVICIO'],
                                                                                                    'strCaracteristica' => 'ORIGEN_ACTIVACION',
                                                                                                    'strValor'          => 'MOVIL'));
            if(isset($strEsActivacionPorMovil) && !empty($strEsActivacionPorMovil) && $strEsActivacionPorMovil === "SI")
            {
                $strActivacionOrigen    = "MOVIL";
            }

            $strNumeroSolucion                     = '';
            $strEsSolucion                         = 'N';
            $strEsServicioPreferenteSolucion       = 'N';
            $strSolucion                           = '';
            $strSolucionTieneAlquilerServ          = 'N';
            $strSeActivaServicioSolucion           = 'N';
            $intVirtualConnect                     = 0;
            $strIpLoopback                         = '';
            $strNombrePeExtremoL2                  = '';
            
            if($row['PREFIJO'] == 'TN' && $productoTecnico !== "INTERNET SMALL BUSINESS" && $productoTecnico !== "TELCOHOME")
            {
                //SE VALIDA CARACTERISTICA PARA PROCESAR OPCIONES TELCOGRAPH
                $arrayNombresTecnicoPermitidos = array("INTERNET", "L3MPLS", "INTMPLS", "INTERNET SDWAN", "L3MPLS SDWAN");

                if (in_array($productoTecnico, $arrayNombresTecnicoPermitidos))
                {
                    //recuperar información necesaría para reenviar credenciales de acceso al portal telcograph
                    $arrayParametrosCaractPortalActivo = array('descripcionCaracteristica' => 'PORTAL_ACTIVO',
                                                               'estado'                    => "Activo");

                    $objCaractPortalActivo = $this->_em
                                                  ->getRepository('schemaBundle:AdmiCaracteristica')
                                                  ->findOneBy($arrayParametrosCaractPortalActivo);

                    if (is_object($objCaractPortalActivo))
                    {
                        $intIdCaractPortalActivo = $objCaractPortalActivo->getId();

                        //Se verifica que el cliente no tenga registrado accesos al portal Telcograph
                        $objCarPortalActivo = $this->_em
                                                   ->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                   ->findCaracteristicaPorCriterios(
                                                                                    array("caracteristicaId"  => $intIdCaractPortalActivo,
                                                                                    "personaEmpresaRolId" => $row['ID_PERSONA_EMPRESA_ROL'],
                                                                                    "empresaCod"          => $arrayParametros['empresa'],
                                                                                    "estado"              => "Activo")
                                                                                   );
                        if(is_object($objCarPortalActivo) && $objCarPortalActivo->getValor() === "SI")
                        {
                            $strReenvioCredencialTelcograph = "SI";
                            $strCambioPassTelcograph        = "SI";
                            $strMostrarInfoTelcoGraph       = "SI";
                            $strCrearMonitoreoTG            = "NO";
                            $objInfoPersona                 = $this->_em
                                                                   ->getRepository('schemaBundle:InfoPersona')
                                                                   ->find($row['ID_PERSONA']);
                            if(is_object($objInfoPersona))
                            {
                                $strRucTg = $objInfoPersona->getIdentificacionCliente();
                            }
                        }
                    }
                    
                    //validar información para permitir reintento de creación de monitoreo telcograf
                    $arrayParametrosTelcograph = $this->_em
                                                       ->getRepository('schemaBundle:AdmiParametroDet')
                                                       ->getOne('TELCOGRAPH', 
                                                                'TECNICO', 
                                                                '', 
                                                                'VALOR_FACTURACION', 
                                                                '', 
                                                                '', 
                                                                '', 
                                                                '', 
                                                                '', 
                                                                $arrayParametros['empresa']);
                    if (!empty($arrayParametrosTelcograph))
                    {
                        $floatValorFacturacion = floatval($arrayParametrosTelcograph['valor1']);
                    }
                    else
                    {
                        $floatValorFacturacion = 1000.00;
                    }
                    //validar el valor facturado mayor a $1000 para lanzar a telcograph
                    $arrayParametrosFacturacion = array();
                    $arrayParametrosFacturacion['intIdPersonaRol'] = $row['ID_PERSONA_EMPRESA_ROL'];
                    $floatTotalFacturacion = $this->_em
                                                  ->getRepository('schemaBundle:InfoServicioTecnico')
                                                  ->getTotalFacturacionTelcograph($arrayParametrosFacturacion);

                    //Se verifica si el cliente ya cuenta con una característica de *MONITOREO_BAJO_DEMANDA*
                    $objCaractMonBajDema = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                            ->findOneBy(array('descripcionCaracteristica' => "MONITOREO_BAJO_DEMANDA",
                                              'estado'                    => "Activo"));

                    if (is_object($objCaractMonBajDema))
                    {
                        $objCarMonBajoDemPer = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                ->findCaracteristicaPorCriterios(array("caracteristicaId"    => $objCaractMonBajDema->getId(),
                                                                       "personaEmpresaRolId" => $row['ID_PERSONA_EMPRESA_ROL'],
                                                                       "empresaCod"          => $arrayParametros['empresa'],
                                                                       "valor"               => 'SI',
                                                                       "estado"              => "Activo"));
                    }

                    if ($floatTotalFacturacion >= $floatValorFacturacion || is_object($objCarMonBajoDemPer))
                    {
                        //recuperar información necesaría para reenviar credenciales de acceso al portal telcograph
                        $arrayParametrosCaractLoginAux = array('descripcionCaracteristica' => 'HOST_LOGIN_AUX',
                                                               'estado'                    => "Activo");

                        $objCaractLoginAux = $this->_em
                                                  ->getRepository('schemaBundle:AdmiCaracteristica')
                                                  ->findOneBy($arrayParametrosCaractLoginAux);

                        if (is_object($objCaractLoginAux))
                        {
                            $intIdCaractLoginAux = $objCaractLoginAux->getId();

                            //Se verifica que el cliente no tenga registrado accesos al portal Telcograph
                            $objCarLoginAux = $this->_em
                                                   ->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                   ->findCaracteristicaPorCriterios(
                                                                                    array("caracteristicaId"  => $intIdCaractLoginAux,
                                                                                    "personaEmpresaRolId" => $row['ID_PERSONA_EMPRESA_ROL'],
                                                                                    "empresaCod"          => $arrayParametros['empresa'],
                                                                                    "valor"               => strtoupper($row['LOGIN_AUX']),
                                                                                    "estado"              => "Activo")
                                                                                   );
                            if(!is_object($objCarLoginAux))
                            {
                                $strReintentoCreacionTelcograph = "SI";
                                $strCrearMonitoreoTG            = "NO";
                            }
                        }
                    }
                }
            }

            //Si el producto pertenece al grupo de DataCenter, verificamos si pertenece a una solución.
            if (is_object($objServicio) && is_object($objServicio->getProductoId()) &&
                    strpos($objServicio->getProductoId()->getGrupo(),'DATACENTER') !== false)
            {
                $objInfoSolucionDet = $this->_em->getRepository('schemaBundle:InfoSolucionDet')
                        ->findOneBy(array('servicioId' => $objServicio->getId(),'estado' => 'Activo'));
                $objInfoSolucionCab = is_object($objInfoSolucionDet) ? $objInfoSolucionDet->getSolucionCabId() : null;

                if (is_object($objInfoSolucionCab))
                {
                    $arrayParametroSolucion = array('objServicio' => $objServicio,'strCodEmpresa' => $row['COD_EMPRESA']);
                    $strTipoSolucion        = $objInfoSolucionDet->getTipoSolucion();
                    $strNumeroSolucion      = $objInfoSolucionCab->getNumeroSolucion();
                    $strSolucion            = $serviceTecnico->getNombreGrupoSolucionServicios($arrayParametroSolucion);
                    $strEsSolucion          = 'S';

                    //Verificamos si el servicio es preferencial o no.
                    $strEsServicioPreferenteSolucion = $objInfoSolucionDet->getEsPreferencial() === 'SI' ? 'S' : 'N';

                    //Consultamos los servicios que pertenecen al mismo tipo de solución y
                    //que sean del mismo número de solución.
                    $arrayServicios = $this->_em->getRepository("schemaBundle:InfoServicio")
                            ->getArrayServiciosPorSolucionYTipoSolucion($strNumeroSolucion,$strTipoSolucion);

                    foreach($arrayServicios as $objServicioSubSolucion)
                    {
                        if ($objServicio != $objServicioSubSolucion)
                        {
                            $objProductoSubSolucion = $objServicioSubSolucion->getProductoId();
                            $boolEsAlquiler         = $serviceTecnico->isContieneCaracteristica($objProductoSubSolucion,
                                                                                                'ES_ALQUILER_SERVIDORES');

                            if ($boolEsAlquiler)
                            {
                                $strSolucionTieneAlquilerServ = 'S';
                                break;
                            }
                        }
                    }

                    //Verificar si existe al menos un servicio activo para poder mostrar botón de activación.
                    $arrayServiciosGrupo = $this->_em->getRepository("schemaBundle:InfoServicio")
                            ->getArrayServiciosPorGrupoSolucion(array('intSecuencial' => $strNumeroSolucion));

                    foreach ($arrayServiciosGrupo as $objServicioGrupo)
                    {
                        if ($objServicioGrupo->getEstado() == 'Activo')
                        {
                            $strSeActivaServicioSolucion = 'S';
                            break;
                        }
                    }
                }
            }

            if($productoTecnico == 'L2MPLS')
            {
                $objServProdVirtualConnect = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                'VIRTUAL_CONNECT',
                                                                                                $objProducto);
                if(is_object($objServProdVirtualConnect))
                {
                    $intVirtualConnect = $objServProdVirtualConnect->getValor();
                }
                
                //Obtener la Ip de loopback
                $objServProdLoopBackPeRelacionado = $serviceTecnico->getServicioProductoCaracteristica( $objServicio,
                                                                                                        'LOOPBACK_L2',
                                                                                                        $objProducto);
                if(is_object($objServProdLoopBackPeRelacionado))
                {
                    $strIpLoopback = $objServProdLoopBackPeRelacionado->getValor();
                }
                
                //Obtener el Switch del extremo
                
                $objServicioTecnico = $this->_em->getRepository('schemaBundle:InfoServicio')
                                                ->getDataTecnicaExtremoPorInterfazL2($row['ID_INTERFACE_ELEMENTO']);
                
                if(is_object($objServicioTecnico))
                {
                    $arrayParametrosWs["intIdElemento"] = $objServicioTecnico->getElementoId();
                    $arrayParametrosWs["intIdServicio"] = intval($row['ID_SERVICIO']);

                    $objElementoPeExtremoL2 = $serviceTecnico->getPeBySwitch($arrayParametrosWs);

                    if(is_object($objElementoPeExtremoL2))
                    {
                        $strNombrePeExtremoL2 = $objElementoPeExtremoL2->getNombreElemento();
                    }
                }
            }
            
            $strValorVelocidadISB = "";
            $strEsISB             = "";
            if($productoTecnico === "INTERNET SMALL BUSINESS" || $productoTecnico === "TELCOHOME")
            {
                $strNombreParametro         = 'DESCRIPCION_CARACT_VELOCIDAD_X_NOMBRE_TECNICO';
                
                //Consultamos en la tabla de parametro si el producto tiene otras velocidades
                $arrayAdmiParametroProducto = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                          ->getOne('PARAM_CARACT_VELOCIDAD_X_PRODUCTO',
                                                                   '',
                                                                   '',
                                                                   '',
                                                                   $productoNombre,
                                                                   '',
                                                                   '',
                                                                   '',
                                                                   '',
                                                                   $row['COD_EMPRESA']
                                                                  );
                if (isset($arrayAdmiParametroProducto['valor2']) && !empty($arrayAdmiParametroProducto['valor2']))
                {
                    $strNombreParametro = $arrayAdmiParametroProducto['valor2'];
                }
                
                $strEsISB    = "SI";
                $objServicio = $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);
                
                if(is_object($objServicio))
                {
                    $arrayParamsCaractsVelocidad    = array("strValor1ParamsProdsTnGpon"    => $strNombreParametro,
                                                            "strCodEmpresa"                 => $row['COD_EMPRESA'],
                                                            "strValor2NombreTecnico"        => $productoTecnico);
                    $arrayInfoCaractsVelocidad      = $this->_em->getRepository('schemaBundle:InfoServicio')
                                                                ->obtenerParametrosProductosTnGpon($arrayParamsCaractsVelocidad);
                    if(isset($arrayInfoCaractsVelocidad) && !empty($arrayInfoCaractsVelocidad))
                    {
                        $strDescripcionCaractVelocidad = $arrayInfoCaractsVelocidad[0]["strDescripcionCaractVelocidad"];
                        if(isset($strDescripcionCaractVelocidad) && !empty($strDescripcionCaractVelocidad))
                        {
                            $objServProdCaractVelocidadISB  = $serviceTecnico->getServicioProductoCaracteristica(   $objServicio,
                                                                                                                    $strDescripcionCaractVelocidad,
                                                                                                                    $objProducto);
                            if(is_object($objServProdCaractVelocidadISB))
                            {
                                $strValorVelocidadISB = $objServProdCaractVelocidadISB->getValor();
                            }
                        }
                    }
                }
            }
            
            $boolSeActiva = true;
            
            if($productoTecnico == 'OTROS' && $row['PREFIJO'] == 'TN')
            {
                $boolEsConsumo = $serviceTecnico->isContieneCaracteristica($objServicio->getProductoId(),'FACTURACION POR CONSUMO');
                
                if($boolEsConsumo)
                {
                    //Verificamos si tiene subido un archivo y ademas este ya es autorizado
                    $boolSeActiva = $this->_em->getRepository("schemaBundle:InfoPunto")
                                              ->isSolicitudCloudFormAprobadaPorPunto($objServicio->getPuntoId()->getLogin());
                }
            }
            
            $arrayParametrosElementosActivos  = $this->_em->getRepository("schemaBundle:AdmiParametroDet")
                                                          ->get('TIPO EQUIPOS ACTIVOS RED',
                                                                'TECNICO',
                                                                '',
                                                                '',
                                                                '','','','','',
                                                                $row['COD_EMPRESA'],
                                                                null
                                                                );      
            //se agrega el tipo de categoria del producto COU LINEAS TELEFONIA NETVOICE
            $strCategoriaTelefonia = '';
            if($productoTecnico === "TELEFONIA_NETVOICE")
            {
                $objServicio = $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);
                if(is_object($objServicio))
                {
                    $objCaractCategoriaTelf = $serviceTecnico->getServicioProductoCaracteristica($objServicio, 'CATEGORIAS TELEFONIA',
                                                                               $objServicio->getProductoId());

                    if(is_object($objCaractCategoriaTelf))
                    {
                        $strCategoriaTelefonia = $objCaractCategoriaTelf->getValor();
                    }    
                }
            }

            //Se valida si el login es un nodo wifi
            if(strpos($row['LOGIN_AUX'],"nodo-wifi") !== false)
            {
                $strEsNodoWifi = "S";
            }
            
            $objServicio         = $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);
            $objProductoInternet = $this->_em->getRepository('schemaBundle:AdmiProducto')
                                             ->findOneBy(array("empresaCod"          => $arrayParametros['empresa'], 
                                                               "descripcionProducto" => "INTERNET DEDICADO",
                                                               "estado"              => "Activo"));
            if ($row['PREFIJO'] == 'MD' &&
                ($productoTecnico == "INTERNET" || $productoTecnico == "EXTENDER_DUAL_BAND" || $productoTecnico == "WDB_Y_EDB") &&
                is_object($objServicio) &&
                is_object($objProductoInternet))
            {
                $objCaractTrasladarExtenderDB = $serviceTecnico->getServicioProductoCaracteristica($objServicio, 
                                                                                                   'TRASLADAR EXTENDER DUAL BAND',
                                                                                                   $objProductoInternet);

                if(is_object($objCaractTrasladarExtenderDB))
                {
                    $strTrasladarExtenderDualBand = "SI";
                }

                $objCaractSincronizarExtenderDB = $serviceTecnico->getServicioProductoCaracteristica($objServicio, 
                                                                                                     'SINCRONIZAR EXTENDER DUAL BAND',
                                                                                                     $objProductoInternet);

                if(is_object($objCaractSincronizarExtenderDB))
                {
                    $strSincronizarExtenderDualBand = "SI";
                }
            }
            
            if ($productoTecnico == "INTERNET" && 
                $row['PREFIJO'] == 'MD' &&
                is_object($objServicio) &&
                is_object($objProductoInternet))
            {
                $objCaractReintentoPromoBW = $serviceTecnico->getServicioProductoCaracteristica($objServicio,"REINTENTO-PROMO",$objProductoInternet);
                if(is_object($objCaractReintentoPromoBW))
                {
                    $strReintentoPromoBw = "SI";
                }
                $objCaractURLOffice = $serviceTecnico->getServicioProductoCaracteristica($objServicio,"URLOFFICE",$objProductoInternet);
                if(is_object($objCaractURLOffice))
                {
                    $strNetlifeCloud = "S";
                }

                $intIdPlanInternet =  $row['ID_PLAN'];
                if(is_object($emComercial) && isset($intIdPlanInternet) && !empty($intIdPlanInternet) && intval($intIdPlanInternet) > 0)
                {
                    $entityInfoPlanCab = $emComercial->getRepository('schemaBundle:InfoPlanCab')->find($intIdPlanInternet);
                    if(is_object($entityInfoPlanCab))
                    {
                        $strTipoPlan = $entityInfoPlanCab->getTipo();
                    }
                }
            }

            if($productoNombre == "NetlifeCloud")
            {
                $objProductoNC = $this->_em->getRepository('schemaBundle:AdmiProducto')
                                            ->findOneBy(array("descripcionProducto" => "NetlifeCloud",
                                                              "estado"              => "Activo"));
                if(is_object($objProductoNC))
                {
                    $objCaractURLOffice  = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                              "URLOFFICE",
                                                                                              $objProductoNC);
                    if(is_object($objCaractURLOffice))
                    {
                        $strNetlifeCloud = "S";
                    }
                }
            }

            //Valida si producto es de tipo Clear Channel Punto a Punto

            $boolIsClearChannel = false;
            $strTipoModeloBackUp = "";
            $arrayParDet= $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne('ESTADO_CLEAR_CHANNEL','COMERCIAL','','ESTADO_CLEAR_CHANNEL','','','','','',10);
            $strDescripcionServicio = $arrayParDet["valor1"];
            $strClearChannelPuntoAPuntoTransporte = "";
            if($productoNombre == $strDescripcionServicio)
            {
                //Requiere transporte
                //ES_BACKUP
                $boolIsClearChannel = true;
                $intIdServicioEnl = intval($row['ID_SERVICIO']);

                if($row['TIPO_ENLACE'] == 'BACKUP') 
                {
                    
                    $arrayModeloBackup = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                        ->findByValorCaractServicio(array("tipo"          => 'COMERCIAL',
                                                      "descripCaract" => 'MODELO BACKUP',
                                                      "servicioId"    => intval($row['ID_SERVICIO']),
                                                      "estado"        => 'Activo'));
                    
                    foreach($arrayModeloBackup as $objModeloBackup)
                    {
                        $strTipoModeloBackUp = $objModeloBackup->getValor();
                    }
                    
                    $arrayServicioProdCaractsBackUp = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                ->findByValorCaractServicio(array("tipo"          => 'COMERCIAL',
                                                                "descripCaract" => 'ES_BACKUP',
                                                                "servicioId"    => intval($row['ID_SERVICIO']),
                                                                "estado"        => 'Activo'));
                    
                    foreach($arrayServicioProdCaractsBackUp as $objServicioProdCaractBackUp)
                    {
                        $intIdServicioEnl = intval($objServicioProdCaractBackUp->getValor());
                    } 
                }

                $arrayServicioProdCaracts   = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                           ->findByValorCaractServicio(array("tipo"          => 'COMERCIAL',
                                                           						             "descripCaract" => 'REQUIERE TRANSPORTE',
                                                                                             "servicioId"    => $intIdServicioEnl,
                                                                                             "estado"        => 'Activo'));
                foreach($arrayServicioProdCaracts as $objServicioProdCaract)
                {
                    $strClearChannelPuntoAPuntoTransporte = $objServicioProdCaract->getValor();
                }
            }

            $arrayHabilitarClearChannel= $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                            ->getOne('HABILITAR_APROVISIO_CLEAR_CHANNEL',
                                        'COMERCIAL',
                                        '',
                                        $strDescripcionServicio,
                                        '',
                                        '',
                                        '',
                                        '',
                                        '',
                                        10);
            $strAprovisioClearChannel  = $arrayHabilitarClearChannel["valor1"];
            
            //**********Validar que sea un servicio de Internet o Datos y que el cliente tenga permitido la creación de rutas estáticas**********//
            $strClientePermitido       = "N";

            $objInfoPersonaEmpreasRol = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                  ->find(intval($row['ID_PERSONA_EMPRESA_ROL']));

            $arrayClientesRutaEstatica = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->get('PARAMETROS PROYECTO RUTA ESTATICA CLIENTE',
                                                                                                         '',
                                                                                                         '',
                                                                                                         'CLIENTES RUTA ESTATICA',
                                                                                                         '',
                                                                                                         '',
                                                                                                         '',
                                                                                                         '',
                                                                                                         '',
                                                                                                         '10');

            foreach($arrayClientesRutaEstatica as $idxClientesRutaEstatica)
            {
                $arrayClientesEstatica = explode("|", $idxClientesRutaEstatica["valor1"]);
            }

            foreach ($arrayClientesEstatica as $idxClientesEstatica)
            {
                if(is_object($objInfoPersonaEmpreasRol) && ($objInfoPersonaEmpreasRol->getPersonaId()->getId() == $idxClientesEstatica))
                {
                    $strClientePermitido = "S";
                    break;
                }
            }

            $strPermiteRutasEstaticas = "N";

            if(($productoTecnico === "INTERNET" || $productoTecnico === "L3MPLS" || $productoTecnico === "INTMPLS" ||
                $productoTecnico === "INTERNET SDWAN" || $productoTecnico === "L3MPLS SDWAN") && $strClientePermitido === "S")
            {
                $strPermiteRutasEstaticas = "S";
            }
            //**********Validar que sea un servicio de Internet o Datos y que el cliente tenga permitido la creación de rutas estáticas**********//

            //***************************Se valida que los servicios tengan la caracteristica de REGISTRO EQUIPO************************//
            $objCaracteristica = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                           ->findOneBy(array("descripcionCaracteristica" => "REGISTRO EQUIPO",
                                                             "estado"                    => "Activo"));

            if(is_object($objCaracteristica))
            {
                $objProductoCaracteristica = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                       ->findOneBy(array("productoId"       => $productoId,
                                                                         "caracteristicaId" => $objCaracteristica->getId(),
                                                                         "estado"           => "Activo"));
            }

            if(is_object($objProductoCaracteristica))
            {
                $strRegistroEquipo = "S";

                //Consultar el objeto infoServicio
                $objServicio = $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);

                if(is_object($objServicio))
                {
                    $arrayParamCadenas  = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->get('DESCRIPCION FACTURA SERVICIOS SEGURIDAD LOGICA',
                                                          'TECNICO',
                                                          'ACTIVACION',
                                                          'CADENAS DE CARACTERES A VALIDAR DENTRO DE LA DESCRIPCION DE LA FACTURA',
                                                          '',
                                                          '',
                                                          '',
                                                          '',
                                                          '',
                                                          '');

                    foreach($arrayParamCadenas as $idxCadenaCaracter)
                    {
                        $arrayCadena = explode("|", $idxCadenaCaracter["valor1"]);
                    }

                    foreach ($arrayCadena as $cadena)
                    {
                        if(!empty($cadena))
                        {
                            if(strpos($objServicio->getDescripcionPresentaFactura(),$cadena) !== false)
                            {
                                $strRegistroEquipo = "N";
                                break;
                            }
                            else
                            {
                                $strRegistroEquipo = "S";
                            }
                        }
                    }
                }
            }
            //***************************Se valida que los servicios tengan la caracteristica de REGISTRO EQUIPO************************//

            //*************Buscar si el servicio ya cuenta con la caracteristica: PE-HSRP*************//
            $strBanderaServProdCaract                       = "N";
            $strConfiguracionPeHsrp                         = "S";
            $arrayParametrosProdCaract["strCaracteristica"] = "PE-HSRP";
            $arrayParametrosProdCaract["objProducto"]       = $objProducto;
            $arrayParametrosProdCaract["objServicio"]       = $objServicio;

            $strBanderaServProdCaract = $arrayParametros["serviceCliente"]->consultaServicioProdCaract($arrayParametrosProdCaract);

            if($strBanderaServProdCaract === "S")
            {
                $strConfiguracionPeHsrp = "N";
            }
            //*************Buscar si el servicio ya cuenta con la caracteristica: PE-HSRP*************//
            
            $strMacEquipoHw      = "";
            $strModeloCpeOnt     = "";
            $strSerieEquipoHw    = "";
            $strModeloEquipoHw   = "";
            $strTieneEquipoNuevo = "";
            $strNombreElementoHw = "";
            $intIdSolCambioEquipoSoporte     = 0;
            $strTieneSolCambioEquipoSoporte  = "";
            $strEstadoSolCambioEquipoSoporte = "";
            $strPermiteActivarServicio       = "SI";
            //Recuperar Solicitud SOLICITUD AGREGAR EQUIPO POR SOPORTE
            
            if ($row['PREFIJO'] == 'MD' && $row['NOMBRE_MARCA_ELEMENTO'] == "HUAWEI" && 
                !empty($row['ID_PLAN']) && $productoTecnico == "INTERNET")
            {
                $objServicioTecnicoInt  = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')
                                                    ->findOneBy(array("servicioId"=>intval($row['ID_SERVICIO'])));
                
                if(is_object($objServicioTecnicoInt))
                {
                    $arrayRespuestaServiciosWyApXActivar    = $serviceTecnico->obtenerServiciosPorProducto(
                                                                            array(  "intIdPunto"                  => 
                                                                                    $objServicioTecnicoInt->getServicioId()->getPuntoId()->getId(),
                                                                                    "arrayNombresTecnicoProducto" =>  array("WDB_Y_EDB"),
                                                                                    "strCodEmpresa"               => $arrayParametros['empresa'],
                                                                                    "arrayEstadosServicioABuscar" => array("PendienteAp")));
                    $intContadorServiciosWyApXActivar       = $arrayRespuestaServiciosWyApXActivar["intContadorServiciosPorProducto"];
                    if(intval($intContadorServiciosWyApXActivar) > 0)
                    {
                        $strPermiteActivarServicio = "NO";
                    }
                }
                
                $strPlanActualDic = 'NO';
                //Se verifica si el plan actual es uno de los planes nuevos vigentes
                $arrayParamsPlanActualDic = array(
                                                  "intIdPlan"                         => $row['ID_PLAN'],
                                                  "strDescripcionCaracteristicaPlan"  => "PLANES NUEVOS VIGENTES",
                                                  "strValorCaracteristicaPlan"        => "SI",
                                                  "strEstado"                         => "Activo"
                                                 );
                $arrayRespuestaPlanActualDic    = $this->_em->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                            ->getCaracteristicasPlanByCriterios($arrayParamsPlanActualDic);
                $intTotalCaractPlanActualDic    = $arrayRespuestaPlanActualDic['intTotal'];
                $arrayResultadoPlanActualDic    = $arrayRespuestaPlanActualDic['arrayResultado'];

                if($intTotalCaractPlanActualDic > 0 && !empty($arrayResultadoPlanActualDic))
                {
                    $strPlanActualDic = "SI";
                }
                if ($strPlanActualDic == 'NO' && is_object($objServicioTecnicoInt))
                {
                    $intElementoClienteId = $objServicioTecnicoInt->getElementoClienteId();
                    if (!empty($intElementoClienteId))
                    {
                        $objElementoCliente = $this->_em
                                                   ->getRepository("schemaBundle:InfoElemento")
                                                   ->find($intElementoClienteId);
                        if (is_object($objElementoCliente))
                        {
                            $intIdElementoHw            = $objElementoCliente->getId();
                            $strNombreElementoHw        = $objElementoCliente->getNombreElemento();
                            $strSerieEquipoHw           = $objElementoCliente->getSerieFisica();
                            $strTieneEquipoNuevo        = "NO";
                            $strNombreModeloElementoCli = $objElementoCliente->getModeloElementoId()->getNombreModeloElemento();
                            $strModeloEquipoHw          = $strNombreModeloElementoCli;
                            $arrayParamModelosNuevos = $this->_em
                                                            ->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->get('EQUIPOS_PERMITIDOS_CAMBIO_EQUIPO_POR_SOPORTE',
                                                                  'TECNICO',
                                                                  'VALIDACION_DE_EQUIPOS',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  '18');
                            foreach($arrayParamModelosNuevos as $arrayParamModeloNuevo)
                            {
                                if ($strNombreModeloElementoCli ==  $arrayParamModeloNuevo["valor1"])
                                {
                                    $strTieneEquipoNuevo = "SI";
                                }
                            }

                            if ($strTieneEquipoNuevo == "NO")
                            {
                                $strTieneSolCambioEquipoSoporte = "NO";
                                $objTipoSolicitudPorSoporte = $this->_em
                                                                   ->getRepository("schemaBundle:AdmiTipoSolicitud")
                                                                   ->findOneBy(array('descripcionSolicitud' => 'SOLICITUD CAMBIO EQUIPO POR SOPORTE',
                                                                                     'estado'               => 'Activo'));

                                if(is_object($objTipoSolicitudPorSoporte))
                                {
                                    //Se busca solicitudes pendientes de cambio de equipo por soporte de un cliente
                                    $arrayDetSolPorSoporte = $this->_em
                                                                ->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                                ->findBy(array('servicioId'      => $row['ID_SERVICIO'],
                                                                               'tipoSolicitudId' => $objTipoSolicitudPorSoporte->getId()));
                                    foreach($arrayDetSolPorSoporte as $objDetSolPorSoporte)
                                    {
                                        $arrayEstadosFinalizados = array("Rechazado", "Finalizada", "Anulada", "Rechazada", "Anulado");
                                        if (!in_array($objDetSolPorSoporte->getEstado(), $arrayEstadosFinalizados))
                                        {
                                            $strTieneSolCambioEquipoSoporte  = "SI";
                                            $strEstadoSolCambioEquipoSoporte = $objDetSolPorSoporte->getEstado();
                                            $intIdSolCambioEquipoSoporte     = $objDetSolPorSoporte->getId();

                                            if ($strEstadoSolCambioEquipoSoporte == "Asignada")
                                            {
                                                $objAdmiCaracteristicaModeloCpe  = $this->_em
                                                                                        ->getRepository("schemaBundle:AdmiCaracteristica")
                                                                                        ->findOneBy(array(   'descripcionCaracteristica' => 'MODELO ROUTER',
                                                                                                             'estado'                    => 'Activo'));
                                                if (is_object($objAdmiCaracteristicaModeloCpe))
                                                {
                                                    $objDetalleSolCaractModeloCpe = $this->_em
                                                                                         ->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                                         ->findOneBy(
                                                                                                    array(
                                                                                                          "detalleSolicitudId"  => $objDetSolPorSoporte,
                                                                                                          "caracteristicaId"    => 
                                                                                                          $objAdmiCaracteristicaModeloCpe,
                                                                                                          "estado"              => 'Asignada'
                                                                                                         )
                                                                                                    );
                                                    if(is_object($objDetalleSolCaractModeloCpe))
                                                    {
                                                        $strModeloCpeOnt = $objDetalleSolCaractModeloCpe->getValor();
                                                    }
                                                }
                                            }
                                            break;
                                        } 
                                    }
                                }

                                if($strTieneSolCambioEquipoSoporte == "NO")
                                {
                                    //Se busca solicitudes pendientes de cambio de equipo por soporte de un cliente
                                    $objTipoSolicitudPorSoporte = $this->_em
                                                                       ->getRepository("schemaBundle:AdmiTipoSolicitud")
                                                                       ->findOneBy(array('descripcionSolicitud' => 
                                                                                         'SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO',
                                                                                         'estado'               => 
                                                                                         'Activo'));

                                    if(is_object($objTipoSolicitudPorSoporte))
                                    {
                                        $arrayDetSolPorSoporte = $this->_em
                                                                    ->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                                    ->findBy(array('servicioId'      => $row['ID_SERVICIO'],
                                                                                   'tipoSolicitudId' => $objTipoSolicitudPorSoporte->getId()));
                                        foreach($arrayDetSolPorSoporte as $objDetSolPorSoporte)
                                        {
                                            $arrayEstadosFinalizados = array("Rechazado", "Finalizada", "Anulada", "Rechazada", "Anulado");
                                            if (!in_array($objDetSolPorSoporte->getEstado(), $arrayEstadosFinalizados))
                                            {
                                                $strEsCambioEquiSoporteMasivo    = "SI";
                                                $strTieneSolCambioEquipoSoporte  = "SI";
                                                $strEstadoSolCambioEquipoSoporte = $objDetSolPorSoporte->getEstado();
                                                $intIdSolCambioEquipoSoporte     = $objDetSolPorSoporte->getId();

                                                if ($strEstadoSolCambioEquipoSoporte == "Asignada")
                                                {
                                                    $objAdmiCaracteristicaModeloCpe  = $this->_em
                                                                                            ->getRepository("schemaBundle:AdmiCaracteristica")
                                                                                            ->findOneBy(array('descripcionCaracteristica' => 
                                                                                                              'MODELO ROUTER',
                                                                                                              'estado'                    =>
                                                                                                              'Activo'));
                                                    if (is_object($objAdmiCaracteristicaModeloCpe))
                                                    {
                                                        $objDetalleSolCaractModeloCpe = $this->_em
                                                                                             ->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                                             ->findOneBy(
                                                                                                        array(
                                                                                                              "detalleSolicitudId"  => 
                                                                                                              $objDetSolPorSoporte,
                                                                                                              "caracteristicaId"    => 
                                                                                                              $objAdmiCaracteristicaModeloCpe,
                                                                                                              "estado"              => 'Asignada'
                                                                                                             )
                                                                                                        );
                                                        if(is_object($objDetalleSolCaractModeloCpe))
                                                        {
                                                            $strModeloCpeOnt = $objDetalleSolCaractModeloCpe->getValor();
                                                        }
                                                    }
                                                }
                                                break;
                                            } 
                                        }
                                    }
                                }

                                if ($strTieneSolCambioEquipoSoporte == "NO")
                                {
                                    $objProductoInternetSop = $this->_em->getRepository('schemaBundle:AdmiProducto')
                                                                     ->findOneBy(array("empresaCod"          => $arrayParametros['empresa'], 
                                                                                       "descripcionProducto" => "INTERNET DEDICADO",
                                                                                       "estado"              => "Activo"));
                                    if(is_object($objServicioTecnicoInt) && is_object($objProductoInternetSop))
                                    {
                                        $objCaractMacOntSop = $serviceTecnico
                                                              ->getServicioProductoCaracteristica($objServicioTecnicoInt->getServicioId(),
                                                                                                  'MAC ONT',
                                                                                                  $objProductoInternetSop);
                                        if(is_object($objCaractMacOntSop))
                                        {
                                            $strMacEquipoHw = $objCaractMacOntSop->getValor();
                                        }
                                    }
                                    //se verifica si existe algún servicio WIFI DUAL BAND pendiente de activación
                                    $objServicioInt = $this->_em->getRepository('schemaBundle:InfoServicio')->find($row['ID_SERVICIO']);
                                    if(is_object($objServicioInt))
                                    {
                                        $objPuntoServicio   = $objServicioInt->getPuntoId();
                                        if(is_object($objPuntoServicio))
                                        {
                                            $arrayRespuestaServiciosWdb = $serviceTecnico->obtenerServiciosPorProducto(
                                                                                            array(  "intIdPunto"                    => 
                                                                                                    $objPuntoServicio->getId(),
                                                                                                    "arrayNombresTecnicoProducto"   => 
                                                                                                    array("WIFI_DUAL_BAND", "WDB_Y_EDB"),
                                                                                                    "strCodEmpresa"                 => 
                                                                                                    $arrayParametros['empresa']));
                                            $intContadorServiciosWdb    = $arrayRespuestaServiciosWdb["intContadorServiciosPorProducto"];
                                            if(intval($intContadorServiciosWdb) > 0)
                                            {
                                                $strTieneSolCambioEquipoSoporte = "SI";
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            //Se verifica si el cliente esta configurado para validar si tiene permitido el uso de la herramienta migracion de vlan
            $arrayValoresParametros = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('PARAMETROS PROYECTO SEGMENTACION VLAN',
                                                                                                         'INFRAESTRUCTURA',
                                                                                                         'ASIGNAR RECURSOS DE RED',
                                                                                                         'CLIENTE_PERMITIDO',
                                                                                                         intval($row['ID_PERSONA_EMPRESA_ROL']),
                                                                                                         '',
                                                                                                         '',
                                                                                                         '',
                                                                                                         '',
                                                                                                         '');

            if(isset($arrayValoresParametros["valor1"]) && !empty($arrayValoresParametros["valor1"]))
            {
                $strClienteMigracionVlan = "S";
            }

            //** Se consulta el estado de las solicitudes: SOLICITUD MIGRACION DE VLAN **//
            $arrayTipoSolicitudVlan                           = array();
            $arrayParametrosEstadoSol["intServicioId"]        = intval($row['ID_SERVICIO']);
            $arrayParametrosEstadoSol["descripcionSolicitud"] = "SOLICITUD MIGRACION DE VLAN";

            $arrayTipoSolicitudVlan = $this->_em->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                ->getUltEstadoSolicitud($arrayParametrosEstadoSol);

            //** Se consulta el estado de las solicitudes: SOLICITUD MIGRACION DE VLAN **//
            
            $intIdServico                           = intval($row['ID_SERVICIO']);
            $arrayInfServicio['intServicioId']      = $intIdServico;
            $arrayInfServicio['intEmpresaCod']      = intval($row['COD_EMPRESA']);
            $arrayInfServicio['casoId']             = 0;   
            $arrayInfServicio['tareaId']            = "";
            
            //Consultamos si el producto requiere flujo ya que antes no lo tenia
            $arrayParametrosRequiereFlujo =   $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                              ->getOne("REQUIERE_FLUJO", 
                                                                       "TECNICO", 
                                                                       "", 
                                                                       "", 
                                                                       $productoNombre, 
                                                                       "", 
                                                                       "",
                                                                       "",
                                                                       "",
                                                                       10
                                                                       );
            if(is_array($arrayParametrosRequiereFlujo) && !empty($arrayParametrosRequiereFlujo))
            {
                $strNombreTarea                 = "TAREA ELECTRICO - CABLEADO ESTRUCTURADO";
                $strDescripcionTarea            = "ELECTRICO";
        
                /*Validamos que el Entity Manager haya sido recibido.*/
                if (is_object($emSoporte) && isset($emSoporte))
                {
                    $objAdmiTarea = $emSoporte->getRepository("schemaBundle:AdmiTarea")
                                      ->findOneBy(array ('nombreTarea'        => $strNombreTarea,
                                                         'descripcionTarea'   => $strDescripcionTarea, 
                                                         'estado'             => 'Activo'));

                    if (is_object($objAdmiTarea))
                    {
                        $arrayInfServicio['tareaId']    = $objAdmiTarea->getId();
                    }
                }
            }
            
            if ($row['PREFIJO'] == 'MD' && $row['NOMBRE_MARCA_ELEMENTO'] == "HUAWEI" && 
                !empty($row['ID_PLAN']) && $productoTecnico == "INTERNET" 
                && !empty($row['TIPO_ORDEN']) && $row['TIPO_ORDEN'] === "T"
                && !empty($row['ESTADO']) && $row['ESTADO'] <> "Activo" 
                && is_object($emSoporte) && isset($emSoporte))
            {
                $objAdmiTarea   = $emSoporte->getRepository("schemaBundle:AdmiTarea")
                                            ->findOneBy(array ('nombreTarea'        => "FIBRA: INSTALACION UM",
                                                               'estado'             => 'Activo'));

                if (is_object($objAdmiTarea))
                {
                    $arrayInfServicio['tareaId']    = $objAdmiTarea->getId();
                }
            }
            
            $arrayInfoTarea                 = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                        ->getInfoTareaByServicioId($arrayInfServicio);
            
            $arrayInfServicio['detalleId']         =  $arrayInfoTarea['detalleId'];

            
            if($strPrefijoEmpresa == $strPrefijoEmpresaTN)
            {
              $arrayInfServicio['nombreTecnico']     =  $objServicio->getProductoId()->getNombreTecnico();
              $arrayInfServicio['strPrefijoEmpresa'] = $strPrefijoEmpresa;
            }
            
            
            
            //Consultamos la tarea para obtener el campo REQUIERE_FIBRA
            if (isset($emSoporte) && is_object($emSoporte) && !is_null($arrayInfoTarea['tareaId']) && !empty($arrayInfoTarea['tareaId']))
            {
                $objAdmiTarea = $emSoporte->getRepository("schemaBundle:AdmiTarea")
                                      ->findOneBy(array ('id'        => $arrayInfoTarea['tareaId'],
                                                         'estado'    => 'Activo'));

                if (is_object($objAdmiTarea))
                {
                    $arrayInfoTarea['requiereFibra']    = $objAdmiTarea->getRequiereFibra();
                }
            }
            
            $arrayInfServicio['tipoProgreso']       = "ACTAS";
            $strTieneActa                           = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                           ->validaProgresoTarea($arrayInfServicio);
            
            
            $arrayInfServicio['tipoProgreso']       = "INGRESO_FIBRA";            
            $strTieneFibra                          = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                           ->validaProgresoTarea($arrayInfServicio);
            
            $arrayInfServicio['tipoProgreso']       = "INGRESO_MATERIALES";
            $strTieneMateriales                     = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                           ->validaProgresoTarea($arrayInfServicio);

            //validar flujo
            if($booleanTipoRedGpon)
            {
                $row['FLUJO_TECNICO'] = "TN";
            }
            //Validar flujo para servicios camaras gpon
            if(is_object($objServicio) && is_object($objServicio->getProductoId())
               && $row['FLUJO_TECNICO'] == "MD" && $productoTecnico == 'OTROS')
            {
                $arrayParametrosDet = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                     'INFRAESTRUCTURA',
                                                     'PARAMETROS',
                                                     'VALIDAR RELACION SERVICIO ADICIONAL CON DATOS SAFECITY',
                                                     $objServicio->getProductoId()->getId(),
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     $row['COD_EMPRESA']);
                if(isset($arrayParametrosDet) && !empty($arrayParametrosDet))
                {
                    $row['FLUJO_TECNICO'] = "TN";
                }
            }
            //******Actualizar el parámetro FLUJO_TECNICO, para productos que son tipo de red GPON el flujo es 'TN'*****//

            $arrayNumBobinaInstalacion            = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                              ->getOne('PARAMETROS_GENERALES_MOVIL', 
                                                                       '', 
                                                                       '', 
                                                                       '', 
                                                                       'NUMERO_BOBINAS_INSTALACION', 
                                                                       '', 
                                                                       '', 
                                                                       ''
                                                                       );

            if(is_array($arrayNumBobinaInstalacion))
            {
                $intNumBobinaIns            = !empty($arrayNumBobinaInstalacion['valor2']) ? $arrayNumBobinaInstalacion['valor2'] : "";
                $strEstadoNumBobinaIns      = !empty($arrayNumBobinaInstalacion['estado']) ? $arrayNumBobinaInstalacion['estado'] : "";
            }
            
            $arrayCantInstalacionMd            = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                           ->getOne('PARAMETROS_GENERALES_MOVIL', 
                                                                    '', 
                                                                    '', 
                                                                    '', 
                                                                    'CANTIDAD_BOBINA_INSTALACION_MD', 
                                                                    '', 
                                                                    '', 
                                                                    ''
                                                                    );

            if(is_array($arrayCantInstalacionMd))
            {
                $intCantidadInstMd = !empty($arrayCantInstalacionMd['valor2']) ? $arrayCantInstalacionMd['valor2'] : "";
            }

            //Para el servicio L3MPLS se consulta el tipo de recursos es nuevo o existente
            $strExisteHistorial = "S";

            if($productoTecnico === "L3MPLS")
            {
                $arrayParametros["intIdServicio"]   = $intIdServico;
                $arrayParametros["strTipoRecursos"] = "Nuevos";
                $arrayParametros["strHistorial"]    = "Recursos:";
                $arrayParametros["strEstado"]       = "Asignada";

                $strExisteHistorial = $this->_em->getRepository('schemaBundle:InfoServicioHistorial')->validaTipoRecurso($arrayParametros);
            }

            $strProductoPermitidoHerramientaReverso = "N";

            //*************Validar si el producto esta autorizado para la herramienta: Reversar estado Orden Trabajo*************//
            $arrayValoresParametros = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('PRODUCTOS PERMITIDOS HERRAMIENTA REVERSAR ORDEN TRABAJO',
                                                         'INFRAESTRUCTURA',
                                                         'REVERSAR ORDEN DE TRABAJO',
                                                         'LISTADO PRODUCTOS PERMITIDOS',
                                                         '',
                                                         '',
                                                         '',
                                                         '',
                                                         '',
                                                         '10');

            if(isset($arrayValoresParametros["valor1"]) && !empty($arrayValoresParametros["valor1"]))
            {
                $arrayProductosPermitidos = explode("|", $arrayValoresParametros["valor1"]);
            }

            foreach ($arrayProductosPermitidos as $idxProductoPermitido)
            {
                if($productoId == $idxProductoPermitido)
                {
                    $strProductoPermitidoHerramientaReverso = "S";
                    break;
                }
            }
            //**************Validar si el producto esta autorizado para la herramienta: Reversar estado Orden Trabajo*************//

            //Obtener series de CPE, RADIO, ONT, WIFI y TRANSCEIVER
            $strPropietarioCpeCliente   = "";
            $strPropietarioRadioCliente = "";
            $strSerieCpeCliente         = "";
            $strSerieTransceiverCliente = "";
            $strSerieRadioCliente       = "";
            $strSerieOntCliente         = "";
            $strSerieWifiCliente        = "";
            $strLoginTecnico            = "";
            $arrayDipositivosNodo       = array();
            $arrayTecnico               = array();

            $objServicio        = $this->_em->getRepository('schemaBundle:InfoServicio')->find($intIdServico);
            $objTipoCpe         = $this->_em->getRepository('schemaBundle:AdmiTipoElemento')->findBy(array( "nombreTipoElemento" =>"CPE"));
            $objTipoTransceiver = $this->_em->getRepository('schemaBundle:AdmiTipoElemento')->findBy(array( "nombreTipoElemento" =>"TRANSCEIVER"));
            $objTipoRadio       = $this->_em->getRepository('schemaBundle:AdmiTipoElemento')->findBy(array( "nombreTipoElemento" =>"RADIO"));
            $objTipoOnt         = $this->_em->getRepository('schemaBundle:AdmiTipoElemento')->findBy(array( "nombreTipoElemento" =>"CPE ONT"));
            $objTipoWifi        = $this->_em->getRepository('schemaBundle:AdmiTipoElemento')->findBy(array( "nombreTipoElemento" =>"CPE WIFI"));

            if(is_object($objServicio))
            {
                $objCpeCliente = $this->_em->getRepository("schemaBundle:InfoElementoInstalacion")
                                            ->findOneBy(array(
                                                'personaEmpresaRolId'   => intval($row['ID_PERSONA_EMPRESA_ROL']),
                                                'tipoElementoId'        => $objTipoCpe[0]->getId(),
                                                'estado'                => 'Activo',
                                                'ubicacion'             => 'CLIENTE',
                                                'servicioId'            => $objServicio->getId(),
                                                'puntoId'               => $objServicio->getPuntoId()->getId()
                                            )); 
                
                if(is_object($objCpeCliente))
                {
                    $strPropietarioCpeCliente = $objCpeCliente->getPropietario();
                    $strSerieCpeCliente       = $objCpeCliente->getSerieElemento();
                    $strLoginTecnico          = $objCpeCliente->getUsrCreacion();
                }

                $objTransceiverCliente = $this->_em->getRepository("schemaBundle:InfoElementoInstalacion")
                            ->findOneBy(array(
                                'personaEmpresaRolId'   => intval($row['ID_PERSONA_EMPRESA_ROL']),
                                'tipoElementoId'        => $objTipoTransceiver[0]->getId(),
                                'estado'                => 'Activo',
                                'ubicacion'             => 'CLIENTE',
                                'servicioId'            => $objServicio->getId(),
                                'puntoId'               => $objServicio->getPuntoId()->getId()
                            )); 
                
                if(is_object($objTransceiverCliente))
                {
                    $strSerieTransceiverCliente = $objTransceiverCliente->getSerieElemento();
                    $strLoginTecnico            = $objTransceiverCliente->getUsrCreacion();
                }

                $objRadioCliente = $this->_em->getRepository("schemaBundle:InfoElementoInstalacion")
                            ->findOneBy(array(
                                'personaEmpresaRolId'   => intval($row['ID_PERSONA_EMPRESA_ROL']),
                                'tipoElementoId'        => $objTipoRadio[0]->getId(),
                                'estado'                => 'Activo',
                                'ubicacion'             => 'CLIENTE',
                                'servicioId'            => $objServicio->getId(),
                                'puntoId'               => $objServicio->getPuntoId()->getId()
                            )); 

                if(is_object($objRadioCliente))
                {
                    $strSerieRadioCliente       = $objRadioCliente->getSerieElemento();
                    $strPropietarioRadioCliente = $objRadioCliente->getPropietario();
                    $strLoginTecnico            = $objRadioCliente->getUsrCreacion();
                }

                $objOntCliente = $this->_em->getRepository("schemaBundle:InfoElementoInstalacion")
                            ->findOneBy(array(
                                'personaEmpresaRolId'   => intval($row['ID_PERSONA_EMPRESA_ROL']),
                                'tipoElementoId'        => $objTipoOnt[0]->getId(),
                                'estado'                => 'Activo',
                                'ubicacion'             => 'CLIENTE',
                                'servicioId'            => $objServicio->getId(),
                                'puntoId'               => $objServicio->getPuntoId()->getId()
                            )); 
                
                if(is_object($objOntCliente))
                {
                    $strSerieOntCliente = $objOntCliente->getSerieElemento();
                    $strLoginTecnico    = $objOntCliente->getUsrCreacion();
                }

                $objWifiCliente = $this->_em->getRepository("schemaBundle:InfoElementoInstalacion")
                            ->findOneBy(array(
                                'personaEmpresaRolId'   => intval($row['ID_PERSONA_EMPRESA_ROL']),
                                'tipoElementoId'        => $objTipoWifi[0]->getId(),
                                'estado'                => 'Activo',
                                'ubicacion'             => 'CLIENTE',
                                'servicioId'            => $objServicio->getId(),
                                'puntoId'               => $objServicio->getPuntoId()->getId()
                            )); 
                
                if(is_object($objWifiCliente))
                {
                    $strSerieWifiCliente = $objWifiCliente->getSerieElemento();
                    $strLoginTecnico     = $objWifiCliente->getUsrCreacion();
                }

                //Obtenemos los dispositovos del servicio que seran instalados en el nodo.
                $arrayDispositivosNodo = $this->_em->getRepository("schemaBundle:InfoElementoInstalacion")
                        ->findBy(array('personaEmpresaRolId' => intval($row['ID_PERSONA_EMPRESA_ROL']),
                                       'puntoId'             => $objServicio->getPuntoId()->getId(),
                                       'servicioId'          => $objServicio->getId(),
                                       'estado'              => 'Activo',
                                       'ubicacion'           => 'NODO'));

                if (!empty($arrayDispositivosNodo))
                {
                    foreach ($arrayDispositivosNodo as $objDispositivosNodo)
                    {
                        $objElementoNodo = $this->_em->getRepository("schemaBundle:InArticulosInstalacion")
                                    ->findOneByNumeroSerie($objDispositivosNodo->getSerieElemento());
                        $strElementoNodo = !is_object($objElementoNodo) ? null : $objElementoNodo->getDescripcion();

                        if (is_null($strElementoNodo))
                        {
                            $objElementoNodo = $this->_em->getRepository("schemaBundle:InfoElemento")
                                ->findOneBySerieFisica($objDispositivosNodo->getSerieElemento());
                            $strElementoNodo = !is_object($objElementoNodo) ? null : $objElementoNodo->getDescripcionElemento();
                        }

                        $strLoginTecnico        = $objDispositivosNodo->getUsrCreacion();
                        $arrayDipositivosNodo[] = array('serieElemento'       => $objDispositivosNodo->getSerieElemento(),
                                                        'modeloElemento'      => $objDispositivosNodo->getModeloElemento(),
                                                        'descripcionElemento' => $strElementoNodo,
                                                        'macElemento'         => $objDispositivosNodo->getMacElemento());
                    }
                }
            }

            //Obtenemos la información del técnico.
            if (!empty($strLoginTecnico))
            {
                $objInfoPersona = $this->_em->getRepository("schemaBundle:InfoPersona")->findOneByLogin($strLoginTecnico);
                if (is_object($objInfoPersona))
                {
                    $arrayTecnico = array('id_empleado'     => $objInfoPersona->getId(),
                                          'nombre_empleado' => sprintf("%s", $objInfoPersona));
                }
            }

            $arrayResultUmSoporte           = $this->_em->getRepository('schemaBundle:InfoTareaCaracteristica')
                                                        ->getUltimaMillaTecnico($intIdServico);
            $arrayDataUltimaMillaTecnico    = $arrayResultUmSoporte["result"][0];

            //Consultar si el producto esta configurado para la activacion y registro de elemento
            $strPermitirRegistroElemento = "N";
            $strTipoElementoABuscar      = "CPE";
            if($row['PREFIJO'] == 'MD' && !empty($productoId))
            {
                $arrayParametrosProductoPermitido = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                              ->getOne('PROYECTO NETLIFECAM',
                                                                       'INFRAESTRUCTURA',
                                                                       'ACTIVACION PARA NETLIFECAM',
                                                                       "PRODUCTO CONFIGURADO PARA REGISTRAR ELEMENTO",
                                                                       $productoId,
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       $row['COD_EMPRESA']);

                if(isset($arrayParametrosProductoPermitido["valor1"]) && !empty($arrayParametrosProductoPermitido["valor1"]))
                {
                    $strPermitirRegistroElemento  = "S";
                    $strTipoElemento              = $arrayParametrosProductoPermitido["valor2"];
                    $strTipoElementoABuscar       = $arrayParametrosProductoPermitido["valor3"];
                }
            }

            //Se consulta el estado del servicio de internet para servicios MD
            $strEstadoServicioInternetMD = "";

            $strServicioInternetInCorte = "N";
            
            //*****Consultar el estado del servicio de internet dedicado*****//
            //$strPermitirRegistroElemento => "S" === NETLIFECAM
            if($row['PREFIJO'] == 'MD' && $strPermitirRegistroElemento == "S")
            {
                //Consultar servicio Internet Dedicado
                $arrayParametrosProductoInternet = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                             ->getOne('PROYECTO NETLIFECAM',
                                                                      'INFRAESTRUCTURA',
                                                                      'ACTIVACION PARA NETLIFECAM',
                                                                      "PRODUCTO INTERNET DEDICADO",
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      $row['COD_EMPRESA']);

                if(isset($arrayParametrosProductoInternet["valor1"]) && !empty($arrayParametrosProductoInternet["valor1"]))
                {
                    $strProductoInternetDedicado = $arrayParametrosProductoInternet["valor1"];
                }

                if(is_object($objServicio))
                {
                    //Consultar el servicio de internet del punto
                    $objInfoServicio = $this->_em->getRepository('schemaBundle:InfoServicio')
                                                 ->findOneBy(array('puntoId'    => $objServicio->getPuntoId()->getId(),
                                                                   'productoId' => $strProductoInternetDedicado,
                                                                   'estado'     => "In-Corte"));

                    if(is_object($objInfoServicio))
                    {
                        $strServicioInternetInCorte = "S";
                    }

                    //Validar el estado del servicio de internet por plan
                    if($strServicioInternetInCorte == "N")
                    {
                        $objInfoServicios = $this->_em->getRepository('schemaBundle:InfoServicio')
                                                      ->findBy(array('puntoId' => $objServicio->getPuntoId()->getId()));

                        foreach($objInfoServicios as $idxInfoServicios)
                        {
                            if(is_object($idxInfoServicios->getPlanId()))
                            {
                                $objPlanDet = $this->_em->getRepository('schemaBundle:InfoPlanDet')
                                                        ->findBy(array('planId' => $idxInfoServicios->getPlanId()));

                                if($objPlanDet)
                                {
                                    foreach($objPlanDet as $idxPlanDet)
                                    {
                                        if($idxPlanDet->getProductoId() && ($idxPlanDet->getProductoId() == $strProductoInternetDedicado &&
                                               $idxInfoServicios->getEstado() == "In-Corte"))
                                        {
                                            $strServicioInternetInCorte = "S";
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            $intNumLicencia               = "";
            $strFechaCaducidad            = "";
            $intNumDiasFin                = "";
            
            $arrayParamsNombreTecnico  = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                     ->getOne('NOMBRE_TECNICO_PRODUCTOS',
                                                              '',
                                                              '',
                                                              '',
                                                              $productoNombre,
                                                              '',
                                                              '',
                                                              '',
                                                              '',
                                                              $row['COD_EMPRESA']);
            if(isset($arrayParamsNombreTecnico) && !empty($arrayParamsNombreTecnico))
            {
                $boolSecureCpe = 'S';
            }
            
            //Si el servicio esta activo obtenemos el número de licencia y fecha de caducidad
            if ($row['ESTADO'] == 'Activo' && $boolSecureCpe == 'S')
            {
                $objCaracteristicaNumLicencia = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                                        ->findOneBy(array("descripcionCaracteristica" => "NUM LICENCIAS", 
                                                                          "estado"                    => "Activo"));
                
                $objProdCaractNumLicencia     = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                        ->findOneBy(array("productoId"       => $productoId, 
                                                                          "caracteristicaId" => $objCaracteristicaNumLicencia->getId()));
                
                $objSerProdCaracLicencia      = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                     ->findOneBy(array("productoCaracterisiticaId" => $objProdCaractNumLicencia->getId(),
                                                                        "servicioId"               => $intIdServico));
                
                if (is_object($objSerProdCaracLicencia))
                {
                    $intNumLicencia    = $objSerProdCaracLicencia->getValor();
                }
                
                $objCaracteristicaFecha = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                                        ->findOneBy(array("descripcionCaracteristica" => "FECHA_EXPIRACION_SEGURIDAD_CPE", 
                                                                          "estado"                    => "Activo"));
                
                $objProdCaractFecha     = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                        ->findOneBy(array("productoId"       => $productoId, 
                                                                          "caracteristicaId" => $objCaracteristicaFecha->getId()));
                
                $objSerProdCaracFecha   = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                        ->findOneBy(array("productoCaracterisiticaId" => $objProdCaractFecha->getId(),
                                                                          "servicioId"                => $intIdServico));
                
                if (is_object($objSerProdCaracFecha))
                {
                    $strFechaCaducidad    = $objSerProdCaracFecha->getValor();
                }
            }
            
            $arrayParamsUmbralNotificacion  = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                     ->getOne('DIAS_FIN_SEGURIDAD_CPE',
                                                              '',
                                                              '',
                                                              '',
                                                              '',
                                                              '',
                                                              '',
                                                              '',
                                                              '',
                                                              $row['COD_EMPRESA']);
            if(isset($arrayParamsUmbralNotificacion) && !empty($arrayParamsUmbralNotificacion))
            {
                $intNumDiasFin = $arrayParamsUmbralNotificacion["valor1"];
            }
            
            $boolVisualizaBotonNg = 'N';
            
            //Consultamos si el producto tiene boton de migración
            $arrayVisualizaBotonNg  = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                     ->getOne('BOTON_MIGRACION_NG_FIREWALL',
                                                              '',
                                                              '',
                                                              '',
                                                              $productoNombre,
                                                              '',
                                                              '',
                                                              '',
                                                              '',
                                                              $row['COD_EMPRESA']);
            if(isset($arrayVisualizaBotonNg) && !empty($arrayVisualizaBotonNg))
            {
                $boolVisualizaBotonNg = 'S';
            }
            
            //Si el producto se encuentra en el parametro para el boton de migracion se debe consultar
            //si uno de los servicios tiene equipos cisco/hp
            if ($boolVisualizaBotonNg == 'S')
            {
                $objProductoInterMpls           = $this->_em->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'Internet MPLS',
                                                                                            'empresaCod'          => $row['COD_EMPRESA']));
                    
                $objProductoDatoMpls            = $this->_em->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'L3MPLS',
                                                                                            'empresaCod'          => $row['COD_EMPRESA']));
                
                $objProductoInternetDedicado    = $this->_em->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'Internet Dedicado',
                                                                                            'nombreTecnico'       => 'INTERNET',
                                                                                            'empresaCod'          => $row['COD_EMPRESA']));
                
                if((is_object($objProductoInterMpls) && !empty($objProductoInterMpls)) || 
                        (is_object($objProductoDatoMpls) && !empty($objProductoDatoMpls)) ||
                        (is_object($objProductoInternetDedicado) && !empty($objProductoInternetDedicado)))
                {
                    if(is_object($objProductoInterMpls) && !empty($objProductoInterMpls))
                    {
                        $objServicioInternetMpls = $this->_em->getRepository('schemaBundle:InfoServicio')->findOneBy(
                                                                                        array('puntoId'    => $objServicio->getPuntoId()->getId(),
                                                                                              'productoId' => $objProductoInterMpls->getId(),
                                                                                              'estado'     => 'Activo'));
                    }
                        
                    if(is_object($objProductoDatoMpls) && !empty($objProductoDatoMpls))
                    {
                        $objServicioDatosMpls = $this->_em->getRepository('schemaBundle:InfoServicio')->findOneBy(
                                                                                     array('puntoId'    => $objServicio->getPuntoId()->getId(),
                                                                                           'productoId' => $objProductoDatoMpls->getId(),
                                                                                           'estado'     => 'Activo'));
                    }
                    
                    if(is_object($objProductoInternetDedicado) && !empty($objProductoInternetDedicado))
                    {
                        $objServicioInternetDedicado = $this->_em->getRepository('schemaBundle:InfoServicio')->findOneBy(
                                                                                     array('puntoId'    => $objServicio->getPuntoId()->getId(),
                                                                                           'productoId' => $objProductoInternetDedicado->getId(),
                                                                                           'estado'     => 'Activo'));
                    }
                    if((is_object($objServicioInternetMpls) && !empty($objServicioInternetMpls)) ||
                            (is_object($objServicioDatosMpls) && !empty($objServicioDatosMpls)) || 
                            (is_object($objServicioInternetDedicado) && !empty($objServicioInternetDedicado)))
                    {
                        if(is_object($objServicioInternetMpls) && !empty($objServicioInternetMpls))
                        {
                            $objServTecnicoMpls = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')
                                                              ->findOneBy(array('servicioId' => $objServicioInternetMpls->getId()));
                            $arrayParametrosCpe['objServicioTecnico'] = $objServTecnicoMpls;
                            $arrayRespuestaMarca  = $serviceTecnico->obtenerCpeMarca($arrayParametrosCpe);
                            $strMarca             = $arrayRespuestaMarca['marca'];
                        }
                        elseif (is_object($objServicioInternetDedicado) && !empty($objServicioInternetDedicado))
                        {
                            $objServTecnicoMpls = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')
                                                              ->findOneBy(array('servicioId' => $objServicioInternetDedicado->getId()));
                            $arrayParametrosCpe['objServicioTecnico'] = $objServTecnicoMpls;
                            $arrayRespuestaMarca  = $serviceTecnico->obtenerCpeMarca($arrayParametrosCpe);
                            $strMarca             = $arrayRespuestaMarca['marca'];
                        }
                        else
                        {
                            if(is_object($objServicioDatosMpls) && !empty($objServicioDatosMpls))
                            {
                                $objServTecnicoMpls = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')
                                                              ->findOneBy(array('servicioId' => $objServicioDatosMpls->getId()));
                                $arrayParametrosCpe['objServicioTecnico'] = $objServTecnicoMpls;
                                $arrayRespuestaMarca  = $serviceTecnico->obtenerCpeMarca($arrayParametrosCpe);
                                $strMarca             = $arrayRespuestaMarca['marca'];
                            }
                        }
                    }
                    else
                    {
                        $boolVisualizaBotonNg = 'N';
                    }
                    if (!empty($strMarca))
                    {
                        $boolVisualizaBotonNg = 'N';
                        //Consultamos si son las marcas que permiten la migración
                        $arrayMarcasPermitidas  = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                     ->get('MARCAS_PERMITIDAS_MIGRACION',
                                                              '',
                                                              '',
                                                              '',
                                                              $productoNombre,
                                                              '',
                                                              '',
                                                              '',
                                                              '',
                                                              $row['COD_EMPRESA']);
                        
                        if(isset($arrayMarcasPermitidas) && !empty($arrayMarcasPermitidas))
                        {
                            foreach( $arrayMarcasPermitidas as $arrayParametroDet )
                            {
                                if ($arrayParametroDet['valor2'] == $strMarca)
                                {
                                    $boolVisualizaBotonNg = 'S';
                                }
                            }
                        }
                    }
                    else
                    {
                        $boolVisualizaBotonNg = 'N';
                    }
                    //Consultamos si existe en el punto un servicio SECURE CPE en estado 'Pendiente'
                    if ($boolVisualizaBotonNg == 'S')
                    {
                        $objProductoSecureCpe    = $this->_em->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                            'descripcionProducto' => 'SECURITY SECURE CPE',
                                                                                            'empresaCod'          => $row['COD_EMPRESA']));
                        if(is_object($objProductoSecureCpe) && !empty($objProductoSecureCpe))
                        {
                            $objServicioSecureCpe = $this->_em->getRepository('schemaBundle:InfoServicio')->findOneBy(
                                                                                        array('puntoId'    => $objServicio->getPuntoId()->getId(),
                                                                                              'productoId' => $objProductoSecureCpe->getId(),
                                                                                              'estado'     => 'Pendiente'));
                            if(!is_object($objServicioSecureCpe) && empty($objServicioSecureCpe))
                            {
                                $boolVisualizaBotonNg = 'N';
                            }
                        }
                    }
                }
                else
                {
                    $boolVisualizaBotonNg = 'N';
                }
            }

            $strEsServicioCamaraSafeCity    = "N";
            $strEsServicioWifiSafeCity      = "N";
            $strEsServicioCamaraVpnSafeCity = "N";
            $strRequiereSerActivarSafecity  = "N";
            $strEsServicioRequeridoSafeCity = "N";
            $strNombreServicioSafecity      = "";
            $strNombreSerRequiereSafecity   = "";
            $strEstadoServicioDatosSafeCity = "";
            $strEsVerificarSerRequerido     = "N";
            $strMensajeServicioRequerido    = "";
            //parametros SEG VEHICULO
            $strCaractCooperativa           = "";
            $strCaractTipoTransporte        = "";
            $strCaractPlaca                 = "";

            //Consultar el producto
            if($row['PREFIJO'] == 'TN' && !empty($productoId) && is_object($objServicio->getProductoId()))
            {
                //validar producto SEG VEHICULO
                if($objServicio->getProductoId()->getNombreTecnico() === "SEG_VEHICULO")
                {
                    $objSerCarcCooperativa = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                "COOPERATIVA",
                                                                                                $objServicio->getProductoId());
                    if(is_object($objSerCarcCooperativa))
                    {
                        $strCaractCooperativa = $objSerCarcCooperativa->getValor();
                    }
                    $objSerCarcTipoTransporte = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                   "TIPO TRANSPORTE",
                                                                                                   $objServicio->getProductoId());
                    if(is_object($objSerCarcTipoTransporte))
                    {
                        $strCaractTipoTransporte = $objSerCarcTipoTransporte->getValor();
                    }
                    $objSerCarcPlaca = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                          "PLACA",
                                                                                          $objServicio->getProductoId());
                    if(is_object($objSerCarcPlaca))
                    {
                        $strCaractPlaca = $objSerCarcPlaca->getValor();
                    }
                }
                //validar producto DATOS SAFECITY
                if($objServicio->getProductoId()->getNombreTecnico() === "DATOS SAFECITY")
                {
                    $strRegistroEquipo = "S";
                }
                $arrayParametrosDet = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                                     'INFRAESTRUCTURA',
                                                                     'PARAMETROS',
                                                                     'VALIDAR RELACION SERVICIO ADICIONAL CON DATOS SAFECITY',
                                                                     $productoId,
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     '10');

                if(!empty($arrayParametrosDet["valor1"]) && isset($arrayParametrosDet["valor1"]))
                {
                    $strRegistroEquipo = "S";
                    $strTipoCaractVlan = "VLAN";
                    $strTipoCaractVrf  = "VRF";
                    if($arrayParametrosDet["valor5"] == "CAMARA")
                    {
                        $strEsServicioCamaraSafeCity = "S";
                    }
                    elseif($arrayParametrosDet["valor5"] == "WIFI")
                    {
                        $strEsServicioWifiSafeCity = "S";
                        $strTipoCaractVlan = "VLAN SSID";
                        $strTipoCaractVrf  = "VRF SSID";
                         //obtengo la vlan y vrf admin para servicios wifi
                        $objVlanServicio = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                              "VLAN ADMIN",
                                                                                              $objServicio->getProductoId());
                        $objVrfServicio  = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                              "VRF ADMIN",
                                                                                              $objServicio->getProductoId());
                        if(is_object($objVlanServicio) && is_object($objVrfServicio))
                        {
                            //Consultar la VLAN y VRF del servicio SAFE VIDEO ANALYTICS CAM                   
                            $objInfoDetalleElemento = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                                ->find($objVlanServicio->getValor());
                            //Consulta la VLAN
                            if(is_object($objInfoDetalleElemento))
                            {
                                $strVlanAdmin = $objInfoDetalleElemento->getDetalleValor();
                            }
                            $objInfoPersonaEmpresaRolCarac = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                       ->find($objVrfServicio->getValor());
                            //Consulta la VRF
                            if(is_object($objInfoPersonaEmpresaRolCarac))
                            {
                                $strVrfAdmin = $objInfoPersonaEmpresaRolCarac->getValor();
                            }                             
                        }
                    }
                    elseif($arrayParametrosDet["valor5"] == "CAMARAVPN")
                    {
                        $strEsServicioCamaraVpnSafeCity = "S";
                    }
                    $objVlanServicio = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                          $strTipoCaractVlan,
                                                                                          $objServicio->getProductoId());
                    $objVrfServicio  = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                          $strTipoCaractVrf,
                                                                                          $objServicio->getProductoId());
                    if(is_object($objVlanServicio) && is_object($objVrfServicio))
                    {
                        //Consultar la VLAN y VRF del servicio SAFE VIDEO ANALYTICS CAM                   
                        $objInfoDetalleElemento = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                            ->find($objVlanServicio->getValor());
                        //Consulta la VLAN
                        if(is_object($objInfoDetalleElemento))
                        {
                            $strVlan = $objInfoDetalleElemento->getDetalleValor();
                        }
                        $objInfoPersonaEmpresaRolCarac = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                   ->find($objVrfServicio->getValor());
                        //Consulta la VRF
                        if(is_object($objInfoPersonaEmpresaRolCarac))
                        {
                            $strVrf = $objInfoPersonaEmpresaRolCarac->getValor();
                        }                             
                    }

                    //obtener los datos del ont
                    $arrayParDatosOnt = array(
                        "objServicio"    => $objServicio,
                        "strUsrCreacion" => "telcos",
                        "strIpCreacion"  => "127.0.0.1"
                    );
                    $arrayResultDatosOnt = $serviceTecnico->getDatosOntGponTN($arrayParDatosOnt);
                    if($arrayResultDatosOnt['status'] == "OK" && !empty($arrayResultDatosOnt['datos']))
                    {
                        $intIdOnt     = $arrayResultDatosOnt['datos']['intIdOnt'];
                        $strSerieOnt  = $arrayResultDatosOnt['datos']['strSerieOnt'];
                        $strMacOnt    = $arrayResultDatosOnt['datos']['strMacOnt'];
                        $strNombreOnt = $arrayResultDatosOnt['datos']['strNombreOnt'];
                        $strModeloOnt = $arrayResultDatosOnt['datos']['strModeloOnt'];
                        $strMarcaOnt  = $arrayResultDatosOnt['datos']['strMarcaOnt'];
                        $strEstadoServicioDatosSafeCity = $arrayResultDatosOnt['datos']['strEstado'];
                        $strNombreServicioSafecity      = $arrayResultDatosOnt['datos']['strNombreProducto'];
                    }

                    //verificar SW POE
                    $arrayParServSwPoe = array(
                        "objPunto"      => $objServicio->getPuntoId(),
                        "strParametro"  => "PRODUCTO_ADICIONAL_SW_POE",
                        "strCodEmpresa" => $row['COD_EMPRESA']
                    );
                    $arrayResultServicioSwPoe = $serviceTecnico->getServicioGponPorProducto($arrayParServSwPoe);
                    if($arrayResultServicioSwPoe['status'] == "OK")
                    {
                        $objServicioSwPoe = $arrayResultServicioSwPoe['objServicio'];
                        if(is_object($objServicioSwPoe))
                        {
                            $strExisteSwPoeGpon = "S";
                            $intIdServicioSwPoe = $objServicioSwPoe->getId();
                            if($objServicioSwPoe->getEstado() != "Activo")
                            {
                                $strActivarSwPoeGpon = "S";
                            }
                            //obtener servicio tecnico
                            $objServcioTecnicoSwPoe = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')
                                                                ->findOneBy(array("servicioId" => $objServicioSwPoe->getId()));
                            $intIdEleClienteSwPoe   = $objServcioTecnicoSwPoe->getElementoClienteId();
                            if(!empty($intIdEleClienteSwPoe))
                            {
                                $objElementoSwPoe = $this->_em->getRepository('schemaBundle:InfoElemento')->find($intIdEleClienteSwPoe);
                                if(is_object($objElementoSwPoe))
                                {
                                    $intIdSwPoeGpon     = $objElementoSwPoe->getId();
                                    $strNombreSwPoeGpon = $objElementoSwPoe->getNombreElemento();
                                    $strSerieSwPoeGpon  = $objElementoSwPoe->getSerieFisica();
                                    $objMacDelServicio  = $serviceTecnico->getServicioProductoCaracteristica($objServicioSwPoe,
                                                                                                            "MAC CLIENTE",
                                                                                                            $objServicioSwPoe->getProductoId());
                                    if(is_object($objMacDelServicio))
                                    {
                                        $strMacSwPoeGpon = $objMacDelServicio->getValor();
                                    }
                                    $objModeloElemento  = $objElementoSwPoe->getModeloElementoId();
                                    $strModeloSwPoeGpon = $objModeloElemento->getNombreModeloElemento();
                                    $strMarcaSwPoeGpon  = $objModeloElemento->getMarcaElementoId()->getNombreMarcaElemento();
                                }
                            }
                            //obtener id de la interface del ont
                            $intIdIntrefaceClienteSwPoe = $objServcioTecnicoSwPoe->getInterfaceElementoClienteId();
                            if(!empty($intIdIntrefaceClienteSwPoe))
                            {
                                $objEnlaceSwPoe = $this->_em->getRepository('schemaBundle:InfoEnlace')
                                                                ->findOneBy(array("interfaceElementoFinId" => $intIdIntrefaceClienteSwPoe,
                                                                                  "estado"                 => "Activo"));
                                if(is_object($objEnlaceSwPoe))
                                {
                                    $intIdInterfaceOntSwPoe = $objEnlaceSwPoe->getInterfaceElementoIniId()->getId();
                                }
                            }
                            //verificar característica migración
                            $objCarMigSwServicio    = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                         "MIGRACION_SWITCH_POE",
                                                                                                         $objServicio->getProductoId());
                            if(is_object($objCarMigSwServicio))
                            {
                                $strMigrarSwPoe = "S";
                            }
                            //verificar si existe camara PTZ
                            $arrayParVerificarCamaraPTZ = array(
                                "objServicio"    => $objServicio,
                                "strCodEmpresa"  => $row['COD_EMPRESA'],
                                "strUsrCreacion" => 'telcos',
                                "strIpCreacion"  => '127.0.0.1',
                            );
                            $arrayVerificarCamaraPTZ = $serviceTecnico->verificarExisteCamaraPTZGponTN($arrayParVerificarCamaraPTZ);
                            if($arrayVerificarCamaraPTZ['status'] == "OK" && $arrayVerificarCamaraPTZ['resultado'] == "SI")
                            {
                                $strExisteCamaraPtzGpon = "S";
                            }
                        }
                    }

                    //verificar producto requerido
                    if(isset($arrayParametrosDet["valor7"]) && !empty($arrayParametrosDet["valor7"]))
                    {
                        $arrayParServReq = array(
                            "objPunto"      => $objServicio->getPuntoId(),
                            "strParametro"  => $arrayParametrosDet["valor7"],
                            "strCodEmpresa" => $row['COD_EMPRESA']
                        );
                        $arrayResultServicioReq = $serviceTecnico->getServicioGponPorProducto($arrayParServReq);
                        if($arrayResultServicioReq['status'] == "OK")
                        {
                            $objServicioReq = $arrayResultServicioReq['objServicio'];
                            $objProductoReq = $arrayResultServicioReq['objProducto'];
                            if(!is_object($objServicioReq) || $objServicioReq->getEstado() != "Activo")
                            {
                                $strRequiereSerActivarSafecity = "S";
                                $strNombreSerRequiereSafecity  = is_object($objProductoReq)
                                                                 ? $objProductoReq->getDescripcionProducto() : "";
                            }
                            //obtener datos tecnicos del servicio
                            if(is_object($objServicioReq))
                            {
                                $intIdServicioEleReqGpon = $objServicioReq->getId();
                                //obtener servicio tecnico
                                $objServcioTecnicoReq    = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')
                                                                    ->findOneBy(array("servicioId" => $objServicioReq->getId()));
                                $intIdEleClienteEleGpon  = $objServcioTecnicoReq->getElementoClienteId();
                                if(!empty($intIdEleClienteEleGpon))
                                {
                                    $objElementoReq = $this->_em->getRepository('schemaBundle:InfoElemento')->find($intIdEleClienteEleGpon);
                                    if(is_object($objElementoReq))
                                    {
                                        $intIdElementoReqGpon     = $objElementoReq->getId();
                                        $strNombreElementoReqGpon = $objElementoReq->getNombreElemento();
                                        $strSerieElementoReqGpon  = $objElementoReq->getSerieFisica();
                                        $objMacDelServicio = $serviceTecnico->getServicioProductoCaracteristica($objServicioReq,
                                                                                                                "MAC CLIENTE",
                                                                                                                $objServicioReq->getProductoId());
                                        if(is_object($objMacDelServicio))
                                        {
                                            $strMacElementoReqGpon = $objMacDelServicio->getValor();
                                        }
                                        $objModeloElemento     = $objElementoReq->getModeloElementoId();
                                        $strModeloElementoReqGpon = $objModeloElemento->getNombreModeloElemento();
                                        $strMarcaElementoReqGpon  = $objModeloElemento->getMarcaElementoId()->getNombreMarcaElemento();
                                    }
                                }
                                //obtener id de la interface del ont
                                $intIdIntrefaceClienteReqGpon = $objServcioTecnicoReq->getInterfaceElementoClienteId();
                                if(!empty($intIdIntrefaceClienteReqGpon))
                                {
                                    $objEnlaceReqGpon = $this->_em->getRepository('schemaBundle:InfoEnlace')
                                                            ->findOneBy(array("interfaceElementoFinId" => $intIdIntrefaceClienteReqGpon,
                                                                              "estado"                 => "Activo"));
                                    if(is_object($objEnlaceReqGpon))
                                    {
                                        $intIdInterfaceOntEleReq = $objEnlaceReqGpon->getInterfaceElementoIniId()->getId();
                                    }
                                }
                            }
                        }
                    }

                    //obtener datos elemento cliente
                    $objServcioTecnico = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')
                                                        ->findOneBy(array("servicioId" => $objServicio->getId()));
                    if(is_object($objServcioTecnico))
                    {
                        $strIdElementoCliente  = $objServcioTecnico->getElementoClienteId();
                        if(!empty($strIdElementoCliente))
                        {
                            $objInfoElemento = $this->_em->getRepository('schemaBundle:InfoElemento')->find($strIdElementoCliente);
                            if(is_object($objInfoElemento))
                            {
                                $strMombreElementoCliente = $objInfoElemento->getNombreElemento();
                                $strModeloElementoCliente = $objInfoElemento->getModeloElementoId()->getNombreModeloElemento();
                                $strSerieElementoCliente  = $objInfoElemento->getSerieFisica();
                            }
                        }
                    }
                    //mac del elemento cliente
                    $objMacDelServicio  = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                            "MAC CLIENTE",
                                                                                            $objServicio->getProductoId());
                    if(is_object($objMacDelServicio))
                    {
                        $strMacElementoCliente = $objMacDelServicio->getValor();
                    }
                    //verificar si esta conectado en switch poe
                    $objServCaractSwPoe = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                             'SERVICIO_EN_SWITCH_POE',
                                                                                             $objServicio->getProductoId());
                    if(is_object($objServCaractSwPoe))
                    {
                        $strServicioEnSwPoe = "S";
                    }
                    //obtener id de la interface ont del servicio
                    $objCarPuertoOntSer = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                             "PUERTO_ONT",
                                                                                             $objServicio->getProductoId());
                    if(is_object($objCarPuertoOntSer) && !empty($intIdOnt))
                    {
                        $objInfoInterfaceElementoOnt = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                            ->findOneBy(array("elementoId"              => $intIdOnt,
                                                                              "nombreInterfaceElemento" => $objCarPuertoOntSer->getValor()));
                        if(is_object($objInfoInterfaceElementoOnt))
                        {
                            $intIdInterfaceOnt = $objInfoInterfaceElementoOnt->getId();
                        }
                    }
                }
                //verificar si es servicio requerido
                $arrayParametrosDet = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne('CONFIG_PRODUCTO_DATOS_SAFE_CITY',
                                                                     'COMERCIAL',
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     $objServicio->getProductoId()->getId(),
                                                                     '',
                                                                     '',
                                                                     'PRODUCTO_REQUERIDO',
                                                                     $row['COD_EMPRESA']);
                if(!empty($arrayParametrosDet["valor1"]) && isset($arrayParametrosDet["valor1"]))
                {
                    //obtener servicio ont
                    $arrayParServOnt = array(
                        "objPunto"      => $objServicio->getPuntoId(),
                        "strParametro"  => $arrayParametrosDet["valor6"],
                        "strCodEmpresa" => $row['COD_EMPRESA']
                    );
                    $arrayResultServicioOnt = $serviceTecnico->getServicioGponPorProducto($arrayParServOnt);
                    if($arrayResultServicioOnt['status'] == "OK" && is_object($arrayResultServicioOnt['objServicio']))
                    {
                        //obtener los datos del ont
                        $arrayParDatosOnt = array(
                            "objServicio"    => $objServicio,
                            "objServicioOnt" => $arrayResultServicioOnt['objServicio'],
                            "strUsrCreacion" => "telcos",
                            "strIpCreacion"  => "127.0.0.1"
                        );
                        $arrayResultDatosOnt = $serviceTecnico->getDatosOntGponTN($arrayParDatosOnt);
                        if($arrayResultDatosOnt['status'] == "OK" && !empty($arrayResultDatosOnt['datos']))
                        {
                            $intIdOnt     = $arrayResultDatosOnt['datos']['intIdOnt'];
                            $strSerieOnt  = $arrayResultDatosOnt['datos']['strSerieOnt'];
                            $strMacOnt    = $arrayResultDatosOnt['datos']['strMacOnt'];
                            $strNombreOnt = $arrayResultDatosOnt['datos']['strNombreOnt'];
                            $strModeloOnt = $arrayResultDatosOnt['datos']['strModeloOnt'];
                            $strMarcaOnt  = $arrayResultDatosOnt['datos']['strMarcaOnt'];
                            $strEstadoServicioDatosSafeCity = $arrayResultDatosOnt['datos']['strEstado'];
                            $strNombreServicioSafecity      = $arrayResultDatosOnt['datos']['strNombreProducto'];
                            $strEsServicioRequeridoSafeCity = "S";
                        }
                    }
                }
                //verificar si es servicio requerido
                $arrayParametrosDet = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne('PRODUCTO_REQUERIDO_ACTIVACION',
                                                                     'TECNICO',
                                                                     '',
                                                                     '',
                                                                     $objServicio->getProductoId()->getId(),
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     $row['COD_EMPRESA']);
                if(isset($arrayParametrosDet["valor2"]) && !empty($arrayParametrosDet["valor2"]))
                {
                    $objServicioReq = $this->_em->getRepository('schemaBundle:InfoServicio')
                                            ->findOneBy(array("puntoId"    => $objServicio->getPuntoId()->getId(),
                                                              "productoId" => $arrayParametrosDet["valor2"],
                                                              "estado"     => "Activo"));
                    if( ($arrayParametrosDet["valor3"] == "ONT" && $strEsServicioRequeridoSafeCity == "S"
                         && !is_object($objServicioReq))
                        || ($arrayParametrosDet["valor3"] != "ONT" && !is_object($objServicioReq)) )
                    {
                        $strEsVerificarSerRequerido  = "S";
                        $strMensajeServicioRequerido = $arrayParametrosDet["observacion"];
                    }
                }
            }

            //Valida si debe mostrar datos tecnicos.
            $boolVisualizarDatosTecnicos = 'S';

            if( is_object($objProducto) && is_object($emGeneral) && isset($emGeneral) )
            {
                $objParametroCabVisualizaFormDatosTecnicos = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                            ->findOneBy( array( 'nombreParametro' => 'NO_VISUALIZAR_FORM_DATOS_TECNICOS',
                                                                'estado'          => 'Activo' ) );
                
                if (is_object($objParametroCabVisualizaFormDatosTecnicos))
                {
                    $arrayParamsDetNoDatosTecnicosForm = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->findBy( array( 'parametroId' => $objParametroCabVisualizaFormDatosTecnicos->getId(),
                                                                        'valor1' => $objProducto->getDescripcionProducto(),
                                                                        'estado'      => 'Activo' ) );
                                                                        
                    if (is_array($arrayParamsDetNoDatosTecnicosForm) && !empty($arrayParamsDetNoDatosTecnicosForm))
                    {                    
                        $boolVisualizarDatosTecnicos = 'N';
                    }                                                                    
                }
            }

            // SE VALIDA SI ES MIGRACION SDWAN
            $booleanEsSDWAN = false;
            $booleanEsMigracionSDWAN = false;
            $strServicioMigradoSDWAN = '';

            if($objServicio && $objServicio->getProductoId() && is_object($objServicio->getProductoId())
            && (strtoupper($objServicio->getProductoId()->getDescripcionProducto()) === 'INTERNET SDWAN'
                || strtoupper($objServicio->getProductoId()->getDescripcionProducto()) === 'L3MPLS SDWAN'))
            {
                $booleanEsSDWAN = true;

                $objAdmiCaracteristicaMigracionSDWAN = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array(
                    'descripcionCaracteristica'=>'Migración de Tecnología SDWAN',
                    'estado'=>'Activo'
                ));

                $objAdmiProdCaracMigracionSDWAN = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->findOneBy(array( "productoId"       => $objServicio->getProductoId()->getId(),
                    "caracteristicaId" => is_object($objAdmiCaracteristicaMigracionSDWAN)?
                    $objAdmiCaracteristicaMigracionSDWAN->getId():'',
                    "estado"           => "Activo"
                ));
            //SE VERIFICA SI EL SERVICIO CONTIENE PRODUCTO Y ESTE ES SECURITY NG FIREWALL

            $objInfoServicioProdCaractMigracionSDWAN= $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
            ->findOneBy(array('servicioId'   => $row['ID_SERVICIO'],
                'productoCaracterisiticaId'  => is_object($objAdmiProdCaracMigracionSDWAN)?
                $objAdmiProdCaracMigracionSDWAN->getId() : '',
                'estado'  => "Activo"
            ));

            if(is_object($objInfoServicioProdCaractMigracionSDWAN) && ($objInfoServicioProdCaractMigracionSDWAN->getValor() === 'S'))
            {
                $booleanEsMigracionSDWAN = true;
            }
        }
        
        if( isset($productoNombre) && !empty($productoNombre) && is_object($emGeneral) && isset($emGeneral) )
        {
            /* CONSULTA LOS SOPORTES POR MEDIO DEL SERVICIO_ID Y EMPRESAROL_ID SOLO CUANDO EL PRODUCTO ES EL PAQUETE HORAS SOPORTE */
            $strNombreProducto      = $productoNombre;
            $objParametroDetValProd = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne("VALIDA_PRODUCTO_PAQUETE_HORAS_SOPORTE", //nombre parametro cab
                            "SOPORTE", "", 
                            "VALORES QUE AYUDAN A IDENTIFICAR QUE PRODUCTO ES PARA LA MUESTRA DE OPCIONES EN LA VISTA", //descripcion det
                            "", "", "", "", "", 10
                        );
            
            if(($objParametroDetValProd))
            {
                $strValorProductoPaqHoras             = $objParametroDetValProd['valor1'];
                $strValorProductoPaqHorasRec          = $objParametroDetValProd['valor2'];
                if(($strNombreProducto == $strValorProductoPaqHoras)|| ($strNombreProducto == $strValorProductoPaqHorasRec))
                {
                    $strUuIdPaquete         = '';
                    $objProducto            = $this->_em->getRepository('schemaBundle:AdmiProducto')
                                                    ->findOneBy(array("descripcionProducto" => $strValorProductoPaqHoras));

                    $objServicio            = $this->_em->getRepository('schemaBundle:InfoServicio')
                                                    ->findOneBy(array("id"    => $row['ID_SERVICIO']));
                    if(is_object($objProducto))
                    {
                        $intIdProducto     = $objProducto->getId();
                        $intIdPunto        = $objServicio->getPuntoId()->getId();
                        $strLoginPunto     = $objServicio->getPuntoId()->getLogin();
                        $objPrimerServicio = $this->_em->getRepository('schemaBundle:InfoServicio')
                                                    ->findOneBy(array("puntoId"    => $intIdPunto,
                                                                    "productoId"   => $intIdProducto
                                                                ), array("feCreacion"     => 'ASC'));
                        $intPrimerServicioId        = $objPrimerServicio->getId();
                         // Para saber si es replica o no.
                        $objServicioReplica     = $this->_em->getRepository('schemaBundle:InfoServicioHistorial')
                                                        ->findOneBy(array("servicioId" => $row['ID_SERVICIO'],
                                                                        "accion"     => "replicaPaqueteHoras"));
                 
                        if($objServicioReplica)
                        {
                            $objInfoPaqSopServ        = $emSoporte->getRepository('schemaBundle:InfoPaqueteSoporteServ')
                                                        ->soporteServPorLogin(array("loginPuntoSoporte"  => $strLoginPunto)); 

                            $intPaqueteSoporteCabId   = $objInfoPaqSopServ[0]['paqueteSoporteCabId'];

                            $objInfoPaqueteSoporteCab = $emSoporte->getRepository('schemaBundle:InfoPaqueteSoporteCab')
                                        ->soporteCabPorCabId(array("idPaqueteSoporteCab"    => $intPaqueteSoporteCabId));
                            $intPrimerServicioId   = $objInfoPaqueteSoporteCab[0]['servicioId'];

                            $boolEsReplica            = true;
                        }
                        if($objPrimerServicio)       
                        {
                            $arrayTmpParametros     = array( 'servicioId' => $intPrimerServicioId,
                                                'personaEmpresaRolId'    => $row['ID_PERSONA_EMPRESA_ROL'] );
                            
                            $objResult    = $emSoporte->getRepository('schemaBundle:InfoPaqueteSoporteCab')
                                                    ->getUuIdPaqueteSoporteCabxServEmpre( $arrayTmpParametros ); 
    
                            if (is_array($objResult) && !empty($objResult))
                            {
                                $strUuIdPaquete = $objResult[0]['uuidPaqueteSoporteCab'];
                            }

                        }
                    }
                }
            }
        }


            

            //SE VERIFICA SI EL SERVICIO CONTIENE PRODUCTO Y ESTE ES SECURITY NG FIREWALL
            $strNGFNubePublica = '';
            if($objServicio && $objServicio->getProductoId() && is_object($objServicio->getProductoId())
            && $objServicio->getProductoId()->getDescripcionProducto() === 'SECURITY NG FIREWALL')
            {
                $objAdmiCaracteristicaNubePublica = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array(
                    'descripcionCaracteristica'=>'SEC FW NUBES PUBLICAS',
                    'estado'=>'Activo'
                ));

                $objAdmiCaracteristicaPlan = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array(
                    'descripcionCaracteristica'=>'SEC PLAN NG FIREWALL',
                    'estado'=>'Activo'
                ));

                $objAdmiCaracteristicaModeloEquipo = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array(
                    'descripcionCaracteristica'=>'SEC MODELO FIREWALL',
                    'estado'=>'Activo'
                ));

                $objAdmiCaracteristicaIpDns = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array(
                    'descripcionCaracteristica'=>'IP/FQDN NG FIREWALL',
                    'estado'=>'Activo'
                ));

                $objAdmiCaracteristicaAdministracion = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array(
                    'descripcionCaracteristica'=>'ADMINISTRACION NG FIREWALL',
                    'estado'=>'Activo'
                ));

                $objAdmiCaracteristicaPuertoAdministracionWeb = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array(
                    'descripcionCaracteristica'=>'PUERTO ADMINISTRACION WEB NG FIREWALL',
                    'estado'=>'Activo'
                ));


                $objAdmiCaracteristicaSerialLicencia = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array(
                    'descripcionCaracteristica' => 'SERIAL LICENCIA NG FIREWALL',
                    'estado'=>'Activo'
                ));



                $objAdmiProdCaracNubePublica = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->findOneBy(array( "productoId"       => $objServicio->getProductoId()->getId(),
                "caracteristicaId" => is_object($objAdmiCaracteristicaNubePublica)?
                $objAdmiCaracteristicaNubePublica->getId():'',
                "estado"           => "Activo"));

                $objAdmiProdCaracPlan = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->findOneBy(array( "productoId"       => $objServicio->getProductoId()->getId(),
                "caracteristicaId" => is_object($objAdmiCaracteristicaPlan)?
                $objAdmiCaracteristicaPlan->getId():'',
                "estado"           => "Activo"));

                $objAdmiProdCaracModeloEquipo  = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->findOneBy(array( "productoId"       => $objServicio->getProductoId()->getId(),
                "caracteristicaId" => is_object($objAdmiCaracteristicaModeloEquipo)?
                $objAdmiCaracteristicaModeloEquipo->getId():'',
                "estado"           => "Activo"));

                $objAdmiProdCaracIpDns  = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->findOneBy(array( "productoId"       => $objServicio->getProductoId()->getId(),
                "caracteristicaId" => is_object($objAdmiCaracteristicaIpDns)?
                $objAdmiCaracteristicaIpDns->getId():'',
                "estado"           => "Activo"));

                $objAdmiProdCaracAdministracion  = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->findOneBy(array( "productoId"       => $objServicio->getProductoId()->getId(),
                "caracteristicaId" => is_object($objAdmiCaracteristicaAdministracion)?
                $objAdmiCaracteristicaAdministracion->getId():'',
                "estado"           => "Activo"));

                $objAdmiProdCaracPuertoAdministracionWeb   = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->findOneBy(array( "productoId"       => $objServicio->getProductoId()->getId(),
                "caracteristicaId" => is_object($objAdmiCaracteristicaPuertoAdministracionWeb)?
                $objAdmiCaracteristicaPuertoAdministracionWeb->getId():'',
                "estado"           => "Activo"));

                $objAdmiProdCaracLicencia   = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->findOneBy(array( "productoId"       => $objServicio->getProductoId()->getId(),
                "caracteristicaId" => is_object($objAdmiCaracteristicaSerialLicencia)?
                $objAdmiCaracteristicaSerialLicencia->getId():'',
                "estado"           => "Activo"));




                $objInfoServicioProdCaractNubePublica = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                ->findOneBy(array('servicioId'   => $row['ID_SERVICIO'],
                'productoCaracterisiticaId'  => is_object($objAdmiProdCaracNubePublica)?
                $objAdmiProdCaracNubePublica->getId() : '',
                'estado'  => "Activo"
            ));

                $objInfoServicioProdCaractPlan = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                ->findOneBy(array('servicioId'   => $row['ID_SERVICIO'],
                'productoCaracterisiticaId'  => is_object($objAdmiProdCaracPlan)?
                $objAdmiProdCaracPlan->getId() : '',
                'estado'  => "Activo"
                ));

                $objInfoServicioProdCaractModeloEquipo = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                ->findOneBy(array('servicioId'   => $row['ID_SERVICIO'],
                'productoCaracterisiticaId'  => is_object($objAdmiProdCaracModeloEquipo)?
                $objAdmiProdCaracModeloEquipo->getId() : '',
                'estado'  => "Activo"
                ));


                $objInfoServicioIpDns= $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                ->findOneBy(array('servicioId'   => $row['ID_SERVICIO'],
                'productoCaracterisiticaId'  => is_object($objAdmiProdCaracIpDns)?
                $objAdmiProdCaracIpDns->getId() : '',
                'estado'  => "Activo"
                ));

                $objInfoServicioAdministracion= $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                ->findOneBy(array('servicioId'   => $row['ID_SERVICIO'],
                'productoCaracterisiticaId'  => is_object($objAdmiProdCaracAdministracion)?
                $objAdmiProdCaracAdministracion->getId() : '',
                'estado'  => "Activo"
                ));

                $objInfoServicioPuertoAdministracionWeb = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                ->findOneBy(array('servicioId'   => $row['ID_SERVICIO'],
                'productoCaracterisiticaId'  => is_object($objAdmiProdCaracPuertoAdministracionWeb)?
                $objAdmiProdCaracPuertoAdministracionWeb->getId() : '',
                'estado'  => "Activo"
                ));

                $objInfoServicioLicencia= $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                ->findOneBy(array('servicioId'   => $row['ID_SERVICIO'],
                'productoCaracterisiticaId'  => is_object($objAdmiProdCaracLicencia)?
                $objAdmiProdCaracLicencia->getId() : '',
                'estado'  => "Activo"
                ));


                $strNGFNubePublica = is_object($objInfoServicioProdCaractNubePublica) ? $objInfoServicioProdCaractNubePublica->getValor() : '';
                $strNGFPlan = is_object($objInfoServicioProdCaractPlan) ? $objInfoServicioProdCaractPlan->getValor() : '';
                $strNGFModeloEquipo = is_object($objInfoServicioProdCaractModeloEquipo) ? $objInfoServicioProdCaractModeloEquipo->getValor() : '';
                $strNGFIpDns= is_object($objInfoServicioIpDns) ? $objInfoServicioIpDns->getValor() : '';
                $strNGFAdministracion = is_object($objInfoServicioAdministracion) ? $objInfoServicioAdministracion->getValor() : '';
                $strNGFPuertoAdministracionWeb  = is_object($objInfoServicioPuertoAdministracionWeb)
                ? $objInfoServicioPuertoAdministracionWeb->getValor() : '';
                $strNGFLicencia  = is_object($objInfoServicioLicencia) ? $objInfoServicioLicencia->getValor() : '';
                $strNGFNombreModeloElemento = '';




                $objInfoSerTecnicoNGF = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')
                ->findOneBy( array( 'servicioId'        => $objServicio->getId() ) );


                if($objInfoSerTecnicoNGF->getElementoId())
                {
                    $objInfoElementoNGF = $this->_em->getRepository('schemaBundle:InfoElemento')
                    ->findOneBy( array( 'id' => $objInfoSerTecnicoNGF->getElementoId()));

                    $strNGFNombreModeloElemento = $objInfoElementoNGF->getModeloElementoId()->getNombreModeloElemento();


                    $objDetalleElementoMGF = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                    ->findBy( array( 'elementoId' => $objInfoSerTecnicoNGF->getElementoId(),
                                        'estado'=>'Activo'));
                }
                else if($objInfoSerTecnicoNGF->getElementoClienteId())
                {
                    $objInfoElementoNGF = $this->_em->getRepository('schemaBundle:InfoElemento')
                    ->findOneBy( array( 'id' => $objInfoSerTecnicoNGF->getElementoClienteId()));


                    $strNGFNombreModeloElemento = $objInfoElementoNGF->getModeloElementoId()->getNombreModeloElemento();

                    $objDetalleElementoMGF = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                    ->findBy( array( 'elementoId' => $objInfoSerTecnicoNGF->getElementoClienteId(),
                                        'estado'=>'Activo'));
                }



                $strNGFSerie = is_object($objInfoElementoNGF) ? $objInfoElementoNGF->getSerieFisica() : '';

                if(isset($objDetalleElementoMGF) && count($objDetalleElementoMGF))
                {
                    foreach($objDetalleElementoMGF as $elemento)
                    {
                        if(isset($elemento) && count($elemento))
                        {

                            switch($elemento->getDetalleNombre())
                            {
                                case 'MAC':
                                    $strNGFMAC = $elemento->getDetalleValor() ?: '';
                                    break;

                                case 'PROPIEDAD':
                                    $strNGFPropiedad = $elemento->getDetalleValor()  ?: '';
                                    break;

                                default:
                                    break;
                            }

                        }

                    }
                }




            }

            $arr_encontrados[] = array(
                                        'booleanEsSDWAN'              => $booleanEsSDWAN,
                                        'booleanEsMigracionSDWAN'     => $booleanEsMigracionSDWAN,
                                        'NGFNubePublica'              => $strNGFNubePublica,
                                        'NGFPlan'                     => $strNGFPlan,
                                        'NGFModeloEquipo'             => $strNGFModeloEquipo,
                                        'NGFSerieEquipo'              => $strNGFSerie,
                                        'NGFMACEquipo'                => $strNGFMAC,
                                        'NGFPropiedadEquipo'          => $strNGFPropiedad,
                                        'NGFIpDns'                    => $strNGFIpDns,
                                        'NGFAdministracion'           => $strNGFAdministracion,
                                        'NGFPuertoAdministracionWeb'  => $strNGFPuertoAdministracionWeb,
                                        'NGFlicencia'                 => $strNGFLicencia,
                                        'NGFNombreModeloElemento'     => $strNGFNombreModeloElemento,
                                        'servicioInternetMDInCorte'   => $strServicioInternetInCorte,
                                        'productoPermitidoRegistroEle'=> $strPermitirRegistroElemento,
                                        'tipoElemento'                => $strTipoElemento,
                                        'strTipoElementoABuscar'      => $strTipoElementoABuscar,
                                        'idServicio'                  => $intIdServico,
                                        'strExisteHistorial'          => $strExisteHistorial,
                                        'strTipoRed'                  => $strTipoRed,
                                        'booleanTipoRedGpon'          => $booleanTipoRedGpon,
                                        'estadoDatosSafecity'         => $strEstadoServicioDatosSafeCity,
                                        'nombreServicioSafecity'      => $strNombreServicioSafecity,
                                        'esServicioCamaraSafeCity'    => $strEsServicioCamaraSafeCity,
                                        'esServicioWifiSafeCity'      => $strEsServicioWifiSafeCity,
                                        'esServicioCamaraVpnSafeCity' => $strEsServicioCamaraVpnSafeCity,
                                        'esServicioRequeridoSafeCity' => $strEsServicioRequeridoSafeCity,
                                        'requiereSerActivarSafecity'  => $strRequiereSerActivarSafecity,
                                        'nombreSerRequiereSafecity'   => $strNombreSerRequiereSafecity,
                                        'strEsVerificarSerRequerido'  => $strEsVerificarSerRequerido,
                                        'strMensajeServicioRequerido' => $strMensajeServicioRequerido,
                                        'idOnt'                       => $intIdOnt,
                                        'serieOnt'                    => $strSerieOnt,
                                        'macOnt'                      => $strMacOnt,
                                        'nombreOnt'                   => $strNombreOnt,
                                        'marcaOnt'                    => $strMarcaOnt,
                                        'modeloOnt'                   => $strModeloOnt,
                                        'strExisteSwPoeGpon'          => $strExisteSwPoeGpon,
                                        'strExisteCamaraPtzGpon'      => $strExisteCamaraPtzGpon,
                                        'strActivarSwPoeGpon'         => $strActivarSwPoeGpon,
                                        'strMigrarSwPoe'              => $strMigrarSwPoe,
                                        'idServicioSwPoe'             => $intIdServicioSwPoe,
                                        'idInterfaceOnt'              => $intIdInterfaceOnt,
                                        'idInterfaceOntSwPoe'         => $intIdInterfaceOntSwPoe,
                                        'idSwPoeGpon'                 => $intIdSwPoeGpon,
                                        'nombreSwPoeGpon'             => $strNombreSwPoeGpon,
                                        'serieSwPoeGpon'              => $strSerieSwPoeGpon,
                                        'macSwPoeGpon'                => $strMacSwPoeGpon,
                                        'marcaSwPoeGpon'              => $strMarcaSwPoeGpon,
                                        'modeloSwPoeGpon'             => $strModeloSwPoeGpon,
                                        'nombreElementoCliente'       => $strMombreElementoCliente,
                                        'modeloElementoCliente'       => $strModeloElementoCliente,
                                        'serieElementoCliente'        => $strSerieElementoCliente,
                                        'macElementoCliente'          => $strMacElementoCliente,
                                        'servicioEnSwPoe'             => $strServicioEnSwPoe,
                                        'idServicioEleReqGpon'        => $intIdServicioEleReqGpon,
                                        'idElementoReqGpon'           => $intIdElementoReqGpon,
                                        'idInterfaceOntEleReq'        => $intIdInterfaceOntEleReq,
                                        'nombreElementoReqGpon'       => $strNombreElementoReqGpon,
                                        'serieElementoReqGpon'        => $strSerieElementoReqGpon,
                                        'macElementoReqGpon'          => $strMacElementoReqGpon,
                                        'marcaElementoReqGpon'        => $strMarcaElementoReqGpon,
                                        'modeloElementoReqGpon'       => $strModeloElementoReqGpon,
                                        'cooperativa'                 => $strCaractCooperativa,
                                        'tipoTransporte'              => $strCaractTipoTransporte,
                                        'placa'                       => $strCaractPlaca,
                                        'tipoEnlace'                  => $row['TIPO_ENLACE'],
                                        'tieneIpFijaActiva'           => $row['TIENE_IP_FIJA'],
                                        'macIpFija'                   => $row['MAC_IP_FIJA'],
                                        'idServicioRefIpFija'         => intval($row['REF_SERVICIO']),
                                        'idPersonaEmpresaRol'         => intval($row['ID_PERSONA_EMPRESA_ROL']),
                                        'nombreCompleto'              => $row['NOMBRE_COMPLETO'],
                                        'puntoCoberturaId'            => $row['PUNTO_COBERTURA_ID'],
                                        'puntoLatitud'                => $strPuntoLatitud,
                                        'puntoLongitud'               => $strPuntoLongitud,
                                        'puntoCanton'                 => $strPuntoCanton,
                                        'puntoDireccion'              => $strPuntoDireccion,
                                        'login'                       => $row['LOGIN'],
                                        'loginAux'                    => $row['LOGIN_AUX'],
                                        'esSdwan'                     => $strEsSdwan,
                                        'esNodoWifi'                  => $strEsNodoWifi,
                                        'permiteRutaEstaticaBuckup'   => $strPermiteRutasEstaticas,
                                        'elementoPadre'               => $elementoPadre,
                                        'idElementoPadre'             => $intIdElementoPadre,
                                        'anillo'                      => $anillo,
                                        'planId'                      => intval($row['ID_PLAN']),
                                        'nombrePlan'                  => $row['NOMBRE_PLAN'],
                                        'strPermiteActivarServicio'   => $strPermiteActivarServicio,
                                        'interfaceElementoId'         => intval($row['ID_INTERFACE_ELEMENTO']),
                                        'interfaceElementoNombre'     => $row['NOMBRE_INTERFACE_ELEMENTO'],
                                        'elementoId'                  => intval($row['ID_ELEMENTO']),
                                        'elementoNombre'              => $row['NOMBRE_ELEMENTO'],
                                        'modeloElemento'              => $nombreModeloElemento,
                                        'marcaElemento'               => $row['NOMBRE_MARCA_ELEMENTO'],
                                        'ipElemento'                  => $row['IP'],
                                        'popId'                       => 'na',
                                        'popNombre'                   => 'na',
                                        'ultimaMilla'                 => $row['NOMBRE_TIPO_MEDIO'],
                                        'codUltimaMilla'              => $row['CODIGO_TIPO_MEDIO'],
                                        'vlan'                        => $strVlan,
                                        'vrf'                         => $strVrf,
                                        'vlanAdmin'                   => $strVlanAdmin,
                                        'vrfAdmin'                    => $strVrfAdmin,
                                        'asPrivado'                   => $strAsPrivado,
                                        'protocolo'                   => $row['PROTOCOLO'],
                                        'defaultGateway'              => $row['DEFAULT_GATEWAY'],
                                        'productoId'                  => $productoId,
                                        'descripcionProducto'         => $productoTecnico,
                                        'esConcentrador'              => $strEsConcentrador,
                                        'nombreProducto'              => $productoNombre,
                                        'productoEsEnlace'            => $productoEsEnlace,
                                        'numeroOrdenTrabajo'          => $row['NUMERO_ORDEN_TRABAJO'],
                                        'perfilDslam'                 => $row['PERFIL'],
                                        'velocidadISB'                => $strValorVelocidadISB,
                                        'esISB'                       => $strEsISB,
                                        'capacidadUno'                => $intCapacidadUno,
                                        'capacidadDos'                => $intCapacidadDos,
                                        'capacidadTres'               => $capacidad3,
                                        'capacidadCuatro'             => $capacidad4,
                                        'ipv4Publico'                 => $strIpv4Publico,
                                        'migrado'                     => $row['MIGRADO'],
                                        'ipReservada'                 => $row['IP_RESERVADA'],
                                        'ipServicio'                  => $row['IP_SERVICIO'],
                                        'subredServicio'              => $row['SUBRED_SERVICIO'],
                                        'gwSubredServicio'            => $row['GW_SUBRED_SERVICIO'],
                                        'mascaraSubredServicio'       => $row['MASCARA_SUBRED_SERVICIO'],
                                        'tipoSubred'                  => $row['TIPO_SUBRED'],
                                        'rdId'                        => $row['RD_ID'],
                                        'mac'                         => $mac,
                                        'perfilDslamId'               => 'na',
                                        'capacidadUnoId'              => 'na',
                                        'capacidadDosId'              => 'na',
                                        'macId'                       => 'na',
                                        'tipoOrden'                   => $row['TIPO_ORDEN'],
                                        'tipoOrdenCompleto'           => $row['TIPO_ORDEN_COMPLETO'],
                                        'cantidad'                    => $row['CANTIDAD'],
                                        'cantidadReal'                => $row['CANTIDAD_REAL'],
                                        'tieneSolicitudCambioCpe'     => $row['SOLICITUD_CAMBIO_ELEMENTO'],
                                        'tieneSolicitudMigracion'     => $row['SOLICITUD_MIGRACION'],
                                        'strEsAgregarEquipoMasivo'    => $strEsAgregarEquipoMasivo,
                                        'strEsCambioEquiSoporteMasivo'=> $strEsCambioEquiSoporteMasivo,
                                        'tieneSolicitudAgregarEquipo' => $intSolicitudAgregarEquipo,
                                        'tieneSolicitudPlanificacion' => $row['SOLICITUD_PLANIFICACION'],
                                        'idSolicitudMigracionExtender'=> $row['SOLICITUD_MIGRACION_EXTENDER'],
                                        'strEsCambioOntPorSolAgregarEquipo' => $strEsCambioOntPorSolAgregarEquipo,
                                        'strTipoOntNuevoPorSolAgregarEquipo'=> $strTipoOntNuevoPorSolAgregarEquipo,
                                        'strEsSmartWifi'              => $strEsSmartWifi,
                                        'strCambioAWifiDualBand'      => $strCambioAWifiDualBand,
                                        'strAgregaExtenderDualBand'   => $strAgregaExtenderDualBand,
                                        'strPermiteReintentoMcAfee'   => $strPermiteReintentoMcAfee,
                                        'strMcAfeeActivo'             => $strMcAfeeActivo,
                                        'strNuevoAntivirus'           => $strNuevoAntivirus,
                                        'strNuevoAntivirusActivo'     => $strNuevoAntivirusActivo,
                                        'strReintentoPromoBw'         => $strReintentoPromoBw,
                                        'strReintentoNuevoAntivirus'  => $strReintentoNuevoAntivirus,
                                        'strPermiteCancelLogica'      => $strPermiteCancelLogica,
                                        'strActivacionOrigen'         => $strActivacionOrigen,
                                        'botones'                     => $row['BOTONES'],
                                        'idEmpresa'                   => $row['COD_EMPRESA'],
                                        'prefijoEmpresa'              => $row['PREFIJO'],
                                        'estado'                      => $row['ESTADO'],
                                        'estadoSolicitud'             => $row['ESTADO_SOLICITUD_PLANIFICACION'],
                                        'estadoSolMigracionVlan'      => $arrayTipoSolicitudVlan["estado"],
                                        'clienteMigracionVlan'        => $strClienteMigracionVlan,
                                        'estadoSolMigracionTunel'     => $row['ESTADO_SOLICITUD_MIGRA_TUNEL'],
                                        'estadoSolMigraAnillo'        => isset($row['ESTADO_SOLICITUD_MIGRA_ANI'])?
                                                                        $row['ESTADO_SOLICITUD_MIGRA_ANI']:null,
                                        'estadoSolCambioUm'           => $row['ESTADO_SOLICITUD_CAMBIO_UM'],
                                        'requiereMac'                 => $row['REQUIERE_MAC'],
                                        'idSolicitudLineaPom'         => $row['SOLICITUD_CAMBIO_LINEA_PON'],
                                        'tieneEncuesta'               => $row['TIENE_ENCUESTA'],
                                        'tieneActa'                   => $row['TIENE_ACTA'],
                                        'flujo'                       => $row['FLUJO_TECNICO'],
                                        'informacionRadio'            => $strInformacionRadio,
                                        'descripcionPresentaFactura'  => $row['DESCRIPCION_PRESENTA_FACTURA'],
                                        'ldap'                        => $ldap,
                                        'cacti'                       => isset($row['CACTI'])?$row['CACTI']:null,
                                        'usaUltimaMillaExistente'     => $usaUltimaMillaExistente,
                                        'esPseudoPe'                  => $boolEsPseudoPe?'S':'N',
                                        'seMigraAPseudoPe'            => $strMigrarAPseudoPe,
                                        'poseeProtocoloBGP'           => $strProtocoloBgp,
                                        'tieneSolCambioIp'            => $strTieneSolCambioIp,
                                        'subredVsatBackbone'          => $strSubredVsatBackbone,
                                        'subredVsatCliente'           => $strSubredVsatCliente,
                                        'nombreSolucion'              => $strSolucion,
                                        'perteneceSolucion'           => $strEsSolucion,
                                        'esPreferenteSolucion'        => $strEsServicioPreferenteSolucion,
                                        'tieneAlquilerServidores'     => $strSolucionTieneAlquilerServ,
                                        'grupo'                       => is_object($objProducto)?$objProducto->getGrupo():'',
                                        'subgrupo'                    => is_object($objProducto)?$objProducto->getSubGrupo():'',
                                        'nombreCanton'                => $arrayParametros['nombreCanton'],
                                        'vlanLan'                     => $row['VLAN_LAN'],
                                        'vlanWan'                     => $row['VLAN_WAN'],
                                        'firewallDC'                  => $row['FIREWALL_DC'],
                                        'categoriaTelefonia'          => $strCategoriaTelefonia,
                                        'arrayElementosActivos'       => $arrayParametrosElementosActivos,
                                        'servicioHeredadoFact'        => isset($row['SERVICIO_HEREDADO'])?$row['SERVICIO_HEREDADO']:null,
                                        'seActivaServicioSolucion'    => $strSeActivaServicioSolucion,
                                        'registroEquipo'              => $strRegistroEquipo,
                                        'virtualConnect'              => $intVirtualConnect,
                                        'iploopback'                  => $strIpLoopback,
                                        'peExtremoL2'                 => $strNombrePeExtremoL2,
                                        'strTrasladarExtenderDB'      => $strTrasladarExtenderDualBand,
                                        'strSincronizarExtenderDB'    => $strSincronizarExtenderDualBand,
                                        'strRucTg'                    => $strRucTg,
                                        'strReenvioCredencialTg'      => $strReenvioCredencialTelcograph,
                                        'strReintentoCreacionTg'      => $strReintentoCreacionTelcograph,
                                        'strCrearMonitoreoTG'         => $strCrearMonitoreoTG,
                                        'strMostrarInfoTelcoGraph'    => $strMostrarInfoTelcoGraph,
                                        'configuracionPeHsrp'         => $strConfiguracionPeHsrp,
                                        'strCambioPassTg'             => $strCambioPassTelcograph,
                                        'strTieneEquipoNuevo'         => $strTieneEquipoNuevo,
                                        'strTieneSolCambEquiSoporte'  => $strTieneSolCambioEquipoSoporte,
                                        'strEstadoSolCambEquiSoporte' => $strEstadoSolCambioEquipoSoporte,
                                        'intIdSolCambioEquipoSoporte' => $intIdSolCambioEquipoSoporte,
                                        'intIdElementoHw'             => $intIdElementoHw,
                                        'strNombreElementoHw'         => $strNombreElementoHw,
                                        'strSerieEquipoHw'            => $strSerieEquipoHw,
                                        'strMacEquipoHw'              => $strMacEquipoHw,
                                        'strModeloEquipoHw'           => $strModeloEquipoHw,
                                        'strModeloCpeOnt'             => $strModeloCpeOnt,
                                        'strCorreoMcAfee'             => $strCorreoMcAfee,
                                        'intProductoMcAfeeId'         => $intProductoMcAfeeId,
                                        'intIdCaractCorreoMcAfee'     => $intIdCaractCorreoMcAfee,
                                        'tipoEsquema'                 => (method_exists($objPlanificarService, 'getTipoEsquema') &&
                                                                        is_object($objServicio)) ?
                                                                        $objPlanificarService->getTipoEsquema($objServicio) : null,
                                        'strCambioPassTg'             => $strCambioPassTelcograph,
                                        'seActivaProducto'            => $boolSeActiva?'S':'N',
                                        'tieneProgresoActa'           => $strTieneActa,
                                        'idSolicitud'                 => $this->getSolicitudId($row['ID_SERVICIO']),
                                        'idIntWifiSim'                => (method_exists($objPlanificarService, 'getIdWifiInstSim') &&
                                                                                is_object($objServicio)) ?
                                                                                $objPlanificarService->getIdWifiInstSim($objServicio->getId()) : null,
                                        'idIntCouSim'                       => (method_exists($objPlanificarService, 'getIdCouInstSim') &&
                                                                                is_object($objServicio)) ?
                                                                                $objPlanificarService->getIdCouInstSim($objServicio->getId()) : null,
                                        'tieneProgresoRuta'                 => $strTieneFibra,
                                        'tieneProgresoMateriales'           => $strTieneMateriales,
                                        'comunicacionId'                    => $arrayInfoTarea['comunicacionId'],
                                        'personaId'                         => $arrayInfoTarea['personaId'],
                                        'servicioId'                        => $arrayInfoTarea['servicioId'],
                                        'detalleId'                         => $arrayInfoTarea['detalleId'],
                                        'tareaId'                           => $arrayInfoTarea['tareaId'],
                                        'requiereFibraTarea'                => $arrayInfoTarea['requiereFibra'],
                                        'loginSesion'                       => $strLoginSesion,
                                        'numeroBobinaInstal'                => $intNumBobinaIns,
                                        'productoPermitidoReversarOT'       => $strProductoPermitidoHerramientaReverso,
                                        'estadoNumeroBobinaInstal'          => $strEstadoNumBobinaIns,
                                        'cantidadFibraInstMd'               => $intCantidadInstMd,
                                        'esNetlifeCloud'                    => $strNetlifeCloud,
                                        'strFlagActivSim'                   => $strFlagActivSim,
                                        'strPropietarioCpeCliente'          => $strPropietarioCpeCliente,
                                        'strPropietarioRadioCliente'        => $strPropietarioRadioCliente,
                                        'strSerieCpeCliente'                => $strSerieCpeCliente,
                                        'strSerieTransceiverCliente'        => $strSerieTransceiverCliente,
                                        'strSerieRadioCliente'              => $strSerieRadioCliente,
                                        'strSerieOntCliente'                => $strSerieOntCliente,
                                        'strSerieWifiCliente'               => $strSerieWifiCliente,
                                        'strJsonDipositivosNodo'            => json_encode($arrayDipositivosNodo),
                                        'strJsonTecnico'                    => json_encode($arrayTecnico),
                                        'tipoMedioId'                       => $arrayDataUltimaMillaTecnico["tipoMedioId"],
                                        'boolValidaDptoActivar'             => 'S',
                                        'boolPermiteVisualizarBoton'        => 'S',
                                        'boolVisualizarBotonCorte'          => 'S',
                                        'boolVisualizarBotonCancelar'       => 'S',
                                        'boolVisualizarBotonReactivacion'   => 'S',
                                        'boolVisualizarPantallaFibra'       => 'N',
                                        'boolVisualizarBotonCambioVelocidad'=> 'S',
                                        'strTipoPlan'                       => $strTipoPlan,
                                        'strEsIpWan'                        => $strEsIpWan,
                                        'boolSecureCpe'                     => $boolSecureCpe,
                                        'intNumLicencia'                    => $intNumLicencia,
                                        'strFechaCaducidad'                 => $strFechaCaducidad,
                                        'intNumDiasFin'                     => $intNumDiasFin,
                                        'boolVisualizaBotonNg'              => $boolVisualizaBotonNg,
                                        'boolVisualizarDatosTecnicos'       => $boolVisualizarDatosTecnicos,
                                        'activoKonibit'                     => $strActivoKonibit,
                                        'intIdServicioInternet'             => $intIdServicioInternet,
                                        'strServicioInternetInAudit'        => $strServicioInternetInAudit,
                                        'arrayPersonalizacionOpcionesGridTecnico' => $arrayPersonalizacionOpcionesGridTecnico,
                                        'boolServicioInternetActivo'        => $arrayParametros["boolServicioInternetActivo"],
                                        'strCorreoECDF'                     => $strCorreoECDF,
                                        'boolResumenCompra'                 =>  $boolResumenCompra,
                                        'strTienePassword'                  => $strTienePassword,
                                        'strClearChannelPuntoAPuntoTransporte' => $strClearChannelPuntoAPuntoTransporte,
                                        'boolIsClearChannel'                => $boolIsClearChannel,
                                        'strTipoModeloBackUp'               => $strTipoModeloBackUp,
                                        'aprovisioClearChannel'             => $strAprovisioClearChannel,
                                    
                                         'strUuIdPaquete'                   => $strUuIdPaquete,	
                                         'strValorProductoPaqHoras'         => $strValorProductoPaqHoras,	
                                         'strValorProductoPaqHorasRec'      => $strValorProductoPaqHorasRec,
                                         'boolEsReplica'                    => $boolEsReplica,
                                        'boolCambioPlanCP'                   =>  $boolCambioPlanCP
                                    );

            /*Validamos que el Entity Manager haya sido recibido.*/
            if (is_object($emGeneral) && isset($emGeneral))
            {
                /*Obtenemos el array del parámetro INSTALACIÓN SIMULTANEA.*/
                $objParamsDet = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                    ->get('CARACTERISTICAS_SERVICIOS_SIMULTANEOS',
                        'TECNICO',
                        'INSTALACION_SIMULTANEA',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        10);

                /*Si la operación anterior haya traido data.*/
                if (is_array($objParamsDet) && !empty($objParamsDet) && method_exists($objProducto, 'getDescripcionProducto'))
                {
                    /*Convertimos el contenido de VALOR1 a un objeto asociativo.*/
                    $objCaracteristicasServiciosSimultaneos = json_decode($objParamsDet[0]['valor1'], true);

                    $arrayParams['strNeedle'] = $objProducto->getDescripcionProducto();
                    $arrayParams['strKey'] = 'DESCRIPCION_PRODUCTO';
                    $arrayParams['arrayToSearch'] = $objCaracteristicasServiciosSimultaneos;

                    /*Realizamos uns búsqueda del producto obtenido en el objeto de características simultaneo.*/
                    $arrayCaracteristicasServicioSimultaneo = $serviceTecnico->searchByKeyInArray($arrayParams);

                    /*Validamos que el producto este dentro del arreglo de parámetros.*/
                    if (isset($arrayCaracteristicasServicioSimultaneo) && !is_null($arrayCaracteristicasServicioSimultaneo))
                    {
                        /*Le asignamos una variable para saber si requiere del botón de registro.*/
                        $arr_encontrados[$intIndex]['boolRequiereRegistro'] = $arrayCaracteristicasServicioSimultaneo['REQUIERE_REGISTRO'];
                        $arr_encontrados[$intIndex]['boolTieneFlujo'] = $arrayCaracteristicasServicioSimultaneo['TIENE_FLUJO'];
                        $arr_encontrados[$intIndex]['arrayCaractAdicionales'] =
                            $arrayCaracteristicasServicioSimultaneo['CARACTERISTICAS_ADICIONALES'];
                        $arr_encontrados[$intIndex]['boolValidaNaf'] = $arrayCaracteristicasServicioSimultaneo['VALIDA_NAF'];
                    }
                }
                
                /*Obtenemos el array de caracteristicas adicionales del producto.*/
                $objParamsCaractAdicionales = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                    ->get('CARACTERISTICAS_SERVICIO_CONFIRMACION',
                        'TECNICO',
                        'SERVICIO_CONFIRMACION',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        10);
                
                /*Si la operación anterior haya traido data.*/
                if (is_array($objParamsCaractAdicionales) && !empty($objParamsCaractAdicionales) && 
                    method_exists($objProducto, 'getDescripcionProducto'))
                {
                    /*Convertimos el contenido de VALOR1 a un objeto asociativo.*/
                    $objCaracteristicasServiciosAdicionales = json_decode($objParamsCaractAdicionales[0]['valor1'], true);

                    $arrayParamsAdic['strNeedle']       = $objProducto->getDescripcionProducto();
                    $arrayParamsAdic['strKey']          = 'DESCRIPCION_PRODUCTO';
                    $arrayParamsAdic['arrayToSearch']   = $objCaracteristicasServiciosAdicionales;

                    /*Realizamos uns búsqueda del producto obtenido en el objeto de características adicionales.*/
                    $arrayCaracteristicasServicioAdicionales = $serviceTecnico->searchByKeyInArray($arrayParamsAdic);
                
                    /*Validamos que el producto este dentro del arreglo de parámetros.*/
                    if (isset($arrayCaracteristicasServicioAdicionales) && !is_null($arrayCaracteristicasServicioAdicionales))
                    {
                        $arr_encontrados[$intIndex]['arrayCaractAdicionalesServicios'] =
                            $arrayCaracteristicasServicioAdicionales['CARACTERISTICAS_ADICIONALES'];
                    }
                }
                
                /* Activacion para servicios por departamento */
                $arrayDptoPermiteActivacion = null;
                $objParametroCabDeptUsers = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                        ->findOneBy( array( 'nombreParametro' => 'CONFIG_PRODUCTO_DIRECT_LINK_MPLS',
                                                            'estado'          => 'Activo' ) );
                
                if (is_object($objParametroCabDeptUsers))
                {
                    $arrayParDeptUsers = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->findBy( array( 'parametroId' => $objParametroCabDeptUsers->getId(),
                                                                'valor1'      => $productoId,
                                                                'valor2'      => 'OPCION_ACTIVAR_POR_DEPARTAMENTOS',
                                                                'estado'      => 'Activo' ) );
                    
                    if (is_array($arrayParDeptUsers) && !empty($arrayParDeptUsers))
                    {
                        $arrayDptoPermiteActivacion = explode(",",$arrayParDeptUsers[0]->getValor3());
                    }    
                }
                
                $strIdDepartamento     = $arrayParametros['strIdDepartamento'];
                
                $objDepartamento = $emGeneral->getRepository('schemaBundle:AdmiDepartamento')
                                                ->find($strIdDepartamento);
                if($objDepartamento)
                {
                    $strNombreDepartamento = $objDepartamento->getNombreDepartamento();
                }
                
                if (!empty($arrayDptoPermiteActivacion))
                {
                    if(in_array($strNombreDepartamento, $arrayDptoPermiteActivacion))
                    {
                        $boolValidaDptoActivar = 'S';
                    }
                    else
                    {
                        $boolValidaDptoActivar = 'N';
                    }
                    
                }
                else
                {
                    $boolValidaDptoActivar = 'S';
                }
                $arr_encontrados[$intIndex]['boolValidaDptoActivar'] = $boolValidaDptoActivar; 
                
                //Consultamos los productos que no debeten tener activo el boton de corte 
                $boolVisualizarBotonCorte = 'S';
                $objParametroCabVisualizaBoton = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                        ->findOneBy( array( 'nombreParametro' => 'NO_VISUALIZAR_BOTON_DE_CORTE',
                                                            'estado'          => 'Activo' ) );
                
                if (is_object($objParametroCabVisualizaBoton))
                {
                    $arrayParDetVisualizaBoton = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->findBy( array( 'parametroId' => $objParametroCabVisualizaBoton->getId(),
                                                                    'estado'      => 'Activo' ) );
                    
                    if (is_array($arrayParDetVisualizaBoton) && !empty($arrayParDetVisualizaBoton))
                    {
                        $arrayVisualizaBoton = explode(",",$arrayParDetVisualizaBoton[0]->getValor1());
                    }    
                }
                                    
            
                if($row['PREFIJO'] == 'TN' && in_array($objProducto->getDescripcionProducto(), $arrayVisualizaBoton))    
                {
                    $boolVisualizarBotonCorte = 'N';
                }
            
                
                $arr_encontrados[$intIndex]['boolVisualizarBotonCorte'] = $boolVisualizarBotonCorte;
                
                //Consultamos los productos que no debeten tener activo el boton de cancelar 
                $boolVisualizarBotonCancelar = 'S';
                $objParametroCabVisualizaBotonCancelar = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                        ->findOneBy( array( 'nombreParametro' => 'NO_VISUALIZAR_BOTON_DE_CANCELAR',
                                                            'estado'          => 'Activo' ) );
                
                if (is_object($objParametroCabVisualizaBotonCancelar))
                {
                    $arrayParDetVisualizaBotonCancelar = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->findBy( array( 'parametroId' => $objParametroCabVisualizaBotonCancelar->getId(),
                                                                    'estado'      => 'Activo' ) );
                    
                    if (is_array($arrayParDetVisualizaBotonCancelar) && !empty($arrayParDetVisualizaBotonCancelar))
                    {
                        $arrayVisualizaBotonCancelar = explode(",",$arrayParDetVisualizaBotonCancelar[0]->getValor1());
                    }    
                }
                                    
                
                if($row['PREFIJO'] == 'TN' && in_array($objProducto->getDescripcionProducto(), $arrayVisualizaBotonCancelar))    
                {
                    $boolVisualizarBotonCancelar = 'N';
                }
                
                
                $arr_encontrados[$intIndex]['boolVisualizarBotonCancelar'] = $boolVisualizarBotonCancelar;
                
                //Consultamos los productos que no debeten tener activo el boton de reactivacion 
                $boolVisualizarBotonReactivacion = 'S';
                $objParametroCabVisualizaBotonReactivacion = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                        ->findOneBy( array( 'nombreParametro' => 'NO_VISUALIZAR_BOTON_DE_REACTIVACION',
                                                            'estado'          => 'Activo' ) );
                
                if (is_object($objParametroCabVisualizaBotonReactivacion))
                {
                    $arrayParDetVisualizaBotonReactivacion = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->findBy( array( 'parametroId' => $objParametroCabVisualizaBotonReactivacion->getId(),
                                                                    'estado'      => 'Activo' ) );
                    
                    if (is_array($arrayParDetVisualizaBotonReactivacion) && !empty($arrayParDetVisualizaBotonReactivacion))
                    {
                        $arrayVisualizaBotonReactivacion = explode(",",$arrayParDetVisualizaBotonReactivacion[0]->getValor1());
                    }    
                }
                                    
            
                if($row['PREFIJO'] == 'TN' && in_array($objProducto->getDescripcionProducto(), $arrayVisualizaBotonReactivacion))    
                {
                    $boolVisualizarBotonReactivacion = 'N';
                }
            
                
                $arr_encontrados[$intIndex]['boolVisualizarBotonReactivacion'] = $boolVisualizarBotonReactivacion;
                
                //Consultamos los productos que no debeten tener activo el boton de cambio de velocidad 
                $boolVisualizarBotonCambioVelocidad = 'S';
                $objParametroCabVisualizaBotonVel = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                        ->findOneBy( array( 'nombreParametro' => 'NO_VISUALIZAR_BOTON_DE_CAMBIO_VELOCIDAD',
                                                            'estado'          => 'Activo' ) );
                
                if (is_object($objParametroCabVisualizaBotonVel))
                {
                    $arrayParDetVisualizaBotonVel = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->findBy( array( 'parametroId' => $objParametroCabVisualizaBotonVel->getId(),
                                                                    'estado'      => 'Activo' ) );
                    
                    if (is_array($arrayParDetVisualizaBotonVel) && !empty($arrayParDetVisualizaBotonVel))
                    {
                        $arrayVisualizaBotonVel = explode(",",$arrayParDetVisualizaBotonVel[0]->getValor1());
                    }    
                }
                                    
            
                if($row['PREFIJO'] == 'TN' && in_array($objProducto->getDescripcionProducto(), $arrayVisualizaBotonVel))    
                {
                    $boolVisualizarBotonCambioVelocidad = 'N';
                }
            
                
                $arr_encontrados[$intIndex]['boolVisualizarBotonCambioVelocidad'] = $boolVisualizarBotonCambioVelocidad;
                
                //Realizar validación si el servicio tiene relación con otro para obtener el estado del servicio 
                $objInfoServicioProdCaract = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                    ->findOneBy(array('valor'   => $intIdServico,
                                                                                    'estado'  => "Activo"));
                                
                if (is_object($objInfoServicioProdCaract))
                {
                    $objAdmiProductoCaract = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                            ->find($objInfoServicioProdCaract->getProductoCaracterisiticaId());
                    if (is_object($objAdmiProductoCaract))
                    {
                        $objCaracteristicaRel  = $objAdmiProductoCaract->getCaracteristicaId();
                        if( $objCaracteristicaRel->getDescripcionCaracteristica() == 'RELACION_FAST_CLOUD' )
                        {
                            $objInfoServicioRel = $this->_em->getRepository('schemaBundle:InfoServicio')
                                                    ->find($objInfoServicioProdCaract->getServicioId());
                            if(is_object($objInfoServicioRel))
                            {
                                $strEstado = $objInfoServicioRel->getEstado();
                                if ($strEstado == 'Activo')
                                {
                                    $boolPermiteVisualizarBoton = 'S';
                                }
                                else
                                {
                                    $boolPermiteVisualizarBoton = 'N';
                                }
                            }
                        }
                        else
                        {
                            $boolPermiteVisualizarBoton = 'S';
                        }
                    }
                }
                
                $arr_encontrados[$intIndex]['boolPermiteVisualizarBoton'] = isset($boolPermiteVisualizarBoton) && !empty($boolPermiteVisualizarBoton)
                                                                            ? $boolPermiteVisualizarBoton : 'S';
                
                //Consultamos los productos que deben visualizar pantalla de fibra 
                $boolVisualizarPantallaFibra = 'N';
                $objParametroCabVisualizarPantallaFibra = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                        ->findOneBy( array( 'nombreParametro' => 'VISUALIZAR_PANTALLA_FIBRA',
                                                            'estado'          => 'Activo' ) );
                
                if (is_object($objParametroCabVisualizarPantallaFibra))
                {
                    $arrayParDetVisualizaPantallaFibra = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->findBy( array( 'parametroId' => $objParametroCabVisualizarPantallaFibra->getId(),
                                                                    'estado'      => 'Activo' ) );
                    
                    foreach($arrayParDetVisualizaPantallaFibra as $objItemParDetVisualizaPantallaFibra)
                    {
                        $arrayVisualizaPantallaFibra[] = $objItemParDetVisualizaPantallaFibra->getValor1();
                    }
                }
                                    
                
                if($row['PREFIJO'] == 'TN' && in_array($objProducto->getDescripcionProducto(), $arrayVisualizaPantallaFibra))    
                {
                    $boolVisualizarPantallaFibra = 'S';
                }
                
                $arr_encontrados[$intIndex]['boolVisualizarPantallaFibra'] = $boolVisualizarPantallaFibra;

            }
            //Enviamos el Punto Id para que pueda ser leido en los productos paramount y noggin
            $arr_encontrados[$intIndex]['intPuntoId']               =   $objServicio->getPuntoId()->getId();
            /*Enviamos a validar si el servicio tiene un padre para instalación simultanea.*/
            $arr_encontrados[$intIndex]['servicioPadreSimultaneo']       = $serviceTecnico->getServicioPadreSimultaneo(intval($row['ID_SERVICIO']));

            /* Valido si es un servicio INTERNET WIFI para poder agregar
            un arreglo de la solicitud WIFI al arreglo de respuesta y
            además un arreglo con sus respectivos concentradores*/
            if ($productoTecnico == 'INTERNET WIFI')
            {
                $arr_encontrados[$intIndex]['arraySolicitudWifi']       = $this->getArraySolicitudWifi(intval($row['ID_SERVICIO']));
                $arr_encontrados[$intIndex]['arrayConcentradoresWifi']  = $this->getArrayConcentradoresWifi($row['ID_SERVICIO']);
            }
            if ($productoTecnico == 'L3MPLS')
            {
                /*Guardo en una variable los resultados de la función.*/
                $arrayInfoNodoWifi = $this->getArrayInformacionNodoWifi($row['ID_SERVICIO']);
                /*Valido si existe el indice 'strDescripcionNodo'.*/
                if (isset($arrayInfoNodoWifi['strDescripcionNodo']))
                {
                    /*Agrego al objeto final un array con lo que obtuvimos de la función.*/
                    $arr_encontrados[$intIndex]['arrayDatosNodoWifi'] = $arrayInfoNodoWifi;
                }

            }
            if ($productoNombre == 'L3MPLS' &&
                ($row['DESCRIPCION_PRESENTA_FACTURA'] == 'Concentrador L3MPLS Navegacion' ||
                $row['DESCRIPCION_PRESENTA_FACTURA'] == 'Concentrador L3MPLS Administracion'))
            {
                $arr_encontrados[$intIndex]['idServicioWifi']=$this->getIdElementoWifi($row['ID_SERVICIO']);
            }

            if ($productoNombre == 'WIFI Alquiler Equipos')
            {
                $objParametrosDet = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                ->findOneBy(array(
                                    'descripcion'=>"PARAMETROS_VALIDACIONES_WIFI_ALQUILER_EQUIPOS",
                                    'estado'=>'Activo'
                                ));
                if (is_object($objParametrosDet))
                {
                    $arrayValidaciones = json_decode($objParametrosDet->getValor1());
                }
                $arr_encontrados[$intIndex]['objParametrosDet'] = !empty($arrayValidaciones) ? $arrayValidaciones : null ;
            }
            if (isset($emGeneral) && is_object($emGeneral))
            {
                // Se aumenta validacion para mostrar el estado actual de un producto de cableado ethernet
                $arrayParametroTipos = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->get('VALIDA_PROD_ADICIONAL','COMERCIAL','',
                                            'Solicitud cableado ethernet','','','','','','18');
                if (is_array($arrayParametroTipos) && !empty($arrayParametroTipos))
                {
                    $objCableParametro = $arrayParametroTipos[0];
                }
                if ($arr_encontrados[$intIndex]['productoId'] == $objCableParametro['valor1'])
                {
                    $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                    ->find($arr_encontrados[$intIndex]['idServicio']);
                    if (is_object($objServicio->getProductoId()) &&
                        $objServicio->getProductoId()->getId() == $objCableParametro['valor1'])
                    {
                        $arr_encontrados[$intIndex]['estado'] = $objServicio->getEstado();
                    }
                    else
                    {
                        $arrayDetSolicitudes = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                        ->findByParameters(array('servicioId' => $arr_encontrados[$intIndex]['idServicio']));
                        foreach($arrayDetSolicitudes as $detSolicitud)
                        {
                            $objTipSolicitud = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                            ->findOneById($detSolicitud['tipoSolicitudId']);
                            if ($objTipSolicitud->getDescripcionSolicitud() == $objCableParametro['valor2'] &&
                                ($detSolicitud['estado'] != 'Finalizada' && $detSolicitud['estado'] != 'Finalizado'))
                            {
                                $arr_encontrados[$intIndex]['estado'] = $detSolicitud['estado'];
                                $arr_encontrados[$intIndex]['tieneProgresoMateriales'] = 'NO';
                            }
                        }
                    }
                }
            }

            $arr_encontrados[$intIndex]['intServicioFTTxTN'] = null;
            if ($arrayParametros['intServicioFTTxTN'] != null) 
            {
                $arr_encontrados[$intIndex]['intServicioFTTxTN']=$arrayParametros['intServicioFTTxTN'];
            }

            $intIndex++;
        }

        /*Valida si esta seteada la variable strLoginAux para enviar una cantidad diferente.*/
        if(isset($arrayParametros['strLoginAux']))
        {
            $total = count($arr_encontrados);
        }

        $arrayRespuesta = array('total'=>$total, 'resultado'=>$arr_encontrados );
        
        return $arrayRespuesta;
    }


    /**
     * Función para obtener la solicitud asociada al servicio.
     * 
     * @version 1.0 - Version Inicial.
     * @param $intIdServicio -> Contiene el id del servicio.
     * @return array|null
     */

    public function getSolicitudId($intIdServicio)
    {
        $arrayResponse = null;

        $objInfoServicio = $this->_em->getRepository('schemaBundle:InfoServicio')
            ->find($intIdServicio);

        $objInfoDetalleSolicitud = $this->_em->getRepository('schemaBundle:InfoDetalleSolicitud')
            ->findOneBy(array(
                'servicioId'=>$objInfoServicio->getId(),
                'estado'=>'PrePlanificada'
            ));

        if ($objInfoDetalleSolicitud)
        {
            $arrayResponse = $objInfoDetalleSolicitud->getId();
        }

        return $arrayResponse;
    }

    /**
     * Función para poder obtener un arreglo que contiene el estado y el id de los concentradores wifi.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 20-06-2019 - Version Inicial.
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.1 29-10-2020 - Se realiza un ajuste en la obtencion de las caracteristicas, agregandoles filtro por estado..
     *
     * @param $intIdServicio -> el Id del servicio wifi.
     * @return $arrResponse|null
     */

    public function getArrayConcentradoresWifi($intIdServicio)
    {
        $arrayResponse = null;
        /*Obtengo el objeto del producto L3MPLS*/
        $objProdL3MPLS = $this->_em->getRepository('schemaBundle:AdmiProducto')
                        ->findOneBy(array(
                            'descripcionProducto' => 'L3MPLS',
                            'nombreTecnico' => 'L3MPLS',
                            'estado' => 'Activo'
                        ));
        $objAdmiCaracteristica = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
            ->findOneBy(array(
                'descripcionCaracteristica'=>'RELACION_INTERNET_WIFI',
                'estado'=>'Activo' 
            ));

        $objAdmiProductoCaracteristica = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
            ->findOneBy(array(
                'caracteristicaId'=>$objAdmiCaracteristica->getId(),
                'productoId'=>$objProdL3MPLS->getId(),
                'estado'=>'Activo'                
            ));

        /*Obtengo el objeto del servicio Wifi con el id que llega por parámetro*/
        $objInfoServicioInternetWifi = $this->_em->getRepository('schemaBundle:InfoServicio')
                                       ->find($intIdServicio);

        if (is_object($objInfoServicioInternetWifi))
        {
            $arrayServiciosPunto = $this->_em->getRepository('schemaBundle:InfoServicio')
                ->findBy(array(
                    'puntoId' => $objInfoServicioInternetWifi->getPuntoId()->getId(),
                    'productoId' => $objProdL3MPLS->getId()
                ));

            if (count($arrayServiciosPunto)>=2)
            {
                $arrayResponse = array();
                foreach ($arrayServiciosPunto as $objServicio)
                {
                    $objCaracteristica = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                        ->findOneBy(array(
                            'productoCaracterisiticaId' => $objAdmiProductoCaracteristica->getId(),
                            'servicioId'                => $objServicio->getId()
                        ));

                    if (is_object($objCaracteristica))
                    {
                        $arrayServiciosWifi = explode(', ', $objCaracteristica->getValor());

                        if ($arrayServiciosWifi[0] !== 'E1 - NODO WIFI')
                        {
                            $arrayServicio = array(
                                'strDescripcion'    => $objServicio->getDescripcionPresentaFactura(),
                                'intProductoId'     => $objServicio->getProductoId()->getId(),
                                'strEstado'         => $objServicio->getEstado(),
                                'intId'             => $objServicio->getId()
                            );
                            array_push($arrayResponse, $arrayServicio);
                        }

                    }
                }
            }
        }
        return $arrayResponse;
    }

    /**
     * Función para poder obtener un arreglo que contiene informacion de un Nodo Wifi E1.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 15-07-2019 - Version Inicial.
     *
     * @param $intIdServicio -> el Id del servicio.
     * @return $arrResponse|null
     */

    public function getArrayInformacionNodoWifi($intIdServicio)
    {
        $arrayResponse = null;

        $objAdmiCaracteristica = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                       ->findOneBy(array(
                                           'descripcionCaracteristica'=>'RELACION_INTERNET_WIFI'
                                       ));

        $objAdmiProductoCaracteristica = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                              ->findOneBy(array(
                                                  'caracteristicaId'=>$objAdmiCaracteristica->getId()
                                              ));

        /*Obtengo el objeto del servicio con el id que llega por parámetro*/
        $objInfoServicio = $this->_em->getRepository('schemaBundle:InfoServicio')
                                ->find($intIdServicio);

        if (is_object($objInfoServicio))
        {

                    $objCaracteristica = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                        ->findOneBy(array(
                            'productoCaracterisiticaId' => $objAdmiProductoCaracteristica->getId(),
                            'servicioId'                => $objInfoServicio->getId()
                        ));

                    if (is_object($objCaracteristica))
                    {
                        $arrayServiciosWifi = explode(', ', $objCaracteristica->getValor());

                        if ($arrayServiciosWifi[0] == 'E1 - NODO WIFI')
                        {
                            $arrayServicio = array(
                                'strDescripcionNodo'    => $arrayServiciosWifi[0],
                                'intIdNodoWifi'         => intval($arrayServiciosWifi[1])
                            );
                            $arrayResponse = $arrayServicio;
                        }
                    }
        }
        return $arrayResponse;
    }

    /**
     * Función para poder obtener un arreglo que contiene el estado y el id de la solicitud wifi
     * @param $intIdServicio -> el Id del servicio.
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 23-05-2019
     * @return array|null
     */

    public function getArraySolicitudWifi($intIdServicio)
    {
        $arrayResponse = null;
        $objAdmiSol = $this->_em->getRepository('schemaBundle:AdmiTipoSolicitud')
                                ->findOneBy(array(
                                    'descripcionSolicitud'=>'SOLICITUD NODO WIFI',
                                    'estado'=>'Activo'
                                ));
        $objServicio    = $this->_em->getRepository('schemaBundle:InfoServicio')
                                    ->find($intIdServicio);

        if ($objServicio)
        {
            $objInfoDetSolWifi = $this->_em->getRepository('schemaBundle:InfoDetalleSolicitud')
                ->findOneBy(array(
                    'servicioId' => $objServicio->getId(),
                    'tipoSolicitudId' => $objAdmiSol->getId(),
                    'estado' => 'PreFactibilidad'
                ));

            if ($objInfoDetSolWifi)
            {
                $arrayResponse = array(
                    'intIdDetalleSolicitud'=>$objInfoDetSolWifi->getId(),
                    'strEstado'=>$objInfoDetSolWifi->getEstado()
                );
                return $arrayResponse;
            }
        }
        return $arrayResponse;
    }

    /**
     * Función para poder obtener el id del servicio wifi correspondiente para cada concentrador L3MPLS del servicio.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 20-05-2019 - Version Inicial.
     *
     * @param $intIdServicio -> el Id del servicio.
     * @return integer|null
     *
     */

    public function getIdElementoWifi($intIdServicio)
    {
        $intElementoId  = null;
        $objServicio    = $this->_em->getRepository('schemaBundle:InfoServicio')
                                    ->find($intIdServicio);

        if ($objServicio->getDescripcionPresentaFactura()=='Concentrador L3MPLS Administracion' ||
            $objServicio->getDescripcionPresentaFactura()=='Concentrador L3MPLS Navegacion')
        {
            // Obtengo el esquema del servicio elegido.
            $objAdmiCaract =   $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array(
                    "descripcionCaracteristica"     => 'RELACION_INTERNET_WIFI'
                ));

            $objProduct = $objServicio->getProductoId();

            $objProCaract =   $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->findOneBy(array(  "productoId"       => $objProduct->getId(),
                                    "caracteristicaId" => $objAdmiCaract->getId()));

            $objInfServProdCaract = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                        ->findOneBy(array(
                                            'servicioId'                =>   $objServicio->getId(),
                                            'productoCaracterisiticaId' =>   $objProCaract->getId()
                                        ));

            if (is_object($objInfServProdCaract) && method_exists($objInfServProdCaract, 'getValor') )
            {
                $arrayValor = explode(', ', $objInfServProdCaract->getValor());
                if ($arrayValor[0] !== 'E1 - NODO WIFI')
                {
                    $intElementoId = $objInfServProdCaract->getValor();
                }
            }
        }
        return is_null($intElementoId) ? null : array_map('intval', explode(', ', $intElementoId));
    }

    /**
     * Método encargado de obtener las coordenadas de la caja donde se conecta el cliente
     * filtrada por el servicio.
     *
     * Costo 10
     *
     * @param Array $arrayParametros [intIdServicio, intIdEmpresa]
     * @return Array $arrayResultado
     * @throws \Doctrine\ORM\NonUniqueResultException
     * @version 1.0 16-11-2018
     *
     * @author Wilmer Vera <wvera@telconet.ec>
     */
    public function getCoordenadasCajaPorServicio($arrayParametros)
    {
        
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        $intIdServicio  =  $arrayParametros['intIdServicio']; 
        $intIdEmpresa   =  $arrayParametros['intIdEmpresa'] ;

        $arrayResultado = array();
        
        $strSql = " SELECT IU.LATITUD_UBICACION,IU.LONGITUD_UBICACION
                    FROM DB_COMERCIAL.INFO_SERVICIO_TECNICO IST
                    INNER JOIN DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA IEEU ON IEEU.ELEMENTO_ID=IST.ELEMENTO_CONTENEDOR_ID
                    INNER JOIN DB_INFRAESTRUCTURA.INFO_UBICACION IU ON IU.ID_UBICACION = IEEU.UBICACION_ID
                    WHERE IST.SERVICIO_ID=:idServicio AND IEEU.EMPRESA_COD=:idEmpresa";

        $objNativeQuery->setParameter('idServicio',$intIdServicio);
        $objNativeQuery->setParameter('idEmpresa', $intIdEmpresa );
    
        $objResultSetMap->addScalarResult('LATITUD_UBICACION'  ,'strLatitud',    'string');
        $objResultSetMap->addScalarResult('LONGITUD_UBICACION'  ,'strLongitud',  'string');
    
        $objNativeQuery->setSQL($strSql);
       
        $arrayResultado = $objNativeQuery->getOneOrNullResult();
       
        return $arrayResultado;
    }


     /**
     * Método encargado de obtener las coordenadas de la caja anterior donde se conecta el cliente
     * filtrada por el servicio.
     * 
     * Costo 13
     * 
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.0 20-11-2018
     * 
     * @param  Array $arrayParametros [intIdServicio, intIdEmpresa]
     * @return Array $arrayResultado
     */
    public function getCoordenadasCajaAnteriorPorServicio($arrayParametros)
    {
        
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        $intIdServicio  =  $arrayParametros['intIdServicio']; 
        $intIdEmpresa   =  $arrayParametros['intIdEmpresa'] ;

        $arrayResultado = array();
        
        $strSql = " SELECT IU.LATITUD_UBICACION,IU.LONGITUD_UBICACION
                    FROM 
                    DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO IRE
                    INNER JOIN 
                    (SELECT IFOE.ID_ELEMENTO
                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO IFOE
                    WHERE IFOE.NOMBRE_ELEMENTO = 
                    (
                        SELECT spliter
                        FROM(SELECT SERH.ID_SERVICIO_HISTORIAL,REPLACE(SPKG_OBTENER_CAJA_ANTERIOR.SPLIT(SERH.OBSERVACION,'<br>',4),'br> Elemento conector anterior: ','') as spliter
                        FROM DB_COMERCIAL.INFO_SERVICIO_HISTORIAL SERH
                        WHERE SERVICIO_ID=:idServicio 
                        AND ( OBSERVACION LIKE '%Se hizo cambio de puerto logico%' OR SERH.OBSERVACION LIKE '%Se hizo cambio de linea pon%') 
                        ) T1
                        INNER JOIN
                        (
                        SELECT MAX(SERH.ID_SERVICIO_HISTORIAL) AS ID_SERVICIO_HIS
                        FROM DB_COMERCIAL.INFO_SERVICIO_HISTORIAL SERH
                        WHERE SERVICIO_ID=:idServicio 
                        AND ( SERH.OBSERVACION LIKE '%Se hizo cambio de puerto logico%' OR SERH.OBSERVACION LIKE '%Se hizo cambio de linea pon%') 
                        )T2 ON T2.ID_SERVICIO_HIS=T1.ID_SERVICIO_HISTORIAL
                    ) AND IFOE.ESTADO = 'Activo'
                    ) T2 ON T2.ID_ELEMENTO=IRE.ELEMENTO_ID_B
                    INNER JOIN DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA IEEU ON IEEU.ELEMENTO_ID=IRE.ELEMENTO_ID_A
                    INNER JOIN DB_INFRAESTRUCTURA.INFO_UBICACION IU ON IU.ID_UBICACION = IEEU.UBICACION_ID
                    WHERE  IEEU.EMPRESA_COD=:idEmpresa ";

        $objNativeQuery->setParameter('idServicio',$intIdServicio);
        $objNativeQuery->setParameter('idEmpresa', $intIdEmpresa );
    
        $objResultSetMap->addScalarResult('LATITUD_UBICACION'  ,'strLatitud',    'string');
        $objResultSetMap->addScalarResult('LONGITUD_UBICACION'  ,'strLongitud',  'string');
    
        $objNativeQuery->setSQL($strSql);
       
        $arrayResultado = $objNativeQuery->getOneOrNullResult();
       
        return $arrayResultado;
    }


    /**
     * Método que determina si un servicio posee la misma ultima milla de otro vinculado a un mismo login
     * 
     * @author Allan Suarez <arsuarez@telconet.ec> 
     * @version 1.0
     * @since 12-09-2016
     * 
     * @param Array $arrayParametros [ idServicio , elementoId , interfaceId ]
     * @return boolean
     */
    public function tieneMismaUltimaMilla($arrayParametros)
    {
        $boolTieneMismaUM = false;
        
        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);

            $strSql          = " SELECT count(*) CONT
                                    FROM 
                                      info_servicio servicio,
                                      info_punto punto,
                                      info_servicio_tecnico tecnico
                                    WHERE servicio.id_servicio <> :servicio
                                    AND servicio.id_servicio    = tecnico.servicio_id
                                    AND servicio.estado         in (:estado)
                                    AND punto.id_punto          =
                                      (SELECT punto_id FROM info_servicio WHERE id_servicio = :servicio
                                      )
                                    AND tecnico.elemento_id           = :elementoId
                                    AND tecnico.INTERFACE_ELEMENTO_ID = :interfaceId
                                    AND servicio.punto_id             = punto.id_punto";

            
            $objResultSetMap->addScalarResult('CONT', 'cont', 'integer');   
            
            $objNativeQuery->setParameter("servicio",    $arrayParametros['idServicio']);
            $objNativeQuery->setParameter("elementoId",  $arrayParametros['elementoId']);
            $objNativeQuery->setParameter("interfaceId", $arrayParametros['interfaceId']);
            $objNativeQuery->setParameter("estado", array('Activo','EnPruebas','In-Corte'));
            
            $objNativeQuery->setSQL($strSql);
            
            $arrDatosTecnicos = $objNativeQuery->getOneOrNullResult();
            
            if($arrDatosTecnicos)
            {                
                //Si el valor es 0 significa que usa una UM diferente
                if($arrDatosTecnicos['cont'] != 0)
                {
                    $boolTieneMismaUM = true;
                }
            }           
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        
        return $boolTieneMismaUM;
    }

    public function getCountProductosPorPlan($planId){
        
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(planDet.productoId)')
           ->from('schemaBundle:InfoPlanCab','planCab')
           ->from('schemaBundle:InfoPlanDet','planDet');
        $qb->where('planCab = ?1')
           ->setParameter(1, $planId)
           ->andWhere('planCab = planDet.planId');
        
//        $query = $qb->getQuery();
        $total = $qb->getQuery()->getSingleScalarResult();
        
        return $total;
        
    }
    
    public function getServicioProdCaract($servicioId, $estado){
        
        $qb = $this->_em->createQueryBuilder();
        $qb->select('e')
           ->from('schemaBundle:InfoServicioProdCaract','e');
        $qb->where('e.servicioId = ?1');
        $qb->setParameter(1, $servicioId);
        
        if($estado!="Todos"){
            $qb ->andWhere('e.estado = ?2');
            $qb->setParameter(2, $estado);
        }
        
        
        $query = $qb->getQuery();
        
        return $query->getResult();
        
    }
    
    /**
     * Funcion que sirve para generar un Json con las ips (fijas, publicas, wan) 
     * de un punto
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 23-04-2015
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 06-02-2018 Se envía un array de parámetros para enviar el id del servicio para obtener ips sólo para servicios 
     *                         Internet Small Business y no a nivel de punto
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 27-04-2018 Se inicializa variable mac para cada IP encontrada y se agrega parámetro con los id de los productos 
     *                         Small Business y sus Ips adicionales
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 11-02-2019 Se ajusta función para servicios Ips TelcoHome
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.5 02-05-2020 Se obtiene el parámetro intIdProdInternet en lugar del parámetro strNombreTecnicoProdPref debido a la
     *                          reestructuración de la programación de servicios Small Business, así también se leimina validación de TelcoHome, 
     *                          ya que este producto no tiene ips
     * 
     * @param array $arrayParametros ['idPunto'         => id del punto,
     *                                'empresa'         => código de la empresa
     *                                'start'           => inicio del rownum,
     *                                'limit'           => fin del rownum,
     *                                'em'              => entity manager de comercial,
     *                                'emI'             => entity manager de infraestructura,
     *                                'serviceTecnico'  => service tecnico,
     *                                'idServicio'      => id del servicio]
     */
    public function generarJsonIpPublicaPorPunto($arrayParametros)
    {
        $strMac                 = "N/A";
        $strGwValor             = "N/A";
        $strMascaraValor        = "N/A";
        $strScope               = "N/A";
        $intIdPunto             = $arrayParametros["idPunto"];
        $strCodEmpresa          = $arrayParametros["empresa"];
        $intStart               = $arrayParametros["start"];
        $intLimit               = $arrayParametros["limit"];
        $em                     = $arrayParametros["em"];
        $emI                    = $arrayParametros["emI"];
        $serviceTecnico         = $arrayParametros["serviceTecnico"];
        $intIdServicio          = $arrayParametros["idServicio"] ? $arrayParametros["idServicio"] : 0;
        $strIdsProductos        = $arrayParametros["strIdsProductos"];
        $arrayEncontradosFinal  = array();
        
        if(isset($arrayParametros["intIdProdInternet"]) && !empty($arrayParametros["intIdProdInternet"]))
        {
            $objProductoInternet    = $em->getRepository('schemaBundle:AdmiProducto')->find($arrayParametros["intIdProdInternet"]);
        }
        else
        {
            $objProductoInternet    = $em->getRepository('schemaBundle:AdmiProducto')->findOneBy(array( "nombreTecnico" => "INTERNET", 
                                                                                                        "empresaCod"    => $strCodEmpresa, 
                                                                                                        "estado"        => "Activo"));
        }
        
        $arrayResultado         = $this->getIpPublicaPorPunto(array("idPunto"           => $intIdPunto, 
                                                                    "start"             => $intStart,
                                                                    "limit"             => $intLimit,
                                                                    "idServicio"        => $intIdServicio,
                                                                    "strIdsProductos"   => $strIdsProductos));        
        $arrayEncontrados       = $arrayResultado['registros'];
        $intNum                 = $arrayResultado['total'];
        if(isset($arrayEncontrados) && !empty($arrayEncontrados)) 
        {
            foreach($arrayEncontrados as $entity)
            {
                $strMac     = "N/A";
                $strTipo    = $entity->getTipoIp();
                $strIpValor = $entity->getIp();
                $intIdIp    = $entity->getId();
                
                //--------------------------------------------------------------------------------------------------
                if($entity->getGateway()!="")
                {
                    $strGwValor = $entity->getGateway();
                }
                //--------------------------------------------------------------------------------------------------
                if($entity->getMascara()!="")
                {
                    $strMascaraValor = $entity->getMascara();
                }
                //--------------------------------------------------------------------------------------------------
                                
                $objServicio        = $em->getRepository('schemaBundle:InfoServicio')->find($entity->getServicioId());
                $objServicioTecnico = $em->getRepository('schemaBundle:InfoServicioTecnico')->findOneBy(array("servicioId"=>$objServicio->getId()));
                $strStyle           = "";
                if(is_object($objServicio->getProductoId()) 
                    && ($objServicio->getProductoId()->getNombreTecnico() === "INTERNET SMALL BUSINESS"))
                {
                    $strStyle = "SI";
                }
                $objTipoMedio   = $emI->getRepository('schemaBundle:AdmiTipoMedio')->find($objServicioTecnico->getUltimaMillaId());
                
                //buscar scopes
                $arrayScopeOlt = $emI->getRepository('schemaBundle:InfoSubred')->getScopePorIpFija($strIpValor, $objServicioTecnico->getElementoId());
                
                if($arrayScopeOlt)
                {
                    $strScope = $arrayScopeOlt['NOMBRE_SCOPE'];
                }
                else
                {
                    $objSpcPool = $serviceTecnico->getServicioProductoCaracteristica($objServicio, "POOL IP", $objProductoInternet);
                    
                    if(is_object($objSpcPool))
                    {
                        $strScope = $objSpcPool->getValor();
                    }
                }
                                
                $objSpcMac = $serviceTecnico->getServicioProductoCaracteristica($objServicio, "MAC WIFI", $objProductoInternet);
                if(!is_object($objSpcMac))
                {
                    $objSpcMac = $serviceTecnico->getServicioProductoCaracteristica($objServicio, "MAC", $objProductoInternet);
                }
                
                if(!is_object($objSpcMac))
                {
                    $objSpcMac = $serviceTecnico->getServicioProductoCaracteristica($objServicio, "MAC ONT", $objProductoInternet);
                }
                
                if(is_object($objSpcMac) && ($objTipoMedio->getNombreTipoMedio()=="Fibra Optica" || $objTipoMedio->getNombreTipoMedio()=="FTTx"))
                {
                    $strMac = strtoupper($objSpcMac->getValor());
                }
                
                //--------------------------------------------------------------------------------------------------                
                if($entity->getEstado()!="Eliminado" && $entity->getEstado()!="Cancel")
                {
                    $arrayEncontradosFinal[]    = array(
                                                        'ip'        => $strIpValor,
                                                        'mascara'   => $strMascaraValor,
                                                        'gateway'   => $strGwValor,
                                                        'tipo'      => $strTipo,
                                                        'estado'    => $entity->getEstado(),
                                                        'id'        => $intIdIp,
                                                        'mac'       => $strMac,
                                                        'scope'     => $strScope,
                                                        'strStyle'  => $strStyle
                                                  );                    
                }
            }
            
            if($intNum == 0)
            {
                $arrayResultado = array('total' => 1 ,
                                        'encontrados' => array('id'        => 0 , 
                                                               'ip'        => 'Ninguno',
                                                               'mascara'   => 'Ninguno' , 
                                                               'gateway'   => 'Ninguno', 
                                                               'estado'    => 'Ninguno'));
                $strResultado   = json_encode($arrayResultado);
                return $strResultado;
            }
            else
            {
                $strData        = json_encode($arrayEncontradosFinal);
                $strResultado   = '{"total":"'.$intNum.'","encontrados":'.$strData.'}';
                return $strResultado;
            }
        }        
    }
    
    /**
     * Funcion que sirve para crear y ejecutar un query para obtener
     * las ips (fijas, publicas, wan) por punto
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 23-04-2015
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 06-02-2018 Se envía un array de parámetros para enviar el id del servicio para obtener ips sólo para servicios 
     *                         Internet Small Business y no a nivel de punto
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 27-04-2018 Se elimina validación por id de servicio para consultar las ips adicionales de un servicio Small Business
     * 
     * @param array $arrayParametros ['idPunto'     => id del punto,
     *                                'start'       => inicio del rownum,
     *                                'limit'       => fin del rownum,
     *                                'idServicio'  => id servicio]
     */
    public function getIpPublicaPorPunto($arrayParametros)
    {
        $idPunto        = $arrayParametros["idPunto"];
        $start          = $arrayParametros["start"];
        $limit          = $arrayParametros["limit"];
        $strIdsProductos= $arrayParametros["strIdsProductos"];
        $qb             = $this->_em->createQueryBuilder();
        $qbC            = $this->_em->createQueryBuilder();
        
        $qb->select('ip')
           ->from('schemaBundle:InfoIp','ip')
           ->from('schemaBundle:InfoPunto','punto')
           ->from('schemaBundle:InfoServicio','servicio')
           ->where('punto = servicio.puntoId')
           ->andWhere('servicio = ip.servicioId');
        
        $qbC->select('count(ip.id)')
            ->from('schemaBundle:InfoIp','ip')
            ->from('schemaBundle:InfoPunto','punto')
            ->from('schemaBundle:InfoServicio','servicio')
            ->where('punto = servicio.puntoId')
            ->andWhere('servicio = ip.servicioId');
         
        if($idPunto!="")
        {
            $qb->andWhere('punto.id = ?1');
            $qb->setParameter(1, $idPunto);
            
            $qbC->andWhere('punto.id = ?1');
            $qbC->setParameter(1, $idPunto);
        }
        
        if(isset($strIdsProductos) && !empty($strIdsProductos))
        {
            $qb->andWhere($qb->expr()->in('servicio.productoId', $strIdsProductos));
            $qbC->andWhere($qb->expr()->in('servicio.productoId', $strIdsProductos));
        }
        
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        
        //total de objetos
        $total = $qbC->getQuery()->getSingleScalarResult();
        
        //obtener los objetos
        $query = $qb->getQuery();
        $datos = $query->getResult();
        
        $resultado['registros'] = $datos;
        $resultado['total']     = $total;

        return $resultado;
    }
    
    /**
     * Funcion que sirve para cargar las ips fijas y las ips adicionales
     * de un cliente
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 06-05-2016    Se agrega parametro empresa en metodo generarJsonIpPublicaPorServicio por conflictos de 
     *                            producto INTERNET DEDICADO
     * 
     * @author Emmanuel Martillo  <emartillo@telconet.ec>
     * @version 1.2 06-05-2016    Se agrega validacion por prefijo de empresa para Ecuanet.
     * 
     * @since 1.0
     */
    public function generarJsonIpPublicaPorServicio($idServicio, $estado,$start,$limit,$em,$idEmpresa, $prefijoEmpresa)
    {
        $arr_encontrados = array();
        $num             = "";
        $entidadesTotal  = $this->getIpPublicaPorServicio($idServicio,  $estado, '', '');
        $entidad         = $this->getIpPublicaPorServicio($idServicio,  $estado, $start, $limit);
        
        if ($entidad) 
        {
            $num = count($entidadesTotal)+1;
            foreach ($entidad as $entity)
            {
                $tipo         = $entity->getTipoIp();
                $ipValor      = $entity->getIp();
                $mascaraValor = $entity->getMascara();
                $gwValor      = $entity->getGateway();
                $idIp         = $entity->getId();
                
                if($entity->getEstado()!="Eliminado")
                {
                    $arr_encontrados[] = array( 'ip'      => $ipValor,
                                                'mascara' => $mascaraValor,
                                                'gateway' => $gwValor,
                                                'tipo'    => $tipo,
                                                'ipCpe'   => false,
                                                'id'      => $idIp
                                               );
                }
            }

            if($prefijoEmpresa == 'MD' || $prefijoEmpresa == 'EN')
            {
                $producto                = $em->getRepository('schemaBundle:AdmiProducto')
                                              ->findOneBy(array( "nombreTecnico"       => array('INTERNET','INTMPLS'),
                                                                 "empresaCod"          => $idEmpresa,
                                                                 "estado"              => "Activo"));
                
                $caracteristica1         = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                              ->findOneBy(array( "descripcionCaracteristica" => "IP LAN", 
                                                                 "estado"                    => "Activo"));
                $productoCaracteristica1 = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                              ->findOneBy(array( "productoId"       => $producto->getId(), 
                                                                 "caracteristicaId" => $caracteristica1->getId()));
                $caracteristica2         = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                              ->findOneBy(array( "descripcionCaracteristica" => "MASCARA LAN", 
                                                                 "estado"                    => "Activo"));
                $productoCaracteristica2 = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                              ->findOneBy(array( "productoId"       => $producto->getId(), 
                                                                 "caracteristicaId" => $caracteristica2->getId()));
                $caracteristica3         = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                              ->findOneBy(array( "descripcionCaracteristica" => "GATEWAY LAN", 
                                                                 "estado"                    => "Activo"));
                $productoCaracteristica3 = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                              ->findOneBy(array( "productoId"       => $producto->getId(), 
                                                                 "caracteristicaId" => $caracteristica3->getId()));
                
                $ipValor                 = "";
                $mascaraValor            = "";
                
                $spcIp                   =  $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                               ->findOneBy(array( "servicioId"                => $idServicio, 
                                                                  "estado"                    => "Activo", 
                                                                  "productoCaracterisiticaId" => $productoCaracteristica1));
                $spcMascara              =  $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                               ->findOneBy(array( "servicioId"                => $idServicio, 
                                                                  "estado"                    => "Activo", 
                                                                  "productoCaracterisiticaId" => $productoCaracteristica2));
                $spcGateway              =  $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                               ->findOneBy(array( "servicioId"                => $idServicio, 
                                                                  "estado"                    => "Activo", 
                                                                  "productoCaracterisiticaId" => $productoCaracteristica3));
                
                if($spcIp!=null || $spcIp!="")
                {
                    $ipValor = $spcIp->getValor();
                    
                    if($spcMascara!= null || $spcMascara!="")
                    {
                        $mascaraValor = $spcMascara->getValor();
                    }
                    else
                    {
                        $mascaraValor = "";
                    }
                    
                    if($spcGateway!= null || $spcGateway!="")
                    {
                        $gwValor = $spcGateway->getValor();
                    }
                    else
                    {
                        $gwValor = "";
                    }
                    
                    $tipo              = "LAN";
                    $idIp              = 0;
                    $arr_encontrados[] = array( 'ip'      => $ipValor,
                                                'mascara' => $mascaraValor,
                                                'gateway' => $gwValor,
                                                'tipo'    => $tipo,
                                                'ipCpe'   => false,
                                                'id'      => $idIp
                                               );
                }
            }
                
            // ===================================================================================
            // Se configura el JSON para la respuesta
            // ===================================================================================
            if($num == 0)
            {
               $resultado  = array( 'total'       => 1 ,
                                    'encontrados' => array( 'idConectorInterface'     => 0 , 
                                                            'nombreConectorInterface' => 'Ninguno',
                                                            'idConectorInterface'     => 0 , 
                                                            'nombreConectorInterface' => 'Ninguno', 
                                                            'estado'                  => 'Ninguno')
                                  );
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data      = json_encode($arr_encontrados);
                $resultado = '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            if($prefijoEmpresa == 'MD' || $prefijoEmpresa == 'EN')
            {
                $producto                = $em->getRepository('schemaBundle:AdmiProducto')
                                              ->findOneBy(array( "descripcionProducto" => "INTERNET DEDICADO", 
                                                                 "empresaCod"          => $idEmpresa,
                                                                 "estado"              => "Activo"));
                
                $caracteristica1         = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                              ->findOneBy(array( "descripcionCaracteristica" => "IP LAN",
                                                                 "estado"                    => "Activo")
                                                         );
                $productoCaracteristica1 = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                              ->findOneBy(array( "productoId"       => $producto->getId(), 
                                                                 "caracteristicaId" => $caracteristica1->getId()));
                
                $caracteristica2         = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                              ->findOneBy(array( "descripcionCaracteristica" => "MASCARA LAN", 
                                                                 "estado"                    => "Activo"));
                $productoCaracteristica2 = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                              ->findOneBy(array( "productoId"       => $producto->getId(), 
                                                                 "caracteristicaId" => $caracteristica2->getId()));
                
                $caracteristica3         = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                              ->findOneBy(array( "descripcionCaracteristica" => "GATEWAY LAN", 
                                                                 "estado"                    => "Activo"));
                $productoCaracteristica3 = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                              ->findOneBy(array( "productoId"       => $producto->getId(), 
                                                                 "caracteristicaId" => $caracteristica3->getId()));
                
                $ipValor                 = "";
                $mascaraValor            = "";
                
                $spcIp                   = $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                              ->findOneBy(array( "servicioId"                => $idServicio, 
                                                                 "estado"                    => "Activo", 
                                                                 "productoCaracterisiticaId" => $productoCaracteristica1));
                $spcMascara              = $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                              ->findOneBy(array( "servicioId"                => $idServicio, 
                                                                 "estado"                    => "Activo", 
                                                                 "productoCaracterisiticaId" => $productoCaracteristica2));
                $spcGateway              = $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                              ->findOneBy(array( "servicioId"                => $idServicio, 
                                                                 "estado"                    => "Activo", 
                                                                 "productoCaracterisiticaId" => $productoCaracteristica3));
                
                if($spcIp!=null || $spcIp!="")
                {
                    $num++;
                    $ipValor = $spcIp->getValor();
                    
                    if($spcMascara!= null || $spcMascara!="")
                    {
                        $mascaraValor = $spcMascara->getValor();
                    }
                    else
                    {
                        $mascaraValor = "";
                    }
                    
                    if($spcGateway!= null || $spcGateway!="")
                    {
                        $gwValor = $spcGateway->getValor();
                    }
                    else
                    {
                        $gwValor = "";
                    }
                    
                    $tipo              = "LAN";
                    $idIp              = 0;
                    $arr_encontrados[] = array( 'ip'      => $ipValor,
                                               'mascara' => $mascaraValor,
                                               'gateway' => $gwValor,
                                               'tipo'    => $tipo,
                                               'ipCpe'   => false,
                                               'id'      => $idIp
                                              );
                }
                
                if($num == 0)
                {
                   $resultado  = array( 'total'       => 1 ,
                                        'encontrados' => array( 'idConectorInterface'     => 0 , 
                                                                'nombreConectorInterface' => 'Ninguno',
                                                                'idConectorInterface'     => 0 , 
                                                                'nombreConectorInterface' => 'Ninguno', 
                                                                'estado'                  => 'Ninguno')
                                      );
                    $resultado = json_encode( $resultado);

                    return $resultado;
                }
                else
                {
                    $data      = json_encode($arr_encontrados);
                    $resultado = '{"total":"'.$num.'","encontrados":'.$data.'}';

                    return $resultado;
                }
            }
        }
    }
    
    
    
    /**
     * 
     * @param type $idServicio
     * @param type $estado
     * @param type $start
     * @param type $limit
     * @return string
     * 
     * @author Verónica Carrasco Idrovo <vcarrasco@telconet.ec>
     * @version 1.1 21-05-2016  
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 28-09-2017 - Se agrega condicional para servicios que sean de flujo de DATACENTER para que muestren
     *                           informacion de Subred completa tanto para INTERNET como para DATOS
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.3 26-02-2018 - Se agrega condicional adicional para que la consulta soporte flujos de concentradores de Interconexion CONCINTER
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.4 22-03-2021 Se abre la programacion para servicios Internet SDWAN
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.5 10-06-2021 Se elimina validación para servicios Internet SDWAN
     * 
     * @author Jean Pierre Nazareno Martinez <jnazareno@telconet.ec>
     * @version 1.6 10-12-2021 Se agrega validación para tomar en cuenta producto Internet Dedicado
     * 
     * @author Jean Pierre Nazareno Martinez <jnazareno@telconet.ec>
     * @version 1.7 17-12-2021 Se agrega subquery para mostrar campo subred en caso de tenerla y
     * se elimina validación para producto Internet Dedicado
     * 
     * @author Joel Muñoz M <jrmunoz@telconet.ec>
     * @version 1.8 15-03-2023 Se agregan productos SDWAN a validación
     */
    public function getIpPorServicio($servicio, $estado,$start,$limit)
    {
        $query = $this->_em->createQuery(null);
        
        if($servicio->getProductoId()->getNombreTecnico() == "L3MPLS" || 
           $servicio->getProductoId()->getNombreTecnico() == "INTERNET SDWAN" || 
           $servicio->getProductoId()->getNombreTecnico() == "L3MPLS SDWAN"   || 
           $servicio->getProductoId()->getNombreTecnico() == "SAFECITYDATOS" || 
           $servicio->getProductoId()->getNombreTecnico() == "INTMPLS" ||
           $servicio->getProductoId()->getNombreTecnico() == "CONCINTER" ||
           ($servicio->getProductoId() && strpos($servicio->getProductoId()->getGrupo(),'DATACENTER')!==false))
        {
            $dql = "SELECT 
                    iip.ip,
                    isr.subred,
                    isr.gateway ,
                    isr.mascara,
                    isr.tipo,
                    iip.estado
                FROM
                    schemaBundle:InfoSubred isr,
                    schemaBundle:InfoIp iip
                WHERE 
                    isr.id = iip.subredId
                AND iip.servicioId = :servicio 
                AND iip.estado = :estado";
        }
        else
        {
            $dql = "SELECT 
                    iip.ip,
                    (SELECT isr.subred FROM schemaBundle:InfoSubred isr WHERE isr.id = iip.subredId) as subred,
                    iip.mascara,
                    iip.gateway,
                    iip.tipoIp as tipo,
                    iip.estado
                FROM
                    schemaBundle:InfoIp iip
                WHERE 
                    iip.servicioId = :servicio 
                AND iip.estado = :estado";
        }
        
        $query->setParameter('servicio', $servicio->getId());
        $query->setParameter('estado', $estado);
        
        if($start!='' && $limit!='') 
        {    
            $query->setFirstResult($start)->setMaxResults($limit);        
        }
        
        $query->setDQL($dql);   
        $arrayIps = $query->getResult();
        $objResultado = array(
                              'total' => count($arrayIps) ,
                              'encontrados'  => $arrayIps
                             );
        return  $objResultado;
    }
    
    /*
     * 
     * @author Verónica Carrasco Idrovo <vcarrasco@telconet.ec>
     * @version 1.1 21-05-2016    
     *                            
     * @since 1.0
     * 
     * @author Jean Pierre Nazareno Martinez <jnazareno@telconet.ec>
     * @version 1.2 20-12-2021 Se lógica para mostrar información de mascara y gateway si lo tiene en la
     * tabla InfoSubred
     * 
     */
    public function getJsonIpPorServicio($servicio, $estado,$start,$limit)
    {
        $objResultado = $this->getIpPorServicio($servicio, $estado,$start,$limit);
        $arrayEncontrados;

        if(!is_null($objResultado["total"]) && $objResultado["total"] > 0)
        {
            foreach ($objResultado["encontrados"] as $objInfoIp)
            {
                $intIp      = $objInfoIp['ip'];
                $intSubred  = $objInfoIp['subred'];
                $intMascara = $objInfoIp['mascara'];
                $intGateway = $objInfoIp['gateway'];
                $strTipo    = $objInfoIp['tipo'];
                $strEstado  = $objInfoIp['estado'];

                if(!is_null($intSubred))
                {

                    $objResultInfoIp  = $this->_em->getRepository("schemaBundle:InfoIp")->findOneBy(
                        array('servicioId'  => $servicio,
                              'ip'          => $intIp,
                              'estado'      => 'Activo'));

                    $objResultSubred = $this->_em->getRepository("schemaBundle:InfoSubred")->find($objResultInfoIp->getSubredId());
                        
                    if(is_object($objResultSubred))
                    {
                        if(is_null($intMascara))
                        {
                            $intMascara = $objResultSubred->getMascara();
                        } 
                        
                        if(is_null($intGateway))
                        {
                            $intGateway = $objResultSubred->getGateway();
                        }
                    }
                }

                $arrayEncontrados[] = array(  'ip'        => $intIp,
                                            'subred'    => $intSubred,
                                            'mascara'   => $intMascara,
                                            'gateway'   => $intGateway,
                                            'tipo'      => $strTipo,
                                            'estado'    => $strEstado
                                        );
            }
        }

        $objResultado = array('total' => $objResultado["total"], 'encontrados'  => $arrayEncontrados);
        
        return json_encode($objResultado);
    }        
    
    public function getIpPublicaPorServicio($idServicio,$start,$limit){
        $qb = $this->_em->createQueryBuilder();
            $qb->select('e')
               ->from('schemaBundle:InfoIp','e');
         
        if($idServicio!=""){
            $qb ->where('e.servicioId = ?1');
            $qb->setParameter(1, $idServicio);
        }
        
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
//        print($qb->getDql());
//        die();
        
        return $query->getResult();
    }
    
    
    /**
     * generarJsonMotivos
     * 
     * Método para obtener un Json de Motivos para Corte de Servicio
     * 
     * @version 1.0
     * 
     * @author Javier Hidalgo <jihidalgo@telconet.ec>
     * @version 1.1 09-12-2021 - Se agrega parámetro que indica si el motivo de corte
     *                           seleccionado es parametrizado para Inauditar un cliente 
     * @since 1.0
     * 
     * @param   string      $accion             accion a realizar en proceso
     * @param   int         $start              numero de inicio
     * @param   int         $limit              numero de fin
     * @return  array       $resultado          
     */
    public function generarJsonMotivos($accion,$start,$limit){
        $arr_encontrados = array();
        
        //$em = $this->getManager('telconet');
        $entidadesTotal = $this->getMotivos($accion, '', '');
        
        $entidad= $this->getMotivos($accion, $start, $limit);
//        error_log('entra');
        
        
        if ($entidad) {
            
            $num = count($entidadesTotal);
            foreach ($entidad as $entity)
            {
                $boolEsMotivoInaudit = false;
                //Se obtiene y se registra en el arr_econtrados[] si el motivo es o no motivo parametrizado 
                $boolEsMotivoInaudit = $this->isMotivoInauditParametrizado($entity['id']); 
                $arr_encontrados[]=array('idMotivo' =>$entity['id'],
                                         'nombreMotivo'=> $entity['nombreMotivo'],
                                         'boolEsMotivoInaudit' => $boolEsMotivoInaudit 
                                        );
            }

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
        
    }
    
    public function getMotivos($accion,$start,$limit){
        $qb = $this->_em->createQueryBuilder();
        if($accion=='getMotivoMigracionHuawei'){
            $qb->select('am.id, am.nombreMotivo')
               ->from('schemaBundle:AdmiMotivo','am')
               ->from('schemaBundle:SistAccion','sa')
               ->from('schemaBundle:SeguRelacionSistema','srs')
               ->andWhere("am.id = 445")
               ->andwhere('am.relacionSistemaId = srs')
               ->andWhere("am.estado = 'Activo'")
               ->andWhere('srs.accionId = sa')
               ->andWhere("sa.estado = 'Activo'");
  
        }
        else{
            $qb->select('am.id, am.nombreMotivo')
               ->from('schemaBundle:AdmiMotivo','am')
               ->from('schemaBundle:SistAccion','sa')
               ->from('schemaBundle:SeguRelacionSistema','srs')
               ->where('am.relacionSistemaId = srs')
               ->andWhere("am.estado = 'Activo'")
               ->andWhere('srs.accionId = sa')
               ->andWhere("sa.estado = 'Activo'")
               ->andWhere('sa.nombreAccion = ?1')
               ->setParameter(1, $accion)     ;        
        }

         
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
        
        return $query->getResult();  
    }

    /**
     * isMotivoInauditParametrizado
     * 
     * Funcion para determinar si el motivo cargado es motivo para Inauditar un cliente
     * 
     * @author Javier Hidalgo <jihidalgo@telconet.ec>
     * @version 1.0 09-12-2021
     * @since 1.0
     * 
     * @param int $intIdMotivo Id del Motivo
     * @return boolean
     */
    public function isMotivoInauditParametrizado($intIdMotivo)
    {
        $objQueryBuilder = $this->_em->createQueryBuilder();
        $objQueryBuilder->select('pd.valor1, pd.descripcion')
               ->from('schemaBundle:AdmiParametroDet','pd')
               ->andWhere("pd.valor1 = ?1")
               ->andWhere("pd.estado = 'Activo'")
               ->andWhere("pd.valor2 = 'MD'")
               ->setParameter(1, $intIdMotivo);  
        $objQuery = $objQueryBuilder->getQuery();
        $objResult = $objQuery->getResult();  
        
        if($objResult != null)
        {
            return true;
        }
        return false;
    }
  
    public function generarJsonMotivosSuspensionTemporal($accion,$nombreModulo,$start,$limit){
        $arr_encontrados = array();
        
        //$em = $this->getManager('telconet');
        $entidadesTotal = $this->getMotivosSuspensionTemporal($accion,$nombreModulo, '', '');
        
        $entidad= $this->getMotivosSuspensionTemporal($accion,$nombreModulo, $start, $limit);
//        error_log('entra');
        
        
        if ($entidad) {
            
            $num = count($entidadesTotal);
            foreach ($entidad as $entity)
            {
                $arr_encontrados[]=array('idMotivo' =>$entity['id'],
                                         'nombreMotivo'=> $entity['nombreMotivo']
                                        );
            }

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
        
    }
    
    public function getMotivosSuspensionTemporal($accion,$nombreModulo,$start,$limit){
        $qb = $this->_em->createQueryBuilder();
            $qb->select('am.id, am.nombreMotivo')
               ->from('schemaBundle:AdmiMotivo','am')
               ->from('schemaBundle:SistAccion','sa')
               ->from('schemaBundle:SeguRelacionSistema','srs')
               ->from('schemaBundle:SistModulo','smod')
               ->where('am.relacionSistemaId = srs')
               ->andWhere("am.estado = 'Activo'")
               ->andWhere('srs.accionId = sa')
               ->andWhere('srs.moduloId = smod')
               ->andWhere("sa.estado = 'Activo'")
               ->andWhere('sa.nombreAccion = ?1')
               ->setParameter(1, $accion)     
               ->andWhere('smod.nombreModulo = ?2')
               ->setParameter(2, $nombreModulo)     ;
         
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
        
        return $query->getResult();  
    }   
    
    public function generarJsonNombresClientes($empresaId,$estado,$start,$limit){
        $arr_encontrados = array();
        
        //$em = $this->getManager('telconet');
        $entidadesTotal = $this->getNombresClientes($empresaId, '', '');
        
        
        $entidad= $this->getNombresClientes($empresaId, $start, '');
//        error_log('entra');
        
        
        if ($entidad) {
            
            $num = count($entidadesTotal);
            foreach ($entidad as $entity)
            {
                
                $nombres = $entity['nombres'];
                $apellidos = $entity['apellidos'];
                $razonSocial = $entity['razonSocial'];
                
                $nombreCompleto = "";
                
                if($razonSocial!=null || $razonSocial!=""){
                    $nombreCompleto = $razonSocial;
                }
                else{
                    
                    $nombreCompleto = $nombres." ".$apellidos;
                }
                
                $arr_encontrados[]=array('idPersona' =>$entity['id'],
                                         'nombreCompleto'=> $nombreCompleto
                                        );
            }

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
        
    }
    
    public function getNombresClientes($empresa,$start,$limit){
        $qb = $this->_em->createQueryBuilder();
            $qb->select('infoPersona.id,infoPersona.nombres, infoPersona.apellidos, infoPersona.razonSocial')
               ->from('schemaBundle:AdmiTipoRol','admiTipoRol')
               ->from('schemaBundle:AdmiRol','admiRol')
               ->from('schemaBundle:InfoEmpresaRol','infoEmpresaRol')
               ->from('schemaBundle:InfoPersonaEmpresaRol','infoPersonaEmpresaRol')
               ->from('schemaBundle:InfoPersona','infoPersona')
               ->where('infoPersona = infoPersonaEmpresaRol.personaId')
               //->andWhere("infoPersona.estado = 'Activo'")
               ->andWhere('infoEmpresaRol = infoPersonaEmpresaRol.empresaRolId')
               ->andWhere('infoEmpresaRol.rolId = admiRol')
               ->andWhere('infoEmpresaRol.empresaCod = ?1')
               ->setParameter(1, $empresa)
               ->andWhere('admiRol.tipoRolId = admiTipoRol')
               ->andWhere("admiTipoRol.descripcionTipoRol = 'Cliente'");
         
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        
        $query = $qb->getQuery();
        
//        print($query->getSQL());
//        die();
        
        return $query->getResult();  
    }
    
    public function generarJsonPop($empresa, $estado, $start, $limit, $emInfraestructura){
        $arr_encontrados = array();
        
        //$em = $this->getManager('telconet');
        $entidadesTotal = $this->getPop($estado, '', '');
        
        $entidad= $this->getPop($estado,$start,$limit);
//        error_log('entra');
        
        
        if ($entidad) {
            
            $num = count($entidadesTotal);
            foreach ($entidad as $entity)
            {
                
                
                $relacionElemento = $emInfraestructura->getRepository('schemaBundle:InfoEmpresaElemento')->findOneBy(array( "elementoId" => $entity->getId()));
                $empresaId = $relacionElemento->getEmpresaCod();
                
                if($empresaId==$empresa){
                    
                    
                    $pop = $emInfraestructura->find('schemaBundle:InfoElemento', $entity->getId());
                    $nombrePop = $pop->getNombreElemento();
                    
                    
                    $arr_encontrados[]=array('idElementoPop' =>$pop->getId(),
                                         'nombreElementoPop'=> $nombrePop
                                        );
                }
                
                
            }
            

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    
    public function getPop($estado,$start,$limit){
        $qb = $this->_em->createQueryBuilder();
            $qb->select('elemento')
               ->from('schemaBundle:InfoElemento','elemento')
               ->from('schemaBundle:AdmiTipoElemento','tipo')
               ->from('schemaBundle:AdmiModeloElemento','modelo')
               ->where("tipo.nombreTipoElemento='POP'")
               ->andWhere("tipo = modelo.tipoElementoId")
               ->andWhere("modelo = elemento.modeloElementoId")
               ->andWhere("elemento.estado = 'Activo'");
                    
        
//        if($estado!=""){
//            $qb ->andWhere('elemento.estado = ?2');
//            $qb->setParameter(2, $estado);
//        }
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
        
        return $query->getResult();
    }
    
    public function generarJsonRadio($empresa, $estado, $start, $limit, $emInfraestructura){
        $arr_encontrados = array();
        
        //$em = $this->getManager('telconet');
        $entidadesTotal = $this->getRadio($estado, '', '');
        
        $entidad= $this->getRadio($estado,$start,$limit);
//        error_log('entra');
        
        
        if ($entidad) {
            
            $num = count($entidadesTotal);
            foreach ($entidad as $entity)
            {
                
                
                $relacionElemento = $emInfraestructura->getRepository('schemaBundle:InfoEmpresaElemento')->findOneBy(array( "elementoId" => $entity->getId()));
                $empresaId = $relacionElemento->getEmpresaCod();
                
                if($empresaId==$empresa){
                    
                    
                    $radio = $emInfraestructura->find('schemaBundle:InfoElemento', $entity->getId());
                    $nombreRadio = $radio->getNombreElemento();
                    
                    $arr_encontrados[]=array('idElementoRadio' =>$radio->getId(),
                                         'nombreElementoRadio'=> $nombreRadio
                                        );
                }
                
                
            }
            

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    
    public function getRadio($estado, $start,$limit){
        $qb = $this->_em->createQueryBuilder();
            $qb->select('elemento')
               ->from('schemaBundle:InfoElemento','elemento')
               ->from('schemaBundle:AdmiTipoElemento','tipo')
               ->from('schemaBundle:AdmiModeloElemento','modelo')
               ->where("tipo.nombreTipoElemento='RADIO'")
               ->andWhere("tipo = modelo.tipoElementoId")
               ->andWhere("modelo = elemento.modeloElementoId");

		if($estado!=""){
            $qb ->andWhere('elemento.estado = ?2');
            $qb->setParameter(2, $estado);
        }
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
        
        return $query->getResult();
    }
    
    /**
     * generarJsonElementosPorEmpresa
     * 
     * Funcion que sirve para genera un json con los elementos buscados
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 13-01-2015
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 12-07-2018    Se agrega programación para manejar nueva consulta de información
     *                            en busqueda de elementos en el grid técnico de clientes
     * @since 1.0
     * 
     * @param Array $arrayParametros [
     *                                  strNombreElemento   Nombre del elemento a buscar
     *                                  strIp               Ip por la cual se desea filtrar
     *                                  strTipoElemento     Tipo del elemento consultado
     *                                  strEmpresaCod       Estado del elemento a buscar
     *                                  strEstado           Empresa por la cual se desean filtrar los elementos
     *                                  intStart            Parametro inicio de paginación
     *                                  intLimit            Parametro fin de paginación
     *                                  strTipoEjecucion    Parametro que indica el tipo de ejecución
     *                               ]
     */
    public function generarJsonElementosPorEmpresa($arrayParametros)
    {
        $arrayEncontrados = array();
        $arrayResult      = array();
        $arrayResultado   = array();
        $strModuloTecnico = "NO";
        if (isset($arrayParametros['strTipoEjecucion'])  && 
            !empty($arrayParametros['strTipoEjecucion']) && 
            $arrayParametros['strTipoEjecucion'] == 'ModuloTecnicoClientes')
        {
            $strModuloTecnico      = "SI";
            $arrayParametrosSimple = array();
            $arrayParametrosSimple['strNombreElemento'] = $arrayParametros['strNombreElemento'];
            $arrayParametrosSimple['strIp']             = $arrayParametros['strIp'];
            $arrayParametrosSimple['strTipoElemento']   = $arrayParametros['strTipoElemento'];
            $arrayParametrosSimple['strEstado']         = $arrayParametros['strEstado'];
            $arrayParametrosSimple['strEmpresaCod']     = $arrayParametros['strEmpresaCod'];
            $arrayParametrosSimple['intStart']          = $arrayParametros['intStart'];
            $arrayParametrosSimple['intLimit']          = $arrayParametros['intLimit'];
            
            $arrayResult = $this->getElementosPorParametros($arrayParametrosSimple);
        }
        else
        {
            $arrayResult = $this->getElementosPorEmpresa($arrayParametros['strNombreElemento'],
                                                         $arrayParametros['strIp'],
                                                         $arrayParametros['strTipoElemento'],
                                                         $arrayParametros['strEstado'],
                                                         $arrayParametros['strEmpresaCod'],
                                                         $arrayParametros['intStart'],
                                                         $arrayParametros['intLimit']);
        }
        
        $arrayRegEncontrados = $arrayResult['registros'];
        $intEncontradosTotal = $arrayResult['total'];
        
        if ($arrayRegEncontrados)
        {
            $intNum = $intEncontradosTotal;
            foreach ($arrayRegEncontrados as $entityRegistro)
            {
                if ($strModuloTecnico == "SI")
                {
                    $arrayEncontrados[] = array('idElemento'       => $entityRegistro['idElemento'],
                                                'nombreElemento'   => $entityRegistro['nombreElemento'],
                                                'modeloElemento'   => $entityRegistro['nombreModeloElemento'],
                                                'ip'               => $entityRegistro['ip'],
                                                'estado'           => $entityRegistro['estado']
                                               ); 
                }
                else
                {
                    $arrayEncontrados[] = array('idElemento'       => $entityRegistro->getId(),
                                                'nombreElemento'   => $entityRegistro->getNombreElemento(),
                                                'modeloElemento'   => $entityRegistro->getNombreModeloElemento(),
                                                'ip'               => $entityRegistro->getIp(),
                                                'estado'           => $entityRegistro->getEstadoElemento()
                                               );    
                }
                            
            }

            if($intNum == 0)
            { 
                $arrayResultado= array( 'total'       => 1 ,
                                        'encontrados' => array('idElemento'        => 0 , 
                                                               'nombreElemento'    => 'Ninguno',
                                                               'modeloElemento'    => 'Ninguno' , 
                                                               'ip'                => 'Ninguno', 
                                                               'estado'            => 'Ninguno'));
                $arrayResultado = json_encode( $arrayResultado);
                return $arrayResultado;
            }
            else
            {
                $strJsonData    = json_encode($arrayEncontrados);
                $arrayResultado = '{"total":"'.$intNum.'","encontrados":'.$strJsonData.'}';
                return $arrayResultado;
            }
        }
        else
        {
            $arrayResultado = '{"total":"0","encontrados":[]}';
            return $arrayResultado;
        }
    }
    
    /**
     * Funcion que arma y ejecuta el query para obtener elementos
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 26-06-2018 Se quito el upper y el % inicial del like para optimizar el query
     * 
     * @author Creado Francisco Adum <fadum@telconet.ec>
     * @param   String      $nombreElemento     nombre del elemento
     * @param   String      $ip                 ip del elemento
     * @param   String      $estado             estado del elemento
     * @param   int         $start              numero de inicio
     * @param   int         $limit              numero de fin
     */
    public function getElementosPorEmpresa($nombreElemento, $ip, $tipoElemento, $estado, $empresa, $start, $limit)
    {
        $qb = $this->_em->createQueryBuilder();
        $qbC = $this->_em->createQueryBuilder();
        
        $qb->select('e')
            ->from('schemaBundle:VistaElementos', 'e');
        $qb->where("e.empresaCod = ?5")
           ->setParameter(5, $empresa);
        
        $qbC->select('count(e.id)')
            ->from('schemaBundle:VistaElementos', 'e');
        $qbC->where("e.empresaCod = ?5")
           ->setParameter(5, $empresa);
          
        $qb->andWhere("e.nombreTipoElemento=?1")
           ->setParameter(1, $tipoElemento);
        $qbC->andWhere("e.nombreTipoElemento=?1")
           ->setParameter(1, $tipoElemento);

        if($nombreElemento != "")
        {
            $qb->andWhere('e.nombreElemento like ?2');
            $qb->setParameter(2, $nombreElemento."%");
            
            $qbC->andWhere('e.nombreElemento like ?2');
            $qbC->setParameter(2, $nombreElemento."%");
        }
        if($estado != "Todos")
        {
            $qb->andWhere('e.estadoElemento = ?3');
            $qb->setParameter(3, $estado);
            
            $qbC->andWhere('e.estadoElemento = ?3');
            $qbC->setParameter(3, $estado);
        }
        if($ip != "")
        {
            $qb->andWhere('e.ip like ?4');
            $qb->setParameter(4, "%".$ip."%");
            
            $qbC->andWhere('e.ip like ?4');
            $qbC->setParameter(4, "%".$ip."%");
        }

        if($start != '')
            $qb->setFirstResult($start);
        if($limit != '')
            $qb->setMaxResults($limit);
        
        //total de objetos
        $total = $qbC->getQuery()->getSingleScalarResult();
        
        //obtener los objetos
        $query = $qb->getQuery();
        $datos = $query->getResult();
        
        $resultado['registros']=$datos;
        $resultado['total']=$total;

        return $resultado;
    }
    
    /**
     * getElementosPorParametros
     * 
     * Función que arma y ejecuta el query para obtener elementos sin consumir VistaElementos
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 11-07-2018 
     * @since 1.0
     * 
     * Costo: 10
     * 
     * @param  Array $arrayParametros [
     *                                  strNombreElemento   Nombre del elemento a buscar
     *                                  strIp               Ip por la cual se desea filtrar
     *                                  strTipoElemento     Tipo del elemento consultado
     *                                  strEstado           Estado del elemento a buscar
     *                                  strEmpresaCod       Empresa por la cual se desean filtrar los elementos
     *                                  intStart            Parametro inicio de paginación
     *                                  intLimit            Parametro fin de paginación
     *                                ]
     * @return $arrayResultado
     */
    public function getElementosPorParametros($arrayParametros)
    {
        $objQuery       = $this->_em->createQuery(null);
        $objQueryCount  = $this->_em->createQuery(null);
        $arrayResultado = array();
        try
        {
            $strSelect = "SELECT elemento.id idElemento,
                            elemento.nombreElemento,
                            modeloElemento.nombreModeloElemento,
                            ipElemento.ip,
                            elemento.estado ";

            $strSelectCount = "SELECT count(elemento.id) ";

            $strFrom = " FROM schemaBundle:InfoElemento elemento
                          INNER JOIN schemaBundle:AdmiModeloElemento modeloElemento WITH elemento.modeloElementoId = modeloElemento.id
                          INNER JOIN schemaBundle:AdmiTipoElemento tipoElemento WITH modeloElemento.tipoElementoId = tipoElemento.id
                          INNER JOIN schemaBundle:InfoEmpresaElementoUbica elementoUbica WITH  elementoUbica.elementoId = elemento.id 
                          LEFT JOIN schemaBundle:InfoIp ipElemento WITH ipElemento.elementoId = elemento.id 
                         WHERE tipoElemento.nombreTipoElemento  = :nombreTipoElementoParam 
                         AND elementoUbica.empresaCod = :empresaCodParam";

            $objQuery->setParameter("empresaCodParam", $arrayParametros['strEmpresaCod']);
            $objQueryCount->setParameter("empresaCodParam", $arrayParametros['strEmpresaCod']);
            $objQuery->setParameter("nombreTipoElementoParam", $arrayParametros['strTipoElemento']);
            $objQueryCount->setParameter("nombreTipoElementoParam", $arrayParametros['strTipoElemento']);

            if(isset($arrayParametros['strNombreElemento']) &&  !empty($arrayParametros['strNombreElemento']))
            {
                $strFrom .= " AND elemento.nombreElemento like :nombreElementoParam ";
                $objQuery->setParameter("nombreElementoParam", $arrayParametros['strNombreElemento']."%");
                $objQueryCount->setParameter("nombreElementoParam", $arrayParametros['strNombreElemento']."%");

            }

            if(isset($arrayParametros['strEstado']) &&  $arrayParametros['strEstado'] != "Todos" )
            {
                $strFrom .= " AND elemento.estado = :estadoElementoParam ";
                $objQuery->setParameter("estadoElementoParam", $arrayParametros['strEstado']);
                $objQueryCount->setParameter("estadoElementoParam", $arrayParametros['strEstado']);
            }

            if(isset($arrayParametros['strIp']) &&  !empty($arrayParametros['strIp']))
            {
                $strFrom .= " AND ipElemento.ip like :ipElementoParam ";
                $objQuery->setParameter("ipElementoParam", "%".$arrayParametros['strIp']."%");
                $objQueryCount->setParameter("ipElementoParam", "%".$arrayParametros['strIp']."%");
            }

            $objQueryCount->setDQL($strSelectCount . $strFrom);
            $intTotal = $objQueryCount->getSingleScalarResult();
            $objQuery->setDQL($strSelect . $strFrom);
            if(isset($arrayParametros['intStart']) &&  !empty($arrayParametros['intStart']))
            {
                $objQuery->setFirstResult($arrayParametros['intStart']);
            }
            if(isset($arrayParametros['intLimit']) &&  !empty($arrayParametros['intLimit']))
            {
                $objQuery->setMaxResults($arrayParametros['intLimit']);
            }
            $arrayDatos = $objQuery->getResult();
        }
        catch (\Exception $objEx)
        {
            error_log($objEx->getMessage());
            $arrayDatos = array();
            $intTotal   = 0;
        }
        $arrayResultado['registros'] = $arrayDatos;
        $arrayResultado['total']     = $intTotal;

        return $arrayResultado;
    }

    /**
     * Funcion que genera el json de los elementos por tipo
     *
     * @author Modificado John Vera <javera@telconet.ec>
     * @param   array
     * @version 1.1 30-12-2015
     *
     * @author Modificado Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 28-03-2016   Se agrega validación para operaciones de cambio de linea pom y cambio de puerto
     *
     * @author Jesus Bozada
     * @version 1.3 06-04-2016   Se agrega validación para operaciones de cambio de linea pom y cambio de puerto (se soporte un escenario adicional)
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 19-02-2018 Se elimina filtro de jurisdicción y se agrega filtro de middleware para los olts
     *                         cuando el servicio sea Internet Small Business
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.5 28-11-2018 Se agregan validaciones para gestionar productos de la empresa TNP
     * @since 1.4
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.6 21-05-2020 Se modifica envío de parámetros a la función getElementosPorTipo 
     * 
     * @author Jose Giler <jdgiler@telconet.ec>
     * @version 1.7 15/11/2021 Se modifica envío de parámetro para campo indisponibilidad
     * 
     * @author Manuel Adrian Carpio Moran <mcarpio@telconet.ec>
     * @version 1.7 15/11/2021 Se agrega  un array de envio de parametros
     *          para consumo del metodo que retorna los OLT multiplataforma
     * 
     * @author Jenniffer Mujica <jmujica@telconet.ec>
     * @version 1.8 6/2/2023 Se modifica envio de parametro a la funcion getElementoOltsMultiplatafroma
     *          para consultar olt multiplataforma por marca.
     * 
     * @author Jonathan Mazón Sánchez <jmazon@telconet.ec>
     * @version 1.9 02/03/2023 Se agrega validación de la empresa Ecuanet para eliminar filtro de jurisdicción.
     * 
     */
    public function generarJsonElementosPorTipo($arrayParametros)
    {
        $idServicio             = $arrayParametros['idServicio'];
        $strNombreElemento      = $arrayParametros['nombreElemento'];
        $strNombreModeloElemento= $arrayParametros['nombreModeloElemento'];
        $strNombreMarcaElemento = $arrayParametros['nombreMarcaElemento'];
        $strTipoElemento        = $arrayParametros['tipoElemento'];
        $strCodEmpresa          = $arrayParametros['empresa'];
        $strEstado              = $arrayParametros['estado'];
        $intStart               = $arrayParametros['start'];
        $limit                  = $arrayParametros['limit'];
        $emInfraestructura      = $arrayParametros['emInfraestructura'];
        $emComercial            = $arrayParametros['emComercial'];
        $validaTnp              = $arrayParametros['validaTnp'];
        $strEsIsb               = $arrayParametros['esIsb'];
        $strTipoRed             = $arrayParametros['tipoRed'];
        $strPrefijoEmpresa      = $arrayParametros['prefijoEmpresa'];
        $strEmpresasIndisponibilidad = $arrayParametros['strEmpresasIndisponibilidad'];
        $intNumEntidadesTotal   = 0;
        $arrayEncontrados       = array();
        if($idServicio!="")
        {
            $servicio       = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
            $objServicioTec = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($idServicio);

            if(isset($strTipoRed) && !empty($strTipoRed) && $strEsIsb != "SI" && $strTipoRed === "GPON_MPLS")
            {
                $objDetElemClie = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                ->findOneBy(array('elementoId'    => $objServicioTec->getElementoId(),
                                                                  'detalleNombre' => 'MULTIPLATAFORMA',
                                                                  'detalleValor'  => 'SI' ));
            }
            else
            {
                $objDetElemClie = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                ->findOneBy(array('elementoId'    => $objServicioTec->getElementoId(),
                                                                  'detalleNombre' => 'OLT MIGRADO CNR',
                                                                  'detalleValor'  => 'SI' ));
            }
            if($strEsIsb === "SI" || $strCodEmpresa == '26' || $strPrefijoEmpresa == 'EN')
            {
                $strJurisdiccion = "";
            }
            else
            {
                $objJurisdiccion    = $servicio->getPuntoId()->getPuntoCoberturaId();
                $strJurisdiccion    = $objJurisdiccion->getId();
            }

            if((isset($strCodEmpresa) && !empty($strCodEmpresa) && $strCodEmpresa === '10') &&
               (isset($strTipoRed) && !empty($strTipoRed)  && $strTipoRed === "GPON_MPLS"))
            {
                if(($strEsIsb != "SI" && $strPrefijoEmpresa === "TN") &&
                   (isset($strPrefijoEmpresa) && !empty($strPrefijoEmpresa)))
                {
                    $arrayEntidadesTotal = $this->getElementoOltsMultiplatafroma(array( 
                                                                                        "strDetalleNombre"     => 'MULTIPLATAFORMA',
                                                                                        "strNombreMarcaElemento"    => $strNombreMarcaElemento,
                                                                                        "strNombreTipoElemento"     => 'OLT',
                                                                                        "strNombreElemento"         => strtoupper($strNombreElemento),
                                                                                        "intStart"                  => '',
                                                                                        "intLimit"                  => ''));
                                                                                        
                    $arrayEntidades     = $this->getElementoOltsMultiplatafroma(array( 
                                                                                        "strDetalleNombre"     => 'MULTIPLATAFORMA',
                                                                                        "strNombreMarcaElemento"    => $strNombreMarcaElemento,
                                                                                        "strNombreTipoElemento"     => 'OLT',
                                                                                        "strNombreElemento"         => strtoupper($strNombreElemento),
                                                                                        "intStart"                  => '',
                                                                                        "intLimit"                  => ''));
                }
            }
            else
            {
                $arrayEntidadesTotal    = $this->getElementosPorTipo(array(
                                                                            "strTipoElemento"           => $strTipoElemento,
                                                                            "strNombreElemento"         => strtoupper($strNombreElemento),
                                                                            "strNombreModeloElemento"   => $strNombreModeloElemento,
                                                                            "strNombreMarcaElemento"    => $strNombreMarcaElemento,
                                                                            "intIdJurisdiccion"         => $strJurisdiccion,
                                                                            "strEstado"                 => $strEstado,
                                                                            "strCodEmpresa"             => $strCodEmpresa,
                                                                            "intStart"                  => '',
                                                                            "intLimit"                  => ''));
                $arrayEntidades         = $this->getElementosPorTipo(array(
                                                                            "strTipoElemento"           => $strTipoElemento,
                                                                            "strNombreElemento"         => strtoupper($strNombreElemento),
                                                                            "strNombreModeloElemento"   => $strNombreModeloElemento,
                                                                            "strNombreMarcaElemento"    => $strNombreMarcaElemento,
                                                                            "intIdJurisdiccion"         => $strJurisdiccion,
                                                                            "strEstado"                 => $strEstado,
                                                                            "strCodEmpresa"             => $strCodEmpresa,
                                                                            "intStart"                  => $intStart,
                                                                            "intLimit"                  => 300));
            }
        }
        else
        {
            if((isset($strCodEmpresa) && !empty($strCodEmpresa) && $strCodEmpresa === '10') &&
            (isset($strTipoRed) && !empty($strTipoRed)  && $strTipoRed === "GPON_MPLS"))
         {
             if(($strEsIsb != "SI" && $strPrefijoEmpresa === "TN") &&
                (isset($strPrefijoEmpresa) && !empty($strPrefijoEmpresa)))
             {
                 $arrayEntidadesTotal = $this->getElementoOltsMultiplatafroma(array( 
                                                                                     "strDetalleNombre"     => 'MULTIPLATAFORMA',
                                                                                     "strNombreMarcaElemento"    => $strNombreMarcaElemento,
                                                                                     "strNombreTipoElemento"     => 'OLT',
                                                                                     "strNombreElemento"         => strtoupper($strNombreElemento),
                                                                                     "intStart"                  => '',
                                                                                     "intLimit"                  => ''));
                                                                                     
                 $arrayEntidades     = $this->getElementoOltsMultiplatafroma(array( 
                                                                                     "strDetalleNombre"     => 'MULTIPLATAFORMA',
                                                                                     "strNombreMarcaElemento"    => $strNombreMarcaElemento,
                                                                                     "strNombreTipoElemento"     => 'OLT',
                                                                                     "strNombreElemento"         => strtoupper($strNombreElemento),
                                                                                     "intStart"                  => '',
                                                                                     "intLimit"                  => ''));
             }
         }
         else
         {
                 $arrayEntidadesTotal    = $this->getElementosPorTipo(array(
                                                                                "strTipoElemento"           => $strTipoElemento,
                                                                                "strNombreElemento"         => strtoupper($strNombreElemento),
                                                                                "strNombreModeloElemento"   => $strNombreModeloElemento,
                                                                                "strNombreMarcaElemento"    => $strNombreMarcaElemento,
                                                                                "intIdJurisdiccion"         => "",
                                                                                "strEstado"                 => $strEstado,
                                                                                "strCodEmpresa"             => $strCodEmpresa,
                                                                                "intStart"                  => '',
                                                                                "intLimit"                  => '',
                                                                                "strEmpresasIndisponibilidad"  => $strEmpresasIndisponibilidad));
                 $arrayEntidades         = $this->getElementosPorTipo(array(
                                                                                "strTipoElemento"           => $strTipoElemento,
                                                                                "strNombreElemento"         => strtoupper($strNombreElemento),
                                                                                "strNombreModeloElemento"   => $strNombreModeloElemento,
                                                                                "strNombreMarcaElemento"    => $strNombreMarcaElemento,
                                                                                "intIdJurisdiccion"         => "",
                                                                                "strEstado"                 => $strEstado,
                                                                                "strCodEmpresa"             => $strCodEmpresa,
                                                                                "intStart"                  => $intStart,
                                                                                "intLimit"                  => 300,
                                                                                "strEmpresasIndisponibilidad"  => $strEmpresasIndisponibilidad));
         }
        }

        if ($arrayEntidades)
        {
            if ($validaTnp == 'SI')
            {
                foreach ($arrayEntidades as $entity)
                {
                    if((isset($strCodEmpresa) && !empty($strCodEmpresa) && $strCodEmpresa === '10') &&
                    (isset($strTipoRed) && !empty($strTipoRed)  && $strTipoRed === "GPON_MPLS"))
                 {
                     if(($strEsIsb != "SI" && $strPrefijoEmpresa === "TN") &&
                        (isset($strPrefijoEmpresa) && !empty($strPrefijoEmpresa)))
                     {
                        $objDetElemento = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                    ->findOneBy(array('elementoId'    => $entity['id'],
                                                                    'detalleNombre' => 'MULTIPLATAFORMA',
                                                                    'detalleValor'  => 'SI' ));

                        $objDetMiddlewareOlt = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                    ->findOneBy(array( 'elementoId'    => $entity['id'],
                                                                        'detalleNombre' => 'MIDDLEWARE',
                                                                        'detalleValor'  => 'SI',
                                                                        'estado'        => 'Activo'));
                     }
                }
                else
                {
                        $objDetElemento = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                    ->findOneBy(array('elementoId'    => $entity->getId(),
                                                                    'detalleNombre' => 'OLT MIGRADO CNR',
                                                                    'detalleValor'  => 'SI' ));

                        $objDetMiddlewareOlt = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                    ->findOneBy(array( 'elementoId'    => $entity->getId(),
                                                                        'detalleNombre' => 'MIDDLEWARE',
                                                                        'detalleValor'  => 'SI',
                                                                        'estado'        => 'Activo'));
                }
                    //validacion para elemento migrados y no migrados a nuevos planes
                    if((($objDetElemClie && $objDetElemento) || (!$objDetElemClie && !$objDetElemento))
                        && (($strEsIsb === "SI" && is_object($objDetMiddlewareOlt)) || $strEsIsb !== "SI" 
                        && $strTipoRed != "GPON_MPLS"))
                    {
                        $arrayEncontrados[] = array('idElemento'     => $entity->getId(),
                                                    'nombreElemento' => $entity->getNombreElemento(),
                                                    'modeloElemento' => $entity->getNombreModeloElemento(),
                                                    'ip'             => $entity->getIp(),
                                                    'estado'         => $entity->getEstadoElemento()
                                                   );
                        $intNumEntidadesTotal++;
                    }else if(((isset($strCodEmpresa) && !empty($strCodEmpresa) && $strCodEmpresa === '10') &&
                    (isset($strTipoRed) && !empty($strTipoRed)  && $strTipoRed === "GPON_MPLS")) &&
                    (($strEsIsb != "SI" && $strPrefijoEmpresa === "TN") &&
                    (isset($strPrefijoEmpresa) && !empty($strPrefijoEmpresa))))
                    {
                        $arrayEncontrados[] = array('idElemento'     => $entity['id'],
                                                    'nombreElemento' => $entity['nombreElemento'],
                                                    'modeloElemento' => $entity['nombreModeloElemento'],
                                                    'ip'             => $entity['ip'],
                                                    'estado'         => $entity['estado']
                                                   );
                        $intNumEntidadesTotal++;
                    }
                }
            }
            else
            {
                $intNumEntidadesTotal = count($arrayEntidadesTotal);
                foreach($arrayEntidades as $entity)
                {
                    $arrayEncontrados[] = array('idElemento'     => $entity->getId(),
                                                'nombreElemento' => $entity->getNombreElemento(),
                                                'modeloElemento' => $entity->getNombreModeloElemento(),
                                                'ip'             => $entity->getIp(),
                                                'estado'         => $entity->getEstadoElemento()
                                               );
                }
            }
            if($intNumEntidadesTotal == 0)
            {
               $arrayResultado  = array('total' => 1 ,
                                        'encontrados' => array('idConectorInterface'     => 0 ,
                                                               'nombreConectorInterface' => 'Ninguno',
                                                               'idConectorInterface'     => 0 ,
                                                               'nombreConectorInterface' => 'Ninguno',
                                                               'estado'                  => 'Ninguno'));
                $strResultado   = json_encode($arrayResultado);
                return $strResultado;
            }
            else
            {
                $strResultado   = '{"total":"'.$intNumEntidadesTotal.'","encontrados":'.json_encode($arrayEncontrados).'}';
                return $strResultado;
            }
        }
        else
        {
            $strResultado   = '{"total":"0","encontrados":[]}';
            return $strResultado;
        }
    }

    /**
     * Funcion que genera el json de los elementos por tipo para OLT 
     * multiplatafor tecnologias GPON_MPLS
     *
     * @author Manuel Adrian Carpio Moran <mcarpio@telconet.ec>
     * @param   array
     * @version 1.0 25-08-2022
     *
     **/
    public function getElementoOltsMultiplatafroma($arrayParametros)
    {
        try
        {
            $objQuery = $this->_em->createQuery();
            $strSql          = "SELECT elemento.id id, 
                                       elemento.nombreElemento nombreElemento, 
                                       modeloElemento.nombreModeloElemento nombreModeloElemento,
                                       iip.ip ip, 
                                       elemento.estado estado
                                FROM 
                                    schemaBundle:AdmiTipoElemento tipoElemento,
                                    schemaBundle:AdmiMarcaElemento marcaElemento,
                                    schemaBundle:AdmiModeloElemento modeloElemento,
                                    schemaBundle:InfoElemento elemento
                                    INNER JOIN schemaBundle:InfoDetalleElemento detalleElemento WITH elemento.id = detalleElemento.elementoId
                                    LEFT JOIN schemaBundle:InfoIp iip WITH ( elemento.id = iip.elementoId AND iip.estado = :ESTADO_IP)
                                    WHERE tipoElemento.id                 = modeloElemento.tipoElementoId
                                    AND marcaElemento.id                  = modeloElemento.marcaElementoId
                                    AND modeloElemento.id                 = elemento.modeloElementoId
                                    AND detalleElemento.detalleNombre     = :DETALLE_NOMBRE
                                    AND detalleElemento.detalleValor      = :DETALLE_VALOR
                                    AND detalleElemento.estado            = :ESTADO_ELEMENTO
                                    AND marcaElemento.nombreMarcaElemento = :NOMBRE_MARCA_ELEMENTO
                                    AND tipoElemento.nombreTipoElemento   = :NOMBRE_TIPO_ELEMENTO ";

            if(is_array($arrayParametros) && $arrayParametros)
            {
                $objQuery->setParameter("ESTADO_IP", 'Activo');

                if(isset($arrayParametros['strDetalleNombre']) && !empty($arrayParametros['strDetalleNombre']))
                {
                    $objQuery->setParameter("DETALLE_NOMBRE", $arrayParametros['strDetalleNombre']);
                }  
                
                $objQuery->setParameter("DETALLE_VALOR", 'SI');                
                $objQuery->setParameter("ESTADO_ELEMENTO",     'Activo');

                if(isset($arrayParametros['strNombreMarcaElemento']) && !empty($arrayParametros['strNombreMarcaElemento']))
                {
                    $objQuery->setParameter("NOMBRE_MARCA_ELEMENTO", $arrayParametros['strNombreMarcaElemento']);
                } 

                if(isset($arrayParametros['strNombreTipoElemento']) && !empty($arrayParametros['strNombreTipoElemento']))
                {
                    $objQuery->setParameter("NOMBRE_TIPO_ELEMENTO",   $arrayParametros['strNombreTipoElemento']);
                }
                
                if(isset($arrayParametros['strNombreElemento']) && !empty($arrayParametros['strNombreElemento']))
                {
                    $strSql = $strSql.'AND UPPER(elemento.nombreElemento) LIKE :NOMBRE_ELEMENTO';
                    $objQuery->setParameter("NOMBRE_ELEMENTO",   '%'.$arrayParametros['strNombreElemento'].'%');
                }

                $strSql = $strSql.' GROUP BY elemento.id, 
                                             elemento.nombreElemento, 
                                             modeloElemento.nombreModeloElemento, 
                                             elemento.estado, 
                                             iip.ip ';
                $objQuery->setDQL($strSql);
    
                if(isset($arrayParametros['intStart']) && !empty($arrayParametros['intStart']))
                {
                    $objNativeQuery->setFirstResult($arrayParametros['intStart']);
                }   
                if(isset($arrayParametros['intLimit']) && !empty($arrayParametros['intLimit']))
                {
                    $objNativeQuery->setMaxResults($arrayParametros['intLimit']);
                }
                return $objQuery->getResult();
            }
        }
        catch (\Exception $e)
        {
            $arrayResultado = array(
                'status' => 'ERROR',
                'result' => $e->getMessage()
            );
            return $arrayResultado;
        }
    }

   /**
     * Función que retorna los elementos por el tipo del elemento
     *
     * @param Integer    $tipoElemento
     * @param String     $nombreElemento
     * @param String     $nombreModeloElemento
     * @param Integer    $jurisdiccion
     * @param String     $estado
     * @param String     $empresa
     * @param Integer    $start
     * @param Integer    $limit
     *
     * @return object $query->getResult()
     * @version 1.0 Versión Inicial
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 21-11-2018
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.2 14-06-2019 - Se la clausula where para incluir los elementos en estado "Restringido".
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 21-05-2020 Se modifica envío de parámetros a la función getElementosPorTipo
     * 
     * @author Jose Giler <jdgiler@telconet.ec>nulo
     * @version 1.7 15-11-2021 Se modifica para que en caso de que parametro empresa este nulo muestre solo las relacionadas a 10 y 18
     *                         Se modifica agregando % al inicio del like de nombreElemento
     */
    public function getElementosPorTipo($arrayParametros)
    {
        $strTipoElemento            = $arrayParametros["strTipoElemento"];
        $strNombreElemento          = $arrayParametros["strNombreElemento"];
        $strNombreModeloElemento    = $arrayParametros["strNombreModeloElemento"];
        $strNombreMarcaElemento     = $arrayParametros["strNombreMarcaElemento"];
        $intIdJurisdiccion          = $arrayParametros["intIdJurisdiccion"];
        $strEstado                  = $arrayParametros["strEstado"];
        $strCodEmpresa              = $arrayParametros["strCodEmpresa"];
        $intStart                   = $arrayParametros["intStart"];
        $intLimit                   = $arrayParametros["intLimit"];
        $strEmpresasIndisponibilidad   = $arrayParametros["strEmpresasIndisponibilidad"];

        $objQueryBuilder = $this->_em->createQueryBuilder();
        $objQueryBuilder->select('e')->from('schemaBundle:VistaElementos', 'e');

        
        if(isset($strCodEmpresa) && !empty($strCodEmpresa))
        {
            $objQueryBuilder->where("e.empresaCod = '" . $strCodEmpresa . "'");
        }
        else
        {
            $objQueryBuilder->where("e.empresaCod in (" . $strEmpresasIndisponibilidad . ")");
        }
        
        $objQueryBuilder->andWhere("e.estadoElemento IN ('Activo', 'Restringido')");

        if($strTipoElemento != "Todos")
        {
            $objQueryBuilder->andWhere('e.nombreTipoElemento = ?1');
            $objQueryBuilder->setParameter(1, $strTipoElemento);
        }
        if(isset($intIdJurisdiccion) && !empty($intIdJurisdiccion))
        {
            $objQueryBuilder->andWhere('e.idJurisdiccion = ?2');
            $objQueryBuilder->setParameter(2, $intIdJurisdiccion);
        }
        if($strEstado != "Todos")
        {
            $objQueryBuilder->andWhere('e.estadoElemento = ?3');
            $objQueryBuilder->setParameter(3, $strEstado);
        }
        if(isset($strNombreElemento) && !empty($strNombreElemento))
        {
            $objQueryBuilder->andWhere('UPPER(e.nombreElemento) like ?4');
            $objQueryBuilder->setParameter(4, "%" . $strNombreElemento . "%");
        }
        if(isset($strNombreModeloElemento) && !empty($strNombreModeloElemento))
        {
            $objQueryBuilder->andWhere('UPPER(e.nombreModeloElemento) like ?5');
            $objQueryBuilder->setParameter(5, $strNombreModeloElemento . "%");
        }
        if(isset($strNombreMarcaElemento) && !empty($strNombreMarcaElemento))
        {
            $objQueryBuilder->andWhere('UPPER(e.nombreMarcaElemento) like ?6');
            $objQueryBuilder->setParameter(6, $strNombreMarcaElemento . "%");
        }

        if(isset($intStart) && !empty($intStart))
        {
            $objQueryBuilder->setFirstResult($intStart);
        }
        if(isset($intLimit) && !empty($intLimit))
        {
            $objQueryBuilder->setMaxResults($intLimit);
        }
        $objQuery = $objQueryBuilder->getQuery();
        return $objQuery->getResult();
    }

    public function generarJsonElementosContenedorPorPuerto($idInterfaceElemento, $start, $limit, $emInfraestructura){
        $entidad = $this->getElementosContenedorPorPuerto($idInterfaceElemento, $start, $limit);
        
        if ($entidad) {
            
            $num = count($entidad);
            foreach ($entidad as $entity)
            {
                $arr_encontrados[]=array('idElementoContenedor' =>$entity['ID_CAJA2'],
                                         'nombreElementoContenedor'=> $entity['NOMBRE_CAJA2']
                                        );
                
            }

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    
    public function getElementosContenedorPorPuerto($idInterfaceElemento, $start, $limit){
        $sql = "SELECT
                        DISTINCT(CAJA2.id) ID_CAJA2,
                        CAJA2.nombreElemento NOMBRE_CAJA2
                FROM
                        schemaBundle:InfoInterfaceElemento PUERTO_OLT,
                        schemaBundle:InfoEnlace ENLACE_OLT_SP1,
                        schemaBundle:InfoInterfaceElemento PUERTO_SP1IN,
                        schemaBundle:InfoElemento SP1,
                        schemaBundle:InfoInterfaceElemento PUERTO_SP1OUT,
                        schemaBundle:InfoEnlace ENLACE_SP1_SP2,
                        schemaBundle:InfoInterfaceElemento PUERTO_SP2IN,
                        schemaBundle:InfoElemento SP2,
                        schemaBundle:InfoInterfaceElemento PUERTO_SP2OUT,
                        schemaBundle:InfoRelacionElemento RELACION_CAJA_SP2,
                        schemaBundle:InfoElemento CAJA2
                WHERE
                        PUERTO_OLT = :interfaceElementoId
                AND PUERTO_OLT = ENLACE_OLT_SP1.interfaceElementoIniId
                AND PUERTO_SP1IN = ENLACE_OLT_SP1.interfaceElementoFinId
                AND SP1 = PUERTO_SP1IN.elementoId
                AND PUERTO_SP1OUT.elementoId = SP1
                AND PUERTO_SP1OUT.nombreInterfaceElemento LIKE 'OUT%'
                AND ENLACE_SP1_SP2.interfaceElementoIniId = PUERTO_SP1OUT
                AND PUERTO_SP2IN = ENLACE_SP1_SP2.interfaceElementoFinId
                AND SP2 = PUERTO_SP2IN.elementoId
                AND PUERTO_SP2OUT.elementoId = SP2
                AND PUERTO_SP2OUT.nombreInterfaceElemento LIKE 'OUT%'
                AND RELACION_CAJA_SP2.elementoIdB= SP2
                AND CAJA2 = RELACION_CAJA_SP2.elementoIdA";
        
        $qb = $this->_em->createQuery($sql);
        $qb->setParameter('interfaceElementoId',$idInterfaceElemento);
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getResult();
        
        return $query;
    }
    
    public function generarJsonElementosConectorPorElementoContenedor($idElemento, $tipoElemento, $estado, $start, $limit, $emInfraestructura){
        $entidad = $this->getElementosConectorPorElementoContenedor($idElemento, $tipoElemento, $estado, $start, $limit);
        
        if ($entidad) {
            
            $num = count($entidad);
            foreach ($entidad as $entity)
            {
                $arrayEncontrados[] = array(
                    'idElementoConector'     => $entity['ID_CONECTOR'],
                    'nombreElementoConector' => $entity['NOMBRE_CONECTOR'],
                    'estadoElementoConector' => $entity['ESTADO_CONECTOR']
                );
                
            }

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arrayEncontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else{
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    
    public function getElementosConectorPorElementoContenedor($idElemento, $tipoElemento, $estado, $start, $limit){
        $sql = "SELECT
                    ELEMENTO.id ID_CONECTOR,
                    ELEMENTO.nombreElemento NOMBRE_CONECTOR,
                    ELEMENTO.estado ESTADO_CONECTOR
                FROM
                    schemaBundle:InfoRelacionElemento RELACION_CONTENEDOR_CONTENIDO,
                    schemaBundle:InfoElemento ELEMENTO,
                    schemaBundle:AdmiModeloElemento MODELO,
                    schemaBundle:AdmiTipoElemento TIPO
                WHERE
                    RELACION_CONTENEDOR_CONTENIDO.elementoIdA = :idElemento
                AND RELACION_CONTENEDOR_CONTENIDO.elementoIdB = ELEMENTO
                AND ELEMENTO.estado IN (:estadoElemento)
                AND ELEMENTO.modeloElementoId = MODELO
                AND MODELO.tipoElementoId = TIPO
                AND TIPO.nombreTipoElemento = :tipoElemento";
        
        $qb = $this->_em->createQuery($sql);
        $qb->setParameter('idElemento',$idElemento);
        $qb->setParameter('estadoElemento',$estado);
        $qb->setParameter('tipoElemento',$tipoElemento);
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getResult();
        
        return $query;
    }
    
    public function generarJsonDslamsPorPop($popId, $empresa, $estado, $start, $limit, $emInfraestructura){
        $arr_encontrados = array();
        
        //$em = $this->getManager('telconet');
        $entidadesTotal = $this->getDslamsPorPop($popId,  $estado, '', '');
        
        $entidad= $this->getDslamsPorPop($popId,$estado,$start,$limit);
//        error_log('entra');
        
        
        if ($entidad) {
            
            $num = count($entidadesTotal);
            foreach ($entidad as $entity)
            {
                
                $elementoPopId = $entity->getElementoIdA();
                $pop = $emInfraestructura->find('schemaBundle:InfoElemento', $elementoPopId);
                
                $relacionElemento = $emInfraestructura->getRepository('schemaBundle:InfoEmpresaElemento')->findOneBy(array( "elementoId" => $pop->getId()));
                $empresaId = $relacionElemento->getEmpresaCod();
                
                if($empresaId==$empresa){
                    $elementoDslamId = $entity->getElementoIdB();
                    $dslam = $emInfraestructura->find('schemaBundle:InfoElemento', $elementoDslamId);
                    $nombreDslam = $dslam->getNombreElemento();
                    
                    $arr_encontrados[]=array('idElemento' =>$elementoDslamId,
                                         'nombreElemento'=> $nombreDslam
                                        );
                }
                
                
            }

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    
    public function getDslamsPorPop($popId,$estado,$start,$limit){
        $qb = $this->_em->createQueryBuilder();
            $qb->select('e')
               ->from('schemaBundle:InfoRelacionElemento','e');
         
        if($popId!=""){
            $qb ->where('e.elementoIdA = ?1');
            $qb->setParameter(1, $popId);
        }
        if($estado!=""){
            $qb ->andWhere('e.estado = ?2');
            $qb->setParameter(2, $estado);
        }
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
        
        return $query->getResult();
    }
    
     /**
     * Funcion que obtiene Json de interface por elemento enviado como parametro
     * 
     * @param Integer    $dslamId
     * @param String     $estado
     * @param Integer    $start
     * @param Integer    $limit
     * @param object     $emInfraestructura
     * 
     * @return array     $resultado
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 01406-2016
     * 
     * @author Angel Reina <areina@telconet.ec>
     * @version 1.2 14-03-2019 Cambio de parámetros de entrada a arrayParametros y variable $Entidad a $objEntidad por estandarización 
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 04-08-2020 - Se modifica el método para obtener los datos de los puertos.
     *
     * @since 1.0
     */
    
    public function generarJsonPuertosPorDslam($arrayParametros)
    {
        $arrayInterfaces = array();
        //obtengo los datos de los puertos
        $arrayResultado = $this->getPuertosPorDslam($arrayParametros);
        if($arrayResultado['status'] == 'OK')
        {
            foreach($arrayResultado['result'] as $arrayData)
            {
                $arrayInterfaces[] = array(
                    'idInterface'           => $arrayData['idInterface'],
                    'nombreInterface'       => $arrayData['nombreInterface'],
                    'nombreEstadoInterface' => $arrayData['nombreInterface'].' - '.$arrayData['estado']
                );
            }
            $strResultado = '{"total":"'.count($arrayInterfaces).'","encontrados":'.json_encode($arrayInterfaces).'}';
            return $strResultado;
        }
        else
        {
            $strResultado = '{"total":"0","encontrados":[]}';
            return $strResultado;
        }
    }
    
    /**
     * Metodo getPuertosPorDslam
     * 
     * Utilizado para obtener interface de elementos
     * 
     * @param string  $elementoId  
     * @param string  $estado 
     * @param integer $start 
     * @param integer $limit
     * @param string  $strTipoInterface
     * 
     * @author  Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 22-07-2016  Cuando variable de entrada tiene valor "Todos" discrimina estado eliminado de interface
     * 
     * @author  Angel Reina <areina@telconet.ec>
     * @version 1.2 13-03-2019  Se agrega parámetro $strTipoInterface por tal motivo se estandarizó método con un $arrayParametros. Cuando strTipoInterface tenga el valor OUT recupera las intefaces OUT
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 04-08-2020 - Se modifica el query de la consulta y se agrega el filtro del cliente
     *                           para mostrar las interfaces ocupadas solo del mismo cliente.
     *
     * @since 1.0
     */
    
    public function getPuertosPorDslam($arrayParametros)
    {
        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
            $strSql          = "SELECT INF.ID_INTERFACE_ELEMENTO, INF.NOMBRE_INTERFACE_ELEMENTO, INF.ESTADO
                                FROM
                                    DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INF
                                WHERE ";

            if($arrayParametros['strEstado'] == 'Todos')
            {
                $strSql = $strSql.' INF.ESTADO != :ESTADO';
                $objNativeQuery->setParameter('ESTADO', 'Eliminado');
            }
            else
            {
                $strSql = $strSql.' INF.ESTADO = :ESTADO';
                $objNativeQuery->setParameter('ESTADO', $arrayParametros['strEstado']);
            }
            if(isset($arrayParametros['intIdElemento']) && !empty($arrayParametros['intIdElemento']))
            {
                $strSql = $strSql.' AND INF.ELEMENTO_ID = :ELEMENTO_ID';
                $objNativeQuery->setParameter('ELEMENTO_ID', $arrayParametros['intIdElemento']);
            }
            if(isset($arrayParametros['strTipoInterface']) && !empty($arrayParametros['strTipoInterface']))
            {
                $strSql = $strSql.' AND INF.NOMBRE_INTERFACE_ELEMENTO LIKE :TIPO_INTERFACE';
                $objNativeQuery->setParameter('TIPO_INTERFACE', '%'.$arrayParametros['strTipoInterface'].'%');
            }
            if(isset($arrayParametros['intIdCliente']) && !empty($arrayParametros['intIdCliente']))
            {
                $strSql = $strSql.' AND (
                                    NOT EXISTS (
                                      SELECT 1 FROM DB_GENERAL.ADMI_PARAMETRO_DET DET
                                      WHERE DET.ESTADO = :ESTADO_ACTIVO AND DET.PARAMETRO_ID = ( 
                                          SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB
                                          WHERE NOMBRE_PARAMETRO = :PARAMETRO_ESTADO AND ESTADO = :ESTADO_ACTIVO AND ROWNUM = 1)
                                      AND DET.VALOR1 = INF.ESTADO
                                    )
                                    OR 
                                    (
                                      EXISTS (
                                        SELECT 1 FROM DB_GENERAL.ADMI_PARAMETRO_DET DET
                                        WHERE DET.ESTADO = :ESTADO_ACTIVO AND DET.PARAMETRO_ID = ( 
                                            SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB
                                            WHERE NOMBRE_PARAMETRO = :PARAMETRO_ESTADO AND ESTADO = :ESTADO_ACTIVO AND ROWNUM = 1)
                                        AND DET.VALOR1 = INF.ESTADO
                                      )
                                      AND EXISTS (
                                        SELECT 1 FROM DB_COMERCIAL.INFO_SERVICIO_TECNICO TEC
                                        INNER JOIN DB_COMERCIAL.INFO_SERVICIO            SER ON SER.ID_SERVICIO = TEC.SERVICIO_ID
                                        INNER JOIN DB_COMERCIAL.INFO_PUNTO               PUN ON PUN.ID_PUNTO = SER.PUNTO_ID
                                        INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL CLI ON CLI.ID_PERSONA_ROL = PUN.PERSONA_EMPRESA_ROL_ID
                                        WHERE CLI.ID_PERSONA_ROL = :ID_CLIENTE AND TEC.INTERFACE_ELEMENTO_ID = INF.ID_INTERFACE_ELEMENTO
                                      )
                                    )
                                  )';
                $objNativeQuery->setParameter('ID_CLIENTE', $arrayParametros['intIdCliente']);
                $objNativeQuery->setParameter('ESTADO_ACTIVO', 'Activo');
                $objNativeQuery->setParameter('PARAMETRO_ESTADO', 'ESTADOS_INTERFACES_NO_DISPONIBLES');
            }
            if(isset($arrayParametros['intIdInterfaceNot']) && !empty($arrayParametros['intIdInterfaceNot']))
            {
                $strSql = $strSql.' AND INF.ID_INTERFACE_ELEMENTO != :ID_INTERFACE_ELEMENTO_NOT';
                $objNativeQuery->setParameter('ID_INTERFACE_ELEMENTO_NOT', $arrayParametros['intIdInterfaceNot']);
            }

            $strSql = $strSql.' GROUP BY INF.ID_INTERFACE_ELEMENTO, INF.NOMBRE_INTERFACE_ELEMENTO, INF.ESTADO';
            $strSql = $strSql.' ORDER BY INF.ID_INTERFACE_ELEMENTO';

            $objResultSetMap->addScalarResult('ID_INTERFACE_ELEMENTO',      'idInterface',      'integer');
            $objResultSetMap->addScalarResult('NOMBRE_INTERFACE_ELEMENTO',  'nombreInterface',  'string');
            $objResultSetMap->addScalarResult('ESTADO',                     'estado',           'string');

            $objNativeQuery->setSQL($strSql);
            $arrayData = $objNativeQuery->getScalarResult();

            $arrayResultado = array(
                'status' => 'OK',
                'result' => $arrayData
            );
        }
        catch (\Exception $e)
        {
            $arrayResultado = array(
                'status' => 'ERROR',
                'result' => $e->getMessage()
            );
        }
        return $arrayResultado;
    }

    /**
     * Funcion que sirve para generar un json con el historial del servicio
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 10-06-2015
     * @since 1.0
     */
    public function generarJsonHistorialServicio($idServicio, $start, $limit, $emGeneral)
    {
        $arrEncontrados = array();
        
        $registros      = $this->getHistorialServicio($idServicio,$start,$limit,'ASC');        
        $encontrados    = $registros['registros'];
        $num            = $registros['total'];        
        
        if ($encontrados) 
        {
            foreach ($encontrados as $entity)
            {
                
                $usrCreacion    = $entity->getUsrCreacion();
                $feCreacion     = $entity->getFeCreacion();
                $fechaCreacion  = strval(date_format($feCreacion, "d/m/Y G:i"));
                $ipCreacion     = $entity->getIpCreacion();
                $estado         = $entity->getEstado();
                $motivoId       = $entity->getMotivoId();
                $observacion    = $entity->getObservacion();
                $accion         = $entity->getAccion();
                
                if($motivoId!=null)
                {
                    $motivo         = $emGeneral->find('schemaBundle:AdmiMotivo', $motivoId);
                    $nombreMotivo   = $motivo->getNombreMotivo();
                }
                else
                {
                    $nombreMotivo = "NA";
                }
                
                $arrEncontrados[] = array(  'usrCreacion'   => $usrCreacion,
                                            'feCreacion'    => $fechaCreacion,
                                            'ipCreacion'    => $ipCreacion,
                                            'estado'        => $estado,
                                            'nombreMotivo'  => $nombreMotivo,
                                            'observacion'   => $observacion,
                                            'accion'        => $accion
                                          );
            }//foreach ($encontrados as $entity)
            
            if($num == 0)
            {
                $resultado   = array('total'        => 1 ,
                                     'encontrados'  => array(
                                                            'usrCreacion'   => 'Ninguno', 
                                                            'feCreacion'    => 'Ninguno',
                                                            'ipCreacion'    => 'Ninguno', 
                                                            'estado'        => 'Ninguno', 
                                                            'nombreMotivo'  => 'Ninguno',
                                                            'observacion'   => 'Ninguno', 
                                                            'accion'        => 'Ninguno'
                                                            )
                                   );
                $resultado  = json_encode($resultado);

                return $resultado;
            }//if($num == 0)
            else
            {
                $data       = json_encode($arrEncontrados);
                $resultado  = '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }//if ($encontrados) 
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';
            return $resultado;
        }
    }
    
    /**
     * Funcion que sirve para crear y ejecutar sql para obtener el historial
     * de un servicio
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 10-06-2015
     * @since 1.0
     * @param int $idServicio
     * @param int $start
     * @param int $limit
     * @param string $order
     * @return array $resultado
     */
    public function getHistorialServicio($idServicio,$start,$limit,$order='ASC')
    {
        $qb  = $this->_em->createQueryBuilder();
        $qbC = $this->_em->createQueryBuilder();
        
        $qb ->select('e')
            ->from('schemaBundle:InfoServicioHistorial','e');
        $qbC->select('count(e.id)')
            ->from('schemaBundle:InfoServicioHistorial','e');
         
        if($idServicio!="")
        {
            $qb ->where('e.servicioId = ?1');
            $qb ->setParameter(1, $idServicio);
            $qb ->orderBy('e.feCreacion',$order);
            
            $qbC->where('e.servicioId = ?1');
            $qbC->setParameter(1, $idServicio);
        }
        
        if($start!='')
        {
            $qb->setFirstResult($start);   
        }
            
        if($limit!='')
        {
            $qb->setMaxResults($limit);
        }
        
        //total de objetos
        $total = $qbC->getQuery()->getSingleScalarResult();
        
        //obtener los objetos
        $query = $qb->getQuery();
        $datos = $query->getResult();
        
        $resultado['registros'] = $datos;
        $resultado['total']     = $total;
        
        return $resultado;
    }
    
    
    /**
     * Funcion que genera el json de la data del punto cliente
     * 
     * @param int $idServicio
     * @param int $estado
     * @param int $start
     * @param int $limit
     * @param string $emComercial
     * @return json $resultado
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 07-09-2016
     * @since 1.0
     * 
     */
    
    public function generarJsonDatosCliente($idServicio, $estado, $start, $limit, $emComercial){
        $arr_encontrados = array();
        $strCanton = '';
        $strSector = '';
        
        $entidadesTotal = $this->getDatosCliente($idServicio,$estado, '', '');
        
        $entidad= $this->getDatosCliente($idServicio, $estado,$start,$limit);
        
        if ($entidad) {
            
            $num = count($entidadesTotal);
            foreach ($entidad as $entity)
            {
                $nombreCompleto     = '';
                $direccion          = '';
                $nombreTipoNegocio  = '';
                $latitud            = '';
                $longitud           = '';
                $strSector          = '';
                $strCanton          = '';
                $puntoId            = '';
                
                $nombres        = $entity['nombres'];
                $apellidos      = $entity['apellidos'];
                $razonSocial    = $entity['razonSocial'];
                $direccion      = $entity['direccion'];
                $puntoId        = $entity['id'];
                
                $punto = $emComercial->find('schemaBundle:InfoPunto', $puntoId);
                if($punto)
                {
                    $latitud        = $punto->getLatitud();
                    $longitud       = $punto->getLongitud();
                    $tipoNegocio    = $punto->getTipoNegocioId();
                    if($punto->getSectorId())
                    {
                        $strSector = $punto->getSectorId()->getNombreSector();
                        if($punto->getSectorId()->getParroquiaId())
                        {
                            $objCanton = $emComercial->find('schemaBundle:AdmiCanton', $punto->getSectorId()->getParroquiaId()->getCantonId());
                            if($objCanton)
                            {
                                $strCanton = $objCanton->getNombreCanton();
                            }
                        }
                    }                                                    
                }
                $nombreTipoNegocio = $tipoNegocio->getNombreTipoNegocio();
                
                if($razonSocial!="" || $razonSocial!=null){
                    $nombreCompleto = $razonSocial;
                }
                else{
                    $nombreCompleto = $nombres." ".$apellidos;
                }
                
                $arr_encontrados[]=array('nombreCompleto' => $nombreCompleto,
                                         'direccion'      => $direccion,
                                         'tipoNegocio'    => $nombreTipoNegocio,
                                         'latitud'        => $latitud,
                                         'longitud'       => $longitud,
                                         'strSector'      => $strSector,
                                         'strCanton'      => $strCanton,
                                         'idPunto'        => $puntoId);
            }
            

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    
    public function getDatosCliente($idServicio, $estado,$start,$limit){
        $qb = $this->_em->createQueryBuilder();
            $qb->select('persona.nombres, persona.apellidos, persona.razonSocial, punto.direccion, punto.id')
               ->from('schemaBundle:InfoServicio','servicio')
               ->from('schemaBundle:InfoPunto','punto')
               ->from('schemaBundle:InfoPersonaEmpresaRol','personaEmpresaRol')
               ->from('schemaBundle:InfoPersona','persona')
               ->where("servicio.puntoId = punto")
               ->andWhere("punto.personaEmpresaRolId = personaEmpresaRol")
               ->andWhere("personaEmpresaRol.personaId = persona");
            $qb ->andWhere('servicio = ?1');
            $qb->setParameter(1, $idServicio);
        
        
        
//        $query = $this->_em->createQuery("SELECT i0_.nombres, i0_.apellidos, i0_.razonSocial, 
//                i1_.direccion
//                FROM schemaBundle:InfoServicio i3_, schemaBundle:InfoPunto i1_, schemaBundle:InfoPersonaEmpresaRol i4_, 
//                schemaBundle:InfoPersona i0_ 
//                WHERE i3_.puntoId = i1_.id 
//                AND i1_.personaEmpresaRolId = i4_.id
//                AND i4_.personaId = i0_.id
//                AND i3_.id ='"+$idServicio+"'");
          
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
        return $query->getResult();
    }
    
    public function generarJsonParametrosIniciales($modeloElemento, $interfaceElementoId, $estado, $start, $limit){
        $arr_encontrados = array();
        
        $entidadesTotal = $this->getParametrosIniciales($interfaceElementoId, '', '');
        
        $entidad= $this->getParametrosIniciales($interfaceElementoId,$start,$limit);
        
        if ($entidad) {
            //$num = count($entidadesTotal);
            $num = 0;
            foreach ($entidad as $entity)
            {
                $nombre = "";
                $valor = "";
                if($modeloElemento=="6524"){
                    if($entity->getDetalleNombre()=="ATENUACION"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                    
                    if($entity->getDetalleNombre()=="SENAL RUIDO"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                    
                    if($entity->getDetalleNombre()=="CRC"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                }
                else if($modeloElemento=="7224"){
                    if($entity->getDetalleNombre()=="MONITOREAR PUERTO"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                    
                    if($entity->getDetalleNombre()=="PARAMETROS LINEA"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                }
                else if($modeloElemento=="R1AD24A"){
                    if($entity->getDetalleNombre()=="MONITOREAR PUERTO I"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                    
                    if($entity->getDetalleNombre()=="MONITOREAR PUERTO II"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                }
                else if($modeloElemento=="R1AD48A"){
                    if($entity->getDetalleNombre()=="MONITOREAR PUERTO I"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                    
                    if($entity->getDetalleNombre()=="MONITOREAR PUERTO II"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                }
                else if($modeloElemento=="A2024"){
                    if($entity->getDetalleNombre()=="CONFIGURACION INTERFACE"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                    
                    if($entity->getDetalleNombre()=="VELOCIDAD REAL"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                    
                    if($entity->getDetalleNombre()=="NIVELES SENAL EXTREMO LEJANO"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                    
                    if($entity->getDetalleNombre()=="NIVELES SENAL EXTREMO CERCANO"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                    
                    if($entity->getDetalleNombre()=="DESEMPENO PUERTO INTERVALO"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                }
                else if($modeloElemento=="A2048"){
                    if($entity->getDetalleNombre()=="CONFIGURACION INTERFACE"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                    
                    if($entity->getDetalleNombre()=="VELOCIDAD REAL"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                    
                    if($entity->getDetalleNombre()=="NIVELES SENAL EXTREMO LEJANO"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                    
                    if($entity->getDetalleNombre()=="NIVELES SENAL EXTREMO CERCANO"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                    
                    if($entity->getDetalleNombre()=="DESEMPENO PUERTO INTERVALO"){
                        $nombre = $entity->getDetalleNombre();
                        $valor = $entity->getDetalleValor();
                    }
                    
                    
                }
                
                if($nombre!="" && $valor!=""){
                    $num++;
                    $arr_encontrados[]=array('modelo' =>$modeloElemento,
                                             'nombre'=> $nombre,
                                             'valor' => $valor
                                        );
                }
                
                
                
                
                
            }//cierre for

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    
    public function getParametrosIniciales($interfaceElementoId,$start,$limit){
        $qb = $this->_em->createQueryBuilder();
            $qb->select('detalle')
               ->from('schemaBundle:InfoDetalleInterface','detalle')
               ->andWhere("detalle.interfaceElementoId = ?1");
            $qb->setParameter(1, $interfaceElementoId);
            
        
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
        
        return $query->getResult();
    }
    
    public function generarJsonDominios($idServicio,$empresa, $start, $limit, $em){
        $arr_encontrados = array();
        
        //$em = $this->getManager('telconet');
        $entidadesTotal = $this->getDominios($idServicio, '', '');
        
        $entidad= $this->getDominios($idServicio, $start,$limit);
//        error_log('entra');
        
        
        if ($entidad) {
            
            $num = count($entidadesTotal);
            foreach ($entidad as $entity)
            { 
                $caract = $em->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "DOMINIO"));
                $prod = $em->getRepository('schemaBundle:AdmiProducto')->findOneBy(
                        array( "descripcionProducto" => "DOMINIO","empresaCod"=>$empresa,"estado"=>"Activo"));
                $prodCaract = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $prod->getId(), "caracteristicaId" => $caract->getId(), "estado" => "Activo"));
                
                $prodCaract1 = $entity->getProductoCaracterisiticaId();
                
                $estado = $entity->getEstado();
                $valor = $entity->getValor();
                $id = $entity->getId();
                
                if($prodCaract->getId() == $prodCaract1){
                    $arr_encontrados[]=array('valor' =>$valor,
                                             'estado'=> $estado,
                                             'id' => $id
                                            );
                }
            }
            

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    /**
     * Funcion que nos permite obtener todos las caracteristicas (dominio)
     * asosiada a cada servicio dominio en cada punto de un cliente
     * 
     * @author Andres Flores <aoflores@telconet.ec>
     * @version 1.1 08-04-2016
     * @since 1.0 
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 05-08-2016 cuando no tenga ningun servicio de dominio se cargará por default el dominio de telconet
     * 
     * @param string[] $servicios
     * @param int $start
     * @param int $limit
     * @param entidad $em
     * @return string
     */
    
    public function generarJsonDominiosCorreos($servicios,$empresa, $start, $limit, $em){
        $arr_encontrados = array();
        $total_num=0;
        foreach($servicios as $idServicio){
            //$em = $this->getManager('telconet');
            //error_log($idServicio->getId());
            $entidadesTotal = $this->getDominios($idServicio, '', '');

            $entidad= $this->getDominios($idServicio, $start,$limit);
    //        error_log('entra');


            if ($entidad) {

                $num = count($entidadesTotal);
                foreach ($entidad as $entity)
                { 
                    $caract = $em->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "DOMINIO"));
                    $prod = $em->getRepository('schemaBundle:AdmiProducto')->findOneBy(
                            array( "descripcionProducto" => "DOMINIO","empresaCod"=>$empresa,"estado"=>"Activo"));
                    $prodCaract = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')->findOneBy(array( "productoId" => $prod->getId(), "caracteristicaId" => $caract->getId(), "estado" => "Activo"));

                    $prodCaract1 = $entity->getProductoCaracterisiticaId();

                    $estado = $entity->getEstado();
                    $valor = $entity->getValor();
                    $id = $entity->getId();

                    if($prodCaract->getId() == $prodCaract1){
                        $arr_encontrados[]=array('valor' =>$valor,
                                                 'estado'=> $estado,
                                                 'id' => $id
                                                );
                    }
                }
                
                $dominiosTelconet = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')->getDominiosTelconet();
                $cantidad = count($dominiosTelconet);
                foreach($dominiosTelconet as $dominio){
                    $estado = $dominio['estado'];
                    $valor = $dominio['valor'];
                    $id = $dominio['idServicioProdCarac'];
                    $arr_encontrados[]=array('valor' =>$valor,
                                                 'estado'=> $estado,
                                                 'id' => $id
                                                );
                }
                
                $data = json_encode($arr_encontrados);
                $resultado= '{"total":'.$cantidad.',"encontrados":'.$data.'}';
                
                if($num == 0)
                {
                   $resultado= array('total' => 1 ,
                                     'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                    $resultado = json_encode( $resultado);

                    return $resultado;
                }
                else
                {
                    $total_num = $total_num + $num;
                    
                }
            }
            else
            {
                //Si no existen caracteristicas para el servicio dominio de un cliente entonces por
                //defecto se muestra los dos dominios de telconet creados como parametros
                $dominiosTelconet = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')->getDominiosTelconet();
                $cantidad = count($dominiosTelconet);
                foreach($dominiosTelconet as $dominio){
                    $estado = $dominio['estado'];
                    $valor = $dominio['valor'];
                    $id = $dominio['idServicioProdCarac'];
                    $arr_encontrados[]=array('valor' =>$valor,
                                                 'estado'=> $estado,
                                                 'id' => $id
                                                );
                }
                
                $data = json_encode($arr_encontrados);
                $resultado= '{"total":'.$cantidad.',"encontrados":'.$data.'}';

                return $resultado;
            }
        }
        
        if(!$arr_encontrados)
        {
            //Si no existen caracteristicas para el servicio dominio de un cliente entonces por
            //defecto se muestra los dos dominios de telconet creados como parametros
            $dominiosTelconet   = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')->getDominiosTelconet();
            $cantidad           = count($dominiosTelconet);
            foreach($dominiosTelconet as $dominio){
                $estado = $dominio['estado'];
                $valor  = $dominio['valor'];
                $id     = $dominio['idServicioProdCarac'];
                
                $arr_encontrados[]=array('valor' =>$valor,
                                         'estado'=> $estado,
                                         'id'    => $id );
            }
         
        }        
        
        $data=json_encode($arr_encontrados);
        $resultado= '{"total":"'.$total_num.'","encontrados":'.$data.'}';
        return $resultado;
    }
    
       
    public function getDominios($idServicio,$start,$limit){
        $qb = $this->_em->createQueryBuilder();
            $qb->select('servicio')
               ->from('schemaBundle:InfoServicioProdCaract','servicio')
               ->where("servicio.servicioId = ?1")
               ->andWhere("servicio.estado = 'Activo'");
            $qb->setParameter(1, $idServicio);
        
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
        return $query->getResult();
    }
    
     /**
     * Funcion que genera el json de los correos
     * 
     * @author Modificado: John Vera <javera@telconet.ec>
     * @version 1.1 10-08-2016
     */    
    
    public function generarJsonCorreos($idServicio,$empresa, $start, $limit, $em){
        $arr_encontrados = array();
        
        $entidadesTotal = $this->getCorreos($idServicio, '', '');
        
        $entidad= $this->getCorreos($idServicio, $start,$limit);
        
        if ($entidad) {
            
            $num = count($entidadesTotal);
            foreach ($entidad as $entity)
            {
                $caract = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "USUARIO"));
                $prod = $this->_em->getRepository('schemaBundle:AdmiProducto')->findOneBy(array( "nombreTecnico" => "CORREO", 
                                                                                                 "empresaCod"=>$empresa, 
                                                                                                 "estado" => "Activo"));
                $prodCaract = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                ->findOneBy(array( "productoId" => $prod->getId(), "caracteristicaId" => $caract->getId(), "estado" => "Activo"));
                             
                $prodCaract1 = $entity->getProductoCaracterisiticaId();
                
                $estado = $entity->getEstado();
                $valor = $entity->getValor();
                $spc = $entity->getId();
                
                
                if($prodCaract!= NULL && $prodCaract->getId() == $prodCaract1){
                    $arr_encontrados[]=array('valor' =>$valor,
                                             'estado'=> $estado,
                                             'id' => $spc
                                            );
                }
            }
            

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
                
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    
    public function getCorreos($idServicio,$start,$limit){
        $qb = $this->_em->createQueryBuilder();
            $qb->select('servicio')
               ->from('schemaBundle:InfoServicioProdCaract','servicio')
               ->where("servicio.servicioId = ?1")
               ->andWhere("servicio.estado = 'Activo'");
            $qb->setParameter(1, $idServicio);
        
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
        return $query->getResult();
    }
    
    public function generarJsonIpPublica($idServicio, $start, $limit, $em){
        $arr_encontrados = array();
        
        //$em = $this->getManager('telconet');
        $entidadesTotal = $this->getIpPublica($idServicio, '', '');
        
        $entidad= $this->getIpPublica($idServicio, $start,$limit);
//        error_log('entra');
        
        
        if ($entidad) {
            
            $num = count($entidadesTotal);
            foreach ($entidad as $entity)
            {
                $estado = $entity->getEstado();
                $ip = $entity->getIp();
                $mascara = $entity->getMascara();
                $gw = $entity->getGateway();
                $tipIp = $entity->getTipoIp();
                $spc = $entity->getId();
                
                
                $arr_encontrados[]=array('ip' =>$ip,
                                         'mascara' => $mascara,
                                         'gateway' => $gw,
                                         'tipoIp' => $tipIp,
                                         'estado'=> $estado,
                                         'id' => $spc
                                        );
                
            }
            

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    
    public function getIpPublica($idServicio,$start,$limit){
        $qb = $this->_em->createQueryBuilder();
            $qb->select('ip')
               ->from('schemaBundle:InfoIp','ip')
               ->where("ip.servicioId = ?1")
               ->andWhere("( ip.estado = 'Activo' or ip.estado = 'Reservada' or ip.estado = 'Cancel' )")
               ->andWhere("( ip.tipoIp = 'PUBLICA' or ip.tipoIp = 'FIJA' )");
            $qb->setParameter(1, $idServicio);
        
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
        return $query->getResult();
    }
    
    /**
     * Funcion que sirve para cargar los datos de CPE de clientes
     * 
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.1 06-05-2016    Se agrega parametro empresa en metodo generarJsonIpPublicaPorServicio por conflictos de 
     *                            producto INTERNET DEDICADO
     * 
     * @since 1.0
     */
    public function generarJsonDatosCpe($idServicio, $start, $limit, $em, $emInfra,$idEmpresa)
    {
        $arr_encontrados = array();
        $servicio        = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $servicioTecnico = $em->getRepository('schemaBundle:InfoServicioTecnico')->findOneBy(array( "servicioId" => $servicio->getId()));
        $cpeId           = $servicioTecnico->getElementoClienteId();
        $cpe             = $emInfra->getRepository('schemaBundle:InfoElemento')->find($cpeId);
        $modelo          = $cpe->getModeloElementoId();
        
        $serie = $cpe->getSerieFisica();
        
        if(!$serie)
        {
            $serie = "NA";
        }
        
        $ipCpe = $emInfra->getRepository('schemaBundle:InfoIp')->findOneBy(array( "elementoId" => $cpe->getId(), "estado"=>"Activo"));
        
        // si es null
        if(!isset($ipCpe))
        {
            $resultado = array('total' => 1 ,'encontrados' => 'No existe ip en el CPE' );
            $resultado = json_encode( $resultado);
            return $resultado;
        }
        
        $producto                          = $em->getRepository('schemaBundle:AdmiProducto')
                                                ->findOneBy(array( "descripcionProducto" => "INTERNET DEDICADO", 
                                                                   "empresaCod"          => $idEmpresa,
                                                                   "estado"              => "Activo"));
        $productoInternetId                = $producto->getId();
        $caracteristicaMac                 = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                                ->findOneBy(array( "descripcionCaracteristica" => "MAC", 
                                                                   "estado"                    => "Activo"));
        $productoCaracteristicaMac         = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                ->findOneBy(array( "productoId"       => $productoInternetId, 
                                                                   "caracteristicaId" => $caracteristicaMac->getId()));
        $servicioProductoCaracteristicaMac = $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                ->findOneBy(array( "servicioId"                => $servicio->getId(), 
                                                                   "productoCaracterisiticaId" => $productoCaracteristicaMac->getId()));
        
        if($servicioProductoCaracteristicaMac)
        {
            $mac = $servicioProductoCaracteristicaMac->getValor();
        }
        else
        {
            $mac = "NA";
        }
        $num               = 1;
        $arr_encontrados[] = array( 'nombre'       => $cpe->getNombreElemento(),
                                    'nombreModelo' => $modelo->getNombreModeloElemento(),
                                    'serie'        => $serie,
                                    'mac'          => $mac,
                                    'ip'           => $ipCpe->getIp(),
                                    'descripcion'  => $cpe->getDescripcionElemento()
                                  );
        
        if($num == 0)
        {
           $resultado  = array( 'total'       => 1 ,
                                'encontrados' => array( 'idConectorInterface'     => 0 , 
                                                        'nombreConectorInterface' => 'Ninguno',
                                                        'idConectorInterface'     => 0 , 
                                                        'nombreConectorInterface' => 'Ninguno', 
                                                        'estado'                  => 'Ninguno')
                              );
            $resultado = json_encode( $resultado);

            return $resultado;
        }
        else
        {
            $data      = json_encode($arr_encontrados);
            $resultado = '{"total":"'.$num.'","encontrados":'.$data.'}';

            return $resultado;
        }
        
    }
    
    /**
     * Funcion que sirve para cargar los datos de Elementos de clientes
     * 
     * @author Jesus Bozada   <jbozada@telconet.ec>
     * @version 1.1 06-05-2016    Se agrega parametro empresa en metodo generarJsonIpPublicaPorServicio por conflictos de 
     *                            producto INTERNET DEDICADO
     * 
     * @since 1.0
     */
    public function generarJsonDatosElementos($idServicio, $idSolicitudCambio, $em, $emInfra, $idEmpresa)
    {
        $arr_encontrados   = array(); 
        $servicio          = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $detalleSolCaracts = $em->getRepository('schemaBundle:InfoDetalleSolCaract')->findDetalleSolCaractPorIdDetalleSolicitud($idSolicitudCambio);
        $num               = 0;
        foreach ($detalleSolCaracts as $det)
        {
            $elemento = $emInfra->getRepository('schemaBundle:InfoElemento')->find($det->getValor());
            if ($elemento != null)
            {
                $modelo = $elemento->getModeloElementoId();			
                $serie  = $elemento->getSerieFisica();
                if(!$serie)
                {
                    $serie = "NA";
                }
                $ipElemento = $emInfra->getRepository('schemaBundle:InfoIp')
                                      ->findOneBy(array( "elementoId" => $elemento->getId(), "estado"=>"Activo"));			
                if($ipElemento)
                {
                    $ip= $ipElemento->getIp();
                }
                else
                {
                    $ip = "NA";
                }
                $producto                          = $em->getRepository('schemaBundle:AdmiProducto')
                                                        ->findOneBy(array( "descripcionProducto" => "INTERNET DEDICADO", 
                                                                           "empresaCod"          => $idEmpresa, 
                                                                           "estado"              => "Activo"));
                $productoInternetId                = $producto->getId();
                $caracteristicaMac                 = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                                        ->findOneBy(array( "descripcionCaracteristica" => "MAC", 
                                                                           "estado"                    => "Activo"));
                $productoCaracteristicaMac         = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                        ->findOneBy(array( "productoId"       => $productoInternetId, 
                                                                           "caracteristicaId" => $caracteristicaMac->getId()));
                $servicioProductoCaracteristicaMac = $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                        ->findOneBy(array( "servicioId"                => $servicio->getId(), 
                                                                           "productoCaracterisiticaId" => $productoCaracteristicaMac->getId()));

                if($servicioProductoCaracteristicaMac)
                {
                        $mac = $servicioProductoCaracteristicaMac->getValor();
                }
                else{
                        $mac = "NA";
                }
                $num++;
                $arr_encontrados[] = array(
                                            'idElemento'   => $elemento->getId(),
                                            'nombre'       =>$elemento->getNombreElemento(),
                                            'nombreModelo' => $modelo->getNombreModeloElemento(),
                                            'serie'        => $serie,
                                            'mac'          => $mac,
                                            'ip'           => $ip,
                                            'descripcion'  => $elemento->getDescripcionElemento()
                                          );
            }
        }
		
        if($num == 0)
        {
            //wsanchez pruebas modificar
            /*
           $resultado= array('total' => 0 ,
                             'encontrados' => array('nombre' => 'NAME' , 'nombreModelo' => 'Ninguno', 'serie' => 0 , 'mac' => 'Ninguno', 'ip' => 'descripcion', 'ip' => 'Ninguno'));
            $resultado = json_encode( $resultado);
			*/
            $arr_encontrados[] = array('idElemento'   => 1, 
                                       'nombre'       => 'NAME1' , 
                                       'nombreModelo' => 'Ninguno1', 
                                       'serie'        => 1 , 
                                       'mac'          => 'Ninguno1', 
                                       'ip'           => 'descripcion1', 
                                       'ip'           => 'Ninguno1');
            $arr_encontrados[] = array('idElemento'   => 2, 
                                       'nombre'       => 'NAME2' , 
                                       'nombreModelo' => 'Ninguno2', 
                                       'serie'        => 2 , 
                                       'mac'          => 'Ninguno2', 
                                       'ip'           => 'descripcion2', 
                                       'ip'           => 'Ninguno2');
            $data              = json_encode($arr_encontrados);
            $num               = 2;
            $resultado         = '{"total":"'.$num.'","encontrados":'.$data.'}';
            return $resultado;
        }
        else
        {
            $data      = json_encode($arr_encontrados);
            $resultado = '{"total":"'.$num.'","encontrados":'.$data.'}';

            return $resultado;
        }
    }
	
    public function generarJsonUltimaMilla($estado, $start, $limit, $em){
        $arr_encontrados = array();
        
        //$em = $this->getManager('telconet');
        $entidadesTotal = $this->getUltimaMilla($estado, '', '');
        
        $entidad= $this->getUltimaMilla($estado, $start,$limit);
//        error_log('entra');
        
        
        if ($entidad) {
            
            $num = count($entidadesTotal);
            foreach ($entidad as $entity)
            {
                
                $arr_encontrados[]=array('idTipoMedio' =>$entity->getId(),
                                         'nombreTipoMedio' => $entity->getNombreTipoMedio()
                                        );
                
            }
            

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    
    /**
     * generarJsonUltimaMillaCambioMedio
     * Método para obtener los tipos medios en base a la ultima milla para un cambio de tipo medio.
     * 
     * @author Walther Joao Gaibor<wgaibor@telconet.ec>
     * @version 1.0
     * @since 29/01/2018
     * 
     * @param type $arrayParametros
     * @return string
     */
    public function generarJsonUltimaMillaCambioMedio($arrayParametros){
        $arr_encontrados = array();
        
        $arrayParametroConsulta = array('strEstado'        => $arrayParametros['strEstado'],
                                        'arrayTipoMedio'   => $arrayParametros['arrayTipoMedio'],
                                        'intStart'         => '',
                                        'intLimit'         => '');
        $entidadesTotal = $this->getUltimaMillaCambioMedio($arrayParametroConsulta);
        
        $entidad= $this->getUltimaMillaCambioMedio($arrayParametros);
        
        
        if ($entidad) {
            
            $num = count($entidadesTotal);
            foreach ($entidad as $entity)
            {
                
                $arr_encontrados[]=array('idTipoMedio' =>$entity->getId(),
                                         'nombreTipoMedio' => $entity->getNombreTipoMedio()
                                        );
                
            }
            

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    
    public function getUltimaMillaCambioMedio($arrayParametros){
        $strCodTipoMedio = explode(",", $arrayParametros['arrayTipoMedio']);
        $qb = $this->_em->createQueryBuilder();
        
            $qb->select('tm')
               ->from('schemaBundle:AdmiTipoMedio','tm')
               ->where("tm.estado = ?1")
               ->andWhere($qb->expr()->in('tm.codigoTipoMedio', $strCodTipoMedio));
            $qb->setParameter(1, $arrayParametros['strEstado']);

        if($arrayParametros['intStart']!='')
            $qb->setFirstResult($arrayParametros['intStart']);   
        if($arrayParametros['intLimit']!='')
            $qb->setMaxResults($arrayParametros['intLimit']);
        $objQuery = $qb->getQuery();
        return $objQuery->getResult();
    }
    
    public function getUltimaMilla($estado,$start,$limit){
        $qb = $this->_em->createQueryBuilder();
            $qb->select('tm')
               ->from('schemaBundle:AdmiTipoMedio','tm');
               
        if($estado!=''){
            $qb->where("tm.estado = ?1");
            $qb->setParameter(1, $estado);
        }
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
        return $query->getResult();
    }
    
    /**
     * Funcion que sirve para obtener las caracteristicas (gemPort, TrafficTable, vlan, line-profile-id)
     * de un olt huawei, necesarias para la configuracion de los servicios
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 15-04-2015
     * @param int $elementoId
     * @param String $lineProfileName
     */
    public function getCaracteristicasElementoByLineProfile($elementoId, $lineProfileName)
    {
        $sql = "SELECT 4 ORDEN, DETALLE_NOMBRE,
                    DETALLE_VALOR
                  FROM db_infraestructura.info_detalle_elemento bbb
                  WHERE bbb.REF_DETALLE_ELEMENTO_ID IN (
                    (SELECT ID_DETALLE_ELEMENTO
                    FROM db_infraestructura.info_detalle_elemento
                    WHERE DETALLE_NOMBRE=:caractLineProfileName
                    AND DETALLE_VALOR   =:lineProfileNameParam
                    AND ELEMENTO_ID     =:elementoIdParam
                    ))
                  UNION
                  SELECT 3 ORDEN, DETALLE_NOMBRE,
                    DETALLE_VALOR
                  FROM db_infraestructura.info_detalle_elemento bbb
                  WHERE bbb.REF_DETALLE_ELEMENTO_ID IN (
                    (SELECT REF_DETALLE_ELEMENTO_ID
                    FROM db_infraestructura.info_detalle_elemento
                    WHERE DETALLE_NOMBRE=:caractLineProfileName
                    AND DETALLE_VALOR   =:lineProfileNameParam
                    AND ELEMENTO_ID     =:elementoIdParam
                    )) AND DETALLE_NOMBRE=:caractGemPortParam
                  UNION
                  SELECT 2 ORDEN,  DETALLE_NOMBRE,
                    DETALLE_VALOR
                  FROM db_infraestructura.info_detalle_elemento bbb
                  WHERE bbb.ID_DETALLE_ELEMENTO IN (
                    (SELECT REF_DETALLE_ELEMENTO_ID
                    FROM db_infraestructura.info_detalle_elemento
                    WHERE DETALLE_NOMBRE=:caractLineProfileName
                    AND DETALLE_VALOR   =:lineProfileNameParam
                    AND ELEMENTO_ID     =:elementoIdParam
                    ))
                  UNION
                  SELECT 1 ORDEN, 'VLAN' DETALLE_NOMBRE,
                    VALOR2 DETALLE_VALOR
                  FROM ADMI_PARAMETRO_CAB APC,
                    ADMI_PARAMETRO_DET APD
                  WHERE APC.ID_PARAMETRO  = APD.PARAMETRO_ID
                  AND APC.NOMBRE_PARAMETRO=:vlanHuawei
                  AND valor1              =:lineProfileNameParam
                  ORDER BY ORDEN ASC";
        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->bindValue('caractLineProfileName',   'LINE-PROFILE-NAME');
        $stmt->bindValue('caractGemPortParam',      'GEM-PORT');
        $stmt->bindValue('lineProfileNameParam',    $lineProfileName);
        $stmt->bindValue('vlanHuawei',              'VLAN_HUAWEI');
        $stmt->bindValue('elementoIdParam',         $elementoId);
        $stmt->execute();
        $arraResult = $stmt->fetchAll();
        
        $arrayRespuesta = array (
                                    'vlan'          => $arraResult[0]['DETALLE_VALOR'],
                                    'line-profile'  => $arraResult[1]['DETALLE_VALOR'],
                                    'gem-port'      => $arraResult[2]['DETALLE_VALOR'],
                                    'traffic-table' => $arraResult[3]['DETALLE_VALOR']
                                );
        
        return $arrayRespuesta;
    }
    
    /**
     * Funcion que sirve para obtener y generar un json con los elementos
     * por solicitud para el cambio de elemento.
     * 
     * @author Francisco Adum
     * @version 1.0 05-11-2014
     *
     * @author Juan Carlos Lafuente - Se agrega la funcionalidad para la empreasa TELCONET
     * @version 2.0 04-05-2016
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 2.1 10-10-2016  Se agrega recuperación de parametros usados en cambio de equipo
     *                          wifi adiconal en servicios hw
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 2.2 23-02-2017  Se agrega codigo que recupera mac de un elemento en la tabla InfoDetalleElemento
     *                          en caso de no encontrarse registrada como caracteristica del servicio 
     * @since 2.1
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.3 26-02-2018  Se agregan validaciones para el flujo de los servicios Internet Small Business
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.4 03-07-2018 Se agrega validación para servicios Small Business Tellion con equipos CPE 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.5 25-02-2019 Se agregan validaciones para servicios TelcoHome
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.5 02-05-2020 Se obtiene el id del producto en servicios Small Business debido a la reestructuración de dichos servicios 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.6 03-02-2021 Se realizan cambios para obtener correctamente la mac de los equipos en servicios Extender Dual Band y W+AP
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 2.7 27-05-2021 - Se realizan cambios para obtener la ubicación del dispositivo del cliente
     *
     * @param array $arrayParametros [  "intIdServicio"     => id del servicio,
     *                                  "intIdSolModem"     => id de la solicitud cambio de modem inmediato
     *                                  "intIdSolEquipo"    => id de la solicitud cambio de equipo
     *                                  "strEstadoSol"      => estado de la solicitud
     *                                  "strPrefijoEmpresa" => prefijo de la empresa
     *                                  "strCodEmpresa"     => id de la empresa
     *                                  "emComercial"       => entity manager comercial
     * 
     * @param int       $idServicio
     * @param int       $tipoSolicitud1
     * @param int       $tipoSolicitud2
     * @param String    $estado
     * @param String    $prefijoEmpresa
     * @param EM        $emComercial
     * 
     * @return Array $resultado [
     *                           - total                 Cantidad de registros encontrados
     *                           - encontrados           Información de registros encontrados
     *                                    [ - idElemento              Identificador de elemento
     *                                      - nombre                  Nombre de elemento
     *                                      - nombreModelo            Modelo del elemento
     *                                      - tipoElemento            Tipo de elemento
     *                                      - serie                   Serie del elemento
     *                                      - mac                     Mac del elemento
     *                                      - ip                      Ip asociada al elemento
     *                                      - descripcion             Descripcion del elemento
     *                                      - strTieneMigracionHw     Cadena de caracteres que indica si el cliente consultado tiene  
     *                                                                solicitud de migracion finalizada
     *                                      - strEquipoCpeHw          Cadena de caracteres que indica si se cambiara o se mantendra 
     *                                                                el equipo CPE HW
     *                                      - strEquipoWifiAdicional  Cadena de caracteres que indica si se cambiara o se mantendra 
     *                                                                el equipo wifi adicional
     *                                      - strAgregarWifi          Cadena de caracteres que indica si el cambio de equipo agregara 
     *                                                                equipo wifi adicional
     *                                      - intElementoWifi         Cadena de caracteres que indica identificador de elemento wifi
     *                                                                adicional
     *                                      - strNombreWifi           Cadena de caracteres que indica el nombre del elemento wifi
     *                                    ]
     *                          ]
     */
    public function generarJsonElementosPorSolicitud($arrayParametros)
    {
        $arr_encontrados        = array();
        $idServicio             = $arrayParametros["intIdServicio"];
        $tipoSolicitud1         = $arrayParametros["intIdSolModem"];
        $tipoSolicitud2         = $arrayParametros["intIdSolEquipo"];
        $estado                 = $arrayParametros["strEstadoSol"];
        $prefijoEmpresa         = $arrayParametros["strPrefijoEmpresa"];
        $strCodEmpresa          = $arrayParametros["strCodEmpresa"];
        $emComercial            = $arrayParametros["emComercial"];
        $strEsIsb               = $arrayParametros["strEsIsb"];
        $intIdProdServicio      = $arrayParametros["intIdProdServicio"];
        $entidades              = $this->getElementosPorSolicitud($idServicio, $tipoSolicitud1, $tipoSolicitud2, $estado);
        $num                    = 0;
        $strTieneMigracionHw    = "";
        $strNombreWifi          = "";
        $strEquipoCpeHw         = "";
        $strEquipoWifiAdicional = "";
        $strAgregarWifi         = "";
        $intElementoWifi        = "";
        
        if($entidades)
        {
            $intCantidadPuertosOcupados = 0;
            
            foreach($entidades as $entity)
            {
                $strUbicacionDipositivo = "Cliente";
                $strTieneMigracionHw    = "";
                $strEquipoCpeHw         = "";
                $strEquipoWifiAdicional = "";
                $strAgregarWifi         = "";
                $intElementoWifi        = "";
                $strNombreWifi          = "";
                $elemento               = $this->_em->getRepository('schemaBundle:InfoElemento')->find($entity->getValor());
                $modelo                 = $elemento->getModeloElementoId();
                $serie                  = $elemento->getSerieFisica();
                if(!$serie)
                {
                    $serie = "NA";
                }

                // ====================================================================================================
                // Condiciones para la empresa MEGADATOS
                // ====================================================================================================
                if($prefijoEmpresa == "MD")
                {
                    // Se obtiene la ip que se asigno al elemento 
                    $ipElemento = $this->_em->getRepository('schemaBundle:InfoIp')
                                            ->findOneBy(array("elementoId" => $elemento->getId(), 
                                                              "estado" => "Activo"));
                    if($ipElemento)
                    {
                        $ip = $ipElemento->getIp();
                    }
                    else
                    {
                        $ip = "NA";
                    }
                    
                    $strDescripcionCaractMac = "";
                    if(isset($strEsIsb) && !empty($strEsIsb) && $strEsIsb === "SI"
                        && isset($intIdProdServicio) && !empty($intIdProdServicio))
                    {
                        $objProductoSpc = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($intIdProdServicio);
                    }
                    else
                    {
                        $objServicioSolicitud   = $emComercial->getRepository('schemaBundle:InfoServicio')->find($idServicio);
                        if(is_object($objServicioSolicitud) && is_object($objServicioSolicitud->getProductoId())
                            && ($objServicioSolicitud->getProductoId()->getNombreTecnico() === "WDB_Y_EDB"
                                || $objServicioSolicitud->getProductoId()->getNombreTecnico() === "EXTENDER_DUAL_BAND"))
                        {
                            $objProductoSpc             = $objServicioSolicitud->getProductoId();
                            $strDescripcionCaractMac    = "MAC";
                        }
                        else
                        {
                            $objProductoSpc     = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                              ->findOneBy(array("nombreTecnico" => "INTERNET", 
                                                                                "estado"        => "Activo", 
                                                                                "empresaCod"    => $strCodEmpresa));
                        }
                    }
                    
                    $strNombreTecnicoProductoSpc    = $objProductoSpc->getNombreTecnico();
                    $intIdProductoSpc               = $objProductoSpc->getId();
                    if(!isset($strDescripcionCaractMac) || empty($strDescripcionCaractMac))
                    {
                        if($modelo->getTipoElementoId()->getNombreTipoElemento() == "CPE WIFI" 
                            || ($modelo->getTipoElementoId()->getNombreTipoElemento() == "CPE" 
                                && ($strNombreTecnicoProductoSpc === "INTERNET SMALL BUSINESS" || $strNombreTecnicoProductoSpc === "TELCOHOME")))
                        {
                            $strDescripcionCaractMac    = "MAC WIFI";
                        }
                        else if($modelo->getTipoElementoId()->getNombreTipoElemento() == "CPE ONT")
                        {
                            $strDescripcionCaractMac    = "MAC ONT";
                        }
                        else if($modelo->getTipoElementoId()->getNombreTipoElemento() == "CPE")
                        {
                            $strDescripcionCaractMac    = "MAC";
                        }
                    }
                    
                    $strMac = "NA";
                    if(isset($strDescripcionCaractMac) && !empty($strDescripcionCaractMac))
                    {
                        $objCaracteristicaMac   = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                             ->findOneBy(array("descripcionCaracteristica" => $strDescripcionCaractMac, 
                                                                               "estado"                    => "Activo"));
                        if(is_object($objCaracteristicaMac))
                        {
                            $objProductoCaracteristicaMac   = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                          ->findOneBy(array("productoId"        => $intIdProductoSpc, 
                                                                                            "caracteristicaId"  => $objCaracteristicaMac->getId()));
                            if(is_object($objProductoCaracteristicaMac))
                            {
                                $objSpcMac  = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                          ->findOneBy(array("servicioId"                => $idServicio,
                                                                            "productoCaracterisiticaId" => $objProductoCaracteristicaMac->getId(),
                                                                            "estado"                    => "Activo"));
                                if($objSpcMac)
                                {
                                    $strMac = $objSpcMac->getValor();
                                }
                                else
                                {
                                    $objDetEleMacSmartWifi = $this->_em
                                                                  ->getRepository('schemaBundle:InfoDetalleElemento')
                                                                  ->findOneBy(array('elementoId'    => $elemento->getId(),
                                                                                    'detalleNombre' => 'MAC WIFI',
                                                                                    'estado'        => 'Activo'
                                                                                   )
                                                                             );
                                    if(is_object($objDetEleMacSmartWifi))
                                    {
                                        $strMac = $objDetEleMacSmartWifi->getDetalleValor();
                                    }
                                    else
                                    {
                                        $strMac = "NA";
                                    }
                                }
                            }
                        }
                    }

                    /* Inicio : Caracteristicas para cambios de equipos HW
                     *          Se recuperan caracteristicas necesarias para cambios de equipos Hw que tienen solicitud 
                     *          de migracion finalizada.
                     *          - strTieneMigracionHw     Cadena de caracteres que indica si el cliente consultado tiene  
                     *                                    solicitud de migracion finalizada
                     *          - strEquipoCpeHw          Cadena de caracteres que indica si se cambiara o se mantendra 
                     *                                    el equipo CPE HW
                     *          - strEquipoWifiAdicional  Cadena de caracteres que indica si se cambiara o se mantendra 
                     *                                    el equipo wifi adicional
                     *          - strAgregarWifi          Cadena de caracteres que indica si el cambio de equipo agregara 
                     *                                    equipo wifi adicional
                     *          - intElementoWifi         Cadena de caracteres que indica identificador de elemento wifi
                     *                                    adicional
                     *          - strNombreWifi           Cadena de caracteres que indica el nombre del elemento wifi
                     */
                    $objCaractSolicitudMigracion = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                               ->findOneBy(array("descripcionCaracteristica" => "SOLICITUD MIGRACION HW", 
                                                                                 "estado"                    => "Activo"));
                    
                    if (is_object($objCaractSolicitudMigracion))
                    {    
                        $objDetSolCaractMigracion = $emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                ->findOneBy(
                                                                            array(
                                                                                  "detalleSolicitudId"=> $entity->getDetalleSolicitudId(),
                                                                                  "caracteristicaId"  => $objCaractSolicitudMigracion,
                                                                                  "estado"            => "AsignadoTarea"
                                                                                 )
                                                                           );
                        if (is_object($objDetSolCaractMigracion))
                        {
                            $strTieneMigracionHw = $objDetSolCaractMigracion->getValor();
                            
                            $objCaractSolicitudCpe = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                 ->findOneBy(array("descripcionCaracteristica" => "EQUIPO HW CPE", 
                                                                                   "estado"                    => "Activo"));
                    
                            if (is_object($objCaractSolicitudCpe))
                            {    
                                $objDetSolCaractCpe = $emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                  ->findOneBy(
                                                                              array(
                                                                                 "detalleSolicitudId"=> $entity->getDetalleSolicitudId(),
                                                                                 "caracteristicaId"  => $objCaractSolicitudCpe,
                                                                                 "estado"            => "AsignadoTarea"
                                                                                   )
                                                                             );
                                if (is_object($objDetSolCaractCpe))
                                {
                                    $strEquipoCpeHw = $objDetSolCaractCpe->getValor();
                                }
                            }
                            
                            $objCaractSolicitudWifi = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                  ->findOneBy(array("descripcionCaracteristica" => "EQUIPO HW WIFI", 
                                                                                    "estado"                    => "Activo"));
                    
                            if (is_object($objCaractSolicitudWifi))
                            {    
                                $objDetSolCaracWifi = $emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                  ->findOneBy(
                                                                              array(
                                                                                 "detalleSolicitudId"=> $entity->getDetalleSolicitudId(),
                                                                                 "caracteristicaId"  => $objCaractSolicitudWifi,
                                                                                 "estado"            => "AsignadoTarea"
                                                                                   )
                                                                             );
                                if (is_object($objDetSolCaracWifi))
                                {
                                    $strEquipoWifiAdicional = $objDetSolCaracWifi->getValor();
                                }
                            }
                            
                            $objCaractSolAgregaWifi = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                  ->findOneBy(array("descripcionCaracteristica" => "AGREGAR WIFI", 
                                                                                    "estado"                    => "Activo"));
                    
                            if (is_object($objCaractSolAgregaWifi))
                            {    
                                $objDetSolCaractAddWifi = $emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                      ->findOneBy(
                                                                              array(
                                                                                 "detalleSolicitudId"=> $entity->getDetalleSolicitudId(),
                                                                                 "caracteristicaId"  => $objCaractSolAgregaWifi,
                                                                                 "estado"            => "AsignadoTarea"
                                                                                   )
                                                                                 );
                                if (is_object($objDetSolCaractAddWifi))
                                {
                                    $strAgregarWifi = $objDetSolCaractAddWifi->getValor();
                                }
                            }
                            
                            $objCaractSolElementoWifi = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                    ->findOneBy(array("descripcionCaracteristica" => "ELEMENTO WIFI", 
                                                                                      "estado"                    => "Activo"));
                    
                            if (is_object($objCaractSolElementoWifi))
                            {    
                                $objDetSolCaractEleWifi = $emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                      ->findOneBy(
                                                                              array(
                                                                                 "detalleSolicitudId"=> $entity->getDetalleSolicitudId(),
                                                                                 "caracteristicaId"  => $objCaractSolElementoWifi,
                                                                                 "estado"            => "AsignadoTarea"
                                                                                   )
                                                                                 );
                                if (is_object($objDetSolCaractEleWifi))
                                {
                                    $intElementoWifi = $objDetSolCaractEleWifi->getValor();
                                    
                                    
                                    $objElementoWifi = $this->_em->getRepository('schemaBundle:InfoElemento')->find($intElementoWifi);
                                    if (is_object($objElementoWifi))
                                    {
                                        $strNombreWifi = $objElementoWifi->getNombreElemento();
                                    }
                                    
                                }
                            }
                            
                        }
                    }
                    // Fin : Caracteristicas para cambios de equipos HW
                }
                
                // ====================================================================================================
                // Condiciones para la empresa MEGADATOS
                // ====================================================================================================
                if($prefijoEmpresa == "TN")
                {
                    // Se obtiene la ip que se asigno al servicio 
                    $objIp = $this->_em->getRepository('schemaBundle:InfoIp')
                                       ->findOneBy(array("servicioId" => $idServicio, 
                                                         "estado"     => "Activo"));
                    if($objIp)
                    {
                        $ip = $objIp->getIp();
                    }
                    else
                    {
                        $ip = "NA";
                    }

                    $objDetalleElemento = $emComercial->getRepository('schemaBundle:InfoDetalleElemento')
                                                      ->findOneBy(array('elementoId'   => $elemento->getId(),
                                                                        'detalleNombre'=> 'MAC')); 
                    if($objDetalleElemento)
                    {
                        $strMac = $objDetalleElemento->getDetalleValor();
                    }
                    else
                    {
                        $strMac = "NA";
                    }

                    //Obtenemos la ubicación del dispositivo.
                    $objDetalleElemento     = $emComercial->getRepository('schemaBundle:InfoDetalleElemento')
                            ->findOneBy(array('elementoId' => $elemento->getId(),'detalleNombre'=> 'UBICACION'));
                    $strUbicacionDipositivo = is_object($objDetalleElemento) ? $objDetalleElemento->getDetalleValor() : 'Cliente';

                    //Determinar cuantas interfaces Wan tiene ocupado el CPE anterior ( pueden tener ocupada la interfaz Wan1, la Wan2
                    //o cupado ambas
                    $arrayParametros                   = array();
                    $arrayParametros['consultaEstado'] = false;
                    $arrayParametros['intIdElemento']  = $elemento->getId();
                    
                    //Se obtiene las interfaces que se encuentren ocupadas para cada elemento CPE
                    $arrayInterfacesOcupadas = $this->_em->getRepository('schemaBundle:InfoElemento')
                                                         ->getResultadoInterfacesElementoPorNombreInterface($arrayParametros);
                    
                    //Se requiere obtener la cantidad de puertos ocupados por CPE
                    //Los cpes/routers de cada cliente pueden tener ocupados tanto la interfaz wan1 como wan2 
                    //Función devuelve si esta siendo ocuapado un puerto o los dos puertos ( PRINCIPAL y BACKUP )
                    //Si es Router ( Nodo Wifi ) Siempre el valor a devolver será uno dado que sólo existe un Puerto a donde llega el enlace
                    //desde el Switch
                    if($modelo->getTipoElementoId()->getNombreTipoElemento()=='ROUTER')
                    {
                        $intCantidadPuertosOcupados = 1;
                    }
                    else
                    {
                        $intCantidadPuertosOcupados = isset($arrayInterfacesOcupadas['resultado'])?count($arrayInterfacesOcupadas['resultado']):0;
                    }
                    
                }

                $num++;
                $arr_encontrados[] = array(
                                            'idElemento'                 => $elemento->getId(),
                                            'nombre'                     => $elemento->getNombreElemento(),
                                            'nombreModelo'               => $modelo->getNombreModeloElemento(),
                                            'tipoElemento'               => $modelo->getTipoElementoId()->getNombreTipoElemento(),
                                            'serie'                      => $serie,
                                            'mac'                        => $strMac,
                                            'ubicacion'                  => $strUbicacionDipositivo,
                                            'ip'                         => $ip,
                                            'descripcion'                => $elemento->getDescripcionElemento(),
                                            'numeroInterfacesConectados' => $intCantidadPuertosOcupados,
                                            'strTieneMigracionHw'        => $strTieneMigracionHw,
                                            'strEquipoCpeHw'             => $strEquipoCpeHw,
                                            'strEquipoWifiAdicional'     => $strEquipoWifiAdicional,
                                            'strAgregarWifi'             => $strAgregarWifi,
                                            'intElementoWifi'            => $intElementoWifi,
                                            'strNombreWifi'              => $strNombreWifi
                                          );
            }


            if($num == 0)
            {
                $resultado = array('total' => 1,
                    'encontrados'       => array('idElemento' => 0,
                        'nombre'        => 'Ninguno',
                        'idElemento'    => 0,
                        'nombre'        => 'Ninguno'));
                $resultado = json_encode($resultado);

                return $resultado;
            }
            else
            {
                $data = json_encode($arr_encontrados);
                $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

                return $resultado;
            }
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    
    /**
     * Documentación para el método 'getElementosPorSolicitud'.
     *
     * Método utilizado para obtener elementos por solicitud
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 10-10-2016   Se agrega filtrado por caracteristica ELEMENTO CLIENTE 
     * @since 1.0 Versión Inicial
     *
     * @param  int    $idServicio       Identificador de servicio 
     * @param  String $tipoSolicitud1   Cadena de caracteres que indica un tipo de solicitud
     * @param  String $tipoSolicitud2   Cadena de caracteres que indica un tipo de solicitud
     * @param  String $estado           Cadena de caracteres que indica filtro de estado
     *
     * @return List Result  Listado de Objetos de tipo InfoDetalleSolCaract
     */
    public function getElementosPorSolicitud($idServicio, 
                                             $tipoSolicitud1, 
                                             $tipoSolicitud2, 
                                             $estado
                                            )
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('idsc')
           ->from('schemaBundle:AdmiTipoSolicitud','ats')
           ->from('schemaBundle:InfoDetalleSolicitud','ids')
           ->from('schemaBundle:InfoDetalleSolCaract','idsc')
           ->from('schemaBundle:AdmiCaracteristica','ac')
           ->where('ats.id = ?1')
           ->setParameter(1, $tipoSolicitud1)
           ->orWhere('ats.id = ?2')
           ->setParameter(2, $tipoSolicitud2)
           ->andWhere('ids.tipoSolicitudId = ats')
           ->andWhere('idsc.detalleSolicitudId = ids')
           ->andWhere('idsc.caracteristicaId = ac')
           ->andWhere('ids.servicioId = ?3')
           ->setParameter(3, $idServicio);            
        
        if($estado!='')
        {
            $qb->andWhere("ids.estado = ?4");
            $qb->setParameter(4, $estado);
            
            $qb->andWhere("idsc.estado = ?5");
            $qb->setParameter(5, "AsignadoTarea");
        }
        $qb->andWhere("ac.descripcionCaracteristica = ?6");
        $qb->setParameter(6, "ELEMENTO CLIENTE");
        $qb->andWhere("ac.estado = ?7");
        $qb->setParameter(7, "Activo");
        $query = $qb->getQuery();
        return $query->getResult();
    }
    
    public function generarJsonCorreosAntivirus($idServicio,$empresa, $start, $limit, $em){
        $arr_encontrados = array();
        
        //$em = $this->getManager('telconet');
        $entidadesTotal = $this->getCorreosAntivirus($idServicio, '', '');
        
        $entidad= $this->getCorreosAntivirus($idServicio, $start,$limit);
//        error_log('entra');
        
        
        if ($entidad) {
            
            $num = count($entidadesTotal);
            foreach ($entidad as $entity)
            {
                $caract = $em->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(array( "descripcionCaracteristica" => "USUARIO"));
                $prod = $em->getRepository('schemaBundle:AdmiProducto')->findOneBy(array( "nombreTecnico" => "ANTIVIRUS", "empresaCod"=>$empresa,"estado"=>"Activo"));
                $prodCaract = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                ->findOneBy(array( "productoId" => $prod->getId(), "caracteristicaId" => $caract->getId(), "estado" => "Activo"));
                
                $prodCaract1 = $entity->getProductoCaracterisiticaId();
                
                $estado = $entity->getEstado();
                $valor = $entity->getValor();
                $spc = $entity->getId();
                
                
                if($prodCaract->getId() == $prodCaract1){
                    $arr_encontrados[]=array('valor' =>$valor,
                                             'estado'=> $estado,
                                             'id' => $spc
                                            );
                }
            }
            

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    
    public function getCorreosAntivirus($idServicio,$start,$limit){
        $qb = $this->_em->createQueryBuilder();
            $qb->select('servicio')
               ->from('schemaBundle:InfoServicioProdCaract','servicio')
               ->where("servicio.servicioId = ?1")
               ->andWhere("servicio.estado = 'Activo'");
            $qb->setParameter(1, $idServicio);
        
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
        return $query->getResult();
    }
    
    /*
     * FIN - FUNCIONES DE SERVICIO PARTE TECNICA
     */

    /**
     * Función que sirve para obtener el json con los puntos a cortar masivamente de acuerdo a los filtros enviados por el usuario
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 11-08-2020
     * 
     * @author Javier Hidalgo <jihidalgo@telconet.ec>
     * @version 1.1 12-09-2022 - Se agrega mas datos al arrayParamsBusqueda para mejora de Filtros en busqueda de puntos para corte masivo.
     *                           Se agrega data fechaActivacionCorteMasivo al response para mostrar en grid.
     * @param array $arrayParametros [
     *                                  "strDatabaseDsn"            => Conexión a la Base de Datos
     *                                  "strUserComercial"          => Usuario del esquema Comercial
     *                                  "strPasswordComercial"      => Password del esquema Comercial
     *                                  "arrayParamsBusqueda"       => Arreglo con los parámetros de búsqueda de la consulta
     *                                                                  "strCodEmpresa"             => id de la empresa
     *                                                                  "strNumDocsAbiertos"        => número de documentos abiertos
     *                                                                  "strValorMontoCartera"      => valor de monto de cartera
     *                                                                  "strIdTipoNegocio"          => id del tipo de negocio
     *                                                                  "strValorClienteCanal"      => 'Todos', 'SI', 'NO'
     *                                                                  "strNombreUltimaMilla"      => nombre de la última milla
     *                                                                  "strIdCicloFacturacion"     => id del ciclo de facturación
     *                                                                  "strIdsOficinas"            => ids de oficinas concatenados por ,
     *                                                                  "strIdFormaPago"            => id de la forma de pago,
     *                                                                  "strValorCuentaTarjeta"     => 'Cuenta', 'Tarjeta'
     *                                                                  "strIdsTiposCuentaTarjeta"  => ids de tipos de cuenta concatenados por ,
     *                                                                  "strIdsBancos"              => ids de bancos concatenados por ,
     *                                                                  "strStart"                  => inicio del pagineo
     *                                                                  "strLimit"                  => número de registros del pagineo
     *                                                                  "strFechaLimActivacion"     => fecha de activacion del servicio
     *                                                                  "arrayFinalIdExcluidas"     => identificaciones del cliente a excluir
     *                                ]
     * @return string $strJsonData
     */
    public function getJsonPuntosCorteMasivo($arrayParametros)
    {
        $strMensaje                         = "";
        $arrayResultado                     = array();
        $boolFalse                          = false;
        $arrayRespuestaPuntosCorteMasivo    = $this->getPuntosCorteMasivo($arrayParametros);
        $strStatus                          = $arrayRespuestaPuntosCorteMasivo["status"];
        if($strStatus === "OK")
        {
            $intTotal               = $arrayRespuestaPuntosCorteMasivo["intTotalPuntosCorte"];
            $objCursorPuntosCorte   = $arrayRespuestaPuntosCorteMasivo["objCursorPuntosCorte"];
            if(!empty($objCursorPuntosCorte))
            {
                while(($arrayRowCursor = oci_fetch_array($objCursorPuntosCorte, OCI_ASSOC + OCI_RETURN_NULLS)) != $boolFalse)
                {
                    $arrayResultado[]   = array(
                                                "idPuntoCorteMasivo"                => $arrayRowCursor["ID_PUNTO"],
                                                "loginCorteMasivo"                  => $arrayRowCursor["LOGIN"],
                                                "nombreClienteCorteMasivo"          => $arrayRowCursor["NOMBRE_CLIENTE"],
                                                "nombreOficinaCorteMasivo"          => $arrayRowCursor["NOMBRE_OFICINA"],
                                                "saldoCorteMasivo"                  => $arrayRowCursor["SALDO"],
                                                "descripcionFormaPagoCorteMasivo"   => $arrayRowCursor["DESCRIPCION_FORMA_PAGO"],
                                                "descripcionBancoCorteMasivo"       => $arrayRowCursor["DESCRIPCION_BANCO"],
                                                "descripcionCuentaCorteMasivo"      => $arrayRowCursor["DESCRIPCION_CUENTA"],
                                                "nombreTipoNegocioCorteMasivo"      => $arrayRowCursor["NOMBRE_TIPO_NEGOCIO"],
                                                "nombreUltimaMillaCorteMasivo"      => $arrayRowCursor["ULTIMA_MILLA"],
                                                "fechaActivacionCorteMasivo"        => $arrayRowCursor["FECHA_ACTIVACION"]);
                }
            }
        }
        else
        {
            $intTotal   = 0;
            $strMensaje = $arrayRespuestaPuntosCorteMasivo["mensaje"];
        }
        $strJsonData    = json_encode(array('status'            => $strStatus,
                                            'mensaje'           => $strMensaje,
                                            'intTotal'          => $intTotal, 
                                            'arrayResultado'    => $arrayResultado));
        return $strJsonData;
    }
    
    /**
     * Función que sirve para obtener los puntos a cortar masivamente de acuerdo a los filtros enviados por el usuario
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 11-08-2020
     * 
     * @author Javier Hidalgo <jihidalgo@telconet.ec>
     * @version 1.1 12-09-2022 - Se agrega mas datos al arrayParamsBusqueda para mejora de Filtros en busqueda de puntos para corte masivo
     *
     * @param array $arrayParametros [
     *                                  "strDatabaseDsn"            => Conexión a la Base de Datos
     *                                  "strUserComercial"          => Usuario del esquema Comercial
     *                                  "strPasswordComercial"      => Password del esquema Comercial
     *                                  "arrayParamsBusqueda"       => Arreglo con los parámetros de búsqueda de la consulta
     *                                                                  "strCodEmpresa"             => id de la empresa
     *                                                                  "strFechaCreacionDoc"       => fecha de creación del documento
     *                                                                  "strTiposDocumentos"        => códigos de los tipos de documentos 
     *                                                                                                 concatenados por ,
     *                                                                  "strNumDocsAbiertos"        => número de documentos abiertos
     *                                                                  "strValorMontoCartera"      => valor de monto de cartera
     *                                                                  "strIdTipoNegocio"          => id del tipo de negocio
     *                                                                  "strValorClienteCanal"      => 'Todos', 'SI', 'NO'
     *                                                                  "strNombreUltimaMilla"      => nombre de la última milla
     *                                                                  "strIdCicloFacturacion"     => id del ciclo de facturación
     *                                                                  "strIdsOficinas"            => ids de oficinas concatenados por ,
     *                                                                  "strIdsFormasPago"          => ids de la formas de pago concatenados por ,
     *                                                                  "strValorCuentaTarjeta"     => 'Cuenta', 'Tarjeta'
     *                                                                  "strIdsTiposCuentaTarjeta"  => ids de tipos de cuenta concatenados por ,
     *                                                                  "strIdsBancos"              => ids de bancos concatenados por ,
     *                                                                  "strStart"                  => inicio del pagineo
     *                                                                  "strLimit"                  => número de registros del pagineo
     *                                                                  "strFechaLimActivacion"     => fecha de activacion del servicio
     *                                                                  "arrayFinalIdExcluidas"     => identificaciones del cliente a excluir
     *                                ]
     * @return array $arrayRespuesta [
     *                                  "status"                => OK o ERROR,
     *                                  "mensaje"               => Mensaje de error,
     *                                  "intTotalPuntosCorte"   => Total de registros
     *                                  "objCursorPuntosCorte"  => Cursor con la información de los registros obtenidos
     *                                ]
     */
    public function getPuntosCorteMasivo($arrayParametros)
    {
        $strDatabaseDsn         = ( isset($arrayParametros['strDatabaseDsn']) && !empty($arrayParametros['strDatabaseDsn']) )
                                    ? $arrayParametros['strDatabaseDsn'] : null;
        $strUserComercial       = ( isset($arrayParametros['strUserComercial']) && !empty($arrayParametros['strUserComercial']) )
                                    ? $arrayParametros['strUserComercial'] : null;
        $strPasswordComercial   = ( isset($arrayParametros['strPasswordComercial']) && !empty($arrayParametros['strPasswordComercial']) ) 
                                    ? $arrayParametros['strPasswordComercial'] : null;
        $strStatus              = "";
        $strMsjError            = "";
        $objCursorPuntosCorte   = null;
        $intTotalPuntosCorte    = 0;
        try
        {
            if(!empty($strDatabaseDsn) && !empty($strUserComercial) && !empty($strPasswordComercial))
            {
                $arrayParamsBusqueda    = $arrayParametros["arrayParamsBusqueda"];
                if(isset($arrayParamsBusqueda) && !empty($arrayParamsBusqueda))
                {
                    $strJsonFiltrosBusqueda     = json_encode($arrayParamsBusqueda);
                    $strConsultaTotalRegistros  = "SI";
                    $objOciConexion             = oci_connect($strUserComercial, $strPasswordComercial, $strDatabaseDsn);
                    $objCursorPuntosCorte       = oci_new_cursor($objOciConexion);
                    $strSql                     = "BEGIN
                                                    DB_COMERCIAL.TECNK_SERVICIOS.P_GET_PUNTOS_CORTE_MASIVO
                                                    (
                                                        :strJsonFiltrosBusqueda,
                                                        :strConsultaTotalRegistros,
                                                        :strStatus,
                                                        :strMsjError,
                                                        :intTotalPuntosCorte,
                                                        :objCursorPuntosCorte
                                                    );
                                                   END;";

                    $objStmt                    = oci_parse($objOciConexion,$strSql);
                    $strClobJsonFiltrosBusqueda = oci_new_descriptor($objOciConexion);
                    $strClobJsonFiltrosBusqueda->writetemporary($strJsonFiltrosBusqueda);
                    oci_bind_by_name($objStmt, ":strJsonFiltrosBusqueda", $strClobJsonFiltrosBusqueda, -1, OCI_B_CLOB);
                    oci_bind_by_name($objStmt, ":strConsultaTotalRegistros", $strConsultaTotalRegistros);
                    oci_bind_by_name($objStmt, ":strStatus",              $strStatus, 5);
                    oci_bind_by_name($objStmt, ":strMsjError",            $strMsjError, 4000);
                    oci_bind_by_name($objStmt, ":intTotalPuntosCorte",    $intTotalPuntosCorte, 10);
                    oci_bind_by_name($objStmt, ":objCursorPuntosCorte",   $objCursorPuntosCorte, -1, OCI_B_CURSOR);
                    oci_execute($objStmt);
                    oci_execute($objCursorPuntosCorte, OCI_DEFAULT);
                }
                else
                {
                    throw new \Exception('No se han enviado los parámetros de búsqueda para realizar la consulta');
                }
            }
            else
            {
                throw new \Exception('No se han enviado los parámetros adecuados para consultar los puntos para el corte masivo. Database('.
                                     $strDatabaseDsn.'), UsrComercial('.$strUserComercial.'), PassComercial('.$strPasswordComercial.').');
            }
        }
        catch (\Exception $e) 
        {
            $strStatus      = "ERROR";
            $strMsjError    = "Ha ocurrido una excepción al intentar realizar la consulta ";
            error_log("Error en getPuntosCorteMasivo ".$e->getMessage());      
        }
        $arrayRespuesta = array("status"                => $strStatus,
                                "mensaje"               => $strMsjError,
                                "intTotalPuntosCorte"   => $intTotalPuntosCorte,
                                "objCursorPuntosCorte"  => $objCursorPuntosCorte);
        return $arrayRespuesta;
    }
    
    /**
     * Función que sirve para obtener el json con el resumen previo de un corte masivo
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 01-10-2021
     * 
     * @param array $arrayParametros [
     *                                  "strDatabaseDsn"            => Conexión a la Base de Datos
     *                                  "strUserComercial"          => Usuario del esquema Comercial
     *                                  "strPasswordComercial"      => Password del esquema Comercial
     *                                  "arrayParamsBusqueda"       => Arreglo con los parámetros de búsqueda de la consulta
     *                                                                  "strCodEmpresa"             => id de la empresa
     *                                                                  "strNumDocsAbiertos"        => número de documentos abiertos
     *                                                                  "strValorMontoCartera"      => valor de monto de cartera
     *                                                                  "strIdTipoNegocio"          => id del tipo de negocio
     *                                                                  "strValorClienteCanal"      => 'Todos', 'SI', 'NO'
     *                                                                  "strNombreUltimaMilla"      => nombre de la última milla
     *                                                                  "strIdCicloFacturacion"     => id del ciclo de facturación
     *                                                                  "strIdsOficinas"            => ids de oficinas concatenados por ,
     *                                                                  "strIdFormaPago"            => id de la forma de pago,
     *                                                                  "strValorCuentaTarjeta"     => 'Cuenta', 'Tarjeta'
     *                                                                  "strIdsTiposCuentaTarjeta"  => ids de tipos de cuenta concatenados por ,
     *                                                                  "strIdsBancos"              => ids de bancos concatenados por ,
     *                                ]
     * @return string $strJsonData
     */
    public function getJsonResumenCorteMasivo($arrayParametros)
    {
        $strMensaje                         = "";
        $arrayResultado                     = array();
        $arrayObservacionTipoDoc            = array();
        $boolFalse                          = false;
        $arrayRespuestaResumenCorteMasivo   = $this->getResumenCorteMasivo($arrayParametros);
        $strStatus                          = $arrayRespuestaResumenCorteMasivo["status"];
        if($strStatus === "OK")
        {
            if(isset($arrayParametros["strCodEmpresa"]) && !empty($arrayParametros["strCodEmpresa"])
                && isset($arrayParametros["strPrefijoEmpresa"]) && !empty($arrayParametros["strPrefijoEmpresa"]))
            {
                $arrayTiposDocsCorteMasivo  = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->get(  'PARAMETROS_ASOCIADOS_A_SERVICIOS_'.$arrayParametros["strPrefijoEmpresa"], 
                                                                '', 
                                                                '', 
                                                                '',
                                                                'CORTE_MASIVO',
                                                                'TIPOS_DE_DOCUMENTOS',
                                                                '',
                                                                '',
                                                                'PERMITIDO_RESUMEN_PREVIO',
                                                                $arrayParametros["strCodEmpresa"]);
                if(isset($arrayTiposDocsCorteMasivo) && !empty($arrayTiposDocsCorteMasivo))
                {
                    foreach($arrayTiposDocsCorteMasivo as $arrayTipoDocCorteMasivo)
                    {
                        $arrayResultado[$arrayTipoDocCorteMasivo['valor4']]             = 0 . " ".$arrayTipoDocCorteMasivo['valor6'];
                        $arrayObservacionTipoDoc[$arrayTipoDocCorteMasivo['valor4']]    = $arrayTipoDocCorteMasivo['valor6'];
                    }
                }
            }
            
            $objCursorResumenCorte  = $arrayRespuestaResumenCorteMasivo["objCursorResumenCorte"];
            if(!empty($objCursorResumenCorte))
            {
                while(($arrayRowCursor = oci_fetch_array($objCursorResumenCorte, OCI_ASSOC + OCI_RETURN_NULLS)) != $boolFalse)
                {
                    $arrayResultado[$arrayRowCursor["CODIGO_TIPO_DOCUMENTO"]] = $arrayRowCursor["NUM_PUNTOS"]. " "
                                                                                .$arrayObservacionTipoDoc[$arrayRowCursor["CODIGO_TIPO_DOCUMENTO"]];
                }
            }
        }
        else
        {
            $strMensaje = $arrayRespuestaResumenCorteMasivo["mensaje"];
        }
        $strJsonData    = json_encode(array('status'            => $strStatus,
                                            'mensaje'           => $strMensaje,
                                            'arrayResultado'    => $arrayResultado));
        return $strJsonData;
    }
    
    /**
     * Función que sirve para obtener el resumen previo de un corte masivo
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 11-08-2020
     * 
     * @param array $arrayParametros [
     *                                  "strDatabaseDsn"            => Conexión a la Base de Datos
     *                                  "strUserComercial"          => Usuario del esquema Comercial
     *                                  "strPasswordComercial"      => Password del esquema Comercial
     *                                  "arrayParamsBusqueda"       => Arreglo con los parámetros de búsqueda de la consulta
     *                                                                  "strCodEmpresa"             => id de la empresa
     *                                                                  "strFechaCreacionDoc"       => fecha de creación del documento
     *                                                                  "strTiposDocumentos"        => códigos de los tipos de documentos 
     *                                                                                                 concatenados por ,
     *                                                                  "strNumDocsAbiertos"        => número de documentos abiertos
     *                                                                  "strValorMontoCartera"      => valor de monto de cartera
     *                                                                  "strIdTipoNegocio"          => id del tipo de negocio
     *                                                                  "strValorClienteCanal"      => 'Todos', 'SI', 'NO'
     *                                                                  "strNombreUltimaMilla"      => nombre de la última milla
     *                                                                  "strIdCicloFacturacion"     => id del ciclo de facturación
     *                                                                  "strIdsOficinas"            => ids de oficinas concatenados por ,
     *                                                                  "strIdsFormasPago"          => ids de la formas de pago concatenados por ,
     *                                                                  "strValorCuentaTarjeta"     => 'Cuenta', 'Tarjeta'
     *                                                                  "strIdsTiposCuentaTarjeta"  => ids de tipos de cuenta concatenados por ,
     *                                                                  "strIdsBancos"              => ids de bancos concatenados por ,
     *                                ]
     * @return array $arrayRespuesta [
     *                                  "status"                => OK o ERROR,
     *                                  "mensaje"               => Mensaje de error,
     *                                  "objCursorPuntosCorte"  => Cursor con la información de los registros obtenidos
     *                                ]
     */
    public function getResumenCorteMasivo($arrayParametros)
    {
        $strDatabaseDsn         = ( isset($arrayParametros['strDatabaseDsn']) && !empty($arrayParametros['strDatabaseDsn']) )
                                    ? $arrayParametros['strDatabaseDsn'] : null;
        $strUserComercial       = ( isset($arrayParametros['strUserComercial']) && !empty($arrayParametros['strUserComercial']) )
                                    ? $arrayParametros['strUserComercial'] : null;
        $strPasswordComercial   = ( isset($arrayParametros['strPasswordComercial']) && !empty($arrayParametros['strPasswordComercial']) ) 
                                    ? $arrayParametros['strPasswordComercial'] : null;
        $strStatus              = "";
        $strMsjError            = "";
        $objCursorResumenCorte  = null;
        try
        {
            if(!empty($strDatabaseDsn) && !empty($strUserComercial) && !empty($strPasswordComercial))
            {
                $arrayParamsBusqueda    = $arrayParametros["arrayParamsBusqueda"];
                if(isset($arrayParamsBusqueda) && !empty($arrayParamsBusqueda))
                {
                    $strJsonFiltrosBusqueda     = json_encode($arrayParamsBusqueda);
                    $objOciConexion             = oci_connect($strUserComercial, $strPasswordComercial, $strDatabaseDsn);
                    $objCursorResumenCorte      = oci_new_cursor($objOciConexion);
                    $strSql                     = "BEGIN
                                                    DB_COMERCIAL.TECNK_SERVICIOS.P_GET_RESUMEN_CORTE_MASIVO
                                                    (
                                                        :strJsonFiltrosBusqueda,
                                                        :strStatus,
                                                        :strMsjError,
                                                        :objCursorResumenCorte
                                                    );
                                                   END;";

                    $objStmt                    = oci_parse($objOciConexion,$strSql);
                    $strClobJsonFiltrosBusqueda = oci_new_descriptor($objOciConexion);
                    $strClobJsonFiltrosBusqueda->writetemporary($strJsonFiltrosBusqueda);
                    oci_bind_by_name($objStmt, ":strJsonFiltrosBusqueda", $strClobJsonFiltrosBusqueda, -1, OCI_B_CLOB);
                    oci_bind_by_name($objStmt, ":strStatus",              $strStatus, 5);
                    oci_bind_by_name($objStmt, ":strMsjError",            $strMsjError, 4000);
                    oci_bind_by_name($objStmt, ":objCursorResumenCorte",   $objCursorResumenCorte, -1, OCI_B_CURSOR);
                    oci_execute($objStmt);
                    oci_execute($objCursorResumenCorte, OCI_DEFAULT);
                }
                else
                {
                    throw new \Exception('No se han enviado los parámetros de búsqueda para realizar la consulta');
                }
            }
            else
            {
                throw new \Exception('No se han enviado los parámetros adecuados para consultar los puntos para el corte masivo. Database('.
                                     $strDatabaseDsn.'), UsrComercial('.$strUserComercial.'), PassComercial('.$strPasswordComercial.').');
            }
        }
        catch (\Exception $e) 
        {
            $strStatus      = "ERROR";
            $strMsjError    = "Ha ocurrido una excepción al intentar realizar la consulta ";
            error_log("Error en getPuntosCorteMasivo ".$e->getMessage());      
        }
        $arrayRespuesta = array("status"                => $strStatus,
                                "mensaje"               => $strMsjError,
                                "objCursorResumenCorte" => $objCursorResumenCorte);
        return $arrayRespuesta;
    }
    
    /**
     * Función que sirve para obtener el CSV con los puntos a cortar masivamente de acuerdo a los filtros enviados por el usuario
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 15-08-2020
     * 
     * @param array $arrayParametros [
     *                                  "strDatabaseDsn"            => Conexión a la Base de Datos
     *                                  "strUserComercial"          => Usuario del esquema Comercial
     *                                  "strPasswordComercial"      => Password del esquema Comercial
     *                                  "arrayParamsBusqueda"       => Arreglo con los parámetros de búsqueda de la consulta
     *                                                                  "strCodEmpresa"             => id de la empresa
     *                                                                  "strFechaCreacionDoc"       => fecha de creación del documento
     *                                                                  "strTiposDocumentos"        => códigos de los tipos de documentos 
     *                                                                                                 concatenados por ,
     *                                                                  "strNumDocsAbiertos"        => número de documentos abiertos
     *                                                                  "strValorMontoCartera"      => valor de monto de cartera
     *                                                                  "strIdTipoNegocio"          => id del tipo de negocio
     *                                                                  "strValorClienteCanal"      => 'Todos', 'SI', 'NO'
     *                                                                  "strNombreUltimaMilla"      => nombre de la última milla
     *                                                                  "strIdCicloFacturacion"     => id del ciclo de facturación
     *                                                                  "strIdsOficinas"            => ids de oficinas concatenados por ,
     *                                                                  "strIdsFormasPago"          => ids de la formas de pago concatenados por ,
     *                                                                  "strValorCuentaTarjeta"     => 'Cuenta', 'Tarjeta'
     *                                                                  "strIdsTiposCuentaTarjeta"  => ids de tipos de cuenta concatenados por ,
     *                                                                  "strIdsBancos"              => ids de bancos concatenados por ,
     *                                ]
     * @return string $strJsonData
     */
    public function getJsonRespuestaExportarCsvCorteMasivo($arrayParametros)
    {
        $strDatabaseDsn             = ( isset($arrayParametros['strDatabaseDsn']) && !empty($arrayParametros['strDatabaseDsn']) )
                                        ? $arrayParametros['strDatabaseDsn'] : null;
        $strUserInfraestructura     = ( isset($arrayParametros['strUserInfraestructura']) && !empty($arrayParametros['strUserInfraestructura']) )
                                        ? $arrayParametros['strUserInfraestructura'] : null;
        $strPasswordInfraestructura = ( isset($arrayParametros['strPasswordInfraestructura']) 
                                        && !empty($arrayParametros['strPasswordInfraestructura']) ) 
                                        ? $arrayParametros['strPasswordInfraestructura'] : null;
        $strUsrConsulta             = $arrayParametros['strUsrConsulta'];
        $strStatus                  = "";
        $strMsjError                = "";
        $intIdDocumento             = 0;
        try
        {
            if(!empty($strDatabaseDsn) && !empty($strUserInfraestructura) && !empty($strPasswordInfraestructura))
            {
                $arrayParamsExportar    = $arrayParametros["arrayParamsExportar"];
                if(isset($arrayParamsExportar) && !empty($arrayParamsExportar))
                {
                    $strJsonFiltrosExportar     = json_encode($arrayParamsExportar);
                    $objOciConexion             = oci_connect($strUserInfraestructura, $strPasswordInfraestructura, $strDatabaseDsn);
                    $strSql                     = "BEGIN
                                                    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_GET_CSV_PUNTOS_CORTE_MASIVO
                                                    (
                                                        :strJsonFiltrosExportar,
                                                        :strUsrConsulta,
                                                        :strStatus,
                                                        :strMsjError,
                                                        :intIdDocumento
                                                    );
                                                   END;";
                    
                    $objStmt                    = oci_parse($objOciConexion,$strSql);
                    $strClobJsonFiltrosExportar = oci_new_descriptor($objOciConexion);
                    $strClobJsonFiltrosExportar->writetemporary($strJsonFiltrosExportar);
                    oci_bind_by_name($objStmt, ":strJsonFiltrosExportar", $strClobJsonFiltrosExportar, -1, OCI_B_CLOB);
                    oci_bind_by_name($objStmt, ":strUsrConsulta",         $strUsrConsulta);
                    oci_bind_by_name($objStmt, ":strStatus",              $strStatus, 5);
                    oci_bind_by_name($objStmt, ":strMsjError",            $strMsjError, 4000);
                    oci_bind_by_name($objStmt, ":intIdDocumento",         $intIdDocumento, 32, SQLT_INT);
                    oci_execute($objStmt);
                }
                else
                {
                    throw new \Exception('No se han enviado los parámetros de búsqueda para exportar el archivo csv');
                }
            }
            else
            {
                throw new \Exception('No se han enviado los parámetros adecuados para consultar los puntos para el corte masivo. '.
                                     'Database('.$strDatabaseDsn.'), UsrInfraestructura('.$strUserInfraestructura.
                                     '), PassInfraestructura('.$strPasswordInfraestructura.').');
            }
        }
        catch (\Exception $e) 
        {
            $strStatus      = "ERROR";
            $strMsjError    = "Ha ocurrido una excepción al intentar exportar el archivo CSV ";
            error_log("Error en getJsonRespuestaExportarCsvCorteMasivo ".$e->getMessage());      
        }
        
        $strJsonData    = json_encode(array('status'        => $strStatus,
                                            'mensaje'       => $strMsjError,
                                            'idDocumento'   => $intIdDocumento));
        return $strJsonData;
    }

    private function getPuntosReactivacionQueryBuilder($arrayParametros, $start, $limit, $recaudacionId, $pagoLineaId, $debitoId) {
        
        $qb = $this->_em->createQueryBuilder();
        
        $qb->from('schemaBundle:VistaProcesoMasivoReactivacion', 'vista');
        $qb->andWhere('vista.empresaCod = :empresaCod')->setParameter('empresaCod', $arrayParametros['idEmpresa']);
        
        if (isset($arrayParametros['valorMontoDeuda'])) 
        {
            $qb->andWhere("vista.saldo <= :valorMontoDeuda")->setParameter('valorMontoDeuda', $arrayParametros['valorMontoDeuda']);
        }

        if (isset($arrayParametros['idsOficinas'])) 
        {
            if (!empty($arrayParametros['idsOficinas'])) 
            {
                $oficinas = explode(",", $arrayParametros['idsOficinas']);
                $qb->andWhere($qb->expr()->in('vista.oficinaId', $oficinas));
            }
        }
        
        if (isset($arrayParametros['fechaCorteDesde']) && isset($arrayParametros['fechaCorteHasta'])) 
        {
            if ($arrayParametros['fechaCorteDesde'] != "" && $arrayParametros['fechaCorteHasta'] != "") 
            {                
                $qb->andWhere($qb->expr()->between('vista.fechaUltimaModificacion', ':desde', ':hasta'));
                $fechaDesde = explode('T', $arrayParametros['fechaCorteDesde']);
                $fechaHasta = explode('T', $arrayParametros['fechaCorteHasta']);
                $qb->setParameter('desde', \DateTime::createFromFormat('Y-m-d H:i:s', $fechaDesde[0] . ' 00:00:00'));
                $qb->setParameter('hasta', \DateTime::createFromFormat('Y-m-d H:i:s', $fechaHasta[0] . ' 23:59:59'));
            }
        }
//         $recaudacionId=4454;
        if (!empty($recaudacionId)) {
            if ($recaudacionId != "") {
                $qb->andWhere($qb->expr()->exists('select 1 from schemaBundle:InfoPagoCab ipc where ipc.puntoId=vista.puntoId and ipc.recaudacionId=:recaudacionId'));
                $qb->setParameter('recaudacionId', $recaudacionId);
            }
        }
        //$pagoLineaId=12;
        if (!empty($pagoLineaId)) {
            if ($pagoLineaId != "") {
                $qb->andWhere($qb->expr()->exists('select 1 from schemaBundle:InfoPagoCab ipc where ipc.puntoId=vista.puntoId and ipc.pagoLinea=:pagoLineaId'));
                $qb->setParameter('pagoLineaId', $pagoLineaId);
            }
        }
        
         //Mostrar Clientes canales o mostrar todos
        if (isset($arrayParametros['clienteCanal'])) 
        {
            if ($arrayParametros['clienteCanal'] != "Todos") 
            {
                if($arrayParametros['clienteCanal'] === "S")
                {
                    $qb->andWhere('vista.rol = :clienteCanal');
                }
                else
                {
                    $qb->andWhere('vista.rol <> :clienteCanal');
                }
                
                $qb->setParameter('clienteCanal', 'Cliente Canal');
            }
        }
        
        //ultima milla
        if (isset($arrayParametros['ultimaMilla'])) 
        {
            if ($arrayParametros['ultimaMilla'] != "") 
            {
                $qb->andWhere('vista.ultimaMilla = :ultimaMilla'  );
                $qb->setParameter('ultimaMilla', $arrayParametros['ultimaMilla']);
            }
        }
        
        
        // devolver el query builder
        return $qb;
    }
    
    /**
     * 
     * @param string $tipoQuery count, punto, entity
     * @param string $idEmpresa
     * @param \DateTime $fechaCorteDesde
     * @param \DateTime $fechaCorteHasta
     * @param float $valorMontoDeuda
     * @param array $idsOficinas
     * @param integer $start
     * @param integer $limit
     * @param integer $recaudacionId
     * @param integer $pagoLineaId
     * @param integer $debitoId
     * @return \Doctrine\ORM\NativeQuery
     */
    private function getPuntosReactivacionNativeQuery($tipoQuery, $idEmpresa, $fechaCorteDesde, $fechaCorteHasta, $valorMontoDeuda, $idsOficinas, $start, $limit, $recaudacionId, $pagoLineaId, $debitoId) {
        // definir result set mapping y native query sin sql
        $rsm = new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null, $rsm);
        // sql y result set mapping dinamico
        switch ($tipoQuery)
        {
            case 'count':
                $sql = 'SELECT COUNT(*) AS TOTAL';
                $rsm->addScalarResult('TOTAL', 'total', 'integer');
                break;
            case 'punto':
                $sql = 'SELECT PUNTO.ID_PUNTO';
                $rsm->addScalarResult('ID_PUNTO', 'puntoId', 'integer');
                break;
            case 'entity':
                $sql = 'SELECT ROW_NUMBER () OVER (ORDER BY PERSONA.ID_PERSONA) AS ID_VISTA,
                    PERSONA.ID_PERSONA,
                    CASE
                        WHEN PERSONA.RAZON_SOCIAL IS NOT NULL
                        THEN PERSONA.RAZON_SOCIAL
                        ELSE NVL(PERSONA.NOMBRES,\'\')|| \' \' ||NVL(PERSONA.APELLIDOS,\'\')
                        END AS NOMBRE_CLIENTE,
                    PERSONA_EMPRESA_ROL.OFICINA_ID,
                    PUNTO.LOGIN,
                    OFICINA_GRUPO.NOMBRE_OFICINA,
                    CONTRATO.FORMA_PAGO_ID,
                    FORMA_PAGO.DESCRIPCION_FORMA_PAGO,
                    PUNTO.ID_PUNTO,
                    VISTA_ESTADO_CUENTA.SALDO,
                    EMPRESA_ROL.EMPRESA_COD,
                    PUNTO.FE_ULT_MOD';
                $rsm->addRootEntityFromClassMetadata('\telconet\schemaBundle\Entity\VistaProcesoMasivoReactivacion', 'vista');
                break;
        }
        // FIXME: aparecen registros repetidos cuando existe mas de un contrato (tal vez se debe filtrar por estado)
        $sql .= ' FROM
                DB_COMERCIAL.INFO_PUNTO PUNTO
                JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL PERSONA_EMPRESA_ROL ON PERSONA_EMPRESA_ROL.ID_PERSONA_ROL = PUNTO.PERSONA_EMPRESA_ROL_ID
                JOIN DB_COMERCIAL.INFO_PERSONA PERSONA ON PERSONA.ID_PERSONA = PERSONA_EMPRESA_ROL.PERSONA_ID
                JOIN DB_COMERCIAL.INFO_OFICINA_GRUPO OFICINA_GRUPO ON OFICINA_GRUPO.ID_OFICINA = PERSONA_EMPRESA_ROL.OFICINA_ID
                JOIN DB_COMERCIAL.INFO_EMPRESA_ROL EMPRESA_ROL ON EMPRESA_ROL.ID_EMPRESA_ROL = PERSONA_EMPRESA_ROL.EMPRESA_ROL_ID
                JOIN DB_COMERCIAL.INFO_CONTRATO CONTRATO ON CONTRATO.PERSONA_EMPRESA_ROL_ID = PERSONA_EMPRESA_ROL.ID_PERSONA_ROL
                JOIN DB_GENERAL.ADMI_FORMA_PAGO FORMA_PAGO ON FORMA_PAGO.ID_FORMA_PAGO = CONTRATO.FORMA_PAGO_ID
                JOIN DB_FINANCIERO.VISTA_ESTADO_CUENTA_RESUMIDO VISTA_ESTADO_CUENTA ON PUNTO.ID_PUNTO = VISTA_ESTADO_CUENTA.PUNTO_ID
            WHERE
                EMPRESA_ROL.ROL_ID = 1
                AND exists(select 1 from info_servicio SERVICIO where SERVICIO.punto_id=PUNTO.ID_PUNTO AND SERVICIO.estado=\'In-Corte\' and rownum=1)
                AND NOT EXISTS (SELECT 1 FROM DB_INFRAESTRUCTURA.INFO_PROCESO_MASIVO_DET DET
                    WHERE DET.PUNTO_ID = PUNTO.ID_PUNTO AND DET.ESTADO=\'Pendiente\' and rownum=1)
                AND EMPRESA_ROL.EMPRESA_COD = :empresaCod';
        
        $query->setParameter('empresaCod', $idEmpresa);
        
        if (isset($valorMontoDeuda)) {
            $sql .= ' AND VISTA_ESTADO_CUENTA.SALDO <= :valorMontoDeuda ';
            $query->setParameter('valorMontoDeuda', $valorMontoDeuda);
        }
        
        if (isset($idsOficinas)) {
            if (!empty($idsOficinas)) {
                $sql .= ' AND PERSONA_EMPRESA_ROL.OFICINA_ID IN(:oficinas) ';
                $oficinas = explode(",", $idsOficinas);
                $query->setParameter('oficinas', $oficinas);
            }
        }
        
        if (isset($fechaCorteDesde) && isset($fechaCorteHasta)) {
            if ($fechaCorteDesde != "" && $fechaCorteHasta != "") {
                $sql .= ' AND PUNTO.FE_ULT_MOD BETWEEN :desde AND :hasta ';
                $fechaDesde = explode('T', $fechaCorteDesde);
                $fechaHasta = explode('T', $fechaCorteHasta);
                $query->setParameter('desde', \DateTime::createFromFormat('Y-m-d H:i:s', $fechaDesde[0] . ' 00:00:00'));
                $query->setParameter('hasta', \DateTime::createFromFormat('Y-m-d H:i:s', $fechaHasta[0] . ' 23:59:59'));
            }
        }
        
        if (!empty($recaudacionId)) {
            if ($recaudacionId != "") {
                $sql .= ' AND EXISTS(select 1 from DB_FINANCIERO.INFO_PAGO_CAB ipc where ipc.PUNTO_ID=PUNTO.ID_PUNTO and ipc.RECAUDACION_ID = :recaudacionId) ';
                $query->setParameter('recaudacionId', $recaudacionId);
            }
        }
        
        if (!empty($pagoLineaId)) {
            if ($pagoLineaId != "") {
                $sql .= ' AND EXISTS(select 1 from DB_FINANCIERO.INFO_PAGO_CAB ipc where ipc.PUNTO_ID=PUNTO.ID_PUNTO and ipc.PAGO_LINEA_ID = :pagoLineaId) ';
                $query->setParameter('pagoLineaId', $pagoLineaId);
            }
        }
        
        $sql .= ' ORDER BY PUNTO.LOGIN';
        // definir sql del native query y retornarlo
        $query->setSQL($sql);
        return $query;
    }
    
    public function getPuntosReactivacion($arrayParametros, $start, $limit, $recaudacionId, $pagoLineaId, $debitoId) {
          
        $qb = $this->getPuntosReactivacionQueryBuilder($arrayParametros, $start, $limit, $recaudacionId, $pagoLineaId, $debitoId);
        // ..
        // Primero se obtienen todos los datos con un select en count
        $qb->select('count(vista.id)');
        // ...
        $query = $qb->getQuery();
        $total = $query->getSingleScalarResult();
        // ...
        // Segundo obtenemos los datos cambiando el select para que traiga la informacion
        $qb->select('vista');
        // ...
        if ($start != '') {
            $qb->setFirstResult($start);
        }
        if ($limit != '') {
            $qb->setMaxResults($limit);
        }
        $queryFilter = $qb->getQuery();
        $datos = $queryFilter->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;
        return $resultado;
    }       
    
    public function getPuntosReactivacionIds($idEmpresa, $fechaCorteDesde, $fechaCorteHasta, $valorMontoDeuda, $idsOficinas, $start, $limit, $recaudacionId, $pagoLineaId, $debitoId) {
        // Primero se obtienen todos los datos con un select en count
        $query = $this->getPuntosReactivacionNativeQuery('count', $idEmpresa, $fechaCorteDesde, $fechaCorteHasta, $valorMontoDeuda, $idsOficinas, $start, $limit, $recaudacionId, $pagoLineaId, $debitoId);
        $total = $query->getSingleScalarResult();
        // obtenemos solo los ids de los puntos
        $queryFilter = $this->getPuntosReactivacionNativeQuery('punto', $idEmpresa, $fechaCorteDesde, $fechaCorteHasta, $valorMontoDeuda, $idsOficinas, $start, $limit, $recaudacionId, $pagoLineaId, $debitoId);
//         if ($limit != '')
//         {
//             $queryFilter->setSQL('SELECT a.*, rownum AS doctrine_rownum FROM (' . $queryFilter->getSQL() . ') a WHERE rownum <= :doctrine_limit');
//             $queryFilter->setParameter('doctrine_limit', $limit + $start);
//             if ($start != '')
//             {
//                 $queryFilter->setSQL('SELECT * FROM (' . $queryFilter->getSQL() . ') WHERE doctrine_rownum >= :doctrine_start');
//                 $queryFilter->setParameter('doctrine_start', $start + 1);
//             }
//         }
        $datos = $queryFilter->getResult('ScalarValueHydrator');
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;
        return $resultado;
    }
    
    //TODO - GET_SERVICIOS_CAMBIO_PLAN
    public function getServiciosParaCambioPlan($idEmpresa, $idsOficinas, $planId, $start, $limit){
        //...        
        $oficina = explode(",", $idsOficinas);
        //...
        $qb = $this->_em->createQueryBuilder();
        $qb->from('schemaBundle:VistaProcesoMasivoServicios', 'vista');
        //...
        $qb->andWhere('vista.empresaCod = :empresaCod')->setParameter('empresaCod', $idEmpresa);

        if (!empty($oficinas)) {
            $qb->andWhere($qb->expr()->in('vista.oficinaId', $oficinas));
        }
        
        if(!empty($planId)){
            $qb->andWhere("vista.planId = :planId");
            $qb->setParameter('planId', $planId);
        }
        
        $estados = array("Activo","In-Temp","In-Corte");
        $qb->andWhere($qb->expr()->in('vista.estadoServicio', $estados));
        
        // ..
        // Primero se obtienen todos los datos con un select en count
        $qb->select('count(vista.id)');
        // ...
        $query = $qb->getQuery();
        $total = $query->getSingleScalarResult();
        // ...
        // Segundo obtenemos los datos cambiando el select para que traiga la informacion
        $qb->select('vista');
        // ...
        if ($start != '') {
            $qb->setFirstResult($start);
        }
        if ($limit != '') {
            $qb->setMaxResults($limit);
        }
        $queryFilter = $qb->getQuery();
        $datos = $queryFilter->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;
        return $resultado;
    }
    
    //CORTE MASIVO
    
    public function generarJsonPuntosACortar($idEmpresa,$facturasAbiertas, $montoCartera, $oficinaGrupo, $formaPago, $estado,$start,$limit,$emF,$em,$tipoNegocio){
        $arr_encontrados = array();
        //$em = $this->getManager('telconet');
        //$entidadesTotal = $this->getPuntosACortar($idEmpresa,$facturasAbiertas, $montoCartera, $oficinaGrupo, $formaPago,$estado,'','');
        
        
        
        $resultado= $this->getPuntosACortar($idEmpresa,$facturasAbiertas, $montoCartera, $oficinaGrupo, $formaPago,$estado,$start,5000,$tipoNegocio);
//        error_log('entra');
        
        $encontrados = $resultado['registros'];
        //$encontradosTotal = $resultado['total'];
        
        if ($encontrados) {
            
            //$num = count($entidadesTotal);
            //$num = $encontradosTotal;
            $num = 0 ;
            
            foreach ($encontrados as $entity)
            {
                $puntoId = $entity->getPuntoFacturacionId();
               
              if($puntoId && $puntoId!=""){  
                  $punto = $em->getRepository('schemaBundle:InfoPunto')->find($puntoId);
               
//                $cartera = $this->obtieneSaldoPorPunto($puntoId, $idEmpresa, $emF);
                $flagF = 2;
                if($facturasAbiertas!=""){
                   // $facturaAbiertaPunto = $emF->getRepository('schemaBundle:InfoDocumentoFinancieroCab')->findBy(array( "estadoImpresionFact" => "Activo", "puntoId"=>$punto->getId()));;
                    $facturaAbiertaPunto=$this->getFacturasAbiertas($punto->getId());
                    
                    if($facturasAbiertas!=""){
                        // si existen facturas abiertas y las facturas del query son menor a las del filtro no deben aparecer
                        if(count($facturaAbiertaPunto) < $facturasAbiertas){
                          //  echo("holaa"); echo($puntoId); die();
                            $flagF=0;
                        }
                    }
                    else{// sino flag=0 no debe salir el registro porque no tiene facturas abierats
                        $flagF=2;
                    }
                }    
                
                if($entity->getRazonSocial()!=""){
                    $clienteNombre = $entity->getRazonSocial();
                }
                else{
                    $clienteNombre = $entity->getNombres()." ".$entity->getApellidos();
                }
                
               
                if($flagF==1){ //debe salir el registro porue tiene facturas abiertas
                    $num++;
                    $arr_encontrados[]=array('idPuntoFacturacion' =>$puntoId,
                                         'login' => $entity->getLogin(),
                                         'clienteNombre' => $clienteNombre,
                                         'clienteId' => $entity->getId(),
                                         'oficina' => $entity->getNombreOficina(),
                                         'cartera' => round($entity->getSaldo(),2),
                                         'formaPago' => $entity->getDescripcionFormaPago(),
                                         'nombreNegocio'=> $entity->getNombreTipoNegocio()
                                         //'plan' => $entity->getNombrePlan(),
                                         //'estado' => $entity->getEstado()
                                         );
                }
                else if($flagF==2){
//                if($flagF==2){
                    $num++;
                    $arr_encontrados[]=array('idPuntoFacturacion' =>$puntoId,
                                         'login' => $entity->getLogin(),
                                         'clienteNombre' => $clienteNombre,
                                         'clienteId' => $entity->getId(),
                                         'oficina' => $entity->getNombreOficina(),
                                         'cartera' => round($entity->getSaldo(),2),
                                         'formaPago' => $entity->getDescripcionFormaPago(),
                                         'nombreNegocio'=> $entity->getNombreTipoNegocio()
                                         //'plan' => $entity->getNombrePlan(),
                                         //'estado' => $entity->getEstado()
                                         );
                }  
                
              }//fin si no es nulo los padres de facturacion
            }

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
        
    }
    
    ///Buscar facturas abiertas el primero de cada mes x idPunto de facturacion
    public function getFacturasAbiertas($idPuntoFacturacion){
        
        $year=date('Y');
        $month=date('m');
        $day='01';
      //  echo($idPuntoFacturacion); die();
        $fechaEmision = date("Y/m/d", strtotime($year."-".$month."-".$day));   
    // print_r($fecha); die();
        
        $sql=("Select cab.id
              FROM  schemaBundle:InfoDocumentoFinancieroCab cab
              where cab.puntoId = $idPuntoFacturacion
               and cab.estadoImpresionFact not in ( 'Pendiente','Cerrado','Anulado','Rechazado','PendienteSri','PendienteError'   )
               and cab.feEmision<= '$fechaEmision'

               ");
       
       $query = $this->_em->createQuery($sql);
      //  echo $query->getSql(); die();
        $datos = $query->getResult();       
		
          
        return $datos;        
        
    }
   
    public function getPuntosACortar($idEmpresa,$facturasAbiertas, $montoCartera, $oficinaGrupo, $formaPago,$estado,$start,$limit,$tipoNegocio){
        $oficina = explode(",", $oficinaGrupo);
        $forma = explode(",",$formaPago);
        
        
        $qb = $this->_em->createQueryBuilder();
        
        $qb->select('vista')

           ->from('schemaBundle:VistaSaldoClientePuntoPadre','vista')

           ->where('vista.empresaCod = ?1')
           ->setParameter(1, $idEmpresa)
           //->andWhere('vista.estado = ?2')
           //->setParameter(2, $estado)
           ->andWhere($qb->expr()->in('vista.oficinaId', $oficina));

        if($montoCartera!=""){
            $qb->andWhere("vista.saldo >= ?3")
                ->setParameter(3, $montoCartera);
        }
        else{
            $qb->andWhere("vista.saldo > 0");
        }
            
            
        if($formaPago!=""){
            $qb->andWhere($qb->expr()->in('vista.formaPagoId', $forma));
            
        }
        
         if(isset($tipoNegocio)){
            if($tipoNegocio!=""){
                $qb->andWhere("vista.tipoNegocioId = ?4")
                     ->setParameter(4, $tipoNegocio);
            }
       }
        
        //contar cuantos datos trae en total
        //$total = $qbC->getQuery()->getSingleScalarResult();
        
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
        $datos = $query->getResult();
        $resultado['registros']=$datos;
        $resultado['total']=0;
        
//        print($query->getSQL());
//        die();
        
        return $resultado;
    }
    
    public function obtieneSaldoPorPunto($idPunto, $idEmpresa, $emfn){
        //echo "PUNTO:".$idPunto."<br>";
        //$emfn = $this->get('doctrine')->getManager('telconet_financiero');
        $ingresos=0;$egresos=0;
        $arrValorTotalFacturas=array();
        $arrValorTotalFacturasProporcionales=array();
        $arrValorTotalPagos=array();
        $arrValorTotalAnticipos=array();
        $arrValorTotalNotasDebito=array();
        $arrValorTotalNotasCredito=array();
        
        //CONSULTA FACTURAS DEL CLIENTE Y SUMA AL SALDO
        $arrValorTotalFacturas=$emfn->getRepository('schemaBundle:InfoDocumentoFinancieroCab')
                                    ->findValorTotalDocumentoPorPuntoPorOfiPorTipoDocPorEmp($idPunto, 'FAC');
        $arrValorTotalFacturasProporcionales=$emfn->getRepository('schemaBundle:InfoDocumentoFinancieroCab')
                                                  ->findValorTotalDocumentoPorPuntoPorOfiPorTipoDocPorEmp($idPunto, 'FACP');
        
        //CONSULTA LOS PAGOS DEL CLIENTE y RESTAR AL SALDO
        $arrValorTotalPagos=$emfn->getRepository('schemaBundle:InfoPagoCab')
                                 ->findTotalPagosPorPuntoPorTipoDocPorEmpresa($idPunto,'PAG');
        
        //CONSULTA LOS ANTICIPOS DEL CLIENTE y RESTAR AL SALDO
        $arrValorTotalAnticipos=$emfn->getRepository('schemaBundle:InfoPagoCab')
                                     ->findTotalPagosPorPuntoPorTipoDocPorEmpresa($idPunto,'ANT');
        
        //CONSULTA LOS ANTICIPOS SIN CLIENTE ya asignados y RESTAR AL SALDO
        $arrValorTotalAnticiposSinCliente=$emfn->getRepository('schemaBundle:InfoPagoCab')
                                               ->findTotalPagosPorPuntoPorTipoDocPorEmpresa($idPunto,'ANTS');
        
        //CONSULTA LAS NOTAS DE DEBITO Y LAS SUMA AL SALDO
        $arrValorTotalNotasDebito=$emfn->getRepository('schemaBundle:InfoDocumentoFinancieroCab')
                                       ->findValorTotalDocumentoPorPuntoPorOfiPorTipoDocPorEmp($idPunto, 'ND');
        
        //CONSULTA LAS NOTAS DE CREDITO Y LAS RESTA AL SALDO
        $arrValorTotalNotasCredito=$emfn->getRepository('schemaBundle:InfoDocumentoFinancieroCab')
                                        ->findValorTotalDocumentoPorPuntoPorOfiPorTipoDocPorEmp($idPunto, 'NC');
        
        
        
        //CALCULO EL SALDO Y ENVIO COMO VALOR A DEBITAR
        //echo($arrValorTotalFacturas[0]['valorTotal']);
        //echo "FACTURAS:".$arrValorTotalFacturas[0]['valorTotal']."<br>";
        //echo "FACTURAS PROPORCIONALES:".$arrValorTotalFacturasProporcionales[0]['valorTotal']."<br>";
        //echo "ND:".$arrValorTotalNotasDebito[0]['valorTotal']."<br>";
        //echo "PAGOS:".$arrValorTotalPagos[0]['valorTotal']."<br>";
        //echo "ANTICIPOS:".$arrValorTotalAnticipos[0]['valorTotal']."<br>";
        //echo "NC:".$arrValorTotalNotasCredito[0]['valorTotal']."<br>";
        //INGRESOS
        if(count($arrValorTotalFacturas)>0)
            $ingresos+= $arrValorTotalFacturas[0]['valorTotal'];
        if(count($arrValorTotalFacturasProporcionales)>0)
            $ingresos+= $arrValorTotalFacturasProporcionales[0]['valorTotal'];
        if(count($arrValorTotalNotasDebito)>0)
        $ingresos+= $arrValorTotalNotasDebito[0]['valorTotal'];
        
        //EGRESOS
        if(count($arrValorTotalPagos)>0)
            $egresos+= $arrValorTotalPagos[0]['valorTotal'];
        if(count($arrValorTotalAnticipos)>0)
            $egresos+= $arrValorTotalAnticipos[0]['valorTotal'];
        if(count($arrValorTotalAnticiposSinCliente)>0)	
            $egresos+= $arrValorTotalAnticiposSinCliente[0]['valorTotal'];
        if(count($arrValorTotalNotasCredito)>0)
            $egresos+= $arrValorTotalNotasCredito[0]['valorTotal'];
            //echo "in:".$ingresos." out:".$egresos."<br>";
        //echo "INGRESOS:".$ingresos."<br>";
        //echo "EGRESOS:".$egresos."<br>";
        //echo "Resta:".    ($ingresos - $egresos)."<br>";
        
        return $datoObtenido = $ingresos - $egresos;

    } 
    
    //REACTIVACION MASIVA
    public function generarJsonServiciosAReactivar($idEmpresa, $oficinaGrupo, $formaPago, $estado,$start,$limit,$em,$emF){
        $arr_encontrados = array();
        //$em = $this->getManager('telconet');
        //$entidadesTotal = $this->getServiciosAReactivar($idEmpresa, $oficinaGrupo, $formaPago,$estado,'','');
        
        $entidad= $this->getServiciosAReactivar($idEmpresa, $oficinaGrupo, $formaPago,$estado,$start,$limit);
//        error_log('entra');
        
        
        if ($entidad) {
            
            //$num = count($entidadesTotal);
            $num=0;
            foreach ($entidad as $entity)
            {
                if($entity->getRazonSocial()!=""){
                    $clienteNombre = $entity->getRazonSocial();
                }
                else{
                    $clienteNombre = $entity->getNombres()." ".$entity->getApellidos();
                }
                
                $num++;
                $arr_encontrados[]=array('idServicio' =>$entity->getIdServicio(),
                                         'login' => $entity->getLogin(),
                                         'clienteNombre' => $clienteNombre,
                                         'clienteId' => $entity->getId(),
                                         'oficina' => $entity->getNombreOficina(),
                                         'cartera' => $entity->getSaldo(),
                                         'formaPago' => $entity->getDescripcionFormaPago(),
                                         'plan' => $entity->getNombrePlan(),
                                         'estado' => $entity->getEstado());
                
                
            }

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
        
    }
   
    public function getServiciosAReactivar($idEmpresa, $oficinaGrupo, $formaPago,$estado,$start,$limit){
        $oficina = explode(",", $oficinaGrupo);
        $forma = explode(",",$formaPago);
        
        $qb = $this->_em->createQueryBuilder();
            $qb->select('vista')
                    
               ->from('schemaBundle:VistaSaldoClienteServicio','vista')
                    
               ->where('vista.empresaCod = ?1')
               ->setParameter(1, $idEmpresa)
               ->andWhere('vista.saldo <= 0')
               ->andWhere($qb->expr()->in('vista.oficinaId', $oficina))
               ->andWhere('vista.estado like ?2')
               ->setParameter(2, $estado.'%');
        
        if($formaPago!=""){
            $qb->andWhere($qb->expr()->in('vista. formaPagoId', $forma));
        }
            
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
//        print($query->getSQL());
//        die();
        
        return $query->getResult();
    }

    //CAMBIO DE PLAN MASIVO
    public function generarJsonServiciosCambioPlan($idEmpresa, $oficinaGrupo, $plan, $estado,$start,$limit,$em){
        $arr_encontrados = array();
        //$em = $this->getManager('telconet');
        //$entidadesTotal = $this->getServiciosAReactivar($idEmpresa, $oficinaGrupo, $formaPago,$estado,'','');
        
        $entidad= $this->getServiciosCambioPlan($idEmpresa, $oficinaGrupo, $plan,$estado,$start,$limit);
//        error_log('entra');
        
        
        if ($entidad) {
            
            //$num = count($entidadesTotal);
            $num=0;
            foreach ($entidad as $entity)
            {
                if($entity->getRazonSocial()!=""){
                    $clienteNombre = $entity->getRazonSocial();
                }
                else{
                    $clienteNombre = $entity->getNombres()." ".$entity->getApellidos();
                }
                
                $num++;
                $arr_encontrados[]=array('idServicio' =>$entity->getIdServicio(),
                                         'login' => $entity->getLogin(),
                                         'clienteNombre' => $clienteNombre,
                                         'clienteId' => $entity->getId(),
                                         'oficina' => $entity->getNombreOficina(),
                                         'cartera' => $entity->getSaldo(),
                                         'formaPago' => $entity->getDescripcionFormaPago(),
                                         'plan' => $entity->getNombrePlan(),
                                         'precioVenta' => $entity->getPrecioVenta(),
                                         'estado' => $entity->getEstado());
                
                
            }

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
        
    }
   
    public function getServiciosCambioPlan($idEmpresa, $oficinaGrupo, $plan,$estado,$start,$limit){
        $oficina = explode(",", $oficinaGrupo);
        
        $qb = $this->_em->createQueryBuilder();
            $qb->select('vista')
                    
               ->from('schemaBundle:VistaSaldoClienteServicio','vista')
                    
               ->where("vista.empresaCod = '".$idEmpresa."'")
//               ->setParameter(1, "'".$idEmpresa."'")
               ->andWhere($qb->expr()->in('vista.oficinaId', $oficina))
               ->andWhere("vista.planId = '".$plan."'")
               ->andWhere("vista.estado IN ('Activo','In-Temp','In-Corte')");
//               ->setParameter(2, $plan);
                    
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        
//        print($query->getSQL());
//        print($query->getSingleScalarResult());
//        die();
        
        return $query->getResult();
    }

       
    /**
     * Funcion que se encarga de obtener toda la informacion de backbone del servicio a activar
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 Version Inicial
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 Se corrigen valores de elementos anteriores del servicios
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 Se agregan validaciones en caso de no obtener información de elementos padres
     * 
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.3 Se agregan validaciones para obtener informacion de MAC/CPE de acuerdo a tipo medio del servicio y tipo de factibilidad
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.4 Se agregan recuperacion de mac de radio de cliente para servicios con UM Radio
     * 
     * @author John Vera   <javera@telconet.ec>
     * @version 1.5 27-09-2016    Se agrega el id del elemento cliente para verificar si existe
     * 
     * @author Allan Suarez   <arsuarez@telconet.ec>
     * @version 1.6 13-10-2016    Inicializacion de variables faltantes
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.7 23-02-2017  Se agrega codigo para verificar si el servicio tiene un plan que contiene el producto SmartWifi para la empresa MD
     * @since 1.6
     *
     * @author Allan Suarez   <arsuarez@telconet.ec>
     * @version 1.8 30-03-2017    Se obtiene informacion de capacidades para concentradores backup para que los obtenga de su concentrador principal
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.9 11-12-2017 Se agrega validación para verificar si el servicio es Internet Small Business
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.0 10-07-2018 Se obtiene el cambio de tecnología en traslados Small Business
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.0 17-07-2018 - Se enviá nuevo parámetro al método getPeBySwitch
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.1 08-02-2019 Se agrega validación para que los servicios TelcoHome sigan el mismo flujo de servicios Internet Small Business
     * 
     * @author David León <mdleon@telconet.ec>
     * @version 2.2 18-10-2019 - Se obtiene las capacidades para los equipos ZTE.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.3 26-02-2020 - Se elimina la obtención de las capacidades en base a la velocidad para los servicios Small Business Zte, 
     *                            ya que se procede a guardarlas como características asociadas al servicio
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.4 05-04-2020 - Se modifica la obtención del producto Small Business para que no se realice por nombre técnico
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.5 09-03-2021 - Se consulta el nombre del PE para los servicios que usan el tipo de red GPON
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 2.6 03-05-2021 - Se modifica la logica para obtener los parametros iniciales mediante un arreglo y no variables individuales.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.7 01-08-2022 Se verifica si el producto es un servicio adicional de SafeCity,
     *                         se obtiene el pe del servicio por olt.
     * 
     * @param $idServicio
     * @param $empresa
     * @param $serviceTecnico
     * @param $emComercial
     * @param $emInfraestructura     
     */
    public function generarJsonDatosBackbone($arrayParams)
    {
        $intIdServicio          = isset($arrayParams['idServicio']) ? $arrayParams['idServicio']: null;
        $intIdEmpresa           = isset($arrayParams['empresa']) ? $arrayParams['empresa']: null;
        $serviceTecnico         = isset($arrayParams['serviceTecnico']) ? $arrayParams['serviceTecnico']: null;
        $strTipoElementoPadre   = isset($arrayParams['tipoElementoPadre']) ? $arrayParams['tipoElementoPadre']: null;
        $emComercial            = isset($arrayParams['emComercial']) ? $arrayParams['emComercial']: null;
        $emInfraestructura      = isset($arrayParams['emInfraestructura']) ? $arrayParams['emInfraestructura']: null;
        $emGeneral              = isset($arrayParams['emGeneral']) ? $arrayParams['emGeneral']: null;

        $arr_encontrados = array();
        $strNombreInterfaceElemento     = "";
        $strNombreElemento              = "";
        $mismosRecursos                 = "SI";
        $mismosRecursosIp               = "SI";
        $diferenteTecnologia            = "NO";
        $strNombreSplitterAnterior      = "";
        $strNombreCajaAnterior          = "";
        $interfaceSplitterAnterior      = "";
        $interfaceElementoAnterior      = "";
        $nombreElementoAnterior         = "";
        $elementoAnterior               = "";
        $ipAnterior                     = "";
        $strNombreElementoPadre         = "";
        $strColorHilo                   = "";
        $idElementoPadre                = "";
        $strAnillo                      = "";
        $strCapacidadUno                = "";
        $strCapacidadDos                = "";
        $strMac                         = "";
        $strMacRadio                    = "";
        $strTieneSmartWifiRenta         = "NO";
        $boolEsFibraRuta                = false;
        $tipoBackbone                   = "RUTA";
        $objElementoCliente             = null;
        $objMac                         = null;
        $objCaja                        = null;
        $objEnlaceSwCassette            = null;
        $objIntEleClienteRadio          = null;
        $objElementoClienteRadio        = null;
        $objMacRadio                    = null;
        $objElemento                    = null;
        $idElemento                     = null;
        $idInterfaceElemento            = null;
        $arrayParametrosWs              = array();

        $objInfoServicio        = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
        $objInfoServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneBy(array("servicioId" => $intIdServicio));
        $objAdmiProducto        = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                       ->findOneBy(array(
                                               "nombreTecnico" => "INTERNET",
                                               "empresaCod" => $intIdEmpresa,
                                               "estado" => "Activo"
                                           ));
        $strEsInternetLite = 'NO';
        
        if(is_object($objInfoServicio))
        {
            $objProductoVerifInternetLite = $objInfoServicio->getProductoId();
            if(is_object($objProductoVerifInternetLite))
            {
                $strNombreTecnicoVerifInternetLite = $objProductoVerifInternetLite->getNombreTecnico();
                if($strNombreTecnicoVerifInternetLite === "INTERNET SMALL BUSINESS" || $strNombreTecnicoVerifInternetLite === "TELCOHOME")
                {
                    $strEsInternetLite = 'SI';
                    $objAdmiProducto          = $objProductoVerifInternetLite;
                }
            }
        }
                                   
        if($intIdEmpresa==10 && $strEsInternetLite === 'NO')
        {
            //Si el servicio depende de pseudo pe cliente se muestra la informacion tecnica de acuerdo al escenario
            $boolEsPesudoPe  = $emComercial->getRepository("schemaBundle:InfoServicio")->esServicioPseudoPe($objInfoServicio);
            
            $objProducto     = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($objInfoServicio->getProductoId()->getId());
            //CAPACIDADES
            $objServProdCaractCap1 = $serviceTecnico->getServicioProductoCaracteristica($objInfoServicio,'CAPACIDAD1',$objProducto);
            $objServProdCaractCap2 = $serviceTecnico->getServicioProductoCaracteristica($objInfoServicio,'CAPACIDAD2',$objProducto);
            $strTipoMedio = '';
            //TIPO MEDIO
            if ($objInfoServicioTecnico && $objInfoServicioTecnico->getUltimaMillaId())
            {
                $objTipoMedio = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')->find($objInfoServicioTecnico->getUltimaMillaId());
                if ($objTipoMedio)
                {
                    $strTipoMedio = $objTipoMedio->getNombreTipoMedio();
                }
            }
            
            //Obtener la caracteristica TIPO_FACTIBILIDAD para discriminar que sea FIBRA DIRECTA o RUTA
            $objServProdCaractTipoFact = $serviceTecnico->getServicioProductoCaracteristica($objInfoServicio,'TIPO_FACTIBILIDAD',$objProducto);
            
            if($strTipoMedio=="Fibra Optica")
            {
                if($objServProdCaractTipoFact)
                {
                    if($objServProdCaractTipoFact->getValor() == 'RUTA')
                    {
                        $boolEsFibraRuta = true;
                    }   
                    else
                    {
                        $tipoBackbone = "DIRECTO";
                    }
                }   
                else
                {
                    $boolEsFibraRuta = true;
                }
            }
            else
            {
                $tipoBackbone = "DIRECTO";
            }
            
            //MAC        
            if($boolEsFibraRuta)
            {
                //validacion de data de GIS
                if($objInfoServicioTecnico->getInterfaceElementoConectorId()!=null)
                {
                    $strInterfaceElementoConectorId = $objInfoServicioTecnico->getInterfaceElementoConectorId();
                   
                   $arrayParamRequest = array('interfaceElementoConectorId'=> $strInterfaceElementoConectorId,
                                           'tipoElemento'               => 'CPE');

                    //Se obtiene la informacion del CPE desde el OUT de la ROSETA
                    $arrayRequest  = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                            ->getElementoClienteByTipoElemento($arrayParamRequest);

                    if($arrayRequest['msg'] == 'FOUND')
                    {
                        $objElementoCliente = $this->_em->getRepository('schemaBundle:InfoElemento')->find($arrayRequest['idElemento']);                                
                    }
                }
                else
                {
                    if($objInfoServicioTecnico->getElementoClienteId())
                    {
                        $objElementoCliente        = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                       ->find($objInfoServicioTecnico->getElementoClienteId());
                    }
                }
            }
            else
            {
                if($objInfoServicioTecnico && $objInfoServicioTecnico->getElementoClienteId())
                {

                    if($strTipoMedio=="UTP")
                    {
                        $objElementoCliente        = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                       ->find($objInfoServicioTecnico->getElementoClienteId());
                    }
                    else //Fibra Directa o Cobre donde la interface elemento cliente es la roseta o la radio
                    {
                        $arrayParamRequest = array('interfaceElementoConectorId'=> $objInfoServicioTecnico->getInterfaceElementoClienteId(),
                                                   'tipoElemento'               => 'CPE');

                        //Se obtiene la informacion del CPE desde el OUT de la ROSETA
                        $arrayRequest  = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                           ->getElementoClienteByTipoElemento($arrayParamRequest);

                        if($arrayRequest['msg'] == 'FOUND')
                        {
                            $objElementoCliente = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($arrayRequest['idElemento']);
                        }
                    //recupera objeto Radio Cliente
                    if(is_object($objTipoMedio) && $objTipoMedio->getNombreTipoMedio() == "Radio")
                    {
                        $objElementoClienteRadio = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                     ->find($objInfoServicioTecnico->getElementoClienteId());
                        if ($objElementoClienteRadio)
                        {
                            $objMacRadio = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                             ->findOneBy(array('elementoId'    => $objElementoClienteRadio->getId(),
                                                                               'detalleNombre' => 'MAC',
                                                                               'estado'        => 'Activo')
                            );
                        }
                        $objIntEleClienteRadio = $emInfraestructura->getRepository("schemaBundle:InfoInterfaceElemento")
                                                                   ->find($objInfoServicioTecnico->getInterfaceElementoClienteId());
                    }
                    //recupera objeto Radio Cliente
                    if(is_object($objTipoMedio) && $objTipoMedio->getNombreTipoMedio()=="Radio")
                    {
                        $objElementoClienteRadio = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                     ->find($objInfoServicioTecnico->getElementoClienteId());
                        if ($objElementoClienteRadio)
                        {
                            $objMacRadio = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                             ->findOneBy(array('elementoId'    => $objElementoClienteRadio->getId(),
                                                                               'detalleNombre' => 'MAC',
                                                                               'estado'        => 'Activo')
                                                                        );
                        }
                    }

                    if ($objElementoCliente)
                    {
                        $objMac = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                    ->findOneBy(array('elementoId'    => $objElementoCliente->getId(),
                                                                      'detalleNombre' => 'MAC',
                                                                      'estado'        => 'Activo')
                                                               );        
                    }
                    }
                }
            }      
            
            if(is_object($objMacRadio))
            {
                $strMacRadio = $objMacRadio->getDetalleValor();
            }
        }
        else
        {
            //se valida si el servicio de tipo Plan tiene en su detalle un producto Renta SmartWifi
            $objPlan = $objInfoServicio->getPlanId();
            if(is_object($objPlan))
            {
                $objProdSmartWifiRenta  = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                      ->findOneBy(array("descripcionProducto" => "Renta SmartWiFi (Aironet 1602)",
                                                                        "empresaCod"          => $intIdEmpresa,
                                                                        "estado"              => "Activo"));
                if(is_object($objProdSmartWifiRenta))
                {

                    $arrayPlanDet = $emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                ->findBy(array("planId" => $objPlan->getId()));

                    foreach($arrayPlanDet as $objPlanDet)
                    {
                        if($objPlanDet->getProductoId() == $objProdSmartWifiRenta->getId())
                        {
                            $strTieneSmartWifiRenta = "SI";
                        }
                    }
                }

            }
        }
        
        //MAC CPE        
        $arrayRespuesta = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                            ->getMacCpePorServicioInterface($objInfoServicio->getId() , $boolEsPesudoPe);
        if($arrayRespuesta)
        {
            $strMac = $arrayRespuesta['mac'];
        } 
        
        if($objInfoServicioTecnico)
        {            
            //Si el servicio es concentrador BACKUP este obtiene su informacion de capacidades del Concentrador PRINCIPAL del cual
            //se referencia
            if($objInfoServicioTecnico->getTipoEnlace() == 'BACKUP' && $objProducto->getEsConcentrador() == 'SI')
            {
                $arrayCapacidadesBackup = $serviceTecnico->getArrayCapacidadesConcentradorBackup($objInfoServicio);
                
                if(isset($arrayCapacidadesBackup['intCapacidadUno']))
                {
                    $strCapacidadUno = $arrayCapacidadesBackup['intCapacidadUno'];
                }
                
                if(isset($arrayCapacidadesBackup['intCapacidadDos']))
                {
                    $strCapacidadDos = $arrayCapacidadesBackup['intCapacidadDos'];
                }
            }
            else
            {
                //Capacidad 1
                if($objServProdCaractCap1)
                {
                    $strCapacidadUno = $objServProdCaractCap1->getValor();
                }
                //Capacidad 2
                if($objServProdCaractCap2)
                {
                    $strCapacidadDos = $objServProdCaractCap2->getValor();
                }
            }
            
            //Obtener el tipo de RED
            $strTipoRed      = "MPLS";
            //PUERTO 
            if($objInfoServicioTecnico->getInterfaceElementoId())
            {
                $objInterfaceElemento = $emInfraestructura
                    ->find(
                        'schemaBundle:InfoInterfaceElemento',
                        $objInfoServicioTecnico->getInterfaceElementoId()
                    );

                if($objInterfaceElemento)
                {
                    $idInterfaceElemento     = $objInterfaceElemento->getId();
                    $strNombreInterfaceElemento = $objInterfaceElemento->getNombreInterfaceElemento();
                    
                    //PE
                    try
                    {
                        $booleanServicioSafeCity = false;
                        $objCaracTipoRed = $emInfraestructura->getRepository('schemaBundle:AdmiCaracteristica')
                                                             ->findOneBy(array("descripcionCaracteristica" => "TIPO_RED",
                                                                               "estado"                    => "Activo"));

                        if(is_object($objCaracTipoRed) && is_object($objInfoServicio) && is_object($objInfoServicio->getProductoId()))
                        {
                            $objProductoCaract = $emInfraestructura->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                   ->findOneBy(array("productoId"       => $objInfoServicio->getProductoId()->getId(),
                                                                                     "caracteristicaId" => $objCaracTipoRed->getId(),
                                                                                     "estado"           => "Activo"));

                            if(is_object($objProductoCaract))
                            {
                                $intServicio      = $objInfoServicio->getId();
                                $intProductCaract = $objProductoCaract->getId();

                                $objInfoServicioProdCaract = $emInfraestructura->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                               ->findOneBy(array("servicioId"                => $intServicio,
                                                                                                 "productoCaracterisiticaId" => $intProductCaract,
                                                                                                 "estado"                    => "Activo"));

                                if(is_object($objInfoServicioProdCaract))
                                {
                                    $strTipoRed = $objInfoServicioProdCaract->getValor();
                                }
                            }
                            //verificar si es servicio safecity
                            $arrayParSerAdd = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                                                 'INFRAESTRUCTURA',
                                                                                 'PARAMETROS',
                                                                                 'VALIDAR RELACION SERVICIO ADICIONAL CON DATOS SAFECITY',
                                                                                 $objInfoServicio->getProductoId()->getId(),
                                                                                 '',
                                                                                 '',
                                                                                 '',
                                                                                 '',
                                                                                 '10');
                            if(isset($arrayParSerAdd) && !empty($arrayParSerAdd))
                            {
                                $booleanServicioSafeCity = true;
                            }
                        }

                        $arrayParametrosWs["intIdElemento"] = $objInfoServicioTecnico->getElementoId();
                        $arrayParametrosWs["intIdServicio"] = $intIdServicio;

                        //verificar si el tipo de red es GPON
                        $booleanTipoRedGpon = false;
                        $arrayParVerTipoRed = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                        'COMERCIAL',
                                                                                                        '',
                                                                                                        'VERIFICAR TIPO RED',
                                                                                                        'VERIFICAR_GPON',
                                                                                                        $strTipoRed,
                                                                                                        '',
                                                                                                        '',
                                                                                                        '');
                        if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                        {
                            $booleanTipoRedGpon = true;
                        }
                        //veirifcar si es gpon mpls o servicio safecity
                        if($booleanTipoRedGpon || $booleanServicioSafeCity)
                        {
                            $objElementoPadre = $serviceTecnico->getPeByOlt($arrayParametrosWs);
                        }
                        else
                        {
                            $objElementoPadre = $serviceTecnico->getPeBySwitch($arrayParametrosWs);
                        }

                        if(is_object($objElementoPadre))
                        {
                            $idElementoPadre     = $objElementoPadre->getId();
                            $strNombreElementoPadre = $objElementoPadre->getNombreElemento();
                        }
                        else
                        {
                            $idElementoPadre     = "";
                            $strNombreElementoPadre = "";
                        }
                    }
                    catch(\Exception $e)
                    {
                        $idElementoPadre     = "";
                        $strNombreElementoPadre = $e->getMessage();
                    }
                }
            }
            
            $strAnillo = '';
            //Se obtiene el Anillo para INTMPLS de servicios SATELITALES dado que no existe Switch configurado
            if($strTipoMedio == 'SATELITAL')
            {
                $arrayParametrosDet = $emInfraestructura->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne("VLANS_PERMITIDAS_VSAT", 
                                                                 "TECNICO", 
                                                                 "", 
                                                                 'VLANS INTERNET MPLS', 
                                                                 "", 
                                                                 "", 
                                                                 "",
                                                                 "",
                                                                 "",
                                                                 $intIdEmpresa
                                                               );
                 if(!empty($arrayParametrosDet))
                 {
                     $strAnillo = $arrayParametrosDet['valor3'];
                 }
            }
            else
            {
                //ELEMENTO
                if($objInfoServicioTecnico->getElementoId())
                {
                    $objElemento = $emInfraestructura->find('schemaBundle:InfoElemento', $objInfoServicioTecnico->getElementoId());
                    if($objElemento)
                    {
                        $idElemento     = $objElemento->getId();
                        $strNombreElemento = $objElemento->getNombreElemento();

                        $objAnillo = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                           ->findOneBy(array("elementoId"       => $idElemento,
                                                                             "detalleNombre"    => "ANILLO",
                                                                             "estado"           => "Activo"));
                        if(is_object($objAnillo))
                        {
                            $strAnillo = $objAnillo->getDetalleValor();
                        }
                    }
                }
            }
            
            //CARACTERISTICA TRASLADO
            $objTraslado = $serviceTecnico->getServicioProductoCaracteristica($objInfoServicio, "TRASLADO", $objAdmiProducto);
            if($objTraslado && ($intIdEmpresa != 10 || $strEsInternetLite === "SI"))
            {
                $intServicioAnteriorId = $objTraslado->getValor();
                
                $servicioTecnicoAnterior = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                       ->findOneBy(array("servicioId" => $intServicioAnteriorId));
                $objElementoAnterior = $servicioTecnicoAnterior->getElementoId();
                if (!empty($objElementoAnterior))
                {
                    $elementoAnterior = $emInfraestructura->find('schemaBundle:InfoElemento',
                                            $servicioTecnicoAnterior->getElementoId());
                    if($elementoAnterior->getId() != $objElemento->getId())
                    {
                        $mismosRecursosIp = "NO";
                        $mismosRecursos = "NO";
                        if($elementoAnterior->getModeloElementoId()->getMarcaElementoId() !=
                            $objElemento->getModeloElementoId()->getMarcaElementoId())
                        {
                            $diferenteTecnologia = "SI";
                        }
                        else
                        {
                            $diferenteTecnologia = "NO";
                        }
                    }
                    else
                    {
                        if($objInfoServicioTecnico->getInterfaceElementoId() != $servicioTecnicoAnterior->getInterfaceElementoId())
                        {
                            $mismosRecursos = "NO";
                        }
                    }
                }
                else
                {
                    $mismosRecursos = "NO";
                }
                //BACKBONE ANTERIOR--------------------------------------------------------------------------------------------------
                //ELEMENTO ANTERIOR
                if($elementoAnterior)
                {
                    $nombreElementoAnterior = $elementoAnterior->getNombreElemento();
                    //IP ELEMENTO ANTERIOR
                    $ipAnterior = $emComercial->getRepository('schemaBundle:InfoIp')->findOneBy(array("elementoId" => $elementoAnterior->getId()));
                }
                
                $objInterfazElemento = $servicioTecnicoAnterior->getInterfaceElementoId();
                if (!empty($objInterfazElemento))
                {
                    //INTERFACE ELEMENTO ANTERIOR
                    $interfaceElementoAnterior = $emInfraestructura->find('schemaBundle:InfoInterfaceElemento', 
                                                                    $servicioTecnicoAnterior->getInterfaceElementoId());
                    //SPLITTER ANTERIOR
                    $splitterAnterior = $emInfraestructura->find('schemaBundle:InfoElemento', $servicioTecnicoAnterior->getElementoConectorId());
                    if($splitterAnterior)
                    {
                        $strNombreSplitterAnterior = $splitterAnterior->getNombreElemento();
                    }
                    //INTERFACE SPLITTER ANTERIOR
                    $interfaceSplitterAnterior = $emInfraestructura->find('schemaBundle:InfoInterfaceElemento', 
                                                                        $servicioTecnicoAnterior->getInterfaceElementoConectorId());
                    //CAJA ANTERIOR
                    $cajaAnterior = $emInfraestructura->find('schemaBundle:InfoElemento', $servicioTecnicoAnterior->getElementoContenedorId());
                    if($cajaAnterior)
                    {
                        $strNombreCajaAnterior = $cajaAnterior->getNombreElemento();
                    }
                }
            }
            
            //SPLITTER (md) - CASSETTE (tn)
            if($objInfoServicioTecnico->getElementoConectorId())
            {
                $objSplitter = $emInfraestructura->find('schemaBundle:InfoElemento', $objInfoServicioTecnico->getElementoConectorId());
                if($objSplitter)
                {
                    $strNombreSplitter = $objSplitter->getNombreElemento();
                    $intIdSplitter = $objSplitter->getId();
                }
            }
            else
            {
                $strNombreSplitter = "";
                $intIdSplitter = "";
            }
            
            //CAJA
            if($objInfoServicioTecnico->getElementoContenedorId())
            {
                $objCaja = $emInfraestructura->find('schemaBundle:InfoElemento', $objInfoServicioTecnico->getElementoContenedorId());
                if($objCaja)
                {
                    $strNombreCaja = $objCaja->getNombreElemento();
                }
            }
            else
            {
                $strNombreCaja = "";
            }
            
            //PUERTO SPLITTER (md) - CASSETTE (tn)
            if($objInfoServicioTecnico->getInterfaceElementoConectorId())
            {
                $objSplitterPuerto = $emInfraestructura->find(
                    'schemaBundle:InfoInterfaceElemento',
                    $objInfoServicioTecnico->getInterfaceElementoConectorId()
                );

                if($objSplitterPuerto)
                {
                    $strNombrePuerto = $objSplitterPuerto->getNombreInterfaceElemento();
                    
                    if($objSplitter->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento() == "CASSETTE")
                    {
                        $objEnlaceInterno = $emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                   ->findOneBy(array("interfaceElementoFinId" => $objSplitterPuerto->getId()));
                        
                        $objPuertoCassetteInicio = $emInfraestructura->find('schemaBundle:InfoInterfaceElemento',
                                                                         $objEnlaceInterno->getInterfaceElementoIniId());
                        
                        $objEnlaceSwCassette = $emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                              ->findOneBy(array("interfaceElementoFinId" => $objPuertoCassetteInicio->getId()));
                        
                        $objBufferHilo = $objEnlaceSwCassette->getBufferHiloId();
                        
                        if($objBufferHilo)
                        {
                            $strColorHilo = $objBufferHilo->getHiloId()->getColorHilo();
                        }
                        else
                        {
                            $strColorHilo = "";
                        }
                    }
                }
            }
            else
            {
                $strNombrePuerto = "";
            }
            
            $intIdElementoClienteId = 0;
            if($objInfoServicioTecnico->getElementoClienteId())
            {
                $intIdElementoClienteId = $objInfoServicioTecnico->getElementoClienteId();
            }
        }
        else
        {
            $strNombreSplitter = "";
            $strNombreCaja = "";
            $strNombrePuerto = "";
        }               
        
        $strNombreEdificio = ""; 
        $strEsPedudoPe     = "N";
                
        if($boolEsPesudoPe)
        {
            //Para cuando servicio tiene caractersitica pseudope
            $arrayParametrosPseudoPe      = array ('idServicio' => $intIdServicio);
            $arrayDatosTecnicosPseudoPe   = $this->getDatosFactibilidadPseudoPe($arrayParametrosPseudoPe);
            
            if(isset($arrayDatosTecnicosPseudoPe['data']))
            {
                $idElementoPadre         = $arrayDatosTecnicosPseudoPe['data']['idElemento'];
                $idInterfaceElemento     = $arrayDatosTecnicosPseudoPe['data']['idInterfacePe'];
                $strNombreInterfaceElemento = $arrayDatosTecnicosPseudoPe['data']['interfacePe'];
                $strNombreElementoPadre     = $arrayDatosTecnicosPseudoPe['data']['nombrePe'];
                $strNombreEdificio       = $arrayDatosTecnicosPseudoPe['data']['nombreEdificio'];     
                $strEsPedudoPe           = 'S';
            }
        }
               
        $arr_encontrados[] = array('nombreSplitter' => ($strNombreSplitter) ? $strNombreSplitter : "NA",
            'nombreCaja'                => ($strNombreCaja) ? $strNombreCaja : "NA",
            'idCaja'                    => ($objCaja) ? $objCaja->getId() : "NA",
            'nombrePuertoSplitter'      => ($strNombrePuerto) ? $strNombrePuerto : "NA",
            'idSplitter'                => $intIdSplitter,
            'idInterfaceElemento'       => $idInterfaceElemento,
            'nombreInterfaceElemento'   => $strNombreInterfaceElemento,
            'idElemento'                => $idElemento,
            'nombreElemento'            => $strNombreElemento,
            'mismosRecursos'            => $mismosRecursos,
            'mismosRecursosIp'          => $mismosRecursosIp,
            'diferenteTecnologia'       => $diferenteTecnologia,
            'marcaElemento'             => ($objElemento) ? $objElemento->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento() : "",
            'nombreSplitterAnterior'    => $strNombreSplitterAnterior,
            'nombreCajaAnterior'        => $strNombreCajaAnterior,
            'puertoSplitterAnterior'    => ($interfaceSplitterAnterior) ? $interfaceSplitterAnterior->getNombreInterfaceElemento() : "",
            'puertoElementoAnterior'    => ($interfaceElementoAnterior) ? $interfaceElementoAnterior->getNombreInterfaceElemento() : "",
            'nombreElementoAnterior'    => $nombreElementoAnterior,
            'modeloElementoAnterior'    => ($elementoAnterior) ? $elementoAnterior->getModeloElementoId()->getNombreModeloElemento() : "",
            'ipElementoAnterior'        => ($ipAnterior) ? $ipAnterior->getIp() : "",
            'nombreElementoPadre'       => ($strNombreElementoPadre) ? $strNombreElementoPadre : "NA",
            'idInterfaceConectorId'     => ($objEnlaceSwCassette) ? $objEnlaceSwCassette->getInterfaceElementoFinId() : "NA",
            'colorHilo'                 => ($strColorHilo) ? $strColorHilo : "NA",
            'idElementoCliente'         => $intIdElementoClienteId,
            'idElementoPadre'           => intval($idElementoPadre),
            'anillo'                    => $strAnillo,
            'capacidadUno'              => $strCapacidadUno,
            'capacidadDos'              => $strCapacidadDos,
            'mac'                       => $strMac,
            'macRadio'                  => $strMacRadio,
            'tipoBackbone'              => $tipoBackbone,
            'elementoCpeUmRadio'        => ($objElementoClienteRadio) ? $objElementoClienteRadio->getNombreElemento() : "",
            'intElementoCpeUmRadio'     => ($objIntEleClienteRadio) ? $objIntEleClienteRadio->getNombreInterfaceElemento() : "",
            'nombreEdificio'            => $strNombreEdificio,
            'esPseudoPe'                => $strEsPedudoPe,
            'strTieneSmartWifiRenta'    => $strTieneSmartWifiRenta,
            'strEsInternetLite'         => $strEsInternetLite
        );

        if ($emGeneral)
        {
            $strZeroTouch = $serviceTecnico->getCaracteristicaServicio($objInfoServicio, 'FLUJO_ZEROTOUCH', $objProducto);

            if (!empty($strZeroTouch) && $strZeroTouch == 'F')
            {
                /*Obtenemos el parametro desde la base.*/
                $arrayAdmiParametroProd = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne('PRODUCTOS_ZERO_TOUCH',
                        'TECNICO',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '',
                        '10');

                /*Validamos que haya llegado el parametro mediante un ternario.*/
                $arrayProductosZeroTouch = !empty($arrayAdmiParametroProd) ?
                    json_decode($arrayAdmiParametroProd['valor1'], true) :
                    null;

                /*Validamos que el servicio este dentro del parámetro.*/
                if ((is_object($objInfoServicio->getProductoId()) && $arrayProductosZeroTouch) &&
                    in_array($objInfoServicio->getProductoId()->getId(), $arrayProductosZeroTouch))
                {
                    $arr_encontrados[0]['zeroTouchData'] = $serviceTecnico->getZeroTouchData(array('intIdServicio' => $objInfoServicio->getId()));
                }
            }
        }

        $data      = json_encode($arr_encontrados);
        $resultado = '{"total":1,"encontrados":' . $data . '}';

        return $resultado;
    }
    

    /**
     * generarJsonTrasladoExtender
     * 
     * Funcion que se encarga de obtener toda la informacion del producto NetlifeCam
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.0 26-10-2021 Version Inicial
     * 
     * @param $arrayParametros 
     */
    public function generarJsonTrasladoNetlifeCam($arrayParametros)
    {
        $arrayEncontrados  = array();
        $arrayRegistro     = array();
        $arrayRegistro['strStatus']  = 'ERROR';
        $arrayRegistro['strMensaje'] = 'Existen inconsistencia de información en el servicio a trasladar.';
        $intIdServicio   = $arrayParametros['intIdServicio'];
        $emComercial     = $arrayParametros['objEmComercial'];
        $intIdEmpresa    = $arrayParametros['intIdEmpresa'];
        $serviceTecnico  = $arrayParametros['objServicioTecnicoService'];
        try
        {
            $objServicio     = $emComercial->getRepository('schemaBundle:InfoServicio')
                                           ->find($intIdServicio);
            $objProductoInternet = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                               ->findOneBy(array("nombreTecnico" => "INTERNET",
                                                                 "empresaCod"    => $intIdEmpresa,
                                                                 "estado"        => "Activo"));
            if (is_object($objServicio) && is_object($objProductoInternet) && is_object($serviceTecnico))
            {
                $objProdCaractTrasladar = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                            'TRASLADO',$objProductoInternet);
                if (is_object($objProdCaractTrasladar))
                {
                    $objServicioOrigen = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                     ->find($objProdCaractTrasladar->getValor());
                    if (is_object($objServicioOrigen))
                    {
                        $objServicioTecnicoOrigen = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                ->findOneBy(array("servicioId" => $objServicioOrigen->getId()));
                        if (is_object($objServicioTecnicoOrigen))
                        {
                            $objInfoElementoCamara  = $this->_em->getRepository("schemaBundle:InfoElemento")
                                                                      ->find($objServicioTecnicoOrigen->getElementoClienteId());
                            if(is_object($objInfoElementoCamara))
                            {
                                $objModeloCamara                    = $objInfoElementoCamara->getModeloElementoId();
                                $arrayRegistro['strSerieElemento']  = $objInfoElementoCamara->getSerieFisica();
                                $arrayRegistro['strModeloElemento'] = $objModeloCamara->getNombreModeloElemento();
                                $arrayRegistro['strDescriElemento'] = $objModeloCamara->getDescripcionModeloElemento();

                                $objDetEleMac = $this->_em
                                                    ->getRepository('schemaBundle:InfoDetalleElemento')
                                                    ->findOneBy(array('elementoId'    => $objInfoElementoCamara->getId(),
                                                                        'detalleNombre' => 'MAC',
                                                                        'estado'        => 'Activo'
                                                                        )
                                                                );
                                if (is_object($objDetEleMac))
                                {
                                    $arrayRegistro['strMacElemento'] = $objDetEleMac->getDetalleValor();
                                }
                                $strPuntoOrigen = $objServicioOrigen->getPuntoId();
                                $strNombreElemento = $strPuntoOrigen->getLogin()."micro-SD";
                                $arrayInfoElementoTarjeta  = $this->_em->getRepository("schemaBundle:InfoElemento")
                                                            ->getElementosByNombreEstadoTipoModelo(
                                                                $strNombreElemento,'Activo',null,null,null,null,null);
                                if (!empty($arrayInfoElementoTarjeta))
                                {
                                    $objInfoElementoTarjeta = $arrayInfoElementoTarjeta[0];
                                    $objModeloTarjeta = $objInfoElementoTarjeta->getModeloElementoId();
                                    $arrayRegistro['strSerieTarjeta']  = $objInfoElementoTarjeta->getSerieFisica();
                                    $arrayRegistro['strModeloTarjeta'] = $objModeloTarjeta->getNombreModeloElemento();
                                }
                                $arrayRegistro['strStatus']  = 'OK';
                                $arrayRegistro['strMensaje'] = 'Información encontrada exitosamente.';
                            }
                        }
                    }
                }
            }
        }
        catch (\Exception $objException)
        {
            $arrayRegistro['strStatus']  = 'ERROR';
            $arrayRegistro['strMensaje'] = $objException->getMessage();
        }
        $arrayEncontrados[] = $arrayRegistro;
        $strDataExtender    = json_encode($arrayEncontrados);
        $strResultado       = '{"total":1,"encontrados":' . $strDataExtender . '}';

        return $strResultado;
    }

    /**
     * generarJsonTrasladoExtender
     * 
     * Funcion que se encarga de obtener toda la informacion del equipo extender consultado
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 28-02-2019 Version Inicial
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 14-05-2021 Se agrega programación para obtener correctamente los datos del Extender al realizar un traslado de un servicio
     *                         adicional Extender en caso de que el plan de Internet incluya un SmartWifi
     * 
     * @param $arrayParametros 
     */
    public function generarJsonTrasladoExtender($arrayParametros)
    {
        $arrayEncontrados  = array();
        $arrayRegistro     = array();
        $arrayRegistro['strStatus']  = 'ERROR';
        $arrayRegistro['strMensaje'] = 'Existen inconsistencia de información en el servicio a trasladar.';
        $intIdServicio   = $arrayParametros['intIdServicio'];
        $emComercial     = $arrayParametros['objEmComercial'];
        $intIdEmpresa    = $arrayParametros['intIdEmpresa'];
        $serviceTecnico  = $arrayParametros['objServicioTecnicoService'];
        try
        {
            $objServicio     = $emComercial->getRepository('schemaBundle:InfoServicio')
                                           ->find($intIdServicio);
            $objProductoInternet = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                               ->findOneBy(array("nombreTecnico" => "INTERNET",
                                                                 "empresaCod"    => $intIdEmpresa,
                                                                 "estado"        => "Activo"));

            if (is_object($objServicio) && is_object($objProductoInternet) && is_object($serviceTecnico))
            {
                $objProdCaractTrasladarEDB = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                'TRASLADAR EXTENDER DUAL BAND',
                                                                                                $objProductoInternet);
                if (is_object($objProdCaractTrasladarEDB))
                {
                    $objServicioOrigen = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                     ->find($objProdCaractTrasladarEDB->getValor());
                    if (is_object($objServicioOrigen))
                    {
                        $objServicioTecnicoOrigen = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                ->findOneBy(array("servicioId" => $objServicioOrigen->getId()));
                        if (is_object($objServicioTecnicoOrigen))
                        {
                            if (is_object($objServicioOrigen->getPlanId()))
                            {
                                $arrayParams['intInterfaceElementoConectorId']  = $objServicioTecnicoOrigen->getInterfaceElementoClienteId();
                                $arrayParams['arrayData']            = array();
                                $arrayParams['strBanderaReturn']     = 'INTERFACE';
                                $arrayParams['strTipoSmartWifi']     = 'ExtenderDualBand';
                                $arrayParams['strRetornaPrimerWifi'] = 'SI';
                                $objInterfaceExtenderDualBand        = $this->_em
                                                                            ->getRepository('schemaBundle:InfoElemento')
                                                                            ->getElementosSmartWifiByInterface($arrayParams);
                                if (is_object($objInterfaceExtenderDualBand))
                                {
                                    $objElementoExtender       = $objInterfaceExtenderDualBand->getElementoId();
                                    $objModeloElementoExtender = $objElementoExtender->getModeloElementoId();
                                    $objTipoElementoExtender   = $objModeloElementoExtender->getTipoElementoId();
                                    $arrayRegistro['strSerieElemento']  = $objElementoExtender->getSerieFisica();
                                    $arrayRegistro['strModeloElemento']  = $objModeloElementoExtender->getNombreModeloElemento();
                                    $arrayRegistro['strTipoElemento']   = $objTipoElementoExtender->getNombreTipoElemento();
                                    $arrayRegistro['strNombreElemento'] = $objElementoExtender->getNombreElemento();

                                    $objDetEleMacSmartWifi = $this->_em
                                                                  ->getRepository('schemaBundle:InfoDetalleElemento')
                                                                  ->findOneBy(array('elementoId'    => $objInterfaceExtenderDualBand->getElementoId()->getId(),
                                                                                    'detalleNombre' => 'MAC',
                                                                                    'estado'        => 'Activo'
                                                                                   )
                                                                             );
                                    if (is_object($objDetEleMacSmartWifi))
                                    {
                                        $arrayRegistro['strMacElemento'] = $objDetEleMacSmartWifi->getDetalleValor();
                                    }
                                    $arrayRegistro['strStatus']  = 'OK';
                                    $arrayRegistro['strMensaje'] = 'Información encontrada exitosamente.';
                                }
                            }
                            else
                            {
                                $objInfoElementoServicio  = $this->_em->getRepository("schemaBundle:InfoElemento")
                                                                      ->find($objServicioTecnicoOrigen->getElementoClienteId());
                                if(is_object($objInfoElementoServicio))
                                {
                                    $objModeloElementoExtender          = $objInfoElementoServicio->getModeloElementoId();
                                    $objTipoElementoExtender            = $objModeloElementoExtender->getTipoElementoId();
                                    $arrayRegistro['strSerieElemento']  = $objInfoElementoServicio->getSerieFisica();
                                    $arrayRegistro['strModeloElemento'] = $objModeloElementoExtender->getNombreModeloElemento();
                                    $arrayRegistro['strTipoElemento']   = $objTipoElementoExtender->getNombreTipoElemento();
                                    $arrayRegistro['strNombreElemento'] = $objInfoElementoServicio->getNombreElemento();

                                    $objDetEleMacEDB = $this->_em
                                                            ->getRepository('schemaBundle:InfoDetalleElemento')
                                                            ->findOneBy(array('elementoId'    => $objInfoElementoServicio->getId(),
                                                                              'detalleNombre' => 'MAC',
                                                                              'estado'        => 'Activo'
                                                                             )
                                                                       );
                                    if (is_object($objDetEleMacEDB))
                                    {
                                        $arrayRegistro['strMacElemento'] = $objDetEleMacEDB->getDetalleValor();
                                    }
                                    $arrayRegistro['strStatus']  = 'OK';
                                    $arrayRegistro['strMensaje'] = 'Información encontrada exitosamente.';
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (\Exception $objException)
        {
            $arrayRegistro['strStatus']  = 'ERROR';
            $arrayRegistro['strMensaje'] = $objException->getMessage();
        }
        $arrayEncontrados[] = $arrayRegistro;
        $strDataExtender    = json_encode($arrayEncontrados);
        $strResultado       = '{"total":1,"encontrados":' . $strDataExtender . '}';

        return $strResultado;
    }
    
    /**
     * generarJsonSincronizarExtender
     * 
     * Funcion que se encarga de obtener toda la informacion del equipo extender consultado
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 13-06-2019 Version Inicial
     * @since 1.0
     * 
     * @param $arrayParametros 
     */
    public function generarJsonSincronizarExtender($arrayParametros)
    {
        $arrayEncontrados  = array();
        $arrayRegistro     = array();
        $arrayRegistro['strStatus']  = 'ERROR';
        $arrayRegistro['strMensaje'] = 'Existen inconsistencia de información en el servicio.';
        $intIdServicio   = $arrayParametros['intIdServicio'];
        $emComercial     = $arrayParametros['objEmComercial'];
        $intIdEmpresa    = $arrayParametros['intIdEmpresa'];
        $serviceTecnico  = $arrayParametros['objServicioTecnicoService'];
        try
        {
            $objServicioOrigen     = $emComercial->getRepository('schemaBundle:InfoServicio')
                                           ->find($intIdServicio);
            $objProductoInternet = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                               ->findOneBy(array("nombreTecnico" => "INTERNET",
                                                                 "empresaCod"    => $intIdEmpresa,
                                                                 "estado"        => "Activo"));

            if (is_object($objServicioOrigen) && is_object($objProductoInternet) && is_object($serviceTecnico))
            {
                $objProdCaractSincronizarEDB = $serviceTecnico->getServicioProductoCaracteristica($objServicioOrigen,
                                                                                                  'SINCRONIZAR EXTENDER DUAL BAND',
                                                                                                  $objProductoInternet);
                if (is_object($objProdCaractSincronizarEDB))
                {
                    $objServicioTecnicoOrigen = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findOneBy(array("servicioId" => $objServicioOrigen->getId()));
                    if (is_object($objServicioTecnicoOrigen))
                    {
                        if (is_object($objServicioOrigen->getPlanId()))
                        {
                            $arrayParams['intInterfaceElementoConectorId']  = $objServicioTecnicoOrigen->getInterfaceElementoClienteId();
                            $arrayParams['arrayData']            = array();
                            $arrayParams['strBanderaReturn']     = 'INTERFACE';
                            $arrayParams['strTipoSmartWifi']     = 'ExtenderDualBand';
                            $arrayParams['strRetornaPrimerWifi'] = 'SI';
                            $objInterfaceExtenderDualBand        = $this->_em
                                                                        ->getRepository('schemaBundle:InfoElemento')
                                                                        ->getElementosSmartWifiByInterface($arrayParams);
                            if (is_object($objInterfaceExtenderDualBand))
                            {
                                $objElementoExtender       = $objInterfaceExtenderDualBand->getElementoId();
                                $objModeloElementoExtender = $objElementoExtender->getModeloElementoId();
                                $objTipoElementoExtender   = $objModeloElementoExtender->getTipoElementoId();
                                $arrayRegistro['strSerieElemento']  = $objElementoExtender->getSerieFisica();
                                $arrayRegistro['strModeloElemento']  = $objModeloElementoExtender->getNombreModeloElemento();
                                $arrayRegistro['strTipoElemento']   = $objTipoElementoExtender->getNombreTipoElemento();
                                $arrayRegistro['strNombreElemento'] = $objElementoExtender->getNombreElemento();

                                $objDetEleMacEDB = $this->_em
                                                        ->getRepository('schemaBundle:InfoDetalleElemento')
                                                        ->findOneBy(array('elementoId'    => $objInterfaceExtenderDualBand->getElementoId()->getId(),
                                                                          'detalleNombre' => 'MAC',
                                                                          'estado'        => 'Activo'
                                                                         )
                                                                   );
                                if (is_object($objDetEleMacEDB))
                                {
                                    $arrayRegistro['strMacElemento'] = $objDetEleMacEDB->getDetalleValor();
                                }
                                $arrayRegistro['strStatus']  = 'OK';
                                $arrayRegistro['strMensaje'] = 'Información encontrada exitosamente.';
                            }
                        }
                        else
                        {
                            
                            $objInfoElementoServicio  = $this->_em->getRepository("schemaBundle:InfoElemento")
                                                            ->find($objServicioTecnicoOrigen->getElementoClienteId());
                            if(is_object($objInfoElementoServicio))
                            {
                                $objModeloElementoExtender = $objInfoElementoServicio->getModeloElementoId();
                                $objTipoElementoExtender   = $objModeloElementoExtender->getTipoElementoId();
                                $arrayRegistro['strSerieElemento']  = $objInfoElementoServicio->getSerieFisica();
                                $arrayRegistro['strModeloElemento']  = $objModeloElementoExtender->getNombreModeloElemento();
                                $arrayRegistro['strTipoElemento']   = $objTipoElementoExtender->getNombreTipoElemento();
                                $arrayRegistro['strNombreElemento'] = $objInfoElementoServicio->getNombreElemento();

                                $objDetEleMacEDB = $this->_em
                                                        ->getRepository('schemaBundle:InfoDetalleElemento')
                                                        ->findOneBy(array('elementoId'    => $objInfoElementoServicio->getId(),
                                                                          'detalleNombre' => 'MAC',
                                                                          'estado'        => 'Activo'
                                                                         )
                                                                   );
                                if (is_object($objDetEleMacEDB))
                                {
                                    $arrayRegistro['strMacElemento'] = $objDetEleMacEDB->getDetalleValor();
                                }
                                $arrayRegistro['strStatus']  = 'OK';
                                $arrayRegistro['strMensaje'] = 'Información encontrada exitosamente.';
                            }
                        }
                    }
                }
            }
        }
        catch (\Exception $objException)
        {
            $arrayRegistro['strStatus']  = 'ERROR';
            $arrayRegistro['strMensaje'] = $objException->getMessage();
        }
        $arrayEncontrados[] = $arrayRegistro;
        $arrayResultado     = array("total" => 1, "encontrados" => $arrayEncontrados);
        
        return $arrayResultado;
    }
    
    /**
     * getValorPerfilEquivalente
     *
     * Método que obtiene la equivalencia de un perfil de un plan para configuraciones UAV                  
     *      
     * @param  array $arrayParametros['idPlan','elementoOltId','valorPerfil','marca','tipoNegocio','tipoAprovisionamiento','empresaCod']
     * 
     * @return string $mensajeResponse 
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 06-04-2016
     */
    public function getValorPerfilEquivalente($arrayParametros)
    {
        $strMensajeRespuesta = str_repeat(' ', 2000);
        $sql = "BEGIN INFRK_TRANSACCIONES.INFRP_PERFIL_EQUIVALENTE(:Pn_IdPlan, :Pn_IdOlt, :Pv_Perfil, :Pv_Marca, :Pv_TipoNegocio,".
               " :Pv_AprovisionamientoIp, :Pv_TipoEjecucion, :Pv_EmpresaCod, :Lv_PerfilEqui); END;";
        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->bindParam('Pn_IdPlan'              , $arrayParametros['idPlan']  );
        $stmt->bindParam('Pn_IdOlt'               , $arrayParametros['elementoOltId']);
        $stmt->bindParam('Pv_Perfil'              , $arrayParametros['valorPerfil']);
        $stmt->bindParam('Pv_Marca'               , $arrayParametros['marca']);
        $stmt->bindParam('Pv_TipoNegocio'         , $arrayParametros['tipoNegocio']);
        $stmt->bindParam('Pv_AprovisionamientoIp' , $arrayParametros['tipoAprovisionamiento']);
        $stmt->bindParam('Pv_TipoEjecucion'       , $arrayParametros['tipoEjecucion']);
        $stmt->bindParam('Pv_EmpresaCod'          , $arrayParametros['empresaCod']);
        $stmt->bindParam('Lv_PerfilEqui'          , $strMensajeRespuesta);
        $stmt->execute();
        
        return $strMensajeRespuesta;
    }
    
    /**
     * ejecutaRegularizacionRadioTn
     *
     * Método que realiza la regularización de un servicio de radio TN              
     *      
     * @param  array $arrayParametros[idServicio, nombreSw, puertoSw, modeloRadioBb, macRadioBb, ipRadioBb, 
     *                                sidRadioBb, modeloRadioCli, macRadioCli, sidRadioCli]
     * 
     * @return string $strMensajeRespuesta 
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 22-08-2016
     */
    public function ejecutaRegularizacionRadioTn($arrayParametros)
    {
        $strStatusRespuesta  = str_repeat(' ', 2000);
        $strMensajeRespuesta = str_repeat(' ', 2000);
        $strErrorBdRespuesta = str_repeat(' ', 2000);
        try
        {
            $sql = "BEGIN INFRK_TRANSACCIONES.P_REGULARIZA_CLIENTE_RADIO_TN(:Pn_IdServicio,"      .
                                                                        " :Pv_nombreSw,"        .
                                                                        " :Pv_puertoSw,"        .
                                                                        " :Pv_valorModeloRBb,"  .
                                                                        " :Pv_valorMacRBb,"     .
                                                                        " :Pv_ipRBb,"           .
                                                                        " :Pv_sidRBb,"          .
                                                                        " :Pv_valorModeloRCli," .
                                                                        " :Pv_valorMacRCli,"    .
                                                                        " :Pv_valorSidRCli,"    .
                                                                        " :Lv_statusRespuesta," .
                                                                        " :Lv_mensajeRespuesta,".
                                                                        " :Lv_errorBdRespuesta); END;";
            $stmt = $this->_em->getConnection()->prepare($sql);
            $stmt->bindParam('Pn_IdServicio'      , $arrayParametros['idServicio']  );
            $stmt->bindParam('Pv_nombreSw'        , $arrayParametros['nombreSw']);
            $stmt->bindParam('Pv_puertoSw'        , $arrayParametros['puertoSw']);
            $stmt->bindParam('Pv_valorModeloRBb'  , $arrayParametros['modeloRadioBb']);
            $stmt->bindParam('Pv_valorMacRBb'     , $arrayParametros['macRadioBb']);
            $stmt->bindParam('Pv_ipRBb'           , $arrayParametros['ipRadioBb']);
            $stmt->bindParam('Pv_sidRBb'          , $arrayParametros['sidRadioBb']);
            $stmt->bindParam('Pv_valorModeloRCli' , $arrayParametros['modeloRadioCli']);
            $stmt->bindParam('Pv_valorMacRCli'    , $arrayParametros['macRadioCli']);
            $stmt->bindParam('Pv_valorSidRCli'    , $arrayParametros['sidRadioCli']);
            $stmt->bindParam('Lv_statusRespuesta' , $strStatusRespuesta);
            $stmt->bindParam('Lv_mensajeRespuesta', $strMensajeRespuesta);
            $stmt->bindParam('Lv_errorBdRespuesta', $strErrorBdRespuesta);
            $stmt->execute();

            if (strtoupper(trim($strStatusRespuesta)) == "ERROR")
            {
                throw new \Exception($strErrorBdRespuesta."[*]".$strMensajeRespuesta);
            }        
        } 
        catch (\Exception $ex) 
        {
            throw($ex);
        }
        return $strMensajeRespuesta;
    } 
    
    /**
     * getRegistrosServiciosRadioTn
     *
     * Método que recupera registros de servicios Radio Tn que tienen data consistente             
     *      
     * @param  array $arrayParametros[ puntoId, estados, ultimaMilla]
     * 
     * @return array $datos 
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 22-08-2016
     */
    public function getRegistrosServiciosRadioTn($arrayParametros)
    {
        $objQuery           = $this->_em->createQuery();
        $jsonServiciosRado  = "";
        $strQuery           = "";
        try
        {
            $strQuery = "SELECT isr.loginAux,
                           isr.id idServicio
                    FROM schemaBundle:InfoServicio isr,
                         schemaBundle:InfoServicioTecnico ist,
                         schemaBundle:AdmiTipoMedio tm
                    WHERE isr.id                 = ist.servicioId
                    AND ist.elementoConectorId IS NOT NULL
                    AND ist.ultimaMillaId       = tm.id ";
            
            if (!empty($arrayParametros['puntoId'])) 
            {
                $strQuery .= "AND isr.puntoId = :puntoIdParam ";
                $objQuery->setParameter("puntoIdParam", $arrayParametros['puntoId']);
            }
            
            if (!empty($arrayParametros['estados']))
            {
                $strQuery .= "AND isr.estado IN (:arrayEstadosParam) ";
                $objQuery->setParameter("arrayEstadosParam", $arrayParametros['estados']);
            }
            
            if (!empty($arrayParametros['ultimaMilla']))
            {
                $strQuery .= "AND tm.nombreTipoMedio = :ultimaMillaParam ";
                $objQuery->setParameter("ultimaMillaParam",  $arrayParametros['ultimaMilla']);
            }
            
            $objQuery->setDQL($strQuery);
            $datos             = $objQuery->getScalarResult();
            $jsonServiciosRado = json_encode(["encontrados" => $datos]);
        } 
        catch (\Exception $ex) 
        {
            throw($ex);
        }
        return $jsonServiciosRado;
    }
    
    /**
      * getFechaActivacionServicio
      *
      * Método que retorna la fecha en que se activó un servicio                                   
      *      
      * @param array $arrayParametros
      * 
      * @return string $strFechaActivacion
      *
      * @author Edson Franco <efranco@telconet.ec>
      * @version 1.0 26-08-2015
      */
    public function getFechaActivacionServicio($arrayParametros)
    {
        $strFechaActivacion = '';
        
        try
        {
            $strFechaActivacion = str_pad($strFechaActivacion, 2000, " ");
            
            $sql   = "BEGIN :strFechaActivacion := DB_FINANCIERO.FNCK_FACTURACION_MENSUAL.GET_FECHA_ACTIVACION(:intIdServicio); END;";
            $query = $arrayParametros['emFinanciero']->getConnection()->prepare($sql);
            $query->bindParam('intIdServicio',      $arrayParametros['intIdServicio']);
            $query->bindParam('strFechaActivacion', $strFechaActivacion);
            $query->execute();
        }
        catch(\Exception $ex)
        {
            error_log('Existio un error en getFechaActivacionServicio ' . $ex->getMessage());
        }
        
        return $strFechaActivacion;
    }
    
    public function getJsonInfoBackboneL3mpls($objServicio,$objServicioTecnico,$emInfraestructura,$serviceTecnico)
    {
        $arrayObjs = $this->getArrayInfoBackboneL3mpls($objServicio,$objServicioTecnico,$emInfraestructura,$serviceTecnico);
        
        return json_encode($arrayObjs);
        
    }
    
    /**
     * getArrayInfoBackboneL3mpls
     *
     * Método que retorna información de BackBone L3mpls                                   
     *      
     * @param objeto $objServicio
     * @param objeto $objServicioTecnico
     * @param objeto $emInfraestructura
     * @param objeto $serviceTecnico
     * 
     * @return array $arrayObjs
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 26-08-2015  Se agrega al array de respuesta el parametro de mac de radio
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 16-11-2016 - Se agrega validacion relacionado a pseudope y devolver la vlan de acuerdo al escenario dado
     * 
     * @since 1.0
     */
    public function getArrayInfoBackboneL3mpls($objServicio,$objServicioTecnico,$emInfraestructura,$serviceTecnico)
    {
        $arrayObjs = $this->getArrayObjInfoBackboneL3mpls($objServicio,$objServicioTecnico,$emInfraestructura,$serviceTecnico);
        
        $arrayProtocolos    = array();
        $objElementoPadre   = $arrayObjs['elementoPadre'];
        
        if(is_object($objElementoPadre))
        {
            $nombreElementoPadre = $objElementoPadre->getNombreElemento();
            $idElementoPadre     = $objElementoPadre->getId();
        }
        else if(is_string($objElementoPadre))
        {
            $nombreElementoPadre = $objElementoPadre;
            $idElementoPadre     = "";
        }
        else
        {
            $nombreElementoPadre = "";
            $idElementoPadre     = "";
        }

        $arrayObjs['elementoPadre']               = $nombreElementoPadre;
        $arrayObjs['idElementoPadre']             = $idElementoPadre;
        $arrayObjs['elemento']                    = (
                                                        is_object(
                                                            $arrayObjs['elemento']))?
                                                                $arrayObjs['elemento']->getNombreElemento():null
                                                    ;
        $arrayObjs['interfaceElemento']           = (
                                                        is_object(
                                                            $arrayObjs['interfaceElemento']))?
                                                                $arrayObjs['interfaceElemento']->getNombreInterfaceElemento():null
                                                    ;
        $arrayObjs['elementoContenedor']          = (
                                                        is_object(
                                                            $arrayObjs['elementoContenedor']))?
                                                                $arrayObjs['elementoContenedor']->getNombreElemento():null
                                                    ;
        $arrayObjs['elementoConector']            = (
                                                        is_object(
                                                            $arrayObjs['elementoConector']))?
                                                                $arrayObjs['elementoConector']->getNombreElemento():null
                                                    ;
        $arrayObjs['interfaceElementoConector']   = (
                                                        is_object(
                                                            $arrayObjs['interfaceElementoConector']))?
                                                                $arrayObjs['interfaceElementoConector']->getNombreInterfaceElemento():null
                                                    ;
        $arrayObjs['elementoCliente']             = (
                                                        is_object(
                                                            $arrayObjs['elementoCliente']))?
                                                                $arrayObjs['elementoCliente']->getNombreElemento():null
                                                    ;
        $arrayObjs['interfaceElementoCliente']    = (
                                                        is_object(
                                                            $arrayObjs['interfaceElementoCliente']))?
                                                                $arrayObjs['interfaceElementoCliente']->getNombreInterfaceElemento():null
                                                    ;
        $arrayObjs['vlan']                        = $arrayObjs['vlan']
                                                    ;        
        $arrayObjs['vrf']                         = (
                                                        is_object(
                                                            $arrayObjs['vrf']))?
                                                                $arrayObjs['vrf']->getValor():null
                                                    ;

        $arrayObjs['mac']                         = $arrayObjs['mac'];
        
        $arrayObjs['macRadio']                    = (
                                                        is_object(
                                                            $arrayObjs['macRadio']))?
                                                                $arrayObjs['macRadio']->getDetalleValor():null
                                                    ;
        
        $arrayObjs['ip']                          = (
                                                        is_object(
                                                            $arrayObjs['ip']))?
                                                                $arrayObjs['ip']->getIp():null
                                                    ;
        $arrayObjs['asPrivado']                   = (
                                                        is_object(
                                                            $arrayObjs['asPrivado']))?
                                                                $arrayObjs['asPrivado']->getValor():null
                                                    ;
        
        foreach($arrayObjs['protocolos'] as $objProtocolo)
        {
            $arrayProtocolos[] = $objProtocolo->getValor();
        }
        
        $arrayObjs['protocolos']         = implode("-", $arrayProtocolos);
        
        return $arrayObjs;
        
    }
    
    /**    
    * Obtiene array de objeto con InfoBackboneL3mpls
    *
    * @author Original
    * @version 1.0
    *
    * @author Eduardo Plua <eplua@telconet.ec>
    * @version 1.1 26-05-2016 - Se recupera elementoPe desde ws networking
    * 
    * @author Allan Suarez <arsuarez@telconet.ec>
    * @version 1.2 05-07-2016 - Se cambia forma de obtener la MAC del CPE del cliente
    *
    * @author Jesus Bozada <jbozada@telconet.ec>
    * @version 1.3 12-09-2016 - Se agrega retorno de variable que contiene el valor de la mac de radio para servicios con um radio
    * 
    * @author Allan Suarez <arsuarez@telconet.ec>
    * @version 1.4 16-11-2016 - Se agrega validacion relacionado a pseudope y devolver la vlan de acuerdo al escenario dado
    *                         - Inicializacion de variables y validaciones de objetos para soportar escenarios planteados con pseudope
    * 
    * @author Allan Suarez <arsuarez@telconet.ec>
    * @version 1.5 23-06-2017 - Modificaciones de acuerdo a SonaQube
    *
    * @author Allan Suarez <arsuarez@telconet.ec>
    * @version 1.6 19-04-2018 - Modificaciones para que soporte flujo de Datos DC y devuelva las vlans que se manejan en este
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.7 17-07-2018 - Se enviá nuevo parámetro al método getPeBySwitch
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.8 - Por proyecto segmentacion de VLAN se agrega un parametro a la llamada de la funcion: getInfoBackboneByElemento
    *
    * @author Felix Caicedo <facaicedo@telconet.ec>
    * @version 1.9 25-05-2021 - Se agrega validación por el tipo de red GPON para fibra ruta.
    *
    * @param $objServicio
    * @param $objServicioTecnico
    * @param $emInfraestructura
    * @param $serviceTecnico
    */
    public function getArrayObjInfoBackboneL3mpls($objServicio,$objServicioTecnico,$emInfraestructura,$serviceTecnico)
    {
        $arrayObjs                 = array();       
        $objMacRadio               = null;  
        $objElementoConector       = null;
        $objElementoContenedor     = null;
        $interfaceElementoConector = null;        
        $objElementoPadre          = null;
        $objVrf                    = null;
        $interfaceElementoCliente  = null;        
        $strVlan                   = null;
        $boolEsFibraRuta           = false;
        $objElemento               = null;
        $interfaceElemento         = null;
        $strEsPedudoPe             = 'N';        
        $objServProdCaractVlan     = null;
        $arrayParametrosWs         = array();

        $objProducto               = $objServicio->getProductoId();
        $strNombreTecnico          = $objProducto->getNombreTecnico();
        
        //Obtener la caracteristica TIPO_FACTIBILIDAD para discriminar que sea FIBRA DIRECTA o RUTA
        $objServProdCaractTipoFact = $serviceTecnico->getServicioProductoCaracteristica($objServicio,'TIPO_FACTIBILIDAD',$objProducto);
        
        //Se determina si un servicio es pseudoPe
        $boolEsPesudoPe = $this->_em->getRepository('schemaBundle:InfoServicio')->esServicioPseudoPe($objServicio);
        
        if($boolEsPesudoPe)
        {
            //Para cuando servicio tiene caractersitica pseudope
            $arrayParametrosPseudoPe      = array ('idServicio' => $objServicio->getId());
            $arrayDatosTecnicosPseudoPe   = $this->getDatosFactibilidadPseudoPe($arrayParametrosPseudoPe);
            
            if(isset($arrayDatosTecnicosPseudoPe['data']))
            {
                $objElementoPadre    = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                         ->find($arrayDatosTecnicosPseudoPe['data']['idElemento']);                              
                $strEsPedudoPe       = 'S';
            }
        }
        
        //TIPO MEDIO
        $tipoMedio = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')->find($objServicioTecnico->getUltimaMillaId());       

        //obtengo el tipo de red del servicio
        $strTipoRed               = "MPLS";
        $objServProdCaractTipoRed = $serviceTecnico->getServicioProductoCaracteristica($objServicio,'TIPO_RED',$objProducto);
        if(is_object($objServProdCaractTipoRed))
        {
            $strTipoRed = $objServProdCaractTipoRed->getValor();
        }
        //verificar si el tipo de red es GPON
        $booleanTipoRedGpon = false;
        $arrayParVerTipoRed = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                        'COMERCIAL',
                                                                                        '',
                                                                                        'VERIFICAR TIPO RED',
                                                                                        'VERIFICAR_GPON',
                                                                                        $strTipoRed,
                                                                                        '',
                                                                                        '',
                                                                                        '');
        if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
        {
            $booleanTipoRedGpon = true;
        }
        if($tipoMedio->getNombreTipoMedio()=="Fibra Optica" || $booleanTipoRedGpon)
        {
            if($objServProdCaractTipoFact)
            {
                if($objServProdCaractTipoFact->getValor() == 'RUTA')
                {
                    $boolEsFibraRuta = true;
                }                   
            }
            else
            {
                $boolEsFibraRuta = true;
            }
        }
        
        //BACKBONE
        if($objServicioTecnico->getInterfaceElementoId())
        {
            $interfaceElemento         = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                   ->find($objServicioTecnico->getInterfaceElementoId());
        }
        if($objServicioTecnico->getInterfaceElementoClienteId())
        {
            $interfaceElementoCliente  = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                ->find($objServicioTecnico->getInterfaceElementoClienteId());
        }
        if($objServicioTecnico->getInterfaceElementoConectorId())
        {
            $interfaceElementoConector = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                   ->find($objServicioTecnico->getInterfaceElementoConectorId());
            $objElementoConector       = $interfaceElementoConector->getElementoId();
        }
        if($objServicioTecnico->getElementoContenedorId())
        {
            $objElementoContenedor     = $this->_em->getRepository('schemaBundle:InfoElemento')
                                                   ->find($objServicioTecnico->getElementoContenedorId());
        }
        if(is_object($interfaceElemento))
        {
            $objElemento               = $interfaceElemento->getElementoId();
        }
        $objElementoCliente        = ($interfaceElementoCliente)?$interfaceElementoCliente->getElementoId():null;
        
        try
        {
            if(is_object($objElemento))
            {
                $arrayParametrosWs["intIdElemento"] = $objElemento->getId();
                $arrayParametrosWs["intIdServicio"] = $objServicio->getId();

                if($booleanTipoRedGpon)
                {
                    $objElementoPe         = $serviceTecnico->getPeByOlt($arrayParametrosWs);
                }
                else
                {
                    $objElementoPe         = $serviceTecnico->getPeBySwitch($arrayParametrosWs);
                }
                
                $arrayInfoElementoPadre    = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                               ->getInfoBackboneByElemento($objElemento->getId(),$objElementoPe,"N");

                if($arrayInfoElementoPadre['idElementoPadre']>0)
                {
                    $objElementoPadre          = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                   ->find($arrayInfoElementoPadre['idElementoPadre']);
                }
            }
        }
        catch(\Exception $e)
        {
            $objElementoPadre = "N/A";
        }               
                      
        //Vlans flujos de DC
        $strVlanLan   = '';
        $strVlanWan   = '';
        $intIdVlanLan = 0;
        $intIdVlanWan = 0;
        
        //CARACTERISTICAS
        //VLAN ( si no es pseuod pe ni enlace de data center )
        if(!$boolEsPesudoPe && $strNombreTecnico != 'DATOSDC')
        {
            $objCaractVlan     = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                       ->findOneBy(array( "descripcionCaracteristica" => 'VLAN',"estado" => "Activo"));

            $objProdCaractVlan = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                           ->findOneBy(array( "productoId"          => $objProducto->getId(),
                                                              "caracteristicaId"    => $objCaractVlan->getId(),
                                                              "estado"              => "Activo"));

            $objServProdCaractVlan = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                               ->findOneBy(array("servicioId"                => $objServicio->getId(),
                                                                 "productoCaracterisiticaId" => $objProdCaractVlan->getId(),
                                                                 "estado"                    => "Activo"));

            $objVlanCaract = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')->find($objServProdCaractVlan->getValor());

            $objVlan = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')->find($objVlanCaract->getValor());
            
            if(is_object($objVlan))
            {
                $strVlan = $objVlan->getDetalleValor();
            }
        }
        else
        {
            if($strNombreTecnico == 'DATOSDC')
            {
                //Obtener Vlan Lan y Vlan Wan
                $objServProdCaractVlanLan = $serviceTecnico->getServicioProductoCaracteristica($objServicio, 'VLAN_LAN', $objProducto);
                
                if(is_object($objServProdCaractVlanLan))
                {
                    $objCaractVlanLan  = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                                   ->findOneBy(array( "descripcionCaracteristica" => 'VLAN_LAN',"estado" => "Activo"));
                    
                    $objProdCaractVlanLan =   $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                        ->findOneBy(array(  "productoId"          => $objProducto->getId(),
                                                                            "caracteristicaId"    => $objCaractVlanLan->getId(),
                                                                            "estado"              => "Activo"));

                    $objServProdCaractVlanLan =   $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                            ->findOneBy(array("servicioId"                => $objServicio->getId(),
                                                                              "productoCaracterisiticaId" => $objProdCaractVlanLan->getId(),
                                                                              "estado"                    => "Activo"));

                    $objVlanCaract = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                               ->find($objServProdCaractVlanLan->getValor());

                    $objVlanLan = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')->find($objVlanCaract->getValor());

                    if(is_object($objVlanLan))
                    {
                        $strVlanLan   = $objVlanLan->getDetalleValor();
                        $intIdVlanLan = $objServProdCaractVlanLan->getValor();
                    }
                }
                
                $objServProdCaractVlanWan = $serviceTecnico->getServicioProductoCaracteristica($objServicio, 'VLAN_WAN', $objProducto);
                
                if(is_object($objServProdCaractVlanWan))
                {
                    $objCaractVlanWan  = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                                   ->findOneBy(array( "descripcionCaracteristica" => 'VLAN_WAN',"estado" => "Activo"));
                    
                    $objProdCaractVlanWan =   $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                        ->findOneBy(array(  "productoId"          => $objProducto->getId(),
                                                                            "caracteristicaId"    => $objCaractVlanWan->getId(),
                                                                            "estado"              => "Activo"));

                    $objServProdCaractVlanWan =   $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                            ->findOneBy(array("servicioId"                => $objServicio->getId(),
                                                                              "productoCaracterisiticaId" => $objProdCaractVlanWan->getId(),
                                                                              "estado"                    => "Activo"));

                    $objVlanCaract = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                               ->find($objServProdCaractVlanWan->getValor());

                    $objVlanWan    = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')->find($objVlanCaract->getValor());

                    if(is_object($objVlanWan))
                    {
                        $strVlanWan   = $objVlanWan->getDetalleValor();
                        $intIdVlanWan = $objServProdCaractVlanWan->getValor();
                    }
                }
            }
            else
            {
                //esquemas pseudo pe/tercerizados
                $objServProdCaractVlanPseudoPe = $serviceTecnico
                                                    ->getServicioProductoCaracteristica($objServicio, 'VLAN_PROVEEDOR', $objProducto);

                if(is_object($objServProdCaractVlanPseudoPe))
                {
                    $strVlan = $objServProdCaractVlanPseudoPe->getValor();
                }
            }
        }
                        
        //VRF
        $objCaractVrf   = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                    ->findOneBy(array( "descripcionCaracteristica" => 'VRF',"estado" => "Activo"));

        $objProdCaractVrf = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                      ->findOneBy(array( "productoId"          => $objProducto->getId(),
                                                         "caracteristicaId"    => $objCaractVrf->getId(),
                                                         "estado"              => "Activo"));
        
        $objServProdCaractVrf = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                            ->findOneBy(array( "servicioId"                  => $objServicio->getId(),
                                                               "productoCaracterisiticaId"   => $objProdCaractVrf->getId(),
                                                               "estado"                      => "Activo"));
        if($objServProdCaractVrf)
        {
            $objVrf = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')->find($objServProdCaractVrf->getValor());
            
            if($objVrf->getCaracteristicaId()->getDescripcionCaracteristica()=="VRF_IMPORTADA")
            {
                $objVrfImport = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')->find($objVrf->getValor());
                
                $objVrf = $objVrfImport;
            }
        }
        //PROTOCOLOS DE ENRUTAMIENTO
        $objCaractProto     = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                       ->findOneBy(array( "descripcionCaracteristica" => 'PROTOCOLO_ENRUTAMIENTO',"estado" => "Activo"));

        $objProdCaractProto = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                       ->findOneBy(array( "productoId"          => $objProducto->getId(),
                                                          "caracteristicaId"    => $objCaractProto->getId(),
                                                          "estado"              => "Activo"));
        
        $objServProdCaractProtos = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                           ->findBy(array("servicioId"                => $objServicio->getId(),
                                                          "productoCaracterisiticaId" => $objProdCaractProto->getId(),
                                                          "estado"                    => "Activo"));
        //AS PRIVADO
        $objCaractAsPrivado     = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneBy(array( "descripcionCaracteristica" => 'AS_PRIVADO',"estado" => "Activo"));
                                       
        $objAsPrivado  = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                   ->findOneBy(array("personaEmpresaRolId"=>$objServicio->getPuntoId()
                                                                                        ->getPersonaEmpresaRolId()
                                                                                        ->getId(),
                                                     "caracteristicaId"   =>$objCaractAsPrivado->getId()                                  
                                                    ));        
        //MAC        
        if($boolEsFibraRuta)
        {
            if($objServicioTecnico->getInterfaceElementoConectorId())
            {
                $arrayParamRequest = array('interfaceElementoConectorId'=> $objServicioTecnico->getInterfaceElementoConectorId(),
                                           'tipoElemento'               => 'CPE');

                //Se obtiene la informacion del CPE desde el OUT de la ROSETA
                $arrayRequest  = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                        ->getElementoClienteByTipoElemento($arrayParamRequest);

                if($arrayRequest['msg'] == 'FOUND')
                {
                    $objElementoCliente = $this->_em->getRepository('schemaBundle:InfoElemento')
                                               ->find($arrayRequest['idElemento']);                    
                }
                else
                {                    
                    $arrayParamRequest = array('interfaceElementoConectorId'=> $objServicioTecnico->getInterfaceElementoConectorId(),
                                               'tipoElemento'               => 'ROUTER');

                    //Se obtiene la informacion del CPE desde el OUT de la ROSETA
                    $arrayRequest  = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                            ->getElementoClienteByTipoElemento($arrayParamRequest);

                    if($arrayRequest['msg'] == 'FOUND')
                    {
                        $objElementoCliente = $this->_em->getRepository('schemaBundle:InfoElemento')->find($arrayRequest['idElemento']);                           
                    }
                }

                //UM
                $arrayUM = $emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                               ->getArrayInfoEnlaceUm($objServicioTecnico->getInterfaceElementoConectorId());
            }
            else
            {
                $objElementoCliente = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                       ->find($objServicioTecnico->getElementoClienteId());               
            }
        }
        else
        {
            if($objServicioTecnico->getElementoClienteId())
            {
                if($tipoMedio->getNombreTipoMedio()=="UTP")
                {
                    $objElementoCliente        = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                   ->find($objServicioTecnico->getElementoClienteId());                                
                }
                else //Fibra Directa o Cobre donde la interface elemento cliente es la roseta o la radio
                {
                    $arrayParamRequest = array('interfaceElementoConectorId'=> $objServicioTecnico->getInterfaceElementoClienteId(),
                                               'tipoElemento'               => 'CPE');

                    //Se obtiene la informacion del CPE desde el OUT de la ROSETA
                    $arrayRequest  = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                       ->getElementoClienteByTipoElemento($arrayParamRequest);

                    if($arrayRequest['msg'] == 'FOUND')
                    {
                        $objElementoCliente = $this->_em->getRepository('schemaBundle:InfoElemento')->find($arrayRequest['idElemento']);                         
                    }
                    else
                    {
                        $arrayParamRequest = array('interfaceElementoConectorId'=> $objServicioTecnico->getInterfaceElementoClienteId(),
                                                   'tipoElemento'               => 'ROUTER');

                        //Se obtiene la informacion del CPE desde el OUT de la ROSETA
                        $arrayRequest  = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                           ->getElementoClienteByTipoElemento($arrayParamRequest);

                        if($arrayRequest['msg'] == 'FOUND')
                        {
                            $objElementoCliente = $this->_em->getRepository('schemaBundle:InfoElemento')->find($arrayRequest['idElemento']);  
                            
                        }   
                    }                    

                    //recupera objeto Radio Cliente 
                    if($tipoMedio->getNombreTipoMedio()=="Radio")
                    {
                        $objElementoClienteRadio = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                     ->find($objServicioTecnico->getElementoClienteId());
                        if ($objElementoClienteRadio)
                        {
                            $objMacRadio = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                             ->findOneBy(array('elementoId'    => $objElementoClienteRadio->getId(),
                                                                               'detalleNombre' => 'MAC',
                                                                               'estado'        => 'Activo')
                                                                        );
                        }
                    }
                }

                $interfaceElementoCliente  = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                       ->find($objServicioTecnico->getInterfaceElementoClienteId());
            }                                                                                                              
        }    
        
        $arrayUM['UM']         = $tipoMedio->getNombreTipoMedio();
        $arrayUM['COLOR_HILO'] = "";
        
        $strMac = null;
        //MAC CPE        
        $arrayRespuesta = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                            ->getMacCpePorServicioInterface($objServicio->getId(),$boolEsPesudoPe);

        if($arrayRespuesta)
        {
            $strMac = $arrayRespuesta['mac'];
        }        
        
        //IP
        $objIp         = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                           ->findOneBy(array('servicioId'   => $objServicio->getId(),
                                                             'tipoIp'       => 'WAN',
                                                             'estado'       =>'Activo'));
        
        $arrayObjs['elementoPadre']               = $objElementoPadre;
        $arrayObjs['elemento']                    = $objElemento;
        $arrayObjs['interfaceElemento']           = $interfaceElemento;
        $arrayObjs['elementoContenedor']          = $objElementoContenedor;
        $arrayObjs['elementoConector']            = $objElementoConector;
        $arrayObjs['interfaceElementoConector']   = $interfaceElementoConector;
        $arrayObjs['elementoCliente']             = $objElementoCliente;
        $arrayObjs['interfaceElementoCliente']    = $interfaceElementoCliente;
        $arrayObjs['anillo']                      = isset($arrayInfoElementoPadre['anillo'])?$arrayInfoElementoPadre['anillo']:"";
        $arrayObjs['vlan']                        = $strVlan;        
        $arrayObjs['idVlan']                      = (
                                                        is_object(
                                                            $objServProdCaractVlan))?
                                                                $objServProdCaractVlan->getValor():null
                                                    ;
        $arrayObjs['vrf']                         = $objVrf;
        $arrayObjs['idVrf']                       = (
                                                        is_object(
                                                            $objServProdCaractVrf))?
                                                                $objServProdCaractVrf->getValor():null
                                                    ;
        $arrayObjs['protocolos']                  = $objServProdCaractProtos;
        $arrayObjs['asPrivado']                   = $objAsPrivado;
        $arrayObjs['mac']                         = $strMac;
        $arrayObjs['macRadio']                    = $objMacRadio;
        $arrayObjs['ip']                          = $objIp;
        $arrayObjs['um']                          = $arrayUM['UM'];
        $arrayObjs['hilo']                        = $arrayUM['COLOR_HILO'];
        $arrayObjs['vlanLan']                     = $strVlanLan;        
        $arrayObjs['idVlanLan']                   = $intIdVlanLan;
        $arrayObjs['vlanWan']                     = $strVlanWan;        
        $arrayObjs['idVlanWan']                   = $intIdVlanWan;
        
        return $arrayObjs;
        
    }

    /**
     * Funcion que ejecuta un sql para obtener los número y color del hilo
     * 
     * @author Duval Medina C. <dmedina@telconet.ec>
     * @version 1.0 2016-05-21
     * 
     * @param $idInterfaceElementoConector
     * @param $emComercial
     * 
     * @return $objResultado ['status', 'data']
     *                                   data = ['numeroHilo', 'colorHilo']
     */
    public function getDatosHiloPorConector($idInterfaceElementoConector,$emComercial)
    {
        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($emComercial);
            $objNativeQuery  = $emComercial->createNativeQuery(null, $objResultSetMap);

            $strSql          = " SELECT HILO.NUMERO_HILO , HILO.COLOR_HILO
                                FROM DB_INFRAESTRUCTURA.INFO_ENLACE                  ENLACE,
                                    DB_INFRAESTRUCTURA.INFO_ENLACE                  ENLACE_INI,
                                    DB_INFRAESTRUCTURA.INFO_BUFFER_HILO             BUFFER_HILO,
                                    DB_INFRAESTRUCTURA.ADMI_HILO                    HILO
                                WHERE 
                                    ENLACE.INTERFACE_ELEMENTO_INI_ID     = ENLACE_INI.INTERFACE_ELEMENTO_FIN_ID
                                    AND ENLACE_INI.BUFFER_HILO_ID        = BUFFER_HILO.ID_BUFFER_HILO
                                    AND BUFFER_HILO.HILO_ID              = HILO.ID_HILO
                                    AND ENLACE_INI.BUFFER_HILO_ID        = BUFFER_HILO.ID_BUFFER_HILO
                                    AND ENLACE_INI.ESTADO                = :estado
                                    AND ENLACE.ESTADO                    = :estado
                                    AND ENLACE.INTERFACE_ELEMENTO_FIN_ID = :idInterfaceElementoConector";

            
            $objResultSetMap->addScalarResult('NUMERO_HILO', 'numeroHilo', 'integer');
            $objResultSetMap->addScalarResult('COLOR_HILO',  'colorHilo',  'string');
                    
            $objNativeQuery->setParameter("idInterfaceElementoConector", $idInterfaceElementoConector);
            $objNativeQuery->setParameter("estado", "Activo");
            
            $objNativeQuery->setSQL($strSql);
            
            $arrDatosTecnicos = $objNativeQuery->getOneOrNullResult();
            
            if($arrDatosTecnicos)
            {
                $objResultado = array(
                                'status' => 'OK' ,
                                'data'   => $arrDatosTecnicos
                                );
            }
            else
            {
                $objResultado = array(
                                'status' => 'ERROR' ,
                                'data'   => "No hay informacion"
                                );
            }
        }
        catch(\Doctrine\ORM\NonUniqueResultException $ex)
        {   
            $objResultado = array(
                                'status' => 'ERROR' ,
                                'data'   => "Se obtuvo mas de un valor"
                                );
        }
        
        return $objResultado;
    }

    /**    
    * Obtiene array de objetos con InfoBackbone para el producto INTMPLS
    *
    * @author Juan Lafuente <jlafuente@telconete.ec>
    * @version 1.0 05-07-2016 
    * 
    * @author Allan Suarez <arsuarez@telconet.ec>
    * @version 1.1 09-09-2016 - Se realiza alcance para que muestre mac de router que se encuentran como equipo de cliente
    *
    * @author Jesus Bozada <jbozada@telconete.ec>
    * @version 1.2 12-09-2016    Se agrega recuperacion de mac de Radio de Cliente en caso de ser UM Radio
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.3 17-07-2018 - Se enviá nuevo parámetro al método getPeBySwitch
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.4 - Por proyecto segmentacion de VLAN se agrega un parametro a la llamada de la funcion: getInfoBackboneByElemento
    *
    * @param $objServicio
    * @param $objServicioTecnico
    * @param $emInfraestructura
    * @param $serviceTecnico
    */
    public function getInfoBackboneInternetMPLS($objServicio, $objServicioTecnico, $emInfraestructura, $serviceTecnico)
    {
        $arrayObjs                 = array();
        $objMac                    = null;
        $objMacRadio               = null;
        $objElementoConector       = null;
        $objElementoContenedor     = null;
        $interfaceElementoConector = null;
        $objElementoCliente        = null;
        $objElementoPadre          = null;
        $objVrf                    = null;
        $boolEsFibraRuta           = false;
        $arrayParametrosWs         = array();

        $objProducto               = $objServicio->getProductoId();
        
        //BACKBONE
        $interfaceElemento         = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                               ->find($objServicioTecnico->getInterfaceElementoId());
        $objElemento               = $interfaceElemento->getElementoId();
        
        //Obtener la caracteristica TIPO_FACTIBILIDAD para discriminar que sea FIBRA DIRECTA o RUTA
        $objServProdCaractTipoFact = $serviceTecnico->getServicioProductoCaracteristica($objServicio,'TIPO_FACTIBILIDAD',$objProducto);
        
        //TIPO MEDIO
        $tipoMedio = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')->find($objServicioTecnico->getUltimaMillaId());       

        if($tipoMedio->getNombreTipoMedio()=="Fibra Optica")
        {
            if($objServProdCaractTipoFact)
            {
                if($objServProdCaractTipoFact->getValor() == 'RUTA')
                {
                    $boolEsFibraRuta = true;
                }                   
            }
            else
            {
                $boolEsFibraRuta = true;
            }
        }
     
        //Si es FIBRA - RUTA
        if($boolEsFibraRuta)
        {
            if($objServicioTecnico->getInterfaceElementoConectorId())
            {
                $interfaceElementoConector = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                       ->find($objServicioTecnico->getInterfaceElementoConectorId());
                $objElementoConector       = $interfaceElementoConector->getElementoId();

                $arrayParamRequest = array('interfaceElementoConectorId'=> $objServicioTecnico->getInterfaceElementoConectorId(),
                                           'tipoElemento'               => 'CPE');

                //Se obtiene la informacion del CPE desde el OUT de la ROSETA
                $arrayRequest  = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                   ->getElementoClienteByTipoElemento($arrayParamRequest);

                if($arrayRequest['msg'] == 'FOUND')
                {
                    $objElementoCliente = $this->_em->getRepository('schemaBundle:InfoElemento')->find($arrayRequest['idElemento']);                              
                }         
                else
                {
                    $arrayParamRequest = array('interfaceElementoConectorId'=> $objServicioTecnico->getInterfaceElementoConectorId(),
                                               'tipoElemento'               => 'ROUTER');

                    //Se obtiene la informacion del CPE desde el OUT de la ROSETA
                    $arrayRequest  = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                       ->getElementoClienteByTipoElemento($arrayParamRequest);

                    if($arrayRequest['msg'] == 'FOUND')
                    {
                        $objElementoCliente = $this->_em->getRepository('schemaBundle:InfoElemento')->find($arrayRequest['idElemento']);                              
                    } 
                }
            }
            else
            {
                $objElementoCliente = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                       ->find($objServicioTecnico->getElementoClienteId());                 
            }
        }
        else
        {
            if($objServicioTecnico->getElementoClienteId())
            {
                if($tipoMedio->getNombreTipoMedio()=="UTP")
                {
                    $objElementoCliente        = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                   ->find($objServicioTecnico->getElementoClienteId());                                
                }
                else //Fibra Directa o Cobre donde la interface elemento cliente es la roseta o la radio
                {
                    $arrayParamRequest = array('interfaceElementoConectorId'=> $objServicioTecnico->getInterfaceElementoClienteId(),
                                               'tipoElemento'               => 'CPE');

                    //Se obtiene la informacion del CPE desde el OUT de la ROSETA
                    $arrayRequest  = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                       ->getElementoClienteByTipoElemento($arrayParamRequest);

                    if($arrayRequest['msg'] == 'FOUND')
                    {
                        $objElementoCliente = $this->_em->getRepository('schemaBundle:InfoElemento')->find($arrayRequest['idElemento']);                         
                    }
                    else
                    {
                        $arrayParamRequest = array('interfaceElementoConectorId'=> $objServicioTecnico->getInterfaceElementoClienteId(),
                                                   'tipoElemento'               => 'ROUTER');

                        //Se obtiene la informacion del CPE desde el OUT de la ROSETA
                        $arrayRequest  = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                           ->getElementoClienteByTipoElemento($arrayParamRequest);

                        if($arrayRequest['msg'] == 'FOUND')
                        {
                            $objElementoCliente = $this->_em->getRepository('schemaBundle:InfoElemento')->find($arrayRequest['idElemento']);   
                            
                        }
                    }                      
                    
                    //recupera objeto Radio Cliente 
                    if($tipoMedio->getNombreTipoMedio()=="Radio")
                    {
                        $objElementoClienteRadio = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                     ->find($objServicioTecnico->getElementoClienteId());
                        if ($objElementoClienteRadio)
                        {
                            $objMacRadio = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                             ->findOneBy(array('elementoId'    => $objElementoClienteRadio->getId(),
                                                                               'detalleNombre' => 'MAC',
                                                                               'estado'        => 'Activo')
                                                                        );
                        }
                    }
                }

                $interfaceElementoCliente  = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                       ->find($objServicioTecnico->getInterfaceElementoClienteId());               
            }
        }
        
        $strMac = null;
        
        //MAC CPE        
        $arrayRespuesta = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                            ->getMacCpePorServicioInterface($objServicio->getId());                
        if($arrayRespuesta)
        {
            $strMac = $arrayRespuesta['mac'];
        } 


        if($objServicioTecnico->getElementoContenedorId())
        {
            $objElementoContenedor     = $this->_em->getRepository('schemaBundle:InfoElemento')
                                                   ->find($objServicioTecnico->getElementoContenedorId());
        }
        
        // ------------------------------------------------------------------------------------------
        // Elemento Padre
        try
        {
            $arrayParametrosWs["intIdElemento"] = $objElemento->getId();
            $arrayParametrosWs["intIdServicio"] = $objServicio->getId();

            $objElementoPe             = $serviceTecnico->getPeBySwitch($arrayParametrosWs);
            $arrayInfoElementoPadre    = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                           ->getInfoBackboneByElemento($objElemento->getId(),$objElementoPe,"N");

            if($arrayInfoElementoPadre['idElementoPadre']>0)
            {
                $objElementoPadre          = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                               ->find($arrayInfoElementoPadre['idElementoPadre']);
            }
        }
        catch(\Exception $e)
        {
            $objElementoPadre = $e->getMessage();
        }
        
        // -----------------------------------------------------------------------------------------
        // CARACTERISTICAS
        // VLAN
        $objCaractVlan     = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                       ->findOneBy(array( "descripcionCaracteristica" => 'VLAN',"estado" => "Activo"));

        $objProdCaractVlan = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                       ->findOneBy(array( "productoId"          => $objProducto->getId(),
                                                          "caracteristicaId"    => $objCaractVlan->getId(),
                                                          "estado"              => "Activo"));
        
        $objServProdCaractVlan = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                           ->findOneBy(array("servicioId"                => $objServicio->getId(),
                                                             "productoCaracterisiticaId" => $objProdCaractVlan->getId(),
                                                             "estado"                    => "Activo"));
                                                                    
        $objVlan = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')->find($objServProdCaractVlan->getValor());
        
        // VRF
        $objCaractVrf   = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                    ->findOneBy(array( "descripcionCaracteristica" => 'VRF',"estado" => "Activo"));

        $objProdCaractVrf = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                      ->findOneBy(array( "productoId"          => $objProducto->getId(),
                                                         "caracteristicaId"    => $objCaractVrf->getId(),
                                                         "estado"              => "Activo"));
        
        $objServProdCaractVrf = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                            ->findOneBy(array( "servicioId"                  => $objServicio->getId(),
                                                               "productoCaracterisiticaId"   => $objProdCaractVrf->getId(),
                                                               "estado"                      => "Activo"));
        if($objServProdCaractVrf)
        {
            $objVrf = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')->find($objServProdCaractVrf->getValor());
            
            if($objVrf->getCaracteristicaId()->getDescripcionCaracteristica()=="VRF_IMPORTADA")
            {
                $objVrfImport = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')->find($objVrf->getValor());
                
                $objVrf = $objVrfImport;
            }
        }
        
        // IP
        $objIp         = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                           ->findOneBy(array('servicioId'   => $objServicio->getId(),
                                                             'tipoIp'       => 'WAN',
                                                             'estado'       =>'Activo'));
        
        $arrayObjs['elementoPadre']               = $objElementoPadre;
        $arrayObjs['elemento']                    = $objElemento;
        $arrayObjs['interfaceElemento']           = $interfaceElemento;
        $arrayObjs['elementoContenedor']          = $objElementoContenedor;
        $arrayObjs['elementoConector']            = $objElementoConector;
        $arrayObjs['interfaceElementoConector']   = $interfaceElementoConector;
        $arrayObjs['elementoCliente']             = $objElementoCliente;
        $arrayObjs['interfaceElementoCliente']    = $interfaceElementoCliente;
        $arrayObjs['anillo']                      = $arrayInfoElementoPadre['anillo'];
        $arrayObjs['vlan']                        = $objVlan;
        $arrayObjs['idVlan']                      = $objVlan->getId();
        $arrayObjs['vrf']                         = $objVrf;
        $arrayObjs['idVrf']                       = (is_object($objVrf)) ? $objVrf->getId() : null;
        $arrayObjs['mac']                         = $strMac;
        $arrayObjs['macRadio']                    = $objMacRadio;
        $arrayObjs['ip']                          = $objIp;
        
        return $arrayObjs;
    }
    
    /**
     * Funcion que recupera rol de cliente , Nombres y Apellidos ó Razón Social e Identificación segun 
     * los parametros enviados
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0         06-10-2016 
     * @since 1.0
     * 
     * @author Héctor Lozano <hlozano@telconet.ec>
     * @version 1.1         06-12-2018 Se agrega el campo OFICINA_ID en el arreglo $arrayInformacionCliente[] del cliente.
     * @since 1.1
     *
     * @param Array $arrayParametros [ strEmpresaCod      Empresa a la que pertenece el cliente consultado
     *                                 strIdentificacion  Identificación del cliente que solicita informacion
     *                                 strLogin           Login del punto del cliente del cual se solicita información
     *                                 strSerieOnt        Serie Ont del equipo CPE que utiliza el cliente consultado
     *                                 strMacOnt          Mac Ont del equipo CPE que utiliza el cliente consultado
     *                                 ociCon             Parametros utilizados para generar conexion OCI a la base de datos
     *                               ]
     */ 
    public function getRolClienteWs($arrayParametros)
    {
        try
        {
            //inicializacion de variables
            $arrayInformacionCliente = "";
            $strStatus               = "";
            $strMensaje              = "";
            $arrayOciCon             = $arrayParametros['ociCon'];
            $rscCon                  = oci_connect($arrayOciCon['user_comercial'], 
                                                   $arrayOciCon['passwd_comercial'], 
                                                   $arrayOciCon['dsn']);
            $cursorResult            = oci_new_cursor($rscCon);   
            $arrayInformacionCliente['strStatus']   = "ERROR";  
            $arrayInformacionCliente['strMensaje']  = "Problemas al recuperar Información de cliente";  

            //definicion del procedure a ejecutar
            $sql  = 'BEGIN TECNK_SERVICIOS.P_WS_GET_ROL_CLIENTE(:Pv_EmpresaCod,
                                                                :Pv_Identificacion,
                                                                :Pv_Login,
                                                                :Pn_SerieOnt,
                                                                :Pv_MacOnt,
                                                                :Prf_Result,
                                                                :Pv_Status,
                                                                :Pv_Mensaje); END;';
            $stmt = oci_parse($rscCon,$sql);
            
            oci_bind_by_name($stmt,':Pv_EmpresaCod'    ,$arrayParametros['strEmpresaCod']);
            oci_bind_by_name($stmt,':Pv_Identificacion',$arrayParametros['strIdentificacion']);
            oci_bind_by_name($stmt,':Pv_Login'         ,$arrayParametros['strLogin']);
            oci_bind_by_name($stmt,':Pn_SerieOnt'      ,$arrayParametros['strSerieOnt']);
            oci_bind_by_name($stmt,':Pv_MacOnt'        ,$arrayParametros['strMacOnt']);
            oci_bind_by_name($stmt,':Prf_Result'       ,$cursorResult,-1,OCI_B_CURSOR);
            oci_bind_by_name($stmt,':Pv_Status'        ,$strStatus,10);
            oci_bind_by_name($stmt,':Pv_Mensaje'       ,$strMensaje,2000);

            

            oci_execute($stmt);
            oci_execute($cursorResult, OCI_DEFAULT);
            
            if ($strStatus == "ERROR")
            {
                throw new \Exception("getRolClienteWs ".$strMensaje);
            }

            //recorrer el cursor para obtener los datos
            while($row = oci_fetch_array($cursorResult))
            {
               $arrayInformacionCliente['idPersonaRol']   = $row['ID_PERSONA_ROL'];
               $arrayInformacionCliente['identificacion'] = $row['IDENTIFICACION_CLIENTE'];
               $arrayInformacionCliente['nombres']        = $row['NOMBRES'];
               $arrayInformacionCliente['login']          = $row['LOGIN']; 
               $arrayInformacionCliente['oficina_id']     = $row['OFICINA_ID']; 
            }
            
            $arrayInformacionCliente['strStatus']  = $strStatus;  
            $arrayInformacionCliente['strMensaje'] = $strMensaje;  
            
        } 
        catch (\Exception $ex) 
        {
            throw($ex);
        }
        return $arrayInformacionCliente;
    }
    
    
    /**
     * Funcion que recupera rol de cliente , Nombres y Apellidos ó Razón Social e Identificación segun 
     * los parametros enviados, en base a estados parametrizados
     * 
     * @author Jose Bedon <jobedon@telconet.ec>
     * @version 1.0         22-04-2020
     * @since 1.0
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 17-11-2020 - Se agrega la codificación UTF8 a la conexión.
     *
     * @param Array $arrayParametros [ strEmpresaCod      Empresa a la que pertenece el cliente consultado
     *                                 strIdentificacion  Identificación del cliente que solicita informacion
     *                                 strLogin           Login del punto del cliente del cual se solicita información
     *                                 strSerieOnt        Serie Ont del equipo CPE que utiliza el cliente consultado
     *                                 strMacOnt          Mac Ont del equipo CPE que utiliza el cliente consultado
     *                                 ociCon             Parametros utilizados para generar conexion OCI a la base de datos
     *                               ]
     */ 
    public function getRolClienteExtranetWs($arrayParametros)
    {
        try
        {
            //inicializacion de variables
            $strStatus               = "";
            $strMensaje              = "";
            $intContador             = 0;
            $arrayOciCon             = $arrayParametros['ociCon'];
            $objRscCon               = oci_connect($arrayOciCon['user_comercial'], 
                                                   $arrayOciCon['passwd_comercial'], 
                                                   $arrayOciCon['dsn'],'AL32UTF8');
                                                   
            $objCursorResult         = oci_new_cursor($objRscCon);   
            $arrayInformacionCliente = array();
            $arrayInformacionCliente['strStatus']   = "ERROR";  
            $arrayInformacionCliente['strMensaje']  = "Problemas al recuperar Información de cliente";


            //definicion del procedure a ejecutar
            $strSql  = 'BEGIN TECNK_SERVICIOS.P_WS_GET_ROL_CLIENTE_EXT(:Pv_EmpresaCod,
                                                                    :Pv_Identificacion,
                                                                    :Pv_Login,
                                                                    :Pv_TipoRol,
                                                                    :Pn_SerieOnt,
                                                                    :Pv_MacOnt,
                                                                    :Prf_Result,
                                                                    :Pv_Status,
                                                                    :Pv_Mensaje); END;';
            $objStmt = oci_parse($objRscCon,$strSql);
            
            oci_bind_by_name($objStmt,':Pv_EmpresaCod'    ,$arrayParametros['strEmpresaCod']);
            oci_bind_by_name($objStmt,':Pv_Identificacion',$arrayParametros['strIdentificacion']);
            oci_bind_by_name($objStmt,':Pv_Login'         ,$arrayParametros['strLogin']);
            oci_bind_by_name($objStmt,':Pv_TipoRol'       ,$arrayParametros['strTipoRol']);
            oci_bind_by_name($objStmt,':Pn_SerieOnt'      ,$arrayParametros['strSerieOnt']);
            oci_bind_by_name($objStmt,':Pv_MacOnt'        ,$arrayParametros['strMacOnt']);
            oci_bind_by_name($objStmt,':Prf_Result'       ,$objCursorResult,-1,OCI_B_CURSOR);
            oci_bind_by_name($objStmt,':Pv_Status'        ,$strStatus,10);
            oci_bind_by_name($objStmt,':Pv_Mensaje'       ,$strMensaje,2000);

            

            oci_execute($objStmt);
            oci_execute($objCursorResult, OCI_DEFAULT);
            
            if ($strStatus == "ERROR")
            {
                throw new \Exception("getRolClienteWs ".$strMensaje);
            }

            //recorrer el cursor para obtener los datos
            while($arrayRow = oci_fetch_array($objCursorResult))
            {
               $arrayInformacionCliente['idPersonaRol'][] = $arrayRow['ID_PERSONA_ROL'];
               $arrayInformacionCliente['identificacion'] = $arrayRow['IDENTIFICACION_CLIENTE'];
               $arrayInformacionCliente['nombres']        = $arrayRow['NOMBRES'];
               $arrayInformacionCliente['login']          = $arrayRow['LOGIN']; 
               $arrayInformacionCliente['oficina_id']     = $arrayRow['OFICINA_ID'];
               $arrayInformacionCliente['estado'][]       = $arrayRow['ESTADO'];
               
               $intContador= $intContador+1;
            }
            
            $arrayInformacionCliente['strStatus']  = $strStatus; 
            $arrayInformacionCliente['strMensaje'] = $strMensaje;
            $arrayInformacionCliente['intContador']   = $intContador;
            
        } 
        catch (\Exception $ex) 
        {
            throw($ex);
        }
        return $arrayInformacionCliente;
    }

    
    
    
    /**
     * Funcion que recupera información de puntos del cliente solicitado
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0         06-10-2016 
     * @since 1.0
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1         20-10-2016      Se agregaron validaciones para solo monstar información 
     *                                      de clientes con puntos con servicios de internet
     * 
     * @author Francisco Adum <fadum@netlife.net.ec>
     * @version 1.2 07-07-2017  Se agrega un valor nuevo a la data tecnica [ipv4] la cual servira para indicar al OSS de RDA
     *                          que el cliente tiene asignada una ipv4 publica
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 10-04-2018  Se contatena string de espacio en blanco en variable para poder retornar valores "0" en campo Service_Port
     * @since 1.2
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.4 20-04-2018  Se agrega programación para poder retornar información de servicios Small Business
     * @since 1.3
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.5 15-10-2018  Se modifica recuperación de correos del cliente y se agrega parámetro nuevo SALDO del punto del cliente
     * @since 1.4
     * 
     * @author Mildred Cruz <mlcruz@telconet.ec>
     * @version 1.6 11-02-2019 Se agrega programación para poder retornar información de servicios TelcoHome
     *
     * @author Héctor Lozano <hlozano@telconet.ec>
     * @version 1.7 06-12-2018 Se agrega el campo ID_PUNTO en el arreglo $arrayInformacionPunto[].
     *
     * @author Alex Arreaga  <atarreaga@telconet.ec>
     * @version 1.8 07-06-2019  Se agrega programación para poder retornar información de facturas,
     *                                                                                    pagos,
     *                                                                                    fecha_activación,
     *                                                                                    tipo de negocio
     *                          Se agrega el campo facturas,pagos,fecha_activacion,tipo_negocio en el arreglo 
     *                                                                               $arrayInformacionPunto[].
     * 
     * @author Jesús Bozada  <jbozada@telconet.ec>
     * @version 1.9 16-09-2019  Se agregan nuevos valores de anchos de bandas en servicios que tienen promoción BW aplicada
     * 
     * @param Array $arrayParametros [ strEmpresaCod      Empresa a la que pertenece el cliente consultado
     *                                 intIdRolCliente    Identificador del rol de cliente 
     *                                 ociCon             Parámetros utilizados para generar conexión OCI a la base de datos
     *                               ]
     * 
     * @author Ivan Mata  <imata@telconet.ec>
     * @version 1.8 16-09-2019  Se agrega el campo cod_plan y strKonibit en el arreglo $arrayInformacionServicio[]
     * 
     * 
     * @author Jose Bedon <jobedon@telconet.ec>
     * @version 1.11 20-04-2020 Se modifica numero de facturas a mostrar de 5 a 6
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.0 17-07-2021 Se agrega la validación del tipo negocio actual para los servicios TN bajo la red GPON-MPLS
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.1 20-07-2021 Se agrega validaciones para los tipos de red
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.2 18-10-2021 Se agrega validación para obtener los servicios WIFI y sus características bajo la red TN GPON-MPLS
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 2.2 02-03-2022 Se agrega bandera para no presentar los valores de line_profile_promo, gemport_promo y traffic_table_promo
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.3 06-09-2022 Se obtiene el elemento del ONT a través del método buscar el elemento padre.
     * 
     * @author Leonela Burgos <mlburgos@telconet.ec>
     * @version 2.4 14-04-2023 Se modifica la posicion de la declaracion de la variable strKonibit antes que recorra los puntos del cliente
     * 
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 2.5 05-05-2023 - Se agregan llaves requeridas por defecto vacias para servicios de TN
     * 
     */ 
    public function getPuntosClienteWs($arrayParametros)
    {
        try
        {
            //inicialización de variables
            $arrayInformacionPuntos   = '';
            $arrayInformacionPunto    = '';
            $arrayInformacionServicio = '';
            $arrayInformacionIp       = '';
            $arrayInformacionCasos    = '';
            $arrayFacturaPunto        = '';
            $strStatus                = '';
            $strMensaje               = '';
            $strTieneServicioInternet = 'NO';
            $strTienePuntoConInternet = '';
            $strKonibit               = 'NO';
            $arrayOciCon              = $arrayParametros['ociCon'];
            $rscCon                   = oci_connect($arrayOciCon['user_comercial'], 
                                                    $arrayOciCon['passwd_comercial'],  
                                                    $arrayOciCon['dsn']);
            $arrayOciConFin           = oci_connect($arrayOciCon['user_financiero'], 
                                                    $arrayOciCon['passwd_financiero'],  
                                                    $arrayOciCon['dsn']);
            $cursorResultPuntos       = oci_new_cursor($rscCon);   
            $arrayInformacionPuntos['strStatus']   = "ERROR";  
            $arrayInformacionPuntos['strMensaje']  = "Problemas al recuperar Información de puntos del cliente";  
            $arrayInformacionPuntos['puntos']      = array();

            $strValidarEsquemaGpon   = "";
            $arrayValidarGponEsquema = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                        'COMERCIAL',
                                                                                                        '',
                                                                                                        '',
                                                                                                        'VALIDAR_ESQUEMA_FLUJO_GPON_WS_OSS',
                                                                                                        '',
                                                                                                        '',
                                                                                                        '',
                                                                                                        '');
            if(isset($arrayValidarGponEsquema) && !empty($arrayValidarGponEsquema) && isset($arrayValidarGponEsquema['valor2']))
            {
                $strValidarEsquemaGpon = $arrayValidarGponEsquema['valor2'];
            }
            
        for($intContadorDetalle=0; $intContadorDetalle < $arrayParametros['intContador'];$intContadorDetalle++)
        {
            
        
            
            //definicion del procedure a ejecutar
            $sql  = 'BEGIN TECNK_SERVICIOS.P_WS_GET_PUNTOS_CLIENTE(:Pv_EmpresaCod,
                                                                   :Pn_RolCliente,
                                                                   :Pv_Login,
                                                                   :Prf_Result,
                                                                   :Pv_Status,
                                                                   :Pv_Mensaje); END;';
            $stmt = oci_parse($rscCon,$sql);
            
            oci_bind_by_name($stmt,':Pv_EmpresaCod'    ,$arrayParametros['strEmpresaCod']);
            oci_bind_by_name($stmt,':Pn_RolCliente'    ,$arrayParametros['intIdRolCliente'][$intContadorDetalle]);
            oci_bind_by_name($stmt,':Pv_Login'         ,$arrayParametros['strLogin']);
            oci_bind_by_name($stmt,':Prf_Result'       ,$cursorResultPuntos,-1,OCI_B_CURSOR);
            oci_bind_by_name($stmt,':Pv_Status'        ,$strStatus,10);
            oci_bind_by_name($stmt,':Pv_Mensaje'       ,$strMensaje,2000);
    
            oci_execute($stmt);
            oci_execute($cursorResultPuntos, OCI_DEFAULT);
            
            if ($strStatus == "ERROR")
            {
                throw new \Exception("TECNK_SERVICIOS.P_WS_GET_PUNTOS_CLIENTE: ".$strMensaje);
            }
            
            //recorrer el cursor para obtener información de puntos de un cliente
            while($rowPuntos = oci_fetch_array($cursorResultPuntos))
            {
                $strTieneServicioInternet                  = "NO";
                $arrayInformacionPunto                     = '';
                $arrayInformacionPunto['id_punto']         = $rowPuntos['ID_PUNTO']?$rowPuntos['ID_PUNTO']:"";
                $arrayInformacionPunto['login']            = $rowPuntos['LOGIN']?$rowPuntos['LOGIN']:"";
                $arrayInformacionPunto['cobertura']        = $rowPuntos['NOMBRE_JURISDICCION']?$rowPuntos['NOMBRE_JURISDICCION']:"";
                $arrayInformacionPunto['direccion']        = $rowPuntos['DIRECCION']?$rowPuntos['DIRECCION']:"";
                $arrayInformacionPunto['ciudad']           = $rowPuntos['CIUDAD']?$rowPuntos['CIUDAD']:"";
                $arrayInformacionPunto['sector']           = $rowPuntos['SECTOR']?$rowPuntos['SECTOR']:"";
                $arrayInformacionPunto['longitud']         = $rowPuntos['LONGITUD']?$rowPuntos['LONGITUD']:"";
                $arrayInformacionPunto['latitud']          = $rowPuntos['LATITUD']?$rowPuntos['LATITUD']:"";
                $arrayInformacionPunto['estado']           = $rowPuntos['ESTADO']?$rowPuntos['ESTADO']:"";
                $arrayInformacionPunto['telefonos']        = $rowPuntos['TELEFONOS']?$rowPuntos['TELEFONOS']:"";
                $arrayInformacionPunto['correos']          = $rowPuntos['CORREOS']?$rowPuntos['CORREOS']:"";
                $arrayInformacionPunto['saldo']            = $rowPuntos['SALDO']?$rowPuntos['SALDO']:"";
                $arrayInformacionPunto['servicios']        = '';
                $arrayInformacionPunto['data_tecnica']     = '';
                $arrayInformacionPunto['facturas']         = '';
                $arrayInformacionPunto['pagos']            = ''; 
                $arrayInformacionPunto['fecha_activacion'] = '';
                $arrayInformacionPunto['tipo_negocio']     = '';
                $arrayInformacionPuntoDatos                = '';
                $arrayInformacionPuntoInternet             = '';
                $arrayInformacionPuntoCamara               = '';
                $arrayInformacionPuntoWifi                 = '';
                $strStatus                                 = '';
                $strMensaje                                = '';
                
                //definicion del procedure a ejecutar
                $strSql  = 'BEGIN FNCK_FACTURACION.P_WS_ULTIMAS_FACTURAS_X_PUNTO(:Pn_IdPunto,
                                                                                 :Pn_CantidadDocs,
                                                                                 :Prf_Result,
                                                                                 :Pv_Status,
                                                                                 :Pv_Mensaje); END;';
                //Cantidad de facturas a devolver
                $intCant = 6;
                $strStmt                  = oci_parse($arrayOciConFin,$strSql);
                $arrayCursorFacturasPunto = oci_new_cursor($arrayOciConFin); 
                
                oci_bind_by_name($strStmt,':Pn_IdPunto'      ,$rowPuntos['ID_PUNTO']);
                oci_bind_by_name($strStmt,':Pn_CantidadDocs' ,$intCant);
                oci_bind_by_name($strStmt,':Prf_Result'      ,$arrayCursorFacturasPunto,-1,OCI_B_CURSOR);
                oci_bind_by_name($strStmt,':Pv_Status'       ,$strStatus,10);
                oci_bind_by_name($strStmt,':Pv_Mensaje'      ,$strMensaje,2000);

                oci_execute($strStmt);
                oci_execute($arrayCursorFacturasPunto, OCI_DEFAULT); 
                
                if ($strStatus == "ERROR")
                {
                    throw new \Exception("BEGIN FNCK.P_WS_ULTIMAS_FACTURAS_X_PUNTO: ".$strMensaje);
                }
                
                 while($rowFacturasPunto = oci_fetch_array($arrayCursorFacturasPunto))
                {                
                     $arrayFacturaPunto                          = '';
                     $arrayFacturaPunto['id_documento']          = $rowFacturasPunto['ID_DOCUMENTO']?
                                                                   $rowFacturasPunto['ID_DOCUMENTO']:"";
                     $arrayFacturaPunto['numero_factura_sri']    = $rowFacturasPunto['NUMERO_FACTURA_SRI']?
                                                                   $rowFacturasPunto['NUMERO_FACTURA_SRI']:"";
                     $arrayFacturaPunto['valor_total']           = $rowFacturasPunto['VALOR_TOTAL']?
                                                                   $rowFacturasPunto['VALOR_TOTAL']:"";
                     $arrayFacturaPunto['estado_impresion_fact'] = $rowFacturasPunto['ESTADO_IMPRESION_FACT']?
                                                                   $rowFacturasPunto['ESTADO_IMPRESION_FACT']:"";
                     $arrayFacturaPunto ['fe_emision']           = $rowFacturasPunto['FE_EMISION']?
                                                                   $rowFacturasPunto['FE_EMISION']:"";
                     
                     
                     $strStatus                                  = '';
                     $strMensaje                                 = '';
                     $arrayFacturaPunto ['descripcion_producto'] = '';
                
                     //definicion del procedure a ejecutar
                     $strSql  = 'BEGIN FNCK_FACTURACION.P_DESCRI_PRODUCTOS_X_FACTURA(:Pn_IdDocumento,
                                                                                      :Prf_Result,
                                                                                      :Pv_Status,
                                                                                      :Pv_Mensaje); END;';
                     
                     
                     $strStmt                   = oci_parse($arrayOciConFin,$strSql);
                     $arrayCursorDescriFacturas = oci_new_cursor($arrayOciConFin); 
                
                     oci_bind_by_name($strStmt,':Pn_IdDocumento'  ,$arrayFacturaPunto['id_documento']);
                     oci_bind_by_name($strStmt,':Prf_Result'      ,$arrayCursorDescriFacturas,-1,OCI_B_CURSOR);
                     oci_bind_by_name($strStmt,':Pv_Status'       ,$strStatus,10);
                     oci_bind_by_name($strStmt,':Pv_Mensaje'      ,$strMensaje,2000);

                     oci_execute($strStmt);
                     oci_execute($arrayCursorDescriFacturas, OCI_DEFAULT); 
                
                     if ($strStatus == "ERROR")
                     {
                        throw new \Exception("BEGIN FNCK.P_DESCRI_PRODUCTOS_X_FACTURA: ".$strMensaje);
                     }
                     
                     while($strDescriFacturas = oci_fetch_array($arrayCursorDescriFacturas))
                     {
                         
                         $arrayFacturaPunto ['descripcion_producto'] = $strDescriFacturas['DESCRIPCION_PRODUCTO']?
                                                                       $strDescriFacturas['DESCRIPCION_PRODUCTO']:"";
                         
                     }
                     
                     $arrayInformacionPunto['facturas'][]        = $arrayFacturaPunto ;
                    
                }
                
                
                $strSql  = 'BEGIN FNCK_FACTURACION.P_WS_ULTIMOS_PAGOS_X_PUNTO(:Pn_IdPunto,
                                                                      :Pn_CantidadDocs,
                                                                      :Prf_Result,
                                                                      :Pv_Status,
                                                                      :Pv_Mensaje); END;';
                //Cantidad de pagos a devolver
                $intCant = 5;
                $strStmt = oci_parse($arrayOciConFin,$strSql);
                $arrayCursorPagosPunto = oci_new_cursor($arrayOciConFin);
                
                oci_bind_by_name($strStmt,':Pn_IdPunto'       ,$rowPuntos['ID_PUNTO']);
                oci_bind_by_name($strStmt,':Pn_CantidadDocs' ,$intCant);
                oci_bind_by_name($strStmt,':Prf_Result'      ,$arrayCursorPagosPunto,-1,OCI_B_CURSOR);
                oci_bind_by_name($strStmt,':Pv_Status'       ,$strStatus,10);
                oci_bind_by_name($strStmt,':Pv_Mensaje'      ,$strMensaje,2000);

                oci_execute($strStmt);
                oci_execute($arrayCursorPagosPunto, OCI_DEFAULT);
                
                if ($strStatus == "ERROR")
                {
                    throw new \Exception("FNCK_FACTURACION.P_WS_ULTIMOS_PAGOS_X_PUNTO: ".$strMensaje);
                }
                //recorrer el cursor para obtener los datos de pagos pertenecientes a un punto
                while($rowPagosPunto = oci_fetch_array($arrayCursorPagosPunto))
                {  
                    $arrayPagosPunto                  = '';
                    $arrayPagosPunto['numero_pago']   = $rowPagosPunto['NUMERO_PAGO']?
                                                        $rowPagosPunto['NUMERO_PAGO']:"";
                    $arrayPagosPunto['valor_total']   = $rowPagosPunto['VALOR_TOTAL']?
                                                        $rowPagosPunto['VALOR_TOTAL']:"";
                    $arrayPagosPunto['estado_pago']   = $rowPagosPunto['ESTADO_PAGO']?
                                                        $rowPagosPunto['ESTADO_PAGO']:"";
                    $arrayPagosPunto ['fe_creacion']  = $rowPagosPunto['FE_CREACION']?
                                                        $rowPagosPunto['FE_CREACION']:"";
                    $arrayInformacionPunto['pagos'][] = $arrayPagosPunto ;
                }
                
                               
                $strStatus  = '';
                $strMensaje = '';
 
                $strSql  = 'BEGIN FNCK_FACTURACION.P_WS_FECHA_FIRMA_CONTRATO(:Pn_IdPunto,
                                                                             :Prf_Result,
                                                                             :Pv_Status,
                                                                             :Pv_Mensaje); END;';
                
                $strStmt = oci_parse($arrayOciConFin,$strSql);
                $arrayCursorFechaAct = oci_new_cursor($arrayOciConFin);
                
                oci_bind_by_name($strStmt,':Pn_IdPunto' ,$rowPuntos['ID_PUNTO']);
                oci_bind_by_name($strStmt,':Prf_Result' ,$arrayCursorFechaAct,-1,OCI_B_CURSOR);
                oci_bind_by_name($strStmt,':Pv_Status'  ,$strStatus,10);
                oci_bind_by_name($strStmt,':Pv_Mensaje' ,$strMensaje,2000);

                oci_execute($strStmt);
                oci_execute($arrayCursorFechaAct, OCI_DEFAULT);
                
                if ($strStatus == "ERROR")
                {
                    throw new \Exception("FNCK_FACTURACION.P_WS_FECHA_FIRMA_CONTRATO: ".$strMensaje);
                }
                
                while($rowFechaAct = oci_fetch_array($arrayCursorFechaAct))
                {  
                   
                    $arrayInformacionPunto['fecha_activacion'] = $rowFechaAct['FECHA_ACTIVACION']?
                                                                 $rowFechaAct['FECHA_ACTIVACION']:"";
                    
                }
                
                
                $strStatus  = '';
                $strMensaje = '';
 
                $strSql  = 'BEGIN FNCK_FACTURACION.P_WS_TIPO_NEGOCIO_X_PUNTO(:Pn_IdPunto,
                                                                      :Prf_Result,
                                                                      :Pv_Status,
                                                                      :Pv_Mensaje); END;';
                
                $strStmt = oci_parse($arrayOciConFin,$strSql);
                $arrayCursorTipoNegocio = oci_new_cursor($arrayOciConFin);
                oci_bind_by_name($strStmt,':Pn_IdPunto' ,$rowPuntos['ID_PUNTO']);
                oci_bind_by_name($strStmt,':Prf_Result' ,$arrayCursorTipoNegocio,-1,OCI_B_CURSOR);
                oci_bind_by_name($strStmt,':Pv_Status'  ,$strStatus,10);
                oci_bind_by_name($strStmt,':Pv_Mensaje' ,$strMensaje,2000);

                oci_execute($strStmt);
                oci_execute($arrayCursorTipoNegocio, OCI_DEFAULT);
                
                if ($strStatus == "ERROR")
                {
                    throw new \Exception("FNCK_FACTURACION.P_WS_TIPO_NEGOCIO_X_PUNTO: ".$strMensaje);
                }
                //recorrer el cursor para obtener tipo de negocio perteneciente al punto
                while($rowTipoNegocio = oci_fetch_array($arrayCursorTipoNegocio))
                {  
                   
                    $arrayInformacionPunto['tipo_negocio'] = $rowTipoNegocio['NOMBRE_TIPO_NEGOCIO']?
                                                             $rowTipoNegocio['NOMBRE_TIPO_NEGOCIO']:"";
                   
                }
                
                //definicion del procedure a ejecutar
                $sql  = 'BEGIN TECNK_SERVICIOS.P_WS_GET_SERVICIOS_PTO_CLIENTE(:Pn_IdPuntoCliente,
                                                                              :Prf_Result,
                                                                              :Pv_Status,
                                                                              :Pv_Mensaje); END;';

                $stmt                  = oci_parse($rscCon,$sql);
                $cursorResultServicios = oci_new_cursor($rscCon); 
                oci_bind_by_name($stmt,':Pn_IdPuntoCliente',$rowPuntos['ID_PUNTO']);
                oci_bind_by_name($stmt,':Prf_Result'       ,$cursorResultServicios,-1,OCI_B_CURSOR);
                oci_bind_by_name($stmt,':Pv_Status'        ,$strStatus,10);
                oci_bind_by_name($stmt,':Pv_Mensaje'       ,$strMensaje,2000);


                oci_execute($stmt);
                oci_execute($cursorResultServicios, OCI_DEFAULT);
                
                if ($strStatus == "ERROR")
                {
                    throw new \Exception("TECNK_SERVICIOS.P_WS_GET_SERVICIOS_PTO_CLIENTE: ".$strMensaje);
                }
                
                /*
                 * findByCaracteristicas
                 * 
                 * Se le agrega un nuevo nivel a servicios, donde si un servicio sin plan posee caracteristicas
                 * se les agrega su nivel de caracteristicas, con nombre y valor.
                 * 
                 * getCaracteristicasPlan
                 * 
                 * Se le agrega un nuevo nivel a servicios, donde si un servicio con plan posee caracteristicas
                 * se les agrega su nivel de caracteristicas, con nombre y valor.
                 * 
                 * @author Macjhony Vargas <mmvargas@telconet.ec>
                 * @version 1.0
                 * @since 14-10-2019
                 * 
                 */
                //recorrer el cursor para obtener los datos de servicios pertenecientes a un punto
                                
                $strDataTecnicaGeneral="false";
                while($rowServicios = oci_fetch_array($cursorResultServicios))
                {
       
                    $intIdServicio     = $rowServicios['ID_SERVICIO'];
                    $intIdPlan         = $rowServicios['ID_PLAN'];
                    $intIdProducto     = $rowServicios['ID_PRODUCTO'];

                    $objServicioTecnico = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')
                                                        ->findOneBy(array("servicioId"=>$intIdServicio));
                    $objProducto     = null;
                    if(!empty($intIdProducto))
                    {
                        $objProducto = $this->_em->getRepository('schemaBundle:AdmiProducto')->find($intIdProducto);
                    }
                    $strTipoRed      = "";
                    $objCaracTipoRed = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                                         ->findOneBy(array("descripcionCaracteristica" => "TIPO_RED",
                                                                           "estado"                    => "Activo"));
                    if(is_object($objCaracTipoRed) && is_object($objProducto) && !empty($intIdServicio))
                    {
                        $objProCaractTipoRed = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                               ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                                 "caracteristicaId" => $objCaracTipoRed->getId(),
                                                                                 "estado"           => "Activo"));

                        if(is_object($objProCaractTipoRed))
                        {
                            $objSerProdCaractTipRed = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                ->findOneBy(array("servicioId"                => $intIdServicio,
                                                                                  "productoCaracterisiticaId" => $objProCaractTipoRed,
                                                                                  "estado"                    => "Activo"));
                            if(is_object($objSerProdCaractTipRed))
                            {
                                $strTipoRed = $objSerProdCaractTipRed->getValor();
                            }
                        }
                    }
                    //se verifica si el servicio es tipo de red GPON
                    $booleanTipoRedGpon = false;
                    if(!empty($strTipoRed))
                    {
                        $arrayParVerTipoRed = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                                'COMERCIAL',
                                                                                                                '',
                                                                                                                'VERIFICAR TIPO RED',
                                                                                                                'VERIFICAR_GPON',
                                                                                                                $strTipoRed,
                                                                                                                '',
                                                                                                                '',
                                                                                                                '');
                        if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                        {
                            $booleanTipoRedGpon = true;
                        }
                    }
                    //verificar si es producto TN MPLS
                    if( is_object($objProducto) && !$booleanTipoRedGpon &&
                       ( $objProducto->getNombreTecnico() === "L3MPLS" || $objProducto->getNombreTecnico() === "INTMPLS"
                         || ($objProducto->getNombreTecnico() === "INTERNET" && $objProducto->getGrupo() === "INTERNET Y DATOS") ))
                    {
                        continue;
                    }

                    if(is_object($objProducto) && $booleanTipoRedGpon && ($objProducto->getNombreTecnico() === "SAFECITYSWPOE"))
                    {
                        continue;
                    }

                    if($intIdPlan == null || $intIdPlan == "")
                    {
                        $arrayCaracteristicas = $this->findByCaracteristicas($intIdServicio);
                        
                    }
                    elseif($intIdPlan)
                    {
                        $arrayCaracteristicas = $this->getCaracteristicasPlan($intIdPlan, $intIdProducto);
                    }
                    else
                    {
                        $arrayCaracteristicas['status']  = 'ERROR';
                        $arrayCaracteristicas['mensaje'] = "No se obtuvieron las caracteristicas.";
                    }
                    
                    $arrayInformacionServicio                    = '';
                    $arrayInformacionServicio['id_servicio']     = $rowServicios['ID_SERVICIO']?
                                                                   $rowServicios['ID_SERVICIO']:"";
                    $arrayInformacionServicio['codigo_producto'] = $rowServicios['CODIGO_PRODUCTO']?
                                                                   $rowServicios['CODIGO_PRODUCTO']:"";
                    
                    //se agrega codigo plan al servicio de internet dedicado.
                    if($rowServicios['DESCRIPCION_PRODUCTO'] == "INTERNET DEDICADO")
                    {
                        $arrayInformacionServicio['cod_plan'] = $rowServicios['CODIGO_PLAN']?$rowServicios['CODIGO_PLAN']:"";
                        
                    }
                    
                    $arrayInformacionServicio['producto']        = $rowServicios['DESCRIPCION_PRODUCTO']?
                                                                   $rowServicios['DESCRIPCION_PRODUCTO']:"";
                    $arrayInformacionServicio['ultima_milla']    = $rowServicios['NOMBRE_TIPO_MEDIO']?
                                                                   $rowServicios['NOMBRE_TIPO_MEDIO']:"";
                    $arrayInformacionServicio['id_plan']         = $rowServicios['ID_PLAN']?$rowServicios['ID_PLAN']:"";
                    $arrayInformacionServicio['plan']            = $rowServicios['NOMBRE_PLAN']?$rowServicios['NOMBRE_PLAN']:"";
                    $arrayInformacionServicio['caracteristicas'] = array($arrayCaracteristicas);
                    $arrayInformacionServicio['estado']          = $rowServicios['ESTADO']?$rowServicios['ESTADO']:"";
                    $arrayInformacionServicio['login_aux']       = $rowServicios['LOGIN_AUX']?$rowServicios['LOGIN_AUX']:"";
                    $arrayInformacionServicio['valor']           = $rowServicios['PRECIO']?$rowServicios['PRECIO']:"";
                    
                    if($arrayParametros['strEmpresaCod'] == '10')
                    {
                        $arrayInformacionServicio['ip_dispositivo_auxiliar']  = $rowServicios['IP_SERVICIO']?$rowServicios['IP_SERVICIO']:"";
                        $arrayInformacionServicio['mac_dispositivo_auxiliar'] = $rowServicios['MAC_SERVICIO']?$rowServicios['MAC_SERVICIO']:"";
                        $arrayInformacionServicio['tipo_enrutamiento']        = '';
                        $arrayInformacionServicio['servicio']                 = $rowServicios['SERVICIO']?$rowServicios['SERVICIO']:'';
                    }
                    if($booleanTipoRedGpon)
                    {   
                        
                        $arrayInformacionPuntos['tipo_negocio_actual']        = "CORPORATIVO";
                        $arrayInformacionServicio['servicio']                 = $rowServicios['SERVICIO']?$rowServicios['SERVICIO']:$strTipoRed;

                        //verificar tipo enrutamiento
                        if( is_object($objProducto) && ($objProducto->getNombreTecnico() === "INTMPLS"
                            || $objProducto->getNombreTecnico() === "INTERNET" || $objProducto->getNombreTecnico() === "L3MPLS")
                            && ( $rowServicios['ESTADO']=='Activo' || $rowServicios['ESTADO']=='In-Corte') )
                        {
                            $objCaractPro = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                                                 ->findOneBy(array('descripcionCaracteristica' => "PROTOCOLO_ENRUTAMIENTO",
                                                                                   'estado'                    => 'Activo'));
                            if(is_object($objCaractPro))
                            {
                                $objProdCaractPro = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                    ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                                      "caracteristicaId" => $objCaractPro->getId(),
                                                                                      "estado"           => "Activo"));
                                if(is_object($objProdCaractPro))
                                {
                                    $objServProdCaractPro = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                    ->findOneBy(array('productoCaracterisiticaId' => $objProdCaractPro->getId(),
                                                                                      'servicioId'                => $intIdServicio,
                                                                                      'estado'                    => "Activo"));
                                    if(is_object($objServProdCaractPro))
                                    {
                                        $arrayParVerTipoEnrutamiento = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                                                ->getOne('NUEVA_RED_GPON_TN',
                                                                                        'COMERCIAL',
                                                                                        '',
                                                                                        'VERIFICAR TIPO ENRUTAMIENTO',
                                                                                        'VERIFICAR_TIPO_ENRUTAMIENTO',
                                                                                        $objServProdCaractPro->getValor(),
                                                                                        '',
                                                                                        '',
                                                                                        '');
                                    }
                                    else
                                    {
                                        $arrayParVerTipoEnrutamiento = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                                                ->getOne('NUEVA_RED_GPON_TN',
                                                                                        'COMERCIAL',
                                                                                        '',
                                                                                        'VERIFICAR TIPO ENRUTAMIENTO',
                                                                                        'VERIFICAR_TIPO_ENRUTAMIENTO',
                                                                                        '',
                                                                                        '',
                                                                                        'DEFAULT',
                                                                                        '');
                                    }
                                    //verificar tipo enrutamiento
                                    if(isset($arrayParVerTipoEnrutamiento) && isset($arrayParVerTipoEnrutamiento['valor3'])
                                       && !empty($arrayParVerTipoEnrutamiento['valor3']))
                                    {
                                        $arrayInformacionServicio['tipo_enrutamiento'] = $arrayParVerTipoEnrutamiento['valor3'];
                                    }
                                }
                            }
                        }
                    }
                    // Se verifica que los servicios tenga producto konibit
                    $strCaracteristicaProducto = 'KONIBIT';
                    $strRespuesta =  str_pad(' ', 20);
                    $strSql = "BEGIN :Lv_konibit:= 
                               DB_INFRAESTRUCTURA.INFRKG_KONIBIT.F_SERVICIO_CARACTERISTICA(:Fn_IdServicioInt,"
                               .":Fv_Caracteristica); END;";
                    
                    $objStmt = $this->_em->getConnection()->prepare($strSql);
                    
                    $objStmt->bindParam('Fn_IdServicioInt',  $rowServicios['ID_SERVICIO']);
                    $objStmt->bindParam('Fv_Caracteristica', $strCaracteristicaProducto);
                    $objStmt->bindParam('Lv_konibit',        $strRespuesta);
                    $objStmt->execute();
                    
                    
                    if($strRespuesta == "True")
                    {
                        $strKonibit = "SI";
                    }

                    //se valida el servicio de Internet Dedicado para recuperar información técnica
                    if (($rowServicios['DESCRIPCION_PRODUCTO'] == "INTERNET DEDICADO" || 
                        $rowServicios['NOMBRE_TECNICO']       == "INTERNET SMALL BUSINESS" ||
                        $rowServicios['NOMBRE_TECNICO']       == "TELCOHOME" || $booleanTipoRedGpon))
                    {
                        $strStatus  = '';
                        $strMensaje = '';
                        
                        //definicion del procedure a ejecutar
                        $sql  = 'BEGIN TECNK_SERVICIOS.P_WS_GET_INF_SERVICIO_INTERNET(:Pn_IdServicioInternet,
                                                                                      :Prf_Result,
                                                                                      :Pv_Status,
                                                                                      :Pv_Mensaje); END;';

                        $stmt                    = oci_parse($rscCon,$sql);
                        $cursorResultServicioInt = oci_new_cursor($rscCon); 
                        oci_bind_by_name($stmt,':Pn_IdServicioInternet',$rowServicios['ID_SERVICIO']);
                        oci_bind_by_name($stmt,':Prf_Result'           ,$cursorResultServicioInt,-1,OCI_B_CURSOR);
                        oci_bind_by_name($stmt,':Pv_Status'            ,$strStatus,10);
                        oci_bind_by_name($stmt,':Pv_Mensaje'           ,$strMensaje,2000);


                        oci_execute($stmt);
                        oci_execute($cursorResultServicioInt, OCI_DEFAULT);
                        
                        if ($strStatus == "ERROR")
                        {
                            throw new \Exception("TECNK_SERVICIOS.P_WS_GET_INF_SERVICIO_INTERNET: ".$strMensaje);
                        }
                        
                      if(($rowServicios['ESTADO']=='Activo' || $rowServicios['ESTADO']=='In-Corte'))
                      {
                        // Ubicamos bandera que solo muestre datos si promocion necesita
                        $strPresentaProfile = 'NO';
                        $arrayParamProfile = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne('PROMOCION ANCHO BANDA', 'COMERCIAL','PROMO_ANCHO_BANDA',
                                                            'Bandera para presentar datos de lineprofile',
                                                            'PROM_BW','','','','',
                                                            $arrayParametros['strEmpresaCod']);

                        if(isset($arrayParamProfile["valor1"]) && !empty($arrayParamProfile["valor1"]))
                        {
                            $strPresentaProfile = $arrayParamProfile["valor2"];
                        }
                        $strDataTecnicaGeneral="true";
                        //seteo vrf del servicio
                        $strVrfServicio = "";
                        $strVrfAdminServicio  = "";
                        $strVlanAdminServicio = "";
                        $strVlanSsidServicio  = "";
                        //recorrer el cursor para obtener los datos técnicos del servicio de Internet Dedicado de un punto
                        while($rowServicioInternet = oci_fetch_array($cursorResultServicioInt))
                        {
                            $strTieneServicioInternet                                             = "SI";
                            $arrayInformacionPunto['data_tecnica']                                = '';
                            $arrayInformacionPunto['data_tecnica']['elemento']                    = 
                            $rowServicioInternet['ELEMENTO']? 
                            $rowServicioInternet['ELEMENTO']:"";
                            $arrayInformacionPunto['data_tecnica']['ip_elemento']                 = 
                            $rowServicioInternet['IP_ELEMENTO']?
                            $rowServicioInternet['IP_ELEMENTO']:"";
                            $arrayInformacionPunto['data_tecnica']['modelo_elemento']             = 
                            $rowServicioInternet['MODELO_ELEMENTO']?
                            $rowServicioInternet['MODELO_ELEMENTO']:"";
                            $arrayInformacionPunto['data_tecnica']['marca_elemento']              = 
                            $rowServicioInternet['MARCA_ELEMENTO']?
                            $rowServicioInternet['MARCA_ELEMENTO']:"";
                            $arrayInformacionPunto['data_tecnica']['interface_elemento']          = 
                            $rowServicioInternet['INTERFACE_ELEMENTO']?
                            $rowServicioInternet['INTERFACE_ELEMENTO']:"";
                            $arrayInformacionPunto['data_tecnica']['elemento_contenedor']         = 
                            $rowServicioInternet['ELEMENTO_CONTENEDOR']?
                            $rowServicioInternet['ELEMENTO_CONTENEDOR']:"";
                            $arrayInformacionPunto['data_tecnica']['elemento_conector']           = 
                            $rowServicioInternet['ELEMENTO_CONECTOR']?
                            $rowServicioInternet['ELEMENTO_CONECTOR']:"";
                            $arrayInformacionPunto['data_tecnica']['interface_elemento_conector'] = 
                            $rowServicioInternet['INTERFACE_ELEMENTO_CONECTOR'];
                            $arrayInformacionPunto['data_tecnica']['indice_cliente']              = 
                            $rowServicioInternet['INDICE_CLIENTE']." "?
                            $rowServicioInternet['INDICE_CLIENTE']:"";
                            $strLineProfilePerfil = $rowServicioInternet['PERFIL']?
                            $rowServicioInternet['PERFIL']:"";
                            $arrayInformacionPunto['data_tecnica']['line_profile']                = 
                            $rowServicioInternet['LINE_PROFILE']?
                            $rowServicioInternet['LINE_PROFILE']:$strLineProfilePerfil;
                            $arrayInformacionPunto['data_tecnica']['service_port']                = 
                            $rowServicioInternet['SERVICE_PORT']." "?
                            $rowServicioInternet['SERVICE_PORT']:"";                            
                            $arrayInformacionPunto['data_tecnica']['gemport']                     = 
                            $rowServicioInternet['GEMPORT']?
                            $rowServicioInternet['GEMPORT']:"";
                            $arrayInformacionPunto['data_tecnica']['traffic_table']               = 
                            $rowServicioInternet['TRAFFIC_TABLE']?
                            $rowServicioInternet['TRAFFIC_TABLE']:"";
                            $strLineProfilePerfilPromo = $rowServicioInternet['PERFIL_PROMO']?
                            $rowServicioInternet['PERFIL_PROMO']:"";
                            if ($strPresentaProfile == 'SI')
                            {
                                $arrayInformacionPunto['data_tecnica']['line_profile_promo'] = "";
                                $arrayInformacionPunto['data_tecnica']['gemport_promo'] = "";
                                $arrayInformacionPunto['data_tecnica']['traffic_table_promo'] = "";
                            }
                            else
                            {
                                $arrayInformacionPunto['data_tecnica']['line_profile_promo']                = 
                                $rowServicioInternet['LINE_PROFILE_PROMO']?
                                $rowServicioInternet['LINE_PROFILE_PROMO']:$strLineProfilePerfilPromo;
                                $arrayInformacionPunto['data_tecnica']['gemport_promo']                     = 
                                $rowServicioInternet['GEMPORT_PROMO']?
                                $rowServicioInternet['GEMPORT_PROMO']:"";
                                $arrayInformacionPunto['data_tecnica']['traffic_table_promo']               = 
                                $rowServicioInternet['TRAFFIC_TABLE_PROMO']?
                                $rowServicioInternet['TRAFFIC_TABLE_PROMO']:"";
                            }
                            //verificar producto
                            if(!empty($rowServicioInternet['VLAN']) && is_object($objProducto) && $booleanTipoRedGpon)
                            {
                                if($objProducto->getNombreTecnico() === "L3MPLS")
                                {
                                    $objServProdCaractVlan  = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                                            ->find($rowServicioInternet['VLAN']);
                                    if(is_object($objServProdCaractVlan))
                                    {
                                        $rowServicioInternet['VLAN'] = $objServProdCaractVlan->getValor();
                                    }
                                }
                                $objDetalleVlanServicio = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                            ->find($rowServicioInternet['VLAN']);
                                if(is_object($objDetalleVlanServicio))
                                {
                                    $rowServicioInternet['VLAN'] = $objDetalleVlanServicio->getDetalleValor();
                                }
                            }
                            $arrayInformacionPunto['data_tecnica']['vlan']                        = 
                            $rowServicioInternet['VLAN']?
                            $rowServicioInternet['VLAN']:"";
                            //obtengo los datos del ont para servicios GPON
                            if( $booleanTipoRedGpon && is_object($objServicioTecnico) && is_object($objProducto) &&
                                ($objProducto->getNombreTecnico() === "INTMPLS" || $objProducto->getNombreTecnico() === "INTERNET"
                                || $objProducto->getNombreTecnico() === "SAFECITYDATOS" || $objProducto->getNombreTecnico() === "L3MPLS"
                                || $objProducto->getNombreTecnico() === "SAFECITYWIFI")
                                && is_object($arrayParametros['emInfraestructura']) )
                            {
                                //obtener ont
                                $arrayElementoOnt = $arrayParametros['emInfraestructura']->getRepository('schemaBundle:InfoElemento')
                                                        ->getElementoPadre($objServicioTecnico->getElementoClienteId(),'ELEMENTO','CPE ONT');
                                if(isset($arrayElementoOnt) && !empty($arrayElementoOnt))
                                {
                                    $objElementoOnt = $this->_em->getRepository('schemaBundle:InfoElemento')
                                                                   ->find($arrayElementoOnt[0]['IDELEMENTO']);
                                    if(is_object($objElementoOnt))
                                    {
                                        $objModeloElementoOnt = $objElementoOnt->getModeloElementoId();
                                        $rowServicioInternet['SERIE_ONT']  = $objElementoOnt->getSerieFisica();
                                        $rowServicioInternet['MODELO_ONT'] = $objModeloElementoOnt->getNombreModeloElemento();
                                        $rowServicioInternet['MARCA_ONT'] = $objModeloElementoOnt->getMarcaElementoId()->getNombreMarcaElemento();
                                    }
                                }
                                //obtener vrf
                                $strTipoCaractVrf = "VRF";
                                if($objProducto->getNombreTecnico() === "SAFECITYWIFI")
                                {
                                    $strTipoCaractVrf = "VRF SSID";
                                }
                                $objCaractVrf = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                                                     ->findOneBy(array('descripcionCaracteristica' => $strTipoCaractVrf,
                                                                                       'estado'                    => 'Activo'));
                                if(is_object($objCaractVrf))
                                {
                                    $objProdCaractVrf = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                        ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                                          "caracteristicaId" => $objCaractVrf->getId(),
                                                                                          "estado"           => "Activo"));
                                    if(is_object($objProdCaractVrf))
                                    {
                                        $objServProdCaractVrf = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                        ->findOneBy(array('productoCaracterisiticaId' => $objProdCaractVrf->getId(),
                                                                                          'servicioId'                => $intIdServicio,
                                                                                          'estado'                    => "Activo"));
                                        if(is_object($objServProdCaractVrf))
                                        {
                                            $objPersonaEmpresaRolCaracVrf  = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                                                        ->find($objServProdCaractVrf->getValor());
                                            if(is_object($objPersonaEmpresaRolCaracVrf))
                                            {
                                                $strVrfServicio = $objPersonaEmpresaRolCaracVrf->getValor();
                                            }
                                        }
                                    }
                                }
                                //obtener vrf y vlan admin
                                if($objProducto->getNombreTecnico() === "SAFECITYWIFI")
                                {
                                    $objCaractVrf = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                                                     ->findOneBy(array('descripcionCaracteristica' => "VRF ADMIN",
                                                                                       'estado'                    => 'Activo'));
                                    if(is_object($objCaractVrf))
                                    {
                                        $objProdCaractVrf = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                            ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                                              "caracteristicaId" => $objCaractVrf->getId(),
                                                                                              "estado"           => "Activo"));
                                        if(is_object($objProdCaractVrf))
                                        {
                                            $objServProdCaractVrf = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                ->findOneBy(array('productoCaracterisiticaId' => $objProdCaractVrf->getId(),
                                                                                  'servicioId'                => $intIdServicio,
                                                                                  'estado'                    => "Activo"));
                                            if(is_object($objServProdCaractVrf))
                                            {
                                                $objPersonaEmpresaRolCaracVrf  = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                                                            ->find($objServProdCaractVrf->getValor());
                                                if(is_object($objPersonaEmpresaRolCaracVrf))
                                                {
                                                    $strVrfAdminServicio = $objPersonaEmpresaRolCaracVrf->getValor();
                                                }
                                            }
                                        }
                                    }
                                    //obtengo vlan ssid
                                    $objCaractVlan = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                                                     ->findOneBy(array('descripcionCaracteristica' => "VLAN SSID",
                                                                                       'estado'                    => 'Activo'));
                                    if(is_object($objCaractVlan))
                                    {
                                        $objProdCaractVlan = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                            ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                                              "caracteristicaId" => $objCaractVlan->getId(),
                                                                                              "estado"           => "Activo"));
                                        if(is_object($objProdCaractVlan))
                                        {
                                            $objServProdCaractVlan = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                    ->findOneBy(array('productoCaracterisiticaId' => $objProdCaractVlan->getId(),
                                                                                      'servicioId'                => $intIdServicio,
                                                                                      'estado'                    => "Activo"));
                                            if(is_object($objServProdCaractVlan))
                                            {
                                                $objDetalleVlanServicio  = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                                    ->find($objServProdCaractVlan->getValor());
                                                if(is_object($objDetalleVlanServicio))
                                                {
                                                    $strVlanSsidServicio = $objDetalleVlanServicio->getDetalleValor();
                                                }
                                            }
                                        }
                                    }
                                    //obtengo vlan admin
                                    $objCaractVlan = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                                                     ->findOneBy(array('descripcionCaracteristica' => "VLAN ADMIN",
                                                                                       'estado'                    => 'Activo'));
                                    if(is_object($objCaractVlan))
                                    {
                                        $objProdCaractVlan = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                            ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                                              "caracteristicaId" => $objCaractVlan->getId(),
                                                                                              "estado"           => "Activo"));
                                        if(is_object($objProdCaractVlan))
                                        {
                                            $objServProdCaractVlan = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                    ->findOneBy(array('productoCaracterisiticaId' => $objProdCaractVlan->getId(),
                                                                                      'servicioId'                => $intIdServicio,
                                                                                      'estado'                    => "Activo"));
                                            if(is_object($objServProdCaractVlan))
                                            {
                                                $objDetalleVlanServicio  = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                                    ->find($objServProdCaractVlan->getValor());
                                                if(is_object($objDetalleVlanServicio))
                                                {
                                                    $strVlanAdminServicio = $objDetalleVlanServicio->getDetalleValor();
                                                }
                                            }
                                        }
                                    }

                                    //obtengo Ip Controladora
                                    $objCaractControladora = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                                                     ->findOneBy(array('descripcionCaracteristica' => "IP CONTROLADORA",
                                                                                       'estado'                    => 'Activo'));

                                    if(is_object($objCaractControladora))
                                    {
                                        $objProdCaractIpC = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                            ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                                                "caracteristicaId" => $objCaractControladora->getId(),
                                                                                                "estado"           => "Activo"));
                                        if(is_object($objProdCaractIpC))
                                        {
                                            $objServProdCaractControladora = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                    ->findOneBy(array('productoCaracterisiticaId' => $objProdCaractIpC->getId(),
                                                                                        'servicioId'              => $intIdServicio,
                                                                                        'estado'                  => "Activo"));

                                            if(is_object($objServProdCaractControladora))
                                            {
                                                $strIpControladora = $objServProdCaractControladora->getValor();
                                            }
                                        }
                                    }
                                }
                            }
                            $arrayInformacionPunto['data_tecnica']['serial_ont']                  = 
                            $rowServicioInternet['SERIE_ONT']?
                            $rowServicioInternet['SERIE_ONT']:"";
                            $arrayInformacionPunto['data_tecnica']['mac_ont']                     = 
                            $rowServicioInternet['MAC_ONT']?
                            $rowServicioInternet['MAC_ONT']:"";
                            $arrayInformacionPunto['data_tecnica']['modelo_ont']                  = 
                            $rowServicioInternet['MODELO_ONT']?
                            $rowServicioInternet['MODELO_ONT']:"";
                            $arrayInformacionPunto['data_tecnica']['marca_ont']                   = 
                            $rowServicioInternet['MARCA_ONT']?
                            $rowServicioInternet['MARCA_ONT']:"";
                            $arrayInformacionPunto['data_tecnica']['tipo_aprovisionamiento']      = 
                            $rowServicioInternet['APROVISIONAMIENTO']?
                            $rowServicioInternet['APROVISIONAMIENTO']:"";
                            $arrayInformacionPunto['data_tecnica']['ipv4']                        = 
                            $rowServicioInternet['IPV4']?
                            $rowServicioInternet['IPV4']:"";
                        }
                        //se verifica si es GPON
                        if($booleanTipoRedGpon && $strValidarEsquemaGpon == "ESQUEMA_1")
                        {
                            $arrayDataEsquemaUno =  array(
                                "service_port" => $arrayInformacionPunto['data_tecnica']['service_port'],
                                "gemport" => $arrayInformacionPunto['data_tecnica']['gemport'],
                                "traffic_table" => $arrayInformacionPunto['data_tecnica']['traffic_table'],
                                "line_profile_promo" => $arrayInformacionPunto['data_tecnica']['line_profile_promo'],
                                "gemport_promo" => $arrayInformacionPunto['data_tecnica']['gemport_promo'],
                                "traffic_table_promo" => $arrayInformacionPunto['data_tecnica']['traffic_table_promo'],
                                "vlan" => $arrayInformacionPunto['data_tecnica']['vlan'],
                                "vrf" => $strVrfServicio,
                                "bgp" => ""
                            );
                            if($objProducto->getNombreTecnico() === 'SAFECITYDATOS')
                            {
                                $arrayInformacionPuntoCamara    = $arrayDataEsquemaUno;
                            }
                            elseif($objProducto->getNombreTecnico() === "L3MPLS")
                            {
                                $arrayInformacionPuntoDatos     = $arrayDataEsquemaUno;
                            }
                            elseif($objProducto->getNombreTecnico() === 'SAFECITYWIFI')
                            {
                                $arrayDataEsquemaUno['vlan']           = $strVlanSsidServicio;
                                $arrayDataEsquemaUno['vrfAdmin']       = $strVrfAdminServicio;
                                $arrayDataEsquemaUno['vlanAdmin']      = $strVlanAdminServicio;
                                $arrayDataEsquemaUno['ipControladora'] = $strIpControladora;
                                $arrayInformacionPuntoWifi             = $arrayDataEsquemaUno;
                            }
                            elseif($objProducto->getNombreTecnico() === 'DATOS SAFECITY')
                            {
                                //seteo data tecnica dato gpon
                                $strGemportDatosGpon      = $arrayInformacionPunto['data_tecnica']['gemport'];
                                $strTrafficTableDatosGpon = $arrayInformacionPunto['data_tecnica']['traffic_table'];
                                $strServicePortDatosGpon  = $arrayInformacionPunto['data_tecnica']['service_port'];
                                $strVlanDatosGpon         = $arrayInformacionPunto['data_tecnica']['vlan'];
                            }
                            else
                            {
                                $arrayInformacionPuntoInternet  = $arrayDataEsquemaUno;
                            }
                        }
                        elseif($booleanTipoRedGpon && $strValidarEsquemaGpon == "ESQUEMA_2")
                        {
                            $arrayInformacionServicio['data_tecnica'] = $arrayInformacionPunto['data_tecnica'];
                        }
                      }
                      elseif ($strDataTecnicaGeneral=="false") 
                      {
                          $strTieneServicioInternet                           = "SI";
                          $arrayInformacionPunto['data_tecnica']              = "";
                      }
                      
                    }
                    $arrayInformacionPunto['servicios'][] = $arrayInformacionServicio;
                }

                if( $strValidarEsquemaGpon == "ESQUEMA_1" && ( !empty($arrayInformacionPuntoDatos) || !empty($arrayInformacionPuntoInternet)
                     || !empty($arrayInformacionPuntoCamara) || !empty($arrayInformacionPuntoWifi) ) )
                {
                    $arrayInformacionPunto['data_tecnica']['data_tecnica_Servicio'][0]['data_tecnica_Servicio_Datos']    =
                            $arrayInformacionPuntoDatos;
                    $arrayInformacionPunto['data_tecnica']['data_tecnica_Servicio'][0]['data_tecnica_Servicio_Internet'] =
                            $arrayInformacionPuntoInternet;
                    $arrayInformacionPunto['data_tecnica']['data_tecnica_Servicio'][0]['data_tecnica_Servicio_Camaras']  =
                            $arrayInformacionPuntoCamara;
                    $arrayInformacionPunto['data_tecnica']['data_tecnica_Servicio'][0]['data_tecnica_Servicio_Wifi']     =
                            $arrayInformacionPuntoWifi;
                    
                    $arrayInformacionPunto['data_tecnica']['gemport_promo'] = $strGemportDatosGpon;
                    $arrayInformacionPunto['data_tecnica']['traffic_table'] = $strTrafficTableDatosGpon;
                    $arrayInformacionPunto['data_tecnica']['service_port']  = $strServicePortDatosGpon;
                    $arrayInformacionPunto['data_tecnica']['vlan']          = $strVlanDatosGpon;
                }

                $strStatus  = '';
                $strMensaje = '';
                
                //definicion del procedure a ejecutar
                $sql  = 'BEGIN TECNK_SERVICIOS.P_WS_GET_IPS_POR_PUNTO(:Pn_IdPuntoCliente,
                                                                      :Prf_Result,
                                                                      :Pv_Status,
                                                                      :Pv_Mensaje); END;';

                $stmt                  = oci_parse($rscCon,$sql);
                $cursorResultIpsPunto  = oci_new_cursor($rscCon); 
                oci_bind_by_name($stmt,':Pn_IdPuntoCliente',$rowPuntos['ID_PUNTO']);
                oci_bind_by_name($stmt,':Prf_Result'       ,$cursorResultIpsPunto,-1,OCI_B_CURSOR);
                oci_bind_by_name($stmt,':Pv_Status'        ,$strStatus,10);
                oci_bind_by_name($stmt,':Pv_Mensaje'       ,$strMensaje,2000);


                oci_execute($stmt);
                oci_execute($cursorResultIpsPunto, OCI_DEFAULT);
                
                if ($strStatus == "ERROR")
                {
                    throw new \Exception("TECNK_SERVICIOS.P_WS_GET_IPS_POR_PUNTO: ".$strMensaje);
                }
                        
                //recorrer el cursor para obtener los datos de servicios pertenecientes a un punto
                $arrayInformacionPunto['ip_fija'] = '';
                while($rowIps = oci_fetch_array($cursorResultIpsPunto))
                {
                    $arrayInformacionIp                 = '';
                    $arrayInformacionIp['valor']        = $rowIps['IP']?$rowIps['IP']:"";
                    $arrayInformacionIp['mac']          = $rowIps['MAC']?$rowIps['MAC']:"";
                    $arrayInformacionIp['mascara']      = $rowIps['MASCARA']?$rowIps['MASCARA']:"";
                    $arrayInformacionIp['scope']        = $rowIps['SCOPE_IP']?$rowIps['SCOPE_IP']:"";
                    $arrayInformacionIp['pool_ip']      = $rowIps['POOL_IP']?$rowIps['POOL_IP']:"";
                    $arrayInformacionPunto['ip_fija'][] = $arrayInformacionIp;
                    
                }
                
                $strStatus  = '';
                $strMensaje = '';
                
                //definicion del procedure a ejecutar
                $sql  = 'BEGIN TECNK_SERVICIOS.P_WS_GET_CASOS_POR_PUNTO(:Pv_Login,
                                                                        :Prf_Result,
                                                                        :Pv_Status,
                                                                        :Pv_Mensaje); END;';

                $stmt                   = oci_parse($rscCon,$sql);
                $cursorResultCasosPunto = oci_new_cursor($rscCon); 
                oci_bind_by_name($stmt,':Pv_Login'         ,$rowPuntos['LOGIN']);
                oci_bind_by_name($stmt,':Prf_Result'       ,$cursorResultCasosPunto,-1,OCI_B_CURSOR);
                oci_bind_by_name($stmt,':Pv_Status'        ,$strStatus,10);
                oci_bind_by_name($stmt,':Pv_Mensaje'       ,$strMensaje,2000);


                oci_execute($stmt);
                oci_execute($cursorResultCasosPunto, OCI_DEFAULT);
                
                if ($strStatus == "ERROR")
                {
                    throw new \Exception("TECNK_SERVICIOS.P_WS_GET_CASOS_POR_PUNTO: ".$strMensaje);
                }
                
                //recorrer el cursor para obtener los datos de servicios pertenecientes a un punto
                $arrayInformacionPunto['casos'] = '';
                while($rowCasos = oci_fetch_array($cursorResultCasosPunto))
                {
                    $arrayInformacionCasos                   = '';
                    $arrayInformacionCasos['id_caso']        = $rowCasos['ID_CASO']?$rowCasos['ID_CASO']:"";
                    $arrayInformacionCasos['numero_caso']    = $rowCasos['NUMERO_CASO']?$rowCasos['NUMERO_CASO']:"";
                    $arrayInformacionCasos['caso']           = $rowCasos['CASO']?$rowCasos['CASO']:"";
                    $arrayInformacionCasos['estado']         = $rowCasos['ESTADO']?$rowCasos['ESTADO']:"";
                    $arrayInformacionCasos['fecha_creacion'] = $rowCasos['FE_CREACION']?$rowCasos['FE_CREACION']:"";
                    $arrayInformacionCasos['fecha_cierre']   = $rowCasos['FE_CIERRE']?$rowCasos['FE_CIERRE']:"";
                    $arrayInformacionPunto['casos'][]        = $arrayInformacionCasos;
                    
                }
                
                $strStatus  = '';
                $strMensaje = '';
                
                //definicion del procedure a ejecutar
                $sql  = 'BEGIN TECNK_SERVICIOS.P_WS_GET_TAREAS_POR_PUNTO(:Pv_Login,
                                                                         :Prf_Result,
                                                                         :Pv_Status,
                                                                         :Pv_Mensaje); END;';

                $stmt                    = oci_parse($rscCon,$sql);
                $cursorResultTareasPunto = oci_new_cursor($rscCon); 
                oci_bind_by_name($stmt,':Pv_Login'         ,$rowPuntos['LOGIN']);
                oci_bind_by_name($stmt,':Prf_Result'       ,$cursorResultTareasPunto,-1,OCI_B_CURSOR);
                oci_bind_by_name($stmt,':Pv_Status'        ,$strStatus,10);
                oci_bind_by_name($stmt,':Pv_Mensaje'       ,$strMensaje,2000);


                oci_execute($stmt);
                oci_execute($cursorResultTareasPunto, OCI_DEFAULT);
                
                if ($strStatus == "ERROR")
                {
                    throw new \Exception("TECNK_SERVICIOS.P_WS_GET_TAREAS_POR_PUNTO: ".$strMensaje);
                }
                
                //recorrer el cursor para obtener los datos de servicios pertenecientes a un punto
                $arrayInformacionPunto['tareas'] = '';
                while($rowTareas = oci_fetch_array($cursorResultTareasPunto))
                {
                    $arrayInformacionTareas                       = '';
                    $arrayInformacionTareas['numero_tarea']       = $rowTareas['NUMERO_TAREA']?$rowTareas['NUMERO_TAREA']:"";
                    $arrayInformacionTareas['tarea']              = $rowTareas['TAREA']?$rowTareas['TAREA']:"";
                    $arrayInformacionTareas['estado']             = $rowTareas['ESTADO']?$rowTareas['ESTADO']:"";
                    $arrayInformacionTareas['fecha_creacion']     = $rowTareas['FE_CREACION']?$rowTareas['FE_CREACION']:"";
                    $arrayInformacionTareas['fecha_finalizacion'] = $rowTareas['FE_FINALIZACION']?$rowTareas['FE_FINALIZACION']:"";
                    $arrayInformacionPunto['tareas'][]            = $arrayInformacionTareas;
                    
                }                
                //se agrega validacion para solo mostrar información de puntos que tengan algun servicio de internet Activo ó In-Corte
                if ($strTieneServicioInternet == "SI" || $arrayParametros['strEmpresaCod'] == "10")
                {
                    $arrayInformacionPuntos['puntos'][] = $arrayInformacionPunto;
                }
                else
                {
                    $strTienePuntoConInternet = "NO";
                }
                
                
                $arrayInformacionPuntos['strKonibit'] = $strKonibit;
                
            }
        }
            $arrayInformacionPuntos['strStatus']                = $strStatus;
            $arrayInformacionPuntos['strMensaje']               = $strMensaje;
            $arrayInformacionPuntos['strTienePuntoConInternet'] = $strTienePuntoConInternet;  
        } 
        catch (\Exception $ex) 
        {
            throw($ex);
        }
        return $arrayInformacionPuntos;
    }
    
    /**
     * Funcion que recupera rol de cliente , Nombres y Apellidos ó Razón Social e Identificación segun 
     * los parametros enviados
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0         06-10-2016 
     * @since 1.0 
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1         20-10-2016        Se agrega ont id del servicio de internet Activo ó In-Corte de un login
     * @since 1.0 
     *
     * @param Array $arrayParametros [ strNombreOlt       Nombre del olt a consultar
     *                                 strPuertoOlt       Puerto del olt a consultar
     *                                 ociCon             Parametros utilizados para generar conexion OCI a la base de datos
     *                               ]
     */ 
    public function getLoginesPorOltWs($arrayParametros)
    {
        try
        {
            //inicializacion de variables
            $arrayRegistro           = "";
            $arrayLogines            = "";
            $arrayLogin              = "";
            $strStatus               = "";
            $strMensaje              = "";
            $arrayOciCon             = $arrayParametros['ociCon'];
            $rscCon                  = oci_connect($arrayOciCon['user_comercial'], 
                                                   $arrayOciCon['passwd_comercial'], 
                                                   $arrayOciCon['dsn']);
            $cursorResult            = oci_new_cursor($rscCon);   
            $arrayLogines['strStatus']      = "ERROR";  
            $arrayLogines['strMensaje']     = "Problemas al recuperar Información de cliente";  
            $arrayLogines['arrayRegistros'] = "";  
            $arrayLogin['login']            = "";

            //definicion del procedure a ejecutar
            $sql  = 'BEGIN TECNK_SERVICIOS.P_WS_GET_LOGINES_POR_OLT(:Pv_Olt,
                                                                    :Pv_PuertoOlt,
                                                                    :Prf_Result,
                                                                    :Pv_Status,
                                                                    :Pv_Mensaje ); END;';
            $stmt = oci_parse($rscCon,$sql);
            
            oci_bind_by_name($stmt,':Pv_Olt'           ,$arrayParametros['strNombreOlt']);
            oci_bind_by_name($stmt,':Pv_PuertoOlt'     ,$arrayParametros['strPuertoOlt']);
            oci_bind_by_name($stmt,':Prf_Result'       ,$cursorResult,-1,OCI_B_CURSOR);
            oci_bind_by_name($stmt,':Pv_Status'        ,$strStatus,10);
            oci_bind_by_name($stmt,':Pv_Mensaje'       ,$strMensaje,2000);
            
            oci_execute($stmt);
            oci_execute($cursorResult, OCI_DEFAULT);
            
            if ($strStatus == "ERROR")
            {
                throw new \Exception("getLoginesPorOltWs ".$strMensaje);
            }

            //recorrer el cursor para obtener los datos
            while($row = oci_fetch_array($cursorResult))
            {
                $arrayRegistro             = "";
                $arrayRegistro['caja']     = $row['CAJA'];
                $arrayRegistro['splitter'] = $row['SPLITTER_L2'];
                $arrayRegistro['logines']  = "";
                $arrayLogin['login']       = "";
                $arrayLoginesPorSplitter   = explode(";",$row['LOGINES']);
                foreach($arrayLoginesPorSplitter as $login):
                    $arrayLogin['login']        = $login;
                    $strStatus  = '';
                    $strMensaje = '';

                    //definicion del procedure a ejecutar
                    $strSql  = 'BEGIN TECNK_SERVICIOS.P_WS_GET_ONT_ID_POR_PUNTO(:Pv_Login,
                                                                             :Prf_Result,
                                                                             :Pv_Status,
                                                                             :Pv_Mensaje); END;';

                    $objStmt                    = oci_parse($rscCon,$strSql);
                    $cursorResultOntId = oci_new_cursor($rscCon); 
                    oci_bind_by_name($objStmt,':Pv_Login'     ,$login);
                    oci_bind_by_name($objStmt,':Prf_Result'   ,$cursorResultOntId,-1,OCI_B_CURSOR);
                    oci_bind_by_name($objStmt,':Pv_Status'    ,$strStatus,10);
                    oci_bind_by_name($objStmt,':Pv_Mensaje'   ,$strMensaje,2000);


                    oci_execute($objStmt);
                    oci_execute($cursorResultOntId, OCI_DEFAULT);

                    $arrayLogin['ont_id'] = "No se logro recuperar ONT ID";
                    
                    //recorrer el cursor para obtener los datos técnicos del servicio de Internet Dedicado de un punto
                    while($rowOntId = oci_fetch_array($cursorResultOntId))
                    {
                        $arrayLogin['ont_id'] = $rowOntId['ONT_ID'];
                    }
                    
                    $arrayRegistro['logines'][] = $arrayLogin;
                endforeach;
                $arrayLogines['arrayRegistros'][] = $arrayRegistro;
            }
            $arrayLogines['strStatus']  = $strStatus;  
            $arrayLogines['strMensaje'] = $strMensaje;  
            
        } 
        catch (\Exception $ex) 
        {
            throw($ex);
        }
        return $arrayLogines;
    }
    
    /**
     * Funcion que recupera todos los servicios asociados a una misma UM enviada por parametros
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0         25-10-2016 
     * @since 1.0 
     *
     * @param Array $arrayParametros [ 
     *                                  intPuntoId                      Identificador de punto del cual se recuperará información
     *                                  intElementoId                   Identificador de elemento de backbone de la información técnica de servicios
     *                                  intInterfaceElementoId          Identificador de la interface elemento de backbone de la información técnica de servicios
     *                                  intElementoClienteId            Identificador de la elemento cliente de la información técnica de servicios
     *                                  intInterfaceElementoClienteId   Identificador de la interface elemento cliente de la información técnica de servicios
     *                                  intUltimaMillaId                Identificador de la ultima milla de la información técnica de servicios
     *                                  intTercerizadoraId              Identificador de la tercerizadora de la información técnica de servicios
     *                                  intElementoContenedorId         Identificador de la elemento contenedor de la información técnica de servicios
     *                                  intElementoConectorId           Identificador de la elemento conector de la información técnica de servicios
     *                                  intInterfaceElementoConectorId  Identificador de la interface elemento conector de la información técnica de servicios
     *                                  strTipoEnlace                   Cadena de caracteres que especifica el tipo de enlace de un servicio
     *                                  ociCon                          Parametros utilizados para conexion OCI a la base de datos
     *                               ]
     * @return Array $arrayRespuesta [
     *                                 - strStatus                      Cadena de caracteres que indica el estado de ejecución del proceso
     *                                 - strMensaje                     Cadena de caracteres que indica mensaje de respuesta de ejecución del proceso
     *                                 - arrayRegistros                 Arreglo de identificadores de servicios que utilizan misma UM
     *                               ]
     */ 
    public function getServiciosMismaUm($arrayParametros)
    {
        try
        {
            //inicializacion de variables
            $arrayRegistrosServicios = array();
            $arrayRespuesta          = array();
            $strStatus               = "";
            $strMensaje              = "";
            $strTipoEnlace           = null;
            $arrayOciCon             = $arrayParametros['ociCon'];
            $objRscCon               = oci_connect($arrayOciCon['user_comercial'], 
                                                   $arrayOciCon['passwd_comercial'], 
                                                   $arrayOciCon['dsn']);
            $cursorResult            = oci_new_cursor($objRscCon);   
            $arrayRespuesta['strStatus']      = "ERROR";  
            $arrayRespuesta['strMensaje']     = "Problemas al recuperar Información";  
            $arrayRespuesta['arrayRegistros'] = "";  
            
            //definicion del procedure a ejecutar
            $strSql  = 'BEGIN TECNK_SERVICIOS.P_GET_SERVICIOS_MISMA_UM(:Pn_PuntoId,
                                                                       :Pn_ElementoId,
                                                                       :Pn_InterfaceElementoId,
                                                                       :Pn_ElementoClienteId,
                                                                       :Pn_InterfaceElementoClienteId,
                                                                       :Pn_UltimaMillaId,
                                                                       :Pn_TercerizadoraId,
                                                                       :Pn_ElementoContenedorId,
                                                                       :Pn_ElementoConectorId,
                                                                       :Pn_InterfaceElementoConectorId,
                                                                       :Pv_TipoEnlace,
                                                                       :Prf_Result,
                                                                       :Pv_Status,
                                                                       :Pv_Mensaje ); END;';
            $objStmt = oci_parse($objRscCon,$strSql);
            
            oci_bind_by_name($objStmt,':Pn_PuntoId'                    ,$arrayParametros['intPuntoId']);
            oci_bind_by_name($objStmt,':Pn_ElementoId'                 ,$arrayParametros['intElementoId']);
            oci_bind_by_name($objStmt,':Pn_InterfaceElementoId'        ,$arrayParametros['intInterfaceElementoId']);
            oci_bind_by_name($objStmt,':Pn_ElementoClienteId'          ,$arrayParametros['intElementoClienteId']);
            oci_bind_by_name($objStmt,':Pn_InterfaceElementoClienteId' ,$arrayParametros['intInterfaceElementoClienteId']);
            oci_bind_by_name($objStmt,':Pn_UltimaMillaId'              ,$arrayParametros['intUltimaMillaId']);
            oci_bind_by_name($objStmt,':Pn_TercerizadoraId'            ,$arrayParametros['intTercerizadoraId']);
            oci_bind_by_name($objStmt,':Pn_ElementoContenedorId'       ,$arrayParametros['intElementoContenedorId']);
            oci_bind_by_name($objStmt,':Pn_ElementoConectorId'         ,$arrayParametros['intElementoConectorId']);
            oci_bind_by_name($objStmt,':Pn_InterfaceElementoConectorId',$arrayParametros['intInterfaceElementoConectorId']);
            oci_bind_by_name($objStmt,':Pv_TipoEnlace'                 ,$strTipoEnlace);
            oci_bind_by_name($objStmt,':Prf_Result'                    ,$cursorResult,-1,OCI_B_CURSOR);
            oci_bind_by_name($objStmt,':Pv_Status'                     ,$strStatus,10);
            oci_bind_by_name($objStmt,':Pv_Mensaje'                    ,$strMensaje,2000);
            
            oci_execute($objStmt);
            oci_execute($cursorResult, OCI_DEFAULT);
            
            //recorrer el cursor para obtener los datos
            while($arrayRow = oci_fetch_array($cursorResult))
            {
                $arrayRegistrosServicios[] = $arrayRow['SERVICIO_ID'];
            }
            
            $arrayRespuesta['arrayRegistros']  = $arrayRegistrosServicios;  
            $arrayRespuesta['strStatus']       = $strStatus;  
            $arrayRespuesta['strMensaje']      = $strMensaje;  
        } 
        catch (\Exception $ex) 
        {
            $arrayRespuesta['strStatus']       = "ERROR";  
            $arrayRespuesta['strMensaje']      = $ex->getMessage();
        }
        return $arrayRespuesta;
    }

    /**    
    * Genera JSON con InfoBackbone para el producto INTMPLS
    *
    * @author Juan Lafuente <jlafuente@telconete.ec>
    * @version 1.0 05-07-2016 
    *
    * @param $objServicio
    * @param $objServicioTecnico
    * @param $emInfraestructura
    * @param $serviceTecnico
    */
    public function getJsonInfoBackboneInternetMPLS($objServicio,$objServicioTecnico,$emInfraestructura,$serviceTecnico)
    {
        $arrayObjs = $this->getArrayInfoBackboneInternetMPLS($objServicio,$objServicioTecnico,$emInfraestructura,$serviceTecnico);
        
        return json_encode($arrayObjs);
    }
    
    /**
     * Obtiene array de InfoBackbone para el producto INTMPLS
     *
     * @author Juan Lafuente <jlafuente@telconete.ec>
     * @version 1.0 05-07-2016 
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 25-08-2016  Se recupera mac de radio para ser enviada en el retorno de información del metodo
     *
     * @param $objServicio
     * @param $objServicioTecnico
     * @param $emInfraestructura
     * @param $serviceTecnico
     */
    public function getArrayInfoBackboneInternetMPLS($objServicio,$objServicioTecnico,$emInfraestructura,$serviceTecnico)
    {
        $arrayObjs = $this->getInfoBackboneInternetMPLS($objServicio,$objServicioTecnico,$emInfraestructura,$serviceTecnico);
        
        $arrayProtocolos    = array();
        $objElementoPadre   = $arrayObjs['elementoPadre'];
        
        if(is_object($objElementoPadre))
        {
            $nombreElementoPadre = $objElementoPadre->getNombreElemento();
            $idElementoPadre     = $objElementoPadre->getId();
        }
        else if(is_string($objElementoPadre))
        {
            $nombreElementoPadre = $objElementoPadre;
            $idElementoPadre     = "";
        }
        else
        {
            $nombreElementoPadre = "";
            $idElementoPadre     = "";
        }

        $arrayObjs['elementoPadre']               = $nombreElementoPadre;
        $arrayObjs['idElementoPadre']             = $idElementoPadre;
        $arrayObjs['elemento']                    = (
                                                        is_object(
                                                            $arrayObjs['elemento']))?
                                                                $arrayObjs['elemento']->getNombreElemento():null
                                                    ;
        $arrayObjs['interfaceElemento']           = (
                                                        is_object(
                                                            $arrayObjs['interfaceElemento']))?
                                                                $arrayObjs['interfaceElemento']->getNombreInterfaceElemento():null
                                                    ;
        $arrayObjs['elementoContenedor']          = (
                                                        is_object(
                                                            $arrayObjs['elementoContenedor']))?
                                                                $arrayObjs['elementoContenedor']->getNombreElemento():null
                                                    ;
        $arrayObjs['elementoConector']            = (
                                                        is_object(
                                                            $arrayObjs['elementoConector']))?
                                                                $arrayObjs['elementoConector']->getNombreElemento():null
                                                    ;
        $arrayObjs['interfaceElementoConector']   = (
                                                        is_object(
                                                            $arrayObjs['interfaceElementoConector']))?
                                                                $arrayObjs['interfaceElementoConector']->getNombreInterfaceElemento():null
                                                    ;
        $arrayObjs['elementoCliente']             = (
                                                        is_object(
                                                            $arrayObjs['elementoCliente']))?
                                                                $arrayObjs['elementoCliente']->getNombreElemento():null
                                                    ;
        $arrayObjs['interfaceElementoCliente']    = (
                                                        is_object(
                                                            $arrayObjs['interfaceElementoCliente']))?
                                                                $arrayObjs['interfaceElementoCliente']->getNombreInterfaceElemento():null
                                                    ;
        $arrayObjs['vlan']                        = (
                                                        is_object(
                                                            $arrayObjs['vlan']))?
                                                                $arrayObjs['vlan']->getDetalleValor():null
                                                    ;
        $arrayObjs['vrf']                         = (
                                                        is_object(
                                                            $arrayObjs['vrf']))?
                                                                $arrayObjs['vrf']->getValor():null
                                                    ;
        $arrayObjs['mac']                         = $arrayObjs['mac'];
        $arrayObjs['ip']                          = (
                                                        is_object(
                                                            $arrayObjs['ip']))?
                                                                $arrayObjs['ip']->getIp():null
                                                    ;
        $arrayObjs['macRadio']                    = (
                                                        is_object(
                                                            $arrayObjs['macRadio']))?
                                                                $arrayObjs['macRadio']->getDetalleValor():null
                                                    ;
        
        return $arrayObjs;
    }
    
    /**
     * Funcion que sirve para ejecutar sql para obtener los modelos de acuerdo al tipo 
     * 
     * @author Duval Medina C <dmedina@telconet.ec>
     * @version 1.0 2016-09-08
     * 
     * @author Duval Medina C <dmedina@telconet.ec>
     * @version 1.1 2016-10-19 - Validar envio de parámetro para elimnar PHP Notice:  Undefined index: strComparador
     * 
     * @author John Vera R. <javera@telconet.ec>
     * @version 1.2 06-10-2017 ordenamiento por nombre de modelo
     * 
     * @param type $arrayParametros [
     *                              'arrayNombreTipoElemento'   => Nombres de el/los tipo de elemento
     *                              'arrayEstadoModeloElemento' => Estados del Modelo 
     *                              'start'                     => inicio de consulta
     *                              'limit'                     => cantidad maxima de registros
     *                              ]
     * @return $arrayResultado Retorna un objeto con los registros
     */
    public function getModeloElementoPorTipo($arrayParametros)
    {
        $objReturnResponse = new ReturnResponse();
        try
        {
            $objQueryCount = $this->_em->createQuery();
            $strQueryCount = "SELECT count(ame.id) ";
            $objQuery = $this->_em->createQuery();
            $strQuery = "SELECT ame";

            $strFromQuery = " FROM schemaBundle:AdmiTipoElemento ate,"
                          . "     schemaBundle:AdmiModeloElemento ame";
            $strWhereQuery = " WHERE ame.tipoElementoId = ate.id";
            
            if(!empty($arrayParametros['arrayEstadoModeloElemento']['arrayEstado']))
            {
                $arrayParams                 = array();
                $arrayParams['strField']     = ' ame.estado ';
                $arrayParams['strBindParam'] = ':arrayEstadoModeloElemento';
                $arrayParams['arrayValue']   = $arrayParametros['arrayEstadoModeloElemento']['arrayEstado'];
                $arrayParams['strComparador'] = '';
                $strWhereQuery               .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayEstadoModeloElemento', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayEstadoModeloElemento', $objReturnResponse->putTypeParamBind($arrayParams));
            }
            
            if(!empty($arrayParametros['arrayNombreTipoElemento']['arrayNombreElemento']))
            {
                $arrayParams                  = array();
                $arrayParams['strField']      = ' ate.nombreTipoElemento ';
                $arrayParams['strBindParam']  = ':arrayNombreTipoElemento';
                $arrayParams['arrayValue']    = $arrayParametros['arrayNombreTipoElemento']['arrayNombreElemento'];
                $arrayParams['strComparador'] = '';
                if(isset($arrayParametros['arrayNombreTipoElemento']['strComparador']))
                {
                    $arrayParams['strComparador'] = $arrayParametros['arrayNombreTipoElemento']['strComparador'];
                }
                $strWhereQuery .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayNombreTipoElemento', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayNombreTipoElemento', $objReturnResponse->putTypeParamBind($arrayParams));
            }
            
            $objQueryCount->setDQL($strQueryCount . $strFromQuery . $strWhereQuery. " ORDER BY ame.nombreModeloElemento ASC");
            $total = $objQueryCount->getSingleScalarResult();
            
            $objQuery->setDQL($strQuery . $strFromQuery . $strWhereQuery);
            if($arrayParametros['start']!='')
            {
                $objQuery->setFirstResult($arrayParametros['start']);
            }
            if($arrayParametros['limit']!='')
            {
                $objQuery->setMaxResults($arrayParametros['limit']);
            }
            $datos = $objQuery->getResult();

            $arrayResultado['registros'] = $datos;
            $arrayResultado['total']     = $total;
        }
        catch(\Exception $ex)
        {
            throw ($ex);
        }        
        return $arrayResultado;
    }

    /**
     * Funcion que sirve para generar un json con los modelos por el tipo
     * 
     * @author Duval Medina C. <dmedina@telconet.ec>
     * @version 1.0 2016-09-09
     * @param $arrayParametros [
     *                          'arrayNombreTipoElemento'   => Nombres de el/los tipo de elemento
     *                          'arrayEstadoModeloElemento' => Estados del Modelo 
     *                          'start'                     => inicio de consulta
     *                          'limit'                     => cantidad maxima de registros
     *                         ]
     * @return json
     */
    public function generarJsonModelosPorElemento($arrayParametros)
    {
        $arrayEncontrados = array();
        try
        {
            $arrayModelos   = $this->getModeloElementoPorTipo($arrayParametros);
            $arrayRegistros = $arrayModelos['registros'];
            $intTotal       = $arrayModelos['total'];

            foreach ((array)$arrayRegistros as $entity)
            {
                $arrayEncontrados[] = array(
                                            'modelo' => $entity->getNombreModeloElemento(),
                                            'codigo' => $entity->getId()
                                          );                
            }
            $arrayResultado = array('total'       => $intTotal,
                                    'encontrados' => $arrayEncontrados);
            return json_encode($arrayResultado);
        }
        catch(\Exception $ex)
        {
            throw($ex);
        }
    }
    
    /**
     * 
     * Metodo encargado de devolver las capacidades totales del concentrador dado todos sus extremos
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 07-10-2016
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1
     * @since 03-05-2017 - Se modifica consulta para tome la informacion de capacidades solo de caracteristica ENLACE_DATOS
     *                     dado que el valor de servicio de referencia que se guarda tambien puede ser BACKUP y ese no debe
     *                     entrar en la sumatoria de capacidades como EXTREMO
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 04-07-2017 se excluye estado In-Corte a la consulta
     * 
     *      
     * Costo : 11
     * 
     * @param integer $intIdServicioConcentrador Id del Servicio Concentrador
     * @return array $arrayCapacidades [ TOTAL_CAPACIDAD1   Sumatoria total de capacidades UP de los extremos enlazados
     *                                   TOTAL_CAPACIDAD2   Sumatoria total de capacidades DOWN de los extremos enlazados
     *                                 ]
     * @throws type
     */
    public function getArrayCapacidadesPorConcentrador($intIdServicioConcentrador)
    {
        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery = $this->_em->createNativeQuery(null, $objResultSetMap);

            $strSql = "  SELECT 
                                    NVL(SUM(DB_COMERCIAL.TECNK_SERVICIOS.
                                                     GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:capacidadUno)),0) TOTAL_CAPACIDAD1,
                                    NVL(SUM(DB_COMERCIAL.TECNK_SERVICIOS.
                                                     GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:capacidadDos)),0) TOTAL_CAPACIDAD2
                                  FROM 
                                    DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT    CARACT,
                                    DB_COMERCIAL.INFO_SERVICIO                SERVICIO,
                                    DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PROD_CARACT,
                                    DB_COMERCIAL.ADMI_CARACTERISTICA          ADMI_CARACT
                                  WHERE 
                                      CARACT.SERVICIO_ID                     = SERVICIO.ID_SERVICIO
                                  AND CARACT.PRODUCTO_CARACTERISITICA_ID     = PROD_CARACT.ID_PRODUCTO_CARACTERISITICA
                                  AND ADMI_CARACT.ID_CARACTERISTICA          = PROD_CARACT.CARACTERISTICA_ID 
                                  AND ADMI_CARACT.DESCRIPCION_CARACTERISTICA = :caracteristica
                                  AND CARACT.ESTADO                          = :estadoCaract
                                  AND CARACT.VALOR                           = :concentrador
                                  AND SERVICIO.ESTADO                        IN (:estadosServiciosPermitidos) ";


            $objResultSetMap->addScalarResult('TOTAL_CAPACIDAD1', 'totalCapacidadUno', 'integer');
            $objResultSetMap->addScalarResult('TOTAL_CAPACIDAD2', 'totalCapacidadDos', 'integer');

            $objNativeQuery->setParameter("capacidadUno", 'CAPACIDAD1');
            $objNativeQuery->setParameter("capacidadDos", 'CAPACIDAD2');
            $objNativeQuery->setParameter("caracteristica", 'ENLACE_DATOS');
            $objNativeQuery->setParameter("estadoCaract", 'Activo');
            $objNativeQuery->setParameter("concentrador", $intIdServicioConcentrador);
            $objNativeQuery->setParameter("estadosServiciosPermitidos", array('Activo', 'EnPruebas'));

            $objNativeQuery->setSQL($strSql);

            $arrayCapacidades = $objNativeQuery->getOneOrNullResult();
        } catch(\Exception $e)
        {
            throw ($e);
        }

        return $arrayCapacidades;
    }

    /**
     * Metodo encargado de devolver la información del concentrador con todos sus Extremos para ser visualizado en la "Vista Técnica" de cada
     * servicio, se mostrarán los servicios excepto los que se encuentren en estado:
     * 
     *  - Eliminado
     *  - Anulado
     *  - Rechazada
     * 
     * Costo del Query : 32
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 12-10-2016
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 - Se modifica query para filtrar por tipo de caracteristica que siempre muestre SOLO informacion relacionado con
     *                ENLACE_DATOS
     * @since 14-12-2016
     * 
     * @param  integer $intIdServicioConcentrador Id del Servicio Concentrador
     * @return Array $arrayCapacidades [ tipo             Tipo de Servicio ( EXTREMO/CONCENTRADOR )
     *                                   idServicio       id de cada Servicio del Array
     *                                   loginAux         Login Auxiliar ligado al Servicio
     *                                   login            Login Padre
     *                                   codigoUM         Codigo segun ultima milla ( Fibra Optica = FO , UTP , RAD )
     *                                   capacidadUno     Capacidad Up de cada servicio
     *                                   capacidadDos     Capacidad Down de cada servicio
     *                                   estado           Estado de cada servicio
     *                                   ip               Ip de cada servicio
     *                                 ]
     */
    public function getArrayInformacionConcentradorExtremo($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery = $this->_em->createNativeQuery(null, $objResultSetMap);

        $strSql = "  SELECT * FROM (
                               (
                                    SELECT   
                                      'EXTREMO' TIPO,
                                      SERVICIO.ID_SERVICIO,
                                      NVL(SERVICIO.LOGIN_AUX,'NA') LOGIN_AUX,
                                      PUNTO.LOGIN,
                                      MEDIO.CODIGO_TIPO_MEDIO,
                                      NVL((DB_COMERCIAL.TECNK_SERVICIOS.
                                                GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:CAPACIDAD1)),0) TOTAL_CAPACIDAD1,
                                      NVL((DB_COMERCIAL.TECNK_SERVICIOS.
                                                GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:CAPACIDAD2)),0) TOTAL_CAPACIDAD2,
                                      SERVICIO.ESTADO,
                                      NVL((SELECT IP FROM 
                                                  DB_INFRAESTRUCTURA.INFO_IP WHERE SERVICIO_ID = SERVICIO.ID_SERVICIO AND ESTADO = :estado),'NA') IP
                                    FROM 
                                      DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT CARACT,
                                      DB_COMERCIAL.INFO_SERVICIO SERVICIO,
                                      DB_COMERCIAL.INFO_SERVICIO_TECNICO TECNICO,
                                      DB_INFRAESTRUCTURA.ADMI_TIPO_MEDIO MEDIO,
                                      DB_COMERCIAL.INFO_PUNTO PUNTO,
                                      DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA ADMI_PROD_CARACT,
                                      DB_COMERCIAL.ADMI_CARACTERISTICA ADMI_CARACT
                                    WHERE CARACT.SERVICIO_ID                   = SERVICIO.ID_SERVICIO
                                    AND TECNICO.SERVICIO_ID                    = SERVICIO.ID_SERVICIO
                                    AND TECNICO.ULTIMA_MILLA_ID                = MEDIO.ID_TIPO_MEDIO
                                    AND PUNTO.ID_PUNTO                         = SERVICIO.PUNTO_ID
                                    AND CARACT.PRODUCTO_CARACTERISITICA_ID     = ADMI_PROD_CARACT.ID_PRODUCTO_CARACTERISITICA
                                    AND ADMI_PROD_CARACT.CARACTERISTICA_ID     = ADMI_CARACT.ID_CARACTERISTICA
                                    AND ADMI_CARACT.DESCRIPCION_CARACTERISTICA = :caracteristica
                                    AND CARACT.ESTADO                          = :estado
                                    AND CARACT.VALOR                           = :idConcentrador
                                    AND SERVICIO.ESTADO                       NOT IN (:estadosDiscriminados)
                                )
                                UNION
                                (
                                  SELECT 'CONCENTRADOR' TIPO,
                                    SERVICIO.ID_SERVICIO,
                                    NVL(SERVICIO.LOGIN_AUX,'NA') LOGIN_AUX,
                                    PUNTO.LOGIN,
                                    MEDIO.CODIGO_TIPO_MEDIO,
                                    NVL((DB_COMERCIAL.TECNK_SERVICIOS.
                                                    GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:CAPACIDAD1)),0) TOTAL_CAPACIDAD1,
                                    NVL((DB_COMERCIAL.TECNK_SERVICIOS.
                                                    GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:CAPACIDAD2)),0) TOTAL_CAPACIDAD2,
                                    SERVICIO.ESTADO,
                                    NVL((SELECT IP FROM 
                                                DB_INFRAESTRUCTURA.INFO_IP WHERE SERVICIO_ID = SERVICIO.ID_SERVICIO AND ESTADO = :estado),'NA') IP
                                  FROM 
                                    DB_COMERCIAL.INFO_SERVICIO SERVICIO,
                                    DB_COMERCIAL.INFO_SERVICIO_TECNICO TECNICO,
                                    DB_INFRAESTRUCTURA.ADMI_TIPO_MEDIO MEDIO,
                                    DB_COMERCIAL.INFO_PUNTO PUNTO
                                  WHERE SERVICIO.ID_SERVICIO  = :idConcentrador
                                  AND TECNICO.SERVICIO_ID     = SERVICIO.ID_SERVICIO
                                  AND TECNICO.ULTIMA_MILLA_ID = MEDIO.ID_TIPO_MEDIO
                                  AND PUNTO.ID_PUNTO          = SERVICIO.PUNTO_ID
                                  AND SERVICIO.ESTADO         NOT IN (:estadosDiscriminados)
                                  )
                                )  ORDER BY TIPO DESC ";


        $objResultSetMap->addScalarResult('TIPO',              'tipo',         'string');
        $objResultSetMap->addScalarResult('ID_SERVICIO',       'idServicio',   'integer');
        $objResultSetMap->addScalarResult('LOGIN_AUX',         'loginAux',     'string');
        $objResultSetMap->addScalarResult('LOGIN',             'login',        'string');
        $objResultSetMap->addScalarResult('CODIGO_TIPO_MEDIO', 'codigoUM',     'string');
        $objResultSetMap->addScalarResult('TOTAL_CAPACIDAD1',  'capacidadUno', 'integer');
        $objResultSetMap->addScalarResult('TOTAL_CAPACIDAD2',  'capacidadDos', 'integer');
        $objResultSetMap->addScalarResult('ESTADO',            'estado',       'string');
        $objResultSetMap->addScalarResult('IP',                'ip',           'string');

        $objNativeQuery->setParameter("CAPACIDAD1", 'CAPACIDAD1');
        $objNativeQuery->setParameter("CAPACIDAD2", 'CAPACIDAD2');
        $objNativeQuery->setParameter("estado", 'Activo');
        $objNativeQuery->setParameter("caracteristica", 'ENLACE_DATOS');
        $objNativeQuery->setParameter("idConcentrador", $arrayParametros['intIdServicioConcentrador']);
        $objNativeQuery->setParameter("estadosDiscriminados", $arrayParametros['estadosDiscriminados']);

        $objNativeQuery->setSQL($strSql);

        $arrayCapacidades = $objNativeQuery->getArrayResult();

        return $arrayCapacidades;
    }        
    
    /**
     * 
     * Metodo encargado de determinar si un protocolo puede ser eliminado o no del pe segun ips activas en subred asignada, ademas sea el unico
     * protocolo existente dentro de esa subred configurada
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 08-03-2017
     * 
     * Costo 13
     * 
     * @param Array $arrayParametros [ 
     *                                  intIdServicio     Servicio al que se realiza cambio de protocolo
     *                                  strProtocolo      Protocolo a ser eliminado
     *                               ]
     * @return String $strSeEjecutaPe
     */
    public function getArrayServiciosPorProtocoloYSubred($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        $strSql = "  SELECT
                        IP.IP ,
                        SERV_CARACT.VALOR  PROTOCOLO,
                        IP.SERVICIO_ID
                      FROM 
                        DB_INFRAESTRUCTURA.INFO_IP IP,
                        DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SERV_CARACT,
                        DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PROD_CARACT,
                        DB_COMERCIAL.ADMI_CARACTERISTICA CARACT
                      WHERE IP.SUBRED_ID =
                        (SELECT P.SUBRED_ID
                        FROM DB_INFRAESTRUCTURA.INFO_IP P
                        WHERE P.SERVICIO_ID = :servicio
                        AND P.ESTADO        = :estado
                        )
                      AND IP.ESTADO                               = :estado
                      AND IP.SERVICIO_ID                          = SERV_CARACT.SERVICIO_ID
                      AND SERV_CARACT.PRODUCTO_CARACTERISITICA_ID = PROD_CARACT.ID_PRODUCTO_CARACTERISITICA
                      AND PROD_CARACT.CARACTERISTICA_ID           = CARACT.ID_CARACTERISTICA
                      AND CARACT.DESCRIPCION_CARACTERISTICA       = :caracteristica
                      AND SERV_CARACT.ESTADO                      = :estado
                      AND SERV_CARACT.VALOR                       = :protocolo  ";


        $objResultSetMap->addScalarResult('IP',         'ip',           'string');
        $objResultSetMap->addScalarResult('PROTOCOLO',  'protocolo',    'string');
        $objResultSetMap->addScalarResult('SERVICIO_ID','servicioId',   'integer');

        $objNativeQuery->setParameter("servicio",       $arrayParametros['intIdServicio']);                
        $objNativeQuery->setParameter("protocolo",      $arrayParametros['strProtocolo']);
        $objNativeQuery->setParameter("estado",         'Activo');
        $objNativeQuery->setParameter("caracteristica", 'PROTOCOLO_ENRUTAMIENTO');

        $objNativeQuery->setSQL($strSql);

        $arrayServicios = $objNativeQuery->getArrayResult();

        return $arrayServicios;
    }
    
    /**
     * Metodo encargado de devolver el array con los servicios backups ligados a un servicio principal
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 31-03-2017
     * 
     * @param  Array $arrayParametros         [intIdServicioPrincipal Id del Servicio Principal ]
     * @return Array [ Entity mapeada con todos los servicios dada la consulta ]
     */
    public function getArrayServiciosBackupByServicioPrincipal($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        $strSql = "  SELECT 
                        SERV.*
                      FROM 
                        DB_COMERCIAL.INFO_SERVICIO SERV,
                        DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISPC,
                        DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC,
                        DB_COMERCIAL.ADMI_CARACTERISTICA AC
                      WHERE ISPC.PRODUCTO_CARACTERISITICA_ID = APC.ID_PRODUCTO_CARACTERISITICA
                      AND APC.CARACTERISTICA_ID              = AC.ID_CARACTERISTICA
                      AND AC.DESCRIPCION_CARACTERISTICA      = :caracteristica
                      AND ISPC.SERVICIO_ID                   = SERV.ID_SERVICIO
                      AND ISPC.ESTADO                        = :estado
                      AND APC.ESTADO                         = :estado
                      AND AC.ESTADO                          = :estado
                      AND ISPC.VALOR                         = :servicioPrincipal  ";
        
        $objResultSetMap->addRootEntityFromClassMetadata('\telconet\schemaBundle\Entity\InfoServicio', 'servicio');
        
        $objNativeQuery->setParameter("caracteristica",    'ES_BACKUP');                
        $objNativeQuery->setParameter("estado",            'Activo');
        $objNativeQuery->setParameter("servicioPrincipal", $arrayParametros['intIdServicioPrincipal']);
        
        $objNativeQuery->setSQL($strSql);
        
        return $objNativeQuery->getArrayResult();
    }
    
    /**
     * 
     * Metodo encargado de devolver los totales de subida y bajada de capacidades del elemento del cliente
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 03-04-2017
     * 
     * @param Array $arrayParametros [
     *                                 intIdServicio    Servicio a consultar capacidades de CPE
     *                                 strTipoElemento  Tipo elemento cliente enviado
     *                               ]
     * @return Array [ capacidadTotalUno 
     *                 capacidadTotalDos
     *                ] 
     */
    public function getArrayCapacidadesMaximasPorModeloElemento($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        $strSql = "  SELECT 
                        DB_COMERCIAL.COMEK_CONSULTAS.GET_MODEL_ELE_X_SERV_TIPO(:servicio, :tipoElemento, :capacidadUno) CAPACIDAD_MODELO_1,
                        DB_COMERCIAL.COMEK_CONSULTAS.GET_MODEL_ELE_X_SERV_TIPO(:servicio, :tipoElemento, :capacidadDos) CAPACIDAD_MODELO_2 
                      FROM DUAL
                        ";
        
        $objNativeQuery->setParameter("servicio",     $arrayParametros['intIdServicio']);
        $objNativeQuery->setParameter("tipoElemento", $arrayParametros['strTipoElemento']);
        $objNativeQuery->setParameter("capacidadUno", 'CAPACIDAD1');
        $objNativeQuery->setParameter("capacidadDos", 'CAPACIDAD2');
        
        $objResultSetMap->addScalarResult('CAPACIDAD_MODELO_1',  'capacidadTotalUno', 'string');
        $objResultSetMap->addScalarResult('CAPACIDAD_MODELO_2',  'capacidadTotalDos', 'string');
        
        $objNativeQuery->setSQL($strSql);
        
        return $objNativeQuery->getArrayResult();
    }
    
    /**
     * 
     * Metodo encargado de devolver la informacion de existir de recursos de Red de un Servicio relacionado al cliente
     * al cual se desea crear un nuevo Servicio
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 20-06-2017
     * 
     * Costo 490
     * 
     * @param Array $arrayParametros [
     *                                 intIdServicio    Servicio a consultar capacidades de CPE                                     
     *                               ]
     * @return $arrayResultado
     */
    public function getInfoVsatRelacionada($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        $arrayResultado = array();
        
        try
        {
            $strSql = " SELECT 
                            SERV_CARACT.VALOR                                                    ID_VRF,
                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_PER_EMP_ROL_CAR
                             (DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT
                              (SERVICIO_RELACION.ID_SERVICIO,:vrf),PRODUCTO.NOMBRE_TECNICO,0,'') VRF,
                            SERV_CARACT_VLAN.VALOR                                               VLAN,
                            SERV_CARACT_PROTOCOLO.VALOR                                          PROTOCOLO,
                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_PER_EMP_ROL_CAR
                             (0,PRODUCTO.NOMBRE_TECNICO,PUNTO_RELACION.PERSONA_EMPRESA_ROL_ID,:asPrivado) AS_PRIVADO,
                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO_RELACION.ID_SERVICIO,:subred) ID_SUBRED_VSAT,
                            (SELECT SUBRED FROM DB_INFRAESTRUCTURA.INFO_SUBRED WHERE ID_SUBRED = (
                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO_RELACION.ID_SERVICIO,:subred))) SUBRED_VSAT
                          FROM 
                            DB_COMERCIAL.INFO_SERVICIO SERVICIO,
                            DB_COMERCIAL.INFO_PUNTO PUNTO,
                            DB_COMERCIAL.INFO_PUNTO PUNTO_RELACION,
                            DB_COMERCIAL.INFO_SERVICIO SERVICIO_RELACION,
                            DB_COMERCIAL.INFO_SERVICIO_TECNICO SERVICIO_TECNICO,
                            DB_INFRAESTRUCTURA.ADMI_TIPO_MEDIO TIPO_MEDIO,
                            DB_COMERCIAL.ADMI_PRODUCTO PRODUCTO,
                            -----
                            DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SERV_CARACT,
                            DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PROD_CARACT,
                            DB_COMERCIAL.ADMI_CARACTERISTICA CARACT,
                            ----
                            DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SERV_CARACT_VLAN,
                            DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PROD_CARACT_VLAN,
                            DB_COMERCIAL.ADMI_CARACTERISTICA CARACT_VLAN,
                            ----
                            DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SERV_CARACT_PROTOCOLO,
                            DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PROD_CARACT_PROTOCOLO,
                            DB_COMERCIAL.ADMI_CARACTERISTICA CARACT_PROTOCOLO
                          WHERE 
                                SERVICIO.ID_SERVICIO           = :servicio
                          AND SERVICIO.PUNTO_ID                = PUNTO.ID_PUNTO
                          AND PUNTO.PERSONA_EMPRESA_ROL_ID     = PUNTO_RELACION.PERSONA_EMPRESA_ROL_ID
                          AND PUNTO_RELACION.ID_PUNTO          = SERVICIO_RELACION.PUNTO_ID
                          AND SERVICIO_RELACION.ESTADO        IN (:estados)
                          AND SERVICIO_RELACION.PRODUCTO_ID    = PRODUCTO.ID_PRODUCTO
                          AND PRODUCTO.NOMBRE_TECNICO          = :producto
                          AND SERVICIO_RELACION.ID_SERVICIO    = SERVICIO_TECNICO.SERVICIO_ID
                          AND SERVICIO_TECNICO.ULTIMA_MILLA_ID = TIPO_MEDIO.ID_TIPO_MEDIO
                          AND TIPO_MEDIO.NOMBRE_TIPO_MEDIO     = :tipoMedio
                          AND
                            ---
                            SERV_CARACT.SERVICIO_ID                   = SERVICIO_RELACION.ID_SERVICIO
                          AND SERV_CARACT.PRODUCTO_CARACTERISITICA_ID = PROD_CARACT.ID_PRODUCTO_CARACTERISITICA
                          AND CARACT.ID_CARACTERISTICA                = PROD_CARACT.CARACTERISTICA_ID
                          AND CARACT.DESCRIPCION_CARACTERISTICA       = :vrf
                          AND SERV_CARACT.ESTADO                      = :estado
                          AND
                            --
                            SERV_CARACT_VLAN.SERVICIO_ID                   = SERVICIO_RELACION.ID_SERVICIO
                          AND SERV_CARACT_VLAN.PRODUCTO_CARACTERISITICA_ID = PROD_CARACT_VLAN.ID_PRODUCTO_CARACTERISITICA
                          AND CARACT_VLAN.ID_CARACTERISTICA                = PROD_CARACT_VLAN.CARACTERISTICA_ID
                          AND CARACT_VLAN.DESCRIPCION_CARACTERISTICA       = :vlan
                          AND SERV_CARACT_VLAN.ESTADO                      = :estado
                          AND
                            --
                            SERV_CARACT_PROTOCOLO.SERVICIO_ID                   = SERVICIO_RELACION.ID_SERVICIO
                          AND SERV_CARACT_PROTOCOLO.PRODUCTO_CARACTERISITICA_ID = PROD_CARACT_PROTOCOLO.ID_PRODUCTO_CARACTERISITICA
                          AND CARACT_PROTOCOLO.ID_CARACTERISTICA                = PROD_CARACT_PROTOCOLO.CARACTERISTICA_ID
                          AND CARACT_PROTOCOLO.DESCRIPCION_CARACTERISTICA       = :protocolo
                          AND SERV_CARACT_PROTOCOLO.ESTADO                      = :estado
                          AND ROWNUM                                            = 1
                            ";

            $objNativeQuery->setParameter("servicio",     $arrayParametros['intIdServicio']);
            $objNativeQuery->setParameter("estados",      array('Activo','EnPruebas','In-Corte'));
            $objNativeQuery->setParameter("producto",     'L3MPLS');
            $objNativeQuery->setParameter("tipoMedio",    'SATELITAL');
            $objNativeQuery->setParameter("vrf",          'VRF');
            $objNativeQuery->setParameter("vlan",         'VLAN_PROVEEDOR');
            $objNativeQuery->setParameter("protocolo",    'PROTOCOLO_ENRUTAMIENTO');
            $objNativeQuery->setParameter("estado",       'Activo');
            $objNativeQuery->setParameter("asPrivado",    'AS_PRIVADO');
            $objNativeQuery->setParameter("subred",       'SUBRED_VSAT');

            $objResultSetMap->addScalarResult('ID_VRF',      'idVrfVsat',     'integer');
            $objResultSetMap->addScalarResult('VRF',         'vrfVsat',       'string');
            $objResultSetMap->addScalarResult('VLAN',        'vlanVsat',      'string');
            $objResultSetMap->addScalarResult('PROTOCOLO',   'protocoloVsat', 'string');
            $objResultSetMap->addScalarResult('AS_PRIVADO',  'asPrivadoVsat', 'string');
            $objResultSetMap->addScalarResult('SUBRED_VSAT', 'subredBbVsat',  'string');
            $objResultSetMap->addScalarResult('ID_SUBRED_VSAT', 'idSubredBbVsat',  'integer');

            $objNativeQuery->setSQL($strSql);

            $arrayResultado = $objNativeQuery->getOneOrNullResult();
        
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        
        return $arrayResultado;
    }
    
    /**
     * 
     * Metodo encargado de devolver el json de las segmentacion de las subredes designadas para configuracion de un Servicios
     * vsat
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 21-06-2017     
     * 
     * @param Array $arrayParametros [
     *                                 intIdServicio    Servicio a consultar                                     
     *                               ]
     * @return $objResultado
     */
    public function getJsonIpsPorServiciosVsat($arrayParametros)
    {
        $objResultado = $this->getArrayIpsPorServciosVsat($arrayParametros);        
        return json_encode($objResultado);
    }
    
    /**
     * 
     * Metodo encargado de devolver el Array de las segmentacion de las subredes designadas para configuracion de un Servicios
     * vsat
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 21-06-2017
     * 
     * Costo 23
     * 
     * @param Array $arrayParametros [
     *                                 intIdServicio    Servicio a consultar                                   
     *                               ]
     * @return $arrayResultado
     */
    public function getArrayIpsPorServciosVsat($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        $arrayResultado = array();
        
        try
        {
            $strSql = " (SELECT 
                            'SUBRED VSAT CLIENTE' DESCRIPCION,
                            IP.IP,
                            SUBRED.SUBRED,
                            SUBRED.GATEWAY,
                            SUBRED.MASCARA,
                            SUBRED.TIPO,
                            IP.ESTADO
                          FROM 
                            INFO_SERVICIO SERVICIO,
                            INFO_IP IP,
                            INFO_SUBRED SUBRED
                          WHERE 
                                SERVICIO.ID_SERVICIO = IP.SERVICIO_ID
                          AND SERVICIO.ID_SERVICIO   = :servicio
                          AND IP.SUBRED_ID           = SUBRED.ID_SUBRED
                          AND IP.ESTADO              = :estado
                          AND SUBRED.ESTADO          = :estadoSubred
                          )
                          UNION
                          (SELECT 
                            'SUBRED PE-HUB' DESCRIPCION,
                            '-' IP,
                            SUBRED.SUBRED,
                            SUBRED.GATEWAY,
                            SUBRED.MASCARA,
                            SUBRED.TIPO,
                            SERV_CARACT.ESTADO
                          FROM 
                            INFO_SERVICIO SERVICIO,
                            INFO_SERVICIO_PROD_CARACT SERV_CARACT,
                            DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PROD_CARACT,
                            DB_COMERCIAL.ADMI_CARACTERISTICA CARACT,
                            INFO_SUBRED SUBRED
                          WHERE 
                                SERVICIO.ID_SERVICIO                  = :servicio
                          AND SERVICIO.ID_SERVICIO                    = SERV_CARACT.SERVICIO_ID
                          AND SERV_CARACT.PRODUCTO_CARACTERISITICA_ID = PROD_CARACT.ID_PRODUCTO_CARACTERISITICA
                          AND PROD_CARACT.CARACTERISTICA_ID           = CARACT.ID_CARACTERISTICA
                          AND CARACT.DESCRIPCION_CARACTERISTICA       = :subred
                          AND SUBRED.ID_SUBRED                        = TO_NUMBER(SERV_CARACT.VALOR)
                          AND SERV_CARACT.ESTADO                      = :estado
                          AND SUBRED.ESTADO                           = :estadoSubred
                          )";

            $objNativeQuery->setParameter("servicio",     $arrayParametros['intIdServicio']);
            $objNativeQuery->setParameter("estadoSubred", "Ocupado");
            $objNativeQuery->setParameter("estado",       'Activo');            
            $objNativeQuery->setParameter("subred",       'SUBRED_VSAT');

            $objResultSetMap->addScalarResult('DESCRIPCION',  'descripcion',     'string');
            $objResultSetMap->addScalarResult('IP',           'ip',       'string');
            $objResultSetMap->addScalarResult('SUBRED',       'subred',      'string');
            $objResultSetMap->addScalarResult('GATEWAY',      'gateway', 'string');
            $objResultSetMap->addScalarResult('MASCARA',      'mascara', 'string');
            $objResultSetMap->addScalarResult('TIPO',         'tipo',  'string');
            $objResultSetMap->addScalarResult('ESTADO',       'estado',  'string');

            $objNativeQuery->setSQL($strSql);

            $arrayResultado = $objNativeQuery->getArrayResult();
        
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        
        return $arrayResultado;
    }
    
    /**
     * getDatosConfirmacionTelcograph
     * 
     * Metodo encargado de devolver el Array con información necesaria para la confirmación de activación de portal telcograph
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0
     * @since 09-04-2018
     * 
     * Costo 13
     * 
     * @param Array $arrayParametros [
     *                                 strRuc       Ruc del cliente que confirma creación de host
     *                                 strIpHost    Ip del host que fue creado en portal telcograph
     *                               ]
     * @return $arrayResultado
     */
    public function getDatosConfirmacionTelcograph($arrayParametros)
    {
        $arrayResultado    = array();
        $arrayEstadosQuery = array('Activo','In-Corte');
        try
        {
            $objResultSetMap    = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery     = $this->_em->createNativeQuery(null, $objResultSetMap);
            
            $strSql             = " SELECT
                                    INFO_SERVICIO.ID_SERVICIO,
                                    UPPER(INFO_PUNTO.LOGIN) LOGIN,
                                    UPPER(INFO_SERVICIO.LOGIN_AUX) LOGINAUX,
                                    UPPER(NVL(PERSONA.RAZON_SOCIAL,PERSONA.NOMBRES
                                    || ' '
                                    || PERSONA.APELLIDOS) ) NOMBRERAZONSOCIAL,
                                    (
                                        SELECT
                                            VALOR
                                        FROM
                                            INFO_PERSONA_EMPRESA_ROL_CARAC,
                                            ADMI_CARACTERISTICA
                                        WHERE
                                            INFO_PERSONA_EMPRESA_ROL_CARAC.CARACTERISTICA_ID = ADMI_CARACTERISTICA.ID_CARACTERISTICA
                                            AND   ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA = 'USUARIO_PORTAL'
                                            AND   INFO_PERSONA_EMPRESA_ROL_CARAC.ESTADO = :estadoParam
                                            AND   ADMI_CARACTERISTICA.ESTADO = :estadoParam
                                            AND   INFO_PERSONA_EMPRESA_ROL_CARAC.PERSONA_EMPRESA_ROL_ID = INFO_PERSONA_EMPRESA_ROL.ID_PERSONA_ROL
                                    ) USUARIO_PORTAL,
                                    (
                                        SELECT
                                            VALOR
                                        FROM
                                            INFO_PERSONA_EMPRESA_ROL_CARAC,
                                            ADMI_CARACTERISTICA
                                        WHERE
                                            INFO_PERSONA_EMPRESA_ROL_CARAC.CARACTERISTICA_ID = ADMI_CARACTERISTICA.ID_CARACTERISTICA
                                            AND   ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA = 'PASSWORD_PORTAL'
                                            AND   INFO_PERSONA_EMPRESA_ROL_CARAC.ESTADO = :estadoParam
                                            AND   ADMI_CARACTERISTICA.ESTADO = :estadoParam
                                            AND   INFO_PERSONA_EMPRESA_ROL_CARAC.PERSONA_EMPRESA_ROL_ID = INFO_PERSONA_EMPRESA_ROL.ID_PERSONA_ROL
                                    ) PASSWORD_PORTAL,
                                    UPPER(INFO_SERVICIO.ESTADO) ESTADOSERVICIO,
                                    INFO_PERSONA_EMPRESA_ROL.ID_PERSONA_ROL
                                FROM
                                    DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL,
                                    DB_COMERCIAL.INFO_PERSONA PERSONA,
                                    DB_COMERCIAL.INFO_PUNTO,
                                    DB_COMERCIAL.INFO_SERVICIO,
                                    DB_INFRAESTRUCTURA.INFO_IP
                                WHERE
                                    PERSONA.ID_PERSONA = INFO_PERSONA_EMPRESA_ROL.PERSONA_ID
                                    AND   INFO_PERSONA_EMPRESA_ROL.ID_PERSONA_ROL = INFO_PUNTO.PERSONA_EMPRESA_ROL_ID
                                    AND   INFO_PUNTO.ID_PUNTO = INFO_SERVICIO.PUNTO_ID
                                    AND   INFO_SERVICIO.ID_SERVICIO = INFO_IP.SERVICIO_ID
                                    AND   INFO_IP.ESTADO = :estadoParam
                                    AND   INFO_PUNTO.ESTADO IN (:estadoParam)
                                    AND   INFO_SERVICIO.ESTADO IN (:estadosParam)
                                    AND   INFO_IP.IP = :ipHostParam
                                    AND   PERSONA.IDENTIFICACION_CLIENTE = :rucParam";


            $objResultSetMap->addScalarResult('USUARIO_PORTAL',    'usuarioPortal',     'string');
            $objResultSetMap->addScalarResult('PASSWORD_PORTAL',   'passwordPortal',    'string');
            $objResultSetMap->addScalarResult('ID_SERVICIO',       'idServicio',        'string');
            $objResultSetMap->addScalarResult('LOGIN',             'login',             'string');
            $objResultSetMap->addScalarResult('LOGINAUX',          'loginAux',          'string');
            $objResultSetMap->addScalarResult('NOMBRERAZONSOCIAL', 'nombreRazonSocial', 'string');
            $objResultSetMap->addScalarResult('ESTADOSERVICIO',    'estadoServicio',    'string');
            $objResultSetMap->addScalarResult('ID_PERSONA_ROL',    'idPersonaRol',      'integer');
            $objNativeQuery->setParameter("rucParam"    , $arrayParametros['strRuc']);
            $objNativeQuery->setParameter("ipHostParam" , $arrayParametros['strIpHost']);
            $objNativeQuery->setParameter("estadoParam" , "Activo");
            $objNativeQuery->setParameter("estadosParam", $arrayEstadosQuery);
            
            $objNativeQuery->setSQL($strSql);
            
            $arrayDatosTecnicos = $objNativeQuery->getOneOrNullResult();
            
            if(is_array($arrayDatosTecnicos))
            {
                $arrayResultado = array(
                                        "strStatus"  => "OK" ,
                                        "arrayData"  => $arrayDatosTecnicos,
                                        "strMensaje" => "Información recuperada existosamente"
                                       );
            }
            else
            {
                $arrayResultado = array(
                                        "strStatus"  => "ERROR" ,
                                        "arrayData"  => array(),
                                        "strMensaje" => "No se encontro información"
                                       );
            }
        }
        catch(\Doctrine\ORM\NonUniqueResultException $objEx)
        {
            $arrayResultado = array(
                                    "strStatus"  => "ERROR" ,
                                    "arrayData"  => array(),
                                    "strMensaje" => $objEx->getMessage()
                                   );
        }
        
        return $arrayResultado;
    }
    
    /**
     * getTotalFacturacionTelcograph
     * 
     * Para el cálculo de los $1000 de facturación de los clientes a los cuales se les habilitará el monitoreo 
     * de sus equipos mediante el app Telcograph se definió por parte de el Ing. Hubo Proaño lo siguiente:
     *
     *      - Se deben considerar servicios Activos, Pendientes e In-Corte.
     *
     *      - Solo deben considerarse servicios MRC (ciclo 1).
     *
     *      - Se tomará el precio de venta registrado en la orden de servicio para el cálculo de los $1000.
     * 
     * @author Jesús Bozada <jbozada@telconet.ec> 
     * @version 1.0
     * @since 21-04-2018
     * 
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec> 
     * @version 1.1     En el array de entrada se recibe opcionalmente el estado de los servicio a considerar
     *                  En los criterios de búsqueda se agrega opcionalemente "esVenta"
     * @since 17-02-2021
     * 
     * @param Array $arrayParametros [ intIdPersonaRol ]
     * @return float
     */
    public function getTotalFacturacionTelcograph($arrayParametros)
    {
        $floatTotalFacturacion = 0.00;
        $arrayEstadosQuery     = array('Activo','In-Corte','Pendiente');
        
        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);

            $strSql          = " SELECT NVL(SUM(INFO_SERVICIO.PRECIO_VENTA),0.00) AS TOTAL_FACTURADO
                                FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL,
                                  DB_COMERCIAL.INFO_PUNTO,
                                  DB_COMERCIAL.INFO_SERVICIO
                                WHERE INFO_PERSONA_EMPRESA_ROL.ID_PERSONA_ROL  = INFO_PUNTO.PERSONA_EMPRESA_ROL_ID
                                AND INFO_PUNTO.ID_PUNTO                        = INFO_SERVICIO.PUNTO_ID
                                AND INFO_SERVICIO.FRECUENCIA_PRODUCTO          = :frecuenciaParam
                                AND INFO_SERVICIO.ESTADO                       IN (:estadosParam)
                                AND INFO_PERSONA_EMPRESA_ROL.ID_PERSONA_ROL    = :idPersonaRolParam ";

            $objResultSetMap->addScalarResult('TOTAL_FACTURADO' , 'totalFacturado', 'integer');   
            $objNativeQuery->setParameter("estadosParam"        , $arrayParametros['arrayEstados'][0] 
                                                                ? $arrayParametros['arrayEstados']:$arrayEstadosQuery);
            $objNativeQuery->setParameter("frecuenciaParam"     , 1);
            $objNativeQuery->setParameter("idPersonaRolParam"   , $arrayParametros['intIdPersonaRol']);
            
            if($arrayParametros['strEsVenta'])
            {
                $strSql .= " AND INFO_SERVICIO.ES_VENTA = :esVenta";
                $objNativeQuery->setParameter("esVenta"   , $arrayParametros['strEsVenta']);
            }
            $objNativeQuery->setSQL($strSql);
            $arrayDatos = $objNativeQuery->getOneOrNullResult();
            if($arrayDatos && $arrayDatos['totalFacturado'] != 0)
            {
                $floatTotalFacturacion = $arrayDatos['totalFacturado'];
            }
        }
        catch(\Exception $objEx)
        {
            error_log($objEx->getMessage());
        }
        
        return $floatTotalFacturacion;
    }
    
    /**
     * getListadoServiciosACrearTelcograph
     * 
     * Método que determina si un cliente ya confirmo los accesos al portal telcograph
     * 
     * @author Jesús Bozada <jbozada@telconet.ec> 
     * @version 1.0 26-04-2018
     * @since 1.0
     * 
     * @author Jesús Bozada <jbozada@telconet.ec> 
     * @version 1.1 01-10-2018  Se agrega rownum para no procesar muchos registros, sino solamente un máximo de 15 servicios
     * @since 1.0
     * 
     * Costo 47
     * 
     * @param Array $arrayParametros [ idPersonaRol ]
     * @return Array
     */
    public function getListadoServiciosACrearTelcograph($arrayParametros)
    {
        $arrayDatos               = array();
        $arrayEstadosQuery        = array('Activo','In-Corte');
        $arrayNombresTecnicoQuery = array('INTERNET', 'L3MPLS', 'INTMPLS');
        
        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);

            $strSql          = " SELECT INFO_SERVICIO.ID_SERVICIO
                                FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL,
                                  DB_COMERCIAL.INFO_PUNTO,
                                  DB_COMERCIAL.INFO_SERVICIO,
                                  DB_COMERCIAL.ADMI_PRODUCTO
                                WHERE INFO_PERSONA_EMPRESA_ROL.ID_PERSONA_ROL = INFO_PUNTO.PERSONA_EMPRESA_ROL_ID
                                AND INFO_PUNTO.ID_PUNTO                       = INFO_SERVICIO.PUNTO_ID
                                AND INFO_SERVICIO.PRODUCTO_ID                 = ADMI_PRODUCTO.ID_PRODUCTO
                                AND ADMI_PRODUCTO.NOMBRE_TECNICO             IN (:nombresTecnicosParam)
                                AND INFO_SERVICIO.ESTADO                     IN (:estadosParam)
                                AND INFO_PERSONA_EMPRESA_ROL.ID_PERSONA_ROL   = :idPersonaRolParam
                                AND UPPER(INFO_SERVICIO.LOGIN_AUX) NOT       IN
                                  (SELECT INFO_PERSONA_EMPRESA_ROL_CARAC.VALOR
                                  FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL,
                                    DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL_CARAC,
                                    DB_COMERCIAL.ADMI_CARACTERISTICA
                                  WHERE INFO_PERSONA_EMPRESA_ROL.ID_PERSONA_ROL        = INFO_PERSONA_EMPRESA_ROL_CARAC.PERSONA_EMPRESA_ROL_ID
                                  AND INFO_PERSONA_EMPRESA_ROL_CARAC.CARACTERISTICA_ID = ADMI_CARACTERISTICA.ID_CARACTERISTICA
                                  AND ADMI_CARACTERISTICA.DESCRIPCION_CARACTERISTICA   = :caractLoginAuxParam
                                  AND ADMI_CARACTERISTICA.ESTADO                       = :estadoActivoParam
                                  AND INFO_PERSONA_EMPRESA_ROL.ID_PERSONA_ROL          = :idPersonaRolParam
                                  )
                                AND ROWNUM <= 15";

            $objResultSetMap->addScalarResult('ID_SERVICIO'     , 'idServicio', 'integer');   
            $objNativeQuery->setParameter("idPersonaRolParam"   , $arrayParametros['idPersonaRol']);
            $objNativeQuery->setParameter("estadosParam"        , $arrayEstadosQuery);
            $objNativeQuery->setParameter("estadoActivoParam"   , 'Activo');
            $objNativeQuery->setParameter("caractLoginAuxParam" , 'HOST_LOGIN_AUX');
            
            $objNativeQuery->setParameter("nombresTecnicosParam", $arrayNombresTecnicoQuery);
            
            $objNativeQuery->setSQL($strSql);
            $arrayDatos = $objNativeQuery->getScalarResult();
        }
        catch(\Exception $objEx)
        {
            error_log($objEx->getMessage());
        }
        
        return $arrayDatos;
    }
    
    /**
     * Metodo encargado para obtener la informacion de recursos de los servicios a ser cancelados al momento de migrar informacion
     * de factibilidad
     * 
     * Costo 11
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 31-01-2018
     * 
     * @param  Array $arrayParametros [ intIdServicioAnterior , intIdServicioActual ]
     * @return Array $arrayResultado
     */
    public function getArrayInformacionServicioHeredado($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        $arrayResultado = array();
        
        try
        {
            $strSql = " SELECT 
                        SERVICIO.LOGIN_AUX LOGIN,
                        PERSONA.RAZON_SOCIAL,
                        DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_PER_EMP_ROL_CAR 
                        (DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT 
                        (SERVICIO.ID_SERVICIO,:vrf),PRODUCTO.NOMBRE_TECNICO,0,'') VRF,
                        DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_PER_EMP_ROL_CAR 
                        (0,PRODUCTO.NOMBRE_TECNICO,PUNTO.PERSONA_EMPRESA_ROL_ID,:asPrivado) AS_PRIVADO,
                        TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:protocolo) PROTOCOLO,
                        TECNK_SERVICIOS.GET_VALOR_DETALLE_ELEMENTO
                        (TECNK_SERVICIOS.GET_VALOR_PER_EMP_ROL_CAR 
                        (TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:vlan),PRODUCTO.NOMBRE_TECNICO,0,'')) VLAN ,
                        IP.IP,
                        SUBRED.SUBRED,
                        (SELECT NVL(SERV.LOGIN_AUX,'Pendiente Flujo')
                        FROM DB_COMERCIAL.INFO_SERVICIO SERV
                        WHERE SERV.ID_SERVICIO = (TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:enlaceDatos))
                        ) CONCENTRADOR,
                        (SELECT NVL(SERV.LOGIN_AUX,'Pendiente Flujo')
                        FROM DB_COMERCIAL.INFO_SERVICIO SERV
                        WHERE SERV.ID_SERVICIO = (TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(:servicioActual,:enlaceDatos))
                        ) CONCENTRADOR_ACTUAL,
                        DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:capacidadUno) CAPACIDAD1,
                        DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:capacidadDos) CAPACIDAD2
                      FROM 
                        DB_COMERCIAL.INFO_SERVICIO     SERVICIO,
                        DB_COMERCIAL.ADMI_PRODUCTO     PRODUCTO,
                        DB_COMERCIAL.INFO_PUNTO        PUNTO,
                        DB_INFRAESTRUCTURA.INFO_IP     IP,
                        DB_INFRAESTRUCTURA.INFO_SUBRED SUBRED,
                        DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL ROL,
                        DB_COMERCIAL.INFO_PERSONA             PERSONA
                      WHERE 
                            SERVICIO.PUNTO_ID  = PUNTO.ID_PUNTO
                      AND SERVICIO.PRODUCTO_ID = PRODUCTO.ID_PRODUCTO
                      AND SERVICIO.ID_SERVICIO = IP.SERVICIO_ID
                      AND IP.SUBRED_ID         = SUBRED.ID_SUBRED
                      AND ROL.ID_PERSONA_ROL = PUNTO.PERSONA_EMPRESA_ROL_ID
                      AND ROL.PERSONA_ID       = PERSONA.ID_PERSONA
                      AND IP.ESTADO            = :estado
                      AND SERVICIO.ID_SERVICIO = :servicio";

            $objNativeQuery->setParameter("servicio",      $arrayParametros['intIdServicioAnterior']);
            $objNativeQuery->setParameter("servicioActual",$arrayParametros['intIdServicioActual']);
            $objNativeQuery->setParameter("estado",       'Activo');            
            $objNativeQuery->setParameter("vrf",          'VRF');
            $objNativeQuery->setParameter("vlan",         'VLAN');
            $objNativeQuery->setParameter("protocolo",    'PROTOCOLO_ENRUTAMIENTO');
            $objNativeQuery->setParameter("enlaceDatos",  'ENLACE_DATOS');
            $objNativeQuery->setParameter("asPrivado",    'AS_PRIVADO');
            $objNativeQuery->setParameter("capacidadUno", 'CAPACIDAD1');
            $objNativeQuery->setParameter("capacidadDos", 'CAPACIDAD2');

            $objResultSetMap->addScalarResult('LOGIN',       'login',          'string');
            $objResultSetMap->addScalarResult('RAZON_SOCIAL','razonSocial',    'string');
            $objResultSetMap->addScalarResult('VRF',         'vrf',            'string');
            $objResultSetMap->addScalarResult('VLAN',        'vlan',           'string');
            $objResultSetMap->addScalarResult('AS_PRIVADO',  'asPrivado',      'string');
            $objResultSetMap->addScalarResult('PROTOCOLO',   'protocolo',      'string');
            $objResultSetMap->addScalarResult('IP',          'ip',             'string');
            $objResultSetMap->addScalarResult('SUBRED',      'subred',         'string');
            $objResultSetMap->addScalarResult('CONCENTRADOR','concentrador',   'string');
            $objResultSetMap->addScalarResult('CAPACIDAD1'  ,'capacidadUno',   'integer');
            $objResultSetMap->addScalarResult('CAPACIDAD2'  ,'capacidadDos',   'integer');
            $objResultSetMap->addScalarResult('CONCENTRADOR_ACTUAL','concentradorActual', 'string');

            $objNativeQuery->setSQL($strSql);

            $arrayResultado = $objNativeQuery->getArrayResult();
        
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        
        return $arrayResultado;
    }

     /**
     * getFormaDePagoCliente
     * 
     * Este método es encargado de devolver la forma de pago del cliente.
     * 
     * Costo 2
     * @author Ricardo Robles <rrobles@telconet.ec>
     * @version 1.0
     * @since 05-06-2019
     * 
     * @param Array $arrayParametros [intIdPersonaRol Id de persona rol del cliente]
     * @return Array [formaDePago] 
     */
    public function getFormaDePagoCliente($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        $strSql = "SELECT 
                     DB_FINANCIERO.FNCK_COM_ELECTRONICO.GET_CANTON_FORMA_PAGO(:paramIdPersonaRol,NULL)  FORMA_DE_PAGO 
                   FROM DUAL";
        
        $objResultSetMap->addScalarResult('FORMA_DE_PAGO', 'formaDePago', 'string');
        
        $objNativeQuery->setParameter("paramIdPersonaRol", $arrayParametros['intIdPersonaRol']);     
       
        $objNativeQuery->setSQL($strSql);
             
        return $objNativeQuery->getArrayResult();
    }

    /**
    * getInfoContratoCliente
    * 
    * Este método es encargado de Informacion del Cliente
    * strTipoInformacion : DESCRIPCION_FORMA_PAGO
    *                      DESCRIPCION_BANCO
    *                      DESCRIPCION_CUENTA
    *                      NOMBRE_MOTIVO
    *                      NUMERO_CONTRATO
    *                      NUMERO_CONTRATO_EMP_PUB
    *                      ESTADO
    *                      ORIGEN
    *                      ID_CONTRATO
    * 
    * @author José Bedón <jobedon@telconet.ec>
    * @version 1.0
    * @since 18-11-2019
    * 
    * @param Array $arrayParametros [strTipoInformacion Tipo de Información a Consultar]
    * @param Array $arrayParametros [intIdPersonaRol Id de persona rol del cliente]
    * @param Array $arrayParametros [strEstadoPersonaRol Estado de persona rol del cliente]
    * @return Array [contrato] 
    */
    public function getTipoInformacionCliente($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
        $strSql = "SELECT 
                     DB_COMERCIAL.CMKG_REPORTE_APROB_CONTRATOS.F_INFORMACION_CONTRATO_CLI(:paramTipoInformacion, 
                                                                                          :paramIdPersonaRol, 
                                                                                          :paramEstadoPersonaRol  )  
                                                                                          TIPO_INFORMACION 
                   FROM DUAL";
        $objResultSetMap->addScalarResult('TIPO_INFORMACION', 'tipoInformacion', 'string');

        $objNativeQuery->setParameter("paramTipoInformacion",  $arrayParametros['strTipoInformacion']);     
        $objNativeQuery->setParameter("paramIdPersonaRol",     $arrayParametros['intIdPersonaRol']);     
        $objNativeQuery->setParameter("paramEstadoPersonaRol", $arrayParametros['strEstadoPersonaRol']);     

        $objNativeQuery->setSQL($strSql);
             
        return $objNativeQuery->getArrayResult();

    }

     /**
     * getFechaMaximaPago
     * Método encargado de devolver la fecha máxima de pago de una factura.
     * 
     * Costo 2 
     * @author Ricardo Robles <rrobles@telconet.ec>
     * @version 1.0
     * @since 07-06-2019
     * 
     * @param Array $arrayParametros [intIdPersonaRol Id de persona rol del cliente]
     * @return Array [fechaPago] 
     */
    public function getFechaMaximaPago($arrayParametros)
    {  
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
      
        $strSql = "SELECT 
                     DB_FINANCIERO.FNCK_FACTURACION.F_WS_FECHA_PAGO_FACTURA(:paramIdPersonaRol,:paramStrEmpresaCod)  FECHA_PAGO
                   FROM DUAL";
       
        $objNativeQuery->setParameter("paramIdPersonaRol" ,  $arrayParametros['intIdPersonaRol']);
        $objNativeQuery->setParameter("paramStrEmpresaCod" , $arrayParametros['strEmpresaCod']);
        
        $objResultSetMap->addScalarResult('FECHA_PAGO', 'fechaPago', 'string');                                                                    
                   
        $objNativeQuery->setSQL($strSql);
  
        return $objNativeQuery->getArrayResult();              
    }
    
     /**
     * getContactoEmailCliente
     * Método encargado de devolver la forma de contacto(email) del cliente.
     * 
     * Costo 8 
     * @author Ricardo Robles <rrobles@telconet.ec>
     * @version 1.0
     * @since 17-06-2019
     * 
     * @param Array $arrayParametros [intIdPersonaRol Id de persona rol del cliente]
     * @return Array [correo] 
     */
    public function getContactoEmailCliente($arrayParametros)
    {  
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
      
        $strSql = "SELECT LISTAGG(ipc.valor,',') WITHIN GROUP (ORDER BY ipc.valor ) CORREO
                   FROM DB_COMERCIAL.info_persona_forma_contacto ipc,
                     DB_COMERCIAL.info_persona_empresa_rol iper,
                     DB_COMERCIAL.info_persona ip,
                     DB_COMERCIAL.admi_forma_contacto afc
                   WHERE afc.descripcion_forma_contacto = 'Correo Electronico'
                   AND afc.id_forma_contacto            = ipc.forma_contacto_id 
                   AND ipc.persona_id                   = ip.id_persona
                   AND ip.id_persona                    = iper.persona_id
                   AND iper.id_persona_rol              = :intIdPersonaRol
                   AND iper.estado                      = 'Activo'
                   AND ipc.estado                       = 'Activo'
                   AND afc.estado                       = 'Activo'";
       
        $objNativeQuery->setParameter("intIdPersonaRol", $arrayParametros['intIdPersonaRol']);
        
        $objResultSetMap->addScalarResult('CORREO', 'correo', 'string');                                                                    
                   
        $objNativeQuery->setSQL($strSql);
  
        return $objNativeQuery->getArrayResult();               
    }
    
    /*
     * getCaracteristicasPlan
     * Método encargado de devolver la caracteristicas de un plan por 
     * plan y su respectivo producto.
     * 
     * @author Macjhony Vargas <mmvargas@telconet.ec>
     * @version 1.0
     * @since 14-10-2019
     * 
     * Costo 8
     * 
     */

    public function getCaracteristicasPlan($intIdPlan, $intIdProducto)
    {           
            $objResultSet = new ResultSetMappingBuilder($this->_em);
            
            $objResultSet->addScalarResult('DESCRIPCION_CARACTERISTICA', 'nombre',     'string');
            $objResultSet->addScalarResult('VALOR', 'valor', 'string');
            try
            {           
                    $objQuery = $this->_em->createNativeQuery(null, $objResultSet);    
                    $strSql = "SELECT PROD.DESCRIPCION_PRODUCTO, CARACT.DESCRIPCION_CARACTERISTICA,
                                      REPLACE(PDC.VALOR,chr(34),'') AS VALOR
                                 FROM DB_COMERCIAL.INFO_PLAN_CAB CAB,
                                      DB_COMERCIAL.INFO_PLAN_DET DET,
                                      DB_COMERCIAL.ADMI_PRODUCTO PROD,
                                      DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PRODC,
                                      DB_COMERCIAL.ADMI_CARACTERISTICA CARACT,
                                      DB_COMERCIAL.INFO_PLAN_PRODUCTO_CARACT PDC
                                WHERE
                                      CAB.ID_PLAN      = DET.PLAN_ID 
                                  AND DET.PRODUCTO_ID  = PROD.ID_PRODUCTO 
                                  AND PROD.ID_PRODUCTO = PRODC.PRODUCTO_ID 
                                  AND PRODC.CARACTERISTICA_ID = CARACT.ID_CARACTERISTICA 
                                  AND PRODC.VISIBLE_COMERCIAL = 'SI' 
                                  AND PDC.VALOR IS NOT NULL 
                                  AND PRODC.ESTADO = 'Activo' 
                                  AND DET.ID_ITEM  = PDC.PLAN_DET_ID 
                                  AND PRODC.ID_PRODUCTO_CARACTERISITICA = PDC.PRODUCTO_CARACTERISITICA_ID 
                                  AND PDC.ESTADO       = 'Activo' 
                                  AND CAB.ID_PLAN      = :id_plan 
                                  AND PROD.ID_PRODUCTO = :id_producto";

                    $objQuery->setParameter('id_plan',     $intIdPlan);
                    $objQuery->setParameter('id_producto', $intIdProducto);
            
                    $arrayResultado = $objQuery->setSQL($strSql)->getArrayResult();
 
            }
            catch (Exception $ex)
            {
                error_log($ex->getMessage());
            }
                return $arrayResultado; 
    }
            
    /*
     * findByCaracteristicas
     * Método encargado de devolver la caracteristicas de un servicio.
     * 
     * @author Macjhony Vargas <mmvargas@telconet.ec>
     * @version 1.0
     * @since 14-10-2019
     * 
     * Costo 19
     * 
     */
    public function findByCaracteristicas($intIdServicio)
    {           
            $objResultSet = new ResultSetMappingBuilder($this->_em);
            
            $objResultSet->addScalarResult('DESCRIPCION_CARACTERISTICA', 'nombre',     'string');
            $objResultSet->addScalarResult('VALOR', 'valor', 'string');
            try
            {           
                    $objQuery = $this->_em->createNativeQuery(null, $objResultSet);    
                    $strSql = "SELECT C.DESCRIPCION_CARACTERISTICA,
                                      REPLACE(SERV.VALOR,chr(34),'') AS VALOR
                                 FROM DB_COMERCIAL.ADMI_PRODUCTO PROD,
                                      DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PRODC,
                                      DB_COMERCIAL.ADMI_CARACTERISTICA C,
                                      DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SERV
                                WHERE
                                      PROD.ID_PRODUCTO        = PRODC.PRODUCTO_ID 
                                 AND  PRODC.CARACTERISTICA_ID = C.ID_CARACTERISTICA 
                                 AND  SERV.PRODUCTO_CARACTERISITICA_ID = PRODC.ID_PRODUCTO_CARACTERISITICA 
                                 AND  PRODC.ESTADO = 'Activo' 
                                 AND  SERV.ESTADO  = 'Activo' 
                                 AND  PRODC.VISIBLE_COMERCIAL = 'SI' 
                                 AND  SERV.SERVICIO_ID        = :servicio_id";

                    $objQuery->setParameter('servicio_id', $intIdServicio);
            
                    $arrayResultado = $objQuery->setSQL($strSql)->getArrayResult();
 
            }
            catch (Exception $ex)
            {
                error_log($ex->getMessage());
            }
                return $arrayResultado; 
            }

    /**
     * Método encargado de ejecutar el proceso para la notificación a konibit mediante GDA.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 21-11-2019
     *
     * @param  Array $arrayParametros [
     *                                  intIdServicio  : Id del servicio,
     *                                  strTipoProceso : Tipo de proceso ('ACTIVAR','CORTAR','RECONECTAR','CAMBIOPLAN','CANCELAR'),
     *                                  strTipoTrx     : Tipo de transacción ('MASIVO','INDIVIDUAL'),
     *                                  strUsuario     : Usuario quien realiza la petición,
     *                                  strIp          : Ip del usuario quien realiza la petición,
     *                                  objUtilService : Objeto del service Util.
     *                                ]
     * @return Array $arrayRespuesta
     */
    public function notificarKonibit($arrayParametros)
    {
        $strMessage     = '';
        $strMessage     = str_pad($strMessage, 8000, " ");
        $strUsuario     = $arrayParametros['strUsuario'] ? $arrayParametros['strUsuario'] : 'Telcos+';
        $strIp          = $arrayParametros['strIp']      ? $arrayParametros['strIp']      : '127.0.0.1';
        $objUtilService = $arrayParametros['objUtilService'];

        try
        {
            $strSql = "BEGIN DB_INFRAESTRUCTURA.INFRKG_KONIBIT.P_ENVIA_NOTIFICACION(:intIdServicio,".
                                                                                   ":strTipoProceso,".
                                                                                   ":strTipoTrx,".
                                                                                   ":strUsuario,".
                                                                                   ":strIp,".
                                                                                   ":strMessage); END;";

            $objStmt = $this->_em->getConnection()->prepare($strSql);

            $objStmt->bindParam('intIdServicio'  , $arrayParametros['intIdServicio']);
            $objStmt->bindParam('strTipoProceso' , $arrayParametros['strTipoProceso']);
            $objStmt->bindParam('strTipoTrx'     , $arrayParametros['strTipoTrx']);
            $objStmt->bindParam('strUsuario'     , $strUsuario);
            $objStmt->bindParam('strIp'          , $strIp);
            $objStmt->bindParam('strMessage'     , $strMessage);
            $objStmt->execute();

            if (!empty($strMessage) && $strMessage !== null && $strMessage !== '')
            {
                throw new \Exception("Error : $strMessage");
            }

            $arrayRespuesta = array ('status'  => 'ok',
                                     'message' => 'Proceso ejecutado correctamente');
        }
        catch (\Exception $objException)
        {
            $strMessage = 'Error al ejecutar el proceso de konibit';

            if (strpos($objException->getMessage(),'Error : ') !== false)
            {
                $strMessage = $objException->getMessage();
            }

            if (is_object($objUtilService))
            {
                $objUtilService->insertError('Telcos+',
                                             'InfoServicioTecnicoRepository->notificarKonibit',
                                              $objException->getMessage(),
                                              $strUsuario,
                                              $strIp);
            }

            $arrayRespuesta = array ('status'  => 'fail',
                                     'message' => $strMessage);
        }

        return $arrayRespuesta;
    }

    /**
     * Función encarga de retornar los datos técnicos de un cliente que tiene activo
     * el monitoreo de telcograf.
     *
     * Costo 20
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 16-12-2019
     *
     * @param $arrayParametros [
     *                           intIdPersonaEmpresaRol  : Id persona empresa rol del cliente.
     *                           arrayStrCaracteristica  : Lista de las características del cliente.
     *                           strCodEmpresa           : Id del código empresa.
     *                           strEstadoCliente        : Estado del cliente.
     *                           strEstadoCaracteristica : Estado de la característica.
     *                           strUsuario              : Usuario quien realiza la petición.
     *                           strIp                   : Ip del usuario quien realiza la petición.
     *                           objUtilService          : Objeto del service Util.
     *                         ]
     * @return $arrayResultado
     */
    public function getDatosCaractClienteTg($arrayParametros)
    {
        $objUtilService = $arrayParametros['objUtilService'];
        $strUsuario     = $arrayParametros['strUsuario'] ? $arrayParametros['strUsuario'] : 'Telcos+';
        $strIp          = $arrayParametros['strIp']      ? $arrayParametros['strIp']      : '127.0.0.1';

        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);

            $strSql = "SELECT ADCAR.DESCRIPCION_CARACTERISTICA AS CARACTERISTICA, ".
                             "IPERC.VALOR                      AS VALOR ".
                        "FROM ".
                          "DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL       IPER, ".
                          "DB_COMERCIAL.INFO_EMPRESA_ROL               IERO, ".
                          "DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL_CARAC IPERC, ".
                          "DB_COMERCIAL.ADMI_CARACTERISTICA            ADCAR ".
                      "WHERE IPER.ID_PERSONA_ROL               = IPERC.PERSONA_EMPRESA_ROL_ID ".
                        "AND IPER.EMPRESA_ROL_ID               = IERO.ID_EMPRESA_ROL ".
                        "AND IPERC.CARACTERISTICA_ID           = ADCAR.ID_CARACTERISTICA ".
                        "AND IPER.ID_PERSONA_ROL               = :intIdPersonaEmpresaRol ".
                        "AND IERO.EMPRESA_COD                  = :strCodEmpresa ".
                        "AND IPER.ESTADO                       = :strEstadoCliente ".
                        "AND ADCAR.ESTADO                      = :strEstadoCaracteristica ".
                        "AND IPERC.ESTADO                      = :strEstadoCaracteristica ".
                        "AND UPPER(ADCAR.DESCRIPCION_CARACTERISTICA) IN (:arrayStrCaracteristica) ";

            $objNativeQuery->setParameter('intIdPersonaEmpresaRol'  , $arrayParametros['intIdPersonaEmpresaRol']);
            $objNativeQuery->setParameter('strCodEmpresa'           , $arrayParametros['strCodEmpresa']);
            $objNativeQuery->setParameter('strEstadoCliente'        , $arrayParametros['strEstadoCliente']);
            $objNativeQuery->setParameter('strEstadoCaracteristica' , $arrayParametros['strEstadoCaracteristica']);
            $objNativeQuery->setParameter('arrayStrCaracteristica'  , array_map('strtoupper',
                                                                        array_values($arrayParametros['arrayStrCaracteristica'])));

            $objResultSetMap->addScalarResult('CARACTERISTICA' , 'caracteristica' , 'string');
            $objResultSetMap->addScalarResult('VALOR'          , 'valor'          , 'string');

            $objNativeQuery->setSQL($strSql);

            $arrayResult    = $objNativeQuery->getResult();
            $arrayRespuesta = array("status" => true,
                                    "total"  => count($arrayResult),
                                    "result" => $arrayResult);
        }
        catch(\Exception $objException)
        {
            $arrayRespuesta = array ("status" => false,
                                     "result" => null);

            if (is_object($objUtilService))
            {
                $objUtilService->insertError('Telcos+',
                                             'InfoServicioTecnicoRepository->getDatosCaractClienteTg',
                                              $objException->getMessage(),
                                              $strUsuario,
                                              $strIp);
            }
        }
        return $arrayRespuesta;
    }
    
    /**
     * Funcion que permite obtener los elementos de CPE segun el producto.
     * 
     * @author David León <mdleon@telconet.ec>
     * @version 1.1 09-01-2020   
     * 
     * Costo; 25
     * 
     * @since 1.0
     * @param objServicio,objProducto
     * @return Array [ID_SERVICIO,ELEMENTO_CLIENTE_ID,INTERFACE_ELEMENTO_CLIENTE_ID,INTERFACE_ELEMENTO_CONECTOR_ID,ELEMENTO_CONECTOR_ID]
     */
    public function getElementosPorPuntoProduct($objServicio, $objProducto, $strActivacion='')
    {
        $objResultSetMap    = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery     = $this->_em->createNativeQuery(null, $objResultSetMap);

        $strSql = "SELECT servicio.id_servicio AS ID_SERVICIO,
                    tecnico.elemento_cliente_id AS ELEMENTO_CLIENTE_ID,
                    tecnico.interface_elemento_cliente_id AS INTERFACE_ELEMENTO_CLIENTE_ID,
                    tecnico.INTERFACE_ELEMENTO_CONECTOR_ID AS INTERFACE_ELEMENTO_CONECTOR_ID,
                    tecnico.ELEMENTO_CONECTOR_ID AS ELEMENTO_CONECTOR_ID
                    FROM info_servicio servicio,
                    info_punto punto,
                    info_servicio_tecnico tecnico,
                    admi_producto producto
                  WHERE servicio.id_servicio  = tecnico.servicio_id
                  AND servicio.punto_id       = punto.id_punto
                  AND punto.id_punto          = :idPunto
                  AND producto.id_producto    = servicio.producto_id
                  AND producto.id_producto    = :idProducto";

        $objNativeQuery->setParameter("idPunto", $objServicio->getPuntoId());
        $objNativeQuery->setParameter("idProducto", $objProducto->getId());
        
        if ($strActivacion !='Activar')
        {
             $strSql .= " AND servicio.estado         IN (:estados) ";
             $objNativeQuery->setParameter("estados", array("Activo","Eliminado","Cancelado")); 
        }
        else 
        {
            $strSql .= " AND servicio.estado         IN (:estados) "
                  . " AND servicio.id_servicio = :servicio ";
            
            $objNativeQuery->setParameter("estados", array("Activo", "Asignada", "EnPruebas"));
            $objNativeQuery->setParameter("servicio", $objServicio->getId());
        }

        $objResultSetMap->addScalarResult('ID_SERVICIO',                    'servicioId',                   'integer');
        $objResultSetMap->addScalarResult('ELEMENTO_CLIENTE_ID',            'elementoClienteId',            'integer');
        $objResultSetMap->addScalarResult('INTERFACE_ELEMENTO_CLIENTE_ID',  'interfaceElementoClienteId',   'integer');
        $objResultSetMap->addScalarResult('INTERFACE_ELEMENTO_CONECTOR_ID', 'interfaceElementoConectorId',  'integer');
        $objResultSetMap->addScalarResult('ELEMENTO_CONECTOR_ID',           'elementoConectorId',           'integer');
        $objResultSetMap->addScalarResult('NOMBRE_TIPO_MEDIO',              'nombreTipoMedio',              'string' );
        
        $objNativeQuery->setSQL($strSql);
        $arrayDatos = $objNativeQuery->getScalarResult();

        return $arrayDatos;
    }
    
    /**
     * Funcion que permite obtener los servicios que comparten ultima milla,se retorna 
     * Elemento correspondiente al router atraves del hilo y el elemento.
     * 
     * @author David León <mdleon@telconet.ec>
     * @version 1.1 03-01-2020  
     * 
     * Costo;23
     * 
     * @since 1.0
     * @param arrayParametros[ElementoId,InterfaceElementoConectorId,TipoEnlace,ServicioId]
     * @return Array [ID_SERVICIO,ELEMENTO_CLIENTE_ID,INTERFACE_ELEMENTO_CLIENTE_ID,INTERFACE_ELEMENTO_CONECTOR_ID,ELEMENTO_CONECTOR_ID]
     */
    public function getElementosPorUltimaMilla($arrayParametros)
    {
        $objResultSetMap    = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery     = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        
        $strSql = "SELECT tecnico.servicio_id AS SERVICIO_ID,
                       tecnico.elemento_id AS ELEMENTO_ID,
                       tecnico.interface_elemento_id AS INTERFACE_ELEMENTO_ID,
                       tecnico.elemento_cliente_id AS ELEMENTO_CLIENTE_ID,
                       tecnico.interface_elemento_cliente_id AS INTERFACE_ELEMENTO_CLIENTE_ID,
                       tecnico.interface_elemento_conector_id AS INTERFACE_ELEMENTO_CONECTOR_ID,
                       tecnico.elemento_conector_id AS ELEMENTO_CONECTOR_ID,
                       tecnico.tipo_enlace AS TIPO_ENLACE
                    FROM info_servicio_tecnico tecnico
                  WHERE tecnico.elemento_Id =:elementoId
                  and tecnico.interface_elemento_conector_id =:interfaceElemento
                  and tecnico.servicio_Id =:servicioId";

        $objNativeQuery->setParameter("elementoId",        $arrayParametros['elementoId']);
        $objNativeQuery->setParameter("interfaceElemento", $arrayParametros['interfaceElemento']);
        $objNativeQuery->setParameter("servicioId",        $arrayParametros['servicioId']);

        $objResultSetMap->addScalarResult('SERVICIO_ID',                    'servicioId',                   'integer');
        $objResultSetMap->addScalarResult('ELEMENTO_ID',                    'elementoId',                   'integer');
        $objResultSetMap->addScalarResult('INTERFACE_ELEMENTO_ID',          'interfaceElementoId',          'integer');
        $objResultSetMap->addScalarResult('ELEMENTO_CLIENTE_ID',            'elementoClienteId',            'integer');
        $objResultSetMap->addScalarResult('INTERFACE_ELEMENTO_CLIENTE_ID',  'interfaceElementoClienteId',   'integer');
        $objResultSetMap->addScalarResult('INTERFACE_ELEMENTO_CONECTOR_ID', 'interfaceElementoConectorId',  'integer');
        $objResultSetMap->addScalarResult('ELEMENTO_CONECTOR_ID',           'elementoConectorId',           'integer');
        $objResultSetMap->addScalarResult('TIPO_ENLACE',                    'tipoEnlace',                   'string' );
        
        $objNativeQuery->setSQL($strSql);
        $arrayDatos = $objNativeQuery->getScalarResult();
        return $arrayDatos;
    }

  
    /**
      * getFechaActivacionServicioOrigen
      *
      * Método que retorna la fecha en que se activó un servicio                                   
      *      
      * @param array $arrayParametros
      * 
      * @return string $strFechaActivacion
      *
      * @author Edgar Holguín <eholguin@telconet.ec>
      * @version 1.0 16-01-2020
      */
    public function getFechaActivacionServicioOrigen($arrayParametros)
    {
        try
        {
            $strFechaActivacion = str_pad($strFechaActivacion, 2000, " ");

            $strSql= "BEGIN :strFechaActivacion := DB_FINANCIERO.FNCK_CAMBIO_FORMA_PAGO.GET_FECHA_ACTIVACION(:intIdServicio); END;";
            $objQuery = $arrayParametros['emFinanciero']->getConnection()->prepare($strSql);
            $objQuery->bindParam('intIdServicio',      $arrayParametros['intIdServicio']);
            $objQuery->bindParam('strFechaActivacion', $strFechaActivacion);
            $objQuery->execute();
        }
        catch(\Exception $ex)
        {
            error_log('Existio un error en getFechaActivacionServicioOrigen ' . $ex->getMessage());
        }

        return $strFechaActivacion;

    }
    
    /**
     * Documentación para el método 'getServiciosPorClienteTN'.
     *
     * Obtiene el listado de los servicios por cliente
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 09-04-2020
     *
     * @param Array $arrayParametros [
     *                                  intIdEmpresa          => id de la empresa
     *                                  intIdPerEmpRol        => id del cliente
     *                                  intIdPunto            => id del punto
     *                                  arrayIdServicios      => array de id de servicios
     *                                  strTipoEnlace         => tipo enlace
     *                                  strGrupo              => grupo de los servicios
     *                                  arrayNombreTecCondUno => arreglo de los nombres técnicos para la condición uno
     *                                  arrayNombreTecCondDos => arreglo de los nombres técnicos para la condición dos
     *                                  arrayIdProductosNoPer => arreglo de los id de los productos no permitidos
     *                                  strEstadoPunto        => estado del punto
     *                                  strEstadoServicio     => estado de los servicios
     *                                  strTipoProcesoCab     => tipo del proceso masivo cab
     *                                  strEstadoMasivoCab    => estado del proceso masivo cab
     *                                  strEstadoMasivoDet    => estado del proceso masivo det
     *                                  strLogin              => login del punto
     *                               ]
     *
     * @return Array $arrayResultado [
     *                                  'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                  'result'    => arreglo con la información de los servicios o mensaje de error
     *                               ]
     *
     * costoQuery: 16
     */
    public function getServiciosPorClienteTN($arrayParametros)
    {
        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
            $strSql          = "SELECT SER.ID_SERVICIO, PUN.ID_PUNTO, PUN.LOGIN, SER.LOGIN_AUX, PRO.NOMBRE_TECNICO, PRO.DESCRIPCION_PRODUCTO,
                                       SER.ESTADO, ( CASE WHEN DET.ID_PROCESO_MASIVO_DET IS NOT NULL THEN 'SI' ELSE 'NO' END ) IS_MASIVO
                            FROM DB_COMERCIAL.INFO_SERVICIO SER
                            INNER JOIN DB_COMERCIAL.INFO_PUNTO                   PUN ON PUN.ID_PUNTO              = SER.PUNTO_ID
                            INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO        TEC ON SER.ID_SERVICIO           = TEC.SERVICIO_ID
                            INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO                PRO ON SER.PRODUCTO_ID           = PRO.ID_PRODUCTO
                            INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL     PER ON PER.ID_PERSONA_ROL        = PUN.PERSONA_EMPRESA_ROL_ID
                            INNER JOIN DB_COMERCIAL.INFO_PERSONA                 P   ON P.ID_PERSONA              = PER.PERSONA_ID
                            INNER JOIN DB_COMERCIAL.INFO_EMPRESA_ROL             ER  ON ER.ID_EMPRESA_ROL         = PER.EMPRESA_ROL_ID
                            INNER JOIN DB_COMERCIAL.INFO_EMPRESA_GRUPO           EG  ON EG.COD_EMPRESA            = ER.EMPRESA_COD
                            LEFT JOIN ( SELECT DET.ID_PROCESO_MASIVO_DET, DET.SERVICIO_ID FROM DB_INFRAESTRUCTURA.INFO_PROCESO_MASIVO_DET DET
                                        INNER JOIN DB_INFRAESTRUCTURA.INFO_PROCESO_MASIVO_CAB CAB
                                        ON CAB.ID_PROCESO_MASIVO_CAB = DET.PROCESO_MASIVO_CAB_ID
                                        WHERE CAB.TIPO_PROCESO = :TIPO_PROCESO AND DET.ESTADO = :ESTADO_MASIVO_DET
                                        AND CAB.ESTADO = :ESTADO_MASIVO_CAB )    DET ON DET.SERVICIO_ID           = SER.ID_SERVICIO
                            WHERE PUN.PERSONA_EMPRESA_ROL_ID = :ID_CLIENTE
                            AND PUN.ESTADO = :ESTADO_PUNTO
                            AND SER.ESTADO = :ESTADO_SERVICIO
                            AND EG.COD_EMPRESA = :ID_EMPRESA";

            if( ( isset($arrayParametros['strTipoEnlace']) && !empty($arrayParametros['strTipoEnlace']) &&
                  isset($arrayParametros['strGrupo']) && !empty($arrayParametros['strGrupo']) &&
                  isset($arrayParametros['arrayNombreTecCondUno']) && !empty($arrayParametros['arrayNombreTecCondUno'])
                ) || ( isset($arrayParametros['arrayNombreTecCondDos']) && !empty($arrayParametros['arrayNombreTecCondDos']) ) )
            {
                //variable para verificar e ingresar el OR al query
                $booleanVerOr = false;
                $strSql       = $strSql." AND ( ";
                if( isset($arrayParametros['strTipoEnlace']) && !empty($arrayParametros['strTipoEnlace']) &&
                    isset($arrayParametros['strGrupo']) && !empty($arrayParametros['strGrupo']) &&
                    isset($arrayParametros['arrayNombreTecCondUno']) && !empty($arrayParametros['arrayNombreTecCondUno']) )
                {
                    $strSql = $strSql." ( TEC.TIPO_ENLACE = :TIPO_ENLACE AND PRO.GRUPO != :GRUPO AND ".
                                      " PRO.NOMBRE_TECNICO IN (:ARRAY_NOMBRE_TEC_COND_UNO) ) ";
                    $objNativeQuery->setParameter("TIPO_ENLACE",               $arrayParametros['strTipoEnlace']);
                    $objNativeQuery->setParameter("GRUPO",                     $arrayParametros['strGrupo']);
                    $objNativeQuery->setParameter("ARRAY_NOMBRE_TEC_COND_UNO", array_values($arrayParametros['arrayNombreTecCondUno']));
                    $booleanVerOr = true;
                }
                if( isset($arrayParametros['arrayNombreTecCondDos']) && !empty($arrayParametros['arrayNombreTecCondDos']) )
                {
                    if($booleanVerOr)
                    {
                        $strSql = $strSql." OR ";
                    }
                    $strSql = $strSql." ( PRO.NOMBRE_TECNICO IN (:ARRAY_NOMBRE_TEC_COND_DOS) ) ";
                    $objNativeQuery->setParameter("ARRAY_NOMBRE_TEC_COND_DOS", array_values($arrayParametros['arrayNombreTecCondDos']));
                }
                $strSql = $strSql." ) ";
            }
            if( isset($arrayParametros['intIdPunto']) && !empty($arrayParametros['intIdPunto']) )
            {
                $strSql = $strSql." AND PUN.ID_PUNTO = :ID_PUNTO";
                $objNativeQuery->setParameter("ID_PUNTO",               $arrayParametros['intIdPunto']);
            }
            if( isset($arrayParametros['arrayIdServicios']) && is_array($arrayParametros['arrayIdServicios']) && 
                !empty($arrayParametros['arrayIdServicios']) )
            {
                $strSql = $strSql." AND SER.ID_SERVICIO NOT IN (:ARRAY_ID_SERVICIOS)";
                $objNativeQuery->setParameter("ARRAY_ID_SERVICIOS",     array_values($arrayParametros['arrayIdServicios']));
            }
            if( isset($arrayParametros['arrayIdProductosNoPer']) && is_array($arrayParametros['arrayIdProductosNoPer']) &&
                !empty($arrayParametros['arrayIdProductosNoPer']) )
            {
                $strSql = $strSql." AND PRO.ID_PRODUCTO NOT IN (:ARRAY_ID_PRODUCTOS_NOT)";
                $objNativeQuery->setParameter("ARRAY_ID_PRODUCTOS_NOT", array_values($arrayParametros['arrayIdProductosNoPer']));
            }
            if( isset($arrayParametros['strLogin']) && !empty($arrayParametros['strLogin']) )
            {
                $strSql = $strSql." AND PUN.LOGIN LIKE :LOGIN";
                $objNativeQuery->setParameter("LOGIN",                  '%'.$arrayParametros['strLogin'].'%');
            }

            $strSql = $strSql." ORDER BY PUN.LOGIN ASC";

            $objNativeQuery->setParameter("ID_EMPRESA",                 $arrayParametros['intIdEmpresa']);
            $objNativeQuery->setParameter("ID_CLIENTE",                 $arrayParametros['intIdPerEmpRol']);
            $objNativeQuery->setParameter("ESTADO_PUNTO",               $arrayParametros['strEstadoPunto']);
            $objNativeQuery->setParameter("ESTADO_SERVICIO",            $arrayParametros['strEstadoServicio']);
            $objNativeQuery->setParameter("TIPO_PROCESO",               $arrayParametros['strTipoProcesoCab']);
            $objNativeQuery->setParameter("ESTADO_MASIVO_CAB",          $arrayParametros['strEstadoMasivoCab']);
            $objNativeQuery->setParameter("ESTADO_MASIVO_DET",          $arrayParametros['strEstadoMasivoDet']);

            $objResultSetMap->addScalarResult('ID_SERVICIO',            'idServicio',           'integer');
            $objResultSetMap->addScalarResult('ID_PUNTO',               'idLogin',              'integer');
            $objResultSetMap->addScalarResult('LOGIN',                  'login',                'string');
            $objResultSetMap->addScalarResult('LOGIN_AUX',              'loginAux',             'string');
            $objResultSetMap->addScalarResult('NOMBRE_TECNICO',         'nombreTecnico',        'string');
            $objResultSetMap->addScalarResult('DESCRIPCION_PRODUCTO',   'descripcionProducto',  'string');
            $objResultSetMap->addScalarResult('ESTADO',                 'estado',               'string');
            $objResultSetMap->addScalarResult('IS_MASIVO',              'isMasivo',             'string');

            $objNativeQuery->setSQL($strSql);
            $arrayData = $objNativeQuery->getScalarResult();

            $arrayResultado = array(
                'status' => 'OK',
                'result' => $arrayData
            );
        }
        catch (\Exception $e)
        {
            $arrayResultado = array(
                'status' => 'ERROR',
                'result' => $e->getMessage()
            );
        }
        return $arrayResultado;
    }

    /**
     * Documentación para el método 'getBwServiciosPorElementoInterface'.
     *
     * Obtiene la información del BW de todos los servicios de la interface del elemento SWITCH
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 28-05-2020
     *
     * @param Array $arrayParametros [
     *                                  arrayIdServicios       => arreglo de los id de los servicios
     *                                  intIdElemento          => id del elemento
     *                                  intIdInterfaceElemento => id de la interface del elemento
     *                                  arrayEstadosServicios  => arreglo de los estados de los servicios
     *                                  arrayIdProductos       => arreglo de los id de los productos permitidos
     *                                  arrayIdProductosNot    => arreglo de los id de los productos no permitidos
     *                                  arrayIdServiciosNot    => arreglo de los id de los servicios no permitidos
     *                                  strCapacidadUno        => nombre de la capacidad uno
     *                                  strCapacidadDos        => nombre de la capacidad dos
     *                               ]
     *
     * @return Array $arrayResultado [
     *                                  'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                  'result'    => arreglo con la información del BW de los servicios o mensaje de error
     *                               ]
     *
     * costoQuery: 8
     */
    public function getBwServiciosPorElementoInterface($arrayParametros)
    {
        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
            $strSql          = "SELECT SER.ID_SERVICIO, SER.LOGIN_AUX, SER.ESTADO, PRO.NOMBRE_TECNICO,
                                    DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SER.ID_SERVICIO,:CAPACIDAD1) CAPACIDAD1,
                                    DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SER.ID_SERVICIO,:CAPACIDAD2) CAPACIDAD2
                                FROM
                                    DB_COMERCIAL.INFO_SERVICIO SER
                                INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO         TEC ON SER.ID_SERVICIO = TEC.SERVICIO_ID
                                INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO           ELE ON TEC.ELEMENTO_ID = ELE.ID_ELEMENTO
                                INNER JOIN DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INF ON TEC.INTERFACE_ELEMENTO_ID = INF.ID_INTERFACE_ELEMENTO
                                INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO                 PRO ON SER.PRODUCTO_ID = PRO.ID_PRODUCTO
                                WHERE SER.ESTADO IN (:ESTADO_SERVICIOS)";

            /*
             * Debe cumplir una de las dos condiciones o si no el método retorna el error
             * 1.- Arreglo de los id de los servicios
             * 2.- Id del elemento y id de la interface del elemento
             */
            if( isset($arrayParametros['arrayIdServicios']) && is_array($arrayParametros['arrayIdServicios']) &&
                !empty($arrayParametros['arrayIdServicios']) )
            {
                $strSql = $strSql." AND SER.ID_SERVICIO IN (:ARRAY_ID_SERVICIOS)";
                $objNativeQuery->setParameter("ARRAY_ID_SERVICIOS", array_values($arrayParametros['arrayIdServicios']));
            }
            elseif( isset($arrayParametros['intIdElemento']) && !empty($arrayParametros['intIdElemento']) &&
                    isset($arrayParametros['intIdInterfaceElemento']) && !empty($arrayParametros['intIdInterfaceElemento']) )
            {
                $strSql = $strSql." AND ELE.ID_ELEMENTO = :ID_ELEMENTO";
                $strSql = $strSql." AND INF.ID_INTERFACE_ELEMENTO = :ID_INTERFACE_ELEMENTO";
                $objNativeQuery->setParameter("ID_ELEMENTO",           $arrayParametros['intIdElemento']);
                $objNativeQuery->setParameter("ID_INTERFACE_ELEMENTO", $arrayParametros['intIdInterfaceElemento']);
            }
            else
            {
                throw new \Exception("El método debe recibir los id de los servicios o el id de la interface con el elemento, ".
                                     "por favor notificar a Sistemas.");
            }

            //id de los productos permitidos
            if( isset($arrayParametros['arrayIdProductos']) && is_array($arrayParametros['arrayIdProductos']) &&
                !empty($arrayParametros['arrayIdProductos']) )
            {
                $strSql = $strSql." AND PRO.ID_PRODUCTO IN (:ARRAY_ID_PRODUCTOS)";
                $objNativeQuery->setParameter("ARRAY_ID_PRODUCTOS", array_values($arrayParametros['arrayIdProductos']));
            }

            //id de los productos no permitidos
            if( isset($arrayParametros['arrayIdProductosNot']) && is_array($arrayParametros['arrayIdProductosNot']) &&
                !empty($arrayParametros['arrayIdProductosNot']) )
            {
                $strSql = $strSql." AND PRO.ID_PRODUCTO NOT IN (:ARRAY_ID_PRODUCTOS_NOT)";
                $objNativeQuery->setParameter("ARRAY_ID_PRODUCTOS_NOT", array_values($arrayParametros['arrayIdProductosNot']));
            }

            //id de los servicios no permitidos
            if( isset($arrayParametros['arrayIdServiciosNot']) && is_array($arrayParametros['arrayIdServiciosNot']) &&
                !empty($arrayParametros['arrayIdServiciosNot']) )
            {
                $strSql = $strSql." AND SER.ID_SERVICIO NOT IN (:ARRAY_ID_SERVICIOS_NOT)";
                $objNativeQuery->setParameter("ARRAY_ID_SERVICIOS_NOT", array_values($arrayParametros['arrayIdServiciosNot']));
            }

            $objNativeQuery->setParameter("ESTADO_SERVICIOS", array_values($arrayParametros['arrayEstadosServicios']));
            $objNativeQuery->setParameter("CAPACIDAD1",       $arrayParametros['strCapacidadUno']);
            $objNativeQuery->setParameter("CAPACIDAD2",       $arrayParametros['strCapacidadDos']);

            $objResultSetMap->addScalarResult('ID_SERVICIO',    'idServicio',          'integer');
            $objResultSetMap->addScalarResult('LOGIN_AUX',      'loginAux',            'string');
            $objResultSetMap->addScalarResult('NOMBRE_TECNICO', 'nombreTecnico',       'string');
            $objResultSetMap->addScalarResult('ESTADO',         'estado',              'string');
            $objResultSetMap->addScalarResult('CAPACIDAD1',     'capacidadUno',        'string');
            $objResultSetMap->addScalarResult('CAPACIDAD2',     'capacidadDos',        'string');

            $objNativeQuery->setSQL($strSql);
            $arrayData = $objNativeQuery->getScalarResult();

            $arrayResultado = array(
                'status' => 'OK',
                'result' => $arrayData
            );
        }
        catch (\Exception $e)
        {
            $arrayResultado = array(
                'status' => 'ERROR',
                'result' => $e->getMessage()
            );
        }
        return $arrayResultado;
    }
    
    
    /**
     * Función que obtiene información técnica de un enlace para una tarea de soporte.
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.1 05-07-2020  
     * 
     * Costo: 7 
     * 
     * @since 1.0
     * 
     * Se agrega lógica para obtener las Ips por medio de un filtrado. 
     * 
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.2 28-07-2020  
     * 
     * Costo: 6 
     * 
     * @since 1.1
     * @param arrayParametros
     * @return Array
     */
    public function getIpWanClienteSoporte($arrayParametros)
    {
        $objResultSetMap    = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery     = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        $strSql =  " SELECT iser.ID_SERVICIO, 
                    ap.ID_PRODUCTO,ap.DESCRIPCION_PRODUCTO, 
                    iser.LOGIN_AUX, ip.IP, ip.TIPO_IP, 
                    ap.ESTADO, ap.NOMBRE_TECNICO, ap.GRUPO
                    FROM DB_COMERCIAL.INFO_SERVICIO iser, 
                        DB_COMERCIAL.ADMI_PRODUCTO ap, 
                        DB_INFRAESTRUCTURA.INFO_IP ip
                    WHERE iser.ID_SERVICIO = :servicioId
                    and ap.ID_PRODUCTO = iser.PRODUCTO_ID
                    AND ap.ES_ENLACE = 'SI'
                    AND iser.ESTADO =  :estadoActivo 
                    AND ip.ESTADO =  :estadoActivo 
                    AND ip.TIPO_IP in ( :wanIp )
                    AND ip.SERVICIO_ID=iser.ID_SERVICIO
                    AND ROWNUM = 1
                    order by ip.TIPO_IP desc ";


        $objNativeQuery->setParameter("servicioId",         $arrayParametros['intServicioId']);
        $objNativeQuery->setParameter("esEnlace",           'SI');
        $objNativeQuery->setParameter("estadoActivo",       'Activo');
        $objNativeQuery->setParameter("wanIp",              $arrayParametros['arrayFiltro']);

        $objResultSetMap->addScalarResult('ID_SERVICIO',                    'servicioId',                   'integer');
        $objResultSetMap->addScalarResult('ID_PRODUCTO',                    'productoId',                   'integer');
        $objResultSetMap->addScalarResult('DESCRIPCION_PRODUCTO',           'descripcionProd',              'string');
        $objResultSetMap->addScalarResult('LOGIN_AUX',                      'loginAux',                     'string');
        $objResultSetMap->addScalarResult('IP',                             'ipWanCliente',                 'string');
        $objResultSetMap->addScalarResult('TIPO_IP',                        'tipoIp',                       'string');
        $objResultSetMap->addScalarResult('ESTADO',                         'estado',                       'string');
        $objResultSetMap->addScalarResult('NOMBRE_TECNICO',                 'nombreTecnico',                'string' );
        $objResultSetMap->addScalarResult('GRUPO',                          'grupo',                        'string' );
        
        $objNativeQuery->setSQL($strSql);
        $arrayDatos = $objNativeQuery->getScalarResult();
        
        return $arrayDatos[0];
    }


    /**
     * Función que obtiene la región de un cliente.
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.1 08-07-2020  
     * 
     * Costo: 12
     * 
     * @since 1.0
     * @param arrayParametros
     * @return Array
     */
    public function getRegionClienteSoporte($arrayParametros)
    {
        $objResultSetMap    = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery     = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        $strSql =  "SELECT 
                        areg.NOMBRE_REGION, apro.NOMBRE_PROVINCIA, 
                        acan.NOMBRE_CANTON, ipu.LOGIN, iser.ID_SERVICIO
                    FROM  
                        DB_COMERCIAL.INFO_SERVICIO iser,
                        DB_COMERCIAL.INFO_PUNTO ipu,
                        DB_GENERAL.ADMI_SECTOR asec, 
                        DB_GENERAL.ADMI_PARROQUIA apar, 
                        DB_GENERAL.ADMI_CANTON acan, 
                        DB_GENERAL.ADMI_PROVINCIA apro,
                        DB_GENERAL.ADMI_REGION areg
                    WHERE 
                        iser.ID_SERVICIO = :servicioId
                        AND ipu.ID_PUNTO = iser.PUNTO_ID
                        AND asec.ID_SECTOR = ipu.SECTOR_ID
                        AND apar.ID_PARROQUIA = asec.PARROQUIA_ID
                        AND acan.ID_CANTON = apar.CANTON_ID
                        AND apro.ID_PROVINCIA = acan.PROVINCIA_ID
                        AND areg.ID_REGION = apro.REGION_ID";

        $objNativeQuery->setParameter("servicioId",         $arrayParametros['intServicioId']);
                
        $objResultSetMap->addScalarResult('NOMBRE_REGION',           'nombreRegion',              'string');
        $objResultSetMap->addScalarResult('NOMBRE_PROVINCIA',        'nombreProvincia',           'string');
        $objResultSetMap->addScalarResult('NOMBRE_CANTON',           'nombreCanton',              'string');
        $objResultSetMap->addScalarResult('LOGIN',                   'login',                     'string');
        $objResultSetMap->addScalarResult('ID_SERVICIO',             'servicioId',                'integer');
        
        $objNativeQuery->setSQL($strSql);
        $arrayDatos = $objNativeQuery->getScalarResult();
        return $arrayDatos[0];
    }
    
   /**
     * Funcion que sirve para consultar el id sucriber 
     * atravez del login de usuario
     * 
     * @author Kevin Ortiz <kcortiz@telconet.ec>
     * @version 1.0 22-10-2020
     * 
     * 
     * @param array $arrayParametros
     * @return array $arrayInformacionsubscriber
     */
    public function getListadoSubscriberWs($arrayParametros)
    {
       
        try 
        {
             //inicializacion de variables
            $strStatus               = "";
            $strMensaje              = "";
            $intContador             = 0;
            $arrayOciCon             = $arrayParametros['ociCon'];
            $arrayResultado          = array();
            $objRscCon               = oci_connect($arrayOciCon['user_comercial'], 
                                                   $arrayOciCon['passwd_comercial'], 
                                                   $arrayOciCon['dsn']);
                                                   
            $objCursorResult         = oci_new_cursor($objRscCon);   
            $arrayInformacionsubscriber = array();
    
            
            //definicion del procedure a ejecutar
            $strSql  = 'BEGIN DB_COMERCIAL.TECNK_SERVICIOS.P_WS_GET_CONSULTA_SUBSCRIBER(:Pv_Login,
                                                                           :Prf_Result,
                                                                           :Pv_Status,
                                                                           :Pv_Mensaje); END;';
            $objStmt = oci_parse($objRscCon,$strSql);
            
            oci_bind_by_name($objStmt,':Pv_Login'         ,$arrayParametros['strLogin']);
            oci_bind_by_name($objStmt,':Prf_Result'       ,$objCursorResult,-1,OCI_B_CURSOR);
            oci_bind_by_name($objStmt,':Pv_Status'        ,$strStatus,10);
            oci_bind_by_name($objStmt,':Pv_Mensaje'       ,$strMensaje,2000);
            
            oci_execute($objStmt);
            oci_execute($objCursorResult, OCI_DEFAULT);
            
        
            //recorrer el cursor para obtener los datos
            while($arrayRow = oci_fetch_array($objCursorResult))
            {
            
               $arrayResultado['suscriberId']     = $arrayRow['VALOR'];
               $arrayResultado['tipo']            = $arrayRow['TIPO'];
               $arrayResultado['estado']          = $arrayRow['ESTADO'];
               

                $arrayInformacionsubscriber['data']['suscribers'][] =  $arrayResultado; 
              
            }
            
            if(empty($arrayInformacionsubscriber['data']['suscribers']) )
            {
                $arrayInformacionsubscriber['strStatus']  = 'Error'; 
                $arrayInformacionsubscriber['strMensaje'] = 'No existe información del cliente consultado';
            }
            else 
            //valor de suscriberId encontrado.
            {
                $arrayInformacionsubscriber['strStatus']  = $strStatus; 
                $arrayInformacionsubscriber['strMensaje'] = $strMensaje;
            }
        
            
        } 
        catch (\Exception $ex) 
        {
             
             $arrayInformacionsubscriber['strStatus']   = "ERROR";  
             $arrayInformacionsubscriber['strMensaje']  = "Problemas al recuperar Información de listado de subscriber";
        }

       
        return $arrayInformacionsubscriber;
    }
    
    /**
     * Funcion que sirve para Actulizar el estado de un servicio kaspersky
     * atravez del suscriber_id
     * 
     * @author Kevin Ortiz <kcortiz@telconet.ec>
     * @version 1.0 22-10-2020
     * 
     * 
     * @param array $arrayParametros
     * @return array $arrayInfo
     */
    public function subscriberWs($arrayParametros)
    {
       
        try 
        {
             //inicializacion de variables
            $strStatus               = "";
            $strMensaje              = "";
            $intContador             = 0;
            $arrayOciCon             = $arrayParametros['ociCon'];
            $objRscCon               = oci_connect($arrayOciCon['user_comercial'], 
                                                   $arrayOciCon['passwd_comercial'], 
                                                   $arrayOciCon['dsn']);
                                                   
            $objCursorResult         = oci_new_cursor($objRscCon);   
            
            //definicion del procedure a ejecutar
            $strSql  = 'BEGIN DB_COMERCIAL.TECNK_SERVICIOS.P_WS_PUT_SUBSCRIBER(:Pv_ID_SUBSCRIBER,
                                                                               :Pv_Origen_Act,
                                                                               :Pv_User,
                                                                               :Pv_Status,
                                                                               :Pv_Mensaje); END;';
            $objStmt = oci_parse($objRscCon,$strSql);
            
            oci_bind_by_name($objStmt,':Pv_ID_SUBSCRIBER' ,$arrayParametros['strSuscriber_id']);
            oci_bind_by_name($objStmt,':Pv_Origen_Act'    ,$arrayParametros['strOrigen_Act']);
            oci_bind_by_name($objStmt,':Pv_User'          ,$arrayParametros['strUser']);
            oci_bind_by_name($objStmt,':Pv_Status'        ,$strStatus,10);
            oci_bind_by_name($objStmt,':Pv_Mensaje'       ,$strMensaje,2000);
            oci_execute($objStmt);
            
           

            if( $strStatus == 'ERROR')
            {
                $arrayInfo['strStatus']  = 'ERROR'; 
                $arrayInfo['strMensaje'] = $strMensaje;
               
            } 
            else if($strStatus == 'OK')
            {
                $arrayInfo['strStatus']  = 'OK'; 
                $arrayInfo['strMensaje'] = 'Suscriber Activado';
              
            }
            else
            {
                $arrayInfo['strStatus']  = 'ERROR'; 
                $arrayInfo['strMensaje'] = 'No se ejecutó el procedimiento';
               
            } 
            
        } 
        catch (\Exception $ex) 
        {
             
             $arrayInfo['strStatus']   = "ERROR";  
             $arrayInfo['strMensaje']  = "Problemas al recuperar Información subscriber";
        }
       
        return $arrayInfo;
    }
    
    /**
     * Documentación para el método 'getRadioPorClienteTN'.
     *
     * Obtiene el listado de los radios por cliente
     *
     * @author Antonio Ayala <facaicedo@telconet.ec>
     * @version 1.0 27-11-2020
     *
     * @param Array $arrayParametros [
     *                                  intIdEmpresa          => id de la empresa
     *                                  intIdPerEmpRol        => id del cliente
     *                                  intIdPunto            => id del punto
     *                                  arrayIdServicios      => array de id de servicios
     *                                  strTipoEnlace         => tipo enlace
     *                                  strGrupo              => grupo de los servicios
     *                                  strEstadoPunto        => estado del punto
     *                                  strEstadoServicio     => estado de los servicios
     *                                  strLogin              => login del punto
     *                               ]
     *
     * @return Array $arrayResultado [
     *                                  'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                  'result'    => arreglo con la información de los radios o mensaje de error
     *                               ]
     *
     * costoQuery: 19
     */
    public function getRadioPorClienteTN($arrayParametros)
    {
        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
            $strSql          = "SELECT PUN.ID_PUNTO, PUN.LOGIN, ELE.ID_ELEMENTO, ELE.NOMBRE_ELEMENTO, ELE.ESTADO, ELE.MODELO_ELEMENTO_ID, 
                                MOD.NOMBRE_MODELO_ELEMENTO, MAR.NOMBRE_MARCA_ELEMENTO,
                                CASE WHEN DET.DETALLE_VALOR  IS NULL THEN 'SI' ELSE DET.DETALLE_VALOR END AS DETALLE_VALOR
                            FROM DB_COMERCIAL.INFO_SERVICIO SER
                            INNER JOIN DB_COMERCIAL.INFO_PUNTO                   PUN ON PUN.ID_PUNTO              = SER.PUNTO_ID
                            INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO        TEC ON SER.ID_SERVICIO           = TEC.SERVICIO_ID
                                       AND TEC.ULTIMA_MILLA_ID = 2
                            INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO                PRO ON SER.PRODUCTO_ID           = PRO.ID_PRODUCTO
                            INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL     PER ON PER.ID_PERSONA_ROL        = PUN.PERSONA_EMPRESA_ROL_ID
                            INNER JOIN DB_COMERCIAL.INFO_PERSONA                 P   ON P.ID_PERSONA              = PER.PERSONA_ID
                            INNER JOIN DB_COMERCIAL.INFO_EMPRESA_ROL             ER  ON ER.ID_EMPRESA_ROL         = PER.EMPRESA_ROL_ID
                            INNER JOIN DB_COMERCIAL.INFO_EMPRESA_GRUPO           EG  ON EG.COD_EMPRESA            = ER.EMPRESA_COD
                            INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO          ELE ON ELE.ID_ELEMENTO           = TEC.ELEMENTO_CLIENTE_ID
                            INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO   MOD ON MOD.ID_MODELO_ELEMENTO    = ELE.MODELO_ELEMENTO_ID
                            INNER JOIN DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO    MAR ON MAR.ID_MARCA_ELEMENTO     = MOD.MARCA_ELEMENTO_ID
                            LEFT JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO   DET ON DET.ELEMENTO_ID           = ELE.ID_ELEMENTO
                                      AND DET.DETALLE_NOMBRE = :TIPO_OPERATIVO
                            WHERE PUN.PERSONA_EMPRESA_ROL_ID = :ID_CLIENTE
                            AND PUN.ESTADO = :ESTADO_PUNTO
                            AND SER.ESTADO = :ESTADO_SERVICIO
                            AND EG.COD_EMPRESA = :ID_EMPRESA";
            
            if( isset($arrayParametros['intIdPunto']) && !empty($arrayParametros['intIdPunto']) )
            {
                $strSql = $strSql." AND PUN.ID_PUNTO = :ID_PUNTO";
                $objNativeQuery->setParameter("ID_PUNTO",               $arrayParametros['intIdPunto']);
            }
            if( isset($arrayParametros['arrayIdServicios']) && is_array($arrayParametros['arrayIdServicios']) && 
                !empty($arrayParametros['arrayIdServicios']) )
            {
                $strSql = $strSql." AND ELE.ID_ELEMENTO NOT IN (:ARRAY_ID_SERVICIOS)";
                $objNativeQuery->setParameter("ARRAY_ID_SERVICIOS",     array_values($arrayParametros['arrayIdServicios']));
            }
            if( isset($arrayParametros['strLogin']) && !empty($arrayParametros['strLogin']) )
            {
                $strSql = $strSql." AND PUN.LOGIN LIKE :LOGIN";
                $objNativeQuery->setParameter("LOGIN",                  '%'.$arrayParametros['strLogin'].'%');
            }
            
            $strSql = $strSql." UNION SELECT PUN.ID_PUNTO, PUN.LOGIN, ELE.ID_ELEMENTO, ELE.NOMBRE_ELEMENTO, ELE.ESTADO, ELE.MODELO_ELEMENTO_ID, 
                                MOD.NOMBRE_MODELO_ELEMENTO, MAR.NOMBRE_MARCA_ELEMENTO,
                                CASE WHEN DET.DETALLE_VALOR  IS NULL THEN 'SI' ELSE DET.DETALLE_VALOR END AS DETALLE_VALOR
                            FROM DB_COMERCIAL.INFO_SERVICIO SER
                            INNER JOIN DB_COMERCIAL.INFO_PUNTO                   PUN ON PUN.ID_PUNTO              = SER.PUNTO_ID
                            INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO        TEC ON SER.ID_SERVICIO           = TEC.SERVICIO_ID
                                       AND TEC.ULTIMA_MILLA_ID = 2
                            INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO                PRO ON SER.PRODUCTO_ID           = PRO.ID_PRODUCTO
                            INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL     PER ON PER.ID_PERSONA_ROL        = PUN.PERSONA_EMPRESA_ROL_ID
                            INNER JOIN DB_COMERCIAL.INFO_PERSONA                 P   ON P.ID_PERSONA              = PER.PERSONA_ID
                            INNER JOIN DB_COMERCIAL.INFO_EMPRESA_ROL             ER  ON ER.ID_EMPRESA_ROL         = PER.EMPRESA_ROL_ID
                            INNER JOIN DB_COMERCIAL.INFO_EMPRESA_GRUPO           EG  ON EG.COD_EMPRESA            = ER.EMPRESA_COD
                            INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO          ELE ON ELE.ID_ELEMENTO           = TEC.ELEMENTO_CONECTOR_ID
                            INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO   MOD ON MOD.ID_MODELO_ELEMENTO    = ELE.MODELO_ELEMENTO_ID
                            INNER JOIN DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO    MAR ON MAR.ID_MARCA_ELEMENTO     = MOD.MARCA_ELEMENTO_ID
                            LEFT JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO   DET ON DET.ELEMENTO_ID           = ELE.ID_ELEMENTO
                                      AND DET.DETALLE_NOMBRE = :TIPO_OPERATIVO
                            WHERE PUN.PERSONA_EMPRESA_ROL_ID = :ID_CLIENTE
                            AND PUN.ESTADO = :ESTADO_PUNTO
                            AND SER.ESTADO = :ESTADO_SERVICIO
                            AND EG.COD_EMPRESA = :ID_EMPRESA";
            
            if( isset($arrayParametros['intIdPunto']) && !empty($arrayParametros['intIdPunto']) )
            {
                $strSql = $strSql." AND PUN.ID_PUNTO = :ID_PUNTO";
                $objNativeQuery->setParameter("ID_PUNTO",               $arrayParametros['intIdPunto']);
            }
            if( isset($arrayParametros['arrayIdServicios']) && is_array($arrayParametros['arrayIdServicios']) && 
                !empty($arrayParametros['arrayIdServicios']) )
            {
                $strSql = $strSql." AND ELE.ID_ELEMENTO NOT IN (:ARRAY_ID_SERVICIOS)";
                $objNativeQuery->setParameter("ARRAY_ID_SERVICIOS",     array_values($arrayParametros['arrayIdServicios']));
            }
            if( isset($arrayParametros['strLogin']) && !empty($arrayParametros['strLogin']) )
            {
                $strSql = $strSql." AND PUN.LOGIN LIKE :LOGIN";
                $objNativeQuery->setParameter("LOGIN",                  '%'.$arrayParametros['strLogin'].'%');
            }

            $strSql = $strSql." GROUP BY PUN.ID_PUNTO, PUN.LOGIN, ELE.ID_ELEMENTO, ELE.NOMBRE_ELEMENTO, ELE.ESTADO, ELE.MODELO_ELEMENTO_ID,
                                     MOD.NOMBRE_MODELO_ELEMENTO, MAR.NOMBRE_MARCA_ELEMENTO, DET.DETALLE_VALOR";

            $objNativeQuery->setParameter("ID_EMPRESA",                 $arrayParametros['intIdEmpresa']);
            $objNativeQuery->setParameter("ID_CLIENTE",                 $arrayParametros['intIdPerEmpRol']);
            $objNativeQuery->setParameter("ESTADO_PUNTO",               $arrayParametros['strEstadoPunto']);
            $objNativeQuery->setParameter("ESTADO_SERVICIO",            $arrayParametros['strEstadoServicio']);
            $objNativeQuery->setParameter("TIPO_PROCESO",               $arrayParametros['strTipoProcesoCab']);
            $objNativeQuery->setParameter("TIPO_OPERATIVO",             $arrayParametros['strTipoOperativo']);
            
            $objResultSetMap->addScalarResult('ID_PUNTO',               'idLogin',              'integer');
            $objResultSetMap->addScalarResult('LOGIN',                  'login',                'string');
            $objResultSetMap->addScalarResult('ID_ELEMENTO',            'idElemento',           'integer');
            $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO',        'nombreElemento',       'string');
            $objResultSetMap->addScalarResult('ESTADO',                 'estado',               'string');
            $objResultSetMap->addScalarResult('NOMBRE_MODELO_ELEMENTO', 'nombreModeloElemento', 'string');
            $objResultSetMap->addScalarResult('NOMBRE_MARCA_ELEMENTO',  'nombreMarcaElemento',  'string');
            $objResultSetMap->addScalarResult('DETALLE_VALOR',          'esOperativo',          'string');
            
            $objNativeQuery->setSQL($strSql);
            $arrayData = $objNativeQuery->getScalarResult();

            $arrayResultado = array(
                'status' => 'OK',
                'result' => $arrayData
            );
        }
        catch (\Exception $e)
        {
            $arrayResultado = array(
                'status' => 'ERROR',
                'result' => $e->getMessage()
            );
        }
        return $arrayResultado;
    }
    
    /**
     * Metodo encargado de devolver la información del concentrador con todos sus Extremos para ser visualizado en la "Vista Técnica" de cada
     * servicio, se mostrarán los servicios excepto los que se encuentren en estado:
     * 
     *  - Eliminado
     *  - Anulado
     *  - Rechazada
     * 
     * Costo del Query : 32
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 - Se agrega validacion de TIPO_IP = 'WAN' en subconsulta de la tabla INFO_IP para que no el resultado no devuelva mas
     *                de una fila
     * @since 23-11-2020 
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.1 25-01-2022 - Se agrega validacion de TIPO_IP = 'WAN' en segunda subconsulta de la tabla INFO_IP 
     *                           para que no el resultado no devuelva mas de una fila
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.2 28-01-2022 - Se agrega MAX a la subconsulta de la tabla INFO_IP para que no retorne Ips duplicadas
     * 
     * @param  integer $intIdServicioConcentrador Id del Servicio Concentrador
     * @return Array $arrayCapacidades [ tipo             Tipo de Servicio ( EXTREMO/CONCENTRADOR )
     *                                   idServicio       id de cada Servicio del Array
     *                                   loginAux         Login Auxiliar ligado al Servicio
     *                                   login            Login Padre
     *                                   codigoUM         Codigo segun ultima milla ( Fibra Optica = FO , UTP , RAD )
     *                                   capacidadUno     Capacidad Up de cada servicio
     *                                   capacidadDos     Capacidad Down de cada servicio
     *                                   estado           Estado de cada servicio
     *                                   ip               Ip de cada servicio
     *                                 ]
     */
    public function getArrayInformacionDataConcentradorExtremo($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery = $this->_em->createNativeQuery(null, $objResultSetMap);

        $strSql = "  SELECT * FROM (
                               (
                                    SELECT   
                                      'EXTREMO' TIPO,
                                      SERVICIO.ID_SERVICIO,
                                      NVL(SERVICIO.LOGIN_AUX,'NA') LOGIN_AUX,
                                      PUNTO.LOGIN,
                                      MEDIO.CODIGO_TIPO_MEDIO,
                                      NVL((DB_COMERCIAL.TECNK_SERVICIOS.
                                                GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:CAPACIDAD1)),0) TOTAL_CAPACIDAD1,
                                      NVL((DB_COMERCIAL.TECNK_SERVICIOS.
                                                GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:CAPACIDAD2)),0) TOTAL_CAPACIDAD2,
                                      SERVICIO.ESTADO,
                                      NVL((SELECT IP FROM 
                                                  DB_INFRAESTRUCTURA.INFO_IP WHERE SERVICIO_ID = SERVICIO.ID_SERVICIO AND ESTADO = :estado
                                                  AND TIPO_IP = :strTipoIp AND ID_IP = (SELECT MAX(ID_IP) FROM 
                                                  DB_INFRAESTRUCTURA.INFO_IP WHERE SERVICIO_ID = SERVICIO.ID_SERVICIO AND ESTADO = :estado
                                                  AND TIPO_IP = :strTipoIp)),'NA') IP
                                    FROM 
                                      DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT CARACT,
                                      DB_COMERCIAL.INFO_SERVICIO SERVICIO,
                                      DB_COMERCIAL.INFO_SERVICIO_TECNICO TECNICO,
                                      DB_INFRAESTRUCTURA.ADMI_TIPO_MEDIO MEDIO,
                                      DB_COMERCIAL.INFO_PUNTO PUNTO,
                                      DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA ADMI_PROD_CARACT,
                                      DB_COMERCIAL.ADMI_CARACTERISTICA ADMI_CARACT
                                    WHERE CARACT.SERVICIO_ID                   = SERVICIO.ID_SERVICIO
                                    AND TECNICO.SERVICIO_ID                    = SERVICIO.ID_SERVICIO
                                    AND TECNICO.ULTIMA_MILLA_ID                = MEDIO.ID_TIPO_MEDIO
                                    AND PUNTO.ID_PUNTO                         = SERVICIO.PUNTO_ID
                                    AND CARACT.PRODUCTO_CARACTERISITICA_ID     = ADMI_PROD_CARACT.ID_PRODUCTO_CARACTERISITICA
                                    AND ADMI_PROD_CARACT.CARACTERISTICA_ID     = ADMI_CARACT.ID_CARACTERISTICA
                                    AND ADMI_CARACT.DESCRIPCION_CARACTERISTICA = :caracteristica
                                    AND CARACT.ESTADO                          = :estado
                                    AND CARACT.VALOR                           = :idConcentrador
                                    AND SERVICIO.ESTADO                       NOT IN (:estadosDiscriminados)
                                )
                                UNION
                                (
                                  SELECT 'CONCENTRADOR' TIPO,
                                    SERVICIO.ID_SERVICIO,
                                    NVL(SERVICIO.LOGIN_AUX,'NA') LOGIN_AUX,
                                    PUNTO.LOGIN,
                                    MEDIO.CODIGO_TIPO_MEDIO,
                                    NVL((DB_COMERCIAL.TECNK_SERVICIOS.
                                                    GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:CAPACIDAD1)),0) TOTAL_CAPACIDAD1,
                                    NVL((DB_COMERCIAL.TECNK_SERVICIOS.
                                                    GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:CAPACIDAD2)),0) TOTAL_CAPACIDAD2,
                                    SERVICIO.ESTADO,
                                    NVL((SELECT IP FROM 
                                                DB_INFRAESTRUCTURA.INFO_IP WHERE SERVICIO_ID = SERVICIO.ID_SERVICIO AND ESTADO = :estado
                                                AND TIPO_IP = :strTipoIp AND ID_IP = (SELECT MAX(ID_IP) FROM 
                                                  DB_INFRAESTRUCTURA.INFO_IP WHERE SERVICIO_ID = SERVICIO.ID_SERVICIO AND ESTADO = :estado
                                                  AND TIPO_IP = :strTipoIp)),'NA') IP
                                  FROM 
                                    DB_COMERCIAL.INFO_SERVICIO SERVICIO,
                                    DB_COMERCIAL.INFO_SERVICIO_TECNICO TECNICO,
                                    DB_INFRAESTRUCTURA.ADMI_TIPO_MEDIO MEDIO,
                                    DB_COMERCIAL.INFO_PUNTO PUNTO
                                  WHERE SERVICIO.ID_SERVICIO  = :idConcentrador
                                  AND TECNICO.SERVICIO_ID     = SERVICIO.ID_SERVICIO
                                  AND TECNICO.ULTIMA_MILLA_ID = MEDIO.ID_TIPO_MEDIO
                                  AND PUNTO.ID_PUNTO          = SERVICIO.PUNTO_ID
                                  AND SERVICIO.ESTADO         NOT IN (:estadosDiscriminados)
                                  )
                                )  ORDER BY TIPO DESC ";


        $objResultSetMap->addScalarResult('TIPO',              'tipo',         'string');
        $objResultSetMap->addScalarResult('ID_SERVICIO',       'idServicio',   'integer');
        $objResultSetMap->addScalarResult('LOGIN_AUX',         'loginAux',     'string');
        $objResultSetMap->addScalarResult('LOGIN',             'login',        'string');
        $objResultSetMap->addScalarResult('CODIGO_TIPO_MEDIO', 'codigoUM',     'string');
        $objResultSetMap->addScalarResult('TOTAL_CAPACIDAD1',  'capacidadUno', 'integer');
        $objResultSetMap->addScalarResult('TOTAL_CAPACIDAD2',  'capacidadDos', 'integer');
        $objResultSetMap->addScalarResult('ESTADO',            'estado',       'string');
        $objResultSetMap->addScalarResult('IP',                'ip',           'string');

        $objNativeQuery->setParameter("CAPACIDAD1", 'CAPACIDAD1');
        $objNativeQuery->setParameter("CAPACIDAD2", 'CAPACIDAD2');
        $objNativeQuery->setParameter("estado", 'Activo');
        $objNativeQuery->setParameter("caracteristica", 'ENLACE_DATOS');
        $objNativeQuery->setParameter("idConcentrador", $arrayParametros['intIdServicioConcentrador']);
        $objNativeQuery->setParameter("strTipoIp", $arrayParametros['strTipoIp']);
        $objNativeQuery->setParameter("estadosDiscriminados", $arrayParametros['estadosDiscriminados']);

        $objNativeQuery->setSQL($strSql);

        $arrayCapacidades = $objNativeQuery->getArrayResult();

        return $arrayCapacidades;
    }
    
    
 
    /**
     * Función que retorna el valor de una bandera que indica si el producto configura servicios de Netlifecam en el punto enviado como parámetro.
     * 
     * @author Edgar Holguín <eholguín@telconet.ec>
     * @version 1.0 02-03-2021
     * @since 1.0
     * 
     * @param array $arrayParametros ['strCodEmpresa' => código empresa,'intIdProducto' => id del producto]
     */
    public function getEsServicioNetlifeCam($arrayParametros)
    {
        $strFacturaNetlifecam = 'N';

        $arrayParametrosProductoPermitido = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                             ->getOne('PROYECTO NETLIFECAM',
                                                                      'INFRAESTRUCTURA',
                                                                      'ACTIVACION PARA NETLIFECAM',
                                                                      "PRODUCTO CONFIGURADO PARA REGISTRAR ELEMENTO",
                                                                      $arrayParametros['intIdProducto'],
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      $arrayParametros['strCodEmpresa']);

        if(isset($arrayParametrosProductoPermitido["valor1"]) && !empty($arrayParametrosProductoPermitido["valor1"]))
        {
            $strFacturaNetlifecam = 'S';
        }
                    
        return $strFacturaNetlifecam;
    }
    
    
    /**
     * Función que sirve para obtener los puntos a cortar masivamente de acuerdo a los filtros enviados por el usuario
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 07-06-2021
     * 
     * @param array $arrayParametros [
     *                                  "ociConexion"           => Paŕametros para la conexión a la Base de Datos
     *                                  "arrayFiltrosBusqueda"  => Arreglo con los parámetros de búsqueda de la consulta
     *                                                             "strCodEmpresa"      => id de la empresa
     *                                                             "strIdentificacion"  => identificación del cliente
     *                                                             "strLogin"           => login del punto
     *                                                             "strTipoRol"         => descripción del tipo rol
     *                                                             "strSerieOnt"        => serie del ont
     *                                                             "strMacOnt"          => mac del ont
     *                                                             "strPrefijoEmpresa"  => prefijo de la empresa
     *                                                             "strNumParamsMaximo" => número de parámetros máximos para realizar la consulta 
     *                                ]
     * @return array $arrayRespuesta [
     *                                  "status"                => OK o ERROR,
     *                                  "mensaje"               => Mensaje de error,
     *                                  "arrayData"             => Registros obtenidos de la consulta
     *                                ]
     */
    public function getRespuestaInfoClienteWs($arrayParametros)
    {
        $arrayOciConexion       = $arrayParametros['ociConexion'];
        $strStatus              = "";
        $strMsjError            = "";
        $strMostrarMsjUsuario   = "NO";
        try
        {
            $arrayFiltrosBusqueda   = $arrayParametros["arrayFiltrosBusqueda"];
            if(isset($arrayFiltrosBusqueda) && !empty($arrayFiltrosBusqueda))
            {
                $strJsonFiltrosBusqueda     = json_encode($arrayFiltrosBusqueda);
                $objOciConexion             = oci_connect(  $arrayOciConexion['user_comercial'], 
                                                            $arrayOciConexion['passwd_comercial'], 
                                                            $arrayOciConexion['dsn'],'AL32UTF8');
                $strSql                     = "BEGIN
                                                DB_COMERCIAL.TECNK_SERVICIOS.P_GET_RESPUESTA_INFOCLIENTE_WS
                                                (
                                                    :Pcl_JsonFiltrosBusqueda,
                                                    :Pv_Status,
                                                    :Pv_MsjError,
                                                    :Pcl_JsonRespuesta
                                                );
                                               END;";

                $objStmt                    = oci_parse($objOciConexion,$strSql);
                $strClobJsonFiltrosBusqueda = oci_new_descriptor($objOciConexion);
                $strClobJsonFiltrosBusqueda->writetemporary($strJsonFiltrosBusqueda);
                $strClobJsonRespuesta       = oci_new_descriptor($objOciConexion);
                $strClobJsonRespuesta->writetemporary($strRespuesta);
                oci_bind_by_name($objStmt, ":Pcl_JsonFiltrosBusqueda", $strClobJsonFiltrosBusqueda, -1, OCI_B_CLOB);
                oci_bind_by_name($objStmt, ":Pv_Status",               $strStatus, 5);
                oci_bind_by_name($objStmt, ":Pv_MsjError",             $strMsjError, 4000);
                oci_bind_by_name($objStmt, ":Pcl_JsonRespuesta", $strClobJsonRespuesta, -1, OCI_B_CLOB);
                oci_execute($objStmt);

                if($strStatus === "OK")
                {
                    $arrayRespuesta = json_decode($strClobJsonRespuesta->load(), true);
                }
                else
                {
                    $strMostrarMsjUsuario = "SI";
                    throw new \Exception($strMsjError);
                }
                oci_free_statement($objStmt);
                oci_close($objOciConexion);
            }
            else
            {
                $strMostrarMsjUsuario = "SI";
                throw new \Exception('No se han enviado los parámetros de búsqueda para realizar la consulta');
            }
        }
        catch (\Exception $e) 
        {
            if($strMostrarMsjUsuario === "SI")
            {
                $strMsjError = $e->getMessage();
            }
            else
            {
                $strMsjError = "Ha ocurrido una excepción al intentar realizar la consulta";
            }
            error_log("Error en getRespuestaInfoClienteWs ".$e->getMessage());
            
            $arrayRespuesta = array("strStatus"     => "ERROR",
                                    "strMensaje"    => $strMsjError,
                                    "arrayData"     => array());
        }
        return $arrayRespuesta;
    }

    /**
     * Función que sirve para obtener los puntos a cortar masivamente de acuerdo a los filtros enviados por el usuario
     *
     * @param array $arrayParametros [
     *                                  "ociConexion"           => Paŕametros para la conexión a la Base de Datos
     *                                  "arrayFiltrosBusqueda"  => Arreglo con los parámetros de búsqueda de la consulta
     *                                                             "strCodEmpresa"      => id de la empresa
     *                                                             "strIdentificacion"  => identificación del cliente
     *                                                             "strLogin"           => login del punto
     *                                                             "strTipoRol"         => descripción del tipo rol
     *                                                             "strSerieOnt"        => serie del ont
     *                                                             "strMacOnt"          => mac del ont
     *                                                             "strPrefijoEmpresa"  => prefijo de la empresa
     *                                                             "strNumParamsMaximo" => número de parámetros máximos para realizar la consulta 
     *                                ]
     * @return array $arrayRespuesta [
     *                                  "status"                => OK o ERROR,
     *                                  "mensaje"               => Mensaje de error,
     *                                  "arrayData"             => Registros obtenidos de la consulta
     *                                ]
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 18-08-2021
     */
    public function getRespuestaInfoClienteAcs($arrayParametros)
    {
        $arrayOciConexion       = $arrayParametros['ociConexion'];
        $strStatus              = "";
        $strMsjError            = "";
        $strMostrarMsjUsuario   = "NO";
        try
        {
            $arrayFiltrosBusqueda   = $arrayParametros["arrayFiltrosBusqueda"];
            if(isset($arrayFiltrosBusqueda) && !empty($arrayFiltrosBusqueda))
            {
                $strJsonFiltrosBusqueda     = json_encode($arrayFiltrosBusqueda);
                $objOciConexion             = oci_connect(  $arrayOciConexion['user_comercial'],
                                                            $arrayOciConexion['passwd_comercial'],
                                                            $arrayOciConexion['dsn'],'AL32UTF8');
                $strSql                     = "BEGIN
                                                DB_COMERCIAL.TECNK_SERVICIOS.P_GET_INFOCLIENTE_ACS
                                                (
                                                    :Pcl_JsonFiltrosBusqueda,
                                                    :Pv_Status,
                                                    :Pv_MsjError,
                                                    :Pcl_JsonRespuesta
                                                );
                                               END;";

                $objStmt                    = oci_parse($objOciConexion,$strSql);
                $strClobJsonFiltrosBusqueda = oci_new_descriptor($objOciConexion);
                $strClobJsonFiltrosBusqueda->writetemporary($strJsonFiltrosBusqueda);
                $strClobJsonRespuesta       = oci_new_descriptor($objOciConexion);
                $strClobJsonRespuesta->writetemporary($strRespuesta);
                oci_bind_by_name($objStmt, ":Pcl_JsonFiltrosBusqueda", $strClobJsonFiltrosBusqueda, -1, OCI_B_CLOB);
                oci_bind_by_name($objStmt, ":Pv_Status",               $strStatus, 5);
                oci_bind_by_name($objStmt, ":Pv_MsjError",             $strMsjError, 4000);
                oci_bind_by_name($objStmt, ":Pcl_JsonRespuesta", $strClobJsonRespuesta, -1, OCI_B_CLOB);
                oci_execute($objStmt);

                if($strStatus === "OK")
                {
                    $arrayRespuesta = json_decode($strClobJsonRespuesta->load(), true);
                }
                else
                {
                    $strMostrarMsjUsuario = "SI";
                    throw new \Exception($strMsjError);
                }
                oci_free_statement($objStmt);
                oci_close($objOciConexion);

            }
            else
            {
                $strMostrarMsjUsuario = "SI";
                throw new \Exception('No se han enviado los parámetros de búsqueda para realizar la consulta');
            }
        }
        catch (\Exception $e)
        {
            if($strMostrarMsjUsuario === "SI")
            {
                $strMsjError = $e->getMessage();
            }
            else
            {
                $strMsjError = "Ha ocurrido una excepción al intentar realizar la consulta";
            }
            error_log("Error en getRespuestaInfoClienteAcs ".$e->getMessage());

            $arrayRespuesta = array("strStatus"     => "ERROR",
                                    "strMensaje"    => $strMsjError,
                                    "arrayData"     => array());
        }
        return $arrayRespuesta;
    }
    
    /**
     * Metodo encargado de devolver la información del equipo cpe del servicio Security NG Firewall
     * 
     * Costo del Query : 48
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 - Se consulta la información del equipo cpe del servicio Security NG Firewall
     * @since 24-08-2021 
     * 
     * @param array $arrayParametros [
     *                                  "intIdServicio" => Id del servicio 
     *                               ]
     * @return Array $arrayCapacidades [ tipo             Tipo de Servicio ( EXTREMO/CONCENTRADOR )
     *                                   idServicio       id de cada Servicio del Array
     *                                   loginAux         Login Auxiliar ligado al Servicio
     *                                   login            Login Padre
     *                                   codigoUM         Codigo segun ultima milla ( Fibra Optica = FO , UTP , RAD )
     *                                   capacidadUno     Capacidad Up de cada servicio
     *                                   capacidadDos     Capacidad Down de cada servicio
     *                                   estado           Estado de cada servicio
     *                                   ip               Ip de cada servicio
     *                                 ]
     */
    public function getArrayInformacionCpe($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery = $this->_em->createNativeQuery(null, $objResultSetMap);

        $strSql = "  SELECT INTER.NOMBRE_INTERFACE_ELEMENTO,INTER.ESTADO,INTER.MAC_INTERFACE_ELEMENTO, ELE.ID_ELEMENTO,
                            ELE.NOMBRE_ELEMENTO, ELE.DESCRIPCION_ELEMENTO, ELE.SERIE_FISICA, MOD.NOMBRE_MODELO_ELEMENTO, 
                            MOD.DESCRIPCION_MODELO_ELEMENTO,
                            MARC.NOMBRE_MARCA_ELEMENTO, TIP.NOMBRE_TIPO_ELEMENTO, INFO.IP
                            FROM DB_INFRAESTRUCTURA.INFO_DETALLE_INTERFACE DET,
                                   DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INTER,
                                   DB_INFRAESTRUCTURA.INFO_ELEMENTO ELE,
                                   DB_INFRAESTRUCTURA.INFO_IP INFO,
                                   DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MOD,
                                   DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO MARC,
                                   DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIP
                     WHERE DETALLE_VALOR = :idServicio
                     AND INTER.ID_INTERFACE_ELEMENTO = DET.INTERFACE_ELEMENTO_ID
                     AND INTER.ESTADO = :estado
                     AND ELE.ID_ELEMENTO = INTER.ELEMENTO_ID
                     AND ELE.MODELO_ELEMENTO_ID = MOD.ID_MODELO_ELEMENTO
                     AND MOD.MARCA_ELEMENTO_ID = MARC.ID_MARCA_ELEMENTO
                     AND MOD.TIPO_ELEMENTO_ID = TIP.ID_TIPO_ELEMENTO
                     AND INFO.SERVICIO_ID = :idServicio ";


        $objResultSetMap->addScalarResult('NOMBRE_INTERFACE_ELEMENTO','nombreInterfaceElemento','string');
        $objResultSetMap->addScalarResult('ESTADO','estadoInterfaceElemento','string');
        $objResultSetMap->addScalarResult('MAC_INTERFACE_ELEMENTO','macInterfaceElemento','string');
        $objResultSetMap->addScalarResult('ID_ELEMENTO','idElementoNuevo','integer');
        $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO', 'nombreElementoNuevo','string');
        $objResultSetMap->addScalarResult('DESCRIPCION_ELEMENTO','descripcionElementoNuevo','string');
        $objResultSetMap->addScalarResult('SERIE_FISICA','serieFisica','string');
        $objResultSetMap->addScalarResult('NOMBRE_MODELO_ELEMENTO','nombreModeloElementoNuevo','string');
        $objResultSetMap->addScalarResult('DESCRIPCION_MODELO_ELEMENTO','descripcionModeloElementoNuevo','string');
        $objResultSetMap->addScalarResult('NOMBRE_MARCA_ELEMENTO','nombreMarcaElementoNuevo','string');
        $objResultSetMap->addScalarResult('NOMBRE_TIPO_ELEMENTO','tipoElementoNuevo','string');
        $objResultSetMap->addScalarResult('IP','ipElementoNuevo','string');

        $objNativeQuery->setParameter("idServicio", $arrayParametros['intIdServicio']);
        $objNativeQuery->setParameter("estado", 'connected');
        
        $objNativeQuery->setSQL($strSql);

        $arrayCapacidades = $objNativeQuery->getArrayResult();

        return $arrayCapacidades;
    }

    /**
     * Función que obtiene los servicios asociados a un splitter
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.0 11-08-2022
     * 
     * @param IdElemento
     * @return Array
     */
    public function getDatosServicioXSplitter($intElementoId)
    {
        $arrayData = array();
        $objResultSetMap    = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery     = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        $strSql =  "SELECT 
                        tie.NOMBRE_INTERFACE_ELEMENTO,c.SERIE_FISICA,
                        DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(b.ID_SERVICIO, 'MAC ONT') mac_ont,
                        DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(b.ID_SERVICIO, 'INDICE CLIENTE') ont_id, 
                        b.ESTADO
                    FROM DB_COMERCIAL.INFO_SERVICIO_TECNICO a,
                         DB_COMERCIAL.INFO_SERVICIO b, 
                         DB_INFRAESTRUCTURA.INFO_ELEMENTO c,
                         DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO tie
                    WHERE a.ELEMENTO_CONECTOR_ID = :IdElemento
                    AND a.SERVICIO_ID = b.ID_SERVICIO AND b.ESTADO = 'Activo'
                    AND c.ID_ELEMENTO = a.ELEMENTO_CLIENTE_ID
                    AND a.INTERFACE_ELEMENTO_ID = tie.ID_INTERFACE_ELEMENTO";
        $objNativeQuery->setParameter("IdElemento",         $intElementoId);
                
        $objResultSetMap->addScalarResult('NOMBRE_INTERFACE_ELEMENTO', 'puerto_olt',        'string');
        $objResultSetMap->addScalarResult('SERIE_FISICA',              'serial_ont',        'string');
        $objResultSetMap->addScalarResult('MAC_ONT',                   'mac_ont',           'string');
        $objResultSetMap->addScalarResult('ONT_ID',                    'ont_id',            'string');
        $objResultSetMap->addScalarResult('ESTADO',                    'estado_servicio',   'string');
        
        $objNativeQuery->setSQL($strSql);
        $arrayDatos['datos'] = $objNativeQuery->getResult();
        return $arrayDatos;
    }

    /**
     * Función que los obtiene a los jefes por jurisdiccion
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.0 11-08-2022
     * 
     * @param strCanton
     * @return Array
     */
    public function obtenerJefeTsJurisdiccionPotencia($strCanton)
    {    
        $arrayDatos = array();
        $objResultSetMap    = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery     = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        $arrayParametrosCargos = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne(
                                                            'VALIDAR POTENCIA SERVICIO',
                                                            'SOPORTE',
                                                            '',
                                                            '',
                                                            'CARGOS',
                                                            '',
                                                            '',
                                                            '',
                                                            '');
        if(!empty($arrayParametrosCargos['valor2']))
        {
            $arrayCargo = explode(",", $arrayParametrosCargos['valor2']);
            foreach($arrayCargo as $strCargo):
                $strSql =  "SELECT 
                            a.LOGIN,CARGO,d.NOMBRE_CANTON
                            FROM DB_COMERCIAL.INFO_PERSONA a, DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL b,
                            DB_COMERCIAL.INFO_OFICINA_GRUPO c, DB_GENERAL.ADMI_CANTON d 
                            WHERE a.ID_PERSONA = b.PERSONA_ID 
                            AND b.OFICINA_ID = c.ID_OFICINA 
                            AND c.CANTON_ID = d.ID_CANTON 
                            AND a.ESTADO = 'Activo'
                            AND b.ESTADO = 'Activo'
                            AND a.CARGO IN (:cargos)
                            AND UPPER(d.NOMBRE_CANTON) LIKE :canton
                            AND ROWNUM < 2";

                $objNativeQuery->setParameter("canton", "%".$strCanton."%");
                $objNativeQuery->setParameter("cargos", $strCargo);
                
                $objResultSetMap->addScalarResult('LOGIN',          'LOGIN',         'string');
                $objResultSetMap->addScalarResult('CARGO',          'CARGO',         'string');
                $objResultSetMap->addScalarResult('NOMBRE_CANTON',  'NOMBRE_CANTON', 'string');
                
                $objNativeQuery->setSQL($strSql);
                $arrayDatos['datos'] = $objNativeQuery->getResult();
                if(!empty($arrayDatos['datos']))
                {
                    return $arrayDatos;
                }
            endforeach;
        }
        return $arrayDatos;
    }

}
