<?php

namespace telconet\schemaBundle\Repository;

use Doctrine\ORM\EntityRepository;
use telconet\schemaBundle\DependencyInjection\BaseRepository;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use Symfony\Component\HttpFoundation\JsonResponse;
use Doctrine\DBAL\Connection;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Query\Parameter;
use Doctrine\ORM\Query\ResultSetMapping;

class InfoServicioRepository extends BaseRepository
{
    /**
     * Función que obtiene los servicios McAfee dentro del plan o como producto adicional
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 08-08-2019
     * 
     * @param array $arrayParametros [ "intIdPunto" => id del punto ]
     * @return array $arrayResultadoServiciosMcAfee
     * costoQuery: 26
     */
    public function getResultadoServiciosMcAfee($arrayParametros)
    {
        $intIdPunto                             = $arrayParametros["intIdPunto"];
        $arrayProductosMcAfee                   = array('I. PROTEGIDO MULTI TRIAL', 'I. PROTEGIDO MULTI PAID', 
                                                        'I. PROTECCION TOTAL TRIAL', 'I. PROTECCION TOTAL PAID');
        $strEstadoEnVerificacion                = 'EnVerificacion';
        $strEstadoActivo                        = 'Activo';
        $strEstadoInCorte                       = 'In-Corte';
        try
        {
            $strSpcSuscriberId  = " AND NOT EXISTS
                                    (
                                        SELECT ID_SERVICIO_PROD_CARACT
                                        FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SPC
                                        INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC
                                        ON APC.ID_PRODUCTO_CARACTERISITICA = SPC.PRODUCTO_CARACTERISITICA_ID
                                        INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA CARACT
                                        ON CARACT.ID_CARACTERISTICA = APC.CARACTERISTICA_ID
                                        WHERE SPC.SERVICIO_ID = SERVICIO.ID_SERVICIO
                                        AND SPC.ESTADO = :strEstadoActivo
                                        AND APC.PRODUCTO_ID = PRODUCTO.ID_PRODUCTO
                                        AND CARACT.DESCRIPCION_CARACTERISTICA = :strCaractSuscriberId
                                    ) ";
            $objRsm             = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery        = $this->_em->createNativeQuery(null, $objRsm);
            $strSql             = "SELECT DISTINCT SERVICIO.ID_SERVICIO ID_SERVICIO
                                    FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO
                                    INNER JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
                                    ON PUNTO.ID_PUNTO = SERVICIO.PUNTO_ID
                                    INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PRODUCTO
                                    ON PRODUCTO.ID_PRODUCTO              = SERVICIO.PRODUCTO_ID
                                    WHERE PRODUCTO.DESCRIPCION_PRODUCTO IN (:arrayProductosMcAfee)
                                    AND (SERVICIO.ESTADO = :strEstadoActivo OR SERVICIO.ESTADO = :strEstadoInCorte)
                                    AND PUNTO.ID_PUNTO                  = :intIdPunto 
                                    ".$strSpcSuscriberId."
                                    UNION ALL
                                    SELECT DISTINCT SERVICIO.ID_SERVICIO ID_SERVICIO
                                    FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO
                                    INNER JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
                                    ON PUNTO.ID_PUNTO = SERVICIO.PUNTO_ID
                                    INNER JOIN DB_COMERCIAL.INFO_PLAN_CAB PLAN_CAB
                                    ON PLAN_CAB.ID_PLAN = SERVICIO.PLAN_ID
                                    INNER JOIN DB_COMERCIAL.INFO_PLAN_DET PLAN_DET
                                    ON PLAN_DET.PLAN_ID = PLAN_CAB.ID_PLAN
                                    INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PRODUCTO
                                    ON PRODUCTO.ID_PRODUCTO              = PLAN_DET.PRODUCTO_ID
                                    WHERE PRODUCTO.DESCRIPCION_PRODUCTO IN (:arrayProductosMcAfee)
                                    AND (SERVICIO.ESTADO = :strEstadoEnVerificacion OR SERVICIO.ESTADO = :strEstadoActivo 
                                         OR SERVICIO.ESTADO = :strEstadoInCorte)
                                    AND PUNTO.ID_PUNTO                  = :intIdPunto 
                                    ".$strSpcSuscriberId;
            $objRsm->addScalarResult('ID_SERVICIO', 'intIdServicio', 'integer');
            $objNtvQuery->setParameter('intIdPunto', $intIdPunto);
            $objNtvQuery->setParameter('strCaractSuscriberId', "SUSCRIBER_ID");
            $objNtvQuery->setParameter('arrayProductosMcAfee', $arrayProductosMcAfee);
            $objNtvQuery->setParameter('strEstadoEnVerificacion', $strEstadoEnVerificacion);
            $objNtvQuery->setParameter('strEstadoActivo', $strEstadoActivo);
            $objNtvQuery->setParameter('strEstadoInCorte', $strEstadoInCorte);
            $objNtvQuery->setSQL($strSql);
            $arrayResultadoServiciosMcAfee = $objNtvQuery->getResult();
        }
        catch (\Exception $e) 
        {
            error_log("error al verificar servicio mcAfee ".$e->getMessage());
            $arrayResultadoServiciosMcAfee = array();
        }
        return $arrayResultadoServiciosMcAfee;
    }

    /**
     * Costo 3
     * 
     * getIdProductoPorServicio
     * 
     * Obtiene la información del producto asociado a un servicio
     * 
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.0 14-04-2020
     * 
     * 
     * */
    public function getIdProductoPorServicio($intIdservicio)
    {
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $strSql = " SELECT ID_PRODUCTO, DESCRIPCION_PRODUCTO FROM ADMI_PRODUCTO 
        WHERE ID_PRODUCTO 
        IN (SELECT PRODUCTO_ID FROM INFO_SERVICIO WHERE ID_SERVICIO = :intIdservicio) ";  
        
        $objQuery->setParameter('intIdservicio', $intIdservicio);

        $objRsm->addScalarResult('ID_PRODUCTO', 'intIdProducto', 'integer');
        $objRsm->addScalarResult('DESCRIPCION_PRODUCTO', 'strDescipcionProducto', 'string');
      
       $objQuery->setSQL($strSql);
       $arrayRespuesta = $objQuery->getResult();
       
       return $arrayRespuesta;
    }

    /**
     * Costo 3
     *
     * getExisteServicio
     *
     * Obtiene la cantidad de servicios de un estado.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 02-08-2020
     *
     * @param  array $arrayParametrosServicio["intIdServicio" => id del servicio
     *                                        "arrayEstados"  => inicio del rownum ]
     *
     */
    public function getExisteServicio($arrayParametrosServicio)
    {
        $intExisteServicio = 0;
        $strQuery          = $this->_em->createQuery();

        $objRsm    = new ResultSetMappingBuilder($this->_em);
        $objQuery  = $this->_em->createNativeQuery(null, $objRsm);

        $strSql  = " SELECT COUNT(ISE.ID_SERVICIO) AS CANTIDAD
                            FROM INFO_SERVICIO ISE
                            WHERE ISE.ID_SERVICIO = :intIdServicio
                            AND ISE.ESTADO NOT IN (:arrayEstados) ";

        $objQuery->setParameter("intIdServicio",$arrayParametrosServicio["intIdServicio"]);
        $objQuery->setParameter("arrayEstados",$arrayParametrosServicio["arrayEstados"]);

        $objRsm->addScalarResult('CANTIDAD', 'cantidad', 'integer');

        $objQuery->setSQL($strSql);

        $intExisteServicio = $objQuery->getSingleScalarResult();

        return $intExisteServicio;
    }

    /**
     * getServiciosNotifMasiva
     * 
     * Obtiene la información de los cliente de acuerdo a los parrámetros enviados
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 05-09-2017
     * 
     * @param  array $arrayParametros[  
     *                                  "strDestinatariosCorreo"        => 'S' si se desea obtener la consulta de los destinatarios del envío masivo
     *                                  "intStart"                      => inicio del rownum
     *                                  "intLimit"                      => fin del rownum,
     *                                  "strGrupo"                      => grupo del producto
     *                                  "strSubgrupo"                   => subgrupo del producto
     *                                  "intIdElementoNodo"             => id del elemento nodo
     *                                  "intIdElementoSwitch"           => id del elemento del switch
     *                                  "strEstadoServicio"             => estado del servicio
     *                                  "strEstadoPunto"                => estado del punto
     *                                  "strEstadoCliente"              => estado del cliente
     *                                  "strClientesVIP"                => 'S' si sólo se consulta los clientes VIP
     *                                  "intNumerosFactAbiertas"        => número mínimo de facturas abiertas a consultar
     *                                  "strPuntosFacturacion"          => 'S' si sólo se consulta los puntos de facturación
     *                                  "strIdsTiposNegocio"            => id de los tipos de negocio
     *                                  "strIdsOficinas"                => id de las oficinas
     *                                  "intIdFormaPago"                => id de la forma de pago
     *                                  "strNombreFormaPago"            => nombre de la forma de pago
     *                                  "strIdsBancosTarjetas"          => id de los bancos o tarjetas
     *                                  "strFechaDesdeFactura"          => fecha desde la que se empezará a comparar la fecha de autorización
     *                                                                     de la factura
     *                                  "strFechaHastaFactura"          => fecha hasta la que se empezará a comparar la fecha de autorización
     *                                                                     de la factura
     *                                  "strSaldoPendientePago"         => 'S' sis e desea consultar a los clientes que tengan saldo pendiente
     *                                  "floatValorSaldoPendientePago"  => valor mínimo con el que se comparará el saldo pendiente
     *                                  "strDatabaseDsn"                => DSN de la base
     *                                  "strUserComunicacion"           => usuario de comunicación
     *                                  "strPasswordComunicacion"       => password del usuario de comunicación
     *                               ]
     * 
     * @return array $arrayRespuesta    
     */    
    public function getServiciosNotifMasiva($arrayParametros)
    {
        $arrayCursorListadoMasivo           = null;
        $arrayRespuesta["intTotal"]         = 0;
        $arrayRespuesta["arrayResultado"]   = array();
        try
        {
            $strDestinatariosCorreo         = ( isset($arrayParametros['strDestinatariosCorreo']) 
                                                && !empty($arrayParametros['strDestinatariosCorreo']) ) 
                                                ? $arrayParametros['strDestinatariosCorreo'] : null;
            $intStart                       = ( isset($arrayParametros['intStart']) && !empty($arrayParametros['intStart']) ) 
                                                ? $arrayParametros['intStart'] : 0;
            $intLimit                       = ( isset($arrayParametros['intLimit']) && !empty($arrayParametros['intLimit']) )  
                                                ? $arrayParametros['intLimit'] : 0;
            $strGrupo                       = ( isset($arrayParametros['strGrupo']) && !empty($arrayParametros['strGrupo']) )  
                                                ? $arrayParametros['strGrupo'] : null;
            $strSubgrupo                    = ( isset($arrayParametros['strSubgrupo']) && !empty($arrayParametros['strSubgrupo']) )  
                                                ? $arrayParametros['strSubgrupo'] : null;
            $intIdElementoNodo              = ( isset($arrayParametros['intIdElementoNodo']) && !empty($arrayParametros['intIdElementoNodo']) )  
                                                ? $arrayParametros['intIdElementoNodo'] : 0;
            $intIdElementoSwitch            = ( isset($arrayParametros['intIdElementoSwitch']) && !empty($arrayParametros['intIdElementoSwitch']) )  
                                                ? $arrayParametros['intIdElementoSwitch'] : 0;
            $strEstadoServicio              = ( isset($arrayParametros['strEstadoServicio']) && !empty($arrayParametros['strEstadoServicio']) )  
                                                ? $arrayParametros['strEstadoServicio'] : null;
            $strEstadoPunto                 = ( isset($arrayParametros['strEstadoPunto']) && !empty($arrayParametros['strEstadoPunto']) )  
                                                ? $arrayParametros['strEstadoPunto'] : null;
            $strEstadoCliente               = ( isset($arrayParametros['strEstadoCliente']) && !empty($arrayParametros['strEstadoCliente']) )  
                                                ? $arrayParametros['strEstadoCliente'] : null;
            $strClientesVIP                 = ( isset($arrayParametros['strClientesVIP']) && !empty($arrayParametros['strClientesVIP']) )  
                                                ? $arrayParametros['strClientesVIP'] : null;
            $strUsrCreacionFactura          = ( isset($arrayParametros['strUsrCreacionFactura']) 
                                                && !empty($arrayParametros['strUsrCreacionFactura']) )  
                                                ? $arrayParametros['strUsrCreacionFactura'] : null;
            $intNumerosFactAbiertas         = ( isset($arrayParametros['intNumerosFactAbiertas']) 
                                                && !empty($arrayParametros['intNumerosFactAbiertas']) )  
                                                ? $arrayParametros['intNumerosFactAbiertas'] : 0;
            $strPuntosFacturacion           = ( isset($arrayParametros['strPuntosFacturacion']) && !empty($arrayParametros['strPuntosFacturacion']) )
                                                ? $arrayParametros['strPuntosFacturacion'] : null;
            $strIdsTiposNegocio             = ( isset($arrayParametros['strIdsTiposNegocio']) && !empty($arrayParametros['strIdsTiposNegocio']) )  
                                                ? $arrayParametros['strIdsTiposNegocio'] : null;
            $strIdsOficinas                 = ( isset($arrayParametros['strIdsOficinas']) && !empty($arrayParametros['strIdsOficinas']) )  
                                                ? $arrayParametros['strIdsOficinas'] : null;
            $intIdFormaPago                 = ( isset($arrayParametros['intIdFormaPago']) && !empty($arrayParametros['intIdFormaPago']) )  
                                                ? $arrayParametros['intIdFormaPago'] : 0;
            $strNombreFormaPago             = ( isset($arrayParametros['strNombreFormaPago']) && !empty($arrayParametros['strNombreFormaPago']) )  
                                                ? $arrayParametros['strNombreFormaPago'] : null;
            $strIdsBancosTarjetas           = ( isset($arrayParametros['strIdsBancosTarjetas']) && !empty($arrayParametros['strIdsBancosTarjetas']) )
                                                ? $arrayParametros['strIdsBancosTarjetas'] : null;
            $strFechaDesdeFactura           = ( isset($arrayParametros['strFechaDesdeFactura']) && !empty($arrayParametros['strFechaDesdeFactura']) )
                                                ? $arrayParametros['strFechaDesdeFactura'] : null;
            $strFechaHastaFactura           = ( isset($arrayParametros['strFechaHastaFactura']) && !empty($arrayParametros['strFechaHastaFactura']) )
                                                ? $arrayParametros['strFechaHastaFactura'] : null;
            $strSaldoPendientePago          = ( isset($arrayParametros['strSaldoPendientePago']) 
                                                && !empty($arrayParametros['strSaldoPendientePago']) )  
                                                ? $arrayParametros['strSaldoPendientePago'] : null;
            $floatValorSaldoPendientePago   = ( isset($arrayParametros['floatValorSaldoPendientePago']) 
                                                && !empty($arrayParametros['floatValorSaldoPendientePago']) )  
                                                ? $arrayParametros['floatValorSaldoPendientePago'] : 0;
            $strIdsTiposContactos           = ( isset($arrayParametros['strIdsTiposContactos']) && !empty($arrayParametros['strIdsTiposContactos']) )
                                                ? $arrayParametros['strIdsTiposContactos'] : null;
            $strVariablesNotificacion       = ( isset($arrayParametros['strVariablesNotificacion']) 
                                                && !empty($arrayParametros['strVariablesNotificacion']) )  
                                                ? $arrayParametros['strVariablesNotificacion'] : null;
            $strDatabaseDsn                 = ( isset($arrayParametros['strDatabaseDsn']) && !empty($arrayParametros['strDatabaseDsn']) )
                                                ? $arrayParametros['strDatabaseDsn'] : null;
            $strUserComunicacion            = ( isset($arrayParametros['strUserComunicacion']) && !empty($arrayParametros['strUserComunicacion']) )
                                                ? $arrayParametros['strUserComunicacion'] : null;
            $strPasswordComunicacion        = ( isset($arrayParametros['strPasswordComunicacion']) 
                                                && !empty($arrayParametros['strPasswordComunicacion']) )
                                                ? $arrayParametros['strPasswordComunicacion'] : null;

            if( !empty($strDatabaseDsn) && !empty($strUserComunicacion) && !empty($strPasswordComunicacion) )
            {
                $objOciConexion             = oci_connect($strUserComunicacion, $strPasswordComunicacion, $strDatabaseDsn);
                $intTotalRegistros          = 0;
                $arrayCursorListadoMasivo   = oci_new_cursor($objOciConexion);
                $strSQL                     = "BEGIN 
                                                 DB_COMUNICACION.CUKG_CONSULTS.P_GET_SERVICIOS_NOTIF_MASIVA(
                                                                                                            :strDestinatariosCorreo,
                                                                                                            :intStart,
                                                                                                            :intLimit,
                                                                                                            :strGrupo, 
                                                                                                            :strSubgrupo, 
                                                                                                            :intIdElementoNodo, 
                                                                                                            :intIdElementoSwitch, 
                                                                                                            :strEstadoServicio, 
                                                                                                            :strEstadoPunto, 
                                                                                                            :strEstadoCliente, 
                                                                                                            :strClientesVIP, 
                                                                                                            :strUsrCreacionFactura,
                                                                                                            :intNumerosFactAbiertas,
                                                                                                            :strPuntosFacturacion,
                                                                                                            :strIdsTiposNegocio,
                                                                                                            :strIdsOficinas,
                                                                                                            :intIdFormaPago,
                                                                                                            :strNombreFormaPago,
                                                                                                            :strIdsBancosTarjetas,
                                                                                                            :strFechaDesdeFactura,
                                                                                                            :strFechaHastaFactura,
                                                                                                            :strSaldoPendientePago,
                                                                                                            :floatValorSaldoPendientePago,
                                                                                                            :strIdsTiposContactos,
                                                                                                            :strVariablesNotificacion,
                                                                                                            :intTotalRegistros,
                                                                                                            :cursorListadoMasivo ); 
                                               END;";
                $objStmt                    = oci_parse($objOciConexion, $strSQL);
                oci_bind_by_name($objStmt, ":strDestinatariosCorreo",       $strDestinatariosCorreo);
                oci_bind_by_name($objStmt, ":intStart",                     $intStart);
                oci_bind_by_name($objStmt, ":intLimit",                     $intLimit);
                oci_bind_by_name($objStmt, ":strGrupo",                     $strGrupo);
                oci_bind_by_name($objStmt, ":strSubgrupo",                  $strSubgrupo);
                oci_bind_by_name($objStmt, ":intIdElementoNodo",            $intIdElementoNodo);
                oci_bind_by_name($objStmt, ":intIdElementoSwitch",          $intIdElementoSwitch);
                oci_bind_by_name($objStmt, ":strEstadoServicio",            $strEstadoServicio);
                oci_bind_by_name($objStmt, ":strEstadoPunto",               $strEstadoPunto);
                oci_bind_by_name($objStmt, ":strEstadoCliente",             $strEstadoCliente);
                oci_bind_by_name($objStmt, ":strClientesVIP",               $strClientesVIP);
                oci_bind_by_name($objStmt, ":strUsrCreacionFactura",        $strUsrCreacionFactura);
                oci_bind_by_name($objStmt, ":intNumerosFactAbiertas",       $intNumerosFactAbiertas);
                oci_bind_by_name($objStmt, ":strPuntosFacturacion",         $strPuntosFacturacion);
                oci_bind_by_name($objStmt, ":strIdsTiposNegocio",           $strIdsTiposNegocio);
                oci_bind_by_name($objStmt, ":strIdsOficinas",               $strIdsOficinas);
                oci_bind_by_name($objStmt, ":intIdFormaPago",               $intIdFormaPago);
                oci_bind_by_name($objStmt, ":strNombreFormaPago",           $strNombreFormaPago);
                oci_bind_by_name($objStmt, ":strIdsBancosTarjetas",         $strIdsBancosTarjetas);
                oci_bind_by_name($objStmt, ":strFechaDesdeFactura",         $strFechaDesdeFactura);
                oci_bind_by_name($objStmt, ":strFechaHastaFactura",         $strFechaHastaFactura);
                oci_bind_by_name($objStmt, ":strSaldoPendientePago",        $strSaldoPendientePago);
                oci_bind_by_name($objStmt, ":floatValorSaldoPendientePago", $floatValorSaldoPendientePago);
                oci_bind_by_name($objStmt, ":strIdsTiposContactos",         $strIdsTiposContactos);
                oci_bind_by_name($objStmt, ":strVariablesNotificacion",     $strVariablesNotificacion);
                oci_bind_by_name($objStmt, ":intTotalRegistros",            $intTotalRegistros, 10);
                oci_bind_by_name($objStmt, ":cursorListadoMasivo",          $arrayCursorListadoMasivo, -1, OCI_B_CURSOR);
                oci_execute($objStmt);
                oci_execute($arrayCursorListadoMasivo, OCI_DEFAULT);
                


                if(!empty($arrayCursorListadoMasivo))
                {
                    $arrayRegistrosInfoEnvio        = array();
                    oci_fetch_all($arrayCursorListadoMasivo, $arrayRegistrosInfoEnvio, null, null, OCI_FETCHSTATEMENT_BY_ROW);
                    // PAGINACION 
                    $strPage = ! empty( $arrayParametros['page'] ) ? (int) $arrayParametros['page'] : 1;
                    $strTotal = count( $arrayRegistrosInfoEnvio ); 
                    $strTotalPages = ceil( $strTotal/ $intLimit ); 
                    $strPage = max($strPage, 1); 
                    $strPage = min($strPage, $strTotalPages); 
                    $strOffset = ($strPage - 1) * $intLimit;
                    if( $strOffset < 0 ) 
                    {
                        $strOffset = 0;
                    }
                    $objEncontrados = array_slice($arrayRegistrosInfoEnvio, $strOffset, $intLimit);
                    // FIN DE PAGINACION

                    $arrayRespuesta["intTotal"]         = count($arrayRegistrosInfoEnvio);
                    $arrayRespuesta["arrayResultado"]   = $objEncontrados;
                }
                oci_free_statement($objStmt);
                oci_free_statement($arrayCursorListadoMasivo);
                oci_close($objOciConexion);
            }
            else
            {
                throw new \Exception('No se han enviado los parámetros adecuados para consultar la información del envío masivo. Database('.
                                     $strDatabaseDsn.'), UsrComunicacion('.$strUserComunicacion.'), PassComunicacion('.
                                     $strPasswordComunicacion.').'); 
            }
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
            throw($e);
        }
        return $arrayRespuesta;
    }

    /**
     * getProductosEnServiciosJson
     *
     * Método encargado de obtener un JSON de productos que esten asociados a servicios activos
     *
     * @param array $arrayParametros [ strDescripcionProducto => nombre del producto
     *                                 strCodEmpresa          => cod de la empresa
     *                                 strEstado              => estado servicio ]
     *
     * @return json $resultado
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 28-02-2019
     */
     public function getProductosEnServiciosJson($arrayParametros)
     {
        $objRespuesta     = new JsonResponse();
        $arrayResult      = array();
        $arrayResultado   = array();

        $arrayProductos = $this->getProductosEnServicios($arrayParametros);

        foreach ($arrayProductos as $arryProducto)
        {
            $arrayItem                    = array();
            $arrayItem['id_producto']     = $arryProducto['intIdProducto'];
            $arrayItem['nombre_producto'] = $arryProducto['strDescripcionProducto'];
            $arrayResult[]                = $arrayItem;
        }

        $arrayResultado['total']       = count($arrayResult);
        $arrayResultado['encontrados'] = $arrayResult;

        $objRespuesta->setData($arrayResultado);

        return $objRespuesta;
    }


    /**
     * Costo: 19
     * getProductosEnServicios
     *
     * Método encargado de obtener un JSON de productos que esten asociados a servicios activos
     *
     * @param array $arrayParametros [ strDescripcionProducto => nombre del producto
     *                                 strCodEmpresa          => cod de la empresa
     *                                 strEstado              => estado servicio ]
     *
     * @return json $resultado
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 28-02-2019
     */
    public function getProductosEnServicios($arrayParametros)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null,$objRsm);

        $strSelect = " SELECT admiProducto.ID_PRODUCTO, admiProducto.DESCRIPCION_PRODUCTO FROM DB_COMERCIAL.ADMI_PRODUCTO admiProducto
                         WHERE admiProducto.empresa_Cod      = :codEmpresa
                          AND admiProducto.id_producto IN (SELECT infoServicio.producto_id
                             FROM INFO_SERVICIO infoServicio WHERE infoServicio.ESTADO = :estado AND infoServicio.producto_id is not null ) ";

        $objRsm->addScalarResult('ID_PRODUCTO'    , 'intIdProducto'    , 'integer');
        $objRsm->addScalarResult('DESCRIPCION_PRODUCTO', 'strDescripcionProducto', 'string');

        if(isset($arrayParametros['strDescripcionProducto']) && !empty($arrayParametros['strDescripcionProducto']))
        {
            $strWhere .= " AND admiProducto.descripcion_producto like :descripcionProducto ";
            $objQuery->setParameter('descripcionProducto', '%'.$arrayParametros['strDescripcionProducto'].'%');
        }

        $strSelect = $strSelect . $strWhere;

        $objQuery->setParameter('codEmpresa',      $arrayParametros['strCodEmpresa']);
        $objQuery->setParameter('estado',  $arrayParametros['strEstado']);

        $objQuery->setSQL($strSelect);
        $arrayAreas = $objQuery->getArrayResult();

        return $arrayAreas;
    }


     /**
     * getEnlacesExtremosPorConcentrador
     * Obtiene segun el tipo de caracteristica  ENLACE_DATOS o ES_BACKUP la informacion de todos los enlaces
     * (Extremo-Concentrador) o (Backup- Principal) en base al ID_SERVICIO del CONCENTRADOR o PRINCIPAL
     * 
     * @author Anabelle Penaherrera <apenaherrera@telconet.ec>
     * @version 1.0 16-01-2019
     * Costo: 10
     * @param array $arrayParametros[
     *                                'intIdServicio'          => Recibe el Id del servicio CONCENTRADOR o servicio PRINCIPAL  
     *                                'strTipoCaracteristica'  => Tipo de Caracteristica a buscar ENLACE_DATOS, ES_BACKUP 
     *                              ]                                    
     * @return $arrayResultado
     */
    public function getEnlacesExtremosPorConcentrador($arrayParametros)
    {
        $objRsm      = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $objRsmCount      = new ResultSetMappingBuilder($this->_em);
        $objNtvQueryCount = $this->_em->createNativeQuery(null, $objRsmCount);
        
        $strQueryCount = " SELECT COUNT(*) AS CANTIDAD ";
        $strQuery      = " SELECT SERVPC.ID_SERVICIO_PROD_CARACT AS ID_SERVICIO_PROD_CARACT,
                           PTOCONCENT.ID_PUNTO AS ID_PUNTO_CONCENTRADOR,
                           SERCONCENT.ID_SERVICIO AS ID_SERVICIO_CONCENTRADOR,
                           PTOCONCENT.LOGIN AS LOGIN_CONCENTRADOR,
                           SERCONCENT.LOGIN_AUX AS LOGIN_AUX_CONCENTRADOR,
                           SERCONCENT.ESTADO AS ESTADO_SERV_CONCENTRADOR,
                           PTOEXTREMO.ID_PUNTO AS ID_PUNTO_EXTREMO,
                           SEREXTREMO.ID_SERVICIO AS ID_SERVICIO_EXTREMO,
                           PTOEXTREMO.LOGIN AS LOGIN_EXTREMO,
                           SEREXTREMO.LOGIN_AUX AS LOGIN_AUX_EXTREMO,
                           SEREXTREMO.ESTADO AS ESTADO_SERV_EXTREMO ";
         
        $strFromQuery  = " FROM
        DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SERVPC,
        DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PRODC,
        DB_COMERCIAL.ADMI_CARACTERISTICA CARAC, 
        DB_COMERCIAL.INFO_SERVICIO SERCONCENT,
        DB_COMERCIAL.INFO_PUNTO PTOCONCENT,
        DB_COMERCIAL.INFO_SERVICIO SEREXTREMO,
        DB_COMERCIAL.INFO_PUNTO PTOEXTREMO
        WHERE  CARAC.DESCRIPCION_CARACTERISTICA                       = :strCaracteristica
        AND SERVPC.PRODUCTO_CARACTERISITICA_ID                        = PRODC.ID_PRODUCTO_CARACTERISITICA
        AND PRODC.CARACTERISTICA_ID                                   = CARAC.ID_CARACTERISTICA        
        AND SERCONCENT.ID_SERVICIO                                    = :intIdServicio
        AND COALESCE(TO_NUMBER(REGEXP_SUBSTR(SERVPC.VALOR,'^\d+')),0) = SERCONCENT.ID_SERVICIO
        AND SERCONCENT.PUNTO_ID                                       = PTOCONCENT.ID_PUNTO            
        AND SERVPC.SERVICIO_ID                                        = SEREXTREMO.ID_SERVICIO
        AND SEREXTREMO.PUNTO_ID                                       = PTOEXTREMO.ID_PUNTO
        AND SERVPC.ESTADO                                             = :strEstadoActivo 
        AND SERCONCENT.ESTADO                                         NOT IN (:arrayEstadoExtremos)
        AND SEREXTREMO.ESTADO                                         NOT IN (:arrayEstadoExtremos) ";                       

        $objRsmCount->addScalarResult('CANTIDAD', 'Cantidad', 'integer');
        $objRsm->addScalarResult('ID_SERVICIO_PROD_CARACT', 'intIdServicioProdCaract', 'integer');
        $objRsm->addScalarResult('ID_PUNTO_CONCENTRADOR', 'intIdPuntoConcentrador', 'integer');
        $objRsm->addScalarResult('ID_SERVICIO_CONCENTRADOR', 'intIdServicioConcentrador', 'integer');
        $objRsm->addScalarResult('LOGIN_CONCENTRADOR', 'strLoginConcentrador', 'string');
        $objRsm->addScalarResult('LOGIN_AUX_CONCENTRADOR', 'strLoginAuxConcentrador', 'string');
        $objRsm->addScalarResult('ESTADO_SERV_CONCENTRADOR', 'strEstadoServConcentrador', 'string');
        $objRsm->addScalarResult('ID_PUNTO_EXTREMO', 'intIdPuntoExtremo', 'integer');
        $objRsm->addScalarResult('ID_SERVICIO_EXTREMO', 'intIdServicioExtremo', 'integer');
        $objRsm->addScalarResult('LOGIN_EXTREMO', 'strLoginExtremo', 'string');
        $objRsm->addScalarResult('LOGIN_AUX_EXTREMO', 'strLoginAuxExtremo', 'string');
        $objRsm->addScalarResult('ESTADO_SERV_EXTREMO', 'strEstadoServExtremo', 'string');        
          
        $objNtvQuery->setParameter('strCaracteristica', $arrayParametros['strTipoCaracteristica']);
        $objNtvQuery->setParameter('intIdServicio', $arrayParametros['intIdServicio']);
        $objNtvQuery->setParameter('strEstadoActivo',   'Activo');        
        $objNtvQuery->setParameter('arrayEstadoExtremos', array('Cancel' ,'Anulado', 'Rechazado', 'Rechazada'));        
        
        $objNtvQuery->setSQL($strQuery . $strFromQuery);                     
        $objDatos = $objNtvQuery->getResult();
        
        $objNtvQueryCount->setParameter('strCaracteristica', $arrayParametros['strTipoCaracteristica']);
        $objNtvQueryCount->setParameter('intIdServicio', $arrayParametros['intIdServicio']);
        $objNtvQueryCount->setParameter('strEstadoActivo',   'Activo');        
        $objNtvQueryCount->setParameter('arrayEstadoExtremos', array('Cancel' ,'Anulado', 'Rechazado', 'Rechazada'));        
                
        $objNtvQueryCount->setSQL($strQueryCount . $strFromQuery);
        $intTotal      = $objNtvQueryCount->getSingleScalarResult();

        $arrayResultado['objRegistros'] = $objDatos;
        $arrayResultado['intTotal']     = $intTotal;

        return $arrayResultado;
    }

    /**
     * Función que llama al procedimiento que realiza la limpieza de la caché en el servidor de Toolbox (Fox Premium)
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @since 15-12-2018
     * @version 1.0
     * 
     * @author Jonathan Mazón Sánchez <jmazon@telconet.ec>
     * @since 28-06-2021  Se agrega el envío de parametro para acceso al ws de toolbox, ya se Fox Premium, Paramount o Noggin.
     * @version 1.1
     */
    public function clearCacheToolbox($arrayParametros)
    {
        $strSql      = "BEGIN
                        DB_COMERCIAL.CMKG_FOX_PREMIUM.P_CLEAR_CACHE_TOOLBOX(Pv_SubscriberId    => :Pv_SubscriberId,
                                                                            Pn_IdServicio      => :Pn_IdServicio,
                                                                            Pv_EstadoServicio  => :Pv_EstadoServicio,
                                                                            Pv_CreaProcMasivo  => :Pv_CreaProcMasivo,
                                                                            Pr_ConfiguracionWS => 
                                                                                DB_COMERCIAL.CMKG_FOX_PREMIUM.F_GET_WS_CLEAR_CACHE(
                                                                                    Pv_NombreParametro  => :Pv_NombreParametro
                                                                                ),
                                                                            Pv_UsrCreacion     => :Pv_UsrCreacion,
                                                                            Pv_IpCreacion      => :Pv_IpCreacion,
                                                                            Pv_Mensaje         => :Pv_Mensaje);
                         END;";
        $strMensaje   = str_repeat(' ', 3000);
        $objStatement = $this->_em->getConnection()->prepare($strSql);
        $objStatement->bindParam('Pv_SubscriberId', $arrayParametros['strSubscriberId']);
        $objStatement->bindParam('Pn_IdServicio', $arrayParametros['intIdServicio']);
        $objStatement->bindParam('Pv_EstadoServicio', $arrayParametros['strEstado']);
        $objStatement->bindParam('Pv_CreaProcMasivo', $arrayParametros['strCreaProcMasivo']);
        $objStatement->bindParam('Pv_UsrCreacion', $arrayParametros['strUsrCreacion']);
        $objStatement->bindParam('Pv_IpCreacion', $arrayParametros['strIpCreacion']);
        $objStatement->bindParam('Pv_NombreParametro', $arrayParametros['strNombreParametro']);
        $objStatement->bindParam('Pv_Mensaje', $strMensaje);
        $objStatement->execute();
        return trim($strMensaje);
    }

    /**
     * Función que devuelve el ORA_HASH de una cadena específica.
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.0
     * @since 19-06-2018
     */
    public function obtieneHash($strValorAEncriptar)
    {
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        $strSql   = "SELECT REPLACE("
                            . "REPLACE("
                                . "REPLACE("
                                    . "REPLACE("
                                        . "ORA_HASH(:Pv_ValorAEncriptar || CURRENT_TIMESTAMP),"
                                        . "'5','X')"
                                    . ",'1','L')"
                                . ",'6','M')"
                            . ",'4','S') AS VALOR"
                . " FROM DUAL";
        $objQuery->setParameter("Pv_ValorAEncriptar", $strValorAEncriptar);

        $objRsm->addScalarResult('VALOR', 'valor', 'string');
        $objQuery->setSQL($strSql);
        $arrayRespuesta = $objQuery->getScalarResult();

        return $arrayRespuesta[0]["valor"];
    }


    /**
    * Función que devuelve ID_PERSONA_ROL del punto.
    * @author Jorge Gómez <jigomez@telconet.ec>
    * @version 1.0
    * @since 13-03-2023
    */
   public function ClienteEm($intPuntoId)
   {
   
        $objRsm = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);

        
        $strSql = "SELECT DISTINCT  PER_EMP.ID_PERSONA_ROL
                FROM INFO_PUNTO P
                INNER JOIN DB_COMERCIAL.INFO_SERVICIO S ON P.ID_PUNTO = S.PUNTO_ID  
                INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL PER_EMP ON PER_EMP.ID_PERSONA_ROL = P.PERSONA_EMPRESA_ROL_ID          
                WHERE  P.ID_PUNTO = :puntounic ";
        

        $objQuery->setParameter("puntounic",$intPuntoId);
        
        $objRsm->addScalarResult(strtoupper('ID_PERSONA_ROL'), 'idPersonaRol', 'integer');

        $objQuery->setSQL($strSql);

        $arrayRegistros = $objQuery->getResult();
        
        return $arrayRegistros[0]["idPersonaRol"];
   }
    /**
     * Función que crea una cadena de string aleatoria. xxxxxxxx99
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.0
     * @since 26-12-2018
     */
    public function creaAleatorio()
    {
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        $strSql   = "SELECT DB_FINANCIERO.FNCK_COM_ELECTRONICO.GET_VARCHAR_CLEAN_CLIENTE(DBMS_RANDOM.STRING('A',8) ) ||
                            TRUNC(ABS(DBMS_RANDOM.VALUE(0,99) ) ) AS VALOR
                       FROM DUAL";
        $objRsm->addScalarResult('VALOR', 'valor', 'string');
        $objQuery->setSQL($strSql);
        $arrayRespuesta = $objQuery->getScalarResult();

        return $arrayRespuesta[0]["valor"];
    }

    /**
     * Función que devuelve el idServicio desde un usuario FOX.
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.0
     * @since 19-06-2018
     */
    public function obtieneServicioIdDesdeUsuarioFox($arrayParametros)
    {
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        $strSql   = "SELECT DISTINCT ISPC.SERVICIO_ID AS SERVICIO_ID
          FROM DB_COMERCIAL.ADMI_CARACTERISTICA AC,
               DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC,
               DB_COMERCIAL.ADMI_PRODUCTO AP,
               DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISPC
         WHERE AC.DESCRIPCION_CARACTERISTICA = :Pv_DescrCaracteristica
            AND AC.ESTADO = :Pv_EstadoActivo
            AND APC.CARACTERISTICA_ID = AC.ID_CARACTERISTICA
            AND APC.ESTADO = :Pv_EstadoActivo
            AND AP.NOMBRE_TECNICO = :Pv_NombreTecnico
            AND AP.ESTADO = :Pv_EstadoActivo
            AND APC.PRODUCTO_ID = AP.ID_PRODUCTO
            AND APC.ID_PRODUCTO_CARACTERISITICA = ISPC.PRODUCTO_CARACTERISITICA_ID
            AND ISPC.ESTADO = :Pv_EstadoActivo
            AND VALOR = :Pv_UsuarioFox";
        $objQuery->setParameter("Pv_EstadoActivo", "Activo");
        $objQuery->setParameter("Pv_NombreTecnico", $arrayParametros["strNombreTecnico"]);
        $objQuery->setParameter("Pv_DescrCaracteristica", $arrayParametros["strDescrCaracteristica"]);
        $objQuery->setParameter("Pv_UsuarioFox", $arrayParametros["strUsuarioFox"]);

        $objRsm->addScalarResult('SERVICIO_ID', 'intIdServicio', 'integer');
        $objQuery->setSQL($strSql);
        $arrayRespuesta = $objQuery->getScalarResult();

        return $arrayRespuesta;
    }
    
    /**
     * obtieneInfoSpcProductosTv
     * 
     * Obtiene la información asociada a servicios El Canal del Futbol
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 08-08-2021
     * 
     * @param array $arrayParametros [  
     *                                  "intIdServicio"                 => id del servicio
     *                                  "strNombreTecnicoProd"          => nombre técnico del producto
     *                                  "strValorCaract"                => valor de la servicio producto característica
     *                                  "strDescripcionCaract"          => descripción de la característics
     *                                  "strEstadoSpcEstaParametrizado" => "SI" en caso de que se deba filtrar las servicios producto característica
     *                                                                     por estados parametrizados
     *                                  "strEstadoSpc"                  => estado de la servicio producto característica
     *                               ]
     * 
     * @return array $arrayRespuesta    
     */    
    public function obtieneInfoSpcProductosTv($arrayParametros)
    {
        try
        {
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
            $strSelect      = "SELECT DISTINCT SPC.ID_SERVICIO_PROD_CARACT, SPC.SERVICIO_ID, 
                               SPC.ESTADO AS ESTADO_SPC, SPC.VALOR AS VALOR_SPC, PROD.NOMBRE_TECNICO ";
            $strFromJoin    = " FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO
                                INNER JOIN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SPC
                                ON SPC.SERVICIO_ID = SERVICIO.ID_SERVICIO
                                INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC
                                ON APC.ID_PRODUCTO_CARACTERISITICA = SPC.PRODUCTO_CARACTERISITICA_ID
                                INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA CARACT
                                ON CARACT.ID_CARACTERISTICA = APC.CARACTERISTICA_ID 
                                INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PROD
                                ON PROD.ID_PRODUCTO = APC.PRODUCTO_ID ";
            $strWhere       = " WHERE APC.ESTADO = :strEstadoActivo 
                                AND CARACT.ESTADO = :strEstadoActivo 
                            ";
            $strOrderBy     = "";
            
            if(isset($arrayParametros["intIdServicio"]) && !empty($arrayParametros["intIdServicio"]))
            {
                $strWhere.= "AND SPC.SERVICIO_ID = :intIdServicio ";
                $objQuery->setParameter("intIdServicio", $arrayParametros["intIdServicio"]);
            }
            if(isset($arrayParametros["strNombreTecnicoProd"]) && !empty($arrayParametros["strNombreTecnicoProd"]))
            {
                $strWhere.= "AND PROD.NOMBRE_TECNICO = :strNombreTecnicoProd ";
                $objQuery->setParameter("strNombreTecnicoProd", $arrayParametros["strNombreTecnicoProd"]);
            }
            if(isset($arrayParametros["strDescripcionCaract"]) && !empty($arrayParametros["strDescripcionCaract"]))
            {
                $strWhere.= "AND CARACT.DESCRIPCION_CARACTERISTICA = :strDescripcionCaract ";
                $objQuery->setParameter("strDescripcionCaract", $arrayParametros["strDescripcionCaract"]);
            }
            if(isset($arrayParametros["strValorCaract"]) && !empty($arrayParametros["strValorCaract"]))
            {
                $strWhere.= "AND SPC.VALOR = :strValorCaract ";
                $objQuery->setParameter("strValorCaract", $arrayParametros["strValorCaract"]);
            }
            if(isset($arrayParametros["strEstadoSpcEstaParametrizado"]) && !empty($arrayParametros["strEstadoSpcEstaParametrizado"])
                && $arrayParametros["strEstadoSpcEstaParametrizado"] === "SI")
            {
                $strSelect      .= ", PARAM_DET_ESTADOS_SPC.VALOR4 AS ORDEN_ESTADO_SPC ";
                $strFromJoin    .= "INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET PARAM_DET_ESTADOS_SPC
                                    ON PARAM_DET_ESTADOS_SPC.VALOR2 = PROD.NOMBRE_TECNICO
                                    INNER JOIN DB_GENERAL.ADMI_PARAMETRO_CAB PARAM_CAB_PARAMS_WS
                                    ON PARAM_CAB_PARAMS_WS.ID_PARAMETRO = PARAM_DET_ESTADOS_SPC.PARAMETRO_ID ";
                $strWhere       .= "AND PARAM_CAB_PARAMS_WS.NOMBRE_PARAMETRO = :strNombreParamsWsProductosTv
                                    AND PARAM_CAB_PARAMS_WS.ESTADO = :strEstadoActivo 
                                    AND PARAM_DET_ESTADOS_SPC.VALOR1 = :strValor1EstadosSpcPermitidos
                                    AND PARAM_DET_ESTADOS_SPC.ESTADO = :strEstadoActivo
                                    AND SPC.ESTADO = PARAM_DET_ESTADOS_SPC.VALOR3 ";
                $objQuery->setParameter("strNombreParamsWsProductosTv", "PARAMETROS_WS_PRODUCTOS_TV");
                $objQuery->setParameter("strValor1EstadosSpcPermitidos", "ESTADOS_SPC_PERMITIDOS");
                
                if(isset($arrayParametros["strEstadoSpc"]) && !empty($arrayParametros["strEstadoSpc"]))
                {
                    $strWhere   .= "AND SPC.ESTADO = :strEstadoSpc ";
                    $objQuery->setParameter("strEstadoSpc", $arrayParametros["strEstadoSpc"]);
                }
                $strOrderBy = "ORDER BY PARAM_DET_ESTADOS_SPC.VALOR4 ASC, SPC.ID_SERVICIO_PROD_CARACT DESC ";
            }
            else if(isset($arrayParametros["strEstadoSpc"]) && !empty($arrayParametros["strEstadoSpc"]))
            {
                $strWhere   .= "AND SPC.ESTADO = :strEstadoSpc ";
                $objQuery->setParameter("strEstadoSpc", $arrayParametros["strEstadoSpc"]);
            }
            else
            {
                $strWhere   .= "AND SPC.ESTADO = :strEstadoActivo ";
            }
            $objQuery->setParameter("strEstadoActivo", "Activo");
            $strSql = $strSelect . $strFromJoin . $strWhere . $strOrderBy;

            $objRsm->addScalarResult('ID_SERVICIO_PROD_CARACT', 'intIdSpc', 'integer');
            $objRsm->addScalarResult('SERVICIO_ID', 'intIdServicio', 'integer');
            $objRsm->addScalarResult('ESTADO_SPC', 'strEstadoSpc', 'string');
            $objRsm->addScalarResult('VALOR_SPC', 'strValorSpc', 'string');
            $objRsm->addScalarResult('NOMBRE_TECNICO', 'strNombreTecnicoProd', 'string');
            $objRsm->addScalarResult('ORDEN_ESTADO_SPC', 'strOrdenEstadoSpc', 'string');
            
            $objQuery->setSQL($strSql);
            $arrayRegistros = $objQuery->getResult();
            $strStatus  = "OK";
            $strMensaje = "";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            error_log("ERROR:" . $strMensaje);
        }
        $arrayRespuesta = array("status"            => $strStatus,
                                "mensaje"           => $strMensaje,
                                "arrayRegistros"    => $arrayRegistros);
        return $arrayRespuesta;
    }
    
     /**
     * Costo: 3
     * getPuertoLogicoSwPorServicio
     *
     * Función que retorna si un servicio es Port Channel o tenGiga
     *
     * @param array arrayParametros [ intServicio => id del servicio ]
     *
     * @return arrayRespuesta[ intIdInterface     => id de la interface,
     *                         intElementoId      => id del sw,
     *                         strNombreInterface => nombre de la interface Poxx o Texx]
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 28-08-2018
     */
    public function getPuertoLogicoSwPorServicio($arrayParametros)
    {
        $arrayRespuesta      = array();
        $strEstadoInterface = 'connected';
        $strInterface1      = "Po";
        $strInterface2      = "Te";
        $objRsmb             = new ResultSetMappingBuilder($this->_em);
        $objQuery            = $this->_em->createNativeQuery(null,$objRsmb);

        $strSql = " SELECT IIE.ID_INTERFACE_ELEMENTO,IIE.ELEMENTO_ID,IIE.NOMBRE_INTERFACE_ELEMENTO
                        FROM DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO IIE
                        WHERE IIE.ID_INTERFACE_ELEMENTO =
                          (SELECT IST2.INTERFACE_ELEMENTO_ID
                          FROM DB_COMERCIAL.INFO_SERVICIO_TECNICO IST2
                          WHERE IST2.ID_SERVICIO_TECNICO =
                            (SELECT MAX(IST1.ID_SERVICIO_TECNICO)
                            FROM DB_COMERCIAL.INFO_SERVICIO_TECNICO IST1
                            WHERE IST1.SERVICIO_ID = :paramIdServicio
                            )
                          )
                        AND IIE.ESTADO = :paramEstado
                        AND (IIE.NOMBRE_INTERFACE_ELEMENTO LIKE :paramInterface1
                        OR IIE.NOMBRE_INTERFACE_ELEMENTO LIKE :paramInterface2 ) ";

        $objQuery->setParameter('paramIdServicio',$arrayParametros["intServicio"]);
        $objQuery->setParameter('paramEstado',$strEstadoInterface);
        $objQuery->setParameter('paramInterface1','%'.$strInterface1.'%');
        $objQuery->setParameter('paramInterface2','%'.$strInterface2.'%');

        $objRsmb->addScalarResult('ID_INTERFACE_ELEMENTO', 'intIdInterfaceElemento', 'integer');
        $objRsmb->addScalarResult('ELEMENTO_ID', 'intElementoId', 'integer');
        $objRsmb->addScalarResult('NOMBRE_INTERFACE_ELEMENTO', 'strNombreInterfaceElemento', 'string');

        $objQuery->setSQL($strSql);

        $arrayRespuesta = $objQuery->getResult();

        return $arrayRespuesta[0];
    }


    /**
     * Función que retorna el puerto por servicio 
     *
     * @param array arrayParametros [ intServicio => id del servicio ]
     *
     * @return arrayRespuesta[ intIdInterface     => id de la interface,
     *                         intElementoId      => id del sw,
     *                         strNombreInterface => nombre de la interface]
     *
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.0 10-06-2022
     */
    public function getPuertoLogicoPorServicio($intServicio)
    {
        $arrayRespuesta      = array();
        $strEstadoInterface = 'connected';
        $objRsmb             = new ResultSetMappingBuilder($this->_em);
        $objQuery            = $this->_em->createNativeQuery(null,$objRsmb);

        $strSql = " SELECT IIE.ID_INTERFACE_ELEMENTO,IIE.ELEMENTO_ID,IIE.NOMBRE_INTERFACE_ELEMENTO
                        FROM DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO IIE
                        WHERE IIE.ID_INTERFACE_ELEMENTO =
                          (SELECT IST2.INTERFACE_ELEMENTO_ID
                          FROM DB_COMERCIAL.INFO_SERVICIO_TECNICO IST2
                          WHERE IST2.ID_SERVICIO_TECNICO =
                            (SELECT MAX(IST1.ID_SERVICIO_TECNICO)
                            FROM DB_COMERCIAL.INFO_SERVICIO_TECNICO IST1
                            WHERE IST1.SERVICIO_ID = :paramIdServicio
                            )
                          )
                        AND IIE.ESTADO = :paramEstado";

        $objQuery->setParameter('paramIdServicio',$intServicio);
        $objQuery->setParameter('paramEstado',$strEstadoInterface);

        $objRsmb->addScalarResult('ID_INTERFACE_ELEMENTO', 'intIdInterfaceElemento', 'integer');
        $objRsmb->addScalarResult('ELEMENTO_ID', 'intElementoId', 'integer');
        $objRsmb->addScalarResult('NOMBRE_INTERFACE_ELEMENTO', 'strNombreInterfaceElemento', 'string');

        $objQuery->setSQL($strSql);

        $arrayRespuesta = $objQuery->getResult();

        return $arrayRespuesta[0];
    }

    /**
     * Función que devuelve el idServicio FoxPremium mas antiguo Cancelado que posee un cliente
     * se verifica que el Servicio no se encuentre o este marcado como migrado.MIGRADO_FOX ='N'
     *@param  array $arrayParametros[  
     *                                  "intIdPersonaRol"            => Id del Cliente ID_PERSONA_ROL
     *                                  "strNombreTecnico"           => Nombre Tecnico del Producto  "FOXPREMIUM"
     *                                  "strEstadoServicio"          => Estado del Servicio a consultar "Cancel"
     *                                  "strDescrCaracteristica"     => Descripcion de la Caracteristica del Servicio  "MIGRADO_FOX"
     *                                  "strValorCaracteristica"     => Valor de la Caracteristica a consultar "N"
     *                                  "strEstadoCaracServ"         => Estado de la Caracteristica del Servicio a consultar "Eliminado","Cancelado"
     *                             ]
     * @author Anabelle Peñaherrea <apenaherrera@telconet.ec>
     * @version 1.0
     * @since 04-07-2018
     * 
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 1.1
     * @since 12-10-2020
     * -Se habilita ingreso de parametro intIdPuntoCLiente para traer data de servicios cancelados en ese punto
     * 
     */
    public function obtieneServicioIdCancelFoxPremium($arrayParametros)
    {
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $strSql   = "SELECT MIN(SERV.ID_SERVICIO) AS SERVICIO_ID
                     FROM DB_COMERCIAL.INFO_SERVICIO SERV,
                     DB_COMERCIAL.INFO_PUNTO PTO,
                     DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL PEMPROL,
                     DB_COMERCIAL.ADMI_PRODUCTO PROD
                     WHERE SERV.PUNTO_ID            = :intIdPuntoCliente
                     AND SERV.PRODUCTO_ID           = PROD.ID_PRODUCTO
                     AND PTO.PERSONA_EMPRESA_ROL_ID = PEMPROL.ID_PERSONA_ROL
                     AND PEMPROL.ID_PERSONA_ROL     = :intIdPersonaRol
                     AND PROD.NOMBRE_TECNICO        = :strNombreTecnico
                     AND SERV.ESTADO                IN (:strEstadoServicio)
                     AND EXISTS(SELECT 1 FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SPC,
                                DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PC,
                                DB_COMERCIAL.ADMI_CARACTERISTICA CARAC
                                WHERE SPC.SERVICIO_ID                = SERV.ID_SERVICIO
                                AND SPC.PRODUCTO_CARACTERISITICA_ID  = PC.ID_PRODUCTO_CARACTERISITICA
                                AND PC.CARACTERISTICA_ID             = CARAC.ID_CARACTERISTICA
                                AND CARAC.DESCRIPCION_CARACTERISTICA = :strDescrCaracteristica
                                AND SPC.VALOR                        = :strValorCaracteristica
                                AND SPC.ESTADO                       IN (:strEstadoCaracServ)
                                )";
        
        $objQuery->setParameter("intIdPersonaRol", $arrayParametros["intIdPersonaRol"]);
        $objQuery->setParameter("strNombreTecnico", $arrayParametros["strNombreTecnico"]);
        $objQuery->setParameter("strEstadoServicio", $arrayParametros["strEstadoServicio"]);
        $objQuery->setParameter("strDescrCaracteristica", $arrayParametros["strDescrCaracteristica"]);
        $objQuery->setParameter("strValorCaracteristica", $arrayParametros["strValorCaracteristica"]);
        $objQuery->setParameter("strEstadoCaracServ", $arrayParametros["strEstadoCaracServ"]);                                
        $objQuery->setParameter("intIdPuntoCliente", $arrayParametros["intIdPuntoCliente"]);

        $objRsm->addScalarResult('SERVICIO_ID', 'intIdServicio', 'integer');
        $objQuery->setSQL($strSql);
        $arrayRespuesta = $objQuery->getScalarResult();

        return $arrayRespuesta;
    }

    /**
     * getJSONServiciosNotifMasiva
     * 
     * Obtiene la información de los clientes del envío masivo de acuerdo a los parámetros enviados
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 05-09-2017
     * 
     * @param  array $arrayParametros[  
     *                                  "strDestinatariosCorreo"        => 'S' si se desea obtener la consulta de los destinatarios del envío masivo
     *                                  "intStart"                      => inicio del rownum
     *                                  "intLimit"                      => fin del rownum,
     *                                  "strGrupo"                      => grupo del producto
     *                                  "strSubgrupo"                   => subgrupo del producto
     *                                  "intIdElementoNodo"             => id del elemento nodo
     *                                  "intIdElementoSwitch"           => id del elemento del switch
     *                                  "strEstadoServicio"             => estado del servicio
     *                                  "strEstadoPunto"                => estado del punto
     *                                  "strEstadoCliente"              => estado del cliente
     *                                  "strClientesVIP"                => 'S' si sólo se consulta los clientes VIP
     *                                  "intNumerosFactAbiertas"        => número mínimo de facturas abiertas a consultar
     *                                  "strPuntosFacturacion"          => 'S' si sólo se consulta los puntos de facturación
     *                                  "strIdsTiposNegocio"            => id de los tipos de negocio
     *                                  "strIdsOficinas"                => id de las oficinas
     *                                  "intIdFormaPago"                => id de la forma de pago
     *                                  "strNombreFormaPago"            => nombre de la forma de pago
     *                                  "strIdsBancosTarjetas"          => id de los bancos o tarjetas
     *                                  "strFechaDesdeFactura"          => fecha desde la que se empezará a comparar la fecha de autorización
     *                                                                     de la factura
     *                                  "strFechaHastaFactura"          => fecha hasta la que se empezará a comparar la fecha de autorización
     *                                                                     de la factura
     *                                  "strSaldoPendientePago"         => 'S' sis e desea consultar a los clientes que tengan saldo pendiente
     *                                  "floatValorSaldoPendientePago"  => valor mínimo con el que se comparará el saldo pendiente
     *                               ]
     * 
     * @return string $strJsonData    
     */  
    public function getJSONServiciosNotifMasiva($arrayParametros)
    {  
        $arrayRespuesta             = $this->getServiciosNotifMasiva($arrayParametros);
        $arrayResultado             = $arrayRespuesta['arrayResultado'];
        $intTotal                   = $arrayRespuesta['intTotal'];
        $strJsonData                = json_encode(array('intTotal'   => $intTotal, 'arrayResultado' => $arrayResultado));
        return $strJsonData;
    }
    

    /**
    * Costo: 6
    *
    * getServiciosTraslado
    * Obtiene informacion de los servicios que van a ser trasladados, esta info se muestra en la panntalla de autorizar Traslado.
    *
    * @param array $arrayParametros[ "arrayServicios" => array de servicios a trasladar ]
    *
    * @return array $arrayRespuesta
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 28-07-2018
	*/
    public function getServiciosTraslado($arrayParametros)
    {
        $objQuery       = $this->_em->createQuery();
        $arrayRespuesta = array();

        $strSql = " SELECT (SELECT admiPro.descripcionProducto FROM schemaBundle:AdmiProducto admiPro
                        WHERE admiPro.id = infoServ.productoId) servicio, infoServ.estado
                        FROM schemaBundle:InfoServicio infoServ WHERE infoServ.id IN (:paramServicios) ";

        $objQuery->setParameter("paramServicios", $arrayParametros["arrayServicios"]);

        $objQuery->setDQL($strSql);

        $arrayRespuesta["registros"] = $objQuery->getResult();

        return $arrayRespuesta;
    }



    /**
     * Documentación para el método 'getVentasPorVendedor'.
     * 
     * Método que retorna el valor de las ventas por vendedor según los parámetros enviados por el usuario
     *
     * @param array $arrayParametros [strPrefijoEmpresa     => Prefijo de la empresa que realizará la consulta para la información comercial
     *                                strFechaInicio        => Fecha de inicio de la búsqueda
     *                                strFechaFin           => Fecha final de la búsqueda
     *                                strCategoria          => Categoría de los productos a buscar
     *                                strGrupo              => Grupo de los productos a buscar
     *                                strSubgrupo           => Subgrupo de los productos a buscar
     *                                strUsrCreacion        => Usuario en sessión
     *                                strIpCreacion         => Ip del usuario en sessión
     *                                strTipoVendedor       => Parámetro que indica el tipo de vendedor a consultar
     *                                strTipoPersonal       => El tipo del personal en sessión si es 'VENDEDOR' o 'SUBGERENTE'
     *                                intIdPersonEmpresaRol => Id del usuario en sessión
     *                                strDatabaseDsn        => Base de datos a la cual se conectará para realizar la consulta
     *                                strUserComercial      => Usuario del esquema comercial 'DB_COMERCIAL'
     *                                strPasswordComercial  => Password del esquema comercial 'DB_COMERCIAL' ]
     * 
     * @return cursor $cursorVendedores
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 11-06-2017
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 12-06-2017 - Se modifica la función para habilitar la información de ventas para un personal especifico ya sea 'VENDEDOR' o 
     *                           'SUBGERENTE'
     */
    public function getVentasPorVendedor($arrayParametros)
    {
        $cursorVendedores = null;

        try
        {
            $strPrefijoEmpresa    = ( isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) )
                                    ? $arrayParametros['strPrefijoEmpresa'] : null;
            $strFechaInicio       = ( isset($arrayParametros['strFechaInicio']) && !empty($arrayParametros['strFechaInicio']) )
                                    ? $arrayParametros['strFechaInicio'] : null;
            $strFechaFin          = ( isset($arrayParametros['strFechaFin']) && !empty($arrayParametros['strFechaFin']) )
                                    ? $arrayParametros['strFechaFin'] : null;
            $strDatabaseDsn       = ( isset($arrayParametros['strDatabaseDsn']) && !empty($arrayParametros['strDatabaseDsn']) )
                                    ? $arrayParametros['strDatabaseDsn'] : null;
            $strUserComercial     = ( isset($arrayParametros['strUserComercial']) && !empty($arrayParametros['strUserComercial']) )
                                    ? $arrayParametros['strUserComercial'] : null;
            $strPasswordComercial = ( isset($arrayParametros['strPasswordComercial']) && !empty($arrayParametros['strPasswordComercial']) )
                                    ? $arrayParametros['strPasswordComercial'] : null;
            $strCategoria         = ( isset($arrayParametros['strCategoria']) && !empty($arrayParametros['strCategoria']) )
                                    ? $arrayParametros['strCategoria'] : null;
            $strGrupo             = ( isset($arrayParametros['strGrupo']) && !empty($arrayParametros['strGrupo']) )
                                    ? $arrayParametros['strGrupo'] : null;
            $strSubgrupo          = ( isset($arrayParametros['strSubgrupo']) && !empty($arrayParametros['strSubgrupo']) )
                                    ? $arrayParametros['strSubgrupo'] : null;
            $strTipoVendedor      = ( isset($arrayParametros['strTipoVendedor']) && !empty($arrayParametros['strTipoVendedor']) )
                                    ? $arrayParametros['strTipoVendedor'] : null;
            $strTipoPersonal      = ( isset($arrayParametros['strTipoPersonal']) && !empty($arrayParametros['strTipoPersonal']) )
                                    ? $arrayParametros['strTipoPersonal'] : null;
            $intIdPersonEmpresaRol= ( isset($arrayParametros['intIdPersonEmpresaRol']) && !empty($arrayParametros['intIdPersonEmpresaRol']) )
                                    ? $arrayParametros['intIdPersonEmpresaRol'] : null;

            if( !empty($strPrefijoEmpresa) && !empty($strFechaInicio) && !empty($strFechaFin) && !empty($strDatabaseDsn)
                && !empty($strUserComercial) && !empty($strPasswordComercial) )
            {
                $objOciConexion   = oci_connect($strUserComercial, $strPasswordComercial, $strDatabaseDsn);
                $cursorVendedores = oci_new_cursor($objOciConexion);
                $strSQL           = "BEGIN DB_COMERCIAL.COMEK_CONSULTAS.P_GET_VENDEDORES_POR_META( :strPrefijoEmpresa, ".
                                                                                                  ":strFechaInicio, ".
                                                                                                  ":strFechaFin, ".
                                                                                                  ":strCategoria, ".
                                                                                                  ":strGrupo, ".
                                                                                                  ":strSubgrupo, ".
                                                                                                  ":strTipoVendedor, ".
                                                                                                  ":strTipoPersonal, ".
                                                                                                  ":intIdPersonEmpresaRol, ".
                                                                                                  ":cursorVendedores ); END;";
                $objStmt = oci_parse($objOciConexion, $strSQL);
                oci_bind_by_name($objStmt, ":strPrefijoEmpresa",     $strPrefijoEmpresa);
                oci_bind_by_name($objStmt, ":strFechaInicio",        $strFechaInicio);
                oci_bind_by_name($objStmt, ":strFechaFin",           $strFechaFin);
                oci_bind_by_name($objStmt, ":strCategoria",          $strCategoria);
                oci_bind_by_name($objStmt, ":strGrupo",              $strGrupo);
                oci_bind_by_name($objStmt, ":strSubgrupo",           $strSubgrupo);
                oci_bind_by_name($objStmt, ":strTipoVendedor",       $strTipoVendedor);
                oci_bind_by_name($objStmt, ":strTipoPersonal",       $strTipoPersonal);
                oci_bind_by_name($objStmt, ":intIdPersonEmpresaRol", $intIdPersonEmpresaRol);
                oci_bind_by_name($objStmt, ":cursorVendedores",      $cursorVendedores, -1, OCI_B_CURSOR);
                oci_execute($objStmt);
                oci_execute($cursorVendedores);
                oci_commit($objOciConexion);
            }
            else
            {
                throw new \Exception('No se han enviado los parámetros adecuados para consultar la información del dashboard comercial. - Prefijo('.
                                     $strPrefijoEmpresa.'), FechaInicio('.$strFechaInicio.'), FechaFin('.$strFechaFin.'), Database('.
                                     $strDatabaseDsn.'), UsrComercial('.$strUserComercial.'), PassComercial('.$strPasswordComercial.').'); 
            }//( !empty($strPrefijoEmpresa) && !empty($dateFechaInicio) && !empty($dateFechaFin) && !empty($strDatabaseDsn)...
        }
        catch(\Exception $e)
        {
            throw($e);
        }

        return $cursorVendedores;
    }

    /**
     * Método que obtiene el o los vendedores y una forma de contacto 
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.0
     * @since 18-04-2018
     *
     */
    public function obtieneVendedorPorDocumentoCab($arrayParametros)
    {
        $strSql = "SELECT
                        DISTINCT SER.USR_VENDEDOR,
                        (SELECT PFC.VALOR
                            FROM DB_COMERCIAL.INFO_PERSONA_FORMA_CONTACTO PFC
                          WHERE P.ID_PERSONA = PFC.PERSONA_ID
                               AND PFC.FORMA_CONTACTO_ID = :intFormaContactoId
                               AND PFC.ESTADO = :strEstado
                               AND ROWNUM <= 1) AS FORMA_CONTACTO
                    FROM
                        DB_FINANCIERO.INFO_DOCUMENTO_FINANCIERO_CAB CAB, 
                        DB_COMERCIAL.INFO_SERVICIO SER,
                        DB_COMERCIAL.INFO_PERSONA P
                    WHERE CAB.ID_DOCUMENTO = :intDocFinanCabId
                         AND CAB.PUNTO_ID = SER.PUNTO_ID
                         AND SER.USR_VENDEDOR = P.LOGIN";
        $objStmt = $this->_em->getConnection()->prepare($strSql);
        $objStmt->bindParam("intDocFinanCabId",   $arrayParametros["intDocFinanCabId"]);
        $objStmt->bindParam("intFormaContactoId", $arrayParametros["intFormaContactoId"]);
        $objStmt->bindParam("strEstado",          $arrayParametros["strEstado"]);
        $objStmt->execute();
        $arrayResult = $objStmt->fetchAll();
        return $arrayResult;
    }

    /**
     * Documentación para el método 'getInformacionFacturacion'.
     * 
     * Método que retorna el valor de la facturación según los parámetros enviados por el usuario
     *
     * @param array $arrayParametros [strPrefijoEmpresa     => Prefijo de la empresa que realizará la consulta para la información comercial
     *                                strFechaInicio        => Fecha de inicio de la búsqueda
     *                                strFechaFin           => Fecha final de la búsqueda
     *                                strCategoria          => Categoría de los productos a buscar
     *                                strGrupo              => Grupo de los productos a buscar
     *                                strSubgrupo           => Subgrupo de los productos a buscar
     *                                strUsrCreacion        => Usuario en sessión
     *                                strIpCreacion         => Ip del usuario en sessión
     *                                strBanderaRecurrencia => Parámetro que indica si el valor de la factura es recurrente
     *                                strDatabaseDsn        => Base de datos a la cual se conectará para realizar la consulta
     *                                strUserComercial      => Usuario del esquema comercial 'DB_COMERCIAL'
     *                                strPasswordComercial  => Password del esquema comercial 'DB_COMERCIAL' ]
     * 
     * @return array $arrayResultados ['floatValorVentas' => 'Total del valor facturado' ]
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 09-06-2017
     */
    public function getInformacionFacturacion($arrayParametros)
    {
        $arrayResultados = array('floatValorVentas' => 0);
        
        try
        {
            $strPrefijoEmpresa     = ( isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) )
                                     ? $arrayParametros['strPrefijoEmpresa'] : null;
            $strFechaInicio        = ( isset($arrayParametros['strFechaInicio']) && !empty($arrayParametros['strFechaInicio']) )
                                     ? $arrayParametros['strFechaInicio'] : null;
            $strFechaFin           = ( isset($arrayParametros['strFechaFin']) && !empty($arrayParametros['strFechaFin']) )
                                     ? $arrayParametros['strFechaFin'] : null;
            $strCategoria          = ( isset($arrayParametros['strCategoria']) && !empty($arrayParametros['strCategoria']) )
                                     ? $arrayParametros['strCategoria'] : null;
            $strGrupo              = ( isset($arrayParametros['strGrupo']) && !empty($arrayParametros['strGrupo']) )
                                     ? $arrayParametros['strGrupo'] : null;
            $strSubgrupo           = ( isset($arrayParametros['strSubgrupo']) && !empty($arrayParametros['strSubgrupo']) )
                                     ? $arrayParametros['strSubgrupo'] : null;
            $strBanderaRecurrencia = ( isset($arrayParametros['strBanderaRecurrencia']) && !empty($arrayParametros['strBanderaRecurrencia']) )
                                     ? $arrayParametros['strBanderaRecurrencia'] : null;
            
            if( !empty($strPrefijoEmpresa) && !empty($strFechaInicio) && !empty($strFechaFin) && !empty($strBanderaRecurrencia) )
            {
                $floatValorVentas = 0;//Se instancia la variable para evitar ingresar un NOTICE en el log de error
                $floatValorVentas = str_pad($floatValorVentas, 30, " ");

                $strSql = "BEGIN :floatValorVentas := DB_FINANCIERO.FNCK_CONSULTS.F_GET_TOTAL_FACTURACION( :strPrefijoEmpresa, ".
                                                                                                          ":strFechaInicio, ".
                                                                                                          ":strFechaFin, ".
                                                                                                          ":strCategoria, ".
                                                                                                          ":strGrupo, ".
                                                                                                          ":strSubgrupo, ".
                                                                                                          ":strBanderaRecurrencia ); END;";

                $objStmt = $this->_em->getConnection()->prepare($strSql);
                $objStmt->bindParam('strPrefijoEmpresa',     $strPrefijoEmpresa);
                $objStmt->bindParam('strFechaInicio',        $strFechaInicio);
                $objStmt->bindParam('strFechaFin',           $strFechaFin);
                $objStmt->bindParam('strCategoria',          $strCategoria);
                $objStmt->bindParam('strGrupo',              $strGrupo);
                $objStmt->bindParam('strSubgrupo',           $strSubgrupo);
                $objStmt->bindParam('strBanderaRecurrencia', $strBanderaRecurrencia);
                $objStmt->bindParam('floatValorVentas',      $floatValorVentas);

                $objStmt->execute();

                $arrayResultados['floatValorVentas'] = trim($floatValorVentas);
            }
            else
            {
                throw new \Exception('No se han enviado los parámetros adecuados para consultar la información de facturación. - Prefijo('.
                                     $strPrefijoEmpresa.'), FechaInicio('.$strFechaInicio.'), FechaFin('.$strFechaFin.'), Recurrencia('.
                                     $strBanderaRecurrencia.')'); 
            }//( !empty($strPrefijoEmpresa) && !empty($strFechaInicio) && !empty($strFechaFin) && !empty($strBanderaRecurrencia) )
        }
        catch(\Exception $e)
        {
            throw ($e);
        }
            
        return $arrayResultados;
    }


    /**
     * Documentación para el método 'getInformacionVentas'.
     * 
     * Método que retorna la cantidad y total de las ventas dependiendo de los parámetros enviados por el usuario
     *
     * @param array $arrayParametros [strPrefijoEmpresa    => Prefijo de la empresa que realizará la consulta para la información comercial
     *                                strFechaInicio       => Fecha de inicio de la búsqueda
     *                                strFechaFin          => Fecha final de la búsqueda
     *                                strCategoria         => Categoría de los productos a buscar
     *                                strGrupo             => Grupo de los productos a buscar
     *                                strSubgrupo          => Subgrupo de los productos a buscar
     *                                strUsrCreacion       => Usuario en sessión
     *                                strIpCreacion        => Ip del usuario en sessión
     *                                strFrecuencia        => Frecuencia facturación del servicio
     *                                strDatabaseDsn       => Base de datos a la cual se conectará para realizar la consulta
     *                                strUserComercial     => Usuario del esquema comercial 'DB_COMERCIAL'
     *                                strTipoPersonal      => El tipo del personal en sessión si es 'VENDEDOR' o 'SUBGERENTE'
     *                                intIdPersonEmpresaRol=> Id del usuario en sessión
     *                                strOpcionSelect      => Bandera que indica lo que se desea obtener del SELECT
     *                                strEmailUsrSession   => Email del usuario en sessión
     *                                strPasswordComercial => Password del esquema comercial 'DB_COMERCIAL' ]
     * 
     * @return array $arrayResultados ['intTotalVentas'      => 'Cantidad de ventas obtenidaas',
     *                                 'floatValorVentas'    => 'Total del precio de venta',
     *                                 'strMensajeRespuesta' => 'Mensaje de respuesta devuelta por el método' ]
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 09-06-2017
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 12-06-2017 - Se modifica la función para habilitar la información de ventas para un personal especifico ya sea 'VENDEDOR' o 
     *                           'SUBGERENTE'
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.2 14-06-2017 - Se modifica la función para habilitar las consultas de las solicitudes de descuento en estado 'Pendiente' asociadas
     *                           a los servicios, y para ello se envía el parámetro 'strSoloDescuento'
     */
    public function getInformacionVentas($arrayParametros)
    {
        $arrayResultados = array('intTotalVentas' => 0, 'floatValorVentas' => 0, 'strMensajeRespuesta' => '');
        
        try
        {
            $strPrefijoEmpresa     = ( isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) )
                                     ? $arrayParametros['strPrefijoEmpresa'] : null;
            $strFechaInicio        = ( isset($arrayParametros['strFechaInicio']) && !empty($arrayParametros['strFechaInicio']) )
                                     ? $arrayParametros['strFechaInicio'] : null;
            $strFechaFin           = ( isset($arrayParametros['strFechaFin']) && !empty($arrayParametros['strFechaFin']) )
                                     ? $arrayParametros['strFechaFin'] : null;
            $strCategoria          = ( isset($arrayParametros['strCategoria']) && !empty($arrayParametros['strCategoria']) )
                                     ? $arrayParametros['strCategoria'] : null;
            $strGrupo              = ( isset($arrayParametros['strGrupo']) && !empty($arrayParametros['strGrupo']) )
                                     ? $arrayParametros['strGrupo'] : null;
            $strSubgrupo           = ( isset($arrayParametros['strSubgrupo']) && !empty($arrayParametros['strSubgrupo']) )
                                     ? $arrayParametros['strSubgrupo'] : null;
            $strTipoOrdenes        = ( isset($arrayParametros['strTipoOrdenes']) && !empty($arrayParametros['strTipoOrdenes']) )
                                     ? $arrayParametros['strTipoOrdenes'] : null;
            $strFrecuencia         = ( isset($arrayParametros['strFrecuencia']) && !empty($arrayParametros['strFrecuencia']) )
                                     ? $arrayParametros['strFrecuencia'] : null;
            $strTipoPersonal       = ( isset($arrayParametros['strTipoPersonal']) && !empty($arrayParametros['strTipoPersonal']) )
                                     ? $arrayParametros['strTipoPersonal'] : null;
            $intIdPersonEmpresaRol = ( isset($arrayParametros['intIdPersonEmpresaRol']) && !empty($arrayParametros['intIdPersonEmpresaRol']) )
                                     ? $arrayParametros['intIdPersonEmpresaRol'] : null;
            $strOpcionSelect       = ( isset($arrayParametros['strOpcionSelect']) && !empty($arrayParametros['strOpcionSelect']) )
                                     ? $arrayParametros['strOpcionSelect'] : null;
            $strEmailUsrSession    = ( isset($arrayParametros['strEmailUsrSession']) && !empty($arrayParametros['strEmailUsrSession']) )
                                     ? $arrayParametros['strEmailUsrSession'] : null;
            
            if( !empty($strPrefijoEmpresa) && !empty($strFechaInicio) && !empty($strFechaFin) && !empty($strTipoOrdenes) )
            {
                $intTotalVentas      = 0;//Se instancia la variable para evitar ingresar un NOTICE en el log de error
                $intTotalVentas      = str_pad($intTotalVentas, 30, " ");
                $floatValorVentas    = 0;//Se instancia la variable para evitar ingresar un NOTICE en el log de error
                $floatValorVentas    = str_pad($floatValorVentas, 30, " ");
                $strMensajeRespuesta = '';//Se instancia la variable para evitar ingresar un NOTICE en el log de error
                $strMensajeRespuesta = str_pad($floatValorVentas, 5000, " ");   

                $strSql = "BEGIN DB_COMERCIAL.COMEK_CONSULTAS.P_GET_SUM_ORDENES_SERVICIO( :strPrefijoEmpresa, ".
                                                                                         ":strFechaInicio, ".
                                                                                         ":strFechaFin, ".
                                                                                         ":strCategoria, ".
                                                                                         ":strGrupo, ".
                                                                                         ":strSubgrupo, ".
                                                                                         ":strTipoOrdenes, ".
                                                                                         ":strFrecuencia, ".
                                                                                         ":strTipoPersonal, ".
                                                                                         ":intIdPersonEmpresaRol, ".
                                                                                         ":strOpcionSelect, ".
                                                                                         ":strEmailUsrSession, ".
                                                                                         ":intTotalVentas, ".
                                                                                         ":floatValorVentas, ".        
                                                                                         ":strMensajeRespuesta ); END;";

                $objStmt = $this->_em->getConnection()->prepare($strSql);      

                $objStmt->bindParam('strPrefijoEmpresa',     $strPrefijoEmpresa);                
                $objStmt->bindParam('strFechaInicio',        $strFechaInicio);                
                $objStmt->bindParam('strFechaFin',           $strFechaFin);                
                $objStmt->bindParam('strCategoria',          $strCategoria);                
                $objStmt->bindParam('strGrupo',              $strGrupo);                
                $objStmt->bindParam('strSubgrupo',           $strSubgrupo);                
                $objStmt->bindParam('strTipoOrdenes',        $strTipoOrdenes);                
                $objStmt->bindParam('strFrecuencia',         $strFrecuencia);
                $objStmt->bindParam("strTipoPersonal",       $strTipoPersonal);                
                $objStmt->bindParam("intIdPersonEmpresaRol", $intIdPersonEmpresaRol);                
                $objStmt->bindParam("strOpcionSelect",       $strOpcionSelect);                
                $objStmt->bindParam("strEmailUsrSession",    $strEmailUsrSession);                
                $objStmt->bindParam('intTotalVentas',        $intTotalVentas);                
                $objStmt->bindParam('floatValorVentas',      $floatValorVentas);                                              
                $objStmt->bindParam('strMensajeRespuesta',   $strMensajeRespuesta);                                                
                $objStmt->execute();                                   
                $arrayResultados['intTotalVentas']      = $intTotalVentas;
                $arrayResultados['floatValorVentas']    = $floatValorVentas;
                $arrayResultados['strMensajeRespuesta'] = trim($strMensajeRespuesta);                                   
            }
            else
            {
                throw new \Exception( 'No se han enviado los parámetros adecuados para consultar la información de ventas. - Prefijo('.
                                      $strPrefijoEmpresa.'), FechaInicio('.$strFechaInicio.'), FechaFin('.$strFechaFin.'), TipoOrdenes('.
                                      $strTipoOrdenes.')' ); 
            }//( !empty($strPrefijoEmpresa) && !empty($strFechaInicio) && !empty($strFechaFin) && !empty($strTipoOrdenes) )
        }
        catch(\Exception $e)
        {
            throw ($e);
        }        
        
        return $arrayResultados;
    }
    
    /**
     * procesarPromocionesBw
     *
     * Documentación para el método 'procesarPromocionesBw'.
     * 
     * Método que valida y procesa la información de promociones de ancho de banda de MD
     *
     * @param array $arrayParametros [
     *                                strEmpresaCod     => Código de la empresa que realizará el proceso
     *                                strTipoProceso    => Tipo proceso
     *                                strValor          => Valor a procesar (idPlan, idOlt, etc)
     *                                intIdServicio     => Identificador del servicio
     *                               ]
     * 
     * @return array $arrayResultado [
     *                                strStatus            => Estado del proceso ejecutado
     *                                strMensaje           => Mensaje a retornar luego del proceso
     *                                strAplicaPromoExiste => bandera que indica si el cliente sigue aplicando a una
     *                                                        promoción que tiene actualmente aplicada
     *                                strMapeaPromo        => bandera que indica si el cliente mapea promoción nueva
     *                                                        a la cual está aplicando
     *                                strTeniaPromo        => bandera que indica si el cliente tenia una promoción
     *                                                        aplicada
     *                                strConfiguraBw       => bandera que indica si un servicio debe ser enviado a configurar a RDA
     *                                strStatus            => bandera que indica el estado del procesamiento del servicio
     *                               ]
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 20-08-2019
     * @since 1.0
     */
    public function procesarPromocionesBw($arrayParametros)
    {
        $strEmpresaCod     = ( isset($arrayParametros['strEmpresaCod']) && !empty($arrayParametros['strEmpresaCod']) )
                             ? $arrayParametros['strEmpresaCod'] : null;
        $strTipoProceso    = ( isset($arrayParametros['strTipoProceso']) && !empty($arrayParametros['strTipoProceso']) )
                             ? $arrayParametros['strTipoProceso'] : null;
        $strValor          = ( isset($arrayParametros['strValor']) && !empty($arrayParametros['strValor']) )
                             ? $arrayParametros['strValor'] : null;
        $intIdServicio     = ( isset($arrayParametros['intIdServicio']) && !empty($arrayParametros['intIdServicio']) )
                             ? $arrayParametros['intIdServicio'] : null;
        $arrayResultados = array(
                                 'strStatus'            => "ERROR", 
                                 'strAplicaPromoExiste' => "NO",
                                 'strMapeaPromo'        => "NO",
                                 'strTeniaPromo'        => "NO",
                                 'strConfiguraBw'       => "NO");
        $strAplicaPromoExiste = str_repeat(' ', 100);
        $strMapeaPromo        = str_repeat(' ', 100);
        $strTeniaPromo        = str_repeat(' ', 100);
        $intIdPlanPromo       = str_repeat(' ', 100);
        $strConfiguraBw       = str_repeat(' ', 100);
        $strStatus            = str_repeat(' ', 100);
        try
        {
            if( !empty($strEmpresaCod) && !empty($strTipoProceso) && !empty($strValor) && !empty($intIdServicio) )
            {
                $strSql = "BEGIN DB_COMERCIAL.CMKG_PROMOCIONES_BW.P_PROCESO_MAPEO_PROMOCIONES_BW( :strEmpresaCod, ".
                                                                                                 ":strTipoProceso, ".
                                                                                                 ":strValor, ".
                                                                                                 ":intIdServicio, ".
                                                                                                 ":strAplicaPromoExiste, ".
                                                                                                 ":strMapeaPromo, ".        
                                                                                                 ":strTeniaPromo, ".        
                                                                                                 ":intIdPlanPromo, ".
                                                                                                 ":strConfiguraBw, ".
                                                                                                 ":strStatus); END;";

                $objStmt = $this->_em->getConnection()->prepare($strSql);

                $objStmt->bindParam('strEmpresaCod'       , $strEmpresaCod);
                $objStmt->bindParam('strTipoProceso'      , $strTipoProceso);
                $objStmt->bindParam('strValor'            , $strValor);
                $objStmt->bindParam('intIdServicio'       , $intIdServicio);
                $objStmt->bindParam('strAplicaPromoExiste', $strAplicaPromoExiste);
                $objStmt->bindParam('strMapeaPromo'       , $strMapeaPromo);
                $objStmt->bindParam('strTeniaPromo'       , $strTeniaPromo);
                $objStmt->bindParam('intIdPlanPromo'      , $intIdPlanPromo);
                $objStmt->bindParam('strConfiguraBw'      , $strConfiguraBw);
                $objStmt->bindParam('strStatus'           , $strStatus);
                $objStmt->execute();  
                
                $arrayResultados['strAplicaPromoExiste'] = $strAplicaPromoExiste;
                $arrayResultados['strMapeaPromo']        = $strMapeaPromo;
                $arrayResultados['strTeniaPromo']        = $strTeniaPromo;
                $arrayResultados['intIdPlanPromo']       = $intIdPlanPromo;
                $arrayResultados['strConfiguraBw']       = $strConfiguraBw;
                $arrayResultados['strStatus']            = $strStatus;
            }
            else
            {
                throw new \Exception( 'No se han enviado los parámetros adecuados para procesar la información. - strEmpresaCod('.
                                      $strEmpresaCod.'), strTipoProceso('.$strTipoProceso.'), strValor('.$strValor.'), intIdServicio('.
                                      $intIdServicio.')' ); 
            //( !empty($strEmpresaCod) && !empty($strTipoProceso) && !empty($strValor) && !empty($intIdServicio) )
            }
        }
        catch(\Exception $e)
        {
            throw ($e);
        }        
        
        return $arrayResultados;
    }

    /**
     * trasladaPromocionesMensuales
     *
     * Documentación para el método 'trasladaPromocionesMensuales'.
     * 
     * Método que valida y traslada la información de promociones mensuales que haya tenido el cliente en su origen de traslado
     *
     * @param array $arrayParametros [
     *                                strEmpresaCod     => Código de la empresa que realizará el proceso
     *                                intIdPuntoOrigen  => Identificador del punto origen del traslado
     *                                intIdPuntoDestino => Identificador del punto destino del traslado
     *                               ]
     * 
     * @return array $arrayResultado [
     *                                strRespuestaProceso  =>
     *                                strTrasladoPromo     => 
     *                               ]
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 06-04-2022
     * @since 1.0
     */
    public function trasladaPromocionesMensuales($arrayParametros)
    {
        $strEmpresaCod     = ( isset($arrayParametros['strEmpresaCod']) && !empty($arrayParametros['strEmpresaCod']) )
                             ? $arrayParametros['strEmpresaCod'] : null;
        $strTipoPromo      = "PROM_MENS";
        $intIdPuntoOrigen  = ( isset($arrayParametros['intIdPuntoOrigen']) && !empty($arrayParametros['intIdPuntoOrigen'])) ?
                             $arrayParametros['intIdPuntoOrigen'] : null;
        $intIdPuntoDestino = ( isset($arrayParametros['intIdPuntoDestino']) && !empty($arrayParametros['intIdPuntoDestino'])) ?
                             $arrayParametros['intIdPuntoDestino'] : null;
        $arrayResultados   = array('strRespuestaProceso' => "NO_REGISTRA_PROMO", 
                                   'strTrasladoPromo'    => "ERROR");
        $strRespuestaProceso = str_repeat(' ', 100);
        $strTrasladoPromo    = str_repeat(' ', 100);
        try
        {
            if( !empty($strEmpresaCod) && !empty($intIdPuntoOrigen) && !empty($intIdPuntoDestino) )
            {
                $strSql = "BEGIN DB_COMERCIAL.CMKG_PROMOCIONES.P_TRASLADA_PROMO_MAPEO( :strEmpresaCod, ".
                                                                                      ":intIdPuntoOrigen, ".
                                                                                      ":intIdPuntoDestino, ".
                                                                                      ":strRespuestaProceso, ".
                                                                                      ":strTrasladoPromo); END;";

                $objStmt = $this->_em->getConnection()->prepare($strSql);

                $objStmt->bindParam('strEmpresaCod'      , $strEmpresaCod);
                $objStmt->bindParam('intIdPuntoOrigen'   , $intIdPuntoOrigen);
                $objStmt->bindParam('intIdPuntoDestino'  , $intIdPuntoDestino);
                $objStmt->bindParam('strRespuestaProceso', $strRespuestaProceso);
                $objStmt->bindParam('strTrasladoPromo'   , $strTrasladoPromo);
                $objStmt->execute();  
                
                $arrayResultados['strRespuestaProceso'] = $strRespuestaProceso;
                $arrayResultados['strTrasladoPromo']    = $strTrasladoPromo;
            }
            else
            {
                throw new \Exception( 'No se han enviado los parámetros adecuados para procesar la información. - strEmpresaCod('.
                                      $strEmpresaCod.'), intIdPuntoOrigen('.$intIdPuntoOrigen.'), intIdPuntoDestino('.$intIdPuntoDestino.')' ); 
            }
        }
        catch(\Exception $e)
        {
            throw ($e);
        }        
        
        return $arrayResultados;
    }
    
    /**
     * aplicarPromocionesBw
     *
     * Documentación para el método 'aplicarPromocionesBw'.
     * 
     * Método que valida y procesa la confirmación de la promoción aplicada
     *
     * @param array $arrayParametros [
     *                                strEmpresaCod     => Código de la empresa que realizará el proceso
     *                                strTipoProceso    => Tipo proceso
     *                                intIdServicio     => Identificador del servicio
     *                               ]
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 30-08-2019
     * @since 1.0
     * 
     * Se cambia nombre de variable $strTipoProceso por $strTipoPromo.
     * Se agrega nuevo parámetro $strTipoProceso al procedimiento P_APLICA_PROMOCION.
     *
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 2.0 27-11-2019
     */
    public function aplicarPromocionesBw($arrayParametros)
    {
        $strEmpresaCod   = ( isset($arrayParametros['strEmpresaCod']) && !empty($arrayParametros['strEmpresaCod']) )
                           ? $arrayParametros['strEmpresaCod'] : null;
        $strTipoPromo    = "PROM_BW";
        $strTipoProceso  = null;
        $intIdServicio   = ( isset($arrayParametros['intIdServicio']) && !empty($arrayParametros['intIdServicio']) )
                           ? $arrayParametros['intIdServicio'] : null;
        $strMensajeResultado = str_repeat(' ', 500);
        try
        {
            if( !empty($strEmpresaCod) && !empty($strTipoPromo) && !empty($intIdServicio) )
            {
                $strSql = "BEGIN DB_COMERCIAL.CMKG_PROMOCIONES.P_APLICA_PROMOCION( :strEmpresaCod, ".
                                                                                  ":strTipoPromo, ".
                                                                                  ":intIdServicio, ".
                                                                                  ":strTipoProceso,".
                                                                                  ":strMensajeResultado ); END;";

                $objStmt = $this->_em->getConnection()->prepare($strSql);

                $objStmt->bindParam('strEmpresaCod'       , $strEmpresaCod);
                $objStmt->bindParam('strTipoPromo'        , $strTipoPromo);
                $objStmt->bindParam('intIdServicio'       , $intIdServicio);
                $objStmt->bindParam('strTipoProceso'      , $strTipoProceso);
                $objStmt->bindParam('strMensajeResultado' , $strMensajeResultado);
                $objStmt->execute();  
            }
            else
            {
                throw new \Exception( 'No se han enviado los parámetros adecuados para procesar la información. - strEmpresaCod('.
                                      $strEmpresaCod.'), strTipoPromo('.$strTipoPromo.'), intIdServicio('.
                                      $intIdServicio.')' ); 
            //( !empty($strEmpresaCod) && !empty($strTipoPromo) && !empty($intIdServicio) )
            }
        }
        catch(\Exception $e)
        {
            throw ($e);
        }
    }
    
    /**
     * actualizarRdaPromocionesBw
     *
     * Documentación para el método 'actualizarRdaPromocionesBw'.
     * 
     * Método que actualiza la información en tablas masivas de RDA para procesar promociones en futuros meses
     *
     * @param array $arrayParametros [
     *                                intIdServicio          => Identificador del servicio
     *                                strLineProfilePromo    => LineProfile promocional del servicio
     *                                strTrafficPromo        => Traffic promocional del servicio
     *                                strGemPortPromo        => GemPort promocional del servicio
     *                                strCapacidadUpPromo    => Capacidad Up promocional del servicio
     *                                strCapacidadDownPromo  => Capacidad Down promocional del servicio
     *                                strUsrCreacion         => Usuario de creación del servicio
     *                                strIpCreacion          => Ip de creación del servicio
     *                               ]
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 18-09-2019
     * @since 1.0
     */
    public function actualizarRdaPromocionesBw($arrayParametros)
    {
        $strTipoProceso        = "AplicaPromo";
        $strTipoPromocion      = "PROM_BW";
        $intIdServicio         = ( isset($arrayParametros['intIdServicio']) && !empty($arrayParametros['intIdServicio']) )
                                 ? $arrayParametros['intIdServicio'] : null;
        $strLineProfilePromo   = ( isset($arrayParametros['strLineProfilePromo']) && !empty($arrayParametros['strLineProfilePromo']) )
                                 ? $arrayParametros['strLineProfilePromo'] : null;
        $strTrafficPromo       = ( isset($arrayParametros['strTrafficPromo']) && !empty($arrayParametros['strTrafficPromo']) )
                                 ? $arrayParametros['strTrafficPromo'] : null;
        $strGemPortPromo       = ( isset($arrayParametros['strGemPortPromo']) && !empty($arrayParametros['strGemPortPromo']) )
                                 ? $arrayParametros['strGemPortPromo'] : null;
        $strCapacidadUpPromo   = ( isset($arrayParametros['strCapacidadUpPromo']) && !empty($arrayParametros['strCapacidadUpPromo']) )
                                 ? $arrayParametros['strCapacidadUpPromo'] : null;
        $strCapacidadDownPromo = ( isset($arrayParametros['strCapacidadDownPromo']) && !empty($arrayParametros['strCapacidadDownPromo']) )
                                 ? $arrayParametros['strCapacidadDownPromo'] : null;
        $strUsrCreacion        = ( isset($arrayParametros['strUsrCreacion']) && !empty($arrayParametros['strUsrCreacion']) )
                                 ? $arrayParametros['strUsrCreacion'] : null;
        $strIpCreacion         = ( isset($arrayParametros['strIpCreacion']) && !empty($arrayParametros['strIpCreacion']) )
                                 ? $arrayParametros['strIpCreacion'] : null;
        $strObservacion        = "Actualización de campos promocionales";
        $strMensajeResp        = str_repeat(' ', 500);
        try
        {
            if(!empty($strTipoProceso) && !empty($strTipoPromocion) && !empty($intIdServicio)   &&
               !empty($strUsrCreacion) && !empty($strIpCreacion)    && !empty($strObservacion)
              )
            {
                $arrayParametrosBd = array();
                $arrayParametrosBd['strIpCreacion']    = $strIpCreacion;
                $arrayParametrosBd['intIdServicio']    = $intIdServicio;
                $arrayParametrosBd['strUsrCreacion']   = $strUsrCreacion;
                $arrayParametrosBd['strTipoProceso']   = $strTipoProceso;
                $arrayParametrosBd['strObservacion']   = $strObservacion;
                $arrayParametrosBd['strTrafficPromo']  = $strTrafficPromo;
                $arrayParametrosBd['strGemPortPromo']  = $strGemPortPromo;
                $arrayParametrosBd['strTipoPromocion'] = $strTipoPromocion;
                $arrayParametrosBd['strLineProfilePromo']   = $strLineProfilePromo;
                $arrayParametrosBd['strCapacidadUpPromo']   = $strCapacidadUpPromo;
                $arrayParametrosBd['strCapacidadDownPromo'] = $strCapacidadDownPromo;
                        
                $strSql = "BEGIN DB_COMERCIAL.CMKG_PROMOCIONES_BW.P_UPDATE_RDA_PROMOCION( :strJson, ".
                                                                                         ":strMensajeResp); END;";

                $objStmt = $this->_em->getConnection()->prepare($strSql);
                $objStmt->bindParam('strJson'        , json_encode($arrayParametrosBd));
                $objStmt->bindParam('strMensajeResp' , $strMensajeResp);
                $objStmt->execute();  
            }
            else
            {
                throw new \Exception( 'No se han enviado los parámetros adecuados para procesar la información. - intIdServicio('.
                                      $intIdServicio.'), strLineProfilePromo('.$strLineProfilePromo.'), strTrafficPromo('.
                                      $strTrafficPromo.'), strGemPortPromo('.$strGemPortPromo.'), strCapacidadUpPromo('.$strCapacidadUpPromo.')'.
                                      ', strCapacidadDownPromo('.$strCapacidadDownPromo.'), strTipoPromocion('.$strTipoPromocion.')'.
                                      ', strTipoProceso('.$strTipoProceso.')'
                                    );
            //( !empty($strEmpresaCod) && !empty($strTipoProceso) && !empty($intIdServicio) )
            }
        }
        catch(\Exception $e)
        {
            throw ($e);
        }
    }

    /**
     *
     * getRowsHistorialServicio, obtiene filas del historial de un servicio, dependiendo los parametros enviados
     *
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.0 26/02/2019
     * Costo query: 15 , Cardinalidad: 2
     * @param mixed arrayRequest => ['intRow'        => Numero de filas a retornar
     *                               'strOrder'      => Orden en que se recuperaran las filas
     *                               'intField'      => Columna que debe ordenar
     *                               'intIdServicio' => Id del servicio]
     * @return array $arraResponse => Array con el resultado del query
     * 
     */     
    public function getServicioPreferenciaByPunto($arrayRequest)
    {
        $arrayResponse = array();
        try
        {
            $strQuery  = "SELECT DB_COMERCIAL.GET_ID_SERVICIO_PREF(:intIdPunto) ID_SERVICIO FROM DUAL";

            $objStmt = $this->_em->getConnection()->prepare($strQuery);
            $objStmt->bindValue('intIdPunto', $arrayRequest['intIdPunto']);
            $objStmt->execute();

            $arrayResponse = $objStmt->fetchAll();
        }
        catch(\Exception $e)
        {
            error_log('InfoServicioRepository -> getServicioPreferenciaByPunto : '. $e->getMessage());
        }         
        return $arrayResponse;
    }
    
    /**
     * Documentación para el método 'getInformacionVentasAgrupadas'.
     * 
     * Método que retorna los vendedores, la cantidad y total de las ventas dependiendo de los parámetros enviados por el usuario
     *
     * @param array $arrayParametros [strPrefijoEmpresa    => Prefijo de la empresa que realizará la consulta para la información comercial
     *                                strFechaInicio       => Fecha de inicio de la búsqueda
     *                                strFechaFin          => Fecha final de la búsqueda
     *                                strCategoria         => Categoría de los productos a buscar
     *                                strGrupo             => Grupo de los productos a buscar
     *                                strSubgrupo          => Subgrupo de los productos a buscar
     *                                strUsrCreacion       => Usuario en sessión
     *                                strIpCreacion        => Ip del usuario en sessión
     *                                strFrecuencia        => Frecuencia facturación del servicio
     *                                strDatabaseDsn       => Base de datos a la cual se conectará para realizar la consulta
     *                                strUserComercial     => Usuario del esquema comercial 'DB_COMERCIAL'
     *                                strTipoPersonal      => El tipo del personal en sessión si es 'VENDEDOR' o 'SUBGERENTE'
     *                                intIdPersonEmpresaRol=> Id del usuario en sessión
     *                                strOpcionSelect      => Bandera que indica lo que se desea obtener del SELECT
     *                                strEmailUsrSession   => Email del usuario en sessión
     *                                strPasswordComercial => Password del esquema comercial 'DB_COMERCIAL' ]
     * 
     * @return array $arrayResultados ['intTotalVentas'      => 'Cantidad de ventas obtenidaas',
     *                                 'floatValorVentas'    => 'Total del precio de venta',
     *                                 'strMensajeRespuesta' => 'Mensaje de respuesta devuelta por el método' ]
     *
     * @author Kevin Baque <kbaque@telconet.ec>
     * @version 1.0 07-11-2018
     */

    public function getInformacionVentasAgrupadas($arrayParametros)
    {   
        $objOrdenesAgrupadas = null;
        try
        {
            $strPrefijoEmpresa     = ( isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) )
                                     ? $arrayParametros['strPrefijoEmpresa'] : null;
            $strFechaInicio        = ( isset($arrayParametros['strFechaInicio']) && !empty($arrayParametros['strFechaInicio']) )
                                     ? $arrayParametros['strFechaInicio'] : null;
            $strFechaFin           = ( isset($arrayParametros['strFechaFin']) && !empty($arrayParametros['strFechaFin']) )
                                     ? $arrayParametros['strFechaFin'] : null;
            $strDatabaseDsn       = ( isset($arrayParametros['strDatabaseDsn']) && !empty($arrayParametros['strDatabaseDsn']) )
                                    ? $arrayParametros['strDatabaseDsn'] : null;
            $strUserComercial     = ( isset($arrayParametros['strUserComercial']) && !empty($arrayParametros['strUserComercial']) )
                                    ? $arrayParametros['strUserComercial'] : null;
            $strPasswordComercial = ( isset($arrayParametros['strPasswordComercial']) && !empty($arrayParametros['strPasswordComercial']) )
                                    ? $arrayParametros['strPasswordComercial'] : null;                                     
            $strCategoria          = ( isset($arrayParametros['strCategoria']) && !empty($arrayParametros['strCategoria']) )
                                     ? $arrayParametros['strCategoria'] : null;
            $strGrupo              = ( isset($arrayParametros['strGrupo']) && !empty($arrayParametros['strGrupo']) )
                                     ? $arrayParametros['strGrupo'] : null;
            $strSubgrupo           = ( isset($arrayParametros['strSubgrupo']) && !empty($arrayParametros['strSubgrupo']) )
                                     ? $arrayParametros['strSubgrupo'] : null;
            $strTipoOrdenes        = ( isset($arrayParametros['strTipoOrdenes']) && !empty($arrayParametros['strTipoOrdenes']) )
                                     ? $arrayParametros['strTipoOrdenes'] : null;
            $strFrecuencia         = ( isset($arrayParametros['strFrecuencia']) && !empty($arrayParametros['strFrecuencia']) )
                                     ? $arrayParametros['strFrecuencia'] : null;
            $strTipoPersonal       = ( isset($arrayParametros['strTipoPersonal']) && !empty($arrayParametros['strTipoPersonal']) )
                                     ? $arrayParametros['strTipoPersonal'] : null;
            $intIdPersonEmpresaRol = ( isset($arrayParametros['intIdPersonEmpresaRol']) && !empty($arrayParametros['intIdPersonEmpresaRol']) )
                                     ? $arrayParametros['intIdPersonEmpresaRol'] : null;
            $strOpcionSelect       = ( isset($arrayParametros['strOpcionSelect']) && !empty($arrayParametros['strOpcionSelect']) )
                                     ? $arrayParametros['strOpcionSelect'] : null;
            
            if( !empty($strPrefijoEmpresa) && !empty($strFechaInicio) && !empty($strFechaFin) && !empty($strTipoOrdenes) )
            {
                $objOciConexion             = oci_connect($strUserComercial, $strPasswordComercial, $strDatabaseDsn);
                $objOrdenesAgrupadas = oci_new_cursor($objOciConexion);
                $strSQL = "BEGIN DB_COMERCIAL.COMEK_CONSULTAS.P_GET_AGRU_ORDENES( :strPrefijoEmpresa, ".
                                                                                         ":strFechaInicio, ".
                                                                                         ":strFechaFin, ".
                                                                                         ":strCategoria, ".
                                                                                         ":strGrupo, ".
                                                                                         ":strSubgrupo, ".
                                                                                         ":strTipoOrdenes, ".
                                                                                         ":strFrecuencia, ".
                                                                                         ":strTipoPersonal, ".
                                                                                         ":intIdPersonEmpresaRol, ".
                                                                                         ":strOpcionSelect, ".
                                                                                         ":strMensajeRespuesta, ".        
                                                                                         ":objOrdenesAgrupadas ); END;";
                $objStmt                    = oci_parse($objOciConexion, $strSQL);                            
                oci_bind_by_name($objStmt, ":strPrefijoEmpresa",     $strPrefijoEmpresa);                
                oci_bind_by_name($objStmt, ":strFechaInicio",        $strFechaInicio);                
                oci_bind_by_name($objStmt, ":strFechaFin",           $strFechaFin);                
                oci_bind_by_name($objStmt, ":strCategoria",          $strCategoria);                
                oci_bind_by_name($objStmt, ":strGrupo",              $strGrupo);                
                oci_bind_by_name($objStmt, ":strSubgrupo",           $strSubgrupo);                
                oci_bind_by_name($objStmt, ":strTipoOrdenes",        $strTipoOrdenes);                
                oci_bind_by_name($objStmt, ":strFrecuencia",         $strFrecuencia);
                oci_bind_by_name($objStmt, ":strTipoPersonal",       $strTipoPersonal);                
                oci_bind_by_name($objStmt, ":intIdPersonEmpresaRol", $intIdPersonEmpresaRol);                
                oci_bind_by_name($objStmt, ":strOpcionSelect",       $strOpcionSelect);                
                oci_bind_by_name($objStmt, ":strMensajeRespuesta",   $strMensajeRespuesta);                                      
                oci_bind_by_name($objStmt, ":objOrdenesAgrupadas", $objOrdenesAgrupadas, -1, OCI_B_CURSOR);          
                oci_execute($objStmt);
                oci_execute($objOrdenesAgrupadas);
                oci_commit($objOciConexion);
            }
            else
            {
                throw new \Exception( 'No se han enviado los parámetros adecuados para consultar la información de ventas. - Prefijo('.
                                      $strPrefijoEmpresa.'), FechaInicio('.$strFechaInicio.'), FechaFin('.$strFechaFin.'), TipoOrdenes('.
                                      $strTipoOrdenes.')' ); 
            }//( !empty($strPrefijoEmpresa) && !empty($strFechaInicio) && !empty($strFechaFin) && !empty($strTipoOrdenes) )
        }
        catch(\Exception $e)
        {
            throw ($e);
        }        
        return $objOrdenesAgrupadas;
    }    


    /**
     * Documentación para el método 'getListadoVendedoresDestacados'.
     * 
     * Función encargada para retornar la información de los vendedores destacados
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 08-06-2017
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 12-06-2017 - Se modifica la función para obtener el listado de vendedores destacados asociados un personal especifico ya sea
     *                           como 'VENDEDOR' o 'SUBGERENTE'
     *
     * @param array $arrayParametros [strPrefijoEmpresa    => Prefijo de la empresa que realizará la consulta para la información comercial
     *                                strFechaInicio       => Fecha de inicio de la búsqueda
     *                                strFechaFin          => Fecha final de la búsqueda
     *                                strCategoria         => Categoría de los productos a buscar
     *                                strGrupo             => Grupo de los productos a buscar
     *                                strSubgrupo          => Subgrupo de los productos a buscar
     *                                strUsrCreacion       => Usuario en sessión
     *                                strIpCreacion        => Ip del usuario en sessión
     *                                intRownum            => Cantidad de productos a retornar
     *                                strTipoPersonal      => El tipo del personal en sessión si es 'VENDEDOR' o 'SUBGERENTE'
     *                                intIdPersonEmpresaRol=> Id del usuario en sessión
     *                                strDatabaseDsn       => Base de datos a la cual se conectará para realizar la consulta
     *                                strUserComercial     => Usuario del esquema comercial 'DB_COMERCIAL'
     *                                strPasswordComercial => Password del esquema comercial 'DB_COMERCIAL' ]
     *
     * @return cursor $cursorVendedoresDestacados
     */
    public function getListadoVendedoresDestacados($arrayParametros)
    {
        $cursorVendedoresDestacados = null;

        try
        {
            $strPrefijoEmpresa    = ( isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) )
                                    ? $arrayParametros['strPrefijoEmpresa'] : null;
            $strFechaInicio       = ( isset($arrayParametros['strFechaInicio']) && !empty($arrayParametros['strFechaInicio']) )
                                    ? $arrayParametros['strFechaInicio'] : null;
            $strFechaFin          = ( isset($arrayParametros['strFechaFin']) && !empty($arrayParametros['strFechaFin']) )
                                    ? $arrayParametros['strFechaFin'] : null;
            $strDatabaseDsn       = ( isset($arrayParametros['strDatabaseDsn']) && !empty($arrayParametros['strDatabaseDsn']) )
                                    ? $arrayParametros['strDatabaseDsn'] : null;
            $strUserComercial     = ( isset($arrayParametros['strUserComercial']) && !empty($arrayParametros['strUserComercial']) )
                                    ? $arrayParametros['strUserComercial'] : null;
            $strPasswordComercial = ( isset($arrayParametros['strPasswordComercial']) && !empty($arrayParametros['strPasswordComercial']) )
                                    ? $arrayParametros['strPasswordComercial'] : null;
            $strCategoria         = ( isset($arrayParametros['strCategoria']) && !empty($arrayParametros['strCategoria']) )
                                    ? $arrayParametros['strCategoria'] : null;
            $strGrupo             = ( isset($arrayParametros['strGrupo']) && !empty($arrayParametros['strGrupo']) )
                                    ? $arrayParametros['strGrupo'] : null;
            $strSubgrupo          = ( isset($arrayParametros['strSubgrupo']) && !empty($arrayParametros['strSubgrupo']) )
                                    ? $arrayParametros['strSubgrupo'] : null;
            $intRownum            = ( isset($arrayParametros['intRownum']) && !empty($arrayParametros['intRownum']) )? $arrayParametros['intRownum']
                                    : null;
            $strTipoPersonal      = ( isset($arrayParametros['strTipoPersonal']) && !empty($arrayParametros['strTipoPersonal']) )
                                    ? $arrayParametros['strTipoPersonal'] : null;
            $intIdPersonEmpresaRol= ( isset($arrayParametros['intIdPersonEmpresaRol']) && !empty($arrayParametros['intIdPersonEmpresaRol']) )
                                    ? $arrayParametros['intIdPersonEmpresaRol'] : null;

            if( !empty($strPrefijoEmpresa) && !empty($strFechaInicio) && !empty($strFechaFin) && !empty($strDatabaseDsn)
                && !empty($strUserComercial) && !empty($strPasswordComercial) )
            {
                $objOciConexion             = oci_connect($strUserComercial, $strPasswordComercial, $strDatabaseDsn);
                $cursorVendedoresDestacados = oci_new_cursor($objOciConexion);
                $strSQL                     = "BEGIN DB_COMERCIAL.COMEK_CONSULTAS.P_GET_LIST_VENDEDOR_DESTACADOS( :strPrefijoEmpresa, ".
                                                                                                                 ":strFechaInicio, ".
                                                                                                                 ":strFechaFin, ".
                                                                                                                 ":strCategoria, ".
                                                                                                                 ":strGrupo, ".
                                                                                                                 ":strSubgrupo, ".
                                                                                                                 ":strTipoPersonal, ".
                                                                                                                 ":intIdPersonEmpresaRol, ".
                                                                                                                 ":intRownum, ".
                                                                                                                 ":cursorVendedoresDestacados ); ".
                                              "END;";
                $objStmt                    = oci_parse($objOciConexion, $strSQL);
                
                oci_bind_by_name($objStmt, ":strPrefijoEmpresa",          $strPrefijoEmpresa);
                oci_bind_by_name($objStmt, ":strFechaInicio",             $strFechaInicio);
                oci_bind_by_name($objStmt, ":strFechaFin",                $strFechaFin);
                oci_bind_by_name($objStmt, ":strCategoria",               $strCategoria);
                oci_bind_by_name($objStmt, ":strGrupo",                   $strGrupo);
                oci_bind_by_name($objStmt, ":strSubgrupo",                $strSubgrupo);
                oci_bind_by_name($objStmt, ":strTipoPersonal",            $strTipoPersonal);
                oci_bind_by_name($objStmt, ":intIdPersonEmpresaRol",      $intIdPersonEmpresaRol);
                oci_bind_by_name($objStmt, ":intRownum",                  $intRownum);
                oci_bind_by_name($objStmt, ":cursorVendedoresDestacados", $cursorVendedoresDestacados, -1, OCI_B_CURSOR);
                oci_execute($objStmt);
                oci_execute($cursorVendedoresDestacados);
                oci_commit($objOciConexion);
            }
            else
            {
                throw new \Exception('No se han enviado los parámetros adecuados para consultar la información del dashboard comercial. - Prefijo('.
                                     $strPrefijoEmpresa.'), FechaInicio('.$strFechaInicio.'), FechaFin('.$strFechaFin.'), Database('.
                                     $strDatabaseDsn.'), UsrComercial('.$strUserComercial.'), PassComercial('.$strPasswordComercial.').'); 
            }//( !empty($strPrefijoEmpresa) && !empty($dateFechaInicio) && !empty($dateFechaFin) && !empty($strDatabaseDsn)...
        }
        catch(\Exception $e)
        {
            throw($e);
        }

        return $cursorVendedoresDestacados;
    }


    /**
     * Documentación para el método 'getListadoProductosDestacados'.
     * 
     * Función encargada para retornar la información de los productos destacados
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 08-06-2017
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 12-06-2017 - Se modifica la función para obtener el listado de productos destacados asociados un personal especifico ya sea
     *                           como 'VENDEDOR' o 'SUBGERENTE'
     *
     * @param array $arrayParametros [strPrefijoEmpresa    => Prefijo de la empresa que realizará la consulta para la información comercial
     *                                strFechaInicio       => Fecha de inicio de la búsqueda
     *                                strFechaFin          => Fecha final de la búsqueda
     *                                strCategoria         => Categoría de los productos a buscar
     *                                strGrupo             => Grupo de los productos a buscar
     *                                strSubgrupo          => Subgrupo de los productos a buscar
     *                                strUsrCreacion       => Usuario en sessión
     *                                strIpCreacion        => Ip del usuario en sessión
     *                                intRownum            => Cantidad de productos a retornar
     *                                strTipoPersonal      => El tipo del personal en sessión si es 'VENDEDOR' o 'SUBGERENTE'
     *                                intIdPersonEmpresaRol=> Id del usuario en sessión
     *                                strDatabaseDsn       => Base de datos a la cual se conectará para realizar la consulta
     *                                strUserComercial     => Usuario del esquema comercial 'DB_COMERCIAL'
     *                                strPasswordComercial => Password del esquema comercial 'DB_COMERCIAL' ]
     *
     * @return cursor $cursorProductosDestacados
     */
    public function getListadoProductosDestacados($arrayParametros)
    {
        $cursorProductosDestacados = null;

        try
        {
            $strPrefijoEmpresa    = ( isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) )
                                    ? $arrayParametros['strPrefijoEmpresa'] : null;
            $strFechaInicio       = ( isset($arrayParametros['strFechaInicio']) && !empty($arrayParametros['strFechaInicio']) )
                                    ? $arrayParametros['strFechaInicio'] : null;
            $strFechaFin          = ( isset($arrayParametros['strFechaFin']) && !empty($arrayParametros['strFechaFin']) )
                                    ? $arrayParametros['strFechaFin'] : null;
            $strDatabaseDsn       = ( isset($arrayParametros['strDatabaseDsn']) && !empty($arrayParametros['strDatabaseDsn']) )
                                    ? $arrayParametros['strDatabaseDsn'] : null;
            $strUserComercial     = ( isset($arrayParametros['strUserComercial']) && !empty($arrayParametros['strUserComercial']) )
                                    ? $arrayParametros['strUserComercial'] : null;
            $strPasswordComercial = ( isset($arrayParametros['strPasswordComercial']) && !empty($arrayParametros['strPasswordComercial']) )
                                    ? $arrayParametros['strPasswordComercial'] : null;
            $strCategoria         = ( isset($arrayParametros['strCategoria']) && !empty($arrayParametros['strCategoria']) )
                                    ? $arrayParametros['strCategoria'] : null;
            $strGrupo             = ( isset($arrayParametros['strGrupo']) && !empty($arrayParametros['strGrupo']) )
                                    ? $arrayParametros['strGrupo'] : null;
            $strSubgrupo          = ( isset($arrayParametros['strSubgrupo']) && !empty($arrayParametros['strSubgrupo']) )
                                    ? $arrayParametros['strSubgrupo'] : null;
            $intRownum            = ( isset($arrayParametros['intRownum']) && !empty($arrayParametros['intRownum']) )? $arrayParametros['intRownum']
                                    : null;
            $strTipoPersonal      = ( isset($arrayParametros['strTipoPersonal']) && !empty($arrayParametros['strTipoPersonal']) )
                                    ? $arrayParametros['strTipoPersonal'] : null;
            $intIdPersonEmpresaRol= ( isset($arrayParametros['intIdPersonEmpresaRol']) && !empty($arrayParametros['intIdPersonEmpresaRol']) )
                                    ? $arrayParametros['intIdPersonEmpresaRol'] : null;

            if( !empty($strPrefijoEmpresa) && !empty($strFechaInicio) && !empty($strFechaFin) && !empty($strDatabaseDsn)
                && !empty($strUserComercial) && !empty($strPasswordComercial) )
            {
                $objOciConexion             = oci_connect($strUserComercial, $strPasswordComercial, $strDatabaseDsn);
                $cursorProductosDestacados  = oci_new_cursor($objOciConexion);
                $strSQL                     = "BEGIN DB_COMERCIAL.COMEK_CONSULTAS.P_GET_LIST_PRODUCTO_DESTACADOS( :strPrefijoEmpresa, ".
                                                                                                                 ":strFechaInicio, ".
                                                                                                                 ":strFechaFin, ".
                                                                                                                 ":strCategoria, ".
                                                                                                                 ":strGrupo, ".
                                                                                                                 ":strSubgrupo, ".
                                                                                                                 ":strTipoPersonal, ".
                                                                                                                 ":intIdPersonEmpresaRol, ".
                                                                                                                 ":intRownum, ".
                                                                                                                 ":cursorProductosDestacados ); ".
                                              "END;";
                $objStmt                    = oci_parse($objOciConexion, $strSQL);
                
                oci_bind_by_name($objStmt, ":strPrefijoEmpresa",         $strPrefijoEmpresa);
                oci_bind_by_name($objStmt, ":strFechaInicio",            $strFechaInicio);
                oci_bind_by_name($objStmt, ":strFechaFin",               $strFechaFin);
                oci_bind_by_name($objStmt, ":strCategoria",              $strCategoria);
                oci_bind_by_name($objStmt, ":strGrupo",                  $strGrupo);
                oci_bind_by_name($objStmt, ":strSubgrupo",               $strSubgrupo);
                oci_bind_by_name($objStmt, ":strTipoPersonal",           $strTipoPersonal);
                oci_bind_by_name($objStmt, ":intIdPersonEmpresaRol",     $intIdPersonEmpresaRol);
                oci_bind_by_name($objStmt, ":intRownum",                 $intRownum);
                oci_bind_by_name($objStmt, ":cursorProductosDestacados", $cursorProductosDestacados, -1, OCI_B_CURSOR);
                oci_execute($objStmt);
                oci_execute($cursorProductosDestacados);
                oci_commit($objOciConexion);
            }
            else
            {
                throw new \Exception('No se han enviado los parámetros adecuados para consultar la información del dashboard comercial. - Prefijo('.
                                     $strPrefijoEmpresa.'), FechaInicio('.$strFechaInicio.'), FechaFin('.$strFechaFin.'), Database('.
                                     $strDatabaseDsn.'), UsrComercial('.$strUserComercial.'), PassComercial('.$strPasswordComercial.').'); 
            }//( !empty($strPrefijoEmpresa) && !empty($dateFechaInicio) && !empty($dateFechaFin) && !empty($strDatabaseDsn)...
        }
        catch(\Exception $e)
        {
            throw($e);
        }

        return $cursorProductosDestacados;
    }


    /**
     * Documentación para el método 'getInformacionDashboard'.
     * 
     * Función encargada para retornar la información necesaria para la presentación del dashboard comercial
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 06-06-2017
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 12-06-2017 - Se modifica la función para habilitar el dashboard comercial para un personal especifico ya sea 'VENDEDOR' o 
     *                           'SUBGERENTE'
     *
     * @param array $arrayParametros [strPrefijoEmpresa    => Prefijo de la empresa que realizará la consulta para la información comercial
     *                                strFechaInicio       => Fecha de inicio de la búsqueda
     *                                strFechaFin          => Fecha final de la búsqueda
     *                                strCategoria         => Categoría de los productos a buscar
     *                                strGrupo             => Grupo de los productos a buscar
     *                                strSubgrupo          => Subgrupo de los productos a buscar
     *                                strUsrCreacion       => Usuario en sessión
     *                                strIpCreacion        => Ip del usuario en sessión
     *                                strTipoPersonal      => El tipo del personal en sessión si es 'VENDEDOR' o 'SUBGERENTE'
     *                                intIdPersonEmpresaRol=> Id del usuario en sessión
     *                                strDatabaseDsn       => Base de datos a la cual se conectará para realizar la consulta
     *                                strUserComercial     => Usuario del esquema comercial 'DB_COMERCIAL'
     *                                strPasswordComercial => Password del esquema comercial 'DB_COMERCIAL' ]
     *
     * @return cursor $cursorInformacionComercial
     */
    public function getInformacionDashboard($arrayParametros)
    {
        $cursorInformacionComercial = null;

        try
        {
            $strPrefijoEmpresa    = ( isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) )
                                    ? $arrayParametros['strPrefijoEmpresa'] : null;
            $strFechaInicio       = ( isset($arrayParametros['strFechaInicio']) && !empty($arrayParametros['strFechaInicio']) )
                                    ? $arrayParametros['strFechaInicio'] : null;
            $strFechaFin          = ( isset($arrayParametros['strFechaFin']) && !empty($arrayParametros['strFechaFin']) )
                                    ? $arrayParametros['strFechaFin'] : null;
            $strDatabaseDsn       = ( isset($arrayParametros['strDatabaseDsn']) && !empty($arrayParametros['strDatabaseDsn']) )
                                    ? $arrayParametros['strDatabaseDsn'] : null;
            $strUserComercial     = ( isset($arrayParametros['strUserComercial']) && !empty($arrayParametros['strUserComercial']) )
                                    ? $arrayParametros['strUserComercial'] : null;
            $strPasswordComercial = ( isset($arrayParametros['strPasswordComercial']) && !empty($arrayParametros['strPasswordComercial']) )
                                    ? $arrayParametros['strPasswordComercial'] : null;
            $strCategoria         = ( isset($arrayParametros['strCategoria']) && !empty($arrayParametros['strCategoria']) )
                                    ? $arrayParametros['strCategoria'] : null;
            $strGrupo             = ( isset($arrayParametros['strGrupo']) && !empty($arrayParametros['strGrupo']) )
                                    ? $arrayParametros['strGrupo'] : null;
            $strSubgrupo          = ( isset($arrayParametros['strSubgrupo']) && !empty($arrayParametros['strSubgrupo']) )
                                    ? $arrayParametros['strSubgrupo'] : null;
            $strTipoPersonal      = ( isset($arrayParametros['strTipoPersonal']) && !empty($arrayParametros['strTipoPersonal']) )
                                    ? $arrayParametros['strTipoPersonal'] : null;
            $intIdPersonEmpresaRol= ( isset($arrayParametros['intIdPersonEmpresaRol']) && !empty($arrayParametros['intIdPersonEmpresaRol']) )
                                    ? $arrayParametros['intIdPersonEmpresaRol'] : null;

            if( !empty($strPrefijoEmpresa) && !empty($strFechaInicio) && !empty($strFechaFin) && !empty($strDatabaseDsn)
                && !empty($strUserComercial) && !empty($strPasswordComercial) )
            {
                $objOciConexion             = oci_connect($strUserComercial, $strPasswordComercial, $strDatabaseDsn);
                $cursorInformacionComercial = oci_new_cursor($objOciConexion);
                $strSQL                     = "BEGIN DB_COMERCIAL.COMEK_CONSULTAS.P_GET_INFO_DASHBOARD( :strPrefijoEmpresa, ".
                                                                                                       ":strFechaInicio, ".
                                                                                                       ":strFechaFin, ".
                                                                                                       ":strCategoria, ".
                                                                                                       ":strGrupo, ".
                                                                                                       ":strSubgrupo, ".
                                                                                                       ":strTipoPersonal, ".
                                                                                                       ":intIdPersonEmpresaRol, ".
                                                                                                       ":cursorInformacionComercial ); END;";
                $objStmt                    = oci_parse($objOciConexion, $strSQL);
                
                oci_bind_by_name($objStmt, ":strPrefijoEmpresa",          $strPrefijoEmpresa);
                oci_bind_by_name($objStmt, ":strFechaInicio",             $strFechaInicio);
                oci_bind_by_name($objStmt, ":strFechaFin",                $strFechaFin);
                oci_bind_by_name($objStmt, ":strCategoria",               $strCategoria);
                oci_bind_by_name($objStmt, ":strGrupo",                   $strGrupo);
                oci_bind_by_name($objStmt, ":strSubgrupo",                $strSubgrupo);
                oci_bind_by_name($objStmt, ":strTipoPersonal",            $strTipoPersonal);
                oci_bind_by_name($objStmt, ":intIdPersonEmpresaRol",      $intIdPersonEmpresaRol);
                oci_bind_by_name($objStmt, ":cursorInformacionComercial", $cursorInformacionComercial, -1, OCI_B_CURSOR);
                oci_execute($objStmt);
                oci_execute($cursorInformacionComercial);
                oci_commit($objOciConexion);
            }
            else
            {
                throw new \Exception('No se han enviado los parámetros adecuados para consultar la información del dashboard comercial. - Prefijo('.
                                     $strPrefijoEmpresa.'), FechaInicio('.$strFechaInicio.'), FechaFin('.$strFechaFin.'), Database('.
                                     $strDatabaseDsn.'), UsrComercial('.$strUserComercial.'), PassComercial('.$strPasswordComercial.').'); 
            }//( !empty($strPrefijoEmpresa) && !empty($dateFechaInicio) && !empty($dateFechaFin) && !empty($strDatabaseDsn)...
        }
        catch(\Exception $e)
        {
            throw($e);
        }

        return $cursorInformacionComercial;
    }


    /**
     * Documentación para el método 'getFechaReinicioConteo'.
     * 
     * Método que retorna la fecha de reinicio de conteo con la cual se realiza el cálculo de meses restantes de los servicios.
     *
     * @param  array $arrayParametros ['strPrefijoEmpresa' => 'Prefijo de la empresa en sessión',
     *                                 'strEstadoServicio' => 'Estado del servicio a buscar',
     *                                 'intIdServicio'     => 'Id del servicio a consultar',
     *                                 'intMesesRestantes' => 'Meses restantes del servicio a consultar']
     * 
     * @return array $arrayResultados ['strFechaReinicioConteo' => 'Fecha con la cual se realizará el cálculo de meses restantes',
     *                                 'strMensajeError'        => 'Mensaje de error en caso de existir' ]
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 02-03-2017
     */
    public function getFechaReinicioConteo($arrayParametros)
    {
        $arrayResultados = array('strFechaReinicioConteo' => '', 'strMensajeError' => '');
        
        try
        {
            $strPrefijoEmpresa = ( isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) )
                                  ? $arrayParametros['strPrefijoEmpresa'] : '';
            $strEstadoServicio = ( isset($arrayParametros['strEstadoServicio']) && !empty($arrayParametros['strEstadoServicio']) )
                                  ? $arrayParametros['strEstadoServicio'] : '';
            $intIdServicio     = ( isset($arrayParametros['intIdServicio']) && !empty($arrayParametros['intIdServicio']) )
                                  ? $arrayParametros['intIdServicio'] : 0;
            $intMesesRestantes = ( isset($arrayParametros['intMesesRestantes']) && !empty($arrayParametros['intMesesRestantes']) ) 
                                  ? $arrayParametros['intMesesRestantes'] : 0;
            
            if( $intIdServicio > 0 && !empty($strEstadoServicio) && !empty($strPrefijoEmpresa) )
            {
                $strFechaReinicioConteo = '';//Se instancia la variable para evitar ingresar un NOTICE en el log de error
                $strFechaReinicioConteo = str_pad($strFechaReinicioConteo, 11, " ");
                $strMensajeError        = '';//Se instancia la variable para evitar ingresar un NOTICE en el log de error
                $strMensajeError        = str_pad($strMensajeError, 5000, " ");
                $strLlamadoProcedure    = 'TELCOS+';

                $strSql = "BEGIN DB_COMERCIAL.COMEK_TRANSACTION.COMEP_CONTEO_FRECUENCIAS( :strPrefijoEmpresa, ".
                                                                                         ":strEstadoServicio, ".
                                                                                         ":intIdServicio, ".
                                                                                         ":intMesesRestantes, ".
                                                                                         ":strLlamadoProcedure, ".
                                                                                         ":strFechaReinicioConteo, ".
                                                                                         ":strMensajeError ); END;";
                $objStmt   = $this->_em->getConnection()->prepare($strSql);
                $objStmt->bindParam('strPrefijoEmpresa',      $strPrefijoEmpresa);
                $objStmt->bindParam('strEstadoServicio',      $strEstadoServicio);
                $objStmt->bindParam('intIdServicio',          $intIdServicio);
                $objStmt->bindParam('intMesesRestantes',      $intMesesRestantes);
                $objStmt->bindParam('strLlamadoProcedure',    $strLlamadoProcedure);
                $objStmt->bindParam('strFechaReinicioConteo', $strFechaReinicioConteo);
                $objStmt->bindParam('strMensajeError',        $strMensajeError);
                $objStmt->execute();
                
                $strFechaReinicioConteo = trim($strFechaReinicioConteo);
                $strMensajeError        = trim($strMensajeError);
                
                $arrayResultados['strFechaReinicioConteo'] = !empty($strFechaReinicioConteo) ? $strFechaReinicioConteo : '';
                $arrayResultados['strMensajeError']        = !empty($strMensajeError) ? $strMensajeError : '';
            }
            else
            {
                throw new \Exception('Se debe enviar todos los parámetros adecuados para consultar la fecha de reinicio de conteo del servicio.');
            }//( !empty($intIdServicio) && $intIdServicio > 0 && !empty($strEstadoServicio) && !empty($strPrefijoEmpresa) )
        }
        catch(\Exception $e)
        {
            throw ($e);
        }
            
        return $arrayResultados;
    }
    
    
    /**
     * getFechaRenovacion
     * 
     * Funcion que sirve para obtener la fecha de renovacion de un servicio
     * 
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 27-04-2016
     *
     * @param integer $intIdServicio
     * @param string  $strFechaRenovacion 
     */
    public function getFechaRenovacion($intIdServicio)
    {     
        $strFechaRenovacion = '';
        $strFechaRenovacion = str_pad($strFechaRenovacion, 50, " ");

        $sql = "BEGIN :Lv_FechaRenovacion := COMEK_CONSULTAS.F_GET_FECHA_RENOVACION_PLAN( :Fn_IdServicio ); END;";
       
        $stmt = $this->_em->getConnection()->prepare($sql);
        
        $stmt->bindParam('Fn_IdServicio',      $intIdServicio);
        $stmt->bindParam('Lv_FechaRenovacion', $strFechaRenovacion);
        $stmt->execute();
        
        return trim($strFechaRenovacion);
    } 
    
    /**
     * Obtiene los servicios de ip activos que tiene el punto 
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 14-03-2015
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 26-06-2019 Se realiza la consulta por prefijo de la empresa para tomar en cuenta el servicio Internet Small Business
     *                          e Ips Small Business
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 06-05-2020 Se realiza cambios en la consulta por reestructuración de servicios Small Business
     * 
     * @param array $arrayParametros [
     *                                  "intIdPunto"        => id del punto,
     *                                  "intIdServicio"     => id del servicio,
     *                                  "strPrefijoEmpresa" => prefijo de la empresa en sesión
     *                                ]
     * 
     * @return array $arrayRespuestaServiciosIp [
     *                                              "status"        => estado de la consulta,
     *                                              "mensaje"       => mensaje de respuesta de la consulta,
     *                                              "serviciosIps"  => arreglo con todos los servicios ips
     *                                           ]
     * 
     */
    public function getServiciosIpbyPunto($arrayParametros)
    {
        $intIdPunto         = $arrayParametros['intIdPunto'];
        $intIdServicio      = $arrayParametros['intIdServicio'];
        $strNombreTecnicoIp = "";
        if(isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) 
            && $arrayParametros['strPrefijoEmpresa'] === "TN")
        {
            $strQuery           = " SELECT ISE.ID_SERVICIO ID_SERVICIO,
                                    PRODUCTO_ID PRODUCTO_ID
                                    FROM INFO_SERVICIO ISE,
                                    ADMI_PRODUCTO AP
                                    WHERE ISE.PRODUCTO_ID = AP.ID_PRODUCTO
                                    AND ISE.ESTADO        = :estadoParam
                                    AND ISE.PUNTO_ID      = :puntoIdParam
                                    AND ISE.ID_SERVICIO!  = :servicioIdParam 
                                    AND AP.ID_PRODUCTO IN (
                                        SELECT COALESCE(TO_NUMBER(REGEXP_SUBSTR(PARAM_DET.VALOR3,'^\d+')),0) AS ID_PRODS_IPS
                                        FROM DB_GENERAL.ADMI_PARAMETRO_CAB PARAM
                                        INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET PARAM_DET
                                        ON PARAM_DET.PARAMETRO_ID = PARAM.ID_PARAMETRO 
                                        WHERE PARAM.NOMBRE_PARAMETRO = :strParamsProdsTnGpon
                                        AND PARAM.ESTADO = :estadoParam
                                        AND PARAM_DET.VALOR1 = :strValor1ParamDet
                                        AND PARAM_DET.ESTADO = :estadoParam
                                        AND PARAM_DET.EMPRESA_COD = :strCodEmpresa
                                        AND COALESCE(TO_NUMBER(REGEXP_SUBSTR(PARAM_DET.VALOR2,'^\d+')),0) = :intIdProdInternet
                                    )";
        }
        else
        {
            $strQuery           = " SELECT ISE.ID_SERVICIO ID_SERVICIO,
                                    PRODUCTO_ID PRODUCTO_ID
                                    FROM INFO_SERVICIO ISE,
                                    ADMI_PRODUCTO AP
                                    WHERE ISE.PRODUCTO_ID = AP.ID_PRODUCTO
                                    AND AP.NOMBRE_TECNICO = :nombreTecnicoParam
                                    AND ISE.ESTADO        = :estadoParam
                                    AND ISE.PUNTO_ID      = :puntoIdParam
                                    AND ISE.ID_SERVICIO!  = :servicioIdParam
                                    UNION ALL
                                    SELECT ISE.ID_SERVICIO ID_SERVICIO,
                                      AP.ID_PRODUCTO PRODUCTO_ID
                                    FROM INFO_SERVICIO ISE,
                                      INFO_PLAN_CAB PLANC,
                                      INFO_PLAN_DET PLAND,
                                      ADMI_PRODUCTO AP
                                    WHERE ISE.PLAN_ID     = PLANC.ID_PLAN
                                    AND PLANC.ID_PLAN     = PLAND.PLAN_ID
                                    AND PLAND.PRODUCTO_ID = AP.ID_PRODUCTO
                                    AND AP.NOMBRE_TECNICO = :nombreTecnicoParam
                                    AND ISE.ESTADO        = :estadoParam
                                    AND ISE.PUNTO_ID      = :puntoIdParam
                                    AND ISE.ID_SERVICIO!  = :servicioIdParam";
            $strNombreTecnicoIp = 'IP';
        }
        try
        {
            $objStmt = $this->_em->getConnection()->prepare($strQuery);
            $objStmt->bindValue('puntoIdParam', $intIdPunto);
            $objStmt->bindValue('servicioIdParam', $intIdServicio);
            $objStmt->bindValue('estadoParam', 'Activo');
            
            if(isset($arrayParametros["strPrefijoEmpresa"]) && !empty($arrayParametros["strPrefijoEmpresa"])
                && $arrayParametros['strPrefijoEmpresa'] === "TN")
            {
                $objStmt->bindValue('strParamsProdsTnGpon', 'PARAMS_PRODS_TN_GPON');
                $objStmt->bindValue('strValor1ParamDet', 'PRODUCTOS_RELACIONADOS_INTERNET_IP');
                $objStmt->bindValue('strCodEmpresa', $arrayParametros["strCodEmpresa"]);
                $objStmt->bindValue('intIdProdInternet', $arrayParametros["intIdProdInternet"]);
            }
            else
            {
                $objStmt->bindValue('nombreTecnicoParam', $strNombreTecnicoIp);
            }
            $objStmt->execute();
            $arrayServiciosIps  = $objStmt->fetchAll();
            $strStatus          = 'OK';
            $strMensaje         = 'Se realizó la consulta de manera correcta';
        } 
        catch (\Exception $e) 
        {
            $arrayServiciosIps  = array();
            $strStatus          = 'ERROR';
            $strMensaje         = $e->getMessage();
        }
        $arrayRespuestaServiciosIp = array( 'status'        => $strStatus,
                                            'mensaje'       => $strMensaje,
                                            'serviciosIps'  => $arrayServiciosIps);
        return $arrayRespuestaServiciosIp;
    }
    
     /**
     * Obtiene los productos caracteristicas utilizados en la activación 
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 08-03-2015
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 23-11-2015 Se modifica la forma de obtener los parametros por nuevos Planes Ultra Velocidad
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 08-12-2017 Se valida si el tipo de negocio pertenece a un servicio de Internet Small Business para enviar el 
     *                         respectivo nombre técnico
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 13-03-2019 Se agrega validación de variable $tipoNegocioPunto para obtener correctamente el tipo de negocio  
     *                          HOMETN para servicios TelcoHome y tipo de negocio PYMETN para servicios Small Business
     * 
     * @param string $empresaId
     * @param int    $elemetoId
     * @param string $valorPerfilParam 
     * @param string $tipoNegocioPunto
     * @param string $esUltraVelocidad
     * 
     * @return array $arraResult
     * */
    public function getProductoCaracteristica($empresaId,$elemetoId, $valorPerfilParam,$tipoNegocioPunto, $esUltraVelocidad)
    {
        $strQueryObtenerPadre = "SELECT AAA.ID_PRODUCTO_CARACTERISITICA, AAA.DESCRIPCION_CARACTERISTICA, BBB.DETALLE_VALOR
                                    FROM
                                      (SELECT *
                                      FROM
                                        (SELECT APC.ID_PRODUCTO_CARACTERISITICA,
                                          DESCRIPCION_CARACTERISTICA
                                        FROM ADMI_PRODUCTO AP,
                                          ADMI_PRODUCTO_CARACTERISTICA APC,
                                          ADMI_CARACTERISTICA AC
                                        WHERE AP.ID_PRODUCTO           = APC.PRODUCTO_ID
                                        AND APC.CARACTERISTICA_ID      = AC.ID_CARACTERISTICA
                                        AND AP.NOMBRE_TECNICO          =:nombreTecnicoParam
                                        AND EMPRESA_COD                =:empresaIdParam
                                        AND DESCRIPCION_CARACTERISTICA =:trafficParam
                                        UNION
                                        SELECT APC.ID_PRODUCTO_CARACTERISITICA,
                                          DESCRIPCION_CARACTERISTICA
                                        FROM ADMI_PRODUCTO AP,
                                          ADMI_PRODUCTO_CARACTERISTICA APC,
                                          ADMI_CARACTERISTICA AC
                                        WHERE AP.ID_PRODUCTO           = APC.PRODUCTO_ID
                                        AND APC.CARACTERISTICA_ID      = AC.ID_CARACTERISTICA
                                        AND AP.NOMBRE_TECNICO          =:nombreTecnicoParam
                                        AND EMPRESA_COD                =:empresaIdParam
                                        AND DESCRIPCION_CARACTERISTICA =:gemParam
                                        UNION
                                        -- AQUI VA EL LINE PROFLE NAME
                                        SELECT APC.ID_PRODUCTO_CARACTERISITICA,
                                          DESCRIPCION_CARACTERISTICA
                                        FROM ADMI_PRODUCTO AP,
                                          ADMI_PRODUCTO_CARACTERISTICA APC,
                                          ADMI_CARACTERISTICA AC
                                        WHERE AP.ID_PRODUCTO           = APC.PRODUCTO_ID
                                        AND APC.CARACTERISTICA_ID      = AC.ID_CARACTERISTICA
                                        AND AP.NOMBRE_TECNICO          =:nombreTecnicoParam
                                        AND EMPRESA_COD                =:empresaIdParam
                                        AND DESCRIPCION_CARACTERISTICA =:lineParam
                                        UNION
                                        -- AQUI VA EL LINE PROFLE NAME
                                        SELECT APC.ID_PRODUCTO_CARACTERISITICA,
                                           DESCRIPCION_CARACTERISTICA
                                        FROM ADMI_PRODUCTO AP,
                                            ADMI_PRODUCTO_CARACTERISTICA APC,
                                            ADMI_CARACTERISTICA AC
                                            WHERE AP.ID_PRODUCTO           = APC.PRODUCTO_ID
                                            AND APC.CARACTERISTICA_ID      = AC.ID_CARACTERISTICA
                                            AND AP.NOMBRE_TECNICO          =:nombreTecnicoParam
                                            AND EMPRESA_COD                =:empresaIdParam
                                            AND DESCRIPCION_CARACTERISTICA =:vlanParam                                        

                                        )
                                      ) AAA,
                                      (SELECT DETALLE_NOMBRE, DETALLE_VALOR
                                      FROM db_infraestructura.info_detalle_elemento bbb
                                      WHERE bbb.REF_DETALLE_ELEMENTO_ID IN (
                                        (SELECT ID_DETALLE_ELEMENTO
                                        FROM db_infraestructura.info_detalle_elemento
                                        WHERE DETALLE_NOMBRE=:lineParam
                                        AND DETALLE_VALOR   =
                                          (SELECT PARD.VALOR1
                                          FROM DB_GENERAL.ADMI_PARAMETRO_CAB PARC,
                                            DB_GENERAL.ADMI_PARAMETRO_DET PARD
                                          WHERE PARC.ID_PARAMETRO                =PARD.PARAMETRO_ID
                                          AND PARC.NOMBRE_PARAMETRO            =:cnrParam
                                          AND PARD.VALOR2                      =:valorPerfilParam
                                          AND PARD.VALOR5                      =:esUltraVelocidadParam
                                          AND ROWNUM<=1
                                          )
                                          AND ELEMENTO_ID=:elementoIdParam
                                        ))
                                      UNION
                                      SELECT DETALLE_NOMBRE, DETALLE_VALOR
                                      FROM db_infraestructura.info_detalle_elemento bbb
                                      WHERE bbb.REF_DETALLE_ELEMENTO_ID IN (
                                        (SELECT REF_DETALLE_ELEMENTO_ID
                                        FROM db_infraestructura.info_detalle_elemento
                                        WHERE DETALLE_NOMBRE=:lineParam
                                        AND DETALLE_VALOR   =
                                          (SELECT PARD.VALOR1
                                          FROM DB_GENERAL.ADMI_PARAMETRO_CAB PARC,
                                            DB_GENERAL.ADMI_PARAMETRO_DET PARD
                                          WHERE PARC.ID_PARAMETRO                =PARD.PARAMETRO_ID
                                          AND PARC.NOMBRE_PARAMETRO            =:cnrParam
                                          AND PARD.VALOR2                      =:valorPerfilParam
                                          AND PARD.VALOR5                      =:esUltraVelocidadParam
                                          AND ROWNUM<=1
                                          )
                                          AND ELEMENTO_ID=:elementoIdParam
                                        ))
                                      UNION
                                      SELECT DETALLE_NOMBRE, DETALLE_VALOR
                                      FROM db_infraestructura.info_detalle_elemento bbb
                                      WHERE bbb.ID_DETALLE_ELEMENTO IN (
                                        (SELECT REF_DETALLE_ELEMENTO_ID
                                        FROM db_infraestructura.info_detalle_elemento
                                        WHERE DETALLE_NOMBRE=:lineParam
                                        AND DETALLE_VALOR   =
                                          (SELECT PARD.VALOR1
                                          FROM DB_GENERAL.ADMI_PARAMETRO_CAB PARC,
                                            DB_GENERAL.ADMI_PARAMETRO_DET PARD
                                          WHERE PARC.ID_PARAMETRO              =PARD.PARAMETRO_ID
                                          AND PARC.NOMBRE_PARAMETRO            =:cnrParam
                                          AND PARD.VALOR2                      =:valorPerfilParam
                                          AND PARD.VALOR5                      =:esUltraVelocidadParam
                                          AND ROWNUM<=1
                                          )
                                          AND ELEMENTO_ID=:elementoIdParam
                                        ))
                                        UNION
                                        SELECT 'VLAN' DETALLE_NOMBRE,
                                            VALOR2 DETALLE_VALOR
                                          FROM ADMI_PARAMETRO_CAB APC,
                                            ADMI_PARAMETRO_DET APD
                                          WHERE APC.ID_PARAMETRO  = APD.PARAMETRO_ID
                                          AND APC.NOMBRE_PARAMETRO=:huaweiParam
                                          AND valor1              =:tipoNegocioPuntoParam
                                      ) BBB
                                    WHERE AAA.DESCRIPCION_CARACTERISTICA=BBB.DETALLE_NOMBRE";
        $stmt = $this->_em->getConnection()->prepare($strQueryObtenerPadre);
        $stmt->bindValue('empresaIdParam',           $empresaId);
        $stmt->bindValue('trafficParam',             'TRAFFIC-TABLE');
        $stmt->bindValue('gemParam',                 'GEM-PORT');
        $stmt->bindValue('lineParam',                'LINE-PROFILE-NAME');
        $stmt->bindValue('cnrParam',                 'CNR_PERFIL_CLIENT_PCK');
        $stmt->bindValue('valorPerfilParam',         $valorPerfilParam);
        $stmt->bindValue('vlanParam',                'VLAN');
        $stmt->bindValue('huaweiParam',              'VLAN_HUAWEI');
        if(isset($tipoNegocioPunto) && !empty($tipoNegocioPunto) 
            && ($tipoNegocioPunto === 'PYMETN|INTERNET SMALL BUSINESS' || $tipoNegocioPunto === 'HOMETN|TELCOHOME'))
        {
            list($tipoNegocioPunto,$strNombreTecnico) = explode('|',$tipoNegocioPunto);
            $stmt->bindValue('nombreTecnicoParam',       $strNombreTecnico);
        }
        else
        {
            $stmt->bindValue('nombreTecnicoParam',       'INTERNET');
        }
        $stmt->bindValue('tipoNegocioPuntoParam',    $tipoNegocioPunto);
        $stmt->bindValue('elementoIdParam',          $elemetoId);
        $stmt->bindValue('esUltraVelocidadParam',    $esUltraVelocidad);
        
        $stmt->execute();
        $arraResult = $stmt->fetchAll();
        return $arraResult;
    }

    /**
     * Función que retorna la sumatoria de las cortesias por año y estado del servicio
     * @param mixed $anio anio de fecha de creación del servicio
     * @param mixed $estado Estado del servicio.
     * @param mixed $empresa id de la empresa en sesión
     *
     * @return mixed $datos Retorna la sumatoria del valor de las cortesías.
     *       
     * @author Creado:     John Vera         <javera@telconet.ec>
     * @version 1.0 08-08-2014
     */
    public function totalServicioCortesiaAnual($anio, $estado, $empresa)
    {

        $rsm = new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null, $rsm);

        $sql = "SELECT SUM(SE.PRECIO_VENTA) TOTAL
                FROM INFO_SERVICIO SE,
                  INFO_PUNTO PU,
                  INFO_PERSONA_EMPRESA_ROL PE,
                  INFO_EMPRESA_ROL ER
                WHERE SE.PUNTO_ID= PU.ID_PUNTO
                AND PU.PERSONA_EMPRESA_ROL_ID = PE.ID_PERSONA_ROL
                AND PE.EMPRESA_ROL_ID = ER.ID_EMPRESA_ROL
                AND SE.ES_VENTA  = :estadoVenta
                AND ER.EMPRESA_COD = :empresa
                AND TO_CHAR(SE.FE_CREACION ,'YYYY')  = :anio
                AND SE.ESTADO    = :estado";

        $query->setParameter("anio", $anio);
        $query->setParameter("estado", $estado);
        $query->setParameter("empresa", $empresa);
        $query->setParameter("estadoVenta", 'N');

        $rsm->addScalarResult('TOTAL', 'total', 'integer');
        $query->setSQL($sql);
        $datos = $query->getScalarResult();

        return $datos;
    }

    /**
     * Generacion del Json para consulta de solicitudes de 
     * migracion huawei
     * @author Edgar Holguin     <eholguin@telconet.ec> 
     * @author Edgar Holguin     <eholguin@telconet.ec> 
     * @version 1.0 modificado:25-03-2015
     * @version 1.1 modificado:11-11-2015 Se eliminan variables que no son necesarias.
     */
    public function generarJsonConsultaSolicitudesMigracionHuawei($idEmpresa, $login, $estado, $fechaDesde, $fechaHasta, $em, $start, $limit)
    {
        $arr_encontrados = array();

        //obtencion del perfil del cliente
        $objCaracteristica = $em->getRepository('schemaBundle:AdmiCaracteristica')
            ->findOneBy(array("descripcionCaracteristica" => "PERFIL",
            "estado" => "Activo"));

        $objProducto = $em->getRepository('schemaBundle:AdmiProducto')
            ->findOneBy(array("nombreTecnico" => "INTERNET",
            "empresaCod" => $idEmpresa,
            "estado" => "Activo"));

        $objProdCarac = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
            ->findOneBy(array("productoId" => $objProducto->getId(),
            "caracteristicaId" => $objCaracteristica->getId(),
            "estado" => "Activo"));

        $objTipoSolicitud = $em->getRepository('schemaBundle:AdmiTipoSolicitud')
            ->findOneBy(array("descripcionSolicitud" => 'SOLICITUD MIGRACION',
            "estado" => "Activo"));
        $tipoSolicitud = $objTipoSolicitud->getId();

        $encontradosTotal = $this->getServiciosMigracion($idEmpresa, $login, $estado, $fechaDesde, $fechaHasta, $em, '', '', $tipoSolicitud);
        $encontrados = $this->getServiciosMigracion($idEmpresa, $login, $estado, $fechaDesde, $fechaHasta, $em, $start, $limit, $tipoSolicitud);

        if($encontrados)
        {
            $num = count($encontradosTotal);

            foreach($encontrados as $registro)
            {
                $motivo = '';
                $nombre = trim($registro['nombreCompleto']);
                if(!$nombre)
                {
                    $nombre = $registro['razonSocial'];
                }


                //obtencion del perfil del cliente
                $objServProdCarac = $em->getRepository('schemaBundle:InfoServicioProdCaract')
                    ->findOneBy(array("servicioId" => $registro['id'],
                    "productoCaracterisiticaId" => $objProdCarac->getId(),
                    "estado" => "Activo"));

                $detSolicitud = explode(',', $registro['detSolicitud']);

                if(count($detSolicitud) > 1)
                {   //motivo de la solicitud
                    if($detSolicitud[2])
                    {
                        $objMotivo = $em->getRepository('schemaBundle:AdmiMotivo')
                            ->findOneById($detSolicitud[2]);
                        $motivo = $objMotivo->getNombreMotivo();
                    }

                    $estadoSolicitud = $detSolicitud[1];
                    $fechaSolicitud = $detSolicitud[3];
                }
                else
                {
                    $estadoSolicitud = "";
                    $fechaSolicitud = "";
                }
                //obtener el caso segun la solicitud
                $caso = "";
                if($detSolicitud[0])
                {
                    $objInfoDet = $em->getRepository('schemaBundle:InfoDetalle')
                        ->findOneByDetalleSolicitudId($detSolicitud[0]);

                    if($objInfoDet)
                    {
                        $detalleHipotesisId = $objInfoDet->getDetalleHipotesisId();
                        if($detalleHipotesisId)
                        {
                            $objInfoDetHipotesis = $em->getRepository('schemaBundle:InfoDetalleHipotesis')
                                ->find($detalleHipotesisId);
                        }
                        if($objInfoDetHipotesis)
                        {
                            $caso = $objInfoDetHipotesis->getCasoId()->getId();
                        }
                    }
                }

                //se crea el array con los datos consultados
                $arr_encontrados[] = array('idServicio' => $registro['id'],
                    'nombreCompleto' => $nombre,
                    'login' => $registro['login'],
                    'plan' => $registro['nombrePlan'],
                    'estadoServicio' => $registro['estado'],
                    'estadoSolicitud' => $estadoSolicitud,
                    'fechaSolicitud' => $fechaSolicitud,
                    'tipoNegocioNombre' => $registro['tipoNegocioNombre'],
                    'direccion' => $registro['direccion'],
                    'idSolicitud' => $detSolicitud[0],
                    'motivo' => $motivo
                );
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }    

    /**
     * Función que obtiene el total de planes de un punto según los parámetros.
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.0
     * @since 29-11-2018
     */
    public function getTotalServiciosPorNombreTecnicoXPunto($arrayParametros)
    {
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        $strSql   = "SELECT COUNT(*) TOTAL
                       FROM DB_COMERCIAL.INFO_SERVICIO S,
                            DB_COMERCIAL.INFO_PLAN_CAB PC,
                            DB_COMERCIAL.INFO_PLAN_DET PD,
                            DB_COMERCIAL.ADMI_PRODUCTO P
                      WHERE PC.ID_PLAN = S.PLAN_ID
                        AND PD.PLAN_ID = PC.ID_PLAN
                        AND P.ID_PRODUCTO = PD.PRODUCTO_ID
                        AND P.NOMBRE_TECNICO IN (:arrayNombreTecnico)
                        AND S.PUNTO_ID = :intPuntoId";
        if (isset($arrayParametros["arrayEstadosIn"]))
        {
            $strSql .= " AND S.ESTADO IN (:arrayEstadosIn) ";
            $objQuery->setParameter("arrayEstadosIn", $arrayParametros["arrayEstadosIn"]);
        }
        else
        {
            if (isset($arrayParametros["arrayEstadosNotIn"]))
            {
                $strSql .= " AND S.ESTADO NOT IN (:arrayEstadosNotIn) ";
                $objQuery->setParameter("arrayEstadosNotIn", $arrayParametros["arrayEstadosNotIn"]);
            }
        }

        $objQuery->setParameter("intPuntoId", $arrayParametros["intPuntoId"]);
        $objQuery->setParameter("arrayNombreTecnico", $arrayParametros["arrayNombreTecnico"]);

        $objRsm->addScalarResult('TOTAL', 'total', 'integer');
        $objQuery->setSQL($strSql);
        try{
        $arrayRespuesta = $objQuery->getScalarResult();
        }
        catch(\Exception $ex)
        {
            error_log($ex->getMessage());
        }
        return $arrayRespuesta[0]["total"];
    }

    /**
     * Generacion del Json para mostrarlo en la página de solicitud 
     * de cambio de linea pon cuando realice la consulta
     * 
     * @author John Vera         <javera@telconet.ec>
     * @author Francisco Adum    <fdaum@telconet.ec>
     * @version 1.0 17-06-2014
     * @version 1.1 modificado:21-06-2014
     * @version 1.2 modificado: 02-07-2015 John Vera
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 16-02-2018  Se modifica el envío de parámetros para agregar el prefijo de la empresa para permitir el cambio de línea pon
     *                          para los servicios Internet Small Business en la empresa TN
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.4 28-11-2018  Se agregan validaciones para gestionar productos de la empresa TNP
     * @since 1.3
     * 
     * @param array $arrayParametros [  
     *                                  "strCodEmpresa"                 => id de la empresa
     *                                  "strLogin"                      => login del punto en sesión
     *                                  "strEstadoSolicitud"            => estado de solicitud a buscar
     *                                  "strFechaDesde"                 => fecha desde de solicitud
     *                                  "strFechaHasta"                 => fecha hasta de solicitud
     *                                  "emComercial"                   => entity manager comercial
     *                                  "intStart"                      => inicio del rownum
     *                                  "intLimit"                      => limite del rownum
     *                                  "intIdTipoSolicitud"            => id del tipo SOLICITUD CAMBIO LINEA PON,
     *                                  "intIdProdCaracInternetPerfil"  => id de la asociación del producto INTERNET con la característica PERFIL
     *                               ]
     * 
     */
    public function generarJsonConsultaSolicitudesPon($arrayParametros)
    {
        $arrayEncontrados   = array();
        $emComercial        = $arrayParametros["emComercial"];
        $arrayRespuesta     = $this->getServiciosLineaPon($arrayParametros);
        $arrayResultado     = $arrayRespuesta['arrayResultado'];
        $intTotal           = $arrayRespuesta['intTotal'];
        if ($arrayParametros['strPrefijoEmpresa'] == 'TNP')
        {
            $arrayParametros['strObtenerIsb'] = 'SI';
            $arrayRespuestaIsb                = $this->getServiciosLineaPon($arrayParametros);
            $arrayResultado                   = array_merge($arrayResultado, $arrayRespuestaIsb['arrayResultado']);
            $intTotal                         = $arrayRespuestaIsb['intTotal']+$intTotal;
        }
        if(!empty($arrayResultado))
        {
            foreach($arrayResultado as $arrayRegistro)
            {
                $strNombreCompleto = trim($arrayRegistro['nombreCompleto']);
                if(empty($strNombreCompleto))
                {
                    $strNombreCompleto = $arrayRegistro['razonSocial'];
                }
                
                //obtencion del perfil del cliente
                $objServProdCarac = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                ->findOneBy(array(  "servicioId"                => $arrayRegistro['id'],
                                                                    "productoCaracterisiticaId" => $arrayParametros["intIdProdCaracInternetPerfil"],
                                                                    "estado"                    => "Activo"));
                $strPerfil  = '' ;
                if(is_object($objServProdCarac))
                {
                    $strPerfil = $objServProdCarac->getValor();
                }

                $arrayDetSolicitud = explode(',', $arrayRegistro['detSolicitud']);
                $strMotivo = '';
                if(count($arrayDetSolicitud) > 1)
                {   //motivo de la solicitud
                    if(!empty($arrayDetSolicitud[2]))
                    {
                        $objMotivo = $emComercial->getRepository('schemaBundle:AdmiMotivo')->findOneById($arrayDetSolicitud[2]);
                        $strMotivo = $objMotivo->getNombreMotivo();
                    }
                    $strEstadoSolicitud = $arrayDetSolicitud[1];
                    $strFechaSolicitud  = $arrayDetSolicitud[3];
                }
                else
                {
                    $strEstadoSolicitud = "";
                    $strFechaSolicitud  = "";
                }
                
                //obtener el caso según la solicitud
                $intIdCaso = 0;
                if(!empty($arrayDetSolicitud[0]))
                {
                    $objInfoDet = $emComercial->getRepository('schemaBundle:InfoDetalle')
                                              ->findOneByDetalleSolicitudId($arrayDetSolicitud[0]);

                    if(is_object($objInfoDet))
                    {
                        $intIdDetalleHipotesisId = $objInfoDet->getDetalleHipotesisId();
                        if($intIdDetalleHipotesisId)
                        {
                            $objInfoDetHipotesis = $emComercial->getRepository('schemaBundle:InfoDetalleHipotesis')
                                                               ->find($intIdDetalleHipotesisId);
                            if(is_object($objInfoDetHipotesis))
                            {
                                $intIdCaso = $objInfoDetHipotesis->getCasoId()->getId();
                            }
                        }
                    }
                }
                
                //se crea el array con los datos consultados
                $arrayEncontrados[] = array(
                                                'idServicio'        => $arrayRegistro['id'],
                                                'nombreCompleto'    => $strNombreCompleto,
                                                'login'             => $arrayRegistro['login'],
                                                'plan'              => $arrayRegistro['nombrePlan'] ? $arrayRegistro['nombrePlan'] : "",
                                                'producto'          => $arrayRegistro['descripcionProducto'] 
                                                                       ? $arrayRegistro['descripcionProducto'] : "",
                                                'estadoServicio'    => $arrayRegistro['estado'],
                                                'estadoSolicitud'   => $strEstadoSolicitud,
                                                'fechaSolicitud'    => $strFechaSolicitud,
                                                'tipoNegocioNombre' => $arrayRegistro['tipoNegocioNombre'],
                                                'direccion'         => $arrayRegistro['direccion'],
                                                'idSolicitud'       => $arrayDetSolicitud[0],
                                                'motivo'            => $strMotivo,
                                                'perfil'            => $strPerfil,
                                                'caso'              => $intIdCaso,
                                                'esIsb'             => $arrayRegistro['esIsb']
                                            );
            }
        }
        $strJsonData = json_encode(array('total'   => $intTotal, 'encontrados' => $arrayEncontrados));
        return $strJsonData;
    }

    /**
     * Generacion del query para obtener la informacion
     * de los servicios con sus solicitudes de linea pon.
     * 
     * @author John Vera         <javera@telconet.ec>
     * @author Francisco Adum    <fdaum@telconet.ec>
     * @version 1.0 17-06-2014
     * @version 1.1 modificado:21-06-2014
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 16-02-2018 Se modifica la función para el envío del prefijo de la empresa para el cambio de línea pon 
     *                         de servicios INTERNET SMALL BUSINESS
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 28-11-2018 Se agregan validaciones para gestionar productos de la empresa TNP
     * @since 1.2
     * Costo query: 161
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 28-02-2019 Se agrega validación para incluir el cambio de línea pon de servicios TelcoHome
     * 
     * @param array $arrayParametros [  
     *                                  "strCodEmpresa"                 => id de la empresa
     *                                  "strLogin"                      => login del punto en sesión
     *                                  "strEstadoSolicitud"            => estado de solicitud a buscar
     *                                  "strFechaDesde"                 => fecha desde de solicitud
     *                                  "strFechaHasta"                 => fecha hasta de solicitud
     *                                  "emComercial"                   => entity manager comercial
     *                                  "intStart"                      => inicio del rownum
     *                                  "intLimit"                      => limite del rownum
     *                                  "strPrefijoEmpresa"             => prefijo empresa de sesión 
     *                                  "intIdTipoSolicitud"            => id del tipo SOLICITUD CAMBIO LINEA PON
     *                                  "intIdProdCaracInternetPerfil"  => id de la asociación del producto INTERNET con la característica PERFIL
     *                               ]
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 1.5 20-08-2022 Se agrega validación para incluir el cambio de línea pon de servicios Safe City Datos GPON
     * 
     */
    public function getServiciosLineaPon($arrayParametros)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery    = $this->_em->createNativeQuery(null, $objRsm);

        $strSelectCount = " SELECT COUNT(*) AS TOTAL ";
        $strSelect      = " SELECT CONCAT(CONCAT(PERSONA.APELLIDOS, ' '), PERSONA.NOMBRES) NOMBRE_COMPLETO,
                            PERSONA.RAZON_SOCIAL,
                            P.LOGIN,
                            S.ESTADO,
                            S.ID_SERVICIO,
                            PERSONA.DIRECCION,
                            (SELECT AT.NOMBRE_TIPO_NEGOCIO
                                FROM DB_COMERCIAL.ADMI_TIPO_NEGOCIO AT
                                WHERE AT.ID_TIPO_NEGOCIO = P.TIPO_NEGOCIO_ID
                                AND AT.ESTADO = :strEstadoActivo) TIPO_NEGOCIO_NOMBRE,
                            (SELECT CONCAT(CONCAT(CONCAT(DES.ID_DETALLE_SOLICITUD,','), 
                                                  CONCAT(CONCAT(DES.ESTADO,','), CONCAT(DES.MOTIVO_ID,','))), SUBSTR(DES.FE_CREACION,1,10))
                                FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD DES
                                WHERE ( SELECT MAX(DESO.FE_CREACION)
                                        FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD DESO
                                        WHERE DESO.TIPO_SOLICITUD_ID = :tipoSolicitudId
                                        AND DESO.SERVICIO_ID        = S.ID_SERVICIO) = DES.FE_CREACION
                                        AND S.ID_SERVICIO = DES.SERVICIO_ID) DET_SOLICITUD ";
        $strFromJoin    = " FROM DB_COMERCIAL.INFO_SERVICIO S ";
        $strWhere       = " WHERE S.ESTADO IN (:estadosServicio) ";
        $objNtvQuery->setParameter("estadosServicio", array("Activo", "In-Corte"));
        if((isset($arrayParametros["strPrefijoEmpresa"]) && !empty($arrayParametros["strPrefijoEmpresa"]) 
            && $arrayParametros["strPrefijoEmpresa"] === "TN") ||
           (isset($arrayParametros["strObtenerIsb"]) && !empty($arrayParametros["strObtenerIsb"]) 
            && $arrayParametros["strObtenerIsb"] === "SI")
          )
        {
            $strSelect      .= ", PRODUCTO.DESCRIPCION_PRODUCTO, 'SI' ES_ISB ";
            $strFromJoin    .= "INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PRODUCTO 
                                ON PRODUCTO.ID_PRODUCTO = S.PRODUCTO_ID ";
            $strWhere       .= "AND (PRODUCTO.NOMBRE_TECNICO = :strNombreTecnicoISB OR PRODUCTO.NOMBRE_TECNICO = :strNombreTecnicoTelcoHome
                                                                                    OR PRODUCTO.NOMBRE_TECNICO = :strNombreTecnicoSafeCity)
                                AND PRODUCTO.EMPRESA_COD = :strCodEmpresa 
                                AND PRODUCTO.ESTADO = :strEstadoActivo ";
            $objNtvQuery->setParameter("strNombreTecnicoISB", "INTERNET SMALL BUSINESS");
            $objNtvQuery->setParameter("strNombreTecnicoTelcoHome", "TELCOHOME");
            $objNtvQuery->setParameter("strNombreTecnicoSafeCity", "DATOS SAFECITY");
            $objRsm->addScalarResult('DESCRIPCION_PRODUCTO', 'descripcionProducto', 'string');
        }
        else
        {
            $strSelect      .= ", PC.NOMBRE_PLAN, 'NO' ES_ISB ";
            $strFromJoin    .= "INNER JOIN DB_COMERCIAL.INFO_PLAN_CAB PC 
                                ON PC.ID_PLAN = S.PLAN_ID 
                                INNER JOIN DB_COMERCIAL.INFO_PLAN_DET PD 
                                ON PD.PLAN_ID = PC.ID_PLAN 
                                INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PRODUCTO 
                                ON PRODUCTO.ID_PRODUCTO = PD.PRODUCTO_ID ";
            $strWhere       .= "AND PC.EMPRESA_COD = :strCodEmpresa 
                                AND PRODUCTO.NOMBRE_TECNICO = :strNombreTecnicoInternet
                                AND PRODUCTO.EMPRESA_COD = :strCodEmpresa
                                AND PRODUCTO.ESTADO = :strEstadoActivo ";
            $objNtvQuery->setParameter("strNombreTecnicoInternet", "INTERNET");
            $objRsm->addScalarResult('NOMBRE_PLAN', 'nombrePlan', 'string');
        }
        $objNtvQuery->setParameter("strCodEmpresa", $arrayParametros["strCodEmpresa"]);
        $objNtvQuery->setParameter("strEstadoActivo", "Activo");
        
        $strFromJoin    .= "INNER JOIN DB_COMERCIAL.INFO_PUNTO P
                            ON P.ID_PUNTO = S.PUNTO_ID 
                            INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL PER
                            ON PER.ID_PERSONA_ROL = P.PERSONA_EMPRESA_ROL_ID
                            INNER JOIN DB_COMERCIAL.INFO_PERSONA PERSONA
                            ON PERSONA.ID_PERSONA = PER.PERSONA_ID ";
        
        $objNtvQuery->setParameter("tipoSolicitudId", $arrayParametros["intIdTipoSolicitud"]);
        if(trim($arrayParametros["strLogin"]) == '' && trim($arrayParametros["strEstadoSolicitud"]) == '' 
            && trim($arrayParametros["strFechaDesde"]) == '' && trim($arrayParametros["strFechaHasta"]) == '')
        {
            $arrayParametros["strEstadoSolicitud"] = 'Pendiente';
        }
        if(isset($arrayParametros["strLogin"]) && !empty($arrayParametros["strLogin"]))
        {
            $strWhere   .= "AND P.LOGIN LIKE :strLogin ";
            $objNtvQuery->setParameter("strLogin", "%" . $arrayParametros["strLogin"] . "%");
        }
        if(isset($arrayParametros["strEstadoSolicitud"]) && !empty($arrayParametros["strEstadoSolicitud"]))
        {
            $strWhere   .=" AND (SELECT DES1.ESTADO
                            FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD DES1
                            WHERE ( SELECT MAX(DESO1.ID_DETALLE_SOLICITUD)
                                    FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD DESO1
                                    WHERE DESO1.TIPO_SOLICITUD_ID = :tipoSolicitudId
                                    AND DESO1.SERVICIO_ID = S.ID_SERVICIO) = DES1.ID_DETALLE_SOLICITUD)= :strEstadoSolicitud ";

            $objNtvQuery->setParameter("strEstadoSolicitud", $arrayParametros["strEstadoSolicitud"]);
        }
        if(isset($arrayParametros["strFechaDesde"]) && !empty($arrayParametros["strFechaDesde"])
            && isset($arrayParametros["strFechaHasta"]) && !empty($arrayParametros["strFechaHasta"]))
        {
            $strWhere   .=" AND (SELECT SUBSTR(DES2.FE_CREACION,1,10)
                            FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD DES2
                            WHERE ( SELECT MAX(DESO2.ID_DETALLE_SOLICITUD)
                                    FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD DESO2
                                    WHERE DESO2.TIPO_SOLICITUD_ID = :tipoSolicitudId
                                    AND DESO2.SERVICIO_ID = S.ID_SERVICIO) = DES2.ID_DETALLE_SOLICITUD) >= :strFechaDesde
                            AND (   SELECT SUBSTR(DES3.FE_CREACION,1,10)
                                    FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD DES3
                                    WHERE ( SELECT MAX(DESO3.ID_DETALLE_SOLICITUD)
                                            FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD DESO3
                                            WHERE DESO3.TIPO_SOLICITUD_ID = :tipoSolicitudId
                                            AND DESO3.SERVICIO_ID = S.ID_SERVICIO) = DES3.ID_DETALLE_SOLICITUD) <= :strFechaHasta";
            $arrayParametros["strFechaDesde"] = substr($arrayParametros["strFechaDesde"], 0, 10);
            $objNtvQuery->setParameter("strFechaDesde", $arrayParametros["strFechaDesde"]);
            $arrayParametros["strFechaHasta"] = substr($arrayParametros["strFechaHasta"], 0, 10);
            $objNtvQuery->setParameter("strFechaHasta", $arrayParametros["strFechaHasta"]);
        }
        
        $objRsm->addScalarResult('NOMBRE_COMPLETO', 'nombreCompleto', 'string');
        $objRsm->addScalarResult('RAZON_SOCIAL', 'razonSocial', 'string');
        $objRsm->addScalarResult('LOGIN', 'login', 'string');
        $objRsm->addScalarResult('ESTADO', 'estado', 'string');
        $objRsm->addScalarResult('ID_SERVICIO', 'id', 'integer');
        $objRsm->addScalarResult('DIRECCION', 'direccion', 'string');
        $objRsm->addScalarResult('TIPO_NEGOCIO_NOMBRE', 'tipoNegocioNombre', 'string');
        $objRsm->addScalarResult('DET_SOLICITUD', 'detSolicitud', 'string');
        $objRsm->addScalarResult('ES_ISB', 'esIsb', 'string');
        $objRsm->addScalarResult('TOTAL', 'intTotal', 'integer');
        
        $strQuery   = $strSelect . $strFromJoin . $strWhere; 
        try
        {
            $objNtvQuery->setSQL($strQuery);
            $intStart = 0;
            $intLimit = 0;
            if(isset($arrayParametros['intStart']) && !empty($arrayParametros['intStart']) && $arrayParametros['intStart'] > 0
                && isset($arrayParametros['intLimit']) && !empty($arrayParametros['intLimit']) && $arrayParametros['intLimit'] > 0)
            {
                $intStart = $arrayParametros['intStart'];
                $intLimit = $arrayParametros['intLimit'];
            }
            else
            {
                $intLimit = 10;
            }

            $objNtvQueryFinal   = $this->setQueryLimit($objNtvQuery, $intLimit, $intStart);         
            $arrayResultado     = $objNtvQueryFinal->getResult();

            $strQueryCount = $strSelectCount. " FROM (". $strQuery. ") ";
            $objNtvQuery->setSQL($strQueryCount);
            $intTotal   = $objNtvQuery->getSingleScalarResult();

            $arrayRespuesta['arrayResultado']   = $arrayResultado;
            $arrayRespuesta['intTotal']         = $intTotal;
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        return $arrayRespuesta;
    }
    
    /**
    * getJsonArchivosArcotel - Función que retorna el listado de reportes de servicios activos de Internet y Datos 
    *                          generados para la Arcotel
    *
    * 
    * @param array   $arrayParametros [ strUrlServidor  => ruta del servidor ]
    * 
    * 
    * @return array  $arrayResultados [ total       => total de archivos
    *                                   encontrados => listado de archivos ]
    *
    * @author Richard Cabrera   <rcabrera@telconet.ec>
    * @version 1.0 06-03-2017
    * 
    */
    public function getJsonArchivosArcotel($arrayParametros)
    {
        $arrayResultados                = array();
        $arrayValoresParametros         = array();
        $objOpenDir                     = null;
        $objFile                        = null;
        $strUrlReportesArcotel          = "";
        $strUrlCompletaReportesArcotel  = "";
        $strUrlServidor                 = $arrayParametros["strUrlServidor"] ? $arrayParametros["strUrlServidor"] : "/home/telcos/web";

        $arrayValoresParametros = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne('PARAMETROS PROYECTO ARCOTEL',
                                                     'COMERCIAL',
                                                     'REPORTES_ARCOTEL',
                                                     'DIRECTORIO_REPORTES_ARCOTEL',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '');
        if(isset($arrayValoresParametros["valor1"]) && !empty($arrayValoresParametros["valor1"]))
        {
            $strUrlReportesArcotel = $arrayValoresParametros["valor1"];
        }

        $strUrlCompletaReportesArcotel = $strUrlServidor . $strUrlReportesArcotel;

        if($objOpenDir = opendir($strUrlCompletaReportesArcotel))
        {
            while($strFile = readdir($objOpenDir))
            {
                //Verificamos si es un directorio
                if(!is_dir($strFile))
                {
                    $intPosicionX       = strrpos($strFile, "_");
                    $strAnio            = substr($strFile, $intPosicionX + 1, 4);
                    $strMes             = substr($strFile, $intPosicionX + 5, 2);
                    $strDia             = substr($strFile, $intPosicionX + 7, 2);
                    $strFechaArchivo    = $strAnio . "-" . $strMes . "-" . $strDia;

                    $arrayArchivos[] = array('fe_creacion'    => $strFechaArchivo,
                                             'nombre_reporte' => $strFile,
                                             'link_exportar'  => $strUrlReportesArcotel . $strFile);
                }
            }
            //Ordeno los registros de mayor a menor
            rsort($arrayArchivos);
            $arrayResultados = array('total' => count($arrayArchivos), 'encontrados' => $arrayArchivos);
            closedir($objOpenDir);
        }
        else
        {
            $arrayResultados = array('total' => "0", 'encontrados' => "");
        }

        return $arrayResultados;
    }

    /**
     * Generacion del query para obtener la informacion
     * de los servicios con sus solicitudes de migracion.
     *
     * @author Edgar Holguin     <eholguin@telconet.ec> 
     * @version 1.0 modificado:21-06-2014
     * 
     * @author Jesus Bozada      <jbozada@telconet.ec> 
     * @version 1.1 modificado:07-09-2015
     * 
     * @author Jesus Bozada      <jbozada@telconet.ec> 
     * @version 1.2 modificado:29-07-2016   Se quita porcentaje inicial en busquedas de logins en pantalla de solicitud de 
     *                                      migraciones individuales
     */
    public function getServiciosMigracion($idEmpresa, $login, $estado, $fechaDesde, $fechaHasta, $em, $start, $limit, $tipoSolicitud)
    {
        $query = $this->_em->createQuery();
        //si no se ingreso ningún parámetro de búsqueda asignamos estado Pendiente por default
        if(trim($login) == '' && trim($estado) == '' && trim($fechaDesde) == '' && trim($fechaHasta) == '')
        {
            $estado = 'PrePlanificada';
        }

        $dql = "
            SELECT CONCAT(CONCAT(PER.apellidos, ' '), PER.nombres) nombreCompleto,
              PER.razonSocial,
              P.login,
              PC.nombrePlan,
              S.estado,
              S.id,
              PER.direccion,
              (SELECT AT.nombreTipoNegocio
                 FROM schemaBundle:AdmiTipoNegocio AT
                WHERE AT.id = P.tipoNegocioId
                  AND AT.estado = :estado) tipoNegocioNombre,
              (SELECT CONCAT(CONCAT(CONCAT(DES.id,','), CONCAT(CONCAT(DES.estado,','), CONCAT(DES.motivoId,','))), SUBSTRING(DES.feCreacion,1,10))
                 FROM schemaBundle:InfoDetalleSolicitud DES
                WHERE (SELECT MAX(DESO.feCreacion)
                         FROM schemaBundle:InfoDetalleSolicitud DESO
                        WHERE DESO.tipoSolicitudId = :tipoSolicitudId
                        AND DESO.servicioId        = S.id) = DES.feCreacion
                        AND S.id = DES.servicioId) detSolicitud
            FROM schemaBundle:InfoServicio S,
              schemaBundle:InfoPlanCab PC,
              schemaBundle:InfoPlanDet PD,
              schemaBundle:InfoPunto  P,
              schemaBundle:InfoPersonaEmpresaRol PE,
              schemaBundle:InfoPersona PER
            WHERE S.planId   IS NOT NULL
            AND S.estado      in (:estadoServicio)
            AND S.planId      = PC.id
            AND PC.empresaCod = :empresa
            AND PC.id         = PD.planId
            AND PC.estado     = PD.estado
            AND PD.productoId = :internet
            AND S.puntoId     = P.id
            AND PE.id         = P.personaEmpresaRolId
            AND PE.personaId  = PER.id";

        $query->setParameter("tipoSolicitudId", $tipoSolicitud);
        $query->setParameter("estado", "Activo");
        $query->setParameter("estadoServicio", array("Activo", "In-Corte"));

        $objProducto = $em->getRepository('schemaBundle:AdmiProducto')
            ->findOneBy(array("empresaCod" => $idEmpresa,
            "descripcionProducto" => "INTERNET DEDICADO",
            "estado" => "Activo"));

        $query->setParameter("internet", $objProducto->getId());
        $query->setParameter("empresa", $idEmpresa);

        if($login)
        {  
            $login=trim($login);
            $dql.=" AND P.login like :login ";
            $query->setParameter("login", $login . "%");
        }
        if($estado)
        {
            $dql.=" AND (SELECT DES1.estado
                           FROM schemaBundle:InfoDetalleSolicitud DES1
                          WHERE (SELECT MAX(DESO1.id)
                                  FROM schemaBundle:InfoDetalleSolicitud DESO1
                                  WHERE DESO1.tipoSolicitudId = :tipoSolicitudId
                                  AND DESO1.servicioId        = S.id) = DES1.id)= :estado ";

            $query->setParameter("estado", $estado);
            $query->setParameter("tipoSolicitudId", $tipoSolicitud);
        }
        if($fechaDesde != '' && $fechaHasta != '')
        {
            $dql.=" AND (SELECT SUBSTRING(DES2.feCreacion,1,10)
                           FROM schemaBundle:InfoDetalleSolicitud DES2
                          WHERE (SELECT MAX(DESO2.id)
                                  FROM schemaBundle:InfoDetalleSolicitud DESO2
                                  WHERE DESO2.tipoSolicitudId = :tipoSolicitudId
                                  AND DESO2.servicioId        = S.id) = DES2.id) >= :fechaDesde
                    AND (SELECT SUBSTRING(DES3.feCreacion,1,10)
                           FROM schemaBundle:InfoDetalleSolicitud DES3
                          WHERE (SELECT MAX(DESO3.id)
                                  FROM schemaBundle:InfoDetalleSolicitud DESO3
                                  WHERE DESO3.tipoSolicitudId = :tipoSolicitudId
                                  AND DESO3.servicioId        = S.id) = DES3.id) <= :fechaHasta";
            $query->setParameter("tipoSolicitudId", $tipoSolicitud);

            $fechaDesde = substr($fechaDesde, 0, 10);
            $query->setParameter("fechaDesde", $fechaDesde);
            $fechaHasta = substr($fechaHasta, 0, 10);
            $query->setParameter("fechaHasta", $fechaHasta);
        }

        if($start != '')
        {
            $query->setFirstResult($start);
        }
        if($limit != '')
        {
            $query->setMaxResults($limit);
        }

        $query->setDQL($dql);
        //echo $query->getSQL(); die;
        $data = $query->getResult();

        return $data;
    }    

    /**
     * Función que obtiene el servicio principal de Internet en estado activo de un punto
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 24-04-2018 Se modifica la consulta para obtener servicios Internet Small Business
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 04-02-2018 Se agrega parámetro de nombre técnico para diferenciar servicios Internet Small Business y TelcoHome 
     *                          ya que pueden pertenecer a un mismo login y ambos pertenecen a TN
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 05-05-2020 Se envía un arreglo de parámetros a la función getServicioByPuntoId debido a los cambios realizados 
     *                          por la reestucturación de servicios Small Business
     * 
     * @param array $arrayParametros [
     *                                  "intIdPunto"            => id del punto,
     *                                  "intIdProdInternet"     => id del producto Internet
     *                                ]
     * 
     * @return string
     */
    public function getServicioByPuntoId($arrayParametros)
    {
        try
        {
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery    = $this->_em->createNativeQuery(null, $objRsm);

            $strSelectFrom  = " SELECT SERVICIO.ID_SERVICIO 
                                FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO ";
            $strJoin        = "";
            $strWhere       = " WHERE SERVICIO.ESTADO = :strEstadoActivo
                                AND SERVICIO.PUNTO_ID = :intIdPunto ";
            $strWhereAdic   = "";
            
            $objRsm->addScalarResult('ID_SERVICIO', 'intIdServicio', 'string');
            $objNtvQuery->setParameter('strEstadoActivo', 'Activo');
            $objNtvQuery->setParameter('intIdPunto', $arrayParametros["intIdPunto"]);
            
            if(isset($arrayParametros["intIdProdInternet"]) && !empty($arrayParametros["intIdProdInternet"]) 
                && $arrayParametros["intIdProdInternet"] > 0)
            {
                $strJoin        .=  "   INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PRODUCTO
                                        ON PRODUCTO.ID_PRODUCTO = SERVICIO.PRODUCTO_ID ";
                $strWhereAdic   .=  "   AND PRODUCTO.ID_PRODUCTO = :intIdProdInternet ";
                $objNtvQuery->setParameter('intIdProdInternet', $arrayParametros["intIdProdInternet"]);
            }
            else
            {
                $strJoin        .=  "   INNER JOIN DB_COMERCIAL.INFO_PLAN_CAB PLAN_CAB
                                        ON PLAN_CAB.ID_PLAN = SERVICIO.PLAN_ID
                                        INNER JOIN DB_COMERCIAL.INFO_PLAN_DET PLAN_DET
                                        ON PLAN_DET.PLAN_ID = PLAN_CAB.ID_PLAN
                                        INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PRODUCTO_PLAN
                                        ON PRODUCTO_PLAN.ID_PRODUCTO = PLAN_DET.PRODUCTO_ID ";
                $strWhereAdic   .=  "   AND PRODUCTO_PLAN.NOMBRE_TECNICO = :strNombreTecnicoInternet ";
                $objNtvQuery->setParameter('strNombreTecnicoInternet', 'INTERNET');
            }

            $strQuery = $strSelectFrom . $strJoin . $strWhere . $strWhereAdic;
            $objNtvQuery->setSQL($strQuery);
            $mixIdServicio = $objNtvQuery->getSingleScalarResult();
            if(!$mixIdServicio)
            {
                $mixIdServicio = 'Error 1: No existe un Servicio con Plan Activo para el Punto cliente. Imposible dar Ip Fija.';
            }
                
        }
        catch (\Exception $e) 
        {
            error_log("Error al intentar obtener la consulta getServicioByPuntoId ".$e->getMessage());
            $mixIdServicio = 'Error 2:  No existe un Servicio con Plan Activo para el Punto cliente. Imposible dar Ip Fija.';
        }
        return $mixIdServicio;
    }

    public function getServiciosIpFijaActivosByPuntoId($id_punto)
    {
        $em = $this->_em;

        $sql = $em->createQuery("select s.id from schemaBundle:InfoServicio s  
                , schemaBundle:InfoPlanCab pc
                , schemaBundle:InfoPlanDet pd  
                , schemaBundle:AdmiProducto p  
                where 
                pc.id = s.planId
                and pd.planId = pc.id
                and p.id = pd.productoId
                and s.estado = 'Activo' 
                and p.nombreTecnico = 'IP' 
                and s.puntoId = $id_punto");

        try
        {
            $ipsFijas = $sql->getSingleScalarResult();
            if(!$ipsFijas)
            {
                $sql = $em->createQuery("select s.id from schemaBundle:InfoServicio s
					, schemaBundle:AdmiProducto p  
					where p.id = s.productoId
					and s.estado = 'Activo' 
					and p.nombreTecnico = 'IP' 
					and s.puntoId = $id_punto");

                $ipsFijas = $sql->getSingleScalarResult();
            }
        }
        catch(\Exception $e)
        {
            $error = $e->getMessage();
            if(strpos($error, 'No result was found for query although at least one row was expected') !== false)
            {
                try
                {
                    $sql = $em->createQuery("select s.id from schemaBundle:InfoServicio s
						, schemaBundle:AdmiProducto p  
						where p.id = s.productoId
						and s.estado = 'Activo' 
						and p.nombreTecnico = 'IP' 
						and s.puntoId = $id_punto");

                    $ipsFijas = $sql->getSingleScalarResult();
                }
                catch(\Exception $e)
                {
                    $error = $e->getMessage();
                    if(strpos($error, 'No result was found for query although at least one row was expected') !== false)
                        $ipsFijas = "";
                    else
                        $ipsFijas = 'Error 2 en la consulta de Ips Fijas Activas.' . $error;
                }
            }
            else
                $ipsFijas = 'Error en la consulta de Ips Fijas Activas.' . $error;
        }

        return $ipsFijas;
    }

    public function tieneServiciosInCorteCliente($idPersonaEmpresaRol)
    {
        $query = $this->_em->createQuery("SELECT count(s.id)
						  FROM 
						    schemaBundle:InfoPunto p,
						    schemaBundle:InfoServicio s
						  WHERE   p.personaEmpresaRolId = " . $idPersonaEmpresaRol . "
						    AND   s.puntoId = p.id 
						    AND   s.estado in ('In-Corte','In-Corte-SinEje','In-Temp','In-Temp-SinEje')"
        );
        return $query->getSingleScalarResult();
    }

    /**
     * Documentación para el método 'findServiciosPorEmpresaPorPersona'.
     *
     * Método que obtiene los servicios de un cliente por empresa
     *
     * @return Array[registros] Listado de los servicios.
     *              [total]     Cantidad de registros.
     * 
     * @author Unknow
     * @version 1.0 Unknow
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.1 22-05-2016
     * Se filtra por estados del servicio
     */
    public function findServiciosPorEmpresaPorPersona($idEmpresa, $idCliente, $limit, $page, $start, $nombre, $nombrePadre, $criterioLoginPadre)
    {
        $nombre = str_replace(' ', '%', $nombre);
        $nombre = strtoupper($nombre);
        $nombrePadre = str_replace(' ', '%', $nombrePadre);
        $nombrePadre = strtoupper($nombrePadre);
        $criterio_nombre = '';
        $criterio_tabla_nombre_pto_padre = '';
        $criterio_nombre_pto_padre = '';
        
        // Filtro por estados diferentes de:
        $arrayEstados = array('Anulado', 'Cancel', 'Eliminado', 'Rechazada', 'Reubicado', 'Trasladado');
        
        if($nombre)
        {
            $criterio_nombre = " UPPER(d.login) like '%$nombre%' AND ";
        }
        if($nombrePadre)
        {
            $like = 'like';
            if($criterioLoginPadre == 'igual')
            {
                $like = ' = ';
            }
            elseif($criterioLoginPadre == 'diferente')
            {
                $like = ' <> ';
                $nombrePadre = "$nombrePadre";
            }
            elseif($criterioLoginPadre == 'contiene')
            {
                $like = ' like ';
                $nombrePadre = "%$nombrePadre%";
            }
            elseif($criterioLoginPadre == 'nocontiene')
            {
                $like = ' not like ';
                $nombrePadre = "%$nombrePadre%";
            }
            $criterio_tabla_nombre_pto_padre = " schemaBundle:InfoPunto ptoP, ";
            $criterio_nombre_pto_padre = " e.puntoFacturacionId=ptoP.id AND UPPER(ptoP.login) $like '$nombrePadre' AND ";
        }
        $query = $this->_em->createQuery("SELECT e
		FROM 
                schemaBundle:InfoPersona a, schemaBundle:InfoPersonaEmpresaRol b, 
                schemaBundle:InfoEmpresaRol c, $criterio_tabla_nombre_pto_padre 
                    schemaBundle:InfoPunto d, schemaBundle:InfoServicio e
		WHERE 
                a.id=b.personaId AND
                b.empresaRolId=c.id AND
                b.id=d.personaEmpresaRolId AND
                d.id=e.puntoId AND
                e.estado not in (:ESTADOS) AND
                $criterio_nombre_pto_padre
                a.id=$idCliente AND
                $criterio_nombre
                c.empresaCod='$idEmpresa' order by d.descripcionPunto ASC");
        
        $query->setParameter('ESTADOS', $arrayEstados);
        
        //echo $query->getSQL();die;
        $total = count($query->getResult());
        $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;
        //print_r($resultado['registros']);die;
        return $resultado;
    }

    public function findServiciosPorPersonaEmpresaRolId($idper, $limit, $page, $start, $nombre, $nombrePadre, $criterioLoginPadre)
    {
        $nombre = str_replace(' ', '%', $nombre);
        $nombre = strtoupper($nombre);
        $nombrePadre = str_replace(' ', '%', $nombrePadre);
        $nombrePadre = strtoupper($nombrePadre);
        $criterio_nombre = '';
        $criterio_tabla_nombre_pto_padre = '';
        $criterio_nombre_pto_padre = '';
        if($nombre)
        {
            $criterio_nombre = " UPPER(d.login) like '%$nombre%' AND ";
        }
        if($nombrePadre)
        {
            $like = 'like';
            if($criterioLoginPadre == 'igual')
            {
                $like = ' = ';
            }
            elseif($criterioLoginPadre == 'diferente')
            {
                $like = ' <> ';
                $nombrePadre = "$nombrePadre";
            }
            elseif($criterioLoginPadre == 'contiene')
            {
                $like = ' like ';
                $nombrePadre = "%$nombrePadre%";
            }
            elseif($criterioLoginPadre == 'nocontiene')
            {
                $like = ' not like ';
                $nombrePadre = "%$nombrePadre%";
            }
            $criterio_tabla_nombre_pto_padre = " schemaBundle:InfoPunto ptoP, ";
            $criterio_nombre_pto_padre = " e.puntoFacturacionId=ptoP.id AND UPPER(ptoP.login) $like '$nombrePadre' AND ";
        }
        $query = $this->_em->createQuery("SELECT e
		FROM 
                schemaBundle:InfoPersonaEmpresaRol b, 
                $criterio_tabla_nombre_pto_padre 
                    schemaBundle:InfoPunto d, schemaBundle:InfoServicio e
		WHERE 
                b.id=d.personaEmpresaRolId AND
                d.id=e.puntoId AND 
                $criterio_nombre_pto_padre
                $criterio_nombre
                b.id=$idper                     
                order by d.descripcionPunto ASC");
        //echo $query->getSQL();die;
        $total = count($query->getResult());
        $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;
        //print_r($resultado['registros']);die;
        return $resultado;
    }

    /**
     * Documentación para el método 'findServiciosByPuntoAndEstado'.
     *
     * Método que obtiene los servicios de un punto
     * 
     * @param int    $idPunto           ID del punto a obtener sus servicios
     * @param string $estado            Estado por el que se filtrarán los servicios obtenidos.
     * @param array $arrayTrasladados   Listado de servicios excluidos de la consulta de los servicios del punto.
     *     
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.1 29-06-2016
     * @since   1.0
     * Se modifica la lógica de programación del query.
     * Se recibe el arreglo $arrayTrasladados con los servicios que ya han sido transaladados para excluirlos del resultado.
     */
    public function findServiciosByPuntoAndEstado($idPunto, $estado, $arrayTrasladados = null)
    {
        $arrayResultado = array();
        $objQueryCount  = $this->_em->createQuery();
        $objQueryData   = $this->_em->createQuery();
        $strSelectC     = "SELECT  count(e) ";
        $strSelect      = "SELECT  e ";
        $strWhere       = "";
        
        try
        {
            if($estado && $estado != "Todos")
            {
                $strWhere = "AND e.estado = :ESTADO ";
                $objQueryCount->setParameter("ESTADO", $estado);
                $objQueryData->setParameter("ESTADO", $estado);
            }

            if($arrayTrasladados != null)
            {
                $strWhere = "AND e.id not in (:SERVICIOS) ";
                $objQueryCount->setParameter("SERVICIOS", $arrayTrasladados);
                $objQueryData->setParameter("SERVICIOS", $arrayTrasladados);
            }
            
             $strQuery = " FROM  schemaBundle:InfoServicio e
                           WHERE e.puntoId = :PUNTO " . $strWhere . "
                                order by e.feCreacion ASC";

            $objQueryCount->setParameter("PUNTO", $idPunto);
            $objQueryData->setParameter("PUNTO", $idPunto);

            $objQueryCount->setDQL($strSelectC . $strQuery);
            $intTotal = $objQueryCount->getSingleScalarResult();

            if($intTotal > 0)
            {
                $objQueryData->setDQL($strSelect . $strQuery);
                $arrayDatos = $objQueryData->getResult();

                $arrayResultado['total']     = $intTotal;
                $arrayResultado['registros'] = $arrayDatos;
            }    
        }
        catch(\Exception $ex)
        {
            $arrayResultado['error'] = $ex->getMessage();
        }
        
        return $arrayResultado;
    }

    /**
     * Función que obtiene los registros los servicios asociados a un punto
     * mediante la descripción del producto.
     * @author Jonathan Quintana <jiquintana@telconet.ec>
     * @version 1.0
     * @since 22-12-2022
     */
    public function obtenerServiciosPorDescripcionProducto($strDescProducto, $strPuntoId, $strCodEmpresa)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQueryData       = $this->_em->createNativeQuery(null,$objRsm);
        
        $strSql = " SELECT A.ID_SERVICIO
                    FROM DB_COMERCIAL.INFO_SERVICIO A
                    WHERE A.PUNTO_ID = :strPuntoId
                    AND A.ESTADO IN ('Activo', 'Pendiente') 
                    AND A.PRODUCTO_ID = (SELECT ID_PRODUCTO FROM DB_COMERCIAL.ADMI_PRODUCTO WHERE EMPRESA_COD = :strCodEmpresa 
                    AND DESCRIPCION_PRODUCTO = :strDescProducto) ";

        $objRsm->addScalarResult('ID_SERVICIO', 'id_servicio', 'integer');

        $objQueryData->setParameter('strDescProducto', $strDescProducto);
        $objQueryData->setParameter('strPuntoId', $strPuntoId);
        $objQueryData->setParameter('strCodEmpresa', $strCodEmpresa);

        $objQueryData->setSQL($strSql);

        $intTotal = count($objQueryData->getArrayResult());

        $arrayDatos = $objQueryData->getArrayResult();

        $arrayResultado['registros'] = $arrayDatos;
        $arrayResultado['total'] = $intTotal;
        return $arrayResultado;
    }

    /**
     * Función que obtiene el párametro que contiene el arreglo con los 
     * id de los productos que aplican para paquete de horas de soporte.
     * @author Victor Peña <vpena@telconet.ec>
     * @version 1.0
     * @since 24-05-2023
     */
    public function findParametroHorasSoporte($strNombreParametro, $strUsrCreacion, $strCodEmpresa)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQueryData       = $this->_em->createNativeQuery(null,$objRsm);
        
        $strSql = " SELECT VALOR1
                        FROM DB_GENERAL.ADMI_PARAMETRO_DET 
                        WHERE PARAMETRO_ID = (SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB 
                                              WHERE NOMBRE_PARAMETRO = :strNombreParametro AND USR_CREACION = :strUsrCreacion 
                                              AND ESTADO = 'Activo') 
                        AND USR_CREACION = :strUsrCreacion
                        AND ESTADO = 'Activo' 
                        AND EMPRESA_COD = :strCodEmpresa";

              
        $objRsm->addScalarResult('VALOR1', 'valor1', 'string');

        $objQueryData->setParameter('strUsrCreacion', $strUsrCreacion);
        $objQueryData->setParameter('strNombreParametro', $strNombreParametro);
        $objQueryData->setParameter('strCodEmpresa', $strCodEmpresa);

        $objQueryData->setSQL($strSql);

        

        $arrayDatos = $objQueryData->getResult();

        $arrayProductos = json_decode($arrayDatos[0]['valor1'])->SI;

        return $arrayProductos;
    }

    /**
     * Función que obtiene los servicios asociados a un punto 
     * mediante login y login auxiliar seleccionados en otro grid.
     * @author Jonathan Quintana <jiquintana@telconet.ec>
     * @version 1.0
     * @since 22-12-2022
     * 
     * Se modificò para que no aparecieran los logines del propio producto
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 1.1
     * @since 06-02-2023
     * 
     * Se modifica query de búsqueda con el listado de productos 
     * parametrizados que aplican para paquete de horas
     * @author Victor Peña <vpena@telconet.ec>
     * @version 1.2
     * @since 24-05-2023
     * 
     */
    public function findServiciosByLoginAndLogin($strLogin1, $strLogin2, $intCodEmpresa)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQueryData       = $this->_em->createNativeQuery(null,$objRsm);

        $arrayProductos = $this->findParametroHorasSoporte('PROD_APLICA_PAQUETE_HORAS', 'vpena', $intCodEmpresa);
        
        $strSql = " SELECT A.ID_SERVICIO, B.ID_PUNTO, B.LOGIN, A.LOGIN_AUX, A.ESTADO, 
        (SELECT DESCRIPCION_PRODUCTO FROM DB_COMERCIAL.ADMI_PRODUCTO WHERE ID_PRODUCTO = A.PRODUCTO_ID) PRODUCTO 
                    FROM DB_COMERCIAL.INFO_SERVICIO A, DB_COMERCIAL.INFO_PUNTO B 
                    WHERE A.PUNTO_ID = B.ID_PUNTO
                    AND A.PUNTO_ID = (SELECT ID_PUNTO FROM DB_COMERCIAL.INFO_PUNTO WHERE LOGIN = :strLogin2) 
                    AND B.PERSONA_EMPRESA_ROL_ID = (SELECT PERSONA_EMPRESA_ROL_ID FROM DB_COMERCIAL.INFO_PUNTO WHERE LOGIN = :strLogin1) 
                    AND A.ESTADO IN ('Activo', 'Pendiente') 
                    AND A.PRODUCTO_ID IN (:arrayProductos)";

        $objRsm->addScalarResult('ID_SERVICIO', 'id_servicio', 'integer');
        $objRsm->addScalarResult('ID_PUNTO', 'id_punto', 'integer');        
        $objRsm->addScalarResult('LOGIN', 'login', 'string');
        $objRsm->addScalarResult('LOGIN_AUX', 'login_aux', 'string');
        $objRsm->addScalarResult('PRODUCTO', 'producto', 'string');
        $objRsm->addScalarResult('ESTADO', 'estado', 'string');

        $objQueryData->setParameter('strLogin1', $strLogin1);
        $objQueryData->setParameter('strLogin2', $strLogin2);
        $objQueryData->setParameter('strCodEmpresa', $intCodEmpresa);
        $objQueryData->setParameter('arrayProductos', $arrayProductos);

        $objQueryData->setSQL($strSql);

        $intTotal = count($objQueryData->getArrayResult());

        $arrayDatos = $objQueryData->getArrayResult();

        $arrayResultado['registros'] = $arrayDatos;
        $arrayResultado['total'] = $intTotal;
        return $arrayResultado;   
    }

    /**
     * Documentación para el método 'getServiciosTrasladados'.
     *
     * Método que obtiene los servicios trasladados de un punto.
     * 
     * @param int    $intIdPunto    ID del punto a obtener los servicios trasladados.
     *     
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 01-09-2016
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 02-06-2018       Se agrega filtro de estado de caracteristica de servicio
     * @since 1.0
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.2 27-06-2018       Se modifica función y se asignan consultas diferentes por empresa, para MD se requerie controlar
     *                               escenarios donde los servicios pueden haber sido clonados en diferentes puntos al que se encuentra
     *                               en la sesión del usuario que ejecuta la operación
     *@author Joel Broncano <jbroncano@telconet.ec>
     * @version 1.2 28-03-2023    Se agrega el codigo de empresa 33 para soportar el flujo de traslado
     * @since 1.1
     * 
     * Costo query: 12
     * 
     * @param  $arrayParametros[
     *                           intEmpresaCod            Código de la empresa         
     *                           intPuntoIdSesion         Identificador del punto en sesión en el cual se procesa la transacción
     *                           intPuntoIdSeleccionado   Identificador del punto seleccionado en la pantalla web
     *                         ]
     */
    public function getServiciosTrasladados($arrayParametros)
    {
        $intEmpresaCod = $arrayParametros['intEmpresaCod'];
        $intPuntoId    = $arrayParametros['intPuntoIdSesion'];
        $intIdPunto    = $arrayParametros['intPuntoIdSeleccionado'];
        $objQueryData  = $this->_em->createQuery();
        $objRsm        = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery   = $this->_em->createNativeQuery(null, $objRsm);
        try
        {
            if ($intEmpresaCod == "18" || $intEmpresaCod == "33")
            {
                $strQuery = "   SELECT i0_.VALOR AS VALOR
                                FROM DB_COMERCIAL.INFO_PUNTO i1_
                                INNER JOIN DB_COMERCIAL.INFO_SERVICIO i2_
                                ON (i2_.PUNTO_ID = i1_.ID_PUNTO)
                                INNER JOIN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT i0_
                                ON (i0_.VALOR = TO_CHAR(i2_.ID_SERVICIO))
                                INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA a3_
                                ON (a3_.ID_PRODUCTO_CARACTERISITICA = i0_.PRODUCTO_CARACTERISITICA_ID)
                                INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA a4_
                                ON (a4_.ID_CARACTERISTICA            = a3_.CARACTERISTICA_ID)
                                WHERE a4_.DESCRIPCION_CARACTERISTICA = :TRASLADO_CARACTERISTICA
                                AND i1_.ID_PUNTO                     = :ID_PUNTO_SELECCIONADO
                                AND i0_.ESTADO                       = :ESTADO_CARACT_PARAM
                                AND i2_.ESTADO IN (:ESTADOS_SERVICIOS)
                                GROUP BY i0_.VALOR";

                $objNtvQuery->setParameter("TRASLADO_CARACTERISTICA" , 'TRASLADO');
                $objNtvQuery->setParameter("ESTADOS_SERVICIOS"       , array('Activo', 'In-Corte'));
                $objNtvQuery->setParameter("ESTADO_CARACT_PARAM"     , 'Activo');
                $objNtvQuery->setParameter("ID_PUNTO_SELECCIONADO"   ,  $intIdPunto);
                $objNtvQuery->setSQL($strQuery);
                $objRsm->addScalarResult('VALOR', 'valor', 'string');
                return $objNtvQuery->getResult();
            }
            else
            {
                $strQuery = "  SELECT     SPC.valor
                               FROM       schemaBundle:InfoPunto                  P
                               INNER JOIN schemaBundle:InfoServicio               S   WITH S.puntoId      = P.id
                               INNER JOIN schemaBundle:InfoServicioProdCaract     SPC WITH SPC.servicioId = S.id
                               INNER JOIN schemaBundle:AdmiProductoCaracteristica PC  WITH PC.id          = SPC.productoCaracterisiticaId
                               INNER JOIN schemaBundle:AdmiCaracteristica         C   WITH C.id           = PC.caracteristicaId
                               WHERE C.descripcionCaracteristica = :TRASLADO_CARACTERISTICA
                                 AND P.id                        = :ID_PUNTO_DESTINO 
                                 AND SPC.estado                  = :ESTADO_PARAM
                               GROUP BY SPC.valor";

                $objQueryData->setParameter("TRASLADO_CARACTERISTICA", 'TRASLADO');
                $objQueryData->setParameter("ESTADO_PARAM",            'Activo');
                $objQueryData->setParameter("ID_PUNTO_DESTINO",        $intPuntoId);
                $objQueryData->setDQL($strQuery);
                return $objQueryData->getResult();
            }
            
        }
        catch(Exception $ex)
        {
            return null;
        }
    }
    
    public function findServiciosEnlacesByPuntoAndEstado($idPunto, $estado)
    {
        if($estado && $estado != "Todos")
        {
            $where = "AND s.estado='$estado' ";
        }
        else
        {
            $where = "";
        }

        $query = $this->_em->createQuery("SELECT s
						    FROM 
						      schemaBundle:InfoServicio s,
						      schemaBundle:InfoPlanCab plc,
						      schemaBundle:InfoPlanDet pld,
						      schemaBundle:AdmiProducto p
						    WHERE s.planId = plc.id
						    AND   plc.id = pld.planId
						    AND   pld.productoId = p.id
						    AND   p.esEnlace = 'SI'
						    AND   s.puntoId=$idPunto " . $where . "
						    order by s.feCreacion ASC");

        $total = count($query->getResult());
        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;

        return $resultado;
    }

    public function findByOrdenTrabajoIdYEstado($id, $estado)
    {
        $query = $this->_em->createQuery("SELECT iser
		FROM 
                schemaBundle:InfoServicio iser
		WHERE 
                iser.estado <> '" . $estado . "' AND
                iser.ordenTrabajoId=" . $id);
        $datos = $query->getResult();
        return $datos;
    }

    /**
     * Documentación para el método 'findServiciosPorEmpresaPorPunto'.
     *
     * Método que obtiene el listado de servicios del punto del cliente para solicitar cambio de documentación.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>       
     * @version 1.1 23-06-2016
     * @since 1.0
     * Se agrega el filtro estado "CANCEL" y se setea por parámetro.
     *   
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>       
     * @version 1.2 05-07-2016
     * Se elimina el filtro estado "CANCEL" y se setea por parámetro.
     *   
     * @param  String  $idEmpresa Código de la empresa
     * @param  Integer $idPunto   Id del punto
     * @param  Integer $limit     Máximo de registros por página
     * @param  Integer $page      número de página
     * @param  Integer $start     Índice del primer registro de la página.
     * 
     * @return Array Total y Registros de la consulta.
     */
    public function findServiciosPorEmpresaPorPunto($idEmpresa, $idPunto, $limit, $page, $start)
    {
        $arrayParametros['EMPRESA'] = $idEmpresa;
        $arrayParametros['PUNTO']   = $idPunto;
        $arrayParametros['LIMIT']   = $limit;
        $arrayParametros['PAGE']    = $page;
        $arrayParametros['START']   = $start;
        $arrayParametros['ESTADOS'] = array('Eliminado');// Estados de los servicios excluidos.
        
        $arrayParametros['COUNT'] = true;
        $arrayResultado['total']  = intVal($this->getResultadoServiciosPorEmpresaPorPunto($arrayParametros));
        
        if($arrayResultado['total'] > 0)
        {
            $arrayParametros['COUNT']    = false;
            $arrayResultado['registros'] = $this->getResultadoServiciosPorEmpresaPorPunto($arrayParametros);
        }
        else
        {
            $arrayResultado['registros'] = array();
        }
        return $arrayResultado;
    }
    

     /**
     * Costo      : 3
     * Función    : existeServiciosHabiles
     * Descripción: funcion encargada de consultar los servicios habiles de una punto
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 22-07-2020
     *
     * @param array   $arrayParametros [ intIdPunto      => estado de los registros,
     *                                   arrayEstados    => red lan ingresada ]
     *
     * @return intServicios
     *
     **/
    public function existeServiciosHabiles($arrayParametros)
    {
        $objRsm    = new ResultSetMappingBuilder($this->_em);
        $objQuery  = $this->_em->createNativeQuery(null, $objRsm);

        $strSql = " SELECT COUNT(ID_SERVICIO) AS CANTIDAD_SERVICIOS
                        FROM DB_COMERCIAL.INFO_SERVICIO
                        WHERE PUNTO_ID = :idPunto
                        AND ESTADO NOT IN (:arrayEstados) ";

        $objQuery->setParameter("idPunto", $arrayParametros['intIdPunto']);
        $objQuery->setParameter("arrayEstados", $arrayParametros['arrayEstados']);

        $objRsm->addScalarResult('CANTIDAD_SERVICIOS', 'cantididadServicios', 'integer');

        $objQuery->setSQL($strSql);
        $intServicios = $objQuery->getSingleScalarResult();

        return $intServicios;
    }


    /**
     * Documentación para el método 'getResultadoServiciosPorEmpresaPorPunto'.
     *
     * Método que obtiene el listado de servicios del punto del cliente para solicitar cambio de documentación.
     * 
     * @author Unknow
     * @version 1.0 Unknow
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>       
     * @version 1.1 23-06-2016
     * Se agrega el filtro estado "CANCEL" y se setea por parámetro.
     *   
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>       
     * @version 1.2 23-06-2016
     * Se ordena por fe_creación de manera descendente(obtiene los últimos servicios ingresados en primer lugar).
     *   
     * @author Edson Franco <efranco@telconet.ec>       
     * @version 1.3 25-04-2017 - Se agrega el parámetro 'strLoginVendedor' para realizar la búsqueda de los servicios por login del vendedor
     *                           seleccionado por el usuario. Adicional se agrega manejo de excepciones con Try y Catch.
     * Costo query: 11
     *   
     * @param  $arrayParametros['EMPRESA']          String  Código de la empresa
     *                         ['PUNTO']            Integer Id del punto
     *                         ['LIMIT']            Integer Máximo de registros por página
     *                         ['PAGE']             Integer número de página
     *                         ['START']            Integer Índice del primer registro de la página
     *                         ['COUNT']            Bool    Indicador para obtener el total de registros o el listado como tal.
     *                         ['ESTADOS']          Array   Estados que se excluirán de la consulta.
     *                         ['strLoginVendedor'] String  Login del usuario vendedor del servicio.
     * 
     * @author Edgar Holguín <eholguin@telconet.ec>       
     * @version 1.4 07-01-2019 - Se agregran nuevos filtros para  realizar consulta según los datos enviados como parámetro.
     * 
     * @return Result Integer-Array: Cantidad de registros o Listado de Servicios.
     */
    public function getResultadoServiciosPorEmpresaPorPunto($arrayParametros)
    {
        $query = $this->_em->createQuery();
        
        try
        {
            $strSelect  = ' SELECT  e ';
            $strFrom    = ' FROM schemaBundle:InfoPersona           a, 
                                 schemaBundle:InfoPersonaEmpresaRol b, 
                                 schemaBundle:InfoEmpresaRol        c,
                                 schemaBundle:InfoPunto             d, 
                                 schemaBundle:InfoServicio          e,
                                 schemaBundle:InfoEmpresaGrupo      f ';
            $strWhere   = ' WHERE a.id = b.personaId           
                              AND c.id = b.empresaRolId        
                              AND b.id = d.personaEmpresaRolId
                              AND d.id = e.puntoId            
                              AND f.id = c.empresaCod          
                              AND f.id = :EMPRESA              
                              AND d.id = :PUNTO                
                              AND e.estado not in (:ESTADOS) ';
            $strOrderBy = ' ORDER BY e.feCreacion desc ';

            $query->setParameter("EMPRESA", $arrayParametros['EMPRESA']);
            $query->setParameter("PUNTO",   $arrayParametros['PUNTO']);
            $query->setParameter("ESTADOS", $arrayParametros['ESTADOS']);

            if( isset($arrayParametros['strLoginVendedor']) && !empty($arrayParametros['strLoginVendedor']) )
            {
               $strWhere .= ' AND e.usrVendedor = :strLoginVendedor ';

               $query->setParameter("strLoginVendedor", $arrayParametros['strLoginVendedor']);
            }//( isset($arrayParametros['strLoginVendedor']) && !empty($arrayParametros['strLoginVendedor']) )
            
            if( isset($arrayParametros['strEstado']) && !empty($arrayParametros['strEstado'])  && $arrayParametros['strEstado']!=='Todos')
            {
               $strWhere .= ' AND e.estado = :strEstado ';

               $query->setParameter("strEstado", $arrayParametros['strEstado']);
            }
            
            if( isset($arrayParametros['strProducto']) && !empty($arrayParametros['strProducto']) )
            {
               $strWhere .= ' AND e.productoId = :strProducto ';

               $query->setParameter("strProducto", $arrayParametros['strProducto']);
            }
            
            if( isset($arrayParametros['strPlan']) && !empty($arrayParametros['strPlan']) )
            {
               $strWhere .= ' AND e.planId = :strPlan ';

               $query->setParameter("strPlan", $arrayParametros['strPlan']);
            }             
            
            if( isset($arrayParametros['strFechaDesde']) && !empty($arrayParametros['strFechaDesde'])  && 
                isset($arrayParametros['strFechaHasta']) && !empty($arrayParametros['strFechaHasta']))
            {
               $strWhere .= ' AND e.feCreacion >= :strFechaDesde AND e.feCreacion <= :strFechaHasta';

               $query->setParameter("strFechaDesde", $arrayParametros['strFechaDesde']);
               $query->setParameter("strFechaHasta", $arrayParametros['strFechaHasta']);
            }             

            if($arrayParametros['COUNT'])
            {
               $strSelect = ' SELECT COUNT(e) ';
            }

            $strDqlQuery = $strSelect.$strFrom.$strWhere.$strOrderBy;

            $query->setDQL($strDqlQuery);

            if($arrayParametros['COUNT'])
            {
                return $query->getSingleScalarResult();
            }
            else
            {
                return $query->setFirstResult($arrayParametros['START'])->setMaxResults($arrayParametros['LIMIT'])->getResult();
            }
        }
        catch(\Exception $e)
        {
            throw($e);
        }
    }
    
    /**
     * 
     * Metodo utilizado para obtener los Servicios vinculados a un Punto ordenados jerarquicamente mostrando los Servicios PRINCIPALES
     * seguidos de sus respectivos BACKUPS
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 30-03-2017
     * 
     * @param Array $arrayParametros
     *                               [
     *                                 intStart        Parametros de Inicio de pagineo enviado desde pantalla
     *                                 intLimit        Parametros de Fin de pagineo enviado desde pantalla
     *                                 intIdPunto      Referencia del Punto a obtener sus servicios relacionados
     *                                 intIdEmpresa    Empresa a la cual pertenece el cliente
     *                               ]
     * @return Array $arrayRespuesta [ 
     *                                 total           Numero total de registros segun parametros de paginacion
     *                                 registros       Array de registros
     *                               ]
     */
    public function getArrayServiciosPorPunto($arrayParametros)
    {
        $arrayRespuesta = array();
        $arrayServicios = array();
        
        //Se obtiene el total de registros totales
        $arrayParametros['strTipo'] = 'count';
        $intTotal       = $this->getResultadoServiciosPorPuntoNativeQuery($arrayParametros)->getSingleScalarResult();
        
        //Obtiene los registros en un numero de acuerdo a los valores de paginacion enviados
        $arrayParametros['strTipo'] = 'data';
        $objNativeQuery = $this->getResultadoServiciosPorPuntoNativeQuery($arrayParametros);
        $arrayResultado = $this->setQueryLimit($objNativeQuery, $arrayParametros['intLimit'], $arrayParametros['intStart'])->getResult();
        
        $arrayRespuesta['total']     = $intTotal;
        $arrayRespuesta['registros'] = $arrayResultado;
        
        return $arrayRespuesta;
    }
    
    /**
     * 
     * Metodo utilizado para obtener el Objeto NativeQuery con la consulta de los servicios ligados a un punto
     * ordenados jerarquicamente mostrando los Servicios PRINCIPALES
     * seguidos de sus respectivos BACKUPS para la empresa Telconet
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 30-03-2017
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 29-08-2017 - Se realiza ordenamiento de acuerdo a secuencial de agrupamiento por solucion de productos
     *                           en caso de existir
     * 
     * Costo 11
     * 
     * @param Array $arrayParametros
     *                               [
     *                                 intIdPunto      Referencia del Punto a obtener sus servicios relacionados
     *                                 intIdEmpresa    Empresa a la cual pertenece el cliente
     *                               ]
     * @return Object $objNativeQuery 
     */
    public function getResultadoServiciosPorPuntoNativeQuery($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        $strSelect = "";
        
        switch($arrayParametros['strTipo'])
        {
            case 'count':
                $strSelect = "SELECT count(*) CONT ";
                $objResultSetMap->addScalarResult('CONT', 'intCont', 'integer');
                break;
            
            case 'data':
                $strSelect = "SELECT T.* ";
                $objResultSetMap->addRootEntityFromClassMetadata('\telconet\schemaBundle\Entity\InfoServicio', 'servicio');
                break;
        }
        
        $strSql = "
                     FROM
                       (SELECT SERVICIO.*,
                         (SELECT TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:secuencial)
                         FROM DUAL 
                         ) SECUENCIAL,
                         (SELECT TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:caracteristica)
                         FROM DUAL 
                         ) PRINCIPAL
                       FROM INFO_PERSONA PERSONA,
                         INFO_PERSONA_EMPRESA_ROL PERSONA_ROL,
                         INFO_EMPRESA_ROL EMPRESA_ROL,
                         INFO_PUNTO PUNTO,
                         INFO_SERVICIO SERVICIO,
                         INFO_EMPRESA_GRUPO GRUPO
                       WHERE PERSONA.ID_PERSONA       = PERSONA_ROL.PERSONA_ID
                       AND EMPRESA_ROL.ID_EMPRESA_ROL = PERSONA_ROL.EMPRESA_ROL_ID
                       AND PERSONA_ROL.ID_PERSONA_ROL = PUNTO.PERSONA_EMPRESA_ROL_ID
                       AND PUNTO.ID_PUNTO             = SERVICIO.PUNTO_ID
                       AND GRUPO.COD_EMPRESA          = EMPRESA_ROL.EMPRESA_COD
                       AND GRUPO.COD_EMPRESA          = :empresa
                       AND PUNTO.ID_PUNTO             = :punto
                       AND SERVICIO.ESTADO NOT       IN ('Eliminado')
                       ) T
                       CONNECT BY PRIOR T.ID_SERVICIO = T.PRINCIPAL
                       START WITH T.PRINCIPAL        IS NULL ORDER BY T.SECUENCIAL ASC";
        
        $objNativeQuery->setParameter("empresa",        $arrayParametros['intIdEmpresa']);
        $objNativeQuery->setParameter("punto",          $arrayParametros['intIdPunto']);
        $objNativeQuery->setParameter("caracteristica", 'ES_BACKUP');
        $objNativeQuery->setParameter("secuencial",     'SECUENCIAL_GRUPO');
        
        $objNativeQuery->setSQL($strSelect . $strSql);
        
        return $objNativeQuery;
    }

    /**
     * 
     * Metodo utilizado para obtener un array con todos los planes de un punto
     * Se añadio campo para saber si el plan contiene un producto con nombre tecnico
     * INTERNET
     * 
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.1 13-09-2017
     * @since 1.0
     * 
     * Actualización .- Se adiciona mas estados en filtro para que no aparezcan en app tm comercial
     * los servicios que esten con esos estados
     * 
     * @author Edgar Pin Villavicencio <epin@telconet.ec>
     * @version 1.1 21-05-2018
     * @since 1.1
     * 
     * 
     * Actualización .- Se modifica para enviar información técnica de todos los productos y no solo de internet para realizar adendums
     * 
     * @author Edgar Pin Villavicencion <epin@telconet.ec>
     * @version 1.2 05-11-2019 
     * 
     * Actualización .- Se modifica para consulta y se agrega fecha de solicitud de la planificacion
     * 
     * @author Jefferson Alexy Carrillo <jacarrillo@telconet.ec>
     * @version 1.3 01-08-2022 
     *  
     * @param int $idPunto
     * @return array $datos
     */
    public function findDatosResumenPorPunto($idPunto)
    {
        $query = $this->_em->createQuery("
                SELECT
                    serv.id, serv.cantidad, serv.precioVenta, serv.estado,
                    punt.id AS puntoId, punt.login AS loginPunto,
                    prod.id AS productoId, prod.descripcionProducto,
                    plan.id AS planId, plan.nombrePlan,
                    ultm.id AS ultimaMillaId, ultm.nombreTipoMedio AS nombreUltimaMilla,
                    (SELECT p.nombreTecnico
                    FROM schemaBundle:InfoPlanCab ipc 
                    LEFT JOIN schemaBundle:InfoPlanDet pd WITH pd.planId = ipc.id
                    LEFT JOIN schemaBundle:AdmiProducto p WITH p.id = pd.productoId
                    WHERE ipc.id = serv.planId AND p.nombreTecnico = 'INTERNET') 
                    AS nombreTecnico,
                    (SELECT p1.requierePlanificacion
                     FROM schemaBundle:InfoPlanCab ipc1 
                     LEFT JOIN schemaBundle:InfoPlanDet pd1 WITH pd1.planId = ipc1.id
                     LEFT JOIN schemaBundle:AdmiProducto p1 WITH p1.id = pd1.productoId
                     WHERE ipc1.id = serv.planId AND p1.nombreTecnico = 'INTERNET'
                    )AS requierePlanificacion, serv.origen,   
                    (CASE WHEN plan.nombrePlan is null THEN prod.descripcionProducto ELSE plan.nombrePlan END) as nombre,
                    ade.tipo, ade.numero as numeroAdendum, ade.contratoId, prod.nombreTecnico as nombreTecnico2, 
                    prod.requierePlanificacion as requiere, 
                    (SELECT  ides.feCreacion FROM schemaBundle:InfoDetalleSolicitud ides WHERE    
                     ides.tipoSolicitudId= 8 AND ides.estado='PrePlanificada'  AND ides.servicioId  =  serv.id) as fePanificaSolicitud
                FROM
                    schemaBundle:InfoServicio serv
                    JOIN serv.puntoId punt
                    LEFT JOIN serv.productoId prod
                    LEFT JOIN serv.planId plan
                    LEFT JOIN schemaBundle:InfoServicioTecnico stec WITH stec.servicioId = serv.id
                    LEFT JOIN schemaBundle:AdmiTipoMedio ultm WITH ultm.id = stec.ultimaMillaId
                    LEFT JOIN schemaBundle:InfoAdendum ade WITH ade.puntoId = :idPunto and ade.servicioId = serv.id
                WHERE
                    serv.puntoId = :idPunto
                    AND serv.estado not in ('Eliminado', 'Anulado', 'Inactivo', 'Eliminada', 'Anulada', 'Cancel', 'Rechazada')
                ORDER BY serv.feCreacion ASC");
        $query->setParameter('idPunto', $idPunto);
        $datos = $query->getResult();
        $arrayRespuesta = array();
        //aqui
        foreach ($datos as $arrayItem) 
        { 
             if (is_null($arrayItem['nombreTecnico']))
             {
                 $arrayItem['nombreTecnico'] = $arrayItem['nombreTecnico2'];
                 
             }
             if (is_null($arrayItem['requierePlanificacion']))
             {
                 $arrayItem['requierePlanificacion'] = $arrayItem['requiere'];
                 
             }

             if (!is_null($arrayItem['fePanificaSolicitud']))
             {
                 $strFePlanificaSol = new \DateTime($arrayItem['fePanificaSolicitud']); 
                 $arrayItem['fePanificaSolicitud'] =  $strFePlanificaSol->format('d/m/Y'); 
                 
             }

             
 
             $arrayRespuesta[] = $arrayItem;
        }
        return $arrayRespuesta;
    }

    //encuentra Servicios factibles para solicitus de Instalacion
    public function findServiciosPoraSolicitadInstalacion($idEmpresa, $idPunto, $limit, $page, $start)
    {
        $query = $this->_em->createQuery("SELECT distinct e.id, punto.id as puntoId,planCab.id as planId,
                      producto.id as productoId,e.cantidad,e.feCreacion,e.precioVenta, e.estado,producto.instalacion
		FROM 
                schemaBundle:InfoPersona a, schemaBundle:InfoPersonaEmpresaRol b, 
                schemaBundle:InfoEmpresaRol c, schemaBundle:InfoPunto d, schemaBundle:InfoServicio e,
                schemaBundle:InfoPlanDet plan,  schemaBundle:AdmiProducto producto,  schemaBundle:InfoPunto punto,
                schemaBundle:InfoPlanCab planCab
		WHERE 
                a.id=b.personaId AND
                b.empresaRolId=c.id AND
                b.id=d.personaEmpresaRolId AND
                d.id=e.puntoId AND  
                e.puntoId=$idPunto AND
                e.estado  in ('Factible') AND
                c.empresaCod='$idEmpresa' 
                  AND planCab.id=e.planId
                 AND punto.id=e.puntoId
               AND plan.planId=e.planId
                AND  plan.productoId= producto.id   AND producto.instalacion > 0
              ");
        // echo $query->getSQL();die;
        $total = count($query->getResult());
        $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;
        //print_r($resultado['registros']);die;
        return $resultado;
    }

    public function findServiciosPoraSolicitadDescuentoUnico($idEmpresa, $idPunto, $limit, $page, $start)
    {
        $query = $this->_em->createQuery("SELECT e
		FROM 
                schemaBundle:InfoPersona a, schemaBundle:InfoPersonaEmpresaRol b, 
                schemaBundle:InfoEmpresaRol c, schemaBundle:InfoPunto d, schemaBundle:InfoServicio e
		WHERE 
                a.id=b.personaId AND
                b.empresaRolId=c.id AND
                b.id=d.personaEmpresaRolId AND
                d.id=e.puntoId AND  
                e.puntoId=$idPunto AND
                e.estado  in ('Activo') AND
                c.empresaCod='$idEmpresa' order by a.feCreacion ASC");
        //  echo $query->getSQL();die;
        $total = count($query->getResult());
        $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;
        //print_r($resultado['registros']);die;
        return $resultado;
    }
    
    /**
     * Metodo findServiciosPorEmpresaPorPuntoPorEstado
     * 
     * Obtiene los servicios de un punto pertenenciente a una empresa en estado Activo
     * 
     * @param int    $idEmpresa             Código de la empresa
     * @param int    $idPunto               Id del punto de factuación
     * @param String $estado                Estado del Servicio
     * @param String $strTipoFrecuencia     Descripción de la frecuencia del servicio
     * 
     * @return array $arrayResultado ['total', 'registros']
     * 
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 23-05-2016 - Se ordena por servicio con el precio más alto
     * @since 1.0
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.2 30-06-2016 - Se envía una variable para saber la frecuencia de los productos que se deben retornar dependiendo de lo seleccionado 
     *                           por el usuario
     *
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.3 15-11-2017 - Se modifica la forma en que se llama al query para obtener el resultado como lista de objetos.
     *                           Se elimina el campo observación para mejorar el tiempo del query.
     * 
     * @author Jesus Banchen <jbanchen@telconet.ec>
     * @version 1.4 21-08-2019 - Se modifica la consulta query agregando un filtro para cuando sea llamado por la funcion 
     *                            o proceso respectivo.
     *                           
     * 
     */
    public function findServiciosPorEmpresaPorPuntoPorEstado($idEmpresa, $idPunto, $estado, $strTipoFrecuencia = 'normal')
    {
        try
            {
            $strQuery = "SELECT
                        ISR.TIPO_ORDEN,
                        ISR.DESCRIPCION_PRESENTA_FACTURA,
                        ISR.FE_VIGENCIA,
                        ISR.ESTADO AS ESTADO_SERVICIO,
                        ISR.FE_CREACION ,
                        ISR.USR_CREACION ,
                        ISR.IP_CREACION ,
                        ISR.USR_VENDEDOR ,
                        NULL OBSERVACION,
                        ISR.ID_SERVICIO ,
                        ISR.ES_VENTA,
                        ISR.CANTIDAD ,
                        ISR.PRECIO_VENTA ,
                        ISR.COSTO ,
                        ISR.PORCENTAJE_DESCUENTO ,
                        ISR.VALOR_DESCUENTO ,
                        ISR.DIAS_GRACIA ,
                        ISR.FRECUENCIA_PRODUCTO,
                        ISR.MESES_RESTANTES,
                        ISR.LOGIN_AUX ,
                        ISR.PRECIO_FORMULA ,
                        ISR.PRECIO_INSTALACION ,
                        ISR.DESCUENTO_UNITARIO ,
                        ISR.PUNTO_ID ,
                        ISR.PUNTO_FACTURACION_ID,
                        ISR.PRODUCTO_ID,
                        ISR.PLAN_ID ,
                        ISR.ORDEN_TRABAJO_ID,
                        ISR.CICLO_ID
                    FROM
                        INFO_PERSONA IP,
                        INFO_PERSONA_EMPRESA_ROL IPER,
                        INFO_EMPRESA_ROL IER,
                        INFO_PUNTO IPT,
                        INFO_SERVICIO ISR
                    WHERE
                              IP.ID_PERSONA            = IPER.PERSONA_ID
                        AND   IPER.EMPRESA_ROL_ID      = IER.ID_EMPRESA_ROL
                        AND   IPER.ID_PERSONA_ROL      = IPT.PERSONA_EMPRESA_ROL_ID
                        AND   IPT.ID_PUNTO             = ISR.PUNTO_ID
                        AND   ISR.PUNTO_FACTURACION_ID = ?
                        AND   ISR.ESTADO               = ?
                        AND   ISR.ES_VENTA             = ?
                        AND   IER.EMPRESA_COD          = ?";
            if($strTipoFrecuencia == "igualACero")
            {
                $strQuery .= " AND ISR.FRECUENCIA_PRODUCTO = ? ";
                $intFrecuenciaProducto = 0;
            }
            elseif($strTipoFrecuencia == "mayorIgualQue1")
            {
                $strQuery .= " AND ISR.FRECUENCIA_PRODUCTO >= ? ";
                $intFrecuenciaProducto = 1;
            }
            elseif($strTipoFrecuencia == "mayorIgualQue0")
            {
                $strQuery .= " AND ISR.FRECUENCIA_PRODUCTO >= ? ";
                $intFrecuenciaProducto = 0;
            }

            $strQuery .= " ORDER BY ISR.PRECIO_VENTA DESC";
            $objRsmBuilderData  = new ResultSetMappingBuilder($this->_em);
            $objRsmBuilderData->addRootEntityFromClassMetadata('telconet\schemaBundle\Entity\InfoServicio', 'ISR');
            $objNtvQueryData = $this->_em->createNativeQuery(null, $objRsmBuilderData);
            $objNtvQueryData->setParameters(array($idPunto, $estado , 'S', $idEmpresa, $intFrecuenciaProducto));
            $objNtvQueryData->setSQL($strQuery);
            $arrayResultado = $objNtvQueryData->getResult();
            $arrayRespuesta['registros'] = $arrayResultado;
            $arrayRespuesta['total']     = count($arrayResultado);
        }
        catch(\Exception $ex)
        {
            error_log('InfoServicioRepository-> findServiciosPorEmpresaPorPuntoPorEstado()' . $ex->getMessage());
        }
        return $arrayRespuesta;
    }

    /**
     * Documentación para findProductoPorEmpresaPorPuntoPorEstado
     *
     * Obtiene los productos asignados del punto.
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.0 16-11-2017 - Versión inicial.
     * 
     * @author Jesus Banchen <jbanchen@telconet.ec>
     * @version 1.1 03-09-2019 -Se agrega una nueva consulta para fact-Manuales- la combinacion de 
     *  consulta prepagada sin frecuencia con prepagana normal "mayorIgualQue0". 
     * 
     */
    public function findProductoPorEmpresaPorPuntoPorEstado($arrayParametros)
    {
        $arrayParametros["strTipoFrecuencia"] = isset($arrayParametros["strTipoFrecuencia"]) ? $arrayParametros["strTipoFrecuencia"] : 'normal';
        $arrayParametrosQuery[0]              = $arrayParametros["intIdPunto"];
        $arrayParametrosQuery[1]              = $arrayParametros["strEstado"];
        $arrayParametrosQuery[2]              = 'S';
        $arrayParametrosQuery[3]              = $arrayParametros["strEmpresaCod"];
        $strQuery                             = "SELECT DISTINCT
                                                    APR.ID_PRODUCTO,
                                                    APR.DESCRIPCION_PRODUCTO
                                                FROM
                                                    INFO_PERSONA IP,
                                                    INFO_PERSONA_EMPRESA_ROL IPER,
                                                    INFO_EMPRESA_ROL IER,
                                                    INFO_PUNTO IPT,
                                                    INFO_SERVICIO ISR,
                                                    ADMI_PRODUCTO APR
                                                WHERE
                                                          IP.ID_PERSONA            = IPER.PERSONA_ID
                                                    AND   IPER.EMPRESA_ROL_ID      = IER.ID_EMPRESA_ROL
                                                    AND   IPER.ID_PERSONA_ROL      = IPT.PERSONA_EMPRESA_ROL_ID
                                                    AND   IPT.ID_PUNTO             = ISR.PUNTO_ID
                                                    AND   ISR.PUNTO_FACTURACION_ID = ?
                                                    AND   ISR.ESTADO               = ?
                                                    AND   ISR.ES_VENTA             = ?
                                                    AND   IER.EMPRESA_COD          = ?
                                                    AND   ISR.PRODUCTO_ID          = APR.ID_PRODUCTO";
        if($arrayParametros["strTipoFrecuencia"] == "igualACero")
        {
            $strQuery               .= " AND ISR.FRECUENCIA_PRODUCTO = ? ";
            $arrayParametrosQuery[4] = 0;
        }
        elseif($arrayParametros["strTipoFrecuencia"] == "mayorIgualQue1")
        {
            $strQuery               .= " AND ISR.FRECUENCIA_PRODUCTO >= ? ";
            $arrayParametrosQuery[4] = 1;
        }
        elseif($arrayParametros["strTipoFrecuencia"] == "mayorIgualQue0")
        {
            $strQuery               .= " AND ISR.FRECUENCIA_PRODUCTO >= ? ";
            $arrayParametrosQuery[4] = 0;
        }
        else
        {
            $strQuery               .= "";
        }

        try
        {
            $objRsmBuilderData  = new ResultSetMappingBuilder($this->_em);
            $objRsmBuilderData->addRootEntityFromClassMetadata('telconet\schemaBundle\Entity\AdmiProducto', 'APR');
            $objNtvQueryData    = $this->_em->createNativeQuery(null, $objRsmBuilderData);
            $objNtvQueryData->setParameters($arrayParametrosQuery);
            $objNtvQueryData->setSQL($strQuery);
            $arrayResultado     = $objNtvQueryData->getResult();
        }
        catch(\Exception $ex)
        {
            error_log('InfoServicioRepository->findProductoPorEmpresaPorPuntoPorEstado(): ' . $ex->getMessage());
        }
        return $arrayResultado;
    }

    public function findServiciosPorEmpresaPorPuntoIdPorEstado($idEmpresa, $idPunto, $estado)
    {
        $query = $this->_em->createQuery("SELECT e
		FROM 
                schemaBundle:InfoPersona a, schemaBundle:InfoPersonaEmpresaRol b, 
                schemaBundle:InfoEmpresaRol c, schemaBundle:InfoPunto d, schemaBundle:InfoServicio e
		WHERE 
                a.id=b.personaId AND
                b.empresaRolId=c.id AND
                b.id=d.personaEmpresaRolId AND
                d.id=e.puntoId AND  
                e.puntoId=$idPunto AND
                e.estado='$estado' AND
                c.empresaCod='$idEmpresa' order by a.feCreacion ASC");
        //echo $query->getSQL();die;
        $total = count($query->getResult());
        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;
        //print_r($resultado['registros']);die;
        return $resultado;
    }

    public function findServiciosPorEmpresaPorPuntoIdPorVariosEstados($idEmpresa, $idPunto, $estadosarr)
    {
        $estados = implode("','", $estadosarr);
        $query = $this->_em->createQuery("SELECT e
		FROM 
                schemaBundle:InfoPersona a, schemaBundle:InfoPersonaEmpresaRol b, 
                schemaBundle:InfoEmpresaRol c, schemaBundle:InfoPunto d, schemaBundle:InfoServicio e
		WHERE 
                a.id=b.personaId AND
                b.empresaRolId=c.id AND
                b.id=d.personaEmpresaRolId AND
                d.id=e.puntoId AND  
                e.puntoId=$idPunto AND
                e.estado in ('$estados') AND
                c.empresaCod='$idEmpresa' order by a.feCreacion ASC");
        //echo $query->getSQL();die;
        $total = count($query->getResult());
        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;
        //print_r($resultado['registros']);die;
        return $resultado;
    }

    /**
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.1 17-11-2017 - Se cambia la forma en que se llama al query.
     *                           Se elimina el ORDER BY
     * @since 1.0
     */
    public function findHistorial($intIdServicio)
    {
        $objRsmBuilder = new ResultSetMappingBuilder($this->_em);
        $ntvQuery   = $this->_em->createNativeQuery(null, $objRsmBuilder);
        $strSQL = "SELECT
                    MIN(A.FE_CREACION) AS FECREACION
                   FROM
                    DB_COMERCIAL.INFO_SERVICIO_HISTORIAL A
                   WHERE
                    A.SERVICIO_ID = :servicioId";
        $objRsmBuilder->addScalarResult('FECREACION', 'feCreacion', 'string');

        $ntvQuery->setParameter('servicioId', $intIdServicio);
        $ntvQuery->setSQL($strSQL);
        return $ntvQuery->getOneOrNullResult();
    }

    public function findTodosServiciosNoOrden($idEmpresa, $idPunto, $estado)
    {
        $query = $this->_em->createQuery("SELECT e
		FROM 
                schemaBundle:InfoPersona a, schemaBundle:InfoPersonaEmpresaRol b, 
                schemaBundle:InfoEmpresaRol c, schemaBundle:InfoPunto d, schemaBundle:InfoServicio e
		WHERE 
                a.id=b.personaId AND
                b.empresaRolId=c.id AND
                b.id=d.personaEmpresaRolId AND
                d.id=e.puntoId AND  
                e.puntoId=$idPunto AND
                e.estado='$estado' AND
                e.ordenTrabajoId is null AND
                c.empresaCod='$idEmpresa' order by a.feCreacion ASC");
        //echo $query->getSQL();die;
        $total = count($query->getResult());
        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;
        //print_r($resultado['registros']);die;
        return $resultado;
    }

    
    /**
     * Documentación para la función 'findServiciosFactibles'
     * 
     * Función que devuelve la cantidad y los servicios asociados al punto cliente enviado como parámetro en estado 'Factible'.
     * 
     * @param int $intIdPunto                  Id del punto cliente
     * @param int $intStart                    Inicio de la búsqueda
     * @param int $intLimit                    Cantidad de registros a buscar
     * @param array $arrayParametrosServicios ['strEsVenta' => 'Parámetro que indica el tipo de venta de los servicios a buscar']
     * 
     * @return array $arrayResultado[ 'registros' => 'Servicios encontrados por la consulta', 'total' => 'Cantidad de servicios encontrados' ]
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 28-02-2017 - Se valida que no aparezcan los servicios factibles de venta externa al crear y/o aprobar un contrato
     * @since 1.0
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.2 20-09-2017 - Se agrega nuevo estado de servicio por asignación de Factibilidad anticipada de servicios
     * @since 1.1
     * 
     * Costo del Query: 5
     */
    public function findServiciosFactibles($intIdPunto, $intStart, $intLimit, $arrayParametrosServicios)
    {
        $arrayResultado = array('registros' => array(), 'total' => 0);
        
        try
        {
            if( !empty($intIdPunto) )
            {
                $objQuery       = $this->_em->createQuery();
                $objQueryCount  = $this->_em->createQuery();
                $strSelect      = "SELECT ISE ";
                $strSelectCount = "SELECT COUNT(ISE.id) ";
                $strFrom        = "FROM schemaBundle:InfoServicio ISE ";
                $strWhere       = "WHERE ISE.puntoId = :intIdPunto ".
                                  "AND ISE.estado IN (:arrayEstados) ";
                $strOrderBy     = "ORDER BY ISE.feCreacion ASC ";
                
                if( isset($arrayParametrosServicios['strEsVenta']) && !empty($arrayParametrosServicios['strEsVenta']) )
                {
                    if( $arrayParametrosServicios['strEsVenta'] == 'EXTERNA' )
                    {
                        $strWhere .= "AND ISE.esVenta = :strEsVenta ";
                    }//( $arrayParametrosServicios['strEsVenta'] == 'EXTERNA' )
                    else
                    {
                        $strWhere .= "AND (ISE.esVenta <> :strEsVenta OR ISE.esVenta IS NULL) ";
                    }
                        
                    $objQuery->setParameter('strEsVenta',      'E');
                    $objQueryCount->setParameter('strEsVenta', 'E');
                }//( isset($arrayParametrosServicios['strEsVenta']) && !empty($arrayParametrosServicios['strEsVenta']) )

                $objQuery->setParameter('intIdPunto',             $intIdPunto);
                $objQuery->setParameter('arrayEstados',      array('Factible','Factibilidad-anticipada'));
                $objQueryCount->setParameter('intIdPunto',        $intIdPunto);
                $objQueryCount->setParameter('arrayEstados',      array('Factible','Factibilidad-anticipada'));
                
                $strSql      = $strSelect.$strFrom.$strWhere.$strOrderBy;
                $strSqlCount = $strSelectCount.$strFrom.$strWhere.$strOrderBy;

                $objQuery->setDQL($strSql);
                $objQueryCount->setDQL($strSqlCount);

                if( !empty($intStart) && $intStart >= 0 )
                {
                    $objQuery->setFirstResult($intStart);
                }

                if( !empty($intLimit) && $intLimit > 0 )
                {
                    $objQuery->setMaxResults($intLimit);
                }

                $arrayResultado['registros'] = $objQuery->getResult();
                $arrayResultado['total']     = $objQueryCount->getSingleScalarResult();
            }
            else
            {
                throw new \Exception('Se debe enviar el id punto del cliente para realizar la consulta');
            }//( !empty($intIdPunto) )
        }
        catch( \Exception $e )
        {
            throw($e);
        }
        
        return $arrayResultado;
    }
    

    /**
     * Documentación para la función 'findServiciosFactiblesPendientes'
     * 
     * Función que devuelve la cantidad y los servicios asociados al punto cliente enviado como parámetro en estado 'PrePlanificada', 'Pendiente',
     * 'Factible' o 'Activo'.
     * 
     * @param int $intIdPunto  Id del punto cliente
     * @param int $intStart    Inicio de la búsqueda
     * @param int $intLimit    Cantidad de registros a buscar
     * 
     * @return array $arrayResultado[ 'registros' => 'Servicios encontrados por la consulta', 'total' => 'Cantidad de servicios encontrados' ]
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 28-02-2017 - Se valida que no aparezcan los servicios factibles de venta externa al crear y/o aprobar un contrato
     * @since 1.0
     * Costo del Query: 5
     */
    public function findServiciosFactiblesPendientes($intIdPunto, $intStart, $intLimit)
    {
        $arrayResultado = array('registros' => array(), 'total' => 0);
        
        try
        {
            if( !empty($intIdPunto) )
            {
                $objQuery       = $this->_em->createQuery();
                $objQueryCount  = $this->_em->createQuery();
                $strSelect      = "SELECT ISE ";
                $strSelectCount = "SELECT COUNT(ISE.id) ";
                $strFrom        = "FROM schemaBundle:InfoServicio ISE ";
                $strWhere       = "WHERE ISE.puntoId = :intIdPunto ".
                                  "AND ISE.estado IN (:arrayEstados) ".
                                  "AND (ISE.esVenta <> :strEsVenta OR ISE.esVenta IS NULL) ";
                $strOrderBy     = "ORDER BY ISE.feCreacion ASC ";

                $objQuery->setParameter('intIdPunto',        $intIdPunto);
                $objQuery->setParameter('strEsVenta',        'E');
                $objQuery->setParameter('arrayEstados',      array('PrePlanificada','Pendiente','Factible','Activo'));
                $objQueryCount->setParameter('intIdPunto',   $intIdPunto);
                $objQueryCount->setParameter('strEsVenta',   'E');
                $objQueryCount->setParameter('arrayEstados', array('PrePlanificada','Pendiente','Factible','Activo'));

                $strSql      = $strSelect.$strFrom.$strWhere.$strOrderBy;
                $strSqlCount = $strSelectCount.$strFrom.$strWhere.$strOrderBy;

                $objQuery->setDQL($strSql);
                $objQueryCount->setDQL($strSqlCount);

                if( !empty($intStart) && $intStart >= 0 )
                {
                    $objQuery->setFirstResult($intStart);
                }

                if( !empty($intLimit) && $intLimit > 0 )
                {
                    $objQuery->setMaxResults($intLimit);
                }

                $arrayResultado['registros'] = $objQuery->getResult();
                $arrayResultado['total']     = $objQueryCount->getSingleScalarResult();
            }
            else
            {
                throw new \Exception('Se debe enviar el id punto del cliente para realizar la consulta');
            }//( !empty($intIdPunto) )
        }
        catch( \Exception $e )
        {
            throw($e);
        }
        
        return $arrayResultado;
    }

     /**
     * Funcion que devuelve cantidad de servicios por Punto y por estados
     *
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 18-06-2016     
     * @param integer $intIdPunto      
     * @return integer
     */
    public function getCantidadServiciosPorPuntoPorEstados($intIdPunto)
    {
        $query = $this->_em->createQuery("SELECT count(e)
		FROM 
                schemaBundle:InfoServicio e
		WHERE 
                e.puntoId=:intIdPunto AND 
                e.estado not in (:estados)
                order by e.feCreacion ASC");
                        
        $query->setParameter('intIdPunto', $intIdPunto);
        $query->setParameter('estados', array('Rechazado', 'Rechazada', 'Cancelado', 'Anulado', 'Cancel', 'Eliminado', 'Reubicado', 'Trasladado'));
        $intCantidadServicios = $query->getSingleScalarResult();
        if(!$intCantidadServicios)
        {
            $intCantidadServicios = 0;
        }
        return $intCantidadServicios;        
    }
    
    public function findServiciosPorEstadoPorPuntos($idPunto, $estado)
    {
        $query = $this->_em->createQuery("SELECT e
		FROM 
                schemaBundle:InfoServicio e
		WHERE 
                e.puntoId=$idPunto AND 
                e.estado='$estado'
                order by e.feCreacion ASC");
        //echo $query->getSQL();die;
        $total = count($query->getResult());
        $datos = $query->getResult();
        return $datos;
    }

    /**
     * getClientesXInterfacesTmp - Funcion que obtiene los logines de los clientes que estan realacionados a las
     *                             interfaces elementos id
     *
     * @param array $arrayParametros[ 'intProcesoIdTablaTemporal' => Id_proceso de la tabla temporal que tiene las interfaces a consultar ]
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 27-10-2016
     *
     * @return array $arrayClientes
     */
    public function getClientesXInterfacesTmp($arrayParametros)
    {
        $objRsmb  = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsmb);

        $strSql = " SELECT
                        DISTINCT infoPunto.ID_PUNTO,
                        infoPunto.LOGIN,
                        infoPersona.ID_PERSONA,
                        infoPersona.NOMBRES,
                        infoPersona.APELLIDOS,
                        infoPersona.RAZON_SOCIAL,
                        infoServicio.ESTADO

                    FROM
                      DB_COMERCIAL.INFO_PUNTO infoPunto,
                      DB_COMERCIAL.INFO_SERVICIO infoServicio,
                      DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL infoPersonaEmpresaRol,
                      DB_COMERCIAL.INFO_PERSONA infoPersona,
                      DB_COMERCIAL.INFO_SERVICIO_TECNICO infoServicioTecnico

                    WHERE infoPunto.ID_PUNTO                   = infoServicio.PUNTO_ID
                    AND   infoPersonaEmpresaRol.ID_PERSONA_ROL = infoPunto.PERSONA_EMPRESA_ROL_ID
                    AND   infoPersona.ID_PERSONA               = infoPersonaEmpresaRol.PERSONA_ID
                    AND   LOWER(infoServicio.ESTADO)          LIKE LOWER(:paramEstadoServicio)
                    AND   LOWER(infoPunto.ESTADO)             NOT LIKE LOWER(:paramEstadoCliente)
                    AND   LOWER(infoPersonaEmpresaRol.ESTADO) NOT LIKE LOWER(:paramEstadoCliente)
                    AND   LOWER(infoPersona.ESTADO)           NOT LIKE LOWER(:paramEstadoCliente)
                    AND   infoServicio.ID_SERVICIO             = infoServicioTecnico.SERVICIO_ID
                    AND EXISTS (SELECT 1 FROM DB_COMERCIAL.INFO_INTERFACES_AFECTADAS A WHERE A.INTERFACE_ID =
                                        infoServicioTecnico.INTERFACE_ELEMENTO_ID AND A.PROCESO_ID = :paramProcesoId ) ";

        $objRsmb->addScalarResult('ID_PUNTO', 'idPunto', 'integer');
        $objRsmb->addScalarResult('LOGIN', 'login', 'string');
        $objRsmb->addScalarResult('ID_PERSONA', 'idPersona', 'integer');
        $objRsmb->addScalarResult('NOMBRES', 'nombres', 'string');
        $objRsmb->addScalarResult('APELLIDOS', 'apellidos', 'string');
        $objRsmb->addScalarResult('RAZON_SOCIAL', 'razonSocial', 'string');
        $objRsmb->addScalarResult('ESTADO', 'estado', 'string');

        $objQuery->setParameter("paramEstadoServicio", "Activo");
        $objQuery->setParameter("paramEstadoCliente", "Eliminado");
        $objQuery->setParameter("paramProcesoId", $arrayParametros["intProcesoIdTablaTemporal"]);

        $objQuery->setSQL($strSql);

        $arrayClientes = $objQuery->getResult();

        return $arrayClientes;
    }
            
    public function getClientesXInterfacesId($arrayInterfaces)
    {
        $selectedCont = " count(p) as cont ";
        $selectedData = " DISTINCT p.id as idPunto, p.login, pe.id as idPersona, pe.nombres, pe.apellidos, pe.razonSocial, s.estado ";

        $whereVar = '';
        if($arrayInterfaces && count($arrayInterfaces) > 0)
        {
            $string_interfaces_implode = implode(",", $arrayInterfaces);
            $string_interfaces = "" . $string_interfaces_implode . "";
            //$whereVar .= "AND s.interfaceElementoId IN ($string_interfaces) ";
            $whereVar .= "AND s.id = ift.servicioId AND ift.interfaceElementoId IN ($string_interfaces) ";
        }

        $cuerpoQuery = "FROM 
							schemaBundle:InfoPunto p,
							schemaBundle:InfoServicio s,
							schemaBundle:InfoPersonaEmpresaRol per, 
							schemaBundle:InfoPersona pe,
							schemaBundle:InfoServicioTecnico ift
						WHERE  
							p.id = s.puntoId 
							AND per.id = p.personaEmpresaRolId 
							AND pe.id = per.personaId
							AND LOWER(s.estado) like LOWER('Activo') 
							AND LOWER(p.estado) not like LOWER('Eliminado') 
							AND LOWER(per.estado) not like LOWER('Eliminado') 
							AND LOWER(pe.estado) not like LOWER('Eliminado') 
							$whereVar
					";

        /* AND LOWER(s.estado) like LOWER('Activo') */

        $sqlC = "SELECT $selectedCont $cuerpoQuery ";
        $sql = "SELECT $selectedData $cuerpoQuery ";

        $query = $this->_em->createQuery($sql);

        //echo $query->getSql();

        $datos = $query->getResult();

        return $datos;
    }    

    public function getClientesXServiciosId($arrayServicios)
    {
        $selectedCont = " count(pe) as cont ";
        $selectedData = " DISTINCT pe.id ";

        $whereVar = '';
        if($arrayServicios && count($arrayServicios) > 0)
        {
            if(count($arrayServicios) > 1000)
            {
                $miles = ceil(count($arrayServicios) / 1000);

                $arrayTotal = false;
                $i = 0;
                for($j = 0; $j < $miles; $j++)
                {
                    $inicio = $j * 1000;
                    $fin = ( ($j + 1 >= $miles) ? count($arrayServicios) : (($j + 1) * 1000) );

                    $ArrayIdsServicios = false;
                    for($ji = $inicio; $ji < $fin; $ji++)
                    {
                        if(isset($arrayServicios[$ji]))
                        {
                            $ArrayIdsServicios[] = $arrayServicios[$ji];
                        }
                    }

                    if($ArrayIdsServicios && count($ArrayIdsServicios) > 0)
                    {
                        $string_servicios_implode = implode(",", $ArrayIdsServicios);
                        $string_servicios = "" . $string_servicios_implode . "";

                        if($j == 0)
                        {
                            $whereVar .= "AND ( ";
                        }
                        else
                            $whereVar .= "OR ";

                        $whereVar .= "( s.id IN ($string_servicios) ) ";

                        if($j + 1 >= $miles)
                        {
                            $whereVar .= ") ";
                        }
                    }
                    //$arrayTotal[] = $ArrayIdsServicios;
                }
            }
            else
            {
                $string_servicios_implode = implode(",", $arrayServicios);
                $string_servicios = "" . $string_servicios_implode . "";
                $whereVar .= "AND s.id IN ($string_servicios) ";
            }
        }

        $cuerpoQuery = "FROM 
							schemaBundle:InfoServicio s,
							schemaBundle:InfoPunto p,
							schemaBundle:InfoPersonaEmpresaRol per, 
							schemaBundle:InfoPersona pe  
						WHERE  
							p.id = s.puntoId 
							AND per.id = p.personaEmpresaRolId 
							AND pe.id = per.personaId 
							$whereVar 
					";

        /* AND LOWER(s.estado) like LOWER('Activo') */

        $sqlC = "SELECT $selectedCont $cuerpoQuery ";
        $sql = "SELECT $selectedData $cuerpoQuery ";

        $query = $this->_em->createQuery($sql);

        //echo $query->getSql();

        $datos = $query->getResult();

        return $datos;
    }

    public function findServiciosCortadosPorPuntos($idPunto)
    {
        $query = $this->_em->createQuery("SELECT e
		FROM 
                schemaBundle:InfoServicio e
		WHERE 
                e.puntoId=$idPunto AND 
                e.estado in ('In-Corte')
                order by e.feCreacion ASC");
        //echo $query->getSQL();die;
        $total = count($query->getResult());
        $datos = $query->getResult();
        return $datos;
    }

    public function findPuntosActivosPorCriterios(
    $idEmpresa, $usuario, $fechaDesde, $fechaHasta, $nombre, $apellido, $razonSocial, $limit, $page, $start)
    {
        $criterio_fecha_desde = '';
        $criterio_fecha_hasta = '';
        $nombre = strtoupper($nombre);
        if($fechaDesde)
        {
            $fechaD = date("Y/m/d", strtotime($fechaDesde));
            $fechaDesde = $fechaD;
            $criterio_fecha_desde = " p1.feCreacion >= '$fechaDesde' AND ";
        }
        if($fechaHasta)
        {
            $fechaH = date("Y/m/d", strtotime($fechaHasta));
            $fechaHasta = $fechaH;
            $criterio_fecha_hasta = " p1.feCreacion <= '$fechaHasta' AND ";
        }
        $criterio_estado = '';
        $criterio_nombre = '';
        $criterio_apellido = '';
        $criterio_razonSocial = '';
        $criterio_usuario = '';
        if($usuario)
        {
            $criterio_usuario = "UPPER(p1.usrCreacion) = UPPER('$usuario') AND ";
        }
        if($estado != 'null' && $estado != '' && $estado != null)
        {
            $criterio_estado = "UPPER(p1.estado) = UPPER('$estado') AND ";
        }
        if($nombre)
        {
            $criterio_nombre = " UPPER(p1.nombres) like UPPER('%$nombre%') AND ";
        }
        if($apellido)
        {
            $criterio_apellido = " UPPER(p1.apellidos) like UPPER('%$apellido%') AND ";
        }
        if($razonSocial)
        {
            $criterio_razonSocial = " UPPER(p1.razonSocial) like UPPER('%$razonSocial%') AND ";
        }
        $query = $this->_em->createQuery("SELECT 
                    p1.id as idCliente, p1.estado,p1.razonSocial,p1.nombres, p1.apellidos,
                    p1.feCreacion,p1.usrCreacion,p1.direccion,per.id as id, 
                    pto.login, pto.feCreacion as feCreacionPto, pto.usr_vendedor,serv.id as servicioId
		FROM 
                    schemaBundle:InfoPersona p1, 
                    schemaBundle:InfoPersonaEmpresaRol per,
                    schemaBundle:InfoEmpresaRol empr,
                    schemaBundle:AdmiRol rol,
                    schemaBundle:AdmiTipoRol trol,
                    schemaBundle:InfoPunto pto,
                    schemaBundle:InfoServicio serv
		WHERE 
                p1.id=per.personaId AND
                per.id=pto.personaEmpresaRolId AND
                pto.id=serv.puntoId AND
                serv.id=servh.servicioId
                empr.rolId=rol.id AND
                rol.tipoRolId=trol.id AND
                UPPER(trol.descripcionTipoRol)='CLIENTE' AND
                per.estado in ('Activo','Pendiente') AND
                $criterio_estado
                $criterio_nombre
                $criterio_apellido
                $criterio_razonSocial				
                $criterio_usuario    
                $criterio_fecha_desde
                $criterio_fecha_hasta
                empr.empresaCod='$idEmpresa'  
                order by per.feCreacion DESC");
        //echo "SQL:".$query->getSQL();
        $total = count($query->getResult());
        $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;
        return $resultado;
    }

    public function findServiciosConEstadoClienteActivoPendientePorCriterios(
    $idEmpresa, $usuario, $fechaDesde, $fechaHasta, $nombre, $apellido, $razonSocial, $limit, $page, $start)
    {
        $criterio_fecha_desde = '';
        $criterio_fecha_hasta = '';
        $nombre = strtoupper($nombre);
        if($fechaDesde)
        {
            $fechaD = date("Y/m/d", strtotime($fechaDesde));
            $fechaDesde = $fechaD;
            $criterio_fecha_desde = " p1.feCreacion >= '$fechaDesde' AND ";
        }
        if($fechaHasta)
        {
            $fechaH = date("Y/m/d", strtotime($fechaHasta));
            $fechaHasta = $fechaH;
            $criterio_fecha_hasta = " p1.feCreacion <= '$fechaHasta' AND ";
        }
        $criterio_estado = '';
        $criterio_nombre = '';
        $criterio_apellido = '';
        $criterio_razonSocial = '';
        $criterio_usuario = '';
        if($usuario)
        {
            $criterio_usuario = "UPPER(p1.usrCreacion) = UPPER('$usuario') AND ";
        }
        if($estado != 'null' && $estado != '' && $estado != null)
        {
            $criterio_estado = "UPPER(p1.estado) = UPPER('$estado') AND ";
        }
        if($nombre)
        {
            $criterio_nombre = " UPPER(p1.nombres) like UPPER('%$nombre%') AND ";
        }
        if($apellido)
        {
            $criterio_apellido = " UPPER(p1.apellidos) like UPPER('%$apellido%') AND ";
        }
        if($razonSocial)
        {
            $criterio_razonSocial = " UPPER(p1.razonSocial) like UPPER('%$razonSocial%') AND ";
        }
        $query = $this->_em->createQuery("SELECT 
                    p1.id as idCliente, p1.estado,p1.razonSocial,p1.nombres, p1.apellidos,
                    p1.feCreacion,p1.usrCreacion,p1.direccion,per.id as id, 
                    pto.login, pto.feCreacion as feCreacionPto,pto.id as idPunto, pto.usrVendedor,
                    serv.id as servicioId
		FROM 
                    schemaBundle:InfoPersona p1, 
                    schemaBundle:InfoPersonaEmpresaRol per,
                    schemaBundle:InfoEmpresaRol empr,
                    schemaBundle:AdmiRol rol,
                    schemaBundle:AdmiTipoRol trol,
                    schemaBundle:InfoPunto pto,
                    schemaBundle:InfoServicio serv
		WHERE 
                p1.id=per.personaId AND
                per.id=pto.personaEmpresaRolId AND
                pto.id=serv.puntoId AND
                empr.rolId=rol.id AND
                rol.tipoRolId=trol.id AND
                UPPER(trol.descripcionTipoRol)='CLIENTE' AND
                per.estado in ('Activo','Pendiente') AND
                $criterio_estado
                $criterio_nombre
                $criterio_apellido
                $criterio_razonSocial				
                $criterio_usuario    
                $criterio_fecha_desde
                $criterio_fecha_hasta
                empr.empresaCod='$idEmpresa'  
                order by per.feCreacion DESC");
        //echo "SQL:".$query->getSQL();
        $total = count($query->getResult());
        $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;
        return $resultado;
    }

    public function getEstados()
    {
        $qb = $this->_em->createQueryBuilder('s')
            ->select('DISTINCT s.estado')
            ->from('schemaBundle:InfoServicio', 's')
            ->orderBy('s.estado', 'ASC');

        $estados = $qb->getQuery()->getResult();
        return $estados;
    }

    public function getServiciosXpadreFacturacion($idPadreFact, $estado)
    {
        $andWhere = "";

        if($estado && $estado != "")
        {

            $andWhere = "and lower(servicio.estado)= lower('$estado')";
        }
        if($idPadreFact)
        {

            $query = $this->_em->createQuery("SELECT servicio.id  as idServicio,punto.id as puntoId, punto.login, 
                                               CONCAT(InfoPersona.nombres,InfoPersona.apellidos) as nombreCliente,
                                               InfoPersona.razonSocial,
                                              
                                               InfoPlanCab.id as planId,InfoPlanCab.nombrePlan,
                                               servicio.estado
                                               FROM  schemaBundle:InfoServicio servicio  
                                                    inner join schemaBundle:InfoPunto punto with punto.id=servicio.puntoId
                                                    inner join schemaBundle:InfoPlanCab InfoPlanCab with InfoPlanCab.id=servicio.planId 
                                                    inner join schemaBundle:InfoPersonaEmpresaRol InfoPersonaEmpresaRol with  InfoPersonaEmpresaRol.id=punto.personaEmpresaRolId
                                                    inner join schemaBundle:InfoPersona  InfoPersona with InfoPersona.id= InfoPersonaEmpresaRol.personaId
                                                    where servicio.puntoFacturacionId= $idPadreFact
                                                    $andWhere 
                            ");


            //echo($query->getSQL()); die();
            $total = count($query->getResult());
            $datos = $query->getResult();
            $resultado['registros'] = $datos;
            $resultado['total'] = $total;
            return $resultado;
        }
        else
        {
            $resultado['registros'] = "";
            $resultado['total'] = 0;
        }
        return $resultado;
    }


    /**
     * Documentación para la función 'findTodosServiciosXEstado'
     * 
     * Funcion que saca todos los servicios por Estado "Factible" de todos los puntos clientes que tenga un pre-cliente
     * 
     * @param int $intIdPersonaEmpresaRol    Id del punto cliente
     * @param int $intStart                  Inicio de la búsqueda
     * @param int $intLimit                  Cantidad de registros a buscar
     * @param String $strEstado              Estado de los servicios a buscar
     * 
     * @return array $arrayResultado[ 'registros' => 'Servicios encontrados por la consulta', 'total' => 'Cantidad de servicios encontrados' ]
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 28-02-2017 - Se valida que no aparezcan los servicios factibles de venta externa al crear y/o aprobar un contrato
     * @since 1.0
     * Costo del Query: 8
     */
    public function findTodosServiciosXEstado($intIdPersonaEmpresaRol, $intStart, $intLimit, $strEstado)
    {
        $arrayResultado = array('registros' => array(), 'total' => 0);
        
        try
        {
            if( !empty($intIdPersonaEmpresaRol) && !empty($strEstado) )
            {
                $objQuery       = $this->_em->createQuery();
                $objQueryCount  = $this->_em->createQuery();
                $strSelect      = "SELECT ISE ";
                $strSelectCount = "SELECT COUNT(ISE.id) ";
                $strFrom        = "FROM schemaBundle:InfoPersonaEmpresaRol IPER, ".
                                  "schemaBundle:InfoPunto IP, ".
                                  "schemaBundle:InfoServicio ISE ";
                $strWhere       = "WHERE IPER.id = IP.personaEmpresaRolId ".
                                  "AND IP.id = ISE.puntoId ".
                                  "AND IPER.id = :intIdPersonaEmpresaRol ".
                                  "AND ISE.estado = :strEstado ".
                                  "AND (ISE.esVenta <> :strEsVenta OR ISE.esVenta IS NULL) ";
                $strOrderBy     = "ORDER BY ISE.feCreacion ASC ";

                $objQuery->setParameter('intIdPersonaEmpresaRol',      $intIdPersonaEmpresaRol);
                $objQuery->setParameter('strEsVenta',                  'E');
                $objQuery->setParameter('strEstado',                   $strEstado);
                $objQueryCount->setParameter('intIdPersonaEmpresaRol', $intIdPersonaEmpresaRol);
                $objQueryCount->setParameter('strEsVenta',             'E');
                $objQueryCount->setParameter('strEstado',              $strEstado);

                $strSql      = $strSelect.$strFrom.$strWhere.$strOrderBy;
                $strSqlCount = $strSelectCount.$strFrom.$strWhere.$strOrderBy;

                $objQuery->setDQL($strSql);
                $objQueryCount->setDQL($strSqlCount);

                if( !empty($intStart) && $intStart >= 0 )
                {
                    $objQuery->setFirstResult($intStart);
                }

                if( !empty($intLimit) && $intLimit > 0 )
                {
                    $objQuery->setMaxResults($intLimit);
                }

                $arrayResultado['registros'] = $objQuery->getResult();
                $arrayResultado['total']     = $objQueryCount->getSingleScalarResult();
            }
            else
            {
                throw new \Exception('Se deben enviar todos los parámetros adecuados para realizar la consulta respectiva');
            }//( !empty($intIdPunto) )
        }
        catch( \Exception $e )
        {
            throw($e);
        }
        
        return $arrayResultado;
    }
    
    /**
     * Documentación para el método 'findServicioPorEstado'.
     * Saca informacion del primer servicio factible de un cliente, por persona_empresa_rol_id
     * @param interger  $intPersonaEmpresaRolId    
     * @param string    $strEstado
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.0 18-01-2017
     * @return Object $objServicio InfoServicio
     */
    public function findServicioPorEstado($intPersonaEmpresaRolId, $strEstado)
    {
        $objServicio   = null;
        $arrayServicio = $this->findTodosServiciosXEstado($intPersonaEmpresaRolId, 0, 1, $strEstado);
        if ($arrayServicio && !empty($arrayServicio["registros"]))
        {
            $objServicio = $arrayServicio["registros"][0];
        }
        return $objServicio;
    }


    /**
     * Documentación para la función 'findTodosServiciosXEstadoTn'
     * 
     * Saca informacion de los contratos  segun criterios de busqueda por empresa que se encuentran pendientes de Aprobacion y que corresponden a
     * contratos nuevos para la empresa TN
     * 
     * @param int $intIdPersonaEmpresaRol    Id del punto cliente
     * @param int $intStart                  Inicio de la búsqueda
     * @param int $intLimit                  Cantidad de registros a buscar
     * @param array $arrayEstado             Array con los estados de los servicios a buscar
     * 
     * @return array $arrayResultado[ 'registros' => 'Servicios encontrados por la consulta', 'total' => 'Cantidad de servicios encontrados' ]
     *
     * @author Anabelle Penaherrera <apenaherrera@telconet.ec>
     * @version 1.0 24-06-2016
     * 
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 28-02-2017 - Se valida que no aparezcan los servicios factibles de venta externa al crear y/o aprobar un contrato
     * Costo del Query: 8
     */
    public function findTodosServiciosXEstadoTn($intIdPersonaEmpresaRol, $intStart, $intLimit, $arrayEstado)
    {
        $arrayResultado = array('registros' => array(), 'total' => 0);
        
        try
        {
            if( !empty($intIdPersonaEmpresaRol) && !empty($arrayEstado) )
            {
                $objQuery       = $this->_em->createQuery();
                $objQueryCount  = $this->_em->createQuery();
                $strSelect      = "SELECT ISE ";
                $strSelectCount = "SELECT COUNT(ISE.id) ";
                $strFrom        = "FROM schemaBundle:InfoPersonaEmpresaRol IPER, ".
                                  "schemaBundle:InfoPunto IP, ".
                                  "schemaBundle:InfoServicio ISE ";
                $strWhere       = "WHERE IPER.id = IP.personaEmpresaRolId ".
                                  "AND IP.id = ISE.puntoId ".
                                  "AND IPER.id = :intIdPersonaEmpresaRol ".
                                  "AND ISE.estado NOT IN (:arrayEstados) ".
                                  "AND (ISE.esVenta <> :strEsVenta OR ISE.esVenta IS NULL) ";
                $strOrderBy     = "ORDER BY ISE.feCreacion ASC ";

                $objQuery->setParameter('intIdPersonaEmpresaRol',      $intIdPersonaEmpresaRol);
                $objQuery->setParameter('strEsVenta',                  'E');
                $objQuery->setParameter('arrayEstados',                $arrayEstado);
                $objQueryCount->setParameter('intIdPersonaEmpresaRol', $intIdPersonaEmpresaRol);
                $objQueryCount->setParameter('strEsVenta',             'E');
                $objQueryCount->setParameter('arrayEstados',           $arrayEstado);

                $strSql      = $strSelect.$strFrom.$strWhere.$strOrderBy;
                $strSqlCount = $strSelectCount.$strFrom.$strWhere.$strOrderBy;

                $objQuery->setDQL($strSql);
                $objQueryCount->setDQL($strSqlCount);

                if( !empty($intStart) && $intStart >= 0 )
                {
                    $objQuery->setFirstResult($intStart);
                }

                if( !empty($intLimit) && $intLimit > 0 )
                {
                    $objQuery->setMaxResults($intLimit);
                }

                $arrayResultado['registros'] = $objQuery->getResult();
                $arrayResultado['total']     = $objQueryCount->getSingleScalarResult();
            }
            else
            {
                throw new \Exception('Se deben enviar todos los parámetros adecuados para realizar la consulta respectiva');
            }//( !empty($intIdPunto) )
        }
        catch( \Exception $e )
        {
            throw($e);
        }
        
        return $arrayResultado;
    }

    public function findByPlanCondicionIncumplida($idPersonaEmpresaRol, $idFormaPago, $idTipoCuenta, $idBancoTipoCuenta)
    {
        $query = $this->_em->createQuery('SELECT servicio
                FROM schemaBundle:InfoServicio servicio
                INNER JOIN schemaBundle:InfoPunto punto WITH punto.id = servicio.puntoId
                WHERE punto.personaEmpresaRolId = :idPersonaEmpresaRol
                AND servicio.estado IN(\'Pre-servicio\', \'Factible\', \'PreFactibilidad\', \'Pendiente\')
                AND NOT EXISTS (
                        SELECT 1
                        FROM schemaBundle:InfoPlanCondicion ipp
                        WHERE ipp.planId = servicio.planId
                        AND ipp.estado = \'Activo\'
                        AND (ipp.formaPagoId = :idFormaPago OR ipp.formaPagoId IS NULL) '
            . ($idTipoCuenta ? ' AND (ipp.tipoCuentaId = :idTipoCuenta OR ipp.tipoCuentaId IS NULL) ' : '')
            . ($idBancoTipoCuenta ? ' AND (ipp.bancoTipoCuentaId = :idBancoTipoCuenta OR ipp.bancoTipoCuentaId IS NULL) ' : '')
            . ')');
        $query->setParameter('idPersonaEmpresaRol', $idPersonaEmpresaRol);
        $query->setParameter('idFormaPago', $idFormaPago);
        if($idTipoCuenta)
        {
            $query->setParameter('idTipoCuenta', $idTipoCuenta);
        }
        if($idBancoTipoCuenta)
        {
            $query->setParameter('idBancoTipoCuenta', $idBancoTipoCuenta);
        }
        $datos = $query->getResult();
        return $datos;
    }

    //wsanchez - corregido por fadum
    public function getTipoElementoByPuntoAndEstado($idServicio)
    {
        //ONT	    
        $query = "SELECT ";
        $query .= "IDENTITY(PUERTO.elementoId) as idElemento, ";
        $query .= "PUERTO.nombreInterfaceElemento, ";
        $query .= "a_me.nombreModeloElemento, ";
        $query .= "ELEMENTO.nombreElemento, ";
        $query .= "a_te.nombreTipoElemento, ";
        $query .= "a_te.descripcionTipoElemento ";
        $query .= "FROM ";
        $query .= "schemaBundle:InfoServicioTecnico TECNICO, ";
        $query .= "schemaBundle:InfoInterfaceElemento PUERTO, ";
        $query .= "schemaBundle:InfoElemento ELEMENTO, ";
        $query .= "schemaBundle:AdmiModeloElemento a_me, ";
        $query .= "schemaBundle:AdmiTipoElemento a_te ";
        $query .= "WHERE TECNICO.servicioId = $idServicio ";
        $query .= "AND TECNICO.interfaceElementoClienteId = PUERTO.id ";
        $query .= "AND PUERTO.elementoId = ELEMENTO.id ";
        $query .= "AND ELEMENTO.modeloElementoId = a_me.id AND a_me.tipoElementoId = a_te.id ";

        $consulta = $this->_em->createQuery($query);
        $total = count($consulta->getArrayResult());
        $datos = $consulta->getArrayResult();
        for($i = 0; $i < $total; $i++)
        {
            $data[] = array("idElemento" => $datos[$i]["idElemento"],
                "nombreInterfaceElemento" => $datos[$i]["nombreInterfaceElemento"],
                "nombreModeloElemento" => $datos[$i]["nombreModeloElemento"],
                "nombreElemento" => $datos[$i]["nombreElemento"],
                "descripcionTipoElemento" => $datos[$i]["descripcionTipoElemento"]);
        }

        //WIFI
        $query = "SELECT ";
        $query .= "IDENTITY(PUERTO.elementoId) as idElemento, ";
        $query .= "PUERTO.nombreInterfaceElemento, ";
        $query .= "a_me.nombreModeloElemento, ";
        $query .= "ELEMENTO.nombreElemento, ";
        $query .= "a_te.nombreTipoElemento, ";
        $query .= "a_te.descripcionTipoElemento ";
        $query .= "FROM ";
        $query .= "schemaBundle:InfoServicioTecnico TECNICO, ";
        $query .= "schemaBundle:InfoEnlace ENLACE, ";
        $query .= "schemaBundle:InfoInterfaceElemento PUERTO, ";
        $query .= "schemaBundle:InfoElemento ELEMENTO, ";
        $query .= "schemaBundle:AdmiModeloElemento a_me, ";
        $query .= "schemaBundle:AdmiTipoElemento a_te ";
        $query .= "WHERE TECNICO.servicioId = $idServicio ";
        $query .= "AND TECNICO.interfaceElementoClienteId = PUERTO.id ";
        $query .= "AND PUERTO.id = ENLACE.interfaceElementoFinId ";
        $query .= "AND PUERTO.elementoId = ELEMENTO.id ";
        $query .= "AND ELEMENTO.modeloElementoId = a_me.id AND a_me.tipoElementoId = a_te.id ";

        $consulta = $this->_em->createQuery($query);
        $total = count($consulta->getArrayResult());
        $datos = $consulta->getArrayResult();

        for($i = 0; $i < $total; $i++)
        {
            $data[] = array("idElemento" => $datos[$i]["idElemento"],
                "nombreInterfaceElemento" => $datos[$i]["nombreInterfaceElemento"],
                "nombreModeloElemento" => $datos[$i]["nombreModeloElemento"],
                "nombreElemento" => $datos[$i]["nombreElemento"],
                "descripcionTipoElemento" => $datos[$i]["descripcionTipoElemento"]);
        }

        $resultado['registros'] = $data;
        $resultado['total'] = $total;


        return $resultado;
    }
    
    /**
     * Metodo que devuelve los elementos que posee el cliente dada el tipo de ultima milla y tipo de backbone formado
     * 
     * @param Array $arrayParametros [  
     *                                  idServicio           Identificador de servicio
     *                                  idPunto              Identificador de punto
     *                                  tipo                 String que indica se el servicio procesado es plan o producto
     *                                  estadoServicio       String que indica el estado de servicio procesado
     *                                  fueSolicitada        String que indica si el servicio ya registra un cambio de equipo pendiente
     *                                  emInfraestructura    Entity Manager de esquema de base de datos infraestructura
     *                                  serviceTecnico       Objeto de Service tecnico utilizado en el proceso
     *                                  prefijo              String que indica el prefijo empresa en sesion
     *                                  strTieneSmartWifi    String que indica si un servicio tiene SmartWifi como producto o como plan
     *                               ]
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @since 28-07-2016 - Se recibe array con parametros y se modifica para que devuelva la informacion de equipos dependiendo de la ultima milla
     *                     segun el tipo de factibilidad, para MD la figura se mantiene igual
     * @version 1.1
     * @since 1.0
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 06-09-2016  Se agregan validaciones para poder realizar cambio de equipos de servicios con ultima milla Radio
     * @since 1.1
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @since 13-09-2016 - Se modifica consulta para que soporte el escenario de fibra directa sin propiedad establecida ( migracion )
     *                     y sin data de GIS
     * @version 1.3
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @since 09-11-2016 - Se inicializa variable que genera sobrecarga en los logs
     * @version 1.4
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.5 10-10-2016  Se agregan validaciones para poder inhabilitar registro de wifi adicional para servicios hw
     * @since   1.2 
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.6 27-10-2016 - Se agrega a los servicios con ultima milla RA el elemento Radio
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @since 23-11-2016 - Se ajusta para que soporte escenarios de servicios pseudope
     * @version 1.7
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.8 23-02-2017   Se agregan validaciones necesarias para procesar correctamente la información luego de 
     *                           incluir equipos SmartWifi en los clientes
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.9 23-02-2018 Se agrega validación para obtener correctamente los elementos para los servicios Small Business
     * @since 1.8
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.10 28-11-2018 Se agrega validación para gestionar productos de la empresa TNP
     * @since 1.9
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.11 21-01-2019 - Se realizan ajustes para ingresar información de los equipos de seguridad logica
     * @since 1.10
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.11 26-11-2019 - Se realiza un ajuste para validar que exista el elementoClienteId del objeto $objServicioTecnico
     *                            y asi evitar posibles problemas con servicios Wifi Alquiler Equipos.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.12 07-11-2019 | Se ajusta lógica para que soporte el servicio Wifi Alquiler de Equipos.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 2.0 26-05-2021 - Se modifica el proceso añadiendo los dispositivos del cliente que se encuentran en el nodo.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.1 25-10-2021 - Se valida el tipo de red GPON_MPLS para obtener los elementos del cliente del servicio
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.2 03-11-2022 - Se realiza la validación para obtener los elementos de los servicios con producto SEG_VEHICULO.
     *
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 2.3 09-12-2022 - Se agregan las validaciones para obtener los elementos del producto SAFE ENTRY
     *
     * @author Axel Auza <aauza@telconet.ec>
     * @version 2.4 07-06-2023 - Se agrega validación para obtener los elementos por clientes en el producto SEG_VEHICULO
     * 
     * @return $arr_encontrados
     */
    public function generarElementosPorServicio($arrayParametros)
    {        
        $idServicio         = $arrayParametros['idServicio'];
        $idPunto            = $arrayParametros['idPunto'];
        $tipo               = $arrayParametros['tipo'];
        $estadoServicio     = $arrayParametros['estadoServicio'];
        $fueSolicitada      = $arrayParametros['fueSolicitada'];
        $emInfraestructura  = $arrayParametros['emInfraestructura'];
        $serviceTecnico     = $arrayParametros['serviceTecnico'];
        $prefijoEmpresa     = $arrayParametros['prefijoEmpresa'];
        $strTieneSmartWifi  = $arrayParametros['strTieneSmartWifi'];
        $strRegistraEquipo  = $arrayParametros['registraEquipo']?$arrayParametros['registraEquipo']:"N";
        $booleanTipoRedGpon = isset($arrayParametros['booleanTipoRedGpon'])?$arrayParametros['booleanTipoRedGpon']:false;
        $arrayElementosSol  = isset($arrayParametros['arrayElementosSol'])?$arrayParametros['arrayElementosSol']:array();
        $booleanSegVehiculo = false;
        $boolSafeEntry      = false;

        $boolEsFibraRuta    = false;
        $boolEsFttx         = false;
        $strMarcaOlt        = "";
        $strMarcaEquipo     = "";

        // ======================================================================================
        $objPunto    = $this->_em->getRepository('schemaBundle:InfoPunto')
                                 ->find($idPunto);
        $objServicio = $this->_em->getRepository('schemaBundle:InfoServicio')
                                 ->find($idServicio);
        $objServicioTecnico = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')
                                        ->findOneBy(array("servicioId"=>$idServicio));
        
        $boolEsPesudoPe     = $this->esServicioPseudoPe($objServicio);
        
        if( ($objServicioTecnico && $objServicioTecnico->getElementoClienteId())
            || (is_object($objServicio) && is_object($objServicio->getProductoId()) 
                && ($objServicio->getProductoId()->getNombreTecnico() == "SEG_VEHICULO"
                    || $objServicio->getProductoId()->getNombreTecnico() == 'SAFE ENTRY') ) )
        {
            if($prefijoEmpresa == "TN" && is_object($objServicio) && $objServicio->getProductoId()->getNombreTecnico() == 'SAFE ENTRY')
            {
                $boolSafeEntry = true;
            }
            if(!is_null($objServicioTecnico->getUltimaMillaId())  && $objServicioTecnico->getUltimaMillaId())
            {
                $tipoMedio = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')->find($objServicioTecnico->getUltimaMillaId());

                if($prefijoEmpresa == "TN")
                {
                    //Obtener la caracteristica TIPO_FACTIBILIDAD para discriminar que sea FIBRA DIRECTA o RUTA
                    $objServProdCaractTipoFact = $serviceTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                    'TIPO_FACTIBILIDAD',
                                                                                                    $objServicio->getProductoId());

                    //Si no existe la caracteristica mencionada se setea por default a Fibra Ruta
                    if($tipoMedio->getNombreTipoMedio() == "Fibra Optica")
                    {
                        if($objServProdCaractTipoFact)
                        {
                            if($objServProdCaractTipoFact->getValor() == 'RUTA')
                            {
                                $boolEsFibraRuta = true;
                            }
                        }
                        else
                        {
                            if($objServicioTecnico)
                            {
                                if($objServicioTecnico->getInterfaceElementoConectorId())
                                {
                                    $boolEsFibraRuta = true;
                                }
                            }
                        }
                    }
                    else if($tipoMedio->getNombreTipoMedio() == "FTTx")
                    {
                        $boolEsFttx = true;
                    }
                }
                else
                {
                    $boolEsFibraRuta = true;
                }
            }


            // ======================================================================================
            $arrayParams    = array();
            $arrayElementos = array();
            
            if(!$boolEsPesudoPe)
            {
                //Si es FIBRA RUTA PARA TN o MD
                if($boolEsFibraRuta || $boolEsFttx || $strRegistraEquipo == "S")
                {
                    //Si es Fibra y tiene OUT del CASSETTE o SPLITTER BUSCA los elementos siguientes en los enlaces
                    if($objServicioTecnico->getInterfaceElementoConectorId() && !$booleanTipoRedGpon)
                    {
                        $arrayParams['interfaceElementoConectorId'] = $objServicioTecnico->getInterfaceElementoConectorId();
                        $arrayParams['strTieneSmartWifi']           = $strTieneSmartWifi;
                        $arrayParams['arrayData']                   = array();
                        $arrayElementos = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                            ->getElementosClienteByInterface($arrayParams);
                    }
                    else //Caso que no exista se toma directamente el elemento cliente ( CPE ) 
                    {
                        $intIdElementoCliente = $objServicioTecnico->getElementoClienteId();
                        if(!empty($intIdElementoCliente))
                        {
                            $elementoMigrado  = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                  ->find($objServicioTecnico->getElementoClienteId());
                            $arrayElementos[] = $elementoMigrado;
                        }
                    }
                }
                else
                {
                    //Si es Fibra Directo guarda el primer elemento ROSETA
                    if(is_object($tipoMedio) && $tipoMedio->getNombreTipoMedio()=="UTP")
                    {
                        $elementoInicial  = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                              ->find($objServicioTecnico->getElementoClienteId());
                        $arrayElementos[] = $elementoInicial;
                    }
                    else
                    {
                        if(is_object($tipoMedio) && $tipoMedio->getNombreTipoMedio()=="Radio")
                        {

                            $arrayParams['interfaceElementoConectorId'] = $objServicioTecnico->getInterfaceElementoClienteId();
                            $arrayParams['arrayData']                   = array();
                            $arrayElementos = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                ->getElementosClienteByInterface($arrayParams);

                            $objElementoRadio  = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                   ->find($objServicioTecnico->getElementoClienteId());
                            array_push($arrayElementos, $objElementoRadio);

                        }
                        else
                        {
                            if(!$boolSafeEntry)
                            {
                                $arrayParams['interfaceElementoConectorId'] = $objServicioTecnico->getInterfaceElementoId();
                                $arrayParams['arrayData']                   = array();
                                $arrayElementos = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                    ->getElementosClienteByInterface($arrayParams);
                            }
                            
                        }                 
                    }                    
                }
            }
            else
            {
                //Se obtiene el CPE para los servicios PseudoPE
                $arrayResultado =  $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                     ->getMacCpePorServicioInterface($objServicio->getId(),true);
                if(isset($arrayResultado))
                {
                    $objElementoCpe = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($arrayResultado['elementoId']);
                    
                    if(is_object($objElementoCpe))
                    {
                        $arrayElementos[] = $objElementoCpe;
                    }
                }
            }

            //Obtenemos los dispositivos del cliente que se encuentran en el nodo.
            if ($prefijoEmpresa == "TN" && is_object($objServicio))
            {
                $arrayElementosNodo = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                        ->obtenerDispositivosClienteNodo(array('intIdServicio' => $objServicio->getId()));

                if (!empty($arrayElementosNodo) && count($arrayElementosNodo) > 0)
                {
                    $arrayElementos = array_merge($arrayElementos,$arrayElementosNodo);
                }

                //verificar producto
                if(is_object($objServicio->getProductoId()))
                {
                    //verificar SEG VEHICULO
                    if($objServicio->getProductoId()->getNombreTecnico() == "SEG_VEHICULO")
                    {
                        $booleanSegVehiculo = true;
                    }
                    //verificar elementos del producto SEG_VEHICULO
                    $arrayParElementos  = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->get('PARAMETROS_SEG_VEHICULOS',
                                                        'TECNICO',
                                                        '',
                                                        'ELEMENTOS_PRODUCTO',
                                                        $objServicio->getProductoId()->getId(),
                                                        '',
                                                        '',
                                                        '',
                                                        '',
                                                        $arrayParametros['idEmpresa'],
                                                        'valor5',
                                                        '',
                                                        '',
                                                        '',
                                                        $objServicio->getPuntoId()->getPersonaEmpresaRolId()->getId());
                    if(!isset($arrayParElementos) || empty($arrayParElementos))
                    {
                        $arrayParElementos  = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->get('PARAMETROS_SEG_VEHICULOS',
                                                                          'TECNICO',
                                                                          '',
                                                                          'ELEMENTOS_PRODUCTO',
                                                                          $objServicio->getProductoId()->getId(),
                                                                          '',
                                                                          '',
                                                                          '',
                                                                          '',
                                                                          $arrayParametros['idEmpresa'],
                                                                          'valor5',
                                                                          '',
                                                                          '',
                                                                          '',
                                                                          'GENERAL');
                    }
                    foreach($arrayParElementos as $arrayItemParEle)
                    {
                        $strNombreElemento  = strtolower(str_replace(" ","-",$arrayItemParEle['valor3']))
                                              ."-".$objServicio->getLoginAux();
                        //obtengo el elemento del cliente
                        $objElementoCliente = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                    ->findOneBy(array("nombreElemento" => $strNombreElemento,
                                                                                      "estado"         => "Activo"));
                        if(is_object($objElementoCliente))
                        {
                            $arrayElementos[] = $objElementoCliente;
                        }
                    }
                    if($objServicio->getProductoId()->getNombreTecnico() == 'SAFE ENTRY')
                    {
                        $boolSafeEntry = true;
                        //obtenner los elementos del servicio
                        $objCaracteristica = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                                    ->findOneBy(array("descripcionCaracteristica" => "ELEMENTO_CLIENTE_ID",
                                                                      "estado"                    => "Activo"));
                        $objProdCarac      = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                            ->findOneBy(array("productoId"       => $objServicio->getProductoId()->getId(),
                                                              "caracteristicaId" => $objCaracteristica->getId(),
                                                              "estado"           => "Activo"));
                        if(is_object($objProdCarac))
                        {
                            $arrayServCaracElementos = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                            ->findBy(array("servicioId"                => $objServicio->getId(),
                                                                           "productoCaracterisiticaId" => $objProdCarac->getId(),
                                                                           "estado"                    => "Activo"));
                            foreach($arrayServCaracElementos as $objItemSerCarEle)
                            {
                                $objElementoCliente = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                        ->findOneBy(array('id' => $objItemSerCarEle->getValor(),
                                                                                          'estado' => 'Activo'));
                                if(is_object($objElementoCliente))
                                {
                                    $arrayElementos[] = $objElementoCliente;
                                    array_unique($arrayElementos, SORT_REGULAR);
                                }
                            }
                        }
                    }
                }
            }

            if($arrayElementos)
            {
                $intContadorRegistros = 0;
                
                if(is_object($objServicioTecnico) && $objServicioTecnico->getElementoId())
                {
                    $objElementoOlt       = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                              ->find($objServicioTecnico->getElementoId());
                    if (is_object($objElementoOlt))
                    {
                        $strMarcaOlt = $objElementoOlt->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                    }
                }
                foreach ($arrayElementos as $elemento) 
                {
                    $intContadorRegistros = $intContadorRegistros + 1;
                    $nombreProductoPlan = '';
                    if($objServicio->getProductoId() != null)
                    {
                        $nombreProductoPlan = $objServicio->getProductoId()->getDescripcionProducto();
                    }
                    else if($objServicio->getPlanId()!=null)
                    {

                        $nombreProductoPlan = $objServicioTecnico->getServicioId()->getPlanId()->getNombrePlan();
                    }
                    /* codigo para inhabilitar el registro de equipo adicional wifi para servicios hw que se encuentra en la 
                       iteración numero 2 del foreach */
                    if($prefijoEmpresa == "MD")
                    {
                        if ($strMarcaOlt == "HUAWEI" && $intContadorRegistros == 2 && $strTieneSmartWifi == 'NO')
                        {
                            $fueSolicitada  = 'S';
                            $strMarcaEquipo = 'HUAWEI';
                        }
                    }
                    //verificar si el elemento ya esta solicitado
                    if(($booleanSegVehiculo || $boolSafeEntry) && !in_array($elemento->getId(),$arrayElementosSol))
                    {
                        $fueSolicitada  = 'N';
                    }
                    elseif($booleanSegVehiculo || $boolSafeEntry)
                    {
                        $fueSolicitada  = 'S';
                    }

                    $arr_encontrados[] = array( "idElemento" => $elemento->getId(),
                                                "nombreModeloElemento"  => $elemento->getModeloElementoId()
                                                                                    ->getNombreModeloElemento(),
                                                "nombreElemento"        => $elemento->getNombreElemento(),
                                                "nombreTipoElemento"    => $elemento->getModeloElementoId()
                                                                                    ->getTipoElementoId()
                                                                                    ->getNombreTipoElemento(),
                                                "nombreMarcaElemento"   => $elemento->getModeloElementoId()
                                                                                    ->getMarcaElementoId()
                                                                                    ->getNombreMarcaElemento(),
                                                //...
                                                "idPunto"               => $idPunto,
                                                "login"                 => $objPunto->getLogin(),
                                                "loginAux"              => $objServicio->getLoginAux(),
                                                //...
                                                "nombreProducto"        => $nombreProductoPlan,
                                                //...
                                                "idServicio"            => $idServicio,
                                                "estado"                => $estadoServicio,
                                                //...
                                                "tipo"                  => $tipo,
                                                "yaFueSolicitada"       => $fueSolicitada,
                                                "marcaEquipo"           => $strMarcaEquipo
                                               );
                }
                return $arr_encontrados;
            }
            else
            {
                return array();
            }
        }
        else
        {
            return array();
        }
    }

    public function getElementosPorServicio($idServicio)
    {
        $sql = "SELECT
                    ELEMENTO.id ELEMENTO_CLIENTE_ID,
                    ELEMENTO.nombreElemento ELEMENTO_CLIENTE,
                    ELEMENTO.estado ELEMENTO_CLIENTE_ESTADO,
                    ELEMENTO_WIFI.id ELEMENTO_CLIENTE_WIFI_ID,
                    ELEMENTO_WIFI.nombreElemento ELEMENTO_CLIENTE_WIFI,
                    ELEMENTO_WIFI.estado ELEMENTO_CLIENTE_WIFI_ESTADO
                FROM
                    schemaBundle:InfoServicio SERVICIO,
                    schemaBundle:InfoServicioTecnico TECNICO,
                    schemaBundle:InfoElemento ELEMENTO,
                    schemaBundle:InfoInterfaceElemento PUERTO 
                    LEFT JOIN schemaBundle:InfoEnlace ENLACE WITH PUERTO = ENLACE.interfaceElementoIniId
                    LEFT JOIN schemaBundle:InfoInterfaceElemento PUERTO_WIFI WITH ENLACE.interfaceElementoFinId = PUERTO_WIFI
                    LEFT JOIN schemaBundle:InfoElemento ELEMENTO_WIFI WITH PUERTO_WIFI.elementoId = ELEMENTO_WIFI,
                    schemaBundle:InfoPunto PUNTO
                WHERE
                    SERVICIO = TECNICO.servicioId
                AND SERVICIO.estado = 'Activo'
                AND SERVICIO = '" . $idServicio . "'
                AND SERVICIO.puntoId = PUNTO
                AND TECNICO.interfaceElementoClienteId = PUERTO
                AND PUERTO.elementoId = ELEMENTO";

        $qb = $this->_em->createQuery($sql);        
        $query = $qb->getResult();

        return $query;
    }

    public function getIdsServiciosByEstadoAndIdsPuntos($estado, $idsPuntos)
    {
        $em = $this->_em;

        $query = $em->createQuery("
                select distinct s.id 
                from schemaBundle:InfoServicio s, 
                schemaBundle:InfoPlanCab pc, 
                schemaBundle:InfoPlanDet pd, 
                schemaBundle:AdmiProducto p
                where
                pc.id = s.planId
                and pd.planId = pc.id
                and p.id = pd.productoId
                and s.estado = :estado
                and p.nombreTecnico = 'INTERNET'
                and s.puntoId in(:idsPuntos)");

        $query->setParameter('estado', $estado);
        $query->setParameter('idsPuntos', $idsPuntos);

        $datos = $query->getResult('ScalarValueHydrator'); // traigo el redultado

        return $datos;
    }

    public function getIdsServicioByEstadoAndIdPunto($estado, $idsPunto)
    {
        $em = $this->_em;

        $query = $em->createQuery("
                select distinct s.id 
                from schemaBundle:InfoServicio s, 
                schemaBundle:InfoPlanCab pc, 
                schemaBundle:InfoPlanDet pd, 
                schemaBundle:AdmiProducto p
                where
                pc.id = s.planId
                and pd.planId = pc.id
                and p.id = pd.productoId               
                and p.nombreTecnico = 'INTERNET'
                and s.estado =  :estado
                and s.puntoId = :idsPuntos
              ");

        $query->setParameter('estado', $estado);
        $query->setParameter('idsPuntos', $idsPunto);

        $datos = $query->getResult(); // traigo el redultado

        return $datos;
    }

    /**
     * Funcion que devuelve el id del servicio del cual proviene el Servicio trasladado
     * Consideraciones: 
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 09-06-2014     
     * @param integer $intIdPunto      
     * @return integer
     */
    public function obtenerIdServicioProvieneTraslado($intIdPunto)
    {
        $em = $this->_em;
        $sql = $em->createQuery("select max(spc.id) from 
                schemaBundle:InfoServicio s,
                schemaBundle:InfoServicioProdCaract spc,
                schemaBundle:AdmiProductoCaracteristica apc,
                schemaBundle:AdmiCaracteristica carac
                where 
                s.puntoId=:intIdPunto and s.tipoOrden=:tipo_orden
                and s.id=spc.servicioId
                and spc.productoCaracterisiticaId=apc.id
                and apc.caracteristicaId=carac.id and carac.descripcionCaracteristica=:nombre_tecnico
                and spc.estado=:estado ");

        $sql->setParameter('intIdPunto', $intIdPunto);
        $sql->setParameter('nombre_tecnico', 'TRASLADO');
        $sql->setParameter('estado', 'Activo');
        $sql->setParameter('tipo_orden', 'T');
        $idServicioProvieneTraslado = $sql->getSingleScalarResult();
        if(!$idServicioProvieneTraslado)
        {
            $idServicioProvieneTraslado = null;
        }
        return $idServicioProvieneTraslado;
    }

    /**
     * Funcion que devuelve el punto cliente del cual proviene el servicio trasladado
     * Consideraciones: 
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 09-06-2014     
     * @param integer $intIdServicio      
     * @return integer
     */
    public function obtenerLoginProvieneTraslado($intIdServicio)
    {
        $em = $this->_em;
        $sql = $em->createQuery("
             select p
             from schemaBundle:InfoServicio s, schemaBundle:InfoPunto p
             where p.id=s.puntoId and s.id=:intIdServicio");

        $sql->setParameter('intIdServicio', $intIdServicio);
        $punto = $sql->getOneOrNullResult();

        return $punto;
    }

    /**
     * Funcion que retorna el numero de IPS utilizadas por Punto
     * Consideraciones: Se valida en base al campo nombre_tecnico que define si se trata de un Plan que posee un producto IP o si se trata de un producto IP adicional
     * se excluye solo los servicios en estado 'Rechazado','Rechazada','Cancelado','Anulado','Cancel','Eliminado','Reubicado','Trasladado'
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 23-05-2014    
     * @param integer $intIdPunto
     * @return integer
     */
    public function obtenerIpsUtilizadas($intIdPunto)
    {
        $ipsFijas = 0;
        $ipsFijasXPlan = 0;
        $em = $this->_em;
        //Saco Cantidad de IPs fijas en el Plan 
        $sql = $em->createQuery("select sum(s.cantidad*pd.cantidadDetalle) from schemaBundle:InfoServicio s  
                , schemaBundle:InfoPlanCab pc
                , schemaBundle:InfoPlanDet pd  
                , schemaBundle:AdmiProducto p  
                where 
                pc.id = s.planId
                and pd.planId = pc.id
                and p.id = pd.productoId                
                and s.estado not in (:estados)
                and p.nombreTecnico = :nombre_tecnico 
                and s.puntoId = :intIdPunto");
        $sql->setParameter('intIdPunto', $intIdPunto);
        $sql->setParameter('nombre_tecnico', 'IP');
        $sql->setParameter('estados', array('Rechazado', 'Rechazada', 'Cancelado', 'Anulado', 'Cancel', 'Eliminado', 'Reubicado', 'Trasladado'));
        try
        {
            $ipsFijasXPlan = $sql->getSingleScalarResult();
            //Si no posee Plan con Ips Fijas, busco solo Ips Fijas Adicionales 
            if(!$ipsFijasXPlan)
            {
                $ipsFijasXPlan = 0;
                $sql = $em->createQuery("select sum(s.cantidad) from schemaBundle:InfoServicio s
			, schemaBundle:AdmiProducto p  
			where p.id = s.productoId
			and s.estado not in (:estados)
                        and p.nombreTecnico = :nombre_tecnico 
			and s.puntoId = :intIdPunto");
                $sql->setParameter('intIdPunto', $intIdPunto);
                $sql->setParameter('nombre_tecnico', 'IP');
                $sql->setParameter('estados', array('Rechazado', 'Rechazada', 'Cancelado', 'Anulado', 'Cancel', 'Eliminado', 'Reubicado', 'Trasladado'));
                $ipsFijasXProducto = $sql->getSingleScalarResult();
                if(!$ipsFijasXProducto)
                {
                    $ipsFijas = 0;
                }
                else
                {
                    $ipsFijas = $ipsFijasXPlan + $ipsFijasXProducto;
                }
            }
            else
            {
                $sql = $em->createQuery("select sum(s.cantidad) from schemaBundle:InfoServicio s
			, schemaBundle:AdmiProducto p  
			where p.id = s.productoId
			and s.estado not in (:estados)
                        and p.nombreTecnico = :nombre_tecnico 
			and s.puntoId = :intIdPunto");
                $sql->setParameter('intIdPunto', $intIdPunto);
                $sql->setParameter('nombre_tecnico', 'IP');
                $sql->setParameter('estados', array('Rechazado', 'Rechazada', 'Cancelado', 'Anulado', 'Cancel', 'Eliminado', 'Reubicado', 'Trasladado'));
                $ipsFijasXProducto = $sql->getSingleScalarResult();
                if(!$ipsFijasXProducto)
                {
                    $ipsFijas = $ipsFijasXPlan;
                }
                else
                {
                    $ipsFijas = $ipsFijasXPlan + $ipsFijasXProducto;
                }
            }
        }
        catch(\Exception $e)
        {
            $error = $e->getMessage();
            $ipsFijas = 'Error en la consulta para obtener Ips Fijas Activas Utilizadas por punto.' . $error;
        }
        return $ipsFijas;
    }

    /**
     * getExisteIpWan
     * 
     * Funcion que verifica si existen o no IP FIJA WAN en el punto del cliente, incluido en el plan o como producto adicional
     * Consideraciones: Se valida en base al campo nombre_tecnico que define si se trata de un Plan que posee un producto IP ó
     * si se trata de un producto IP adicional se excluye solo los servicios en estado: 
     * 
     * 'Rechazado','Rechazada','Cancelado','Anulado','Cancel','Eliminado','Reubicado','Trasladado'
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 26-09-2020
     * @param array  [ 
     *                 intIdPunto            => Identificador del punto
     *                 strServiciosActivados => Bandera para indicar si se desean recuperar servicios Activos o In-Corte
     *               ]
     * @return array [
     *                 strStatus      => OK ó ERROR
     *                 strExisteIpWan => SI ó NO
     *               ]
     */
    public function getExisteIpWan($arrayParametros)
    {
        $intIpsFijas      = 0;
        $strExisteIpWan   = 'NO';
        $objEntityManager = $this->_em;
        $arrayRespuesta   = array(
                                    'strStatus'      => 'OK',
                                    'strMensaje'     => '',
                                    'strExisteIpWan' => '',
                                 );
        $strQuery         = "";
        $strFiltroEstados = " and s.estado not in (:estados) ";
        $arrayEstados     = array('Rechazado', 'Rechazada', 'Cancelado', 'Anulado', 'Cancel', 'Eliminado', 'Reubicado', 'Trasladado');
        try
        {
            if (isset($arrayParametros['strServiciosActivados']) && 
                !empty($arrayParametros['strServiciosActivados']) &&
                $arrayParametros['strServiciosActivados'] === "SI"
               )
            {
                $arrayEstados     = array('Activo', 'In-Corte');
                $strFiltroEstados = " and s.estado in (:estados) ";
            }
            $strQuery = "select sum(s.cantidad*pd.cantidadDetalle) from schemaBundle:InfoServicio s
                                    , schemaBundle:InfoPlanCab pc
                                    , schemaBundle:InfoPlanDet pd
                                    , schemaBundle:AdmiProducto p
                                    , schemaBundle:AdmiProductoCaracteristica ppc
                                    , schemaBundle:AdmiCaracteristica ca
                                    where
                                    pc.id = s.planId
                                    and pd.planId = pc.id
                                    and p.id = pd.productoId
                                    and ppc.productoId = p.id
                                    and ppc.caracteristicaId = ca.id " . 
                                    $strFiltroEstados  .
                                    "and p.nombreTecnico = :nombre_tecnico
                                    and ca.descripcionCaracteristica = :descripcion_caracteristica
                                    and s.puntoId = :intIdPunto";
            //Se obtiene cantidad de IPs Fija Wan en el Plan
            $objSql = $objEntityManager->createQuery($strQuery);
            $objSql->setParameter('intIdPunto', $arrayParametros['intIdPunto']);
            $objSql->setParameter('nombre_tecnico', 'IP');
            $objSql->setParameter('descripcion_caracteristica', 'IP WAN');
            $objSql->setParameter('estados', $arrayEstados);
            $intIpsFijas = $objSql->getSingleScalarResult();
            //Si no tiene Plan con Ips Fijas Wan, busco solo Ips Fijas Adicionales 
            if(!$intIpsFijas)
            {
                $intIpsFijas = 0;
                $strQuery = "select sum(s.cantidad) from schemaBundle:InfoServicio s
                                        , schemaBundle:AdmiProducto p  
                                        , schemaBundle:AdmiProductoCaracteristica ppc  
                                        , schemaBundle:AdmiCaracteristica ca 
                                        where p.id = s.productoId
                                        and ppc.productoId = p.id
                                        and ppc.caracteristicaId = ca.id " .
                                        $strFiltroEstados  .
                                        "and p.nombreTecnico = :nombre_tecnico 
                                        and ca.descripcionCaracteristica = :descripcion_caracteristica
                                        and s.puntoId = :intIdPunto";
                $objSql = $objEntityManager->createQuery($strQuery);
                $objSql->setParameter('intIdPunto', $arrayParametros['intIdPunto']);
                $objSql->setParameter('nombre_tecnico', 'IP');
                $objSql->setParameter('descripcion_caracteristica', 'IP WAN');
                $objSql->setParameter('estados', $arrayEstados);
                $intIpsFijas = $objSql->getSingleScalarResult();
                if(!$intIpsFijas)
                {
                    $intIpsFijas = 0;
                }
            }
            if ($intIpsFijas > 0)
            {
                $strExisteIpWan = 'SI';
            }
        }
        catch(\Exception $e)
        {
            $strError = $e->getMessage();
            $arrayRespuesta['strStatus']  = 'ERROR';
            $arrayRespuesta['strMensaje'] = 'Error en la consulta para obtener Ips Fijas Wan Utilizadas por punto.' . $strError;
        }
        $arrayRespuesta['strExisteIpWan'] = $strExisteIpWan;
        return $arrayRespuesta;
    }

    /**
     * Funcion que retorna el numero de IPS Maximas permitidas por Punto en base a la Caracteristica "IP_MAX_PERMITIDAS" definida
     * en el Plan contratado o a contratar por el cliente
     * Consideraciones: Si el Punto posee mas de un plan contratado con Producto IP se tomara el valor MAXIMO definido en la 
     * caracteristica de entre sus planes, se excluyen los estados 'Rechazado','Rechazada','Cancelado','Anulado','Cancel','Eliminado','Reubicado','Trasladado'
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 23-05-2014
     * @param integer $intIdPunto
     * @param integer $intIdPlan
     * @param integer $strTipo  
     * @see \telconet\schemaBundle\Entity\InfoServicio
     * @return integer
     */
    public function obtenerIpsMaxPermitidas($intIdPunto, $intIdPlan, $strTipo)
    {
        $ipsFijasMaxPermitidas = 0;
        $em = $this->_em;
        $sql = $em->createQuery("SELECT max(planCarac.valor) as valor     
                   from 
                   schemaBundle:InfoPlanCaracteristica planCarac 
                   ,schemaBundle:AdmiCaracteristica carac 
                   , schemaBundle:InfoServicio s
                   , schemaBundle:InfoPlanCab pc
                   , schemaBundle:InfoPlanDet pd  
                   , schemaBundle:AdmiProducto p         
                 where
                  pc.id = s.planId
                 and pd.planId = pc.id
                 and p.id = pd.productoId
                 and s.estado not in (:estados)
                 
                 and s.puntoId =:intIdPunto      
                 and s.planId=planCarac.planId
                 and carac.id = planCarac.caracteristicaId 
                 and carac.descripcionCaracteristica =:nomb_caract
                 and carac.tipo =:tipo_caract
                 and planCarac.estado =:estado
                 ");
        $sql->setParameter('intIdPunto', $intIdPunto);
        $sql->setParameter('nomb_caract', 'IP_MAX_PERMITIDAS');
        $sql->setParameter('tipo_caract', 'COMERCIAL');
        $sql->setParameter('estado', 'Activo');

        $sql->setParameter('estados', array('Rechazado', 'Rechazada', 'Cancelado', 'Anulado', 'Cancel', 'Eliminado', 'Reubicado', 'Trasladado'));

        try
        {
            $ipsFijasMaxPermitidas = $sql->getSingleScalarResult();
            //Si no posee Plan contratado con producto IP y si no tiene definido la caracteristica "IP_MAX_PERMITIDAS"
            if(!$ipsFijasMaxPermitidas && $strTipo == 'portafolio')
            {
                $sql = $em->createQuery("SELECT max(planCarac.valor) as valor     
                   from 
                   schemaBundle:InfoPlanCaracteristica planCarac 
                   ,schemaBundle:AdmiCaracteristica carac                    
                   , schemaBundle:InfoPlanCab pc
                   , schemaBundle:InfoPlanDet pd  
                   , schemaBundle:AdmiProducto p         
                 where
                 pc.id=:intIdPlan
                 and pd.planId = pc.id
                 and p.id = pd.productoId                 
                 
                 and pc.id=planCarac.planId
                 and carac.id = planCarac.caracteristicaId 
                 and carac.descripcionCaracteristica =:nomb_caract
                 and carac.tipo =:tipo_caract
                 and planCarac.estado =:estado    
                ");
                $sql->setParameter('intIdPlan', $intIdPlan);
                $sql->setParameter('nomb_caract', 'IP_MAX_PERMITIDAS');
                $sql->setParameter('tipo_caract', 'COMERCIAL');
                $sql->setParameter('estado', 'Activo');

                $ipsFijasMaxPermitidas = $sql->getSingleScalarResult();
                if(!$ipsFijasMaxPermitidas)
                {
                    $ipsFijasMaxPermitidas = 0;
                }
            }
            else
            {
                if(!$ipsFijasMaxPermitidas && $strTipo == 'catalogo')
                {
                    $ipsFijasMaxPermitidas = 0;
                }
            }
        }
        catch(\Exception $e)
        {
            $error = $e->getMessage();
            $ipsFijasMaxPermitidas = 'Error en la consulta para obtener Ips Maximas Permitidas.' . $error;
        }
        return $ipsFijasMaxPermitidas;
    }
    
    /**
     * Función creada para unificar las consulta de los diferentes parámetros usados para productos Small Business y TelcoHome por reestructuración 
     * de la programación de dichos productos, por tal motivo se elimina la función obtenerInfoProdPrincipalConIp
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 27-04-2020
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.1 16-09-2021  Si el producto es Internet Safe se obtendrá la característica de velocidad para el mismo
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.2 08-07-2022  Se retorna el nombre característica de la relación del servicio principal con la ip,
     *                          para productos IP INTERNET VPNoGPON.
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.2 09-03-2022  Se agrega validacion para las velocidades x producto
     * 
     * @param array $arrayParametros [ 
     *                                  "strValor1ParamsProdsTnGpon"    => valor1 de los parámetros para productos TN en la red Gpon
     *                                                                     PRODUCTOS_RELACIONADOS_INTERNET_IP => Relación Internet con Ip
     *                                                                     DESCRIPCION_CARACT_VELOCIDAD_X_NOMBRE_TECNICO => Relación nombre técnico
     *                                                                                                                      y característica de 
     *                                                                                                                      velocidad
     *                                                                     PRODUCTOS_VERIFICA_RAZON_SOCIAL => Ids de productos que deben realizar 
     *                                                                                                        verificación de razón social
     *                                                                     PRODUCTOS_VERIFICA_UM_TERCERIZADA => Ids de productos que deben realizar
     *                                                                                                          verificación de última milla 
     *                                                                                                          tercerizada
     *                                                                     PRODUCTOS_VERIFICA_COU_FIJA_SMB => Ids de productos que deben realizar
     *                                                                                                        verificación para Netvoice
     *                                                                     PRODUCTOS_VERIFICA_FACTIB_CC => Ids de productos que deben realizar
     *                                                                                                     verificación de factibilidad en Centro
     *                                                                                                     Comercial
     *                                  "strCodEmpresa"                 => código empresa en sesión
     *                                  "intIdProductoInternet"         => id del producto de Internet
     *                                  "intIdProductoIp"               => id del producto de Ip
     *                                ]
     * @return array $arrayResultado
     */
    public function obtenerParametrosProductosTnGpon($arrayParametros)
    {
        try
        {
            $strValor1ParamsProdsTn = $arrayParametros["strValor1ParamsProdsTnGpon"];
            $boolValidaDescripcion  = $arrayParametros["boolValidaDescripcion"];
            $strValor1Descripcion   = $arrayParametros["strValor1Descripcion"];
            
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery    = $this->_em->createNativeQuery(null, $objRsm);
            $strSelect      = " SELECT PARAM.NOMBRE_PARAMETRO ";
            $strFromJoin    = " FROM DB_GENERAL.ADMI_PARAMETRO_CAB PARAM
                                INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET PARAM_DET
                                ON PARAM_DET.PARAMETRO_ID = PARAM.ID_PARAMETRO ";
            $strWhere       = " WHERE PARAM.NOMBRE_PARAMETRO = :strParamsProdsTnGpon
                                AND PARAM.ESTADO = :strEstadoActivo
                                AND PARAM_DET.ESTADO = :strEstadoActivo
                                AND PARAM_DET.EMPRESA_COD = :strCodEmpresa ";
            
            $objNtvQuery->setParameter('strParamsProdsTnGpon', 'PARAMS_PRODS_TN_GPON');
            $objNtvQuery->setParameter('strEstadoActivo', 'Activo');
            $objNtvQuery->setParameter('strCodEmpresa', $arrayParametros["strCodEmpresa"]);
            
            if($boolValidaDescripcion)
            {
                $arrayParametros["strValor1ParamsProdsTnGpon"] = $strValor1Descripcion;
            }
                        
            if(isset($arrayParametros["strValor1ParamsProdsTnGpon"]) && !empty($arrayParametros["strValor1ParamsProdsTnGpon"]))
            {
                $strValor1ParamsProdsTnGpon = $arrayParametros["strValor1ParamsProdsTnGpon"];
            }
            else
            {
                $strValor1ParamsProdsTnGpon = "PRODUCTOS_RELACIONADOS_INTERNET_IP";
            }
            
            $strWhere .= " AND PARAM_DET.VALOR1 = :strValor1ParamsProdsTnGpon ";
            $objNtvQuery->setParameter('strValor1ParamsProdsTnGpon', $strValor1ParamsProdsTnGpon);
            
            if($strValor1ParamsProdsTnGpon === "PRODUCTOS_RELACIONADOS_INTERNET_IP")
            {
                $strSelect      .=  " , PROD_PRINCIPAL.ID_PRODUCTO AS ID_PROD_INTERNET, 
                                        PROD_PRINCIPAL.NOMBRE_TECNICO AS NOMBRE_TECNICO_PROD_INTERNET,
                                        PROD_PRINCIPAL.DESCRIPCION_PRODUCTO AS DESCRIPCION_PROD_INTERNET,
                                        PROD_IP.ID_PRODUCTO AS ID_PROD_IP, 
                                        PROD_IP.NOMBRE_TECNICO AS NOMBRE_TECNICO_PROD_IP,
                                        PROD_IP.DESCRIPCION_PRODUCTO AS DESCRIPCION_PROD_IP,
                                        PARAM_DET.VALOR7 AS DESCRIPCION_CARACT_REL_IP,
                                        COALESCE(TO_NUMBER(REGEXP_SUBSTR(PARAM_DET.VALOR4,'^\d+')),0) AS NUM_IPS_MAX_PERMITIDAS ";
                $strFromJoin    .=  "   INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PROD_PRINCIPAL
                                        ON PROD_PRINCIPAL.ID_PRODUCTO = COALESCE(TO_NUMBER(REGEXP_SUBSTR(PARAM_DET.VALOR2,'^\d+')),0) 
                                        INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PROD_IP
                                        ON PROD_IP.ID_PRODUCTO = COALESCE(TO_NUMBER(REGEXP_SUBSTR(PARAM_DET.VALOR3,'^\d+')),0) ";

                if(isset($arrayParametros["intIdProductoInternet"]) && !empty($arrayParametros["intIdProductoInternet"]))
                {
                    $strWhere .= " AND PROD_PRINCIPAL.ID_PRODUCTO = :intIdProductoInt ";
                    $objNtvQuery->setParameter('intIdProductoInt', $arrayParametros["intIdProductoInternet"]);
                }

                if(isset($arrayParametros["intIdProductoIp"]) && !empty($arrayParametros["intIdProductoIp"]))
                {
                    $strWhere .= " AND PROD_IP.ID_PRODUCTO = :intIdProductoIp ";
                    $objNtvQuery->setParameter('intIdProductoIp', $arrayParametros["intIdProductoIp"]);
                }
                
                $objRsm->addScalarResult('ID_PROD_INTERNET', 'intIdProdInternet', 'integer');
                $objRsm->addScalarResult('NOMBRE_TECNICO_PROD_INTERNET', 'strNombreTecnicoProdInternet', 'string');
                $objRsm->addScalarResult('DESCRIPCION_PROD_INTERNET', 'strDescripcionProdInternet', 'string');
                $objRsm->addScalarResult('ID_PROD_IP', 'intIdProdIp', 'integer');
                $objRsm->addScalarResult('NOMBRE_TECNICO_PROD_IP', 'strNombreTecnicoProdIp', 'string');
                $objRsm->addScalarResult('DESCRIPCION_PROD_IP', 'strDescripcionProdIp', 'string');
                $objRsm->addScalarResult('NUM_IPS_MAX_PERMITIDAS', 'intNumIpsMaxPermitidas', 'integer'); 
                $objRsm->addScalarResult('DESCRIPCION_CARACT_REL_IP', 'strCaractRelProdIp', 'string');
            }
            
            if($strValor1ParamsProdsTnGpon === $strValor1ParamsProdsTn || $boolValidaDescripcion)
            {
                $strSelect  .=  " , PARAM_DET.VALOR3 AS DESCRIPCION_CARACT_VELOCIDAD ";

                if(isset($arrayParametros["strValor2NombreTecnico"]) && !empty($arrayParametros["strValor2NombreTecnico"]))
                {
                    $strWhere .= " AND PARAM_DET.VALOR2 = :strValor2NombreTecnico ";
                    $objNtvQuery->setParameter('strValor2NombreTecnico', $arrayParametros["strValor2NombreTecnico"]);
                }
                if(isset($arrayParametros["strValor3DescripcionCaract"]) && !empty($arrayParametros["strValor3DescripcionCaract"]))
                {
                    $strWhere .= " AND PARAM_DET.VALOR3 = :strValor3DescripcionCaract ";
                    $objNtvQuery->setParameter('strValor3DescripcionCaract', $arrayParametros["strValor3DescripcionCaract"]);
                }
                if(isset($arrayParametros["strValor4EsProductoIp"]) && !empty($arrayParametros["strValor4EsProductoIp"]))
                {
                    $strWhere .= " AND PARAM_DET.VALOR4 = :strValor4EsProductoIp ";
                    $objNtvQuery->setParameter('strValor4EsProductoIp', $arrayParametros["strValor4EsProductoIp"]);
                }
                $objRsm->addScalarResult('DESCRIPCION_CARACT_VELOCIDAD', 'strDescripcionCaractVelocidad', 'string');
            }
                        
            $objRsm->addScalarResult('NOMBRE_PARAMETRO', 'strNombreParametro', 'string');
            
            $strQuery = $strSelect . $strFromJoin . $strWhere;
            $objNtvQuery->setSQL($strQuery);            
            $arrayResultado = $objNtvQuery->getArrayResult();
        }
        catch (\Exception $e) 
        {
            error_log("Ha ocurrido un error al realizar la consulta ".$e->getMessage());
        }
        return $arrayResultado;
    }
    
    /**
     * Función que retorna la información del producto principal con su producto IP y el número máximo de IPs permitidas por producto 
     * principal
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 23-04-2018
     * Costo = 12
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 08-03-2019 Se modifica la consulta para que se pueda obtener el producto preferencial sin que sea necesario que el producto 
     *                          asociado se encuentre en estado Activo, debido a que no se comercializará productos ips TelcoHome como se había
     *                          definido inicialmente
     *
     * Costo = 32
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.2 05-08-2019 Se adiciona una subconsulta para identificar los diferentes SMB.
     *
     * @param array $arrayParametros [ "strCodEmpresa"      => código empresa en sesión
     *                                  "intIdProducto"      => id del producto que se desea verificar,
     *                                  "strObtieneCaract"   => si se desea filtrar para obtener la característica asociada
     *                               ]
     * @return array $arrayResultado [ 
     *                                  "intIdProductoPref"             => id del producto preferencial
     *                                  "strNombreTecnicoProdPref"      => nombre técnico del producto preferencial
     *                                  "strDescripcionProdPref"        => descripción del producto preferencial
     *                                  "intIdProductoAsoc"             => id del producto asociado
     *                                  "strNombreTecnicoProdAsoc"      => nombre técnico del producto asociado
     *                                  "strDescripcionProdAsoc"        => descripción del producto asociado
     *                                  "strNombreCaracteristica"       => nombre de la característica
     *                                ]
     */
    public function obtenerInfoMapeoProdPrefYProdsAsociados($arrayParametros)
    {
        $strCodEmpresa  = $arrayParametros["strCodEmpresa"];
        try
        {
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery    = $this->_em->createNativeQuery(null, $objRsm);
            $strSMBQueryIni = "SELECT IP_PERMITIDAS.*
                                        FROM
                                       (";
            $strQuery       = " SELECT PROD_PRINCIPAL.ID_PRODUCTO AS ID_PRODUCTO_PREF, PROD_PRINCIPAL.NOMBRE_TECNICO AS NOMBRE_PROD_PREF,
                                PROD_PRINCIPAL.DESCRIPCION_PRODUCTO AS DESCRIPCION_PROD_PREF,
                                NVL(PROD_ASOC.ID_PRODUCTO, 0) AS ID_PRODUCTO_ASOC, NVL(PROD_ASOC.NOMBRE_TECNICO, '') AS NOMBRE_PROD_ASOC,
                                NVL(PROD_ASOC.DESCRIPCION_PRODUCTO, '') AS DESCRIPCION_PROD_ASOC,
                                PARAM_DET.VALOR3 AS NOMBRE_CARACTERISTICA,
                                PARAM_DET.VALOR4 AS GESTIONA_CARACTS 
                                FROM DB_GENERAL.ADMI_PARAMETRO_CAB PARAM
                                INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET PARAM_DET
                                ON PARAM_DET.PARAMETRO_ID = PARAM.ID_PARAMETRO
                                INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PROD_PRINCIPAL
                                ON PROD_PRINCIPAL.NOMBRE_TECNICO = PARAM_DET.VALOR1
                                LEFT JOIN DB_COMERCIAL.ADMI_PRODUCTO PROD_ASOC
                                ON (PROD_ASOC.NOMBRE_TECNICO = PARAM_DET.VALOR2 AND PROD_ASOC.ESTADO = :strEstadoActivo 
                                    AND PROD_ASOC.EMPRESA_COD = :strCodEmpresa) 
                                WHERE PARAM.NOMBRE_PARAMETRO = :strParam
                                AND PARAM.ESTADO = :strEstadoActivo
                                AND PARAM_DET.ESTADO = :strEstadoActivo
                                AND PARAM_DET.EMPRESA_COD = :strCodEmpresa 
                                AND PROD_PRINCIPAL.ESTADO = :strEstadoActivo AND PROD_PRINCIPAL.EMPRESA_COD = :strCodEmpresa ";

            if(isset($arrayParametros["intIdProducto"]) && !empty($arrayParametros["intIdProducto"]))
            {
                $strQuery .= " AND (PROD_PRINCIPAL.ID_PRODUCTO = :intIdProducto OR PROD_ASOC.ID_PRODUCTO = :intIdProducto) ";
                $objNtvQuery->setParameter('intIdProducto', $arrayParametros["intIdProducto"]);
            }
            else if(isset($arrayParametros["strNombreTecnicoProducto"]) && !empty($arrayParametros["strNombreTecnicoProducto"]))
            {
                $strQuery .= " AND (PROD_PRINCIPAL.NOMBRE_TECNICO = :strNombreTecnicoProducto"
                          . " OR PROD_ASOC.NOMBRE_TECNICO = :strNombreTecnicoProducto) ";
                $objNtvQuery->setParameter('strNombreTecnicoProducto', $arrayParametros["strNombreTecnicoProducto"]);
            }
            else
            {
                throw new \Exception("No se ha enviado información del producto a buscar!");
            }

            if(isset($arrayParametros["strObtieneCaract"]) && !empty($arrayParametros["strObtieneCaract"]))
            {
                $strQuery .= " AND PARAM_DET.VALOR5 = :strObtieneCaract ";
                $objNtvQuery->setParameter('strObtieneCaract', $arrayParametros["strObtieneCaract"]);
            }

            if(isset($arrayParametros["intIdProducto"]) && !empty($arrayParametros["intIdProducto"]))
            {
                $strSMBQueryFinal  = ") IP_PERMITIDAS,
                                        (SELECT PARAM_DET_RELA.VALOR1, PARAM_DET_RELA.VALOR2,
                                                PARAM_DET_RELA.VALOR3, PARAM_DET_RELA.VALOR4
                                         FROM DB_GENERAL.ADMI_PARAMETRO_CAB PARAM_RELA,
                                         DB_GENERAL.ADMI_PARAMETRO_DET PARAM_DET_RELA
                                         WHERE PARAM_RELA.ID_PARAMETRO                = PARAM_DET_RELA.PARAMETRO_ID
                                         AND PARAM_RELA.NOMBRE_PARAMETRO              = :strParametroRelacionProductoIsb
                                         AND (PARAM_DET_RELA.VALOR3                    = :intIdProductoAsociado
                                         OR   PARAM_DET_RELA.VALOR4                    = :intIdProductoAsociado) ) PRODUCTO_ASOCIADO
                                      WHERE PRODUCTO_ASOCIADO.VALOR3 = IP_PERMITIDAS.ID_PRODUCTO_PREF
                                      AND PRODUCTO_ASOCIADO.VALOR4 = IP_PERMITIDAS.ID_PRODUCTO_ASOC";
                $objNtvQuery->setParameter('strParametroRelacionProductoIsb', 'PRODUCTO_RELACIONADO_SMB');
                $objNtvQuery->setParameter('intIdProductoAsociado', $arrayParametros["intIdProducto"]);
                $strQuery = $strSMBQueryIni.$strQuery.$strSMBQueryFinal;
            }
            else if(isset($arrayParametros["strNombreTecnicoProducto"]) && !empty($arrayParametros["strNombreTecnicoProducto"]))
            {
                $strSMBQueryFinal  = ") IP_PERMITIDAS,
                                        (SELECT PARAM_DET_RELA.VALOR1, PARAM_DET_RELA.VALOR2,
                                                PARAM_DET_RELA.VALOR3, PARAM_DET_RELA.VALOR4
                                         FROM DB_GENERAL.ADMI_PARAMETRO_CAB PARAM_RELA,
                                         DB_GENERAL.ADMI_PARAMETRO_DET PARAM_DET_RELA
                                         WHERE PARAM_RELA.ID_PARAMETRO                = PARAM_DET_RELA.PARAMETRO_ID
                                         AND PARAM_RELA.NOMBRE_PARAMETRO              = :strParametroRelacionProductoIsb
                                         AND (PARAM_DET_RELA.VALOR5                   = :strNombreTecnicoProducto
                                         OR   PARAM_DET_RELA.VALOR6                   = :strNombreTecnicoProducto) ) PRODUCTO_ASOCIADO
                                      WHERE PRODUCTO_ASOCIADO.VALOR3 = IP_PERMITIDAS.ID_PRODUCTO_PREF
                                      AND PRODUCTO_ASOCIADO.VALOR4 = IP_PERMITIDAS.ID_PRODUCTO_ASOC";

                $objNtvQuery->setParameter('strParametroRelacionProductoIsb', 'PRODUCTO_RELACIONADO_SMB');
                $objNtvQuery->setParameter('strNombreTecnicoProducto', $arrayParametros["strNombreTecnicoProducto"]);
                $strQuery = $strSMBQueryIni.$strQuery.$strSMBQueryFinal;
            }
            $objNtvQuery->setParameter('strParam', 'PROD_PREFERENCIAL_Y_PRODS_ASOCIADOS');
            $objNtvQuery->setParameter('strEstadoActivo', 'Activo');
            $objNtvQuery->setParameter('strCodEmpresa', $strCodEmpresa);

            $objRsm->addScalarResult('ID_PRODUCTO_PREF', 'intIdProductoPref', 'integer');
            $objRsm->addScalarResult('NOMBRE_PROD_PREF', 'strNombreTecnicoProdPref', 'string');
            $objRsm->addScalarResult('DESCRIPCION_PROD_PREF', 'strDescripcionProdPref', 'string');
            $objRsm->addScalarResult('ID_PRODUCTO_ASOC', 'intIdProductoAsoc', 'integer');
            $objRsm->addScalarResult('NOMBRE_PROD_ASOC', 'strNombreTecnicoProdAsoc', 'string');
            $objRsm->addScalarResult('DESCRIPCION_PROD_ASOC', 'strDescripcionProdAsoc', 'string');
            $objRsm->addScalarResult('NOMBRE_CARACTERISTICA', 'strNombreCaracteristica', 'string');
            $objRsm->addScalarResult('GESTIONA_CARACTS', 'strGestionaCaracts', 'string');
            
            $objNtvQuery->setSQL($strQuery);            
            $arrayResultado = $objNtvQuery->getArrayResult();
        }
        catch (\Exception $e) 
        {
            error_log("Ha ocurrido un error al realizar la consulta ".$e->getMessage());
        }
        return $arrayResultado;
    }
    
    /**
     * Función que verifica los servicios actuales para validar si se puede o no agregar un producto IP adicional 
     * Se excluyen servicios principales con los estados 'Rechazado','Rechazada','Cancelado','Anulado','Cancel','Eliminado','Reubicado','Trasladado'
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 20-04-2018
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 06-02-2019 Se envía el parámetro del nombre técnico del producto de internet para buscar correctamente la característica 
     *                          de velocidad para servicios TELCOHOME
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.2 12-01-2022 Se consulta si el producto requiere la caracteristica VELOCIDAD_INTERNET_SAFE
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 08-07-2022 Se valida que el servicio principal INTERNET VPNoGPON no posea una ip relacionada.
     * 
     * @author Steven Ruano <sruano@telconet.ec>
     * @version 1.4 31-01-2023 Se permite obtener mas de una velocidad de INTERNET SMALL BUSINESS para cargarla
     *                         combobox de VELOCIDAD.
     * 
     * @param array $arrayParametros [  "intIdPunto"                    => id del punto
     *                                  "strCodEmpresa"                 => código empresa en sesión
     *                                  "intIdProducto"                 => id del producto que se desea agregar
     *                                  "intIdProductoPrincipal"        => id del producto principal
     *                                  "strDescripcionProdPrincipal"   => descripción del producto principal
     *                                  "intIdProductoIp"               => id del producto IP
     *                                  "strDescripcionProdIp"          => descripción del producto IP,
     *                                  "strNombreTecnicoProdPrincipal" => nombre técnico del servicio de Internet
     *                               ]
     * @return $arrayIpMaxPermitidas [  "strStatus"     => status de la consulta
     *                                  "strMensaje"    => mensaje de error  ]
     */
    public function validarIpsMaxPermitidasProducto($arrayParametros)
    {
        $intIdPunto                     = $arrayParametros["intIdPunto"];
        $strCodEmpresa                  = $arrayParametros["strCodEmpresa"];
        $intIdProducto                  = $arrayParametros["intIdProducto"];
        $intIdProductoPrincipal         = $arrayParametros["intIdProductoPrincipal"];
        $strDescripcionProdPrincipal    = $arrayParametros["strDescripcionProdPrincipal"];
        $intIdProductoIp                = $arrayParametros["intIdProductoIp"];
        $strDescripcionProdIp           = $arrayParametros["strDescripcionProdIp"];
        $boolVelInternetSafe            = false;
        
        $arrayParamsVelocidad  = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->getOne('LISTA_VELOCIDAD_PRODUCTO_ISB',
                                                                                 '',
                                                                                 '',
                                                                                 '',
                                                                                 $strDescripcionProdPrincipal,
                                                                                 '',
                                                                                 $arrayParametros['strNombreTecnicoProdPrincipal'],
                                                                                 '',
                                                                                 '',
                                                                                 $strCodEmpresa);
        if(isset($arrayParamsVelocidad) && !empty($arrayParamsVelocidad))
        {
            $boolVelInternetSafe = true;
        }
                
        if(isset($arrayParametros['strNombreTecnicoProdPrincipal']) && !empty($arrayParametros['strNombreTecnicoProdPrincipal'])
            && $arrayParametros['strNombreTecnicoProdPrincipal'] === "TELCOHOME")
        {
            $strDescripCaractVelocidad = "VELOCIDAD_TELCOHOME";
        }
        elseif($boolVelInternetSafe)
        {
            $strDescripCaractVelocidad = $arrayParamsVelocidad["valor4"];
        }
        else
        {
            $strDescripCaractVelocidad = "VELOCIDAD";
        }
        
        $arrayServiciosNotIn    = array('Rechazado', 'Rechazada', 'Cancelado', 'Anulado', 'Cancel', 'Eliminado', 'Reubicado', 'Trasladado');
        $strMensaje             = "";
        $strStatus              = "";
        
        $objRsm             = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery        = $this->_em->createNativeQuery(null, $objRsm);
        $strQuery           = " SELECT DISTINCT SERVICIO.ID_SERVICIO, PROD_PRINCIPAL.NOMBRE_TECNICO,
                                TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:strDescripCaracteristica) AS VELOCIDAD_SERVICIO 
                                FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO
                                INNER JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
                                ON PUNTO.ID_PUNTO = SERVICIO.PUNTO_ID 
                                INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PROD_PRINCIPAL
                                ON PROD_PRINCIPAL.ID_PRODUCTO = SERVICIO.PRODUCTO_ID 
                                WHERE SERVICIO.ESTADO NOT IN (:arrayEstadosServNotIn)
                                AND PUNTO.ID_PUNTO = :intIdPunto 
                                AND PROD_PRINCIPAL.ID_PRODUCTO = :intIdProductoPrincipal 
                                AND PROD_PRINCIPAL.ESTADO = :strEstadoActivo 
                                AND PROD_PRINCIPAL.EMPRESA_COD = :strCodEmpresa ";
        $objNtvQuery->setParameter('strDescripCaracteristica', $strDescripCaractVelocidad);
        $objNtvQuery->setParameter('strEstadoActivo', 'Activo');
        $objNtvQuery->setParameter('strCodEmpresa', $strCodEmpresa);
        $objNtvQuery->setParameter('arrayEstadosServNotIn', array_values($arrayServiciosNotIn));
        $objNtvQuery->setParameter('intIdPunto', $intIdPunto);
        $objNtvQuery->setParameter('intIdProductoPrincipal', $intIdProductoPrincipal);

        if(isset($arrayParametros["strCaractRelProdPrincipal"]) && !empty($arrayParametros["strCaractRelProdPrincipal"]))
        {
            $strQuery .= " AND NOT EXISTS (
                            SELECT 1 FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT CAR
                            INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PC
                            ON PC.ID_PRODUCTO_CARACTERISITICA = CAR.PRODUCTO_CARACTERISITICA_ID
                            INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PRO ON PRO.ID_PRODUCTO = PC.PRODUCTO_ID
                            INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA C ON C.ID_CARACTERISTICA = PC.CARACTERISTICA_ID
                            INNER JOIN DB_COMERCIAL.INFO_SERVICIO SER ON SER.ID_SERVICIO = CAR.SERVICIO_ID
                            WHERE C.DESCRIPCION_CARACTERISTICA = :strCaractRelProdPrincipal
                            AND PRO.DESCRIPCION_PRODUCTO = :strDescripcionProdIp
                            AND CAR.VALOR = SERVICIO.ID_SERVICIO
                            AND SER.ESTADO NOT IN (:arrayEstadosServNotIn)
                            AND CAR.ESTADO = :strEstadoActivo
                          ) ";
            $objNtvQuery->setParameter('strDescripcionProdIp', $strDescripcionProdIp);
            $objNtvQuery->setParameter('strCaractRelProdPrincipal', $arrayParametros["strCaractRelProdPrincipal"]);
        }

        $objRsm->addScalarResult('ID_SERVICIO', 'intIdServicio', 'integer');
        $objRsm->addScalarResult('NOMBRE_TECNICO', 'strNombreTecnico', 'string');
        $objRsm->addScalarResult('VELOCIDAD_SERVICIO', 'strVelocidadServicio', 'string');
        try
        {
            $objNtvQuery->setSQL($strQuery);
            $arrayServicioValidarIpsMax = $objNtvQuery->getResult();
            /**
             * Se verifica que no exista otro servicio Internet Small Business disponible para agregar el servicio de IP adicional
             */
            if(isset($arrayServicioValidarIpsMax) && !empty($arrayServicioValidarIpsMax) 
                && intVal($intIdProducto) === intVal($intIdProductoPrincipal) )
            {
                $strMensaje = "El punto sólo puede contener un servicio principal ".$strDescripcionProdPrincipal;
                $strStatus  = "ERROR";
            }
            //Se verifica que el servicio principal tenga la característica de la velocidad
            else if(isset($arrayServicioValidarIpsMax) && !empty($arrayServicioValidarIpsMax) 
                && empty($arrayServicioValidarIpsMax) )
            {
                $strMensaje = "El servicio principal ".$strDescripcionProdPrincipal. " no posee la característica ".$strDescripCaractVelocidad;
                $strStatus  = "ERROR";
            }
            //Se verifica que el producto que se desea agregar requiere un servicio principal
            else if(empty($arrayServicioValidarIpsMax) && intVal($intIdProducto) === intVal($intIdProductoIp) )
            {
                $strMensaje = "El servicio ".$strDescripcionProdIp." requiere que se agregue previamente un servicio ".$strDescripcionProdPrincipal;
                $strStatus  = "ERROR";
            }
            else
            {
                $strStatus = "OK";
            }
        } 
        catch (\Exception $e) 
        {
            $strStatus  = "ERROR";
            $strMensaje = "Ha ocurrido un error al obtener las ips máximas para el servicio que se desea agregar";
            error_log("Error en la consulta para obtener Ips Maximas Permitidas por producto ".$e->getMessage());
        }
        $arrayValidarIpMaxPermitidas["strStatus"]                   = $strStatus;
        $arrayValidarIpMaxPermitidas["strMensaje"]                  = $strMensaje;
        $arrayValidarIpMaxPermitidas["arrayServicioValidarIpsMax"]  = $arrayServicioValidarIpsMax;
        return $arrayValidarIpMaxPermitidas;
    }
    
    /**
     * Función que retorna el número de IPs utilizadas de un producto principal
     * Se excluyen los servicios de IPs adicionales con estados 'Rechazado','Rechazada','Cancelado','Anulado','Cancel','Eliminado',
     * 'Reubicado','Trasladado'
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 20-04-2018
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 08-07-2022 Se recibe el id del servicio principal para productos IP INTERNET VPNoGPON,
     *                         para validar la cantidad de ip por ese servicio.
     * 
     * @param array $arrayParametros [  "intIdPunto"    => id del punto
     *                                  "strCodEmpresa" => código empresa en sesión
     *                                  "intIdProducto" => id del producto IP
     *                               ]
     * @return integer $intNumIpsUtilizadas
     */
    public function obtenerIpsUtilizadasProdPrincipal($arrayParametros)
    {
        $intIdPunto             = $arrayParametros["intIdPunto"];
        $strCodEmpresa          = $arrayParametros["strCodEmpresa"];
        $intIdProductoIp        = $arrayParametros["intIdProductoIp"];
        $intIdServicio          = $arrayParametros["intIdServicio"];
        $arrayServiciosNotIn    = array('Rechazado', 'Rechazada', 'Cancelado', 'Anulado', 'Cancel', 'Eliminado', 'Reubicado', 'Trasladado');
        $objRsm                 = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery            = $this->_em->createNativeQuery(null, $objRsm);
        $strQuery               = " SELECT SUM(SERVICIO.CANTIDAD) AS NUM_SERVICIOS
                                    FROM DB_COMERCIAL.INFO_SERVICIO SERVICIO
                                    INNER JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
                                    ON PUNTO.ID_PUNTO = SERVICIO.PUNTO_ID 
                                    INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO PROD  
                                    ON PROD.ID_PRODUCTO = SERVICIO.PRODUCTO_ID 
                                    WHERE SERVICIO.ESTADO NOT IN (:arrayEstadosServNotIn)
                                    AND PUNTO.ID_PUNTO = :intIdPunto 
                                    AND PROD.ID_PRODUCTO = :intIdProducto 
                                    AND PROD.ESTADO = :strEstadoActivo AND PROD.EMPRESA_COD = :strCodEmpresa ";
        if(isset($intIdServicio) && !empty($intIdServicio))
        {
            $strQuery .= " AND SERVICIO.ID_SERVICIO = :intIdServicio ";
            $objNtvQuery->setParameter('intIdServicio', $intIdServicio);
        }
        $objNtvQuery->setParameter('strEstadoActivo', 'Activo');
        $objNtvQuery->setParameter('strCodEmpresa', $strCodEmpresa);
        $objNtvQuery->setParameter('arrayEstadosServNotIn', array_values($arrayServiciosNotIn));
        $objNtvQuery->setParameter('intIdPunto', $intIdPunto);
        $objNtvQuery->setParameter('intIdProducto', $intIdProductoIp);
        
        $objRsm->addScalarResult('NUM_SERVICIOS', 'numServicios', 'integer');
        try
        {
            $objNtvQuery->setSQL($strQuery);
            $intNumIpsUtilizadas  = $objNtvQuery->getSingleScalarResult();
            if(!$intNumIpsUtilizadas)
            {
                $intNumIpsUtilizadas = 0;
            }
        } 
        catch (\Exception $e) 
        {
            $intNumIpsUtilizadas    = 0;
            error_log("Error en la consulta para obtener ips Utilizadas por producto ".$e->getMessage());
        }
        return $intNumIpsUtilizadas;
    }
    
    public function getIdsServicioPorIdPunto($idsPunto)
    {
        $em = $this->_em;


        $query = $em->createQuery("
                select s
                from schemaBundle:InfoServicio s, 
                schemaBundle:InfoPlanCab pc, 
                schemaBundle:InfoPlanDet pd, 
                schemaBundle:AdmiProducto p
                where
                pc.id = s.planId
                and pd.planId = pc.id
                and p.id = pd.productoId               
                and p.nombreTecnico = 'INTERNET'
                and s.puntoId = :idsPuntos
                and s.estado not in ('Cancel','Anulado','Eliminado','Trasladado','Reubicado','Rechazada')
              
                
                ");


        $query->setParameter('idsPuntos', $idsPunto);

        $datos = $query->getResult(); // traigo el redultado               

        return $datos;
    }

    /**
     * Funcion para obtener la Frecuencia definida en el Plan
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 23-05-2014
     * @param integer $intPlanId     
     * @see \telconet\schemaBundle\Entity\InfoServicio
     * @return integer
     */
    public function obtenerFrecuencia($intPlanId)
    {
        $em = $this->_em;
        $sql = $em->createQuery("SELECT max(planCarac.valor) as valor     
                   from 
                   schemaBundle:InfoPlanCaracteristica planCarac 
                   ,schemaBundle:AdmiCaracteristica carac                    
                   , schemaBundle:InfoPlanCab pc                   
                 where
                 pc.id=:intPlanId                 
                 and pc.id=planCarac.planId
                 and carac.id = planCarac.caracteristicaId 
                 and carac.descripcionCaracteristica =:nomb_caract
                 and carac.tipo =:tipo_caract
                 and planCarac.estado =:estado
                 ");

        $sql->setParameter('intPlanId', $intPlanId);
        $sql->setParameter('nomb_caract', 'FRECUENCIA');
        $sql->setParameter('tipo_caract', 'COMERCIAL');
        $sql->setParameter('estado', 'Activo');
        $frecuencia = $sql->getSingleScalarResult();
        if(!$frecuencia)
        {
            $frecuencia = null;
        }
        return $frecuencia;
    }

    /**
     * Funcion que devuelve si el plan o producto posee o es un producto de tipo IP
     * Consideraciones: Se valida en base al campo nombre_tecnico que define si se trata de un Plan que posee un producto IP o si se trata de un producto IP adicional
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 23-05-2014
     * @version 2.0 01-04-2015
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.1 21-06-2019 Se agrega opción para obtener los objetos de los productos Small Business o Ip Small Business
     * 
     * @param integer $intIdProducto
     * @param integer $intIdPlan
     * @param integer $strTipo     
     * @return object
     */
    public function obtenerProductoIp($intIdPlan, $intIdProducto, $strTipo)
    {
        $em = $this->_em;
        if($strTipo == 'asignacionRed')
        {
            $sql = $em->createQuery("SELECT p  
                   from                                       
                    schemaBundle:InfoPlanCab pc
                   , schemaBundle:InfoPlanDet pd  
                   , schemaBundle:AdmiProducto p         
                 where
                 pc.id=:intIdPlan
                 and pd.planId = pc.id
                 and p.id = pd.productoId                 
                 and p.nombreTecnico =:nombre_tecnico  
                 and pd.estado =pc.estado
                 ");
            $sql->setParameter('intIdPlan', $intIdPlan);
            $sql->setParameter('nombre_tecnico', 'IP');
            $productoIP = $sql->getResult();
            if(!$productoIP)
            {
                $productoIP = 0;
            }
        }
        elseif($strTipo == 'portafolio')
        {
            $sql = $em->createQuery("SELECT p  
                   from                                       
                    schemaBundle:InfoPlanCab pc
                   , schemaBundle:InfoPlanDet pd  
                   , schemaBundle:AdmiProducto p         
                 where
                 pc.id=:intIdPlan
                 and pd.planId = pc.id
                 and p.id = pd.productoId                 
                 and p.nombreTecnico =:nombre_tecnico  
                 and pd.estado =:estado
                 ");
            $sql->setParameter('intIdPlan', $intIdPlan);
            $sql->setParameter('nombre_tecnico', 'IP');
            $sql->setParameter('estado', 'Activo');
            $productoIP = $sql->getOneOrNullResult();
            if(!$productoIP)
            {
                $productoIP = 0;
            }
        }
        elseif($strTipo == 'catalogoIps')
        {
            $strEsPlaEdicionLtda = 'NO';
            if ($intIdPlan)
            {
                $entityPlanCab      = $em->getRepository('schemaBundle:InfoPlanCab')->find($intIdPlan);
                $admiCaracteristica = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                         ->findOneBy(array("descripcionCaracteristica" => "EDICION LIMITADA", "estado" => "Activo"));
                $infoPlanCaracteristica = $em->getRepository('schemaBundle:InfoPlanCaracteristica')
                                             ->findOneBy(
                                                         array(
                                                               "planId"           => $intIdPlan,
                                                               "caracteristicaId" => $admiCaracteristica->getId(),
                                                               "valor"            => "SI",
                                                               "estado"           => $entityPlanCab->getEstado()
                                                              )
                                                        );
                if($infoPlanCaracteristica)
                {
                    $strEsPlaEdicionLtda = 'SI';
                    $productoIP          = 0;
                }
            }
            if ($strEsPlaEdicionLtda == "NO")
            {
                $sql = $em->createQuery("SELECT p  
                       from                                                           
                        schemaBundle:AdmiProducto p         
                     where                
                      p.id =:intIdProducto                
                     and p.nombreTecnico =:nombre_tecnico                                    
                     ");
                $sql->setParameter('intIdProducto', $intIdProducto);
                $sql->setParameter('nombre_tecnico', 'IP');
                $productoIP = $sql->getOneOrNullResult();
                if(!$productoIP)
                {
                    $productoIP = 0;
                }
            }
        }
        elseif($strTipo == 'catalogoIpsTn')
        {
            $objProductoConIpTn = $this->_em->getRepository('schemaBundle:AdmiProducto')->find($intIdProducto);
            if(is_object($objProductoConIpTn) 
                && ($objProductoConIpTn->getNombreTecnico() === "INTERNET SMALL BUSINESS" || $objProductoConIpTn->getNombreTecnico() === "IPSB"))
            {
                $productoIP = $objProductoConIpTn;
            }
            else
            {
                $productoIP = 0;
            }
        }
        else
        {
            $sql = $em->createQuery("SELECT p  
                   from                                                           
                    schemaBundle:AdmiProducto p         
                 where                
                  p.id =:intIdProducto                
                 and p.nombreTecnico =:nombre_tecnico                                    
                 ");
            $sql->setParameter('intIdProducto', $intIdProducto);
            $sql->setParameter('nombre_tecnico', 'IP');
            $productoIP = $sql->getOneOrNullResult();
            if(!$productoIP)
            {
                $productoIP = 0;
            }
        }
        return $productoIP;
    }

    /**
     * Funcion que devuelve la cantidad de productos IPS existentes en un plan
     * Consideraciones: Se valida en base al campo nombre_tecnico que define si se trata de un Plan que posee un producto IP, y se devuelve la cantidad de items.
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 23-05-2014     
     * @param integer $intIdPlan      
     * @return integer
     */
    public function obtenerCantidadIpsEnPlan($intIdPlan)
    {
        $em = $this->_em;
        $sql = $em->createQuery("SELECT sum(pd.cantidadDetalle)  
                   from                                       
                    schemaBundle:InfoPlanCab pc
                   , schemaBundle:InfoPlanDet pd  
                   , schemaBundle:AdmiProducto p         
                 where
                 pc.id=:intIdPlan
                 and pd.planId = pc.id
                 and p.id = pd.productoId                 
                 and p.nombreTecnico =:nombre_tecnico    
                 and pd.estado =:estado
                 ");
        $sql->setParameter('intIdPlan', $intIdPlan);
        $sql->setParameter('nombre_tecnico', 'IP');
        $sql->setParameter('estado', 'Activo');
        $cantidadIpsEnPlan = $sql->getSingleScalarResult();
        if(!$cantidadIpsEnPlan)
        {
            $cantidadIpsEnPlan = 0;
        }

        return $cantidadIpsEnPlan;
    }

    /**
     * Funcion que valida que el Login posea un servicio de internet valido para poder contratar NetlifeCam 
     * Consideraciones: Se excluyen los servicios en estado Rechazado, Rechazada, Cancelado, Anulado, Cancel, Eliminado, Reubicado, Trasladado, Incorte, InTemp            
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 16-06-2014     
     * @param integer $intIdPunto     
     * @return object
     */
    public function obtieneProductoInternetxPunto($intIdPunto)
    {
        $em = $this->_em;
        $sql = $em->createQuery("SELECT s    
                   from                    
                     schemaBundle:InfoServicio s
                   , schemaBundle:InfoPlanCab pc
                   , schemaBundle:InfoPlanDet pd  
                   , schemaBundle:AdmiProducto p         
                 where
                  pc.id = s.planId
                 and pd.planId = pc.id
                 and p.id = pd.productoId
                 and p.nombreTecnico =:nombre_tecnico    
                 and s.estado not in (:estados)                 
                 and s.puntoId =:intIdPunto      
                
                 ");
        $sql->setParameter('intIdPunto', $intIdPunto);
        $sql->setParameter('nombre_tecnico', 'INTERNET');
        $sql->setParameter('estados', array('Rechazado', 'Rechazada', 'Cancelado', 'Anulado', 'Cancel', 'Eliminado', 'Reubicado', 'Trasladado', 'In-Temp', 'In-Corte'));
        $productoInternet = $sql->getOneOrNullResult();
        if(!$productoInternet)
        {
            $productoInternet = 0;
        }
        return $productoInternet;
    }

    /**
     * Funcion que valida que el Login posea un servicio de internet
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 1.0 12-10-2020
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 26-11-2020 - Se modifica el query para retonar el servicio actual.
     *
     * @param integer $intIdPunto
     * @return object
     */
    public function obtieneServicioInternetxPunto($intIdPunto)
    {
        $emComercial = $this->_em;
        $strSql = $emComercial->createQuery("SELECT s    
                   from                    
                     schemaBundle:InfoServicio s
                   , schemaBundle:InfoPlanCab pc
                   , schemaBundle:InfoPlanDet pd  
                   , schemaBundle:AdmiProducto p
                 where
                  pc.id = s.planId
                 and pd.planId = pc.id
                 and p.id = pd.productoId
                 and p.nombreTecnico =:nombre_tecnico
                 and s.puntoId =:intIdPunto
                 ORDER BY s.feCreacion DESC

                 ");
        $strSql->setParameter('intIdPunto', $intIdPunto);
        $strSql->setParameter('nombre_tecnico', 'INTERNET');
        $objProductoInternet = $strSql->getResult();
        if(!$objProductoInternet)
        {
            $objProductoInternet = 0;
        }
        return $objProductoInternet[0];
    }

    /**
     * Funcion que devuelde los servicio adicionales que tiene un punto
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 1.0 18-10-2020
     * @param integer $parametro
     * @return array
     */
    public function obtieneServiciosAdicionalesxPunto($arrayParametro)
    {
        $arrayProductoInternet=array();
        $emComercial = $this->_em;
        
        $strSql = $emComercial->createQuery("SELECT s    
                   from                    
                     schemaBundle:InfoServicio s
                   , schemaBundle:AdmiProducto p
                 where p.id = s.productoId
                 and p.nombreTecnico in (:nombre_tecnico)
                 and s.puntoId =:intIdPunto
                
                 ");
        $strSql->setParameter('intIdPunto', $arrayParametro['intIdPunto']);
        $strSql->setParameter('nombre_tecnico', $arrayParametro['arrayNombreTecnico']);
        $arrayProductoInternet = $strSql->getResult();
        return $arrayProductoInternet;
    }

    /**
     * generarJsonPuntosANotificar
     *
     * Método que obtiene los clientes a enviar notificaciones segun filtros enviados
     *
     * @param integer $idEmpresa                     
     * @param array   $parametros        
     * @param integer $start  
     * @param integer $limit        
     *
     * @return JSON con valores a mostrar 
     *
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 2.0 11-06-2014
     */
    public function generarJsonPuntosANotificar($idEmpresa, $parametros, $start = '', $limit = '')
    {
        $query = $this->getPuntoANotificar('data', $idEmpresa, $parametros);
        $total = count($query->getArrayResult());

        if($limit > 0)
        {
            $query->setSQL('SELECT a.*, rownum AS doctrine_rownum FROM (' . $query->getSQL() . ') a WHERE rownum <= :doctrine_limit');
            $query->setParameter('doctrine_limit', $limit + $start);
            if($start > 0)
            {
                $query->setSQL('SELECT * FROM (' . $query->getSQL() . ') WHERE doctrine_rownum >= :doctrine_start');
                $query->setParameter('doctrine_start', $start + 1);
            }
        }

        $resultado = $query->getArrayResult();

        if($resultado)
        {
            foreach($resultado as $data)
            {
                $arr_encontrados[] = array("idPunto" => $data['idPunto'],
                    "login" => $data['login'],
                    "clienteNombre" => strtoupper($data['clienteNombre']),
                    "clienteId" => $data['clienteId'],
                    "estado" => $data['estado'],
                    "idServicio" => $data['idServicio'],
                    "feActivacion" => explode(" ", $data['feActivacion'])[0] ? explode(" ", $data['feActivacion'])[0] : '',
                    "nombreOficina" => $data['nombreOficina'],
                    "descripcionFormaPago" => $data['descripcionFormaPago'],
                    "nombreTipoNegocio" => $data['nombreTipoNegocio'],
                    "saldo" => $data['saldo']
                );
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $total . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';
            return $resultado;
        }
    }

    /**
     * getPuntoANotificar
     *
     * Método que devuele el string sql para obtener los valores de total de registros y la data segun el tipo de consulta se este realizando
     *                            
     * @param integer $idPersona                     
     * @param array   $parametros                      
     * @param string  $tipoConsulta   
     *
     * @return $query - string del query a ejecutar 
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.1 14-12-2016 - Se valida que considere solo los contratos con estado Activo
     *
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 2.0 17-06-2014
     *
     * @author Jorge Guerrero <jguerrerop@telconet.ec>
     * @version 2.1 25-09-2017 Se agrega la condicion del ciclo de facturación para filtrar los clientes con el filtro seleccionado por pantalla
     */
    public function getPuntoANotificar($tipoConsulta, $idEmpresa, $parametros)
    {

        $oficinas = explode(",", $parametros['idsOficinas']);
        $bancosTarjetas = explode(",", $parametros['idsBancosTarjetas']);

        $prefijoEmpresa = $this->_em->getRepository('schemaBundle:InfoEmpresaGrupo')->find($idEmpresa);
        $prefijoEmpresa = $prefijoEmpresa->getPrefijo();

        if($prefijoEmpresa != 'TTCO')
        {
            $select = " , SERVICIO_HISTORIAL.FE_CREACION ";
            $from = " , INFO_SERVICIO_HISTORIAL  SERVICIO_HISTORIAL ";
            $where = " AND SERVICIO_HISTORIAL.SERVICIO_ID     = SERVICIO.ID_SERVICIO ";
            $whereClause = " AND upper(SEARCH_LONG_SERVICIO_HISTORIAL(SERVICIO_HISTORIAL.rowid)) like :historial ";
        }

        $rsm = new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null, $rsm);

        $sql = "";

        switch($tipoConsulta)
        {
            case 'count':
                $sql = "SELECT COUNT(*) AS TOTAL ";
                $rsm->addScalarResult('TOTAL', 'total', 'integer');
                break;

            case 'data':
                $sql = "SELECT DISTINCT
				  PUNTO.ID_PUNTO,   
				  PUNTO.LOGIN,
				  PERSONA.ID_PERSONA,
				  CASE
				    WHEN PERSONA.RAZON_SOCIAL IS NOT NULL THEN
				    PERSONA.RAZON_SOCIAL
				    ELSE
				    NVL(PERSONA.NOMBRES, '') || ' ' ||
				    NVL(PERSONA.APELLIDOS, '')
				  END AS NOMBRE_CLIENTE,                                                              
				  OFICINA_GRUPO.NOMBRE_OFICINA,                
				  SERVICIO.ESTADO,          
				  SERVICIO.ID_SERVICIO,				  
				  TIPO_NEGOCIO.NOMBRE_TIPO_NEGOCIO,                
				  FORMA_PAGO.DESCRIPCION_FORMA_PAGO,
				  VISTA_SALDO.SALDO 
				  $select
				  ";
                $rsm->addScalarResult('ID_PUNTO', 'idPunto', 'integer');
                $rsm->addScalarResult('LOGIN', 'login', 'string');
                $rsm->addScalarResult('ID_PERSONA', 'clienteId', 'integer');
                $rsm->addScalarResult('NOMBRE_CLIENTE', 'clienteNombre', 'string');
                $rsm->addScalarResult('NOMBRE_OFICINA', 'nombreOficina', 'string');
                $rsm->addScalarResult('ESTADO', 'estado', 'string');
                $rsm->addScalarResult('ID_SERVICIO', 'idServicio', 'integer');
                $rsm->addScalarResult('NOMBRE_TIPO_NEGOCIO', 'nombreTipoNegocio', 'string');
                $rsm->addScalarResult('DESCRIPCION_FORMA_PAGO', 'descripcionFormaPago', 'string');
                if($prefijoEmpresa != 'TTCO')
                    $rsm->addScalarResult('FE_CREACION', 'feActivacion', 'string');
                $rsm->addScalarResult('SALDO', 'saldo', 'float');
                break;
        }
        
        $sql.= "
		    FROM
		    
		    INFO_PERSONA             PERSONA,
		    INFO_PERSONA_EMPRESA_ROL PERSONA_EMPRESA_ROL,
		    INFO_EMPRESA_ROL         EMPRESA_ROL,
		    INFO_OFICINA_GRUPO       OFICINA_GRUPO,       
		    INFO_SERVICIO            SERVICIO,		    
		    INFO_PLAN_CAB            PLANC,
		    INFO_PLAN_DET            PLAND,
		    ADMI_PRODUCTO            PRODUCTO,       
		    INFO_CONTRATO            CONTRATO,
		    ADMI_FORMA_PAGO          FORMA_PAGO,       
		    INFO_PUNTO               PUNTO,      
		    ADMI_ROL                 ROL,
		    ADMI_TIPO_NEGOCIO        TIPO_NEGOCIO,       		    
		    VISTA_FACTURAS_ABIERTAS  VISTA_FACTURAS_ABIERTAS,
		    VISTA_BANCO_Y_TIPO_CTA   VISTA_BCO_CTA,
		    INFO_PUNTO_SALDO         VISTA_SALDO
		    $from
		    
		    WHERE
		    
		    PUNTO.PERSONA_EMPRESA_ROL_ID           = PERSONA_EMPRESA_ROL.ID_PERSONA_ROL
		    AND PUNTO.TIPO_NEGOCIO_ID              = TIPO_NEGOCIO.ID_TIPO_NEGOCIO
		    AND PERSONA_EMPRESA_ROL.PERSONA_ID     = PERSONA.ID_PERSONA
		    AND PERSONA_EMPRESA_ROL.EMPRESA_ROL_ID = EMPRESA_ROL.ID_EMPRESA_ROL 
		    AND EMPRESA_ROL.ROL_ID = ROL.ID_ROL
		    AND PERSONA_EMPRESA_ROL.OFICINA_ID     = OFICINA_GRUPO.ID_OFICINA
		    AND CONTRATO.PERSONA_EMPRESA_ROL_ID    = PERSONA_EMPRESA_ROL.ID_PERSONA_ROL
		    AND FORMA_PAGO.ID_FORMA_PAGO           = CONTRATO.FORMA_PAGO_ID
		    
		    AND VISTA_SALDO.PUNTO_ID               = PUNTO.ID_PUNTO
		    AND VISTA_FACTURAS_ABIERTAS.punto_id   = PUNTO.ID_PUNTO
		    AND VISTA_BCO_CTA.CONTRATO_ID          = CONTRATO.ID_CONTRATO
		    
		    AND PUNTO.ID_PUNTO                     = SERVICIO.PUNTO_ID
		    
		    AND SERVICIO.PLAN_ID                   = PLANC.ID_PLAN
		    AND PLANC.ID_PLAN                      = PLAND.PLAN_ID
		    AND PLAND.PRODUCTO_ID                  = PRODUCTO.ID_PRODUCTO
		    $where
		    		    		    
		    AND PRODUCTO.NOMBRE_TECNICO            = :producto
		    AND SERVICIO.ES_VENTA                  = :esVenta
		    AND ROL.DESCRIPCION_ROL               <> :rol		    		    
		    AND PLANC.NOMBRE_PLAN  not like          :nombrePlan
		    AND CONTRATO.ESTADO                    = :paramEstado
		    $whereClause
		    ";

        $query->setParameter('producto', 'INTERNET');
        $query->setParameter('esVenta', 'S');
        $query->setParameter('rol', 'Cliente Canal');
        $query->setParameter('nombrePlan', '%Edicion Limitada%');
        $query->setParameter('paramEstado', 'Activo');
        $query->setParameter('estados', array('Activo', 'Cancel', 'In-Corte'));

        if($prefijoEmpresa != 'TTCO')
            $query->setParameter('historial', '%CONFIRMO%');

        if ($parametros['ciclosFacturacion'] != "" || $parametros['ciclosFacturacion'] != null)
        {
            $sql .= "AND Exists (Select 1
                                    from DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL_CARAC iperc,
                                         DB_COMERCIAL.ADMI_CARACTERISTICA ac
                                    where iperc.PERSONA_EMPRESA_ROL_ID=PERSONA_EMPRESA_ROL.ID_PERSONA_ROL
                                    and AC.ID_CARACTERISTICA=IPERC.CARACTERISTICA_ID
                                    and iperc.ESTADO='Activo'
                                    and IPERC.VALOR = :strCiclo
                                    and AC.DESCRIPCION_CARACTERISTICA='CICLO_FACTURACION') ";
            $query->setParameter('strCiclo', $parametros['ciclosFacturacion']);
        }

        $sql .= " AND SERVICIO.ESTADO = :estado ";

        if(isset($parametros['estado']) && $parametros['estado'] != "")
        {
            $query->setParameter('estado', $parametros['estado']);
        }
        else
            $query->setParameter('estado', 'Activo');

        if(isset($idEmpresa) && $idEmpresa != '')
        {
            $sql .= " AND EMPRESA_ROL.EMPRESA_COD = :idEmpresa ";
            $query->setParameter('idEmpresa', $idEmpresa);
        }


        if(isset($parametros['numFacturasAbiertas']) && $parametros['numFacturasAbiertas'] != "")
        {
            $sql .= " AND VISTA_FACTURAS_ABIERTAS.facturas_abiertas >= :numFacturasAbiertas ";
            $query->setParameter('numFacturasAbiertas', $parametros['numFacturasAbiertas']);
        }

        if(isset($parametros['valorMontoDeuda']) && $parametros['valorMontoDeuda'] != "")
        {
            $sql .= " AND VISTA_SALDO.SALDO >= :valorMontoDeuda ";
            $query->setParameter('valorMontoDeuda', $parametros['valorMontoDeuda']);
        }
        else
            $sql .= " AND VISTA_SALDO.SALDO > 0 ";

        if(isset($parametros['idFormaPago']) && $parametros['idFormaPago'] != "" && $parametros['idFormaPago'] != 10)
        {
            $sql .= " AND FORMA_PAGO.ID_FORMA_PAGO = :idFormaPago ";
            $query->setParameter('idFormaPago', $parametros['idFormaPago']);
        }

        if(isset($bancosTarjetas))
        {
            if($bancosTarjetas != "")
            {
                if($parametros['idFormaPago'] == 3)
                {
                    $sql .= " AND VISTA_BCO_CTA.BANCO_ID in (:bancoId) ";
                    $query->setParameter('bancoId', $bancosTarjetas);
                }
                if($parametros['idFormaPago'] == 10)
                {
                    $sql .= " AND VISTA_BCO_CTA.TIPO_CUENTA_ID in (:tipoCuentaId) ";
                    $query->setParameter('tipoCuentaId', $bancosTarjetas);
                }
            }
        }

        if(isset($oficinas))
        {
            if($oficinas != "")
            {
                $sql .= " AND OFICINA_GRUPO.ID_OFICINA in (:oficinasId) ";
                $query->setParameter('oficinasId', $oficinas);
            }
        }
        if(isset($parametros['idTipoNegocio']))
        {
            if($parametros['idTipoNegocio'] != "")
            {
                $sql .= " AND TIPO_NEGOCIO.ID_TIPO_NEGOCIO in (:tipoNegocioId) ";
                $query->setParameter('tipoNegocioId', $parametros['idTipoNegocio']);
            }
        }

        if($prefijoEmpresa != 'TTCO')
        {

            if(isset($parametros['fechaActivacion']))
            {
                if($parametros['fechaActivacion'] != "")
                {

                    $date = explode("-", $parametros['fechaActivacion']);

                    $feActivacion = date("Y/m/d", strtotime($date[2] . "-" . $date[1] . "-" . $date[0]));

                    if($feActivacion && $feActivacion != '')
                    {
                        $sql .= " AND SERVICIO_HISTORIAL.FE_CREACION <= :feActivacion ";
                        $query->setParameter('feActivacion', trim($feActivacion));
                    }
                }
            }
        }

        //SE OBTIENE EL ULTIMO ESTADO DE CADA CLIENTE EN LA CONSULTA
        $sql .= " AND SERVICIO.ID_SERVICIO = (SELECT MAX(A.ID_SERVICIO)
						    FROM
						    INFO_SERVICIO A,
						    INFO_PLAN_CAB B,
						    INFO_PLAN_DET C,
						    ADMI_PRODUCTO D
						    WHERE
						    A.PUNTO_ID = PUNTO.ID_PUNTO AND
						    A.PLAN_ID  = B.ID_PLAN AND
						    B.ID_PLAN  = C.PLAN_ID AND
						    C.PRODUCTO_ID = D.ID_PRODUCTO AND
						    D.NOMBRE_TECNICO = :producto AND
						    A.ESTADO IN (:estados))";

        $query->setSQL($sql);

        return $query;
    }

    /**
     * obtenerFechaConfirmacion
     *
     * Metodo encargado de obtener la fecha de confirmacion del servicio dado
     *
     * @param integer $idServicio  
     *          
     * @return string de la fecha
     *
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.0 15-08-2014
     */
    public function obtenerFechaConfirmacion($idServicio)
    {
        $fecha = null;
        $fecha = str_pad($fecha, 40, " ");
        $sql = "BEGIN PCK_FECHA_CONFIRM_SERVICE(:servicio, :fecha); END;";
        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->bindParam('servicio', $idServicio);
        $stmt->bindParam('fecha', $fecha);
        $stmt->execute();
        return trim($fecha);
    }

    /**
     * generarJsonServicioALiberar
     *
     * Método que obtiene los clientes con servicios con estado Factible
     *                    
     * @param array   $parametros  parametros: start, limit, fechaDesde, fechaHasta, automatica (si es una factibilidad asignada automaticamente)   
     *
     * @return JSON con valores a mostrar 
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 11-12-2014
     */
    public function generarJsonServicioALiberar($arrayParametros)
    {
        $query = $this->getServiciosALiberar($arrayParametros);
        $total = count($query->getArrayResult());

        if($arrayParametros['limit'] > 0)
        {
            $query->setSQL('SELECT a.*, rownum AS doctrine_rownum FROM (' . $query->getSQL() . ') a WHERE rownum <= :doctrine_limit');
            $query->setParameter('doctrine_limit', $arrayParametros['limit'] + $arrayParametros['start']);
            if($arrayParametros['start'] > 0)
            {
                $query->setSQL('SELECT * FROM (' . $query->getSQL() . ') WHERE doctrine_rownum >= :doctrine_start');
                $query->setParameter('doctrine_start', $arrayParametros['start'] + 1);
            }
        }

        $resultado = $query->getArrayResult();

        if($resultado)
        {
            foreach($resultado as $data)
            {
                $arr_encontrados[] = array("idServicio" => $data['idServicio'],
                    "usrVendedor" => $data['usrVendedor'],
                    "ciudad" => $data['ciudad'],
                    "cliente" => strtoupper($data['cliente']),
                    "login" => $data['login'],
                    "fechaFactibilidad" => $data['fechaFactibilidad'],
                    "diasFactibles" => $data['diasFactibles'],
                    "automatica" => $data['automatica']
                );
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $total . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';
            return $resultado;
        }
    }

    /**
     * getServiciosALiberar
     *
     * Método que devuele el string sql para obtener los registros de los servicios a liberar
     *                            
     * @param integer $idPersona                     
     * @param array   $parametros                      
     * @param string  $tipoConsulta   
     *
     * @return $query - string del query a ejecutar 
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 2.0 11-12-2014
     */
    public function getServiciosALiberar($arrayParametros)
    {
        $rsm = new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null, $rsm);
        $sql = "  SELECT * FROM ( SELECT ID_SERVICIO,
                    USR_VENDEDOR,
                    CIUDAD,
                    CASE WHEN TRIM(CLIENTE) IS NOT NULL THEN CLIENTE ELSE RAZON_SOCIAL END AS CLIENTE,
                    LOGIN,
                    FECHA_FACTIBILIDAD ,
                    ROUND((SYSDATE -TRUNC(FECHA_FACTIBILIDAD)),2) AS DIAS_FACTIBLES,
                    AUTOMATICA
                  FROM
                    (SELECT E.ID_SERVICIO,
                      A.USR_VENDEDOR ,
                      D.NOMBRE_JURISDICCION
                      ||'/'
                      ||D.DESCRIPCION_JURISDICCION AS CIUDAD,
                      C.NOMBRES
                      ||' '
                      ||C.APELLIDOS AS CLIENTE,
                      C.RAZON_SOCIAL AS RAZON_SOCIAL,    
                      A.LOGIN       AS LOGIN,
                      (SELECT MAX(H.FE_CREACION)
                      FROM INFO_SERVICIO_HISTORIAL H
                      WHERE H.SERVICIO_ID=E.ID_SERVICIO
                      AND H.ESTADO       = :estado1
                      ) AS FECHA_FACTIBILIDAD,
                      (SELECT
                        CASE
                          WHEN COUNT(*) >0
                          THEN 'NO'
                          ELSE 'SI'
                        END
                      FROM INFO_SERVICIO_HISTORIAL
                      WHERE SERVICIO_ID=E.ID_SERVICIO
                      AND ESTADO       = :estado2
                      ) AS AUTOMATICA
                    FROM INFO_PUNTO A,
                      INFO_PERSONA_EMPRESA_ROL B,
                      INFO_PERSONA C,
                      ADMI_JURISDICCION D,
                      INFO_SERVICIO E
                    WHERE A.PERSONA_EMPRESA_ROL_ID=B.ID_PERSONA_ROL
                    AND B.PERSONA_ID              =C.ID_PERSONA
                    AND A.PUNTO_COBERTURA_ID      =D.ID_JURISDICCION
                    AND A.ID_PUNTO                =E.PUNTO_ID
                    AND E.ESTADO                  = :estado3 )) ";
        $rsm->addScalarResult('ID_SERVICIO', 'idServicio', 'integer');
        $rsm->addScalarResult('USR_VENDEDOR', 'usrVendedor', 'string');
        $rsm->addScalarResult('CIUDAD', 'ciudad', 'string');
        $rsm->addScalarResult('CLIENTE', 'cliente', 'string');
        $rsm->addScalarResult('LOGIN', 'login', 'string');
        $rsm->addScalarResult('FECHA_FACTIBILIDAD', 'fechaFactibilidad', 'string');
        $rsm->addScalarResult('DIAS_FACTIBLES', 'diasFactibles', 'integer');
        $rsm->addScalarResult('AUTOMATICA', 'automatica', 'string');
        $booleanEntroFiltro = false;
        $query->setParameter('estado1', 'Factible');
        $query->setParameter('estado2', 'PreFactibilidad');
        $query->setParameter('estado3', 'Factible');         
        
        if($arrayParametros["factibilidadDesde"] != "" || 
           $arrayParametros["factibilidadHasta"] != "" ||
           ($arrayParametros["automatica"] != "" && $arrayParametros["automatica"]!="Todos") ||
           $arrayParametros["login"] != "" || $arrayParametros["mayorA"]!="")
        {
            $sql .= " WHERE ";
            if($arrayParametros["factibilidadDesde"] != "")
            {
                $dateF = explode("-", $arrayParametros["factibilidadDesde"]);
                $fechaSql = date("Y/m/d", strtotime($dateF[2] . "-" . $dateF[1] . "-" . $dateF[0]));

                $boolBusqueda = true;
                $sql .= " FECHA_FACTIBILIDAD >= :feDesde ";
                $query->setParameter('feDesde', trim($fechaSql));
                $booleanEntroFiltro = true;
            }
            if($arrayParametros["factibilidadHasta"] != "")
            {
                $dateF = explode("-", $arrayParametros["factibilidadHasta"]);
                $fechaSql = date("Y-m-d", strtotime($dateF[2] . "-" . $dateF[1] . "-" . $dateF[0]));

                $boolBusqueda = true;
                if($booleanEntroFiltro)
                {
                    $sql .= "AND FECHA_FACTIBILIDAD <= :feHasta ";
                }
                else
                {
                    $sql .= " FECHA_FACTIBILIDAD <= :feHasta ";
                    $booleanEntroFiltro = true;
                }

                $query->setParameter('feHasta', trim($fechaSql));
            }
            
            if($arrayParametros["automatica"] != "" && $arrayParametros["automatica"] != "Todos" )
            {
                $boolBusqueda = true;
                if($booleanEntroFiltro)
                {
                    $sql .= " AND AUTOMATICA = :automatica ";
                }
                else
                {
                    $sql .= " AUTOMATICA = :automatica ";
                    $booleanEntroFiltro = true;
                }
                $query->setParameter('automatica', $arrayParametros["automatica"]);
            }

            if($arrayParametros["login"] != "")
            {
                $boolBusqueda = true;
                if($booleanEntroFiltro)
                {
                    $sql .= " AND UPPER(LOGIN) like :login ";
                }
                else
                {
                    $sql .= " UPPER(LOGIN) like :login ";
                }
                $query->setParameter('login', '%' . strtoupper($arrayParametros["login"]) . '%');
            }

            if($arrayParametros["mayorA"] != null)
            {
                $boolBusqueda = true;
                if($booleanEntroFiltro)
                {
                    $sql .= " AND DIAS_FACTIBLES >= :mayorA ";
                }
                else
                {
                    $sql .= " DIAS_FACTIBLES >= :mayorA ";
                }
                $query->setParameter('mayorA', $arrayParametros["mayorA"]);
            }
        }
        $sql .= " ORDER BY DIAS_FACTIBLES DESC ";
        $query->setSQL($sql);
        return $query;

    }

    /**
     * Documentación para el método 'verificaPermiteEditarPto'.
     *
     * Verifica si es posible editar un punto
     *
     * @param integer $idPunto
     * @return string $response retorna 'si' si es posible editar punto, 'no' si no es posible editar punto
     *
     * Consideraciones: 
     * 1) Si posee ROL o Credencial para "Edicion de Punto" solo podra editar la informacion del Punto si este no posee Servicios en estados
     * posteriores a la Factibilidad y si no Posee Solicitudes en estado "Factible, FactibilidadEnProceso, PreAprobacionMateriales,
     * PreFactibilidad"
     * 2) No podra editar informacion si cliente posee servicio en estado posterior a la factibilidad , pero no posee solicitudes en estado 
     *  "Factible, FactibilidadEnProceso, PreAprobacionMateriales" por tratarse de clientes existentes de migraciones anteriores. 
     *
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 05-03-2015
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.1 24-06-2016
     * Se agrega la validación TRUE en caso de sevicios con estado diferente y sin solicitud de factibilidad.
     */
    public function verificaPermiteEditarPto($intIdPunto)
     {	 
        $boolPermiteEditarPto = false;
        $em = $this->_em;
        $sql = $em->createQuery("SELECT s 
                FROM schemaBundle:InfoServicio s,
                schemaBundle:InfoPunto pto
                WHERE
                 s.puntoId=pto.id and pto.id =:intIdPunto                
                AND s.estado not in (:arrayEstadosServ)
               ");
        $sql->setParameter('arrayEstadosServ', array('Pre-servicio','Eliminado', 'Anulado', 'Rechazada','Pendiente'));
        $sql->setParameter('intIdPunto', $intIdPunto);
        $objPoseeServicio = $sql->getResult();
        //Si posee Servicio se debe verificar si posee solicitudes Factibles considerando los estados de los servicios
        if($objPoseeServicio)
        {            
            $sql = $em->createQuery('SELECT count(ds)  
                FROM schemaBundle:InfoDetalleSolicitud ds, schemaBundle:AdmiTipoSolicitud ts, schemaBundle:InfoServicio s,
                schemaBundle:InfoPunto pto
                WHERE ds.tipoSolicitudId = ts.id AND ds.servicioId = s.id 
                AND s.puntoId=pto.id and pto.id =:intIdPunto
                AND ts.id =:intIdTipoSolicitud 
                AND s.estado not in (:arrayEstadosServ) AND ds.estado in (:arrayEstadosSol)
               ');
                        
            $sql->setParameter('intIdPunto', $intIdPunto);
            $sql->setParameter('intIdTipoSolicitud', 6);//6	SOLICITUD FACTIBILIDAD
            $sql->setParameter('arrayEstadosSol', array('Factible','FactibilidadEnProceso','PreAprobacionMateriales','PreFactibilidad'));
            $sql->setParameter('arrayEstadosServ', array('Pre-servicio','Eliminado', 'Anulado', 'Rechazada','Pendiente'));
            $intCantSolicitudes = $sql->getSingleScalarResult();
            if($intCantSolicitudes)
            {
                $boolPermiteEditarPto = false;                
            } 
            else
            {
                //Si posee un servicio en estado diferente y no existe solicitud de factibilidad
                $sql = $em->createQuery('SELECT serv  
                FROM schemaBundle:InfoServicio serv,
                schemaBundle:InfoPunto pto
                WHERE serv.puntoId=pto.id and pto.id =:intIdPunto
                and serv.estado in (:arrayEstadosServ) AND
                    NOT EXISTS (
                           SELECT 1
                           FROM schemaBundle:InfoDetalleSolicitud dsol
                           WHERE dsol.servicioId=serv.id AND dsol.tipoSolicitudId =:intIdTipoSolicitud 
                           AND dsol.estado in (:arrayEstadosSol)                          
                    )
               '); 
                
                $sql->setParameter('intIdPunto', $intIdPunto);
                $sql->setParameter('intIdTipoSolicitud', 6);//6	SOLICITUD FACTIBILIDAD
                $sql->setParameter('arrayEstadosSol', array('Factible','FactibilidadEnProceso','PreAprobacionMateriales','PreFactibilidad'));
                $sql->setParameter('arrayEstadosServ', array('migracion_ttco','In-Corte','In-Temp','Reubicado','Activo','Trasladado','Cancel'));
                $intCantServ = $sql->getResult();
                if($intCantServ)
                {
                    $boolPermiteEditarPto = false; 
                }
                else
                {
                    $boolPermiteEditarPto = true; 
                }
            }
        }
        else
        {
            //Si no Posee Servicio entonces puede editar la informacion del Punto
            $boolPermiteEditarPto = true;
        }   
    return $boolPermiteEditarPto;
  }

    /**
     * obtieneCantidadIpServicio
     *
     * Método que devuele la cantidad de Ips de un Plan o Producto
     *                            
     * @param integer $intIdPlan                     
     * @param integer $intIdServicio
     * @param string  $strCodEmpresa 
     *
     * @return $intCantidadIps 
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 06-04-2015
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 21-06-2019 Se agrega validación para servicios Small Business
     */
    public function obtieneCantidadIpServicio($intIdPlan, $intIdServicio, $strCodEmpresa)
    {
        $intCantidadIp = 0;
        
        if($strCodEmpresa == '10')
        {
            $strSql = " select s.cantidad
                        from schemaBundle:InfoServicio s
                            join schemaBundle:AdmiProducto ap WITH ap.id = s.productoId
                        where s.id = :intIdServicio 
                        and (ap.nombreTecnico = :nombreTecnicoSb OR ap.nombreTecnico = :nombreTecnicoIpSb) ";
            $objQuery = $this->_em->createQuery($strSql);
            $objQuery->setParameter('intIdServicio', $intIdServicio);
            $objQuery->setParameter('nombreTecnicoSb', "INTERNET SMALL BUSINESS");
            $objQuery->setParameter('nombreTecnicoIpSb', "IPSB");
            try
            {
                $intCantidadIp = $objQuery->getSingleScalarResult();
            }
            catch(\Doctrine\ORM\NoResultException $e)
            {
                $intCantidadIp = 0;
            }
        }
        else if($intIdPlan)
        {
            //Se obtiene la cantidad de ips correspondientes al plan de acuerdo a la empresa
            $detalleProd = $this->_em->createQuery("select pd.cantidadDetalle 
                                                    from
                                                        schemaBundle:InfoPlanCab pc
                                                        join schemaBundle:InfoPlanDet pd WITH pd.planId = pc.id
                                                        join schemaBundle:AdmiProducto p WITH p.id = pd.productoId
                                                    where pc.empresaCod = $strCodEmpresa and
                                                    pc.id = $intIdPlan and p.nombreTecnico = 'IP'");

            try
            {
                $intCantidadIp = $detalleProd->getSingleScalarResult();
            }
            catch(\Doctrine\ORM\NoResultException $e)
            {
                $intCantidadIp = 0;
            }
            /** dms * */
        }
        else
        {
            //Se obtiene la cantidad de ips correspondientes al plan de acuerdo a la empresa
            $detalleProd = $this->_em->createQuery("select s.cantidad
                                                    from
                                                        schemaBundle:InfoServicio s
                                                        join schemaBundle:AdmiProducto ap WITH ap.id = s.productoId
                                                    where s.id = $intIdServicio and ap.nombreTecnico = 'IP'");

            try
            {
                $intCantidadIp = $detalleProd->getSingleScalarResult();
            }
            catch(\Doctrine\ORM\NoResultException $e)
            {
                $intCantidadIp = 0;
            }
        }
        return $intCantidadIp;
    }
    
    /**
     * Obtiene Id para nueva secuencia de partnerref de McAfee
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 07-08-2015
     * 
     * @return int $idSecuenciaPartnerRef
     **/
    public function getSecuenciaPartnerRef()
    {
        $idSecuenciaPartnerRef = null;
        $rsm                   = new ResultSetMappingBuilder($this->_em);
        $rsm->addScalarResult('SECUENCIA', 'secuenciaValor', 'string');
        $query                 = $this->_em->createNativeQuery("SELECT SEQ_MCAFEE_PARTNERREF.NEXTVAL as SECUENCIA from dual", $rsm);
        $datos                 = $query->getScalarResult();
        $idSecuenciaPartnerRef = $datos[0]['secuenciaValor'];
        
        return $idSecuenciaPartnerRef;
    }
    
     /**
      * getSecuenciaCcid
      * Obtiene Id para nueva secuencia de CCID de McAfee
      * 
      * @author Jesus Bozada <jbozada@telconet.ec>
      * @version 1.0 04-06-2019
      * 
      * @return int $intIdSecuenciaCcid
      **/
    public function getSecuenciaCcid()
    {
        $intIdSecuenciaCcid = null;
        $objRsm             = new ResultSetMappingBuilder($this->_em);
        $objRsm->addScalarResult('SECUENCIA', 'secuenciaValor', 'string');
        $objQuery           = $this->_em->createNativeQuery("SELECT SEQ_MCAFEE_CCID.NEXTVAL as SECUENCIA from dual", $objRsm);
        $arrayDatos         = $objQuery->getScalarResult();
        $intIdSecuenciaCcid = $arrayDatos[0]['secuenciaValor'];
        return $intIdSecuenciaCcid;
    }
    
    /**
     * getPromocionesDelServicio
     *
     * Metodo encargado de obtener las promociones otorgadas al cliente.
     *
     * @param string $strPuntoId Id del punto del cliente
     *          
     * @return array $arrayResultados
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 19-08-2015
     */  
    public function getPromocionesDelServicio( $strPuntoId )
    {
        $arrayResultados = array();
        
        $query = $this->_em->createQuery();
        
        $strSelect  = "SELECT ats.descripcionSolicitud, ids.usrCreacion, ids.porcentajeDescuento,
                              COUNT(ids.tipoSolicitudId) as total, ids.estado ";
        
        $strFrom    = "FROM schemaBundle:InfoServicio iser,
                            schemaBundle:InfoDetalleSolicitud ids,
                            schemaBundle:AdmiTipoSolicitud ats ";
        
        $strWhere   = "WHERE ids.servicioId = iser.id
                         AND ats.id = ids.tipoSolicitudId
                         AND iser.puntoFacturacionId = :punto
                         AND ats.descripcionSolicitud LIKE :descuento
                         AND ids.usrCreacion = :usuarioCreacion ";
        
        $strGroupBy = "GROUP BY ats.descripcionSolicitud, ids.usrCreacion,
                                ids.porcentajeDescuento, ids.estado ";
        
        $strOrderBy = "ORDER BY ids.estado DESC ";
        
        $query->setParameter("descuento", "%DESCUENT%");
        $query->setParameter("usuarioCreacion", "telco-promocion");
        $query->setParameter("punto", $strPuntoId);

        $strDql = $strSelect.$strFrom.$strWhere.$strGroupBy.$strOrderBy;
        
        $query->setDQL($strDql);
        
        $arrayTmpResultados = array();
        $arrayTmpResultados = $query->getResult();

        if( count($arrayTmpResultados) > 0 )
        {
            $arrayResultados = $arrayTmpResultados;
        }
        
        return $arrayResultados;

    }
    
    /**
     * Documentación para el método 'getJsonTeleventasOutboundReport'.
     *
     * Retorna la cadena Json de los Servicios-Clientes para Televentas Outbound.
     *
     * @param Array $arrayParametros['LIMIT']             Int   : Máximo de registros
     *                              ['START']             Int   : Inicio del listado
     *                              ['EMPRESA']           String: Código de la empresa
     *                              ['PLAN']              String: Descripción del plan
     *                              ['ESTADO']            String: Estado del registro
     *                              ['SECTOR']            String: Descripción del sector 
     *                              ['FORMA_CONTACTO_TT'] Array : códigos de teléfono
     *                              ['FORMA_CONTACTO_EM'] Array : código de correo electrónico
     *                              ['FORMA_CONTACTO_TF'] Array : código de teléfono fijo
     *                              ['FORMA_CONTACTO_TM'] Array : códigos de teléfonos móviles
     *                              ['ROLES']             Array : roles de cliente
     *                              ['SERVICIO']          String: estado del servicio 
     *                              ['JURISDICCION']      Int   : id de la jurisdicción 
     *                              ['DIRECCION']         String: Descripción de la dirección del cliente
     *                              ['FORMA_PAGO']        Int   : id de la forma de pago del contrato
     *                              ['NOMBRES']           String: Descripción de los nombres del cliente
     *                              ['APELLIDOS']         String: Descripción de los apellidos del cliente 
     *                              ['RAZON_SOCIAL']      String: Descripción de la razón social del cliente  
     *
     * @return String $strJsonResultado JSON Listado Servicios-Cliente.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 03-10-2015
     */
    public function getJsonTeleventasOutboundReport($arrayParametros)
    {
        $objResultado = $this->getResultadoTeleventasOutboundReport($arrayParametros);
        
        if(empty($objResultado['ERROR']))
        {
            $strJsonResultado = '{"total":"' . $objResultado['TOTAL'] . '","registros":' . json_encode($objResultado['REGISTROS']) . '}';
        }
        else
        {
            $strJsonResultado = '{"total":"0", "registros":[], "error":[' . $objResultado['ERROR'] . ']}';
        }
        
        return $strJsonResultado;
    }
    
    /**
     * Documentación para el método 'getResultadoTeleventasOutboundReport'.
     *
     * Retorna listado paginado de servicios para Televentas Outbound.
     *
     * @param Array $arrayParametros['LIMIT']             Int   : Máximo de registros
     *                              ['START']             Int   : Inicio del listado
     *                              ['EMPRESA']           String: Código de la empresa
     *                              ['PLAN']              String: Descripción del plan
     *                              ['ESTADO']            String: Estado del registro
     *                              ['SECTOR']            String: Descripción del sector 
     *                              ['FORMA_CONTACTO_TT'] Array : códigos de teléfono
     *                              ['FORMA_CONTACTO_EM'] Array : código de correo electrónico
     *                              ['FORMA_CONTACTO_TF'] Array : código de teléfono fijo
     *                              ['FORMA_CONTACTO_TM'] Array : códigos de teléfonos móviles
     *                              ['ROLES']             Array : roles de cliente
     *                              ['SERVICIO']          String: estado del servicio 
     *                              ['JURISDICCION']      Int   : id de la jurisdicción 
     *                              ['DIRECCION']         String: Descripción de la dirección del cliente
     *                              ['FORMA_PAGO']        Int   : id de la forma de pago del contrato
     *                              ['NOMBRES']           String: Descripción de los nombres del cliente
     *                              ['APELLIDOS']         String: Descripción de los apellidos del cliente 
     *                              ['RAZON_SOCIAL']      String: Descripción de la razón social del cliente  
     *
     * @return Array $arrayResult['REGISTROS'] Array : Listado de servicios.
     *               $arrayResult['TOTAL']     Int   : Cantidad total de registros.
     *               $arrayResult['ERROR']     String: Descripción del error.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 03-10-2015
     */
    public function getResultadoTeleventasOutboundReport($arrayParametros)
    {
        try
        {
            $objTeleventasCountNativeQuery = $this->getReporteTeleventasOutbound($arrayParametros);
            
            if(empty($objTeleventasCountNativeQuery['ERROR']))
            {
                $objNQuery = $objTeleventasCountNativeQuery['OBJ_QUERY'];
                $intIndice = intVal($objTeleventasCountNativeQuery['INDICE']);
                $strQuery  = $objNQuery->getSQL();
                
                $objNQuery->setSQL("SELECT COUNT(*) AS TOTAL FROM ($strQuery)");
                
                $intTotalRegistros = $objNQuery->getSingleScalarResult(); // Se obtiene el total de registros
                
                if($intTotalRegistros > 0)
                {
                    $objNQuery->setSQL($strQuery);

                    // Se define el Inicio y el Límite de la paginación.
                    if(isset($arrayParametros['LIMIT']) &&  isset($arrayParametros['START']))
                    {
                        $intStart  = intVal($arrayParametros['START']);
                        $intLimit  = intVal($arrayParametros['LIMIT']);
                        
                        // Se debe generar la paginación por sustitución de marcador posicional tal como lo hace el Query Padre.
                        if($intLimit > 0)
                        {
                            $objNQuery->setSQL('SELECT a.*, rownum AS doctrine_rownum FROM (' . $objNQuery->getSQL() . ') a WHERE rownum <= ?');
                            $objNQuery->setParameter($intIndice++, $intLimit + $intStart);

                            if($intStart > 0)
                            {
                                $objNQuery->setSQL('SELECT * FROM (' . $objNQuery->getSQL() . ') WHERE doctrine_rownum >= ?');
                                $objNQuery->setParameter($intIndice++, $intStart + 1);
                            }
                        }
                    }
                    $arrayteleventas = $objNQuery->getResult();
                }
                $arrayResult['REGISTROS'] = $arrayteleventas;
                $arrayResult['TOTAL']     = $intTotalRegistros;
                $arrayResult['ERROR']     = '';
            }
            else
            {
                $arrayResult['ERROR'] = $objTeleventasCountNativeQuery['ERROR'];
            }
        }
        catch(\Exception $ex)
        {
            $arrayResult['ERROR'] = 'Error: ' . $ex->getMessage();
        }
        return $arrayResult;
    }
    
    /**
     * Documentación para el método 'getReporteTeleventasOutbound'.
     *
     * Retorna listado de servicios para la consulta de televentas outbound
     *
     * @param Array $arrayParametros['EMPRESA']           String: Código de la empresa
     *                              ['PLAN']              String: Descripción del plan
     *                              ['ESTADO']            String: Estado del registro
     *                              ['SECTOR']            String: Descripción del sector 
     *                              ['FORMA_CONTACTO_TT'] Array : códigos de teléfono
     *                              ['FORMA_CONTACTO_EM'] Array : código de correo electrónico
     *                              ['FORMA_CONTACTO_TF'] Array : código de teléfono fijo
     *                              ['FORMA_CONTACTO_TM'] Array : códigos de teléfonos móviles
     *                              ['ROLES']             Array : roles de cliente
     *                              ['SERVICIO']          String: estado del servicio 
     *                              ['JURISDICCION']      Int   : id de la jurisdicción 
     *                              ['DIRECCION']         String: Descripción de la dirección del cliente
     *                              ['FORMA_PAGO']        Int   : id de la forma de pago del contrato
     *                              ['NOMBRES']           String: Descripción de los nombres del cliente
     *                              ['APELLIDOS']         String: Descripción de los apellidos del cliente 
     *                              ['RAZON_SOCIAL']      String: Descripción de la razón social del cliente       
     * 
     * costoQuery: 50
     * 
     * @return Array $arrayResult['OBJ_QUERY'] ObjQuery: Objeto Native Query para obtener los registros de la consulta.
     *                           ['INDICE']    Int     : Indice para la continuación de seteado de parámetros
     *                           ['ERROR']     String  : Descripción del error generado
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 03-08-2015
     */
    private function getReporteTeleventasOutbound($arrayParametros)
    {
        try 
        {
            $rsmBuilder = new ResultSetMappingBuilder($this->_em);
            $ntvQuery   = $this->_em->createNativeQuery(null, $rsmBuilder);
            
            $strServicio     = '';
            $strFormaPago    = '';
            $strJurisdiccion = '';
            $strNombres      = '';
            $strApellidos    = '';
            $strRazonSocial  = '';
            $strDireccion    = '';
            $strNombrePlan   = '';
            $strNombreSector = '';
            
            $intIndex = 1;

            // Seteo dinámico($intIndex++) de los parámetros en orden de aparición del enlace.
            $ntvQuery->setParameter($intIndex++, $arrayParametros['EMPRESA']);
            $ntvQuery->setParameter($intIndex++, $arrayParametros['ESTADO']);
            $ntvQuery->setParameter($intIndex++, $arrayParametros['ESTADO']);
            
            $ntvQuery->setParameter($intIndex++, $arrayParametros['FORMA_CONTACTO_TT']);
            $ntvQuery->setParameter($intIndex++, $arrayParametros['FORMA_CONTACTO_EM']);
            $ntvQuery->setParameter($intIndex++, $arrayParametros['ROLES']);
            
            if($arrayParametros['SERVICIO'] != 'Todos')
            {
                $strServicio = "AND   S.ESTADO                        =           ? ";
                $ntvQuery->setParameter($intIndex++, $arrayParametros['SERVICIO']);
            }
            else
            {
                $arrayEstadosServicio = array('Activo',         'Asignada', 'AsignadoTarea',  'Detenido',    'EnPruebas',
                                              'EnVerificacion', 'Inactivo', 'Preplanificada', 'Planificada', 'Replanificada');
                $strServicio = "AND   S.ESTADO                        IN           (?) ";
                $ntvQuery->setParameter($intIndex++, $arrayEstadosServicio);
            }
            
            if($arrayParametros['JURISDICCION'] != '')
            {
                $strJurisdiccion = "AND   J.ID_JURISDICCION               =           ? ";
                $ntvQuery->setParameter($intIndex++, $arrayParametros['JURISDICCION']);
            }
            
            if($arrayParametros['PLAN'] != '')
            {
                $strNombrePlan = "AND   UPPER(PC.NOMBRE_PLAN)           LIKE UPPER(?)";
                $ntvQuery->setParameter($intIndex++, '%'.$arrayParametros['PLAN'].'%');
            }
            
            if($arrayParametros['SECTOR'] != '')
            {
                $strNombreSector = "AND   UPPER(SC.NOMBRE_SECTOR)         LIKE UPPER(?)";
                $ntvQuery->setParameter($intIndex++    ,    '%'.$arrayParametros['SECTOR'].'%');
            }
            
            if($arrayParametros['DIRECCION'] != '')
            {
                $strDireccion = "AND  ((PE.DIRECCION IS NOT NULL AND UPPER(PE.DIRECCION)             LIKE  UPPER(?))
                               OR (PE.DIRECCION_TRIBUTARIA IS NOT NULL AND UPPER(PE.DIRECCION_TRIBUTARIA)  LIKE  UPPER(?)) )";
                $ntvQuery->setParameter($intIndex++, '%'.$arrayParametros['DIRECCION'].'%');
                $ntvQuery->setParameter($intIndex++, '%'.$arrayParametros['DIRECCION'].'%');
            }
            
            if($arrayParametros['FORMA_PAGO'] != 'Todas')
            {
                $strFormaPago = "AND   FP.ID_FORMA_PAGO                =           ? ";
                $ntvQuery->setParameter($intIndex++, $arrayParametros['FORMA_PAGO']);
            }
            
            if($arrayParametros['NOMBRES'] != '')
            {
                $strNombres = "AND   UPPER(PE.NOMBRES)         LIKE  UPPER(?) ";
                $ntvQuery->setParameter($intIndex++, '%'.$arrayParametros['NOMBRES'].'%');
            }
            
            if($arrayParametros['APELLIDOS'] != '')
            {
                $strApellidos = "AND   UPPER(PE.APELLIDOS)       LIKE  UPPER(?) ";
                $ntvQuery->setParameter($intIndex++, '%'.$arrayParametros['APELLIDOS'].'%');
            }
            
            if($arrayParametros['RAZON_SOCIAL'] != '')
            {
                $strRazonSocial = "AND   UPPER(PE.RAZON_SOCIAL)    LIKE  UPPER(?) ";
                $ntvQuery->setParameter($intIndex++, '%'.$arrayParametros['RAZON_SOCIAL'].'%');
            }
            
            // Se muestra la dirección tributaria en caso de que la persona no tenga dirección.
            // Se muestran los Nombres y Apellidos de la Persona en caso de no disponer de Razón Social.
            // Obtención de TELEFONOS y CORREOS
            // LISTAGG agrupa en un mismo campo los n teléfonos y n correos separados por coma-espacio (, ).
            // REGEXP_REPLACE anidado mediante expresiones regulares elimina los espacios compuestos(más de uno seguido) 
            // y limita la cantidad de los elementos obtenidos por campo.
            $strQuery = "   SELECT P.LOGIN, 
                                S.ESTADO SERVICIO,
                                NVL(TRIM(PE.DIRECCION), NVL(TRIM(PE.DIRECCION_TRIBUTARIA), '-')) DIRECCION, 
                                   (CASE INSTR (REPLACE(
                                                REGEXP_REPLACE(
                                                REGEXP_REPLACE(LISTAGG(TRIM(PFC1.VALOR), ', ') 
                                                               WITHIN GROUP(ORDER BY PFC1.VALOR), ',\s*', ','),
                                                               '([^,]+)(,\1)+','\1'), ',', ', '), ',', 1, 2)
                                    WHEN 0 THEN REPLACE(
                                                REGEXP_REPLACE(
                                                REGEXP_REPLACE(LISTAGG(TRIM(PFC1.VALOR), ', ') 
                                                               WITHIN GROUP(ORDER BY PFC1.VALOR), ',\s*', ','),
                                                               '([^,]+)(,\1)+', '\1'), ',', ', ')
                                    ELSE SUBSTR(REPLACE(
                                                REGEXP_REPLACE(
                                                REGEXP_REPLACE(LISTAGG(TRIM(PFC1.VALOR), ', ') 
                                                               WITHIN GROUP(ORDER BY PFC1.VALOR), ',\s*', ','),
                                                               '([^,]+)(,\1)+', '\1'), ',' , ', '), 0, 
                                               (INSTR(REPLACE(
                                                      REGEXP_REPLACE(
                                                      REGEXP_REPLACE(LISTAGG(TRIM(PFC1.VALOR), ', ') 
                                                                     WITHIN GROUP ( ORDER BY PFC1.VALOR), ',\s*', ','),
                                                                     '([^,]+)(,\1)+', '\1'), ',', ', '), ',', 1, 2) - 1)) END)
                                TELEFONO,      
                                   (CASE INSTR (REPLACE(
                                    REGEXP_REPLACE(REGEXP_REPLACE(LISTAGG(TRIM(PFC2.VALOR), ', ') 
                                                                  WITHIN GROUP(ORDER BY PFC2.VALOR), ',\s*', ','),
                                                                  '([^,]+)(,\1)+','\1'), ',', ', '), ',', 1, 1)
                                    WHEN 0 THEN REPLACE(
                                    REGEXP_REPLACE(REGEXP_REPLACE(LISTAGG(TRIM(PFC2.VALOR), ', ') 
                                                                  WITHIN GROUP(ORDER BY PFC2.VALOR), ',\s*', ','),
                                                                  '([^,]+)(,\1)+', '\1'), ',', ', ')
                                    ELSE SUBSTR(REPLACE(
                                    REGEXP_REPLACE(REGEXP_REPLACE(LISTAGG(TRIM(PFC2.VALOR), ', ') 
                                                                  WITHIN GROUP(ORDER BY PFC2.VALOR), ',\s*', ','),
                                                                  '([^,]+)(,\1)+', '\1'), ',' , ', '), 0, 
                                    (INSTR(REPLACE(REGEXP_REPLACE(
                                                   REGEXP_REPLACE(LISTAGG(TRIM(PFC2.VALOR), ', ') 
                                                                  WITHIN GROUP(ORDER BY PFC2.VALOR), ',\s*', ','),
                                                                  '([^,]+)(,\1)+', '\1'), ',', ', '), ',', 1, 1) - 1) ) END)
                                EMAIL,
                                PC.NOMBRE_PLAN NOMBRE_PLAN,
                                J.NOMBRE_JURISDICCION JURISDICCION,
                                SC.NOMBRE_SECTOR SECTOR,
                                  ( CASE WHEN TRIM(PE.RAZON_SOCIAL) IS NULL
                                    THEN 
                                         SUBSTR((CONCAT(UPPER(TRIM(PE.NOMBRES)), CONCAT(' ',UPPER(TRIM(PE.APELLIDOS)) ))), 0, 200)
                                    ELSE 
                                         UPPER(TRIM(PE.RAZON_SOCIAL))
                                    END )
                                CLIENTE,
                                EG.NOMBRE_EMPRESA EMPRESA,
                                FP.DESCRIPCION_FORMA_PAGO FORMA_PAGO
                                    
                            FROM       INFO_SERVICIO               S
                            LEFT  JOIN INFO_PLAN_CAB               PC   ON  PC.ID_PLAN                = S.PLAN_ID
                            INNER JOIN INFO_PUNTO                  P    ON  P.ID_PUNTO                = S.PUNTO_ID
                            INNER JOIN INFO_PERSONA_EMPRESA_ROL    PER  ON  PER.ID_PERSONA_ROL        = P.PERSONA_EMPRESA_ROL_ID
                            INNER JOIN INFO_CONTRATO               CO   ON  CO.PERSONA_EMPRESA_ROL_ID = PER.ID_PERSONA_ROL
                            INNER JOIN ADMI_FORMA_PAGO             FP   ON  FP.ID_FORMA_PAGO          = CO.FORMA_PAGO_ID
                            INNER JOIN INFO_EMPRESA_ROL            ER   ON  ER.ID_EMPRESA_ROL         = PER.EMPRESA_ROL_ID
                            INNER JOIN INFO_EMPRESA_GRUPO          EG   ON  EG.COD_EMPRESA            = ER.EMPRESA_COD
                            INNER JOIN INFO_PERSONA                PE   ON  PE.ID_PERSONA             = PER.PERSONA_ID
                            INNER JOIN INFO_PERSONA_FORMA_CONTACTO PFC1 ON  PFC1.PERSONA_ID           = PE.ID_PERSONA
                            INNER JOIN ADMI_FORMA_CONTACTO         FC1  ON  FC1.ID_FORMA_CONTACTO     = PFC1.FORMA_CONTACTO_ID
                            INNER JOIN INFO_PERSONA_FORMA_CONTACTO PFC2 ON  PFC2.PERSONA_ID           = PE.ID_PERSONA
                            INNER JOIN ADMI_FORMA_CONTACTO         FC2  ON  FC2.ID_FORMA_CONTACTO     = PFC2.FORMA_CONTACTO_ID
                            INNER JOIN ADMI_SECTOR                 SC   ON  SC.ID_SECTOR              = P.SECTOR_ID
                            INNER JOIN ADMI_JURISDICCION           J    ON  J.OFICINA_ID              = PER.OFICINA_ID
                            INNER JOIN ADMI_ROL                    AR   ON  AR.ID_ROL                 = ER.ROL_ID
                            WHERE       
                                  EG.PREFIJO                      =           ?
                            AND   PFC1.ESTADO                     =           ?
                            AND   PFC2.ESTADO                     =           ?
                            AND   FC1.CODIGO                      IN         (?)
                            AND   FC2.CODIGO                      IN         (?) 
                            AND   AR.DESCRIPCION_ROL              IN         (?)
                            AND   PC.NOMBRE_PLAN     IS NOT NULL
                            $strServicio
                            $strJurisdiccion
                            $strNombrePlan
                            $strNombreSector
                            $strDireccion
                            $strFormaPago
                            $strNombres
                            $strApellidos
                            $strRazonSocial
                            GROUP BY P.LOGIN,
                                     S.ESTADO,
                                     PE.DIRECCION,
                                     PE.DIRECCION_TRIBUTARIA,
                                     PC.NOMBRE_PLAN,
                                     J.NOMBRE_JURISDICCION,
                                     SC.NOMBRE_SECTOR,
                                     PE.NOMBRES,
                                     PE.APELLIDOS,
                                     PE.RAZON_SOCIAL,
                                     EG.NOMBRE_EMPRESA,
                                     FP.DESCRIPCION_FORMA_PAGO
                            ORDER BY CLIENTE ";      
            
            $rsmBuilder->addScalarResult('LOGIN',        'login',        'string');
            $rsmBuilder->addScalarResult('SERVICIO',     'servicio',     'string');
            $rsmBuilder->addScalarResult('DIRECCION',    'direccion',    'string');
            $rsmBuilder->addScalarResult('TELEFONO',     'telefono',     'string');
            $rsmBuilder->addScalarResult('EMAIL',        'email',        'string');
            $rsmBuilder->addScalarResult('NOMBRE_PLAN',  'nombre_plan',  'string');
            $rsmBuilder->addScalarResult('JURISDICCION', 'jurisdiccion', 'string');
            $rsmBuilder->addScalarResult('SECTOR',       'sector',       'string');
            $rsmBuilder->addScalarResult('CLIENTE',      'cliente',      'string');
            $rsmBuilder->addScalarResult('EMPRESA',      'empresa',      'string');
            $rsmBuilder->addScalarResult('FORMA_PAGO',   'forma_pago',   'string');
            $rsmBuilder->addScalarResult('TOTAL',        'total',        'integer');
                
            $arrayResult['OBJ_QUERY'] = $ntvQuery->setSQL($strQuery);
            $arrayResult['INDICE']    = $intIndex;
            $arrayResult['ERROR']     = '';
        }
        catch(\Exception $ex)
        {
            $arrayResult['ERROR'] = 'ERROR: ' . $ex->getMessage();
        }
        return $arrayResult;
    }   
    
    /**
     * Documentación para el método 'getResultadoExportarReporteTeleventasOutbound'.
     *
     * Realiza la exportación a excel del reporte de Televentas Outbound.
     * El query difiere del que se muestra en pantalla debido a la diferencia de campos que se necesitan en el reporte.
     *
     * @param Array $arrayParametros['EMPRESA']           String: Código de la empresa
     *                              ['PLAN']              String: Descripción del plan
     *                              ['ESTADO']            String: Estado del registro
     *                              ['SECTOR']            String: Descripción del sector 
     *                              ['FORMA_CONTACTO_TT'] Array : códigos de teléfono
     *                              ['FORMA_CONTACTO_EM'] Array : código de correo electrónico
     *                              ['FORMA_CONTACTO_TF'] Array : código de teléfono fijo
     *                              ['FORMA_CONTACTO_TM'] Array : códigos de teléfonos móviles
     *                              ['ROLES']             Array : roles de cliente
     *                              ['SERVICIO']          String: estado del servicio 
     *                              ['JURISDICCION']      Int   : id de la jurisdicción 
     *                              ['DIRECCION']         String: Descripción de la dirección del cliente
     *                              ['FORMA_PAGO']        Int   : id de la forma de pago del contrato
     *                              ['NOMBRES']           String: Descripción de los nombres del cliente
     *                              ['APELLIDOS']         String: Descripción de los apellidos del cliente 
     *                              ['RAZON_SOCIAL']      String: Descripción de la razón social del cliente       
     * 
     * @return Array $arrayResult['REGISTROS'] Array : Listado de clientes para las televentas outbound
     *                           ['ERROR']     String: Descripción del error generado
     * 
     * costoQuery: 197
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 03-08-2015
     */
    public function getResultadoExportarReporteTeleventasOutbound($arrayParametros)
    {
        try
        {
            $rsmBuilder = new ResultSetMappingBuilder($this->_em);
            $ntvQuery   = $this->_em->createNativeQuery(null, $rsmBuilder);

            $strServicio     = '';
            $strFormaPago    = '';
            $strFormaPago2   = '';
            $strJurisdiccion = '';
            $strNombres      = '';
            $strApellidos    = '';
            $strRazonSocial  = '';
            $strDireccion    = '';
            $strNombrePlan   = '';
            $strNombreSector = '';

            $ntvQuery->setParameter("EMPRESA",   $arrayParametros['EMPRESA']);
            $ntvQuery->setParameter("ESTADO",    $arrayParametros['ESTADO']);
            $ntvQuery->setParameter("TELEFONOS", $arrayParametros['FORMA_CONTACTO_TT']);
            $ntvQuery->setParameter("CORREO",    $arrayParametros['FORMA_CONTACTO_EM']);
            $ntvQuery->setParameter("ROLES",     $arrayParametros['ROLES']);
            $ntvQuery->setParameter("FIJO",      $arrayParametros['FORMA_CONTACTO_TF']);
            $ntvQuery->setParameter("MOVILES",   $arrayParametros['FORMA_CONTACTO_TM']);

            if($arrayParametros['SERVICIO'] != 'Todos')
            {
                $strServicio = "AND   S.ESTADO =           :SERVICIO ";
                $ntvQuery->setParameter("SERVICIO", $arrayParametros['SERVICIO']);
            }
            else
            {
                $arrayEstadosServicio = array('Activo',         'Asignada', 'AsignadoTarea',  'Detenido',    'EnPruebas',
                                              'EnVerificacion', 'Inactivo', 'Preplanificada', 'Planificada', 'Replanificada');
                $strServicio = "AND   S.ESTADO                        IN           (:SERVICIO) ";
                $ntvQuery->setParameter('SERVICIO', $arrayEstadosServicio);
            }
            
            if($arrayParametros['JURISDICCION'] != '')
            {
                $strJurisdiccion = "AND   J.ID_JURISDICCION  =           :JURISDICCION ";
                $ntvQuery->setParameter("JURISDICCION", $arrayParametros['JURISDICCION']);
            }
            
            if($arrayParametros['PLAN'] != '')
            {
                $strNombrePlan = "AND UPPER(PC.NOMBRE_PLAN)           LIKE UPPER(:PLAN)";
                $ntvQuery->setParameter("PLAN", '%'.$arrayParametros['PLAN'].'%');
            }
            
            if($arrayParametros['SECTOR'] != '')
            {
                $strNombreSector = "AND   UPPER(SC.NOMBRE_SECTOR)     LIKE UPPER(:SECTOR)";
                $ntvQuery->setParameter("SECTOR",    '%'.$arrayParametros['SECTOR'].'%');
            }
            
            if($arrayParametros['DIRECCION'] != '')
            {
                $strDireccion = "AND  ((PE.DIRECCION IS NOT NULL AND UPPER(PE.DIRECCION)             LIKE  UPPER(:DIRECCION))
                               OR (PE.DIRECCION_TRIBUTARIA IS NOT NULL AND UPPER(PE.DIRECCION_TRIBUTARIA)  LIKE  UPPER(:DIRECCION)) )";
                $ntvQuery->setParameter("DIRECCION", '%'.$arrayParametros['DIRECCION'].'%');
            }
            
            if($arrayParametros['FORMA_PAGO'] != 'Todas')
            {
                $strFormaPago  = "AND   FP.ID_FORMA_PAGO = :FORMA_PAGO ";
                $strFormaPago2 = "WHERE FP.ID_FORMA_PAGO = :FORMA_PAGO ";
                $ntvQuery->setParameter("FORMA_PAGO", $arrayParametros['FORMA_PAGO']);
            }
            
            if($arrayParametros['NOMBRES'] != '')
            {
                $strNombres = "AND   UPPER(PE.NOMBRES)          LIKE  UPPER(:NOMBRES) ";
                $ntvQuery->setParameter("NOMBRES", '%'.$arrayParametros['NOMBRES'].'%');
            }
            
            if($arrayParametros['APELLIDOS'] != '')
            {
                $strApellidos = "AND   UPPER(PE.APELLIDOS)      LIKE  UPPER(:APELLIDOS) ";
                $ntvQuery->setParameter("APELLIDOS", '%'.$arrayParametros['APELLIDOS'].'%');
            }
            
            if($arrayParametros['RAZON_SOCIAL'] != '')
            {
                $strRazonSocial = "AND   UPPER(PE.RAZON_SOCIAL) LIKE  UPPER(:RAZON_SOCIAL) ";
                $ntvQuery->setParameter("RAZON_SOCIAL", '%'.$arrayParametros['RAZON_SOCIAL'].'%');
            }

            $strQuery = "SELECT * FROM 
                            (
                            WITH CLIENTES AS
                            (
                            SELECT  PE.ID_PERSONA,
                                    CASE
                                    WHEN TRIM(PE.RAZON_SOCIAL) IS NULL
                                    THEN CONCAT(UPPER(TRIM(PE.NOMBRES)), CONCAT(' ',UPPER(TRIM(PE.APELLIDOS)) ) )
                                    ELSE UPPER(TRIM(PE.RAZON_SOCIAL)) END CLIENTE
  
                                FROM INFO_SERVICIO S
                                LEFT  JOIN INFO_PLAN_CAB               PC   ON PC.ID_PLAN                = S.PLAN_ID
                                INNER JOIN INFO_PUNTO                  P    ON P.ID_PUNTO                = S.PUNTO_ID
                                INNER JOIN INFO_PERSONA_EMPRESA_ROL    PER  ON PER.ID_PERSONA_ROL        = P.PERSONA_EMPRESA_ROL_ID
                                INNER JOIN INFO_CONTRATO               CO   ON CO.PERSONA_EMPRESA_ROL_ID = PER.ID_PERSONA_ROL
                                INNER JOIN ADMI_FORMA_PAGO             FP   ON FP.ID_FORMA_PAGO          = CO.FORMA_PAGO_ID
                                INNER JOIN INFO_EMPRESA_ROL            ER   ON ER.ID_EMPRESA_ROL         = PER.EMPRESA_ROL_ID
                                INNER JOIN INFO_EMPRESA_GRUPO          EG   ON EG.COD_EMPRESA            = ER.EMPRESA_COD
                                INNER JOIN INFO_PERSONA                PE   ON PE.ID_PERSONA             = PER.PERSONA_ID

                                INNER JOIN INFO_PERSONA_FORMA_CONTACTO PFC1 ON PFC1.PERSONA_ID           = PE.ID_PERSONA
                                INNER JOIN ADMI_FORMA_CONTACTO         FC1  ON FC1.ID_FORMA_CONTACTO     = PFC1.FORMA_CONTACTO_ID

                                INNER JOIN INFO_PERSONA_FORMA_CONTACTO PFC2 ON PFC2.PERSONA_ID           = PE.ID_PERSONA
                                INNER JOIN ADMI_FORMA_CONTACTO         FC2  ON FC2.ID_FORMA_CONTACTO     = PFC2.FORMA_CONTACTO_ID

                                INNER JOIN ADMI_SECTOR                 SC   ON SC.ID_SECTOR              = P.SECTOR_ID
                                INNER JOIN ADMI_JURISDICCION           J    ON J.OFICINA_ID              = PER.OFICINA_ID
                                INNER JOIN ADMI_ROL                    AR   ON AR.ID_ROL                 = ER.ROL_ID
                                WHERE       
                                      EG.PREFIJO                      =          :EMPRESA
                                AND   PFC1.ESTADO                     =          :ESTADO
                                AND   PFC2.ESTADO                     =          :ESTADO
                                AND   FC1.CODIGO                      IN        (:TELEFONOS)
                                AND   FC2.CODIGO                      IN        (:CORREO)
                                AND   AR.DESCRIPCION_ROL              IN        (:ROLES)
                                $strServicio
                                $strJurisdiccion
                                $strDireccion
                                $strNombrePlan
                                $strNombreSector
                                $strFormaPago
                                $strNombres
                                $strApellidos
                                $strRazonSocial
                                GROUP BY    PE.ID_PERSONA,
                                            PE.NOMBRES,
                                            PE.APELLIDOS,
                                            PE.RAZON_SOCIAL,
                                            FP.DESCRIPCION_FORMA_PAGO
                                ),
                                FIJO AS
                                (
                                    SELECT PFC1.PERSONA_ID, PFC1.VALOR
                                    FROM       INFO_PERSONA_FORMA_CONTACTO PFC1
                                    INNER JOIN ADMI_FORMA_CONTACTO FC1 ON FC1.ID_FORMA_CONTACTO = PFC1.FORMA_CONTACTO_ID
                                    INNER JOIN CLIENTES CL ON CL.ID_PERSONA = PFC1.PERSONA_ID
                                    WHERE FC1.CODIGO = :FIJO
                                      AND PFC1.ESTADO  = :ESTADO
                                ),
                                MOVIL AS
                                (SELECT PFC2.PERSONA_ID,
                                  PFC2.VALOR
                                FROM INFO_PERSONA_FORMA_CONTACTO PFC2
                                INNER JOIN ADMI_FORMA_CONTACTO FC2
                                ON FC2.ID_FORMA_CONTACTO = PFC2.FORMA_CONTACTO_ID
                                INNER JOIN CLIENTES CL
                                ON CL.ID_PERSONA  = PFC2.PERSONA_ID
                                WHERE FC2.CODIGO IN (:MOVILES)
                                AND PFC2.ESTADO   = :ESTADO
                                ),
                                FORMA_PAGO AS
                                (
                                    SELECT P.ID_PERSONA, FP.DESCRIPCION_FORMA_PAGO FORMA_PAGO
                                    FROM       CLIENTES P
                                    INNER JOIN INFO_PERSONA_EMPRESA_ROL PER ON PER.PERSONA_ID            = P.ID_PERSONA
                                    INNER JOIN INFO_CONTRATO            CO  ON CO.PERSONA_EMPRESA_ROL_ID = PER.ID_PERSONA_ROL
                                    INNER JOIN ADMI_FORMA_PAGO          FP  ON FP.ID_FORMA_PAGO          = CO.FORMA_PAGO_ID
                                    $strFormaPago2
                                    GROUP BY P.ID_PERSONA, FP.DESCRIPCION_FORMA_PAGO
                                )
                                (
                                    SELECT CL.CLIENTE, TRIM(F.VALOR) FIJO, TRIM(M.VALOR) MOVIL, FP.FORMA_PAGO,
                                           ROW_NUMBER() OVER(PARTITION BY CL.CLIENTE ORDER BY CL.CLIENTE) AS RowNumber
                                    FROM  CLIENTES CL
                                    LEFT  JOIN FIJO       F  ON F.PERSONA_ID  = CL.ID_PERSONA
                                    LEFT  JOIN MOVIL      M  ON M.PERSONA_ID  = CL.ID_PERSONA
                                    INNER JOIN FORMA_PAGO FP ON FP.ID_PERSONA = CL.ID_PERSONA
                                )
                            ) T
                          WHERE T.RowNumber = 1
                          ORDER BY 1 ";
            
            $rsmBuilder->addScalarResult('CLIENTE',    'cliente',        'string');
            $rsmBuilder->addScalarResult('FIJO',       'telefono_fijo',  'string');
            $rsmBuilder->addScalarResult('MOVIL',      'telefono_movil', 'string');
            $rsmBuilder->addScalarResult('FORMA_PAGO', 'forma_pago',     'string');

            $arrayResult['REGISTROS'] = $ntvQuery->setSQL($strQuery)->getResult();
        }
        catch(\Exception $ex)
        {
            $arrayResult['ERROR'] = 'ERROR: ' . $ex->getMessage();
        }
        return $arrayResult;
    }
    
    /**
     * getServiciosAprobCambioRazonSocial
     *
     * Metodo para obtener los servicios de todos los puntos Logines origenes del Cambio de Razon social 
     *
     * @author Anabelle Penaherrera <apenaherrera@telconet.ec>
     * @version 1.0 02-10-2015
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 12-11-2020 Se modifica la función para que permita listar servicios W+AP
     *
     * @param $arrayParametros
     * @return array
     */   
    public function getServiciosAprobCambioRazonSocial($arrayParametros)
    {
        $intIdPersonaEmpresaRol = $arrayParametros["idPersonaEmpresaRol"];
        $strEstadoServicio      = $arrayParametros["estadoServicio"];
        $strEstadoPerCaract     = $arrayParametros["estadoPerCaract"];
        $strPermiteWdbYAp       = $arrayParametros["permiteWdbYAp"];
        $strPrefijoEmpresa      = $arrayParametros["prefijoEmpresa"];
        try
        {
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery    = $this->_em->createNativeQuery(null, $objRsm);
            $strSelectCount = " SELECT COUNT(*) AS TOTAL ";
            $strSelect      = " SELECT DISTINCT SERVICIO.ID_SERVICIO, PUNTO.LOGIN, SERVICIO.CANTIDAD, SERVICIO.ESTADO AS ESTADO_SERVICIO,
                                TO_CHAR(SERVICIO.FE_CREACION, 'DD/MM/YYYY') AS FE_CREACION_SERVICIO, SERVICIO.PRECIO_VENTA, 
                                CASE
                                WHEN PERSONA_ORIGEN.RAZON_SOCIAL IS NOT NULL THEN
                                  PERSONA_ORIGEN.RAZON_SOCIAL
                                ELSE
                                  PERSONA_ORIGEN.NOMBRES || ' ' || PERSONA_ORIGEN.APELLIDOS
                                END NOMBRE_CLIENTE_ORIGEN,
                                CASE
                                WHEN PLAN.ID_PLAN IS NOT NULL THEN
                                  PLAN.NOMBRE_PLAN
                                ELSE
                                  PRODUCTO.DESCRIPCION_PRODUCTO
                                END DESCRIPCION_PLAN_PROD ";
            $strFromJoin    = " FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL PER
                                INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL_CARAC PERCARACT
                                ON PERCARACT.PERSONA_EMPRESA_ROL_ID = PER.ID_PERSONA_ROL
                                INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA CARACT
                                ON CARACT.ID_CARACTERISTICA = PERCARACT.CARACTERISTICA_ID
                                INNER JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
                                ON PUNTO.ID_PUNTO = COALESCE(TO_NUMBER(REGEXP_SUBSTR(PERCARACT.VALOR,'^\d+')),0)
                                INNER JOIN DB_COMERCIAL.INFO_SERVICIO SERVICIO
                                ON SERVICIO.PUNTO_ID = PUNTO.ID_PUNTO
                                INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL PER_ORIGEN
                                ON PER_ORIGEN.ID_PERSONA_ROL = PUNTO.PERSONA_EMPRESA_ROL_ID
                                INNER JOIN DB_COMERCIAL.INFO_PERSONA PERSONA_ORIGEN
                                ON PERSONA_ORIGEN.ID_PERSONA = PER_ORIGEN.PERSONA_ID
                                LEFT JOIN DB_COMERCIAL.INFO_PLAN_CAB PLAN
                                ON PLAN.ID_PLAN = SERVICIO.PLAN_ID
                                LEFT JOIN DB_COMERCIAL.ADMI_PRODUCTO PRODUCTO
                                ON PRODUCTO.ID_PRODUCTO = SERVICIO.PRODUCTO_ID
                                WHERE PER.ID_PERSONA_ROL = :idPersonaEmpresaRol
                                AND CARACT.DESCRIPCION_CARACTERISTICA = :descripcionCaractPcrs
                                AND PERCARACT.ESTADO = :estadoPerCaract ";
            $strWhereAdic   = "";
            $strOrderBy     = " ORDER BY SERVICIO.ID_SERVICIO ASC ";
            if(isset($strPermiteWdbYAp) && !empty($strPermiteWdbYAp) && $strPermiteWdbYAp === "SI"
                && isset($strPrefijoEmpresa) && !empty($strPrefijoEmpresa) && $strPrefijoEmpresa === "MD")
            {
                $strWhereAdic   .= " AND(
                                            (SERVICIO.ESTADO = :estadoServicio)
                                            OR
                                            EXISTS
                                            (SELECT DET.ID_PARAMETRO_DET
                                            FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
                                            INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
                                            ON DET.PARAMETRO_ID = CAB.ID_PARAMETRO
                                            WHERE CAB.NOMBRE_PARAMETRO = :nombreParam
                                            AND DET.VALOR1 = :valor1
                                            AND DET.VALOR2 = :valor2
                                            AND DET.VALOR3 = PRODUCTO.NOMBRE_TECNICO
                                            AND DET.VALOR4 = SERVICIO.ESTADO
                                            AND CAB.ESTADO = :estadoActivo
                                            AND DET.ESTADO = :estadoActivo )
                                        ) ";
                $objNtvQuery->setParameter('nombreParam', "PARAMETROS_ASOCIADOS_A_SERVICIOS_MD");
                $objNtvQuery->setParameter('valor1', "CAMBIO_RAZON_SOCIAL");
                $objNtvQuery->setParameter('valor2', "ESTADOS_SERVICIOS_X_PROD_FLUJO_PERSONALIZADO");
                $objNtvQuery->setParameter('estadoActivo', "Activo");
            }
            else
            {
                $strWhereAdic .= " AND SERVICIO.ESTADO = :estadoServicio ";
            }
            $objNtvQuery->setParameter('idPersonaEmpresaRol', $intIdPersonaEmpresaRol);
            $objNtvQuery->setParameter('descripcionCaractPcrs', 'PUNTO CAMBIO RAZON SOCIAL');
            $objNtvQuery->setParameter('estadoPerCaract', $strEstadoPerCaract);
            $objNtvQuery->setParameter('estadoServicio', $strEstadoServicio);
            
            $objRsm->addScalarResult('ID_SERVICIO', 'id', 'integer');
            $objRsm->addScalarResult('LOGIN', 'login', 'string');
            $objRsm->addScalarResult('NOMBRE_CLIENTE_ORIGEN', 'cliente', 'string');
            $objRsm->addScalarResult('DESCRIPCION_PLAN_PROD', 'descripcion', 'string');
            $objRsm->addScalarResult('CANTIDAD', 'cantidad', 'integer');
            $objRsm->addScalarResult('ESTADO_SERVICIO', 'estado', 'string');
            $objRsm->addScalarResult('PRECIO_VENTA', 'precio', 'float');
            $objRsm->addScalarResult('TOTAL', 'total', 'integer');
            
            $strQuery   = $strSelect . $strFromJoin . $strWhereAdic . $strOrderBy;
            $objNtvQuery->setSQL($strQuery);
            $intStart = 0;
            $intLimit = 0;
            if(isset($arrayParametros['start']) && !empty($arrayParametros['start']) && $arrayParametros['start'] > 0
                && isset($arrayParametros['limit']) && !empty($arrayParametros['limit']) && $arrayParametros['limit'] > 0)
            {
                $intStart = $arrayParametros['intStart'];
                $intLimit = $arrayParametros['limit'];
            }
            else
            {
                $intLimit = 10;
            }

            $objNtvQueryFinal   = $this->setQueryLimit($objNtvQuery, $intLimit, $intStart);
            $arrayRegistros     = $objNtvQueryFinal->getResult();

            $strQueryCount  = $strSelectCount. " FROM (". $strQuery. ") ";
            $objNtvQuery->setSQL($strQueryCount);
            $intTotal       = $objNtvQuery->getSingleScalarResult();
        }
        catch(\Exception $e)
        {
            error_log("No se pudo obtener los servicios por cambio de razón social ".$e->getMessage());
            $arrayRegistros = array();
            $intTotal       = 0;
        }
        $arrayResultado         = array("listado"   => $arrayRegistros,
                                        "total"     => $intTotal);
        return $arrayResultado;
    }
    
    /**
     * getPuntosAprobCambioRazonSocial
     *
     * Metodo para obtener los puntos Logines origenes de un Cambio de Razon social 
     *
     * @author Anabelle Penaherrera <apenaherrera@telconet.ec>
     * @version 1.0 05-10-2015
     *
     * @param integer $id_per_emp_rol,
     * @param integer $start
     * @param integer $limit
     * @param string  $estado
     * @return array
     */   
     public function getPuntosAprobCambioRazonSocial($id_per_emp_rol, $start, $limit, $estado)
    {               
        $query = $this->_em->createQuery("SELECT pto.id	 
        FROM 
                        schemaBundle:InfoPersonaEmpresaRol iper,
                        schemaBundle:InfoPersonaEmpresaRolCarac ipercar,
                        schemaBundle:AdmiCaracteristica carac,
                        schemaBundle:InfoPunto pto, 
                        schemaBundle:InfoServicio serv
                        WHERE iper.id =:id_per_emp_rol  
                         and iper.id = ipercar.personaEmpresaRolId
                         and carac.id = ipercar.caracteristicaId 
                         and carac.descripcionCaracteristica =:nomb_caract
                         and ipercar.estado =:estado
                         and pto.id=ipercar.valor
                         and pto.id=serv.puntoId
                         and serv.estado=:estado
                         group by pto.id
                         order by pto.id ASC");    
        $query->setParameters(array('id_per_emp_rol' => $id_per_emp_rol, 
                                    'estado'         => $estado,
                                    'nomb_caract'    => 'PUNTO CAMBIO RAZON SOCIAL'));        
        $total                  = count($query->getResult());
        $datos                  = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        $resultado['registros'] = $datos;
        $resultado['total']     = $total;        
        return $resultado;
    }

    
     /**
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0 06-07-2018 - Se obtiene información de la caracteristica OFFICE 
     *                           de un producto por idServicio.
     * 
     * @param Array $arrayParametros['intServicioId']           Int: Id del Servicio
     *                              ['strCaracteristica']       String: Caracteristica del servicio
     *                                
     * Costo del Query: 16
     * @since 1.0
     */
    
    public function getInfoCaractProducto($arrayParametros)
    {
        try
        {
            $intIdServicio              = $arrayParametros['intServicioId'];
            $strCaractProducto          = $arrayParametros['strCaracteristica'];
            
            $objRsmBuilder = new ResultSetMappingBuilder($this->_em);
            $ntvQuery      = $this->_em->createNativeQuery(null, $objRsmBuilder);

            $sql = "SELECT ADC.ID_PRODUCTO_CARACTERISITICA as IDPRODUCTOCARACTERISITICA,
                           AC.DESCRIPCION_CARACTERISTICA as DESCRIPCIONCARACTERISTICA
                    FROM   DB_COMERCIAL.INFO_SERVICIO ISE
                    JOIN   DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA ADC on ADC.PRODUCTO_ID= ISE.PRODUCTO_ID
                    JOIN   DB_COMERCIAL.ADMI_CARACTERISTICA AC on AC.ID_CARACTERISTICA=ADC.CARACTERISTICA_ID 
                    WHERE  AC.DESCRIPCION_CARACTERISTICA = :caractProducto
                    AND    ISE.ID_SERVICIO = :idServicio
                    AND    ADC.ESTADO      = :estadoAdmiProdCaract 
                    AND    AC.ESTADO       = :estadoAdmiCaract" ;

            $objRsmBuilder->addScalarResult('IDPRODUCTOCARACTERISITICA', 'idCaracteristica', 'string');
            $objRsmBuilder->addScalarResult('DESCRIPCIONCARACTERISTICA', 'caracteristica', 'string');

            $ntvQuery->setParameter('idServicio', $intIdServicio);
            $ntvQuery->setParameter('caractProducto', $strCaractProducto);
            $ntvQuery->setParameter('estadoAdmiProdCaract', 'Activo');
            $ntvQuery->setParameter('estadoAdmiCaract', 'Activo');
            $ntvQuery->setSQL($sql);  
        }
        catch(\Exception $e)
        {
            throw($e);
        }
                   
        return $ntvQuery->getOneOrNullResult();        
                    
    }


    /**
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0 25-07-2018 - Función que genera la factura del servicio cancelado NetlifeCloud.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 06-11-2020 - Se elimina el uso de transacciones innecesario para cuando se invoca un procedimiento de un paquete de base de datos
     *                           y además se agrega obtención de status y mensaje de dicho procedimiento
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 22-12-2020 - Se corrige los nombres de los parámetros enviados al procedimiento
     * 
     * @param Array $arrayParametros['intServicioId']           Int: Id del Servicio
     *                              ['strPrefijoEmpresa']       String: Prefijo de la empresa
     *                              ['strEmpresaCod']           String: Codigo de la empresa
     *                              ['strIp']                   String: Ip
     * @since 1.0
     */
    public function generarFacturaServicioCancelado($arrayParametros)
    {
        $intIdServicio              = $arrayParametros['intServicioId'];
        $strPrefijoEmpresa          = $arrayParametros['strPrefijoEmpresa'];
        $strEmpresaCod              = $arrayParametros['strEmpresaCod'];
        $strClientIp                = $arrayParametros['strIp'];
        $strUsrCreacionFact         = 'telcos_cancelacion';
        $strStatus                  = str_repeat(' ', 5);
        $strMsjError                = str_repeat(' ', 1000);
        try
        {   
            // Generación de factura por cancelación de servicio     
            $strSql             = "BEGIN DB_FINANCIERO.FNCK_FACTURACION.P_FACT_OFFICE365_CANCEL(:Pn_ServicioId, "
                                                                                             . ":Pv_PrefijoEmpresa, "
                                                                                             . ":Pv_EmpresaCod, "
                                                                                             . ":Pv_UsrCreacion, "
                                                                                             . ":Pv_Ip, "
                                                                                             . ":Pv_Status, "
                                                                                             . ":Pv_Mensaje); END;";
            $objStmt   = $this->_em->getConnection()->prepare($strSql);
            $objStmt->bindParam('Pn_ServicioId', $intIdServicio);
            $objStmt->bindParam('Pv_PrefijoEmpresa', $strPrefijoEmpresa);
            $objStmt->bindParam('Pv_EmpresaCod', $strEmpresaCod);
            $objStmt->bindParam('Pv_UsrCreacion', $strUsrCreacionFact);
            $objStmt->bindParam('Pv_Ip', $strClientIp);
            $objStmt->bindParam('Pv_Status', $strStatus);
            $objStmt->bindParam('Pv_Mensaje', $strMsjError);
            $objStmt->execute();
            if(strlen(trim($strStatus)) > 0)
            {
                $strStatusRespuesta     = $strStatus;
                $strMensajeRespuesta    = $strMsjError;
            }
            else
            {
                $strStatusRespuesta     = "ERROR";
                $strMensajeRespuesta    = "No se ha podido obtener la respuesta del procedimiento para generar la factura de servicio NetlifeCloud "
                                          ."cancelados con ID SERVICIO ".$intIdServicio." como parámetro";
            }
        }
        catch(\Exception $e)
        {
            $strStatusRespuesta     = "ERROR";
            $strMensajeRespuesta    = "Ha ocurrido un error inesperado al invocar al procedimiento que genera la factura de servicio NetlifeCloud "
                                      ."cancelados con ID SERVICIO ".$intIdServicio." como parámetro";
            error_log("Error al invocar la función generarFacturaServicioCancelado ".$e->getMessage());
        }
        $arrayRespuesta = array("status"    => $strStatusRespuesta,
                                "mensaje"   => $strMensajeRespuesta);           
        return $arrayRespuesta;
    }    
    
    /**
     * Documentación para el método 'getServiciosDatosByPunto'.
     *
     * Método utilizado para obtener los servicios del punto origen de un enlace de datos
     *
     * @param string idPunto id del punto origen de un enlace de datos
     * @param string nombreTecnico nombre tecnico del producto del punto origen de un enlace de datos
     * @param int start min de registros a buscar.
     * @param int limit max de registros a buscar.
     *
     * @return array [ 
     *                 'id'       : ''
     *                 'estado'   : ''
     *                 'servicio' : ''
     *                 'producto' : ''
     *               ]
     *
     * @author Kenneth Jimenez <kjimenez@telconet.ec>
     * @version 1.0 15-12-2015
     * @version 1.1 21-03-2015 Cambios para soportar la opcion de definicion de concentradores de datos
     * 
     * @author Anabelle Penaherrera <apenaherrera@telconet.ec>
     * @version 1.2 28-09-2016 
     * - Se Modifica para que se listen todos los servicios del Login Concentrador segun su clasificacion a la 
     *   que pertenezca su extremo, se listaran los servicios de Todos los Nombres Tecnicos de la misma Clasificacion.
     * - Se elimina parametro "esConcentrador" ya que nunca es usado en el Consulta del Repositorio getServiciosDatosByPunto
     * - Se elimina parametro nombreTecnico ya que el requerimiento cambio y ya no deben listarse los Servicios con mismo nombre Tecnico 
     *   del servicio del Login extremo.
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.3 07-04-2017 - Se mostrara solo Concentradores para enlazar que sean de tipo enlace PRINCIPAL
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.4 18-05-2018 - Se mostrara todos los concentradores excepto los que tengan nombre tecnica L2MPLS
     * 
    */  
    public function getServiciosDatosByPunto($idPunto,$strClasificacion,$start,$limit)
    {
        $arrayResultado = array(
                                'total' => 0,
                                'data'  => array()
                               );
        
        if($idPunto>0 && $strClasificacion!="")
        {
            $queryCount = $this->_em->createQuery(null);
            $queryData  = $this->_em->createQuery(null);
            
            $selectCount = "select count(s.id) ";
            $select      = "select 
                                    s.id,
                                    s.estado,
                                    p.descripcionProducto as producto,
                                    s.descripcionPresentaFactura as descripcionProducto,                                    
                                    st.ultimaMillaId,
                                    p.nombreTecnico as tipoNombreTecnico,
                                    s.loginAux,
                                    st.tipoEnlace,
                                    'false' enable ";
            $dql         = "from 
                                    schemaBundle:InfoServicio s,
                                    schemaBundle:InfoServicioTecnico st,
                                    schemaBundle:AdmiProducto p
                                where 
                                    p.id            = s.productoId
                                and s.estado      not in (:estados)                                
                                and p.clasificacion = :strClasificacion
                                and s.id            = st.servicioId
                                and s.puntoId       = :idPunto 
                                and st.tipoEnlace   = :tipoEnlace
                                and p.nombreTecnico <> :nombreTecnico
                                and s.id not in (
                                                select sd.id
                                                from 
                                                    schemaBundle:AdmiCaracteristica caracd,
                                                    schemaBundle:AdmiProductoCaracteristica apcd,
                                                    schemaBundle:InfoServicio sd,
                                                    schemaBundle:AdmiProducto pd,
                                                    schemaBundle:InfoServicioProdCaract spcd
                                                where 
                                                    pd.id = sd.productoId
                                                and apcd.caracteristicaId = caracd.id
                                                and sd.id                 = spcd.servicioId
                                                and spcd.productoCaracterisiticaId   = apcd.id
                                                and spcd.estado           = :estado 
                                                and spcd.valor            > :valor
                                                and caracd.descripcionCaracteristica = :descripcionCaracteristica
                                                and sd.estado not in (:estados)
                                                and pd.clasificacion = :strClasificacion
                                                and sd.puntoId = :idPunto
                                                
                                                )";
            
            $queryParameters['idPunto']                   = $idPunto;
            
            $queryParameters['strClasificacion']          = $strClasificacion;
            
            $queryParameters['descripcionCaracteristica'] =  'ENLACE_DATOS';
            
            $queryParameters['tipoEnlace']                = 'PRINCIPAL';
            
            $queryParameters['valor']                     =  '0';
            
            $queryParameters['estado']                    =  'Activo';
            
            $queryParameters['nombreTecnico']             =  'L2MPLS';
            
            $queryParameters['estados']                   = array('Anulado',
                                                                  'AnuladoMigra',
                                                                  'Cancel',
                                                                  'Cancelado',
                                                                  'CanceladoLogico',
                                                                  'Eliminado',
                                                                  'Eliminado-Migra',
                                                                  'Rechazada',
                                                                  'Reubicado',
                                                                  'Trasladado');
            
            $queryCount->setParameters($queryParameters);
            $queryData->setParameters($queryParameters);
            //count
            $queryCount->setDQL($selectCount.$dql);             
            $countServicios = $queryCount->getSingleScalarResult();            
            
            //registros
            $queryData->setDQL($select.$dql);   
            if($start!='' && $limit!='') 
            {    
                $queryData->setFirstResult($start)->setMaxResults($limit);        
            }
                                    
            
            $arrayServicios = $queryData->getArrayResult();
            
            
            $arrayResultado = array(
                                    'total' => $countServicios ,
                                    'data'  => $arrayServicios
                                );
            
            

        }
        return $arrayResultado;
    }
    
    
    /**
     * getServiciosByCriterios
     *
     * Metodo encargado de obtener los servicios de acuerdo a los criterios ingresado por los usuarios
     * 
     * Costos:
     *   - Al validar por 'productoInternetPorLogin': 25
     *
     * @param array $arrayParametros [ 'estadosServicios'                 => 'Estados de los servicios a consultar'
     *                                 'productoInternetPorLogin'         => 'Se verifica si la validación se realizará por producto de internet'
     *                                 'login'                            => 'Login del punto asociado a los servicios a consultar'
     *                                 'nombreTecnicoProducto'            => 'Nombre tecnico del producto asociado a los servicios a consultar'
     *                                 'estadoActivo'                     => 'Texto con el estado activo'
     *                                 'empresaCod'                       => 'Código de la empresa a consultar'
     *                                 'inicio'                           => 'Parámetro de inicio de los registros a consultar'
     *                                 'limite'                           => 'Límite de cuantos registros se desea consultar'
     *                                 'intIdPuntoCliente'                => 'Id del punto asociados a los servicios a consultar'
     *                                 'arrayNombreTecnicoParametrizable' => (
     *                                                                         'strNombreParametroCab' => 'Nombre de la cabecera a consultar'
     *                                                                         'strModulo'             => 'Módulo de la cabecera a consultar'
     *                                                                         'strProceso'            => 'Proceso de la cabecera a consultar'
     *                                                                         'strValor1              => 'Valor 1 del detalle a consultar'
     *                                                                       ) Array que contiene los parámetros adecuados para consultar por un 
     *                                                                         conjunto de nombres técnicos asociados a los productos de los 
     *                                                                         servicios a consultar mediante el campo 'NOMBRE_TECNICO'
     *                                 'arrayClasificacionParametrizable' =>  (
     *                                                                         'strNombreParametroCab' => 'Nombre de la cabecera a consultar'
     *                                                                         'strModulo'             => 'Módulo de la cabecera a consultar'
     *                                                                         'strProceso'            => 'Proceso de la cabecera a consultar'
     *                                                                         'strValor1              => 'Valor 1 del detalle a consultar'
     *                                                                       ) Array que contiene los parámetros adecuados para consultar por un 
     *                                                                         conjunto de clasificaciones asociadas a los productos de los 
     *                                                                         servicios a consultar mediante el campo 'CLASIFICACION',
     *                                 'estadosServiciosNotIn'             => 'Array con los estados no incluidos en la búsqueda de los servicios' ]
     * 
     * @return array $arrayResultados [ 'registros', 'total' ]
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 10-12-2015
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 02-09-2016 - Se valida que si se envía login y empresaCod, y no productoInternetPorLogin realice la consulta de los servicios
     *                           correspondientes.
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.2 16-02-2017 - Se agregan núevos parámetros para la consulta de los servicios que son: 'intIdPuntoCliente',
     *                           'arrayNombreTecnicoParametrizable' y 'arrayClasificacionParametrizable'.
     *                           Los parámetros 'arrayNombreTecnicoParametrizable' y 'arrayClasificacionParametrizable' reciben un array con los
     *                           siguientes parámetros que son: 'strNombreParametroCab', 'strModulo', 'strProceso' y 'strValor1'
     * Costo del Query: 22
     * 
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.3 27-02-2017 - Se agrega parámetro 'estadosServiciosNotIn' para buscar servicios que no estén incluídos en los estados enviados en
     *                           dicho arreglo
     * Costo del Query: 29
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.4 28-02-2018 - Se filtra por el id punto.
     * 
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.5 22-06-2018 - Se agregan núevos parámetros para la consulta de los servicios: 'strValorUltimaMilla' pertenece al array
     *                           'arrayNombreTecnicoParametrizable'. Con lo cual me permite consultar la UM del servicio principal.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.6 06-11-2020 - Se agregan filtros para que no se realice la búsqueda de los servicios considerando el estado del punto solo para el 
     *                           caso de que el servicio W+AP sea de tipo orden T
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 11-02-2021 Se agrega validación para permitir realizar la consulta de servicios con los parámetros de estadosServicios 
     *                         y estadosServiciosNotIn
     * 
     */  
    public function getServiciosByCriterios( $arrayParametros )
    {
        $arrayResultados = array('registros' => array(), 'total' => 0);
        
        try
        {
            $query      = $this->_em->createQuery();
            $queryCount = $this->_em->createQuery();
            
            $strSelect      = "SELECT iser ";
            $strSelectCount = "SELECT COUNT(iser.id) ";
            $strFrom        = "FROM schemaBundle:InfoServicio iser ";
            $strWhere       = "WHERE iser.id IS NOT NULL ";
            $strOrderBy     = "ORDER By iser.estado ";

            if( isset($arrayParametros['estadosServicios']) && !empty($arrayParametros['estadosServicios']) )
            {
                $strWhere .= "AND iser.estado IN (:estadosServicios) ";
                
                $query->setParameter("estadosServicios",      $arrayParametros['estadosServicios']);
                $queryCount->setParameter("estadosServicios", $arrayParametros['estadosServicios']);
            }
            
            if( isset($arrayParametros['intIdPunto']) && !empty($arrayParametros['intIdPunto']))
            {
                $strWhere .= "AND iser.puntoId = :intIdPunto ";
                $query->setParameter("intIdPunto",      $arrayParametros['intIdPunto']);
                $queryCount->setParameter("intIdPunto", $arrayParametros['intIdPunto']);
            }
            if( isset($arrayParametros['estadosServiciosNotIn']) && !empty($arrayParametros['estadosServiciosNotIn']) )
            {
                $strWhere .= "AND iser.estado NOT IN (:estadosServiciosNotIn) ";
                
                $query->setParameter("estadosServiciosNotIn",      $arrayParametros['estadosServiciosNotIn']);
                $queryCount->setParameter("estadosServiciosNotIn", $arrayParametros['estadosServiciosNotIn']);
            }
            
            
            if( !empty($arrayParametros['login']) && !empty($arrayParametros['empresaCod']) && empty($arrayParametros['productoInternetPorLogin']) )
            {
                $strFrom  .= ", schemaBundle:InfoPunto ip ".
                             ", schemaBundle:InfoPersonaEmpresaRol iper, ".
                             "schemaBundle:InfoEmpresaRol ier ";
                $strWhere .= "AND ip.id = iser.puntoId ".
                             "AND iper.id = ip.personaEmpresaRolId ".
                             "AND ier.id = iper.empresaRolId ".
                             "AND ier.empresaCod = :intEmpresaCod ".
                             "AND ip.login = :strLogin ";

                $query->setParameter("strLogin",           $arrayParametros['login']);
                $query->setParameter("intEmpresaCod",      $arrayParametros['empresaCod']);
                $queryCount->setParameter("intEmpresaCod", $arrayParametros['empresaCod']);
                $queryCount->setParameter("strLogin",      $arrayParametros['login']);
            }
            
            if( isset($arrayParametros['productoInternetPorLogin']) )
            {
                if($arrayParametros['productoInternetPorLogin'] == 'S')
                {
                    $strWhere .= "AND ( iser.id IN ( 
                                                        SELECT iser2.id
                                                        FROM schemaBundle:InfoServicio iser2
                                                        JOIN iser2.puntoId ip2
                                                        JOIN iser2.productoId ap2 ";
                                      
                    if( isset($arrayParametros['arrayNombreTecnicoParametrizable']) && !empty($arrayParametros['arrayNombreTecnicoParametrizable']))
                    {                                
                        $arrayNombreTecnicoParametrizable = $arrayParametros['arrayNombreTecnicoParametrizable'];
                        if( isset($arrayNombreTecnicoParametrizable['strValorUltimaMilla']) 
                                && !empty($arrayNombreTecnicoParametrizable['strValorUltimaMilla']) )
                            {    
                                $strWhere .= " JOIN schemaBundle:InfoServicioTecnico isert WITH isert.servicioId = iser2.id ";   
                            }                        
                    }
                    
                    if( isset($arrayParametros['estadosServicios']) && !empty($arrayParametros['estadosServicios'])
                        && isset($arrayParametros['estadosServiciosNotIn']) && !empty($arrayParametros['estadosServiciosNotIn']))
                    {
                        $strWhere .= "WHERE iser2.estado IN (:estadosServicios) "
                                   . "AND iser2.estado NOT IN (:estadosServiciosNotIn)";
                    }
                    else if( isset($arrayParametros['estadosServicios']) && !empty($arrayParametros['estadosServicios']) )
                    {
                        $strWhere .= "WHERE iser2.estado IN (:estadosServicios) ";
                    }
                    else if( isset($arrayParametros['estadosServiciosNotIn']) && !empty($arrayParametros['estadosServiciosNotIn']) )
                    {
                        $strWhere .= "WHERE iser2.estado NOT IN (:estadosServiciosNotIn) ";
                    }

                    if( isset($arrayParametros['login']) && !empty($arrayParametros['login']) )
                    {
                        $strWhere .= " AND ip2.login = :login ";
                        $query->setParameter("login",      $arrayParametros['login']);
                        $queryCount->setParameter("login", $arrayParametros['login']);
                    }

                    if( isset($arrayParametros['intIdPuntoCliente']) && !empty($arrayParametros['intIdPuntoCliente']) )
                    {
                        $strWhere .= " AND ip2.id = :intIdPuntoCliente ";
                        $query->setParameter("intIdPuntoCliente",      $arrayParametros['intIdPuntoCliente']);
                        $queryCount->setParameter("intIdPuntoCliente", $arrayParametros['intIdPuntoCliente']);
                    }

                    if( isset($arrayParametros['nombreTecnicoProducto']) && !empty($arrayParametros['nombreTecnicoProducto']) )
                    {
                        $strWhere .= " AND ap2.nombreTecnico = :nombreTecnicoProducto ";
                        $query->setParameter("nombreTecnicoProducto",      $arrayParametros['nombreTecnicoProducto']);
                        $queryCount->setParameter("nombreTecnicoProducto", $arrayParametros['nombreTecnicoProducto']);
                    }

                    if( isset($arrayParametros['arrayNombreTecnicoParametrizable']) && !empty($arrayParametros['arrayNombreTecnicoParametrizable']) )
                    {
                        $arrayNombreTecnicoParametrizable = $arrayParametros['arrayNombreTecnicoParametrizable'];
                        
                        if( isset($arrayNombreTecnicoParametrizable['strNombreParametroCab'])
                            && !empty($arrayNombreTecnicoParametrizable['strNombreParametroCab'])
                            && isset($arrayNombreTecnicoParametrizable['strModulo'])
                            && !empty($arrayNombreTecnicoParametrizable['strModulo'])
                            && isset($arrayNombreTecnicoParametrizable['strProceso'])
                            && !empty($arrayNombreTecnicoParametrizable['strProceso'])
                            && isset($arrayNombreTecnicoParametrizable['strValor1'])
                            && !empty($arrayNombreTecnicoParametrizable['strValor1']))
                        {
                            $strWhere .= " AND ap2.nombreTecnico IN ( ".
                                         "                              SELECT apd.valor2 ".
                                         "                              FROM schemaBundle:AdmiParametroDet apd ".
                                         "                              JOIN apd.parametroId apc ".
                                         "                              WHERE apc.nombreParametro = :strNombreParametroCab ".
                                         "                              AND apc.modulo            = :strModulo ".
                                         "                              AND apc.proceso           = :strProceso ".
                                         "                              AND apd.valor1            = :strValorNombreTecnico ".
                                         "                              AND apd.estado            = :estadoActivo ".
                                         "                              AND apc.estado            = :estadoActivo ".
                                         "                          ) ";
                            $query->setParameter("strNombreParametroCab",      $arrayNombreTecnicoParametrizable['strNombreParametroCab']);
                            $query->setParameter("strModulo",                  $arrayNombreTecnicoParametrizable['strModulo']);
                            $query->setParameter("strProceso",                 $arrayNombreTecnicoParametrizable['strProceso']);
                            $query->setParameter("strValorNombreTecnico",      $arrayNombreTecnicoParametrizable['strValor1']);
                            $queryCount->setParameter("strNombreParametroCab", $arrayNombreTecnicoParametrizable['strNombreParametroCab']);
                            $queryCount->setParameter("strModulo",             $arrayNombreTecnicoParametrizable['strModulo']);
                            $queryCount->setParameter("strProceso",            $arrayNombreTecnicoParametrizable['strProceso']);
                            $queryCount->setParameter("strValorNombreTecnico", $arrayNombreTecnicoParametrizable['strValor1']);
                            
                            if( isset($arrayNombreTecnicoParametrizable['strValorUltimaMilla']) 
                                && !empty($arrayNombreTecnicoParametrizable['strValorUltimaMilla']) )
                            {                                                               
                                $strWhere .= " AND isert.ultimaMillaId  IN ( ".
                                         "                              SELECT apd_um.valor2 ".
                                         "                              FROM schemaBundle:AdmiParametroDet apd_um ".
                                         "                              JOIN apd_um.parametroId apc_um ".
                                         "                              WHERE apc_um.nombreParametro = :strNombreParametroCab ".
                                         "                              AND apc_um.modulo            = :strModulo ".
                                         "                              AND apc_um.proceso           = :strProceso ".
                                         "                              AND apd_um.valor1            = :strValorUltimaMilla ".
                                         "                              AND apd_um.estado            = :estadoActivo ".
                                         "                              AND apc_um.estado            = :estadoActivo ".
                                         "                          ) ";
                                
                                $query->setParameter("strValorUltimaMilla",      $arrayNombreTecnicoParametrizable['strValorUltimaMilla']);
                                $queryCount->setParameter("strValorUltimaMilla", $arrayNombreTecnicoParametrizable['strValorUltimaMilla']);
                            }

                        }
                        else
                        {
                            throw new \Exception("No se ha enviado los parámetros correspondientes para consultar por el parámetro ".
                                                 "arrayNombreTecnicoParametrizable");
                        }//( isset($arrayNombreTecnicoParametrizable['strNombreParametroCab'])...
                    }//(isset($arrayParametros['arrayNombreTecnicoParametrizable']) && !empty($arrayParametros['arrayNombreTecnicoParametrizable']))
                    
                    if( isset($arrayParametros['arrayClasificacionParametrizable']) && !empty($arrayParametros['arrayClasificacionParametrizable']) )
                    {
                        $arrayClasificacionParametrizable = $arrayParametros['arrayClasificacionParametrizable'];
                        
                        if( isset($arrayClasificacionParametrizable['strNombreParametroCab'])
                            && !empty($arrayClasificacionParametrizable['strNombreParametroCab'])
                            && isset($arrayClasificacionParametrizable['strModulo'])
                            && !empty($arrayClasificacionParametrizable['strModulo'])
                            && isset($arrayClasificacionParametrizable['strProceso'])
                            && !empty($arrayClasificacionParametrizable['strProceso'])
                            && isset($arrayClasificacionParametrizable['strValor1'])
                            && !empty($arrayClasificacionParametrizable['strValor1']))
                        {
                            $strWhere .= " AND ap2.clasificacion IN ( ".
                                         "                              SELECT apd.valor2 ".
                                         "                              FROM schemaBundle:AdmiParametroDet apd ".
                                         "                              JOIN apd.parametroId apc ".
                                         "                              WHERE apc.nombreParametro = :strNombreParametroCab ".
                                         "                              AND apc.modulo            = :strModulo ".
                                         "                              AND apc.proceso           = :strProceso ".
                                         "                              AND apd.valor1            = :strValorClasificacion ".
                                         "                              AND apd.estado            = :estadoActivo ".
                                         "                              AND apc.estado            = :estadoActivo ".
                                         "                          ) ";
                            $query->setParameter("strNombreParametroCab",      $arrayClasificacionParametrizable['strNombreParametroCab']);
                            $query->setParameter("strModulo",                  $arrayClasificacionParametrizable['strModulo']);
                            $query->setParameter("strProceso",                 $arrayClasificacionParametrizable['strProceso']);
                            $query->setParameter("strValorClasificacion",      $arrayClasificacionParametrizable['strValor1']);
                            $queryCount->setParameter("strNombreParametroCab", $arrayClasificacionParametrizable['strNombreParametroCab']);
                            $queryCount->setParameter("strModulo",             $arrayClasificacionParametrizable['strModulo']);
                            $queryCount->setParameter("strProceso",            $arrayClasificacionParametrizable['strProceso']);
                            $queryCount->setParameter("strValorClasificacion", $arrayClasificacionParametrizable['strValor1']);
                        }
                        else
                        {
                            throw new \Exception("No se ha enviado los parámetros correspondientes para consultar por el parámetro ".
                                                 "arrayClasificacionParametrizable");
                        }//( isset($arrayClasificacionParametrizable['strNombreParametroCab'])...
                    }//(isset($arrayParametros['arrayClasificacionParametrizable']) && !empty($arrayParametros['arrayClasificacionParametrizable']))
                    
                    if(isset($arrayParametros['omiteEstadoPunto']) && !empty($arrayParametros['omiteEstadoPunto']) 
                        && $arrayParametros['omiteEstadoPunto'] === "SI" )
                    {
                        $strWhere .= " ";
                    }
                    else
                    {
                        $strWhere .= " AND ip2.estado = :estadoActivo ";
                    }
                    $strWhere .= " AND ap2.estado = :estadoActivo ".
                                 " AND ap2.empresaCod = :empresaCod ".
                                 " GROUP BY iser2.id ".
                                 " ) ".
                                 " OR iser.id IN ( ".
                                 " SELECT iser3.id ".
                                 " FROM schemaBundle:InfoServicio iser3 ";                                                    
                            
                    if( isset($arrayParametros['arrayNombreTecnicoParametrizable']) && !empty($arrayParametros['arrayNombreTecnicoParametrizable']))
                    {                                
                        $arrayNombreTecnicoParametrizable = $arrayParametros['arrayNombreTecnicoParametrizable'];
                        if( isset($arrayNombreTecnicoParametrizable['strValorUltimaMilla']) 
                                && !empty($arrayNombreTecnicoParametrizable['strValorUltimaMilla']) )
                            {    
                                $strWhere .= " JOIN schemaBundle:InfoServicioTecnico isert3 WITH isert3.servicioId = iser3.id ";
                            }
                    }
                    $strWhere .= "      ,schemaBundle:InfoPunto ip3, ".
                                 "      schemaBundle:InfoPlanCab ipc3, ".
                                 "      schemaBundle:InfoPlanDet ipd3, ".
                                 "      schemaBundle:AdmiProducto ap3 ".
                                 " WHERE ip3.id = iser3.puntoId ".
                                 " AND ipc3.id = iser3.planId ".
                                 " AND ipd3.planId = ipc3.id ".
                                 " AND ap3.id = ipd3.productoId ";
                    
                    if( isset($arrayParametros['estadosServicios']) && !empty($arrayParametros['estadosServicios']) )
                    {
                        $strWhere .= " AND iser3.estado IN (:estadosServicios) ";
                    }

                    if( isset($arrayParametros['estadosServiciosNotIn']) && !empty($arrayParametros['estadosServiciosNotIn']) )
                    {
                        $strWhere .= " AND iser3.estado NOT IN (:estadosServiciosNotIn) ";
                    }

                    if( isset($arrayParametros['login']) && !empty($arrayParametros['login']) )
                    {
                        $strWhere .= " AND ip3.login = :login ";
                    }

                    if( isset($arrayParametros['intIdPuntoCliente']) && !empty($arrayParametros['intIdPuntoCliente']) )
                    {
                        $strWhere .= " AND ip3.id = :intIdPuntoCliente ";
                    }

                    if( isset($arrayParametros['nombreTecnicoProducto']) && !empty($arrayParametros['nombreTecnicoProducto']) )
                    {
                        $strWhere .= " AND ap3.nombreTecnico = :nombreTecnicoProducto ";
                    }
                    
                    if( isset($arrayParametros['arrayNombreTecnicoParametrizable']) && !empty($arrayParametros['arrayNombreTecnicoParametrizable']) )
                    {
                        $arrayNombreTecnicoParametrizable = $arrayParametros['arrayNombreTecnicoParametrizable'];
                        
                        if( isset($arrayNombreTecnicoParametrizable['strNombreParametroCab'])
                            && !empty($arrayNombreTecnicoParametrizable['strNombreParametroCab'])
                            && isset($arrayNombreTecnicoParametrizable['strModulo'])
                            && !empty($arrayNombreTecnicoParametrizable['strModulo'])
                            && isset($arrayNombreTecnicoParametrizable['strProceso'])
                            && !empty($arrayNombreTecnicoParametrizable['strProceso'])
                            && isset($arrayNombreTecnicoParametrizable['strValor1'])
                            && !empty($arrayNombreTecnicoParametrizable['strValor1']))
                        {
                            $strWhere .= " AND ap3.nombreTecnico IN ( ".
                                         "                              SELECT apd_s.valor2 ".
                                         "                              FROM schemaBundle:AdmiParametroDet apd_s ".
                                         "                              JOIN apd_s.parametroId apc_s ".
                                         "                              WHERE apc_s.nombreParametro = :strNombreParametroCab ".
                                         "                              AND apc_s.modulo            = :strModulo ".
                                         "                              AND apc_s.proceso           = :strProceso ".
                                         "                              AND apd_s.valor1            = :strValorNombreTecnico ".
                                         "                              AND apd_s.estado            = :estadoActivo ".
                                         "                              AND apc_s.estado            = :estadoActivo ".
                                         "                          ) ";
                            
                            if( isset($arrayNombreTecnicoParametrizable['strValorUltimaMilla']) 
                                && !empty($arrayNombreTecnicoParametrizable['strValorUltimaMilla']) )
                            {                                                                
                                $strWhere .= " AND isert3.ultimaMillaId  IN ( ".
                                         "                              SELECT apd_um2.valor2 ".
                                         "                              FROM schemaBundle:AdmiParametroDet apd_um2 ".
                                         "                              JOIN apd_um2.parametroId apc_um2 ".
                                         "                              WHERE apc_um2.nombreParametro = :strNombreParametroCab ".
                                         "                              AND apc_um2.modulo            = :strModulo ".
                                         "                              AND apc_um2.proceso           = :strProceso ".
                                         "                              AND apd_um2.valor1            = :strValorUltimaMilla ".
                                         "                              AND apd_um2.estado            = :estadoActivo ".
                                         "                              AND apc_um2.estado            = :estadoActivo ".
                                         "                          ) ";
                                
                                $query->setParameter("strValorUltimaMilla",      $arrayNombreTecnicoParametrizable['strValorUltimaMilla']);
                                $queryCount->setParameter("strValorUltimaMilla", $arrayNombreTecnicoParametrizable['strValorUltimaMilla']);
                            }
                            
                        }
                        else
                        {
                            throw new \Exception("No se ha enviado los parámetros correspondientes para consultar por el parámetro ".
                                                 "arrayNombreTecnicoParametrizable");
                        }//( isset($arrayNombreTecnicoParametrizable['strNombreParametroCab'])...
                    }//(isset($arrayParametros['arrayNombreTecnicoParametrizable']) && !empty($arrayParametros['arrayNombreTecnicoParametrizable']))
                    
                    if( isset($arrayParametros['arrayClasificacionParametrizable']) && !empty($arrayParametros['arrayClasificacionParametrizable']) )
                    {
                        $arrayClasificacionParametrizable = $arrayParametros['arrayClasificacionParametrizable'];
                        
                        if( isset($arrayClasificacionParametrizable['strNombreParametroCab'])
                            && !empty($arrayClasificacionParametrizable['strNombreParametroCab'])
                            && isset($arrayClasificacionParametrizable['strModulo'])
                            && !empty($arrayClasificacionParametrizable['strModulo'])
                            && isset($arrayClasificacionParametrizable['strProceso'])
                            && !empty($arrayClasificacionParametrizable['strProceso'])
                            && isset($arrayClasificacionParametrizable['strValor1'])
                            && !empty($arrayClasificacionParametrizable['strValor1']))
                        {
                            $strWhere .= " AND ap3.clasificacion IN ( ".
                                         "                              SELECT apd_s.valor2 ".
                                         "                              FROM schemaBundle:AdmiParametroDet apd_s ".
                                         "                              JOIN apd_s.parametroId apc_s ".
                                         "                              WHERE apc.nombreParametro = :strNombreParametroCab ".
                                         "                              AND apc_s.modulo            = :strModulo ".
                                         "                              AND apc_s.proceso           = :strProceso ".
                                         "                              AND apd_s.valor1            = :strValorClasificacion ".
                                         "                              AND apd_s.estado            = :estadoActivo ".
                                         "                              AND apc_s.estado            = :estadoActivo ".
                                         "                          ) ";
                        }
                        else
                        {
                            throw new \Exception("No se ha enviado los parámetros correspondientes para consultar por el parámetro ".
                                                 "arrayClasificacionParametrizable");
                        }//( isset($arrayClasificacionParametrizable['strNombreParametroCab'])...
                    }//(isset($arrayParametros['arrayClasificacionParametrizable']) && !empty($arrayParametros['arrayClasificacionParametrizable']))

                    if(isset($arrayParametros['omiteEstadoPunto']) && !empty($arrayParametros['omiteEstadoPunto']) 
                        && $arrayParametros['omiteEstadoPunto'] === "SI" )
                    {
                        $strWhere .= " ";
                    }
                    else
                    {
                        $strWhere .= " AND ip3.estado = :estadoActivo ";
                    }
                    $strWhere .= " AND ap3.estado = :estadoActivo ".
                                 " AND ap3.empresaCod = :empresaCod ".
                                 " GROUP BY iser3.id ".
                                 " ) ) ";

                    $query->setParameter("estadoActivo", $arrayParametros['estadoActivo']);
                    $query->setParameter("empresaCod",   $arrayParametros['empresaCod']);

                    $queryCount->setParameter("estadoActivo", $arrayParametros['estadoActivo']);
                    $queryCount->setParameter("empresaCod",   $arrayParametros['empresaCod']);
                }//($arrayParametros['productoInternetPorLogin'] == 'S')
            }//( isset($arrayParametros['productoInternetPorLogin']) )

            $strDql      = $strSelect.$strFrom.$strWhere.$strOrderBy;
            $strDqlCount = $strSelectCount.$strFrom.$strWhere;

            $query->setDQL($strDql);
            $queryCount->setDQL($strDqlCount);
            
            if( isset($arrayParametros['inicio']) )
            {
                if($arrayParametros['inicio'])
                {
                    $query->setFirstResult($arrayParametros['inicio']);
                }
            }

            if( !empty($arrayParametros['limite']) )
            {
                $query->setMaxResults($arrayParametros['limite']);
            }

            $arrayResultados['registros'] = $query->getResult();
            $arrayResultados['total']     = $queryCount->getSingleScalarResult();
        }
        catch(\Exception $e)
        {
            throw($e);
        }
        
        return $arrayResultados;
    }
    
        /**
     * Documentación para el método 'getCaracteristicaServicio'.         
     * Devuelve el objeto de INFO_SERVICIO_PROD_CARACT 
     * @param $arrayParametros [ intIdServProdCaract           Id del SPC
     *                           intIdServicio                 Id del Servicio
     *                           strDescripcionCaracteristica  descripcion de la Caracteristica
     *                           strNombreTecnico              Nombre Tecnico
     *                           strValorSpc                   Valor de la Caracteristica
     *                           strEstadoSpc                  Estado del Ser_prod_carac
     *                           strEstadoServ                 Estado del Servicio
     *                           strEstadoProdC                Estado de la Caracteristica en el producto
     *                          ]
     * 
     * @return $arrayServicios   Array de servicios
     * 
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 22-06-2018 
     */     
    public function getCaracteristicaServicio($arrayParametros)
    {
        $objQuery           = $this->_em->createQuery();
        $objServicioProdC   = null;
        $strQuery           = "";
        try
        {
            $strQuery = "select servpc
                         from schemaBundle:InfoServicio serv, 
                         schemaBundle:InfoServicioProdCaract servpc, 
                         schemaBundle:AdmiProductoCaracteristica prodc, 
                         schemaBundle:AdmiProducto prod,
                         schemaBundle:AdmiCaracteristica caract
                         where serv.id                        = servpc.servicioId
                         and servpc.productoCaracterisiticaId = prodc.id
                         and prodc.productoId                 = prod.id
                         and prodc.caracteristicaId           = caract.id ";
            
            if (!empty($arrayParametros['intIdServProdCaract']))
            {
                $strQuery .= "and servpc.id = :intIdServProdCaractParam ";
                $objQuery->setParameter("intIdServProdCaractParam",  $arrayParametros['intIdServProdCaract']);
            }
            if (!empty($arrayParametros['intIdServicio']))
            {
                $strQuery .= "and serv.id = :intIdServicioParam ";
                $objQuery->setParameter("intIdServicioParam",  $arrayParametros['intIdServicio']);
            }
            if (!empty($arrayParametros['strDescripcionCaracteristica'])) 
            {
                $strQuery .= "and caract.descripcionCaracteristica = :strDescCaractParam ";
                $objQuery->setParameter("strDescCaractParam", $arrayParametros['strDescripcionCaracteristica']);
            }
                        
            if (!empty($arrayParametros['strNombreTecnico']))
            {
                $strQuery .= "and prod.nombreTecnico = :strNombreTecnicoParam ";
                $objQuery->setParameter("strNombreTecnicoParam",  $arrayParametros['strNombreTecnico']);
            }
            
            if (!empty($arrayParametros['strValorSpc']))
            {
                $strQuery .= "and servpc.valor = :strValorSpcParam ";
                $objQuery->setParameter("strValorSpcParam",  $arrayParametros['strValorSpc']);
            }
            
            if (!empty($arrayParametros['strEstadoSpc']))
            {
                $strQuery .= "and servpc.estado = :strEstadoSpcParam ";
                $objQuery->setParameter("strEstadoSpcParam",  $arrayParametros['strEstadoSpc']);
            }
            
            if (!empty($arrayParametros['strEstadoServ']))
            {
                $strQuery .= "and serv.estado = :strEstadoServParam ";
                $objQuery->setParameter("strEstadoServParam",  $arrayParametros['strEstadoServ']);
            }
            
            if (!empty($arrayParametros['strEstadoProdC']))
            {
                $strQuery .= "and prodc.estado = :strEstadoProdcParam ";
                $objQuery->setParameter("strEstadoProdcParam",  $arrayParametros['strEstadoProdC']);
            }
                       
            $objQuery->setDQL($strQuery);
            $objQuery->setMaxResults(1);
            $objServicioProdC  = $objQuery->getOneOrNullResult();
            return $objServicioProdC;
        } 
        catch (\Exception $ex) 
        {
            throw($ex);
        }
        return $objServicioProdC;
    }      
    
    /**
     * Documentación para el método 'getRegionPorServicio'.
     *
     * Método utilizado para obtener la region ( tn ) a la cual pertenece un login/servicio
     *
     * @param string idServicio    
     *
     * @return string region
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 29-04-2016
    */  
    public function getRegionPorServicio($idServicio)
    {       
        $query = $this->_em->createQuery(null);
        
        $select      = "   select 
                                canton.region
                           from 
                                schemaBundle:InfoServicio  servicio,
                                schemaBundle:InfoPunto     punto,
                                schemaBundle:AdmiSector    sector,
                                schemaBundle:AdmiParroquia parroquia,
                                schemaBundle:AdmiCanton    canton
                            where 
                                servicio.puntoId   = punto.id
                            and punto.sectorId     = sector.id
                            and sector.parroquiaId = parroquia.id 
                            and parroquia.cantonId = canton.id
                            and servicio.id        = :servicio ";                            

        $query->setParameter('servicio', $idServicio);
                
        $query->setDQL($select);   
        
        $region = $query->getOneOrNullResult();

        return $region['region'];
    }
    
    /**
     * getCantonPorServicio
     *
     * Método utilizado para obtener el canton ( tn ) a la cual pertenece un servicio
     *
     * @param string idServicio
     * @return string canton
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 25-08-2016
    */  
    public function getCantonPorServicio($idServicio)
    {       
        $query = $this->_em->createQuery(null);
        
        $select      = "   select 
                                canton.id
                           from 
                                schemaBundle:InfoServicio  servicio,
                                schemaBundle:InfoPunto     punto,
                                schemaBundle:AdmiSector    sector,
                                schemaBundle:AdmiParroquia parroquia,
                                schemaBundle:AdmiCanton    canton
                            where 
                                servicio.puntoId   = punto.id
                            and punto.sectorId     = sector.id
                            and sector.parroquiaId = parroquia.id 
                            and parroquia.cantonId = canton.id
                            and servicio.id        = :servicio ";                            

        $query->setParameter('servicio', $idServicio);
                
        $query->setDQL($select);   
        
        $region = $query->getOneOrNullResult();

        return $region['id'];
    }    

    /*
     * Documentación para el método 'getJsonServicioRequiereBackup'.
     *
     * Retorna la cadena Json de los servicios por producto que posee el Punto.
     *
     * @param Array $arrayParametros['EMPRESA']        Id de la empresa.
     *                              ['CODIGO']         Id del Producto.
     *                              ['PUNTO']          Id del Punto.
     *                              ['EXCLUIDOS']      listado de servicios excluídos.
     *                              ['ESTADO']         Estado del producto y su característica.
     *                              ['VISIBLE']        Indica si es o no visible para el módulo comercial.
     *                              ['CARACTERISTICA'] Descriptivo de la Característica.
     *                              ['ESTADOS']        Estados que NO debe tener el servicio.
     *                              ['TIPO_ENLACE']    Define si es principal o backup.
     *                              ['START']          Int: Inicio de la paginación.
     *                              ['LIMIT']          Int: Rango máximo de la paginación.
     * 
     * @return Array Listado de Ingenieros VIP
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 04-04-2016
     */
    public function getJsonServicioRequiereBackup($arrayParametros)
    {
        $objResultado = $this->getResultadoServicioRequiereBackup($arrayParametros);
       
        if(empty($objResultado['ERROR']))
        {
            $strJsonResultado = '{"msg":"OK", "total":"' . $objResultado['TOTAL'] . '","registros":' . json_encode($objResultado['REGISTROS']) . '}';
        }
        else
        {
            $strJsonResultado = '{"msg":"error", "total":"0", "registros":[], "error":[' . $objResultado['ERROR'] . ']}';
        }

        return $strJsonResultado;
    }
    
    /**
     * Documentación para el método 'getResultadoServicioRequiereBackup'.
     *
     * Retorna el listado paginado de los servicios por producto que posee el Punto.
     *
     * @param $arrayParametros['EMPRESA']        Id de la empresa.
     *                        ['CODIGO']         Id del Producto.
     *                        ['PUNTO']          Id del Punto.
     *                        ['EXCLUIDOS']      listado de servicios excluídos.
     *                        ['ESTADO']         Estado del producto y su característica.
     *                        ['VISIBLE']        Indica si es o no visible para el módulo comercial.
     *                        ['CARACTERISTICA'] Descriptivo de la Característica.
     *                        ['ESTADOS']        Estados que NO debe tener el servicio.
     *                        ['TIPO_ENLACE']    Define si es principal o backup.
     *                        ['START']          Int   : Inicio de la paginación.
     *                        ['LIMIT']          Int   : Rango máximo de la paginación.
     * 
     * @return Array Listado de Ingenieros VIP
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 04-04-2016
     */
    public function getResultadoServicioRequiereBackup($arrayParametros)
    {
        $arrayResult                 = array();
        $arrayServicioRequiereBackup = array();
        
        $intLimit = 0;
        $intStart = 0;
        
        try
        {
            $objRequiereBackupNativeQuery = $this->getResultadoServicioRequiereBackupNativeQuery($arrayParametros);
            
            if(empty($objRequiereBackupNativeQuery['ERROR']))
            {
                $objNativeQuery = $objRequiereBackupNativeQuery['OBJ_QUERY'];
                $strQuery       = $objNativeQuery->getSQL();
                
                $objNativeQuery->setSQL("SELECT COUNT(*) AS TOTAL FROM ($strQuery)");
                
                $intTotalRegistros = $objNativeQuery->getSingleScalarResult();
                if($intTotalRegistros > 0)
                {
                    $objNativeQuery->setSQL($strQuery);

                    // Se define el Inicio y el Límite de la paginación.
                    if(isset($arrayParametros['LIMIT']) &&  isset($arrayParametros['START']))
                    {
                        $intStart = $arrayParametros['LIMIT'];
                        $intLimit = $arrayParametros['START'];
                    }
                    
                    $arrayServicioRequiereBackup = $this->setQueryLimit($objNativeQuery, $intLimit, $intStart)->getResult();
                }
                $arrayResult['REGISTROS'] = $arrayServicioRequiereBackup;
                $arrayResult['TOTAL']     = $intTotalRegistros;
                $arrayResult['ERROR']     = '';
            }
            else
            {
                $arrayResult['ERROR'] = $objRequiereBackupNativeQuery['ERROR'];
            }
        }
        catch(\Exception $ex)
        {
            $arrayResult['ERROR'] = 'Error: ' . $ex->getMessage();
        }
        return $arrayResult;
    }
    
    /**
     * Documentación para el método 'getResultadoServicioRequiereBackupNativeQuery'.
     *
     * Método que obtiene los servicios por producto que posee el Punto.
     *
     * @param $arrayParametros['EMPRESA']        Id de la empresa.
     *                        ['CODIGO']         Id del Producto.
     *                        ['PUNTO']          Id del Punto.
     *                        ['EXCLUIDOS']      listado de servicios excluídos.
     *                        ['ESTADO']         Estado del producto y su característica.
     *                        ['VISIBLE']        Indica si es o no visible para el módulo comercial.
     *                        ['CARACTERISTICA'] Descriptivo de la Característica.
     *                        ['ESTADOS']        Estados que NO debe tener el servicio.
     *                        ['TIPO_ENLACE']    Define si es principal o backup.
     * costoQuery: 29
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 18-04-2016
     *
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.2 20-07-2016
     * Se moficia el query para obtener sólo los servicios principales que NO tengan BackUp ya que la relación es de uno a uno exclusivo.
     * Se recibe el nuevo parámetro EXCLUIDOS con listado de servicios que se requieren excluir(servicios principales ya seleccionados en el grid).
     */
    public function getResultadoServicioRequiereBackupNativeQuery($arrayParametros)
    {
        $arrayResult = array();
        try
        {
            $objMappingBuilder = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery    = $this->_em->createNativeQuery(null, $objMappingBuilder);
            $strExcluidos      = "";
            if($arrayParametros['EXCLUIDOS'])
            {
                $strExcluidos = "WHERE TO_NUMBER(T.SERVICIO) NOT IN (:EXCLUIDOS)";
                $objNativeQuery->setParameter("EXCLUIDOS", $arrayParametros['EXCLUIDOS']);
            }
            
            $strSQL = " SELECT T.SERVICIO, T.CODIGO, T.ESTADO, T.TIPO_MEDIO, T.PRODUCTO, T.FECHA FROM (
                        SELECT S.ID_SERVICIO SERVICIO, S.PRODUCTO_ID CODIGO,  S.ESTADO,
                               (CASE WHEN TM.NOMBRE_TIPO_MEDIO IS NULL THEN 'NINGUNA' ELSE TM.NOMBRE_TIPO_MEDIO END )  TIPO_MEDIO, 
                               P.DESCRIPCION_PRODUCTO PRODUCTO, TO_CHAR(S.FE_CREACION, 'DD MON YYYY - HH24:MI', 'NLS_DATE_LANGUAGE=Spanish') FECHA
                        FROM       ADMI_PRODUCTO P
                        INNER JOIN ADMI_PRODUCTO_CARACTERISTICA PC  ON PC.PRODUCTO_ID      = P.ID_PRODUCTO
                        INNER JOIN ADMI_CARACTERISTICA          C   ON C.ID_CARACTERISTICA = PC.CARACTERISTICA_ID
                        INNER JOIN INFO_SERVICIO                S   ON S.PRODUCTO_ID       = P.ID_PRODUCTO
                        INNER JOIN INFO_SERVICIO_PROD_CARACT    SPC ON SPC.SERVICIO_ID     = S.ID_SERVICIO
                        INNER JOIN INFO_PUNTO                   PT  ON PT.ID_PUNTO         = S.PUNTO_ID
                        INNER JOIN INFO_SERVICIO_TECNICO        ST  ON ST.SERVICIO_ID      = S.ID_SERVICIO
                        LEFT  JOIN ADMI_TIPO_MEDIO              TM  ON TM.ID_TIPO_MEDIO    = ST.ULTIMA_MILLA_ID
                        WHERE P.EMPRESA_COD                 = :EMPRESA 
                        AND   P.ID_PRODUCTO                 = :CODIGO
                        AND   PT.ID_PUNTO                   = :PUNTO
                        AND   PC.ESTADO                     = :ESTADO
                        AND   P.ESTADO                      = :ESTADO
                        AND   SPC.ESTADO                    = :ESTADO
                        AND   PC.VISIBLE_COMERCIAL          = :VISIBLE
                        AND   C.DESCRIPCION_CARACTERISTICA  = :CARACTERISTICA                        
                        AND   UPPER(ST.TIPO_ENLACE)         = :TIPO_ENLACE
                        AND   S.ESTADO              NOT  IN (:ESTADOS)
                        AND   S.ID_SERVICIO         
                              NOT  IN (WITH SERVICIO_BACKUP AS 
                                          (
                                           SELECT SPC.VALOR SERVICIO
                                           FROM       INFO_SERVICIO                S
                                           INNER JOIN INFO_PUNTO                   P   ON P.ID_PUNTO                     = S.PUNTO_ID
                                           INNER JOIN INFO_SERVICIO_PROD_CARACT    SPC ON SPC.SERVICIO_ID                = S.ID_SERVICIO
                                           INNER JOIN ADMI_PRODUCTO                PR  ON PR.ID_PRODUCTO                 = S.PRODUCTO_ID
                                           INNER JOIN ADMI_PRODUCTO_CARACTERISTICA PC  ON PC.ID_PRODUCTO_CARACTERISITICA = SPC.PRODUCTO_CARACTERISITICA_ID
                                           INNER JOIN ADMI_CARACTERISTICA          C   ON C.ID_CARACTERISTICA            = PC.CARACTERISTICA_ID
                                           WHERE P.ID_PUNTO                   = :PUNTO
                                           AND   PR.EMPRESA_COD               = :EMPRESA
                                           AND   PR.ID_PRODUCTO               = :CODIGO
                                           AND   PR.ESTADO                    = :ESTADO
                                           AND   SPC.ESTADO                   = :ESTADO   
                                           AND   PC.VISIBLE_COMERCIAL         = :VISIBLE
                                           AND   C.DESCRIPCION_CARACTERISTICA = :CARACTERISTICA2
                                          ) 
                                       SELECT S.ID_SERVICIO
                                       FROM       INFO_SERVICIO                S   
                                       INNER JOIN SERVICIO_BACKUP              SBU ON SBU.SERVICIO   = TO_CHAR(S.ID_SERVICIO)
                                       INNER JOIN INFO_SERVICIO_TECNICO        ST  ON ST.SERVICIO_ID = S.ID_SERVICIO
                                       WHERE  ST.TIPO_ENLACE        = :TIPO_ENLACE)
                        
                        GROUP BY S.ID_SERVICIO, S.PRODUCTO_ID, S.ESTADO, TM.NOMBRE_TIPO_MEDIO, P.DESCRIPCION_PRODUCTO, S.FE_CREACION
                        ) T $strExcluidos
                        ";
          

            $objNativeQuery->setParameter("PUNTO",           $arrayParametros['PUNTO']);
            $objNativeQuery->setParameter("EMPRESA",         $arrayParametros['EMPRESA']);
            
            $objNativeQuery->setParameter("CODIGO",          $arrayParametros['CODIGO']);
            $objNativeQuery->setParameter("CARACTERISTICA",  $arrayParametros['CARACTERISTICA']);
            $objNativeQuery->setParameter("CARACTERISTICA2", $arrayParametros['CARACTERISTICA2']);
            $objNativeQuery->setParameter("ESTADOS",         $arrayParametros['ESTADOS']);
            $objNativeQuery->setParameter("TIPO_ENLACE",     $arrayParametros['TIPO_ENLACE']);
            $objNativeQuery->setParameter("VISIBLE",        'NO');
            $objNativeQuery->setParameter("ESTADO",         'Activo');

            $objMappingBuilder->addScalarResult('TOTAL',      'total',     'integer');
            $objMappingBuilder->addScalarResult('CODIGO',     'codigo',    'integer');
            $objMappingBuilder->addScalarResult('SERVICIO',   'servicio',  'integer');
            $objMappingBuilder->addScalarResult('TIPO_MEDIO', 'tipoMedio', 'string');
            $objMappingBuilder->addScalarResult('PRODUCTO',   'producto',  'string');
            $objMappingBuilder->addScalarResult('FECHA',      'fecha',     'string');
            $objMappingBuilder->addScalarResult('ESTADO',     'estado',    'string');
            
            $arrayResult['OBJ_QUERY'] = $objNativeQuery->setSQL($strSQL);
            $arrayResult['ERROR']     = '';
        }
        catch(\Exception $ex)
        {
            $arrayResult['ERROR'] = 'ERROR: ' . $ex->getMessage();
        }
        return $arrayResult;
    }
    
    /**
     * 
     * Metodo encargado de consultar si un Servicio es capaz de ser BACKUP o si dentro de la configuracion del producto requiere crearle un backup
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 03-02-2017
     * 
     * Costo 12
     * 
     * @param Array $arrayParametros [
     *                                 intIdServicio         Servicio al cual se verificara la capacidad de tener backup o no
     *                                 arrayEstadosExcluidos Estados a los cuales se discriminan para efecto de la consulta
     *                               ]
     * @return String $strRequiereBackup
     */
    public function getServicioRequiereBackup($arrayParametros)
    {
        $strRequiereBackup = 'NO';
        
        try
        {
            $objMappingBuilder = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery    = $this->_em->createNativeQuery(null, $objMappingBuilder);

            $strSql = "SELECT 
                        CASE TABLE_SERV_REQ_BCK.REQUIERE_BCK
                          WHEN 0 THEN 'NO'
                          ELSE 'SI'
                        END REQUIERE_BACKUP
                        FROM
                        (SELECT 
                          COUNT(*) REQUIERE_BCK 
                        FROM 
                          DB_COMERCIAL.INFO_SERVICIO SERVICIO,
                          DB_COMERCIAL.INFO_SERVICIO_TECNICO SERVICIO_TECNICO,
                          DB_COMERCIAL.ADMI_PRODUCTO PRODUCTO,
                          DB_COMERCIAL.ADMI_CARACTERISTICA CARACTERISTICA_BCK,
                          DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PROD_CARACT_BCK,
                          DB_COMERCIAL.ADMI_CARACTERISTICA CARACTERISTICA_REQ_BCK,
                          DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PROD_CARACT_REQ_BCK
                        WHERE SERVICIO.PRODUCTO_ID                            = PRODUCTO.ID_PRODUCTO
                        AND SERVICIO.ID_SERVICIO                              = SERVICIO_TECNICO.SERVICIO_ID
                        AND SERVICIO_TECNICO.TIPO_ENLACE                      = :ENLACE_PRINCIPAL
                        AND PRODUCTO.ID_PRODUCTO                              = PROD_CARACT_BCK.PRODUCTO_ID
                        AND PROD_CARACT_BCK.CARACTERISTICA_ID                 = CARACTERISTICA_BCK.ID_CARACTERISTICA
                        AND CARACTERISTICA_BCK.DESCRIPCION_CARACTERISTICA     = :BACKUP
                        AND CARACTERISTICA_BCK.ESTADO                         = :ESTADO
                        AND PROD_CARACT_BCK.ESTADO                            = :ESTADO
                        AND PRODUCTO.ID_PRODUCTO                              = PROD_CARACT_REQ_BCK.PRODUCTO_ID
                        AND PROD_CARACT_REQ_BCK.CARACTERISTICA_ID             = CARACTERISTICA_REQ_BCK.ID_CARACTERISTICA
                        AND CARACTERISTICA_REQ_BCK.DESCRIPCION_CARACTERISTICA = :REQUIERE
                        AND CARACTERISTICA_REQ_BCK.ESTADO                     = :ESTADO
                        AND PROD_CARACT_REQ_BCK.ESTADO                        = :ESTADO
                        AND SERVICIO.ID_SERVICIO                              = :SERVICIO
                        AND SERVICIO.ESTADO NOT                              IN (:ESTADOS_EXCLUIDOS)) TABLE_SERV_REQ_BCK
                        ";

            $objNativeQuery->setParameter("SERVICIO",        $arrayParametros['intIdServicio']);
            $objNativeQuery->setParameter("BACKUP",          'ES_BACKUP');
            $objNativeQuery->setParameter("REQUIERE",        'REQUIERE_BACKUP');
            $objNativeQuery->setParameter("ESTADOS_EXCLUIDOS",$arrayParametros['arrayEstadosExcluidos']);
            $objNativeQuery->setParameter("ENLACE_PRINCIPAL",'PRINCIPAL');
            $objNativeQuery->setParameter("ESTADO",          'Activo');        
            
            $objMappingBuilder->addScalarResult('REQUIERE_BACKUP',      'requiereBackup',     'string');
            
            $objNativeQuery->setSQL($strSql);
            
            $strRequiereBackup = $objNativeQuery->getSingleScalarResult();                                
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        
        return $strRequiereBackup;
    }
    
    /**
     * findServicios, obtiene servicios enviando criterios de busqueda, adicionalmente se obtienen valores limites de ancho de banda del modelo de CPE
     * asociado para facilitar validaciones posteriores
     * 
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0 02-04-2016
     * @since 1.0
     * @param array  $arrayParametros Obtiene los criterios de busqueda
     * @return array $arrayResultado  Retorna el array de datos y conteo de datos
     * 
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.1 29-06-2016 - Se Recibe el Parametro strEstado y si es null por defecto se asume 'Activo'
     * 
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.2 01-08-2016 - Se recibe el idServicio para una consulta directa y se aumento consulta de CPE
     * 
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.3 09-08-2016 - Se agrego filtro por estado del producto
     * 
     * @author Duval Medina C. <dmedina@telconet.ec>
     * @version 1.4 2016-09-22 - Se eliminó redundancia en consulta
     * 
     * @author Allan Suarez C. <arsuarez@telconet.ec>
     * @version 1.5 2017-04-26 Se agrega validacion para que cuando se requiera obtener servicios y el proceso a ejecutar sea
     *                         solo de CAMBIO PLAN devuelva solo los que sean de tipo enlace PRINCIPAL
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.6 2017-07-28 Se valida que para Demos solo se muestren los servicios que sean Venta
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 2018-03-15 Se agrega a la consulta el nombre técnico del producto 
     */
    public function findServicios($arrayParametros) {
        
        $rsm        = new ResultSetMappingBuilder($this->_em);
        $query      = $this->_em->createNativeQuery(null,$rsm);
        $strEsVenta = "S";
        //Query que obtiene los Datos
        $sqlSelect="SELECT DISTINCT  
                    ISER.ID_SERVICIO, 
                    IST.ID_SERVICIO_TECNICO, 
                    ISER.DESCRIPCION_PRESENTA_FACTURA, 
                    IPTO.ID_PUNTO, 
                    IPTO.LOGIN, 
                    APROD.ID_PRODUCTO, 
                    APROD.ES_ENLACE, 
                    APROD.DESCRIPCION_PRODUCTO,
                    APROD.NOMBRE_TECNICO,
                    ISER.PRECIO_VENTA, 
                    ISER.ESTADO, 
                    ISER.LOGIN_AUX, 
                    IST.ULTIMA_MILLA_ID, 
                    ATM.NOMBRE_TIPO_MEDIO, 
                    DB_COMERCIAL.COMEK_CONSULTAS.GET_MODEL_ELE_X_SERV_TIPO(ISER.ID_SERVICIO, 'CPE', 'NOMBRE') NOMBRE_MODELO_ELEMENTO, 
                    DB_COMERCIAL.COMEK_CONSULTAS.GET_MODEL_ELE_X_SERV_TIPO(ISER.ID_SERVICIO, 'CPE', 'CAPACIDAD1') CAPACIDAD1_MODELO_ELEMENTO, 
                    DB_COMERCIAL.COMEK_CONSULTAS.GET_MODEL_ELE_X_SERV_TIPO(ISER.ID_SERVICIO, 'CPE', 'CAPACIDAD2') CAPACIDAD2_MODELO_ELEMENTO ";   
        //Cuerpo del Query
        $sqlFrom = "FROM INFO_SERVICIO ISER ";
        
        $sqlJoin = "LEFT JOIN INFO_SERVICIO_PROD_CARACT ISPC ON ISPC.SERVICIO_ID = ISER.ID_SERVICIO 
                    LEFT JOIN INFO_PUNTO IPTO ON ISER.PUNTO_ID = IPTO.ID_PUNTO 
                    LEFT JOIN ADMI_PRODUCTO APROD ON ISER.PRODUCTO_ID = APROD.ID_PRODUCTO 
                    LEFT JOIN INFO_PERSONA_EMPRESA_ROL IPER ON IPTO.PERSONA_EMPRESA_ROL_ID = IPER.ID_PERSONA_ROL 
                    LEFT JOIN INFO_PERSONA IP ON IPER.PERSONA_ID = IP.ID_PERSONA 
                    LEFT JOIN INFO_EMPRESA_ROL IER ON IPER.EMPRESA_ROL_ID = IER.ID_EMPRESA_ROL 
                    LEFT JOIN INFO_SERVICIO_TECNICO IST ON IST.SERVICIO_ID = ISER.ID_SERVICIO 
                    LEFT JOIN ADMI_TIPO_MEDIO ATM ON ATM.ID_TIPO_MEDIO = IST.ULTIMA_MILLA_ID ";
        // Si se consulta por el intIdServicio no es necesario mas filtros, en caso contrario se busca por otros criterios
        if(empty($arrayParametros['intIdServicio']))
        {
            $sqlWhere = "WHERE 
                    IER.EMPRESA_COD = :idEmpresa 
                    AND IP.ID_PERSONA = :idCliente 
                    AND APROD.ID_PRODUCTO is not null 
                    AND ISER.ESTADO in (:strEstado) ";
        
            $query->setParameter('idEmpresa', $arrayParametros['intIdEmpresa']);
            $query->setParameter('idCliente', $arrayParametros['intIdCliente']);

            if(empty($arrayParametros['strEstado']))
            {
                $arrayParametros['strEstado'] = 'Activo';
            }

            $query->setParameter('strEstado', explode(",",$arrayParametros['strEstado']));

            if (!empty($arrayParametros['strNombreTecnicoProducto'])){            
                //cuerpo del query
                $sqlWhere .= "AND APROD.NOMBRE_TECNICO = :strNombreTecnicoProducto ";
                //query de datos
                $query->setParameter('strNombreTecnicoProducto', $arrayParametros['strNombreTecnicoProducto']);
            }
            
            if (!empty($arrayParametros['strEstadoProducto'])){            
                //cuerpo del query
                $sqlWhere .= "AND APROD.ESTADO = :strEstadoProducto ";
                //query de datos
                $query->setParameter('strEstadoProducto', $arrayParametros['strEstadoProducto']);
            }
            
            if (!empty($arrayParametros['intIdProducto'])){
                //cuerpo del query
                $sqlWhere .= "AND APROD.ID_PRODUCTO = :intIdProducto ";
                //query de datos
                $query->setParameter('intIdProducto', $arrayParametros['intIdProducto']);
            }

            if (!empty($arrayParametros['intIdUltimaMilla'])){            
                //cuerpo del query
                $sqlWhere .= "AND IST.ULTIMA_MILLA_ID = :intIdUltimaMilla ";
                //query de datos
                $query->setParameter('intIdUltimaMilla', $arrayParametros['intIdUltimaMilla']);
            } 

            if (!empty($arrayParametros['strIdServicios'])){            
                //cuerpo del query
                $sqlWhere .= "AND ISER.ID_SERVICIO in (:strIdServicios) ";
                //query de datos
                $query->setParameter('strIdServicios', explode(",",$arrayParametros['strIdServicios']));
            } 
            // servicios que no quieres ser incluidos en los resultados
            if (!empty($arrayParametros['strNoIdServicios'])){            
                //cuerpo del query
                $sqlWhere .= "AND ISER.ID_SERVICIO not in (:strNoIdServicios) ";
                //query de datos
                $query->setParameter('strNoIdServicios', explode(",",$arrayParametros['strNoIdServicios']));
            }
            
            //si es cambio de Plan solo devuelve registros que sean de tipo enlace PRINCIPAL
            if(isset($arrayParametros['boolEsCambioPlan']) && $arrayParametros['boolEsCambioPlan'])
            {
                //Si la solicutd masiva hace referencia a cambio de plan solo se mostraran los enlaces PRINCIPALES
                $sqlWhere .= " AND IST.TIPO_ENLACE = :strTipoEnlace ";
                $query->setParameter('strTipoEnlace', 'PRINCIPAL');
            }
        } 
        else 
        {
            $sqlWhere = "WHERE ISER.ID_SERVICIO = :intIdServicio ";
            $query->setParameter('intIdServicio', $arrayParametros['intIdServicio']);
        } 

        if($arrayParametros["strNombreSolicitud"] == 'DEMOS')
        {
            $sqlWhere .= " AND ISER.ES_VENTA = :paramEsVenta ";
            $query->setParameter('paramEsVenta', $strEsVenta);
        }

        $sql = $sqlSelect.$sqlFrom.$sqlJoin.$sqlWhere." ORDER BY IPTO.LOGIN DESC ";
        
        $rsm->addScalarResult('ID_SERVICIO', 'idServicio','integer');
        $rsm->addScalarResult('ID_SERVICIO_TECNICO', 'idServicioTecnico','integer');
        $rsm->addScalarResult('DESCRIPCION_PRESENTA_FACTURA', 'descripcionServicio','string');
        $rsm->addScalarResult('ID_PUNTO', 'idPunto', 'integer');
        $rsm->addScalarResult('LOGIN', 'login','string');
        $rsm->addScalarResult('ID_PRODUCTO', 'idProducto', 'integer');
        $rsm->addScalarResult('ES_ENLACE', 'productoEsEnlace', 'string');
        $rsm->addScalarResult('DESCRIPCION_PRODUCTO', 'descripcionProducto', 'string');
        $rsm->addScalarResult('NOMBRE_TECNICO', 'nombreTecnico', 'string');
        $rsm->addScalarResult('PRECIO_VENTA', 'precioVenta', 'integer');
        $rsm->addScalarResult('ESTADO', 'estado', 'string');
        $rsm->addScalarResult('LOGIN_AUX', 'loginAux', 'string');
        $rsm->addScalarResult('ULTIMA_MILLA_ID', 'idUltimaMilla', 'integer');
        $rsm->addScalarResult('NOMBRE_TIPO_MEDIO', 'nombreUltimaMilla', 'string');
        $rsm->addScalarResult('NOMBRE_MODELO_ELEMENTO', 'nombreModeloElemento', 'string');
        $rsm->addScalarResult('CAPACIDAD1_MODELO_ELEMENTO', 'capacidad1ModeloElemento', 'integer');
        $rsm->addScalarResult('CAPACIDAD2_MODELO_ELEMENTO', 'capacidad2ModeloElemento', 'integer');
        
        $query->setSQL($sql);
        $total=count($query->getScalarResult());
        if(!empty($arrayParametros['intStart']) && !empty($arrayParametros['intLimit'])) {
            $query->setParameter('start', $arrayParametros['intStart']+1);
            $query->setParameter('limit', ($arrayParametros['intStart'] + $arrayParametros['intLimit'])); 
            $sql = "SELECT a.*, rownum as intDoctrineRowNum FROM (".$sql.") a WHERE ROWNUM <= :limit";
            if($arrayParametros['intStart'] > 0) {
                $sql = "SELECT * FROM (".$sql.") WHERE intDoctrineRowNum >= :start";
            }
            $query->setSQL($sql);
        }
        $datos                  = $query->getScalarResult();
        $resultado['registros'] = $datos;
        $resultado['total']     = $total;
        return $resultado;
    }
    
    /**
     * findServiciosProductoCaracteristicas, obtiene caracteristicas de los servicios enviando criterios de busqueda
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0 02-04-2016
     * @since 1.0
     * @param array  $arrayParametros Obtiene los criterios de busqueda
     * @return array $arrayResultado  Retorna el array de datos y conteo de datos
     */
    public function findServiciosProductoCaracteristicas($arrayParametros) {
                
        
        $rsm= new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null,$rsm);
        //Query que obtiene los Datos
        $sqlSelect="SELECT     
                    ISPC.ID_SERVICIO_PROD_CARACT,
                    ISPC.SERVICIO_ID,
                    ISPC.PRODUCTO_CARACTERISITICA_ID,
                    ISPC.VALOR,
                    AC.ID_CARACTERISTICA,
                    AC.DESCRIPCION_CARACTERISTICA,
                    ISPC.ESTADO ";   
        //Cuerpo del Query
        $sqlFrom = "FROM INFO_SERVICIO_PROD_CARACT ISPC ";
        
        $sqlJoin = " LEFT JOIN ADMI_PRODUCTO_CARACTERISTICA APC ON APC.ID_PRODUCTO_CARACTERISITICA = ISPC.PRODUCTO_CARACTERISITICA_ID
                     LEFT JOIN ADMI_CARACTERISTICA AC ON AC.ID_CARACTERISTICA = APC.CARACTERISTICA_ID ";
        
        $sqlWhere = "WHERE 
                    ISPC.SERVICIO_ID = :idServicio
                    AND ISPC.ESTADO = :strEstado ";
        
        $query->setParameter('idServicio', $arrayParametros['intIdServicio']);
        $query->setParameter('strEstado', 'Activo');
        
        $sql = $sqlSelect.$sqlFrom.$sqlJoin.$sqlWhere." ORDER BY AC.DESCRIPCION_CARACTERISTICA ASC ";
           
        $rsm->addScalarResult('ID_SERVICIO_PROD_CARACT', 'idServicioProductoCaracteristica','integer');
        $rsm->addScalarResult('SERVICIO_ID', 'idServicio','integer');
        $rsm->addScalarResult('PRODUCTO_CARACTERISITICA_ID', 'idProductoCaracteristica', 'integer');
        $rsm->addScalarResult('VALOR', 'valor','string');
        $rsm->addScalarResult('ID_CARACTERISTICA', 'idCaracteristica', 'integer');
        $rsm->addScalarResult('DESCRIPCION_CARACTERISTICA', 'descripcionCaracteristica', 'string');
        $rsm->addScalarResult('ESTADO', 'estado', 'string');
        
        $query->setSQL($sql);
        $total=count($query->getScalarResult());
        
        if(!empty($arrayParametros['intStart']) && !empty($arrayParametros['intLimit'])) {
            $query->setParameter('start', $arrayParametros['intStart']+1);
            $query->setParameter('limit', ($arrayParametros['intStart'] + $arrayParametros['intLimit'])); 

            $sql = "SELECT a.*, rownum as intDoctrineRowNum FROM (".$sql.") a WHERE ROWNUM <= :limit";
            if($arrayParametros['intStart'] > 0) {
                $sql = "SELECT * FROM (".$sql.") WHERE intDoctrineRowNum >= :start";
            }
            $query->setSQL($sql);
        }
        
        $datos                  = $query->getScalarResult();
        $resultado['registros'] = $datos;
        $resultado['total']     = $total;
        return $resultado;
    }
    
    /**
     * Documentación para el método 'getServiciosSolicitudDcto'.
     *
     * Retorna el listado de servicios mostrados en el grid de solicitud de descuento.
     *
     * @param $intEmpresaId   Int   : Id de la empresa en sesion.
     * @param $intPuntoId     Int   : Id del punto sucursal en sesion.
     * @param $limit          Int   : Rango máximo de la paginación.
     * @param $start          Int   : Inicio de la paginación.
     * 
     * @return $arrayServicios  Array de servicios
     * 
     * @author Edgar Holguin <eholguin@telconet.ec>
     * @version 1.0 15-05-2016
     * @author Edgar Holguin <eholguin@telconet.ec>
     * @version 1.1 23-06-2016  Se agrega estado Eliminado en estados de servicios que no deben mostrarse   
     */  
    public function getServiciosSolicitudDcto($intEmpresaId, $intPuntoId, $limit, $start)
    {
        $query = $this->_em->createQuery("SELECT e
		FROM 
                schemaBundle:InfoPersona a, schemaBundle:InfoPersonaEmpresaRol b, 
                schemaBundle:InfoEmpresaRol c, schemaBundle:InfoPunto d, schemaBundle:InfoServicio e
		WHERE 
                a.id=b.personaId AND
                b.empresaRolId=c.id AND
                b.id=d.personaEmpresaRolId AND
                d.id=e.puntoId AND  
                e.puntoId=:puntoId AND
                e.estado not in (:estadoServicio) AND
                c.empresaCod=:empresaId order by a.feCreacion ASC");
        
        $query->setParameter('puntoId', $intPuntoId);
        $query->setParameter('empresaId', $intEmpresaId);
        $query->setParameter("estadoServicio", array("Anulado","Cancel","Rechazada","Reubicado","Trasladado","Eliminado"));
        $total = count($query->getResult());
        $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        $arrayServicios['registros'] = $datos;
        $arrayServicios['total'] = $total;
        
        return $arrayServicios;
    }    
    
    /*
     * Documentación para el método 'getJsonFrecuenciasFacturacion'.
     *
     * Retorna la cadena Json de las frecuencias de facturación por empresa.
     *
     * @param $intEmpresaId Integer: Código de la empresa.
     * 
     * @return String JSON Listado de frecuencias de facturación
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 29-06-2016
     */
    public function getJsonFrecuenciasFacturacion($intEmpresaId)
    {
        $arrayFrecuencias = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                      ->get("FRECUENCIA_FACTURACION", "", "", "", "", "", "", "", "", $intEmpresaId);
        $arryEncontrados = array();
        
        if($arrayFrecuencias)
        {
            foreach($arrayFrecuencias as $itemFrecuencia)
            {
                $arryEncontrados[] = array('id'   => intval($itemFrecuencia['valor1']), 
                                           'name' => $itemFrecuencia['valor2']);
            }
        }
        sort($arryEncontrados);
        return '{"msg":"OK", "total":"' . count($arryEncontrados) . '","encontrados":' . json_encode($arryEncontrados) . '}';
    }
    
    /**
     * Documentación para el método 'getServiciosPorUmTipoEnlace'.
     *
     * Retorna un array de servicios con misma última milla y tipo de enlace a los enviados como parámetro.
     *
     * @param $intEmpresaId      Int   : Id de la empresa en sesion.
     * @param $intPuntoId        Int   : Id del punto sucursal en sesion.
     * @param $intUltimaMillaId  Int   : Id del tipo de medio (última milla).
     * 
     * @return $arrayServicios   Array de servicios
     * 
     * @author Edgar Holguin <eholguin@telconet.ec>
     * @version 1.0 13-07-2016 
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 29-10-2018 se cambia el query para que pueda soportar mas de una ultima milla
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.2 01-06-2019 se modifica el query para que consulte todos los tipos de enlace(Principal=>Principal1)
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 14-06-2021 Se verifica si se envía el tipo de red, se obtiene los servicios con la características del tipo de red.
     */     
    public function getServiciosPorUmTipoEnlace($arrayParametros)
    {
        $intEmpresaId       = $arrayParametros['intIdEmpresa'];
        $intPuntoId         = $arrayParametros['intIdPunto'];
        $intUltimaMillaId   = $arrayParametros['intUltimaMillaId'];
        $strTipoEnlace      = $arrayParametros['strTipoEnlace'];
        $strTipoRed         = isset($arrayParametros['strTipoRed']) && !empty($arrayParametros['strTipoRed']) ? $arrayParametros['strTipoRed'] : null;

        $strSql      = " SELECT  e
                         FROM 
                            schemaBundle:InfoPersona a, schemaBundle:InfoPersonaEmpresaRol b,schemaBundle:InfoEmpresaRol c, schemaBundle:InfoPunto d, 
                            schemaBundle:AdmiProducto pro, schemaBundle:InfoServicio e, schemaBundle:InfoServicioTecnico st ";
        $strSqlTipoRed = "  ,schemaBundle:InfoServicioProdCaract spc,  schemaBundle:AdmiProductoCaracteristica pc,
                            schemaBundle:AdmiCaracteristica car ";
        $strSqlWhere   = " WHERE 
                            a.id = b.personaId AND
                            b.empresaRolId = c.id AND
                            b.id = d.personaEmpresaRolId AND
                            d.id = e.puntoId AND  
                            e.puntoId = :puntoId AND
                            st.servicioId=e.id AND
                            e.productoId = pro.id AND
                            st.ultimaMillaId in (:umId) AND
                            st.tipoEnlace like :tipoEnlace AND
                            e.estado in (:estadoServicio) AND
                            pro.nombreTecnico NOT IN (:nombresTecnicoDatosSafeCity) AND
                            c.empresaCod = :empresaId ";
        $strSqlWhereTipoRed = " AND spc.servicioId = e.id
                                AND pc.id  = spc.productoCaracterisiticaId
                                AND car.id = pc.caracteristicaId
                                AND car.descripcionCaracteristica = :descripcionCaracteristica
                                AND spc.estado = :estadoTipoRed
                                AND spc.valor  = :tipoRed ";
         $strSqlOrder  = " order by a.feCreacion ASC";

        //se verifica si el servicio es tipo de red GPON
        $booleanTipoRedGpon = false;
        if(!empty($strTipoRed))
        {
            $arrayParVerTipoRed = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    'VERIFICAR TIPO RED',
                                                                                                    'VERIFICAR_GPON',
                                                                                                    $strTipoRed,
                                                                                                    '',
                                                                                                    '',
                                                                                                    '');
            if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
            {
                $booleanTipoRedGpon = true;
            }
        }
        if($booleanTipoRedGpon)
        {
            $strSql .= $strSqlTipoRed . $strSqlWhere . $strSqlWhereTipoRed . $strSqlOrder;
            $query   = $this->_em->createQuery($strSql);
            $query->setParameter('descripcionCaracteristica', 'TIPO_RED');
            $query->setParameter('estadoTipoRed', 'Activo');
            $query->setParameter('tipoRed', $strTipoRed);
        }
        else
        {
            $strSql .= $strSqlWhere . $strSqlOrder;
            $query = $this->_em->createQuery($strSql);
        }
        
        $query->setParameter('puntoId', $intPuntoId);
        $query->setParameter('empresaId', $intEmpresaId);
        $query->setParameter('umId', $intUltimaMillaId);
        $query->setParameter('tipoEnlace', $strTipoEnlace."%");
        $query->setParameter('nombresTecnicoDatosSafeCity', array("DATOS SAFECITY","SAFECITYDATOS"));
        $query->setParameter("estadoServicio", array("Activo","Asignada","AsignadoTarea","Detenido","EnPruebas","EnVerificacion","Factible",
                                                     "In-Corte","Planificada","PreAprobacionMatertiales","PrePlanificada",
                                                     "Replanificada"
                                                    )
                            );        
        
        $total = count($query->getResult());
        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total']     = $total;
        
        return $resultado;
    }    
    
    /**
     * Documentación para el método 'existeCaraceristicaServicio'.
     *
     * Retorna un array de servicios con misma última milla y tipo de enlace a los enviados como parámetro.
     *
     * @param $arrayParametros [ descripcionCaracteristica    Descripcion de caracteristica del servicio
     *                           descripcionProducto          Descripcion del producto del servicio 
     *                           nombreTecnico                Nombre Tecnico del producto consultado
     *                           valorSpc                     Valor sel servicio producto caracteristica consultado
     *                           estadoSpc                    Estado del servicio producto caracteristica conusltado
     *                           estadoServ                   Estado del servicio conusltado 
     *                           estadoProdC                  Estado del producto caracteristica conusltado 
     *                           estadoProd                   Estado del producto conusltado 
     *                           estadoCaract                 Estado de la caracteristica conusltada 
     *                           inEstadoServ                 Parámetro para filtro de estados de servicios a consultar características
     *                          ]
     * 
     * @return $arrayServicios   Array de servicios
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 12-09-2016 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 20-12-2018 Se agrega filtro por estados no considerados en la consulta de características por servicio 
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.2 12-06-2019 Se agrega filtro de estado "inEstadoServ" de servicios para recuperar características
     * @since 1.1
     */     
    public function existeCaraceristicaServicio($arrayParametros)
    {
        $objQuery           = $this->_em->createQuery();
        $objServicioProdC   = null;
        $strQuery           = "";
        try
        {
            $strQuery = "select servpc
                         from schemaBundle:InfoServicio serv, 
                         schemaBundle:InfoServicioProdCaract servpc, 
                         schemaBundle:AdmiProductoCaracteristica prodc, 
                         schemaBundle:AdmiProducto prod,
                         schemaBundle:AdmiCaracteristica caract
                         where serv.id                        = servpc.servicioId
                         and servpc.productoCaracterisiticaId = prodc.id
                         and prodc.productoId       = prod.id
                         and prodc.caracteristicaId = caract.id ";
            
            if (!empty($arrayParametros['descripcionCaracteristica'])) 
            {
                $strQuery .= "and caract.descripcionCaracteristica = :descCaractParam ";
                $objQuery->setParameter("descCaractParam", $arrayParametros['descripcionCaracteristica']);
            }
            
            if (!empty($arrayParametros['descripcionProducto']))
            {
                $strQuery .= "and prod.descripcionProducto like :descProductoParam ";
                $objQuery->setParameter("descProductoParam", $arrayParametros['descripcionProducto']."%");
            }
            
            if (!empty($arrayParametros['nombreTecnico']))
            {
                $strQuery .= "and prod.nombreTecnico = :nombreTecnicoParam ";
                $objQuery->setParameter("nombreTecnicoParam",  $arrayParametros['nombreTecnico']);
            }
            
            if (!empty($arrayParametros['valorSpc']))
            {
                $strQuery .= "and servpc.valor = :valorSpcParam ";
                $objQuery->setParameter("valorSpcParam",  $arrayParametros['valorSpc']);
            }
            
            if (!empty($arrayParametros['estadoSpc']))
            {
                $strQuery .= "and servpc.estado = :estadoSpcParam ";
                $objQuery->setParameter("estadoSpcParam",  $arrayParametros['estadoSpc']);
            }
            
            if (!empty($arrayParametros['estadosSpcNoConsiderados']))
            {
                $strQuery .= "and servpc.estado NOT IN (:estadosSpcNoConsiderados) ";
                $objQuery->setParameter("estadosSpcNoConsiderados",  array_values($arrayParametros['estadosSpcNoConsiderados']));
            }
            
            if (!empty($arrayParametros['estadoServ']))
            {
                $strQuery .= "and serv.estado = :estadoServParam ";
                $objQuery->setParameter("estadoServParam",  $arrayParametros['estadoServ']);
            }
            
            if (!empty($arrayParametros['inEstadoServ']))
            {
                $strQuery .= "and serv.estado IN (:inEstadoServParam) ";
                $objQuery->setParameter("inEstadoServParam",  $arrayParametros['inEstadoServ']);
            }
            
            if (!empty($arrayParametros['estadoProdC']))
            {
                $strQuery .= "and prodc.estado = :estadoProdcParam ";
                $objQuery->setParameter("estadoProdcParam",  $arrayParametros['estadoProdC']);
            }
            
            if (!empty($arrayParametros['estadoProd']))
            {
                $strQuery .= "and prod.estado = :estadoProdParam ";
                $objQuery->setParameter("estadoProdParam",  $arrayParametros['estadoProd']);
            }
            
            if (!empty($arrayParametros['estadoCaract']))
            {
                $strQuery .= "and caract.estado = :estadoCaractParam ";
                $objQuery->setParameter("estadoCaractParam",  $arrayParametros['estadoCaract']);
            }
            
            $objQuery->setDQL($strQuery);
            $objQuery->setMaxResults(1);
            $objServicioProdC  = $objQuery->getOneOrNullResult();
            return $objServicioProdC;
        } 
        catch (\Exception $ex) 
        {
            throw($ex);
        }
        return $objServicioProdC;
    }      
    
    /*
     * Documentación para el método 'getResultadoPadreFacturacionDefault'.
     *
     * Retorna el punto que será padre de facturación(PF) del servicio.
     * Si el parámetro $intIdPunto es PF entonces el servicio tendrá como PF a este punto
     * caso contrario el primer punto PF pertenenciente al cliente será el PF del servicio.
     *
     * @param $intIdPunto Integer: Identificador del InfoPunto.
     * 
     * Costo Query: 11
     * 
     * @return Entity  InfoPunto Padre de Facturación, ó
     *         String  Mensaje de error en caso de excepción.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 14-07-2016
     */
    public function getResultadoPadreFacturacionDefault($intIdPunto)
    {
        try 
        {
            $rsmBuilder = new ResultSetMappingBuilder($this->_em);
            $rsmBuilder->addRootEntityFromClassMetadata('telconet\schemaBundle\Entity\InfoPunto', 'P');
            $ntvQuery   = $this->_em->createNativeQuery(null, $rsmBuilder);
            $strQuery   = " SELECT P.* FROM
                            (
                                SELECT PUNTO FROM
                                (
                                    WITH PERSONA_EMPRESA AS 
                                    (
                                        SELECT P.PERSONA_EMPRESA_ROL_ID PERSONA 
                                        FROM INFO_PUNTO P
                                        WHERE P.ID_PUNTO = :PUNTO
                                    )
                                    SELECT P.ID_PUNTO AS PUNTO
                                    FROM       DB_COMERCIAL.INFO_PUNTO                P 
                                    INNER JOIN              PERSONA_EMPRESA           PE ON PE.PERSONA  = P.PERSONA_EMPRESA_ROL_ID
                                    INNER JOIN DB_COMERCIAL.INFO_PUNTO_DATO_ADICIONAL PD ON PD.PUNTO_ID = P.ID_PUNTO
                                    WHERE PD.ES_PADRE_FACTURACION = :ES_PADRE
                                    AND P.ESTADO NOT IN (:ESTADOS)
                                    ORDER BY DECODE(P.ID_PUNTO, :PUNTO, 1, 2)
                                )
                                WHERE ROWNUM = 1
                            )
                            INNER JOIN DB_COMERCIAL.INFO_PUNTO P ON P.ID_PUNTO = PUNTO";      

            $ntvQuery->setParameter("PUNTO",    $intIdPunto);
            $ntvQuery->setParameter("ES_PADRE", 'S');
            $ntvQuery->setParameter("ESTADOS",  array('Anulado','Cancel','Cancelado','Eliminado'));
            return $ntvQuery->setSQL($strQuery)->getOneOrNullResult();
        }
        catch(\Exception $ex)
        {
            return $ex->getMessage();
        }
    }

    /**
     * Documentación para el método 'getResultadoBackupServicio'.
     *
     * Método que obtiene el Id de la InfoServicio Backup o su AdmiProductoCaracteristica o su InfoServicioProdCaract
     * que posee el servicio consultado siempre que disponga de servicio de respaldo.
     *
     * @param Integer $intIdServicio Id del Servicio
     * costoQuery: 10
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 18-04-2016
     */
    public function getResultadoBackupServicio($intIdServicio, $boolServProdCaract = false, $boolProdCaract = false)
    {
        try
        {
            $objMappingBuilder = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery    = $this->_em->createNativeQuery(null, $objMappingBuilder);
            $strSqlSelect      = "S.ID_SERVICIO SERVICIO";
            $strSqlOr          = "OR S.ID_SERVICIO = :SERVICIO";
            $strSqlEstado      = "AND SPC.ESTADO = :ESTADO
                                  AND PC.ESTADO  = :ESTADO";
            if($boolProdCaract)
            {
                // Se obtiene La Característica del Producto para eliminar la relación
                $objMappingBuilder->addRootEntityFromClassMetadata('telconet\schemaBundle\Entity\AdmiProductoCaracteristica', 'PC');
                $strSqlSelect = "PC.*";
                $strSqlEstado = "AND PC.ESTADO  = :ESTADO";
            }
            else if($boolServProdCaract)
            {
                // Se obtiene La Característica del Servicio Producto para eliminar la relación
                $objMappingBuilder->addRootEntityFromClassMetadata('telconet\schemaBundle\Entity\InfoServicioProdCaract', 'SPC');
                $strSqlSelect = "SPC.*";
                $strSqlEstado = "AND SPC.ESTADO = :ESTADO";
            }
            else
            {
                $objMappingBuilder->addScalarResult('SERVICIO', 'servicio', 'integer');
                $strSqlOr = "";
            }

            $strSQL = " SELECT $strSqlSelect
                        FROM       INFO_SERVICIO                S
                        INNER JOIN INFO_SERVICIO_PROD_CARACT    SPC ON SPC.SERVICIO_ID                = S.ID_SERVICIO
                        INNER JOIN ADMI_PRODUCTO_CARACTERISTICA PC  ON PC.ID_PRODUCTO_CARACTERISITICA = SPC.PRODUCTO_CARACTERISITICA_ID
                        INNER JOIN ADMI_CARACTERISTICA          C   ON C.ID_CARACTERISTICA            = PC.CARACTERISTICA_ID
                        INNER JOIN INFO_SERVICIO_TECNICO        ST  ON ST.SERVICIO_ID                 = S.ID_SERVICIO
                        INNER JOIN ADMI_TIPO_MEDIO              TM  ON TM.ID_TIPO_MEDIO               = ST.ULTIMA_MILLA_ID
                        WHERE (SPC.VALOR                   = TO_CHAR(:SERVICIO) $strSqlOr)
                        AND   C.DESCRIPCION_CARACTERISTICA = :CARACTERISTICA
                        AND   (ST.TIPO_ENLACE)             = :ENLACE
                        $strSqlEstado
                        AND   C.ESTADO                     = :ESTADO
                        ";

            $objNativeQuery->setParameter("SERVICIO",       $intIdServicio);
            $objNativeQuery->setParameter("CARACTERISTICA", 'ES_BACKUP');
            $objNativeQuery->setParameter("ENLACE",         'BACKUP');
            $objNativeQuery->setParameter("ESTADO",         'Activo');

            try
            {
                if($boolServProdCaract || $boolProdCaract)
                {
                    return $objNativeQuery->setSQL($strSQL)->getOneOrNullResult();
                }
                else
                {
                    return $objNativeQuery->setSQL($strSQL)->getSingleScalarResult();
                }
            }
            catch(\Doctrine\ORM\NoResultException $e)
            {
                // Controlar la excepción aquí. En este caso, estamos estableciendo la respuesta a NULL
                return null;
            }
        }
        catch(\Exception $e)
        {
            return null;
        }
    }

    /**
     * Documentación para el método 'getJsonReporteJefaturaResultadosMes'.
     * 
     * Método una cadena en formato JSON con las ventas brutas y activas por jurisdicción.
     * 
     * @param Array $arrayParametros['JURISDICCION'] String nombre de la jurisdicción.
     *              $arrayParametros['ESTADOS_PER']  Array  listado de estados de la PersonaEmpresaRol.
     *              $arrayParametros['ROLES']        Array  listado de roles.
     *              $arrayParametros['ESTADO_SH']    Array  listado de estados del servicioHistorial.
     *              $arrayParametros['ESTADOS_P']    Array  listado de estados de los puntos.
     *              $arrayParametros['ESTADOS_AM']   Array  listado de estados Activo-Modificado.
     *              $arrayParametros['ES_VENTA']     String define si es una venta.
     *              $arrayParametros['EMPRESA']      String código de la empresa.
     *              $arrayParametros['MES']          String fecha para la consulta en formato Mes-Año (mmyyyy).
     *              $arrayParametros['OBSERVACION']  String observación para ventas activas
     *              $arrayParametros['OBSRV_BRUTA']  String observación para ventas brutas
     *              $arrayParametros['ACCION']       String acción que debe cumplir el servicioHistorial
     * 
     * @return Array $arrayResponse['JSON']           String Cadena JSON con los datos del listado.
     *               $arrayResponse['RESULTADOS_MES'] Array  Listado de resultado del mes.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 07-03-2016
     */
    public function getJsonReporteJefaturaResultadosMes($listaParametrosResMes, $arrayParametros)
    {
        $arrayVentas = array();
        try
        {
            $intTotalJurisdicciones = count($listaParametrosResMes);
            
            if($listaParametrosResMes && $intTotalJurisdicciones > 0)
            {
                $arrayVentas           = $this->getResultadoVentasActivasBrutasMes($listaParametrosResMes, $arrayParametros);
                $arrayResponse['JSON'] = '{"total":"' . $intTotalJurisdicciones . '","resultadosMes":' . json_encode($arrayVentas) . '}';
            }
            else
            {
                $arrayResponse['JSON'] = '{"total":"0","encontrados":[]}';
            }
        }
        catch(\Exception $ex)
        {
            $arrayResponse['JSON'] = $ex->getMessage();
        }
        
        $arrayResponse['RESULTADOS_MES'] = $arrayVentas;
        
        return $arrayResponse;
    }
    
    /**
     * Documentación para el método 'getResultadoVentasActivasBrutasMes'.
     * 
     * Método que obtiene el total de las ventas brutas y activas por las jurisdicciones parametrizadas
     * 
     * Para el cálculo dentro de un mes específico se adiciona al último día del mes el valor numérico 
     * 0,999988403 que representa 23 horas con 59 minutos y 59 segundos, basado en la siguiente tabla
     * -----------------------------------------------------------------------------
     * | A): 1 Hora   (1/24) = 0,041666667   | X): 23 Horas   (Ax23) = 0,958333341 | 
     * -----------------------------------------------------------------------------
     * | B): 1 Minuto (A/60) = 0,000694444   | Y): 59 Minutos (Bx59) = 0,040972196 |
     * -----------------------------------------------------------------------------
     * | C): 1 Segundo(B/60) = 0,000011574   | Z): 59 Segundos(Cx59) = 0,000682866 |
     * -----------------------------------------------------------------------------
     * | Último instante del día ->  ( X + Y + Z )  = 0,999988403                  |
     * -----------------------------------------------------------------------------
     * 
     * @param Array $arrayParametros['JURISDICCION'] String nombre de la jurisdicción.
     *              $arrayParametros['ESTADOS_PER']  Array  listado de estados de la PersonaEmpresaRol.
     *              $arrayParametros['ROLES']        Array  listado de roles.
     *              $arrayParametros['ESTADO_SH']    Array  listado de estados del servicioHistorial.
     *              $arrayParametros['ESTADOS_P']    Array  listado de estados de los puntos.
     *              $arrayParametros['ESTADOS_AM']   Array  listado de estados Activo-Modificado.
     *              $arrayParametros['ES_VENTA']     String define si es una venta.
     *              $arrayParametros['EMPRESA']      String código de la empresa.
     *              $arrayParametros['MES']          String fecha para la consulta en formato Mes-Año (mmyyyy).
     *              $arrayParametros['OBSERVACION']  String observación para ventas activas
     *              $arrayParametros['OBSRV_BRUTA']  String observación para ventas brutas
     *              $arrayParametros['ACCION']       String acción que debe cumplir el servicioHistorial
     * 
     * @return Array Listado de ventas brutas y activas.
     * 
     * costoQuery: 53
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 26-10-2015
     */
    public function getResultadoVentasActivasBrutasMes($listaParametrosResMes, $arrayParametros)
    {
        $rsmBuilder = new ResultSetMappingBuilder($this->_em);
        $ntvQuery   = $this->_em->createNativeQuery(null, $rsmBuilder);
        
        $strSelectPivotJurisdiccion = '';
        $strSelectPivotOrden        = '';
        $arraySelectInJurisdiccion  = array();
        $strSelectLastJurisdiccion  = '';
        
        $intTotal = count($listaParametrosResMes);
        $intCount = 1;
        
        foreach($listaParametrosResMes as $entityJurisdiccion)
        {
            $strValor1 = $entityJurisdiccion['valor1'];
            $strValor2 = $entityJurisdiccion['valor2'];
            $strValor3 = $entityJurisdiccion['valor3'];
            
            $strSelectPivotJurisdiccion .= "WHEN JURISDICCION = '$strValor1' THEN '$strValor2' ";
            $strSelectPivotOrden        .= "WHEN JURISDICCION = '$strValor1' THEN '$strValor3' ";
            
            if($intTotal > $intCount)
            {
                $arraySelectInJurisdiccion[] = "'$strValor1'";
            }
            else
            {
                $strSelectLastJurisdiccion = $strValor1;
            }
            
            $intCount++;
        }
        
        $strSelectInJurisdiccion = implode(',', $arraySelectInJurisdiccion);
        
        $strCommonSelect = $this->getJefesCommonSQLSelect();
        $sqlQuery   = " SELECT CASE $strSelectPivotJurisdiccion
                                    END JURISDICCION,
                                    BRUTA, 
                                    ACTIVA,
                               CASE $strSelectPivotOrden 
                                    END ORDEN
                        FROM 
                        (
                          SELECT JURISDICCION, COUNT(JURISDICCION) VENTAS, TIPO_VENTA FROM 
                          (
                                SELECT 
                                CASE WHEN J.NOMBRE_JURISDICCION IN ($strSelectInJurisdiccion) THEN J.NOMBRE_JURISDICCION 
                                     ELSE '$strSelectLastJurisdiccion' END JURISDICCION,
                                CASE WHEN SH.ESTADO =  'Activo' THEN 'ACTIVA' ELSE 'BRUTA' END  AS TIPO_VENTA
                                $strCommonSelect
                                WHERE  R.DESCRIPCION_ROL IN     (:ROLES)
                                AND R.ESTADO            IN     (:ESTADOS_AM)
                                AND J.ESTADO            IN     (:ESTADOS_AM)
                                AND PER.ESTADO          IN     (:ESTADOS_PER)
                                AND P.ESTADO            IN     (:ESTADOS_P)
                                AND S.ES_VENTA          =       :ES_VENTA
                                AND EG.PREFIJO          =       :EMPRESA
                                AND UPPER(AP.DESCRIPCION_PRODUCTO) = :PRODUCTO
                                AND 
                                (  
                                   (
                                         UPPER(SH.ESTADO) IN (:ESTADO_BRU)
                                     AND UPPER(SYS.DBMS_LOB.SUBSTR(SH.OBSERVACION, 4000, 1)) = UPPER(:OBSRV_BRUTA) 
                                     AND CN.FE_APROBACION BETWEEN TRUNC(TO_DATE(:MES, 'MMYYYY')) 
                                                              AND TRUNC(LAST_DAY(TO_DATE(:MES, 'MMYYYY')) + 0.999988403)
                                   )
                                   OR
                                   (      SH.ESTADO = :ESTADO_ACT
                                     AND  UPPER(SYS.DBMS_LOB.SUBSTR(SH.OBSERVACION, 4000, 1)) = UPPER(:OBSERVACION) 
                                     AND (SH.ACCION      IS    NULL        OR UPPER(SH.ACCION) LIKE UPPER(:ACCION)) 
                                     AND SH.FE_CREACION BETWEEN TRUNC(TO_DATE(:MES, 'MMYYYY')) 
                                                            AND TRUNC(LAST_DAY(TO_DATE(:MES, 'MMYYYY')) + 0.999988403)
                                   )
                                )
                                    GROUP BY J.NOMBRE_JURISDICCION, SH.SERVICIO_ID, SH.ESTADO
                          ) GROUP BY JURISDICCION, TIPO_VENTA
                        ) 
                        PIVOT 
                        (
                           MIN(VENTAS)
                           FOR TIPO_VENTA IN ('BRUTA' AS BRUTA, 'ACTIVA' AS ACTIVA)
                        )
                        ORDER BY ORDEN";
        
        $rsmBuilder->addScalarResult('JURISDICCION', 'jurisdiccion', 'string');
        $rsmBuilder->addScalarResult('BRUTA',        'brutas',       'integer');
        $rsmBuilder->addScalarResult('ACTIVA',       'activas',      'integer');
        
        $ntvQuery->setParameter('ESTADOS_PER', $arrayParametros['ESTADOS_PER']);
        $ntvQuery->setParameter('ROLES',       $arrayParametros['ROLES']);
        $ntvQuery->setParameter('ESTADO_BRU',  $arrayParametros['ESTADO_BRU']);
        $ntvQuery->setParameter('ESTADO_ACT',  $arrayParametros['ESTADO_ACT']);
        $ntvQuery->setParameter('ESTADOS_P',   $arrayParametros['ESTADOS_P']);
        $ntvQuery->setParameter('ESTADOS_AM',  $arrayParametros['ESTADOS_AM']);
        $ntvQuery->setParameter('ES_VENTA',    $arrayParametros['ES_VENTA']);
        $ntvQuery->setParameter('EMPRESA',     $arrayParametros['EMPRESA']);
        $ntvQuery->setParameter('OBSERVACION', $arrayParametros['OBSERVACION']);
        $ntvQuery->setParameter('OBSRV_BRUTA', $arrayParametros['OBSRV_BRUTA']);
        $ntvQuery->setParameter('ACCION',      $arrayParametros['ACCION']);
        $ntvQuery->setParameter('MES',         $arrayParametros['MES']);
        $ntvQuery->setParameter('PRODUCTO',    $arrayParametros['PRODUCTO']);

        return $ntvQuery->setSQL($sqlQuery)->getResult();
    }
    
    /**
     * Documentación para el método 'getResultadoVentasActivasBrutas'.
     * 
     * Método que obtiene la cantidad total de las ventas brutas o activas
     * Para el cálculo dentro de un mes específico se adiciona al último día del mes el valor numérico 
     * 0,999988403 que representa 23 horas con 59 minutos y 59 segundos, basado en la siguiente tabla
     * -----------------------------------------------------------------------------
     * | A): 1 Hora   (1/24) = 0,041666667   | X): 23 Horas   (Ax23) = 0,958333341 | 
     * -----------------------------------------------------------------------------
     * | B): 1 Minuto (A/60) = 0,000694444   | Y): 59 Minutos (Bx59) = 0,040972196 |
     * -----------------------------------------------------------------------------
     * | C): 1 Segundo(B/60) = 0,000011574   | Z): 59 Segundos(Cx59) = 0,000682866 |
     * -----------------------------------------------------------------------------
     * | Último instante del día ->  ( X + Y + Z )  = 0,999988403                  |
     * -----------------------------------------------------------------------------
     * 
     * @param Array $arrayParametros['JURISDICCION'] String nombre de la jurisdicción.
     *              $arrayParametros['ESTADOS_PER']  Array  listado de estados de la PersonaEmpresaRol.
     *              $arrayParametros['ROLES']        Array  listado de roles.
     *              $arrayParametros['ESTADO_SH']    Array  listado de estados del servicioHistorial.
     *              $arrayParametros['ESTADOS_P']    Array  listado de estados de los puntos.
     *              $arrayParametros['ESTADOS_AM']   Array  listado de estados Activo-Modificado.
     *              $arrayParametros['ES_VENTA']     String define si es una venta.
     *              $arrayParametros['EMPRESA']      String código de la empresa.
     *              $arrayParametros['MES']          String fecha para la consulta en formato Mes-Año (mmyyyy).
     *              $arrayParametros['OBSERVACION']  String observación para ventas activas
     *              $arrayParametros['OBSRV_BRUTA']  String observación para ventas brutas
     *              $arrayParametros['ACCION']       String acción que debe cumplir el servicioHistorial
     * @param Bool  $boolActivas indica si la consulta es de ventas brutas o activas.
     * 
     * @return Integer  Cantidad de Ventas
     * 
     * costoQuery: 49
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 26-10-2015
     */
    public function getResultadoVentasActivasBrutas($arrayParametros, $boolActivas)
    {
        $rsmBuilder      = new ResultSetMappingBuilder($this->_em);
        $ntvQuery        = $this->_em->createNativeQuery(null, $rsmBuilder);
        $strCommonSelect = $this->getJefesCommonSQLSelect();
        
        $sqlQuery = " SELECT COUNT(*) AS TOTAL FROM ( SELECT SH.SERVICIO_ID 
                      $strCommonSelect
                      WHERE  R.DESCRIPCION_ROL IN     (:ROLES)
                              AND R.ESTADO            IN     (:ESTADOS_AM)
                              AND J.ESTADO            IN     (:ESTADOS_AM)
                              AND PER.ESTADO          IN     (:ESTADOS_PER)
                              AND P.ESTADO            IN     (:ESTADOS_P)
                              AND S.ES_VENTA          =       :ES_VENTA
                              AND EG.PREFIJO          =       :EMPRESA
                              AND UPPER(AP.DESCRIPCION_PRODUCTO) = :PRODUCTO";
        if($boolActivas)
        {
            $ntvQuery->setParameter('OBSERVACION',  $arrayParametros['OBSERVACION']);
            $ntvQuery->setParameter('ACCION',       $arrayParametros['ACCION']);
            $sqlQuery .= " AND  UPPER(SYS.DBMS_LOB.SUBSTR(SH.OBSERVACION, 4000, 1)) = UPPER(:OBSERVACION) 
                           AND (SH.ACCION      IS    NULL        OR UPPER(SH.ACCION) LIKE UPPER(:ACCION)) 
                           AND SH.FE_CREACION BETWEEN TRUNC(TO_DATE(:MES, 'MMYYYY')) 
                                                  AND TRUNC(LAST_DAY(TO_DATE(:MES, 'MMYYYY')) + 0.999988403) ";
        }
        else
        {
            $ntvQuery->setParameter('ESTADO_BRU',   $arrayParametros['ESTADO_BRU']);
            $ntvQuery->setParameter('OBSRV_BRUTA', $arrayParametros['OBSRV_BRUTA']);
            $sqlQuery .= "  AND UPPER(SH.ESTADO) IN (:ESTADO_BRU)
                            AND UPPER(SYS.DBMS_LOB.SUBSTR(SH.OBSERVACION, 4000, 1)) = UPPER(:OBSRV_BRUTA) 
                            AND CN.FE_APROBACION BETWEEN TRUNC(TO_DATE(:MES, 'MMYYYY')) 
                                                     AND TRUNC(LAST_DAY(TO_DATE(:MES, 'MMYYYY')) + 0.999988403) ";
        }
        $sqlQuery .= $this->getJurisdiccion($arrayParametros);
        $sqlQuery .= "GROUP BY SH.SERVICIO_ID) ";
            
        $rsmBuilder->addScalarResult('TOTAL', 'total', 'integer');

        $ntvQuery->setParameter('CMDN',         $arrayParametros['CMDN']);
        $ntvQuery->setParameter('JURISDICCION', $arrayParametros['JURISDICCION']);
        $ntvQuery->setParameter('ESTADOS_PER',  $arrayParametros['ESTADOS_PER']);
        $ntvQuery->setParameter('ROLES',        $arrayParametros['ROLES']);
        $ntvQuery->setParameter('ESTADO_SH',    $arrayParametros['ESTADO_SH']);
        $ntvQuery->setParameter('ESTADOS_P',    $arrayParametros['ESTADOS_P']);
        $ntvQuery->setParameter('ESTADOS_AM',   $arrayParametros['ESTADOS_AM']);
        $ntvQuery->setParameter('ES_VENTA',     $arrayParametros['ES_VENTA']);
        $ntvQuery->setParameter('EMPRESA',      $arrayParametros['EMPRESA']);
        $ntvQuery->setParameter('MES',          $arrayParametros['MES']);
        $ntvQuery->setParameter('PRODUCTO',     $arrayParametros['PRODUCTO']);
        
        return $ntvQuery->setSQL($sqlQuery)->getSingleScalarResult();
    }
    
    /**
     * Documentación para el método 'getJsonReporteJefaturaResultadosSupervisor'.
     * 
     * Método una cadena en formato JSON con la cantidad de ventas de un supervisor.
     * 
     * @param Array $listaSupervisores Listado de Supervisores a cargo.
     * @param Array $arrayParametros['JURISDICCION'] String nombre de la jurisdicción.
     *              $arrayParametros['CMDN']         String operador de búsqueda 
     *              $arrayParametros['CONTRATO']     String estado del contrato.
     *              $arrayParametros['ESTADOS_PER']  Array  listado de estados de la PersonaEmpresaRol.
     *              $arrayParametros['ROLES']        Array  listado de roles.
     *              $arrayParametros['ESTADO_SH']    Array  listado de estados del servicioHistorial.
     *              $arrayParametros['ESTADOS_P']    Array  listado de estados de los puntos.
     *              $arrayParametros['ESTADOS_AM']   Array  listado de estados Activo-Modificado.
     *              $arrayParametros['EMPRESA']      String código de la empresa.
     *              $arrayParametros['MES']          String fecha para la consulta en formato Mes-Año (mmyyyy).
     *              $arrayParametros['OBSERVACION']  String observación para ventas activas
     *              $arrayParametros['OBSRV_BRUTA']  String observación para ventas brutas
     *              $arrayParametros['ACCION']       String acción que debe cumplir el servicioHistorial
     * 
     * @return Array $arrayResponse['JSON'] String Cadena JSON con los datos del listado
     *               $arrayResponse['JSON'] 
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 07-03-2016
     */
    public function getJsonReporteJefaturaResultadosSupervisor($listaSupervisores, $arrayParametros, $objInfoPersonaRepository)
    {
        try
        {
            $arregloSupervisores = array();
            $arregloReporteSup   = array();
            $listaIndicadorSup   = array();
            $arraySupervisoresId = array();
            
            if($listaSupervisores && count($listaSupervisores) > 0)
            {
                $intTotalMeta = 0;
                $i            = 0;

                foreach($listaSupervisores as $entitySupervisor)
                {
                    $arrayParametros['PERSONAEMPRESAROLID'] = $entitySupervisor['id'];
                    $arrayParametros['IDSUPERVISOR']        = $entitySupervisor['id'];
                    $arraySupervisoresId[]                  = $entitySupervisor['id'];

                    $strSupervisor  = $entitySupervisor['apellidos'] . ' ' . explode(' ', $entitySupervisor['nombres'])[0];
                    $intVentaActiva = $this->getResultadoCumplimientoVentasSupervisor($arrayParametros);

                    $arrayParametros['CARACTERISTICA'] = 'META BRUTA';

                    $objMetaBruta  = $objInfoPersonaRepository->getResultadoCaracteristicaPersonaEmpresaRolMensual($arrayParametros);
                    $intMetaActiva = 1;
                    $intMetaBruta  = $objMetaBruta == null ? 1 : ($objMetaBruta[0]['valor'] == 0 ? 1 : $objMetaBruta[0]['valor']);

                    if($intMetaBruta > 0)
                    {
                        $arrayParametros['CARACTERISTICA'] = 'META ACTIVA';
                    
                        $objMetaActiva = $objInfoPersonaRepository->getResultadoCaracteristicaPersonaEmpresaRolMensual($arrayParametros);
                        $intMetaActiv  = $objMetaActiva == null ? -1 : ($objMetaActiva[0]['valor'] == 0 ? 1 : $objMetaActiva[0]['valor']);
                        $intMetaActiva = round($intMetaBruta * ($intMetaActiv / 100)); 
                    }
                    $fltCumplimiento = round((($intVentaActiva / $intMetaActiva) * 100), 2);
                    $objSupervisor   = array('supervisor'          => $strSupervisor,
                                             'meta'                => $intMetaActiva,
                                             'ventas'              => $intVentaActiva,
                                             'cumplimiento'        => $fltCumplimiento);

                    if($fltCumplimiento < 70)
                    {
                        $listaIndicadorSup[] = "red";
                    }
                    else if($fltCumplimiento >= 70 && $fltCumplimiento < 99)
                    {
                        $listaIndicadorSup[] = "yellow";
                    }
                    else
                    {
                        $listaIndicadorSup[] = "green";
                    }
                    $arregloSupervisores[] = $objSupervisor;

                    $objSupervisor["cumplimiento"] = $fltCumplimiento / 100;
                    $objSupervisor["meta"]         = (intval($objSupervisor["meta"]));
                    $objSupervisor["ventas"]       = (intval($objSupervisor["ventas"]));

                    unset($objSupervisor["idPersonaSupervisor"]);

                    $arregloReporteSup[] = $objSupervisor;
                    $intTotalMeta       += $intMetaActiva;
                    $i++;
                }

                if($intTotalMeta == 0)
                {
                    $arregloSupervisores = null;
                }
                $arrayResponse['JSON'] = '{"total":"' . $i . '","resultadosPorSupervisor":' . json_encode($arregloSupervisores) . '}';
            }
            else
            {
                $arrayResponse['JSON'] = '{"total":"0","resultadosPorSupervisor":[]}';
            }
        }
        catch(\Exception $ex)
        {
            $arrayResponse['JSON'] = $ex->getMessage();
        }
        $arrayResponse['RESULTADOS_SUP']       = $arregloReporteSup;
        $arrayResponse['INDICADORES_SUP']      = $listaIndicadorSup;
        $arrayResponse['INDENTIFICADORES_SUP'] = $arraySupervisoresId;
        
        return $arrayResponse;
    }

    /**
     * Documentación para el método 'getResultadoCumplimientoVentasSupervisor'.
     * 
     * Método que obtiene la cantidad de ventas de un supervisor
     * 
     * @param Array $arrayParametros['JURISDICCION'] String  nombre de la jurisdicción.
     *              $arrayParametros['CMDN']         String  operador de búsqueda 
     *              $arrayParametros['ESTADOS_PER']  Array   listado de estados de la PersonaEmpresaRol.
     *              $arrayParametros['ROLES']        Array   listado de roles.
     *              $arrayParametros['ESTADO_SH']    Array   listado de estados del servicioHistorial.
     *              $arrayParametros['ESTADOS_P']    Array   listado de estados de los puntos.
     *              $arrayParametros['ESTADOS_AM']   Array   listado de estados Activo-Modificado.
     *              $arrayParametros['ES_VENTA']     String  define si es una venta.
     *              $arrayParametros['EMPRESA']      String  código de la empresa.
     *              $arrayParametros['MES']          String  fecha para la consulta en formato Mes-Año (mmyyyy).
     *              $arrayParametros['OBSERVACION']  String  observación para ventas activas
     *              $arrayParametros['OBSRV_BRUTA']  String  observación para ventas brutas 
     *              $arrayParametros['ACCION']       String  acción que debe cumplir el servicioHistorial
     *              $arrayParametros['IDSUPERVISOR'] Integer IdPersonaEmpresaRol del supervisor.
     * 
     * @return Integer  Cantidad de Ventas 
     * 
     * costoQuery: 98
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 26-10-2015
     */
    public function getResultadoCumplimientoVentasSupervisor($arrayParametros)
    {
        $rsmBuilder = new ResultSetMappingBuilder($this->_em);
        $ntvQuery   = $this->_em->createNativeQuery(null, $rsmBuilder);
        
        $strCommonSelect = $this->getJefesCommonSQLSelect();
        $strCommonWhere  = $this->getJefesCommonSQLWhere();
        
        $sqlQuery = " SELECT COUNT(*) AS TOTAL FROM ( SELECT SH.SERVICIO_ID
                         $strCommonSelect
                         INNER JOIN INFO_PERSONA_EMPRESA_ROL PER_V ON  PER_V.REPORTA_PERSONA_EMPRESA_ROL_ID IN (:IDSUPERVISOR)
                         INNER JOIN INFO_PERSONA             PE    ON  PE.ID_PERSONA  = PER_V.PERSONA_ID
                                                                   AND P.USR_VENDEDOR = PE.LOGIN
                         $strCommonWhere ";

        $rsmBuilder->addScalarResult('TOTAL', 'total', 'integer');
        
        $sqlQuery .= $this->getJurisdiccion($arrayParametros['JURISDICCION']);
        if($arrayParametros['ACTIVAS'])
        {
            $ntvQuery->setParameter('OBSERVACION',  $arrayParametros['OBSERVACION']);
            $ntvQuery->setParameter('ACCION',       $arrayParametros['ACCION']);
            $sqlQuery .= "AND  UPPER(SYS.DBMS_LOB.SUBSTR(SH.OBSERVACION, 4000, 1)) = UPPER(:OBSERVACION)
                          AND (SH.ACCION      IS    NULL        OR UPPER(SH.ACCION) LIKE UPPER(:ACCION)) ";
        }
        $sqlQuery .= ' GROUP BY SH.SERVICIO_ID)';
       
        $ntvQuery->setParameter('CMDN',         $arrayParametros['CMDN']);
        $ntvQuery->setParameter('ESTADOS_PER',  $arrayParametros['ESTADOS_PER']);
        $ntvQuery->setParameter('ROLES',        $arrayParametros['ROLES']);
        $ntvQuery->setParameter('ESTADO_SH',    $arrayParametros['ESTADO_SH']);
        $ntvQuery->setParameter('ESTADOS_P',    $arrayParametros['ESTADOS_P']);
        $ntvQuery->setParameter('ES_VENTA',     $arrayParametros['ES_VENTA']);
        $ntvQuery->setParameter('EMPRESA',      $arrayParametros['EMPRESA']);
        $ntvQuery->setParameter('MES',          $arrayParametros['MES']);
        $ntvQuery->setParameter('IDSUPERVISOR', $arrayParametros['IDSUPERVISOR']);
        $ntvQuery->setParameter('ESTADOS_AM',   $arrayParametros['ESTADOS_AM']);
        $ntvQuery->setParameter('PRODUCTO',     $arrayParametros['PRODUCTO']);
        
        return $ntvQuery->setSQL($sqlQuery)->getSingleScalarResult();
    }
    
    /**
     * Documentación para el método 'getJsonReporteJefaturaVentasPorAsesor'.
     * 
     * Método una cadena en formato JSON con los rangos de ventas y la cantidad de asesores cuya cantidad de ventas se encuentra 
     * dentro de determinado rango.
     * 
     * @param Array $arrayParametrosVentasAsesor     Listado de parámetros para las ventas por asesor.
     * @param Array $arrayParametros['JURISDICCION'] String nombre de la jurisdicción.
     *              $arrayParametros['CMDN']         String operador de búsqueda 
     *              $arrayParametros['CONTRATO']     String estado del contrato.
     *              $arrayParametros['ESTADOS_PER']  Array  listado de estados de la PersonaEmpresaRol.
     *              $arrayParametros['ROLES']        Array  listado de roles.
     *              $arrayParametros['ESTADO_SH']    Array  listado de estados del servicioHistorial.
     *              $arrayParametros['ESTADOS_P']    Array  listado de estados de los puntos.
     *              $arrayParametros['ESTADOS_AM']   Array  listado de estados Activo-Modificado.
     *              $arrayParametros['EMPRESA']      String código de la empresa.
     *              $arrayParametros['MES']          String fecha para la consulta en formato Mes-Año (mmyyyy).
     *              $arrayParametros['OBSERVACION']  String observación para ventas activas
     *              $arrayParametros['OBSRV_BRUTA']  String observación para ventas brutas 
     *              $arrayParametros['ACCION']       String acción que debe cumplir el servicioHistorial
     * 
     * @return Array $arrayResponse['JSON']              String Cadena JSON con los datos del listado.
     *               $arrayResponse['VENTAS_ASESOR']     Array Listado de Ventas por asesor para el reporte.
     *               $arrayResponse['VENTAS_ASESOR_IND'] Array Listado con los indicadores críticos de las ventas por asesor.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 07-03-2016
     */
    public function getJsonReporteJefaturaVentasPorAsesor($arrayParametrosVentasAsesor, $arrayParametros, $arraySupervisoresId)
    {
        $arraySLQParametros   = array();
        $arrayValoresCriticos = array();
        
        try
        {
            if($arrayParametrosVentasAsesor && ($intCountVentasAsesor = count($arrayParametrosVentasAsesor)) > 0)
            {
                for($i = 0; $i < $intCountVentasAsesor; $i++)
                {
                    $strRangoPuntoInicial   = 'RANGO_' . $i . '1';
                    $strRangoPuntoFinal     = 'RANGO_' . $i . '2';
                    $strValorRango          = 'VALOR_RANGO_' . $i;
                    $strOrdenRango          = 'ORDEN_RANGO_' . $i;
                    $arrayValoresCriticos[] = $arrayParametrosVentasAsesor[$i]['valor5'];
                    
                    // Para armar el query en base a los rangos parametrizados
                    $arraySLQParametros[] = array($strRangoPuntoInicial, $strRangoPuntoFinal, $strOrdenRango, $strValorRango);
                    $arrayRangosDatos[]   = array($strOrdenRango        => intval($arrayParametrosVentasAsesor[$i]['valor4']),
                                                  $strRangoPuntoInicial => $arrayParametrosVentasAsesor[$i]['valor2'],
                                                  $strRangoPuntoFinal   => $arrayParametrosVentasAsesor[$i]['valor3'],
                                                  $strValorRango        => $arrayParametrosVentasAsesor[$i]['valor1']);
                }

                $arrayParametros['RANGO']        = $arrayRangosDatos;
                $arrayParametros['SQLRANGOS']    = $arraySLQParametros;
                $arrayParametros['JURISDICCION'] = null;
                $arrayParametros['ACTIVAS']      = true;
                $arrayParametros['SUPERVISORES'] = $arraySupervisoresId;
                $arrayParametros['ESTADO_SH']    = 'Activo';

                $listaVentasXAsesor = $this->getResultadoRangosVentasAsesores($arrayParametros);
                $arregloAsesores    = array();
                $arrayIndicadoresVA = array();

                for($j = 0; $j < $intCountVentasAsesor; $j++)
                {
                    $objAsesor = array('puntos'    => $listaVentasXAsesor[$j]['grupo'],
                                       'indicador' => $arrayValoresCriticos[$j],
                                       'asesores'  => $listaVentasXAsesor[$j]['asesores']);
                    
                    $arrayIndicadoresVA[]   = $objAsesor['indicador'] == 0 ? 'red' : 'green';
                    $objAsesor['indicador'] = '';
                    $arregloAsesores[]      = $objAsesor;
                }
                
                $arrayResponse['JSON'] = '{"total":"' . $intCountVentasAsesor . '","ventasPorAsesor":' . json_encode($arregloAsesores) . '}';
            }
            else
            {
                $arrayResponse['JSON'] = '{"total":"0","ventasPorAsesor":[]}';
            }
        }
        catch(\Exception $ex)
        {
            $arrayResponse['JSON'] = $ex->getMessage();
        }
        
        $arrayResponse['VENTAS_ASESOR']     = $arregloAsesores;
        $arrayResponse['VENTAS_ASESOR_IND'] = $arrayIndicadoresVA;

        return $arrayResponse;
    }
    
    /**
     * Documentación para el método 'getResultadoRangosVentasAsesores'.
     * 
     * Método que obtiene rangos de ventas y la cantidad de asesores cuya cantidad de ventas se encuentra dentro de determinado rango.
     * 
     * @param Array $arrayParametros['JURISDICCION'] String  nombre de la jurisdicción.
     *              $arrayParametros['CMDN']         String  operador de búsqueda 
     *              $arrayParametros['ESTADOS_PER']  Array   listado de estados de la PersonaEmpresaRol.
     *              $arrayParametros['ROLES']        Array   listado de roles.
     *              $arrayParametros['ESTADO_SH']    Array   listado de estados del servicioHistorial.
     *              $arrayParametros['ESTADOS_P']    Array   listado de estados de los puntos.
     *              $arrayParametros['ESTADOS_AM']   Array   listado de estados Activo-Modificado.
     *              $arrayParametros['EMPRESA']      String  código de la empresa.
     *              $arrayParametros['MES']          String  fecha para la consulta en formato Mes-Año (mmyyyy).
     *              $arrayParametros['OBSERVACION']  String  observación para ventas activas
     *              $arrayParametros['OBSRV_BRUTA']  String  observación para ventas brutas 
     *              $arrayParametros['ACCION']       String  acción que debe cumplir el servicioHistorial
     *              $arrayParametros['SUPERVISORES'] Array   listado de ID's de los supervisores.
     * 
     * @return Response Lista de rangos de ventas por asesores
     * 
     * costoQuery: 140
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 26-10-2015
     */
    public function getResultadoRangosVentasAsesores($arrayParametros)
    {
        $rsmBuilder              = new ResultSetMappingBuilder($this->_em);
        $ntvQuery                = $this->_em->createNativeQuery(null, $rsmBuilder);
        $strCommonSelect         = $this->getJefesCommonSQLSelect();
        $strCommonWhere          = $this->getJefesCommonSQLWhere();
        
        $strSQLOrden = "(CASE ";
        $strSQLGrupo = "(CASE ";
        
        foreach($arrayParametros['SQLRANGOS'] as $objSQLParametro)
        {
            $strRangoPuntoInical = $objSQLParametro[0];
            $strRangoPuntoFinal  = $objSQLParametro[1];
            $strOrdenRango       = $objSQLParametro[2];
            $strValorRango       = $objSQLParametro[3];
            $strSQLOrden .= "WHEN VENTAS BETWEEN :$strRangoPuntoInical AND :$strRangoPuntoFinal THEN :$strOrdenRango ";
            $strSQLGrupo .= "WHEN VENTAS BETWEEN :$strRangoPuntoInical AND :$strRangoPuntoFinal THEN :$strValorRango ";
        }
        $sqlQuery = "SELECT DET.VALOR4 ORDEN, DET.VALOR1 GRUPO, NVL(RANGOS.ASESORES, 0) ASESORES FROM ADMI_PARAMETRO_CAB CAB 
                     INNER JOIN ADMI_PARAMETRO_DET DET ON DET.PARAMETRO_ID = CAB.ID_PARAMETRO
                     LEFT JOIN 
                    ( SELECT ORDEN, GRUPO, SUM(ASESORES) AS ASESORES 
                      FROM( SELECT 
                                    $strSQLOrden
                                    END) ORDEN,
                                    $strSQLGrupo
                                    END) GRUPO,
                                   COUNT(VENTAS) AS ASESORES, 
                                   VENTAS AS VENDIERON 
                            FROM 
                        ( WITH ASESORES AS 
                              (
                                SELECT SH.SERVICIO_ID 
                                $strCommonSelect 
                                INNER JOIN INFO_PERSONA_EMPRESA_ROL PERV ON  PERV.REPORTA_PERSONA_EMPRESA_ROL_ID IN (:SUPERVISORES)
                                INNER JOIN INFO_PERSONA             PE   ON  PE.ID_PERSONA  = PERV.PERSONA_ID
                                                                        AND P.USR_VENDEDOR = PE.LOGIN 
                                $strCommonWhere ";
        $sqlQuery .= $this->getJurisdiccion($arrayParametros);
        if($arrayParametros['ACTIVAS'])
        {
            $ntvQuery->setParameter('OBSERVACION',  $arrayParametros['OBSERVACION']);
            $ntvQuery->setParameter('ACCION',       $arrayParametros['ACCION']);
            $sqlQuery .= "AND  UPPER(SYS.DBMS_LOB.SUBSTR(SH.OBSERVACION, 4000, 1)) = UPPER(:OBSERVACION)
                          AND (SH.ACCION      IS    NULL        OR UPPER(SH.ACCION) LIKE UPPER(:ACCION)) ";
        }
        
        $sqlQuery  .= "GROUP BY SH.SERVICIO_ID ),
                        SERVICIOS AS
                        (
                           SELECT P.USR_VENDEDOR VENDEDOR, COUNT(P.USR_VENDEDOR) AS VENDIDAS
                           FROM INFO_SERVICIO S 
                           INNER JOIN INFO_PUNTO P ON P.ID_PUNTO = S.PUNTO_ID
                           INNER JOIN ASESORES SR ON SR.SERVICIO_ID = S.ID_SERVICIO
                           GROUP BY P.USR_VENDEDOR
                        )
                        (SELECT PE.LOGIN ASESOR, NVL(VT.VENDIDAS, 0) VENTAS 
                          FROM INFO_PERSONA PE
                          INNER JOIN INFO_PERSONA_EMPRESA_ROL PER_S ON  PER_S.REPORTA_PERSONA_EMPRESA_ROL_ID IN (:SUPERVISORES)
                                                                    AND PE.ID_PERSONA = PER_S.PERSONA_ID
                          LEFT JOIN SERVICIOS VT ON PE.LOGIN = VT.VENDEDOR 
                          GROUP BY PE.LOGIN, VT.VENDIDAS
                        )
                       ) GROUP BY VENTAS 
                      ) GROUP BY ORDEN, GRUPO ORDER BY ORDEN 
                     ) RANGOS ON RANGOS.GRUPO = DET.VALOR1
                     WHERE CAB.NOMBRE_PARAMETRO = 'VENTAS_POR_ASESOR'
                     ORDER BY DET.VALOR4";
        
        $arrayRango = $arrayParametros['RANGO'];
        
        $rsmBuilder->addScalarResult('GRUPO',    'grupo',    'string');
        $rsmBuilder->addScalarResult('ASESORES', 'asesores', 'integer');
        $rsmBuilder->addScalarResult('ORDEN',    'orden',  'integer');
        
        for($i=0; $i<count($arrayRango); $i++)
        {
            $ntvQuery->setParameter('RANGO_' . $i . '1', intval($arrayRango[$i]['RANGO_' . $i . '1']));
            $ntvQuery->setParameter('RANGO_' . $i . '2', intval($arrayRango[$i]['RANGO_' . $i . '2']));
            $ntvQuery->setParameter('VALOR_RANGO_' . $i, $arrayRango[$i]['VALOR_RANGO_' . $i]);
            $ntvQuery->setParameter('ORDEN_RANGO_' . $i, intval($arrayRango[$i]['ORDEN_RANGO_' . $i]));
        }
        
        $ntvQuery->setParameter('CMDN',         $arrayParametros['CMDN']);
        $ntvQuery->setParameter('ESTADOS_PER',  $arrayParametros['ESTADOS_PER']);
        $ntvQuery->setParameter('ROLES',        $arrayParametros['ROLES']);
        $ntvQuery->setParameter('ESTADO_SH',    $arrayParametros['ESTADO_SH']);
        $ntvQuery->setParameter('ESTADOS_P',    $arrayParametros['ESTADOS_P']);
        $ntvQuery->setParameter('ES_VENTA',     $arrayParametros['ES_VENTA']);
        $ntvQuery->setParameter('EMPRESA',      $arrayParametros['EMPRESA']);
        $ntvQuery->setParameter('MES',          $arrayParametros['MES']);
        $ntvQuery->setParameter('SUPERVISORES', $arrayParametros['SUPERVISORES']);
        $ntvQuery->setParameter('ESTADOS_AM',   $arrayParametros['ESTADOS_AM']);
        $ntvQuery->setParameter('PRODUCTO',     $arrayParametros['PRODUCTO']);
 
        return $ntvQuery->setSQL($sqlQuery)->getResult();
    }
   
    /**
     * Documentación para el método 'getJsonReporteConsolidadoVentasAsesoresPorSupervisor'.
     * 
     * Método que obtiene La cadena JSON de los resultados consolidados, el listado de los resultados consolidado para el reporte 
     * y sus indicadores de cumplimiento.
     * 
     * @param Array $arraySupervisores Listado de Nombres de columnas de los supervisores.
     * @param Array $arrayParametros['IDPERSONAEMPRESAROL'] Integer IdPersonaEmpresaRol del Jefe.
     *              $arrayParametros['CARACTERISTICA']      String  Caracteristica a buscar.
     *              $arrayParametros['VALOR']               String  Valor de la característica a buscar.
     *              $arrayParametros['ESTADO']              String  Estado de filtrado.
     *              $arrayParametros['JURISDICCION']        String  nombre de la jurisdicción.
     *              $arrayParametros['CMDN']                String  operador de búsqueda 
     *              $arrayParametros['CONTRATO']            String  estado del contrato.
     *              $arrayParametros['ESTADOS_PER']         Array   listado de estados de la PersonaEmpresaRol.
     *              $arrayParametros['ROLES']               Array   listado de roles.
     *              $arrayParametros['ESTADO_SH']           Array   listado de estados del servicioHistorial.
     *              $arrayParametros['ESTADOS_P']           Array   listado de estados de los puntos.
     *              $arrayParametros['ESTADOS_AM']          Array   listado de estados Activo-Modificado.
     *              $arrayParametros['EMPRESA']             String  código de la empresa.
     *              $arrayParametros['MES']                 String  fecha para la consulta en formato Mes-Año (mmyyyy).
     *              $arrayParametros['OBSERVACION']         String  observación para ventas activas
     *              $arrayParametros['OBSRV_BRUTA']         String  observación para ventas brutas 
     *              $arrayParametros['ACCION']              String  acción que debe cumplir el servicioHistorial
     *              $arrayParametros['PERSONAEMPRESAROLID'] Integer  IdPersonaEmpresaRol del Supervisor.
     * 
     * @return Array $objResponse['CONSOLIDADO_REPORTE'] Array  consolidado para la exportanción del reporte
     *                           ['INDICADORES']         Array  Indicadores de cumplimiento de cada registro
     *                           ['JSON']                String Cadena JSON con los resultados consolidados.        
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 11-03-2016
     */
    public function getJsonReporteConsolidadoVentasAsesoresPorSupervisor($arrayParametros, $arraySupervisores)
    {
        
        $arrayConsolidadoFinal   = array();
        $arrayConsolidadoReporte = array();
        $arrayIndicadorAsesores  = array();
        $arrayObjConsolidado     = array();
        $arrayObjReporte         = array();
        
        $arrayReporteConsolidado = $this->getResultadoReporteConsolidadoVentasAsesoresPorSupervisor($arrayParametros);

        $i = 0;
        
        foreach($arrayReporteConsolidado as $entityConsolidado)
        {
            $arrayIndicadorAsesores[] = $entityConsolidado['indicador'];
            
            $arrayObjConsolidado['asesores'] = $entityConsolidado['asesor_supervisor'];
            $arrayObjReporte    ['asesores'] = $entityConsolidado['asesor'];
            
            // Se arma el contenido del valor de cumplimiento del asesor y el tooltip text.
            $strCumplimiento  = " title='Asesor: "  . $entityConsolidado['asesor'] . 
                                " \nMeta: "         . $entityConsolidado['meta'] . 
                                " \nCumplimiento: " . $entityConsolidado['cumplimiento'];
            
            $strTotalGeneral  = '';
            $strTotalGeneral .= "<div style='display: none;'> " . $entityConsolidado['total_binario'];
            $strTotalGeneral .= "</div><br><div style='float:left; width: 5px; padding-left: 5px'>";
            $strTotalGeneral .= "<div class='trafficlight2 trafficlight2-" . $entityConsolidado['indicador'];
            $strTotalGeneral .= "-small' style='cursor:pointer' $strCumplimiento %'>&nbsp;</div>";
            $strTotalGeneral .= "</div><div style='padding-right:25px; font-size:12px; cursor:pointer' $strCumplimiento %'> ";
            $strTotalGeneral .= $entityConsolidado['total_general'] . " </div>";
            
            foreach($arraySupervisores as $strSupervisorColumn)
            {
                $intVentas = $entityConsolidado[$strSupervisorColumn];
                if($intVentas < 0 )
                {
                    $arrayObjConsolidado[$strSupervisorColumn] = 0;
                    $arrayObjReporte    [$strSupervisorColumn] = '';
                }
                else
                {
                    $arrayObjConsolidado[$strSupervisorColumn] = $intVentas;
                    $arrayObjReporte    [$strSupervisorColumn] = $intVentas;
                }
            }
            
            $arrayObjConsolidado['total_general'] = $strTotalGeneral;
            $arrayObjReporte    ['total_general'] = $entityConsolidado['total_general'];
            
            $arrayConsolidadoFinal  [] = $arrayObjConsolidado;
            $arrayConsolidadoReporte[] = $arrayObjReporte;
            
            $i++;
        }
        
        $arrayResponse['CONSOLIDADO_REPORTE'] = $arrayConsolidadoReporte;
        $arrayResponse['INDICADORES']         = $arrayIndicadorAsesores;
        $arrayResponse['JSON']                = json_encode(array('total' => $i, 'resultadosConsolidados' => $arrayConsolidadoFinal));
        
        return $arrayResponse;
    }
    
    /**
     * Documentación para el método 'getResultadoReporteConsolidadoVentasAsesoresPorSupervisor'.
     * 
     * Método que obtiene las ventas de todos los asesores por supervisor relacionado al Jefe, 
     * muestra un indicador de cumplimiento(Verde[100%], Amarillo[69% < X < 99%], Rojo[X < 70%])
     * Tanto del Asesor como del supervisor; y los resultados sumarizados de los supervisores y asesores.
     * 
     * @param Array $arrayParametros['IDPERSONAEMPRESAROL'] Integer IdPersonaEmpresaRol del Jefe.
     *              $arrayParametros['CARACTERISTICA']      String  Caracteristica a buscar.
     *              $arrayParametros['VALOR']               String  Valor de la característica a buscar.
     *              $arrayParametros['ESTADO']              String  Estado de filtrado.
     *              $arrayParametros['JURISDICCION']        String  nombre de la jurisdicción.
     *              $arrayParametros['CMDN']                String  operador de búsqueda 
     *              $arrayParametros['CONTRATO']            String  estado del contrato.
     *              $arrayParametros['ESTADOS_PER']         Array   listado de estados de la PersonaEmpresaRol.
     *              $arrayParametros['ROLES']               Array   listado de roles.
     *              $arrayParametros['ESTADO_SH']           Array   listado de estados del servicioHistorial.
     *              $arrayParametros['ESTADOS_P']           Array   listado de estados de los puntos.
     *              $arrayParametros['ESTADOS_AM']          Array   listado de estados Activo-Modificado.
     *              $arrayParametros['EMPRESA']             String  código de la empresa.
     *              $arrayParametros['MES']                 String  fecha para la consulta en formato Mes-Año (mmyyyy).
     *              $arrayParametros['OBSERVACION']         String  observación para ventas activas
     *              $arrayParametros['OBSRV_BRUTA']         String  observación para ventas brutas 
     *              $arrayParametros['ACCION']              String  acción que debe cumplir el servicioHistorial
     *              $arrayParametros['SUPERVISORES_ID']     Integer IdPersonaEmpresaRol del Supervisor; si se setea como parámetro se obtiene
     *                                                              ORA-56900: bind variable is not supported inside pivot|unpivot operation .
     * 
     * @return Array Listado informe consolidado.
     * 
     * costoQuery: 335
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 11-03-2016
     */
    public function getResultadoReporteConsolidadoVentasAsesoresPorSupervisor($arrayParametros)
    {
        $rsmBuilder      = new ResultSetMappingBuilder($this->_em);
        $ntvQuery        = $this->_em->createNativeQuery(null, $rsmBuilder);
        $strColumnValues = "";
        $strColumnNames  = "";
        $strPivotIn      = "";
        $i               = 0;
        
        foreach($arrayParametros['SUPERVISORES'] as $strSupervisor)
        {
            $rsmBuilder->addScalarResult($strSupervisor, $strSupervisor, 'integer');
            // Se conforma la cantidad de ventas del asesor por supervisor, el -1 indica que No pertenece a determinado supervisor
            $strColumnValues .= " CASE $strSupervisor WHEN 0 THEN  -1 ELSE TOTAL_GENERAL END $strSupervisor,";
            // Nombres de columnas, corresponden al nombre-identificador del supervisor
            $strColumnNames  .= "$strSupervisor, ";
            // Se define el valor IN de la función PIVOT, no está soportado el enlace de variables (ORA-56900)
            $strPivotIn      .= $arrayParametros['SUPERVISORES_ID'][$i++] . " as $strSupervisor,";
        }
        // Se extrae la última coma para la función PIVOT.
        $strPivotIn = substr($strPivotIn, 0, -1);
        
        // TOTAL_BINARIO: indica el valor total del registro en su representación binaria para efecto de permitir ordenamiento en la pantalla.
        $sqlQuery   = " SELECT 
                        CONCAT(CONCAT(ASESOR, ';'), SUPERVISOR) ASESOR_SUPERVISOR,
                        initcap(ASESOR) ASESOR,
                        $strColumnNames
                        TOTAL_BINARIO,
                        META,
                        CUMPLIMIENTO,
                        CASE WHEN CUMPLIMIENTO < 70
                        THEN  'red'
                        ELSE
                            CASE WHEN CUMPLIMIENTO >= 70 AND CUMPLIMIENTO < 99
                            THEN  'yellow'

                            ELSE 'green'

                            END
                        END INDICADOR,

                        TOTAL_GENERAL
                        FROM (
                        SELECT 
                        ASESOR,
                        SUBSTR(SUPERVISOR, 1, 30) SUPERVISOR,
                        ROUND((META_ACTIVA / 100) * META_BRUTA) META,
                        ROUND(((TOTAL_GENERAL / (CASE WHEN ((META_ACTIVA / 100) * META_BRUTA) = 0 THEN 1 
                                                           ELSE ((META_ACTIVA / 100) * META_BRUTA) END)) * 100), 2) CUMPLIMIENTO,
                        $strColumnValues
                        DECODE(BITAND(TOTAL_GENERAL, 128), 128, '1', '0') ||
                        DECODE(BITAND(TOTAL_GENERAL, 64), 64, '1', '0')   ||
                        DECODE(BITAND(TOTAL_GENERAL, 32), 32, '1', '0')   ||
                        DECODE(BITAND(TOTAL_GENERAL, 16), 16, '1', '0')   ||
                        DECODE(BITAND(TOTAL_GENERAL, 8), 8, '1', '0')     ||
                        DECODE(BITAND(TOTAL_GENERAL, 4), 4, '1', '0')     ||
                        DECODE(BITAND(TOTAL_GENERAL, 2), 2, '1', '0')     ||
                        DECODE(BITAND(TOTAL_GENERAL, 1), 1, '1', '0')     TOTAL_BINARIO,
                        TOTAL_GENERAL
                        FROM (
                        WITH SERVICIOS AS
                       (SELECT SH.SERVICIO_ID 
                        FROM       INFO_SERVICIO_HISTORIAL  SH
                        INNER JOIN INFO_SERVICIO            S    ON  S.ID_SERVICIO      = SH.SERVICIO_ID
                        INNER JOIN INFO_PUNTO               P    ON  P.ID_PUNTO         = S.PUNTO_ID
                        INNER JOIN INFO_PERSONA_EMPRESA_ROL PER  ON  PER.ID_PERSONA_ROL = P.PERSONA_EMPRESA_ROL_ID
                        INNER JOIN INFO_EMPRESA_ROL         ER   ON  ER.ID_EMPRESA_ROL  = PER.EMPRESA_ROL_ID
                        INNER JOIN INFO_EMPRESA_GRUPO       EG   ON  EG.COD_EMPRESA     = ER.EMPRESA_COD
                        INNER JOIN ADMI_ROL                 R    ON  R.ID_ROL           = ER.ROL_ID
                        INNER JOIN ADMI_JURISDICCION        J    ON  J.ID_JURISDICCION  = P.PUNTO_COBERTURA_ID 
                        INNER JOIN INFO_CONTRATO            CN   ON  CN.PERSONA_EMPRESA_ROL_ID           =    PER.ID_PERSONA_ROL
                        INNER JOIN INFO_PERSONA_EMPRESA_ROL PERV ON  PERV.REPORTA_PERSONA_EMPRESA_ROL_ID IN (:SUPERVISORES_ID)
                        INNER JOIN INFO_EMPRESA_ROL         ERV  ON  ERV.ID_EMPRESA_ROL  = PERV.EMPRESA_ROL_ID
                        INNER JOIN INFO_EMPRESA_GRUPO       EGV  ON  EGV.COD_EMPRESA     = ERV.EMPRESA_COD
                        INNER JOIN INFO_PERSONA             PE   ON  PE.ID_PERSONA                       =    PERV.PERSONA_ID 
                                                                 AND P.USR_VENDEDOR = PE.LOGIN
                        WHERE R.DESCRIPCION_ROL IN     (:ROLES)
                          AND PER.ESTADO        IN     (:ESTADOS_PER)
                          AND P.ESTADO          IN     (:ESTADOS_P)
                          AND S.ES_VENTA        =       :ES_VENTA
                          AND EG.PREFIJO        =       :EMPRESA
                          AND EGV.PREFIJO       =       :EMPRESA
                          AND CN.ESTADO         LIKE    :CONTRATO 
                          AND LOWER(SH.ESTADO)  =        LOWER(:ESTADO_SH)
                          AND SH.FE_CREACION    BETWEEN  TRUNC(TO_DATE(:MES, 'MMYYYY')) AND TRUNC(LAST_DAY(TO_DATE(:MES, 'MMYYYY')) + 0.999988403) ";
        
        if($arrayParametros['ACTIVAS'])
        {
            $ntvQuery->setParameter('OBSERVACION',  $arrayParametros['OBSERVACION']);
            $ntvQuery->setParameter('ACCION',       $arrayParametros['ACCION']);
            $sqlQuery .= " AND  UPPER(SYS.DBMS_LOB.SUBSTR(SH.OBSERVACION, 4000, 1)) = UPPER(:OBSERVACION)
                           AND (SH.ACCION      IS    NULL        OR UPPER(SH.ACCION) LIKE UPPER(:ACCION))";
        }
        $sqlQuery .= $this->getJurisdiccion($arrayParametros);
        $sqlQuery .= " GROUP BY SH.SERVICIO_ID 
                      ),
                       VENTAS AS 
                      (
                       SELECT P.USR_VENDEDOR ASESOR, COUNT(P.USR_VENDEDOR) VENTAS
                       FROM INFO_SERVICIO S 
                       INNER JOIN INFO_PUNTO P ON P.ID_PUNTO = S.PUNTO_ID
                       INNER JOIN SERVICIOS SR ON SR.SERVICIO_ID = S.ID_SERVICIO
                       GROUP BY P.USR_VENDEDOR
                      ),
                       SUPERVISORES AS
                      (
                        SELECT PER.ID_PERSONA_ROL
                        FROM INFO_PERSONA_EMPRESA_ROL             PER
                        INNER JOIN INFO_PERSONA                   PE   ON PE.ID_PERSONA = PER.PERSONA_ID
                        INNER JOIN INFO_PERSONA_EMPRESA_ROL_CARAC PERC ON PERC.PERSONA_EMPRESA_ROL_ID       = PER.ID_PERSONA_ROL
                        INNER JOIN ADMI_CARACTERISTICA            AC   ON AC.ID_CARACTERISTICA              = PERC.CARACTERISTICA_ID
                        WHERE PERC.VALOR                         = :VALOR
                          AND PERC.ESTADO                        = :ESTADO
                          AND AC.DESCRIPCION_CARACTERISTICA      = :CARACTERISTICA
                          AND PER.REPORTA_PERSONA_EMPRESA_ROL_ID = :PERSONAEMPRESAROLID
                        ORDER BY PE.APELLIDOS, PE.NOMBRES
                      ),
                        META_BRUTA_SUB AS
                        (
                            SELECT MAX(PERC.ID_PERSONA_EMPRESA_ROL_CARACT) ID_META_BRUTA, PERC.PERSONA_EMPRESA_ROL_ID, MAX(PERC.FE_CREACION)
                            FROM INFO_PERSONA_EMPRESA_ROL_CARAC PERC
                            INNER JOIN ADMI_CARACTERISTICA      AC  ON  AC.ID_CARACTERISTICA = PERC.CARACTERISTICA_ID
                                                                    AND AC.DESCRIPCION_CARACTERISTICA = 'META BRUTA'
                            WHERE PERC.FE_CREACION BETWEEN TRUNC( TO_DATE(:MES, 'MMYYYY')) 
                                                       AND TRUNC(LAST_DAY(TO_DATE(:MES, 'MMYYYY'))) + 0.999988403
                            GROUP BY  PERC.PERSONA_EMPRESA_ROL_ID
                        ),
                        META_BRUTA AS
                        (
                            SELECT PERC.PERSONA_EMPRESA_ROL_ID AS ID_PER_ASESOR, PERC.VALOR
                            FROM INFO_PERSONA_EMPRESA_ROL_CARAC PERC 
                            INNER JOIN META_BRUTA_SUB MBS ON MBS.ID_META_BRUTA = PERC.ID_PERSONA_EMPRESA_ROL_CARACT
                        ),
                        META_ACTIVA_SUB AS
                        (
                            SELECT MAX(PERC.ID_PERSONA_EMPRESA_ROL_CARACT) ID_META_BRUTA, PERC.PERSONA_EMPRESA_ROL_ID, MAX(PERC.FE_CREACION)
                            FROM INFO_PERSONA_EMPRESA_ROL_CARAC PERC
                            INNER JOIN ADMI_CARACTERISTICA      AC  ON  AC.ID_CARACTERISTICA = PERC.CARACTERISTICA_ID
                                                                    AND AC.DESCRIPCION_CARACTERISTICA = 'META ACTIVA'
                            WHERE PERC.FE_CREACION BETWEEN TRUNC( TO_DATE(:MES, 'MMYYYY')) 
                                                       AND TRUNC(LAST_DAY(TO_DATE(:MES, 'MMYYYY'))) + 0.999988403
                            GROUP BY  PERC.PERSONA_EMPRESA_ROL_ID
                        ),
                        META_ACTIVA AS
                        (
                            SELECT PERC.PERSONA_EMPRESA_ROL_ID AS ID_PER_ASESOR, PERC.VALOR
                            FROM INFO_PERSONA_EMPRESA_ROL_CARAC PERC 
                            INNER JOIN META_ACTIVA_SUB MAS ON MAS.ID_META_BRUTA = PERC.ID_PERSONA_EMPRESA_ROL_CARACT
                        )
                       (
                        SELECT 
                        PERS.ID_PERSONA_ROL AS SUPERVISOR_COL,
                        MB.VALOR AS META_BRUTA,
                        MA.VALOR AS META_ACTIVA,
                        PER.ID_PERSONA_ROL ID_ASESOR,
                        CONCAT(CONCAT(PE.APELLIDOS, ' '), PE.NOMBRES) AS ASESOR,
                        CONCAT(REGEXP_REPLACE(PES.APELLIDOS, '[[ ]]*',''), REGEXP_REPLACE(PES.NOMBRES, '[[ ]]*','')) AS SUPERVISOR,
                        NVL(VE.VENTAS, 0)  AS TOTAL_GENERAL
                        FROM INFO_PERSONA_EMPRESA_ROL PER
                        INNER JOIN INFO_EMPRESA_ROL         ER   ON  ER.ID_EMPRESA_ROL  = PER.EMPRESA_ROL_ID
                        INNER JOIN INFO_EMPRESA_GRUPO       EG   ON  EG.COD_EMPRESA     = ER.EMPRESA_COD
                        INNER JOIN INFO_PERSONA             PE   ON PE.ID_PERSONA       = PER.PERSONA_ID 
                        INNER JOIN INFO_PERSONA_EMPRESA_ROL PERS ON PERS.ID_PERSONA_ROL = PER.REPORTA_PERSONA_EMPRESA_ROL_ID
                        INNER JOIN INFO_PERSONA             PES  ON PES.ID_PERSONA      = PERS.PERSONA_ID 
                        INNER JOIN SUPERVISORES             SUP  ON SUP.ID_PERSONA_ROL  = PER.REPORTA_PERSONA_EMPRESA_ROL_ID
                        LEFT  JOIN META_BRUTA               MB   ON MB.ID_PER_ASESOR    = PER.ID_PERSONA_ROL
                        LEFT  JOIN META_ACTIVA              MA   ON MA.ID_PER_ASESOR    = PER.ID_PERSONA_ROL
                        LEFT  JOIN VENTAS                   VE   ON VE.ASESOR           = PE.LOGIN
                        WHERE PE.APELLIDOS IS NOT NULL
                        AND   EG.PREFIJO        =       :EMPRESA
                        GROUP BY PERS.ID_PERSONA_ROL, PER.ID_PERSONA_ROL, PE.LOGIN,    VE.VENTAS, PE.APELLIDOS, 
                                 PE.NOMBRES,          PES.APELLIDOS,      PES.NOMBRES, MB.VALOR,  MA.VALOR 
                        )
                       )
                       PIVOT 
                       (
                          COUNT(SUPERVISOR_COL) FOR SUPERVISOR_COL IN ($strPivotIn)
                       )
                       )GROUP BY ASESOR, SUPERVISOR, $strColumnNames TOTAL_BINARIO, META, CUMPLIMIENTO, TOTAL_GENERAL 
                        ORDER BY TOTAL_GENERAL DESC  ";
        
        $rsmBuilder->addScalarResult('ASESOR_SUPERVISOR', 'asesor_supervisor', 'string');
        $rsmBuilder->addScalarResult('ASESOR',            'asesor',            'string');
        $rsmBuilder->addScalarResult('TOTAL_BINARIO',     'total_binario',     'string');
        $rsmBuilder->addScalarResult('META',              'meta',              'float');
        $rsmBuilder->addScalarResult('CUMPLIMIENTO',      'cumplimiento',      'float');
        $rsmBuilder->addScalarResult('INDICADOR',         'indicador',         'string');
        $rsmBuilder->addScalarResult('TOTAL_GENERAL',     'total_general',     'integer');
        
        $ntvQuery->setParameter('CMDN',                $arrayParametros['CMDN']);
        $ntvQuery->setParameter('PERSONAEMPRESAROLID', intval($arrayParametros['PERSONAEMPRESAROLID']));
        $ntvQuery->setParameter('CARACTERISTICA',      $arrayParametros['CARACTERISTICA']);
        $ntvQuery->setParameter('VALOR',               $arrayParametros['VALOR']);
        $ntvQuery->setParameter('ESTADO',              $arrayParametros['ESTADO']);
        $ntvQuery->setParameter('SUPERVISORES_ID',     $arrayParametros['SUPERVISORES_ID']);
        $ntvQuery->setParameter('JURISDICCION',        $arrayParametros['JURISDICCION']);
        $ntvQuery->setParameter('CONTRATO',            $arrayParametros['CONTRATO']);
        $ntvQuery->setParameter('ESTADOS_PER',         $arrayParametros['ESTADOS_PER']);
        $ntvQuery->setParameter('ROLES',               $arrayParametros['ROLES']);
        $ntvQuery->setParameter('ESTADO_SH',           $arrayParametros['ESTADO_SH']);
        $ntvQuery->setParameter('ESTADOS_P',           $arrayParametros['ESTADOS_P']);
        $ntvQuery->setParameter('ES_VENTA',            $arrayParametros['ES_VENTA']);
        $ntvQuery->setParameter('EMPRESA',             $arrayParametros['EMPRESA']);
        $ntvQuery->setParameter('MES',                 $arrayParametros['MES']);
        $ntvQuery->setParameter('ESTADOS_AM',          $arrayParametros['ESTADOS_AM']);
        $ntvQuery->setParameter('PRODUCTO',            $arrayParametros['PRODUCTO']);

        return $ntvQuery->setSQL($sqlQuery)->getResult();
    } 
    
    /**
     * Documentación para el método 'getResultadoAsesoresDeSupervisoresPorJefe'.
     * 
     * Método que retorna todos los asesores que corresponden a los supervisores asignados al jefe.
     * 
     * @param Array $arrayParametros['IDPERSONAEMPRESAROL'] Integer IdPersonaEmpresaRol del Jefe.
     *              $arrayParametros['CARACTERISTICA']      String  Caracteristica a buscar.
     *              $arrayParametros['VALOR']               String  Valor de la característica a buscar.
     *              $arrayParametros['ESTADO']              String  Estado de filtrado.
     * 
     * @return Array Listado de asesores.
     * 
     * costoQuery: 43
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 26-10-2015
     */
    public function getResultadoAsesoresDeSupervisoresPorJefe($arrayParametros)
    {
        $rsmBuilder = new ResultSetMappingBuilder($this->_em);
        $ntvQuery   = $this->_em->createNativeQuery(null, $rsmBuilder);
        $sqlQuery   = " SELECT PE.LOGIN, PE.APELLIDOS || ' ' || PE.NOMBRES ASESOR, 
                        PER_A.REPORTA_PERSONA_EMPRESA_ROL_ID RESPONDE, PER_A.ID_PERSONA_ROL IDPERSONAROL
                        FROM       INFO_PERSONA_EMPRESA_ROL        PER_A
                        INNER JOIN INFO_PERSONA             PE    ON  PE.ID_PERSONA = PER_A.PERSONA_ID
                        INNER JOIN INFO_PERSONA_EMPRESA_ROL PER_J ON  PER_J.ID_PERSONA_ROL                  = :IDPERSONAEMPRESAROL
                        INNER JOIN INFO_PERSONA_EMPRESA_ROL PER_S ON  PER_S.REPORTA_PERSONA_EMPRESA_ROL_ID  =  PER_J.ID_PERSONA_ROL
                                                                  AND PER_S.ID_PERSONA_ROL                  =  PER_A.REPORTA_PERSONA_EMPRESA_ROL_ID
                        INNER JOIN INFO_PERSONA             PE_S  ON  PE_S.ID_PERSONA                       =  PER_S.PERSONA_ID
                        INNER JOIN INFO_PERSONA_EMPRESA_ROL_CARAC PERC  ON  PERC.PERSONA_EMPRESA_ROL_ID     =  PER_S.ID_PERSONA_ROL
                        INNER JOIN ADMI_CARACTERISTICA            AC    ON  AC.ID_CARACTERISTICA            =  PERC.CARACTERISTICA_ID
                                                                        AND AC.DESCRIPCION_CARACTERISTICA   = :CARACTERISTICA 
                                                                        AND PERC.VALOR                      = :VALOR
                                                                        AND PERC.ESTADO                     = :ESTADO                                          
                        WHERE  PER_A.ESTADO = :ESTADO
                        GROUP BY PE.LOGIN, PE.APELLIDOS, PE.NOMBRES, PER_A.REPORTA_PERSONA_EMPRESA_ROL_ID, PER_A.ID_PERSONA_ROL
                        ORDER BY PE.APELLIDOS, PE.NOMBRES";
        
        $rsmBuilder->addScalarResult('LOGIN',  'login',  'string');
        $rsmBuilder->addScalarResult('ASESOR', 'asesor', 'string');
        $rsmBuilder->addScalarResult('RESPONDE', 'responde', 'integer');
        $rsmBuilder->addScalarResult('IDPERSONAROL', 'idpersonarol', 'integer');
        
        $ntvQuery->setParameter('IDPERSONAEMPRESAROL', intval($arrayParametros['IDPERSONAEMPRESAROL']));
        $ntvQuery->setParameter('CARACTERISTICA',      $arrayParametros['CARACTERISTICA']);
        $ntvQuery->setParameter('VALOR',               $arrayParametros['VALOR']);
        $ntvQuery->setParameter('ESTADO',              $arrayParametros['ESTADO']);
        
        return $ntvQuery->setSQL($sqlQuery)->getResult();
    }
  
    /**
     * Documentación para el método 'getResultadoVentasAsesoresPorSupervisor'.
     * 
     * Método que obtiene la cantidad de ventas realizadas por los asesores de un determinado supervisor.
     * 
     * @param Array $arrayParametros['JURISDICCION']        String  nombre de la jurisdicción.
     *              $arrayParametros['CMDN']                String  operador de búsqueda 
     *              $arrayParametros['CONTRATO']            String  estado del contrato.
     *              $arrayParametros['ESTADOS_PER']         Array   listado de estados de la PersonaEmpresaRol.
     *              $arrayParametros['ROLES']               Array   listado de roles.
     *              $arrayParametros['ESTADO_SH']           Array   listado de estados del servicioHistorial.
     *              $arrayParametros['ESTADOS_P']           Array   listado de estados de los puntos.
     *              $arrayParametros['ESTADOS_AM']          Array   listado de estados Activo-Modificado.
     *              $arrayParametros['EMPRESA']             String  código de la empresa.
     *              $arrayParametros['MES']                 String  fecha para la consulta en formato Mes-Año (mmyyyy).
     *              $arrayParametros['OBSERVACION']         String  observación para ventas activas
     *              $arrayParametros['OBSRV_BRUTA']         String  observación para ventas brutas 
     *              $arrayParametros['ACCION']              String  acción que debe cumplir el servicioHistorial
     *              $arrayParametros['PERSONAEMPRESAROLID'] Integer  IdPersonaEmpresaRol del Supervisor.
     * 
     * @return Array Lista de asesores y cantidad de ventas.
     * 
     * costoQuery: 152
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 26-10-2015
     */
    public function getResultadoVentasAsesoresPorSupervisor($arrayParametros)
    {
        $rsmBuilder = new ResultSetMappingBuilder($this->_em);
        $ntvQuery   = $this->_em->createNativeQuery(null, $rsmBuilder);
        
        $sqlQuery   = "WITH SERVICIOS AS
                       (SELECT SH.SERVICIO_ID 
                       FROM       INFO_SERVICIO_HISTORIAL  SH
                       INNER JOIN INFO_SERVICIO            S    ON  S.ID_SERVICIO      = SH.SERVICIO_ID
                       INNER JOIN INFO_PUNTO               P    ON  P.ID_PUNTO         = S.PUNTO_ID
                       INNER JOIN INFO_PERSONA_EMPRESA_ROL PER  ON  PER.ID_PERSONA_ROL = P.PERSONA_EMPRESA_ROL_ID
                       INNER JOIN INFO_EMPRESA_ROL         ER   ON  ER.ID_EMPRESA_ROL  = PER.EMPRESA_ROL_ID
                       INNER JOIN INFO_EMPRESA_GRUPO       EG   ON  EG.COD_EMPRESA     = ER.EMPRESA_COD
                       INNER JOIN ADMI_ROL                 R    ON  R.ID_ROL           = ER.ROL_ID
                       INNER JOIN ADMI_JURISDICCION        J    ON  J.ID_JURISDICCION  = P.PUNTO_COBERTURA_ID 
                       INNER JOIN INFO_CONTRATO            CN   ON  CN.PERSONA_EMPRESA_ROL_ID            = PER.ID_PERSONA_ROL
                       INNER JOIN INFO_PERSONA_EMPRESA_ROL PERV ON  PERV.REPORTA_PERSONA_EMPRESA_ROL_ID = :PERSONAEMPRESAROLID
                       INNER JOIN INFO_PERSONA             PE   ON  PE.ID_PERSONA                        = PERV.PERSONA_ID 
                                                                AND P.USR_VENDEDOR = PE.LOGIN
                       WHERE R.DESCRIPCION_ROL IN      (:ROLES)
                         AND PER.ESTADO        IN      (:ESTADOS_PER)
                         AND P.ESTADO          IN      (:ESTADOS_P)
                         AND S.ES_VENTA        =       :ES_VENTA
                         AND EG.PREFIJO        =       :EMPRESA
                         AND CN.ESTADO         LIKE    :CONTRATO 
                         AND LOWER(SH.ESTADO)  =       LOWER(:ESTADO_SH)
                         AND SH.FE_CREACION    BETWEEN TRUNC(TO_DATE(:MES, 'MMYYYY')) AND TRUNC(LAST_DAY(TO_DATE(:MES, 'MMYYYY')) + 0.999988403)";
        
        if($arrayParametros['ACTIVAS'])
        {
            $ntvQuery->setParameter('OBSERVACION',  $arrayParametros['OBSERVACION']);
            $ntvQuery->setParameter('ACCION',       $arrayParametros['ACCION']);
            $sqlQuery .= " AND  UPPER(SYS.DBMS_LOB.SUBSTR(SH.OBSERVACION, 4000, 1)) = UPPER(:OBSERVACION)
                           AND (SH.ACCION      IS    NULL        OR UPPER(SH.ACCION) LIKE UPPER(:ACCION))";
        }
        
        $sqlQuery .= $this->getJurisdiccion($arrayParametros);
        $sqlQuery .= " GROUP BY SH.SERVICIO_ID
                      ),
                       VENTAS AS 
                      (
                       SELECT P.USR_VENDEDOR ASESOR, COUNT(P.USR_VENDEDOR) VENTAS
                       FROM INFO_SERVICIO S 
                       INNER JOIN INFO_PUNTO P ON P.ID_PUNTO = S.PUNTO_ID
                       INNER JOIN SERVICIOS SR ON SR.SERVICIO_ID = S.ID_SERVICIO
                       GROUP BY P.USR_VENDEDOR
                       )
                      (
                       SELECT PE.LOGIN AS LOGIN, NVL(VE.VENTAS, 0)  AS VENTAS
                       FROM INFO_PERSONA_EMPRESA_ROL PER
                       INNER JOIN INFO_EMPRESA_ROL         ER   ON  ER.ID_EMPRESA_ROL  = PER.EMPRESA_ROL_ID
                       INNER JOIN INFO_EMPRESA_GRUPO       EG   ON  EG.COD_EMPRESA     = ER.EMPRESA_COD
                       INNER JOIN INFO_PERSONA PE  ON PE.ID_PERSONA = PER.PERSONA_ID 
                       LEFT  JOIN VENTAS       VE  ON VE.ASESOR = PE.LOGIN 
                       WHERE PER.REPORTA_PERSONA_EMPRESA_ROL_ID = :PERSONAEMPRESAROLID
                       AND EG.PREFIJO        =       :EMPRESA
                       GROUP BY PE.LOGIN, VE.VENTAS
                       )";
        
        $rsmBuilder->addScalarResult('LOGIN',  'login',  'string');
        $rsmBuilder->addScalarResult('VENTAS', 'ventas', 'integer');

        $ntvQuery->setParameter('CMDN',                $arrayParametros['CMDN']);
        $ntvQuery->setParameter('PERSONAEMPRESAROLID', intval($arrayParametros['PERSONAEMPRESAROLID']));
        $ntvQuery->setParameter('JURISDICCION',        $arrayParametros['JURISDICCION']);
        $ntvQuery->setParameter('CONTRATO',            $arrayParametros['CONTRATO']);
        $ntvQuery->setParameter('ESTADOS_PER',         $arrayParametros['ESTADOS_PER']);
        $ntvQuery->setParameter('ROLES',               $arrayParametros['ROLES']);
        $ntvQuery->setParameter('ESTADO_SH',           $arrayParametros['ESTADO_SH']);
        $ntvQuery->setParameter('ESTADOS_P',           $arrayParametros['ESTADOS_P']);
        $ntvQuery->setParameter('ES_VENTA',            $arrayParametros['ES_VENTA']);
        $ntvQuery->setParameter('EMPRESA',             $arrayParametros['EMPRESA']);
        $ntvQuery->setParameter('MES',                 $arrayParametros['MES']);
        $ntvQuery->setParameter('ESTADOS_AM',          $arrayParametros['ESTADOS_AM']);
        $ntvQuery->setParameter('PRODUCTO',            $arrayParametros['PRODUCTO']);
      
        return $ntvQuery->setSQL($sqlQuery)->getResult();
    }
    
    /**
     * Documentación para el método 'getResultadoAsesoresPorSupervisores'.
     * 
     * Método que retorna el listado de asesores por supervisor
     * 
     * @param Integer $intIdSupervisor   IdPersonaEmpresaRol del supervisor.
     * @param String  $strPrefijoEmpresa Prefjo de la empresa.
     * 
     * @return Array Lista de asesores.
     * 
     * costoQuery: 13
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 26-10-2015
     */
    public function getResultadoAsesoresPorSupervisor($intIdSupervisor, $strPrefijoEmpresa)
    {
        $rsmBuilder = new ResultSetMappingBuilder($this->_em);
        $ntvQuery   = $this->_em->createNativeQuery(null, $rsmBuilder);
        
        $sqlQuery   = " SELECT PE.LOGIN, PE.APELLIDOS || ' ' || PE.NOMBRES ASESOR 
                        FROM INFO_PERSONA_EMPRESA_ROL PER
                        INNER JOIN INFO_EMPRESA_ROL         ER   ON  ER.ID_EMPRESA_ROL  = PER.EMPRESA_ROL_ID
                        INNER JOIN INFO_EMPRESA_GRUPO       EG   ON  EG.COD_EMPRESA     = ER.EMPRESA_COD
                        INNER JOIN INFO_PERSONA PE ON PE.ID_PERSONA = PER.PERSONA_ID
                        WHERE PER.REPORTA_PERSONA_EMPRESA_ROL_ID = :IDPERSONAEMPRESAROL
                        AND   EG.PREFIJO = :EMPRESA
                        GROUP BY PE.LOGIN, PE.APELLIDOS, PE.NOMBRES ";
        
        $rsmBuilder->addScalarResult('LOGIN',  'login',  'string');
        $rsmBuilder->addScalarResult('ASESOR', 'asesor', 'string');
        
        $ntvQuery->setParameter('IDPERSONAEMPRESAROL', intval($intIdSupervisor));
        $ntvQuery->setParameter('EMPRESA',             $strPrefijoEmpresa);
        
        return $ntvQuery->setSQL($sqlQuery)->getResult();
    }
    
    /**
     * Documentación para el método 'getJsonReporteJefaturaRechazosVentas'.
     * 
     * Método una cadena en formato JSON con el listado de motivos de rechazos y su cantidad de ocurrencias
     * 
     * @param Array $arrayParametrosVentasAsesor     Listado de parámetros para las ventas por asesor.
     * @param Array $arrayParametros['JURISDICCION'] String nombre de la jurisdicción.
     *              $arrayParametros['CMDN']         String operador de búsqueda 
     *              $arrayParametros['CONTRATO']     String estado del contrato.
     *              $arrayParametros['ESTADOS_PER']  Array  listado de estados de la PersonaEmpresaRol.
     *              $arrayParametros['ROLES']        Array  listado de roles.
     *              $arrayParametros['ESTADO_SH']    Array  listado de estados del servicioHistorial.
     *              $arrayParametros['ESTADOS_P']    Array  listado de estados de los puntos.
     *              $arrayParametros['ESTADOS_AM']   Array  listado de estados Activo-Modificado.
     *              $arrayParametros['EMPRESA']      String código de la empresa.
     *              $arrayParametros['MES']          String fecha para la consulta en formato Mes-Año (mmyyyy).
     *              $arrayParametros['OBSERVACION']  String observación para ventas activas
     *              $arrayParametros['OBSRV_BRUTA']  String observación para ventas brutas 
     *              $arrayParametros['ACCION']       String acción que debe cumplir el servicioHistorial
     * 
     * @return Array $arrayResponse['JSON']            String Cadena JSON con los datos del listado.
     *               $arrayResponse['RECHAZOS_VENTAS'] Array  Listado de Rechazos por motivo.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 07-03-2016
     */
    public function getJsonReporteJefaturaRechazosVentas($arrayParametros)
    {
        try
        {
            $intVentasBrutas      = $this->getResultadoVentasActivasBrutas($arrayParametros, false);
            $arrayRechazos        = array();
            $arrayRechazosReporte = array();

            if(intval($intVentasBrutas) > 0)
            {
                $arrayParametros['ESTADO_SH'] = 'rechazad%';
                $listaAsesores                = $this->getResultadoRechazosPorSupervisorPorVendedor($arrayParametros);

                $i = 0;

                foreach($listaAsesores as $entityAsesor)
                {
                    $strMotivo   = ucwords(strtolower($entityAsesor['motivo']));
                    $intRechazos = $entityAsesor['rechazos'];
                    $douRechazos = round((($entityAsesor['rechazos'] / (intval($intVentasBrutas) == 0 ? 1 : intval($intVentasBrutas))) * 100), 2);
                    $strPercent  = number_format($douRechazos, 2);
                    $strRechazos = "title='Motivo: $strMotivo\nVenta Bruta: $intVentasBrutas\nRechazos: $intRechazos - $strPercent%'>$strPercent";

                    $objRechazo  = array('idRechazosJefatura' => $i++, 
                                         'motivo_desc'        => $entityAsesor['motivo'], 
                                         'cant_rechazos'      => $intRechazos,
                                         'porc_rechazos'      => $douRechazos,
                                         'porc_rechazos_desc' => $strRechazos);

                    $arrayRechazos[] = $objRechazo;

                    unset($objRechazo["idRechazosJefatura"]);
                    unset($objRechazo["porc_rechazos_desc"]);

                    $objRechazo['porc_rechazos'] = $objRechazo['porc_rechazos'] / 100;

                    $arrayRechazosReporte[] = $objRechazo;
                }
             
                $arrayResponse['JSON'] = '{"total":"' . $i . '","rechazos":' . json_encode($arrayRechazos) . '}';
            }
            else
            {
                $arrayResponse['JSON'] = '{"total":"0","rechazos":[]}';
            }
        }
        catch(\Exception $ex)
        {
            $arrayResponse['JSON'] = $ex->getMessage();
        }
        $arrayResponse['RECHAZOS_VENTAS'] = $arrayRechazosReporte;
        return $arrayResponse;
    }
    
    /**
     * Documentación para el método 'getResultadoRechazosPorSupervisorPorVendedor'.
     * 
     * Método que retorna el listado de motivos de rechazos y su cantidad de ocurrencias,
     * Se puede filtrar por Supervisor y Asesor.
     * 
     * @param Array $arrayParametros['JURISDICCION'] String  nombre de la jurisdicción.
     *              $arrayParametros['ROLES']        Array   listado de roles.
     *              $arrayParametros['ESTADOS_PER']  Array   listado de estados de la PersonaEmpresaRol.
     *              $arrayParametros['ESTADO_SH']    Array   listado de estados del servicioHistorial.
     *              $arrayParametros['ESTADOS_P']    Array   listado de estados de los puntos.
     *              $arrayParametros['ESTADOS_AM']   Array   listado de estados Activo-Modificado.
     *              $arrayParametros['ES_VENTA']     String  define si es una venta.
     *              $arrayParametros['EMPRESA']      String  código de la empresa.
     *              $arrayParametros['MES']          String  fecha para la consulta en formato Mes-Año (mmyyyy).
     *              $arrayParametros['ASESORES']     Array   Logins de asesores.
     * 
     * @return Array Listado de motivos de rechazo
     * 
     * costoQuery: 73
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 26-10-2015
     */
    public function getResultadoRechazosPorSupervisorPorVendedor($arrayParametros)
    {
        $rsmBuilder = new ResultSetMappingBuilder($this->_em);
        $ntvQuery   = $this->_em->createNativeQuery(null, $rsmBuilder);
        $sqlJurisd  = $this->getJurisdiccion($arrayParametros);
        
        $sqlQuery   = " SELECT MOTIVO, RECHAZOS FROM ( 
                       (SELECT UPPER(AM.NOMBRE_MOTIVO) AS MOTIVO, COUNT(SH.ESTADO) AS RECHAZOS
                        FROM       INFO_SERVICIO_HISTORIAL  SH
                        INNER JOIN INFO_SERVICIO            S    ON  S.ID_SERVICIO      = SH.SERVICIO_ID
                        INNER JOIN ADMI_MOTIVO              AM   ON  AM.ID_MOTIVO       = SH.MOTIVO_ID
                        INNER JOIN INFO_PUNTO               P    ON  P.ID_PUNTO         = S.PUNTO_ID
                        INNER JOIN INFO_PERSONA_EMPRESA_ROL PER  ON  PER.ID_PERSONA_ROL = P.PERSONA_EMPRESA_ROL_ID
                        INNER JOIN INFO_EMPRESA_ROL         ER   ON  ER.ID_EMPRESA_ROL  = PER.EMPRESA_ROL_ID
                        INNER JOIN INFO_EMPRESA_GRUPO       EG   ON  EG.COD_EMPRESA     = ER.EMPRESA_COD
                        INNER JOIN ADMI_ROL                 R    ON  R.ID_ROL           = ER.ROL_ID
                        INNER JOIN ADMI_JURISDICCION        J    ON  J.ID_JURISDICCION  = P.PUNTO_COBERTURA_ID 
                        WHERE 
                               R.DESCRIPCION_ROL IN        (:ROLES)
                           AND R.ESTADO          IN        (:ESTADOS_AM)
                           AND PER.ESTADO        IN        (:ESTADOS_PER)
                           AND P.ESTADO          IN        (:ESTADOS_P)
                           AND S.ES_VENTA        =          :ES_VENTA
                           AND EG.PREFIJO        =          :EMPRESA
                           AND SH.FE_CREACION    BETWEEN TRUNC(TO_DATE(:MES, 'MMYYYY')) AND TRUNC(LAST_DAY(TO_DATE(:MES, 'MMYYYY')) + 0.999988403)
                           AND LOWER(SH.ESTADO)  LIKE LOWER(:ESTADO_SH)
                           $sqlJurisd
                           AND P.USR_VENDEDOR IN (:ASESORES)
                        GROUP BY AM.NOMBRE_MOTIVO, SH.ESTADO )
                    UNION
                       (SELECT '-' AS MOTIVO, COUNT(SH.SERVICIO_ID) AS RECHAZOS
                        FROM       INFO_SERVICIO_HISTORIAL  SH
                        INNER JOIN INFO_SERVICIO            S    ON  S.ID_SERVICIO      = SH.SERVICIO_ID
                        INNER JOIN INFO_PUNTO               P    ON  P.ID_PUNTO         = S.PUNTO_ID
                        INNER JOIN INFO_PERSONA_EMPRESA_ROL PER  ON  PER.ID_PERSONA_ROL = P.PERSONA_EMPRESA_ROL_ID
                        INNER JOIN INFO_EMPRESA_ROL         ER   ON  ER.ID_EMPRESA_ROL  = PER.EMPRESA_ROL_ID
                        INNER JOIN INFO_EMPRESA_GRUPO       EG   ON  EG.COD_EMPRESA     = ER.EMPRESA_COD
                        INNER JOIN ADMI_ROL                 R    ON  R.ID_ROL           = ER.ROL_ID
                        INNER JOIN ADMI_JURISDICCION        J    ON  J.ID_JURISDICCION  = P.PUNTO_COBERTURA_ID 
                        WHERE 
                               R.DESCRIPCION_ROL IN        (:ROLES)
                           AND R.ESTADO          IN        (:ESTADOS_AM)
                           AND PER.ESTADO        IN        (:ESTADOS_PER)
                           AND P.ESTADO          IN        (:ESTADOS_P)
                           AND S.ES_VENTA        =          :ES_VENTA
                           AND EG.PREFIJO        =          :EMPRESA
                           AND SH.FE_CREACION    BETWEEN TRUNC(TO_DATE(:MES, 'MMYYYY')) AND TRUNC(LAST_DAY(TO_DATE(:MES, 'MMYYYY')) + 0.999988403)
                           AND LOWER(SH.ESTADO)  LIKE :ESTADO_SH
                           AND SH.MOTIVO_ID      IS          NULL
                           $sqlJurisd
                           AND P.USR_VENDEDOR IN (:ASESORES)
                        GROUP BY SH.MOTIVO_ID )
                       )
                     ORDER BY MOTIVO";
        
        $rsmBuilder->addScalarResult('MOTIVO',  'motivo',  'string');
        $rsmBuilder->addScalarResult('RECHAZOS', 'rechazos', 'integer');
        
        $ntvQuery->setParameter('CMDN',         $arrayParametros['CMDN']);
        $ntvQuery->setParameter('ROLES',        $arrayParametros['ROLES']);
        $ntvQuery->setParameter('ESTADOS_AM',   $arrayParametros['ESTADOS_AM']);
        $ntvQuery->setParameter('ESTADOS_PER',  $arrayParametros['ESTADOS_PER']);
        $ntvQuery->setParameter('ESTADOS_P',    $arrayParametros['ESTADOS_P']);
        $ntvQuery->setParameter('ESTADO_SH',    $arrayParametros['ESTADO_SH']);
        $ntvQuery->setParameter('ES_VENTA',     $arrayParametros['ES_VENTA']);
        $ntvQuery->setParameter('EMPRESA',      $arrayParametros['EMPRESA']);
        $ntvQuery->setParameter('MES',          $arrayParametros['MES']);
        $ntvQuery->setParameter('JURISDICCION', $arrayParametros['JURISDICCION']);
        $ntvQuery->setParameter('ASESORES',     $arrayParametros['ASESORES']);
        $ntvQuery->setParameter('PRODUCTO',     $arrayParametros['PRODUCTO']);
        
        return $ntvQuery->setSQL($sqlQuery)->getResult();
    }
    
    /**
     * Documentación para el método 'getJsonReporteJefaturaVentas'.
     * 
     * Método que retorna una cadena en formato JSON con el listado detallado de las ventas de la jefatura.
     * 
     * @param Array $arrayParametros['JURISDICCION']        String  nombre de la jurisdicción.
     *              $arrayParametros['ESTADOS_PER']         Array   listado de estados de la PersonaEmpresaRol.
     *              $arrayParametros['ROLES']               Array   listado de roles.
     *              $arrayParametros['ESTADO_SH']           Array   listado de estados del servicioHistorial.
     *              $arrayParametros['ESTADOS_P']           Array   listado de estados de los puntos.
     *              $arrayParametros['ESTADOS_AM']          Array   listado de estados Activo-Modificado.
     *              $arrayParametros['ES_VENTA']            String  define si es una venta.
     *              $arrayParametros['EMPRESA']             String  código de la empresa.
     *              $arrayParametros['MES']                 String  fecha para la consulta en formato Mes-Año (mmyyyy).
     *              $arrayParametros['OBSERVACION']         String  observación para ventas activas
     *              $arrayParametros['OBSRV_BRUTA']         String  observación para ventas brutas 
     *              $arrayParametros['ACCION']              String  acción que debe cumplir el servicioHistorial
     *              $arrayParametros['PARAMETROCANAL']      String  Identificador de la cabecera de parámetros CANAL.
     *              $arrayParametros['CARACTERISTICACANAL'] Integer IdPersonaEmpresaRol del supervisor.
     *              $arrayParametros['ASESORES']            Array   Logins de asesores.
     *              $arrayParametros['CANALVENTA']          String  Identificador del Canal.
     *              $arrayParametros['PUNTOVENTA']          String  Identificador del Punto de Venta.
     * 
     * @return Array $arrayResponse['JSON']              String Cadena JSON con los datos del listado.
     *               $arrayResponse['VENTAS_ASESOR']     Array Listado de Ventas por asesor para el reporte.
     *               $arrayResponse['VENTAS_ASESOR_IND'] Array Listado con los indicadores críticos de las ventas por asesor.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 07-03-2016
     */
    public function getJsonReporteJefaturaVentas($arrayParametros)
    {
        $arrayVentasJefatura = array();
        try
        {
            $listaVentasJefatura = $this->getResultadoVentasJefatura($arrayParametros);
            
            if($listaVentasJefatura)
            {
                $i = 0;
                
                foreach($listaVentasJefatura as $entityVenta)
                {
                    $arrayVentasJefatura[] = array('login'           => $entityVenta['login'],
                                                   'servicio'        => $entityVenta['servicio'],
                                                   'direccion'       => trim(preg_replace('/\s+/', ' ', $entityVenta['direccion'])),//Replace ENTER's
                                                   'nombre_servicio' => $entityVenta['nombre_servicio'],
                                                   'jurisdiccion_'   => $entityVenta['jurisdiccion_'],
                                                   'sector'          => $entityVenta['sector'],
                                                   'cliente'         => $entityVenta['cliente'],
                                                   'empresa'         => $entityVenta['empresa'],
                                                   'identificacion'  => $entityVenta['identificacion'],
                                                   'vendedor'        => $entityVenta['vendedor'],
                                                   'usuario'         => $entityVenta['usuario'],
                                                   'supervisor'      => $entityVenta['supervisor'],
                                                   'canal'           => $entityVenta['canal'],
                                                   'punto_venta'     => $entityVenta['punto_venta'],
                                                   'aprobacion'      => $entityVenta['aprobacion'],
                                                   'creacion'        => $entityVenta['creacion'],
                                                   'activacion'      => $entityVenta['activacion'],
                                                   'precio'          => $entityVenta['precio'] );
                    $i++;
                }
             
                $arrayResponse['JSON'] = '{"total":"' . $i . '","ventas_jefatura":' . json_encode($arrayVentasJefatura) . '}';
            }
            else
            {
                $arrayResponse['JSON'] = '{"total":"0","ventas_jefatura":[]}';
            }
        }
        catch(\Exception $ex)
        {
            $arrayResponse['JSON'] = $ex->getMessage();
        }
        
        $arrayResponse['VENTAS_JEFATURA'] = $arrayVentasJefatura;
        
        return $arrayResponse;
    }
    
    /**
     * Documentación para el método 'getJsonMetasActivasSupervisores'.
     * 
     * Método que retorna una cadena en formato JSON con el listado detallado de las ventas de la jefatura.
     * 
     * @param Array $arrayParametros['JURISDICCION']        String  nombre de la jurisdicción.
     *              $arrayParametros['ESTADOS_PER']         Array   listado de estados de la PersonaEmpresaRol.
     *              $arrayParametros['ROLES']               Array   listado de roles.
     *              $arrayParametros['ESTADO_SH']           Array   listado de estados del servicioHistorial.
     *              $arrayParametros['ESTADOS_P']           Array   listado de estados de los puntos.
     *              $arrayParametros['ESTADOS_AM']          Array   listado de estados Activo-Modificado.
     *              $arrayParametros['ES_VENTA']            String  define si es una venta.
     *              $arrayParametros['EMPRESA']             String  código de la empresa.
     *              $arrayParametros['MES']                 String  fecha para la consulta en formato Mes-Año (mmyyyy).
     *              $arrayParametros['OBSERVACION']         String  observación para ventas activas
     *              $arrayParametros['OBSRV_BRUTA']         String  observación para ventas brutas 
     *              $arrayParametros['ACCION']              String  acción que debe cumplir el servicioHistorial
     *              $arrayParametros['PARAMETROCANAL']      String  Identificador de la cabecera de parámetros CANAL.
     *              $arrayParametros['CARACTERISTICACANAL'] Integer IdPersonaEmpresaRol del supervisor.
     *              $arrayParametros['ASESORES']            Array   Logins de asesores.
     *              $arrayParametros['CANALVENTA']          String  Identificador del Canal.
     *              $arrayParametros['PUNTOVENTA']          String  Identificador del Punto de Venta.
     * 
     * @return Array $arrayResponse['JSON']              String Cadena JSON con los datos del listado.
     *               $arrayResponse['VENTAS_ASESOR']     Array Listado de Ventas por asesor para el reporte.
     *               $arrayResponse['VENTAS_ASESOR_IND'] Array Listado con los indicadores críticos de las ventas por asesor.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 07-03-2016
     */
    public function getJsonMetasActivasSupervisores($listaSupervisores, $arrayParametros, $objInfoPersonaRepository)
    {
        $arregloMetasSuper = array();
        $listaMetas        = array();
        
        try
        {
            if($listaSupervisores)
            {
                foreach($listaSupervisores as $entitySupervisor)
                {
                    $arrayParametros['PERSONAEMPRESAROLID'] = $entitySupervisor['id'];

                    $strApellidos  = explode(' ', $entitySupervisor['apellidos'])[0].explode(' ', $entitySupervisor['apellidos'])[1];
                    $strNombre     = explode(' ', $entitySupervisor['nombres'])[0].explode(' ', $entitySupervisor['nombres'])[1];
                    $strIndex      = $strApellidos.$strNombre;
                    $strText       = explode(' ', $entitySupervisor['apellidos'])[0]. ' ' .explode(' ', $entitySupervisor['nombres'])[0];

                    $arrayParametros['CARACTERISTICA'] = 'META BRUTA';

                    $objMetaBruta  = $objInfoPersonaRepository->getResultadoCaracteristicaPersonaEmpresaRolMensual($arrayParametros);
                    $intMetaActiva = 1;
                    $intMetaBruta  = $objMetaBruta == null ? 1 : ($objMetaBruta[0]['valor'] == 0 ? 1 : $objMetaBruta[0]['valor']);

                    if($intMetaBruta > 0)
                    {
                        $arrayParametros['CARACTERISTICA'] = 'META ACTIVA';

                        $objMetaActiva = $objInfoPersonaRepository->getResultadoCaracteristicaPersonaEmpresaRolMensual($arrayParametros);
                        $intMetaActiv  = $objMetaActiva == null ? -1 : ($objMetaActiva[0]['valor'] == 0 ? 1 : $objMetaActiva[0]['valor']);
                        $intMetaActiva = round($intMetaBruta * ($intMetaActiv / 100)); 
                    }

                    $arregloMetasSuper[] = array('dataIndex' => $strIndex, 'meta'  => $intMetaActiva, 'text' => $strText);
                    $listaMetas[]        = $intMetaActiva;
                }
        
                $arrayResponse['JSON'] = json_encode(array('metas' => $arregloMetasSuper));
            }
            else
            {
                $arrayResponse['JSON'] = '{"metas":[]}';
            }
        }
        catch(\Exception $ex)
        {
            $arrayResponse['JSON'] = $ex->getMessage();
        }
        
        $arrayResponse['METAS'] = $listaMetas;
        
        return $arrayResponse;
    }
    
    /**
     * Documentación para el método 'getResultadoVentasJefatura'.
     * 
     * Método que obtiene un listado detallado de las ventas de la jefatura
     * 
     * @param Array $arrayParametros['JURISDICCION']        String  nombre de la jurisdicción.
     *              $arrayParametros['ESTADOS_PER']         Array   listado de estados de la PersonaEmpresaRol.
     *              $arrayParametros['ROLES']               Array   listado de roles.
     *              $arrayParametros['ESTADO_SH']           Array   listado de estados del servicioHistorial.
     *              $arrayParametros['ESTADOS_P']           Array   listado de estados de los puntos.
     *              $arrayParametros['ESTADOS_AM']          Array   listado de estados Activo-Modificado.
     *              $arrayParametros['ES_VENTA']            String  define si es una venta.
     *              $arrayParametros['EMPRESA']             String  código de la empresa.
     *              $arrayParametros['MES']                 String  fecha para la consulta en formato Mes-Año (mmyyyy).
     *              $arrayParametros['OBSERVACION']         String  observación para ventas activas
     *              $arrayParametros['OBSRV_BRUTA']         String  observación para ventas brutas 
     *              $arrayParametros['ACCION']              String  acción que debe cumplir el servicioHistorial
     *              $arrayParametros['PARAMETROCANAL']      String  Identificador de la cabecera de parámetros CANAL.
     *              $arrayParametros['CARACTERISTICACANAL'] Integer IdPersonaEmpresaRol del supervisor.
     *              $arrayParametros['ASESORES']            Array   Logins de asesores.
     *              $arrayParametros['CANALVENTA']          String  Identificador del Canal.
     *              $arrayParametros['PUNTOVENTA']          String  Identificador del Punto de Venta.
     * 
     * @return Array Listado detallado de ventas.
     * 
     * costoQuery: 53
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 26-10-2015
     *
     * @author Ricardo Coello Quezada <rcoello@telconet.ec>
     * @version 1.1 17-01-2017 - Se agregan nuevos filtros al query que obtiene listado detallado de las ventas de la jefaturam, detallo:
     *                           ESTADO_SERVICIO, ID_PUNTO, ID_CLIENTE, DIRECCION_PTO, ID_PLAN, ID_PTO_COBERTURA, ID_SECTOR, MES_APROBACION, 
     *                           MES_CREACION_PTO. 
     *  
     */
    public function getResultadoVentasJefatura($arrayParametros)
    {
        $rsmBuilder             = new ResultSetMappingBuilder($this->_em);
        $ntvQuery               = $this->_em->createNativeQuery(null, $rsmBuilder);
        $strSqlFiltros          = '';
        $strSqlJoinParametros   = '';
        $strSqlSelect           = " SELECT P.LOGIN, S.ESTADO SERVICIO, P.DIRECCION, NVL(IP.NOMBRE_PLAN, AP.DESCRIPCION_PRODUCTO) NAME_SERVICE,  
                                    J.NOMBRE_JURISDICCION JURISDICCION, EG.NOMBRE_EMPRESA EMPRESA, SC.NOMBRE_SECTOR SECTOR,  
                                    ( CASE WHEN PE.APELLIDOS IS NULL THEN PE.RAZON_SOCIAL ELSE PE.APELLIDOS || ' ' || PE.NOMBRES END) CLIENTE, 
                                    PE.IDENTIFICACION_CLIENTE IDENTIFICACION, PE2.APELLIDOS  || ' ' || PE2.NOMBRES VENDEDOR,  
                                    P.USR_VENDEDOR USUARIO, 
                                    PE3.APELLIDOS || ' ' || PE3.NOMBRES SUPERVISOR, TO_CHAR(S.FE_CREACION, 'DD/MM/YYYY') APROBACION, 
                                    TO_CHAR(P.FE_CREACION, 'DD/MM/YYYY') CREACION, TO_CHAR(SH.FE_CREACION, 'DD/MM/YYYY') ACTIVACION, 
                                    S.PRECIO_VENTA PRECIO, 
                                    DET.VALOR4 CANAL, 
                                    DET.VALOR2 PUNTO_VENTA ";
        
        $strSqlGroupBy          = " GROUP BY P.LOGIN, S.ESTADO, P.DIRECCION, IP.NOMBRE_PLAN, J.NOMBRE_JURISDICCION, EG.NOMBRE_EMPRESA,SC.NOMBRE_SECTOR, 
                                    PE.RAZON_SOCIAL, PE.APELLIDOS, PE.NOMBRES, PE.IDENTIFICACION_CLIENTE, PE2.APELLIDOS, PE2.NOMBRES, P.USR_VENDEDOR, 
                                    PE3.APELLIDOS, PE3.NOMBRES, DET.VALOR4, DET.VALOR2, S.FE_CREACION, P.FE_CREACION, SH.FE_CREACION, S.PRECIO_VENTA,
                                    AP.DESCRIPCION_PRODUCTO";

        if ( $arrayParametros['EMPRESA'] = 'MD' )
        { 
            $strSqlSelect        = " SELECT P.LOGIN, S.ESTADO SERVICIO, P.DIRECCION, NVL(IP.NOMBRE_PLAN, AP.DESCRIPCION_PRODUCTO) NAME_SERVICE,  
                                    J.NOMBRE_JURISDICCION JURISDICCION, EG.NOMBRE_EMPRESA EMPRESA, SC.NOMBRE_SECTOR SECTOR,  
                                    ( CASE WHEN PE.APELLIDOS IS NULL THEN PE.RAZON_SOCIAL ELSE PE.APELLIDOS || ' ' || PE.NOMBRES END) CLIENTE, 
                                    PE.IDENTIFICACION_CLIENTE IDENTIFICACION, PE2.APELLIDOS  || ' ' || PE2.NOMBRES VENDEDOR,  
                                    P.USR_VENDEDOR USUARIO, 
                                    PE3.APELLIDOS || ' ' || PE3.NOMBRES SUPERVISOR, TO_CHAR(S.FE_CREACION, 'DD/MM/YYYY') APROBACION, 
                                    TO_CHAR(P.FE_CREACION, 'DD/MM/YYYY') CREACION, TO_CHAR(SH.FE_CREACION, 'DD/MM/YYYY') ACTIVACION, 
                                    S.PRECIO_VENTA PRECIO ";
           
            $strSqlGroupBy       = " GROUP BY P.LOGIN, S.ESTADO, P.DIRECCION, IP.NOMBRE_PLAN, J.NOMBRE_JURISDICCION, EG.NOMBRE_EMPRESA,SC.NOMBRE_SECTOR, 
                                    PE.RAZON_SOCIAL, PE.APELLIDOS, PE.NOMBRES, PE.IDENTIFICACION_CLIENTE, PE2.APELLIDOS, PE2.NOMBRES, P.USR_VENDEDOR, 
                                    PE3.APELLIDOS, PE3.NOMBRES, S.FE_CREACION, P.FE_CREACION, SH.FE_CREACION, S.PRECIO_VENTA,AP.DESCRIPCION_PRODUCTO ";
           
            if( isset($arrayParametros['CANALVENTA']) && !empty($arrayParametros['CANALVENTA']) && ( $arrayParametros['CANALVENTA'] != '%') )
            {
                $strSqlSelect        .= ", DET.VALOR4 CANAL, DET.VALOR2 PUNTO_VENTA ";
                $strSqlJoinParametros = "  LEFT  JOIN ADMI_PARAMETRO_CAB        CAB  ON CAB.NOMBRE_PARAMETRO = :PARAMETROCANAL 
                                           LEFT  JOIN ADMI_PARAMETRO_DET        DET  ON DET.PARAMETRO_ID     = CAB.ID_PARAMETRO 
                                           AND   DET.VALOR1                     = DBMS_LOB.substr(PC.VALOR, 100) ";
        
                $strSqlJoinParametros.= "  AND DET.VALOR3  LIKE  :CANALVENTA  ";
                $strSqlGroupBy       .= ", DET.VALOR4, DET.VALOR2 ";
                
                $rsmBuilder->addScalarResult('CANAL',          'canal',           'string');
                $rsmBuilder->addScalarResult('PUNTO_VENTA',    'punto_venta',     'string');
                
                $ntvQuery->setParameter('CANALVENTA',          $arrayParametros['CANALVENTA']);
            }
            elseif( isset($arrayParametros['PUNTOVENTA']) && !empty($arrayParametros['PUNTOVENTA']) && ( $arrayParametros['PUNTOVENTA'] != '%') )
            {   
                $strSqlJoinParametros.= " AND DET.VALOR1      LIKE  :PUNTOVENTA ";
                $ntvQuery->setParameter('PUNTOVENTA',          $arrayParametros['PUNTOVENTA']);
            }
            else
            {
                $strSqlSelect       .= ", '' CANAL, '' PUNTO_VENTA  ";
            }

            if( isset($arrayParametros['ESTADO_SERVICIO']) && !empty($arrayParametros['ESTADO_SERVICIO']) )
            {   
                $strSqlFiltros = " AND S.ESTADO = :ESTADO_SERVICIO ";
                $ntvQuery->setParameter('ESTADO_SERVICIO', $arrayParametros['ESTADO_SERVICIO'] );
            }

            if( isset($arrayParametros['ID_PUNTO']) && !empty($arrayParametros['ID_PUNTO']) )
            {
                $strSqlFiltros.= " AND P.ID_PUNTO = :ID_PUNTO ";
                $ntvQuery->setParameter('ID_PUNTO', $arrayParametros['ID_PUNTO'] );
            }
        
            if( isset($arrayParametros['ID_CLIENTE']) && !empty($arrayParametros['ID_CLIENTE']) )
            {
                $strSqlFiltros.= " AND PE.ID_PERSONA = :ID_CLIENTE ";
                $ntvQuery->setParameter('ID_CLIENTE', $arrayParametros['ID_CLIENTE'] );
            }
            
            if( isset($arrayParametros['DIRECCION_PTO']) && !empty($arrayParametros['DIRECCION_PTO']) )
            {   
                $strSqlFiltros.= " AND UPPER(P.DIRECCION) like :DIRECCION_PTO ";
                $ntvQuery->setParameter('DIRECCION_PTO', '%'.strtoupper($arrayParametros['DIRECCION_PTO']).'%');
            }
            
            if( isset($arrayParametros['ID_PLAN']) && !empty($arrayParametros['ID_PLAN']) )
            {   
                $strSqlFiltros.= " AND IP.ID_PLAN = :ID_PLAN ";
                $ntvQuery->setParameter('ID_PLAN', $arrayParametros['ID_PLAN'] );
            }
        
            if( isset($arrayParametros['ID_PTO_COBERTURA']) && !empty($arrayParametros['ID_PTO_COBERTURA']) )
            {   
                $strSqlFiltros.= " AND J.ID_JURISDICCION = :ID_PTO_COBERTURA ";
                $ntvQuery->setParameter('ID_PTO_COBERTURA', $arrayParametros['ID_PTO_COBERTURA'] );
            }
        
            if( isset($arrayParametros['ID_SECTOR']) && !empty($arrayParametros['ID_SECTOR']) )
            {   
                $strSqlFiltros.= " AND SC.ID_SECTOR = :ID_SECTOR ";
                $ntvQuery->setParameter('ID_SECTOR', $arrayParametros['ID_SECTOR'] );
            }
            
            if( isset($arrayParametros['MES_APROBACION']) && !empty($arrayParametros['MES_APROBACION']) )
            {   
                $strSqlFiltros.= " AND S.FE_CREACION BETWEEN TRUNC(TO_DATE(:MES_APROBACION, 'MMYYYY')) "
                            . " AND TRUNC(LAST_DAY(TO_DATE(:MES_APROBACION, 'MMYYYY')) + 1 ) ";
                $ntvQuery->setParameter('MES_APROBACION', $arrayParametros['MES_APROBACION'] );
            }
            
            if( isset($arrayParametros['MES_CREACION_PTO']) && !empty($arrayParametros['MES_CREACION_PTO']) )
            {   
                $strSqlFiltros.= " AND P.FE_CREACION BETWEEN TRUNC(TO_DATE(:MES_CREACION_PTO, 'MMYYYY')) "
                            . " AND TRUNC(LAST_DAY(TO_DATE(:MES_CREACION_PTO, 'MMYYYY')) + 1 ) ";
                $ntvQuery->setParameter('MES_CREACION_PTO', $arrayParametros['MES_CREACION_PTO'] );
            }
        }
        
        $sqlQuery   =  $strSqlSelect.
                     " FROM INFO_SERVICIO_HISTORIAL         SH
                       INNER JOIN INFO_SERVICIO             S    ON  S.ID_SERVICIO       = SH.SERVICIO_ID
                       INNER JOIN INFO_PLAN_CAB             IP   ON  IP.ID_PLAN          = S.PLAN_ID
                       LEFT  JOIN ADMI_PRODUCTO             AP   ON  AP.ID_PRODUCTO      = S.PRODUCTO_ID
                       INNER JOIN INFO_PUNTO                P    ON  P.ID_PUNTO          = S.PUNTO_ID
                       INNER JOIN ADMI_SECTOR               SC   ON  SC.ID_SECTOR        = P.SECTOR_ID
                       INNER JOIN INFO_PERSONA_EMPRESA_ROL  PER  ON  PER.ID_PERSONA_ROL  = P.PERSONA_EMPRESA_ROL_ID
                       INNER JOIN INFO_PERSONA              PE   ON  PE.ID_PERSONA       = PER.PERSONA_ID
                       INNER JOIN INFO_EMPRESA_ROL          ER   ON  ER.ID_EMPRESA_ROL   = PER.EMPRESA_ROL_ID
                       INNER JOIN INFO_EMPRESA_GRUPO        EG   ON  EG.COD_EMPRESA      = ER.EMPRESA_COD
                       INNER JOIN ADMI_ROL                  R    ON  R.ID_ROL            = ER.ROL_ID
                       INNER JOIN ADMI_JURISDICCION         J    ON  J.ID_JURISDICCION   = P.PUNTO_COBERTURA_ID
                       INNER JOIN INFO_PUNTO_CARACTERISTICA PC   ON  PC.PUNTO_ID         = S.PUNTO_ID
                       LEFT  JOIN ADMI_CARACTERISTICA       AC   ON AC.ID_CARACTERISTICA          = PC.CARACTERISTICA_ID
                                                                AND AC.DESCRIPCION_CARACTERISTICA = :CARACTERISTICACANAL
                       INNER JOIN INFO_PERSONA              PE2  ON PE2.LOGIN            = P.USR_VENDEDOR
                       INNER JOIN INFO_PERSONA_EMPRESA_ROL  PER2 ON PER2.PERSONA_ID      = PE2.ID_PERSONA
                       INNER JOIN INFO_PERSONA_EMPRESA_ROL  PER3 ON PER3.ID_PERSONA_ROL  = PER2.REPORTA_PERSONA_EMPRESA_ROL_ID
                       INNER JOIN INFO_PERSONA              PE3  ON PE3.ID_PERSONA       = PER3.PERSONA_ID "
                       . $strSqlJoinParametros .
                      " WHERE  R.DESCRIPCION_ROL IN        (:ROLES)
                          AND R.ESTADO          IN        (:ESTADOS_AM)
                          AND PER.ESTADO        IN        (:ESTADOS_PER)
                          AND P.ESTADO          IN        (:ESTADOS_P)
                          AND S.ES_VENTA        =          :ES_VENTA
                          AND EG.PREFIJO        =          :EMPRESA
                          AND SH.FE_CREACION    BETWEEN TRUNC(TO_DATE(:MES, 'MMYYYY')) AND TRUNC(LAST_DAY(TO_DATE(:MES, 'MMYYYY')) + 0.999988403)
                          AND LOWER(SH.ESTADO)  LIKE LOWER(:ESTADO_SH)
                        AND  UPPER(SYS.DBMS_LOB.SUBSTR(SH.OBSERVACION, 4000, 1)) = UPPER(:OBSERVACION) 
                        AND (SH.ACCION      IS    NULL        OR UPPER(SH.ACCION) LIKE UPPER(:ACCION)) 

                        AND P.USR_VENDEDOR IN (:ASESORES) "
                        . $strSqlFiltros .
                          $strSqlGroupBy ;
        
        $rsmBuilder->addScalarResult('LOGIN',          'login',           'string');
        $rsmBuilder->addScalarResult('SERVICIO',       'servicio',        'string');
        $rsmBuilder->addScalarResult('DIRECCION',      'direccion',       'string');
        $rsmBuilder->addScalarResult('NAME_SERVICE',   'nombre_servicio', 'string');
        $rsmBuilder->addScalarResult('JURISDICCION',   'jurisdiccion_',   'string');
        $rsmBuilder->addScalarResult('EMPRESA',        'empresa',         'string');
        $rsmBuilder->addScalarResult('SECTOR',         'sector',          'string');
        $rsmBuilder->addScalarResult('CLIENTE',        'cliente',         'string');
        $rsmBuilder->addScalarResult('IDENTIFICACION', 'identificacion',  'string');
        $rsmBuilder->addScalarResult('VENDEDOR',       'vendedor',        'string');
        $rsmBuilder->addScalarResult('USUARIO',        'usuario',         'string');
        $rsmBuilder->addScalarResult('SUPERVISOR',     'supervisor',      'string');
        $rsmBuilder->addScalarResult('CANAL',          'canal',           'string');
        $rsmBuilder->addScalarResult('PUNTO_VENTA',    'punto_venta',     'string');
        $rsmBuilder->addScalarResult('APROBACION',     'aprobacion',      'string');
        $rsmBuilder->addScalarResult('CREACION',       'creacion',        'string');
        $rsmBuilder->addScalarResult('ACTIVACION',     'activacion',      'string');
        $rsmBuilder->addScalarResult('PRECIO',         'precio',          'float');
        
        $ntvQuery->setParameter('ESTADOS_PER',         $arrayParametros['ESTADOS_PER']);
        $ntvQuery->setParameter('ROLES',               $arrayParametros['ROLES']);
        $ntvQuery->setParameter('ESTADO_SH',           $arrayParametros['ESTADO_SH']);
        $ntvQuery->setParameter('ESTADOS_AM',          $arrayParametros['ESTADOS_AM']);
        $ntvQuery->setParameter('ESTADOS_P',           $arrayParametros['ESTADOS_P']);
        $ntvQuery->setParameter('ES_VENTA',            $arrayParametros['ES_VENTA']);
        $ntvQuery->setParameter('EMPRESA',             $arrayParametros['EMPRESA']);
        $ntvQuery->setParameter('MES',                 $arrayParametros['MES']);
        $ntvQuery->setParameter('OBSERVACION',         $arrayParametros['OBSERVACION']);
        $ntvQuery->setParameter('ACCION',              $arrayParametros['ACCION']);
        $ntvQuery->setParameter('PARAMETROCANAL',      $arrayParametros['PARAMETROCANAL']);
        $ntvQuery->setParameter('CARACTERISTICACANAL', $arrayParametros['CARACTERISTICACANAL']);
        $ntvQuery->setParameter('ASESORES',            $arrayParametros['ASESORES']);
        $ntvQuery->setParameter('PRODUCTO',            $arrayParametros['PRODUCTO']);
        
        return $ntvQuery->setSQL($sqlQuery)->getResult();
    }
    
    /**
     * Documentación para el método 'getJurisdiccion'.
     * 
     * Método que evalúa la jurisdicción y retorna el complemento SQL para la consulta.
     * 
     * @param Array $arrayParametros['JURISDICCION'] String  nombre de la jurisdicción.
     * 
     * @return String Complemento SQL.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 26-10-2015
     */
    private function getJurisdiccion($arrayParametros)
    {
        if(isset($arrayParametros['JURISDICCION']) && $arrayParametros['JURISDICCION'] != null)
        {
            $sqlOtros = ""; 
            if(count($arrayParametros['JURISDICCION']) > 1)
            {
                $sqlOtros = "NOT";
            }
            return "AND J.NOMBRE_JURISDICCION $sqlOtros IN      (:JURISDICCION) ";
        }
        else
        {
            return "AND J.NOMBRE_JURISDICCION LIKE :CMDN ";
        }
    }
    
    /**
     * Documentación para el método 'getJefesCommonSQLSelect'.
     * 
     * Método que obtiene la parte Select del query para la obtención de ventas.
     * 
     * @return String Complemento SQL.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 26-10-2015
     */
    private function getJefesCommonSQLSelect()
    {
        return "FROM INFO_SERVICIO_HISTORIAL        SH
                INNER JOIN INFO_SERVICIO            S   ON  S.ID_SERVICIO      = SH.SERVICIO_ID

                INNER JOIN INFO_PLAN_CAB            PC  ON  PC.ID_PLAN         = S.PLAN_ID
                INNER JOIN INFO_PLAN_DET            PD  ON  PD.PLAN_ID         = PC.ID_PLAN
                INNER JOIN ADMI_PRODUCTO            AP  ON  AP.ID_PRODUCTO     = PD.PRODUCTO_ID

                INNER JOIN INFO_PUNTO               P   ON  P.ID_PUNTO         = S.PUNTO_ID
                INNER JOIN INFO_PERSONA_EMPRESA_ROL PER ON  PER.ID_PERSONA_ROL = P.PERSONA_EMPRESA_ROL_ID

                INNER JOIN INFO_EMPRESA_ROL         ER  ON  ER.ID_EMPRESA_ROL  = PER.EMPRESA_ROL_ID
                INNER JOIN INFO_EMPRESA_GRUPO       EG  ON  EG.COD_EMPRESA     = ER.EMPRESA_COD
                                                       AND  EG.COD_EMPRESA     = AP.EMPRESA_COD
                INNER JOIN ADMI_ROL                 R   ON  R.ID_ROL           = ER.ROL_ID
                INNER JOIN ADMI_JURISDICCION        J   ON  J.ID_JURISDICCION  = P.PUNTO_COBERTURA_ID
                INNER JOIN INFO_CONTRATO            CN  ON  CN.PERSONA_EMPRESA_ROL_ID =    PER.ID_PERSONA_ROL";
    }
    
    /**
     * Documentación para el método 'getJefesCommonSQLWhere'.
     * 
     * Método que obtiene la parte Where del query para la obtención de ventas.
     * 
     * @return String Complemento SQL.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 26-10-2015
     */
    private function getJefesCommonSQLWhere()
    {
        return " WHERE  R.DESCRIPCION_ROL IN     (:ROLES)
                    AND R.ESTADO            IN     (:ESTADOS_AM)
                    AND PER.ESTADO          IN     (:ESTADOS_PER)
                    AND J.ESTADO            IN     (:ESTADOS_AM)
                    AND P.ESTADO            IN     (:ESTADOS_P)
                    AND S.ES_VENTA          =       :ES_VENTA
                    AND EG.PREFIJO          =       :EMPRESA
                    AND UPPER(AP.DESCRIPCION_PRODUCTO) = :PRODUCTO
                    AND SH.ESTADO  		=       :ESTADO_SH
                    AND SH.FE_CREACION BETWEEN TRUNC(TO_DATE(:MES, 'MMYYYY')) AND TRUNC(LAST_DAY(TO_DATE(:MES, 'MMYYYY')) + 0.999988403)";
    }

    /**
     * Documentacion para la funcion getResultadoPuntosServiciosPorVendedor
     *
     * Funcion que retorna el listador de puntos y servicios por el usuario Vendedor
     *
     * @param string  $arrayParametros
     *
     * @return string $arrayRespuesta
     *
     * @version 1.0
     *
     * @author Hector Ortega <haortega@telconet.ec>
     *
     */
    public function getResultadoPuntosServiciosPorVendedor($arrayParametros)
    {

        $arrayRespuesta['total'] = 0;
        $arrayRespuesta['resultado'] = "";

        try
        {
            $idEmpresa = $arrayParametros['codEmpresa'];
            $usuarioVendedor = $arrayParametros['usuarioVendedor'];
            $fechaDesde = $arrayParametros['fechaDesde'];
            $fechaHasta = $arrayParametros['fechaHasta'];
            $observacionConfirmacion =$arrayParametros['observacionConfirmacion'];
            $accionConfirmacion = $arrayParametros['accionConfirmacion'];


            if($usuarioVendedor)
            {

                $objQuery = $this->_em->createQuery();
                $objQueryCount = $this->_em->createQuery();

                $strSelectCount = "SELECT COUNT (p1.id) ";
                $strSelect = "SELECT 
                              p1.id as idCliente, p1.estado,
                              p1.razonSocial,
                              p1.nombres,
                              p1.apellidos,
                              CONCAT( CONCAT(p1.nombres,' '), p1.apellidos) as nombreCliente,
                              p1.direccion as direccionCliente,
                              SUBSTRING(p1.feCreacion,0,10) as feCreacionUsr,
                              p1.usrCreacion,per.id as id, 
                              pto.login as loginPunto, SUBSTRING(pto.feCreacion,0,10) as feCreacionPto,
                              pto.id as idPunto,
                              pto.direccion AS direccionPunto,
                              pto.usrVendedor,
                              serv.id as servicioId,  pc.nombrePlan, p.id, p.descripcionProducto,
                              pc.nombrePlan,
                              p.descripcionProducto,
                              SUBSTRING(serv.feCreacion,0,10) as feCreacionServ, 
                              ish.id, 
                              SUBSTRING(ish.feCreacion,0,10) as fechaActivacionServicio,
                              ish.observacion, ish.accion,
                              serv.cantidad, serv.precioVenta, 
                              serv.porcentajeDescuento, serv.valorDescuento,
                              serv.esVenta,
                              serv.estado as estadoServicio,
                              ipf.login as loginPuntoFacturacion ";
                $strFrom = " FROM 
                             schemaBundle:InfoPersona p1, 
                             schemaBundle:InfoPersonaEmpresaRol per,
                             schemaBundle:InfoEmpresaRol empr,
                             schemaBundle:AdmiRol rol,
                             schemaBundle:AdmiTipoRol trol,
                             schemaBundle:InfoPunto pto,
                             schemaBundle:InfoServicio serv
                             LEFT JOIN schemaBundle:InfoPlanCab pc WITH pc.id = serv.planId
				             LEFT JOIN schemaBundle:AdmiProducto p WITH p.id = serv.productoId
                             LEFT JOIN schemaBundle:InfoPunto ipf WITH ipf.id = serv.puntoFacturacionId,
                             schemaBundle:InfoServicioHistorial ish       
		                     WHERE 
                             p1.id=per.personaId AND
                             per.id=pto.personaEmpresaRolId AND
                             per.empresaRolId = empr.id AND
                             pto.id=serv.puntoId AND
                             empr.rolId=rol.id AND
                             rol.tipoRolId=trol.id AND
                             trol.id
                             IN (
                                 SELECT apd.valor1 
                                 FROM schemaBundle:AdmiParametroCab apc,
                                 schemaBundle:AdmiParametroDet apd
                                 WHERE apc.id = apd.parametroId 
                                 AND apc.nombreParametro='REPORTE_COMERCIAL_ROLES_CLIENTES' 
                             ) AND
                             per.estado in ('Activo','Pendiente') AND
                             serv.id = ish.servicioId ";


                $strFrom .= " AND pto.usrVendedor = :usuarioVendedor ";
                $objQuery->setParameter("usuarioVendedor", $usuarioVendedor);
                $objQueryCount->setParameter("usuarioVendedor", $usuarioVendedor);

                if($fechaDesde)
                {                   
                    $fechaDesde = date("Y/m/d", strtotime($fechaDesde));
                    $strFrom .= " AND ish.feCreacion >= :fechaDesde ";
                    $objQuery->setParameter("fechaDesde", $fechaDesde);
                    $objQueryCount->setParameter("fechaDesde", $fechaDesde);
                }

                if($fechaHasta)
                {
                   
                    $fechaHasta = date("Y/m/d", strtotime($fechaHasta));
                    $strFrom .= " AND ish.feCreacion <= :fechaHasta ";
                    $objQuery->setParameter("fechaHasta", $fechaHasta);
                    $objQueryCount->setParameter("fechaHasta", $fechaHasta);
                }


                $strfechaCambioEsquemaActivacion = $arrayParametros['fechaEsquemaActivacion'];
                $strfechaCambioEsquemaActivacion = date("Y/m/d", strtotime($strfechaCambioEsquemaActivacion));

                $strFrom .= "  AND ish.estado='Activo'
                               AND (
                                   ( ish.feCreacion < :fechaActivacion AND
                                     UPPER(ish.observacion) LIKE :observacion) OR 
                                     ( ish.feCreacion >= :fechaActivacion AND
                                       UPPER(ish.accion) = :accion ) 
                                   )";

                $observacionConfirmacion =$arrayParametros['observacionConfirmacion'];
                   
                $objQuery->setParameter("observacion", '%'.$observacionConfirmacion.'%');
                $objQueryCount->setParameter("observacion", '%'.$observacionConfirmacion.'%'); 
                
                
                $objQuery->setParameter("accion", $accionConfirmacion);
                $objQueryCount->setParameter("accion",$accionConfirmacion);
                     
                      
                $objQuery->setParameter("fechaActivacion", $strfechaCambioEsquemaActivacion);
                $objQueryCount->setParameter("fechaActivacion", $strfechaCambioEsquemaActivacion);


                $strFrom .= "  AND empr.empresaCod= :codigoEmpresa ";

                $objQuery->setParameter("codigoEmpresa", $idEmpresa);
                $objQueryCount->setParameter("codigoEmpresa", $idEmpresa);


                $strOrder = " order by ish.feCreacion DESC ";
                $strQuery = $strSelect . $strFrom . $strOrder;
                $strQueryCount = $strSelectCount . $strFrom . $strOrder;
                $objQuery->setDQL($strQuery);
                $objQueryCount->setDQL($strQueryCount);
                                 
                
                $datos = $objQuery->getResult();
                $total = $objQueryCount->getSingleScalarResult();
                $arrayRespuesta['resultado'] = $datos;
                $arrayRespuesta['total'] = $total;
            }
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }

        return $arrayRespuesta;
    }
    
    /**
     * Documentación para el método 'getInfoServicioMigradoMd'.
     *
     * Método utilizado para obtener información de servicio Md que haya sido migrado
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 06-10-2016    
     * @since 1.0
     *
     * @param Array   $arrayParametros [
     *                                  - intIdServicio                   Identificador de servicio 
     *                                 ]
     * @return Array $arrayData [
     *                           - intIdServicioTecnico   Identificador de la tabla InfoServicioTecnico
     *                           - strNombreCpe           Cadena de caracteres con nombre de Cpe hw
     *                           - strModeloCpe           Cadena de caracteres con modelo de Cpe hw
     *                           - strMarcaCpe            Cadena de caracteres con marc de Cpe hw
     *                          ]
     */
    public function getInfoServicioMigradoMd($arrayParametros)
    {
        $objQuery      = $this->_em->createQuery(null);
        $intIdServicio = $arrayParametros["intIdServicio"];
        $strDql = " SELECT ST.id intIdServicioTecnico,
                        CPE.nombreElemento strNombreCpe,
                        MODELO_CPE.nombreModeloElemento strModeloCpe,
                        MARCA_CPE.nombreMarcaElemento strMarcaCpe
                      FROM schemaBundle:InfoServicioTecnico ST ,
                        schemaBundle:InfoDetalleSolicitud   SOL,
                        schemaBundle:AdmiTipoSolicitud   TS,
                        schemaBundle:InfoElemento        OLT,
                        schemaBundle:AdmiModeloElemento  MODELO_OLT,
                        schemaBundle:AdmiMarcaElemento   MARCA_OLT,
                        schemaBundle:InfoElemento        CPE,
                        schemaBundle:AdmiModeloElemento  MODELO_CPE,
                        schemaBundle:AdmiMarcaElemento   MARCA_CPE
                      WHERE ST.servicioId               = SOL.servicioId
                      AND SOL.tipoSolicitudId           = TS.id
                      AND ST.elementoId                 = OLT.id
                      AND OLT.modeloElementoId          = MODELO_OLT.id
                      AND MODELO_OLT.marcaElementoId    = MARCA_OLT.id
                      AND ST.elementoClienteId          = CPE.id
                      AND CPE.modeloElementoId          = MODELO_CPE.id
                      AND MODELO_CPE.marcaElementoId    = MARCA_CPE.id
                      AND TS.descripcionSolicitud       = :paramTipoSolicitud
                      AND SOL.estado                    = :paramEstadoSolicitud
                      AND ST.servicioId                 = :paramServicioId
                      AND MARCA_OLT.nombreMarcaElemento = :paramMarcaOlt";

        $objQuery->setParameter('paramTipoSolicitud'  , 'SOLICITUD MIGRACION');
        $objQuery->setParameter('paramEstadoSolicitud', 'Finalizada');
        $objQuery->setParameter('paramServicioId'     , $intIdServicio);
        $objQuery->setParameter('paramMarcaOlt'       , 'HUAWEI');

        $objQuery->setDQL($strDql);
        $arrayData = $objQuery->getOneOrNullResult();
        
        return $arrayData;
    }
    
    /**
     * Documentación para el método 'getInfoElementoWifiAdicional'.
     *
     * Método utilizado para obtener información del elemento wifi adicional de un cliente 
     * Hw en caso de tenerlo
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 06-10-2016    
     * @since 1.0
     *
     ** @param Array   $arrayParametrosWifi [
     *                                        - intIdServicioTecnico                   Identificador de servicio tecnico
     *                                      ]
     *
     * @return Array $arrayData [
     *                           - intElementoWifi    Identificador de la tabla InfoElemento
     *                           - strNombreWifi      Cadena de caracteres con nombre de wifi adicional hw
     *                           - strModeloWifi      Cadena de caracteres con modelo de wifi adicional hw
     *                           - strMarcaWifi       Cadena de caracteres con marca de wifi adicional hw
     *                          ]
     */
    public function getInfoElementoWifiAdicional($arrayParametrosWifi)
    {
        $objQuery             = $this->_em->createQuery(null);
        $intIdServicioTecnico = $arrayParametrosWifi["intIdServicioTecnico"];
        $strDql = " SELECT WIFI.id intElementoWifi,
                        WIFI.nombreElemento strNombreWifi,
                        MODELO_WIFI.nombreModeloElemento strModeloWifi,
                        MARCA_WIFI.nombreMarcaElemento strMarcaWifi
                      FROM schemaBundle:InfoServicioTecnico ST ,
                        schemaBundle:InfoEnlace             ENLACE,
                        schemaBundle:InfoInterfaceElemento  IE,
                        schemaBundle:InfoElemento           WIFI,
                        schemaBundle:AdmiModeloElemento     MODELO_WIFI,
                        schemaBundle:AdmiMarcaElemento      MARCA_WIFI
                      WHERE ST.interfaceElementoClienteId  = ENLACE.interfaceElementoIniId
                      AND ENLACE.interfaceElementoFinId    = IE.id
                      AND IE.elementoId                    = WIFI.id
                      AND WIFI.modeloElementoId            = MODELO_WIFI.id
                      AND MODELO_WIFI.marcaElementoId      = MARCA_WIFI.id
                      AND ENLACE.estado                    = :paramEstadoEnlace
                      AND ST.id                            = :paramIdServicioTecnico ";

        $objQuery->setParameter('paramEstadoEnlace'     , 'Activo');
        $objQuery->setParameter('paramIdServicioTecnico', $intIdServicioTecnico);

        $objQuery->setDQL($strDql);  
        $arrayData = $objQuery->getOneOrNullResult();
        
        return $arrayData;
    }
    
    /**    
     * Documentación para el método 'getContratosDigitalesConFacturas'.
     *
     * Función que retorna la información de los contratos digitales con las facturas en estado 'Activo', 'Pendientes' y/o 'Cerrado'.
     * 
     * @param int $intIdEmpresa Id de la empresa de la cual se desea consultar
     * @return array $arrayResultados['registros']
     * 
     * @author Edson Franco <efranco@telconet.ec>       
     * @version 1.0 04-08-2016
     *
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>       
     * @version 1.1 03-12-2018 - Se agrega verificacion para que no considere las Facturas Cerradas por NC o NCI.
     *
     * @author Marlon Pluas <mpluas@telconet.ec>       
     * @version 1.2 11-01-2021 - Se cambia la descripcion de caracteristica de igual a IN
     * @since 1.1
     *
     */
    public function getContratosDigitalesConFacturas($intIdEmpresa)
    { 
        $strSql = "SELECT ic.id, 
                          iper.id as personaEmpresaRolId,
                          (
                             SELECT COUNT(idfc2.id)
                             FROM schemaBundle:InfoDocumentoFinancieroCab idfc2,
                                  schemaBundle:InfoDocumentoCaracteristica idc2,
                                  schemaBundle:AdmiCaracteristica ac2,
                                  schemaBundle:InfoPunto ip2,
                                  schemaBundle:InfoPersonaEmpresaRol iper2,
                                  schemaBundle:InfoContrato ic2
                             WHERE idfc2.id = idc2.documentoId
                               AND ac2.id = idc2.caracteristicaId
                               AND ip2.id = idfc2.puntoId
                               AND iper2.id = ip2.personaEmpresaRolId
                               AND ic2.personaEmpresaRolId = iper2.id
                               AND idfc2.estadoImpresionFact IN (:estadosFacturasConDeuda)
                               AND ac2.descripcionCaracteristica IN (:strDescripcionCaracteristica)
                               AND idc2.valor = :strValor
                               AND idc2.estado = :strEstadoActivo
                               AND iper2.id = ic.personaEmpresaRolId
                          ) as FACT_ACTIVAS_PENDIENTES,
                          (
                             SELECT COUNT(idfc3.id)
                             FROM schemaBundle:InfoDocumentoFinancieroCab idfc3,
                                  schemaBundle:InfoDocumentoCaracteristica idc3,
                                  schemaBundle:AdmiCaracteristica ac3,
                                  schemaBundle:InfoPunto ip3,
                                  schemaBundle:InfoPersonaEmpresaRol iper3,
                                  schemaBundle:InfoContrato ic3
                             WHERE idfc3.id = idc3.documentoId
                               AND ac3.id = idc3.caracteristicaId
                               AND ip3.id = idfc3.puntoId
                               AND iper3.id = ip3.personaEmpresaRolId
                               AND ic3.personaEmpresaRolId = iper3.id
                               AND idfc3.estadoImpresionFact = :strEstadoCerrado
                               AND ac3.descripcionCaracteristica IN (:strDescripcionCaracteristica)
                               AND idc3.valor = :strValor
                               AND idc3.estado = :strEstadoActivo
                               AND iper3.id = ic.personaEmpresaRolId
                               AND NOT EXISTS (SELECT 1 
                                               FROM schemaBundle:InfoDocumentoFinancieroCab nc,
                                               schemaBundle:AdmiTipoDocumentoFinanciero atdnc                       
                                               WHERE nc.referenciaDocumentoId = idfc3.id
                                               AND nc.tipoDocumentoId         = atdnc.id
                                               AND atdnc.estado               = :strEstadoActivo
                                               AND atdnc.codigoTipoDocumento IN (:strCodigoTipoDocumento)
                                               AND nc.estadoImpresionFact     = :strEstadoActivo
                                               AND nc.puntoId                 = ip3.id                       
                                              ) 

                          ) as FACT_CERRADAS
                   FROM schemaBundle:InfoContrato ic,
                        schemaBundle:InfoPersonaEmpresaRol iper,
                        schemaBundle:InfoEmpresaRol ier,
                        schemaBundle:InfoAdendum iad
                   WHERE iper.id = ic.personaEmpresaRolId
                     AND ier.id = iper.empresaRolId 
                     AND ier.empresaCod = :intEmpresaCod
                     AND iad.contratoId= ic.id
                     AND iad.formaContrato = :strformaContrato
                     AND ic.estado = :strEstadoContratoPendiente";
        
        $query = $this->_em->createQuery($strSql);
        
        $query->setParameter('estadosFacturasConDeuda',      array_values(array('Pendiente', 'Activo')));
        $query->setParameter('strDescripcionCaracteristica', array_values(array('POR_CONTRATO_DIGITAL', 'POR_CONTRATO_FISICO')));
        $query->setParameter('strValor',                     'S');
        $query->setParameter('strEstadoActivo',              'Activo');
        $query->setParameter('strEstadoCerrado',             'Cerrado');
        $query->setParameter('strCodigoTipoDocumento',       array_values(array('NC', 'NCI')));
        $query->setParameter('intEmpresaCod',                $intIdEmpresa); 
        $query->setParameter('strEstadoContratoPendiente',   'Pendiente');
        $query->setParameter('strformaContrato',             'DIGITAL');
        $arrayResultados['registros'] = $query->getResult();
        
        return $arrayResultados;
    }    
    
     /**
     * Documentacion para la funcion getJsonPuntosServiciosPorVendedor
     *
     * Funcion que retorna el listador de puntos y servicios por el usuario Vendedor
     * en formato json
     * @param string  $arrayParametros
     *
     * @return string $arrayRespuesta
     *
     * @version 1.0
     *
     * @author Hector Ortega <haortega@telconet.ec>
     *
     */

    public function getJsonPuntosServiciosPorVendedor($arrayParametros)
    {

        $arrayEncontrados = array();
        $fecha            = $arrayParametros['fecha'];
        if($fecha)
        {
            $arrayfecha     = explode("-",$fecha,3);
            $strFechaSinDia = $arrayfecha[0]."-".$arrayfecha[1]."-"; 
            $anio           = $arrayfecha[0];
            $mes            = $arrayfecha[1];
            $diasmes        = date("d", mktime(0, 0, 0, $mes + 1, 0, $anio));
            $fechaDesde     = $strFechaSinDia . "01";
            $fechaHasta     = $strFechaSinDia . $diasmes;
        }

        $arrayParametros['fechaDesde'] = $fechaDesde;
        $arrayParametros['fechaHasta'] = $fechaHasta;

        $arrayAdmiParametroDet = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                           ->getOne('REPORTE_COMERCIAL_FECHA_ACTIVACION',
                                                    'COMERCIAL', 'REPORTE_DE_VENDEDORES', 
                                                    '', '', '', '', '', '', '');

        $arrayParametros['fechaEsquemaActivacion']  = $arrayAdmiParametroDet['valor1'];
        $arrayParametros['observacionConfirmacion'] = $arrayAdmiParametroDet['valor2'];
        $arrayParametros['accionConfirmacion']      = $arrayAdmiParametroDet['valor3'];        
        
        
        $arrayResultado   = $this->getResultadoPuntosServiciosPorVendedor($arrayParametros);
        $arrayEncontrados = $arrayResultado['resultado'];
        $intTotal         = $arrayResultado['total'];
        $arr_encontrados  = array();

        foreach($arrayEncontrados as $resultado)
        {

            $razonSocial   = $resultado['razonSocial'];
            $nombreCliente = $resultado['nombreCliente'];
            if($razonSocial)
            {
                $nombre = $razonSocial;
            }
            else
            {
                $nombre = $nombreCliente;
            }
            
            $direccionCliente = $resultado['direccionCliente'];
            $loginPunto       = $resultado['loginPunto'];
            $direccionPunto   = $resultado['direccionPunto'];
            $nombrePlan       = $resultado['nombrePlan'];
           
            if($nombrePlan)
            {
                $planProducto = $nombrePlan;
            }
            else
            {
                $planProducto = $resultado['descripcionProducto'];;
            }
            
            
            $precioVenta             = $resultado['precioVenta'];
            $cantidad                = $resultado['cantidad'];
            $porcentajeDescuento     = $resultado['porcentajeDescuento'];
            $valorDescuento          = $resultado['valorDescuento'];
            $esVenta                 = $resultado['esVenta'];
            $loginPuntoFacturacion   = $resultado['loginPuntoFacturacion'];
            $feCreacionServ          = $resultado['feCreacionServ'];
            $fechaActivacionServicio = $resultado['fechaActivacionServicio'];


            $arr_encontrados[] = array(
                                       'nombreCliente' => $nombre,
                                       'direccionCliente' => $direccionCliente,
                                       'loginPunto' => $loginPunto,
                                       'direccionPunto' => $direccionPunto,
                                       'planProducto' => $planProducto,
                                       'precioVenta' => $precioVenta,
                                       'cantidad' => $cantidad,
                                       'porcentajeDescuento' => $porcentajeDescuento,
                                       'valorDescuento' => $valorDescuento,
                                       'esVenta' => $esVenta,
                                       'loginPuntoFacturacion' => $loginPuntoFacturacion,
                                       'feCreacionServ' => $feCreacionServ,
                                       'fechaActivacionServicio' => $fechaActivacionServicio
            );
        }
        $arrayRespuesta = array('total' => $intTotal, 'encontrados' => $arr_encontrados);
        $jsonData       = json_encode($arrayRespuesta);
        return $jsonData;
    }
    
    /**
     * 
     * Método que obtiene todos los servicios que dependan de un equipo dentro del punto enviado que posea una solicitud de cambio.
     * La solicitud requerida es de tipo 'SOLICITUD CAMBIO DE MODEM INMEDIATO' cuyo estado debera ser AsignadoTarea y el equipo deberá tener
     * sus interfaces Wan conectadas para obtener los servicios requeridos ligados a estas
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 20-10-2016
     * 
     * Costo : 18
     * 
     * @param  Array $arrayParametros
     *                               [
     *                                   intIdPunto    Punto a buscar los servicios que son dependientes de un equipo que posee solicitud de cambio 
     *                               ]
     * @return Array $arrayResultado  Servicios vinculados a un Equipo que posee solicitud para realizar cambio
     */
    public function getArrayServiciosAfectadosPorCambioEquipo($arrayParametros)
    {        
        $rsm = new ResultSetMappingBuilder($this->_em);	      
        $query = $this->_em->createNativeQuery(null, $rsm);	                

        $sql = "  SELECT 
                    DISTINCT(DETALLE.DETALLE_VALOR)
                  FROM                     
                    INFO_SERVICIO SERVICIO,
                    INFO_DETALLE_SOLICITUD SOLICITUD,
                    ADMI_TIPO_SOLICITUD TIPO,
                    INFO_DETALLE_SOL_CARACT CARACT,
                    INFO_ELEMENTO ELEMENTO,
                    INFO_INTERFACE_ELEMENTO INTERFACE,
                    DB_INFRAESTRUCTURA.INFO_DETALLE_INTERFACE DETALLE
                  WHERE 
                      SERVICIO.ID_SERVICIO                                      = SOLICITUD.SERVICIO_ID
                  AND SOLICITUD.TIPO_SOLICITUD_ID                               = TIPO.ID_TIPO_SOLICITUD
                  AND SOLICITUD.ID_DETALLE_SOLICITUD                            = CARACT.DETALLE_SOLICITUD_ID
                  AND COALESCE(TO_NUMBER(REGEXP_SUBSTR(CARACT.VALOR,'^\d+')),0) = ELEMENTO.ID_ELEMENTO
                  AND ELEMENTO.ID_ELEMENTO                                      = INTERFACE.ELEMENTO_ID
                  AND INTERFACE.ID_INTERFACE_ELEMENTO                           = DETALLE.INTERFACE_ELEMENTO_ID
                  AND INTERFACE.DESCRIPCION_INTERFACE_ELEMENTO                  = :tipoInterface
                  AND INTERFACE.ESTADO                                          = :estadoInterface                  
                  AND TIPO.DESCRIPCION_SOLICITUD                                = :tipoSolicitud
                  AND SOLICITUD.ESTADO                                          = :estadoSolicitud
                  AND CARACT.ESTADO                                             = :estadoSolicitud
                  AND SERVICIO.PUNTO_ID                                         = :punto
                ";

        $rsm->addScalarResult('DETALLE_VALOR','servicio','string');                                   		                        

        $query->setParameter('punto',             $arrayParametros['intIdPunto']);  
        $query->setParameter('estadoSolicitud',   'AsignadoTarea');        
        $query->setParameter('estadoInterface',   'connected');          
        $query->setParameter('tipoInterface',     'Wan');
        $query->setParameter('tipoSolicitud',     'SOLICITUD CAMBIO DE MODEM INMEDIATO');  

        $query->setSQL($sql);                   

        $arrayResultado = $query->getArrayResult();     
              
        return $arrayResultado;      
    }

    
    /**
     * Metodo utilizado para poder validar y determinar si un servcio depende de un pseudope cliente o no
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @since 17-11-2016
     * @version 1.0
     * 
     * @param Object $objServicio [ Servicio a determinar si pertenece a Pesudo Pe - Cliente o no ]
     * @return boolean $boolEsPesudoPe
     */
    public function esServicioPseudoPe($objServicio)
    {
        $boolEsPesudoPe = false;
        
        if(is_object($objServicio))
        {
            // Verificar si el servicio depende de un Edificio ( PseudoPe ) perteneciente a Cliente o Empresa
            $objInfoPuntoDatoAdicional = $this->_em->getRepository("schemaBundle:InfoPuntoDatoAdicional")
                                                   ->findOneByPuntoId($objServicio->getPuntoId()->getId());

            if(is_object($objInfoPuntoDatoAdicional))
            {
                $intElementoEdificio = $objInfoPuntoDatoAdicional->getElementoId();

                if($objInfoPuntoDatoAdicional->getDependeDeEdificio() == 'S' && $intElementoEdificio )
                {
                    $objDetalleElementoAministra = $this->_em->getRepository("schemaBundle:InfoDetalleElemento")
                                                             ->findOneBy(array('detalleNombre'  =>  'ADMINISTRA',
                                                                               'estado'         =>  'Activo',
                                                                               'elementoId'     =>  $intElementoEdificio
                                                                              )
                                                                        );

                    $objDetalleElementoEsPseudoPe = $this->_em->getRepository("schemaBundle:InfoDetalleElemento")
                                                               ->findOneBy(array('detalleNombre'  =>  'TIPO_ELEMENTO_RED',
                                                                                 'estado'         =>  'Activo',
                                                                                 'elementoId'     =>  $intElementoEdificio
                                                                                )
                                                                          );
                    //Si existe registro de elemento red siginifica que es de tipo pseudoPe
                    if( (is_object($objDetalleElementoEsPseudoPe) && is_object($objDetalleElementoAministra)) &&
                        $objDetalleElementoEsPseudoPe->getDetalleValor() == 'PSEUDO_PE' &&
                        $objDetalleElementoAministra->getDetalleValor()  == 'CLIENTE')
                    {
                        $boolEsPesudoPe = true;
                    }

                }
            }
        }
        
        return $boolEsPesudoPe;
    }


    /**    
     * Documentación para el método 'getServicioComision'.
     *
     * Función que retorna la comision ligada al servicio dependiendo de los parámetros enviados por el usuario.
     * 
     * @param array $arrayParametros['arrayEstados'       => 'Estados que se van a incluir en la consulta',
     *                               'intIdServicio'      => 'Id del servicio que se requiere consultar',
     *                               'strRolComisionista' => 'Rol comisionista que debe tener el servicio']
     * 
     * @return array $arrayResultados['arrayRegistros' => 'Registros obtenidos del resultado de la consulta',
     *                                'intTotal'       => 'Total de registros obtenidos']
     * 
     * @author Edson Franco <efranco@telconet.ec>       
     * @version 1.0 03-05-2017
     * Costo del Query: 5
     */
    public function getServicioComision($arrayParametros)
    {
        $arrayResultados = array('arrayRegistros' => null, 'intTotal' => 0);
        
        try
        {
            $objQuery       = $this->_em->createQuery();
            $objQueryCount  = $this->_em->createQuery();
            $strSelectCount = "SELECT COUNT(ISC.id) ";
            $strSelect      = "SELECT ISC.id AS idServicioComision, ISC.comisionVenta, ISC.comisionMantenimiento, ISC.estado AS ".
                              "estadoServicioComision, ISC.feCreacion AS feCreacionServicioComision, ISC.feUltMod AS feUltModServicioComision, ".
                              "ISC.usrUltMod AS usrUltModServicioComision, ACD.id AS idComisionDet, ACD.estado AS estadoComisionDet, ISER.id AS ".
                              "idServicio, IPER.id as idPersonaEmpresaRol ";
            $strFrom        = "FROM schemaBundle:InfoServicioComision ISC, ".
                              "     schemaBundle:AdmiComisionDet ACD, ".
                              "     schemaBundle:InfoPersonaEmpresaRol IPER, ".
                              "     schemaBundle:InfoServicio ISER ";
            $strWhere       = "WHERE ISC.id                IS NOT NULL ".
                              "AND ISC.servicioId          = ISER.id ".
                              "AND ISC.comisionDetId       = ACD.id ".
                              "AND ISC.personaEmpresaRolId = IPER.id ";
            $strOrderBy     = "ORDER BY ISC.id ";
            
            
            if( isset($arrayParametros['intIdServicio']) && $arrayParametros['intIdServicio'] > 0 )
            {
                $strWhere .= "AND ISER.id = :intIdServicio ";
                
                $objQuery->setParameter('intIdServicio',      $arrayParametros['intIdServicio']);
                $objQueryCount->setParameter('intIdServicio', $arrayParametros['intIdServicio']);
            }//( isset($arrayParametros['arrayEstados']) && !empty($arrayParametros['arrayEstados']) )


            if( isset($arrayParametros['arrayEstados']) && !empty($arrayParametros['arrayEstados']) )
            {
                $strWhere .= "AND ISC.estado IN (:arrayEstados) ";
                
                $objQuery->setParameter('arrayEstados',      array_values($arrayParametros['arrayEstados']));
                $objQueryCount->setParameter('arrayEstados', array_values($arrayParametros['arrayEstados']));
            }//( isset($arrayParametros['arrayEstados']) && !empty($arrayParametros['arrayEstados']) )


            if( isset($arrayParametros['strRolComisionista']) && !empty($arrayParametros['strRolComisionista']) )
            {
                $strFrom  .= ", schemaBundle:AdmiParametroDet APD, ".
                             "schemaBundle:AdmiParametroCab APC ";
                $strWhere .= "AND ACD.parametroDetId  = APD.id ".
                             "AND APD.parametroId     = APC.id ".
                             "AND APD.estado          = :strEstadoActivo ".
                             "AND APC.estado          = :strEstadoActivo ".
                             "AND APC.nombreParametro = :strNombreParametro ".
                             "AND APD.valor3          = :strRolComisionista ";
                
                $objQuery->setParameter('strRolComisionista',      $arrayParametros['strRolComisionista']);
                $objQuery->setParameter('strEstadoActivo',         'Activo');
                $objQuery->setParameter('strNombreParametro',      'GRUPO_ROLES_PERSONAL');
                $objQueryCount->setParameter('strRolComisionista', $arrayParametros['strRolComisionista']);
                $objQueryCount->setParameter('strEstadoActivo',    'Activo');
                $objQueryCount->setParameter('strNombreParametro', 'GRUPO_ROLES_PERSONAL');
            }//( isset($arrayParametros['strRolComisionista']) && !empty($arrayParametros['strRolComisionista']) )

            $strSql      = $strSelect.$strFrom.$strWhere.$strOrderBy;
            $strSqlCount = $strSelectCount.$strFrom.$strWhere;

            $objQuery->setDQL($strSql);
            $objQueryCount->setDQL($strSqlCount);

            $arrayResultados['arrayRegistros'] = $objQuery->getResult();
            $arrayResultados['intTotal']       = $objQueryCount->getSingleScalarResult();
        }
        catch(\Exception $e)
        {
            throw($e);
        }
        
        return $arrayResultados;
    }
    
    /**
     * 
     * Metodo encargado de devolver el Array de informacion de productos, grupos y subgrupos segun parametros enviados
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 21-08-2017
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 - 19-02-2018 -  Se agrega campo en la consulta que contiene el tipo de producto si es Normal, Core o Preferencial
     * 
     * Costo: 14
     * 
     * @author José Álava <jialava.ec>
     * @version 1.1 - 19-06-2019 -   Se agrega bandera para saber que tipo  de producto es
     * Costo: 14
     * 
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 1.2 08-02-2021 - Se agrega lógica para filtrar el listado.
     * Costo: 14
     * 
     * @param Array $arrayParametros [ strTipo , strGrupo , strSubGrupo , strCodEmpresa ]
     * @return type
     */
    
    public function getArrayGrupoSubgrupoProductos($arrayParametros)
    {        
        $objRsm   = new ResultSetMappingBuilder($this->_em);        
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);      
        
        $strWhere  = '';
        $strSelect = '';
        $strOrderBy = '';
        
        if($arrayParametros['strTipo'] == 'SUBGRUPO')
        {
            $strSelect .= " SELECT DISTINCT(SUBGRUPO) SUBGRUPO ";
            $strWhere  .= " AND GRUPO = :grupo ";
            $strOrderBy = " ORDER BY subgrupo ASC ";
            $objRsm->addScalarResult('SUBGRUPO',               'subgrupo','string');
            $objQuery->setParameter('grupo', $arrayParametros['strGrupo']);
        }
        else if($arrayParametros['strTipo'] == 'GRUPO')
        {
            $strSelect .= " SELECT DISTINCT(GRUPO) GRUPO ";
            $objRsm->addScalarResult('GRUPO',               'grupo','string');
        }
        else
        {
            $strSelect .= "SELECT ID_PRODUCTO,
                                  DESCRIPCION_PRODUCTO,
                                  NOMBRE_TECNICO,
                                  GRUPO,
                                  SUBGRUPO ,
                                  NVL((SELECT 
                                    CASE C.descripcion_caracteristica
                                        WHEN 'ES_HOUSING' THEN 'C'
                                        WHEN 'ES_POOL_RECURSOS' THEN 'C'
                                        WHEN 'PRODUCTO_PREFERENCIAL_GRUPO' THEN 'P'    
                                    END
                                    FROM 
                                    DB_COMERCIAL.ADMI_CARACTERISTICA C,
                                    DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC
                                    WHERE 
                                    C.ID_CARACTERISTICA = APC.CARACTERISTICA_ID AND
                                    APC.PRODUCTO_ID     = ID_PRODUCTO AND
                                    C.DESCRIPCION_CARACTERISTICA IN ('ES_HOUSING','ES_POOL_RECURSOS','PRODUCTO_PREFERENCIAL_GRUPO')
                                    ),'N') TIPO ";
            $strWhere .= " AND GRUPO = :grupo ";
            
            if(isset($arrayParametros['strSubGrupo']) && !empty($arrayParametros['strSubGrupo']))
            {
                 $strWhere .= " AND SUBGRUPO = :subgrupo ";
                  $objQuery->setParameter('subgrupo', $arrayParametros['strSubGrupo']);
            }
                       
            $objQuery->setParameter('grupo', $arrayParametros['strGrupo']);
            
            $objRsm->addScalarResult('ID_PRODUCTO',         'idProducto','integer');                                                               
            $objRsm->addScalarResult('DESCRIPCION_PRODUCTO','descripcionProducto','string');  
            $objRsm->addScalarResult('NOMBRE_TECNICO',      'nombreTecnico','string');  
            $objRsm->addScalarResult('GRUPO',               'grupo','string');  
            $objRsm->addScalarResult('SUBGRUPO',            'subgrupo','string');
            $objRsm->addScalarResult('TIPO',                'tipo','string');
        }

        if(!empty($arrayParametros["arrayDescProductoDC"]) && is_array($arrayParametros["arrayDescProductoDC"]) 
            && isset($arrayParametros["arrayDescProductoDC"]))
        {
            $strWhere .=" AND LOWER(DESCRIPCION_PRODUCTO) IN (:DESCRIPCION_PRODUCTO) ";
            $objQuery->setParameter('DESCRIPCION_PRODUCTO', $arrayParametros['arrayDescProductoDC']);
        }
        if(!empty($arrayParametros["arrayLineaNegocioDC"]) && is_array($arrayParametros["arrayLineaNegocioDC"]) 
            && isset($arrayParametros["arrayLineaNegocioDC"]))
        {
            $strWhere .=" AND LOWER(LINEA_NEGOCIO) IN (:LINEA_NEGOCIO) ";
            $objQuery->setParameter('LINEA_NEGOCIO', $arrayParametros['arrayLineaNegocioDC']);
        }

        $strSql = " $strSelect
                    FROM DB_COMERCIAL.ADMI_PRODUCTO
                    WHERE empresa_cod = :codEmpresa
                    AND estado        = :estado
                    AND GRUPO        IS NOT NULL    
                    AND NOMBRE_TECNICO <> :noNombreTecnico
                    $strWhere
                    $strOrderBy
                ";

        $objQuery->setParameter('codEmpresa',  $arrayParametros['strCodEmpresa']);  
        $objQuery->setParameter('estado',   'Activo');
        $objQuery->setParameter('noNombreTecnico',   'FINANCIERO');

        $objQuery->setSQL($strSql);                   

        $arrayResultado = $objQuery->getArrayResult();     
              
        return $arrayResultado;      
    }
    
    /**
     * 
     * Metodo que se encarga de obtener el secuencial designado para poder agrupar la solucion de productos
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 29-08-2017
     *      
     * @param Array $arrayParametros [ strTipo , strGrupo , strSubGrupo , strCodEmpresa ]
     * @return type
     */
    public function getSecuenciaPaqueteProductos()
    { 
        $objRsm   = new ResultSetMappingBuilder($this->_em);	      
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $arrayRespuesta = array();
        
        try
        {        
            $strSelect = "SELECT DB_COMERCIAL.SEQ_GRUPO_PRODUCTO.NEXTVAL SECUENCIA FROM DUAL";

            $objRsm->addScalarResult('SECUENCIA', 'secuencia','integer');

            $objQuery->setSQL($strSelect);
            
            $arrayRespuesta = $objQuery->getOneOrNullResult();        
        }
        catch(\Exception $e)
        {
            throw($e);
        }
        
        return $arrayRespuesta;
    }

    /**
     * Función que obtiene los servicios con sus respectivos productos
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0
     * @since 02-03-2018
     *
     * @param array $arrayParametros[
     *                               "intIdEmpresa      : id de la empresa en la que se encuentra el cliente,
     *                               "strNombreTecnico" : Nombre tecnico del producto asociado al servicio,
     *                               "strEstadoProd     : Estado del producto,
     *                               "arrayServicios"   : Servicios del punto cliente
     *                              ]
     * @return $arrayRespuesta
     */
    public function getServicioProducto($arrayParametros)
    {
        $strSql         = "";

        try
        {
            $objRsm   = new ResultSetMappingBuilder($this->_em);
            $objQuery = $this->_em->createNativeQuery(null, $objRsm);

            $strSql = "SELECT servi.ID_SERVICIO          ID_SERVICIO, "
                           . "produ.DESCRIPCION_PRODUCTO DESCRIPCION_PRODUCTO "
                       ."FROM DB_COMERCIAL.INFO_SERVICIO servi, "
                            ."DB_COMERCIAL.INFO_PLAN_CAB planc, "
                            ."DB_COMERCIAL.INFO_PLAN_DET plancd, "
                            ."DB_COMERCIAL.ADMI_PRODUCTO produ "
                        ."WHERE servi.PLAN_ID        = planc.ID_PLAN "
                          ."AND planc.ID_PLAN        = plancd.PLAN_ID "
                          ."AND produ.ID_PRODUCTO    = plancd.PRODUCTO_ID "
                          ."AND produ.EMPRESA_COD    = :intIdEmpresa "
                          ."AND produ.NOMBRE_TECNICO = :strNombreTecnico "
                          ."AND produ.ESTADO         = :strEstadoProd "
                          ."AND servi.ID_SERVICIO    in (:arrayServicios) ";

            $objRsm->addScalarResult('ID_SERVICIO','idServicio','integer');
            $objRsm->addScalarResult('DESCRIPCION_PRODUCTO','descripcionProducto','string');

            $objQuery->setParameter('intIdEmpresa', $arrayParametros["intIdEmpresa"]);
            $objQuery->setParameter('strNombreTecnico', $arrayParametros["strNombreTecnico"]);
            $objQuery->setParameter('strEstadoProd', $arrayParametros["strEstadoProd"]);
            $objQuery->setParameter('arrayServicios', array_values($arrayParametros['arrayServicios']));

            $objQuery->setSQL($strSql);

            $arrayResultado = $objQuery->getResult();
        }
        catch (\Exception $e)
        {
            error_log("Error: InfoServicioRepository.getServicioProducto -> ".$e->getMessage());
        }
        return $arrayResultado;
    }

    /**
     * getServicioPorLoginAux
     * 
     * Metodo que se encarga de obtener el servicio tn mediante el campo login auxiliar
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 - 17-05-2018
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 - 29-08-2018  Se agrega filtro de estado
     * @since 1.0
     *      
     * @param  Array  $arrayParametros [ 
     *                                strLoginAux    Cadena de caracteres con identicador auxiliar de servicios TN
     *                               ]
     * @return Object $objServicio
     */
    public function getServicioPorLoginAux($arrayParametros)
    {
        $objEm       = $this->_em;
        $objServicio = null;
        try
        {
            $objSql = $objEm->createQuery("select s
                                           from schemaBundle:InfoServicio s
                                           where UPPER(s.loginAux) = :loginAuxParam and
                                           s.estado = :estadoParam");

            $objSql->setParameter('loginAuxParam', strtoupper($arrayParametros['strLoginAux']));
            $objSql->setParameter('estadoParam', 'Activo');
            $objServicio = $objSql->getOneOrNullResult();     
        }
        catch(\Exception $objEx)
        {
            throw($objEx);
        }
        
        return $objServicio;
    }
    
    /**
     * 
     * Metodo que se encarga de obtener los servicios agrupados dado un secuencial de grupo/solucion
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 12-09-2017
     * 
     * Costo 11
     *
     * @param type $arrayParametros
     * @return Array
     * 
     * @author José Alava<jialava@telconet.ec>
     * @version 1.1 - 02-04-2019  Se formaliza cambio en caliente, se valida que no se tomen servicios eliminado en la activación de soluciones
     * @since 1.0
     *
     * Costo 25
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 02-07-2020 - Se modifica el el query para obtener la data de las nuevas estructuras de solución.
     *
     * @author Steven Ruano <sruano@telconet.ec>
     * @version 1.3 22-02-2023 Se agrega validacion para la busqueda de servicios de alquiler por facturacion Id.
     * 
     */
    public function getArrayServiciosPorGrupoSolucion($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery = $this->_em->createNativeQuery(null, $objResultSetMap);

        $strSql = "SELECT S.* ".
                   "FROM DB_COMERCIAL.INFO_SOLUCION_CAB ISCAB, ".
                        "DB_COMERCIAL.INFO_SOLUCION_DET ISDET, ".
                        "DB_COMERCIAL.INFO_SERVICIO     S ".
                  "WHERE ISCAB.ID_SOLUCION_CAB = ISDET.SOLUCION_CAB_ID ";

        $strWhere = "AND ISDET.SERVICIO_ID     = S.ID_SERVICIO ".
                    "AND ISCAB.NUMERO_SOLUCION = :intNumeroSolucion ".
                    "AND ISCAB.ESTADO          = :strEstado ".
                    "AND ISDET.ESTADO          = :strEstado ".
                    "AND S.ESTADO         NOT IN (:arrayEstadosInvalidos) ";

        if (isset($arrayParametros['intPuntoId']) && !empty($arrayParametros['intPuntoId']))
        {
            $strWhere .= "AND ISCAB.PUNTO_ID = :intPuntoId ";
            $objNativeQuery->setParameter("intPuntoId" , $arrayParametros['intPuntoId']);
        }

        if (isset($arrayParametros['intPuntoFacturacionId']) && !empty($arrayParametros['intPuntoFacturacionId']))
        {
            $strWhere .= "AND S.PUNTO_FACTURACION_ID = :intFacturacionId ";
            $objNativeQuery->setParameter("intFacturacionId" , $arrayParametros['intPuntoFacturacionId']);
        }

        $objNativeQuery->setParameter("intNumeroSolucion"      ,  $arrayParametros['intSecuencial']);
        $objNativeQuery->setParameter("strEstado"              , 'Activo');
        $objNativeQuery->setParameter("arrayEstadosInvalidos"  ,  array('Eliminado','Rechazada','Cancel','Anulado'));

        $objResultSetMap->addRootEntityFromClassMetadata('\telconet\schemaBundle\Entity\InfoServicio', 'servicio');

        $objNativeQuery->setSQL($strSql.$strWhere);

        $arrayResultado = $objNativeQuery->getResult();

        return $arrayResultado;
    }

    /**
     *
     * Metodo encargado de devolver el total de recursos por tipo de recursos para producto pool del recurso
     *
     * Costo: 6
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 08-02-2018
     *
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.1 - 09-04-2019   Se agrega validación para los productos TIPO LICENCIAMIENTO SERVICE
     *
     * Costo: 24
     *
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.2 - 01-07-2020   Se actualiza las tablas a las que se consulta en base a las nuevas estructuras.
     *
     * @param  Array $arrayParametros [ strTipoRecurso , intIdServicio ]
     * @return Array $arrayRespuesta
     */
    public function getArrayRecursosPoolPorTipo($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
        $strTipoRecurso  = $arrayParametros['strTipoRecurso'];

        try
        {
            if (strpos($strTipoRecurso,'_VALUE') !== false)
            {
                $strTipoRecurso = explode('_VALUE',$strTipoRecurso)[0];
            }

            if($arrayParametros['strTipoRecurso']=='TIPO LICENCIAMIENTO SERVICE')
            {
                //Costo query $strSql = 24
                $strSql = " SELECT SUM(ISRC.CANTIDAD)      TOTAL_RECURSO
                            FROM DB_COMERCIAL.INFO_SERVICIO_RECURSO_CAB ISRC
                            WHERE ISRC.SERVICIO_ID IN (
                                                       SELECT ISD.SERVICIO_ID 
                                                       FROM DB_COMERCIAL.INFO_SOLUCION_DET ISD
                                                       WHERE ISD.SOLUCION_CAB_ID = (
                                                                                     SELECT ISD2.SOLUCION_CAB_ID 
                                                                                     FROM DB_COMERCIAL.INFO_SOLUCION_DET ISD2
                                                                                     WHERE ISD2.SERVICIO_ID = :servicio
                                                                                   )
                                                       AND ISD.DESCRIPCION       = 'CLOUD IAAS LICENCIAMIENTO SE'
                                                       AND ISD.ESTADO            = 'Activo'
                                                     )
                            AND ISRC.ESTADO            = :estado";
                
            }
            else
            {
                 //Costo query $strSql = 2
                $strSql = "
                              SELECT SUM(ISRC.CANTIDAD) TOTAL_RECURSO
                              FROM DB_COMERCIAL.INFO_SERVICIO_RECURSO_CAB ISRC
                              WHERE ISRC.TIPO_RECURSO = :recurso
                              AND ISRC.ESTADO         = :estado
                              AND ISRC.SERVICIO_ID    = :servicio";
            }
            
            $objNativeQuery->setParameter("recurso",     $strTipoRecurso);
            $objNativeQuery->setParameter("servicio",    $arrayParametros['intIdServicio']);
            $objNativeQuery->setParameter("estado",      'Activo');

            $objResultSetMap->addScalarResult('TOTAL_RECURSO', 'totalRecurso','integer');

            $objNativeQuery->setSQL($strSql);

            $arrayRespuesta = $objNativeQuery->getOneOrNullResult();
        
        }
        catch(\Exception $e)
        {
            error_log('getArrayRecursosPoolPorTipo -> '.$e->getMessage());
        }
        
        return $arrayRespuesta;
    }

    /**
     *
     * Metodo encargado de devolver el total de recursos por tipo cuando existen mas de uno por misma caracteristica
     *
     * Costo: 7
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 08-02-2018
     *
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.1 - 09-04-2019   Se agrega validación para los productos TIPO LICENCIAMIENTO SERVICE
     *
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.2 - 26-06-2019   Se agrega validación para consultas de DATASTORE_DISCO. Costo: 6
     *
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.3 - 01-07-2020   Se actualiza consulta en base a las nuevas estructuras.
     *
     * @param  Array $arrayParametros [ strTipoRecurso , intIdServicio ]
     * @return Array $arrayRespuesta
     */
    public function getArrayCaracteristicasPorTipoYServicio($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
        
        try
        {
            $strSelect = '';
            
            if($arrayParametros['strTipoRecurso']=='TIPO LICENCIAMIENTO SERVICE')
            {
            //Costo query = 24
               $strSql =  " SELECT  ROWNUM,
                                    ISRC.ID_SERVICIO_RECURSO_CAB                       ID_RECURSO,
                                    ISRC.TIPO_RECURSO ||'@'|| ISRC.DESCRIPCION_RECURSO RECURSO,
                                    ISRC.CANTIDAD                                      VALOR_REFERENCIA,
                                    NULL                                               REF_PADRE,
                                    ISRC.SERVICIO_ID                                   SERVICIO_ID
                             FROM DB_COMERCIAL.INFO_SERVICIO_RECURSO_CAB ISRC
                             WHERE ISRC.SERVICIO_ID IN (
                                                         SELECT ISD.SERVICIO_ID 
                                                         FROM DB_COMERCIAL.INFO_SOLUCION_DET ISD
                                                         WHERE ISD.SOLUCION_CAB_ID = (
                                                                                       SELECT ISD2.SOLUCION_CAB_ID 
                                                                                       FROM DB_COMERCIAL.INFO_SOLUCION_DET ISD2
                                                                                       WHERE ISD2.SERVICIO_ID = :servicio
                                                                                     )
                                                         AND ISD.DESCRIPCION       = 'CLOUD IAAS LICENCIAMIENTO SE'
                                                         AND ISD.ESTADO            = 'Activo'
                                                       )
                             AND ISRC.ESTADO            = 'Activo'";
            }
            else if ($arrayParametros['strTipoRecurso']=='DATASTORE_DISCO')
            {
                //Costo query = 8
                $strSql = " SELECT 
                                ROWNUM,
                                ISRC.ID_SERVICIO_RECURSO_CAB ID_RECURSO,
                                ISRC.DESCRIPCION_RECURSO RECURSO,
                                ISRD.CANTIDAD VALOR_REFERENCIA,
                                ISRD.DESCRIPCION DATASTORE,
                                ISRC.ID_SERVICIO_RECURSO_CAB REF_PADRE
                            FROM DB_COMERCIAL.INFO_SERVICIO_RECURSO_DET ISRD
                            JOIN DB_COMERCIAL.INFO_SERVICIO_RECURSO_CAB ISRC
                            ON ISRC.ID_SERVICIO_RECURSO_CAB = ISRD.SERVICIO_RECURSO_CAB_ID
                            WHERE ISRD.ELEMENTO_ID  = :idMaquina
                            AND ISRD.ESTADO         = 'Activo'
                            AND ISRC.TIPO_RECURSO   = :refRecursoNombre";
                
                $objNativeQuery->setParameter("idMaquina",     $arrayParametros['intIdMaquina']);
                $objNativeQuery->setParameter("refRecurso",   'DISCO_VALUE'  );
                $objNativeQuery->setParameter("refRecursoNombre",   'DISCO'  );
                $objResultSetMap->addScalarResult('DATASTORE',    'datastore','string');
            }
            else
            {   
                //Costo query = 2
                $strSql = "
                              SELECT 
                                ROWNUM,
                                SRC.ID_SERVICIO_RECURSO_CAB ID_RECURSO,
                                SRC.DESCRIPCION_RECURSO     RECURSO,
                                SRC.CANTIDAD                VALOR_REFERENCIA,
                                (SELECT SRD.ELEMENTO_ID
                                 FROM  DB_COMERCIAL.INFO_SERVICIO_RECURSO_DET SRD
                                 WHERE SRD.SERVICIO_RECURSO_CAB_ID = SRC.ID_SERVICIO_RECURSO_CAB
                                 AND SRD.ESTADO = :estado
                                 AND ROWNUM <2) ELEMENTO_ID,
                                null REF_PADRE
                              FROM 
                                DB_COMERCIAL.INFO_SERVICIO_RECURSO_CAB SRC 
                              WHERE 
                                  SRC.SERVICIO_ID     = :servicio
                              AND SRC.ESTADO          = :estado
                              AND SRC.TIPO_RECURSO    = :recurso";
            }

            $objNativeQuery->setParameter("recurso",     $arrayParametros['strTipoRecurso']);
            $objNativeQuery->setParameter("servicio",    $arrayParametros['intIdServicio']);
            $objNativeQuery->setParameter("caract_value",$arrayParametros['strTipoRecurso'].'%');
            $objNativeQuery->setParameter("estado",      'Activo');

            $objResultSetMap->addScalarResult('ROWNUM',     'rownum',        'integer');
            $objResultSetMap->addScalarResult('ID_RECURSO', 'idRecurso',    'integer');
            $objResultSetMap->addScalarResult('RECURSO',    'nombreRecurso','string');
            $objResultSetMap->addScalarResult('VALOR_REFERENCIA',    'valor','string');            
            $objResultSetMap->addScalarResult('ELEMENTO_ID',    'elementoId','integer');  
            $objResultSetMap->addScalarResult('REF_PADRE',    'refPadre',    'string');
            $objResultSetMap->addScalarResult('SERVICIO_ID', 'idServicio',    'integer');

            $objNativeQuery->setSQL($strSql);

            $arrayRespuesta = $objNativeQuery->getArrayResult();
        
        }
        catch(\Exception $e)
        {
            error_log('getArrayCaracteristicasPorTipoYServicio -> '.$e->getMessage());
        }

        return $arrayRespuesta;
    }

    /**
    *  
    * Metodo encargado de devolver el total de recursos asignado al servidor alquilado por el cliente
    * 
    * Costo: 7
    * 
    * @author Allan Suarez <arsuarez@telconet.ec>
    * @version 1.0 - 08-02-2018
    * 
    * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
    * @version 1.1 - 24-07-2020    Se modifica el query para adaptarlo a las nuevas estructuras de solución.
    * 
    * @param  Array $arrayParametros [ strTipoRecurso , intIdServicio ]
    * @return Array $arrayRespuesta
    */
    public function getArrayInformacionPoolAlquilerServidores($arrayParametros)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
        $arrayRespuesta  = array();
        
        try
        {
            $strSql = "
                        SELECT  (SELECT SRC2.DESCRIPCION_RECURSO
                                    FROM DB_COMERCIAL.INFO_SERVICIO_RECURSO_DET SRD2
                                    JOIN DB_COMERCIAL.INFO_SERVICIO_RECURSO_CAB SRC2
                                    ON SRD2.SERVICIO_RECURSO_CAB_ID = SRC2.ID_SERVICIO_RECURSO_CAB
                                WHERE SRC2.TIPO_RECURSO = 'TIPO ALQUILER SERVIDOR'
                                AND SRD2.ELEMENTO_ID = SRD.ELEMENTO_ID
                                AND SRC2.ESTADO      = 'Activo'
                                AND SRD2.ESTADO      = 'Activo')RECURSO_PADRE,
                                SRD.CANTIDAD DISCO, 
                                SRD.DESCRIPCION DATASTORE, 
                               (SELECT SRC2.TIPO_RECURSO||'@'||SRC2.DESCRIPCION_RECURSO
                                    FROM DB_COMERCIAL.INFO_SERVICIO_RECURSO_DET SRD2
                                    JOIN DB_COMERCIAL.INFO_SERVICIO_RECURSO_CAB SRC2
                                    ON SRD2.SERVICIO_RECURSO_CAB_ID = SRC2.ID_SERVICIO_RECURSO_CAB
                                WHERE SRC2.TIPO_RECURSO NOT IN ('DISCO', 'TIPO ALQUILER SERVIDOR')
                                AND SRD2.ELEMENTO_ID = SRD.ELEMENTO_ID
                                AND   SRC2.ESTADO      = 'Activo'
                                AND   SRD2.ESTADO      = 'Activo')LICENCIAMIENTO
                        FROM DB_COMERCIAL.INFO_SERVICIO_RECURSO_CAB SRC
                        JOIN DB_COMERCIAL.INFO_SERVICIO_RECURSO_DET SRD
                        ON SRD.SERVICIO_RECURSO_CAB_ID = SRC.ID_SERVICIO_RECURSO_CAB
                        WHERE SRC.SERVICIO_ID = :servicio
                        AND   SRC.ESTADO      = 'Activo'
                        AND   SRD.ESTADO      = 'Activo'";

            $objNativeQuery->setParameter("servicio",     $arrayParametros['intIdServicio']);
            $objNativeQuery->setParameter("estado",      'Activo');
            
            $objResultSetMap->addScalarResult('ID_RECURSO',    'idRecurso',     'integer');
            $objResultSetMap->addScalarResult('RECURSO_PADRE', 'nombreRecurso', 'string');
            $objResultSetMap->addScalarResult('DISCO',         'storage',       'string');
            $objResultSetMap->addScalarResult('LICENCIAMIENTO','licenciamiento','string');
            $objResultSetMap->addScalarResult('DATASTORE',     'datastore',     'string');

            $objNativeQuery->setSQL($strSql);

            $arrayRespuesta = $objNativeQuery->getArrayResult();
        
        }
        catch(\Exception $e)
        {
            error_log('getArrayInformacionPoolAlquilerServidores -> '.$e->getMessage());
        }
        
        return $arrayRespuesta;
    }
    
    /**
     * 
     * Metodo encargado de devolver todos los servicios dado un numero de solucion y una sub clasificacion de la misma
     * 
     * Costo: 21
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 08-03-2018
     *
     * Costo: 20
     * Costo: 30
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 - 04-07-2020   Se actualiza consulta en base a las nuevas estructuras.
     * 
     * @param type $intNumSolucion
     * @param type $strTipoSolucion
     * @return Array $arrayRespuesta [ objServicio ]
     */
    public function getArrayServiciosPorSolucionYTipoSolucion($intNumSolucion, $strTipoSolucion, $strTipoProducto = 'CORE')
    {
        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);

            if ($strTipoProducto == 'CORE')
            {
                $strQuery .= "SELECT ".
                               "ISE.* ".
                             "FROM ".
                               "DB_COMERCIAL.INFO_SOLUCION_CAB ISCAB, ".
                               "DB_COMERCIAL.INFO_SOLUCION_DET ISDET, ".
                               "DB_COMERCIAL.INFO_SERVICIO     ISE ".
                             "WHERE ".
                               "ISCAB.ID_SOLUCION_CAB     =  ISDET.SOLUCION_CAB_ID ".
                               "AND ISDET.SERVICIO_ID     =  ISE.ID_SERVICIO ".
                               "AND ISCAB.NUMERO_SOLUCION = :numeroSolucion ".
                               "AND ISDET.TIPO_SOLUCION   = :tipoSolucion ".
                               "AND ISCAB.ESTADO          = :estado ".
                               "AND ISDET.ESTADO          = :estado ";
            }
            else
            {
                $strQuery = "SELECT ".
                               "ISE.* ".
                            "FROM ".
                               "DB_COMERCIAL.INFO_SOLUCION_DET ISDET, ".
                               "DB_COMERCIAL.INFO_SERVICIO     ISE ".
                            "WHERE ".
                               "ISDET.SERVICIO_ID          =  ISE.ID_SERVICIO ".
                               "AND ISDET.ESTADO           = :estado ".
                               "AND ISDET.ES_PREFERENCIAL  = :esPreferencial ".
                               "AND ISDET.ID_SOLUCION_DET IN ( ".
                                 "SELECT ".
                                   "ISREF.SOLUCION_DET_ID_A ".
                                 "FROM ".
                                   "DB_COMERCIAL.INFO_SOLUCION_CAB        ISCAB, ".
                                   "DB_COMERCIAL.INFO_SOLUCION_DET        ISDET, ".
                                   "DB_COMERCIAL.INFO_SOLUCION_REFERENCIA ISREF, ".
                                   "DB_COMERCIAL.INFO_SERVICIO            ISE ".
                                 "WHERE ".
                                   "ISCAB.ID_SOLUCION_CAB     =  ISDET.SOLUCION_CAB_ID ".
                                   "AND ISDET.ID_SOLUCION_DET =  ISREF.SOLUCION_DET_ID_B ".
                                   "AND ISDET.SERVICIO_ID     =  ISE.ID_SERVICIO ".
                                   "AND ISCAB.NUMERO_SOLUCION = :numeroSolucion ".
                                   "AND ISDET.TIPO_SOLUCION   = :tipoSolucion ".
                                   "AND ISCAB.ESTADO          = :estado ".
                                   "AND ISDET.ESTADO          = :estado ".
                                   "AND ISREF.ESTADO          = :estado ".
                               ")";

                $objNativeQuery->setParameter("esPreferencial" , "SI");
            }

            $objNativeQuery->setParameter("tipoSolucion"   , $strTipoSolucion);
            $objNativeQuery->setParameter("numeroSolucion" , $intNumSolucion);
            $objNativeQuery->setParameter("estado",         'Activo');

            $objResultSetMap->addRootEntityFromClassMetadata('\telconet\schemaBundle\Entity\InfoServicio', 'objServicio');
            $objNativeQuery->setSQL($strQuery);
            $arrayRespuesta = $objNativeQuery->getResult();
        }
        catch(\Exception $e)
        {
            error_log('getArrayServiciosPorSolucionYTipoSolucion -> '.$e->getMessage());
        }
        return $arrayRespuesta;
    }

    /**
     * Metodo encargado de obtener el detalle de producto, servicio ligados a un numero de solucion para visualizacion de edicion
     * 
     * Costo: 18
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 12-03-2018
     * 
     * @param type $intNumeroSolucion
     * @return type
     */
    public function getArrayDetalleProductosPorSolucion($intNumeroSolucion)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
        $arrayRespuesta  = array();
        
        try
        {
            $strSql = "
                        SELECT 
                            S.ID_SERVICIO,
                            P.ID_PRODUCTO,
                            P.DESCRIPCION_PRODUCTO,
                            S.PRECIO_VENTA,
                            S.ESTADO,
                            DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(S.ID_SERVICIO,:caracteristicaTipo) TIPO_SOLUCION,
                            NVL((DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(S.ID_SERVICIO,:preferencial)),'N') ES_PREFERENCIAL,
                            (SELECT 
                                DET.VALOR3
                              FROM 
                                DB_GENERAL.ADMI_PARAMETRO_CAB CAB,
                                DB_GENERAL.ADMI_PARAMETRO_DET DET
                              WHERE CAB.NOMBRE_PARAMETRO = :parametro
                              AND CAB.ID_PARAMETRO       = DET.PARAMETRO_ID
                              AND DET.VALOR1             = DB_COMERCIAL.TECNK_SERVICIOS.
                                                           GET_VALOR_SERVICIO_PROD_CARACT(S.ID_SERVICIO,:caracteristicaTipo)
                              AND DET.ESTADO             IN (:estado)) SEGMENTO,
                              (SELECT
                                CASE
                                  WHEN APC.ID_PRODUCTO_CARACTERISITICA IS NULL
                                  THEN 'N'
                                  ELSE 'S'
                                END CONTIENE
                              FROM ADMI_PRODUCTO_CARACTERISTICA APC,
                                ADMI_CARACTERISTICA AC
                              WHERE APC.PRODUCTO_ID             = P.ID_PRODUCTO
                              AND APC.CARACTERISTICA_ID         = AC.ID_CARACTERISTICA
                              AND AC.DESCRIPCION_CARACTERISTICA IN (:caracteristicas)) CONTIENE_CARACTERISTICA,
                              (SELECT 
                                DETALLE.ID_DETALLE_SOLICITUD
                              FROM
                                DB_COMERCIAL.INFO_DETALLE_SOLICITUD DETALLE,
                                DB_COMERCIAL.ADMI_TIPO_SOLICITUD    TIPO
                              WHERE DETALLE.TIPO_SOLICITUD_ID = TIPO.ID_TIPO_SOLICITUD
                              AND TIPO.DESCRIPCION_SOLICITUD  = :solicitud
                              AND DETALLE.ESTADO             <> :estadoEliminado
                              AND DETALLE.SERVICIO_ID         = S.ID_SERVICIO
                              AND ROWNUM                      = 1) SOLICITUD_INFO_TECNICA,
                              DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(S.ID_SERVICIO,:caracteristicaSubtipo) CORES_REFERENTES
                          FROM 
                            DB_COMERCIAL.ADMI_PRODUCTO P,
                            DB_COMERCIAL.INFO_SERVICIO S,
                            DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SPC,
                            DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC,
                            DB_COMERCIAL.ADMI_CARACTERISTICA C
                          WHERE S.PRODUCTO_ID                 = P.ID_PRODUCTO
                          AND S.ID_SERVICIO                   = SPC.SERVICIO_ID
                          AND SPC.PRODUCTO_CARACTERISITICA_ID = APC.ID_PRODUCTO_CARACTERISITICA
                          AND APC.CARACTERISTICA_ID           = C.ID_CARACTERISTICA
                          AND C.DESCRIPCION_CARACTERISTICA    = :caracteristica
                          AND SPC.ESTADO                      IN (:estado)
                          AND SPC.VALOR                       = :solucion
                          ORDER BY TIPO_SOLUCION
                        ";

            $objNativeQuery->setParameter("solucion",            $intNumeroSolucion);
            $objNativeQuery->setParameter("caracteristica",      'SECUENCIAL_GRUPO');
            $objNativeQuery->setParameter("caracteristicaTipo",  'SUBTIPO_SOLUCION');
            $objNativeQuery->setParameter("parametro",           'GRUPO PRODUCTOS CON SUB TIPO SOLUCION');
            $objNativeQuery->setParameter("preferencial",        'PRODUCTO_PREFERENCIAL_GRUPO');
            $objNativeQuery->setParameter("caracteristicas",     array('REQUERIDO_HOUSING','ES_LICENCIAMIENTO_SO'));
            $objNativeQuery->setParameter("estado",              array('Activo','Anulado'));
            $objNativeQuery->setParameter("estadoEliminado",     'Eliminada');
            $objNativeQuery->setParameter("solicitud",           'SOLICITUD INFO TECNICA');
            $objNativeQuery->setParameter("caracteristicaSubtipo",'SUBTIPOS_CORE_CONFIGURADOS');
            
            $objResultSetMap->addScalarResult('ID_SERVICIO',          'idServicio',    'integer');
            $objResultSetMap->addScalarResult('ID_PRODUCTO',          'idProducto',    'integer');
            $objResultSetMap->addScalarResult('DESCRIPCION_PRODUCTO', 'descripcion',   'string');
            $objResultSetMap->addScalarResult('PRECIO_VENTA',         'precio',        'string');
            $objResultSetMap->addScalarResult('ESTADO',               'estado',        'string');
            $objResultSetMap->addScalarResult('TIPO_SOLUCION',        'tipoSolucion',  'string');
            $objResultSetMap->addScalarResult('SEGMENTO',             'segmento',      'string');            
            $objResultSetMap->addScalarResult('CONTIENE_CARACTERISTICA','contieneCarcateristica','string');
            $objResultSetMap->addScalarResult('ES_PREFERENCIAL',      'esPreferencial','string');
            $objResultSetMap->addScalarResult('SOLICITUD_INFO_TECNICA','solicitud',    'string');
            $objResultSetMap->addScalarResult('CORES_REFERENTES',      'coresReferentes','string');

            $objNativeQuery->setSQL($strSql);

            $arrayRespuesta = $objNativeQuery->getArrayResult();
        }
        catch(\Exception $e)
        {
            error_log('getArrayInformacionPoolAlquilerServidores -> '.$e->getMessage());
        }
        
        return $arrayRespuesta;
    }
    
    /**
     * Metodo encargado de obtener la informacion guardada en un Servicio para poder ser editada
     * 
     * Costo: 3
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 20-03-2018
     */
    public function getArrayInformacionServicioSolucion($intIdServicio)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
        $arrayRespuesta  = array();
        
        try
        {
            $strSql = "
                        SELECT 
                            SERVICIO.ID_SERVICIO,
                            SERVICIO.PRODUCTO_ID,
                            SERVICIO.DESCRIPCION_PRESENTA_FACTURA,
                            SERVICIO.FRECUENCIA_PRODUCTO,
                            SERVICIO.PRECIO_FORMULA,
                            SERVICIO.CANTIDAD,
                            SERVICIO.PRECIO_VENTA,
                            SERVICIO.PRECIO_INSTALACION,
                            (SELECT 
                               COMISION.PERSONA_EMPRESA_ROL_ID||'-'||COMISION.COMISION_DET_ID
                            FROM 
                              DB_COMERCIAL.INFO_SERVICIO_COMISION COMISION,
                              DB_COMERCIAL.ADMI_COMISION_DET COMISION_DET,
                              DB_GENERAL.ADMI_PARAMETRO_DET DET
                            WHERE 
                                  COMISION.SERVICIO_ID        = SERVICIO.ID_SERVICIO
                            AND COMISION.COMISION_DET_ID      = COMISION_DET.ID_COMISION_DET
                            AND COMISION_DET.PARAMETRO_DET_ID = DET.ID_PARAMETRO_DET
                            AND DET.DESCRIPCION               = :esGerente
                            AND DET.ESTADO                    = :estado
                            AND COMISION.ESTADO               = :estado
                            ) GERENTE_PRODUCTO,
                            (SELECT 
                               COMISION.PERSONA_EMPRESA_ROL_ID||'-'||COMISION.COMISION_DET_ID
                            FROM 
                              DB_COMERCIAL.INFO_SERVICIO_COMISION COMISION,
                              DB_COMERCIAL.ADMI_COMISION_DET COMISION_DET,
                              DB_GENERAL.ADMI_PARAMETRO_DET DET
                            WHERE 
                                  COMISION.SERVICIO_ID        = SERVICIO.ID_SERVICIO
                            AND COMISION.COMISION_DET_ID      = COMISION_DET.ID_COMISION_DET
                            AND COMISION_DET.PARAMETRO_DET_ID = DET.ID_PARAMETRO_DET
                            AND DET.DESCRIPCION               = :esVendedor
                            AND DET.ESTADO                    = :estado
                            AND COMISION.ESTADO               = :estado
                            ) VENDEDOR,
                            NVL(
                            (SELECT 'S'
                            FROM 
                              DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PROD_CARACT,
                              DB_COMERCIAL.ADMI_CARACTERISTICA CARACT
                            WHERE 
                                  PROD_CARACT.PRODUCTO_ID         = SERVICIO.PRODUCTO_ID
                            AND PROD_CARACT.CARACTERISTICA_ID     = CARACT.ID_CARACTERISTICA
                            AND CARACT.DESCRIPCION_CARACTERISTICA = :caractEsMultiple
                            AND PROD_CARACT.ESTADO                = :estado
                            AND CARACT.ESTADO                     = :estado
                            ),'N') ES_MULTIPLE_CARACTERISTICA,
                            (SELECT 
                               SOL.ID_DETALLE_SOLICITUD
                            FROM 
                              DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOL,
                              DB_COMERCIAL.ADMI_TIPO_SOLICITUD TIPO
                            WHERE 
                                  SOL.SERVICIO_ID          = SERVICIO.ID_SERVICIO
                            AND SOL.TIPO_SOLICITUD_ID      = TIPO.ID_TIPO_SOLICITUD
                            AND TIPO.DESCRIPCION_SOLICITUD = :solicitud
                            AND SOL.ESTADO                 = :estadoDscto
                            AND ROWNUM                     = 1
                            ) ID_SOLICITUD_DESCUENTO,
                            
                            NVL((SELECT 
                                SOLC.VALOR
                              FROM
                                DB_COMERCIAL.INFO_DETALLE_SOL_CARACT SOLC,
                                DB_COMERCIAL.ADMI_CARACTERISTICA CAC
                              WHERE
                                SOLC.DETALLE_SOLICITUD_ID = 
                              (SELECT 
                               SOL.ID_DETALLE_SOLICITUD
                            FROM 
                              DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOL,
                              DB_COMERCIAL.ADMI_TIPO_SOLICITUD TIPO
                            WHERE 
                                  SOL.SERVICIO_ID          = SERVICIO.ID_SERVICIO
                            AND SOL.TIPO_SOLICITUD_ID      = TIPO.ID_TIPO_SOLICITUD
                            AND TIPO.DESCRIPCION_SOLICITUD = :solicitud
                            AND SOL.ESTADO                 = :estadoDscto
                            AND ROWNUM                     = 1)
                              AND
                              SOLC.CARACTERISTICA_ID         = CAC.ID_CARACTERISTICA AND
                              CAC.DESCRIPCION_CARACTERISTICA = :solDscto AND
                              SOLC.ESTADO                    = :estadoDscto
                              ),0) VALOR_DESCUENTO,

                            (SELECT 
                                TEC.ULTIMA_MILLA_ID
                             FROM 
                               DB_COMERCIAL.INFO_SERVICIO_TECNICO TEC
                             WHERE 
                                   TEC.SERVICIO_ID          = SERVICIO.ID_SERVICIO  
                             ) ULTIMA_MILLA_ID,
                             
                              NVL((SELECT 'P'
                                FROM 
                                  DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PROD_CARACT,
                                  DB_COMERCIAL.ADMI_CARACTERISTICA CARACT
                                WHERE 
                                      PROD_CARACT.PRODUCTO_ID         = SERVICIO.PRODUCTO_ID
                                AND PROD_CARACT.CARACTERISTICA_ID     = CARACT.ID_CARACTERISTICA
                                AND CARACT.DESCRIPCION_CARACTERISTICA = :caractEsPreferente
                                AND PROD_CARACT.ESTADO                = :estado
                                AND CARACT.ESTADO                     = :estado
                                ),'N') ES_PREFERENCIAL
                          FROM 
                            DB_COMERCIAL.INFO_SERVICIO SERVICIO
                          WHERE 
                            SERVICIO.ID_SERVICIO = :servicio
                        ";

            $objNativeQuery->setParameter("servicio",            $intIdServicio);
            $objNativeQuery->setParameter("estado",              'Activo');
            $objNativeQuery->setParameter("estadoDscto",         'Pendiente');
            $objNativeQuery->setParameter("solicitud",           'SOLICITUD DESCUENTO');
            $objNativeQuery->setParameter("caractEsMultiple",    'ES_MULTIPLE_CARACTERISTICAS');
            $objNativeQuery->setParameter("esVendedor",          'VENDEDOR');
            $objNativeQuery->setParameter("esGerente",           'GERENTE DE PRODUCTO');
            $objNativeQuery->setParameter("solDscto",            'DESCUENTO UNITARIO FACT');
            $objNativeQuery->setParameter("caractEsPreferente",  'PRODUCTO_PREFERENCIAL_GRUPO');
            
            $objResultSetMap->addScalarResult('ID_SERVICIO',                  'idServicio',    'integer');
            $objResultSetMap->addScalarResult('PRODUCTO_ID',                  'idProducto',    'integer');
            $objResultSetMap->addScalarResult('DESCRIPCION_PRESENTA_FACTURA', 'descripcion',   'string');
            $objResultSetMap->addScalarResult('CANTIDAD',                     'cantidad',      'integer');
            $objResultSetMap->addScalarResult('FRECUENCIA_PRODUCTO',          'frecuencia',    'integer');
            $objResultSetMap->addScalarResult('PRECIO_FORMULA',               'precioFormula', 'float');
            $objResultSetMap->addScalarResult('PRECIO_FORMULA',               'precioFormula', 'float');
            $objResultSetMap->addScalarResult('PRECIO_VENTA',                 'precioVenta',   'float');
            $objResultSetMap->addScalarResult('PRECIO_INSTALACION',           'precioInstalacion', 'float');            
            $objResultSetMap->addScalarResult('GERENTE_PRODUCTO',             'gerente',           'string');
            $objResultSetMap->addScalarResult('VENDEDOR',                     'vendedor',          'string');
            $objResultSetMap->addScalarResult('ULTIMA_MILLA_ID',              'ultimaMilla',       'integer');
            $objResultSetMap->addScalarResult('ES_MULTIPLE_CARACTERISTICA',   'esMultipleCaracteristica',    'string');
            $objResultSetMap->addScalarResult('ID_SOLICITUD_DESCUENTO',       'idSolicitud',                 'integer');
            $objResultSetMap->addScalarResult('VALOR_DESCUENTO',              'descuento',          'float');
            $objResultSetMap->addScalarResult('ES_PREFERENCIAL',              'esPreferencial',     'string');

            $objNativeQuery->setSQL($strSql);

            $arrayRespuesta = $objNativeQuery->getArrayResult();
        }
        catch(\Exception $e)
        {
            error_log('getArrayInformacionServicioSolucion -> '.$e->getMessage());
        }
        
        return $arrayRespuesta;
    }

    /**
     * Metodo encargado de obtener la informacion de caracteristicas generadas y guardadas por cada servicio
     *
     * Costo: 8
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 20-03-2018
     *
     * Costo: 11
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 - 01-06-2020 - En caso que sea licenciamiento, se devuelve el id de la maquina asociada.
     *
     * Costo: 2/11
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 - 21-07-2020 - Se modifica el método para obtener un array como parámetro.
     *                           - Se aplica los estandares de calidad.
     *                           - Se crea un nuevo query en caso que el servicio exista en las tabla de recurso de solución.
     */
    public function getArrayCaracteristicasPorServicioSolucion($arrayParametros)
    {
        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);

            if ($arrayParametros['existeRecurso'])
            {
                $strSql = "SELECT ".
                            "SRC.ID_SERVICIO_RECURSO_CAB AS ID, ".
                            "ISE.ID_SERVICIO             AS ID_SERVICIO, ".
                            "SRC.TIPO_RECURSO            AS DESCRIPCION, ".
                            "SRC.DESCRIPCION_RECURSO     AS VALOR, ".
                            "SRC.CANTIDAD                AS VALOR_CARACT, ".
                            "NVL( ".
                              "(SELECT ".
                                 "ADC.TIPO_INGRESO ".
                               "FROM ".
                                 "DB_COMERCIAL.ADMI_PRODUCTO                APR, ".
                                 "DB_COMERCIAL.ADMI_CARACTERISTICA          ADC, ".
                                 "DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC ".
                               "WHERE ".
                                 "ADC.DESCRIPCION_CARACTERISTICA = SRC.TIPO_RECURSO ".
                                 "AND APC.CARACTERISTICA_ID = ADC.ID_CARACTERISTICA ".
                                 "AND ISE.PRODUCTO_ID =  APR.ID_PRODUCTO ".
                                 "AND APC.PRODUCTO_ID =  APR.ID_PRODUCTO ".
                                 "AND ADC.ESTADO      = :strEstado ".
                            "),'N') AS TIPO_INGRESO ".
                          "FROM ".
                            "DB_COMERCIAL.INFO_SERVICIO_RECURSO_CAB SRC, ".
                            "DB_COMERCIAL.INFO_SERVICIO             ISE ".
                          "WHERE ".
                            "ISE.ID_SERVICIO     =  SRC.SERVICIO_ID ".
                            "AND ISE.ID_SERVICIO = :intIdServicio ".
                            "AND SRC.ESTADO      = :strEstado ".
                          "ORDER BY SRC.TIPO_RECURSO DESC, SRC.DESCRIPCION_RECURSO ASC ";
            }
            else
            {
                $strSql = "SELECT ".
                            "ISEPROCAR.ID_SERVICIO_PROD_CARACT AS ID, ".
                            "ISE.ID_SERVICIO                   AS ID_SERVICIO, ".
                            "ADCA.DESCRIPCION_CARACTERISTICA   AS DESCRIPCION, ".
                            "ISEPROCAR.VALOR                   AS VALOR, ".
                            "( ".
                              "SELECT ".
                                "ISPC.VALOR ".
                              "FROM ".
                                "DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT    ISPC, ".
                                "DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC, ".
                                "DB_COMERCIAL.ADMI_CARACTERISTICA          AC ".
                              "WHERE ".
                                "ISPC.SERVICIO_ID                     = ISE.ID_SERVICIO ".
                                "AND ISPC.REF_SERVICIO_PROD_CARACT_ID = ISEPROCAR.ID_SERVICIO_PROD_CARACT ".
                                "AND ISPC.PRODUCTO_CARACTERISITICA_ID = APC.ID_PRODUCTO_CARACTERISITICA ".
                                "AND APC.CARACTERISTICA_ID            = AC.ID_CARACTERISTICA ".
                                "AND AC.DESCRIPCION_CARACTERISTICA    = ADCA.DESCRIPCION_CARACTERISTICA ".
                                "AND ISPC.ESTADO                      = :strEstado ".
                            ") VALOR_CARACT, ".
                            "ADCA.TIPO_INGRESO AS TIPO_INGRESO ".
                          "FROM ".
                            "DB_COMERCIAL.INFO_SERVICIO                ISE, ".
                            "DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT    ISEPROCAR, ".
                            "DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APCA, ".
                            "DB_COMERCIAL.ADMI_CARACTERISTICA          ADCA ".
                          "WHERE ".
                            "ISE.ID_SERVICIO                       =  ISEPROCAR.SERVICIO_ID ".
                            "AND APCA.ID_PRODUCTO_CARACTERISITICA  =  ISEPROCAR.PRODUCTO_CARACTERISITICA_ID ".
                            "AND APCA.PRODUCTO_ID                  =  ISE.PRODUCTO_ID ".
                            "AND APCA.CARACTERISTICA_ID            =  ADCA.ID_CARACTERISTICA ".
                            "AND ISE.ID_SERVICIO                   = :intIdServicio ".
                            "AND ISEPROCAR.ESTADO                  = :strEstado ".
                            "AND ADCA.ESTADO                       = :strEstado ".
                            "AND APCA.VISIBLE_COMERCIAL            = :strVisible";

                $objNativeQuery->setParameter("strVisible", 'SI');
            }

            $objNativeQuery->setParameter("intIdServicio" , $arrayParametros['intIdServicio']);
            $objNativeQuery->setParameter("strEstado"     , $arrayParametros['strEstado']);

            $objResultSetMap->addScalarResult('ID'           , 'id'          , 'integer');
            $objResultSetMap->addScalarResult('ID_SERVICIO'  , 'idServicio'  , 'integer');
            $objResultSetMap->addScalarResult('DESCRIPCION'  , 'descripcion' , 'string');
            $objResultSetMap->addScalarResult('VALOR'        , 'valor'       , 'string');
            $objResultSetMap->addScalarResult('VALOR_CARACT' , 'valorCaract' , 'string');
            $objResultSetMap->addScalarResult('TIPO_INGRESO' , 'tipoIngreso' , 'string');

            $objNativeQuery->setSQL($strSql);
            $arrayRespuesta = array("status" => true, "data" => $objNativeQuery->getArrayResult());
        }
        catch(\Exception $objException)
        {
            $arrayRespuesta = array("status" => false, "message" => $objException->getMessage());
        }
        return $arrayRespuesta;
    }

    /**
     * Metodo encargado para asignar un secuencial de virtual connect para configuracion de clientes L2
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 10-05-2018
     * 
     * @return String $strRegion
     * @throws Array $arrayRespuesta [ secuencia ]
     */
    public function getSecuenciaVirtualConnect()
    { 
        $objRsm   = new ResultSetMappingBuilder($this->_em);	      
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $arrayRespuesta = array();
        
        try
        {        
            $strSelect = "SELECT DB_COMERCIAL.SEQ_VIRTUAL_CONNECT.NEXTVAL SECUENCIA FROM DUAL";

            $objRsm->addScalarResult('SECUENCIA', 'secuencia','integer');

            $objQuery->setSQL($strSelect);
            
            $arrayRespuesta = $objQuery->getOneOrNullResult();        
        }
        catch(\Exception $e)
        {
            throw($e);
        }
        
        return $arrayRespuesta;
    }
    
    /**
     * Metodo encargado de obtener cuantos servicios estan configurados con un mismo VC en la region del punto
     * 
     * Costo: 320
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 11-05-2018
     */
    public function getContVirtualConnect($intVirtualConnect)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
        $arrayRespuesta  = array();
        
        try
        {
            $strSql = "
                        SELECT 
                            COUNT(*) CONT
                          FROM 
                            DB_COMERCIAL.INFO_SERVICIO                SERVICIO,
                            DB_COMERCIAL.ADMI_PRODUCTO                PRODUCTO,
                            DB_COMERCIAL.INFO_PUNTO                   PUNTO,                            
                            DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT    SERVICIO_PROD_CARACT,
                            DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PROD_CARACT,
                            DB_COMERCIAL.ADMI_CARACTERISTICA          CARACT
                          WHERE 
                                SERVICIO.PUNTO_ID                              = PUNTO.ID_PUNTO                         
                          AND SERVICIO.ID_SERVICIO                             = SERVICIO_PROD_CARACT.SERVICIO_ID
                          AND SERVICIO_PROD_CARACT.PRODUCTO_CARACTERISITICA_ID = PROD_CARACT.ID_PRODUCTO_CARACTERISITICA
                          AND PROD_CARACT.CARACTERISTICA_ID                    = CARACT.ID_CARACTERISTICA
                          AND SERVICIO.PRODUCTO_ID                             = PRODUCTO.ID_PRODUCTO
                          AND SERVICIO_PROD_CARACT.VALOR                       = :valor
                          AND PRODUCTO.NOMBRE_TECNICO                          = :producto
                          AND PRODUCTO.ESTADO                                  = :estado
                          AND SERVICIO.ESTADO                                  IN (:estadosServicio)
                          AND CARACT.DESCRIPCION_CARACTERISTICA                = :caracteristica
                          AND SERVICIO_PROD_CARACT.ESTADO                      = :estado
                        ";
            
            $objNativeQuery->setParameter("valor",               $intVirtualConnect);
            $objNativeQuery->setParameter("producto",            'L2MPLS');
            $objNativeQuery->setParameter("estado",              'Activo');
            $objNativeQuery->setParameter("estadosServicio",      array('Activo','In-Corte','EnPruebas','Asignada'));
            $objNativeQuery->setParameter("caracteristica",      'VIRTUAL_CONNECT');            
            
            $objResultSetMap->addScalarResult('CONT',     'cont',  'integer');

            $objNativeQuery->setSQL($strSql);

            $arrayRespuesta = $objNativeQuery->getOneOrNullResult();
        }
        catch(\Exception $e)
        {
            error_log('getContVirtualConnect -> '.$e->getMessage());
        }
        
        return $arrayRespuesta;
    }
    
    /**
     * 
     * Metodo encargado de realizar la consulta de la informacion tecnica relacionada al extremo L3 ligado a un L2MPLS ( tunel )
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 21-05-2018
     * 
     * Costo 12
     * 
     * @param  integer $intIdInterface
     * @return Object InfoServicioTecnico
     */
    public function getDataTecnicaExtremoPorInterfazL2($intIdInterface)
    {
        $objResultSetMap = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
        $arrayRespuesta  = array();
        
        try
        {
            $strSql = "
                        SELECT 
                            IST.*
                          FROM 
                            DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISPC,
                            DB_COMERCIAL.INFO_SERVICIO S,
                            DB_COMERCIAL.INFO_SERVICIO_TECNICO IST,
                            DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC,
                            DB_COMERCIAL.ADMI_CARACTERISTICA AC
                          WHERE ISPC.VALOR                     = TO_CHAR(:idInterfaz)
                          AND ISPC.PRODUCTO_CARACTERISITICA_ID = APC.ID_PRODUCTO_CARACTERISITICA
                          AND APC.CARACTERISTICA_ID            = AC.ID_CARACTERISTICA
                          AND AC.DESCRIPCION_CARACTERISTICA    = :caracteristica
                          AND ISPC.SERVICIO_ID                 = S.ID_SERVICIO
                          AND S.ID_SERVICIO                    = IST.SERVICIO_ID
                          AND ISPC.ESTADO                      = :estado
                        ";
            
            $objNativeQuery->setParameter("idInterfaz",           $intIdInterface);
            $objNativeQuery->setParameter("caracteristica",      'INTERFACE_L2');
            $objNativeQuery->setParameter("estado",              'Activo');
            
            $objResultSetMap->addRootEntityFromClassMetadata('\telconet\schemaBundle\Entity\InfoServicioTecnico', 'servicioTecnico');

            $objNativeQuery->setSQL($strSql);

            $arrayRespuesta = $objNativeQuery->getOneOrNullResult();
        }
        catch(\Exception $e)
        {
            error_log('getDataTecnicaExtremoPorInterfazL2 -> '.$e->getMessage());
        }
        
        return $arrayRespuesta;
    }


    /**
     * getJSONDetallesParametroGeneral
     *
     * Método que consulta los valores de los detalles con su respectivo id de un determinado parámetro                              
     *
     * @param string $strNombreParametro
     * @param string $strValor1
     * 
     * @return array $datos
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 08-07-2016
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 08-12-2016 Se agrega el VALOR2 al arreglo obtenido
     * 
     */
    public function getJSONDetallesParametroGeneral($strNombreParametro, $strValor1,$strValor2)
    {
        $arrayEncontrados       = array();
        $arrayResultado         = $this->getResultadoDetallesParametro($strNombreParametro, $strValor1,$strValor2);
        $arrayAdmiParametrosDet = $arrayResultado['registros'];
        $intTotal               = $arrayResultado['total'];

        if( $arrayAdmiParametrosDet )
        {
            foreach( $arrayAdmiParametrosDet as $arrayParametroDet )
            {
                $arrayItem  = array();
                $arrayItem["idParametroDet"]    = $arrayParametroDet["id"];
                $arrayItem["valor1"]            = $arrayParametroDet["valor1"];
                $arrayItem["valor2"]            = $arrayParametroDet["valor2"];
                $arrayEncontrados[] = $arrayItem;
            }//foreach( $arrayAdmiParametrosDet as $objParametroDet )
        }//( $arrayAdmiParametrosDet )

        $arrayRespuesta = array('total' => $intTotal, 'encontrados' => $arrayEncontrados);
        $objJsonData    = json_encode($arrayRespuesta);
        return $objJsonData;
    } 
    
    /**
     *
     * Método que devuelve los servicios por estado del Dashboard según los parámetros asignados
     *
     * @author Nestor Naula Lopez <nnaulal@telconet.ec>
     * @version 1.0
     * @since 19-04-2018
     *
     * Costo 4
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.1 - 07/07/2020 - Se solicita cambiar el estado En Corte por Suspendido.
     * @param Array $arrayParametros [
     *                                intIdElemento,
     *                                strTipoElemento,
     *                                strEstado,
     *                                strDias
     *                               ]
     * @return Array $arrayResultado
     */
    public function getServicioClientePorEstado($arrayParametros)
    {
        $arrayEstadosServiciosCliente = array();
        $objRsmServicios              = new ResultSetMappingBuilder($this->_em);
        $objQueryServicios            = $this->_em->createNativeQuery(null, $objRsmServicios);

        $strWhereServicios            = "";
        $strSqlServicios              =  " SELECT ISH.ESTADO,
                                                COUNT(ISH.ESTADO) AS COUNTESTADO
                                              FROM
                                                (SELECT DISTINCT MAX(ISH.ID_SERVICIO_HISTORIAL) AS ID_SERVICIO_HISTORIAL,
                                                  IE.ID_SERVICIO,
                                                  IE.PUNTO_ID
                                                FROM DB_COMERCIAL.INFO_SERVICIO_HISTORIAL ISH
                                                INNER JOIN DB_COMERCIAL.INFO_SERVICIO IE
                                                ON ISH.SERVICIO_ID=IE.ID_SERVICIO
                                                INNER JOIN DB_COMERCIAL.INFO_PUNTO IPU
                                                ON IPU.ID_PUNTO= IE.PUNTO_ID
                                                INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER
                                                ON IPER.ID_PERSONA_ROL= IPU.PERSONA_EMPRESA_ROL_ID
                                                INNER JOIN DB_COMERCIAL.INFO_PERSONA IP
                                                ON IP.ID_PERSONA = IPER.PERSONA_ID
                                                WHERE";
        if(isset($arrayParametros["intIdPersona"]) && $arrayParametros["intIdPersona"] > 0)
        {
            $strWhereServicios .= " IP.ID_PERSONA = :intIdPersona ";
            $objQueryServicios->setParameter("intIdPersona", $arrayParametros["intIdPersona"]);
        }
        $strWhereServicios .= "  GROUP BY IE.ID_SERVICIO,IE.PUNTO_ID
                                ORDER BY IE.ID_SERVICIO
                                ) T1
                            INNER JOIN DB_COMERCIAL.INFO_SERVICIO_HISTORIAL ISH ON ISH.ID_SERVICIO_HISTORIAL= T1.ID_SERVICIO_HISTORIAL
                            GROUP BY ISH.ESTADO ORDER BY ISH.ESTADO ASC";

        $strSqlServicios .= $strWhereServicios;
        $objRsmServicios->addScalarResult('COUNTESTADO', 'conteoServicios', 'string');
        $objRsmServicios->addScalarResult('ESTADO', 'estadoServicios', 'string');

        $objQueryServicios->setSQL($strSqlServicios);

        $arrayResultadoServicios = $objQueryServicios->getArrayResult();

        $intConteoEstadoPendiente   =0;
        $intConteoEstadoPlanificada =0;
        $intConteoEstadoActivo      =0;
        $intConteoEstadoCancelado   =0;
        $intConteoEnCorte           =0;

        foreach ($arrayResultadoServicios as &$objResultadoServicios) 
        {
            $strEstadoServicio           = $objResultadoServicios["estadoServicios"];
            $booleanActivo               = strpos(strtoupper($strEstadoServicio), 'ACTIVO');
            $booleanPlanificada          = strpos(strtoupper($strEstadoServicio), 'ASIGNA');
            $booleanCancelado            = strpos(strtoupper($strEstadoServicio), 'CANCEL');
            $booleanEnPrueba             = strpos(strtoupper($strEstadoServicio), 'PRUEBAS');
            $booleanEnCorte              = strpos(strtoupper($strEstadoServicio), 'IN-CORTE');
            $booleanFactible             = strpos(strtoupper($strEstadoServicio), 'FACTIB');
            $booleanPendiente            = strpos(strtoupper($strEstadoServicio), 'PENDIENT');
            $booleanPlanificadaPendiente = strpos(strtoupper($strEstadoServicio), 'PLANIFICA');
            $booleanPreServicio          = strpos(strtoupper($strEstadoServicio), 'PRE-SERVICIO');

            if($booleanFactible !== false || $booleanPlanificadaPendiente !== false || $booleanPreServicio !== false || $booleanPendiente !== false)
            {
                $intConteoEstadoPendiente += $objResultadoServicios["conteoServicios"];
            }

            else if($booleanCancelado !== false)
            {
                $intConteoEstadoCancelado += $objResultadoServicios["conteoServicios"];
            }
            else if($booleanEnPrueba !== false || $booleanActivo !== false)
            {
                $intConteoEstadoActivo += $objResultadoServicios["conteoServicios"];
            }
            else if($booleanEnCorte !== false)
            {
                $intConteoEnCorte += $objResultadoServicios["conteoServicios"];
            }
            else if($booleanPlanificada !== false)
            {
                $intConteoEstadoPlanificada += $objResultadoServicios["conteoServicios"];
            }
        }

        $arrayEstadosServiciosCliente = array( 
                                                array("estadoServicios"  => "Activo",
                                                      "conteoServicios"  => $intConteoEstadoActivo),
                                                array("estadoServicios"  => "Planificada",
                                                      "conteoServicios"  => $intConteoEstadoPlanificada),
                                                array("estadoServicios"  => "Pendiente",
                                                      "conteoServicios"  => $intConteoEstadoPendiente),
                                                array("estadoServicios"  => "Cancelado",
                                                      "conteoServicios"  => $intConteoEstadoCancelado),
                                                array("estadoServicios"  => "Suspendidos",
                                                      "conteoServicios"  => $intConteoEnCorte));

        return $arrayEstadosServiciosCliente;
    }

    /**
     *
     * Método que devuelve los servicios de un punto
     *
     * @author Ronny Moran <rmoranc@telconet.ec>
     * @version 1.0
     * @since 29-05-2018
     *
     * Costo 7
     *
     * @param Array $arrayParametros [
     *                                intIdPunto
     *                               ]
     * @return Array $arrayResultado
     */
    public function getServicioPorPunto($arrayParametros)
    {
        $arrayResultado = array();
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);

        $strWhere       = "";
        $strSql         = "SELECT
                                NVL((SELECT INFPE.NOMBRES
                                    ||' '
                                    || INFPE.APELLIDOS AS ing_vip
                                  FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPERO,
                                    DB_COMERCIAL.INFO_PERSONA INFPE
                                  WHERE IPERO.ID_PERSONA_ROL =
                                    (SELECT IPERC.VALOR
                                    FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL_CARAC IPERC,
                                      DB_COMERCIAL.ADMI_CARACTERISTICA ADCAR
                                    WHERE IPERC.CARACTERISTICA_ID       = ADCAR.ID_CARACTERISTICA
                                    AND IPERC.PERSONA_EMPRESA_ROL_ID    = :personaEmpresaRolId_VIP
                                    AND ADCAR.DESCRIPCION_CARACTERISTICA= :descripcionCaracteristica_VIP
                                    AND ROWNUM < 2
                                    )
                                  AND IPERO.PERSONA_ID                = INFPE.ID_PERSONA
                                  ),' ') as NOMBRE_INGVIP,
                                  (SELECT IPFCO.VALOR        AS correo
                                  FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPERO,
                                    DB_COMERCIAL.INFO_PERSONA INFPE,
                                    DB_COMERCIAL.INFO_PERSONA_FORMA_CONTACTO IPFCO,
                                    DB_COMERCIAL.ADMI_FORMA_CONTACTO ADFC
                                  WHERE IPERO.ID_PERSONA_ROL =
                                    (SELECT IPERC.VALOR
                                    FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL_CARAC IPERC,
                                      DB_COMERCIAL.ADMI_CARACTERISTICA ADCAR
                                    WHERE IPERC.CARACTERISTICA_ID       = ADCAR.ID_CARACTERISTICA
                                    AND IPERC.PERSONA_EMPRESA_ROL_ID    = :personaEmpresaRolId
                                    AND ADCAR.DESCRIPCION_CARACTERISTICA= :descripcionCaracteristica
                                    AND ROWNUM < 2
                                    )
                                  AND IPERO.PERSONA_ID                = INFPE.ID_PERSONA
                                  AND IPFCO.PERSONA_ID                = INFPE.ID_PERSONA
                                  AND IPFCO.FORMA_CONTACTO_ID         = ADFC.ID_FORMA_CONTACTO
                                  AND ADFC.DESCRIPCION_FORMA_CONTACTO = :descripcionFormaContacto
                                  AND ROWNUM < 2
                                  ) as correo,
                                ADPRO.DESCRIPCION_PRODUCTO,
                                INSER.ESTADO,
                                INSER.FE_CREACION,
                                ADPRO.LINEA_NEGOCIO,
                                (SELECT INFPE.NOMBRES
                                  || ' '
                                  || INFPE.APELLIDOS
                                FROM DB_COMERCIAL.INFO_PERSONA INFPE
                                WHERE INFPE.LOGIN = INSER.USR_VENDEDOR
                                ) AS nombre_vendedor
                              FROM INFO_PUNTO INPUN,
                                INFO_SERVICIO INSER,
                                ADMI_PRODUCTO ADPRO
                              WHERE INPUN.ID_PUNTO  = INSER.PUNTO_ID
                              AND INSER.PRODUCTO_ID = ADPRO.ID_PRODUCTO
                              AND INSER.ESTADO      = :estado ";

        $objQuery->setParameter("personaEmpresaRolId", $arrayParametros["personaEmpresaRolId"]);
        $objQuery->setParameter("personaEmpresaRolId_VIP", $arrayParametros["personaEmpresaRolId"]);
        $objQuery->setParameter("descripcionCaracteristica", 'ID_VIP');
        $objQuery->setParameter("descripcionCaracteristica_VIP", 'ID_VIP');
        $objQuery->setParameter("descripcionFormaContacto", 'Correo Electronico');
        $objQuery->setParameter("estado", 'Activo');
        if(isset($arrayParametros["intIdPunto"]) && $arrayParametros["intIdPunto"] > 0)
        {
            $strWhere .= " AND INPUN.ID_PUNTO = :intIdPunto ORDER BY ADPRO.LINEA_NEGOCIO ";
            $objQuery->setParameter("intIdPunto", $arrayParametros["intIdPunto"]); 
        }

        $strSql .= $strWhere;

        $objRsm->addScalarResult('NOMBRE_INGVIP', 'ing_vip', 'string');
        $objRsm->addScalarResult('CORREO', 'correo', 'string');        
        $objRsm->addScalarResult('DESCRIPCION_PRODUCTO', 'nombre_producto', 'string');
        $objRsm->addScalarResult('ESTADO', 'estado', 'string');
        $objRsm->addScalarResult('FE_CREACION', 'fecha', 'string');
        $objRsm->addScalarResult('LINEA_NEGOCIO', 'linea_negocio', 'string');
        $objRsm->addScalarResult('NOMBRE_VENDEDOR', 'nombre_vendedor', 'string');
        $objQuery->setSQL($strSql);
        $arrayResultado = $objQuery->getArrayResult();

        return $arrayResultado;
    }

    /**
     * Documentación para el método 'hasServiciosByParametros'.
     * 
     * Método que verifica si existen servicios asociados a los valores enviados como parámetros.
     * 
     * @param  array  $arrayParametros    Array de parámetros a verificar.
     * 
     * @return array $arrayResultado array con bandera que indica si existen servicios asociados a los valores enviados como parámetros
     *                                y array de logines que cumplen los filtros enviados como parámetros.
     * 
     * @author  Edgar Holguín <eholguín@telconet.ec>
     * @version 1.0 17-12-2018
     * 
     * @author  Kevin Baque <kbaque@telconet.ec>
     * @version 1.1 30-01-2020 - Se agrega join con la InfoEmpresaRol para filtrar el cambio de razón social por empresa.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 16-11-2020 - Se modifica la consulta para agregar filtros necesarios para el cambio de razón social de servicios W+AP
     * 
     */
     public function hasServiciosByParametros($arrayParametros)
     {
        $arrayResultado                    = array();        
        $arrayResultado['arrayLogines']    = array();
        $arrayResultado['boolServiciosAT'] = false;
        try
        {
            $strSelect  = " SELECT  ipto.login ";
            $strFrom    = " FROM 
                                    schemaBundle:InfoServicio           iser,
                                    schemaBundle:InfoPunto              ipto,
                                    schemaBundle:InfoPersonaEmpresaRol  iper,
                                    schemaBundle:InfoEmpresaRol         ier ";
            $strWhere   = " WHERE 
                                    iser.puntoId             =   ipto.id           AND
                                    ier.id                   =   iper.empresaRolId AND
                                    ipto.personaEmpresaRolId =   iper.id           AND 
                                    iper.personaId           =   :intPersonaId     AND
                                    iper.estado              =   :strEstadoCliente AND 
                                    ier.empresaCod           =   :strEmpresaCod    AND 
                                    iser.estado              IN (:arrayEstadosServicios)  ";

            $objQuery = $this->_em->createQuery();
            $objQuery->setParameter('intPersonaId', $arrayParametros['intPersonaId']);        
            $objQuery->setParameter('strEstadoCliente', $arrayParametros['strEstadoCliente']);
            $objQuery->setParameter('arrayEstadosServicios',   array_values($arrayParametros['arrayEstadosServicios']));     
            $objQuery->setParameter('strEmpresaCod', $arrayParametros['strEmpresaCod']);
            
            if(isset($arrayParametros["buscarPlanesYProductos"]) && !empty($arrayParametros["buscarPlanesYProductos"]) 
                && $arrayParametros["buscarPlanesYProductos"] === "SI" 
                && isset($arrayParametros["arrayNombresTecnicosProdNotIn"]) && !empty($arrayParametros["arrayNombresTecnicosProdNotIn"]))
            {
                $strWhere   .= "    AND (   iser.planId IS NOT NULL 
                                            OR
                                            (
                                                iser.productoId IS NOT NULL 
                                                AND iser.productoId NOT IN 
                                                (   select producto.id
                                                    FROM schemaBundle:AdmiProducto producto
                                                    WHERE producto.nombreTecnico IN (:arrayNombresTecnicosProdNotIn)
                                                )
                                            )
                                        ) ";
                $objQuery->setParameter('arrayNombresTecnicosProdNotIn', array_values($arrayParametros['arrayNombresTecnicosProdNotIn']));
            }
            $strQuery = $strSelect . $strFrom . $strWhere;
            $objQuery->setDQL($strQuery);
            if(count($objQuery->getResult()) > 0)
            {
                $arrayResultado['arrayLogines']    = $objQuery->getResult();
                $arrayResultado['boolServiciosAT'] = true;  
            }
        }
        catch (\Exception $e)
        {
            error_log("No se ha podido obtener los servicios de la función hasServiciosByParametros ".$e->getMessage());
        }
        return $arrayResultado;
     }   

    /**
     *
     * Método que devuelve los servicios pendientes de instalación, o instalados y cancelados en el dia
     *
     * @author Edgar Pin Villavicencio <epin@telconet.ec>
     * @version 1.0
     * @since 08-01-2019
     *
     * @author Christian Jaramillo Espinoza <cjaramilloe@telconet.ec>
     * @version 1.1 Adición de la razón social y tipo tributario a la consulta
     * @since 17-07-2020 
     * Costo 229
     *
     * @param Array $arrayParametros [
     *                                strEmpresaCod
     *                                strUsuario
     *                               ]
     * @return Array $arrayResultado
     */
    public function getServicioPendientesInstalacion($arrayParametros)
    {   
        $strCodEmpresa = $arrayParametros['strCodEmpresa'];
        $strUsuario    = $arrayParametros['strUsuario'];
        $arrayResultado = array();
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);

        $strSql         = "SELECT PER.IDENTIFICACION_CLIENTE, PER.NOMBRES, PER.APELLIDOS, PER.RAZON_SOCIAL, PER.TIPO_TRIBUTARIO,
                                    CASE WHEN SER.PLAN_ID IS NULL THEN PRO.DESCRIPCION_PRODUCTO ELSE PLA.NOMBRE_PLAN END AS SERVICIO, 
                                    PUN.LOGIN, TO_CHAR(HIS.FE_INI_PLAN, 'DD/MM/YYYY') AS FE_INI_PLAN, 
                                    TO_CHAR(HIS.FE_FIN_PLAN, 'DD/MM/YYYY') AS FE_FIN_PLAN, SER.USR_CREACION, SER.ID_SERVICIO, SER.ESTADO,
                                    TO_CHAR(HIS.FE_INI_PLAN, 'HH24:MI') AS HO_INI_PLAN, TO_CHAR(HIS.FE_FIN_PLAN, 'HH24:MI') AS HO_FIN_PLAN, 
                                    CON.ORIGEN, SHI.OBSERVACION 
                             FROM DB_COMERCIAL.INFO_SERVICIO SER
                             LEFT OUTER JOIN DB_COMERCIAL.INFO_PLAN_CAB PLA
                               ON SER.PLAN_ID = PLA.ID_PLAN
                             LEFT OUTER JOIN DB_COMERCIAL.ADMI_PRODUCTO PRO
                               ON SER.PRODUCTO_ID = PRO.ID_PRODUCTO
                             LEFT OUTER JOIN DB_COMERCIAL.INFO_PUNTO PUN
                               ON SER.PUNTO_ID = PUN.ID_PUNTO
                             LEFT OUTER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL ERO
                               ON PUN.PERSONA_EMPRESA_ROL_ID = ERO.ID_PERSONA_ROL
                             LEFT OUTER JOIN DB_COMERCIAL.INFO_EMPRESA_ROL EMP
                               ON EMP.ID_EMPRESA_ROL = ERO.EMPRESA_ROL_ID
                             LEFT OUTER JOIN DB_COMERCIAL.INFO_PERSONA PER  
                               ON PER.ID_PERSONA = ERO.PERSONA_ID
                             LEFT OUTER JOIN DB_COMERCIAL.INFO_DETALLE_SOLICITUD DET
                               ON SER.ID_SERVICIO = DET.SERVICIO_ID
                              AND SER.ESTADO = DET.ESTADO  
                             LEFT OUTER JOIN DB_COMERCIAL.INFO_DETALLE_SOL_HIST HIS
                               ON DET.ID_DETALLE_SOLICITUD = HIS.DETALLE_SOLICITUD_ID
                              AND DET.ESTADO = HIS.ESTADO 
                             LEFT OUTER JOIN INFO_CONTRATO CON 
                               ON ERO.ID_PERSONA_ROL = CON.PERSONA_EMPRESA_ROL_ID                              
                             LEFT OUTER JOIN INFO_SERVICIO_HISTORIAL SHI
                               ON SER.ID_SERVICIO = SHI.SERVICIO_ID
                              AND SER.ESTADO = SHI.ESTADO                                 
                             WHERE HIS.USR_CREACION = :strUsuario
                              AND EMP.EMPRESA_COD = :strCodEmpresa
                              AND SER.ESTADO in ('Asignada', 'Planificada', 'Cancelada') 
                              AND SER.PLAN_ID IS NOT NULL
                             ORDER BY HIS.FE_INI_PLAN ASC";
        $objQuery->setParameter("strUsuario", $strUsuario); 
        $objQuery->setParameter("strCodEmpresa", $strCodEmpresa);
        
        $objRsm->addScalarResult('IDENTIFICACION_CLIENTE' , 'identificacionCliente' , 'string');
        $objRsm->addScalarResult('NOMBRES'                , 'nombres'               , 'string');
        $objRsm->addScalarResult('APELLIDOS'              , 'apellidos'             , 'string');
        $objRsm->addScalarResult('SERVICIO'               , 'servicio'              , 'string');
        $objRsm->addScalarResult('LOGIN'                  , 'login'                 , 'string');
        $objRsm->addScalarResult('FE_INI_PLAN'            , 'fechaInicio'           , 'string');
        $objRsm->addScalarResult('FE_FIN_PLAN'            , 'fechaFin'              , 'string');
        $objRsm->addScalarResult('USR_CREACION'           , 'usuario'               , 'string');
        $objRsm->addScalarResult('ID_SERVICIO'            , 'idServicio'            , 'string');
        $objRsm->addScalarResult('ESTADO'                 , 'estado'                , 'string');
        $objRsm->addScalarResult('HO_INI_PLAN'            , 'horaInicio'            , 'string');
        $objRsm->addScalarResult('HO_FIN_PLAN'            , 'horaFin'               , 'string');        
        $objRsm->addScalarResult('ORIGEN'                 , 'origen'                , 'string');
        $objRsm->addScalarResult('OBSERVACION'            , 'observacion'           , 'string');
        $objRsm->addScalarResult('RAZON_SOCIAL'           , 'razonSocial'           , 'string');
        $objRsm->addScalarResult('TIPO_TRIBUTARIO'        , 'tipoTributario'        , 'string');
        
        $objQuery->setSQL($strSql);
        $arrayResultado = $objQuery->getArrayResult();

        return $arrayResultado;   
    }   

    /*
     *
     * Método que devuelve el login del vendedor del último servicio contratado por una razón social
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.0
     * @since 22-01-2019
     *
     * Costo 5
     *
     * @param Array $arrayParametros [
     *                                strEstadoPunto,
     *                                intIdPersona,
     *                                intPersonaRolId,  -- valor 1 cliente
     *                                strEstadoServicio
     *                               ]
     * @return Array $arrayResultado
     */
    public function getUsrVendedorPorIdPersona($arrayParametros)
    {
        $arrayResultado = array();
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        $strSql         = "SELECT ISER.USR_VENDEDOR
                            FROM DB_COMERCIAL.INFO_PUNTO IPUN,
                              DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER,
                              DB_COMERCIAL.INFO_SERVICIO ISER
                            WHERE IPUN.PERSONA_EMPRESA_ROL_ID = IPER.ID_PERSONA_ROL
                            AND IPUN.ID_PUNTO                 = ISER.PUNTO_ID
                            AND IPUN.ESTADO                   = :strEstadoPunto
                            AND IPUN.USR_VENDEDOR            IS NOT NULL
                            AND IPER.PERSONA_ID               = :intIdPersona
                            AND IPER.EMPRESA_ROL_ID           = :intPersonaRolId
                            AND ISER.ESTADO                   = :strEstadoServicio
                            AND ISER.USR_VENDEDOR            IS NOT NULL
                            AND ROWNUM                        < 2
                            ORDER BY ISER.FE_CREACION DESC";
        $objQuery->setParameter("strEstadoPunto",    $arrayParametros["strEstadoPunto"]);
        $objQuery->setParameter("intIdPersona",      $arrayParametros["intIdPersona"]);
        $objQuery->setParameter("intPersonaRolId",   $arrayParametros["intPersonaRolId"]);
        $objQuery->setParameter("strEstadoServicio", $arrayParametros["strEstadoServicio"]);

        $objRsm->addScalarResult('USR_VENDEDOR', 'usrVendedor', 'string');
        $objQuery->setSQL($strSql);
        $arrayResultado = $objQuery->getArrayResult();

        return $arrayResultado;
    }

    /*
     *
     * Método que devuelve datos del vendedor del ùltimo servicio contratados por Id Persona Rol
     *
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.0
     * @since 22-07-2020
     * 
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.1 14-08-2020 - Se agrega la descripcion del producto a buscar
     * @since 1.0
     * 
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.2 04-09-2020 - Se apunta el estado del servicio a la info_servicio
     * @since 1.1
     *
     * Costo 13
     *
     * @param Array $arrayParametros [
     *                                intIdPersonaRol
     *                                strDescripcionProducto
     *                               ]
     * @return Array $arrayResultado
     */
    public function getVendedorPorServivioYPersona($arrayParametros)
    {
        $arrayResultado         = array();
        $arrayNoEstadoServicio  = array('Activo');
        $arrayNoEstadoPunto     = array('Cancelado','Cancel','In-Corte');
        $strDescripcionProducto = $arrayParametros["strDescripcionProducto"];
        $intIdPersonaRol        = $arrayParametros["intIdPersonaRol"];
        $strWhereProducto       = "";
        
        try
        {
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objQuery       = $this->_em->createNativeQuery(null, $objRsm);

            if(isset($strDescripcionProducto) && !empty($strDescripcionProducto))
            {
                $strWhereProducto = "  INNER JOIN  DB_COMERCIAL.info_plan_det ipd on ipd.plan_id = ise.plan_id
                                       INNER JOIN DB_COMERCIAL.admi_producto apo on apo.id_producto = ipd.producto_id 
                                       WHERE  apo.descripcion_producto = :strDescripcionProducto ";

                $objQuery->setParameter("strDescripcionProducto", $strDescripcionProducto);
            }

            $strSql         = " SELECT T1.login,T1.usr_vendedor,T1.CONTACTO_VENDEDOR,T1.id_servicio,ide.fe_solicitada,
                                        T1.NOMBRE_VENDEDOR,T1.ESTADO_PUNTO,T1.ESTADO_SERVICIO,iseh.fe_creacion,iseh.observacion,
                                        (SELECT adm.NOMBRE_MOTIVO FROM db_comercial.ADMI_MOTIVO adm WHERE iseh.motivo_id=adm.ID_MOTIVO) AS MOTIVO
                                FROM (
                                
                                        SELECT  DISTINCT ipo.login,isep.usr_vendedor,
                                            (SELECT valor FROM db_comercial.info_persona_forma_contacto ipfc
                                            WHERE ipfc.persona_id=ipe.id_persona AND ipfc.forma_contacto_id=5 
                                                AND ipfc.estado='Activo' AND ROWNUM=1) AS CONTACTO_VENDEDOR,
                                            (CASE WHEN ipe.razon_social IS NOT NULL THEN ipe.razon_social 
                                            ELSE CONCAT(CONCAT(ipe.nombres,' '),ipe.apellidos) END) AS NOMBRE_VENDEDOR,
                                            ipo.estado AS ESTADO_PUNTO,ise.id_servicio,isep.estado AS ESTADO_SERVICIO,
                                            (SELECT MAX(iseh.id_servicio_historial) as id_his 
                                            FROM db_comercial.info_servicio_historial iseh
                                            WHERE iseh.servicio_id = ise.id_servicio
                                            GROUP BY iseh.servicio_id) AS ID_HIST_SERVIVCIO
                                    FROM db_comercial.info_persona_empresa_rol iper
                                    INNER JOIN db_comercial.info_punto ipo ON ipo.persona_empresa_rol_id=iper.id_persona_rol
                                    INNER JOIN 
                                    ( SELECT MAX(ise.id_servicio) AS id_servicio,ISE.PUNTO_ID
                                    FROM db_comercial.info_servicio ise ".$strWhereProducto.
                                    " GROUP BY ISE.PUNTO_ID ) ISE
                                    ON ise.punto_id=ipo.id_punto
                                    INNER JOIN db_comercial.info_servicio isep ON isep.id_servicio = ise.id_servicio
                                    LEFT JOIN db_comercial.info_persona ipe ON ipe.login=isep.usr_vendedor 
                                    WHERE iper.id_persona_rol IN (:intIdPersonaRol) AND ipo.estado NOT IN  (:strEstadoPunto) 
                                    AND isep.estado NOT IN  (:strEstadoServicio) 
                                )T1 
                                INNER JOIN db_comercial.info_servicio_historial iseh ON iseh.id_servicio_historial=T1.ID_HIST_SERVIVCIO
                                LEFT JOIN db_comercial.info_detalle_solicitud ids ON ids.servicio_id=t1.id_servicio AND ids.estado=iseh.ESTADO
                                LEFT JOIN db_soporte.info_detalle ide ON ide.detalle_solicitud_id= ids.id_detalle_solicitud
                                 ";

            $objQuery->setParameter("intIdPersonaRol",   $intIdPersonaRol);
            $objQuery->setParameter("strEstadoServicio", $arrayNoEstadoServicio);
            $objQuery->setParameter("strEstadoPunto", $arrayNoEstadoPunto);

            $objRsm->addScalarResult('USR_VENDEDOR',      'usrVendedor',      'string');
            $objRsm->addScalarResult('LOGIN',             'login',            'string');
            $objRsm->addScalarResult('CONTACTO_VENDEDOR', 'contactoVendedor', 'string');
            $objRsm->addScalarResult('NOMBRE_VENDEDOR',   'nombreVendedor',   'string');
            $objRsm->addScalarResult('ESTADO_PUNTO',      'estadoPunto',      'string');
            $objRsm->addScalarResult('ESTADO_SERVICIO',   'estadoServicio',   'string');
            $objRsm->addScalarResult('FE_CREACION',       'fechaCreacion',    'string');
            $objRsm->addScalarResult('OBSERVACION',       'observacion',      'string');
            $objRsm->addScalarResult('FE_SOLICITADA',     'fechaSolicitada',  'string');
            $objRsm->addScalarResult('MOTIVO',            'motivo',           'string');
            
            $objQuery->setSQL($strSql);
            $arrayResultado = $objQuery->getArrayResult();
        }
        catch(\Exception $e)
        {
            $arrayResultado    = 'Error al realizar consulta.';
        } 

        return $arrayResultado;
    }
   
    /**                                                                                                                
     * Función que devuelve las capacidades 1 y 2 de un plan.                                                          
     *                                                                                                                 
     * @author Ricardo Robles <rroblesa@telconet.ec>                                                                   
     * @version 1.0                                                                                                    
     * @since 14-06-2019                                                                                               
     *                                                                                                                 
     * Costo 9                                                                                                         
     *                                                                                                                 
     * @param array $arrayParametros["intIdPlan : id del plan]                                                                                  
     * @return $arrayRespuesta                                                                                         
     */                                                                                                                
    public function getObtenerCapacidadesDePlan($arrayParametros)                                                      
    {                                                                                                                  
        $strSql = "";  
        
        try                                                                                                            
        {                                                                                                              
            $objRsm   = new ResultSetMappingBuilder($this->_em);                                                       
            $objQuery = $this->_em->createNativeQuery(null, $objRsm);                                                  
                                                                                                                       
            $strSql = "SELECT  ap.id_producto,                                                                         
                         ippc.producto_caracterisitica_id,                                                       
                         ippc.valor,                                                                             
                         ac.descripcion_caracteristica                                                           
                       FROM DB_COMERCIAL.admi_producto ap,                                                          
                         DB_COMERCIAL.info_plan_cab ipc,                                                         
                         DB_COMERCIAL.info_plan_det ipd,                                                         
                         DB_COMERCIAL.admi_caracteristica ac,                                                    
                         DB_COMERCIAL.admi_producto_caracteristica apc,                                          
                         DB_COMERCIAL.info_plan_producto_caract ippc                                             
                       WHERE apc.caracteristica_id = ac.id_caracteristica                                            
                       AND ac.descripcion_caracteristica in ('CAPACIDAD1','CAPACIDAD2')                            
                       AND ap.codigo_producto               = 'INTD'                                               
                       AND apc.producto_id                  = ap.id_producto                                       
                       AND ippc.producto_caracterisitica_id = apc.id_producto_caracterisitica                      
                       AND ippc.plan_det_id                 = ipd.id_item                                          
                       AND ap.id_producto                   = ipd.producto_id                                      
                       AND ipd.plan_id                      = ipc.id_plan                                          
                       AND ipc.id_plan                      = :intIdPlan                                           
                       AND ap.estado                        = 'Activo'                                             
                       AND ipd.estado                       = 'Activo'                                             
                       AND ipc.estado                       = 'Activo'                                             
                       AND ippc.estado                      = 'Activo'                                             
                       AND ac.estado                        = 'Activo'";                                           
                                                                                                                       
            $objRsm->addScalarResult('DESCRIPCION_CARACTERISTICA', 'descripcion_caracteristica', 'string');              
            $objRsm->addScalarResult('VALOR', 'valor', 'string');                                                        
                                                                                                                       
            $objQuery->setParameter('intIdPlan', $arrayParametros["intIdPlanNuevo"]);                              
                                                                                                                       
            $objQuery->setSQL($strSql);                                                                                
                                                                                                                       
            $arrayResultado = $objQuery->getResult();                                                                  
        }                                                                                                              
        catch (\Exception $e)                                                                                          
        {                                                                                                              
            error_log("Error: InfoServicioRepository.getObtenerCapacidadesDePlan -> ".$e->getMessage());               
        }                                                                                                              
        return $arrayResultado;                                                                                        
    }                                                                                                                  
                                                                                                                       
                                                                                                                       
    /**                                                                                                                
     * Función que devuelve el valor del plan actual mediante el login,                                                
     * identificación del cliente y el servicio.                                                                       
     *                                                                                                                 
     * @author Ricardo Robles <rroblesa@telconet.ec>                                                                   
     * @version 1.0                                                                                                    
     * @since 14-06-2019   
     * 
     * @author Kevin Ortiz <kcortiz@telconet.ec>                                                                   
     * @version 1.1 se quito la informacion de estado persona.                                                                                                    
     * @since 10-07-2019                                                                                            
     *                                                                                                                 
     * Costo 9                                                                                                         
     *                                                                                                                 
     * @param array $arrayParametros[                                                                                  
     *                               "intIdServicio            : id del servicio,                                      
     *                               "strlLogin                : login del punto,                                      
     *                               "strIdentificacionCliente : identificación del cliente                            
     *                              ]                                                                                  
     * @return $arrayRespuesta           
     */                                                                                                                
    public function getObtenerValorPlanActual($arrayParametros)                                                        
    {                                                                                                                  
        $strSql         = "";                                                                                          
                                                                                                                       
        try                                                                                                            
        {                                                                                                              
            $objRsm   = new ResultSetMappingBuilder($this->_em);                                                       
            $objQuery = $this->_em->createNativeQuery(null, $objRsm);                                                  
                                                                                                                       
            $strSql   = "SELECT ip.id_punto,                                                                           
                                cis.plan_id,                                                                           
                                iper.id_persona_rol,                                                                   
                                iper.oficina_id,                                                                       
                                db_comercial.comek_consultas.F_GET_VALOR_PLAN(cis.plan_id) valor_plan                  
                           FROM DB_COMERCIAL.INFO_PUNTO ip,                                                            
                                DB_COMERCIAL.INFO_PERSONA cip,                                                         
                                DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL iper,                                            
                                DB_COMERCIAL.info_servicio cis                                                         
                          WHERE ip.id_punto                = cis.punto_id                                             
                            AND cis.id_servicio            = :intIdServicio                                            
                            AND ip.login                   = :strLogin                                                 
                            AND ip.persona_empresa_rol_id  = iper.id_persona_rol                                       
                            AND iper.persona_id            = cip.id_persona                                            
                            AND cip.identificacion_cliente = :strIdentificacionCliente                                 
                            AND ip.estado                  = 'Activo'                                                 
                            AND iper.estado                = 'Activo'                                                  
                            AND cis.estado                 = 'Activo'";                                                
                                                                                                                       
            $objRsm->addScalarResult('ID_PUNTO',       'id_punto','string');                                           
            $objRsm->addScalarResult('ID_PERSONA_ROL', 'id_persona_rol','string');                                     
            $objRsm->addScalarResult('OFICINA_ID',     'oficina_id','string');                                         
            $objRsm->addScalarResult('PLAN_ID',        'plan_id','string');                                            
            $objRsm->addScalarResult('VALOR_PLAN',      'valor_plan','string');                                        
                                                                                                                       
            $objQuery->setParameter('intIdServicio',            $arrayParametros["intIdServicio"]);                    
            $objQuery->setParameter('strLogin',                 $arrayParametros["strLogin"]);                         
            $objQuery->setParameter('strIdentificacionCliente', $arrayParametros["strIdentificacionCliente"]);         
                                                                                                                       
            $objQuery->setSQL($strSql);                                                                                
                                                                                                                       
            $arrayResultado = $objQuery->getResult();                                                                  
        }                                                                                                              
        catch (\Exception $e)                                                                                          
        {                                                                                                              
            error_log("Error: InfoServicioRepository.getObtenerValorPlanActual -> ".$e->getMessage());                 
        }                                                                                                              
        return $arrayResultado;                                                                                        
    }
    
    /**                                                                                                                
     * Función que devuelve el valor del plan nuevo para el proceso de cambio de plan,
     * consultando el id del plan.                                                                                                                 
     *                                                                                                                 
     * @author Ricardo Robles <rroblesa@telconet.ec>                                                                   
     * @version 1.0                                                                                                    
     * @since 14-06-2019                                                                                               
     *                                                                                                                 
     * Costo 2                                                                                                         
     *                                                                                                                 
     * @param array $arrayParametros[                                                                                  
     *                               "intIdPlanNuevo : id del plan nuevo,                       
     *                              ]                                                                                  
     * @return $arrayRespuesta                                                                                         
     */                                                                                                                
    public function getObtenerValorPlanNuevo($arrayParametros)                                                        
    {                                                                                        
        $strSql         = "";                                                                                                                                                                                                                 
        try                                                                                                            
        {               
            $objRsm   = new ResultSetMappingBuilder($this->_em);                                                       
            $objQuery = $this->_em->createNativeQuery(null, $objRsm);                                                  
                                                                                                                       
            $strSql   = "SELECT db_comercial.comek_consultas.F_GET_VALOR_PLAN(:intIdPlan) valor_plan from dual";                                                
                                                                                                                                                              
            $objRsm->addScalarResult('VALOR_PLAN', 'valor_plan','string');                                        
                                                                                                                       
            $objQuery->setParameter('intIdPlan', $arrayParametros["intIdPlanNuevo"]);    
                                                                                                                       
            $objQuery->setSQL($strSql);                                                                                
                                                                                                                       
            $arrayResultado = $objQuery->getResult();                                                                  
        }                                                                                                              
        catch (\Exception $e)                                                                                          
        {                                                                                                              
            error_log("Error: InfoServicioRepository.getObtenerValorPlanNuevo -> ".$e->getMessage());                 
        }                                                                                                              
        return $arrayResultado;                                                                                        
    }                           
    
    /**
     * getServicioTipoEnlace
     *
     * Método encargado de obtener la cantidad y los servicios por punto y producto
     *
     * Costo 13
     *
     * @param  [ $strIdPunto    => nombre del producto
     *           $intIdProducto => id del producto ]
     *
     * @return $arrayResultado
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.0 25-06-2019
     */
     public function getServicioTipoEnlace($arrayParametroSdwan)
     {
        $arrayResultado   = array();

         $objQuery = $this->_em->createQuery("SELECT s
						    FROM
                                schemaBundle:InfoServicio s,
                                schemaBundle:InfoServicioProdCaract spc
						    WHERE s.puntoId=:idPunto AND
                                spc.servicioId=s.id AND
                                spc.productoCaracterisiticaId=
                                (select apc.id
                                 from schemaBundle:AdmiProductoCaracteristica apc, schemaBundle:AdmiCaracteristica ac
                                 where ac.id = apc.caracteristicaId AND
                                       ac.descripcionCaracteristica=:descCaract AND
                                       ac.estado=:estado AND
                                       apc.estado=:estado AND
                                       spc.productoCaracterisiticaId=apc.id)");

        $objQuery->setParameter("idPunto",      $arrayParametroSdwan["strIdPunto"] );
        $objQuery->setParameter("descCaract",   'SDWAN');
        $objQuery->setParameter("estado",       'Activo');

        $intTotal = count($objQuery->getResult());
        $objDatos = $objQuery->getResult();
        $arrayResultado['registros'] = $objDatos;
        $arrayResultado['total']     = $intTotal;

        return $arrayResultado;
     }
   
     /*
     *
     * Método que devuelve true o false si el punto tiene o no extender
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.0
     * @since 15-07-2019
     *
     * Costo 12
     *
     * @param Array $arrayParametros [intPuntoId]
     * @return Array $arrayResultado
     */
    public function isPuntoExtender($arrayParametros)
    {
        try
        {
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
            $strSql         = "SELECT IFS.ID_SERVICIO, IFS.PUNTO_ID, IFS.PLAN_ID, IFS.PRODUCTO_ID, IFS.ESTADO, IFS.TIPO_ORDEN 
                            FROM DB_COMERCIAL.INFO_SERVICIO IFS
                            WHERE (IFS.PLAN_ID IN (SELECT IPC.ID_PLAN
                                                    FROM DB_COMERCIAL.INFO_PLAN_DET IPD, DB_COMERCIAL.INFO_PLAN_CAB IPC
                                                    WHERE IPD.PRODUCTO_ID = (SELECT ID_PRODUCTO 
                                                                            FROM DB_COMERCIAL.ADMI_PRODUCTO IFP
                                                                            WHERE IFP.NOMBRE_TECNICO = :strNombreExtender 
                                                                                    AND IFP.ESTADO = :strEstadoActivo 
                                                                                    AND IFP.EMPRESA_COD = :strCodigoEmpresa)
                                                        AND IPC.ID_PLAN = IPD.PLAN_ID
                                                        AND IPC.ESTADO != :strEstadoEliminado)
                                        AND IFS.ESTADO != :strEstadoEliminado          
                                        AND IFS.PUNTO_ID = :intPuntoId)
                                    OR (IFS.PRODUCTO_ID = (SELECT ID_PRODUCTO 
                                                            FROM DB_COMERCIAL.ADMI_PRODUCTO 
                                                            WHERE NOMBRE_TECNICO = :strNombreExtender 
                                                                AND ESTADO = :strEstadoActivo 
                                                                AND EMPRESA_COD = :strCodigoEmpresa)
                                        AND IFS.ESTADO != :strEstadoEliminado              
                                        AND IFS.PUNTO_ID = :intPuntoId)";

            $objQuery->setParameter("strEstadoEliminado",   'Eliminado');
            $objQuery->setParameter("strEstadoActivo",      'Activo');
            $objQuery->setParameter("strNombreExtender",    'EXTENDER_DUAL_BAND');
            $objQuery->setParameter("strCodigoEmpresa",     '18');
            $objQuery->setParameter("intPuntoId",           $arrayParametros["intPuntoId"]);

            $objRsm->addScalarResult('ID_SERVICIO', 'intIdServicio',    'string');
            $objRsm->addScalarResult('PUNTO_ID',    'intIdPunto',       'string');
            $objRsm->addScalarResult('PLAN_ID',     'intIdPlan',        'string');
            $objRsm->addScalarResult('PRODUCTO_ID', 'intProductoId',    'string');
            $objRsm->addScalarResult('ESTADO',      'strEstado',        'string');
            $objRsm->addScalarResult('TIPO_ORDEN',  'strTipoOrden',     'string');

            $objQuery->setSQL($strSql);
            $arrayResultado = $objQuery->getArrayResult();

            if(!empty($arrayResultado))
            {
                $arrayReturn['status']       = 'OK';
                $arrayReturn['respuesta']    = true;
            }
            else
            {
                $arrayReturn['status']       = 'OK';
                $arrayReturn['respuesta']    = false;
            }

        }
        catch(\Exception $e)
        {
            $arrayReturn['status']       = 'ERROR';
            $arrayReturn['respuesta']    = 'Error al realizar consulta.';
            return $arrayReturn;
        } 
        return $arrayReturn;
    }
    
    
     /**
     * Documentación para el método 'getPromocionesContrato'.
     * 
     * Método que retorna datos de la promoción tentativa para mostrar en el contrato Digital.
     *
     * @param array $arrayParametros []
     *              'Pn_IdPunto'     => Id del tipo de promoción,
     *              'Pn_IdServicio'     => Id del tipo de promoción,
     *              'Pv_CodigoGrupoPromocion'     => Id del tipo de promoción,
     *              'Pv_CodEmpresa'     => Id del tipo de promoción
     * 
     * @return Array $arrayDatos
     * 
     * @author Katherine Yager <kyager@telconet.ec>
     * @version 1.0 25-10-2019
     */
    public function getPromocionesContrato($arrayParametros)
    {

        $arrayDatos      = array();
        $intDescuento      = 0;
        $intDescuento      = str_pad($intDescuento, 30, " ");
        $intCantPeriodo    = 0;
        $intCantPeriodo    = str_pad($intCantPeriodo, 30, " ");
        $strObservacion    = '';
        $strObservacion    = str_pad($strObservacion, 5000, " ");

         try
        {

                $strSql = "BEGIN
                            DB_COMERCIAL.CMKG_PROMOCIONES_UTIL.P_MAPEO_PROM_TENTATIVA
                            (
                                :Pv_IdPunto,
                                :Pn_IdServicio,
                                :Pv_CodigoGrupoPromocion,
                                :Pv_CodEmpresa,
                                :Pn_Descuento,
                                :Pn_CantPeriodo,
                                :Pv_Observacion
                            );
                           END;";
                
                $objStmt = $this->_em->getConnection()->prepare($strSql);
               
                $objStmt->bindParam('Pv_IdPunto'    , $arrayParametros['intIdPunto']);
                $objStmt->bindParam('Pn_IdServicio' , $arrayParametros['intIdServicio']);
                $objStmt->bindParam('Pv_CodigoGrupoPromocion', $arrayParametros['strCodigoGrupoPromocion']);
                $objStmt->bindParam('Pv_CodEmpresa' , $arrayParametros['intCodEmpresa']);
                $objStmt->bindParam('Pn_Descuento'  , $intDescuento);
                $objStmt->bindParam('Pn_CantPeriodo', $intCantPeriodo);
                $objStmt->bindParam('Pv_Observacion', $strObservacion);

                $objStmt->execute();

        }
        catch(\Exception $ex)
        {
             $arrayDatos['strCodError']= '503';
             $arrayDatos['strMensaje'] = $ex->getMessage();
        }
        
        $arrayDatos['intDescuento']   = $intDescuento;
        $arrayDatos['intCantPeriodo'] = $intCantPeriodo;
        $arrayDatos['strObservacion'] = $strObservacion;
        
        return $arrayDatos;
        
    }
	/**
	 * Documentación para el método 'cortarServicioNetCam'.
	 *
	 * Método que ejecuta el proceso de corte del servicio NETCAM.
	 *
	 * @author  Marlon Plúas <mpluas@telconet.ec>
	 * @version 1.0 23-12-2019
	 *
	 * @param array $arrayParametros [
	 *                               'intIdServicio'    => Id del servicio,
	 *                               'intIdAccion'      => Id de la acción,
	 *                               'strUser'          => User,
	 *                               ]
	 *
	 * @return array $arrayDatos
	 *
	 */
	public function cortarServicioNetCam($arrayParametros)
	{
		$arrayDatos    = array();
		$strStsPaquete = str_repeat(' ', 1000);
		$strMsjPaquete = str_repeat(' ', 1000);
		$strStatus     = "ERROR";
		
		try
		{
			$strSql = "BEGIN
                            DB_COMERCIAL.CMKG_NETCAM.P_CORTE_SERVICIO_NETCAM
                            (
                                :PN_IDSERVICIO,
                                :PN_IDACCION,
                                :PV_USER,
                                :PV_STATUS,
                                :PV_MENSAJE
                            );
                           END;";
			
			$objStmt = $this->_em->getConnection()
			                     ->prepare($strSql);
			
			$objStmt->bindParam('PN_IDSERVICIO', $arrayParametros['intIdServicio']);
			$objStmt->bindParam('PN_IDACCION', $arrayParametros['intIdAccion']);
			$objStmt->bindParam('PV_USER', $arrayParametros['strUser']);
			$objStmt->bindParam('PV_STATUS', $strStsPaquete);
			$objStmt->bindParam('PV_MENSAJE', $strMsjPaquete);
			
			$objStmt->execute();
			$strStatus  = $strStsPaquete;
			$strMensaje = $strMsjPaquete;
		}
		catch(\Exception $ex)
		{
			$strMensaje = $ex->getMessage();
		}
		
		$arrayDatos['strStatus']  = $strStatus;
		$arrayDatos['strMensaje'] = $strMensaje;
		
		return $arrayDatos;
	}
	
	/**
	 * Documentación para el método 'reconectarServicioNetCam'.
	 *
	 * Método que ejecuta el proceso de reconexión del servicio NETCAM.
	 *
	 * @author  Marlon Plúas <mpluas@telconet.ec>
	 * @version 1.0 23-12-2019
	 *
	 * @param array $arrayParametros [
	 *                               'intIdServicio'    => Id del servicio,
	 *                               'intIdAccion'      => Id de la acción,
	 *                               'strUser'          => User,
	 *                               ]
	 *
	 * @return array $arrayDatos
	 *
	 */
	public function reconectarServicioNetCam($arrayParametros)
	{
		$arrayDatos    = array();
		$strStsPaquete = str_repeat(' ', 1000);
		$strMsjPaquete = str_repeat(' ', 1000);
		$strStatus     = "ERROR";
		
		try
		{
			$strSql = "BEGIN
                            DB_COMERCIAL.CMKG_NETCAM.P_REACTIVACION_SERVICIO_NETCAM
                            (
                                :PN_IDSERVICIO,
                                :PN_IDACCION,
                                :PV_USER,
                                :PV_STATUS,
                                :PV_MENSAJE
                            );
                           END;";
			
			$objStmt = $this->_em->getConnection()
			                     ->prepare($strSql);
			
			$objStmt->bindParam('PN_IDSERVICIO', $arrayParametros['intIdServicio']);
			$objStmt->bindParam('PN_IDACCION', $arrayParametros['intIdAccion']);
			$objStmt->bindParam('PV_USER', $arrayParametros['strUser']);
			$objStmt->bindParam('PV_STATUS', $strStsPaquete);
			$objStmt->bindParam('PV_MENSAJE', $strMsjPaquete);
			
			$objStmt->execute();
			$strStatus  = $strStsPaquete;
			$strMensaje = $strMsjPaquete;
		}
		catch(\Exception $ex)
		{
			$strMensaje = $ex->getMessage();
		}
		
		$arrayDatos['strStatus']  = $strStatus;
		$arrayDatos['strMensaje'] = $strMensaje;
		
		return $arrayDatos;
	}
	
	/**
	 * Documentación para el método 'cancelarServicioNetCam'.
	 *
	 * Método que ejecuta el proceso de cancelación del servicio NETCAM.
	 *
	 * @author  Marlon Plúas <mpluas@telconet.ec>
	 * @version 1.0 23-12-2019
	 *
	 * @param array $arrayParametros [
	 *                               'intIdServicio'    => Id del servicio,
	 *                               'intIdAccion'      => Id de la acción,
	 *                               'strEsMasivo'      => S = Masivo, N = No masivo,
	 *                               'strUser'          => User,
	 *                               ]
	 *
	 * @return array $arrayDatos
	 *
	 */
	public function cancelarServicioNetCam($arrayParametros)
	{
		$arrayDatos    = array();
		$strStsPaquete = str_repeat(' ', 1000);
		$strMsjPaquete = str_repeat(' ', 1000);
		$strStatus     = "ERROR";
		
		try
		{
			$strSql = "BEGIN
                            DB_COMERCIAL.CMKG_NETCAM.P_CANCELACION_SERVICIO_NETCAM
                            (
                                :PN_IDSERVICIO,
                                :PN_IDACCION,
                                :PV_ESMASIVO,
                                :PV_USER,
                                :PV_STATUS,
                                :PV_MENSAJE
                            );
                           END;";
			
			$objStmt = $this->_em->getConnection()
			                     ->prepare($strSql);
			
			$objStmt->bindParam('PN_IDSERVICIO', $arrayParametros['intIdServicio']);
			$objStmt->bindParam('PN_IDACCION', $arrayParametros['intIdAccion']);
			$objStmt->bindParam('PV_ESMASIVO', $arrayParametros['strEsMasivo']);
			$objStmt->bindParam('PV_USER', $arrayParametros['strUser']);
			$objStmt->bindParam('PV_STATUS', $strStsPaquete);
			$objStmt->bindParam('PV_MENSAJE', $strMsjPaquete);
			
			$objStmt->execute();
			$strStatus  = $strStsPaquete;
			$strMensaje = $strMsjPaquete;
		}
		catch(\Exception $ex)
		{
			$strMensaje = $ex->getMessage();
		}
		
		$arrayDatos['strStatus']  = $strStatus;
		$arrayDatos['strMensaje'] = $strMensaje;
		
		return $arrayDatos;
	}

    /**
     * Documentación para la función 'findTodosServiciosparaAdendum'
     * 
     * Funcion que saca todos los servicios que pertenezcan al contrato o al adendum
     * 
     * @param array $arrayParametros[
     *                                  $arrayServicios => los servicios que pertenecen al contrato o al adendum
     *                              ]              
     * 
     * @return array $arrayResultado[ 'registros' => 'Servicios encontrados por la consulta', 'total' => 'Cantidad de servicios encontrados' ]
     *
     * @author Edgar Pin Villavicencio <epin@telconet.ec>
     * @version 1.0 28-10-2019 - Se valida que no aparezcan los servicios factibles de venta externa al crear y/o aprobar un contrato
     * Costo del Query: 8
     */
    public function findTodosServiciosPorAdendum($arrayParametros)
    {
        $arrayServicios = $arrayParametros['arrayServicios'];
        $arrayResultado = array('registros' => array(), 'total' => 0);
        
        try
        {
            if( !empty($arrayServicios) )
            {
                $objQuery       = $this->_em->createQuery();
                $objQueryCount  = $this->_em->createQuery();
                $strSelect      = "SELECT ISE ";
                $strSelectCount = "SELECT COUNT(ISE.id) ";
                $strFrom        = "FROM schemaBundle:InfoPersonaEmpresaRol IPER, ".
                                  "schemaBundle:InfoPunto IP, ".
                                  "schemaBundle:InfoServicio ISE ";
                $strWhere       = "WHERE IPER.id = IP.personaEmpresaRolId ".
                                  "AND IP.id = ISE.puntoId ".
                                  "AND ISE.id in (:arrayServicios) ";
                                  
                $strOrderBy     = "ORDER BY ISE.feCreacion ASC ";

                $objQuery->setParameter('arrayServicios',       $arrayServicios);
                $objQueryCount->setParameter('arrayServicios',  $arrayServicios);

                $strSql      = $strSelect.$strFrom.$strWhere.$strOrderBy;
                $strSqlCount = $strSelectCount.$strFrom.$strWhere.$strOrderBy;

                $objQuery->setDQL($strSql);
                $objQueryCount->setDQL($strSqlCount);


                $arrayResultado['registros'] = $objQuery->getResult();
                $arrayResultado['total']     = $objQueryCount->getSingleScalarResult();
            }
            else
            {
                throw new \Exception('Se deben enviar todos los parámetros adecuados para realizar la consulta respectiva');
            }
        }
        catch( \Exception $e )
        {
            throw($e);
        }
        
        return $arrayResultado;
    }
 
    /**
     * Función que retorna el Mapeo entre el Producto SDWAN con el de seguridad Security NG Firewall.
     * 
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.0 04-01-2020
     * Costo = 12
     *
     * @param array $arrayParametros [ "strCodEmpresa"      => código empresa en sesión
     *                                 "intIdProducto"      => id del producto que se desea verificar,
     *                                 "strObtieneCaract"   => si se desea filtrar para obtener la característica asociada
     *                               ]
     * @return array $arrayResultado [ 
     *                                  "intIdProductoPref"             => id del producto preferencial
     *                                  "strNombreTecnicoProdPref"      => nombre técnico del producto preferencial
     *                                  "strDescripcionProdPref"        => descripción del producto preferencial
     *                                  "intIdProductoAsoc"             => id del producto asociado
     *                                  "strNombreTecnicoProdAsoc"      => nombre técnico del producto asociado
     *                                  "strDescripcionProdAsoc"        => descripción del producto asociado
     *                                  "strNombreCaracteristica"       => nombre de la característica
     *                                ]
     */
    public function obtenerInfoMapeoProdsAsociados($arrayParametros)
    {
        $strCodEmpresa  = $arrayParametros["strCodEmpresa"];
        try
        {
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery    = $this->_em->createNativeQuery(null, $objRsm);
            
            $strQuery       = " SELECT PARAM_DET_RELA.VALOR3 ID_PRODUCTO_PREF,PARAM_DET_RELA.VALOR5 NOMBRE_PROD_PREF,
                                PARAM_DET_RELA.VALOR1 DESCRIPCION_PROD_PREF,PARAM_DET_RELA.VALOR4 ID_PRODUCTO_ASOC,
                                PARAM_DET_RELA.VALOR6 NOMBRE_PROD_ASOC,PARAM_DET_RELA.VALOR2 DESCRIPCION_PROD_ASOC
                                         FROM DB_GENERAL.ADMI_PARAMETRO_CAB PARAM_RELA,
                                         DB_GENERAL.ADMI_PARAMETRO_DET PARAM_DET_RELA
                                         WHERE PARAM_RELA.ID_PARAMETRO                = PARAM_DET_RELA.PARAMETRO_ID
                                         AND PARAM_DET_RELA.EMPRESA_COD               = :strCodEmpresa
                                         ";

            if(isset($arrayParametros["intIdProducto"]) && !empty($arrayParametros["intIdProducto"]))
            {
                $strQuery .= " AND (PARAM_DET_RELA.VALOR3                   = :intIdProducto
                               OR   PARAM_DET_RELA.VALOR4                   = :intIdProducto) ";
                $objNtvQuery->setParameter('intIdProducto', $arrayParametros["intIdProducto"]);
            }
            else
            {
                throw new \Exception("No se ha enviado información del producto a buscar!");
            }
            if(isset($arrayParametros["strNombreAsociadoProd"]) && !empty($arrayParametros["strNombreAsociadoProd"]))
            {
                $strQuery .= " AND PARAM_RELA.NOMBRE_PARAMETRO              = :strNombreAsociadoProd ";
                $objNtvQuery->setParameter('strNombreAsociadoProd', $arrayParametros["strNombreAsociadoProd"]);
            }
            else
            {
                throw new \Exception("No se ha enviado información del producto a buscar!");
            }
            $objNtvQuery->setParameter('strCodEmpresa', $strCodEmpresa);

            $objRsm->addScalarResult('ID_PRODUCTO_PREF', 'intIdProductoPref', 'integer');
            $objRsm->addScalarResult('NOMBRE_PROD_PREF', 'strNombreTecnicoProdPref', 'string');
            $objRsm->addScalarResult('DESCRIPCION_PROD_PREF', 'strDescripcionProdPref', 'string');
            $objRsm->addScalarResult('ID_PRODUCTO_ASOC', 'intIdProductoAsoc', 'integer');
            $objRsm->addScalarResult('NOMBRE_PROD_ASOC', 'strNombreTecnicoProdAsoc', 'string');
            $objRsm->addScalarResult('DESCRIPCION_PROD_ASOC', 'strDescripcionProdAsoc', 'string');
            
            $objNtvQuery->setSQL($strQuery);            
            $arrayDatos = $objNtvQuery->getArrayResult();
            
            $arrayResultado = array(
                                    "strStatus"  => "OK" ,
                                    "arrayData"  => $arrayDatos,
                                    "strMensaje" => "Información recuperada existosamente"
                                   );
        }
        catch (\Exception $e) 
        {
            $arrayResultado = array(
                                    "strStatus"  => "ERROR" ,
                                    "arrayData"  => array(),
                                    "strMensaje" => $e->getMessage()
                                   );
        }
        return $arrayResultado;
    }

    /**
     * Documentación para el método 'getServiciosRegularizar'.
     *
     * Costo: 10
     *
     * Método para obtener los servicios de una persona, que presenta inconsistencia en su contrato dígital.
     *
     * @author  Walther Joao Gaibor C <wgaibor@telconet.ec>
     * @version 1.0 15-05-2020
     *
     * @param  array  $arrayParametros [ 'intPersonaEmpresaRolId':  Integer:    persona empresa rol id,
     *                                   'strEstadoServicio':       String:     Estado del servicio,
     *                                   'strEstadoPunto':          String:     Estado del punto
     *                                  ]
     * @return array $arrayResultado [ arrayServicio:    Array:  Arreglo de servicio]
     *
     */
    public function getServiciosRegularizar($arrayParametros)
    {
        $objQuery = $this->_em->createQuery();
        $strOrder = " ORDER BY iser.feCreacion DESC";
        $strQuery = "  SELECT  iser
                        FROM
                                schemaBundle:InfoServicio           iser,
                                schemaBundle:InfoPunto              ipto,
                                schemaBundle:InfoPersonaEmpresaRol  iper
                        WHERE
                                iser.puntoId             =   ipto.id                   AND
                                ipto.personaEmpresaRolId =   iper.id                   AND
                                ipto.personaEmpresaRolId =   :intPersonaEmpresaRolId   AND
                                iser.productoId          IS NULL  ";

        $objQuery->setParameter('intPersonaEmpresaRolId', $arrayParametros['intPersonaEmpresaRolId']);
        if(isset($arrayParametros['strEstadoServicio']))
        {
            $strQuery .= "AND iser.estado       = :strEstadoServicio
                          AND ipto.estado       = :strEstadoPunto ";
            $objQuery->setParameter('strEstadoServicio', $arrayParametros['strEstadoServicio']);
            $objQuery->setParameter('strEstadoPunto', $arrayParametros['strEstadoPunto']);
        }
        if(!empty($arrayParametros['strLogin']))
        {
            $strQuery .= "AND ipto.login   = :strLogin ";
            $objQuery->setParameter('strLogin', $arrayParametros['strLogin']);
        }
        if(!empty($arrayParametros['objFeCreacionServ']))
        {
            $strQuery .= "AND iser.feCreacion   > :objFeCreacion ";
            $objQuery->setParameter('objFeCreacion', $arrayParametros['objFeCreacionServ']);
        }
        if(isset($arrayParametros['objPlanId']))
        {
            $strQuery .= "AND iser.planId   = :objPlanId ";
            $objQuery->setParameter('objPlanId', $arrayParametros['objPlanId']);
        }
        $objQuery->setDQL($strQuery.$strOrder);
        return $objQuery->getResult();
    }

    /**    
     * Documentación para el método 'getAdendumConFacturas'.
     *
     * Función que retorna la información de los Adendum de Punto con las facturas en estado 'Activo', 'Pendientes' y/o 'Cerrado'.
     * 
     * @param int $intIdEmpresa Id de la empresa de la cual se desea consultar
     * @return array $arrayResultados['registros']
     * 
     * @author Edgar Pin Villavicencio <epin@telconet.ec>       
     * @version 1.0 26-02-2019
     * 
     * @author Edgar Pin Villavicencio <epin@telconet.ec>
     * @version 1.1 14/04/2020 Se agrega para que traer los adendums sea de contrato fisico o movil
     *
     */
    public function getAdendumConFacturas($intIdEmpresa)
    { 
        $strSql = "SELECT ic.id, 
                          iper.id as personaEmpresaRolId,
                          ( 
                             SELECT COUNT(idfc2.id)
                             FROM schemaBundle:InfoDocumentoFinancieroCab idfc2,
                                  schemaBundle:InfoDocumentoCaracteristica idc2,
                                  schemaBundle:AdmiCaracteristica ac2,
                                  schemaBundle:InfoPunto ip2,
                                  schemaBundle:InfoPersonaEmpresaRol iper2,
                                  schemaBundle:InfoContrato ic2
                             WHERE idfc2.id = idc2.documentoId
                               AND ac2.id = idc2.caracteristicaId
                               AND ip2.id = idfc2.puntoId
                               AND iper2.id = ip2.personaEmpresaRolId
                               AND ic2.personaEmpresaRolId = iper2.id
                               AND idfc2.estadoImpresionFact IN (:estadosFacturasConDeuda)
                               AND ac2.descripcionCaracteristica IN (:strDescripcionCaracteristica)
                               AND idc2.valor = :strValor
                               AND idc2.estado = :strEstadoActivo
                               AND iper2.id = ic.personaEmpresaRolId
                          ) as FACT_ACTIVAS_PENDIENTES,
                          (
                             SELECT COUNT(idfc3.id)
                             FROM schemaBundle:InfoDocumentoFinancieroCab idfc3,
                                  schemaBundle:InfoDocumentoCaracteristica idc3,
                                  schemaBundle:AdmiCaracteristica ac3,
                                  schemaBundle:InfoPunto ip3,
                                  schemaBundle:InfoPersonaEmpresaRol iper3,
                                  schemaBundle:InfoContrato ic3
                             WHERE idfc3.id = idc3.documentoId
                               AND ac3.id = idc3.caracteristicaId
                               AND ip3.id = idfc3.puntoId
                               AND iper3.id = ip3.personaEmpresaRolId
                               AND ic3.personaEmpresaRolId = iper3.id
                               AND idfc3.estadoImpresionFact = :strEstadoCerrado
                               AND ac3.descripcionCaracteristica IN (:strDescripcionCaracteristica)
                               AND idc3.valor = :strValor
                               AND idc3.estado = :strEstadoActivo
                               AND iper3.id = ic.personaEmpresaRolId
                               AND NOT EXISTS (SELECT 1 
                                               FROM schemaBundle:InfoDocumentoFinancieroCab nc,
                                               schemaBundle:AdmiTipoDocumentoFinanciero atdnc                       
                                               WHERE nc.referenciaDocumentoId = idfc3.id
                                               AND nc.tipoDocumentoId         = atdnc.id
                                               AND atdnc.estado               = :strEstadoActivo
                                               AND atdnc.codigoTipoDocumento IN (:strCodigoTipoDocumento)
                                               AND nc.estadoImpresionFact     = :strEstadoActivo
                                               AND nc.puntoId                 = ip3.id                       
                                              ) 

                          ) as FACT_CERRADAS
                   FROM schemaBundle:InfoContrato ic,
                        schemaBundle:InfoPersonaEmpresaRol iper,
                        schemaBundle:InfoEmpresaRol ier,
                        schemaBundle:InfoAdendum ia
                   WHERE iper.id = ic.personaEmpresaRolId
                     AND ier.id = iper.empresaRolId 
                     AND ier.empresaCod = :intEmpresaCod
                     AND ic.id = ia.contratoId
                     AND ic.estado = :strEstadoContratoPendiente
                     AND ia.tipo   = 'AP'
                     and ia.numero IS NOT NULL
                     AND ia.formaContrato = :strformaContrato
                     AND ia.estado = 'Pendiente'";
        
        $objQuery = $this->_em->createQuery($strSql);
        
        $objQuery->setParameter('estadosFacturasConDeuda',      array_values(array('Pendiente', 'Activo')));
        $objQuery->setParameter('strDescripcionCaracteristica', array_values(array('POR_CONTRATO_DIGITAL', 'POR_CONTRATO_FISICO')));
        $objQuery->setParameter('strValor',                     'S');
        $objQuery->setParameter('strEstadoActivo',              'Activo');
        $objQuery->setParameter('strEstadoCerrado',             'Cerrado');
        $objQuery->setParameter('strCodigoTipoDocumento',       array_values(array('NC', 'NCI')));
        $objQuery->setParameter('intEmpresaCod',                $intIdEmpresa); 
        $objQuery->setParameter('strEstadoContratoPendiente',   'Activo');      
        $objQuery->setParameter('strformaContrato',             'DIGITAL');     
        
        $arrayResultados['registros'] = $objQuery->getResult();
        
        return $arrayResultados;
    }  
    /**
     * Función que llama al procedimiento que realiza el cambio de estado en los adendum
     * @author Edgar Pin Villavicencio <epin@telconet.ec>
     * @since 03-03-2020
     * @version 1.0
     */
    public function activaAdendum($arrayParametros)
    { 
        $strSql      = "BEGIN

                        DB_COMERCIAL.CMKG_VALIDA_ESTADO_ADENDUM.P_VALIDA_ESTADO(
                            PV_EMPRESA => :Pv_Empresa,
                            PV_ERROR => :Pv_error
                        );
                        END;";
        $strMensaje   = str_repeat(' ', 3000);
        $objStatement = $this->_em->getConnection()->prepare($strSql);
        $objStatement->bindParam('Pv_Empresa', $arrayParametros['strCodEmpresa']);
        $objStatement->bindParam('Pv_Error', $strMensaje);
        $objStatement->execute();
        return trim($strMensaje);
    }

    
     /**    
     * Documentación para el método 'getAdendumConFacturas'.
     *
     * Función que retorna información de los planes según los estados parametrizados.
     * 
     * @param array $arrayParametros [ "planId"           => id del plan
     *                                 "arrayEstadosPlan"  =>array con los estados parametrizados de los planes.
     *                               ]
     * @return array $arrayResultados['registros']
     * 
     * @author Katherine Yager <kyager@telconet.ec>       
     * @version 1.0 11-03-2020
     *
     */
    public function getPlanesContratoDigital($arrayParametros)
    { 
        $strSql = " SELECT  DET.* FROM DB_COMERCIAL.INFO_PLAN_DET DET
                    WHERE DET.plan_id=:intPlanId
                    AND DET.ESTADO IN (:arrayEstadosPlan) ";
        
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        $objQuery->setParameter('intPlanId', $arrayParametros["planId"]);
        $objQuery->setParameter("arrayEstadosPlan",$arrayParametros["arrayEstadosPlan"]);
        
        
        $objRsm->addRootEntityFromClassMetadata('\telconet\schemaBundle\Entity\InfoPlanDet', 'objInfoPlanDet');
        $objQuery->setSQL($strSql);
        $arrayRespuesta = $objQuery->getResult();

        return $arrayRespuesta;
        

    }  
    
    /**
     * Documentación para el método 'findServiciosByPuntoAndSeguimiento'.
     *
     * Método que obtiene los servicios de un punto y los que esten habilitados para realizar seguimiento
     * 
     * @param array $arrayDatos   Listado de parametros a consultar.
     *     
     * @author David León <mdleon@telconet.ec>
     * @version 1.0 26-03-2020
     */
    public function findServiciosByPuntoAndSeguimiento($arrayDatos)
    {
        $arrayResultado = array();
        $objQueryCount  = $this->_em->createQuery();
        $objQueryData   = $this->_em->createQuery();
        $strSelectC     = "SELECT  count(e) ";
        $strSelect      = "SELECT  e ";
        $strWhere       = "";
        
        try
        {
            if($arrayDatos['estados'] != "Todos")
            {
                $strWhere = "AND e.estado = :ESTADO ";
                $objQueryCount->setParameter("ESTADO", $arrayDatos['estados']);
                $objQueryData->setParameter("ESTADO", $arrayDatos['estados']);
            }

            if($arrayDatos['seguimiento'] =true)
            {
                $strFrom = ",schemaBundle:AdmiProducto ap";
                $strWhere .= " AND e.productoId=ap.id  and ap.descripcionProducto in "
                    . "(select d.valor1 from schemaBundle:AdmiParametroCab c, schemaBundle:AdmiParametroDet d"
                    . " where c.nombreParametro='SEGUIMIENTO_PRODUCTOS' and c.id=d.parametroId) ";
            }
            
             $strQuery = " FROM  schemaBundle:InfoServicio e " . $strFrom . "
                           WHERE e.puntoId = :PUNTO " . $strWhere . "
                                order by e.feCreacion ASC";

            $objQueryCount->setParameter("PUNTO", $arrayDatos['idPunto']);
            $objQueryData->setParameter("PUNTO", $arrayDatos['idPunto']);

            $objQueryCount->setDQL($strSelectC . $strQuery);
            $intTotal = $objQueryCount->getSingleScalarResult();

            if($intTotal > 0)
            {
                $objQueryData->setDQL($strSelect . $strQuery);
                $arrayDatos = $objQueryData->getResult();

                $arrayResultado['total']     = $intTotal;
                $arrayResultado['registros'] = $arrayDatos;
            }    
        }
        catch(\Exception $ex)
        {
            $arrayResultado['error'] = $ex->getMessage();
        }
        
        return $arrayResultado;

    }
 
    /**
      * getFechaActivacionServicio
      *
      * Método que retorna la fecha de activación del servicio de internet del punto enviado como parámetro.                                   
      *      
      * @param array $arrayParametros
      * 
      * @return string $strFechaActivacion
      *
      * @author Edgar Holguin <eholguin@telconet.ec>
      * @version 1.0 13-12-2019
      */
    public function getFechaActivacionMinServicio($arrayParametros)
    {
        try
        {
            $strFechaActivacion = str_pad($strFechaActivacion, 2000, " ");
            
            $strSql = "BEGIN :strFechaActivacion := DB_FINANCIERO.FNCK_CAMBIO_FORMA_PAGO.F_GET_FE_ACT_INT(:intIdPunto); END;";
            $objQuery  = $this->_em->getConnection()->prepare($strSql);
            $objQuery->bindParam('intIdPunto',$arrayParametros['intIdPunto']);
            $objQuery->bindParam('strFechaActivacion', $strFechaActivacion);
            $objQuery->execute();
        }
        catch(\Exception $ex)
        {
            error_log('Existio un error en getFechaActivacionMinServicio ' . $ex->getMessage());
        }
        
        return $strFechaActivacion;

    }
    
    /**
     * 
     * Se consulta los logines a regularizarce el Upgrade.
     * 
     * @author David León <mdleon@telconet.ec>
     * @version 1.0 09-06-2020
     * Costo query: 25
     *
     * @return array $arrayRegistros
     * 
     */
    public function getDatosElemento($arrayParametros)
    {
        $objRsm = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $strLoginAux        = $arrayParametros['loginAux'];

        
            $strSql = "select iser.ID_SERVICIO SERVICIO,
                        ap.nombre_tecnico PRODUCTO,
                        ie.NOMBRE_ELEMENTO ELEMENTO,
                        iie.NOMBRE_INTERFACE_ELEMENTO INTERFACE
                 from info_servicio iser, 
                      info_servicio_tecnico ist,
                      DB_INFRAESTRUCTURA.INFO_ELEMENTO ie, 
                      DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO iie,
                      admi_producto ap
                 where iser.LOGIN_AUX=:loginAux
                 and iser.estado=:estado
                 and ist.servicio_id=iser.id_servicio
                 and ie.ID_ELEMENTO=ist.ELEMENTO_ID
                 and iie.elemento_id=ie.ID_ELEMENTO
                 and iie.elemento_id=ist.elemento_id
                 and iie.ID_INTERFACE_ELEMENTO=ist.INTERFACE_ELEMENTO_ID
                 and ist.tipo_enlace=:tipoEnlace
                 and ie.estado=:estado
                 and iser.producto_id=ap.id_producto
              ";

               
        $objQuery->setParameter("estado", 'Activo');
        $objQuery->setParameter("loginAux", $strLoginAux);
        $objQuery->setParameter("tipoEnlace", 'BACKUP');

        
        $objRsm->addScalarResult(strtoupper('SERVICIO'), 'servicio', 'string');
        $objRsm->addScalarResult(strtoupper('PRODUCTO'), 'producto', 'string');
        $objRsm->addScalarResult(strtoupper('ELEMENTO'), 'sw', 'string');
        $objRsm->addScalarResult(strtoupper('INTERFACE'), 'puerto', 'string');

        
        $objQuery->setSQL($strSql);
        
        $arrayRegistros = $objQuery->getResult();
        
        return $arrayRegistros;
    }

    /**
     * Función que sirve para invocar el procedimiento creado para obtener los puntos que se consultarán como logines asociados a servicios Tn
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 19-07-2020
     * 
     * @param array $arrayParametros [
     *                                  "strCedulaCliente"          => cédula del cliente,
     *                                  "strLoginPunto"             => login del punto,
     *                                  "intStart"                  => inicio del pagineo,
     *                                  "intLimit"                  => número de registros del pagineo,
     *                                  "strDatabaseDsn"            => Conexión a la Base de Datos,
     *                                  "strUserComercial"          => Usuario del esquema Comercial,
     *                                  "strPasswordComercial"      => Password del esquema Comercial
     *                                ]
     * @return array $arrayRespuesta [
     *                                  "status"            => OK o ERROR,
     *                                  "mensaje"           => Mensaje de error,
     *                                  "objCursorPuntosMd" => Cursor con la información de los puntos,
     *                                  "intTotalPuntosMd"  => Total de puntos
     *                                ]
     */
    public function getPuntosMdAsociados($arrayParametros)
    {
        $strCedulaCliente           = ( isset($arrayParametros['strCedulaCliente']) && !empty($arrayParametros['strCedulaCliente'])) 
                                        ? $arrayParametros['strCedulaCliente'] : "";
        $strLoginPunto              = ( isset($arrayParametros['strLoginPunto'])  && !empty($arrayParametros['strLoginPunto']))
                                        ? $arrayParametros['strLoginPunto'] : "";
        $intStart                   = ( isset($arrayParametros['intStart']) && !empty($arrayParametros['intStart']) ) 
                                        ? $arrayParametros['intStart'] : 0;
        $intLimit                   = ( isset($arrayParametros['intLimit']) && !empty($arrayParametros['intLimit']) )  
                                        ? $arrayParametros['intLimit'] : 0;
        $strStatus                  = "";
        $strMsjError                = "";
        $intTotalPuntosMd           = 0;
        $strDatabaseDsn             = ( isset($arrayParametros['strDatabaseDsn']) && !empty($arrayParametros['strDatabaseDsn']) )
                                        ? $arrayParametros['strDatabaseDsn'] : null;
        $strUserComercial           = ( isset($arrayParametros['strUserComercial']) && !empty($arrayParametros['strUserComercial']) )
                                        ? $arrayParametros['strUserComercial'] : null;
        $strPasswordComercial       = ( isset($arrayParametros['strPasswordComercial']) 
                                        && !empty($arrayParametros['strPasswordComercial']) ) ? $arrayParametros['strPasswordComercial'] : null;
        try
        {
            if( !empty($strDatabaseDsn) && !empty($strUserComercial) && !empty($strPasswordComercial) )
            {
                $objOciConexion             = oci_connect($strUserComercial, $strPasswordComercial, $strDatabaseDsn);
                $objCursorPuntosMd          = oci_new_cursor($objOciConexion);
                $strSQL                     = "BEGIN DB_COMERCIAL.TECNK_SERVICIOS.P_GET_PUNTOS_MD_ASOCIADOS(
                                                                                                        :strCedulaCliente,
                                                                                                        :strLoginPunto,
                                                                                                        :intStart,
                                                                                                        :intLimit,
                                                                                                        :strStatus,
                                                                                                        :strMsjError,
                                                                                                        :objCursorPuntosMd,
                                                                                                        :intTotalPuntosMd); 
                                               END;";
                $objStmt                    = oci_parse($objOciConexion,$strSQL);
                oci_bind_by_name($objStmt, ":strCedulaCliente",     $strCedulaCliente);
                oci_bind_by_name($objStmt, ":strLoginPunto",        $strLoginPunto);
                oci_bind_by_name($objStmt, ":intStart",             $intStart);
                oci_bind_by_name($objStmt, ":intLimit",             $intLimit);
                oci_bind_by_name($objStmt, ":strStatus",            $strStatus, 5);
                oci_bind_by_name($objStmt, ":strMsjError",          $strMsjError, 4000);
                oci_bind_by_name($objStmt, ":objCursorPuntosMd",    $objCursorPuntosMd, -1, OCI_B_CURSOR);
                oci_bind_by_name($objStmt, ":intTotalPuntosMd",     $intTotalPuntosMd, 10);
                oci_execute($objStmt);
                oci_execute($objCursorPuntosMd, OCI_DEFAULT);
            }
            else
            {
                throw new \Exception('No se han enviado los parámetros adecuados para consultar los puntos MD. Database('.
                                     $strDatabaseDsn.'), UsrComercial('.$strUserComercial.'), PasswordComercial('.$strPasswordComercial.').');
            }
        }
        catch(\Exception $e)
        {
            $strStatus      = "ERROR";
            $strMsjError    = "Ha ocurrido una excepción al intentar realizar la consulta";
            error_log("Error en getPuntosMdAsociados ".$e->getMessage());
            
        }
        $arrayRespuesta = array("status"                => $strStatus,
                                "mensaje"               => $strMsjError,
                                "objCursorPuntosMd"     => $objCursorPuntosMd,
                                "intTotalPuntosMd"      => $intTotalPuntosMd);
        return $arrayRespuesta;
    }

    /**
     * Función que obtiene el Json de la consulta de puntos MD de acuerdo a los parámetros de búsqueda
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 19-07-2020
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 29-07-2020 Se agrega la obtención del ID_PERSONA_ROL de la consulta de puntos MD y se valida si éste valor se encuentra
     *                         parametrizado dentro de los ids a los cuales no se le debe validar si tiene o no deuda
     * 
     * @param array $arrayParametros [
     *                                  "strCedulaCliente"          => cédula del cliente,
     *                                  "strLoginPunto"             => login del punto,
     *                                  "intStart"                  => inicio del pagineo,
     *                                  "intLimit"                  => número de registros del pagineo,
     *                                  "strDatabaseDsn"            => Conexión a la Base de Datos,
     *                                  "strUserComercial"          => Usuario del esquema Comercial,
     *                                  "strPasswordComercial"      => Password del esquema Comercial
     *                                ]
     * 
     * @return array $arrayRespuesta [
     *                                  "status"            => OK o ERROR,
     *                                  "mensaje"           => Mensaje de error,
     *                                  "arrayResultado"    => Cursor con la información de los puntos
     *                                  "intTotal"          => Total de puntos
     *                                ]
     */
    public function getJsonPuntosMdAsociados($arrayParametros)
    {
        $strMensaje             = "";
        $arrayResultado         = array();
        $boolFalse              = false;
        $arrayRespuestaPuntosMd = $this->getPuntosMdAsociados($arrayParametros);
        $strStatus              = $arrayRespuestaPuntosMd["status"];
        if($strStatus === "OK")
        {
            $intTotal           = $arrayRespuestaPuntosMd["intTotalPuntosMd"];
            $objCursorPuntosMd   = $arrayRespuestaPuntosMd["objCursorPuntosMd"];
            if(!empty($objCursorPuntosMd))
            {
                while(($arrayRowCursor = oci_fetch_array($objCursorPuntosMd, OCI_ASSOC + OCI_RETURN_NULLS)) != $boolFalse)
                {
                    $intIdPersonaRolMdAsociado  = $arrayRowCursor["ID_PERSONA_ROL"];
                    $arraySaldoCliente          = $this->_em->getRepository('schemaBundle:InfoDocumentoFinancieroCab')
                                                            ->obtieneDeudaPorCliente(array("intIdPunto" => $arrayRowCursor["ID_PUNTO"]));
                    $strOmiteDeudaCliente       = "NO";
                    if(isset($intIdPersonaRolMdAsociado) && !empty($intIdPersonaRolMdAsociado))
                    {
                        $arrayParamsOmiteDeudaCliente   = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->getOne('PARAMETROS_ASOCIADOS_A_SERVICIOS_TN',
                                                                             '',
                                                                             '',
                                                                             '',
                                                                             'PUNTO_MD_ASOCIADO',
                                                                             'ID_PERSONA_ROL_OMITE_DEUDA_CLIENTE',
                                                                             $intIdPersonaRolMdAsociado,
                                                                             '',
                                                                             '',
                                                                             '');
                        if(isset($arrayParamsOmiteDeudaCliente) && !empty($arrayParamsOmiteDeudaCliente))
                        {
                            $strOmiteDeudaCliente   = "SI";
                        }
                    }
                    
                    $arrayResultado[]   = array("idServicioPuntoMdAsociado"                 => $arrayRowCursor["ID_SERVICIO"],
                                                "idPuntoMdAsociado"                         => $arrayRowCursor["ID_PUNTO"],
                                                "loginPuntoMdAsociado"                      => $arrayRowCursor["LOGIN"],
                                                "nombrePlanPuntoMdAsociado"                 => $arrayRowCursor["NOMBRE_PLAN"],
                                                "nombreTipoNegocioPuntoMdAsociado"          => $arrayRowCursor["NOMBRE_TIPO_NEGOCIO"],
                                                "estadoServicioPuntoMdAsociado"             => $arrayRowCursor["ESTADO_SERVICIO"],
                                                "saldoTotalClientePuntoMdAsociado"          => $arraySaldoCliente["saldoTotal"],
                                                "omiteDeudaClientePuntoMdAsociado"          => $strOmiteDeudaCliente,
                                                "tieneServiciosAdicionalesPuntoMdAsociado"  => $arrayRowCursor["TIENE_SERVICIOS_ADICIONALES"],
                                                "tipoNegocioPermitidoPuntoMdAsociado"       => $arrayRowCursor["TIPO_NEGOCIO_PERMITIDO"]
                                                );
                }
            }
        }
        else
        {
            $intTotal   = 0;
            $strMensaje = $arrayRespuestaPuntosMd["mensaje"];
        }
        $strJsonData    = json_encode(array('status'            => $strStatus,
                                            'mensaje'           => $strMensaje,
                                            'intTotal'          => $intTotal, 
                                            'arrayResultado'    => $arrayResultado));
        return $strJsonData;
    }

     /**
     * Documentación para el método 'getPromocionesContrato'.
     * 
     * Método que retorna datos de la promoción tentativa para mostrar en el contrato Digital.
     *
     * @param array $arrayParametros []
     *              'Pn_IdPunto'     => Id del tipo de promoción,
     *              'Pn_IdServicio'     => Id del tipo de promoción,
     *              'Pv_CodigoGrupoPromocion'     => Id del tipo de promoción,
     *              'Pv_CodEmpresa'     => Id del tipo de promoción
     * 
     * @return Array $arrayDatos
     * 
     * @author Katherine Yager <kyager@telconet.ec>
     * @version 1.0 25-10-2019
     */
    public function getPromocionesContratoRegularizacion($arrayParametros)
    {
        error_log("entro al package de regularziacion");
        $arrayDatos      = array();
        $intDescuento      = 0;
        $intDescuento      = str_pad($intDescuento, 30, " ");
        $intCantPeriodo    = 0;
        $intCantPeriodo    = str_pad($intCantPeriodo, 30, " ");
        $strObservacion    = '';
        $strObservacion    = str_pad($strObservacion, 5000, " ");

         try
        {

                $strSql = "BEGIN
                            DB_COMERCIAL.CMKG_PROMOCIONES_UTIL_REG.P_MAPEO_PROM_TENTATIVA
                            (
                                :Pv_IdPunto,
                                :Pn_IdServicio,
                                :Pv_CodigoGrupoPromocion,
                                :Pv_CodEmpresa,
                                :Pv_Fecha,
                                :Pv_FormaPago,
                                :Pn_Descuento,
                                :Pn_CantPeriodo,
                                :Pv_Observacion
                            );
                           END;";
                
                $objStmt = $this->_em->getConnection()->prepare($strSql);
               
                $objStmt->bindParam('Pv_IdPunto'    , $arrayParametros['intIdPunto']);
                $objStmt->bindParam('Pn_IdServicio' , $arrayParametros['intIdServicio']);
                $objStmt->bindParam('Pv_CodigoGrupoPromocion', $arrayParametros['strCodigoGrupoPromocion']);
                $objStmt->bindParam('Pv_CodEmpresa' , $arrayParametros['intCodEmpresa']);
                $objStmt->bindParam('Pv_Fecha'      , $arrayParametros['feAprobacion']);
                $objStmt->bindParam('Pv_FormaPago'  , $arrayParametros['strFormaPago']);
                $objStmt->bindParam('Pn_Descuento'  , $intDescuento);
                $objStmt->bindParam('Pn_CantPeriodo', $intCantPeriodo);

                $objStmt->bindParam('Pv_Observacion', $strObservacion);
                

                $objStmt->execute();

        }
        catch(\Exception $ex)
        {
             $arrayDatos['strCodError']= '503';
             $arrayDatos['strMensaje'] = $ex->getMessage();
        }
        
        $arrayDatos['intDescuento']   = $intDescuento;
        $arrayDatos['intCantPeriodo'] = $intCantPeriodo;
        $arrayDatos['strObservacion'] = $strObservacion;
        
        return $arrayDatos;
        
    }

    /**
     * Función que obtiene los servicios McAfee dentro del plan o como producto adicional
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 08-08-2019
     * 
     * @param array $arrayParametros [ "intIdPunto" => id del punto ]
     * @return array $arrayResultadoServiciosMcAfee
     * costoQuery: 26
     */
    public function getPromocionMensualRegularizacion($intServicioId)
    {
        try
        {
            $objRsm = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery        = $this->_em->createNativeQuery(null, $objRsm);
            $strSql             = "SELECT idmp.PORCENTAJE, max(idmp.PERIODO) as PERIODO 
                                   FROM DB_COMERCIAL.INFO_DETALLE_MAPEO_PROMO idmp, DB_COMERCIAL.INFO_SERVICIO iser
                                   WHERE iser.ID_SERVICIO=:intServicio
                                   AND idmp.PUNTO_ID=iser.PUNTO_ID
                                   AND idmp.TIPO_PROMOCION='PROM_MPLA'
                                   group by idmp.PORCENTAJE";
            $objRsm->addScalarResult('PORCENTAJE', 'porcentaje', 'integer');
            $objRsm->addScalarResult('PERIODO', 'periodo', 'integer');
            $objNtvQuery->setParameter('intServicio', $intServicioId);
            $objNtvQuery->setSQL($strSql);
            $arrayResultado = $objNtvQuery->getResult();
            
        }
        catch (\Exception $e) 
        {
            throw $e;
        }
        return $arrayResultado;
    }
    
    /*
     * Documentación para la función 'getInformacionVentasTelcosCRM'.
     * 
     * Función que retorna las ordenes de servicio consultadas.
     *
     * @param array $arrayParametros [strPrefijoEmpresa    => Prefijo de la empresa que realizará la consulta para la información comercial
     *                                strFechaInicio       => Fecha de inicio de la búsqueda
     *                                strFechaFin          => Fecha final de la búsqueda
     *                                strCategoria         => Categoría de los productos a buscar
     *                                strGrupo             => Grupo de los productos a buscar
     *                                strSubgrupo          => Subgrupo de los productos a buscar
     *                                strUsrCreacion       => Usuario en sessión
     *                                strIpCreacion        => Ip del usuario en sessión
     *                                strFrecuencia        => Frecuencia facturación del servicio
     *                                strDatabaseDsn       => Base de datos a la cual se conectará para realizar la consulta
     *                                strUserComercial     => Usuario del esquema comercial 'DB_COMERCIAL'
     *                                strTipoPersonal      => El tipo del personal en sessión si es 'VENDEDOR' o 'SUBGERENTE'
     *                                intIdPersonEmpresaRol=> Id del usuario en sessión
     *                                strOpcionSelect      => Bandera que indica lo que se desea obtener del SELECT
     *                                strEmailUsrSession   => Email del usuario en sessión
     *                                strPasswordComercial => Password del esquema comercial 'DB_COMERCIAL' ]
     * 
     * @return array $arrayResultado  ['objOrdenes  '        => 'Cursor con el resultado del procedimiento',
     *                                 'strMensajeRespuesta' => 'Mensaje de respuesta devuelta por el procedimiento',
     *                                 'strMensajeError'     => 'Mensaje de error']
     *
     * @author Kevin Baque <kbaque@telconet.ec>
     * @version 1.0 21-09-2020
     */

    public function getInformacionVentasTelcosCRM($arrayParametros)
    {
        $objOrdenes     = null;
        $arrayResultado = array();
        try
        {
            $strPrefijoEmpresa     = ( isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) )
                                     ? $arrayParametros['strPrefijoEmpresa'] : null;
            $strFechaInicio        = ( isset($arrayParametros['strFechaInicio']) && !empty($arrayParametros['strFechaInicio']) )
                                     ? $arrayParametros['strFechaInicio'] : null;
            $strFechaFin           = ( isset($arrayParametros['strFechaFin']) && !empty($arrayParametros['strFechaFin']) )
                                     ? $arrayParametros['strFechaFin'] : null;
            $strDatabaseDsn        = ( isset($arrayParametros['strDatabaseDsn']) && !empty($arrayParametros['strDatabaseDsn']) )
                                     ? $arrayParametros['strDatabaseDsn'] : null;
            $strUserComercial      = ( isset($arrayParametros['strUserComercial']) && !empty($arrayParametros['strUserComercial']) )
                                     ? $arrayParametros['strUserComercial'] : null;
            $strPasswordComercial  = ( isset($arrayParametros['strPasswordComercial']) && !empty($arrayParametros['strPasswordComercial']) )
                                     ? $arrayParametros['strPasswordComercial'] : null;                                     
            $strTipoOrdenes        = ( isset($arrayParametros['strTipoOrdenes']) && !empty($arrayParametros['strTipoOrdenes']) )
                                     ? $arrayParametros['strTipoOrdenes'] : null;
            if( !empty($strPrefijoEmpresa) && !empty($strFechaInicio) && !empty($strFechaFin) && !empty($strTipoOrdenes) )
            {
                $objOciConexion  = oci_connect($strUserComercial, $strPasswordComercial, $strDatabaseDsn);
                $objOrdenes      = oci_new_cursor($objOciConexion);
                $objParametros   = oci_new_descriptor($objOciConexion);
                $objParametros->writetemporary(json_encode($arrayParametros, JSON_NUMERIC_CHECK));
                $strSQL          = "BEGIN DB_COMERCIAL.COMEK_CONSULTAS.P_GET_ORDENES_TELCOS_CRM( :arrayParametros, ".
                                                                                                ":strMensajeRespuesta, ".
                                                                                                ":objOrdenes ); END;";
                $objStmt = oci_parse($objOciConexion, $strSQL);
                oci_bind_by_name($objStmt,':arrayParametros',        $objParametros, -1, SQLT_CLOB);
                oci_bind_by_name($objStmt, ":strMensajeRespuesta",   $strMensajeRespuesta, 30000);
                oci_bind_by_name($objStmt, ":objOrdenes",            $objOrdenes, -1, OCI_B_CURSOR);
                oci_execute($objStmt);
                oci_execute($objOrdenes, OCI_DEFAULT);
                oci_commit($objOciConexion);
            }
            else
            {
                throw new \Exception( 'No se han enviado los parámetros adecuados para consultar la información de ventas. - Prefijo('.
                                      $strPrefijoEmpresa.'), FechaInicio('.$strFechaInicio.'), FechaFin('.$strFechaFin.'), TipoOrdenes('.
                                      $strTipoOrdenes.')' ); 
            }
        }
        catch(\Exception $ex)
        {
            $strMensajeError = $ex->getMessage();
        }
        $arrayResultado['objOrdenes']          = $objOrdenes;
        $arrayResultado['strMensajeRespuesta'] = $strMensajeRespuesta;
        $arrayResultado['strMensajeError']     = $strMensajeError;
        return $arrayResultado;
    }
    /*
     * Función encargada de retornar la validez para
     * habilitar el botón de ROSA(reingreso de orden de servicio automática).
     *
     * costo 30
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 22-08-2019
     *
     * @param  Array $arrayParametros [
     *                                  intIdServicio         = Id del servicio,
     *                                  strEstadoServicio     = Estado del servicio.
     *                                  strNombreParametroCab = Nombre del parámetro cab.
     *                                  strNombreParametroDet = Nombre del parámetro det.
     *                                  strEstadoParametro    = Estado del parámetro.
     *                                  strEstadoServicioHist = Estado del servicio historial.
     *                                  strOpcion             = Opción para validar.
     *                                ]
     * 
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.1 18-02-2020 - Se parametrizan los motivos de Rechazo y Anulación de Orden de servicio "PARAMETROS_REINGRESO_OS_AUTOMATICA"
     *                           deacuerdo a la descripción "MOTIVOS_RECHAZO_ANULACION_OS_AUTOMATICA" y se agrega en el query casteo a numero entero
     *                           dado que el campo valor1 que hace referencia al Id Motivo es string.
     * 
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.2 18-05-2021 - Se agrega al query validación que la OS tenga el contrato asociado con un estado activo y que 
     *                           el cliente también se encuentre en estado activo, se parametrizan los estados de clientes 'ESTADOS_CLIENTES'
     *                           y de contrato 'ESTADOS_CONTRATOS' con el parametro: PARAMETROS_REINGRESO_OS_AUTOMATICA
     * 
     * @return Array $arrayRespuesta
     */
    public function getValidezServicio($arrayParametros)
    {
        try
        {
            $objRsm   = new ResultSetMappingBuilder($this->_em);
            $objQuery = $this->_em->createNativeQuery(null, $objRsm);

            $strSqlSelect =  "SELECT ISER.ID_SERVICIO AS ID_SERVICIO, ".
                                    "ISER.ESTADO AS ESTADO_SERVICIO, ".
                                    "ISERHIS.ESTADO AS ESTADO_SERVICIO_HISTORIAL, ".
                                    "TO_CHAR(SYSDATE,'RRRR-MM-DD') AS FECHA_ACTUAL, ".
                                    "TO_CHAR(ISERHIS.FE_CREACION,'RRRR-MM-DD') AS FECHA_HISTORIAL, ".
                                   "(TRUNC(SYSDATE) - CAST(TRUNC(ISERHIS.FE_CREACION) AS DATE)) AS DIAS ";

            $strSqlFrom   =  "FROM DB_COMERCIAL.INFO_SERVICIO           ISER, ".
                                  "DB_COMERCIAL.INFO_SERVICIO_HISTORIAL ISERHIS ";

            $strSqlWhere  = "WHERE ISER.ID_SERVICIO = ISERHIS.SERVICIO_ID ".
                              "AND ISER.ID_SERVICIO = :intIdServicio ".
                              "AND ISER.ESTADO      = :strEstadoServicio ";

            if($arrayParametros['strOpcion'] === 'validaEstadosCliente')
            {
                $strSqlFrom .= " ,DB_COMERCIAL.INFO_PUNTO PTO, ".
                               " DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL PEMPROL ";
                
                $strSqlWhere  .= " AND ISER.PUNTO_ID               = PTO.ID_PUNTO ".
                                 " AND PTO.PERSONA_EMPRESA_ROL_ID  = PEMPROL.ID_PERSONA_ROL ".
                                 " AND PEMPROL.ESTADO              IN (SELECT PD.VALOR1 ".
                                 "    FROM DB_GENERAL.ADMI_PARAMETRO_DET PD, ".
                                 "    DB_GENERAL.ADMI_PARAMETRO_CAB PC ".
                                 "    WHERE PC.ID_PARAMETRO    = PD.PARAMETRO_ID ".
                                 "     AND PC.NOMBRE_PARAMETRO = :strNombreParametroCab ".
                                 "     AND PC.ESTADO           = :strEstadoParametro ".
                                 "     AND PD.ESTADO           = :strEstadoParametro ".
                                 "     AND PD.DESCRIPCION      = :strNombreParametroDet ) ";
                
                $objQuery->setParameter("strNombreParametroCab" , $arrayParametros['strNombreParametroCab']);
                $objQuery->setParameter("strNombreParametroDet" , $arrayParametros['strNombreParametroDet']);
                $objQuery->setParameter("strEstadoParametro"    , $arrayParametros['strEstadoParametro']);
            } 
            if($arrayParametros['strOpcion'] === 'validaEstadosContrato')
            {
                $strSqlFrom .= " ,DB_COMERCIAL.INFO_PUNTO PTO, ".
                               " DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL PEMPROL, ".
                               " DB_COMERCIAL.INFO_CONTRATO CONT ";
                
                $strSqlWhere  .= " AND ISER.PUNTO_ID               = PTO.ID_PUNTO ".
                                 " AND PTO.PERSONA_EMPRESA_ROL_ID  = PEMPROL.ID_PERSONA_ROL ".
                                 " AND PEMPROL.ID_PERSONA_ROL      = CONT.PERSONA_EMPRESA_ROL_ID ".
                                 " AND CONT.ESTADO              IN (SELECT PD.VALOR1 ".
                                 "    FROM DB_GENERAL.ADMI_PARAMETRO_DET PD, ".
                                 "    DB_GENERAL.ADMI_PARAMETRO_CAB PC ".
                                 "    WHERE PC.ID_PARAMETRO    = PD.PARAMETRO_ID ".
                                 "     AND PC.NOMBRE_PARAMETRO = :strNombreParametroCab ".
                                 "     AND PC.ESTADO           = :strEstadoParametro ".
                                 "     AND PD.ESTADO           = :strEstadoParametro ".
                                 "     AND PD.DESCRIPCION      = :strNombreParametroDet ) ";
                
                $objQuery->setParameter("strNombreParametroCab" , $arrayParametros['strNombreParametroCab']);
                $objQuery->setParameter("strNombreParametroDet" , $arrayParametros['strNombreParametroDet']);
                $objQuery->setParameter("strEstadoParametro"    , $arrayParametros['strEstadoParametro']);
            }
            if ($arrayParametros['strOpcion'] === 'validarSector')
            {
                $strSqlSelect .=  " ,CASE  ".
                                  "   WHEN PCA.FE_ULT_MOD IS NOT NULL AND PCA.FE_ULT_MOD > ISERHIS.FE_CREACION ".
                                  "        AND PTOPAR.ID_PARROQUIA != PAR.ID_PARROQUIA ".
                                  "       THEN 'S'   ".
                                  "   WHEN PCA.FE_CREACION IS NOT NULL AND PCA.FE_CREACION > ISERHIS.FE_CREACION ".
                                  "        AND PTOPAR.ID_PARROQUIA != PAR.ID_PARROQUIA  ".
                                  "       THEN 'S'  ".
                                  "   ELSE 'N' ".
                                  "   END AS MODIFICA_DATOS_GEOGRAFICOS ";
                  
                $strSqlFrom   .= " ,DB_COMERCIAL.INFO_PUNTO PTO, DB_COMERCIAL.INFO_PUNTO_CARACTERISTICA PCA, ".
                                   " DB_COMERCIAL.ADMI_CARACTERISTICA CA, ".
                                   " DB_GENERAL.ADMI_SECTOR SEC, DB_GENERAL.ADMI_PARROQUIA PAR, ".
                                   " DB_GENERAL.ADMI_SECTOR PTOSEC, DB_GENERAL.ADMI_PARROQUIA PTOPAR ";
                  
                $strSqlWhere  .= " AND PTO.ID_PUNTO = ISER.PUNTO_ID ".
                                  " AND PTO.ID_PUNTO = PCA.PUNTO_ID ".
                                  " AND PCA.CARACTERISTICA_ID = CA.ID_CARACTERISTICA ".
                                  " AND PCA.ESTADO            = :strEstadoCaract ".
                                  " AND COALESCE(TO_NUMBER(REGEXP_SUBSTR(PCA.VALOR,'^\d+')),0) = SEC.ID_SECTOR ".
                                  " AND SEC.PARROQUIA_ID    = PAR.ID_PARROQUIA ".
                                  " AND PTO.SECTOR_ID       = PTOSEC.ID_SECTOR ".
                                  " AND PTOSEC.PARROQUIA_ID = PTOPAR.ID_PARROQUIA ".
                                  " AND CA.DESCRIPCION_CARACTERISTICA   = :strCaracteristica ";
                
                $objQuery->setParameter("strEstadoCaract" , $arrayParametros['strEstadoCaract']);                
                $objQuery->setParameter("strCaracteristica" , $arrayParametros['strCaracteristica']);                
            }
            if ($arrayParametros['strOpcion'] === 'validarCobertura')
            {
                $strSqlSelect .=  " ,CASE  ".
                                  "   WHEN PCA.FE_ULT_MOD IS NOT NULL AND PCA.FE_ULT_MOD > ISERHIS.FE_CREACION ".
                                  "        AND PTOJU.ID_JURISDICCION != JU.ID_JURISDICCION ".
                                  "       THEN 'S'   ".
                                  "   WHEN PCA.FE_CREACION IS NOT NULL AND PCA.FE_CREACION > ISERHIS.FE_CREACION ".
                                  "        AND PTOJU.ID_JURISDICCION != JU.ID_JURISDICCION  ".
                                  "       THEN 'S'  ".
                                  "   ELSE 'N' ".
                                  "   END AS MODIFICA_DATOS_GEOGRAFICOS ";
                
                $strSqlFrom   .= " ,DB_COMERCIAL.INFO_PUNTO PTO, DB_COMERCIAL.INFO_PUNTO_CARACTERISTICA PCA, ".
                                 " DB_COMERCIAL.ADMI_CARACTERISTICA CA, DB_INFRAESTRUCTURA.ADMI_JURISDICCION JU, ".
                                 " DB_INFRAESTRUCTURA.ADMI_JURISDICCION PTOJU ";
                
                $strSqlWhere  .= " AND PTO.ID_PUNTO = ISER.PUNTO_ID ".
                                  " AND PTO.ID_PUNTO = PCA.PUNTO_ID ".
                                  " AND PCA.CARACTERISTICA_ID = CA.ID_CARACTERISTICA ".
                                  " AND PCA.ESTADO            = :strEstadoCaract ".
                                  " AND COALESCE(TO_NUMBER(REGEXP_SUBSTR(PCA.VALOR,'^\d+')),0) = JU.ID_JURISDICCION ".
                                  " AND CA.DESCRIPCION_CARACTERISTICA   = :strCaracteristica ".
                                  " AND PTO.PUNTO_COBERTURA_ID          = PTOJU.ID_JURISDICCION ";
                
                $objQuery->setParameter("strEstadoCaract" , $arrayParametros['strEstadoCaract']);                
                $objQuery->setParameter("strCaracteristica" , $arrayParametros['strCaracteristica']); 
            }
            if ($arrayParametros['strOpcion'] === 'motivos')
            {
                $strSqlFrom .= ", DB_GENERAL.ADMI_MOTIVO        AMOTIVO, ".
                                 "DB_GENERAL.ADMI_PARAMETRO_CAB APCAB, ".
                                 "DB_GENERAL.ADMI_PARAMETRO_DET APDET ";

                $strSqlWhere .= "AND AMOTIVO.ID_MOTIVO      = ISERHIS.MOTIVO_ID ".
                                "AND APCAB.NOMBRE_PARAMETRO = :strNombreParametroCab ".
                                "AND APDET.DESCRIPCION      = :strNombreParametroDet ".
                                "AND APCAB.ID_PARAMETRO     = APDET.PARAMETRO_ID ".
                                "AND COALESCE(TO_NUMBER(REGEXP_SUBSTR(APDET.VALOR1,'^\d+')),0) = AMOTIVO.ID_MOTIVO ".
                                "AND APCAB.ESTADO           = :strEstadoParametro ".
                                "AND APDET.ESTADO           = :strEstadoParametro ";

                $strAndSubQuery = "AND ISERHISMAX.MOTIVO_ID IS NOT NULL";

                $objQuery->setParameter("strNombreParametroCab" , $arrayParametros['strNombreParametroCab']);
                $objQuery->setParameter("strNombreParametroDet" , $arrayParametros['strNombreParametroDet']);
                $objQuery->setParameter("strEstadoParametro"    , $arrayParametros['strEstadoParametro']);
            }
            if ($arrayParametros['strOpcion'] === 'reingresoEjecutado')
            {
                $strSqlWhere .= "AND NOT EXISTS (SELECT 1 FROM INFO_SERVICIO_CARACTERISTICA SC, ".
                                "ADMI_CARACTERISTICA CA ".
                                "WHERE SC.CARACTERISTICA_ID                                = CA.ID_CARACTERISTICA ".
                                "AND CA.DESCRIPCION_CARACTERISTICA                         = :strCaracteristica ".
                                "AND SC.ESTADO                                             = :strEstadoCaract ".            
                                "AND COALESCE(TO_NUMBER(REGEXP_SUBSTR(SC.VALOR,'^\d+')),0) = ISER.ID_SERVICIO ) ";
                
                $objQuery->setParameter("strCaracteristica" , $arrayParametros['strCaracteristica']);
                $objQuery->setParameter("strEstadoCaract"   , $arrayParametros['strEstadoCaract']);
            }  
            if ($arrayParametros['strOpcion'] === 'reingresoFinalizado')
            {
                $strSqlWhere .= "AND NOT EXISTS (SELECT 1 FROM INFO_SERVICIO_CARACTERISTICA SC,".
                                "INFO_SERVICIO_CARACTERISTICA SC2, ".
                                "ADMI_CARACTERISTICA CA, ".
                                "ADMI_CARACTERISTICA CA2 ".
                                "WHERE SC.CARACTERISTICA_ID                                = CA.ID_CARACTERISTICA ".
                                "AND CA.DESCRIPCION_CARACTERISTICA                         = :strCaracteristica ".
                                "AND SC.ESTADO                                             = :strEstadoCaract ".            
                                "AND COALESCE(TO_NUMBER(REGEXP_SUBSTR(SC.VALOR,'^\d+')),0) = ISER.ID_SERVICIO ".
                                "AND SC.SERVICIO_ID                                        = SC2.SERVICIO_ID ".
                                "AND SC2.CARACTERISTICA_ID                                 = CA2.ID_CARACTERISTICA ".
                                "AND CA2.DESCRIPCION_CARACTERISTICA                        = :strCaracteristica2 ".
                                "AND SC2.ESTADO                                            = :strEstadoCaract2 ) ";
                
                $objQuery->setParameter("strCaracteristica" , $arrayParametros['strCaracteristica']);
                $objQuery->setParameter("strEstadoCaract"   , $arrayParametros['strEstadoCaract']);
                $objQuery->setParameter("strCaracteristica2" , $arrayParametros['strCaracteristica2']);
                $objQuery->setParameter("strEstadoCaract2"   , $arrayParametros['strEstadoCaract2']);
            }     
            $strSqlWhere .= "AND ISERHIS.ID_SERVICIO_HISTORIAL = ".
                                "(SELECT MAX(ISERHISMAX.ID_SERVICIO_HISTORIAL) ".
                                    "FROM DB_COMERCIAL.INFO_SERVICIO_HISTORIAL ISERHISMAX ".
                                 "WHERE ISERHISMAX.ESTADO      = :strEstadoServicioHist ".
                                   "AND ISERHISMAX.SERVICIO_ID = ISER.ID_SERVICIO ".
                                   "$strAndSubQuery) ";

            $objQuery->setParameter("intIdServicio"         , $arrayParametros['intIdServicio']);
            $objQuery->setParameter("strEstadoServicio"     , $arrayParametros['strEstadoServicio']);
            $objQuery->setParameter("strEstadoServicioHist" , $arrayParametros['strEstadoServicioHist']);

            $objRsm->addScalarResult('ID_SERVICIO'               ,'idServicio'              , 'integer');
            $objRsm->addScalarResult('ESTADO_SERVICIO'           ,'estadoServicio'          , 'string');
            $objRsm->addScalarResult('ESTADO_SERVICIO_HISTORIAL' ,'estadoServicioHistorial' ,'string');
            $objRsm->addScalarResult('FECHA_ACTUAL'              ,'fechaActual'             ,'string');
            $objRsm->addScalarResult('FECHA_HISTORIAL'           ,'fechaHistorial'          ,'string');
            $objRsm->addScalarResult('DIAS'                      ,'dias'                    ,'integer');

            if ($arrayParametros['strOpcion'] === 'validarSector' || $arrayParametros['strOpcion'] === 'validarCobertura')
            {
                $objRsm->addScalarResult('MODIFICA_DATOS_GEOGRAFICOS', 'modificaDatosGeograficos', 'string');                
            }
            $objQuery->setSQL($strSqlSelect.$strSqlFrom.$strSqlWhere);

            $arrayRespuesta = array('status' => 'ok',
                                    'result' => $objQuery->getResult());                                
        }
        catch (\Exception $objException)
        {
            $arrayRespuesta = array('status' => 'fail',
                                    'message' => $objException->getMessage());
        }
        return $arrayRespuesta;
    }
    
    /**
     * Costo 6
     *
     * getEstadosServiciosValidos
     *
     * Obtiene la cantidad de servicios por punto desacuerdo a los estado parametrizados.
     *
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 17-12-2020
     *
     * @param  array $arrayParametros["intIdPunto"           => id del Punto
     *                                "strNombreParametro"   => Nombre de Parametro
     *                                "strEstado"            => Estado del parametro
     *                                "strDetParametro"      => Detalle de Parametro]
     *
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.1 27-01-2021 - Se agrega a la validacion que considere el plan con servicio de internet.
     * 
     */
    public function getEstadosServiciosValidos($arrayParametros)
    {
        $intExisteServicio = 0;
        $strQuery          = $this->_em->createQuery();

        $objRsm    = new ResultSetMappingBuilder($this->_em);
        $objQuery  = $this->_em->createNativeQuery(null, $objRsm);
       
        $strSql  = " SELECT COUNT(ISE.ID_SERVICIO) AS CANTIDAD
                            FROM DB_COMERCIAL.INFO_SERVICIO ISE, DB_COMERCIAL.INFO_PLAN_CAB PLANC, DB_COMERCIAL.INFO_PLAN_DET PLAND, 
                            DB_COMERCIAL.ADMI_PRODUCTO PROD
                            WHERE ISE.PUNTO_ID        = :intIdPunto
                            AND ISE.PLAN_ID           = PLANC.ID_PLAN
                            AND PLANC.ID_PLAN         = PLAND.PLAN_ID
                            AND PLAND.PRODUCTO_ID     = PROD.ID_PRODUCTO
                            AND PROD.CODIGO_PRODUCTO  IN (SELECT PD.VALOR1
                                                         FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                           DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                         WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                         AND PC.NOMBRE_PARAMETRO = :strNombreParametro
                                                         AND PC.ESTADO           = :strEstado
                                                         AND PD.ESTADO           = :strEstado
                                                         AND PD.DESCRIPCION      = :strDetParamCodProd)
                            AND ISE.ESTADO NOT IN (SELECT PD.VALOR1
                                                         FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                           DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                         WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                         AND PC.NOMBRE_PARAMETRO = :strNombreParametro
                                                         AND PC.ESTADO           = :strEstado
                                                         AND PD.ESTADO           = :strEstado
                                                         AND PD.DESCRIPCION      = :strDetParametro) ";
            
        $objQuery->setParameter("intIdPunto",$arrayParametros["intIdPunto"]);        
        $objQuery->setParameter("strNombreParametro",$arrayParametros["strNombreParametro"]);
        $objQuery->setParameter("strEstado",$arrayParametros["strEstado"]);
        $objQuery->setParameter("strDetParametro",$arrayParametros["strDetParametro"]);
        $objQuery->setParameter("strDetParamCodProd",$arrayParametros["strDetParamCodProd"]);

        $objRsm->addScalarResult('CANTIDAD', 'cantidad', 'integer');

        $objQuery->setSQL($strSql);

        $intExisteServicio = $objQuery->getSingleScalarResult();

        return $intExisteServicio;
    }

    /**
     * Costo 11
     *
     * getValidaServicioInternet
     *
     * Obtiene si un servicio posee plan con producto de internet dedicado en base al codigo "INTD" parametrizado,
     * parametro: "PARAMETROS_REINGRESO_OS_AUTOMATICA" detalle "CODIGO_PRODUCTO"
     *
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 21-07-2021
     *
     * @param  array $arrayParametros["intIdServicio"        => id del Servicio
     *                                "strNombreParametro"   => Nombre de Parametro
     *                                "strEstado"            => Estado del parametro
     *                                "strDetParamCodProd"   => Detalle de Parametro]    
     * 
     */
    public function getValidaServicioInternet($arrayParametros)
    {
        $intServicioInternet = 0;
        $strQuery            = $this->_em->createQuery();

        $objRsm    = new ResultSetMappingBuilder($this->_em);
        $objQuery  = $this->_em->createNativeQuery(null, $objRsm);
       
        $strSql  = " SELECT COUNT(ISE.ID_SERVICIO) AS CANTIDAD
                            FROM DB_COMERCIAL.INFO_SERVICIO ISE, DB_COMERCIAL.INFO_PLAN_CAB PLANC, DB_COMERCIAL.INFO_PLAN_DET PLAND, 
                            DB_COMERCIAL.ADMI_PRODUCTO PROD
                            WHERE ISE.ID_SERVICIO     = :intIdServicio
                            AND ISE.PLAN_ID           = PLANC.ID_PLAN
                            AND PLANC.ID_PLAN         = PLAND.PLAN_ID
                            AND PLAND.PRODUCTO_ID     = PROD.ID_PRODUCTO
                            AND PROD.CODIGO_PRODUCTO  IN (SELECT PD.VALOR1
                                                         FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                           DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                         WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                         AND PC.NOMBRE_PARAMETRO = :strNombreParametro
                                                         AND PC.ESTADO           = :strEstado
                                                         AND PD.ESTADO           = :strEstado
                                                         AND PD.DESCRIPCION      = :strDetParamCodProd) ";
            
        $objQuery->setParameter("intIdServicio",$arrayParametros["intIdServicio"]);        
        $objQuery->setParameter("strNombreParametro",$arrayParametros["strNombreParametro"]);
        $objQuery->setParameter("strEstado",$arrayParametros["strEstado"]);        
        $objQuery->setParameter("strDetParamCodProd",$arrayParametros["strDetParamCodProd"]);

        $objRsm->addScalarResult('CANTIDAD', 'cantidad', 'integer');

        $objQuery->setSQL($strSql);

        $intServicioInternet = $objQuery->getSingleScalarResult();

        return $intServicioInternet;
    }

    /**
     * Documentación para el método 'getServicioPlanCodProducto'.
     *
     * Método que verifica dentro del Plan del servicio recibido si se tiene el producto de internet dedicado(parametrizado por codigo_producto).
     * 
     * costoQuery: 7
     * 
     * @param array $arrayParametros  
     *                               [
     *                                'intIdServicio'      => Id del Servicio,
     *                                'strCodigoProducto'  => Codigo de Producto
     *                               ]
     * @author Anabelle Peñaherrera<apenaherrera@telconet.ec>
     * @version 1.0 19-01-2021
     */

    public function getServicioPlanCodProducto($arrayParametros)
    {
        $objQuery = $this->_em->createQuery("SELECT count(serv)
                FROM 
                        schemaBundle:InfoServicio serv, 
                        schemaBundle:InfoPlanCab planc, 
                        schemaBundle:InfoPlanDet pland, 
                        schemaBundle:AdmiProducto prod
                WHERE 
                        serv.id             =:intIdServicio AND 
                        serv.planId         = planc.id AND
                        planc.id            = pland.planId AND 
                        pland.productoId    = prod.id AND
                        prod.codigoProducto =:strCodigoProducto
                        ");
                        
        $objQuery->setParameter('intIdServicio', $arrayParametros['intIdServicio']);
        $objQuery->setParameter('strCodigoProducto', $arrayParametros['strCodigoProducto']);
        
        $intCantidad = $objQuery->getSingleScalarResult();
        if(!$intCantidad)
        {
            $intCantidad = 0;
        }
        return $intCantidad;        
    }
    
    /**
     * Documentación para el método 'getSumPrecioItemServPlan'.
     *
     * Método que obtiene la sumatoria de los precios de los detalles de Productos de un Plan correspondiente a un servicio, se sumariza los 
     * detalles de productos que se encuentren parametrizados por "PARAM_FLUJO_ADULTO_MAYOR" detalle "APLICA_PRODUCTO_DESCUENTO_ADULTO_MAYOR" en S
     * 
     * costoQuery: 8
     * 
     * @param array $arrayParametros  
     *                               [
     *                                'intIdServicio'      => Id del Servicio                                
     *                               ]
     * @author Anabelle Peñaherrera<apenaherrera@telconet.ec>
     * @version 1.0 22-01-2021
     */

    public function getSumPrecioItemServPlan($arrayParametros)
    {              
        $strSql =   "SELECT SUM(PLAND.PRECIO_ITEM) AS SUM_PRECIO_ITEM
                     FROM DB_COMERCIAL.INFO_SERVICIO ISER, DB_COMERCIAL.INFO_PLAN_CAB PLANC,
                     DB_COMERCIAL.INFO_PLAN_DET PLAND, DB_COMERCIAL.ADMI_PRODUCTO PROD,
                     DB_GENERAL.ADMI_PARAMETRO_CAB APCAB,
                     DB_GENERAL.ADMI_PARAMETRO_DET APDET
                     WHERE 
                     ISER.PLAN_ID                   = PLANC.ID_PLAN
                     AND PLANC.ID_PLAN              = PLAND.PLAN_ID
                     AND PLAND.PRODUCTO_ID          = PROD.ID_PRODUCTO
                     AND APCAB.NOMBRE_PARAMETRO     = :strNombreParametro
                     AND APDET.DESCRIPCION          = :strDetalleParametro
                     AND APCAB.ID_PARAMETRO         = APDET.PARAMETRO_ID
                     AND COALESCE(TO_NUMBER(REGEXP_SUBSTR(APDET.VALOR1,'^\d+')),0) = PROD.ID_PRODUCTO
                     AND APDET.VALOR2           = :strValor2
                     AND APCAB.ESTADO           = :strEstado
                     AND APDET.ESTADO           = :strEstado
                     AND ISER.ID_SERVICIO       = :intIdServicio ";
                     
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        $objQuery->setParameter("intIdServicio", $arrayParametros['intIdServicio']);
        $objQuery->setParameter("strNombreParametro", 'PARAM_FLUJO_ADULTO_MAYOR');
        $objQuery->setParameter("strDetalleParametro", 'APLICA_PRODUCTO_DESCUENTO_ADULTO_MAYOR');
        $objQuery->setParameter("strValor2", 'S');
        $objQuery->setParameter("strEstado", 'Activo');
        $objRsm->addScalarResult('SUM_PRECIO_ITEM', 'sumPrecioItem', 'integer');
        $objQuery->setSQL($strSql);
        $arrayRespuesta = $objQuery->getScalarResult();
        $fltSumPrecioItem = (!empty($arrayRespuesta[0]['sumPrecioItem']) ? $arrayRespuesta[0]['sumPrecioItem'] : 0 );            
            
        return floatval($fltSumPrecioItem);     
    }
    
    /**
     * Documentación para getValorDescuentoAdultoMayor
     * 
     * Función que obtiene el valor de descuento a otorgarse por Beneficio 3era Edad/ Adulto Mayor
     * 
     * @param array $arrayParametros['fltParamPorcValorResidencial'  => 'Porcentaje de Valor Residencial parametrizado para el calculo'
     *                               'fltParamSalarioBasico'         => 'Salario Basico parametrizado para el calculo.'
     *                               'fltParamPorcDescAdultMayor'    => 'Porcentaje de descuento Adulto Mayor parametrizado para el Calculo'
     *                               'fltSumPrecioItem'              => 'Valor del servicio sobre el cual se calculará el valor de descuento por
     *                                                                   Beneficio 3era Edad/ Adulto Mayor.'
     *                              ]
     * 
     * @return Retorna el valor de descuento a otorgarse
     * 
     * @author Anabelle Peñaherrera<apenaherrera@telconet.ec>
     * 
     * @version 1.0 23-01-2021
     */
    public function getValorDescuentoAdultoMayor($arrayParametros)
    {
        $fltValorDescuentoAdultoMayor = 0;
        
        try
        {
            if( !empty($arrayParametros) )
            {               
                $fltParamPorcValorResidencial  = (isset($arrayParametros["fltParamPorcValorResidencial"])
                                               && !empty($arrayParametros["fltParamPorcValorResidencial"])) 
                                               ? $arrayParametros["fltParamPorcValorResidencial"] : 0;
                
                $fltParamSalarioBasico         = (isset($arrayParametros["fltParamSalarioBasico"])
                                               && !empty($arrayParametros["fltParamSalarioBasico"])) 
                                               ? $arrayParametros["fltParamSalarioBasico"] : 0;
                
                $fltParamPorcDescAdultMayor    = (isset($arrayParametros["fltParamPorcDescAdultMayor"])
                                               && !empty($arrayParametros["fltParamPorcDescAdultMayor"])) 
                                               ? $arrayParametros["fltParamPorcDescAdultMayor"] : 0;
                
                $fltSumPrecioItem            = (isset($arrayParametros["fltSumPrecioItem"])
                                               && !empty($arrayParametros["fltSumPrecioItem"])) 
                                               ? $arrayParametros["fltSumPrecioItem"] : 0;
                 
                $fltValorDescuentoAdultoMayor = str_pad($fltValorDescuentoAdultoMayor, 50, " ");
                
                $strSql = "BEGIN :fltValorDescuentoAdultoMayor := DB_COMERCIAL.CMKG_BENEFICIOS.F_DESCUENTO_ADULTO_MAYOR (" .
                                                                    ":fltParamPorcValorResidencial, ".
                                                                    ":fltParamSalarioBasico, ".
                                                                    ":fltParamPorcDescAdultMayor, ".
                                                                    ":fltSumPrecioItem ); END;";
                                                               
                $objStmt = $this->_em->getConnection()->prepare($strSql);
                $objStmt->bindParam('fltParamPorcValorResidencial', $fltParamPorcValorResidencial);
                $objStmt->bindParam('fltParamSalarioBasico',        $fltParamSalarioBasico);
                $objStmt->bindParam('fltParamPorcDescAdultMayor',   $fltParamPorcDescAdultMayor);
                $objStmt->bindParam('fltSumPrecioItem',             $fltSumPrecioItem);
                $objStmt->bindParam('fltValorDescuentoAdultoMayor', $fltValorDescuentoAdultoMayor);
                $objStmt->execute();
            }
        }
        catch(\Exception $ex)
        {
           throw($ex);
        }
        
        return $fltValorDescuentoAdultoMayor;
    }

     /**
     * Documentación para el método 'getServicioTipoPlan'.
     *
     * Método que verifica dentro del Plan del servicio si el tipo de plan corresponde al tipo parametrizado por "PARAM_FLUJO_ADULTO_MAYOR" 
     * detalle "TIPO_PLAN".
     * 
     * costoQuery: 5
     * 
     * @param array $arrayParametros  
     *                               [
     *                                'intIdServicio'   => Id del Servicio  
     *                                'arrayTipoPlan'   => array Tipos de Plan                                   
     *                               ]
     * @author Anabelle Peñaherrera<apenaherrera@telconet.ec>
     * @version 1.0 11-03-2021
     */

    public function getServicioTipoPlan($arrayParametros)
    {
        $objQuery = $this->_em->createQuery("SELECT count(serv)
                FROM 
                        schemaBundle:InfoServicio serv, 
                        schemaBundle:InfoPlanCab planc
                WHERE 
                        serv.id       =:intIdServicio AND 
                        serv.planId   = planc.id AND                        
                        planc.tipo    in (:arrayTipoPlan)
                        ");
                        
        $objQuery->setParameter('intIdServicio', $arrayParametros['intIdServicio']);
        $objQuery->setParameter('arrayTipoPlan', $arrayParametros['arrayTipoPlan']);
        
        $intCantidad = $objQuery->getSingleScalarResult();
        if(!$intCantidad)
        {
            $intCantidad = 0;
        }
        return $intCantidad;        
    }
    
    /**
     * Funcion que devuelve cantidad de servicios por Punto, Producto y por estados
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.0 26-09-2020     
     * @param $arrayParametros      
     * @return integer
     */
    public function getCantidadServiciosByProd($arrayParametros)
    {
        $objQuery = $this->_em->createQuery("SELECT count(e)
                FROM 
                        schemaBundle:InfoServicio e
                WHERE 
                        e.puntoId=:intIdPunto AND 
                        e.productoId = :intProducto AND
                        e.estado  in (:estados)
                        ");
                        
        $objQuery->setParameter('intIdPunto', $arrayParametros['Punto']);
        $objQuery->setParameter('intProducto', $arrayParametros['Producto']);
        $objQuery->setParameter('estados', array('Activo','Asignada','PrePlanificada'));
        $intCantidadServicios = $objQuery->getSingleScalarResult();
        if(!$intCantidadServicios)
        {
            $intCantidadServicios = 0;
        }
        return $intCantidadServicios;        
    }
    
    /**
     * Documentación para el método 'getProductoByPlanes'.
     *
     * Método que verifica si el producto se encuentra dentro del plan
     * 
     * costoQuery: 54
     * 
     * @param array $arrayDatos   Listado de parametros a consultar.
     *     
     * @author David León <mdleon@telconet.ec>
     * @version 1.0 23-09-2020
     */
    public function getProductoByPlanes($arrayDatos)
    {
        $arrayResultado = array();
        $objQueryCount  = $this->_em->createQuery();
        $objQueryData   = $this->_em->createQuery();
        $strSelectC     = "SELECT  count(ap) ";        
        try
        {

            $strFrom = "From schemaBundle:InfoPlanCab ipc, "
                         . "schemaBundle:InfoPlanDet ipd ,schemaBundle:AdmiProducto ap ";

            $strWhere = " where 
                         ipc.id = ipd.planId and 
                         ap.id = ipd.productoId and
                         ap.id = :Producto";
            $objQueryCount->setParameter("Producto", $arrayDatos['Producto']);
            
            if($arrayDatos['Punto'] != "")
            {
               $strFrom .= " ,schemaBundle:InfoPunto ip ,schemaBundle:InfoServicio iser";
               $strWhere .= " and iser.puntoId = ip.id and iser.planId = ipd.planId and iser.planId = ipc.id and ip.id = :Punto" ;
               $objQueryCount->setParameter("Punto", $arrayDatos['Punto']);
            }
            
            if($arrayDatos['Plan'] != "")
            {
               $strWhere .= " and ipc.id = :Plan" ;
               $objQueryCount->setParameter("Plan", $arrayDatos['Plan']);
            }
            
            if(isset($arrayDatos['Estado']) && !empty($arrayDatos['Estado'])) 
            {
                if($arrayDatos['Estado'] != "Todos")
                {
                   $strWhere .= " and iser.estado = :Estado" ;
                   $objQueryCount->setParameter("Estado", $arrayDatos['Estado']);
                }
                else
                {
                   $strWhere .= " and iser.estado in (:Estado)" ;
                   $objQueryCount->setParameter("Estado", array('Activo','Asignada','PrePlanificada'));
                }
            }
            
            if($arrayDatos['Servicio'] != "")
            {
               $strWhere .= " and iser.id = :Servicio" ;
               $objQueryCount->setParameter("Servicio", $arrayDatos['Servicio']);
            }

            $objQueryCount->setDQL($strSelectC . $strFrom .$strWhere);
            $intTotal = $objQueryCount->getSingleScalarResult();

            $arrayResultado['total']     = $intTotal;

        }
        catch(\Exception $ex)
        {
            $arrayResultado['error'] = $ex->getMessage();
        }
        
        return $arrayResultado;
    }
    
    /**
     *
     * Método que obtiene el id servicio de un producto adicional.
     *
     * @author Ronny Moran <rmoranc@telconet.ec>
     * @version 1.0
     * @since 21-10-2020
     *
     * Costo 5
     *
     * @return Array $arrayResultado
     */
    public function getIpServicioAdicional($arrayParametros)
    {
        $arrayResultado = array();
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);

        $strSql         = "SELECT 
                           MAX(ID_SERVICIO) AS ID_SERVICIO 
                           FROM INFO_SERVICIO 
                           WHERE PRODUCTO_ID IN
                           (SELECT ID_PRODUCTO FROM ADMI_PRODUCTO WHERE NOMBRE_TECNICO = :nombreTecnico
                           AND ESTADO = :estado)
                           AND ESTADO IN (:estadoAdicional)
                           AND PUNTO_ID = :puntoId ";

        $objQuery->setParameter("puntoId", $arrayParametros["puntoId"]);
        $objQuery->setParameter("estadoAdicional", $arrayParametros["estadoAdicional"]);
        $objQuery->setParameter("estado", 'Activo');
        $objQuery->setParameter("nombreTecnico", 'IPSB');        

        $objRsm->addScalarResult('ID_SERVICIO', 'servicio_id', 'string');
        
        $objQuery->setSQL($strSql);
        $arrayResultado = $objQuery->getArrayResult();

        return $arrayResultado;

    }
    
    /**
     *
     * Método que obtiene si un punto tiene un producto adicional megadatos parametrizado.
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.0
     * @since 21-10-2020
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.1 06-04-2021 - Se agrega funcionalidad para diferenciar si tiene producto cableado ethernet.
     *                           Sea empaquetado o adicional traiga toda la informacion del servicio.
     *
     * Costo 8
     *
     * @return Array $arrayResultado
     */
    public function getProductoMdAdicional($arrayParametros)
    {
        $arrayResultado = array();
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);

        $strSql         = "SELECT 
                            IFS.ID_SERVICIO , NVL(IFS.PRODUCTO_ID,ADP.ID_PRODUCTO) AS PRODUCTO_ID, VALOR1 ,IFS.ESTADO 
                            FROM 
                            DB_SOPORTE.INFO_SERVICIO IFS, DB_COMERCIAL.ADMI_PRODUCTO ADP,
                            DB_GENERAL.ADMI_PARAMETRO_DET APD
                            WHERE 
                            IFS.PUNTO_ID = :puntoId ";
        
        if(isset($arrayParametros["servicioId"]) && !empty($arrayParametros["servicioId"]))
        {
            $strWhere .= " AND IFS.ID_SERVICIO = :servicioId ";
            $objQuery->setParameter("servicioId",       $arrayParametros["servicioId"]);
        }
        else
        {
            $strWhere .= " AND IFS.ESTADO IN (:estados) ";
            $objQuery->setParameter('estados',          array('Pendiente' ,'PendienteAp', 'Asignada'));
        }

        $strSql .= $strWhere;                           
        
        $objInfoServicio = $this->_em->getRepository('schemaBundle:InfoServicio')
                                    ->findOneById($arrayParametros["servicioId"]);
        if (isset($objInfoServicio) && is_object($objInfoServicio))
        {
            if($objInfoServicio->getEstado() == 'Activo' && $objInfoServicio->getPlanId() != null)
            {
                $strAndSql = " AND ADP.ID_PRODUCTO = 1332";
            }
            else
            {
                $strAndSql = " AND IFS.PRODUCTO_ID IS NOT NULL
                            AND ADP.ID_PRODUCTO = IFS.PRODUCTO_ID ";
            }
        }
        else
        {
            $strAndSql = " AND IFS.PRODUCTO_ID IS NOT NULL
                        AND ADP.ID_PRODUCTO = IFS.PRODUCTO_ID ";
        }


        $strAndSql .= "AND APD.PARAMETRO_ID = (SELECT ID_PARAMETRO FROM DB_GENERAL.ADMI_PARAMETRO_CAB WHERE NOMBRE_PARAMETRO = :cabProductoMd)
                       AND APD.VALOR1= ADP.CODIGO_PRODUCTO
                       ORDER BY IFS.ID_SERVICIO DESC";

        $strSql .= $strAndSql;

        $objQuery->setParameter("puntoId", $arrayParametros["puntoId"]);
        $objQuery->setParameter("cabProductoMd", 'ACTIVACION_PRODUCTOS_MEGADATOS');
        
        $objRsm->addScalarResult('PRODUCTO_ID', 'producto_id', 'string');
        $objRsm->addScalarResult('VALOR1', 'codigoProducto', 'string');
        $objRsm->addScalarResult('ID_SERVICIO', 'idServicio', 'string');
        $objRsm->addScalarResult('ESTADO', 'estado', 'string');
        
        $objQuery->setSQL($strSql);
        $arrayResultado = $objQuery->getArrayResult();

        return $arrayResultado;
    }

    /**
     *
     * Método que obtiene el perfil utilizado en instalaciones MD tellion.
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.0
     * @since 12-02-2021
     *
     * Costo 15
     *
     * @return Array $arrayResultado
     */
    public function getPerfilActivacionMd($arrayParametros)
    {
        $arrayResultado = array();
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);

        $strSql         =  "SELECT 
                            SERVICIO_PROD_CARACT.VALOR
                            FROM 
                            DB_COMERCIAL.ADMI_CARACTERISTICA CARACTERISTICA,
                            DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PRODUCTO_CARACTERISTICA,
                            DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SERVICIO_PROD_CARACT
                            WHERE 
                            SERVICIO_PROD_CARACT.SERVICIO_ID = :servicioId
                            AND SERVICIO_PROD_CARACT.PRODUCTO_CARACTERISITICA_ID = PRODUCTO_CARACTERISTICA.ID_PRODUCTO_CARACTERISITICA
                            AND PRODUCTO_CARACTERISTICA.CARACTERISTICA_ID = CARACTERISTICA.ID_CARACTERISTICA
                            AND CARACTERISTICA.DESCRIPCION_CARACTERISTICA = :caracteristica
                            and SERVICIO_PROD_CARACT.ESTADO = :estado
                            and ROWNUM < 2";
        
        $objQuery->setParameter("estado",           "Activo");
        $objQuery->setParameter("caracteristica",   "PERFIL");
        $objQuery->setParameter("servicioId",       $arrayParametros["servicioId"]);
        
        $objRsm->addScalarResult('VALOR', 'valor', 'string');
        
        $objQuery->setSQL($strSql);
        $arrayResultado = $objQuery->getArrayResult();

        return $arrayResultado;
    }
    
    /**
     * Método que obtiene el listado de servicios activos del punto de origen
     * 
     * @author Ivan Mata <imata@telconet.ec>
     * @version 1.0
     * @since 12-03-2021
     *
     * @return Array $arrayResultado
     */
    public function getServiciosPunto($intIdPuntoOrigen)
    {
        
        $arrayResultado = array();
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        
        $strSql         = " SELECT ISER.ID_SERVICIO
                            FROM DB_COMERCIAL.INFO_SERVICIO ISER 
                            WHERE ISER.PUNTO_ID = :idPunto AND ISER.ESTADO= :estado ";
        
        $objQuery->setParameter("idPunto",    $intIdPuntoOrigen);
        $objQuery->setParameter("estado",        "Activo");
        
        $objRsm->addScalarResult('ID_SERVICIO', 'idServicio', 'string');
        $objQuery->setSQL($strSql);
        $arrayResultado = $objQuery->getArrayResult();

        return $arrayResultado;
        
    }
    
    /**
     * 
     * Método que valida si el servicio de un punto es de internet.
     * 
     * @author Ivan Mata <imata@telconet.ec>
     * @version 1.0
     * @since 12-03-2021
     * 
     * @return Array $arrayResultado
     */
    public function getServicioInternet($intIdServicio)
    {
        
        $arrayResultado = array();
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        
        $strSql         = " SELECT APR.DESCRIPCION_PRODUCTO
                            FROM DB_COMERCIAL.INFO_SERVICIO ISER
                            JOIN DB_COMERCIAL.INFO_PLAN_DET IPD ON IPD.PLAN_ID = ISER.PLAN_ID
                            JOIN DB_COMERCIAL.ADMI_PRODUCTO APR ON APR.ID_PRODUCTO             = IPD.PRODUCTO_ID
                            WHERE APR.DESCRIPCION_PRODUCTO = :descripcionProducto
                            AND ISER.ID_SERVICIO = :idServicio 
                            AND ISER.ESTADO   = :estado ";
        
        $objQuery->setParameter("idServicio",      $intIdServicio);
        $objQuery->setParameter("estado",              "Activo");
        $objQuery->setParameter("descripcionProducto", "INTERNET DEDICADO");
        
        $objRsm->addScalarResult('DESCRIPCION_PRODUCTO', 'descripcionProducto', 'string');
         
        $objQuery->setSQL($strSql);
        $arrayResultado = $objQuery->getArrayResult();

        return $arrayResultado;
        
    }
    
    /**
     * Método que realiza roolback cuando se cae el proceso de traslado.
     * 
     * @author Ivan Mata <imata@telconet.ec>
     * @version 1.0
     * @since 12-03-2021
     */
    public function getRollbackTraslado($arrayParametro)
    {
        
        try 
        {
            //inicializacion de variables
            $strStatus               = "";
            $strMensaje              = "";
            $intContador             = 0;
            $arrayOciCon             = $arrayParametro['ociCon'];
            $objRscCon               = oci_connect($arrayOciCon['user_comercial'], 
                                                   $arrayOciCon['passwd_comercial'], 
                                                   $arrayOciCon['dsn'],'AL32UTF8');
                                                   
            $objCursorResult         = oci_new_cursor($objRscCon);   
            $arrayResultadoRollback  = array();
            $arrayResultadoRollback['strStatus']   = "Error";  
            $arrayResultadoRollback['strMensaje']  = "Error al realizar roolback para proceso de traslado";

            

            //definicion del procedure a ejecutar
            $strSql  = 'BEGIN DB_COMERCIAL.TECNK_SERVICIOS.P_ROLLBACK_TRASLADO_SERVICIO(:jsonDatosTraslado,
                                                                    :Pv_Status,
                                                                    :Pv_Mensaje); END;';
            $objStmt = oci_parse($objRscCon,$strSql);
            
            
            oci_bind_by_name($objStmt,'jsonDatosTraslado'  ,json_encode($arrayParametro));
            oci_bind_by_name($objStmt,'Pv_Status'          ,$strStatus,10);
            oci_bind_by_name($objStmt,'Pv_Mensaje'         ,$strMensaje,2000);

            
            oci_execute($objStmt);
            oci_execute($objCursorResult, OCI_DEFAULT);
            
            
            $arrayResultadoRollback['strStatus']  = $strStatus; 
            $arrayResultadoRollback['strMensaje'] = $strMensaje;
           
            
        } 
        catch (Exception $ex) 
        {
           $arrayResultadoRollback['strStatus']  ="Error";
           $arrayResultadoRollback['strMensaje'] = "Error";
        }
        
        return $arrayResultadoRollback;
    }
    
    /**
     * Método que indica si el punto de origen tiene deuda
     * 
     * @author Ivan Mata <imata@telconet.ec>
     * @version 1.0
     * @since 12-03-2021
     */
    public function getPuntoDeuda($intIdPuntoOrigen)
    {
        $arrayResultado = array();
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        
        $strSql         = " SELECT SALDO
                           FROM DB_COMERCIAL.INFO_PUNTO_SALDO WHERE PUNTO_ID= :idPunto ";
        
        $objQuery->setParameter("idPunto",    $intIdPuntoOrigen);
        
        $objRsm->addScalarResult('SALDO', 'saldo', 'float');
        $objQuery->setSQL($strSql);
        $arrayResultado = $objQuery->getArrayResult();

        return $arrayResultado;
    }
    
    
    /**
     * Método que indica si el punto de destino tiene servicios
     * 
     * @author Ivan Mata <imata@telconet.ec>
     * @version 1.0
     * @since 12-03-2021
     */
    public function getPuntoDestino($intIdPuntoDestino)
    {
        $arrayResultado = array();
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        
        $strSql         = " SELECT ISER.ID_SERVICIO
                            FROM DB_COMERCIAL.INFO_SERVICIO ISER 
                            WHERE ISER.PUNTO_ID = :idPunto AND ISER.ESTADO IN('Pre-servicio','PreFactibilidad','PrePlanificada') ";
        
        $objQuery->setParameter("idPunto",    $intIdPuntoDestino);
        
        $objRsm->addScalarResult('ID_SERVICIO', 'idServicio', 'string');
        $objQuery->setSQL($strSql);
        $arrayResultado = $objQuery->getArrayResult();

        return $arrayResultado;
        
        
    }
    
    /**
     * Método que obtiene el nombre del departamento y canton del empleado
     * 
     * @author Ivan Mata <imata@telconet.ec>
     * @version 1.0
     * @since 07-04-2021
     */
    public function getInformacionEmpleado($arrayParametros)
    {
        $arrayResultado = array();
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        
        $strSql         = " SELECT AD.NOMBRE_DEPARTAMENTO, AC.NOMBRE_CANTON 
                             FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER 
                              JOIN DB_COMERCIAL.INFO_EMPRESA_ROL IER ON IER.ID_EMPRESA_ROL = IPER.EMPRESA_ROL_ID 
                              JOIN DB_GENERAL.ADMI_DEPARTAMENTO AD ON AD.ID_DEPARTAMENTO = IPER.DEPARTAMENTO_ID 
                              JOIN DB_COMERCIAL.INFO_OFICINA_GRUPO IFG ON IFG.ID_OFICINA = IPER.OFICINA_ID 
                              JOIN DB_GENERAL.ADMI_CANTON AC ON AC.ID_CANTON = IFG.CANTON_ID 
                             WHERE IPER.PERSONA_ID=(SELECT ID_PERSONA FROM DB_COMERCIAL.INFO_PERSONA 
                               WHERE LOGIN = :login) AND IPER.ESTADO= :estado AND IPER.DEPARTAMENTO_ID IS NOT NULL
                             AND IER.EMPRESA_COD = :empresaCod AND IER.ESTADO= :estado ";
        
        $objQuery->setParameter("empresaCod",  $arrayParametros['strEmpresaCod']);
        $objQuery->setParameter("estado",      'Activo');
        $objQuery->setParameter("login",     $arrayParametros['strLogin']);
        
        $objRsm->addScalarResult('NOMBRE_DEPARTAMENTO', 'nombreDepartamento', 'string');
        $objRsm->addScalarResult('NOMBRE_CANTON', 'nombreCanton', 'string');
        $objQuery->setSQL($strSql);
        $arrayResultado = $objQuery->getArrayResult();

        return $arrayResultado;
    }
    
    /**
    * getIdServicioOrigenTraslado, obtiene el Id servicio origen del Traslado desde la observacion
    *
    * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
    * @version 1.0 23-07-2021
    *
    * @param array $arrayParametros []
    *              'intIdServicio'          => Id del servicio
    *              'strObservacion'         => Observacion o string de busqueda
    *              'strFormato'             => Formato de la expresion regular  
    *
    * costoQuery: 8
    * @return Response 
    */
    public function getIdServicioOrigenTraslado($arrayParametros)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery    = $this->_em->createNativeQuery(null, $objRsm);
        $strQuery       = " SELECT REGEXP_SUBSTR(OBSERVACION, :strFormato, 1, 2, '') AS ID_SERVICIO_TRASLADO
                             FROM DB_COMERCIAL.INFO_SERVICIO_HISTORIAL WHERE SERVICIO_ID = :intIdServicio 
                             AND OBSERVACION LIKE :strObservacion ";
        
        $objRsm->addScalarResult('ID_SERVICIO_TRASLADO', 'intIdServicioOrigenTraslado', 'integer');        
        $objNtvQuery->setParameter('intIdServicio' ,$arrayParametros['intIdServicio']);
        $objNtvQuery->setParameter('strObservacion' ,$arrayParametros['strObservacion']);
        $objNtvQuery->setParameter('strFormato' ,$arrayParametros['strFormato']);
        return $objNtvQuery->setSQL($strQuery)->getArrayResult();
    }

    /**
     * Método que obtiene los servicios adicionales de un punto.
     * Que no se encuentren activos para el proceso de traslado
     *
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.0 05-03-2021
     *
     * Costo #
     *
     * @return Array $arrayResultado
     */
    public function getProductoAdicional($intIdPtoCliente)
    {
        $arrayResultado = array();
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        $strSql         =  "SELECT ID_SERVICIO, PRODUCTO_ID, ESTADO
                            FROM INFO_SERVICIO
                            WHERE PUNTO_ID = :punto
                            AND ESTADO != :estado
                            AND PRODUCTO_ID IS NOT NULL";
        
        $objQuery->setParameter("estado", "Activo");
        $objQuery->setParameter("punto", $intIdPtoCliente);
        
        $objRsm->addScalarResult('ID_SERVICIO', 'idServicio', 'string');
        $objRsm->addScalarResult('PRODUCTO_ID', 'productoId', 'string');
        $objRsm->addScalarResult('ESTADO', 'estado', 'string');
        
        $objQuery->setSQL($strSql);
        $arrayResultado = $objQuery->getArrayResult();

        return $arrayResultado;
    }
    
    /**
     * Documentación para getTipoCategoriaPlan.
     * 
     * Función que obtiene el tipo de categoría del plan ya sea mediante el id del servicio ó el id del plan.
     * 
     * @author Alex Arreaga<atarreaga@telconet.ec>
     * @version 1.0 11-08-2021
     * 
     * Costo query: 8
     * 
     * @param array $arrayParametros['strDescripcionCaract'  => 'Descripción característica tipo categoría plan',
     *                               'intIdServicio'         => 'Id del servicio'
     *                               'intIdPlan'             => 'Id del plan'     ]
     * 
     * @return Retorna tipo de categoría del plan.
     */
    public function getTipoCategoriaPlan($arrayParametros)
    {
        $objRsm   = new ResultSetMappingBuilder($this->_em);	      
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);	                

        $strSelect  =  " SELECT IPCARACT.VALOR ";
        $strFrom    =  " FROM DB_COMERCIAL.INFO_PLAN_CAB IPCAB,
                         DB_COMERCIAL.INFO_PLAN_CARACTERISTICA IPCARACT,
                         DB_COMERCIAL.ADMI_CARACTERISTICA AC " ;
        $strWhere   = " WHERE
                        IPCARACT.PLAN_ID                  = IPCAB.ID_PLAN
                        AND IPCARACT.CARACTERISTICA_ID    = AC.ID_CARACTERISTICA
                        AND AC.DESCRIPCION_CARACTERISTICA = :strDescripcionCaract  "; 

        $objRsm->addScalarResult('VALOR','strValor','string');                                   		                        

        $objQuery->setParameter('strDescripcionCaract', $arrayParametros['strDescripcionCaract']);
        
        if (isset($arrayParametros["intIdPlan"]) && !empty($arrayParametros["intIdPlan"])) 
        {
            $strWhere.= " AND IPCAB.ID_PLAN  = :intIdPlan ";
            $objQuery->setParameter('intIdPlan', $arrayParametros['intIdPlan']);
        }
        
        if (isset($arrayParametros["intIdServicio"]) && !empty($arrayParametros["intIdServicio"])) 
        {
            $strFrom .= " , DB_COMERCIAL.INFO_SERVICIO ISER ";
            $strWhere.= " AND ISER.PLAN_ID = IPCAB.ID_PLAN AND ISER.ID_SERVICIO = :intIdServicio "; 
            $objQuery->setParameter('intIdServicio', $arrayParametros['intIdServicio']);
        }
        
        $strSql = $strSelect.$strFrom.$strWhere;
            
        $objQuery->setSQL($strSql);
        $arrayResultado = $objQuery->getOneOrNullResult();     
              
        return $arrayResultado;
    }
    
    /**
     * Documentación para getPrecioPlanBasico
     * 
     * Función que obtiene el valor del plan básico para 3era Edad 
     *
     * @author Alex Arreaga<atarreaga@telconet.ec>
     * @version 1.0 10-08-2021
     * 
     * @param array $arrayParametros['strDescripcionCaract'  => 'Descripción característica tipo categoría plan' 
     *                               'strValorCaract'        => 'Valor de característica de categoría del plan'  ]
     * 
     * @return Retorna el precio del plan.
     */
    public function getPrecioPlanBasico($arrayParametros)
    {
        $intValorPlanBasico = 0;        
        try
        {
            if( !empty($arrayParametros) )
            {                          
                $intValorPlanBasico = str_pad($intValorPlanBasico, 50, " ");
                
                $strSql = "BEGIN :intValorPlanBasico := DB_COMERCIAL.CMKG_BENEFICIOS.F_PRECIO_PLAN_BASICO (" .
                                                                    ":strDescripcionCaract, :strValorCaract, :strCodEmpresa); END;";
                                                               
                $objStmt = $this->_em->getConnection()->prepare($strSql);
                $objStmt->bindParam('strDescripcionCaract', $arrayParametros['strDescripcionCaract'] );
                $objStmt->bindParam('strValorCaract',       $arrayParametros['strValorCaract'] ); 
                $objStmt->bindParam('strCodEmpresa',       $arrayParametros['strCodEmpresa'] );           
                $objStmt->bindParam('intValorPlanBasico',   $intValorPlanBasico);
                $objStmt->execute();
            }
        }
        catch(\Exception $ex)
        {
           throw($ex);
        }
        
        return $intValorPlanBasico;
    }

    /**
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 1.0 28-09-2021 - Función que genera la factura del servicio cancelado ECDF.
     * 
     * @param Array $arrayParametros['intServicioId']           Int: Id del Servicio
     *                              ['strPrefijoEmpresa']       String: Prefijo de la empresa
     *                              ['strEmpresaCod']           String: Codigo de la empresa
     *                              ['strUsrCreacionFact']      String: Usuario de creacion de factura.
     * @since 1.0
     */
    public function generarFacturaServicioCanceladoEcdf($arrayParametros)
    {
        $intIdServicio              = $arrayParametros['intServicioId'];
        $strPrefijoEmpresa          = $arrayParametros['strPrefijoEmpresa'];
        $strEmpresaCod              = $arrayParametros['strEmpresaCod'];
        $strUsrCreacionFact         = $arrayParametros['strUsrCreacionFact'];
        $strStatus                  = str_repeat(' ', 5);
        $strMsjError                = str_repeat(' ', 1000);
        try
        {   
            // Generación de factura por cancelación de servicio     
            $strSql             = "BEGIN DB_FINANCIERO.FNCK_FACTURACION.P_FACT_ECDF_CANCEL(:Pn_ServicioId, "
                                                                                             . ":Pv_PrefijoEmpresa, "
                                                                                             . ":Pv_EmpresaCod, "
                                                                                             . ":Pv_UsrCreacion, "
                                                                                             . ":Pv_Status, "
                                                                                             . ":Pv_Mensaje); END;";
            $objStmt   = $this->_em->getConnection()->prepare($strSql);
            $objStmt->bindParam('Pn_ServicioId', $intIdServicio);
            $objStmt->bindParam('Pv_PrefijoEmpresa', $strPrefijoEmpresa);
            $objStmt->bindParam('Pv_EmpresaCod', $strEmpresaCod);
            $objStmt->bindParam('Pv_UsrCreacion', $strUsrCreacionFact);
            $objStmt->bindParam('Pv_Status', $strStatus);
            $objStmt->bindParam('Pv_Mensaje', $strMsjError);
            $objStmt->execute();
            if(strlen(trim($strStatus)) > 0)
            {
                $strStatusRespuesta     = $strStatus;
                $strMensajeRespuesta    = $strMsjError;
            }
            else
            {
                $strStatusRespuesta     = "ERROR";
                $strMensajeRespuesta    = "No se ha podido obtener la respuesta del procedimiento para generar la factura del servicio "
                                          ."El Canal del Fútbol cancelado con ID SERVICIO ".$intIdServicio." como parámetro";
            }
        }
        catch(\Exception $e)
        {
            $strStatusRespuesta     = "ERROR";
            $strMensajeRespuesta    = "Ha ocurrido un error inesperado al invocar al procedimiento que genera la factura del servicio "
                                      ."El Canal del Fútbol cancelado con ID SERVICIO ".$intIdServicio." como parámetro";
            error_log("Error al invocar la función generarFacturaServicioCanceladoEcdf ".$e->getMessage());
        }
        $arrayRespuesta = array("status"    => $strStatusRespuesta,
                                "mensaje"   => $strMensajeRespuesta);           
        return $arrayRespuesta;
    }    

    /**
     * 
     * Función que genera la facturación por cancelación de un servicio que pueda ser usado a futuro por nuevos productos
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 01-12-2021 
     * 
     * @param Array $arrayParametros ['intServicioId'        => Id del Servicio
     *                                'strPrefijoEmpresa'    => Prefijo de la empresa
     *                                'strEmpresaCod'        => Código de la empresa
     *                                'strUsrCreacionFact'   => Usuario de creación de factura
     *                               ]
     * @return Array $arrayRespuesta [ 'status'     => OK o ERROR,
     *                                 'mensaje'    => Mensaje de error
     *                               ]
     */
    public function generaFacturacionCancelServicioAdicional($arrayParametros)
    {
        $intIdServicio              = $arrayParametros['intIdServicio'];
        $strPrefijoEmpresa          = $arrayParametros['strPrefijoEmpresa'];
        $strEmpresaCod              = $arrayParametros['strEmpresaCod'];
        $strUsrCreacionFact         = $arrayParametros['strUsrCreacionFact'];
        $strStatus                  = str_repeat(' ', 5);
        $strMsjError                = str_repeat(' ', 4000);
        try
        {   
            // Generación de factura por cancelación de servicio     
            $strSql             = "BEGIN DB_FINANCIERO.FNCK_FACTURACION.P_FACT_CANCEL_SERV_ADICIONAL(:Pn_IdServicio, "
                                                                                                    . ":Pv_PrefijoEmpresa, "
                                                                                                    . ":Pv_EmpresaCod, "
                                                                                                    . ":Pv_UsrCreacion, "
                                                                                                    . ":Pv_Status, "
                                                                                                    . ":Pv_Mensaje); END;";
            $objStmt   = $this->_em->getConnection()->prepare($strSql);
            $objStmt->bindParam('Pn_IdServicio', $intIdServicio);
            $objStmt->bindParam('Pv_PrefijoEmpresa', $strPrefijoEmpresa);
            $objStmt->bindParam('Pv_EmpresaCod', $strEmpresaCod);
            $objStmt->bindParam('Pv_UsrCreacion', $strUsrCreacionFact);
            $objStmt->bindParam('Pv_Status', $strStatus);
            $objStmt->bindParam('Pv_Mensaje', $strMsjError);
            $objStmt->execute();
            if(strlen(trim($strStatus)) > 0)
            {
                $strStatusRespuesta     = $strStatus;
                $strMensajeRespuesta    = $strMsjError;
            }
            else
            {
                $strStatusRespuesta     = "ERROR";
                $strMensajeRespuesta    = "No se ha podido obtener la respuesta del procedimiento para generar la factura del servicio "
                                          ."a cancelar con ID SERVICIO ".$intIdServicio." como parámetro";
            }
        }
        catch(\Exception $e)
        {
            $strStatusRespuesta     = "ERROR";
            $strMensajeRespuesta    = "Ha ocurrido un error inesperado al invocar al procedimiento que genera la factura del servicio "
                                      ."a cancelar con ID SERVICIO ".$intIdServicio." como parámetro";
            error_log("Error al invocar la función generaFacturacionCancelServicioAdicional ".$e->getMessage());
        }
        $arrayRespuesta = array("status"    => $strStatusRespuesta,
                                "mensaje"   => $strMensajeRespuesta);
    }
    
    /**
     * Documentación para el método 'getProductoByDescripcion'.
     *
     * Función que retorna los productos comerciales para el ingreso de servicios.
     *
     * Costo: 1500
     * 
     * @param $arrayBusqueda.
     * 
     * @return $arrayRespuesta
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.0 08-07-2021
     */
    public function getProductoByDescripcion($arrayBusqueda)
    {
        $intEmpresa       = ( isset($arrayBusqueda['intEmpresa']) && !empty($arrayBusqueda['intEmpresa']) ) 
                                   ? $arrayBusqueda['intEmpresa'] : '';
        
        $strDescProducto  = ( isset($arrayBusqueda['strDescProducto']) && !empty($arrayBusqueda['strDescProducto']) ) 
                                   ? $arrayBusqueda['strDescProducto'] : '';
        
        $strGrupo         = ( isset($arrayBusqueda['strGrupo']) && !empty($arrayBusqueda['strGrupo']) ) 
                                   ? $arrayBusqueda['strGrupo'] : '';
        
        $strSubGrupo      = ( isset($arrayBusqueda['strSubGrupo']) && !empty($arrayBusqueda['strSubGrupo']) ) 
                                   ? $arrayBusqueda['strSubGrupo'] : '';
        try
        {
            $strSql =   "SELECT
                            ap.id_producto as ID,
                            ap.descripcion_producto as DESCRIPCION,
                            ap.linea_negocio as VERTICAL,
                            ap.grupo as GRUPO,
                            ap.SUBGRUPO as SUBGRUPO,
                            ap.requiere_comisionar as REQUIERE_COMISIONAR
                        FROM
                            db_comercial.admi_producto ap
                        WHERE
                            ap.estado = 'Activo'
                            AND ap.nombre_tecnico <> 'FINANCIERO'
                            AND ap.es_concentrador <> 'SI'

                            AND ap.id_producto NOT IN (
                                SELECT
                                    ap_sf.id_producto
                                FROM
                                    db_comercial.admi_producto_caracteristica   apc
                                    JOIN db_comercial.admi_caracteristica            ac ON ac.id_caracteristica = apc.caracteristica_id
                                    JOIN db_comercial.admi_producto ap_sf on ap_sf.id_producto=apc.producto_id
                                WHERE
                                    ac.descripcion_caracteristica = 'NO_VISIBLE_COMERCIAL'
                                    AND ac.estado = 'Activo'
                            )";  

            $objRsm   = new ResultSetMappingBuilder($this->_em);
            $objQuery = $this->_em->createNativeQuery(null, $objRsm);

            if(!empty($intEmpresa))
            {
                $strSql .= " AND ap.empresa_cod =:intEmpresa ";
                $objQuery->setParameter('intEmpresa', $intEmpresa);
            }
            if(!empty($strDescProducto))
            {
                $strSql .= " AND ap.DESCRIPCION_PRODUCTO=:strDescProducto ";
                $objQuery->setParameter('strDescProducto', $strDescProducto);
            }
            if(!empty($strGrupo))
            {
                $strSql .= " AND ap.GRUPO=:strGrupo ";
                $objQuery->setParameter('strGrupo', $strGrupo);
            }
            if(!empty($strSubGrupo))
            {
                $strSql .= " AND ap.SUBGRUPO=:strSubGrupo ";
                $objQuery->setParameter('strSubGrupo', $strSubGrupo);
            }
            $objRsm->addScalarResult('ID', 'id', 'string');
            $objRsm->addScalarResult('DESCRIPCION', 'descripcion', 'string');
            $objRsm->addScalarResult('VERTICAL', 'vertical', 'string');
            $objRsm->addScalarResult('GRUPO', 'grupo', 'string');
            $objRsm->addScalarResult('SUBGRUPO', 'subGrupo', 'string');
            $objRsm->addScalarResult('REQUIERE_COMISIONAR', 'requiere_comisionar', 'string');
            $objQuery->setSQL($strSql);
            $arrayRespuesta = $objQuery->getScalarResult();
        
        }
        catch(\Exception $ex)
        {
            $arrayRespuesta['error'] = $ex->getMessage();
        }
        return $arrayRespuesta;
    }

    /**
     * Método que obtiene los servicios con productos netlifecam
     *
     * @author Jessenia Piloso <jpiloso@telconet.ec>
     * @version 1.0 14-10-2022
     * @return $arrayResultado
     * Costo #
     *
     */
    public function getServProdNetlife($arrayParamProducNetCam)
    {       
            //Obtener los id_productos a consultar
            $arrayResultado = array();
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
            $strSql         =  "SELECT SERV.ID_SERVICIO, 
                                    SERV.PUNTO_ID,
                                    SERV.PRODUCTO_ID,
                                    SERV.CANTIDAD,
                                    SERV.PRECIO_VENTA,
                                    SERV.FRECUENCIA_PRODUCTO,
                                    SERV.ESTADO,
                                    SERV.TIPO_ORDEN
                                FROM DB_COMERCIAL.INFO_SERVICIO SERV
                                WHERE SERV.PRODUCTO_ID IN
                                      (SELECT ID_PRODUCTO FROM ADMI_PRODUCTO WHERE NOMBRE_TECNICO in (:nombreTecnico)
                                       AND ESTADO = :estado)
                                AND SERV.ESTADO = :estado";
            
            $objQuery->setParameter("estado", 'Activo');
            $objQuery->setParameter("nombreTecnico", $arrayParamProducNetCam);

            $objRsm->addScalarResult('ID_SERVICIO', 'idServicio', 'string');
            $objRsm->addScalarResult('PUNTO_ID', 'puntoid', 'string');
            $objRsm->addScalarResult('PRODUCTO_ID', 'productoid', 'string');
            $objRsm->addScalarResult('CANTIDAD', 'cantidad', 'string');
            $objRsm->addScalarResult('PRECIO_VENTA', 'precioventa', 'string');
            $objRsm->addScalarResult('FRECUENCIA_PRODUCTO', 'frecuencia', 'string');
            $objRsm->addScalarResult('ESTADO', 'estado', 'string');
            $objRsm->addScalarResult('TIPO_ORDEN', 'tipoorden', 'string');

            $objQuery->setSQL($strSql);
            $arrayResultado = $objQuery->getArrayResult();
        return $arrayResultado;
    }
     /*
     * findServicioByDetalleId
     * Método para obtener el query del servicio 
     * filtradas según los parámetros enviados.
     *
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.0 01-04-2021
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.1 - 08-02-2023. Se obtiene el afectadoId en tareas de Caso
     * 
     * @param array $arrayParametro
     * @return array
     */
    public function findServicioByDetalleId($arrayParams)
    {
        $arrayResultado = array();
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);

        $strSQL = "SELECT AFECTADO_ID,
                          TIPO_AFECTADO 
                    FROM DB_SOPORTE.info_parte_afectada 
                    WHERE tipo_afectado in ('Servicio','Elemento') and detalle_id = (
                    SELECT MIN(id_detalle) FROM DB_SOPORTE.info_detalle WHERE detalle_hipotesis_id = 
                    (SELECT detalle_hipotesis_id FROM DB_SOPORTE.info_detalle 
                    WHERE id_detalle = :detalleId)) and rownum = 1";

        $objQuery->setParameter('detalleId', $arrayParams['detalleId']);
    
        $objRsm->addScalarResult('AFECTADO_ID', 'afectadoId', 'string');
        $objRsm->addScalarResult('TIPO_AFECTADO', 'tipoAfectado', 'string');

        $objQuery->setSQL($strSQL);
        $arrayResultado = $objQuery->getArrayResult();

        return $arrayResultado[0];
    }


    
    
    /**
     * Documentación para el método 'findServiciosPorPuntos'.
     *
     * Función que retorna los servicios por plan o productos de un punto.
     *
     * Costo: 10
     * 
     * @param $arrayBusqueda.
     * 
     * @return $arrayRespuesta
     *
     * @author Jessenia Piloso <jpiloso@telconet.ec>
     * @version 1.0 31-01-2023
     */
    public function getInfoPuntoByIdentificacion($arrayBusqueda)
    {
        $intRowNum  = ( isset($arrayBusqueda['intRowNum']) && !empty($arrayBusqueda['intRowNum']) ) 
                                   ? $arrayBusqueda['intRowNum'] : '';

        if (!isset($arrayBusqueda['strIdentificacion']) && empty($arrayBusqueda['strIdentificacion']) ) 
        {
         throw new \Exception('No existen datos para generar la consulta del punto');
        }
        try
        {
            $strSql =   "SELECT
                            PUNTO.LOGIN AS LOGIN,
                            PUNTO.ID_PUNTO AS ID_PUNTO, 
                            PER.ID_PERSONA_ROL AS ID_PERSONA_ROL
                        FROM
                            DB_COMERCIAL.INFO_PUNTO PUNTO
                            INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL PER
                            ON PER.ID_PERSONA_ROL  = PUNTO.PERSONA_EMPRESA_ROL_ID
                            INNER JOIN DB_COMERCIAL.INFO_PERSONA INFPER
                            ON INFPER.ID_PERSONA = PER.PERSONA_ID
                            INNER JOIN DB_COMERCIAL.INFO_EMPRESA_ROL IER
                            ON IER.ID_EMPRESA_ROL = PER.EMPRESA_ROL_ID
                            INNER JOIN DB_COMERCIAL.ADMI_ROL ADMI_ROL
                            ON ADMI_ROL.ID_ROL  = IER.ROL_ID
                            INNER JOIN DB_COMERCIAL.ADMI_TIPO_ROL ADMI_TIPO_ROL
                            ON ADMI_TIPO_ROL.ID_TIPO_ROL  = ADMI_ROL.TIPO_ROL_ID
                        WHERE
                            PER.ESTADO = :estado
                            AND ADMI_ROL.DESCRIPCION_ROL    = :descripcionRol
                            AND ADMI_TIPO_ROL.DESCRIPCION_TIPO_ROL  = :descripcionTipoRol
                            AND DB_FINANCIERO.FNCK_CONSULTS.F_GET_PREFIJO_BY_PUNTO(ID_PUNTO, '') = :prefijoEmpresa
                            AND PUNTO.ESTADO = :estado
                            AND INFPER.IDENTIFICACION_CLIENTE = :identificacion";  
            
            $objRsm   = new ResultSetMappingBuilder($this->_em);
            $objQuery = $this->_em->createNativeQuery(null, $objRsm);

            $objQuery->setParameter("estado", 'Activo');
            $objQuery->setParameter("descripcionRol", $arrayBusqueda['strDescripcionRol']);
            $objQuery->setParameter("descripcionTipoRol", $arrayBusqueda['strDescripcionTipoRol']);
            $objQuery->setParameter("prefijoEmpresa", $arrayBusqueda['strPrefijoEmpresa']);
            $objQuery->setParameter("identificacion", $arrayBusqueda['strIdentificacion']);

            if(!empty($intRowNum))
            {
                $strSql .= " AND ROWNUM = :intRowNum ";
                $objQuery->setParameter('intRowNum', $intRowNum);
            }

            $objRsm->addScalarResult('LOGIN', 'login', 'string');
            $objRsm->addScalarResult('ID_PUNTO', 'idPunto', 'string');
            $objRsm->addScalarResult('ID_PERSONA_ROL', 'idPersonaRol', 'string');
            $objQuery->setSQL($strSql);
            $arrayRespuesta = $objQuery->getScalarResult();
        
        }
        catch(\Exception $ex)
        {
            $arrayRespuesta['error'] = $ex->getMessage();
        }
        return $arrayRespuesta;
    }

    /**
     * Documentación para el método 'getInfoPuntoByIdentificacion'.
     *
     * Función que retorna la información del punto del cliente por Identificiacion.
     *
     * @author Jose Candelario <mdleon@telconet.ec>
     * @version 1.0 30-08-2022
     */
    public function findServiciosPorPuntos($arrayBusqueda)
    {
        $objQuery       = $this->_em->createQuery();
        $strTipo        = ( isset($arrayBusqueda['strTipo']) && !empty($arrayBusqueda['strTipo']) ) 
                                   ? $arrayBusqueda['strTipo'] : '';
        
        $intProducto    = ( isset($arrayBusqueda['intProducto']) && !empty($arrayBusqueda['intProducto']) ) 
                                   ? $arrayBusqueda['intProducto'] : '';

        $strSql = "SELECT e FROM schemaBundle:InfoServicio e
		   WHERE e.puntoId=:punto";
        $objQuery->setParameter("punto", $arrayBusqueda['intPunto']);
        
        if(!empty($strTipo)) 
        {
            if($strTipo == "PLAN")
            {
                $strSql .= " AND e.planId is not null ";
            }
            else
            {
                $strSql .= " AND e.productoId=:intProducto ";
                $objQuery->setParameter('intProducto', $intProducto);
            }
        }        

        $objQuery->setDQL($strSql);
        $objQuery->setMaxResults(1);
        $arrayDatos = $objQuery->getOneOrNullResult();
        return $arrayDatos;
    }

    /**
     * Costo 7
     *
     * getMaxIdServiciosAdicionales
     *
     * Obtiene el MAX id de servicios del punto, por cada producto filtrado por estados
     *
     * @author Alex Gómez <algomez@telconet.ec>
     * @version 1.0 30-09-2022
     *
     * @param  array $arrayParametros[ "intIdPunto"           => Id del Punto,
     *                                 "arrayEstadosServicio" => Estados de servicios a mapear ]
     * 
     * @return array $arrayRespuesta[ "total"      => Count de Servicios,
     *                                "registros"  => Obj Servicios ]
     *
     */
    public function getMaxIdServiciosAdicionales($arrayParametros)
    {
        $arrayResultados = array('registros' => array(), 'total' => 0);
        
        try
        {   
            $strQuery      = $this->_em->createQuery();
            $strQueryCount = $this->_em->createQuery();
            
            $strSelect      = "SELECT iser ";
            $strSelectCount = "SELECT COUNT(iser.id) ";
            $strFrom        = "FROM schemaBundle:InfoServicio iser ";
            $strWhere       = "WHERE iser.id IS NOT NULL "
                            ."AND iser.puntoId = :intIdPunto "
                            ."AND iser.estado IN (:arrayEstadosServicio) "
                            ."AND iser.productoId IS NOT NULL "
                            ."AND iser.id = (SELECT MAX(isem.id) "
                                            ."FROM schemaBundle:InfoServicio isem "
                                            ."WHERE isem.puntoId = iser.puntoId "
                                            ."AND isem.productoId = iser.productoId) ";
            $strOrderBy     = "ORDER By iser.id ";
            
            $strQuery->setParameter("intIdPunto",      $arrayParametros['intIdPunto']);
            $strQueryCount->setParameter("intIdPunto", $arrayParametros['intIdPunto']);
            
            $strQuery->setParameter("arrayEstadosServicio",      $arrayParametros['arrayEstadosServicio']);
            $strQueryCount->setParameter("arrayEstadosServicio", $arrayParametros['arrayEstadosServicio']);

            $strDql      = $strSelect.$strFrom.$strWhere.$strOrderBy;
            $strDqlCount = $strSelectCount.$strFrom.$strWhere;

            $strQuery->setDQL($strDql);
            $strQueryCount->setDQL($strDqlCount);
            
            $arrayResultados['registros'] = $strQuery->getResult();
            $arrayResultados['total']     = $strQueryCount->getSingleScalarResult();
        }
        catch(\Exception $e)
        {
            throw($e);
        }
        
        return $arrayResultados;
    }
    /* 
    * @author Andre Lazo <alazo@telconet.ec>
    * @version 1.0 04-05-2023 Funcion obtieneJsonPlantilla
    * Obtiene la plantilla con sus valores reemplazados listo para ser enviados a convertir en 
    * pdf
    */
    public function obtieneJsonPlantilla($arrayParametros)
    {
        $intIdPunto=$arrayParametros['intIdPuntoDestino'];
        $intIdServicio=$arrayParametros['intIdServicio'];
        $strCodEmpresa=$arrayParametros['strCodEmpresa'];
        
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        $strSql   = "SELECT DB_COMERCIAL.CMKG_ACTA_TRASLADO_MD.F_GET_CONSUMO_MS_TEMPLATE(
            (SELECT  DB_COMERCIAL.CMKG_ACTA_TRASLADO_MD.F_GET_PLANTILLA_CONTENIDO
            (:Pv_IdServicio,:Pv_IdPuntoActual,:Pv_CodEmpresa)  datos_plantilla
                    FROM DUAL)) acta_traslado FROM DUAL";
        $objQuery->setParameter("Pv_IdServicio", $intIdServicio);
        $objQuery->setParameter("Pv_IdPuntoActual", $intIdPunto);
        $objQuery->setParameter("Pv_CodEmpresa", $strCodEmpresa);

        $objRsm->addScalarResult('ACTA_TRASLADO', 'acta_traslado', 'string');
        $objQuery->setSQL($strSql);
        $arrayRespuesta = $objQuery->getScalarResult();

        return $arrayRespuesta[0]["acta_traslado"];
    }

}
