<?php

namespace telconet\schemaBundle\Repository;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Query;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use telconet\comercialBundle\Service\InfoServicioService;

class InfoDetalleSolicitudRepository extends EntityRepository
{

    /**
     * Obtiene las características y su valor de la SOLICITUD FACTURACION RETIRO EQUIPO que esté ligada a una SOLICITUD CAMBIO DE MODEM INMEDIATO
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.0
     * @since 29-10-2018
     * @param array $arrayParametros Parámetros del query (intIdServicio)
     * @return array Devuelve un array con la siguiente información:<br>
     *               ['strDescripcionCaracteristica']
     *               ['strValor']
     */
    public function obtieneSolicitudesCambioModemPorFacturar($arrayParametros)
    {
        try
        {
            $intServicioId = $arrayParametros["intServicioId"];
            $strSql        = "SELECT AC2.DESCRIPCION_CARACTERISTICA, IDSC2.VALOR
                                FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD ATS,
                                     DB_COMERCIAL.INFO_DETALLE_SOLICITUD IDS,
                                     DB_COMERCIAL.INFO_DETALLE_SOLICITUD IDS2,
                                     DB_COMERCIAL.ADMI_TIPO_SOLICITUD ATS2,
                                     DB_COMERCIAL.INFO_DETALLE_SOL_CARACT IDSC2,
                                     DB_COMERCIAL.ADMI_CARACTERISTICA AC2
                               WHERE IDS.SERVICIO_ID = :intServicioId
                                 AND ATS.DESCRIPCION_SOLICITUD = :strDescripcionSolCambioModem
                                 AND ATS.ESTADO = :strEstadoActivo
                                 AND IDS.TIPO_SOLICITUD_ID = ATS.ID_TIPO_SOLICITUD
                                 AND IDS.ESTADO = :strEstadoSolCambioModem
                                 AND IDS.TIPO_DOCUMENTO = :strTipoDocumento
                                 AND IDS.SERVICIO_ID = IDS2.SERVICIO_ID
                                 AND IDS2.TIPO_SOLICITUD_ID = ATS2.ID_TIPO_SOLICITUD
                                 AND IDS2.ESTADO = :strEstadoSolFacturacion
                                 AND ATS2.DESCRIPCION_SOLICITUD = :strDescripcionSolFacturacion
                                 AND ATS2.ESTADO = :strEstadoActivo
                                 AND IDSC2.DETALLE_SOLICITUD_ID = IDS2.ID_DETALLE_SOLICITUD
                                 AND IDSC2.ESTADO = :strEstadoCaracteristica
                                 AND AC2.ID_CARACTERISTICA = IDSC2.CARACTERISTICA_ID";
            $objRsm   = new ResultSetMappingBuilder($this->_em);
            $objQuery = $this->_em->createNativeQuery(null, $objRsm);
            $objQuery->setParameter('intServicioId', $intServicioId);
            $objQuery->setParameter('strDescripcionSolCambioModem', 'SOLICITUD CAMBIO DE MODEM INMEDIATO');
            $objQuery->setParameter('strEstadoSolCambioModem', 'Finalizada');
            $objQuery->setParameter('strDescripcionSolFacturacion', 'SOLICITUD FACTURACION RETIRO EQUIPO');
            $objQuery->setParameter('strEstadoSolFacturacion', 'Pendiente');
            $objQuery->setParameter('strEstadoCaracteristica', 'Facturable');
            $objQuery->setParameter('strEstadoActivo', 'Activo');
            $objQuery->setParameter('strTipoDocumento', 'V');

            $objRsm->addScalarResult('DESCRIPCION_CARACTERISTICA', 'strDescripcionCaracteristica','string');
            $objRsm->addScalarResult('VALOR', 'strValor', 'string');

            $objQuery->setSQL($strSql);
            $arrayResultado  = $objQuery->getScalarResult();
        }
        catch(\Exception $ex)
        {
            error_log("Ha ocurrido un error en obtieneSolicitudesCambioModemPorFacturar: " . $ex->getMessage());
        }
        return $arrayResultado;
    }

    /**
     * Obtiene las solicitudes de migracion de ip y plan de un elemento
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 21-08-2015
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.1 27-12-2018 
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 03-01-2019 Se modifica consulta para obtener los registros cuando se suban más de 100000 registros a la vez
     *
     * @author Alberto Arias <farias@telconet.ec>
     * @version 1.3 17-04-2023 Se agrega filtro por empresa en sesión
     *
     * @param type $arrayParametros
     * @return json $strJsonRespuesta
     * */
    public function getSolicitudesByLoginElementoTipo($arrayParametros)
    {
        $strLogin           = $arrayParametros["login"];
        $intIdElemento      = $arrayParametros["idElemento"];
        $strTipoSolicitud   = $arrayParametros["idTipoSolicitud"];
        $strEstado          = $arrayParametros["estado"];
        $intStart           = $arrayParametros["start"];
        $intLimit           = $arrayParametros["limit"];
        $strCodEmpresa      = $arrayParametros["codEmpresa"];
        try
        {
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
            $strSelectCount = " SELECT COUNT(*) AS TOTAL ";
            $strSql         = " SELECT DS.ID_DETALLE_SOLICITUD,
                                P.LOGIN,
                                (SELECT DESCRIPCION_SOLICITUD
                                FROM ADMI_TIPO_SOLICITUD
                                WHERE ID_TIPO_SOLICITUD = DS.TIPO_SOLICITUD_ID) SOLICITUD,
                                DS.FE_CREACION,
                                DS.OBSERVACION,
                                DS.ESTADO,
                                (SELECT NOMBRE_ELEMENTO FROM INFO_ELEMENTO WHERE ID_ELEMENTO = DS.ELEMENTO_ID) ELEMENTO
                                FROM
                                INFO_DETALLE_SOLICITUD DS,
                                INFO_SERVICIO S,
                                INFO_PUNTO P,
                                INFO_PERSONA_EMPRESA_ROL IPER,
                                INFO_EMPRESA_ROL         IER,
                                INFO_EMPRESA_GRUPO       IEG
                                WHERE DS.SERVICIO_ID    = S.ID_SERVICIO
                                AND S.PUNTO_ID          = P.ID_PUNTO 
                                AND IPER.ID_PERSONA_ROL = P.PERSONA_EMPRESA_ROL_ID
                                AND IER.ID_EMPRESA_ROL  = IPER.EMPRESA_ROL_ID 
                                AND IEG.COD_EMPRESA     = IER.EMPRESA_COD ";

            if(isset($strCodEmpresa) && !empty($strCodEmpresa))
            {
                $strSql.= " AND IEG.COD_EMPRESA = :empresaCod";
                $objQuery->setParameter("empresaCod", $strCodEmpresa);
            }

            if(isset($strLogin) && !empty($strLogin))
            {
                $strSql.= " AND P.LOGIN = :login";
                $objQuery->setParameter("login", $strLogin);
            }
            if(isset($strTipoSolicitud) && !empty($strTipoSolicitud))
            {
                $arraySolicitud = explode(",", $strTipoSolicitud);
                if(count($arraySolicitud) > 1)
                {
                    $strSql.= " AND DS.TIPO_SOLICITUD_ID in (:tipoSolicitud)";
                    $objQuery->setParameter("tipoSolicitud", array(intval($arraySolicitud[0]), intval($arraySolicitud[1])));
                }
                else
                {
                    $strSql.= " AND DS.TIPO_SOLICITUD_ID = :tipoSolicitud";
                    $objQuery->setParameter("tipoSolicitud", $strTipoSolicitud);
                }
            }
            
            if(isset($intIdElemento) && !empty($intIdElemento) && intval($intIdElemento) > 0)
            {
                $strSql.= " AND DS.ELEMENTO_ID = :elementoId";
                $objQuery->setParameter("elementoId", $intIdElemento);
            }

            if(isset($strEstado) && !empty($strEstado))
            {
                $strSql.= " AND DS.ESTADO = :estado";
                $objQuery->setParameter("estado", $strEstado);
            }
            else
            {
                $strSql.= " AND DS.ESTADO IN (:estadoPendiente, :estadoFinalizada, :estadoFallo) ";
                $objQuery->setParameter("estadoPendiente", 'Pendiente');
                $objQuery->setParameter("estadoFinalizada", 'Finalizada');
                $objQuery->setParameter("estadoFallo", 'Fallo');
            }

            $strSql.= " AND TO_CHAR(DS.FE_CREACION,'YYYY/MM/DD') >= '2019/01/01'";

            $strSql.= " ORDER BY DS.FE_CREACION DESC, P.LOGIN ";
            
            $strSqlFinal    = "";
            if(isset($intStart) && isset($intLimit))
            {
                if($intStart && $intLimit)
                {
                    $intInicio      = $intStart;
                    $intFin         = $intStart + $intLimit;
                    $strSqlFinal    = '  SELECT * FROM 
                                        (
                                            SELECT consultaPrincipal.*,rownum AS consultaPrincipal_rownum 
                                            FROM (' . $strSql . ') consultaPrincipal 
                                            WHERE rownum<=' . $intFin . '
                                        ) WHERE consultaPrincipal_rownum >' . $intInicio;
                }
                else
                {
                    $strSqlFinal = '  SELECT consultaPrincipal.* 
                                        FROM (' . $strSql . ') consultaPrincipal 
                                        WHERE rownum<=' . $intLimit;
                }
            }
            else
            {
                $strSqlFinal = $strSql;
            }
            
            $objRsm->addScalarResult(strtoupper('ID_DETALLE_SOLICITUD'), 'idDetalleSolicitud', 'string');
            $objRsm->addScalarResult(strtoupper('LOGIN'), 'login', 'string');
            $objRsm->addScalarResult(strtoupper('SOLICITUD'), 'solicitud', 'string');
            $objRsm->addScalarResult(strtoupper('FE_CREACION'), 'feCreacion', 'string');
            $objRsm->addScalarResult(strtoupper('OBSERVACION'), 'observacion', 'string');
            $objRsm->addScalarResult(strtoupper('ESTADO'), 'estado', 'string');
            $objRsm->addScalarResult(strtoupper('ELEMENTO'), 'elemento', 'string');
            $objRsm->addScalarResult('TOTAL', 'total', 'integer');

            $objQuery->setSQL($strSqlFinal);
            $arrayResultado = $objQuery->getResult();
            
            $strSqlCount = $strSelectCount . " FROM (" . $strSql . ")";
            $objQuery->setSQL($strSqlCount);
            $intTotal = $objQuery->getSingleScalarResult();
        }
        catch(\Exception $e)
        {
            $intTotal       = 0;
            $arrayResultado = array();
            error_log("Error al consultar las solicitudes ".$e->getMessage());
        }
        $arrayRespuesta = array("total"         => $intTotal,
                                "encontrados"   => $arrayResultado);
        $strJsonRespuesta = json_encode($arrayRespuesta);
        return $strJsonRespuesta;
    }

     /**
     * Costo: 3
     * getUltEstadoSolicitud
     *
     * Función que retorna el estado actual de un tipo de solicitud enviado por parametro
     *
     * @param array arrayParametros [ intServicioId        => id del servicio,
     *                                descripcionSolicitud => nombre de la solicitud ]
     *
     * @return string $strEstadoDemo retorna el estado del Demo
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 30-08-2019
     */
    public function getUltEstadoSolicitud($arrayParametros)
    {
        $strEstadoSolicitud  = "";
        $objRsmb             = new ResultSetMappingBuilder($this->_em);
        $objQuery            = $this->_em->createNativeQuery(null,$objRsmb);

        $strSql = " SELECT IDS1.ESTADO  as ESTADO
                        FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD IDS1 WHERE IDS1.ID_DETALLE_SOLICITUD = (
                        SELECT MAX(IDS.ID_DETALLE_SOLICITUD) FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD IDS WHERE IDS.SERVICIO_ID = :paramServicio
                        AND IDS.TIPO_SOLICITUD_ID = (SELECT ATS.ID_TIPO_SOLICITUD
                        FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD ATS WHERE ATS.DESCRIPCION_SOLICITUD = :paramNombreSol)) ";

        $objQuery->setParameter('paramServicio',$arrayParametros["intServicioId"]);
        $objQuery->setParameter('paramNombreSol',$arrayParametros["descripcionSolicitud"]);

        $objRsmb->addScalarResult('ESTADO', 'estado', 'string');

        $objQuery->setSQL($strSql);

        $strEstadoSolicitud = $objQuery->getResult();

        return $strEstadoSolicitud[0];
    }

    /**
    * generarJsonMaterialesPunto
    * 
    * Esta funcion retorna los materiales usados para un punto especifico, en formato JSON para ser mostrado en TELCOS+
    * 
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 17-09-2015 
    * @param array  $arrayParametros
    * 
    * @return array $objResultado  Objeto en formato JSON    
    * 
    */
    public function generarJsonMaterialesPunto($arrayParametros) 
    {
        $arrayEncontrados        = array();
        $strDatos                = $this->getRegistrosMaterialesPunto($arrayParametros);
        
        $intCantidad             = $strDatos['total'];
        $arrayRegistros          = $strDatos['registros'];

        if ($arrayRegistros) 
        {            
            foreach ($arrayRegistros as $data)
            {                                    
                 
                 $arrayEncontrados[]  = array('cantidad'         => $data["cantidad"],
                                              'codigoMaterial'   => $data["codigoMaterial"],
                                              'descripcion'      => $data["descripcion"], 
                                              'unidad'           => $data["unidad"]);                  
            }  

            if($intCantidad == 0)
            {
                $objResultado = array('total'       => 1 ,
                                      'encontrados' => array('cantidad'       => 0 , 
                                                             'codigoMaterial' => 'Ninguno', 
                                                             'descripcion'    => 'Ninguno',
                                                             'unidad'         => 'Ninguno'));
                $objResultado = json_encode($objResultado);
                return $objResultado;
            }
            else
            {

                $objData        = json_encode($arrayEncontrados);
                $objResultado   = '{"total":"'.$intCantidad.'","encontrados":'.$objData.'}';
                return $objResultado;
            }
        }
        else
        {
            $objResultado = '{"total":"0","encontrados":[]}';
            return $objResultado;
        }
        
    }
    
    
     /**
     * getRegistrosMaterialesPunto
     * 
     * Esta funcion ejecuta el Query que retorna los materiales utilizados en una solicitud
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 17-09-2015 
     * @param array  $arrayParametros
     * 
     * @return array $strDatos        Consulta de la BD
     * 
     */
    public function getRegistrosMaterialesPunto($arrayParametros) 
    {
        
        $strStart       = $arrayParametros["start"];
        $strLimit       = $arrayParametros["limit"];
        $strIdSolicitud = $arrayParametros["idSolicitud"];

        $strQuery       = $this->_em->createQuery();        
        $strCampos      = " SELECT                                  
                                idsm.cantidadUsada as cantidad,
                                
                                idsm.materialCod as codigoMaterial,
                                
                                (SELECT DISTINCT(A.descripcion) FROM schemaBundle:Arinda A 
                                WHERE A.noArti = idsm.materialCod) as descripcion,  
                                
                                (SELECT DISTINCT(B.nombre) FROM schemaBundle:Arinum B 
                                WHERE B.unidad in (SELECT DISTINCT(C.unidad)
                                                    FROM schemaBundle:Arinda C
                                                    WHERE C.noArti = idsm.materialCod)) as unidad ";              
        $strFrom        = " FROM 
                                schemaBundle:InfoDetalleSolicitud ids,
                                schemaBundle:InfoDetalleSolMaterial idsm
                            WHERE 
                                ids.id = idsm.detalleSolicitudId
                                AND ids.id = :varIdSolicitud ";   
        
        $strSelect = $strCampos . $strFrom;
                                
        $strQuery->setParameter("varIdSolicitud", $strIdSolicitud);
        $strQuery        -> setDQL($strSelect);  
        
        if($strStart!='' && $strLimit!='') 
        {    
            $strDatos = $strQuery->setFirstResult($strStart)->setMaxResults($strLimit)->getResult();        
        }

        
        $strQueryCount      = $this->_em->createQuery();                                  
        $strCount           = " SELECT COUNT(idsm.materialCod) ";  
        
        $strSelectCount = $strCount . $strFrom;
        
        $strQueryCount->setParameter("varIdSolicitud", $strIdSolicitud);
        $strQueryCount->setDQL($strSelectCount);  

        $intTotal = $strQueryCount->getSingleScalarResult();

        $strDatos['registros'] = $strDatos;
        $strDatos['total']     = $intTotal;        
        
        
        return $strDatos;
    }     
    
    
    /**
    * generarJsonReporteMateriales
    * 
    * Esta funcion retorna el reporte de Materiales por Instalacion, en formato JSON para ser mostrado en TELCOS+
    * 
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 07-09-2015 
    * @param array  $parametros
    * @param string $strPrefijoEmpresa
    * 
    * @return array $objResultado  Objeto en formato JSON    
    * 
    */
    public function generarJsonReporteMateriales($parametros,$strPrefijoEmpresa) 
    {

        $arrayEncontrados        = array();
        $intCantidad             = 0;	
        $intCantidad             = $this->getRegistrosReporteMateriales('count',$parametros,$strPrefijoEmpresa);
        
        $arrayRegistros          = $this->getRegistrosReporteMateriales('datos',$parametros,$strPrefijoEmpresa);
        if ($arrayRegistros) 
        {            
            foreach ($arrayRegistros as $data)
            {                                    
                 
                 $arrayEncontrados[]  = array('detalleSol'       => $data["detalleSol"],
                                              'cantidad'         => $data["cantidad"],
                                              'materialCod'      => $data["materialCod"],
                                              'descripcion'      => $data["descripcion"], 
                                              'unidad'           => $data["unidad"]);                  
            }  

            if($intCantidad == 0)
            {
                $objResultado = array('total'       => 1 ,
                                      'encontrados' => array('id_factibilidad'     => 0 , 
                                                             'nombre_factibilidad' => 'Ninguno', 
                                                             'factibilidad_id'     => 0 ,
                                                             'factibilidad_nombre' => 'Ninguno', 
                                                             'estado'              => 'Ninguno'));
                $objResultado = json_encode($objResultado);
                return $objResultado;
            }
            else
            {

                $objData        = json_encode($arrayEncontrados);
                $objResultado   = '{"total":"'.$intCantidad.'","encontrados":'.$objData.'}';
                return $objResultado;
            }
        }
        else
        {
            $objResultado = '{"total":"0","encontrados":[]}';
            return $objResultado;
        }
        
    }
    
    
     /**
     * getRegistrosReporteMateriales
     * 
     * Esta funcion ejecuta el Query que retorna los materiales utilizados en la instalacion
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 07-09-2015 
     * 
     * @author Ruben Vera <rhvera@telconet.ec>
     * @version 1.1 05-05-2023 Se modifica consulta para obtener 1 solo registro por fila en A.descripcion y B.nombre
     * 
     * @param string $formaRetorna  'count' o 'datos'
     * @param array  $parametros
     * @param string $strPrefijoEmpresa     
     * 
     * @return array $strDatos      Consulta de la BD
     * 
     */
    public function getRegistrosReporteMateriales($formaRetorna,$parametros,$strPrefijoEmpresa) 
    {
        
        
        $strStart = $parametros["start"];
        $strLimit = $parametros["limit"];

        $strQuery      = $this->_em->createQuery();        
        $strSelect     = " SELECT                                  
                                SUM(idsm.cantidadUsada) as cantidad,
                                
                                idsm.materialCod as materialCod,
                                
                                A.descripcion as descripcion,  
                                
                                B.nombre as unidad
                            FROM 
                                schemaBundle:InfoPunto ip,
                                schemaBundle:InfoServicio ise,
                                schemaBundle:InfoDetalleSolicitud ids,
                                schemaBundle:InfoDetalleSolMaterial idsm,
                                schemaBundle:InfoPersonaEmpresaRol iper,
                                schemaBundle:Arinum B,
                                schemaBundle:Arinda A 
                            WHERE 
                                ip.id = ise.puntoId
                                AND ip.personaEmpresaRolId = iper.id
                                AND ise.id = ids.servicioId
                                AND ids.id = idsm.detalleSolicitudId
                                AND ids.tipoSolicitudId = :paramTipoSolicitud 
                                AND iper.empresaRolId IN ( SELECT pp.id FROM schemaBundle:InfoEmpresaRol pp WHERE pp.empresaCod IN (
                                                        SELECT TT.id FROM schemaBundle:InfoEmpresaGrupo TT WHERE TT.prefijo IN 
                                                        (:prefijoEmpresa))) 
                                AND B.unidad in (SELECT DISTINCT(C.unidad)
                                                    FROM schemaBundle:Arinda C
                                                    WHERE C.noArti = idsm.materialCod)
                                AND A.noArti = idsm.materialCod ";                                              
                                
        $strQuery->setParameter("paramTipoSolicitud", 8);
        $strQuery->setParameter("prefijoEmpresa",$strPrefijoEmpresa);       
	
        if(isset($parametros["fechaDesdePlanif"]))
        {
            if($parametros["fechaDesdePlanif"] && $parametros["fechaDesdePlanif"]!="")
            {
                $strDateF        = explode("-",$parametros["fechaDesdePlanif"]);
                $strFechaSql     = date("Y/m/d", strtotime($strDateF[2]."-".$strDateF[1]."-".$strDateF[0]));			
                $boolBusqueda    = true;
                $strSelect       .= " AND ids.feCreacion >= :fechaDesdePlanificacion ";
                $strQuery        -> setParameter("fechaDesdePlanificacion", trim($strFechaSql));
	        }
        }    
        if(isset($parametros["fechaHastaPlanif"]))
        {
            if($parametros["fechaHastaPlanif"] && $parametros["fechaHastaPlanif"]!="")
            {
                $strDateF        = explode("-",$parametros["fechaHastaPlanif"]);
                $strFechaSqlAdd  = strtotime(date("Y-m-d", strtotime($strDateF[2]."-".$strDateF[1]."-".$strDateF[0])));
                $strFechaSql     = date("Y/m/d", $strFechaSqlAdd);			
                $boolBusqueda    = true;
                $strSelect       .= " AND ids.feCreacion <= :fechaHastaPlanificacion ";
                $strQuery        -> setParameter("fechaHastaPlanificacion", trim($strFechaSql));
            }       
        }  
        
        
        $strSelect = $strSelect . " GROUP BY idsm.materialCod,A.descripcion,B.nombre ";

        $strQuery        -> setDQL($strSelect);  
        
        $boolBusqueda    = false;         
        if($strStart!='' && !$boolBusqueda && $strLimit!='' && $formaRetorna == "datos") 
        {    
            $strDatos = $strQuery->setFirstResult($strStart)->setMaxResults($strLimit)->getResult();        
        }
        else            
        {
            $strDatos = $strQuery->getResult();
        }
        

        if($formaRetorna == "datos")
        {
            return $strDatos;
        }
        else if($formaRetorna == "count")
        {
            return $strDatos ? count($strDatos) : 0;
        }
        else 
        {
            return false;
        }
        
        return $strDatos;
    } 
    
    
   /**
    * generarJsonReporteCambioEquipo
    * 
    * Esta funcion retorna el reporte de Cambio de Equipo, en formato JSON para ser mostrado en TELCOS+
    * 
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 26-08-2015 
    * 
    */
    public function generarJsonReporteCambioEquipo($estado, $parametros,$prefijoEmpresa) 
    {

        $arrayEncontrados        = array();
        $intCantidad             = 0;	
		$intCantidad             = $this->getRegistrosReporteCambioEquipo('count',$estado, $parametros,$prefijoEmpresa);
        
		$arrayRegistros          = $this->getRegistrosReporteCambioEquipo('datos', $estado,$parametros,$prefijoEmpresa);

        if ($arrayRegistros) 
        {            
            foreach ($arrayRegistros as $data)
            {   
                                 
                 $strFecha_creacion   =  strval(date_format($data["feCreacion"],"d/m/Y G:i"));
                 
                 $arrayEncontrados[]  = array('nombres'          => $data["nombres"],
                                              'apellidos'        => $data["apellidos"],
                                              'direccion'        => $data["direccion"], 
                                              'motivo'           => $data["motivo"],
                                              'usuario_creacion' => $data["usrCreacion"],                                                            
                                              'fecha_creacion'   => trim($strFecha_creacion),                     
                                              'estado'           => $data["estado"]);                  
            }  

            if($intCantidad == 0)
            {
                $objResultado = array('total'       => 1 ,
                                      'encontrados' => array('id_factibilidad'     => 0 , 
                                                             'nombre_factibilidad' => 'Ninguno', 
                                                             'factibilidad_id'     => 0 ,
                                                             'factibilidad_nombre' => 'Ninguno', 
                                                             'estado'              => 'Ninguno'));
                $objResultado = json_encode($objResultado);
                return $objResultado;
            }
            else
            {

                $objData        = json_encode($arrayEncontrados);
                $objResultado   = '{"total":"'.$intCantidad.'","encontrados":'.$objData.'}';
                return $objResultado;
            }
        }
        else
        {
            $objResultado = '{"total":"0","encontrados":[]}';
            return $objResultado;
        }
        
    }

    
    /**
     * getRegistrosReporteCambioEquipo
     * 
     * Esta funcion ejecuta el Query que retorna el reporte de Cambio de Equipo
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 26-08-2015 
     * 
     */
    public function getRegistrosReporteCambioEquipo($formaRetorna,$estado,$parametros,$prefijoEmpresa) 
    {
        
        
        $strStart = $parametros["start"];
        $strLimit = $parametros["limit"];

        $strQuery        = $this->_em->createQuery();

        $strSelect       = " SELECT ipe.nombres,ipe.apellidos,ipe.direccion,
                            (select amo.nombreMotivo FROM schemaBundle:AdmiMotivo amo WHERE amo.id = ide.motivoId) motivo,ide.usrCreacion ,
                            ide.feCreacion ,ide.estado FROM schemaBundle:InfoDetalleSolicitud ide,             
                             schemaBundle:InfoServicio ise,
                             schemaBundle:InfoPunto ipu,schemaBundle:InfoPersonaEmpresaRol iper,
                             schemaBundle:InfoPersona ipe WHERE ide.tipoSolicitudId = ( select ati.id FROM schemaBundle:AdmiTipoSolicitud ati 
                             WHERE ati.descripcionSolicitud = 'SOLICITUD CAMBIO EQUIPO') 
                             AND ide.servicioId = ise.id                
                             AND ise.puntoId = ipu.id
                             AND ipu.personaEmpresaRolId = iper.id
                             AND iper.personaId = ipe.id
                             AND iper.empresaRolId IN ( select pp.id from schemaBundle:InfoEmpresaRol pp WHERE pp.empresaCod IN (
                             SELECT TT.id FROM schemaBundle:InfoEmpresaGrupo TT WHERE TT.prefijo in (:prefijoEmpresa))) ";                   
  
        
        $strQuery->setParameter("prefijoEmpresa", $prefijoEmpresa);
        
        
        if(isset($parametros["fechaDesdeSolPlanif"]))
		{
	        if($parametros["fechaDesdeSolPlanif"] && $parametros["fechaDesdeSolPlanif"]!="")
		    {
                $strDateF        = explode("-",$parametros["fechaDesdeSolPlanif"]);
                $strFechaSql     = date("Y/m/d", strtotime($strDateF[2]."-".$strDateF[1]."-".$strDateF[0]));			
                $boolBusqueda    = true;
                $strSelect       .= " AND ide.feCreacion >= :fechaDesdePlanificacion ";
		        $strQuery        -> setParameter("fechaDesdePlanificacion", trim($strFechaSql));
		    }
		}
		if(isset($parametros["fechaHastaSolPlanif"]))
		{
		    if($parametros["fechaHastaSolPlanif"] && $parametros["fechaHastaSolPlanif"]!="")
		    {
		        $strDateF        = explode("-",$parametros["fechaHastaSolPlanif"]);
                $strFechaSqlAdd  = strtotime(date("Y-m-d", strtotime($strDateF[2]."-".$strDateF[1]."-".$strDateF[0])). " +1 day");
                $strFechaSql     = date("Y/m/d", $strFechaSqlAdd);			
                $boolBusqueda    = true;
                $strSelect       .= " AND ide.feCreacion <= :fechaHastaPlanificacion ";
                $strQuery        -> setParameter("fechaHastaPlanificacion", trim($strFechaSql));
		    }
		}
				
		if(isset($parametros["fechaDesdePlanif"]))
		{
	            if($parametros["fechaDesdePlanif"] && $parametros["fechaDesdePlanif"]!="")
	            {
	                $strDateF        = explode("-",$parametros["fechaDesdePlanif"]);
	                $strFechaSql     = date("Y/m/d", strtotime($strDateF[2]."-".$strDateF[1]."-".$strDateF[0]));			
	                $boolBusqueda    = true;
			        $strSelect       .= " AND ide.feCreacion >= :fechaDesdePlanificacion ";
                    $strQuery        -> setParameter("fechaDesdePlanificacion", trim($strFechaSql));
	            }
		}
		if(isset($parametros["fechaHastaPlanif"]))
		{
	            if($parametros["fechaHastaPlanif"] && $parametros["fechaHastaPlanif"]!="")
	            {
	                $strDateF        = explode("-",$parametros["fechaHastaPlanif"]);
	                $strFechaSqlAdd  = strtotime(date("Y-m-d", strtotime($strDateF[2]."-".$strDateF[1]."-".$strDateF[0])). " +1 day");
	            	$strFechaSql     = date("Y/m/d", $strFechaSqlAdd);			
	            	$boolBusqueda    = true;
			        $strSelect       .= " AND ide.feCreacion <= :fechaHastaPlanificacion ";
                	$strQuery        -> setParameter("fechaHastaPlanificacion", trim($strFechaSql));
	            }
		}
      
		if($estado == "Todos")
		{
			$strSelect .= " AND ( LOWER(ide.estado) = LOWER('Anulado') OR LOWER(ide.estado) = LOWER('PrePlanificada') "
                       . "OR LOWER(ide.estado) = LOWER('AsignadoTarea') OR LOWER(ide.estado) = LOWER('Finalizada') "
                       . "OR LOWER(ide.estado) = LOWER('AsignadoTarea')) ";			
		}
		if($estado != "Todos")
		{
			$strSelect .= " AND (LOWER(ide.estado) = LOWER('$estado')) ";			
		}
        

        $strSelect      .= " ORDER BY ide.feCreacion DESC";

        $strQuery        -> setDQL($strSelect);  
        
        $boolBusqueda    = false;        
        if($strStart!='' && !$boolBusqueda && $strLimit!='') 
        {    
            $strDatos = $strQuery->setFirstResult($strStart)->setMaxResults($strLimit)->getResult();        
        }
        else if($strStart!='' && !$boolBusqueda && $strLimit=='')                       
        {
            $strDatos = $strQuery->setFirstResult($strStart)->getResult();        
        }
        else if(($strStart=='' || $boolBusqueda) && $strLimit!='')            
        {
            $strDatos = $strStart->setMaxResults($strLimit)->getResult();
        }
        else            
        {
            $strDatos = $strQuery->getResult();
        }
        

        if($formaRetorna == "datos")
        {
            return $strDatos;
        }
        else if($formaRetorna == "count")
        {
            return $strDatos ? count($strDatos) : 0;
        }
        else 
        {
            return false;
        }
        
        return $strDatos;
    }    
    

    /**
     * Funcion que sirve para verificar si el cliente
     * tiene una solicitud de cambio de equipo
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 3-08-2015
     *
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.1
     * @since 04-09-2018
     * Se modifican todos los parámetros a un array.
     * Se agrega el tipo de solicitud como parámetro.
     * Se renombran las variables fuera del estándar de desarrollo.
     *
     * @param int $arrayParametros["intIdPunto"]
     * @param string $arrayParametros["strEstadoSolicitud"]
     * @param string $arrayParametros["strEstadoTipoSol"]
     * @param int $arrayParametros["intNumeroDias"]
     * @param array $arrayParametros["arraySolicitudes"]
     * @return array $resultado (ID_DETALLE_SOLICITUD)
     */
    public function getSolicitudPorPuntoFechaEstadoSolicitud($arrayParametros)
    {
        $objRsm = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $strSql = "SELECT SOLICITUD.ID_DETALLE_SOLICITUD AS ID_DETALLE_SOLICITUD
                FROM INFO_PUNTO PUNTO, INFO_SERVICIO SERVICIO, INFO_DETALLE_SOLICITUD SOLICITUD, ADMI_TIPO_SOLICITUD TIPO_SOLICITUD
                WHERE PUNTO.ID_PUNTO = SERVICIO.PUNTO_ID
                AND SERVICIO.ID_SERVICIO = SOLICITUD.SERVICIO_ID
                AND SOLICITUD.TIPO_SOLICITUD_ID = TIPO_SOLICITUD.ID_TIPO_SOLICITUD
                AND TIPO_SOLICITUD.DESCRIPCION_SOLICITUD IN (:tipoSolicitud)
                AND TIPO_SOLICITUD.ESTADO = :estadoTiposSol
                AND PUNTO.ID_PUNTO = :idPunto
                AND SOLICITUD.ESTADO = :estadoSolicitud
                AND SOLICITUD.FE_CREACION  > (SYSDATE - :diasConsulta)
                AND SOLICITUD.FE_CREACION  <= (SYSDATE)";

        $objRsm->addScalarResult('ID_DETALLE_SOLICITUD',  'idDetalleSolicitud',   'string');
        
        $objQuery->setParameter('idPunto',         $arrayParametros["intIdPunto"]);
        $objQuery->setParameter('estadoSolicitud', $arrayParametros["strEstadoSolicitud"]);
        $objQuery->setParameter('estadoTiposSol', $arrayParametros["strEstadoTipoSol"]);
        $objQuery->setParameter('diasConsulta',    (isset($arrayParametros["intNumeroDias"]) ? $arrayParametros["intNumeroDias"]: 1));
        $objQuery->setParameter('tipoSolicitud',   $arrayParametros["arraySolicitudes"]);
        
        $objQuery->setSQL($strSql);
        $arrayResult = $objQuery->getResult();
        
        if(count($arrayResult)<1)
        {
            $arrayResultado = null;
        }
        else
        {
            $arrayResultado  = $arrayResult[0];
        }
        
        return $arrayResultado;
    }
     

     /**
     * generarRegistrosAsignadas
     * 
     * Función que llama al procedimiento de la BD que ingresa los registros
     * consultados del Reporte Asignadas
     *
     * @author  Richard Cabrera         <rcabrera@telconet.ec>
     * @version 1.1 08-07-2016 Se realiza ajustes para enviar el codigo de la empresa al paquete de BD que genera el reporte
     *
     * @author  Richard Cabrera         <rcabrera@telconet.ec>
     * @version 1.0 04-08-2015
     */  
   
    public function generarRegistrosAsignadas($parametros)
    {

            
            $arrayParametrosOut = array();

            //se realiza la invocacion al procedure que realiza el procesamiento de la información a generar en archivo excel
            $strSql = "BEGIN GeneraInformacionExcel.generarInfoExcelReporteAsigna"
                    . "(:estado,:fechaDesdeSolPlani, :fechaHastaSolPlani, :fechaDesdePlani, "
                    . " :fechaHastaPlani, :login2, :descripcionPunto, :vendedor, :ciudad, "
                    . " :numOrdenServicio, :tipoResponsable, :codigoResponsable, :prefijoEmpresa, :codigoEmpresa , "
                    . ":identificadorArchivo, :mensajeError); END;";
            
            $stmt                   = $this->_em->getConnection()->prepare($strSql);
            $strCodigoArchivoSalida = str_repeat(' ', 5000);
            $strMensajeErrorSalida  = str_repeat(' ', 5000);
            $stmt->bindParam('estado', $parametros['estado']);
            $stmt->bindParam('fechaDesdeSolPlani', $parametros['fechaDesdeSolPlani']);
            $stmt->bindParam('fechaHastaSolPlani', $parametros['fechaHastaSolPlani']);
            $stmt->bindParam('fechaDesdePlani', $parametros['fechaDesdePlani']);
            $stmt->bindParam('fechaHastaPlani', $parametros['fechaHastaPlani']);
            $stmt->bindParam('login2', $parametros['login2']);
            $stmt->bindParam('descripcionPunto', $parametros['descripcionPunto']);
            $stmt->bindParam('vendedor', $parametros['vendedor']);
            $stmt->bindParam('ciudad', $parametros['ciudad']);
            $stmt->bindParam('numOrdenServicio', $parametros['numOrdenServicio']);
            $stmt->bindParam('tipoResponsable', $parametros['tipoResponsable']);
            $stmt->bindParam('codigoResponsable', $parametros['codigoResponsable']);
            $stmt->bindParam('prefijoEmpresa', $parametros['prefijoEmpresa']);
            $stmt->bindParam('codigoEmpresa', $parametros['codigoEmpresa']);
            $stmt->bindParam('identificadorArchivo', $strCodigoArchivoSalida);
            $stmt->bindParam('mensajeError', $strMensajeErrorSalida);
            $stmt->execute();
            
            $arrayParametrosOut['identificadorArchivo'] = $strCodigoArchivoSalida;
            $arrayParametrosOut['mensajeError']         = $strMensajeErrorSalida;
            
            
            return $arrayParametrosOut;

    }
   
     /**
      * getSolicitudPorPunto
      * 
     * Función que retora el id y el estado de la solicitud segun el punto, el tipo de solicitud, ell motivo y estado
     * @param mixed $punto 
     * @param mixed $tipoSolicitud 
     * @param mixed $motivo 
     * @param mixed $estadoSolicitud
     *  
     * @return mixed $datos Retorna el id de la solicitud y el estado
     * 
     * @author Creado:     John Vera         <javera@telconet.ec>
     * @version 1.0 27-02-2015
     * 
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.2 07-09-2015
     * Se corrige Bug para que muestre todas las solicitudes de Migracion que tenga el Punto
      * 
     */  
   
    public function getSolicitudPorPunto($punto, $tipoSolicitud, $estadoSolicitud)
    {
        $datos = '';
        if($punto && $tipoSolicitud && $estadoSolicitud)
        {
            $query = $this->_em->createQuery("SELECT DS.id, DS.estado, TS.descripcionSolicitud
                                            FROM schemaBundle:InfoServicio S,
                                              schemaBundle:InfoDetalleSolicitud DS,
                                              schemaBundle:AdmiTipoSolicitud TS                                              
                                            WHERE S.id                  = DS.servicioId
                                            AND TS.id                   = DS.tipoSolicitudId                                           
                                            AND S.puntoId               = :punto
                                            AND DS.estado               in (:estadoSolicitud)
                                            AND TS.descripcionSolicitud = :tipoSolicitud
                                            AND TS.estado               = :estado");

            $query->setParameter("punto", $punto);
            $query->setParameter("tipoSolicitud", $tipoSolicitud);            
            $query->setParameter("estadoSolicitud", $estadoSolicitud);
            $query->setParameter("estado", 'Activo');
            
            $datos = $query->getResult();
        }

        return $datos;
    }

    /**
     * Función que retorna la suma de precios de venta  de las solicitudes según el estado
     * @param mixed $tipoSolicitud Tipo de la solicitud
     * @param mixed $estado Estado de la solicitud.
     *
     * @return mixed $datos Retorna la sumatoria del valor de las solicitudes.
     * 
     * @author Creado:     John Vera         <javera@telconet.ec>
     * @version 1.0 08-08-2014
     */  
   
    public function totalServiciosPorSolicitud($tipoSolicitud, $estado, $idEmpresa){

        $query = $this->_em->createQuery("
                SELECT SUM(SE.precioVenta) total
                FROM schemaBundle:InfoDetalleSolicitud DS,
                     schemaBundle:InfoServicio SE,
                     schemaBundle:AdmiTipoSolicitud TS,
                     schemaBundle:InfoPunto PU,
                     schemaBundle:InfoPersonaEmpresaRol PE,
                     schemaBundle:InfoEmpresaRol ER
                WHERE DS.servicioId  = SE.id
                AND SE.puntoId= PU.id
                AND PU.personaEmpresaRolId = PE.id
                AND PE.empresaRolId = ER.id
                AND ER.empresaCod = :idEmpresa               
                AND TS.id = DS.tipoSolicitudId
                AND TS.descripcionSolicitud = :tipoSolicitud
                AND DS.estado= :estado ");
        
        $query->setParameter("tipoSolicitud", $tipoSolicitud);
        $query->setParameter("estado", $estado);
        $query->setParameter("idEmpresa", $idEmpresa);
        
        $datos = $query->getResult();
        
        return $datos;
    }
    
    /**
     * Función que obtiene el historial de una solicitud de acuerdo al estado
     * @param integer $idSolicitud
     * @param integer start
     * @param integer limit
     * 
     * @return json $resultado
     *
     * @version 1.0 version inicial
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>     
     * @version 1.1 16-05-2015 - Se modifica para que en la observacion también se muestren los detalles respectivos de acuerdo 
     * al estado de la solicitud incluyendo como parámetro el $emSoporte
     */  
    public function generarJsonHistorialDetalleSolicitud($idSolicitud, $start, $limit, $emGeneral,$emSoporte){
        $arr_encontrados = array();
        
         $qb = $this->_em->createQueryBuilder();
            $qb->select('h')
               ->from('schemaBundle:InfoDetalleSolHist','h');
         
        if($idSolicitud!=""){
            $qb ->where('h.detalleSolicitudId = ?1');
            $qb->setParameter(1, $idSolicitud);
            $qb->orderBy('h.feCreacion','ASC');
        }
        if($start!='')
            $qb->setFirstResult($start);   
        if($limit!='')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        $historial = $query->getResult();
        
        if ($historial) {
            
            $num = count($historial);
            foreach ($historial as $entity)
            {
                
                $usrCreacion = $entity->getUsrCreacion();
                $feCreacion = $entity->getFeCreacion();
                $fechaCreacion=strval(date_format($feCreacion, "d/m/Y G:i"));
                
                $ipCreacion = $entity->getIpCreacion();
                $estado = $entity->getEstado();
                $motivoId = $entity->getMotivoId();
                if($motivoId!=null){
                    $motivo = $emGeneral->find('schemaBundle:AdmiMotivo', $motivoId);
                    $nombreMotivo = $motivo->getNombreMotivo();
                }
                else{
                    $nombreMotivo = "NA";
                }
                $observacion = $entity->getObservacion();
                
                if( strtoupper($estado)==strtoupper("FactibilidadEnProceso"))
                {
                    $feFactibilidad = $entity->getFeFinPlan();
                    $fechaFactibilidad=strval(date_format($feFactibilidad, "d/m/Y"));
                    $observacion.="<br>Fecha Factibilidad: ".$fechaFactibilidad;
                }
                
                else if( strtoupper($estado)==strtoupper("Planificada"))
                {
                    $observacion.="<br>";
                    $feIniPlanificada = $entity->getFeIniPlan();
                    $feFinPlanificada = $entity->getFeFinPlan();
                    $fechaIniPlanificada=strval(date_format($feIniPlanificada, "d/m/Y"));
                    $horaIniPlanificada=strval(date_format($feIniPlanificada, "H:i"));
                    $horaFinPlanificada=strval(date_format($feFinPlanificada, "H:i"));
                    $observacion.="<br>Fecha Planificada: ".$fechaIniPlanificada;
                    $observacion.="<br>Hora Inicio: ".$horaIniPlanificada;
                    $observacion.="<br>Hora Fin: ".$horaFinPlanificada;
                    $observacion.="<br><br>";
                }
                else if( strtoupper($estado)==strtoupper("RePlanificada"))
                {
                    $observacion.="<br>";
                    $feIniReplanificada = $entity->getFeIniPlan();
                    $feFinReplanificada = $entity->getFeFinPlan();
                    $fechaIniReplanificada=strval(date_format($feIniReplanificada, "d/m/Y"));
                    $horaIniReplanificada=strval(date_format($feIniReplanificada, "H:i"));
                    $horaFinReplanificada=strval(date_format($feFinReplanificada, "H:i"));
                    
                    $observacion.="<br>Fecha Replanificada: ".$fechaIniReplanificada;
                    $observacion.="<br>Hora Inicio: ".$horaIniReplanificada;
                    $observacion.="<br>Hora Fin: ".$horaFinReplanificada;
                    $observacion.="<br><br>";
                }
                else if( strtoupper($estado)==strtoupper("AsignadoTarea"))
                {
                    $observacion.="<br>";
                    $tareasPlanificacion    = $emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                    ->generarArrayTareasAsignadas($this->_em, "", "", $idSolicitud);
                    foreach($tareasPlanificacion as $tareaPlanificacion)
                    {
                        if($tareaPlanificacion['tipo_asignado']=="CUADRILLA")
                        {
                            $observacion.="<br>Asignada a: Cuadrilla";
                            $cuadrilla=$this->_em->getRepository("schemaBundle:AdmiCuadrilla")->find($tareaPlanificacion['id_asignado']);
                            
                            $observacion.="<br>Nombre: ".$cuadrilla->getNombreCuadrilla();
                            
                            $arrayDatos = $this->_em->getRepository('schemaBundle:AdmiCuadrilla')
                                                ->findJefeCuadrilla($tareaPlanificacion['id_asignado']);
                            $nombreLiderCuadrilla="N/A";
                            if($arrayDatos)
                            {
                                $nombreLiderCuadrilla=$arrayDatos['nombres'];
                            }
                            $observacion.="<br>L&iacute;der de Cuadrilla: ".$nombreLiderCuadrilla;
                                            
                        }
                        else if($tareaPlanificacion['tipo_asignado']=="EMPLEADO")
                        {
                            $observacion.="<br>Asignada a: Empleado";
                            $observacion.="<br>Nombre: ".$tareaPlanificacion['ref_nombre_asignado'];
                            $observacion.="<br>Departamento: ".$tareaPlanificacion['nombre_asignado'];
                        }
                        else if($tareaPlanificacion['tipo_asignado']=="EMPRESAEXTERNA")
                        {
                            $observacion.="<br>Asignada a: Contratista";
                            
                            $observacion.="<br>Nombre: ".$tareaPlanificacion['nombre_asignado'];
                        }
                        
                        $observacion.="<br><br>";
                        
                    }
                    
                }


                
                if($entity->getObservacion()!="Se realizo cambio de bw - normal" && $entity->getObservacion()!="Se realizo cambio de bw - promocional" ){
                    $arr_encontrados[]=array('usrCreacion' =>$usrCreacion,
                                         'feCreacion'=> $fechaCreacion,
                                         'ipCreacion'=> $ipCreacion,
                                         'estado'=> $estado,
                                         'nombreMotivo'=> $nombreMotivo,
                                         'observacion'=> $observacion,
                                    );
                }
                
                
            }

            if($num == 0)
            {
               $resultado= array('total' => 1 ,
                                 'encontrados' => array('idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno','idConectorInterface' => 0 , 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);

                return $resultado;
            }
            else
            {
                $data=json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$data.'}';

                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    
    public function getDetalleSolicitudMaterialByServicioAndEstado($em,$idServicio,$estado){
		$query = $this->_em->createQuery("SELECT a
		FROM 
                schemaBundle:InfoDetalleSolicitud a, schemaBundle:AdmiTipoSolicitud b
		WHERE 
                a.tipoSolicitudId = b.id AND
                UPPER(b.descripcionSolicitud) = '".strtoupper("SOLICITUD MATERIALES EXCEDENTES")."' AND
                a.servicioId = $idServicio AND 
                UPPER(a.estado)= '".strtoupper($estado)."' ");
                // echo $query->getSQL();die;
		$datos = $query->getOneOrNullResult();
		return $datos;
	
	}
	
    public function findSolicDescuentoPorServicio($idServicio,$tipoSolicitud,$estado){	    
		$query = $this->_em->createQuery("SELECT a
		FROM 
                schemaBundle:InfoDetalleSolicitud a, schemaBundle:AdmiTipoSolicitud b
		WHERE 
                a.tipoSolicitudId = b.id AND
                UPPER(b.descripcionSolicitud) = '".strtoupper($tipoSolicitud)."' AND
                a.servicioId = $idServicio AND 
                UPPER(a.estado)= '".strtoupper($estado)."' ");
                //echo $query->getSQL();die;
		$datos = $query->getResult();
		return $datos;
	}
        
    /**
     * Función que obtiene el o los registros según sus parámetros.
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.0
     * @since 26-04-2018
     */
    public function findByParameters($arrayParameters)
    {
        $objRsm                 = new ResultSetMappingBuilder($this->_em);
        $strCriterioEstado      = '';
        $strCriterioPrecioVenta = '';
        $strCriterioTipoSol     = '';
        $intServicioId          = $arrayParameters["servicioId"] ? $arrayParameters["servicioId"] : 0;
        $strEstado              = $arrayParameters["estado"];
        $strOrden               = $arrayParameters["orden"];
        $floatPrecioDescuento   = $arrayParameters["precioDescuento"] ? $arrayParameters["precioDescuento"] : 0;
        $intTipoSolicitudId     = $arrayParameters["tipoSolicitudId"] ? $arrayParameters["tipoSolicitudId"] : 0;
        $strSql="SELECT * FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD WHERE SERVICIO_ID = :servicioId";
        try
        {
            $objQuery = $this->_em->createNativeQuery(null, $objRsm);
            $objQuery->setParameter('servicioId', $intServicioId);

            if($strEstado)
            {
                $strCriterioEstado = " AND ESTADO = :estado ";
                $objQuery->setParameter('estado', $strEstado);
            }
            if($intTipoSolicitudId > 0)
            {
                $strCriterioTipoSol =" AND TIPO_SOLICITUD_ID = :tipoSolicitudId ";
                $objQuery->setParameter('tipoSolicitudId', $intTipoSolicitudId);
            }
            if($floatPrecioDescuento > 0)
            {
                $strCriterioPrecioVenta =" AND PRECIO_DESCUENTO = :precioDescuento ";
                $objQuery->setParameter('precioDescuento', $floatPrecioDescuento);
            }

            $strSql .= $strCriterioEstado . $strCriterioTipoSol . $strCriterioPrecioVenta;

            if($strOrden)
            {
                $strSql .= $strOrden;
            }

            $objRsm->addScalarResult('ID_DETALLE_SOLICITUD', 'id','integer');
            $objRsm->addScalarResult('SERVICIO_ID', 'servicioId', 'integer');
            $objRsm->addScalarResult('TIPO_SOLICITUD_ID', 'tipoSolicitudId','integer');
            $objRsm->addScalarResult('MOTIVO_ID', 'motivoId','integer');
            $objRsm->addScalarResult('USR_CREACION', 'usrCreacion','string');
            $objRsm->addScalarResult('FE_CREACION', 'feCreacion','string');
            $objRsm->addScalarResult('PRECIO_DESCUENTO', 'precioDescuento','integer');
            $objRsm->addScalarResult('PORCENTAJE_DESCUENTO', 'porcentajeDescuento','integer');
            $objRsm->addScalarResult('TIPO_DOCUMENTO', 'tipoDocumento','integer');
            $objRsm->addScalarResult('OBSERVACION', 'observacion','string');
            $objRsm->addScalarResult('ESTADO', 'estado','string');
            $objRsm->addScalarResult('USR_RECHAZO', 'usrRechazo','string');
            $objRsm->addScalarResult('FE_RECHAZO', 'feRechazo','string');
            $objRsm->addScalarResult('DETALLE_PROCESO_ID', 'detalleProcesoId','integer');
            $objRsm->addScalarResult('FE_EJECUCION', 'feEjecucion','string');
            $objRsm->addScalarResult('ELEMENTO_ID', 'elementoId','integer');

            $objQuery->setSQL($strSql);
            $arrayResultado         = $objQuery->getScalarResult();
        }
        catch (\Exception $ex)
        {
            error_log($ex->getMessage());
        }
        return $arrayResultado;
    }

     /**
     * Función que obtiene el conteo de los registros de InfoDetalleSolicitud
     * mediante id de servicio y id de tipo solicitud.
     * @author Jonathan Quintana <jiquintana@telconet.ec>
     * @version 1.0
     * @since 22-12-2022
     */
    public function findCountDetalleSolicitudByIds($idServicio,$idTipoSolicitud){	 
        $sql = "SELECT count(ds ) as cont   
                FROM schemaBundle:InfoDetalleSolicitud ds, schemaBundle:AdmiTipoSolicitud ts, schemaBundle:InfoServicio s 
                WHERE ds.tipoSolicitudId = ts.id AND ds.servicioId = s.id 
                AND s.id = $idServicio AND ts.id = $idTipoSolicitud 
				AND LOWER(ds.estado) != LOWER('Rechazada') 
               ";
        $query = $this->_em->createQuery($sql);
        $datos = $query->getSingleResult();
        return $datos;
    }
	

    /**
     * Función que obtiene el último registro de InfoDetalleSolicitud
     * mediante id de servicio y id de tipo solicitud.
     * @author Jonathan Quintana <jiquintana@telconet.ec>
     * @version 1.0
     * @since 22-12-2022
     */
    public function findUlitmoDetalleSolicitudByIds($idServicio,$idTipoSolicitud){	 
        $sql = "SELECT ds  
                FROM schemaBundle:InfoDetalleSolicitud ds, schemaBundle:AdmiTipoSolicitud ts, schemaBundle:InfoServicio s 
                WHERE ds.tipoSolicitudId = ts.id AND ds.servicioId = s.id 
                AND s.id = $idServicio AND ts.id = $idTipoSolicitud 
				ORDER BY ds.id DESC 
               ";
        $query = $this->_em->createQuery($sql);
        $datos = $query->setMaxResults(1)->getOneOrNullResult();
        return $datos;
    }
    
    /**
     * Función que obtiene los registros de InfoDetalleSolicitud 
     * mediante id de tipo de solicitud y login.
     * @author Jonathan Quintana <jiquintana@telconet.ec>
     * @version 1.0
     * @since 22-12-2022
     * 
     * Se agrega el campo producto.
     * @author Victor PEña <vpena@telconet.ec>
     * @version 1.1
     * @since 14-92-2023
     */
    public function getSolicitudesPuntoTipo($strTipo, $strLogin)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQueryData       = $this->_em->createNativeQuery(null,$objRsm);
        
        $strSql = " SELECT DS.ID_DETALLE_SOLICITUD, DS.SERVICIO_ID, DS.TIPO_SOLICITUD_ID, DS.MOTIVO_ID, DS.USR_CREACION, 
        DS.FE_CREACION, DS.OBSERVACION, DS.ESTADO, DS.USR_RECHAZO, DS.FE_RECHAZO, DS.FE_EJECUCION, DS.DETALLE_PROCESO_ID, 
        (SELECT DESCRIPCION_PRODUCTO 
        FROM ADMI_PRODUCTO 
        WHERE ID_PRODUCTO IN (SELECT PRODUCTO_ID FROM INFO_SERVICIO WHERE ID_SERVICIO = DS.SERVICIO_ID)) PRODUCTO 
                    FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD DS 
                    WHERE DS.SERVICIO_ID IN (SELECT ID_SERVICIO FROM DB_COMERCIAL.INFO_SERVICIO 
                    WHERE PUNTO_ID = (SELECT ID_PUNTO FROM DB_COMERCIAL.INFO_PUNTO WHERE LOGIN = :strLogin)) ";

        if($strTipo)
        {
            $strSql.= " AND DS.TIPO_SOLICITUD_ID = :strTipoSolicitudId ";
        }

        $objRsm->addScalarResult('ID_DETALLE_SOLICITUD', 'id_detalle_solicitud', 'integer');
        $objRsm->addScalarResult('SERVICIO_ID', 'servicio_id', 'integer');
        $objRsm->addScalarResult('TIPO_SOLICITUD_ID', 'tipo_solicitud_id', 'integer');
        $objRsm->addScalarResult('MOTIVO_ID', 'motivo_id', 'integer');
        $objRsm->addScalarResult('USR_CREACION', 'usr_creacion', 'string');
        $objRsm->addScalarResult('FE_CREACION', 'fe_creacion', 'string');
        $objRsm->addScalarResult('OBSERVACION', 'observacion', 'string');
        $objRsm->addScalarResult('ESTADO', 'estado', 'string');
        $objRsm->addScalarResult('USR_RECHAZO', 'usr_rechazo', 'string');
        $objRsm->addScalarResult('FE_RECHAZO', 'fe_rechazo', 'string');
        $objRsm->addScalarResult('FE_EJECUCION', 'fe_ejecucion', 'string');
        $objRsm->addScalarResult('DETALLE_PROCESO_ID', 'detalle_proceso_id', 'integer');
        $objRsm->addScalarResult('PRODUCTO', 'nombre_producto', 'string');

        $objQueryData->setParameter('strLogin', $strLogin);
        $objQueryData->setParameter('strTipoSolicitudId', $strTipo);

        $objQueryData->setSQL($strSql);

        $intTotal = count($objQueryData->getArrayResult());

        $arrayDatos = $objQueryData->getArrayResult();

        $arrayResultado['registros'] = $arrayDatos;
        $arrayResultado['total'] = $intTotal;
        return $arrayResultado;
    }

    /**
     * Función que obtiene el login auxiliar mediante el id de servicio.
     * @author Jonathan Quintana <jiquintana@telconet.ec>
     * @version 1.0
     * @since 22-12-2022
     */
    public function getLoginAuxPorIdServicio($intIdServicio)
    {
        $strSql = "SELECT s.loginAux  
                FROM schemaBundle:InfoServicio s 
                WHERE s.id = $intIdServicio";
        $objQuery = $this->_em->createQuery($strSql);
        $arrayDatos = $objQuery->setMaxResults(1)->getOneOrNullResult();
        return $arrayDatos;
    }

    /*
     * Función que obtiene un registro de la tabla INFO_SERVICIO 
     * mediante el id de servicio.
     * @author Victor Peña <vpena@telconet.ec>
     * @version 1.0
     * @since 16-02-2023
     */
    public function obtenerServicioPorId($intIdServicio)
    {
        $strSql = "SELECT s 
                FROM schemaBundle:InfoServicio s 
                WHERE s.id = $intIdServicio";
        $objQuery = $this->_em->createQuery($strSql);
        $arrayDatos = $objQuery->setMaxResults(1)->getOneOrNullResult();
        return $arrayDatos;
    } 

/*
     * Función que obtiene registros de INFO_SERVICIO mediante el punto
     * obtenido con el id de un servicio.
     * @author Victor Peña <vpena@telconet.ec>
     * @version 1.0
     * @since 13-03-2023
     */
    public function obtenerServiciosPaqueteHoras($intIdPunto)
    {
        $strSql = "SELECT s 
                FROM schemaBundle:InfoServicio s 
                WHERE s.puntoId = $intIdPunto
                AND s.productoId = (SELECT ap.id FROM schemaBundle:AdmiProducto ap WHERE ap.descripcionProducto = 'PAQUETE HORAS SOPORTE')";
        $objQuery = $this->_em->createQuery($strSql);
        $arrayDatos = $objQuery->getResult();
        return $arrayDatos;
    }


    /*
     * Función que obtiene un registro de la tabla INFO_SERVICIO_HISTORIAL 
     * mediante el id de servicio.
     * @author Victor Peña <vpena@telconet.ec>
     * @version 1.0
     * @since 16-02-2023
     */
    public function obtenerServicioHistPorId($intIdServicio)
    {
        $strSql = "SELECT s 
                FROM schemaBundle:InfoServicioHistorial s 
                WHERE s.servicioId = $intIdServicio";
        $objQuery = $this->_em->createQuery($strSql);
        $arrayDatos = $objQuery->setMaxResults(1)->getOneOrNullResult();
        return $arrayDatos;
    } 

    /*
     * Función que obtiene un registro de la tabla INFO_SERVICIO_PROD_CARACT 
     * mediante el id de servicio.
     * @author Victor Peña <vpena@telconet.ec>
     * @version 1.0
     * @since 16-02-2023
     */
    public function obtenerServicioProdCaractPorId($intIdServicio)
    {
        $strSql = "SELECT s 
                FROM schemaBundle:InfoServicioProdCaract s 
                WHERE s.servicioId = $intIdServicio";
        $objQuery = $this->_em->createQuery($strSql);
        $arrayDatos = $objQuery->setMaxResults(8)->getResult();
        return $arrayDatos;
    }

    /*
     * Función que obtiene un registro de la tabla INFO_PUNTO 
     * mediante el id.
     * @author Victor Peña <vpena@telconet.ec>
     * @version 1.0
     * @since 16-02-2023
     */
    public function obtenerInfoPuntoPorId($intIdInfoPunto)
    {
        $strSql = "SELECT s 
                FROM schemaBundle:InfoPunto s 
                WHERE s.id = $intIdInfoPunto";
        $objQuery = $this->_em->createQuery($strSql);
        $arrayDatos = $objQuery->setMaxResults(1)->getOneOrNullResult();
        return $arrayDatos;
    }
    
    /**
     * Función que obtiene el campo valor de un registro de
     * InfoDetalleSolCaract mediante el id de detalle solicitud.
     * @author Jonathan Quintana <jiquintana@telconet.ec>
     * @version 1.0
     * @since 22-12-2022
     */
    public function getValorPorDetalleSolicitudId($intDetalleSolicitudId)
    {
        $strSql = "SELECT dsc.valor  
                FROM schemaBundle:InfoDetalleSolCaract dsc 
                WHERE dsc.detalleSolicitudId = $intDetalleSolicitudId
                AND dsc.caracteristicaId = 
                (SELECT ac.id FROM schemaBundle:AdmiCaracteristica ac  WHERE ac.descripcionCaracteristica = 'CONTABILIZAR HORAS DE SOPORTE')";
        $objQuery = $this->_em->createQuery($strSql);
        $arrayDatos = $objQuery->setMaxResults(1)->getOneOrNullResult();
        return $arrayDatos;
    }

    /**
     * Función que obtiene el id de tipo solicitud mediante la
     * descripción.
     * @author Jonathan Quintana <jiquintana@telconet.ec>
     * @version 1.0
     * @since 22-12-2022
     */
    public function getIdTipoSolicitud($strDescTipoSolicitud)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQueryData       = $this->_em->createNativeQuery(null,$objRsm);

        $strSelect = " SELECT ID_TIPO_SOLICITUD  ";
        $strFrom = " FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD ";
        $strWhere = " WHERE DESCRIPCION_SOLICITUD = :descTipoSolicitud ";

        $objRsm->addScalarResult('ID_TIPO_SOLICITUD', 'idTipoSolicitud', 'string');

        $objQueryData->setParameter('descTipoSolicitud', $strDescTipoSolicitud);

        $strSql = $strSelect.$strFrom.$strWhere;

        $objQueryData->setSQL($strSql);

        $objDatos = $objQueryData->getResult(); 
        
        return $objDatos;
    }

    /* ************************** REPORTE GENERAL ****************************** */
    public function generarJsonReporteGeneral($em, $em_general, $start,$limit, $estado, $parametros)
    {
        $arr_encontrados = array();
        $num = 0;
            
        $estado = ($estado ? $estado : "Todos");
        if($estado == "Todos")
        {
            $registrosTotal = array();
            $registros = array();
            
            $num1 = $this->getRegistrosReporteGeneral('count', '', '', "TODOS-Planifica", $parametros);        
            $registros1 = $this->getRegistrosReporteGeneral('datos', $start, $limit, "TODOS-Planifica", $parametros);        
            if($registros1 && count($registros1)>0)
            {
                foreach($registros1 as $data1)
                {
                    $registros[] = $data1;
                }
            }
            
            $num2 = $this->getRegistrosReporteGeneral('count', '', '', "Planificada", $parametros);
            $registros2 = $this->getRegistrosReporteGeneral('datos', $start, $limit, "Planificada", $parametros);        
            if($registros2 && count($registros2)>0)
            {
                foreach($registros2 as $data2)
                {
                    $registros[] = $data2;
                }
            }
            
            $num = ($num1 ? $num1 : 0) + ($num2 ? $num2 : 0);
        }
        else
        {
            $num = $this->getRegistrosReporteGeneral('count', '', '', $estado, $parametros);
            $registros = $this->getRegistrosReporteGeneral('datos', $start, $limit, $estado, $parametros);        
        }        
        
        if ($registros) {            
            foreach ($registros as $data)
            {                                   
                $Servicio = $em->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]); 
                $nombreProducto =  ($Servicio->getProductoId() ? $Servicio->getProductoId()->getDescripcionProducto() : "");  
                $nombrePlan =  ($Servicio->getPlanId() ? $Servicio->getPlanId()->getNombrePlan() : "");  
                $nombreProductoPlan = $nombreProducto . $nombrePlan;
                /*$nombreVendedor = "";
                if($data["usrVendedor"] && $data["usrVendedor"]!="")
                {
                    $entityPersona_Vendedor = $em->getRepository('schemaBundle:InfoPersona')->findOneByLogin($data["usrVendedor"]); 
                    $nombreVendedor = ($entityPersona_Vendedor ? $entityPersona_Vendedor->getNombres() . " " . $entityPersona_Vendedor->getApellidos() : "");
                }*/
                $nombreVendedor = (isset($data["nombreVendedor"]) ?  ($data["nombreVendedor"] ? ucwords(strtolower($data["nombreVendedor"])) : "") : "");
                
                $nombreSector =  ($data["nombreSector"] ? $data["nombreSector"]  : "");    
                $parroquia =  ($data["nombreParroquia"] ? $data["nombreParroquia"]  : ""); 
                $ciudad =  ($data["nombreCanton"] ? $data["nombreCanton"]  : "");  
                $cliente = ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
                ($data["longitud"]&&$data["latitud"])?$coordenadas = $data["longitud"] . ", ". $data["latitud"]:$coordenadas ="";
                $feSolicitaPlanificacion = strval(date_format($data["feCreacion"],"d/m/Y G:i"));                
                $latitud =  ($data["latitud"] ? $data["latitud"]  : "");  
                $longitud =  ($data["longitud"] ? $data["longitud"]  : "");  
                
                $fechaPlanificacionReal = "";
                $fePlanificada = "";
                $HoraIniPlanificada = "";
                $HoraFinPlanificada = "";
                $nombrePlanifica = "";
                if( strtoupper($data["estado"])!=strtoupper("PrePlanificada") && $data["feIniPlan"])
                {
                    $fePlanificada = strval(date_format($data["feIniPlan"], "d/m/Y")); 
                    $HoraIniPlanificada = strval(date_format($data["feIniPlan"],"h:i"));  
                    $HoraFinPlanificada = strval(date_format($data["feFinPlan"],"h:i"));  
                    
                    //$usrPlanifica =  ($data["usrPlanifica"] ? $data["usrPlanifica"] : "");
                    if($data["usrPlanifica"] && $data["usrPlanifica"]!="")
                    {
                        $entityPersona = $em->getRepository('schemaBundle:InfoPersona')->findOneByLogin($data["usrPlanifica"]); 
                        $nombrePlanifica = ($entityPersona ? $entityPersona->getNombres() . " " . $entityPersona->getApellidos() : "");
                    }
                
                    $fechaPlanificacionReal = $fePlanificada . " (" . $HoraIniPlanificada . " - " . $HoraFinPlanificada . ")";
                }        
                
                $nombreMotivo = "";
                if($data["motivoId"] && $data["motivoId"]!="")
                {
                    $EntityMotivo = $em_general->getRepository('schemaBundle:AdmiMotivo')->findOneById($data["motivoId"]);
                    $nombreMotivo =  ($EntityMotivo ? ($EntityMotivo->getNombreMotivo() ? $EntityMotivo->getNombreMotivo() : "") : "");  
                }
                $arr_encontrados[]=array(
                                         'id_factibilidad' =>$data["idDetalleSolicitud"],
                                         'id_servicio' =>$data["idServicio"],
                                         'id_punto' =>$data["idPunto"],
                                         'id_orden_trabajo' =>$data["idOrdenTrabajo"],
                                         'cliente' =>ucwords(strtolower(trim($cliente))),
                                         'vendedor' =>ucwords(strtolower(trim($nombreVendedor))),
                                         'login2' =>trim($data["login"]),
                                         'producto' =>trim($nombreProductoPlan),
                                         'coordenadas' =>trim($coordenadas),
                                         'direccion' =>trim($data["direccion"]),
                                         'ciudad' =>ucwords(strtolower(trim($ciudad))),
                                         'nombreSector' =>ucwords(strtolower(trim($nombreSector))),
                                         'feSolicitaPlanificacion' =>trim($feSolicitaPlanificacion),
                                         'fechaPlanificacionReal' =>trim($fechaPlanificacionReal),
                                         'fePlanificada' =>trim($fePlanificada),
                                         'HoraIniPlanificada' =>trim($HoraIniPlanificada),
                                         'HoraFinPlanificada' =>trim($HoraFinPlanificada),
                                         'usrPlanifica' =>trim($nombrePlanifica),
                                         'latitud' =>trim($latitud),
                                         'longitud' =>trim($longitud),
                                         'motivo' =>trim($nombreMotivo), 
                                         'estado' =>trim($data["estado"])
                                        );
            }

            if($num == 0)
            {
                $resultado= array('total' => 1 ,
                                 'encontrados' => array('id_factibilidad' => 0 , 'nombre_factibilidad' => 'Ninguno', 'factibilidad_id' => 0 , 'factibilidad_nombre' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);
                return $resultado;
            }
            else
            {
                $dataF =json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$dataF.'}';
                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';
            return $resultado;
        }
        
    }
 /**
     * Función: getRegistrosReporteGeneral
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.1 11-01-2018 Se corrige filtro de búsqueda por login.
     *
     * 
     * @author telcos
     * @version 1.0 
     * 
     * */    
    public function getRegistrosReporteGeneral($FormaRetorna, $start, $limit, $estado, $parametros)
    {
        $boolBusqueda = false; 
        //se agregan estandaras DQL para evitar inyeccion de querys
        $query = $this->_em->createQuery("");
        $where = "";  
        $fromAdicional = "";
        $whereAdicional = "";
		
        $sql = "SELECT 
					ds.id as idDetalleSolicitud, s.id as idServicio, 
					p.id as idPunto, ot.id as idOrdenTrabajo,  
					ot.numeroOrdenTrabajo, se.nombreSector, pa.nombreParroquia, ca.nombreCanton, 
					pe.razonSocial, pe.nombres, pe.apellidos, p.usrVendedor, p.login, 
					p.longitud, p.latitud, p.direccion, p.path as rutaCroquis, ds.feCreacion, ds.estado,
					dsh.id as idDetalleSolHist, dsh.feIniPlan, dsh.feFinPlan, 
					dsh.usrCreacion as usrPlanifica, dsh.motivoId, 
					CONCAT(peVend.nombres,CONCAT(' ',peVend.apellidos)) as nombreVendedor ,admiTip.id as tipoSolicitudId
        
                FROM ";

			
		if(isset($parametros["direccion_pto"]))
		{
			if($parametros["direccion_pto"] && $parametros["direccion_pto"]!="")
			{
				$where .= "AND UPPER(p.direccion) like :direccion_pto ";
                                $query->setParameter('direccion_pto', '%'.strtoupper(trim($parametros["direccion_pto"])).'%'); 
			}
		}

		if(isset($parametros["estados_pto"]))
		{
			if($parametros["estados_pto"] && $parametros["estados_pto"]!="" && $parametros["estados_pto"]!="0")
			{
				$where .= "AND UPPER(p.estado) = :estados_pto";
                                $query->setParameter('estados_pto', strtoupper(trim($parametros["estados_pto"]))); 
			}
		}

		if(isset($parametros["negocios_pto"]))
		{
			if($parametros["negocios_pto"] && $parametros["negocios_pto"]!="" && $parametros["negocios_pto"]!="0")
			{
				$where .= "AND p.tipoNegocioId = :negocios_pto ";
                                $query->setParameter('negocios_pto', trim($parametros["negocios_pto"]));
			}
		}

		if(isset($parametros["identificacion"]))
		{
			if($parametros["identificacion"] && $parametros["identificacion"]!="")
			{
				$where .= "AND pe.identificacionCliente = :identificacion ";
                                $query->setParameter('identificacion', trim($parametros["identificacion"]));
			}
		}

		if(isset($parametros["nombre"]))
		{
			if($parametros["nombre"] && $parametros["nombre"]!="")
			{
				$where .= "AND UPPER(pe.nombres) like :nombre ";
                                $query->setParameter('nombre','%'.strtoupper(trim($parametros["nombre"])).'%');
			}
		}

		if(isset($parametros["apellido"]))
		{
			if($parametros["apellido"] && $parametros["apellido"]!="")
			{
				$where .= "AND UPPER(pe.apellidos) like :apellido ";
                                $query->setParameter('apellido','%'.strtoupper(trim($parametros["apellido"])).'%');
			}
		}

		if(isset($parametros["razon_social"]))
		{
			if($parametros["razon_social"] && $parametros["razon_social"]!="")
			{
				$where .= "AND UPPER(pe.razonSocial) like :razon_social ";
                                $query->setParameter('razon_social','%'.strtoupper(trim($parametros["razon_social"])).'%');
			}
		}

		if(isset($parametros["direccion_grl"]))
		{
			if($parametros["direccion_grl"] && $parametros["direccion_grl"]!="")
			{
				$where .= "AND UPPER(pe.direccion) like :direccion_grl ";
                                $query->setParameter('direccion_grl','%'.strtoupper(trim($parametros["direccion_grl"])).'%');
			}
		}
            
		if(isset($parametros["es_edificio"]) || isset($parametros["depende_edificio"]))
		{
			$boolPDA = false;
			if($parametros["es_edificio"] && $parametros["es_edificio"]!="" && $parametros["es_edificio"]!="0")
			{
				$boolPDA = true;
				$where .= "AND pda.esEdificio = :es_edificio ";
                                $query->setParameter('es_edificio',trim($parametros["es_edificio"]));
			}
			if($parametros["depende_edificio"] && $parametros["depende_edificio"]!="" && $parametros["depende_edificio"]!="0")
			{
				$boolPDA = true;
				$where .= "AND pda.dependeDeEdificio = :depende_edificio ";
                                $query->setParameter('depende_edificio',trim($parametros["depende_edificio"]));
			}

			if($boolPDA)
			{
				$fromAdicional .= "schemaBundle:InfoPuntoDatoAdicional pda, ";
				$whereAdicional .= "AND p.id = pda.puntoId ";
			}
		}
			
                $sql .= $fromAdicional; 
		
                $sql .= "		schemaBundle:InfoDetalleSolHist dsh,  
					schemaBundle:InfoOrdenTrabajo ot, schemaBundle:InfoServicio s,
					schemaBundle:InfoDetalleSolicitud ds, 
					schemaBundle:InfoPersona pe, schemaBundle:InfoPersonaEmpresaRol per,
					schemaBundle:AdmiSector se, schemaBundle:AdmiParroquia pa,
					schemaBundle:AdmiTipoSolicitud admiTip ,
					schemaBundle:AdmiCanton ca,
					schemaBundle:InfoPunto p 
        
				LEFT JOIN schemaBundle:InfoPersona peVend WITH peVend.login = p.usrVendedor 
				
                WHERE 
					ot.id = s.ordenTrabajoId 
					AND ot.puntoId = p.id
					AND s.id = ds.servicioId 
					AND ds.id = dsh.detalleSolicitudId  
					AND p.personaEmpresaRolId = per.id 
					AND per.personaId = pe.id 
					AND p.sectorId = se.id 
					AND se.parroquiaId = pa.id 
					AND pa.cantonId = ca.id 
					AND ds.tipoSolicitudId=admiTip.id 
					AND dsh.id = (SELECT MAX(dshMax.id) 
								  FROM schemaBundle:InfoDetalleSolHist dshMax
								  WHERE dshMax.detalleSolicitudId = dsh.detalleSolicitudId)  ";
		
		if(isset($parametros["fechaDesdeSolPlanif"]))
		{
	        if($parametros["fechaDesdeSolPlanif"] && $parametros["fechaDesdeSolPlanif"]!="")
	        {
	            $dateF = explode("-",$parametros["fechaDesdeSolPlanif"]);
	            $fechaSql = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));
			
	            $boolBusqueda = true;
				$where .= "AND ds.feCreacion >= :fechaSql1 ";
                                $query->setParameter('fechaSql1',trim($fechaSql));
	        }
		}
		if(isset($parametros["fechaHastaSolPlanif"]))
		{
	        if($parametros["fechaHastaSolPlanif"] && $parametros["fechaHastaSolPlanif"]!="")
	        {
	            $dateF = explode("-",$parametros["fechaHastaSolPlanif"]);
	            $fechaSqlAdd = strtotime(date("Y-m-d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0])). " +1 day");
	            $fechaSql2 = date("Y/m/d", $fechaSqlAdd);
			
	            $boolBusqueda = true;
		    $where .= "AND ds.feCreacion <= :fechaSql2 ";
                    $query->setParameter('fechaSql2',trim($fechaSql2));
	        }
		}
		    
		if(isset($parametros["login2"]))
		{
	        if($parametros["login2"] && $parametros["login2"]!="")
	        {			
	            $boolBusqueda = true;
		    $where .= "AND UPPER(p.login) like UPPER(:login2) ";
                    $query->setParameter('login2',trim($parametros["login2"]).'%');
	        }
		}  		    
		if(isset($parametros["descripcionPunto"]))
		{
	        if($parametros["descripcionPunto"] && $parametros["descripcionPunto"]!="")
	        {			
	            $boolBusqueda = true;
		    $where .= "AND UPPER(p.descripcionPunto) like UPPER(:descripcionPunto) ";
                    $query->setParameter('descripcionPunto','%'.trim($parametros["descripcionPunto"]).'%');
	        }
		}  		    
		if(isset($parametros["numOrdenServicio"]))
		{
	        if($parametros["numOrdenServicio"] && $parametros["numOrdenServicio"]!="")
	        {			
	            $boolBusqueda = true;
		    $where .= "AND ot.numeroOrdenTrabajo like :numOrdenServicio ";
                    $query->setParameter('numOrdenServicio',$parametros["numOrdenServicio"].'%');
	        }
		}      
		if(isset($parametros["ciudad"]))
		{
	        if($parametros["ciudad"] && $parametros["ciudad"]!="")
	        {			
	            $boolBusqueda = true;
		    $where .= "AND UPPER(ca.nombreCanton) like UPPER(:ciudad) ";
                    $query->setParameter('ciudad','%'.trim($parametros["ciudad"]).'%');
	        }
		}       
		if(isset($parametros["vendedor"]))
		{
	        if($parametros["vendedor"] && $parametros["vendedor"]!="")
	        {			
	            $boolBusqueda = true;
				$where .= "AND CONCAT(LOWER(peVend.nombres),CONCAT(' ',LOWER(peVend.apellidos)))  like :vendedor ";
                                $query->setParameter('vendedor','%'.trim(strtolower($parametros["vendedor"])).'%');
	        }
		} 
                //se agrega codigo para validar nuevo filtro   
                if ($parametros["tipoSolicitud"] != "") {
                    if ($parametros["tipoSolicitud"] == "SOLICITUD CAMBIO EQUIPO" or $parametros["tipoSolicitud"] == "SOLICITUD RETIRO EQUIPO" or $parametros["tipoSolicitud"] == "SOLICITUD PLANIFICACION") {
                        $boolBusqueda = true;
                        $where .= " AND LOWER(admiTip.descripcionSolicitud) = LOWER(:tipo_Solicitud) ";
                        $query->setParameter('tipo_Solicitud',$parametros["tipoSolicitud"]);
                        
                    } else {
                        $boolBusqueda = true;
                        $where .= "AND ( LOWER(admiTip.descripcionSolicitud) IN (:tipos))";
                        $query->setParameter('tipos',array('solicitud cambio equipo','solicitud retiro equipo','solicitud planificacion'));
                    }
                }
               
        if($estado!="" && $estado){
            $boolBusqueda = true;
            
            if($estado == "PrePlanificada")
            {
                $where .= "AND (LOWER(ds.estado) = LOWER('PrePlanificada')) ";
                $where .= "AND (LOWER(dsh.estado) = LOWER('PrePlanificada'))  ";
            }
            else if($estado == "Planificada")
            {
                $where .= "AND (LOWER(ds.estado) = LOWER('Planificada') OR LOWER(ds.estado) = LOWER('Replanificada')) ";
                $where .= "AND (LOWER(dsh.estado) = LOWER('Planificada') OR LOWER(dsh.estado) = LOWER('Replanificada'))  ";
				
				if(isset($parametros["fechaDesdePlanif"]))
				{
			        if($parametros["fechaDesdePlanif"] && $parametros["fechaDesdePlanif"]!="")
			        {
			            $dateF = explode("-",$parametros["fechaDesdePlanif"]);
			            $fechaSql3 = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));
					
			            $boolBusqueda = true;
			            $where .= "AND dsh.feIniPlan >= :fechaSql3 ";
                                    $query->setParameter('fechaSql3',trim($fechaSql3));
			        }
				}
				if(isset($parametros["fechaHastaPlanif"]))
				{
			        if($parametros["fechaHastaPlanif"] && $parametros["fechaHastaPlanif"]!="")
			        {
			            $dateF = explode("-",$parametros["fechaHastaPlanif"]);
			            $fechaSqlAdd = strtotime(date("Y-m-d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0])). " +1 day");
			            $fechaSql4 = date("Y/m/d", $fechaSqlAdd);
					
			            $boolBusqueda = true;
				    $where .= "AND dsh.feIniPlan <= :fechaSql4 ";
                                    $query->setParameter('fechaSql4',trim($fechaSql4));
			        }
				}				
            }
            else if($estado == "Detenido")
            {
                $where .= "AND (LOWER(ds.estado) = LOWER('Detenido')) ";
                $where .= "AND (LOWER(dsh.estado) = LOWER('Detenido'))  ";
            }
            else if($estado == "Anulado")
            {
                $where .= "AND (LOWER(ds.estado) = LOWER('Anulado')) ";
                $where .= "AND (LOWER(dsh.estado) = LOWER('Anulado'))  ";
            }
            else if($estado == "Rechazada")
            {
                $where .= "AND (LOWER(ds.estado) = LOWER('Rechazada')) ";
                $where .= "AND (LOWER(dsh.estado) = LOWER('Rechazada'))  ";
            }
            else if($estado == "TODOS-Planifica")
            {
                $where .= "AND (LOWER(ds.estado) = LOWER('PrePlanificada') OR LOWER(ds.estado) = LOWER('Detenido') OR LOWER(ds.estado) = LOWER('Anulado') OR LOWER(ds.estado) = LOWER('Rechazada') OR LOWER(ds.estado) = LOWER('Planificada') OR LOWER(ds.estado) = LOWER('AsignadoTarea') OR LOWER(ds.estado) = LOWER('Asignada')) ";
                $where .= "AND (LOWER(dsh.estado) = LOWER('PrePlanificada') OR LOWER(dsh.estado) = LOWER('Detenido') OR LOWER(dsh.estado) = LOWER('Anulado') OR LOWER(dsh.estado) = LOWER('Rechazada') OR LOWER(dsh.estado) = LOWER('Planificada') OR LOWER(dsh.estado) = LOWER('AsignadoTarea') OR LOWER(dsh.estado) = LOWER('Asignada')) ";
            }
            else 
            {
                $where .= "AND (LOWER(ds.estado) = LOWER('PrePlanificada') OR LOWER(ds.estado) = LOWER('Planificada') OR LOWER(ds.estado) = LOWER('Replanificada') OR LOWER(ds.estado) = LOWER('Detenido') OR LOWER(ds.estado) = LOWER('Anulado') OR LOWER(ds.estado) = LOWER('Rechazada')) ";
                $where .= "AND (LOWER(dsh.estado) = LOWER('PrePlanificada') OR LOWER(dsh.estado) = LOWER('Planificada') OR LOWER(dsh.estado) = LOWER('Replanificada') OR LOWER(ds.estado) = LOWER('Detenido') OR LOWER(dsh.estado) = LOWER('Anulado') OR LOWER(dsh.estado) = LOWER('Rechazada')) ";
            }
        } 
                      
        
        $sql .= $whereAdicional;  
	$sql .= $where;
	$sql .= "		ORDER BY ds.estado ASC
                ";
        
        $query->setDQL($sql);
        
        $boolBusqueda = false;
        if($start!='' && !$boolBusqueda && $limit!='')
            $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        else if($start!='' && !$boolBusqueda && $limit=='')
            $datos = $query->setFirstResult($start)->getResult();
        else if(($start=='' || $boolBusqueda) && $limit!='')
            $datos = $query->setMaxResults($limit)->getResult();
        else
            $datos = $query->getResult();
        
        if($FormaRetorna == "datos")
            return $datos;
        else if($FormaRetorna == "count")
            return $datos ? count($datos) : 0;
        else 
            return false;
            
        return $datos;
    }
    
	
    /* ************************** REPORTE ASIGNADAS ****************************** */
    public function generarJsonReporteAsignadas($em, $em_general, $start,$limit, $estado, $parametros, $prefijoEmpresa)
    {
        $arr_encontrados = array();
        $num = 0;
		
		$num = $this->getRegistrosReporteAsignadas('count', '', '', $estado, $parametros,$prefijoEmpresa);
		$registros = $this->getRegistrosReporteAsignadas('datos', $start, $limit, $estado, $parametros,$prefijoEmpresa);
				
        if ($registros) {            
            foreach ($registros as $data)
            {                                   
                $Servicio = $em->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]); 
                $nombreProducto =  ($Servicio->getProductoId() ? $Servicio->getProductoId()->getDescripcionProducto() : "");  
                $nombrePlan =  ($Servicio->getPlanId() ? $Servicio->getPlanId()->getNombrePlan() : "");  
                $nombreProductoPlan = $nombreProducto . $nombrePlan;
				
                $nombreVendedor = (isset($data["nombreVendedor"]) ?  ($data["nombreVendedor"] ? ucwords(strtolower($data["nombreVendedor"])) : "") : "");
                
                $nombreSector =  ($data["nombreSector"] ? $data["nombreSector"]  : "");    
                $parroquia =  ($data["nombreParroquia"] ? $data["nombreParroquia"]  : ""); 
                $ciudad =  ($data["nombreCanton"] ? $data["nombreCanton"]  : "");  
                $cliente = ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
                ($data["longitud"]&&$data["latitud"])?$coordenadas = $data["longitud"] . ", ". $data["latitud"]:$coordenadas ="";              
                $latitud =  ($data["latitud"] ? $data["latitud"]  : "");  
                $longitud =  ($data["longitud"] ? $data["longitud"]  : "");  
                
                $feSolicitaPlanificacion = strval(date_format($data["feCreacion"],"d/m/Y G:i"));  
                $feAsignada = strval(date_format($data["feAsignada"],"d/m/Y G:i"));  
                $feAsignadaDetalle = strval(date_format($data["feAsignadaDetalle"],"d/m/Y G:i"));  
				
                $nombreAsigna = "";
				if($data["usrAsigna"] && $data["usrAsigna"]!="")
				{
					$entityPersona = $em->getRepository('schemaBundle:InfoPersona')->findOneByLogin($data["usrAsigna"]); 
					$nombreAsigna = ($entityPersona ? $entityPersona->getNombres() . " " . $entityPersona->getApellidos() : "");
				}
					
                $asignadoNombre =  ($data["asignadoNombre"] ? $data["asignadoNombre"]  : "");  
                $refAsignadoNombre =  ($data["refAsignadoNombre"] ? $data["refAsignadoNombre"]  : "");  
				$Asignado = ($asignadoNombre ? $asignadoNombre . ($refAsignadoNombre ? " - " . $refAsignadoNombre: "") : "" . ($refAsignadoNombre ? $refAsignadoNombre: "") );
				
                $nombreTarea =  ($data["nombreTarea"] ? $data["nombreTarea"]  : "");
				
                $fechaPlanificacionReal = "";
                $fePlanificada = "";
                $HoraIniPlanificada = "";
                $HoraFinPlanificada = "";
                $nombrePlanifica = "";
				
				$fePlanificada = strval(date_format($data["feIniPlan"], "d/m/Y")); 
				$HoraIniPlanificada = strval(date_format($data["feIniPlan"],"h:i"));  
				$HoraFinPlanificada = strval(date_format($data["feFinPlan"],"h:i"));  
				
				//$usrPlanifica =  ($data["usrPlanifica"] ? $data["usrPlanifica"] : "");
				if($data["usrPlanifica"] && $data["usrPlanifica"]!="")
				{
					$entityPersona = $em->getRepository('schemaBundle:InfoPersona')->findOneByLogin($data["usrPlanifica"]); 
					$nombrePlanifica = ($entityPersona ? $entityPersona->getNombres() . " " . $entityPersona->getApellidos() : "");
				}
			
				$fechaPlanificacionReal = $fePlanificada . " (" . $HoraIniPlanificada . " - " . $HoraFinPlanificada . ")";
              
                
                $nombreMotivo = "";
                if($data["motivoId"] && $data["motivoId"]!="")
                {
                    $EntityMotivo = $em_general->getRepository('schemaBundle:AdmiMotivo')->findOneById($data["motivoId"]);
                    $nombreMotivo =  ($EntityMotivo ? ($EntityMotivo->getNombreMotivo() ? $EntityMotivo->getNombreMotivo() : "") : "");  
                }
				
                $arr_encontrados[]=array(
                                         'id_factibilidad' =>$data["idDetalleSolicitud"],
                                         'id_servicio' =>$data["idServicio"],
                                         'id_punto' =>$data["idPunto"],
                                         'id_orden_trabajo' =>$data["idOrdenTrabajo"],
                                         'id_detalle' =>$data["idDetalle"],
                                         'id_detalle_asignacion' =>$data["idDetalleAsignacion"], 
                                         'cliente' =>ucwords(strtolower(trim($cliente))),
                                         'vendedor' =>ucwords(strtolower(trim($nombreVendedor))),
                                         'login2' =>trim($data["login"]),
                                         'producto' =>trim($nombreProductoPlan),
                                         'coordenadas' =>trim($coordenadas),
                                         'direccion' =>trim($data["direccion"]),
                                         'ciudad' =>ucwords(strtolower(trim($ciudad))),
                                         'nombreSector' =>ucwords(strtolower(trim($nombreSector))),
                                         'latitud' =>trim($latitud),
                                         'longitud' =>trim($longitud),
                                         'feSolicitaPlanificacion' =>trim($feSolicitaPlanificacion),
                                         'fechaPlanificacionReal' =>trim($fechaPlanificacionReal),
                                         'fePlanificada' =>trim($fePlanificada),
                                         'feAsignada' =>trim($feAsignada),
                                         'usrPlanifica' =>trim($nombrePlanifica),
                                         'usrAsigna' =>trim($nombreAsigna),
                                         'nombreTarea' =>trim($nombreTarea),
                                         'nombreAsignado' =>trim($Asignado),
                                         'motivo' =>trim($nombreMotivo), 
                                         'estado' =>trim($data["estado"])
                                        );
            }

            if($num == 0)
            {
                $resultado= array('total' => 1 ,
                                 'encontrados' => array('id_factibilidad' => 0 , 'nombre_factibilidad' => 'Ninguno', 'factibilidad_id' => 0 , 'factibilidad_nombre' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);
                return $resultado;
            }
            else
            {
                $dataF =json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$dataF.'}';
                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';
            return $resultado;
        }
        
    }
    /**
     * Función: getRegistrosReporteAsignadas
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.1 11-01-2018 Se corrige filtro de búsqueda por login.
     *
     * 
     * @author telcos
     * @version 1.0 
     * 
     **/ 	
    public function getRegistrosReporteAsignadas($FormaRetorna, $start, $limit, $estado, $parametros,$prefijoEmpresa)
    {
        $boolBusqueda = false; 
        $where = "";    
        $fromAdicional = "";
        $whereAdicional = "";
		
		if(isset($parametros["direccion_pto"]))
		{
			if($parametros["direccion_pto"] && $parametros["direccion_pto"]!="")
			{
				$where .= "AND UPPER(p.direccion) like '%".strtoupper(trim($parametros["direccion_pto"]))."%' ";
			}
		}

		if(isset($parametros["estados_pto"]))
		{
			if($parametros["estados_pto"] && $parametros["estados_pto"]!="" && $parametros["estados_pto"]!="0")
			{
				$where .= "AND UPPER(p.estado) = '".strtoupper(trim($parametros["estados_pto"]))."' ";
			}
		}

		if(isset($parametros["negocios_pto"]))
		{
			if($parametros["negocios_pto"] && $parametros["negocios_pto"]!="" && $parametros["negocios_pto"]!="0")
			{
				$where .= "AND p.tipoNegocioId = '".trim($parametros["negocios_pto"])."' ";
			}
		}

		if(isset($parametros["identificacion"]))
		{
			if($parametros["identificacion"] && $parametros["identificacion"]!="")
			{
				$where .= "AND pe.identificacionCliente = '".trim($parametros["identificacion"])."' ";
			}
		}

		if(isset($parametros["nombre"]))
		{
			if($parametros["nombre"] && $parametros["nombre"]!="")
			{
				$where .= "AND UPPER(pe.nombres) like '%".strtoupper(trim($parametros["nombre"]))."%' ";
			}
		}

		if(isset($parametros["apellido"]))
		{
			if($parametros["apellido"] && $parametros["apellido"]!="")
			{
				$where .= "AND UPPER(pe.apellidos) like '%".strtoupper(trim($parametros["apellido"]))."%' ";
			}
		}

		if(isset($parametros["razon_social"]))
		{
			if($parametros["razon_social"] && $parametros["razon_social"]!="")
			{
				$where .= "AND UPPER(pe.razonSocial) like '%".strtoupper(trim($parametros["razon_social"]))."%' ";
			}
		}

		if(isset($parametros["direccion_grl"]))
		{
			if($parametros["direccion_grl"] && $parametros["direccion_grl"]!="")
			{
				$where .= "AND UPPER(pe.direccion) like '%".strtoupper(trim($parametros["direccion_grl"]))."%' ";
			}
		}
            
		if(isset($parametros["es_edificio"]) || isset($parametros["depende_edificio"]))
		{
			$boolPDA = false;
			if($parametros["es_edificio"] && $parametros["es_edificio"]!="" && $parametros["es_edificio"]!="0")
			{
				$boolPDA = true;
				$where .= "AND pda.esEdificio = '".trim($parametros["es_edificio"])."' ";
			}
			if($parametros["depende_edificio"] && $parametros["depende_edificio"]!="" && $parametros["depende_edificio"]!="0")
			{
				$boolPDA = true;
				$where .= "AND pda.dependeDeEdificio = '".trim($parametros["depende_edificio"])."' ";
			}

			if($boolPDA)
			{
				$fromAdicional .= "schemaBundle:InfoPuntoDatoAdicional pda, ";
				$whereAdicional .= "AND p.id = pda.puntoId ";
			}
		}
			
			
		if(isset($parametros["fechaDesdeSolPlanif"]))
		{
	        if($parametros["fechaDesdeSolPlanif"] && $parametros["fechaDesdeSolPlanif"]!="")
	        {
	            $dateF = explode("-",$parametros["fechaDesdeSolPlanif"]);
	            $fechaSql = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));
			
	            $boolBusqueda = true;
				$where .= "AND ds.feCreacion >= '".trim($fechaSql)."' ";
	        }
		}
		if(isset($parametros["fechaHastaSolPlanif"]))
		{
	        if($parametros["fechaHastaSolPlanif"] && $parametros["fechaHastaSolPlanif"]!="")
	        {
	            $dateF = explode("-",$parametros["fechaHastaSolPlanif"]);
	            $fechaSqlAdd = strtotime(date("Y-m-d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0])). " +1 day");
	            $fechaSql = date("Y/m/d", $fechaSqlAdd);
			
	            $boolBusqueda = true;
				$where .= "AND ds.feCreacion <= '".trim($fechaSql)."' ";
	        }
		}
				
		if(isset($parametros["fechaDesdePlanif"]))
		{
	        if($parametros["fechaDesdePlanif"] && $parametros["fechaDesdePlanif"]!="")
	        {
	            $dateF = explode("-",$parametros["fechaDesdePlanif"]);
	            $fechaSql = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));
			
	            $boolBusqueda = true;
				$where .= "AND dshPlan.feIniPlan >= '".trim($fechaSql)."' ";
	        }
		}
		if(isset($parametros["fechaHastaPlanif"]))
		{
	        if($parametros["fechaHastaPlanif"] && $parametros["fechaHastaPlanif"]!="")
	        {
	            $dateF = explode("-",$parametros["fechaHastaPlanif"]);
	            $fechaSqlAdd = strtotime(date("Y-m-d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0])). " +1 day");
	            $fechaSql = date("Y/m/d", $fechaSqlAdd);
			
	            $boolBusqueda = true;
				$where .= "AND dshPlan.feIniPlan <= '".trim($fechaSql)."' ";
	        }
		}
		
		if(isset($parametros["fechaDesdeAsignacion"]))
		{
	        if($parametros["fechaDesdeAsignacion"] && $parametros["fechaDesdeAsignacion"]!="")
	        {
	            $dateF = explode("-",$parametros["fechaDesdeAsignacion"]);
	            $fechaSql = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));
			
	            $boolBusqueda = true;
				$where .= "AND d.feCreacion >= '".trim($fechaSql)."' ";
	        }
		}
		if(isset($parametros["fechaHastaAsignacion"]))
		{
	        if($parametros["fechaHastaAsignacion"] && $parametros["fechaHastaAsignacion"]!="")
	        {
	            $dateF = explode("-",$parametros["fechaHastaAsignacion"]);
	            $fechaSqlAdd = strtotime(date("Y-m-d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0])). " +1 day");
	            $fechaSql = date("Y/m/d", $fechaSqlAdd);
			
	            $boolBusqueda = true;
				$where .= "AND d.feCreacion <= '".trim($fechaSql)."' ";
	        }
		}
		   	   
		if(isset($parametros["login2"]))
		{
	        if($parametros["login2"] && $parametros["login2"]!="")
	        {			
	            $boolBusqueda = true;
				$where .= "AND UPPER(p.login) like UPPER('".trim($parametros["login2"])."%') ";
	        }
		}  		    
		if(isset($parametros["descripcionPunto"]))
		{
	        if($parametros["descripcionPunto"] && $parametros["descripcionPunto"]!="")
	        {			
	            $boolBusqueda = true;
				$where .= "AND UPPER(p.descripcionPunto) like UPPER('%".trim($parametros["descripcionPunto"])."%') ";
	        }
		}  		    
		if(isset($parametros["numOrdenServicio"]))
		{
	        if($parametros["numOrdenServicio"] && $parametros["numOrdenServicio"]!="")
	        {			
	            $boolBusqueda = true;
				$where .= "AND ot.numeroOrdenTrabajo like '".$parametros["numOrdenServicio"]."%' ";
	        }
		}      
		if(isset($parametros["ciudad"]))
		{
	        if($parametros["ciudad"] && $parametros["ciudad"]!="")
	        {			
	            $boolBusqueda = true;
				$where .= "AND UPPER(ca.nombreCanton) like UPPER('%".trim($parametros["ciudad"])."%') ";
	        }
		}       
		if(isset($parametros["vendedor"]))
		{
	        if($parametros["vendedor"] && $parametros["vendedor"]!="")
	        {			
	            $boolBusqueda = true;
				$where .= "AND CONCAT(LOWER(peVend.nombres),CONCAT(' ',LOWER(peVend.apellidos)))  like '%".trim(strtolower($parametros["vendedor"]))."%' ";
	        }
		}
        
		if($estado == "Todos")
		{
			$where .= " AND ( LOWER(ds.estado) = LOWER('AsignadoTarea') or LOWER(ds.estado) = LOWER('Asignada')) ";
			$where .= " AND ( LOWER(dsh.estado) = LOWER('AsignadoTarea')  or LOWER(ds.estado) = LOWER('Asignada')) ";
		}
		if($estado != "Todos")
		{
			$where .= "AND (LOWER(ds.estado) = LOWER('$estado')) ";
			$where .= "AND (LOWER(dsh.estado) = LOWER('$estado')) ";
		}
		
		
		/*$tipoResponsable, $codigoResponsable*/		 
		if(isset($parametros["tipoResponsable"]))
		{
	        if($parametros["tipoResponsable"] && $parametros["tipoResponsable"]!="")
	        {			
				if($parametros["tipoResponsable"] == "empleado")
				{
					$boolBusqueda = true;
					$where .= "AND da.asignadoId is not null AND da.refAsignadoId is not null ";
					if($parametros["codigoResponsable"] && $parametros["codigoResponsable"] != "")
					{
						$where .= "AND da.refAsignadoId = '".$parametros["codigoResponsable"]."' ";
					}
				}
				else if($parametros["tipoResponsable"] == "empresaExterna")
				{
					$boolBusqueda = true;
					$where .= "AND da.asignadoId is not null AND (da.refAsignadoId is null OR da.refAsignadoId = 0) ";
					$where .= "AND (SELECT count(dr) FROM schemaBundle:InfoDetalleColaborador dr WHERE dr.detalleAsignacionId = da.id) = 0";
					if($parametros["codigoResponsable"] && $parametros["codigoResponsable"] != "")
					{
						$where .= "AND da.asignadoId = '".$parametros["codigoResponsable"]."' ";
					}
				}
				else if($parametros["tipoResponsable"] == "cuadrilla")
				{
					$boolBusqueda = true;
					$where .= "AND da.asignadoId is not null AND (da.refAsignadoId is null OR da.refAsignadoId = 0) ";
					$where .= "AND (SELECT count(dr) FROM schemaBundle:InfoDetalleColaborador dr WHERE dr.detalleAsignacionId = da.id) > 0";
					
					if($parametros["codigoResponsable"] && $parametros["codigoResponsable"] != "")
					{
						$where .= "AND da.asignadoId = '".$parametros["codigoResponsable"]."' ";
					}
				}
	        }
		} 		
		
        $sql = "SELECT 
					d.id as idDetalle, da.id as idDetalleAsignacion, 
					d.feCreacion as feAsignada, da.feCreacion as feAsignadaDetalle, 
					da.asignadoId, da.asignadoNombre, da.refAsignadoId, da.refAsignadoNombre, 
					ds.id as idDetalleSolicitud, s.id as idServicio, 
					p.id as idPunto, ot.id as idOrdenTrabajo, t.id as idTarea, t.nombreTarea, 
					ot.numeroOrdenTrabajo, se.nombreSector, pa.nombreParroquia, ca.nombreCanton, 
					pe.razonSocial, pe.nombres, pe.apellidos, p.usrVendedor, p.login, p.latitud as latitud,p.longitud as longitud,
					p.longitud, p.latitud, p.direccion, p.path as rutaCroquis, ds.feCreacion, ds.estado,				
					dsh.id as idDetalleSolHist, dsh.motivoId, dsh.usrCreacion as usrAsigna, p.observacion , dsh.observacion as observacionSolicitud,
					dshPlan.id as idDetalleSolHistPlanifica, dshPlan.motivoId as motivoPlanifica, 
					dshPlan.feIniPlan, dshPlan.feFinPlan, dshPlan.usrCreacion as usrPlanifica, 				
					CONCAT(peVend.nombres,CONCAT(' ',peVend.apellidos)) as nombreVendedor  ,admiTip.id as tipoSolicitudId ,admiTip.descripcionSolicitud as descripcionSolicitud
        
                FROM 
                                        schemaBundle:InfoEmpresaRol er, schemaBundle:InfoEmpresaGrupo eg,
					$fromAdicional 
					schemaBundle:InfoDetalleSolHist dsh,  schemaBundle:InfoDetalleSolHist dshPlan, 
					schemaBundle:InfoOrdenTrabajo ot, schemaBundle:InfoServicio s,
					schemaBundle:InfoDetalleSolicitud ds, 
					schemaBundle:AdmiProceso pr, schemaBundle:AdmiTarea t, 
					schemaBundle:InfoPersona pe, schemaBundle:InfoPersonaEmpresaRol per,
					schemaBundle:AdmiSector se, schemaBundle:AdmiParroquia pa, schemaBundle:AdmiCanton ca, 
					schemaBundle:InfoDetalle d, schemaBundle:InfoDetalleAsignacion da,
					schemaBundle:AdmiTipoSolicitud admiTip ,
                    schemaBundle:InfoPunto p
					
				LEFT JOIN schemaBundle:InfoPersona peVend WITH peVend.login = p.usrVendedor 								  
									  
                WHERE 
					ot.id = s.ordenTrabajoId 
					AND ot.puntoId = p.id
					AND s.id = ds.servicioId 
					AND p.personaEmpresaRolId = per.id 
					AND per.personaId = pe.id 
					AND p.sectorId = se.id 
					AND se.parroquiaId = pa.id 
					AND pa.cantonId = ca.id 
					
					AND ds.id = dsh.detalleSolicitudId 
					AND ds.tipoSolicitudId=admiTip.id
					AND dsh.id = (SELECT MAX(dshMax.id) 
								  FROM schemaBundle:InfoDetalleSolHist dshMax
								  WHERE dshMax.detalleSolicitudId = dsh.detalleSolicitudId) 
					
					AND ds.id = dshPlan.detalleSolicitudId  
					AND dshPlan.id = (SELECT MAX(dshPlanMax.id) 
									  FROM schemaBundle:InfoDetalleSolHist dshPlanMax
									  WHERE dshPlanMax.detalleSolicitudId = dshPlan.detalleSolicitudId
									  AND (LOWER(dshPlanMax.estado) = LOWER('Planificada') OR LOWER(dshPlanMax.estado) = LOWER('Replanificada'))
									 ) 
													 
					AND d.tareaId = t.id 
					AND t.procesoId = pr.id 
					AND LOWER(pr.nombreProceso) like '%".strtolower('SOLICITAR NUEVO SERVICIO')."%' "."
					
					AND d.detalleSolicitudId = ds.id			
								
					AND da.detalleId = d.id 	
					AND da.id = (SELECT MAX(daMax.id) 
								FROM schemaBundle:InfoDetalleAsignacion daMax
								WHERE daMax.detalleId = da.detalleId)
					AND er.id = per.empresaRolId
                                        AND er.empresaCod = eg.id
                                        AND eg.prefijo = '".$prefijoEmpresa."'
                                        
					$whereAdicional  
					$where 
                                            
				ORDER BY ds.feCreacion DESC
               ";    
			   
        $query = $this->_em->createQuery($sql);
        // print_r($query->getSql());
		// die;
        if($start!='' && !$boolBusqueda && $limit!='')
            $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        else if($start!='' && !$boolBusqueda && $limit=='')
            $datos = $query->setFirstResult($start)->getResult();
        else if(($start=='' || $boolBusqueda) && $limit!='')
            $datos = $query->setMaxResults($limit)->getResult();
        else
            $datos = $query->getResult();
        
        if($FormaRetorna == "datos")
            return $datos;
        else if($FormaRetorna == "count")
            return $datos ? count($datos) : 0;
        else 
            return false;
            
        return $datos;
    }

    /**
     * Documentación para el método 'generarJsonSolicitudes'.
     *
     * Genera json con registros de solicitudes
     * 
     * @param  EntityManager    $em, 
     * @param  EntityManager    $em_general
     * @param  String           $start, 
     * @param  String           $limit, 
     * @param  String           $search_fechaDesdePlanif,
     * @param  String           $search_fechaHastaPlanif,
     * @param  String           $search_login2,
     * @param  String           $search_descripcionPunto,
     * @param  String           $search_vendedor,
     * @param  String           $search_ciudad,
     * @param  String           $estadoTipoSolicitud,
     * @param  String           $search_tipoSolicitud,
     * @param  String           $codEmpresa
     * 
     * @return Object    $datos listado de registros de factibilidad
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 22-01-2018   Se agrega retorno de campo Precio Descuento usado para traslado de servicios TN
     * @since 1.0
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 22-01-2018   Se agrega validacion para solicitudes de reubicacion de servicios cambie el 
     *                           nombre de producto segun lo indicado por el usuario
     * @since 1.1
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 02-07-2018 - Se realiza ajustes para obtener informacion necesario para las solicitudes de traslado pendiente de autorizar
     * @since 1.2
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.4 25-07-2018 - Se realiza ajustes para obtener información necesaria para las solicitudes de aprobación cloudform
     *                           pendiente de autorizar o cualquier tipo de solicitud que se meneje de esta forma
     * @since 1.3
     * 
     * @author Mario Ayerve <mayerve@telconet.ec>
     * @version 1.5 24-03-2021 - Se validaron los action dependiendo del estado de solicitud en los materiales excedentes
     *                           
     * @since 1.4
     * 
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 1.6 14-12-2021 - Se mejora el diseño del action15
     *                           Se mejora la lógica interna del action15
     *                           Se añadió la información para PROYECTOS/CLIENTES EXCEPCIÓN y COPAGOS
     * @since 1.5
     */
    public function generarJsonSolicitudes( $em, 
                                            $em_general,
                                            $start,
                                            $limit, 
                                            $search_fechaDesdePlanif, 
                                            $search_fechaHastaPlanif, 
                                            $search_login2, 
                                            $search_descripcionPunto, 
                                            $search_vendedor, 
                                            $search_ciudad,
                                            $estadoTipoSolicitud, 
                                            $search_tipoSolicitud,
                                            $strCodEmpresa = "",
                                            $serviceRouter = null)
    {
        $strTipoNegocio        = "";
        $strServiciosTrasladar = "";
        $strLoginTrasladar     = "";
        $arr_encontrados = array();
        $strSolicitudes  = 0;
        $strTiempoEsperaMeses = "";
        $strSaldoPunto        = "";        

        //Se consulta si el login tiene solicitudes de traslado por autorizar
        if(!empty($search_login2) && ($estadoTipoSolicitud == 'PendienteAutorizar' || $estadoTipoSolicitud == 'Rechazada'))
        {
            $arrayParametrosFuncion["strLogin"]         = $search_login2;
            $arrayParametrosFuncion["strEstado"]        = $estadoTipoSolicitud;
            $strTipoSolicitud                           = 'SOLICITUD TRASLADO';
            
            $objTipoSolicitud = $this->_em->getRepository("schemaBundle:AdmiTipoSolicitud")->find($search_tipoSolicitud);
            
            if(is_object($objTipoSolicitud))
            {
                $strTipoSolicitud = $objTipoSolicitud->getDescripcionSolicitud();
            }
            
            $arrayParametrosFuncion["strTipoSolicitud"] = $strTipoSolicitud;
            $strSolicitudes                             = $this->getTieneSolPorAutorizar($arrayParametrosFuncion);
        }

        if($strSolicitudes > 0)
        {
            $registros      = $this->getDatosSolicitudTraslado($arrayParametrosFuncion);
            $registrosTotal = $registros;
        }
        else
        {
            $registrosTotal  = $this->getRegistrosSolicitudes('',
                                                              '',
                                                              $search_fechaDesdePlanif,
                                                              $search_fechaHastaPlanif,
                                                              $search_login2,
                                                              $search_descripcionPunto,
                                                              $search_vendedor,
                                                              $search_ciudad,
                                                              $estadoTipoSolicitud,
                                                              $search_tipoSolicitud,
                                                              $strCodEmpresa);
            $registros       = $this->getRegistrosSolicitudes($start,
                                                              $limit,
                                                              $search_fechaDesdePlanif,
                                                              $search_fechaHastaPlanif,
                                                              $search_login2,
                                                              $search_descripcionPunto,
                                                              $search_vendedor,
                                                              $search_ciudad,
                                                              $estadoTipoSolicitud,
                                                              $search_tipoSolicitud,
                                                              $strCodEmpresa);
        }

		if ($registros) 
        {
            $num = count($registrosTotal);
                     
            foreach ($registros as $data)
            {   
                $boolExcedenteMaterial = false;  
                $boolEsCloudForm = false;
                $nombreVendedor  = (isset($data["nombreVendedor"]) ?  
                                   ($data["nombreVendedor"] ? ucwords(strtolower($data["nombreVendedor"])) : "") : "");
				
                $InfoDetalleSolicitud = $this->_em->getRepository('schemaBundle:InfoDetalleSolicitud')->find($data["idDetalleSolicitud"]); 
                
                if(isset($data["idServicio"]))
                {
                    $Servicio             = $this->_em->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]); 
                    
                    if(is_object($Servicio))
                    {
                        $nombreProducto       = ($Servicio->getProductoId() ? $Servicio->getProductoId()->getDescripcionProducto() : "");  
                        $nombrePlan           = ($Servicio->getPlanId() ? $Servicio->getPlanId()->getNombrePlan() : "");  
                        $nombreProductoPlan   = $nombreProducto . $nombrePlan;
                    }
                }
                
                if ($strCodEmpresa == '10' && $data["descripcionSolicitud"] ==  'SOLICITUD REUBICACION')
                {
                    $nombreProductoPlan = "Reubicación de servicios";
                }
                else if($strCodEmpresa == '10' && $data["descripcionSolicitud"] ==  'SOLICITUD TRASLADO')
                {
                    $nombreProductoPlan = "Traslado de servicios";
                }
                else if($strCodEmpresa == '10' && $data["descripcionSolicitud"] ==  'SOLICITUD APROBACION CLOUDFORM')
                {
                    $nombreProductoPlan = "<b style='color:green;'>CloudPublic</b>";
                    $boolEsCloudForm    = true;
                }
                
                $ultimaMilla  = $this->_em->getRepository('schemaBundle:AdmiTipoMedio')->findOneById($data["ultimaMillaId"]);
                $nombreSector = ($data["nombreSector"] ? $data["nombreSector"]  : "");    
                $parroquia    = ($data["nombreParroquia"] ? $data["nombreParroquia"]  : ""); 
                $ciudad       = ($data["nombreCanton"] ? $data["nombreCanton"]  : "");  
                $cliente      = ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
				                ($data["longitud"]&&$data["latitud"])?$coordenadas = $data["longitud"] . ", ". $data["latitud"]:$coordenadas = "";

                $fePlanificacion = strval(date_format($data["feCreacion"],"d/m/Y G:i"));
                $latitud         = ($data["latitud"] ? $data["latitud"]  : "");  
                $longitud        = ($data["longitud"] ? $data["longitud"]  : "");  
                
				if($InfoDetalleSolicitud->getMotivoId())
                {
					$AdmiMotivo    = $em_general->getRepository('schemaBundle:AdmiMotivo')->find($InfoDetalleSolicitud->getMotivoId()); 
					$motivoRechazo = $AdmiMotivo->getNombreMotivo();
				}
                else
                {
					$motivoRechazo = "";
                }
				
				if($data["tipoOrden"])
                {
					switch ($data["tipoOrden"]) 
                    {
					   case "N":
							 $tipo_orden = "Nuevo";
							 break;
					   case "T":
							 $tipo_orden = "Traslado";
							 break;
					   case "R":
							 $tipo_orden = "Reubicacion";
							 break;
                       case "C":
							 $tipo_orden = "Cambio Tipo Medio";
							 break;
						default:
							$tipo_orden = "Nuevo";
							 break;
					}
				}
                else
                {
					$tipo_orden = "Nuevo";
				}
                
                // ************************* RUTA DE LA IMAGEN DEL CROQUIS *************** 
                $pathCroquis         = "public/uploads/croquis/";
                $pathImagenDefault   = "public/images/images_crud/";
                $rutaVerificaCroquis = ($data["rutaCroquis"]!="" ? "./$pathCroquis".$data["rutaCroquis"] : "" );
				
                if(file_exists($rutaVerificaCroquis))
                {
                    $nombreArchivo = $data["rutaCroquis"];
                    $rutaArchivo   = "/" . $pathCroquis . $nombreArchivo;
                }
                else 
                {
                    $nombreArchivo = "no_image_200_200.png";
                    $rutaArchivo   = "/" . $pathImagenDefault . $nombreArchivo;
                }                
                $rutaCroquis = ($rutaArchivo!="" ?  
                               "<img src='$rutaArchivo' title='$nombreArchivo' alt='$nombreArchivo' width='480' height='450' />" : "" );
				
                
                if($data["descripcionSolicitud"]  == "SOLICITUD MATERIALES EXCEDENTES" or 
                   ($data["descripcionSolicitud"] == "SOLICITUD PLANIFICACION" && 
                   $InfoDetalleSolicitud->getEstado()=="Finalizada"))
                {
                    $action1 = 'button-grid-show';
                }
                else
                {
                    $action1 = "";
                }

                //Consultar Datos necesarios para la herramienta de aprobar solicitud de traslado
                if($data["descripcionSolicitud"] == "SOLICITUD TRASLADO" && $InfoDetalleSolicitud->getEstado() == "PendienteAutorizar")
                {
                    //Obtener valor de caracteristica de Tipo de negocio
                    $objCaracteristicaNegocio = $this->_em->getRepository("schemaBundle:AdmiCaracteristica")
                                                          ->findOneBy(array("descripcionCaracteristica" => "TIPO_NEGOCIO",
                                                                            "estado"                    => "Activo"));

                    $objCaractValorNegocio = $this->_em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                       ->findOneBy(array("detalleSolicitudId"   => $data["idDetalleSolicitud"],
                                                                         "caracteristicaId"     => $objCaracteristicaNegocio->getId()));

                    if(is_object($objCaractValorNegocio))
                    {
                        $strTipoNegocio = $objCaractValorNegocio->getValor();
                    }

                    //Obtener valor de caracteristica de Servicios a Traslador
                    $objCaracteristicaServicios = $this->_em->getRepository("schemaBundle:AdmiCaracteristica")
                                                          ->findOneBy(array("descripcionCaracteristica" => "SERVICIOS_TRASLADAR",
                                                                            "estado"                    => "Activo"));

                    $objCaractValorServicios = $this->_em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                         ->findOneBy(array("detalleSolicitudId"   => $data["idDetalleSolicitud"],
                                                                           "caracteristicaId"     => $objCaracteristicaServicios->getId()));
                    if(is_object($objCaractValorServicios))
                    {
                        $strServiciosTrasladar = $objCaractValorServicios->getValor();
                    }

                    //Obtener valor de caracteristica del login a Trasladar
                    $objCaracteristicaPuntoT = $this->_em->getRepository("schemaBundle:AdmiCaracteristica")
                                                          ->findOneBy(array("descripcionCaracteristica" => "ID_PUNTO_TRASLADO",
                                                                            "estado"                    => "Activo"));

                    $objCaractValorPuntoT = $this->_em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                      ->findOneBy(array("detalleSolicitudId"   => $data["idDetalleSolicitud"],
                                                                        "caracteristicaId"     => $objCaracteristicaPuntoT->getId()));
                    if(is_object($objCaractValorPuntoT))
                    {
                        $strCaracteristicaPuntoT = $objCaractValorPuntoT->getValor();

                        $objPuntoTrasladar = $this->_em->getRepository("schemaBundle:InfoPunto")->find($strCaracteristicaPuntoT);

                        if(is_object($objPuntoTrasladar))
                        {
                            $strLoginTrasladar = $objPuntoTrasladar->getLogin();
                        }

                        //Se obtiene el saldo del cliente
                        $arrayParametrosDeudaCliente["intIdPunto"] = $strCaracteristicaPuntoT;
                        $arraySaldoPunto = $this->_em->getRepository('schemaBundle:InfoDocumentoFinancieroCab')
                                                     ->obtieneDeudaPorCliente($arrayParametrosDeudaCliente);

                        $strSaldoPunto = $arraySaldoPunto["saldoTotal"];

                        //Se obtiene el tiempo espera meses
                        $arrayParametrosEspera["intIdPunto"] = $strCaracteristicaPuntoT;

                        $strTiempoEsperaMeses = $this->_em->getRepository('schemaBundle:InfoDocumentoFinancieroCab')
                                                          ->obtieneTiempoEsperaMeses($arrayParametrosEspera);

                        $strTiempoEsperaMeses = $strTiempoEsperaMeses["feEsperaMeses"];
                    }
                }
                
                $strLinkDescarga = '';
                
                if($boolEsCloudForm && is_object($serviceRouter))
                {
                    $strLinkDescarga = $serviceRouter->generate('infopunto_descargarContratoExternoDigital',
                                                                array('intIdDocumento' => $data['idDocumento']));
                }

                //Validar solicitud de excedente de material
                $objTipoSolicitud = $this->_em->getRepository("schemaBundle:AdmiTipoSolicitud")->find($search_tipoSolicitud);
            
                    if(is_object($objTipoSolicitud)  
                    && $objTipoSolicitud->getDescripcionSolicitud() == "SOLICITUD MATERIALES EXCEDENTES"  
                    && $InfoDetalleSolicitud->getEstado() == "Pendiente")
                    {
                            $boolExcedenteMaterial = true;
                    }
                if($coordenadas != "Sin Coordenadas")
                {
                    $arr_encontrados[]=array(
                                             'id_solicitud'  => $data["idDetalleSolicitud"],
                                             'id_servicio'   => $data["idServicio"],
                                             'id_punto'      => $data["idPunto"],
                                             'observacion'   => $data["observacion"],
                                             'tipoSolicitud' => $data["descripcionSolicitud"],
                                             'cliente'       => ucwords(strtolower(trim($cliente))),
                                             'vendedor'      => trim($nombreVendedor),
                                             'login2'        => trim($data["login"]),
                                             'tipo_orden'    => $tipo_orden,
                                             'producto'      => trim($nombreProductoPlan),
                                             'coordenadas'   => trim($coordenadas),
                                             'precioTraslado'      => $InfoDetalleSolicitud->getPrecioDescuento(),
                                             'descripcionTraslado' => $InfoDetalleSolicitud->getObservacion(),
                                             'tipoNegocio'         => $strTipoNegocio,
                                             'idsServicioTraslado' => $strServiciosTrasladar,
                                             'loginATrasladar'     => $strLoginTrasladar,
                                             'tiempoEsperaMeses'   => $strTiempoEsperaMeses,
                                             'saldoPunto'          => $strSaldoPunto,
                                             'direccion'     => trim($data["direccion"]),
                                             'ciudad'        => ucwords(strtolower(trim($ciudad))),
                                             'nombreSector'  => ucwords(strtolower(trim($nombreSector))),
                                             'fePlanificacion' => trim($fePlanificacion),
                                             'rutaCroquis'     => trim($rutaCroquis),
                                             'latitud'         => trim($latitud),
                                             'longitud'        => trim($longitud),
                                             'precioDescuento' => $data["precioDescuento"],
                                             'esCloudForm'     => $boolEsCloudForm?'S':'N',
                                             'linkDescarga'    => $strLinkDescarga,
                                             'precioDescGrid'  => $data["precioDescuento"]?'$'.$data["precioDescuento"]:'',
                                             'ultimaMilla'     => ($ultimaMilla)?$ultimaMilla->getNombreTipoMedio():"",
                                             'observacion2'    => ($InfoDetalleSolicitud->getObservacion())?
                                                                  $InfoDetalleSolicitud->getObservacion():"",
                                             'motivo'          => $motivoRechazo,
                                             'usr_rechazo'     => ($InfoDetalleSolicitud->getUsrRechazo())?
                                                                  $InfoDetalleSolicitud->getUsrRechazo():"",
                                             'fe_rechazo'      => ($InfoDetalleSolicitud->getFeRechazo())?
                                                                  strval(date_format($InfoDetalleSolicitud->getFeRechazo(),"d/m/Y G:i")):"",
                                             'fe_ejecucion'    => ($InfoDetalleSolicitud->getFeEjecucion())?
                                                                  strval(date_format($InfoDetalleSolicitud->getFeEjecucion(),"d/m/Y G:i")):"",
                                             'estado'          => $InfoDetalleSolicitud->getEstado(),
                                             'action1'         => $action1,
                                             'action2'         => 'button-grid-logs',
                                             'action3' =>  ($boolExcedenteMaterial ? 'button-grid-mail' :  "icon-invisible"),
                                             'action4' =>  ($boolExcedenteMaterial ? 'button-grid-agregarArchivoCaso' :  "icon-invisible"),
                                             'action5' =>  ($boolExcedenteMaterial ? 'button-grid-pdf' :  "icon-invisible"),
                                             'prefEmpresa' => ($strCodEmpresa = '10'?  "TN" : ""  ),
                                             'usrVendedor' =>  $Servicio->getUsrVendedor(),
                                            );
                }
                else
                {
                    $arr_encontrados[]=array(
                                             'id_solicitud' => $data["idDetalleSolicitud"],
                                             'id_servicio'  => $data["idServicio"],
                                             'id_punto'     => $data["idPunto"],
                                             'observacion'  => $data["observacion"],
                                             'cliente'      => ucwords(strtolower(trim($cliente))),
                                             'vendedor'     => trim($nombreVendedor),
                                             'login2'       => trim($data["login"]),
                                             'tipoSolicitud' => $data["descripcionSolicitud"],
                                             'tipo_orden'    => $tipo_orden,
                                             'producto'      => trim($nombreProductoPlan),
                                             'coordenadas'   => trim($coordenadas),
                                             'precioTraslado'      => $InfoDetalleSolicitud->getPrecioDescuento(),
                                             'descripcionTraslado' => $InfoDetalleSolicitud->getObservacion(),
                                             'tipoNegocio'         => $strTipoNegocio,
                                             'idsServicioTraslado' => $strServiciosTrasladar,
                                             'loginATrasladar'     => $strLoginTrasladar,
                                             'tiempoEsperaMeses'   => $strTiempoEsperaMeses,
                                             'saldoPunto'          => $strSaldoPunto,
                                             'direccion'     => trim($data["direccion"]),
                                             'ciudad'        => ucwords(strtolower(trim($ciudad))),
                                             'nombreSector'  => ucwords(strtolower(trim($nombreSector))),
                                             'fePlanificacion' => trim($fePlanificacion),
                                             'rutaCroquis'     => trim($rutaCroquis),
                                             'latitud'         => trim($latitud),
                                             'longitud'        => trim($longitud),
                                             'precioDescuento' => $data["precioDescuento"],
                                             'esCloudForm'     => $boolEsCloudForm?'S':'N',
                                             'linkDescarga'    => $strLinkDescarga,
                                             'precioDescGrid'  => $data["precioDescuento"]?'$'.$data["precioDescuento"]:'',
                                             'ultimaMilla'     => ($ultimaMilla)?$ultimaMilla->getNombreTipoMedio():"",
                                             'observacion2'    => ($InfoDetalleSolicitud->getObservacion())?
                                                                  $InfoDetalleSolicitud->getObservacion():"",
                                             'motivo'          => $motivoRechazo,
                                             'usr_rechazo'     => ($InfoDetalleSolicitud->getUsrRechazo())?
                                                                  $InfoDetalleSolicitud->getUsrRechazo():"",
                                             'fe_rechazo'      => ($InfoDetalleSolicitud->getFeRechazo())?
                                                                  strval(date_format($InfoDetalleSolicitud->getFeRechazo(),"d/m/Y G:i")):"",
                                             'estado'          => $InfoDetalleSolicitud->getEstado(),
                                             'action1'         => $action1,
                                             'action2'         => 'button-grid-logs',
                                             'action3'         =>  ($boolExcedenteMaterial ? 'button-grid-mail' :  "icon-invisible"),
                                             'action4'         =>  ($boolExcedenteMaterial ? 'button-grid-agregarArchivoCaso' :  "icon-invisible"),
                                             'action5'         =>  ($boolExcedenteMaterial ? 'button-grid-pdf' :  "icon-invisible"),
                                             'prefEmpresa' => ($strCodEmpresa = '10'?  "TN" : ""  ),
                                             'usrVendedor' =>  $Servicio->getUsrVendedor()
                                             );
                }                
            }

            if($num == 0)
            {
                $resultado = array('total'       => 1 ,
                                   'encontrados' => array('id_factibilidad'     => 0 , 
                                                          'nombre_factibilidad' => 'Ninguno', 
                                                          'factibilidad_id'     => 0 , 
                                                          'factibilidad_nombre' => 'Ninguno', 
                                                          'estado'              => 'Ninguno'));
                $resultado = json_encode( $resultado);
                return $resultado;
            }
            else
            {
                $dataF     = json_encode($arr_encontrados);
                $resultado = '{"total":"'.$num.'","encontrados":'.$dataF.'}';
                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';
            return $resultado;
        }
        
    }
	
	
    /* ******************************************** LIST FACTIBILIDAD ******************************************* */
    public function generarJsonSolicitudesFactibilidad($em, $em_general,$start,$limit, $search_fechaDesdePlanif, $search_fechaHastaPlanif, $search_login2, $search_descripcionPunto, $search_vendedor, $search_ciudad, $search_numOrdenServicio, $codEmpresa = "")
    {
        $arr_encontrados = array();
        
        $registrosTotal = $this->getRegistrosSolicitudesFactibilidad('', '', $search_fechaDesdePlanif, $search_fechaHastaPlanif, $search_login2, $search_descripcionPunto, $search_vendedor, $search_ciudad, $search_numOrdenServicio,$codEmpresa);
        $registros = $this->getRegistrosSolicitudesFactibilidad($start, $limit, $search_fechaDesdePlanif, $search_fechaHastaPlanif, $search_login2, $search_descripcionPunto, $search_vendedor, $search_ciudad, $search_numOrdenServicio,$codEmpresa);
 
        $registrosTotal2 = $this->getRegistrosSolicitudesMaterialesExcedentes('', '', $search_fechaDesdePlanif, $search_fechaHastaPlanif, $search_login2, $search_descripcionPunto, $search_vendedor, $search_ciudad, $search_numOrdenServicio,$codEmpresa);
        $registros2 = $this->getRegistrosSolicitudesMaterialesExcedentes($start, $limit, $search_fechaDesdePlanif, $search_fechaHastaPlanif, $search_login2, $search_descripcionPunto, $search_vendedor, $search_ciudad, $search_numOrdenServicio,$codEmpresa);
 
        if($registros2){
			$registrosTotal = array_merge($registrosTotal,$registrosTotal2);
			$registros = array_merge($registros,$registros2);
		}
		if ($registros) {
            $num = count($registrosTotal);            
            foreach ($registros as $data)
            {         
                $nombreVendedor = (isset($data["nombreVendedor"]) ?  ($data["nombreVendedor"] ? ucwords(strtolower($data["nombreVendedor"])) : "") : "");
				
                $InfoDetalleSolicitud = $this->_em->getRepository('schemaBundle:InfoDetalleSolicitud')->find($data["idDetalleSolicitud"]); 
                $Servicio = $this->_em->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]); 
                $nombreProducto =  ($Servicio->getProductoId() ? $Servicio->getProductoId()->getDescripcionProducto() : "");  
                $nombrePlan =  ($Servicio->getPlanId() ? $Servicio->getPlanId()->getNombrePlan() : "");  
                $nombreProductoPlan = $nombreProducto . $nombrePlan;
                
                $ultimaMilla =  $em->getRepository('schemaBundle:AdmiTipoMedio')->findOneById($data["ultimaMillaId"]);
                $nombreSector =  ($data["nombreSector"] ? $data["nombreSector"]  : "");    
                $parroquia =  ($data["nombreParroquia"] ? $data["nombreParroquia"]  : ""); 
                $ciudad =  ($data["nombreCanton"] ? $data["nombreCanton"]  : "");  
                $cliente = ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
				($data["longitud"]&&$data["latitud"])?$coordenadas = $data["longitud"] . ", ". $data["latitud"]:$coordenadas = "";
                $fePlanificacion = strval(date_format($data["feCreacion"],"d/m/Y G:i"));                
                $latitud =  ($data["latitud"] ? $data["latitud"]  : "");  
                $longitud =  ($data["longitud"] ? $data["longitud"]  : "");  
                
				if($InfoDetalleSolicitud->getMotivoId()){
					$AdmiMotivo = $em_general->getRepository('schemaBundle:AdmiMotivo')->find($InfoDetalleSolicitud->getMotivoId()); 
					$motivoRechazo = $AdmiMotivo->getNombreMotivo();
				}else
					$motivoRechazo = "";
				
				/////////////////////////////////////////////////////////////////////////
				if($data["tipoOrden"]){
					switch ($data["tipoOrden"]) {
					   case "N":
							 $tipo_orden = "Nuevo";
							 break;
					   case "T":
							 $tipo_orden = "Traslado";
							 break;
					   case "R":
							 $tipo_orden = "Reubicacion";
							 break;
                       case "C":
							 $tipo_orden = "Cambio Tipo Medio";
							 break;
						default:
							$tipo_orden = "Nuevo";
							 break;
					}
				}else{
					$tipo_orden = "Nuevo";
				}
                // ************************* RUTA DE LA IMAGEN DEL CROQUIS *************** 
                $pathCroquis = "public/uploads/croquis/";
                $pathImagenDefault = "public/images/images_crud/";
                $rutaVerificaCroquis = ($data["rutaCroquis"]!="" ? "./$pathCroquis".$data["rutaCroquis"] : "" );
				
                if(file_exists($rutaVerificaCroquis))
                {
                    $nombreArchivo = $data["rutaCroquis"];
                    $rutaArchivo = "/" . $pathCroquis . $nombreArchivo;
                }
                else 
                {
                    $nombreArchivo = "no_image_200_200.png";
                    $rutaArchivo = "/" . $pathImagenDefault . $nombreArchivo;
                }                
                $rutaCroquis = ($rutaArchivo!="" ?  "<img src='$rutaArchivo' title='$nombreArchivo' alt='$nombreArchivo' width='480' height='450' />" : "" );
				
                //$rutaCroquis = ($data["rutaCroquis"]!="" ?  "<img src='/telconet/web/public/uploads/croquis/".$data["rutaCroquis"]."' title='".$data["rutaCroquis"]."' alt='".$data["rutaCroquis"]."' width='480' height='450' />" : "" );
                                 
				if($coordenadas!="Sin Coordenadas"){
                $arr_encontrados[]=array(
                                         'id_factibilidad' =>$data["idDetalleSolicitud"],
                                         'id_servicio' =>$data["idServicio"],
                                         'id_punto' =>$data["idPunto"],
                                         'observacion' =>$data["observacion"],
                                         'cliente' =>ucwords(strtolower(trim($cliente))),
                                         'vendedor' =>trim($nombreVendedor),
                                         'login2' =>trim($data["login"]),
                                         'tipo_orden' =>$tipo_orden,
                                         'producto' =>trim($nombreProductoPlan),
                                         'coordenadas' =>trim($coordenadas),
                                         'direccion' =>trim($data["direccion"]),
                                         'ciudad' =>ucwords(strtolower(trim($ciudad))),
                                         'nombreSector' =>ucwords(strtolower(trim($nombreSector))),
                                         'fePlanificacion' =>trim($fePlanificacion),
                                         'rutaCroquis' =>trim($rutaCroquis),
                                         'latitud' =>trim($latitud),
                                         'longitud' =>trim($longitud),
                                         'ultimaMilla' =>($ultimaMilla)?$ultimaMilla->getNombreTipoMedio():"",
                                         'observacion2' =>($InfoDetalleSolicitud->getObservacion())?$InfoDetalleSolicitud->getObservacion():"",
                                         'motivo' => $motivoRechazo,
                                         'usr_rechazo' =>($InfoDetalleSolicitud->getUsrRechazo())?$InfoDetalleSolicitud->getUsrRechazo():"",
                                         'fe_rechazo' =>($InfoDetalleSolicitud->getFeRechazo())?strval(date_format($InfoDetalleSolicitud->getFeRechazo(),"d/m/Y G:i")):"",
                                         'estado' =>$InfoDetalleSolicitud->getEstado(),
                                         'action1' => 'button-grid-Gmaps',
                                         'action2' => 'button-grid-Foto',
                                         'action3' => 'button-grid-BigDelete',
                                         'action4' => 'button-grid-Tuerca');
				}else{
				$arr_encontrados[]=array(
                                         'id_factibilidad' =>$data["idDetalleSolicitud"],
                                         'id_servicio' =>$data["idServicio"],
                                         'id_punto' =>$data["idPunto"],
                                         'observacion' =>$data["observacion"],
                                         'cliente' =>ucwords(strtolower(trim($cliente))),
                                         'vendedor' =>trim($nombreVendedor),
                                         'login2' =>trim($data["login"]),
										 'tipo_orden' =>$tipo_orden,
                                         'producto' =>trim($nombreProductoPlan),
                                         'coordenadas' =>trim($coordenadas),
                                         'direccion' =>trim($data["direccion"]),
                                         'ciudad' =>ucwords(strtolower(trim($ciudad))),
                                         'nombreSector' =>ucwords(strtolower(trim($nombreSector))),
                                         'fePlanificacion' =>trim($fePlanificacion),
                                         'rutaCroquis' =>trim($rutaCroquis),
                                         'latitud' =>trim($latitud),
                                         'longitud' =>trim($longitud),
                                         'ultimaMilla' =>($ultimaMilla)?$ultimaMilla->getNombreTipoMedio():"",
                                         'observacion2' =>($InfoDetalleSolicitud->getObservacion())?$InfoDetalleSolicitud->getObservacion():"",
                                         'motivo' => $motivoRechazo,
                                         'usr_rechazo' =>($InfoDetalleSolicitud->getUsrRechazo())?$InfoDetalleSolicitud->getUsrRechazo():"",
                                         'fe_rechazo' =>($InfoDetalleSolicitud->getFeRechazo())?strval(date_format($InfoDetalleSolicitud->getFeRechazo(),"d/m/Y G:i")):"",
                                         'estado' =>$InfoDetalleSolicitud->getEstado(),
                                         'action2' => 'button-grid-Foto',
                                         'action3' => 'button-grid-BigDelete',
                                         'action4' => 'button-grid-Tuerca');
				}
            }

            if($num == 0)
            {
                $resultado= array('total' => 1 ,
                                 'encontrados' => array('id_factibilidad' => 0 , 'nombre_factibilidad' => 'Ninguno', 'factibilidad_id' => 0 , 'factibilidad_nombre' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);
                return $resultado;
            }
            else
            {
                $dataF =json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$dataF.'}';
                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';
            return $resultado;
        }
        
    }
    /**
     * Función: getRegistrosSolicitudesMaterialesExcedentes
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.1 11-01-2018 Se corrige filtro de búsqueda por login.
     *
     * 
     * @author telcos
     * @version 1.0 
     * 
     **/ 	    
    public function getRegistrosSolicitudesMaterialesExcedentes($start, $limit, $search_fechaDesdePlanif, $search_fechaHastaPlanif, $search_login2, $search_descripcionPunto, $search_vendedor, $search_ciudad, $search_numOrdenServicio,$codEmpresa="")
    {
        $boolBusqueda = false; 
        $where = "";  
                        
        if($search_fechaDesdePlanif!=""){
            $dateF = explode("-",$search_fechaDesdePlanif);
            $fechaSql = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));
            
            $boolBusqueda = true;          
            $where .= "AND ds.feCreacion >= '".trim($fechaSql)."' ";
        }
        if($search_fechaHastaPlanif!=""){
            $dateF = explode("-",$search_fechaHastaPlanif);           
            $fechaSqlAdd = strtotime(date("Y-m-d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0])). " +1 day");
            $fechaSql = date("Y/m/d", $fechaSqlAdd);
            
            $boolBusqueda = true;
            $where .= "AND ds.feCreacion <= '".trim($fechaSql)."' ";
        }
        
        if($search_login2!=""){
            $boolBusqueda = true;
            $where .= "AND UPPER(p.login) like UPPER('$search_login2%') ";
        }
        
        if($search_descripcionPunto!=""){
            $boolBusqueda = true;
            $where .= "AND UPPER(p.descripcionPunto) like UPPER('%$search_descripcionPunto%') ";
        }
        
        if($search_vendedor!=""){
            $boolBusqueda = true;
            $where .= "AND CONCAT(LOWER(peVend.nombres),CONCAT(' ',LOWER(peVend.apellidos))) like '%".strtolower(trim($search_vendedor))."%' ";
			//"AND UPPER(p.usrVendedor) like UPPER('%$search_vendedor%') ";
        }
        
        if($search_numOrdenServicio!=""){
            $boolBusqueda = true;
            $where .= "AND ot.numeroOrdenTrabajo like '$search_numOrdenServicio%' ";
        }
        
        if($search_ciudad!=""){
            $boolBusqueda = true;
            $where .= "AND UPPER(ca.nombreCanton) like UPPER('%$search_ciudad%') ";
        }
        
        $sql = "SELECT 
					ds.id as idDetalleSolicitud, s.id as idServicio, 
					p.id as idPunto, se.nombreSector, pa.nombreParroquia, ca.nombreCanton, 
					pe.razonSocial, pe.nombres, pe.apellidos, p.usrVendedor, p.login, 
					p.longitud, p.latitud, p.direccion, p.path as rutaCroquis, ds.feCreacion,
					st.ultimaMillaId , p.observacion,
					CONCAT(peVend.nombres,CONCAT(' ',peVend.apellidos)) as nombreVendedor 
        
                FROM 
					schemaBundle:InfoServicio s, schemaBundle:InfoServicioTecnico st,schemaBundle:AdmiTipoSolicitud ts,
					schemaBundle:InfoDetalleSolicitud ds, 
					schemaBundle:InfoPersona pe, schemaBundle:InfoPersonaEmpresaRol per,
					schemaBundle:AdmiSector se, schemaBundle:AdmiParroquia pa, 
					schemaBundle:AdmiCanton ca, schemaBundle:InfoEmpresaRol emr,
					schemaBundle:InfoPunto p 
        
				LEFT JOIN schemaBundle:InfoPersona peVend WITH peVend.login = p.usrVendedor 
        
                WHERE 
					s.id = ds.servicioId 
					AND st.servicioId = s.id
					AND s.puntoId = p.id
					AND ts.id = ds.tipoSolicitudId 
					AND p.personaEmpresaRolId = per.id 
					AND per.personaId = pe.id 
					AND p.sectorId = se.id 
					AND se.parroquiaId = pa.id 
					AND pa.cantonId = ca.id 
					AND per.empresaRolId = emr.id
			
					AND emr.empresaCod = $codEmpresa
					AND LOWER(ts.descripcionSolicitud) = LOWER('SOLICITUD MATERIALES EXCEDENTES')  
					
					$where 		
				
				ORDER BY ds.feCreacion DESC
               ";
        
        $query = $this->_em->createQuery($sql);
        
        if($start!='' && !$boolBusqueda && $limit!='')
            $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        else if($start!='' && !$boolBusqueda && $limit=='')
            $datos = $query->setFirstResult($start)->getResult();
        else if(($start=='' || $boolBusqueda) && $limit!='')
            $datos = $query->setMaxResults($limit)->getResult();
        else
            $datos = $query->getResult();
        
        return $datos;
    }
    
    /**
     * Función: getRegistrosSolicitudesFactibilidad
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.1 11-01-2018 Se corrige filtro de búsqueda por login.
     *
     * @author telcos
     * @version 1.0 
     * 
     **/     
    public function getRegistrosSolicitudesFactibilidad($start, $limit, $search_fechaDesdePlanif, $search_fechaHastaPlanif, $search_login2, $search_descripcionPunto, $search_vendedor, $search_ciudad, $search_numOrdenServicio,$codEmpresa="")
    {
        $boolBusqueda = false; 
        $where = "";  
                        
        if($search_fechaDesdePlanif!=""){
            $dateF = explode("-",$search_fechaDesdePlanif);
            $fechaSql = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));
            
            $boolBusqueda = true;          
            $where .= "AND ds.feCreacion >= '".trim($fechaSql)."' ";
        }
        if($search_fechaHastaPlanif!=""){
            $dateF = explode("-",$search_fechaHastaPlanif);           
            $fechaSqlAdd = strtotime(date("Y-m-d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0])). " +1 day");
            $fechaSql = date("Y/m/d", $fechaSqlAdd);
            
            $boolBusqueda = true;
            $where .= "AND ds.feCreacion <= '".trim($fechaSql)."' ";
        }
        
        if($search_login2!=""){
            $boolBusqueda = true;
            $where .= "AND UPPER(p.login) like UPPER('$search_login2%') ";
        }
        
        if($search_descripcionPunto!=""){
            $boolBusqueda = true;
            $where .= "AND UPPER(p.descripcionPunto) like UPPER('%$search_descripcionPunto%') ";
        }
        
        if($search_vendedor!=""){
            $boolBusqueda = true;
            $where .= "AND CONCAT(LOWER(peVend.nombres),CONCAT(' ',LOWER(peVend.apellidos))) like '%".strtolower(trim($search_vendedor))."%' ";
			//"AND UPPER(p.usrVendedor) like UPPER('%$search_vendedor%') ";
        }
        
        if($search_numOrdenServicio!=""){
            $boolBusqueda = true;
            $where .= "AND ot.numeroOrdenTrabajo like '$search_numOrdenServicio%' ";
        }
        
        if($search_ciudad!=""){
            $boolBusqueda = true;
            $where .= "AND UPPER(ca.nombreCanton) like UPPER('%$search_ciudad%') ";
        }
        
        $sql = "SELECT 
					ds.id as idDetalleSolicitud, s.id as idServicio, 
					p.id as idPunto, se.nombreSector, pa.nombreParroquia, ca.nombreCanton, 
					pe.razonSocial, pe.nombres, pe.apellidos, p.usrVendedor, p.login, 
					p.longitud, p.latitud, p.direccion, p.path as rutaCroquis, ds.feCreacion,
					s.ultimaMillaId , p.observacion,
					st.tipo_orden,
					CONCAT(peVend.nombres,CONCAT(' ',peVend.apellidos)) as nombreVendedor 
        
                FROM 
					schemaBundle:InfoServicio s, schemaBundle:InfoServicioTecnico st, schemaBundle:AdmiTipoSolicitud ts,
					schemaBundle:InfoDetalleSolicitud ds, 
					schemaBundle:InfoPersona pe, schemaBundle:InfoPersonaEmpresaRol per,
					schemaBundle:AdmiSector se, schemaBundle:AdmiParroquia pa, 
					schemaBundle:AdmiCanton ca, schemaBundle:InfoEmpresaRol emr,
					schemaBundle:InfoPunto p 
        
				LEFT JOIN schemaBundle:InfoPersona peVend WITH peVend.login = p.usrVendedor 
        
                WHERE 
					s.id = ds.servicioId 
					AND st.servicioId = s.id
					AND s.puntoId = p.id
					AND ts.id = ds.tipoSolicitudId 
					AND p.personaEmpresaRolId = per.id 
					AND per.personaId = pe.id 
					AND p.sectorId = se.id 
					AND se.parroquiaId = pa.id 
					AND pa.cantonId = ca.id 
					AND per.empresaRolId = emr.id
			
					AND emr.empresaCod = $codEmpresa
					AND LOWER(ts.descripcionSolicitud) = LOWER('SOLICITUD FACTIBILIDAD')  
					
					$where 		
				
				ORDER BY ds.feCreacion DESC
               ";
        
        $query = $this->_em->createQuery($sql);
        
        if($start!='' && !$boolBusqueda && $limit!='')
            $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        else if($start!='' && !$boolBusqueda && $limit=='')
            $datos = $query->setFirstResult($start)->getResult();
        else if(($start=='' || $boolBusqueda) && $limit!='')
            $datos = $query->setMaxResults($limit)->getResult();
        else
            $datos = $query->getResult();
        
        return $datos;
    }

    /**
     * Documentación para el método 'getRegistrosSolicitudes'.
     *
     * Obtiene registros de solicitudes
     * 
     * @param  String    $start, 
     * @param  String    $limit, 
     * @param  String    $search_fechaDesdePlanif,
     * @param  String    $search_fechaHastaPlanif,
     * @param  String    $search_login2,
     * @param  String    $search_descripcionPunto,
     * @param  String    $search_vendedor,
     * @param  String    $search_ciudad,
     * @param  String    $estadoTipoSolicitud,
     * @param  String    $search_tipoSolicitud,
     * @param  String    $codEmpresa
     * 
     * @return Object    $datos listado de registros de factibilidad
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 22-01-2018   Se agrega retorno de campo Precio Descuento usado para traslado de servicios TN
     * @since 1.0
     * 
     * @author Alberto Arias <farias@telconet.ec>
     * @version 1.2 08-06-2022 - Se realiza modificación en el query del metodo, debido a la carga excesiva de recursos
     * @since 1.2
     */
    public function getRegistrosSolicitudes($start, 
                                            $limit, 
                                            $search_fechaDesdePlanif, 
                                            $search_fechaHastaPlanif, 
                                            $search_login2, 
                                            $search_descripcionPunto, 
                                            $search_vendedor, 
                                            $search_ciudad, 
                                            $estadoTipoSolicitud,
                                            $search_tipoSolicitud,
                                            $codEmpresa = "")
    {
        $boolBusqueda = false; 
        $where        = "";  
                        
        if($search_fechaDesdePlanif != "")
        {
            $dateF        = explode("-",$search_fechaDesdePlanif);
            $fechaSql     = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));
            $boolBusqueda = true;          
            $where       .= "AND ds.feCreacion >= '".trim($fechaSql)."' ";
        }
        
        if($search_fechaHastaPlanif != "")
        {
            $dateF        = explode("-",$search_fechaHastaPlanif);           
            $fechaSqlAdd  = strtotime(date("Y-m-d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0])). " +1 day");
            $fechaSql     = date("Y/m/d", $fechaSqlAdd);
            $boolBusqueda = true;
            $where       .= "AND ds.feCreacion <= '".trim($fechaSql)."' ";
        }
        
        if($search_login2 != "")
        {
            $boolBusqueda = true;
            $where       .= "AND UPPER(p.login) like UPPER('$search_login2%') ";
        }
        
        if($search_descripcionPunto != "")
        {
            $boolBusqueda = true;
            $where       .= "AND UPPER(p.descripcionPunto) like UPPER('%$search_descripcionPunto%') ";
        }
        
        if($search_vendedor != "")
        {
            $boolBusqueda = true;
            $where       .= "AND CONCAT(LOWER(peVend.nombres),CONCAT(' ',LOWER(peVend.apellidos))) like '%".
                            strtolower(trim($search_vendedor))."%' ";
        }
        
        if($estadoTipoSolicitud != "")
        {
            $boolBusqueda = true;
            $where       .= "AND lower(ds.estado) like lower('$estadoTipoSolicitud%') ";
        }
        
        if($search_ciudad != "")
        {
            $boolBusqueda = true;
            $where       .= "AND UPPER(ca.nombreCanton) like UPPER('%$search_ciudad%') ";
        }
        
        if($search_tipoSolicitud > 0)
        {
            $boolBusqueda = true;
            $where       .= "AND ts.id = ".$search_tipoSolicitud." ";
        }
        
        $sql = "SELECT 
					ds.id as idDetalleSolicitud, s.id as idServicio, 
					p.id as idPunto, se.nombreSector, pa.nombreParroquia, ca.nombreCanton, 
					pe.razonSocial, pe.nombres, pe.apellidos, p.usrVendedor, p.login, ts.descripcionSolicitud,
					p.longitud, p.latitud, p.direccion, p.path as rutaCroquis, ds.feCreacion, ds.precioDescuento, 
					st.ultimaMillaId , p.observacion,
					s.tipoOrden,
					CONCAT(peVend.nombres,CONCAT(' ',peVend.apellidos)) as nombreVendedor 
        
                FROM 
					schemaBundle:InfoServicio s,schemaBundle:InfoServicioTecnico st, schemaBundle:AdmiTipoSolicitud ts,
					schemaBundle:InfoDetalleSolicitud ds, 
					schemaBundle:InfoPersona pe, schemaBundle:InfoPersonaEmpresaRol per,
					schemaBundle:AdmiSector se, schemaBundle:AdmiParroquia pa, 
					schemaBundle:AdmiCanton ca, schemaBundle:InfoEmpresaRol emr,
					schemaBundle:InfoPunto p 
        
				LEFT JOIN schemaBundle:InfoPersona peVend WITH peVend.login = p.usrVendedor 
        
                WHERE 
					s.id = ds.servicioId
					AND st.servicioId = s.id
					AND s.puntoId = p.id
					AND ts.id = ds.tipoSolicitudId 
					AND p.personaEmpresaRolId = per.id 
					AND per.personaId = pe.id 
					AND p.sectorId = se.id 
					AND se.parroquiaId = pa.id 
					AND pa.cantonId = ca.id 
					AND per.empresaRolId = emr.id
			
					AND emr.empresaCod = $codEmpresa
					
					$where 		
				
				ORDER BY ds.feCreacion DESC
               ";
        
        $query = $this->_em->createQuery($sql);
        $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        return $datos;
    }


     /**
     * Costo: 16
     * getDatosSolicitudTraslado
     *
     * Función que retorna los datos de una solicitud de traslado que esta pendiente de autorizar
     *
     * @param array arrayParametros [ strLogin  => login,
     *                                strEstado => estado de la solicitud ]
     *
     * @return array $arrayDatos
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 04-07-2018
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 25-07-2018 -  Se envía el tipo de solicitud como parámetro y se devuelve la información del documento asociado a la solicitud
     */
    public function getDatosSolicitudTraslado($arrayParametros)
    {
        $arrayDatos   = array();
        $strCaract    = "ID_PUNTO";
        $strSolicitud = $arrayParametros['strTipoSolicitud'];
        $objRsmb      = new ResultSetMappingBuilder($this->_em);
        $objQuery     = $this->_em->createNativeQuery(null,$objRsmb);

        $strSql = " SELECT

                            INFODETALLE.ID_DETALLE_SOLICITUD AS IDDETALLESOLICITUD,
                            INFODETALLE.PRECIO_DESCUENTO AS PRECIODESCUENTO,
                            INFODETALLE.FE_CREACION AS FECHACREACION,
                            (SELECT ADMITIPO.DESCRIPCION_SOLICITUD FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD ADMITIPO
                            WHERE ADMITIPO.ID_TIPO_SOLICITUD = INFODETALLE.TIPO_SOLICITUD_ID) AS DESCRIPCIONSOLICITUD,

                            (SELECT INFOPERSONA2.NOMBRES||' '||INFOPERSONA2.APELLIDOS FROM DB_COMERCIAL.INFO_PERSONA INFOPERSONA2
                            WHERE INFOPERSONA2.ID_PERSONA = (
                            SELECT MAX(INFOPERSONA.ID_PERSONA)
                            FROM DB_COMERCIAL.INFO_PERSONA INFOPERSONA WHERE INFOPERSONA.LOGIN =
                            (SELECT INFOPUNTO.USR_VENDEDOR FROM DB_COMERCIAL.INFO_PUNTO INFOPUNTO
                            WHERE INFOPUNTO.ID_PUNTO = INFODETALLESOLCARACT.VALOR))) AS NOMBREVENDEDOR,
                            '903475' AS IDSERVICIO,
                            '' AS ULTIMAMILLAID,
                            '' AS NOMBRESECTOR,
                            '' AS NOMBREPARROQUIA,
                            (SELECT ADMICANTON.NOMBRE_CANTON FROM DB_COMERCIAL.ADMI_CANTON ADMICANTON WHERE ADMICANTON.ID_CANTON =(
                            SELECT ADMIPARROQUIA.CANTON_ID FROM DB_COMERCIAL.ADMI_PARROQUIA ADMIPARROQUIA WHERE ADMIPARROQUIA.ID_PARROQUIA = (
                            SELECT INFOSECTOR.PARROQUIA_ID FROM DB_COMERCIAL.ADMI_SECTOR INFOSECTOR WHERE INFOSECTOR.ID_SECTOR = (
                            SELECT INFOPUNTO.SECTOR_ID FROM DB_COMERCIAL.INFO_PUNTO INFOPUNTO
                            WHERE INFOPUNTO.ID_PUNTO = INFODETALLESOLCARACT.VALOR)))) NOMBRECANTON,
                            (SELECT INFOPERSONA2.NOMBRES FROM DB_COMERCIAL.INFO_PERSONA INFOPERSONA2 WHERE INFOPERSONA2.ID_PERSONA = (
                            SELECT INFOPERSONA.PERSONA_ID
                            FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL INFOPERSONA WHERE INFOPERSONA.ID_PERSONA_ROL =
                            (SELECT INFOPUNTO.PERSONA_EMPRESA_ROL_ID FROM DB_COMERCIAL.INFO_PUNTO INFOPUNTO
                            WHERE INFOPUNTO.ID_PUNTO = INFODETALLESOLCARACT.VALOR))) AS NOMBRES,

                            (SELECT INFOPERSONA2.APELLIDOS FROM DB_COMERCIAL.INFO_PERSONA INFOPERSONA2 WHERE INFOPERSONA2.ID_PERSONA = (
                            SELECT INFOPERSONA.PERSONA_ID
                            FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL INFOPERSONA WHERE INFOPERSONA.ID_PERSONA_ROL =
                            (SELECT INFOPUNTO.PERSONA_EMPRESA_ROL_ID FROM DB_COMERCIAL.INFO_PUNTO INFOPUNTO
                            WHERE INFOPUNTO.ID_PUNTO = INFODETALLESOLCARACT.VALOR))) AS APELLIDOS,

                            (SELECT INFOPERSONA2.RAZON_SOCIAL FROM DB_COMERCIAL.INFO_PERSONA INFOPERSONA2 WHERE INFOPERSONA2.ID_PERSONA = (
                            SELECT INFOPERSONA.PERSONA_ID
                            FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL INFOPERSONA WHERE INFOPERSONA.ID_PERSONA_ROL =
                            (SELECT INFOPUNTO.PERSONA_EMPRESA_ROL_ID FROM DB_COMERCIAL.INFO_PUNTO INFOPUNTO
                            WHERE INFOPUNTO.ID_PUNTO = INFODETALLESOLCARACT.VALOR))) AS RAZONSOCIAL,
                            '' AS LATITUD,
                            '' AS LONGITUD,
                            '' AS TIPOORDEN,
                            '' AS RUTACROQUIS,
                            INFODETALLESOLCARACT.VALOR IDPUNTO,
                            (SELECT INFOPUNTO.LOGIN
                            FROM DB_COMERCIAL.INFO_PUNTO INFOPUNTO WHERE INFOPUNTO.ID_PUNTO = INFODETALLESOLCARACT.VALOR) AS LOGIN,
                            '' AS DIRECCION,
                            '' AS OBSERVACION,
                            (SELECT 
                                DOCUMENTO.ID_DOCUMENTO
                              FROM 
                                DB_COMUNICACION.INFO_DOCUMENTO          DOCUMENTO,
                                DB_COMUNICACION.INFO_DOCUMENTO_RELACION RELACION,
                                DB_COMERCIAL.INFO_PUNTO                 PUNTO,
                                DB_GENERAL.ADMI_TIPO_DOCUMENTO_GENERAL  DOC_GENERAL                            
                              WHERE 
                                    DOCUMENTO.ID_DOCUMENTO            = RELACION.DOCUMENTO_ID
                              AND RELACION.PUNTO_ID                   = PUNTO.ID_PUNTO
                              AND DOCUMENTO.TIPO_DOCUMENTO_GENERAL_ID = DOC_GENERAL.ID_TIPO_DOCUMENTO
                              AND DOC_GENERAL.CODIGO_TIPO_DOCUMENTO   = :paramCaractCloud                         
                              AND DOCUMENTO.ESTADO                    = :paramEstado
                              AND PUNTO.LOGIN                         = :paramLogin
                              AND ROWNUM = 1 ) ID_DOCUMENTO
                            FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD INFODETALLE,DB_COMERCIAL.INFO_DETALLE_SOL_CARACT INFODETALLESOLCARACT
                            WHERE INFODETALLE.ID_DETALLE_SOLICITUD = INFODETALLESOLCARACT.DETALLE_SOLICITUD_ID
                            AND INFODETALLESOLCARACT.CARACTERISTICA_ID = (SELECT ACA.ID_CARACTERISTICA
                            FROM DB_COMERCIAL.ADMI_CARACTERISTICA ACA WHERE ACA.DESCRIPCION_CARACTERISTICA = :paramCaract)
                            AND INFODETALLE.ESTADO = :paramEstadoSol 
                            AND INFODETALLE.TIPO_SOLICITUD_ID = (SELECT ADMITIPOSOL.ID_TIPO_SOLICITUD FROM ADMI_TIPO_SOLICITUD ADMITIPOSOL
                            WHERE ADMITIPOSOL.DESCRIPCION_SOLICITUD = :paramSolicitud)
                            AND INFODETALLESOLCARACT.VALOR = (SELECT TO_CHAR(INFOPUNTO.ID_PUNTO)
                            FROM DB_COMERCIAL.INFO_PUNTO INFOPUNTO WHERE INFOPUNTO.LOGIN = :paramLogin) ";

        $objQuery->setParameter('paramLogin',$arrayParametros["strLogin"]);
        $objQuery->setParameter('paramEstadoSol',$arrayParametros["strEstado"]);
        $objQuery->setParameter('paramCaract',$strCaract);
        $objQuery->setParameter('paramSolicitud',$strSolicitud);
        $objQuery->setParameter('paramEstado','Activo');
        $objQuery->setParameter('paramCaractCloud','CLOUD');

        $objRsmb->addScalarResult('IDDETALLESOLICITUD', 'idDetalleSolicitud', 'string');
        $objRsmb->addScalarResult('PRECIODESCUENTO', 'precioDescuento', 'string');
        $objRsmb->addScalarResult('DESCRIPCIONSOLICITUD', 'descripcionSolicitud', 'string');
        $objRsmb->addScalarResult('FECHACREACION', 'feCreacion', 'datetime');
        $objRsmb->addScalarResult('NOMBREVENDEDOR', 'nombreVendedor', 'string');
        $objRsmb->addScalarResult('IDSERVICIO', 'idServicio', 'string');
        $objRsmb->addScalarResult('ULTIMAMILLAID', 'ultimaMillaId', 'string');
        $objRsmb->addScalarResult('NOMBRESECTOR', 'nombreSector', 'string');
        $objRsmb->addScalarResult('NOMBREPARROQUIA', 'nombreParroquia', 'string');
        $objRsmb->addScalarResult('NOMBRECANTON', 'nombreCanton', 'string');
        $objRsmb->addScalarResult('NOMBRES', 'nombres', 'string');
        $objRsmb->addScalarResult('APELLIDOS', 'apellidos', 'string');
        $objRsmb->addScalarResult('RAZONSOCIAL', 'razonSocial', 'string');
        $objRsmb->addScalarResult('LATITUD', 'latitud', 'string');
        $objRsmb->addScalarResult('LONGITUD', 'longitud', 'string');
        $objRsmb->addScalarResult('TIPOORDEN', 'tipoOrden', 'string');
        $objRsmb->addScalarResult('ID_DOCUMENTO', 'idDocumento', 'integer');

        $objRsmb->addScalarResult('RUTACROQUIS', 'rutaCroquis', 'string');
        $objRsmb->addScalarResult('IDPUNTO', 'idPunto', 'string');
        $objRsmb->addScalarResult('LOGIN', 'login', 'string');
        $objRsmb->addScalarResult('DIRECCION', 'direccion', 'string');
        $objRsmb->addScalarResult('PRECIODESCUENTO', 'precioDescuento', 'string');
        $objRsmb->addScalarResult('OBSERVACION', 'observacion', 'string');

        $objQuery->setSQL($strSql);

        $arrayDatos = $objQuery->getResult();

        return $arrayDatos;
    }


     /**
     * Costo: 17
     * getTieneSolPorAutorizar
     *
     * Función que retorna las solicitudes de traslado que estan pendientes por autorizar por login
     *
     * @param array arrayParametros [ strLogin => login ]
     *
     * @return string $strSolicitudes retorna la cantidad de solicitudes por login
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 04-07-2018
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 24-07-2018 -  Se envia el tipo de solicitud como parámetro
     */
    public function getTieneSolPorAutorizar($arrayParametros)
    {
        $strSolicitudes   = "";
        $strEstadoSol = array("PendienteAutorizar","Rechazada");
        $strCaract    = "ID_PUNTO";
        $strSolicitud = $arrayParametros['strTipoSolicitud'];
        $objRsmb      = new ResultSetMappingBuilder($this->_em);
        $objQuery     = $this->_em->createNativeQuery(null,$objRsmb);

        $strSql = " SELECT COUNT(INFODETALLE.ID_DETALLE_SOLICITUD) SOLICITUD
                    FROM INFO_DETALLE_SOLICITUD INFODETALLE,INFO_DETALLE_SOL_CARACT INFODETALLESOLCARACT
                    WHERE INFODETALLE.ID_DETALLE_SOLICITUD = INFODETALLESOLCARACT.DETALLE_SOLICITUD_ID
                    AND INFODETALLESOLCARACT.CARACTERISTICA_ID = (SELECT ACA.ID_CARACTERISTICA FROM ADMI_CARACTERISTICA ACA
                    WHERE ACA.DESCRIPCION_CARACTERISTICA = :paramCaract)
                    AND INFODETALLE.ESTADO in ( :paramEstadoSol )
                    AND INFODETALLE.TIPO_SOLICITUD_ID = (SELECT ADMITIPOSOL.ID_TIPO_SOLICITUD FROM ADMI_TIPO_SOLICITUD ADMITIPOSOL
                    WHERE ADMITIPOSOL.DESCRIPCION_SOLICITUD = :paramSolicitud)
                    AND INFODETALLESOLCARACT.VALOR = (SELECT TO_CHAR(INFOPUNTO.ID_PUNTO) FROM INFO_PUNTO INFOPUNTO
                    WHERE INFOPUNTO.LOGIN = :paramLogin) ";

        $objQuery->setParameter('paramLogin',$arrayParametros["strLogin"]);
        $objQuery->setParameter('paramEstadoSol',$strEstadoSol);
        $objQuery->setParameter('paramCaract',$strCaract);
        $objQuery->setParameter('paramSolicitud',$strSolicitud);

        $objRsmb->addScalarResult('SOLICITUD', 'solicitudes', 'string');        
        $objQuery->setSQL($strSql);

        $strSolicitudes = $objQuery->getSingleScalarResult();

        return $strSolicitudes;
    }



    /* ******************************************** PASO 1 .-    PREFACTIBILIDAD ******************************************* */
    /**
     * Documentación para el método 'generarJsonFactibilidad'.
     *
     * Obtiene registros de factibilidad
     * Se agrega validación de ultima milla a registros
     * @param entityManager  $em
     * @param integer        $start
     * @param integer        $limit
     * @param date           $search_fechaDesdePlanif
     * @param date           $search_fechaHastaPlanif
     * @param String         $search_login2
     * @param String         $search_descripcionPunto
     * @param String         $search_vendedor
     * @param String         $search_ciudad
     * @param integer        $search_numOrdenServicio
     * @param String         $codEmpresa 
     * @return Object        $datos listado de registros de factibilidad
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 25-11-2014
     * 
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.1 17-04-2016 Se aumentaron mas campos en la respuesta para informacion de la empresa TN
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 07-07-2016 Se agrega validacion para mostrar boton en caso de ser ultima milla radio
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.3 13-07-2016 Se agrega validacion para mostrar boton de editar en caso de ser ultima milla UTP
     * 
     * @author Ricardo Coello Quezada <rcoello@telconet.ec>
     * @version 1.4 28-11-2017 Se agrega validacion para mostrar boton de editar en caso de ser ultima milla FTTx para los productos especiales de TN.
     *                         Se agrega validacion para que muestre los datos de factibilidad para ultima milla FTTx.
     * 
     * @author Modificado: Walther Joao Gaibor C. <wgaibor@telconet.ec>
     * @version 1.5 20-02-2018 Si tipo orden es C se setea el valor cambio tipo medio
     * @since 1.0
     * 
     * @author Modificado: Jesús Bozada <jbozada@telconet.ec>
     * @version 1.6 28-11-2018 Se agregan validaciones para gestionar productos de la empresa TNP
     * @since 1.5
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.7 06-11-2019 Se obtiene el tipo de red: MPLS o GPON para ser enviado al .js
     * @since 1.6
     *
     * @author Modificado: Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.8 17-07-2021 Se valida el objeto producto para obtener el tipo de red
     * @since 1.7
     * 
     * @author Modificado: Emmanuel Martillo <emartillo@telconet.ec>
     * @version 1.9 21-03-2023 Se agregan validaciones para gestionar productos de la empresa EN
     * @since 1.8
     */
    public function generarJsonFactibilidad($em,
                                            $start, 
                                            $limit, 
                                            $search_fechaDesdePlanif, 
                                            $search_fechaHastaPlanif, 
                                            $search_login2, 
                                            $search_descripcionPunto, 
                                            $search_vendedor, 
                                            $search_ciudad, 
                                            $search_numOrdenServicio, 
                                            $codEmpresa = "")
    {
        $arr_encontrados = array();

        $empresaSession = $em->getRepository('schemaBundle:InfoEmpresaGrupo')->find($codEmpresa);
        $prefijoEmpresa = $empresaSession->getPrefijo();
        
        $registrosTotal = $this->getRegistrosFactibilidad('', 
                                                          '', 
                                                          $search_fechaDesdePlanif, 
                                                          $search_fechaHastaPlanif, 
                                                          $search_login2, 
                                                          $search_descripcionPunto, 
                                                          $search_vendedor, 
                                                          $search_ciudad, 
                                                          $search_numOrdenServicio, 
                                                          $codEmpresa, 
                                                          $prefijoEmpresa);
        $registros      = $this->getRegistrosFactibilidad($start, 
                                                          $limit, 
                                                          $search_fechaDesdePlanif, 
                                                          $search_fechaHastaPlanif, 
                                                          $search_login2, 
                                                          $search_descripcionPunto, 
                                                          $search_vendedor, 
                                                          $search_ciudad, 
                                                          $search_numOrdenServicio, 
                                                          $codEmpresa, 
                                                          $prefijoEmpresa);

        if($registros)
        {
            $num = count($registrosTotal);

            foreach($registros as $data)
            {
                $nombreVendedor = (isset($data["nombreVendedor"]) ? ($data["nombreVendedor"] ?
                                  ucwords(strtolower($data["nombreVendedor"])) : "") : "");

                $Servicio           = $this->_em->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]);
                $nombreProducto     = ($Servicio->getProductoId() ? $Servicio->getProductoId()->getDescripcionProducto() : "");
                $nombrePlan         = ($Servicio->getPlanId() ? $Servicio->getPlanId()->getNombrePlan() : "");
                $nombreProductoPlan = $nombreProducto . $nombrePlan;

                $ultimaMilla        = $em->getRepository('schemaBundle:AdmiTipoMedio')->findOneById($data["ultimaMillaId"]);
                $nombreSector       = ($data["nombreSector"] ? $data["nombreSector"] : "");
                $parroquia          = ($data["nombreParroquia"] ? $data["nombreParroquia"] : "");
                $ciudad             = ($data["nombreCanton"] ? $data["nombreCanton"] : "");
                $jurisdiccion       = ($data["nombreJurisdiccion"] ? $data["nombreJurisdiccion"] : "Sin Jurisdiccion");
                $cliente            = ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
                                      ($data["longitud"] && $data["latitud"]) ? $coordenadas = $data["longitud"] . ", " .
                                      $data["latitud"] : $coordenadas = "Sin Coordenadas";
                $fePlanificacion    = strval(date_format($data["feCreacion"], "d/m/Y G:i"));
                $latitud            = ($data["latitud"] ? $data["latitud"] : "");
                $longitud           = ($data["longitud"] ? $data["longitud"] : "");
                if($data["tipoOrden"])
                {
                    switch($data["tipoOrden"])
                    {
                        case "N":
                            $tipo_orden = "Nuevo";
                            break;
                        case "T":
                            $tipo_orden = "Traslado";
                            break;
                        case "R":
                            $tipo_orden = "Reubicacion";
                            break;
                        case "C":
							$tipo_orden = "Cambio Tipo Medio";
							break;
                        default:
                            $tipo_orden = "Nuevo";
                            break;
                    }
                }
                else
                {
                    $tipo_orden = "Nuevo";
                }
                // ************************* RUTA DE LA IMAGEN DEL CROQUIS *************** 
                $pathCroquis         = "public/uploads/croquis/";
                $pathImagenDefault   = "public/images/images_crud/";
                $rutaVerificaCroquis = ($data["rutaCroquis"] != "" ? "./$pathCroquis" . $data["rutaCroquis"] : "" );

                if(file_exists($rutaVerificaCroquis))
                {
                    $nombreArchivo = $data["rutaCroquis"];
                    $rutaArchivo   = "/" . $pathCroquis . $nombreArchivo;
                }
                else
                {
                    $nombreArchivo = "no_image_200_200.png";
                    $rutaArchivo   = "/" . $pathImagenDefault . $nombreArchivo;
                }
                $rutaCroquis       = ($rutaArchivo != "" ? 
                                     "<img src='$rutaArchivo' title='$nombreArchivo' alt='$nombreArchivo' width='480' height='450' />" : "" );
                $esRecontratacion  = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                               ->esRecontratacion($data['id_persona'], $codEmpresa);

                $strUltimaMilla    = ($ultimaMilla) ? $ultimaMilla->getNombreTipoMedio() : "";

                if( (($prefijoEmpresa == "MD" || $prefijoEmpresa == "EN"
                    ) && $strUltimaMilla == "Fibra Optica") || 
                    ($prefijoEmpresa == "TNP" && $strUltimaMilla == "Fibra Optica") ||
                    ($prefijoEmpresa == "TN" && ($strUltimaMilla == "FTTx" || $strUltimaMilla == "Fibra Optica" || $strUltimaMilla == "Radio" || $strUltimaMilla == "UTP"))
                  )
                        
                {
                    $buttonFactibilidad = "button-grid-edit";
                }
                else
                {
                    $buttonFactibilidad = "icon-invisible";
                }

                $entityInfoElementoPadre            = "";
                $entityInfoInterfaceElementoPadre   = "";
                $entityInfoElementoContenedor       = "";
                $entityInfoElementoDistribucion     = "";
                $entityInfoInterfaceElementoDist    = "";

                if($data["idOlt"] && ($strUltimaMilla == "Fibra Optica" || $strUltimaMilla == "FTTx"))
                {
                    $entityInfoElementoPadre          = $em->getRepository('schemaBundle:InfoElemento')->find($data["idOlt"]);
                    $entityInfoInterfaceElementoPadre = $em->getRepository('schemaBundle:InfoInterfaceElemento')->find($data["idLinea"]);
                    if($data["idCaja"])
                    {
                        $entityInfoElementoContenedor     = $em->getRepository('schemaBundle:InfoElemento')->find($data["idCaja"]);
                    }
                    if($data["idSplitter"])
                    {
                        $entityInfoElementoDistribucion   = $em->getRepository('schemaBundle:InfoElemento')->find($data["idSplitter"]);
                    }
                }
                // Se busca en la info servicio tecnico para obtener la interface del elemento conector.
                if($data["idServicio"])
                {
                    $entityInfoServicioTecnico = $em->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($data["idServicio"]);
                }
                // Entra si existe datos en la info servicio tecnico.
                if($entityInfoServicioTecnico)
                {
                    // Entra si extiste el id de la interface del elemento conector.
                    if($entityInfoServicioTecnico->getInterfaceElementoConectorId())
                    {
                        // Busca el nombre de la interface del elemento conector.
                        $strNombreInfoInterfaceElementoDist = $em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                 ->find($entityInfoServicioTecnico->getInterfaceElementoConectorId())
                                                                 ->getNombreInterfaceElemento();
                    }
                }
                // Entra si tiene el id de la solicitud, para buscar las caracterisiticas de la solicitud
                if($data["idDetalleSolicitud"])
                {
                    $strObraCivil = '';
                    // Busca la caracteristica de obra civil.
                    $entityObraCivil                    = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                             ->getSolicitudCaractPorTipoCaracteristica($data["idDetalleSolicitud"], 
                                                                                                       'OBRA CIVIL');
                    // Si existe la entidad obtiene el valor.
                    if($entityObraCivil)
                    {
                        $strObraCivil = $entityObraCivil[0]->getValor();
                    }
                    $strPermisosRegeneracion = '';
                    // Busca la caracteristica de permiso de regeneracion.
                    $entityPermisosRegeneracion         = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                             ->getSolicitudCaractPorTipoCaracteristica($data["idDetalleSolicitud"], 
                                                                                                       'PERMISOS REGENERACION');
                    // Si existe la entidad obtiene el valor.
                    if($entityPermisosRegeneracion)
                    {
                        $strPermisosRegeneracion = $entityPermisosRegeneracion[0]->getValor();
                    }
                    $strObservacionPermiRegeneracion = '';
                    // Busca la caracteristica de observacion permiso de regeneracion.
                    $entityObservacionPermiRegeneracion = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                             ->getSolicitudCaractPorTipoCaracteristica($data["idDetalleSolicitud"], 
                                                                                                       'OBSERVACION PERMISO REGENERACION');
                    // Si existe la entidad obtiene el valor.
                    if($entityObservacionPermiRegeneracion)
                    {
                        $strObservacionPermiRegeneracion = $entityObservacionPermiRegeneracion[0]->getValor();
                    }
                    $strMetraje = '';
                    // Busca la caracteristica de metraje
                    $entityMetraje = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                             ->getSolicitudCaractPorTipoCaracteristica($data["idDetalleSolicitud"], 
                                                                                                       'METRAJE FACTIBILIDAD');
                    // Si existe la entidad obtiene el valor.
                    if($entityMetraje)
                    {
                        $strMetraje = $entityMetraje[0]->getValor();
                    }
                }

                $strTipoRed = "MPLS";

                if(is_object($Servicio) && is_object($Servicio->getProductoId()))
                {
                    //Obtener el tipo de RED
                    $objCaracTipoRed = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                          ->findOneBy(array("descripcionCaracteristica" => "TIPO_RED",
                                                            "estado"                    => "Activo"));

                    if(is_object($objCaracTipoRed))
                    {
                        $objProductoCaract = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                ->findOneBy(array("productoId"       => $Servicio->getProductoId()->getId(),
                                                                  "caracteristicaId" => $objCaracTipoRed->getId(),
                                                                  "estado"           => "Activo"));

                        if(is_object($objProductoCaract))
                        {
                            $objInfoServicioProdCaract = $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                            ->findOneBy(array("servicioId"                => $Servicio,
                                                                              "productoCaracterisiticaId" => $objProductoCaract,
                                                                              "estado"                    => "Activo"));

                            if(is_object($objInfoServicioProdCaract))
                            {
                                $strTipoRed = $objInfoServicioProdCaract->getValor();
                            }
                        }
                    }
                }

                //verificar si el tipo de red es GPON
                $booleanTipoRedGpon = false;
                $arrayParVerTipoRed = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                'COMERCIAL',
                                                                                                '',
                                                                                                'VERIFICAR TIPO RED',
                                                                                                'VERIFICAR_GPON',
                                                                                                $strTipoRed,
                                                                                                '',
                                                                                                '',
                                                                                                '');
                if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                {
                    $booleanTipoRedGpon = true;
                }

                if($coordenadas != "Sin Coordenadas")
                {
                    $arr_encontrados[] = array(
                        'id_factibilidad'                    => $data["idDetalleSolicitud"],
                        'estadoFactibilidad'                 => $data["estadoFactibilidad"],
                        'id_servicio'                        => $data["idServicio"],
                        'id_punto'                           => $data["idPunto"],
                        'idOlt'                              => $data["idOlt"],
                        'olt'                                => ($entityInfoElementoPadre) ? 
                                                                $entityInfoElementoPadre->getNombreElemento() : "Sin Dato",
                        'strNombreTipoElementoPadre'         => ($entityInfoElementoPadre) ? 
                                                                $entityInfoElementoPadre->getModeloElementoId()
                                                                                        ->getTipoElementoId()
                                                                                        ->getNombreTipoElemento() : "Sin Dato",
                        'strNombreMarcaElementoPadre'        => ($entityInfoElementoPadre) ? 
                                                                $entityInfoElementoPadre->getModeloElementoId()
                                                                                        ->getMarcaElementoId()
                                                                                        ->getNombreMarcaElemento() : "Sin Dato",
                        'strNombreModeloElementoPadre'       => ($entityInfoElementoPadre) ? 
                                                                $entityInfoElementoPadre->getModeloElementoId()
                                                                ->getNombreModeloElemento() : "Sin Dato",
                        'idLinea'                            => $data["idLinea"],
                        'linea'                              => ($entityInfoInterfaceElementoPadre) ? 
                                                                $entityInfoInterfaceElementoPadre->getNombreInterfaceElemento() : "Sin Dato",
                        'idCaja'                             => $data["idCaja"],
                        'caja'                               => ($entityInfoElementoContenedor) ? 
                                                                $entityInfoElementoContenedor->getNombreElemento() : "Sin Dato",
                        'idSplitter'                         => $data["idSplitter"],
                        'splitter'                           => ($entityInfoElementoDistribucion) ? 
                                                                $entityInfoElementoDistribucion->getNombreElemento() : "Sin Dato",
                        'strNombreTipoElementoDist'          => ($entityInfoElementoDistribucion) ? 
                                                                $entityInfoElementoDistribucion->getModeloElementoId()
                                                                                               ->getTipoElementoId()
                                                                                               ->getNombreTipoElemento() : "Sin Dato",
                        'strNombreMarcaElementoDist'         => ($entityInfoElementoDistribucion) ? 
                                                                $entityInfoElementoDistribucion->getModeloElementoId()
                                                                                               ->getMarcaElementoId()
                                                                                               ->getNombreMarcaElemento() : "Sin Dato",
                        'strNombreModeloElementoDist'        => ($entityInfoElementoDistribucion) ? 
                                                                $entityInfoElementoDistribucion->getModeloElementoId()
                                                                                               ->getNombreModeloElemento() : "Sin Dato",
                        'strNombreInfoInterfaceElementoDist' => (!empty($strNombreInfoInterfaceElementoDist)) ? 
                                                                $strNombreInfoInterfaceElementoDist : "Sin Dato",
                        'idIntSplitter'                      => $data["idIntSplitter"],
                        'intSplitter'                        => ($entityInfoInterfaceElementoDist) ? 
                                                                $entityInfoInterfaceElementoDist->getNombreInterfaceElemento() : "Sin Dato",
                        'observacion'                        => $data["observacion"],
                        'intIdPersona'                       => $data["id_persona"],
                        'intIdPersonaEmpresaRol'             => $data["intIdPersonaEmpresaRol"],
                        'strEsEdificio'                      => $data["strEsEdificio"],
                        'strDependeDeEdificio'               => $data["strDependeDeEdificio"],
                        'strNombreEdificio'                  => $data["strNombreEdificio"],
                        'intIdElemento'                      => $data["intIdElemento"],
                        'intIdUltimaMilla'                   => $data["intIdUltimaMilla"],
                        'strCodigoTipoMedio'                 => $data["strCodigoTipoMedio"],
                        'strNombreTipoMedio'                 => $data["strNombreTipoMedio"],
                        'strTipoEnlace'                      => $data["strTipoEnlace"],
                        'strTipoRed'                         => $strTipoRed,
                        'booleanTipoRedGpon'                 => $booleanTipoRedGpon,
                        'strPrefijoEmpresa'                  => $prefijoEmpresa,
                        'strObraCivil'                       => $strObraCivil,
                        'strPermisosRegeneracion'            => $strPermisosRegeneracion,
                        'strObservacionPermiRegeneracion'    => $strObservacionPermiRegeneracion,
                        'strMetraje'                         => $strMetraje,
                        'cliente'                            => ucwords(strtolower(trim($cliente))),
                        'vendedor'                           => trim($nombreVendedor),
                        'login2'                             => trim($data["login"]),
                        'tipo_orden'                         => $tipo_orden,
                        'esRecontratacion'                   => $esRecontratacion,
                        'producto'                           => trim($nombreProductoPlan),
                        'coordenadas'                        => trim($coordenadas),
                        'direccion'                          => trim($data["direccion"]),
                        'ciudad'                             => ucwords(strtolower(trim($ciudad))),
                        'jurisdiccion'                       => ucwords(strtolower(trim($jurisdiccion))),
                        'nombreSector'                       => ucwords(strtolower(trim($nombreSector))),
                        'fePlanificacion'                    => trim($fePlanificacion),
                        'rutaCroquis'                        => trim($rutaCroquis),
                        'latitud'                            => trim($latitud),
                        'longitud'                           => trim($longitud),
                        'ultimaMilla'                        => ($ultimaMilla) ? $ultimaMilla->getNombreTipoMedio() : "",
                        'action1'                            => 'button-grid-Gmaps',
                        'action2'                            => 'button-grid-Foto',
                        'action3'                            => 'button-grid-show',
                        'action4'                            => ($data["estadoFactibilidad"] == "Factible") ? $buttonFactibilidad : "icon-invisible",
                        'action5'                            => ($data["estadoFactibilidad"] == "FactibilidadEnProceso") ? 
                                                                "icon-invisible" : "icon-invisible");
                }
                else
                {
                    $arr_encontrados[] = array(
                        'id_factibilidad'                    => $data["idDetalleSolicitud"],
                        'estadoFactibilidad'                 => $data["estadoFactibilidad"],
                        'id_servicio'                        => $data["idServicio"],
                        'id_punto'                           => $data["idPunto"],
                        'idOlt'                              => $data["idOlt"],
                        'olt'                                => ($entityInfoElementoPadre) ? 
                                                                $entityInfoElementoPadre->getNombreElemento() : "Sin Dato",
                        'strNombreTipoElementoPadre'         => ($entityInfoElementoPadre) ? 
                                                                $entityInfoElementoPadre->getModeloElementoId()
                                                                                        ->getTipoElementoId()
                                                                                        ->getNombreTipoElemento() : "Sin Dato",
                        'strNombreMarcaElementoPadre'        => ($entityInfoElementoPadre) ? 
                                                                $entityInfoElementoPadre->getModeloElementoId()
                                                                                        ->getMarcaElementoId()
                                                                                        ->getNombreMarcaElemento() : "Sin Dato",
                        'strNombreModeloElementoPadre'       => ($entityInfoElementoPadre) ? 
                                                                $entityInfoElementoPadre->getModeloElementoId()
                                                                                        ->getNombreModeloElemento() : "Sin Dato",
                        'idLinea'                            => $data["idLinea"],
                        'linea'                              => ($entityInfoInterfaceElementoPadre) ? 
                                                                $entityInfoInterfaceElementoPadre->getNombreInterfaceElemento() : "Sin Dato",
                        'idCaja'                             => $data["idCaja"],
                        'caja'                               => ($entityInfoElementoContenedor) ? 
                                                                $entityInfoElementoContenedor->getNombreElemento() : "Sin Dato",
                        'idSplitter'                         => $data["idSplitter"],
                        'splitter'                           => ($entityInfoElementoDistribucion) ? 
                                                                $entityInfoElementoDistribucion->getNombreElemento() : "Sin Dato",
                        'strNombreTipoElementoDist'          => ($entityInfoElementoDistribucion) ? 
                                                                $entityInfoElementoDistribucion->getModeloElementoId()
                                                                                               ->getTipoElementoId()
                                                                                               ->getNombreTipoElemento() : "Sin Dato",
                        'strNombreMarcaElementoDist'         => ($entityInfoElementoDistribucion) ? 
                                                                $entityInfoElementoDistribucion->getModeloElementoId()
                                                                                               ->getMarcaElementoId()
                                                                                               ->getNombreMarcaElemento() : "Sin Dato",
                        'strNombreModeloElementoDist'        => ($entityInfoElementoDistribucion) ? 
                                                                $entityInfoElementoDistribucion->getModeloElementoId()
                                                                                               ->getNombreModeloElemento() : "Sin Dato",
                        'strNombreInfoInterfaceElementoDist' => (!empty($strNombreInfoInterfaceElementoDist)) ? 
                                                                $strNombreInfoInterfaceElementoDist : "Sin Dato",
                        'idIntSplitter'                      => $data["idIntSplitter"],
                        'intSplitter'                        => ($entityInfoInterfaceElementoDist) ? 
                                                                $entityInfoInterfaceElementoDist->getNombreInterfaceElemento() : "Sin Dato",
                        'intIdPersona'                       => $data["id_persona"],
                        'intIdPersonaEmpresaRol'             => $data["intIdPersonaEmpresaRol"],
                        'strEsEdificio'                      => $data["strEsEdificio"],
                        'strDependeDeEdificio'               => $data["strDependeDeEdificio"],
                        'strNombreEdificio'                  => $data["strNombreEdificio"],
                        'intIdElemento'                      => $data["intIdElemento"],
                        'intIdUltimaMilla'                   => $data["intIdUltimaMilla"],
                        'strCodigoTipoMedio'                 => $data["strCodigoTipoMedio"],
                        'strNombreTipoMedio'                 => $data["strNombreTipoMedio"],
                        'strTipoEnlace'                      => $data["strTipoEnlace"],
                        'strTipoRed'                         => $strTipoRed,
                        'booleanTipoRedGpon'                 => $booleanTipoRedGpon,
                        'strPrefijoEmpresa'                  => $prefijoEmpresa,
                        'strObraCivil'                       => $strObraCivil,
                        'strPermisosRegeneracion'            => $strPermisosRegeneracion,
                        'strObservacionPermiRegeneracion'    => $strObservacionPermiRegeneracion,
                        'strMetraje'                         => $strMetraje,
                        'cliente'                            => ucwords(strtolower(trim($cliente))),
                        'vendedor'                           => trim($nombreVendedor),
                        'login2'                             => trim($data["login"]),
                        'tipo_orden'                         => $tipo_orden,
                        'esRecontratacion'                   => $esRecontratacion,
                        'producto'                           => trim($nombreProductoPlan),
                        'coordenadas'                        => trim($coordenadas),
                        'direccion'                          => trim($data["direccion"]),
                        'ciudad'                             => ucwords(strtolower(trim($ciudad))),
                        'jurisdiccion'                       => ucwords(strtolower(trim($jurisdiccion))),
                        'nombreSector'                       => ucwords(strtolower(trim($nombreSector))),
                        'fePlanificacion'                    => trim($fePlanificacion),
                        'rutaCroquis'                        => trim($rutaCroquis),
                        'latitud'                            => trim($latitud),
                        'longitud'                           => trim($longitud),
                        'ultimaMilla'                        => ($ultimaMilla) ? $ultimaMilla->getNombreTipoMedio() : "",
                        'action1'                            => 'button-grid-Gmaps',
                        'action2'                            => 'button-grid-Foto',
                        'action3'                            => 'button-grid-show',
                        'action4'                            => ($data["estadoFactibilidad"] == "Factible") ? $buttonFactibilidad : "icon-invisible",
                        'action5'                            => ($data["estadoFactibilidad"] == "FactibilidadEnProceso") ? 
                                                                "icon-invisible" : "icon-invisible");
                }
            }

            if($num == 0)
            {
                $resultado = array('total' => 1,
                                   'encontrados' => array('id_factibilidad'     => 0, 
                                                          'nombre_factibilidad' => 'Ninguno', 
                                                          'factibilidad_id'     => 0,
                                                          'factibilidad_nombre' => 'Ninguno', 
                                                          'estado'              => 'Ninguno'));
                $resultado = json_encode($resultado);
                return $resultado;
            }
            else
            {
                $dataF = json_encode($arr_encontrados);
                $resultado = '{"total":"' . $num . '","encontrados":' . $dataF . '}';
                return $resultado;
            }
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';
            return $resultado;
        }
    } //generarJsonFactibilidad

    /**
     * 
     * @param int    $start                     Recibe un numero para el inicio del resultado del query
     * @param int    $limit                     Recibe un numero para el limite del resultado del query
     * @param String $search_fechaDesdePlanif   Recibe el inicio de la fecha de planificacion
     * @param String $search_fechaHastaPlanif   Recibe el fin de la fecha de planificacion
     * @param String $search_login2             Recibe el login
     * @param String $search_descripcionPunto   Recibe la descripcion del punto
     * @param String $search_vendedor           Recibe el nombre del vendedor
     * @param String $search_ciudad             Recibe el nombre de la ciudad
     * @param int    $search_numOrdenServicio   Recibe el numero de la orden de servicio
     * @param String $codEmpresa                Recibe el codigo de la empresa
     * @param String $prefijoEmpresa            Recibe el prefijo de la empresa
     * @return array $datos                     Retorna los datos como resultado del query
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 03-08-2020 - Se valida el inicio y el limite de la consulta cuando se realiza filtros en el query.
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.2 11-01-2018 Se corrige filtro de búsqueda por login.
     * 
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.1 17-04-2016 Se aumentaron mas campos en el select para informacion de la empresa TN
     * @since 1.0
     */
    public function getRegistrosFactibilidad($start, 
                                             $limit, 
                                             $search_fechaDesdePlanif, 
                                             $search_fechaHastaPlanif, 
                                             $search_login2, 
                                             $search_descripcionPunto, 
                                             $search_vendedor, 
                                             $search_ciudad, 
                                             $search_numOrdenServicio,
                                             $codEmpresa = "",
                                             $prefijoEmpresa = "")
    {
        $arrayEstados = array("Factible","PrePlanificada","Detenido","Planificada","Replanificada","AsignadoTarea");
        $boolBusqueda = false;
        $where = "";

        if($search_fechaDesdePlanif != "")
        {
            $dateF          = explode("-", $search_fechaDesdePlanif);
            $fechaSql       = date("Y/m/d", strtotime($dateF[2] . "-" . $dateF[1] . "-" . $dateF[0]));
            $boolBusqueda   = true;
            $where         .= "AND ds.feCreacion >= '" . trim($fechaSql) . "' ";
        }
        if($search_fechaHastaPlanif != "")
        {
            $dateF       = explode("-", $search_fechaHastaPlanif);
            $fechaSqlAdd = strtotime(date("Y-m-d", strtotime($dateF[2] . "-" . $dateF[1] . "-" . $dateF[0])) . " +1 day");
            $fechaSql    = date("Y/m/d", $fechaSqlAdd);

            $boolBusqueda = true;
            $where       .= "AND ds.feCreacion <= '" . trim($fechaSql) . "' ";
        }

        if($search_login2 != "")
        {
            $boolBusqueda = true;
            $where       .= "AND UPPER(p.login) like UPPER('$search_login2%') ";
        }

        if($search_descripcionPunto != "")
        {
            $boolBusqueda = true;
            $where       .= "AND UPPER(p.descripcionPunto) like UPPER('%$search_descripcionPunto%') ";
        }

        if($search_vendedor != "")
        {
            $boolBusqueda = true;
            $where       .= "AND CONCAT(LOWER(peVend.nombres),CONCAT(' ',LOWER(peVend.apellidos))) like '%" . 
                            strtolower(trim($search_vendedor)) . "%' ";
        }

        if($search_numOrdenServicio != "")
        {
            $boolBusqueda = true;
            $where       .= "AND ot.numeroOrdenTrabajo like '$search_numOrdenServicio%' ";
        }

        if($search_ciudad != "")
        {
            $boolBusqueda = true;
            $where       .= "AND UPPER(ca.nombreCanton) like UPPER('%$search_ciudad%') ";
        }

        $sql = "SELECT 
					ds.id as idDetalleSolicitud, 
                    s.id as idServicio, 
					p.id as idPunto, 
                    se.nombreSector, 
                    pa.nombreParroquia, 
                    ca.nombreCanton, 
                    pe.id as id_persona,
					pe.razonSocial, 
                    pe.nombres, 
                    pe.apellidos, 
                    p.usrVendedor, 
                    p.login, 
					p.longitud, 
                    p.latitud, 
                    p.direccion, 
                    p.path as rutaCroquis, 
                    ds.feCreacion,
                    ds.estado as estadoFactibilidad,
					st.ultimaMillaId, 
                    p.observacion, 
                    aj.nombreJurisdiccion, 
                    st.elementoId as idOlt, 
                    st.interfaceElementoId as idLinea,
					st.elementoContenedorId as idCaja, 
                    st.elementoConectorId as idSplitter, 
                    st.interfaceElementoConectorId as idIntSplitter,
					s.tipoOrden,
					CONCAT(peVend.nombres,CONCAT(' ',peVend.apellidos)) as nombreVendedor,
                    per.id intIdPersonaEmpresaRol,
                    ipda.esEdificio strEsEdificio ,
                    ipda.dependeDeEdificio strDependeDeEdificio,
                    ie.nombreElemento strNombreEdificio,
                    isrt.elementoId intIdElemento,
                    isrt.ultimaMillaId intIdUltimaMilla,
                    atm.codigoTipoMedio strCodigoTipoMedio,
                    atm.nombreTipoMedio strNombreTipoMedio,
                    st.tipoEnlace strTipoEnlace
        
                FROM 
                    schemaBundle:InfoServicio s
                     LEFT JOIN schemaBundle:InfoServicioTecnico isrt WITH isrt.servicioId = s.id 
                     LEFT JOIN schemaBundle:AdmiTipoMedio atm WITH atm.id = isrt.ultimaMillaId, 
                    schemaBundle:AdmiTipoSolicitud ts,
					schemaBundle:InfoDetalleSolicitud ds, 
                    schemaBundle:AdmiJurisdiccion aj, 
					schemaBundle:InfoPersona pe, 
                    schemaBundle:InfoPersonaEmpresaRol per,
					schemaBundle:AdmiSector se, 
                    schemaBundle:AdmiParroquia pa, 
                    schemaBundle:InfoServicioTecnico st,
					schemaBundle:AdmiCanton ca, 
                    schemaBundle:InfoEmpresaRol emr,
					schemaBundle:InfoPunto p 
                     LEFT JOIN schemaBundle:InfoPersona peVend WITH peVend.login = p.usrVendedor 
                     LEFT JOIN schemaBundle:InfoPuntoDatoAdicional ipda WITH ipda.puntoId = p.id 
                     LEFT JOIN schemaBundle:InfoElemento ie   WITH ie.id = ipda.elementoId 
                WHERE 
					s.id                                = ds.servicioId
					AND st.servicioId                   = s.id
					AND s.puntoId                       = p.id
					AND ts.id                           = ds.tipoSolicitudId 
					AND p.personaEmpresaRolId           = per.id 
					AND per.personaId                   = pe.id 
					AND p.sectorId                      = se.id 
					AND se.parroquiaId                  = pa.id 
					AND pa.cantonId                     = ca.id 
					AND per.empresaRolId                = emr.id
					AND aj.id                           = p.puntoCoberturaId
					AND ( ds.estado            in (:estados) or ds.estado in (:estados) )
					AND ( s.estado             in (:estados) or s.estado  in (:estados) )
					AND emr.empresaCod                  = $codEmpresa
					AND ts.descripcionSolicitud  = 'SOLICITUD FACTIBILIDAD'
					$where 		
				
				ORDER BY ds.feCreacion DESC ";

        $query = $this->_em->createQuery($sql);
        $query->setParameter('estados', $arrayEstados);
        if($start != '' && $limit != '')
        {
            $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        }
        else if($start != '' && $limit == '')
        {
            $datos = $query->setFirstResult($start)->getResult();
        }
        else if($start == '' && $limit != '')
        {
            $datos = $query->setMaxResults($limit)->getResult();
        }
        else
        {
            $datos = $query->getResult();
        }

        return $datos;
    } //getRegistrosFactibilidad

    /*     * ******************************************* PASO 1 .-    PREFACTIBILIDAD ******************************************* */
    /**
     * Documentación para el método 'generarJsonPreFactibilidad'.
     *
     * Obtiene json con registros de prefactibilidad
     *
     * @param EntityManager     $em
     * @param integer           $start
     * @param integer           $limit
     * @param date              $search_fechaDesdePlanif
     * @param date              $search_fechaHastaPlanif
     * @param String            $search_login2
     * @param String            $search_descripcionPunto
     * @param String            $search_vendedor
     * @param String            $search_ciudad
     * @param integer           $search_numOrdenServicio
     * @param String            $codEmpresa
     * @param String            $ultimaMilla
     * @param String            $validaRechazado
     * @return Object           $datos listado de registros de prefactibilidad
     *
     * @return Object           $datos json con listado de registros de prefactibilidad
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 11-11-2014
     * 
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.1 17-04-2016 Se aumentan campos en la respuesta obtenidos en la consulta del query.
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 26-07-2016 Se aumenta campos con el valor del tipo de factibilidad de ultima milla
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.3 24-05-2017 Se aumenta informacion relacionado a si un Servicio tiene esquema PseudoPe
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.4 20-09-2017 Se agrega nuevo campo de respues accion para boton de factibilidad anticipada
     * @since 1.4
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.5 18-09-2017 Se devuelve informacion adicional relacionada a flujos DC a la Consulta
     *      
     * @author Ricardo Coello Quezada <rcoello@telconet.ec>
     * @version 1.6 24-01-2018 - Se realiza la modificacion para validar que exista el parametro ServicioTecnico para las capacidades del producto
     * 
     * @author Modificado: Walther Joao Gaibor C. <wgaibor@telconet.ec>
     * @version 1.7 21-01-2018 Si tipo orden es C se setea el valor cambio tipo medio
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.8 28-02-2018 Se cambia forma de obtener el tota de recursos establecidos en el pool de recursos y se envia bandera indicando
     *                         si un servicio consta como solucion o no
     *      
     * @since 1.0
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.8 28-11-2018 Se agregan validaciones para gestionar productos de la empresa TNP
     * @since 1.0
     * 
     * @author David León <mdleon@telconet.ec>
     * @version 2.0 04-09-2019 Se agregan los productos sdwan a la consulta de la PreFactibilidad.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 2.1 01-07-2020 - Si el producto del servicio es Housing, obtenemos la descripción del recurso.
     *                         - Obtenemos el número de solucion de acuerdo a las nuevas estructuras.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.2 09-03-2021 - Se retorna el tipo de red por servicio
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.3 20-05-2021 - Se verifica si existen productos adicionales Camara con servicio principal DATOS SAFECITY,
     *                           las adicionales no deben aparecer en el grid solo el principal.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.4 17-07-2021 Se valida el objeto producto para obtener el tipo de red.
     *
     * @author Steven Ruano <sruano@telconet.ec>
     * @version 2.5 22-02-2023 Se agrega parametro para la visualizacion de correcto de los servicios del alquiler.
     *
     *
     * @author Jonathan Mazón Sánchez <jmazon@telconet.ec>
     * @version 2.6 13-02-2023 - Se agrega bandera de Prefijo Empresa EN para Ecuanet y así presentar el botón de time.
     *
     */
    public function generarJsonPreFactibilidad($arrayParametros)
    {

        $em                                 = $arrayParametros["em"];
        $start                              = $arrayParametros["start"];
        $limit                              = $arrayParametros["limit"];
        $codEmpresa                         = $arrayParametros["codEmpresa"];
        $ultimaMilla                        = $arrayParametros["ultimaMilla"];

        $arr_encontrados                    = array();
        $empresaSession                     = $em->getRepository('schemaBundle:InfoEmpresaGrupo')->find($codEmpresa);
        $prefijoEmpresa                     = $empresaSession->getPrefijo();
        $arrayParametros["prefijoEmpresa"]  = $prefijoEmpresa;
        $arrayParametros["start"]           = "";
        $arrayParametros["limit"]           = "";
        $serviceTecnico                     = $arrayParametros["serviceTecnico"];
        $strTipoRed                         = "MPLS";
        $registrosTotal                     = $this->getRegistrosPreFactibilidad($arrayParametros);

        $strLimite = $arrayParametros["limite"] === 'true';
    
        if ($strLimite)
        {
            $arrayParametros["start"]           = $start;
            $arrayParametros["limit"]           = $limit;
        }

        $registros                          = $this->getRegistrosPreFactibilidad($arrayParametros);
        

        if($registros)
        {
            $num = count($registrosTotal);
            $intContServicioOculto = 0;
            foreach($registros as $data)
            {
                $nombreVendedor = (isset($data["nombreVendedor"]) ? ($data["nombreVendedor"] ?
                                ucwords(strtolower($data["nombreVendedor"])) : "") : "");

                $Servicio           = $this->_em->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]);
                $nombreProducto     = ($Servicio->getProductoId() ? $Servicio->getProductoId()->getDescripcionProducto() : "");
                $nombrePlan         = ($Servicio->getPlanId() ? $Servicio->getPlanId()->getNombrePlan() : "");
                $nombreProductoPlan = $nombreProducto . $nombrePlan;

                $ultimaMilla        = $em->getRepository('schemaBundle:AdmiTipoMedio')->findOneById($data["ultimaMillaId"]);
                $nombreSector       = ($data["nombreSector"] ? $data["nombreSector"] : "");
                $parroquia          = ($data["nombreParroquia"] ? $data["nombreParroquia"] : "");
                $ciudad             = ($data["nombreCanton"] ? $data["nombreCanton"] : "");
                $jurisdiccion       = ($data["nombreJurisdiccion"] ? $data["nombreJurisdiccion"] : "Sin Jurisdiccion");
                $cliente            = ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
                                      ($data["longitud"] && $data["latitud"]) ? $coordenadas = $data["longitud"] .
                                      ", " . $data["latitud"] : $coordenadas = "Sin Coordenadas";
                $fePlanificacion    = strval(date_format($data["feCreacion"], "d/m/Y G:i"));
                $latitud            = ($data["latitud"] ? $data["latitud"] : "");
                $longitud           = ($data["longitud"] ? $data["longitud"] : "");
                
                $tipoFactibilidadUM     = "RUTA";//Por Default cuando se trate de fibra optica
                $objServProdCaractGrupo = null;

                //se realiza la validación para agregar el servicio adicionales para la red GPON
                if(is_object($Servicio) && is_object($Servicio->getProductoId()) && isset($serviceTecnico) && is_object($serviceTecnico))
                {
                    $arrayParProductoVisible = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('NUEVA_RED_GPON_TN',
                                                                        'COMERCIAL',
                                                                        '',
                                                                        '',
                                                                        $Servicio->getProductoId()->getId(),
                                                                        'FLUJO_OCULTO',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $codEmpresa);
                    if(isset($arrayParProductoVisible) && !empty($arrayParProductoVisible)
                        && isset($arrayParProductoVisible['valor3']) && !empty($arrayParProductoVisible['valor3'])
                        && isset($arrayParProductoVisible['valor4']) && !empty($arrayParProductoVisible['valor4']))
                    {
                        $strDescCaract    = $arrayParProductoVisible['valor3'];
                        $strPermiteCaract = $arrayParProductoVisible['valor4'];
                        $objServProdCaractValServ = $serviceTecnico->getServicioProductoCaracteristica($Servicio,
                                                                                                       $strDescCaract,
                                                                                                       $Servicio->getProductoId());
                        if((!is_object($objServProdCaractValServ) && $strPermiteCaract == "NO") ||
                           (is_object($objServProdCaractValServ) && $strPermiteCaract == "SI"))
                        {
                            $intContServicioOculto++;
                            continue;
                        }
                    }
                }

                //Obtener la caracteristica TIPO_FACTIBILIDAD para discriminar que sea FIBRA DIRECTA o RUTA
                if(isset($arrayParametros['serviceTecnico']))
                {
                    $objServProdCaractTipoFact = $arrayParametros['serviceTecnico']
                                                 ->getServicioProductoCaracteristica($Servicio,'TIPO_FACTIBILIDAD',$Servicio->getProductoId());

                    //Si no existe la caracteristica mencionada se setea por default a Fibra Ruta
                    if($objServProdCaractTipoFact)
                    {
                        $tipoFactibilidadUM = $objServProdCaractTipoFact->getValor();
                    }

                    //Obtenemos el número de solución del servicio en base a las nuevas estructuras.
                    $objInfoSolucionDet = $this->_em->getRepository("schemaBundle:InfoSolucionDet")
                            ->findOneBy(array('servicioId' => $Servicio->getId(),'estado' => 'Activo'));
                    $objInfoSolucionCab = is_object($objInfoSolucionDet) ? $objInfoSolucionDet->getSolucionCabId() : null;

                    //Capacidades del Producto
                    $objServProdCapacidad1 = $arrayParametros['serviceTecnico']
                                                  ->getServicioProductoCaracteristica($Servicio,'CAPACIDAD1',$Servicio->getProductoId());

                    $objServProdCapacidad2 = $arrayParametros['serviceTecnico']
                                                  ->getServicioProductoCaracteristica($Servicio,'CAPACIDAD2',$Servicio->getProductoId());
                }                
                
                if($data["tipoOrden"])
                {
                    switch($data["tipoOrden"])
                    {
                        case "N":
                            $tipo_orden = "Nuevo";
                            break;
                        case "T":
                            $tipo_orden = "Traslado";
                            break;
                        case "R":
                            $tipo_orden = "Reubicacion";
                            break;
                        case "C":
                            $tipo_orden = "Cambio Tipo Medio";
                            break;
                        default:
                            $tipo_orden = "Nuevo";
                            break;
                    }
                }
                else
                {
                    $tipo_orden = "Nuevo";
                }
                // ************************* RUTA DE LA IMAGEN DEL CROQUIS *************** 
                $pathCroquis            = "public/uploads/croquis/";
                $pathImagenDefault      = "public/images/images_crud/";
                $rutaVerificaCroquis    = ($data["rutaCroquis"] != "" ? "./$pathCroquis" . $data["rutaCroquis"] : "" );

                if(file_exists($rutaVerificaCroquis))
                {
                    $nombreArchivo  = $data["rutaCroquis"];
                    $rutaArchivo    = "/" . $pathCroquis . $nombreArchivo;
                }
                else
                {
                    $nombreArchivo  = "no_image_200_200.png";
                    $rutaArchivo    = "/" . $pathImagenDefault . $nombreArchivo;
                }
                $rutaCroquis      = ($rutaArchivo != "" ?
                                    "<img src='$rutaArchivo' title='$nombreArchivo' alt='$nombreArchivo' width='480' height='450' />" : "" );
                $esRecontratacion = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                              ->esRecontratacion($data['id_persona'], $codEmpresa);

                if($prefijoEmpresa == "MD" || $prefijoEmpresa == "EN" || $prefijoEmpresa == "TN")
                {
                    $buttonFactibilidad = "button-grid-Time2";
                }
                else
                {
                    $buttonFactibilidad = "button-grid-Tuerca";
                }
                
                //Se envia informacion si un servicio es o no PseudoPe
                $boolEsPseudoPe  = $this->_em->getRepository("schemaBundle:InfoServicio")->esServicioPseudoPe($Servicio);
                
                if (is_object($ultimaMilla))
                {
                    $strUltimaMilla = $ultimaMilla->getNombreTipoMedio();
                }

                $strGrupo         = '';
                $strNombreTecnico = '';
                
                //Grupo
                if($prefijoEmpresa == 'TN')
                {
                    $strGrupo           = $Servicio->getProductoId()->getGrupo();
                }
                //Bandera que indica si es INTERNET DC O DATOS DC y su producto de Alquiler de Espacio Designado ya tiene una
                //Factibilidad generada, puede continuar con el Flujo, caso contrario se solicitará que culmine el Flujo
                $strContinuaFlujoDC      = 'S';
                $intIdServicioAlqEspacio = 0;
                $strCapacidad1           = 'N/A';
                $strCapacidad2           = 'N/A';
                $strPoolRecursosStorage  = 'N/A';
                $strPoolRecursosMemoria  = 'N/A';
                $strPoolRecursosProcesador = 'N/A';
                $strContieneAlquilerServ = 'N';
                $strProductosCoreAsociados = '';
                $strEsSolucion             = 'N';
                $arrayCores              = array();
                $strNombreCanton         = '';
                $strDescripcionRecurso   = '';

                //Se modifica el proceso para obtener el número de solución, de acuerdo a las nuevas estructuras.
                if (is_object($objInfoSolucionCab))
                {
                    $strEsSolucion = 'S';

                    //Obtener el producto ligado a Alquiler de Espacio
                    $arrayParametrosSolucion                  = array();
                    $arrayParametrosSolucion['intSecuencial'] = $objInfoSolucionCab->getNumeroSolucion();
                    $arrayParametrosSolucion['intPuntoFacturacionId'] = $Servicio->getPuntoFacturacionId()->getId();

                    $arrayServiciosGrupo = $this->_em->getRepository("schemaBundle:InfoServicio")
                            ->getArrayServiciosPorGrupoSolucion($arrayParametrosSolucion);

                    $strNombreTecnicoActual = $Servicio->getProductoId()->getNombreTecnico();
                    
                    if($strNombreTecnicoActual == 'INTERNETDC' || $strNombreTecnicoActual == 'DATOSDC' ||
                       $strNombreTecnicoActual == 'INTERNET DC SDWAN' || $strNombreTecnicoActual == 'DATOS DC SDWAN')
                    {
                        $arrayRequest['arrayRequest'] = array('idServicio' => $Servicio->getId(),'estado' => 'Activo');
                        $arrayRequest["ociCon"]       = $arrayParametros['ociCon'];

                        //Determinar si los servicios se encuentran agrupados como una solución
                        $arrayResponse  = $this->_em->getRepository('schemaBundle:InfoSolucionCab')->listarDetalleSolucion($arrayRequest);
                        $arrayResultado = oci_fetch_array($arrayResponse['objCsrResult'], OCI_ASSOC + OCI_RETURN_NULLS);

                        if ($arrayResponse['status'] === 'OK' && !empty($arrayResultado))
                        {
                            $arrayCores = explode("|",$arrayResultado['CORESREFERENTES']);
                        }

                        foreach($arrayServiciosGrupo as $objServicioGrupo)
                        {
                            //Si el servicio del grupo es distinto al servicio de gestion de factibilidad actual
                            if ($objServicioGrupo != $Servicio)
                            {
                                $objProducto        = $objServicioGrupo->getProductoId();
                                $objInfoSolucionDet = $this->_em->getRepository("schemaBundle:InfoSolucionDet")
                                        ->findOneBy(array('servicioId' => $objServicioGrupo->getId(),'estado' => 'Activo'));

                                if (is_object($objInfoSolucionDet))
                                {
                                    $strTipoSubSolucion = $objInfoSolucionDet->getTipoSolucion();

                                    //Validar si el subtipo del producto es uno de los que tiene configurado o relacionado el servicio enlace
                                    if (in_array($strTipoSubSolucion,$arrayCores))
                                    {
                                        $boolEsHousing = $arrayParametros['serviceTecnico']->isContieneCaracteristica($objProducto,'ES_HOUSING');

                                        if ($boolEsHousing)
                                        {
                                            if($objServicioGrupo->getEstado() == 'Pre-servicio'    || 
                                               $objServicioGrupo->getEstado() == 'PreFactibilidad' ||
                                               $objServicioGrupo->getEstado() == 'FactibilidadEnProceso')
                                            {
                                                $objInfoServicioRecursoCab = $this->_em->getRepository("schemaBundle:InfoServicioRecursoCab")
                                                        ->findOneBy(array('servicioId' => $objServicioGrupo->getId(),'estado' => 'Activo'));

                                                $strDescripcionRecurso = is_object($objInfoServicioRecursoCab) ?
                                                        $objInfoServicioRecursoCab->getDescripcionRecurso() : null;

                                                $strProductosCoreAsociados .= '</br><i class="fa fa-long-arrow-right" aria-hidden="true"></i>&nbsp;'.
                                                                               $objProducto->getDescripcionProducto().
                                                                              ' ('.$strDescripcionRecurso.' - '.$strTipoSubSolucion.')';

                                                $strContinuaFlujoDC = 'N';
                                            }
                                            else
                                            {
                                                $intIdServicioAlqEspacio = $objServicioGrupo->getId();
                                            }
                                        }
                                    }//fin in_array
                                }
                            }//fin if de validacion de servicios
                        }//fin foreach
                    }

                    if($strNombreTecnicoActual === 'HOUSING')
                    {
                        $objInfoServicioRecursoCab = $this->_em->getRepository("schemaBundle:InfoServicioRecursoCab")
                                ->findOneBy(array('servicioId' => $Servicio->getId(),'estado' => 'Activo'));

                        $strDescripcionRecurso = is_object($objInfoServicioRecursoCab) ?
                                $objInfoServicioRecursoCab->getDescripcionRecurso() : null;
                    }

                    if($strNombreTecnicoActual == 'HOSTING')
                    {
                        $objServProdSubTipoSolucion =  $this->_em->getRepository('schemaBundle:InfoSolucionDet')
                                                           ->findOneBy(array( "servicioId"     => $Servicio->getId()));
                        
                        if(!empty($objServProdSubTipoSolucion))
                        {
                            //Busco todos los productos ligados a este Subtipo y Solucion y verifico si existe producto de Alquiler
                            //de Servidores para poder validar continuidad de factibilidad ( requerido )
                            $objSolucionCab = $this->_em->getRepository('schemaBundle:InfoSolucionCab')
                                                ->findOneBy(array("id" => $objServProdSubTipoSolucion->getSolucionCabId()));
                            $arrayServicios = $this->_em->getRepository("schemaBundle:InfoServicio")
                                                        ->getArrayServiciosPorSolucionYTipoSolucion($objSolucionCab->getNumeroSolucion(),
                                                                                                    $objServProdSubTipoSolucion->getTipoSolucion()
                                                                                                   );
                            foreach($arrayServicios as $objServicioSubSolucion)
                            {
                                $objProductoSubSolucion = $objServicioSubSolucion->getProductoId();
                                
                                if($objServicioSubSolucion != $Servicio)
                                {
                                    $boolEsAlquiler  = $arrayParametros['serviceTecnico']
                                                       ->isContieneCaracteristica($objProductoSubSolucion,'ES_ALQUILER_SERVIDORES');
                                    
                                    if($boolEsAlquiler)
                                    {
                                        $strContieneAlquilerServ = 'S';
                                        
                                        if($objServicioSubSolucion->getEstado() == 'Pre-servicio'    || 
                                           $objServicioSubSolucion->getEstado() == 'PreFactibilidad' ||
                                           $objServicioSubSolucion->getEstado() == 'FactibilidadEnProceso')
                                        {
                                          $objSolucionDet = $this->_em->getRepository('schemaBundle:InfoSolucionDet')
                                                ->findOneBy(array("servicioId" => $objServicioSubSolucion->getId()));
                            
                                            $strProductosCoreAsociados .= '</br><i class="fa fa-long-arrow-right" aria-hidden="true"></i>&nbsp;'.
                                                                            $objProductoSubSolucion->getDescripcionProducto().
                                                                           " (".$objSolucionDet->getTipoSolucion().')';
                                            $strContinuaFlujoDC = 'N';
                                        }
                                    }
                                }
                            }
                        }
                        
                        //Obtener Pool de recursos configurado para mostrar el detalle en pantalla
                        //Obtener resumen de recursos contratados
                        $arrayParametrosRecursos                   = array();
                        $arrayParametrosRecursos['intIdServicio']  = $Servicio->getId();
                        $arrayParametrosRecursos['strTipoRecurso'] = 'DISCO_VALUE';
                        
                        $arrayRecursos = $this->_em->getRepository("schemaBundle:InfoServicio")
                                                   ->getArrayRecursosPoolPorTipo($arrayParametrosRecursos);
                                                
                        if(!empty($arrayRecursos))
                        {
                            $strPoolRecursosStorage = $arrayRecursos['totalRecurso'].' (GB)';
                        }
                    }

                    $strNombreCanton     = $arrayParametros['serviceTecnico']->getCiudadRelacionadaPorRegion($Servicio,$codEmpresa);
                }
                
                if(is_object($objServProdCapacidad1))
                {
                    $strCapacidad1 = $objServProdCapacidad1->getValor();
                }                    
                if(is_object($objServProdCapacidad2))
                {
                    $strCapacidad2 = $objServProdCapacidad2->getValor();
                }

                //*************Se obtiene el tipo de red en base al servicio*************************//
                $strTipoRed = "MPLS";
                if($prefijoEmpresa == 'TN' && is_object($Servicio) && is_object($Servicio->getProductoId()))
                {
                    $objServProdCaractTipoRed = $serviceTecnico->getServicioProductoCaracteristica($Servicio,
                                                                                                   'TIPO_RED',
                                                                                                   $Servicio->getProductoId());

                    if(is_object($objServProdCaractTipoRed))
                    {
                        $strTipoRed = $objServProdCaractTipoRed->getValor();
                    }
                }
                //verificar si el tipo de red es GPON
                $booleanTipoRedGpon = false;
                $arrayParVerTipoRed = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                'COMERCIAL',
                                                                                                '',
                                                                                                'VERIFICAR TIPO RED',
                                                                                                'VERIFICAR_GPON',
                                                                                                $strTipoRed,
                                                                                                '',
                                                                                                '',
                                                                                                '');
                if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                {
                    $booleanTipoRedGpon = true;
                }

                if($coordenadas != "Sin Coordenadas")
                {
                    $arr_encontrados[] = array(
                        'strDescripcionRecurso'     => $strDescripcionRecurso,
                        'id_factibilidad'           => $data["idDetalleSolicitud"],
                        'estadoFactibilidad'        => $data["estadoFactibilidad"],
                        'id_servicio'               => $data["idServicio"],
                        'id_punto'                  => $data["idPunto"],
                        'id_jurisdiccion'           => $data["idJurisdiccion"],
                        'observacion'               => $data["observacion"],
                        'intIdPersonaEmpresaRol'    => $data["intIdPersonaEmpresaRol"],
                        'strEsEdificio'             => $data["strEsEdificio"],
                        'strDependeDeEdificio'      => $data["strDependeDeEdificio"],
                        'strNombreEdificio'         => $data["strNombreEdificio"],
                        'intIdElemento'             => $data["intIdElemento"],
                        'intIdUltimaMilla'          => $data["intIdUltimaMilla"],
                        'strCodigoTipoMedio'        => $data["strCodigoTipoMedio"],
                        'strNombreTipoMedio'        => $data["strNombreTipoMedio"],
                        'strTipoEnlace'             => $data["strTipoEnlace"],
                        'strTipoRed'                => $strTipoRed,
                        'booleanTipoRedGpon'        => $booleanTipoRedGpon,
                        'intIdPersona'              => $data["id_persona"],
                        'cliente'                   => ucwords(strtolower(trim($cliente))),
                        'vendedor'                  => trim($nombreVendedor),
                        'login2'                    => trim($data["login"]),
                        'tipo_orden'                => $tipo_orden,
                        'esRecontratacion'          => $esRecontratacion,
                        'producto'                  => trim($nombreProductoPlan),
                        'coordenadas'               => trim($coordenadas),
                        'direccion'                 => trim($data["direccion"]),
                        'ciudad'                    => ucwords(strtolower(trim($ciudad))),
                        'jurisdiccion'              => ucwords(strtolower(trim($jurisdiccion))),
                        'nombreSector'              => ucwords(strtolower(trim($nombreSector))),
                        'fePlanificacion'           => trim($fePlanificacion),
                        'rutaCroquis'               => trim($rutaCroquis),
                        'latitud'                   => trim($latitud),
                        'longitud'                  => trim($longitud),
                        'strPrefijoEmpresa'         => $prefijoEmpresa,
                        'ultimaMilla'               => ($ultimaMilla) ? $ultimaMilla->getNombreTipoMedio() : "",
                        'tipoFactibilidadUM'        => $tipoFactibilidadUM,
                        'esPseudoPe'                => $boolEsPseudoPe?'SI':'NO',
                        'grupo'                     => $strGrupo,
                        'nombreTecnico'             => $strNombreTecnico,
                        'continuaFlujoDC'           => $strContinuaFlujoDC,
                        'productosCoreAsociados'    => $strProductosCoreAsociados,
                        'idServicioAlqEspacioDC'    => $intIdServicioAlqEspacio,
                        'capacidad1'                => $strCapacidad1,
                        'capacidad2'                => $strCapacidad2,
                        'poolStorage'               => $strPoolRecursosStorage,
                        'poolMemoria'               => $strPoolRecursosMemoria,
                        'poolProcesador'            => $strPoolRecursosProcesador,
                        'contieneAlquilerServidor'  => $strContieneAlquilerServ,
                        'esSolucion'                => $strEsSolucion,
                        'nombreCantonDC'            => $strNombreCanton,
                        'action1'                   => 'button-grid-Gmaps',
                        'action2'                   => 'button-grid-Foto',
                        'action3'                   => 'button-grid-BigDelete',
                        'action4'                   => ($data["estadoFactibilidad"] == "PreFactibilidad") ? $buttonFactibilidad : "icon-invisible",
                        'action5'                   => ($data["estadoFactibilidad"] == "FactibilidadEnProceso" ||
                                                        $data["estadoFactibilidad"] == "Asignar-factibilidad") ? 
                                                       "button-grid-Tuerca" : "icon-invisible",
                        'action6'                   => ($data["estadoFactibilidad"] == "FactibilidadEnProceso" && $strUltimaMilla == "Radio" )?
                                                       "button-grid-Fact-Anticipada" : "icon-invisible");
                }
                else
                {
                    $arr_encontrados[] = array(
                        'strDescripcionRecurso'     => $strDescripcionRecurso,
                        'id_factibilidad'           => $data["idDetalleSolicitud"],
                        'estadoFactibilidad'        => $data["estadoFactibilidad"],
                        'id_servicio'               => $data["idServicio"],
                        'id_punto'                  => $data["idPunto"],
                        'id_jurisdiccion'           => $data["idJurisdiccion"],
                        'observacion'               => $data["observacion"],
                        'intIdPersonaEmpresaRol'    => $data["intIdPersonaEmpresaRol"],
                        'strEsEdificio'             => $data["strEsEdificio"],
                        'strDependeDeEdificio'      => $data["strDependeDeEdificio"],
                        'strNombreEdificio'         => $data["strNombreEdificio"],
                        'intIdElemento'             => $data["intIdElemento"],
                        'intIdUltimaMilla'          => $data["intIdUltimaMilla"],
                        'strCodigoTipoMedio'        => $data["strCodigoTipoMedio"],
                        'strNombreTipoMedio'        => $data["strNombreTipoMedio"],
                        'strTipoEnlace'             => $data["strTipoEnlace"],
                        'intIdPersona'              => $data["id_persona"],
                        'strTipoRed'                => $strTipoRed,
                        'booleanTipoRedGpon'        => $booleanTipoRedGpon,
                        'cliente'                   => ucwords(strtolower(trim($cliente))),
                        'vendedor'                  => trim($nombreVendedor),
                        'login2'                    => trim($data["login"]),
                        'tipo_orden'                => $tipo_orden,
                        'esRecontratacion'          => $esRecontratacion,
                        'producto'                  => trim($nombreProductoPlan),
                        'coordenadas'               => trim($coordenadas),
                        'direccion'                 => trim($data["direccion"]),
                        'ciudad'                    => ucwords(strtolower(trim($ciudad))),
                        'jurisdiccion'              => ucwords(strtolower(trim($jurisdiccion))),
                        'nombreSector'              => ucwords(strtolower(trim($nombreSector))),
                        'fePlanificacion'           => trim($fePlanificacion),
                        'rutaCroquis'               => trim($rutaCroquis),
                        'latitud'                   => trim($latitud),
                        'longitud'                  => trim($longitud),
                        'strPrefijoEmpresa'         => $prefijoEmpresa,
                        'ultimaMilla'               => ($ultimaMilla) ? $ultimaMilla->getNombreTipoMedio() : "",
                        'tipoFactibilidadUM'        => $tipoFactibilidadUM,
                        'esPseudoPe'                => $boolEsPseudoPe?'SI':'NO',
                        'grupo'                     => $strGrupo,
                        'nombreTecnico'             => $strNombreTecnico,
                        'continuaFlujoDC'           => $strContinuaFlujoDC,
                        'productosCoreAsociados'    => $strProductosCoreAsociados,
                        'idServicioAlqEspacioDC'    => $intIdServicioAlqEspacio,
                        'capacidad1'                => $strCapacidad1,
                        'capacidad2'                => $strCapacidad2,
                        'poolStorage'               => $strPoolRecursosStorage,
                        'poolMemoria'               => $strPoolRecursosMemoria,
                        'poolProcesador'            => $strPoolRecursosProcesador,
                        'contieneAlquilerServidor'  => $strContieneAlquilerServ,
                        'esSolucion'                => $strEsSolucion,
                        'nombreCantonDC'            => $strNombreCanton,
                        'action1'                   => 'button-grid-Gmaps',
                        'action2'                   => 'button-grid-Foto',
                        'action3'                   => 'button-grid-BigDelete',
                        'action4'                   => ($data["estadoFactibilidad"] == "PreFactibilidad") ? $buttonFactibilidad : "icon-invisible",
                        'action5'                   => ($data["estadoFactibilidad"] == "FactibilidadEnProceso" ||
                                                        $data["estadoFactibilidad"] == "Asignar-factibilidad") ? 
                                                       "button-grid-Tuerca" : "icon-invisible",
                        'action6'                   => ($data["estadoFactibilidad"] == "FactibilidadEnProceso" && $strUltimaMilla == "Radio" )?
                                                       "button-grid-Tuerca" : "icon-invisible");
                }
            }

            //seteo el total menos los ocultos
            $num -= $intContServicioOculto;
            if($num == 0)
            {
                $resultado = array('total' => 1,
                                   'encontrados' => array('id_factibilidad'     => 0, 
                                                          'nombre_factibilidad' => 'Ninguno', 
                                                          'factibilidad_id'     => 0,
                                                          'factibilidad_nombre' => 'Ninguno', 
                                                          'estado'              => 'Ninguno'));
                $resultado = json_encode($resultado);
                return $resultado;
            }
            else
            {
                $dataF = json_encode($arr_encontrados);
                $resultado = '{"total":"' . $num . '","encontrados":' . $dataF . '}';
                return $resultado;
            }
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';
            return $resultado;
        }
    } //generarJsonPreFactibilidad        


    /**
     * Documentación para el método 'getRegistrosPreFactibilidad'.
     *
     * Obtiene registros de prefactibilidad
     * Se modifica consulta con parametrizacion de todos los filtros
     * @param integer   $start
     * @param integer   $limit
     * @param date      $search_fechaDesdePlanif
     * @param date      $search_fechaHastaPlanif
     * @param String    $search_login2
     * @param String    $search_descripcionPunto
     * @param String    $search_vendedor
     * @param String    $search_ciudad
     * @param integer   $search_numOrdenServicio
     * @param String    $codEmpresa
     * @param String    $prefijoEmpresa
     * @param String    $ultimaMilla
     * @param String    $validaRechazado
     * @return Object   $datos listado de registros de prefactibilidad
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 11-11-2014
     * 
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.1 17-04-2016 Se modifica validacion para que pueda obtener datos para la empresa TN, se aumentan campos en el select
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.2 05-07-2016 Se aumenta ultima milla utp
     *      
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.3 24-06-2016 Se parametriza el tipo de solicitud filtrado
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 22-11-2016 Se agrega el filtro por jurisdicción tomando en cuenta la oficina de la persona en sesión.
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.5 08-09-2017 Se agrega estado de solicitud Asignar-factibilidad para mostrar en opcion de asignar factibilidad a servicios RADIO
     * @since 1.5
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.6 14-08-2017 Se agrega el filtro por jurisdicción tomando en cuenta la oficina de la persona en sesión.
     * 
     * @author Modificado: Walther Joao Gaibor C. <wgaibor@telconet.ec>
     * @version 1.6 21-01-2018 Si tipo orden es C se setea el valor cambio tipo medio
     * 
     * @author Modificado: Allan Suarez C. <wgaibor@telconet.ec>
     * @version 1.7 14-05-2018 Se valida que exista los parametros enviados al metodo para no generar Logs innecesarios
     *                         Se ajusta para poder consultar registros para Factibilidad del PAC ( DATACENTER ), estados PreFactibilidad-Pac
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.8 04-08-2020 - Se valida el inicio y el limite de la consulta cuando se realiza filtros en el query.
     *
     * @author Jonathan Mazón Sánchez <jmazon@telconet.ec>
     * @version 1.9 13-02-2023 - Se agrega bandera de Prefijo Empresa EN para Ecuanet y así obtener los servicios en estado factibilidadenproceso,
     *                           prefactibilidad y asignar-factibilidad.
     *
     *
     * @since 1.0
     */
    public function getRegistrosPreFactibilidad($arrayParametros)
    {

        $start                      = $arrayParametros["start"];
        $limit                      = $arrayParametros["limit"];
        $search_fechaDesdePlanif    = isset($arrayParametros["search_fechaDesdePlanif"])?$arrayParametros["search_fechaDesdePlanif"]:'';
        $search_fechaHastaPlanif    = isset($arrayParametros["search_fechaHastaPlanif"])?$arrayParametros["search_fechaHastaPlanif"]:'';
        $search_login2              = isset($arrayParametros["search_login2"])?$arrayParametros["search_login2"]:'';
        $search_descripcionPunto    = isset($arrayParametros["search_descripcionPunto"])?$arrayParametros["search_descripcionPunto"]:'';
        $search_vendedor            = isset($arrayParametros["search_vendedor"])?$arrayParametros["search_vendedor"]:'';
        $search_ciudad              = isset($arrayParametros["search_ciudad"])?$arrayParametros["search_ciudad"]:'';
        $search_numOrdenServicio    = isset($arrayParametros["search_numOrdenServicio"])?$arrayParametros["search_numOrdenServicio"]:'';
        $codEmpresa                 = $arrayParametros["codEmpresa"];
        $prefijoEmpresa             = $arrayParametros["prefijoEmpresa"];
        $strUltimaMilla             = $arrayParametros["ultimaMilla"];
        $validaRechazado            = isset($arrayParametros["validaRechazado"])?$arrayParametros["validaRechazado"]:'';
        $arraySectoresId            = isset($arrayParametros["arraySectoresId"])?$arrayParametros["arraySectoresId"]:'';
        $arrayJurisdiccionesId      = isset($arrayParametros["arrayJurisdiccionesId"])?$arrayParametros["arrayJurisdiccionesId"]:'';
        $strSearchJurisdiccion = isset($arrayParametros["search_jurisdiccion"])?$arrayParametros["search_jurisdiccion"]:'';
        $strJurisdiccion = isset($arrayParametros["jurisdiccion"])?$arrayParametros["jurisdiccion"]:'';

        $query          = $this->_em->createQuery();
        $boolBusqueda   = false;
        $where          = "";
        $strFrom        = "";
        $boolEsDC       = false;
        
        if(isset($arrayParametros['grupo']) && $arrayParametros['grupo'] == 'DATACENTER')
        {
            $boolEsDC = true;
        }
        
        $strTipoSolicitud = "SOLICITUD FACTIBILIDAD";
        
        //Se Determina el tipo de Solicitud a buscar en caso que venga parametrizado
        if(isset($arrayParametros['tipoSolicitud']) && !empty($arrayParametros['tipoSolicitud']))
        {
            $strTipoSolicitud = $arrayParametros['tipoSolicitud'];
        }

        if ($strSearchJurisdiccion != "" && $strSearchJurisdiccion != null)
        {
            $where .= "AND aj.id = :idJurisdiccion ";
            $query->setParameter('idJurisdiccion', $strSearchJurisdiccion);
        }

        if ($strJurisdiccion != "")
        {
            $where .= "AND upper(aj.nombreJurisdiccion) like :jurisdiccion ";
            $query->setParameter('jurisdiccion', '%' . strtoupper($strJurisdiccion) . '%');
        }

        if($search_fechaDesdePlanif != "")
        {
            $dateF = explode("-", $search_fechaDesdePlanif);
            $fechaSql = date("Y/m/d", strtotime($dateF[2] . "-" . $dateF[1] . "-" . $dateF[0]));

            $boolBusqueda = true;
            $where .= "AND ds.feCreacion >= :feDesde ";
            $query->setParameter('feDesde', trim($fechaSql));
        }
        if($search_fechaHastaPlanif != "")
        {
            $dateF = explode("-", $search_fechaHastaPlanif);
            $fechaSqlAdd = strtotime(date("Y-m-d", strtotime($dateF[2] . "-" . $dateF[1] . "-" . $dateF[0])) . " +1 day");
            $fechaSql = date("Y/m/d", $fechaSqlAdd);

            $boolBusqueda = true;
            $where .= "AND ds.feCreacion <= :feHasta ";
            $query->setParameter('feHasta', trim($fechaSql));
        }

        if($search_login2 != "")
        {
            $boolBusqueda = true;
            $where .= "AND UPPER(p.login) like UPPER(:loginAfectado) ";
            $query->setParameter('loginAfectado',  $search_login2 . '%');
        }

        if($search_descripcionPunto != "")
        {
            $boolBusqueda = true;
            $where .= "AND UPPER(p.descripcionPunto) like UPPER(:descripcionPuntoP) ";
            $query->setParameter('descripcionPuntoP', '%' . $search_descripcionPunto . '%');
        }

        if($search_vendedor != "")
        {
            $boolBusqueda = true;
            $where .= "AND CONCAT(LOWER(peVend.nombres),CONCAT(' ',LOWER(peVend.apellidos))) like :vendedor ";
            $query->setParameter('vendedor', '%' . strtolower(trim($search_vendedor)) . '%');
        }

        if($search_numOrdenServicio != "")
        {
            $boolBusqueda = true;
            $where .= "AND ot.numeroOrdenTrabajo like :numOrdenServicio ";
            $query->setParameter('numOrdenServicio', $search_numOrdenServicio . '%');
        }

        if($search_ciudad != "")
        {
            $boolBusqueda = true;
            $where .= "AND UPPER(ca.nombreCanton) like UPPER(:ciudad) ";
            $query->setParameter('ciudad', '%' . $search_ciudad . '%');
        }
        // Entra cuando la empresa es TN o MD
        if($prefijoEmpresa == "MD" || $prefijoEmpresa == "EN" || $prefijoEmpresa == "TN" || $prefijoEmpresa == "TNP")
        {
            // Agrega clausula para buscar la solicitud en estado rechazada
            if($validaRechazado == "SI")
            {
                $where .= "AND LOWER(ds.estado) = LOWER(:estado1) ";
                $query->setParameter('estado1', 'Rechazada');
            }
            else
            { // Agrega clausula para buscar la solicitud en estados FactibilidadEnProceso, PreFactibilidad o Asignar-factibilidad
                
                //Si se trata de una consulta para el PAC solo se envia el nuevo estado de busqueda
                if(isset($arrayParametros['tipoFactibilidad']) && !empty($arrayParametros['tipoFactibilidad']) && 
                   $arrayParametros['tipoFactibilidad'] == 'PAC')
                {
                    $arrayEstadoSolicitud = array('prefactibilidad-pac','factibilidadenproceso-pac');
                }
                else
                {
                    $arrayEstadoSolicitud = array('factibilidadenproceso','prefactibilidad','asignar-factibilidad');
                }
                
                $where .= "AND ( LOWER(ds.estado) in (:estadosSolicitudes) ) ";
                $query->setParameter('estadosSolicitudes', $arrayEstadoSolicitud);
            } //Agrega clausula para buscar por fibra optica
            
            //Si existe ultima milla se realiza query con condicional que involucre la UM, caso contrario no lo toma en cuenta
            if(!empty($strUltimaMilla) && $strUltimaMilla!='N/A')
            {
                $arrayUm = explode(",", $strUltimaMilla);
                
                $strFrom   .= " schemaBundle:AdmiTipoMedio tm, ";
                $where     .= " AND st.ultimaMillaId = tm.id AND tm.nombreTipoMedio in (:ultimaMilla) ";
                $query->setParameter('ultimaMilla', $arrayUm); 
            }
            
            if (is_array($arrayJurisdiccionesId) && count($arrayJurisdiccionesId)==0 &&
             isset($arrayParametros["strFiltrarJurisdiccion"]) && !empty($arrayParametros["strFiltrarJurisdiccion"])
            && $arrayParametros["strFiltrarJurisdiccion"]=="SI")
            {
                
                    if(isset($arrayParametros["intIdOficina"]) && !empty($arrayParametros["intIdOficina"]))
                    {
                        $where .= "AND aj.oficinaId = :intIdOficina ";
                        $query->setParameter('intIdOficina', $arrayParametros["intIdOficina"] );
                    }
                
            }
            
            //filtro por el sector del servicio

            if (is_array($arrayJurisdiccionesId) && count($arrayJurisdiccionesId)>0)
            {
                $where .= " AND aj.id in (:arrayJurisdicccion) ";
                $query->setParameter(':arrayJurisdicccion', $arrayJurisdiccionesId);
            }else if(is_array($arraySectoresId))
            {
                //TODO cambios
                
                $where .= " AND p.sectorId in (:arraySector) ";
                $query->setParameter('arraySector', $arraySectoresId);
                
            }


            //escenarios para validaciones adicionales ( DC )
            if($boolEsDC)
            {
                if(isset($arrayParametros['nombreTecnico']) && !empty($arrayParametros['nombreTecnico']))
                {
                    $where   .= " AND apr.id = s.productoId AND apr.nombreTecnico = :nombreTecnico ";
                    $strFrom .= " schemaBundle:AdmiProducto apr , ";
                    $query->setParameter('nombreTecnico', $arrayParametros['nombreTecnico']);
                }
                
                if(isset($arrayParametros['region']) && !empty($arrayParametros['region']))
                {
                    $where   .= " AND aj.oficinaId        = oficina.id   AND "
                             .  "     oficina.cantonId    = canton.id    AND "
                             .  "     canton.provinciaId  = provincia.id AND "
                             .  "     provincia.regionId  = region.id    AND "
                             .  "     region.nombreRegion = :region ";
                    $strFrom .= 
                                " schemaBundle:InfoOficinaGrupo oficina,"
                              . " schemaBundle:AdmiCanton       canton,"
                              . " schemaBundle:AdmiProvincia    provincia,"
                              . " schemaBundle:AdmiRegion       region, ";
                    $query->setParameter('region', $arrayParametros['region']);
                }
            }
        }
        else
        {
            $where .= "AND LOWER(ds.estado) = LOWER(:estado1) ";
            $query->setParameter('estado1', 'PreFactibilidad');
        }

        if($prefijoEmpresa == 'TN')
        {
            //Si el producto viene en el arreglo se filtra por esa descricipcion en particular
            if(isset($arrayParametros["arrayDescripcionProducto"]) && !empty($arrayParametros["arrayDescripcionProducto"]))
            {
                $strFrom       .= ' schemaBundle:AdmiProducto prod, ';
                $where         .= " AND s.productoId = prod.id AND prod.descripcionProducto in (:descripcionProducto) ";
                $query->setParameter("descripcionProducto", $arrayParametros["arrayDescripcionProducto"]);
            }
            
            if(isset($arrayParametros["arrayDescripcionProductoExcepcion"]) && !empty($arrayParametros["arrayDescripcionProductoExcepcion"]))
            {
                $strFrom       .= ' schemaBundle:AdmiProducto prod, ';
                $where         .= " AND s.productoId = prod.id AND prod.descripcionProducto not in (:descripcionProducto) ";
                $query->setParameter("descripcionProducto", $arrayParametros["arrayDescripcionProductoExcepcion"]);
            }
        }

        $sql = "SELECT 
					ds.id as idDetalleSolicitud, 
                    s.id as idServicio, 
					p.id as idPunto,
                    aj.id as idJurisdiccion, 
                    se.nombreSector, 
                    pa.nombreParroquia, 
                    ca.nombreCanton, 
                    pe.id as id_persona,
					pe.razonSocial, 
                    pe.nombres, 
                    pe.apellidos, 
                    p.usrVendedor, 
                    p.login, 
					p.longitud, 
                    p.latitud, 
                    p.direccion, 
                    p.path as rutaCroquis, 
                    ds.feCreacion,
                    ds.estado as estadoFactibilidad,
					st.ultimaMillaId, 
                    p.observacion, 
                    aj.nombreJurisdiccion, 
                    st.elementoId as idOlt, 
                    st.interfaceElementoId as idLinea,
					st.elementoContenedorId as idCaja, 
                    st.elementoConectorId as idSplitter, 
                    st.interfaceElementoConectorId as idIntSplitter,
					s.tipoOrden,
					CONCAT(peVend.nombres,CONCAT(' ',peVend.apellidos)) as nombreVendedor,
                    per.id intIdPersonaEmpresaRol,
                    ipda.esEdificio strEsEdificio ,
                    ipda.dependeDeEdificio strDependeDeEdificio,
                    ie.nombreElemento strNombreEdificio,
                    isrt.elementoId intIdElemento,
                    isrt.ultimaMillaId intIdUltimaMilla,
                    atm.codigoTipoMedio strCodigoTipoMedio,
                    atm.nombreTipoMedio strNombreTipoMedio,
                    st.tipoEnlace strTipoEnlace
                FROM 
					schemaBundle:InfoServicio s                    
                     LEFT JOIN schemaBundle:InfoServicioTecnico isrt WITH isrt.servicioId = s.id
                     LEFT JOIN schemaBundle:AdmiTipoMedio atm WITH atm.id = isrt.ultimaMillaId, 
                    $strFrom
                    schemaBundle:AdmiTipoSolicitud ts,
					schemaBundle:InfoDetalleSolicitud ds, 
                    schemaBundle:AdmiJurisdiccion aj, 
					schemaBundle:InfoPersona pe, 
                    schemaBundle:InfoPersonaEmpresaRol per,
					schemaBundle:AdmiSector se, 
                    schemaBundle:AdmiParroquia pa, 
                    schemaBundle:InfoServicioTecnico st,
					schemaBundle:AdmiCanton ca, 
                    schemaBundle:InfoEmpresaRol emr,
					schemaBundle:InfoPunto p 
                     LEFT JOIN schemaBundle:InfoPersona peVend WITH peVend.login = p.usrVendedor 
                     LEFT JOIN schemaBundle:InfoPuntoDatoAdicional ipda WITH ipda.puntoId = p.id 
                     LEFT JOIN schemaBundle:InfoElemento ie   WITH ie.id = ipda.elementoId 
                WHERE 
					s.id                                = ds.servicioId
					AND st.servicioId                   = s.id
					AND s.puntoId                       = p.id
					AND ts.id                           = ds.tipoSolicitudId 
					AND p.personaEmpresaRolId           = per.id 
					AND per.personaId                   = pe.id 
					AND p.sectorId                      = se.id 
					AND se.parroquiaId                  = pa.id 
					AND pa.cantonId                     = ca.id 
					AND per.empresaRolId                = emr.id
					AND aj.id                           = p.puntoCoberturaId
                    AND emr.empresaCod                  = :codEmpresa
					AND LOWER(ts.descripcionSolicitud)  = LOWER(:tipoSolicitud) 
					$where 		
				
				ORDER BY ds.feCreacion DESC ";
        $query->setParameter('codEmpresa', $codEmpresa);
        $query->setParameter('tipoSolicitud',$strTipoSolicitud );
        $query->setDQL($sql);
        if($start != '' && $limit != '')
        {
            $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        }
        else if($start != '' && $limit == '')
        {
            $datos = $query->setFirstResult($start)->getResult();
        }
        else if($start == '' && $limit != '')
        {
            $datos = $query->setMaxResults($limit)->getResult();
        }
        else
        {
            $datos = $query->getResult();
        }
        
        return $datos;
    }

    /**     
     * 
     * generarJsonPendientesAprobacionSolMatExc
     * 
     * Genera Json Para las aprobaciones de materiales excedentes
     * 
     * 
     * @author Mario Ayerve <mayerve@telconet.ec>
     * @version 1.0 01-03-2021
     * 
     * Se consulta de las formas de contacto del vendedor
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 1.1 16-11-2021
     * 
     * Se envìan nuevos valores a buscar para materiales excedentes y se añade el signo de $.
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 1.2 06-03-2023
     * 
     */ 
    /* ************************** PASO 2 .-    PENDIENTES APROBACION DE SOLICITUDES MATERIALES EXCEDENTES ******************************************* */
    public function generarJsonPendientesAprobacionSolMatExc($em, $start,$limit, $search_fechaDesdePlanif, $search_fechaHastaPlanif, $search_login2, $search_descripcionPunto, $search_vendedor, $search_ciudad, $search_numOrdenServicio,$codEmpresa="")
    {
        $arr_encontrados = array();
        $floatMRC = 0;
        $floatNRC = 0;
        
        $registrosTotal = $this->getRegistrosPendientesAprobacionSolMatExc('', '', $search_fechaDesdePlanif, $search_fechaHastaPlanif, $search_login2, $search_descripcionPunto, $search_vendedor, $search_ciudad, $search_numOrdenServicio,$codEmpresa);
        $registros = $this->getRegistrosPendientesAprobacionSolMatExc($start, $limit, $search_fechaDesdePlanif, $search_fechaHastaPlanif, $search_login2, $search_descripcionPunto, $search_vendedor, $search_ciudad, $search_numOrdenServicio,$codEmpresa);
        
        if ($registros) {
            $num = count($registrosTotal);            
            foreach ($registros as $data)
            {                                   
                $nombreVendedor = (isset($data["nombreVendedor"]) ?  ($data["nombreVendedor"] ? ucwords(strtolower($data["nombreVendedor"])) : "") : "");
		        $strUsrVendedor = (isset($data["usrVendedor"]) ?  ($data["usrVendedor"] ? ucwords(strtolower($data["usrVendedor"])) : "") : "");

                $strNombreAsistente = (isset($data["nombreAsistente"]) ? 
                                    ($data["nombreAsistente"] ? ucwords(strtolower($data["nombreAsistente"])) : "") : "");
		        $strUsrAsistente = (isset($data["usrAsistente"]) ? 
                                    ($data["usrAsistente"] ? ucwords(strtolower($data["usrAsistente"])) : "") : "");

                $Servicio = $em->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]); 
                $nombreProducto =  ($Servicio->getProductoId() ? $Servicio->getProductoId()->getDescripcionProducto() : "");  
                $nombrePlan =  ($Servicio->getPlanId() ? $Servicio->getPlanId()->getNombrePlan() : "");  
               
                // ---- Consulta de las formas de contacto del asesor o que es lo mismo vendedor
                $entityInfoPersona = $em->getRepository('schemaBundle:InfoPersona')
                    ->getContactosByLoginPersonaAndFormaContacto($Servicio->getUsrVendedor(), 'Correo Electronico');

                if ($entityInfoPersona)
                {
                    foreach ($entityInfoPersona as $arrayPersonaFormaContato)
                    {
                        $strValorFormaContacto = (isset($arrayPersonaFormaContato["valor"]) ?  ($arrayPersonaFormaContato["valor"] 
                                                                           ? ucwords(strtolower($arrayPersonaFormaContato["valor"])) : "") : "");
                        $strDescripcionFormaContacto = (isset($arrayPersonaFormaContato["descripcionFormaContacto"]) ?
                                                        ($arrayPersonaFormaContato["descripcionFormaContacto"] 
                                                        ? ucwords(strtolower($arrayPersonaFormaContato["descripcionFormaContacto"])) : "") : "");
                    }
                }

                //Obtenemos la forma de contacto del creador
                $entityInfoPersonaAsistente1 = $em->getRepository('schemaBundle:InfoPersona')
                                        ->getContactosByLoginPersonaAndFormaContacto($Servicio->getUsrCreacion(), 'Correo Electronico');

                if ($entityInfoPersonaAsistente1)
                {
                    foreach ($entityInfoPersonaAsistente1 as $arrayPersonaFormaContato)
                    {
                        $strValorFormaContactoAsistente = (isset($arrayPersonaFormaContato["valor"]) ?  ($arrayPersonaFormaContato["valor"] 
                                                                        ? ucwords(strtolower($arrayPersonaFormaContato["valor"])) : "") : "");
                        $strDescripcionFormaContactoAsistente = (isset($arrayPersonaFormaContato["descripcionFormaContacto"]) ?
                                                        ($arrayPersonaFormaContato["descripcionFormaContacto"] 
                                                        ? ucwords(strtolower($arrayPersonaFormaContato["descripcionFormaContacto"])) : "") : "");
                    }
                }

                $nombreProductoPlan = $nombreProducto . $nombrePlan;
                $nombreSector =  ($data["nombreSector"] ? $data["nombreSector"]  : "");    
                $parroquia =  ($data["nombreParroquia"] ? $data["nombreParroquia"]  : ""); 
                $ciudad =  ($data["nombreCanton"] ? $data["nombreCanton"]  : "");  
                $jurisdiccion =  ($data["nombreJurisdiccion"] ? $data["nombreJurisdiccion"]  : "");  
                //Cuando tiene valores la solicitud de planificacion
                if(($data["valorMetraje"]!=0) || ($data["valorObraCivil"]!=0) ||($data["valorOtrosMate"]!=0) )
                {
                    $floatValorMetraje      =  ($data["valorMetraje"] ? $data["valorMetraje"]  : 0);
                    $floatValorObraCivil    =  ($data["valorObraCivil"] ? $data["valorObraCivil"]  : 0);
                    $floatValorOtrosMate    =  ($data["valorOtrosMate"] ? $data["valorOtrosMate"]  : 0);
                    $floatValorAsumeEmpresa =  ($data["valorAsumeEmpresa"] ? $data["valorAsumeEmpresa"]  : 0);
                    $floatValorAsumeCliente =  ($data["valorAsumeCliente"] ? $data["valorAsumeCliente"]  : 0);
                }
                else
                {
                    $floatValorMetraje      =  ($data["valorMetrajeFact"] ? $data["valorMetrajeFact"]  : 0);
                    $floatValorObraCivil    =  ($data["valorObraCivilFact"] ? $data["valorObraCivilFact"]  : 0);
                    $floatValorOtrosMate    =  ($data["valorOtrosMateFact"] ? $data["valorOtrosMateFact"]  : 0);
                    $floatValorAsumeEmpresa =  ($data["valorAsumeEmpresaFact"] ? $data["valorAsumeEmpresaFact"]  : 0);
                    $floatValorAsumeCliente =  ($data["valorAsumeClienteFact"] ? $data["valorAsumeClienteFact"]  : 0);
                }

                $floatSubTotal   = $floatValorMetraje + $floatValorObraCivil + $floatValorOtrosMate;
                // si la empresa asume por copagos
                if($floatValorAsumeEmpresa == 0)
                {
                    $floatValorAsumeEmpresa     = $floatSubTotal;
                }
           
                $floatMRC               =  ($data["precioVenta"] && $data["frecuencia"] == 1 ? $data["precioVenta"]  : 0);
                $floatNRC               =  ($data["precioInstalacion"] ? $data["precioInstalacion"]  : 0);
                $cliente = ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
                ($data["longitud"]&&$data["latitud"])?$coordenadas = $data["longitud"] . ", ". $data["latitud"]:$coordenadas ="";
                $fePlanificacion = strval(date_format($data["feCreacion"],"d/m/Y G:i"));                
                $latitud =  ($data["latitud"] ? $data["latitud"]  : "");  
                $longitud =  ($data["longitud"] ? $data["longitud"]  : "");  
                
                // ************************* RUTA DE LA IMAGEN DEL CROQUIS *************** 
                $pathCroquis = "public/uploads/croquis/";
                $pathImagenDefault = "public/images/images_crud/";
                $rutaVerificaCroquis = ($data["rutaCroquis"]!="" ? "./$pathCroquis".$data["rutaCroquis"] : "" );
                if(file_exists($rutaVerificaCroquis))
                {
                    $nombreArchivo = $data["rutaCroquis"];
                    $rutaArchivo = "/" . $pathCroquis . $nombreArchivo;
                }
                else 
                {
                    $nombreArchivo = "no_image_200_200.png";
                    $rutaArchivo = "/" . $pathImagenDefault . $nombreArchivo;
                }                
                $rutaCroquis = ($rutaArchivo!="" ?  "<img src='$rutaArchivo' title='$nombreArchivo' alt='$nombreArchivo' width='480' height='450' />" : "" );
                //$rutaCroquis = ($data["rutaCroquis"]!="" ?  "<img src='/telconet/web/public/uploads/croquis/".$data["rutaCroquis"]."' title='".$data["rutaCroquis"]."' alt='".$data["rutaCroquis"]."' width='480' height='450' />" : "" );
                $esRecontratacion = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRol')->esRecontratacion($data['id_persona'],$codEmpresa);	                 
                if($data["tipoOrden"]){
					switch ($data["tipoOrden"]) {
					   case "N":
							 $tipo_orden = "Nuevo";
							 break;
					   case "T":
							 $tipo_orden = "Traslado";
							 break;
					   case "R":
							 $tipo_orden = "Reubicacion";
							 break;
                       case "C":
							 $tipo_orden = "Cambio Tipo Medio";
							 break;
						default:
							$tipo_orden = "Nuevo";
							 break;
					}
				}else{
					$tipo_orden = "Nuevo";
				}
				if($data['tercerizadoraId']){
		    $infoPersona = $em->getRepository('schemaBundle:InfoPersona')->find($data["tercerizadoraId"]); 
		    $tercerizadora = sprintf("%s",$infoPersona);
                }else{
		    $tercerizadora = "";
                }
                $arr_encontrados[]=array(
                                         'id_factibilidad' =>$data["idDetalleSolicitud"],
                                         'id_servicio' =>$data["idServicio"],
                                         'id_punto' =>$data["idPunto"],
                                         'cliente' =>ucwords(strtolower(trim($cliente))),
                                         'usr_vendedor' =>trim($strUsrVendedor),
                                         'vendedor' =>trim($nombreVendedor),
                                         'valor' =>trim($strValorFormaContacto),
                                         'descripcionFormaContacto' =>trim($strDescripcionFormaContacto),

                                         'usr_asistente' =>trim($strUsrAsistente),
                                         'nombreAsistente' =>trim($strNombreAsistente),
                                         'valorAsistente' =>trim($strValorFormaContactoAsistente),
                                         'descripcionFormaContactoAsistente' =>trim($strDescripcionFormaContactoAsistente),

                                         'login2' =>trim($data["login"]),
                                         'tipo_orden'=>$tipo_orden,
                                         'tercerizadora'=>$tercerizadora,
                                         'valorMetraje'     =>'$ '.$floatValorMetraje,
                                         'valorObraCivil'   =>'$ '.$floatValorObraCivil,
                                         'valorOtrosMate'   =>'$ '.$floatValorOtrosMate,
                                         'valorAsumeEmpresa'=>'$ '.$floatValorAsumeEmpresa,
                                         'valorAsumeCliente'=>'$ '.$floatValorAsumeCliente,
                                         'MRC'=>$floatMRC,
                                         'NRC'=>$floatNRC,
                                         'esRecontratacion'=>$esRecontratacion,
                                         'producto' =>trim($nombreProductoPlan),
                                         'coordenadas' =>trim($coordenadas),
                                         'direccion' =>trim($data["direccion"]),
                                         'ciudad' =>ucwords(strtolower(trim($ciudad))),
                                         'jurisdiccion' =>ucwords(strtolower(trim($jurisdiccion))),
                                         'nombreSector' =>ucwords(strtolower(trim($nombreSector))),
                                         'fePlanificacion' =>trim($fePlanificacion),
                                         'rutaCroquis' =>trim($rutaCroquis),
                                         'latitud' =>trim($latitud),
                                         'longitud' =>trim($longitud),
                                         // 'action1' => 'button-grid-Gmaps',
                                         // 'action2' => 'button-grid-Foto',
                                         'action3' => 'button-grid-Check',
                                         'action4' => 'button-grid-BigDelete',
                                         'action5' => 'button-grid-Tuerca',
                                         'action6' => 'button-grid-mail',
                                         'action7' => 'button-grid-aceptarTarea',
                                         'action8' => 'button-grid-agregarArchivoCaso',
                                         'action9' => 'button-grid-pdf');
                                         
            }
            if($num == 0)
            {
                $resultado= array('total' => 1 ,
                                 'encontrados' => array('id_factibilidad' => 0 , 'nombre_factibilidad' => 'Ninguno', 'factibilidad_id' => 0 , 'factibilidad_nombre' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);
                return $resultado;
            }
            else
            {
                $dataF =json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$dataF.'}';
                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';
            return $resultado;
        }
        
    }
    /**
     * Función: getRegistrosPendientesAprobacionSolMatExc
     *
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 1.5 06-03-2023 - Se envìan nuevos valores a buscar para materiales excedentes.
     * 
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 1.4 29-12-2021 Se agrega busqueda de valores
     *                         (valor_metraje_fact, valor_obra_civil_fact, valor_otros_mate_fact) por solicitud de factibilidad.
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.3 28-05-2021 Se cambio a query nativo dada la lentitud de respuesta
     * 
     * @author Mario Ayerve <mayerve@telconet.ec>
     * @version 1.2 17-03-2021 Se actualizó la consulta, se estima retorne mas parametros.
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.1 11-01-2018 Se corrige filtro de búsqueda por login.
     * 
     * @author telcos
     * @version 1.0 
     * 
     **/       
    public function getRegistrosPendientesAprobacionSolMatExc($strStart, $strLimit, $strSearchFechaDesde, 
                                                              $strSearchFechaHasta, $strSearchLogin2, 
                                                              $strSearchDescripcionPunto, $strSearchVendedor, 
                                                              $strSearchCiudad, $strSearchNumOrdenServicio,$intCodEmpresa="")
    {        
        $objRsmb        = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null,$objRsmb);

        $strWhere = "";  
                        
        if($strSearchFechaDesde!="")
        {
            $strDateF = explode("-",$strSearchFechaDesde);
            $strFechaSql = date("Y/m/d", strtotime($strDateF[2]."-".$strDateF[1]."-".$strDateF[0]));         
            $strWhere .= " AND ds.fe_creacion >= '".trim($strFechaSql)."' ";
        }
        if($strSearchFechaHasta!="")
        {
            $strDateF = explode("-",$strSearchFechaHasta);           
            $strFechaSqlAdd = strtotime(date("Y-m-d", strtotime($strDateF[2]."-".$strDateF[1]."-".$strDateF[0])). " +1 day");
            $strFechaSql = date("Y/m/d", $strFechaSqlAdd);       
            $strWhere .= " AND ds.fe_creacion <= '".trim($strFechaSql)."' ";
        }
        
        if($strSearchLogin2!="")
        {
            $strWhere .= " AND UPPER(pto.login) like UPPER(:login) ";
            $objQuery->setParameter('login',$strSearchLogin2.'%');
        }
        
        if($strSearchDescripcionPunto!="")
        {
            $strWhere .= " AND UPPER(pto.descripcion_punto) like UPPER(:descripcion) ";
            $objQuery->setParameter('descripcion','%'.$strSearchDescripcionPunto.'%');
        }
        
        if($strSearchVendedor!="")
        {
            $strWhere .= " AND CONCAT(LOWER(vend.nombres),CONCAT(' ',LOWER(vend.apellidos))) like LOWER(:vendedor)";
            $objQuery->setParameter('vendedor','%'.$strSearchVendedor.'%');
        }
               
        if($strSearchCiudad!="")
        {
            $strWhere .= " AND UPPER(can.nombre_canton) like UPPER(:canton) ";
            $objQuery->setParameter('canton','%'.$strSearchCiudad.'%');
        }

        $strSql = " SELECT
                        s.id_servicio,
                        ds.id_detalle_solicitud,
                        s.precio_venta,
                        s.frecuencia_producto,
                        s.precio_instalacion,
                        s.tipo_orden,
                        st.tercerizadora_id,
                        pto.id_punto,
                        sec.nombre_sector,
                        parr.nombre_parroquia,
                        can.nombre_canton,
                        per.razon_social,
                        per.nombres,
                        per.apellidos,
                        jur.nombre_jurisdiccion,
                        per.id_persona,
                        pto.longitud,
                        pto.latitud,
                        pto.direccion,
                        pto.login,
                        pto.ruta_croquis,
                        ds.fe_creacion,
                        pto.usr_vendedor,
                        si.usr_creacion,
                        vend.nombres||' '||vend.apellidos NOMBRE_VENDEDOR,
                        asis.nombres||' '||asis.apellidos NOMBRE_ASISTENTE,
                        (
                            SELECT
                                solc.valor
                            FROM
                                db_comercial.info_detalle_solicitud     ds1,
                                db_comercial.admi_tipo_solicitud        ats1,
                                db_comercial.info_detalle_sol_caract    solc,
                                db_comercial.admi_caracteristica        car
                            WHERE
                                    ds1.servicio_id = s.id_servicio
                                AND ds1.id_detalle_solicitud = solc.detalle_solicitud_id
                                AND ds1.tipo_solicitud_id = ats1.id_tipo_solicitud
                                AND ats1.descripcion_solicitud = :solicitudPlanificacion
                                AND solc.estado <> :estadoEliminado
                                AND solc.caracteristica_id = car.id_caracteristica
                                AND car.descripcion_caracteristica = :caractMetrajeFact
                        )  valor_metraje,
                        (
                            SELECT
                                solc.valor
                            FROM
                                db_comercial.info_detalle_solicitud     ds1,
                                db_comercial.admi_tipo_solicitud        ats1,
                                db_comercial.info_detalle_sol_caract    solc,
                                db_comercial.admi_caracteristica        car
                            WHERE
                                    ds1.servicio_id = s.id_servicio
                                AND ds1.id_detalle_solicitud = solc.detalle_solicitud_id
                                AND ds1.tipo_solicitud_id = ats1.id_tipo_solicitud
                                AND ats1.descripcion_solicitud = :solicitudPlanificacion
                                AND solc.estado <> :estadoEliminado
                                AND solc.caracteristica_id = car.id_caracteristica
                                AND car.descripcion_caracteristica = :caractObraCivilPrecio
                        )  valor_obra_civil,
                        (
                            SELECT
                                solc.valor
                            FROM
                                db_comercial.info_detalle_solicitud     ds1,
                                db_comercial.admi_tipo_solicitud        ats1,
                                db_comercial.info_detalle_sol_caract    solc,
                                db_comercial.admi_caracteristica        car
                            WHERE
                                    ds1.servicio_id = s.id_servicio
                                AND ds1.id_detalle_solicitud = solc.detalle_solicitud_id
                                AND ds1.tipo_solicitud_id = ats1.id_tipo_solicitud
                                AND ats1.descripcion_solicitud = :solicitudPlanificacion
                                AND solc.estado <> :estadoEliminado
                                AND solc.caracteristica_id = car.id_caracteristica
                                AND car.descripcion_caracteristica = :caractOtrosMaterialesPrecio
                        )  valor_otros_mate,
                        (
                            SELECT
                                solc.valor
                            FROM
                                db_comercial.info_detalle_solicitud     ds1,
                                db_comercial.admi_tipo_solicitud        ats1,
                                db_comercial.info_detalle_sol_caract    solc,
                                db_comercial.admi_caracteristica        car
                            WHERE
                                    ds1.servicio_id = s.id_servicio
                                AND ds1.id_detalle_solicitud = solc.detalle_solicitud_id
                                AND ds1.tipo_solicitud_id = ats1.id_tipo_solicitud
                                AND ats1.descripcion_solicitud = :solicitudPlanificacion
                                AND solc.estado <> :estadoEliminado
                                AND solc.caracteristica_id = car.id_caracteristica
                                AND car.descripcion_caracteristica = :caractCopagosAsumeLaEmpresaPrecio
                        )  valor_asume_empresa,
                        (
                            SELECT
                                solc.valor
                            FROM
                                db_comercial.info_detalle_solicitud     ds1,
                                db_comercial.admi_tipo_solicitud        ats1,
                                db_comercial.info_detalle_sol_caract    solc,
                                db_comercial.admi_caracteristica        car
                            WHERE
                                    ds1.servicio_id = s.id_servicio
                                AND ds1.id_detalle_solicitud = solc.detalle_solicitud_id
                                AND ds1.tipo_solicitud_id = ats1.id_tipo_solicitud
                                AND ats1.descripcion_solicitud = :solicitudPlanificacion
                                AND solc.estado <> :estadoEliminado
                                AND solc.caracteristica_id = car.id_caracteristica
                                AND car.descripcion_caracteristica = :caractCopagosAsumeElClientePrecio
                        )  valor_asume_cliente,
                        (
                            SELECT
                                solc.valor
                            FROM
                                db_comercial.info_detalle_solicitud     ds1,
                                db_comercial.admi_tipo_solicitud        ats1,
                                db_comercial.info_detalle_sol_caract    solc,
                                db_comercial.admi_caracteristica        car
                            WHERE
                                    ds1.servicio_id = s.id_servicio
                                AND ds1.id_detalle_solicitud = solc.detalle_solicitud_id
                                AND ds1.tipo_solicitud_id = ats1.id_tipo_solicitud
                                AND ats1.descripcion_solicitud = :solicitudFactibilidad
                                AND solc.estado <> :estadoEliminado
                                AND solc.caracteristica_id = car.id_caracteristica
                                AND car.descripcion_caracteristica = :caractMetrajeFact
                        )  valor_metraje_fact,
                        (
                            SELECT
                                solc.valor
                            FROM
                                db_comercial.info_detalle_solicitud     ds1,
                                db_comercial.admi_tipo_solicitud        ats1,
                                db_comercial.info_detalle_sol_caract    solc,
                                db_comercial.admi_caracteristica        car
                            WHERE
                                    ds1.servicio_id = s.id_servicio
                                AND ds1.id_detalle_solicitud = solc.detalle_solicitud_id
                                AND ds1.tipo_solicitud_id = ats1.id_tipo_solicitud
                                AND ats1.descripcion_solicitud = :solicitudFactibilidad
                                AND solc.estado <> :estadoEliminado
                                AND solc.caracteristica_id = car.id_caracteristica
                                AND car.descripcion_caracteristica = :caractObraCivilPrecio
                        )  valor_obra_civil_fact,
                        (
                            SELECT
                                solc.valor
                            FROM
                                db_comercial.info_detalle_solicitud     ds1,
                                db_comercial.admi_tipo_solicitud        ats1,
                                db_comercial.info_detalle_sol_caract    solc,
                                db_comercial.admi_caracteristica        car
                            WHERE
                                    ds1.servicio_id = s.id_servicio
                                AND ds1.id_detalle_solicitud = solc.detalle_solicitud_id
                                AND ds1.tipo_solicitud_id = ats1.id_tipo_solicitud
                                AND ats1.descripcion_solicitud = :solicitudFactibilidad
                                AND solc.estado <> :estadoEliminado
                                AND solc.caracteristica_id = car.id_caracteristica
                                AND car.descripcion_caracteristica = :caractOtrosMaterialesPrecio
                        )  valor_otros_mate_fact,
                        (
                            SELECT
                                solc.valor
                            FROM
                                db_comercial.info_detalle_solicitud     ds1,
                                db_comercial.admi_tipo_solicitud        ats1,
                                db_comercial.info_detalle_sol_caract    solc,
                                db_comercial.admi_caracteristica        car
                            WHERE
                                    ds1.servicio_id = s.id_servicio
                                AND ds1.id_detalle_solicitud = solc.detalle_solicitud_id
                                AND ds1.tipo_solicitud_id = ats1.id_tipo_solicitud
                                AND ats1.descripcion_solicitud = :solicitudFactibilidad
                                AND solc.estado <> :estadoEliminado
                                AND solc.caracteristica_id = car.id_caracteristica 
                                AND car.descripcion_caracteristica = :caractCopagosAsumeLaEmpresaPrecio
                        )  valor_asume_empresa_fact,
                        (
                            SELECT
                                solc.valor
                            FROM
                                db_comercial.info_detalle_solicitud     ds1,
                                db_comercial.admi_tipo_solicitud        ats1,
                                db_comercial.info_detalle_sol_caract    solc,
                                db_comercial.admi_caracteristica        car
                            WHERE
                                    ds1.servicio_id = s.id_servicio
                                AND ds1.id_detalle_solicitud = solc.detalle_solicitud_id
                                AND ds1.tipo_solicitud_id = ats1.id_tipo_solicitud
                                AND ats1.descripcion_solicitud = :solicitudFactibilidad
                                AND solc.estado <> :estadoEliminado
                                AND solc.caracteristica_id = car.id_caracteristica 
                                AND car.descripcion_caracteristica = :caractCopagosAsumeElClientePrecio
                        )  valor_asume_cliente_fact
                    FROM
                        db_comercial.info_servicio               s,
                        db_comercial.info_servicio_tecnico       st,
                        db_comercial.admi_tipo_solicitud         ats,
                        db_comercial.info_detalle_solicitud      ds,
                        db_infraestructura.admi_jurisdiccion           jur,
                        db_comercial.info_persona_empresa_rol    iper,
                        db_comercial.info_persona                per,
                        db_general.admi_sector                   sec,
                        db_general.admi_parroquia                parr,
                        db_general.admi_canton                   can,
                        db_comercial.info_empresa_rol            er,
                        db_comercial.info_punto                  pto left join
                        db_comercial.info_persona vend on vend.login = pto.Usr_vendedor,
                        db_comercial.info_servicio                  si  left join   
                        db_comercial.info_persona asis on asis.login    = si.Usr_creacion
                    WHERE
                            s.id_servicio = st.servicio_id
                        AND s.id_servicio = si.id_servicio
                        AND s.punto_id = pto.id_punto
                        AND s.id_servicio = ds.servicio_id
                        AND ds.tipo_solicitud_id = ats.id_tipo_solicitud
                        AND pto.persona_empresa_rol_id = iper.id_persona_rol
                        AND iper.empresa_rol_id = er.id_empresa_rol
                        AND pto.sector_id = sec.id_sector
                        AND sec.parroquia_id = parr.id_parroquia
                        AND parr.canton_id = can.id_canton
                        AND iper.persona_id = per.id_persona
                        AND jur.id_jurisdiccion = pto.punto_cobertura_id
                        AND er.empresa_cod = :empresaCod
                        AND ats.descripcion_solicitud = :solicitudMatExc
                        AND ds.estado = :estadoPendiente
                        $strWhere
                    ORDER BY
                        ds.fe_creacion DESC";

        $objQuery->setParameter('estadoPendiente','Pendiente');
        $objQuery->setParameter('empresaCod',$intCodEmpresa );
        $objQuery->setParameter('solicitudPlanificacion','SOLICITUD PLANIFICACION');
        $objQuery->setParameter('solicitudFactibilidad','SOLICITUD FACTIBILIDAD');
        $objQuery->setParameter('solicitudMatExc','SOLICITUD MATERIALES EXCEDENTES');
        $objQuery->setParameter('caractMetrajeFact','METRAJE FACTIBILIDAD PRECIO');
        $objQuery->setParameter('caractObraCivilPrecio','OBRA CIVIL PRECIO');
        $objQuery->setParameter('caractOtrosMaterialesPrecio','OTROS MATERIALES PRECIO');
        $objQuery->setParameter('caractCopagosAsumeLaEmpresaPrecio','COPAGOS ASUME LA EMPRESA PRECIO');
        $objQuery->setParameter('caractCopagosAsumeElClientePrecio','COPAGOS ASUME EL CLIENTE PRECIO');
        $objQuery->setParameter('estadoEliminado','Eliminado');

        $objRsmb->addScalarResult('ID_SERVICIO', 'idServicio', 'integer');
        $objRsmb->addScalarResult('ID_DETALLE_SOLICITUD', 'idDetalleSolicitud', 'integer');
        $objRsmb->addScalarResult('ID_PUNTO', 'idPunto', 'integer');
        $objRsmb->addScalarResult('LOGIN', 'login', 'string');
        $objRsmb->addScalarResult('PRECIO_VENTA', 'precioVenta', 'float');
        $objRsmb->addScalarResult('PRECIO_INSTALACION', 'precioInstalacion', 'float');
        $objRsmb->addScalarResult('FRECUENCIA_PRODUCTO', 'frecuencia', 'integer');
        $objRsmb->addScalarResult('TIPO_ORDEN', 'tipoOrden', 'string');
        $objRsmb->addScalarResult('TERCERIZADORA_ID', 'tercerizadoraId', 'integer');
        $objRsmb->addScalarResult('NOMBRE_SECTOR', 'nombreSector', 'string');
        $objRsmb->addScalarResult('NOMBRE_PARROQUIA', 'nombreParroquia', 'string');
        $objRsmb->addScalarResult('NOMBRE_CANTON', 'nombreCanton', 'string');
        $objRsmb->addScalarResult('RAZON_SOCIAL', 'razonSocial', 'string');
        $objRsmb->addScalarResult('NOMBRES', 'nombres', 'string');
        $objRsmb->addScalarResult('APELLIDOS', 'apellidos', 'string');
        $objRsmb->addScalarResult('NOMBRE_JURISDICCION', 'nombreJurisdiccion', 'string');
        $objRsmb->addScalarResult('ID_PERSONA', 'id_persona', 'integer');
        $objRsmb->addScalarResult('NOMBRE_VENDEDOR', 'nombreVendedor', 'string');
        $objRsmb->addScalarResult('USR_VENDEDOR', 'usrVendedor', 'string');
        $objRsmb->addScalarResult('NOMBRE_ASISTENTE', 'nombreAsistente', 'string');
        $objRsmb->addScalarResult('USR_CREACION', 'usrAsistente', 'string');
        $objRsmb->addScalarResult('LONGITUD', 'longitud', 'float');
        $objRsmb->addScalarResult('LATITUD', 'latitud', 'float');
        $objRsmb->addScalarResult('DIRECCION', 'direccion', 'string');
        $objRsmb->addScalarResult('RUTA_CROQUIS', 'rutaCroquis', 'string');
        $objRsmb->addScalarResult('FE_CREACION', 'feCreacion', 'datetime');
        $objRsmb->addScalarResult('VALOR_METRAJE', 'valorMetraje', 'float');
        $objRsmb->addScalarResult('VALOR_OBRA_CIVIL', 'valorObraCivil', 'float');
        $objRsmb->addScalarResult('VALOR_OTROS_MATE', 'valorOtrosMate', 'float');               
        $objRsmb->addScalarResult('VALOR_ASUME_EMPRESA', 'valorAsumeEmpresa', 'float');               
        $objRsmb->addScalarResult('VALOR_ASUME_CLIENTE', 'valorAsumeCliente', 'float');               
        $objRsmb->addScalarResult('VALOR_METRAJE_FACT', 'valorMetrajeFact', 'float');
        $objRsmb->addScalarResult('VALOR_OBRA_CIVIL_FACT', 'valorObraCivilFact', 'float');
        $objRsmb->addScalarResult('VALOR_OTROS_MATE_FACT', 'valorOtrosMateFact', 'float');   
        $objRsmb->addScalarResult('VALOR_ASUME_EMPRESA_FACT', 'valorAsumeEmpresaFact', 'float');   
        $objRsmb->addScalarResult('VALOR_ASUME_CLIENTE_FACT', 'valorAsumeClienteFact', 'float');   
        
        if(isset($strStart) && isset($strLimit))
        {
            if($strStart && $strLimit)
            {
                $intInicio      = $strStart;
                $intFin         = $strStart + $strLimit;
                $strSqlFinal    = '  SELECT * FROM 
                                    (
                                        SELECT consultaPrincipal.*,rownum AS consultaPrincipal_rownum 
                                        FROM (' . $strSql . ') consultaPrincipal 
                                        WHERE rownum<=' . $intFin . '
                                    ) WHERE consultaPrincipal_rownum >' . $intInicio;
            }
            else
            {
                $strSqlFinal = '  SELECT consultaPrincipal.* 
                                    FROM (' . $strSql . ') consultaPrincipal 
                                    WHERE rownum<=' . $strLimit;
            }
        }
        else
        {
            $strSqlFinal = $strSql;
        }
        
        $objQuery->setSQL($strSql);               

        $arrayDatos = $objQuery->getResult();
       
        return $arrayDatos;
    }

    /**
     * Función: generarJsonPendientes
     *
     * @author Mario Ayerve <mayerve@telconet.ec>
     * @version 1.1 17-03-2021 Se actualizó para retornar el usuario del vendedor.
     * 
     * @author telcos
     * @version 1.0 
     * 
     **/   
    /* ******************************************** PENDIENTES ******************************************* */
    public function generarJsonPendientes($em, $start,$limit, $search_fechaDesdePlanif, $search_fechaHastaPlanif, $search_fechaDesdeIngOrd, $search_fechaHastaIngOrd, $search_login2, $search_descripcionPunto, $search_vendedor, $search_ciudad, $search_numOrdenServicio)
    {
        $arr_encontrados = array();
        
        $registrosTotal = $this->getRegistrosPendientes('', '', $search_fechaDesdePlanif, $search_fechaHastaPlanif, $search_fechaDesdeIngOrd, $search_fechaHastaIngOrd, $search_login2, $search_descripcionPunto, $search_vendedor, $search_ciudad, $search_numOrdenServicio);
        $registros = $this->getRegistrosPendientes($start, $limit, $search_fechaDesdePlanif, $search_fechaHastaPlanif, $search_fechaDesdeIngOrd, $search_fechaHastaIngOrd, $search_login2, $search_descripcionPunto, $search_vendedor, $search_ciudad, $search_numOrdenServicio);
 
        if ($registros) {
            $num = count($registrosTotal);            
            foreach ($registros as $data)
            {                  
                $nombreVendedor = (isset($data["nombreVendedor"]) ?  ($data["nombreVendedor"] ? ucwords(strtolower($data["nombreVendedor"])) : "") : "");
				$strUsrVendedor = (isset($data["usrVendedor"]) ?  ($data["usrVendedor"] ? ucwords(strtolower($data["usrVendedor"])) : "") : "");
                $Servicio = $em->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]); 
                $nombreProducto =  ($Servicio->getProductoId() ? $Servicio->getProductoId()->getDescripcionProducto() : "");  
                $nombrePlan =  ($Servicio->getPlanId() ? $Servicio->getPlanId()->getNombrePlan() : "");  
                $nombreProductoPlan = $nombreProducto . $nombrePlan;
                
                $nombreSector =  ($data["nombreSector"] ? $data["nombreSector"]  : "");    
                $parroquia =  ($data["nombreParroquia"] ? $data["nombreParroquia"]  : ""); 
                $ciudad =  ($data["nombreCanton"] ? $data["nombreCanton"]  : "");  
                $cliente = ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
                ($data["longitud"]&&$data["latitud"])?$coordenadas = $data["longitud"] . ", ". $data["latitud"]:$coordenadas ="";
                $fePlanificacion = strval(date_format($data["feCreacion"],"d/m/Y G:i"));                
                $latitud =  ($data["latitud"] ? $data["latitud"]  : "");  
                $longitud =  ($data["longitud"] ? $data["longitud"]  : "");  
                
                // ************************* RUTA DE LA IMAGEN DEL CROQUIS *************** 
                $pathCroquis = "public/uploads/croquis/";
                $pathImagenDefault = "public/images/images_crud/";
                $rutaVerificaCroquis = ($data["rutaCroquis"]!="" ? "./$pathCroquis".$data["rutaCroquis"] : "" );
                if(file_exists($rutaVerificaCroquis))
                {
                    $nombreArchivo = $data["rutaCroquis"];
                    $rutaArchivo = "/" . $pathCroquis . $nombreArchivo;
                }
                else 
                {
                    $nombreArchivo = "no_image_200_200.png";
                    $rutaArchivo = "/" . $pathImagenDefault . $nombreArchivo;
                }                
                $rutaCroquis = ($rutaArchivo!="" ?  "<img src='$rutaArchivo' title='$nombreArchivo' alt='$nombreArchivo' width='480' height='450' />" : "" );
                //$rutaCroquis = ($data["rutaCroquis"]!="" ?  "<img src='/telconet/web/public/uploads/croquis/".$data["rutaCroquis"]."' title='".$data["rutaCroquis"]."' alt='".$data["rutaCroquis"]."' width='480' height='450' />" : "" );
                                 
                $arr_encontrados[]=array(
                                         'id_factibilidad' =>$data["idDetalleSolicitud"],
                                         'id_servicio' =>$data["idServicio"],
                                         'id_punto' =>$data["idPunto"],
                                         'id_orden_trabajo' =>$data["idOrdenTrabajo"],
                                         'cliente' =>ucwords(strtolower(trim($cliente))),
                                         'usr_vendedor' =>trim($strUsrVendedor),
                                         'nombreVendedor' =>trim($nombreVendedor),
                                         'login2' =>trim($data["login"]),
                                         'producto' =>trim($nombreProductoPlan),
                                         'coordenadas' =>trim($coordenadas),
                                         'direccion' =>trim($data["direccion"]),
                                         'ciudad' =>ucwords(strtolower(trim($ciudad))),
                                         'nombreSector' =>ucwords(strtolower(trim($nombreSector))),
                                         'fePlanificacion' =>trim($fePlanificacion),
                                         'rutaCroquis' =>trim($rutaCroquis),
                                         'latitud' =>trim($latitud),
                                         'longitud' =>trim($longitud),
                                         'action1' => 'button-grid-Gmaps',
                                         'action2' => 'button-grid-Foto',
                                         'action3' => 'button-grid-BigDelete',
                                         'action4' => 'button-grid-Tuerca',
                                         'action5' => 'button-grid-Tuerca');
            }

            if($num == 0)
            {
                $resultado= array('total' => 1 ,
                                 'encontrados' => array('id_factibilidad' => 0 , 'nombre_factibilidad' => 'Ninguno', 'factibilidad_id' => 0 , 'factibilidad_nombre' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);
                return $resultado;
            }
            else
            {
                $dataF =json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$dataF.'}';
                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';
            return $resultado;
        }
        
    }


     /**
     * Costo: 3
     * getPrimeraInterface
     *
     * Método que retorna la primera interface de un elemento
     *
     * @param  array $arrayParametros  [ 'intElementoId' => Id de un elemento ]
     *
     * @return integer $intInterface
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 14-02-2018
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 03-07-2018 Se agrega búsqueda por descripción de interface para cambio de equipo de servicios Small Business 
     *                         con tipos de elemento CPE
     */
    public function getPrimeraInterface($arrayParametros)
    {
        $intInterface   = "";
        $objQuery       = $this->_em->createQuery();
        $strWhereAdic   = "";

        $strQuery   = "SELECT iie.id FROM schemaBundle:InfoInterfaceElemento iie WHERE iie.id = (SELECT MIN(iie2.id)
                            FROM schemaBundle:InfoInterfaceElemento iie2 WHERE iie2.elementoId = :paramElementoId ";
        
        if(isset($arrayParametros['strNombreInterfaceElemento']) && !empty($arrayParametros['strNombreInterfaceElemento']))
        {
            $strWhereAdic .= " AND iie2.nombreInterfaceElemento = :paramNombreInterface ";
            $objQuery->setParameter('paramNombreInterface', $arrayParametros['strNombreInterfaceElemento']);
        }
        $strQuery .= $strWhereAdic .")";

        $objQuery->setParameter('paramElementoId', $arrayParametros['intElementoId']);

        $objQuery->setDQL($strQuery);

        $intInterface = $objQuery->getSingleScalarResult();

        return $intInterface;
    }


    /**
     * Función: getRegistrosPendientes
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.1 11-01-2018 Se corrige filtro de búsqueda por login.
     *
     * @author telcos
     * @version 1.0 
     * 
     **/      
    public function getRegistrosPendientes($start, $limit, $search_fechaDesdePlanif, $search_fechaHastaPlanif, $search_fechaDesdeIngOrd, $search_fechaHastaIngOrd, $search_login2, $search_descripcionPunto, $search_vendedor, $search_ciudad, $search_numOrdenServicio)
    {
        $boolBusqueda = false; 
        $where = "";  
                        
        if($search_fechaDesdePlanif!=""){
            $dateF = explode("-",$search_fechaDesdePlanif);
            $fechaSql = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));
            
            $boolBusqueda = true;          
            $where .= "AND ds.feCreacion >= '".trim($fechaSql)."' ";
        }
        if($search_fechaHastaPlanif!=""){
            $dateF = explode("-",$search_fechaHastaPlanif);           
            $fechaSqlAdd = strtotime(date("Y-m-d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0])). " +1 day");
            $fechaSql = date("Y/m/d", $fechaSqlAdd);
            
            $boolBusqueda = true;
            $where .= "AND ds.feCreacion <= '".trim($fechaSql)."' ";
        }
        
        if($search_fechaDesdeIngOrd!=""){
            $dateF = explode("-",$search_fechaDesdeIngOrd);
            $fechaSql = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));
            
            $boolBusqueda = true;
            $where .= "AND ot.feCreacion >= '".trim($fechaSql)."' ";
        }
        if($search_fechaHastaIngOrd!=""){
            $dateF = explode("-",$search_fechaHastaIngOrd);            
            $fechaSqlAdd = strtotime(date("Y-m-d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0])). " +1 day");
            $fechaSql = date("Y/m/d", $fechaSqlAdd);
            
            $boolBusqueda = true;
            $where .= "AND ot.feCreacion <= '".trim($fechaSql)."' ";
        }
        
        if($search_login2!=""){
            $boolBusqueda = true;
            $where .= "AND UPPER(p.login) like UPPER('$search_login2%') ";
        }
        
        if($search_descripcionPunto!=""){
            $boolBusqueda = true;
            $where .= "AND UPPER(p.descripcionPunto) like UPPER('%$search_descripcionPunto%') ";
        }
        
        if($search_vendedor!=""){
            $boolBusqueda = true;
            $where .= "AND CONCAT(LOWER(peVend.nombres),CONCAT(' ',LOWER(peVend.apellidos))) like '%".strtolower(trim($search_vendedor))."%' ";
			//"AND UPPER(p.usrVendedor) like UPPER('%$search_vendedor%') ";
        }
        
        if($search_numOrdenServicio!=""){
            $boolBusqueda = true;
            $where .= "AND ot.numeroOrdenTrabajo like '$search_numOrdenServicio%' ";
        }
        /*
        if($search_sector!=""){
            $boolBusqueda = true;
            $where .= "AND se.nombreSector like '%$search_sector%' ";
        }*/
        
        if($search_ciudad!=""){
            $boolBusqueda = true;
            $where .= "AND UPPER(ca.nombreCanton) like UPPER('%$search_ciudad%') ";
        }
        
        $sql = "SELECT 
					ds.id as idDetalleSolicitud, s.id as idServicio, 
					p.id as idPunto, ot.id as idOrdenTrabajo, 
					ot.numeroOrdenTrabajo, se.nombreSector, pa.nombreParroquia, ca.nombreCanton, 
					pe.razonSocial, pe.nombres, pe.apellidos, p.usrVendedor, p.login, 
					p.longitud, p.latitud, p.direccion, p.path as rutaCroquis, ds.feCreacion,
					CONCAT(peVend.nombres,CONCAT(' ',peVend.apellidos)) as nombreVendedor 
        
                FROM 
					schemaBundle:InfoOrdenTrabajo ot, schemaBundle:InfoServicio s,
					schemaBundle:InfoDetalleSolicitud ds, 
					schemaBundle:InfoPersona pe, schemaBundle:InfoPersonaEmpresaRol per,
					schemaBundle:AdmiSector se, schemaBundle:AdmiParroquia pa, schemaBundle:AdmiCanton ca,
					schemaBundle:InfoPunto p 
        
				LEFT JOIN schemaBundle:InfoPersona peVend WITH peVend.login = p.usrVendedor 
        
                WHERE 
					ot.id = s.ordenTrabajoId 
					AND ot.puntoId = p.id
					AND s.id = ds.servicioId 
					AND p.personaEmpresaRolId = per.id 
					AND per.personaId = pe.id 
					AND p.sectorId = se.id 
					AND se.parroquiaId = pa.id 
					AND pa.cantonId = ca.id 
			
					AND LOWER(ot.estado) = LOWER('Pendiente') 
					AND LOWER(ds.estado) = LOWER('Pendiente') 
					$where 
				
				ORDER BY ds.feCreacion DESC
               ";
        
        $query = $this->_em->createQuery($sql);
        
        if($start!='' && !$boolBusqueda && $limit!='')
            $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        else if($start!='' && !$boolBusqueda && $limit=='')
            $datos = $query->setFirstResult($start)->getResult();
        else if(($start=='' || $boolBusqueda) && $limit!='')
            $datos = $query->setMaxResults($limit)->getResult();
        else
            $datos = $query->getResult();
        
        return $datos;
    }
    
    /**
     *
     * Documentación para el método 'exportarGridAction'.
     *
     * Método utilizado para exportar resultados de búsqueda a Excel
     *
     * @author Desarrollo Inicial
     * @version 1.0 
     *
     * @author Modificado: Duval Medina C. <dmedina@telconet.ec>
     * @version 1.1 2016-05-20 No mostrar el boton 'Anular' cuando el estado es 'Asignada',
     *                         Identar los parametros de los Action,
     *                         cambio de clase en botones para imagenes adecuadas
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 2016-06-22 Se agrega la informacion del metraje en los datos del cliente a mostrar
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 2016-06-23 Se envia el id de la solicitud de factibilidad al consultar el metraje del servicio. Este cambio es solo para TN
     *
     * @author Modificado: Richard Cabrera Pereira <rcabrera@telconet.ec>
     * @version 1.4 2016-08-02 Se restructura la funcion para mejorar su rendimiento
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.5 2016-10-07 Se agrega columna del estado del punto
     * 
     * @author Modificado: Allan Suarez <arsuarez@telconet.ec>
     * @version 1.6 2017-05-22 Se agrega columna del estado del servicio
     *
     * @author Modificado: Walther Joao Gaibor C. <wgaibor@telconet.ec>
     * @version 1.7 21-01-2018 Si tipo orden es C se setea el valor cambio tipo medio
     * 
     * @author Modificado: Jesús Bozada <jbozada@telconet.ec>
     * @version 1.8 21-02-2018 Se agrega validacion para solicitudes de reubicacion de servicios cambie el 
     *                         nombre de producto segun lo indicado por el usuario
     * 
     *
     * @author Modificado: Edgar Pin Villavicencio <epin@telconet.ec>
     * @version 1.9 23-03-2018 Se unifica funcionalidad de coordinar y asignar responsable
     *
     * @author Modificado: Allan Suarez <arsuarez@telconet.ec>
     * @version 2.0 28-05-2018 Se envia parametro indicando si los servicios son de Solucion o son flujo normal
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 2.1 22-11-2018 Se requiere que en la pantalla de coordinar aparezca también la observación de la solicitud
     * 
     * @since 1.9
     * 
     * @author Modificado: Jesús Bozada <jbozada@telconet.ec>
     * @version 2.1 26-09-2018 Se envia parametro indicando si los servicios son de Solucion o son flujo normal
     * @since 2.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.2 02-01-2019 Se restringe las opciones de anular y rechazar solicitudes de agregar equipo para planes
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 2.3 09-04-2019 Se agrega caracteristica que permite obtener el tipo de esquema ingresado para
     *                         los servicios internet wifi.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.4 25-06-2019 Se agrega validación para que no se muestren los botones de rechazar y anular una solicitud de migración 
     *                          asociada a servicios Small Business y TelcoHome
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.5 11-07-2019 Se agrega programación para recuperar el Modelo del Router a usar en clientes que realizan
     *                         cambios de equipo por soporte
     * @since 2.4
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.6 05-07-2019 Se agrega verificación de equipos dual band para los servicios con nuevos planes de MD y se obtiene información
     *                          de los modelos permitidos que será visualizada en la pantalla de Coordinar
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 2.7 23-05-2019 - Se agrega caracteristica que permite obtener el idIntWifiSim
     * (Id del Internet Wifi para instalación Simultánea).
     * 
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 2.8 23-09-2019 - Se agrega campo "Ingresar Seguimiento" para agregar nuevo botón en
     * módulo de planificación
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 2.9 18-11-2019 -Se agrega nuevo botón para realizar la planificación de un Producto Datos FWA.
     * 
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 3.0 20-11-2019 - Se agrega funcionalidad para obtener la caracteristica del servicio "Tipo de Red" y se agregue a la respuesta.
     *
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 3.1 24-12-2019 -Se agrega programación para obtener y retornar la primera tarea Abierta asociada a cada solicitud 
     *                          y se indica si la tarea es o no tipo HAL.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 3.2 27-01-2020 - Se agrega lógica para que aparezca el botón de "Replanificar" y "Detener" a las solicitudes
     *                           en estado "Asignada" de los servicios "Wifi Alquiler Equipos".
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 3.2 13-02-2020 -Se agrega característica que permite obtener el idIntCouSim
     *                          (Id del COU LINEAS TELEFONIA FIJA para instalación Simultánea).
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 3.3 04-05-2020 - Se agrega el tipo de solicitud: 'SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO' y 'SOLICITUD AGREGAR EQUIPO MASIVO'
     * 
     * @author David León <mdleon@telconet.ec>
     * @version 3.4 09-05-2020 -Se agrega característica para confirmar si el servicio tiene cotización y mostrar el boton del mismo.
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 3.5 30-05-2020 - Se agrega el indice 'arraySimultaneos' al arreglo de respuesta.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec> 
     * @version 3.6 23-09-2020 Se agregan validaciones para seguir el flujo del nuevo producto W + AP
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 3.7 12-10-2020 Se agrega envío de variable strProcesoEjecutante a función verificaModelosDbEnServicioInternet para permitir modelos
     *                         Wifi Dual Band de activación para el proceso de migración
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 3.8 12-04-2021 Se agrega envío de variable $strMuestraIngL2 que no permite mostrar el Ing. Ipccl2 
     *                         en planificación de productos TN FTTX
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 3.9  15-02-2021 Se agrega parámetro de salida action15 y precioFibra.
     * 
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 4.0  18-05-2021 Se valida el metraje que cubre el precio de instalación.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 4.1 12-04-2021 Se realizan modificaciones para obtener los valores de lo equipos por cambio de ont de una solicitud de agregar equipo
     *                         que deberán mostrarse en el grid
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 4.2 25-06-2021 Se modifica el valor de la variable $objServicioTecnico enviada a la función obtieneRespuestaInfoEquiposTecnico.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 4.3 20-05-2021 - Se verifica si existen productos adicionales Camara con servicio principal DATOS SAFECITY,
     *                           las adicionales no deben aparecer en el grid solo el principal.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 4.4 18-10-2021 - Se verifica si existen productos adicionales Camara o Wi-Fi con servicio adicional Switch PoE,
     *                           las servicios adicionales Camara o Wi-Fi no deben aparecer en el grid solo el Switch PoE.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 4.5 08-04-2022 Se agregan validaciones para verificar si el usuario en sesión puede acceder al grid y obtener las opciones 
     *                         que se encuentran parametrizadas.
     *
     * @author Walther Joao Gaibor C <wgaibor@telconet.ec>
     * @version 4.5 19-11-2021 - Se solicita no mostrar durante n minutos en la bandeja de PYL debido al proyecto de planificación
     *                           en linea.
     * @author Jefferson Carrillo  <jacarrillo@telconet.ec>
     * @version 4.6 20-06-2022 - Se valida que la solicitud de planificacion comercial sea solo para megaDatos
     *  se implementa  variable esPlanificacionMega para la solicitud de planificacion comercial.
     *                       
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 4.8 14-12-2021 - Se cambia el diseño y también la lógica interna del action15
     *           (Se añadió la información para PROYECTOS/CLIENTES EXCEPCIÓN y COPAGOS)
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 4.9 01-08-2022 Se agrega la validación en la observación de la planificación para el producto INTERNET VPNoGPON,
     *                         se obtiene la cantidad de servicios adicionales.
     * 
     * @author Jefferson Leon <jlleona@telconet.ec>
     * @version 5.0 11-11-2022 Se elimina validaciones sobre la forma de enlace y el tipo de orden al visualizar botón Validador de Excedentes
     *                    
     * @author Andrés Montero H.  <amontero@telconet.ec>
     * @version 4.9 22-06-2022 - Se realizan ajustes para consultar solicitudes con nueva función getRegistrosSolicitudesPlanificar.
     *                           Esta función permite obtener la información desde el paquete DB_COMERCIAL.CMKG_SOLICITUD_CONSULTA.P_GET_SOLICITUDES
     *
     * @author Jubert Goya  <jgoya@telconet.ec>
     * @version 5.1 06-01-2023 - Se reemplaza el carácter "\" antes de que presente la información en el listado y en el reporte de excel.
 
     * @author Jubert Goya  <jgoya@telconet.ec>
     * @version 5.2 23-02-2023 - Se agrega boolEsXLS para verificar que el tipo de consulta sea XLS y que en cierta variables que no son necesarias
     *                           en el excel no se procesen, asi disminuyendo tiempo de carga de exportación  
     * 
     * @author Jonathan Mazón Sánchez  <jmazon@telconet.ec>  
     * @version 5.3 16-02-2023 - Se agrega validación de empresa Ecuanet para mostrar botones de Rechazado y Anulado.
     *
     * @author Emmanuel Martillo  <emartillo@telconet.ec>
     * @version 5.4 30-04-2023 - Se agrega validación por prefijo empresa Ecuanet para mostrar boton Replanificar.
     *
     *                           
     * @author David León <mdleon@telconet.ec>
     * @version 5.5 28-01-2023 Se agrega validación para verificar si el servicio tiene caracteristica de proyecto.
     * 
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 5.6 30-03-2023 Se agrega validación para consulta datos del proyecto asociado al servicio si aplica para generacion de excel.
     * 
     */
    public function generarJsonCoordinar($datosBusqueda)
    {
        $em                      = $this->_em;
        $objEmSoporte            = $datosBusqueda['objEmSoporte'];
        $start                   = $datosBusqueda['start'];
        $limit                   = $datosBusqueda['limit'];

        $codEmpresa              = $datosBusqueda['codEmpresa'];
        $prefijoEmpresa          = $datosBusqueda['prefijoEmpresa'];
        $tipoConsulta            = isset($datosBusqueda['tipoConsulta'])?$datosBusqueda['tipoConsulta']:'';
        $emNaf                   = $datosBusqueda['emNaf'];
        $arr_encontrados         = array();
        $switch                  = "";
        $strNombreProyecto       = "";
        $strFechaIngArticulo     = "";
        $puerto                  = "";
        $hilo                    = "";
        $strTituloCoordinar      = '';
        $strHtmlNombreProducto   = "";
        $intPrecioFibra          = 0;
        $intMetrosDeDistancia    = 0;
        $strSolExcedenteMaterial = '';
        $boolNegritaEstado = false;
        $boolTextoColor = false;
        // Obtengo el servicio desde los parámetros, validando que cumpla con las condiciones necesarias.
        $objPlanificarService    = isset($datosBusqueda['planificarService']) && is_object($datosBusqueda['planificarService']) ?
                                    $datosBusqueda['planificarService'] : null;
        $serviceInfoServicio     = isset($datosBusqueda['serviceInfoServicio']) && is_object($datosBusqueda['serviceInfoServicio']) ?
                                    $datosBusqueda['serviceInfoServicio'] : null;

        
        $arraySolProdParamsConsultaCoordinar        = array();
        $arrayPersonalizacionOpcionesGridCoordinar  = array();
        if(method_exists($objPlanificarService, 'obtenerInfoPerfilesParamsCoordinacionYActivacion') 
            && isset($datosBusqueda['arrayParamsVerifPerfilesCoordinar']) && !empty($datosBusqueda['arrayParamsVerifPerfilesCoordinar']))
        {
            $arrayRespInfoPerfilesCoordYActiv = $objPlanificarService->obtenerInfoPerfilesParamsCoordinacionYActivacion(
                                            $datosBusqueda['arrayParamsVerifPerfilesCoordinar']);
            $datosBusqueda["intNumTotalFiltrosConsultaCoordinar"] = $arrayRespInfoPerfilesCoordYActiv["intNumTotalFiltrosConsultaCoordinar"];
            $datosBusqueda["arrayFiltrosConsultaCoordinar"]       = $arrayRespInfoPerfilesCoordYActiv["arrayFiltrosConsultaCoordinar"];
            $arraySolProdParamsConsultaCoordinar                  = $arrayRespInfoPerfilesCoordYActiv["arraySolProdParamsConsultaCoordinar"];
            $arrayPersonalizacionOpcionesGridCoordinar            = $arrayRespInfoPerfilesCoordYActiv["arrayPersonalizacionOpcionesGridCoordinar"];
            if(isset($datosBusqueda["arrayFiltrosConsultaCoordinar"]) && !empty($datosBusqueda["arrayFiltrosConsultaCoordinar"]))
            {
                $datosBusqueda['tipoSolicitudPerfilesCoordinar']    = $datosBusqueda['tipoSolicitud'];
                $datosBusqueda['tipoSolicitud']                     = $datosBusqueda['tipoSolicitudPeticion'];
                $datosBusqueda['arrayTipoOrdenPerfilesCoordinar']   = $datosBusqueda['arrayTipoOrden'];
                $datosBusqueda['arrayTipoOrden']                    = "";
            }
        }
        
        $arrayParametrosCoordinarSol                  = $datosBusqueda;
        $arrayParametrosCoordinarSol['prodAdicional'] = '';
        $arrayDescProds                               = $arrayParametrosCoordinarSol["arrayDescripcionProducto"];
        $arrayDescProdExceps                          = $arrayParametrosCoordinarSol["arrayDescripcionProductoExcepcion"];
        $arrayCiudadesParam                           = $arrayParametrosCoordinarSol["ciudad"];
        $arrayTipoOrdenesParam = (!empty($arrayParametrosCoordinarSol["arrayTipoOrden"]))?
                                 $arrayParametrosCoordinarSol["arrayTipoOrden"]:$arrayParametrosCoordinarSol['arrayTipoOrdenPerfilesCoordinar'];
        
        if (is_array($arrayDescProds))
        {
            foreach($arrayDescProds as $arrayDescProd)
            {
                $arrayProd[] = "'".$arrayDescProd[0]."'";
            }
        }
        if (is_array($arrayDescProdExceps))
        {
            foreach($arrayDescProdExceps as $arrayDescProdExcep)
            {
                $arrayProdExcep[] = "'".$arrayDescProdExcep[0]."'";
            }
        }
        if (is_array($arrayParametrosCoordinarSol["ciudad"]))
        {
            foreach($arrayCiudadesParam as $arrayCiudadParam)
            {
                if ($arrayCiudadParam <> '')
                {
                    $arrayCiudadP[] = "'".$arrayCiudadParam."'";
                }
            }
        }
        
        if (is_array($arrayTipoOrdenesParam) && count($arrayTipoOrdenesParam)>0)
        {
            foreach($arrayTipoOrdenesParam as $arrayTipoOrdenParam)
            {
                $arrayTipoO[] = "'".$arrayTipoOrdenParam[0]."'";
            }
        }
        
        $arrayParametrosCoordinarSol["arrayDescripcionProducto"]=(count($arrayParametrosCoordinarSol["arrayDescripcionProducto"])>0)?
                             implode(",",$arrayProd):null;
        
        $arrayParametrosCoordinarSol["arrayDescripcionProductoExcepcion"]= 
                             (count($arrayParametrosCoordinarSol["arrayDescripcionProductoExcepcion"])>0)?implode(",",$arrayProdExcep):null;
                
        $arrayParametrosCoordinarSol["ciudad"] = (count($arrayCiudadP)>0)?implode(",",$arrayCiudadP):null;
        
        $arrayParametrosCoordinarSol["arrayFiltrosConsultaCoordinar"]  = (count($arrayParametrosCoordinarSol["arrayFiltrosConsultaCoordinar"])>0)?
                                                                         json_encode($arrayParametrosCoordinarSol["arrayFiltrosConsultaCoordinar"])  
                                                                         :null;
        $arrayParametrosCoordinarSol["arrayTipoOrden"]                 = (count($arrayTipoO)>0 && 
                                                                         !empty($arrayParametrosCoordinarSol["arrayTipoOrden"]))?
                                                                         implode(",",$arrayTipoO):null;
        $arrayParametrosCoordinarSol["arrayTipoOrdenPerfilesCoordinar"]= (count($arrayTipoO)>0 && 
                                                                         !empty($arrayParametrosCoordinarSol["arrayTipoOrdenPerfilesCoordinar"]) )?
                                                                         implode(",",$arrayTipoO):null;

        $arrayRegistrosRespuesta = $this->getRegistrosSolicitudesPlanificar($arrayParametrosCoordinarSol);
        $intTotal                = $arrayRegistrosRespuesta['total'] ? $arrayRegistrosRespuesta['total'] : 0;
        
        if (!empty($arrayRegistrosRespuesta) && $intTotal > 0)
        {
            $strJsonRespuesta = preg_replace('/\\\+/', '', $arrayRegistrosRespuesta['objJsonRespuesta']);
            $strJsonRespuesta   = trim(preg_replace('/\s+/', ' ', $strJsonRespuesta));
            $arrayRespuestaJson = json_decode($strJsonRespuesta);
        
            $arrayRegistros = array();
            foreach($arrayRespuestaJson as $objDato)
            {
                $arrayRegistros[] =  (array) $objDato;
            }
        }

        if ($arrayRegistros)
        {
            //seteo el contador para los servicios ocultos
            $intContServicioOculto = 0;
            $num = $intTotal;
            
            $objAdmiParametroCabMovil       = $em->getRepository('schemaBundle:AdmiParametroCab')
                                                 ->findOneBy( array('nombreParametro' => 'PARAMETROS_GENERALES_MOVIL', 
                                                                    'estado'          => 'Activo') );
                                                                 
            foreach ($arrayRegistros as $key=>$data)
            {
                $boolNegritaEstado = false;
                $boolMarcarRechazo =  false;
                $strObsEquiposGrid = "";
                $strLineaNegocio   = '';
                $strGrupo          = '';
                $boolEsXLS         = ($tipoConsulta === 'XLS');
                $strHtmlNombreProducto = "";
                $strObservacionAdicional        = "";
                $boolPermiteAnular              = true;
                $boolPermiteRechazar            = true;
                $boolPermisoEspecialAnular      = false;
                $boolPermisoEspecialRechazar    = false;
                $strNombreProyecto              = "";

                $Servicio = $em->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]); 

                if(is_object($Servicio))
                {
                    $objInfoServicioProdCaractPro = $datosBusqueda['serviceTecnico']->getServicioProductoCaracteristica($Servicio,
                                                                                                        'PROYECTO_CRM',
                                                                                                            $Servicio->getProductoId());
                    if(is_object($objInfoServicioProdCaractPro) && $emNaf != null)
                    {
                        $intProyectoId = $objInfoServicioProdCaractPro->getValor();
                        if(!empty($intProyectoId))
                        {
                            $arrayParametros['intIdProyecto']      = $intProyectoId;
                        }
                        $intIdEmpresa                         = $codEmpresa;
                        $arrayParametros['intIdEmpresa']      = $intIdEmpresa;
                        $arrayProyectos                       = $emNaf->getRepository('schemaBundle:admiProyectos')
                                                                     ->getProyectos($arrayParametros);

                        if(is_array($arrayProyectos))
                        {
                            $strNombreProyecto = $arrayProyectos['registros'][0]['NOMBRE'];
                        }
                    }
                }

                if (($prefijoEmpresa == "MD" || $prefijoEmpresa == "EN") &&  isset($datosBusqueda["esPlanificacionMega"]))
                {
                //Validación del tiempo parametrizado que no se muestre en la bandeja PYL
                    $arrayTiempoAutoma = $em->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne('TIEMPO_BANDEJA_PLAN_AUTOMATICA',
                                                        'COMERCIAL',
                                                        '',
                                                        '',
                                                        '',
                                                        '',
                                                        '',
                                                        '',
                                                        '',
                                                        $codEmpresa);
                                                

                    $boolPlanifica = false;
                    $objPunto      = $em->getRepository('schemaBundle:InfoPunto')
                                        ->findOneById($data["idPunto"]);


                    if(is_object($objPunto))
                    {
                        $arrayPunto    = $em->getRepository('schemaBundle:InfoPunto')
                                            ->findBy(array( 
                                                    "personaEmpresaRolId" => $objPunto->getPersonaEmpresaRolId(), 
                                                    "estado"              => 'Activo')
                                                    );

                        foreach($arrayPunto as $objPuntoServ)
                        {
                            $arrayServicios  = $em->getRepository('schemaBundle:InfoServicio')
                                                    ->findBy(array( 
                                                        "puntoId" => $objPuntoServ->getId(), 
                                                        "estado"  => array('Factible','PrePlanificada'))
                                                        );

                            foreach($arrayServicios as $objServicio)
                            {
                                if($objServicio->getPlanId() != null && $objPunto->getId() == $objPuntoServ->getId() )
                                {
                                    $boolPlanifica = true;
                                }
                            }
                        }
                    }

                    $objAdendum = $em->getRepository('schemaBundle:InfoAdendum')
                                    ->findOneByServicioId($data["idServicio"]);

                    if (is_object($objAdendum) && $objAdendum->getTipo() == "AS")
                    {
                        $boolPlanifica = false;
                    } 

                    $objServHist = $em->getRepository('schemaBundle:InfoServicioHistorial')
                    ->findOneBy(array("servicioId" => $data["idServicio"],
                                    "usrCreacion" => 'PLANIF_COMERCIAL'));

                    $objFechaEvaluar = new \DateTime($data["feCreacion"]);
                    $objFechaEvaluar->add(new \DateInterval('PT' . $arrayTiempoAutoma['valor1'] . 'M'));
                    if ((!($objServHist) &&
                         !empty($arrayTiempoAutoma) && 
                        !empty($arrayTiempoAutoma['valor1']) && !empty($arrayTiempoAutoma['valor2']) &&
                        in_array($data["descripcionSolicitud"], array($arrayTiempoAutoma['valor2'])) &&
                        in_array($data["estado"], array($arrayTiempoAutoma['valor3'])) &&
                        $objFechaEvaluar >=  new \DateTime('now') 
                        && !($data['motivoId'])) && $boolPlanifica)
                    {
                        continue;
                    }
                } 
    
                $ultimaMillaText =  $em->getRepository('schemaBundle:AdmiTipoMedio')->findOneById($data["ultimaMillaId"]);
                $nombreVendedor = (isset($data["nombreVendedor"]) ?  ($data["nombreVendedor"] ? ucwords(strtolower($data["nombreVendedor"])) : "") : "");
				

                //valido si el servicio es servicio adicional SafeCity simultaneo
                if(is_object($Servicio) && is_object($Servicio->getProductoId())
                   && !empty($datosBusqueda['serviceTecnico']) && is_object($datosBusqueda['serviceTecnico']))
                {
                    $arrayParProductoVisible = $em->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('NUEVA_RED_GPON_TN',
                                                                 'COMERCIAL',
                                                                 '',
                                                                 '',
                                                                 $Servicio->getProductoId()->getId(),
                                                                 'FLUJO_OCULTO',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 $codEmpresa);
                    if(isset($arrayParProductoVisible) && !empty($arrayParProductoVisible)
                        && isset($arrayParProductoVisible['valor3']) && !empty($arrayParProductoVisible['valor3'])
                        && isset($arrayParProductoVisible['valor4']) && !empty($arrayParProductoVisible['valor4']))
                    {
                        $strDescCaract    = $arrayParProductoVisible['valor3'];
                        $strPermiteCaract = $arrayParProductoVisible['valor4'];
                        $objServProdCaractValServ = $datosBusqueda['serviceTecnico']->getServicioProductoCaracteristica($Servicio,
                                                                                                            $strDescCaract,
                                                                                                            $Servicio->getProductoId());
                        if((!is_object($objServProdCaractValServ) && $strPermiteCaract == "NO") ||
                           (is_object($objServProdCaractValServ) && $strPermiteCaract == "SI"))
                        {
                            $intContServicioOculto++;
                            continue;
                        }
                        //validar si existe un SW POE adicional
                        //obtener servicio SW POE
                        $arrayParServSwPoe = array(
                            "objPunto"      => $Servicio->getPuntoId(),
                            "strParametro"  => "PRODUCTO_ADICIONAL_SW_POE",
                            "strCodEmpresa" => $codEmpresa
                        );
                        $arrayResultServicioSwPoe = $datosBusqueda['serviceTecnico']->getServicioGponPorProducto($arrayParServSwPoe);
                        if($arrayResultServicioSwPoe['status'] == "OK")
                        {
                            $objServicioSwPoe = $arrayResultServicioSwPoe['objServicio'];
                            if(is_object($objServicioSwPoe) && $objServicioSwPoe->getEstado() == $Servicio->getEstado()
                               && $objServicioSwPoe->getId() != $Servicio->getId())
                            {
                                $intContServicioOculto++;
                                continue;
                            }
                        }
                    }
                }

                $objPunto = $em->getRepository('schemaBundle:InfoPunto')->findOneById($data["idPunto"]);
                $strNombreProducto =((is_object($Servicio) && $Servicio->getProductoId())? $Servicio->getProductoId()->getDescripcionProducto() : "");
                $strNombrePlan =  ( (is_object($Servicio) && $Servicio->getPlanId())? $Servicio->getPlanId()->getNombrePlan() : "");  
                $strNombreProductoPlan = $strNombreProducto . $strNombrePlan;
                if ($prefijoEmpresa == 'TN' && $data["tipoOrden"]== 'R')
                {
                    $strNombreProductoPlan = "Reubicación de servicios";
                }
                
                if ($prefijoEmpresa == "MD" && is_object($Servicio) && is_object($Servicio->getProductoId()) 
                    && !$boolEsXLS)
                {
                    $strNombreTecnicoMd = $Servicio->getProductoId()->getNombreTecnico();
                    if ($strNombreTecnicoMd == "NETHOME")
                    {
                        $arrayParametrosNetHome = array("intIdServicio" => $data["idServicio"],
                                                        "strProceso"    => "coordinar");
                        $strHtmlNombreProducto = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                    ->getDatosServicioProductoNethome($arrayParametrosNetHome); 
                        $strHtmlNombreProducto = str_replace("NOMBREPRODUCTO",
                                                             $strNombreProducto,    
                                                             $strHtmlNombreProducto);
                    }
                }
				$jurisdiccion =  ($data["nombreJurisdiccion"] ? $data["nombreJurisdiccion"]  : "Sin Jurisdiccion");  
                $nombreSector =  ($data["nombreSector"] ? $data["nombreSector"]  : "");    
                $parroquia =  ($data["nombreParroquia"] ? $data["nombreParroquia"]  : ""); 
                $ciudad =  ($data["nombreCanton"] ? $data["nombreCanton"]  : "");  
                $cliente = ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
                ($data["longitud"]&&$data["latitud"])?$coordenadas = $data["longitud"] . ", ". $data["latitud"]:$coordenadas ="";

                $strFeSolicitaPlanificacion = strval(date_format(new \DateTime($data["feCreacion"]),"d/m/Y G:i"));            
                $latitud =  ($data["latitud"] ? $data["latitud"]  : "");  
                $longitud =  ($data["longitud"] ? $data["longitud"]  : "");  
                
                     // ************************* RUTA DE LA IMAGEN DEL CROQUIS ***************
                $strPathCroquis = "public/uploads/croquis/";
                $strPathImagenDefault = "public/images/images_crud/";
                $strRutaVerificaCroquis = ($data["rutaCroquis"] != "" ? "./$strPathCroquis" . $data["rutaCroquis"] : "" );
                if (file_exists($strRutaVerificaCroquis)) 
                {
                    $strNombreArchivo = $data["rutaCroquis"];
                    $strRutaArchivo = "/" . $strPathCroquis . $strNombreArchivo;
                } else {
                    $strNombreArchivo = "no_image_200_200.png";
                    $strRutaArchivo = "/" . $strPathImagenDefault . $strNombreArchivo;
                }
                $rutaCroquis = ($strRutaArchivo != "" ? 
                        "<img src='$strRutaArchivo' title='$strNombreArchivo' alt='$strNombreArchivo' width='480' height='450' />" : "" );           
                
                
				if($data["tipoOrden"]){
					switch ($data["tipoOrden"]) {
					   case "N":
							 $tipo_orden = "Nuevo";
							 break;
					   case "T":
							 $tipo_orden = "Traslado";
							 break;
					   case "R":
							 $tipo_orden = "Reubicacion";
							 break;
                       case "C":
							 $tipo_orden = "Cambio Tipo Medio";
							 break;
						default:
							$tipo_orden = "Nuevo";
							 break;
					}
				}else{
					$tipo_orden = "Nuevo";
				}
				
                $fePlanificada          = "";
                $HoraIniPlanificada     = "";
                $HoraFinPlanificada     = "";
                $intIdDetalle           = null;
                $boolEsHal              = false;
                $intIdComunicacionTarea = null;
                $intIdDetalleTarea      = null;
                if( strtoupper($data["estado"])!=strtoupper("PrePlanificada"))
                {
                    $HistDetalles = $em->getRepository('schemaBundle:InfoDetalleSolHist')->findOneDetalleSolicitudHistorial($data["idDetalleSolicitud"], $data["estado"]);
                    if($HistDetalles && count($HistDetalles)>0)
                    {
						$DetalleHistorial = $HistDetalles;
						if($DetalleHistorial->getFeIniPlan() && $DetalleHistorial->getFeFinPlan() ){
							$fePlanificada = strval(date_format($DetalleHistorial->getFeIniPlan(), "d/m/Y"));  
							$HoraIniPlanificada = strval(date_format($DetalleHistorial->getFeIniPlan(),"G:i"));  
							$HoraFinPlanificada = strval(date_format($DetalleHistorial->getFeFinPlan(),"G:i"));   
						}
                    }                    
                    if (!$boolEsXLS)
                    {
                        //CONSULTA SI LA SOLICITUD TIENE CREADA TAREA ABIERTA
                        $arrayInfoDetalleExistentes = $em->getRepository('schemaBundle:InfoDetalle')
                                                        ->findBy(array('detalleSolicitudId'=>$data["idDetalleSolicitud"]));
                        foreach($arrayInfoDetalleExistentes as $objInfoDetalle)
                        { 
                            $intIdDetalle = $objInfoDetalle->getId();
                        }
                        if(isset($intIdDetalle) && $intIdDetalle != null)
                        {
                            $arrayTareaAbierta = $em->getRepository('schemaBundle:InfoDetalleAsignacion')
                            ->getTareaAbierta(array ('intIdDetalle'      => $intIdDetalle,
                                                    'arrayEstadosTarea' => 
                                                    array('Finalizada','Cancelada','Anulada')
                                                    ));
                            $arrayRespuestaTareasAbiertas = $arrayTareaAbierta['result'];
                            if (isset($arrayRespuestaTareasAbiertas) && !empty($arrayRespuestaTareasAbiertas))
                            {
                                $arrayResulExisteHal = $objEmSoporte->getRepository('schemaBundle:InfoCuadrillaPlanifCab')
                                ->tareaExisteEnHal(array ('intNumeroTarea' => $arrayRespuestaTareasAbiertas[0]['idComunicacion'],
                                                        'strEstadoCab'   => 'Activo',
                                                        'strEstadoDet'   => 'Activo'));
                                if (!empty($arrayResulExisteHal) && count($arrayResulExisteHal) > 0
                                    && $arrayResulExisteHal['resultado'] === 'ok')
                                {
                                    $boolEsHal = $arrayResulExisteHal['existeTarea'];
                                }
                                $intIdComunicacionTarea = $arrayRespuestaTareasAbiertas[0]['idComunicacion'];
                                $intIdDetalleTarea      = $arrayRespuestaTareasAbiertas[0]['idDetalle'];
                            }
                        }
                    }
                }
                
                if($data['tercerizadoraId']){
                    $infoPersona = $em->getRepository('schemaBundle:InfoPersona')->find($data["tercerizadoraId"]); 
                    $tercerizadora = sprintf("%s",$infoPersona);
                }else{
                    $tercerizadora = "";
                }
                
                $caja = "";
                $splitterMigra = "";
                 $strTipoEnlace = "";
                //Se obtiene informacion de splitter de migracion en caso de tenerlo
                if($data['idServicioTecnico'])
                {
                    $servicioTecnico = $em->getRepository('schemaBundle:InfoServicioTecnico')->find($data["idServicioTecnico"]);
                    
                    if($servicioTecnico)
                    {
                        //tipo de enlace
                        $strTipoEnlace = $servicioTecnico->getTipoEnlace();
                        
                        $idCaja = $servicioTecnico->getElementoContenedorId();   //Caja
                        if($idCaja)
                        {
                            $caja = sprintf("%s", $em->getRepository('schemaBundle:InfoElemento')->find($idCaja));                                                                        
                        }
                        
                        $idConector = $servicioTecnico->getElementoConectorId(); //Splitter
                        if($idConector)
                        {                                                                  
                            $splitter = $em->getRepository('schemaBundle:InfoElemento')->findOneBy(array('refElementoId'=>$idConector));
                            if($splitter)
                            {
                                $splitterMigra = sprintf("%s", $splitter);                                                                        
                            }
                        }
                        
                        if($prefijoEmpresa == "TN" && $tipoConsulta=="XLS"){
                            $idSW = $servicioTecnico->getElementoId();   //Switch
                            if($idSW)
                            {
                                $switch = sprintf("%s", $em->getRepository('schemaBundle:InfoElemento')->find($idSW));                                                                        
                            }

                            $idPuerto = $servicioTecnico->getInterfaceElementoId();   //Puerto
                            if($idPuerto)
                            {
                                $puerto = sprintf("%s", $em->getRepository('schemaBundle:InfoInterfaceElemento')->find($idPuerto));                                                                        
                            }

                            $idHilo = $servicioTecnico->getInterfaceElementoConectorId();   //Hilo
                            if($idHilo)
                            {
                                $arrDatosHilo    = $em->getRepository('schemaBundle:InfoServicioTecnico')
                                                                     ->getDatosHiloPorConector($idHilo,$datosBusqueda["emComercial"]);
                                if($arrDatosHilo['status']=='OK')
                                {
                                    $arrayDatosHilo = $arrDatosHilo['data'];
                                    $hilo = $arrayDatosHilo['numeroHilo']. " - ".$arrayDatosHilo['colorHilo'];
                                }
                                else
                                {
                                    $hilo = $arrDatosHilo['data'];
                                }
                            }
                        }
                    }
                }
                $strFeCreacion = strval(date_format(new \DateTime($data["feCreacion"]), "d/m/Y"));
                if ( !$boolEsXLS ) 
                {
                    $esRecontratacion = $em->getRepository('schemaBundle:InfoPersonaEmpresaRol')->esRecontratacion($data['id_persona'],$codEmpresa);
                }

				//formas de contacto
				$strTelefonos = "";
                if ( is_object($objPunto) )
                {
                    $arrayFormasContactoPunto = $em->getRepository('schemaBundle:InfoPuntoFormaContacto')
                                                   ->findPorEstadoPorPunto($objPunto->getId(),'Activo',6,0);
                    if($arrayFormasContactoPunto['registros'])
                    {
                        $arrayFormasContactoPuntos = $arrayFormasContactoPunto['registros']; 
                        $j = 0;
                        foreach($arrayFormasContactoPuntos as $objFormaContactoPunto)
                        {
                            $strFormaContacto = $objFormaContactoPunto->getFormaContactoId()->getDescripcionFormaContacto();
                            if (strpos($strFormaContacto, 'Telefono') !== false)
                            {
                                if($j==0)
                                    $strTelefonos.= $objFormaContactoPunto->getValor();
                                else
                                    $strTelefonos.= "-".$objFormaContactoPunto->getValor();
                                    
                                $j++;
                            }
                        }
                    }
                }

				//motivos y observacion
				$motivo = "";
				$observacionMotivo = "";
				
				$detalleSolHist = $em->getRepository('schemaBundle:InfoDetalleSolHist')->findOneBy(array("detalleSolicitudId"=>$data['idDetalleSolicitud']) , array('id' => 'DESC') );
				
				if($detalleSolHist){
					if($detalleSolHist->getMotivoId()){
						$admiMotivo = $em->getRepository('schemaBundle:AdmiMotivo')->find($detalleSolHist->getMotivoId());
						$motivo = $admiMotivo->getNombreMotivo();
						$observacionMotivo = $detalleSolHist->getObservacion();
					}
				}
                $strTituloCoordinar = "";
                $strMetraje = "";
                if($prefijoEmpresa == "TN")
                {

                    $objCaracteristicaFibraMetros     = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneByDescripcionCaracteristica('METRAJE FACTIBILIDAD');

                    // Busca la caracteristica de obra civil.
                    $objCaracteristicaOCivil = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneByDescripcionCaracteristica('OBRA CIVIL PRECIO');

                    // Busca la caracteristica de otros materiales.
                    $objCaracteristicaOtrosMateriales = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneByDescripcionCaracteristica('OTROS MATERIALES PRECIO');

                    $objCaracteristicaCancPorCli      = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneByDescripcionCaracteristica('COPAGOS CANCELADO POR EL CLIENTE PORCENTAJE');

                    $objCaracteristicaAsumeEmpresa   = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneByDescripcionCaracteristica('COPAGOS ASUME LA EMPRESA PRECIO');

                    $objCaracteristicaAsumeCli      = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                            ->findOneByDescripcionCaracteristica('COPAGOS ASUME EL CLIENTE PRECIO');

                    // Busca la caracteristica de metraje
                    $entityTipoSolicitudFact = $em->getRepository('schemaBundle:AdmiTipoSolicitud')
                                              ->findOneBy(array("descripcionSolicitud" => "SOLICITUD FACTIBILIDAD",
                                                                "estado"               => "Activo"));

                    // Busca el tipo de solicitud planificación
                    $emTipoSolicitudPlan = $em->getRepository('schemaBundle:AdmiTipoSolicitud')
                                            ->findOneBy(array("descripcionSolicitud" => "SOLICITUD PLANIFICACION",
                                                                "estado"             => "Activo"));                    
                    $floatValorCaractOCivil          = 0;
                    $floatValorCaractOtrosMateriales = 0;
                    $floatValorCaractCancPorCli      = 0;
                    $floatValorCaractAsumeCli        = 0;
                    $floatValorCaractAsumeEmpresa    = 0;
                    
                    if($entityTipoSolicitudFact)
                    {
                        // Busca la caracteristica de metraje
                        $entityDetalleSolicitudFact = $em->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                     ->findOneBy(array("servicioId"      => $data["idServicio"],
                                                                       "tipoSolicitudId" => $entityTipoSolicitudFact->getId()));
                        if($entityDetalleSolicitudFact)
                        {
                            $objInfoDetalleSolCaractFibraMetros          = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                    ->findOneBy(array('caracteristicaId' => $objCaracteristicaFibraMetros,
                                                                    'detalleSolicitudId' => $entityDetalleSolicitudFact->getId()   ));
                            $objInfoDetalleSolCaractOCivil              = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                    ->findOneBy(array('caracteristicaId' => $objCaracteristicaOCivil,
                                                                    'detalleSolicitudId' => $entityDetalleSolicitudFact->getId()   ));
                            $entityOtrosMateriales                       = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                    ->findOneBy(array('caracteristicaId' => $objCaracteristicaOtrosMateriales,
                                                                    'detalleSolicitudId' => $entityDetalleSolicitudFact->getId()   ));
                            $objInfoDetalleSolCaractCancPorCli          = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                    ->findOneBy(array('caracteristicaId' => $objCaracteristicaCancPorCli,
                                                                    'detalleSolicitudId' => $entityDetalleSolicitudFact->getId()   ));
                            $objInfoDetalleSolCaractAsumeCli            = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                    ->findOneBy(array('caracteristicaId' => $objCaracteristicaAsumeCli,
                                                                    'detalleSolicitudId' => $entityDetalleSolicitudFact->getId()   ));
                            $objInfoDetalleSolCaractAsumeEmpresa        =  $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                    ->findOneBy(array('caracteristicaId' => $objCaracteristicaAsumeEmpresa,
                                                                    'detalleSolicitudId' => $entityDetalleSolicitudFact->getId() ));
                        }
                        
                        //  ====== valores de solicitud de Plan: de OBRA CIVIL PRECIO, OTROS MATERIALES PRECIO, etc  =====
                        if($emTipoSolicitudPlan)
                        {   
                             // Busca la de solicitud planificación del id_servicio 
                            $emDetalleSolicitudPlan = $em->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                        ->findOneBy(array("servicioId"      => $data["idServicio"],
                                                                        "tipoSolicitudId" => $emTipoSolicitudPlan->getId()));
                            if($emDetalleSolicitudPlan)
                            {
                                $objInfoDetalleSolCaractFibraMetrosPla = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                ->findOneBy(array('caracteristicaId' => $objCaracteristicaFibraMetros,
                                                                'detalleSolicitudId' => $emDetalleSolicitudPlan->getId()  ));

                                $objInfoDetalleSolCaractOCivilPla = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                        ->findOneBy(array('caracteristicaId' => $objCaracteristicaOCivil,
                                                                        'detalleSolicitudId' => $emDetalleSolicitudPlan->getId()  ));

                                $entityOtrosMaterialesPla = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                        ->findOneBy(array('caracteristicaId' => $objCaracteristicaOtrosMateriales,
                                                                        'detalleSolicitudId' => $emDetalleSolicitudPlan->getId()  ));

                                $objInfoDetalleSolCaractCancPorCliPla      = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                        ->findOneBy(array('caracteristicaId' => $objCaracteristicaCancPorCli,
                                                                        'detalleSolicitudId' => $emDetalleSolicitudPlan->getId()      ));

                                $objInfoDetalleSolCaractAsumeCliPla        = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                        ->findOneBy(array('caracteristicaId' => $objCaracteristicaAsumeCli,
                                                                        'detalleSolicitudId' => $emDetalleSolicitudPlan->getId()     ));

                                $objInfoDetalleSolCaractAsumeEmpresaPla    = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                    ->findOneBy(array('caracteristicaId' => $objCaracteristicaAsumeEmpresa,
                                                                'detalleSolicitudId' => $emDetalleSolicitudPlan->getId() ));
                            }
                        }
                        // Si existe la entidad obtiene el valor de solicitud de planificacion.
                        if($objInfoDetalleSolCaractFibraMetrosPla)
                        {
                            $strMetraje = $objInfoDetalleSolCaractFibraMetrosPla->getValor();
                            // Si existe la entidad obtiene el valor.
                            if($objInfoDetalleSolCaractOCivilPla)
                            {
                                $floatValorCaractOCivil = $objInfoDetalleSolCaractOCivilPla->getValor();
                            }
                            // // Si existe la entidad obtiene el valor.
                            if($entityOtrosMaterialesPla)
                            {
                                $floatValorCaractOtrosMateriales = $entityOtrosMaterialesPla->getValor();
                            }                        
                            if($objInfoDetalleSolCaractCancPorCliPla)
                            {
                                $floatValorCaractCancPorCli = $objInfoDetalleSolCaractCancPorCliPla->getValor();
                            }
                            if($objInfoDetalleSolCaractAsumeCliPla)
                            {
                                $floatValorCaractAsumeCli = $objInfoDetalleSolCaractAsumeCliPla->getValor();
                            }
                            if($objInfoDetalleSolCaractAsumeEmpresaPla)
                            {
                                $floatValorCaractAsumeEmpresa = $objInfoDetalleSolCaractAsumeEmpresaPla->getValor();
                            }
                        }
                        // si no obtiene los valores de solicitud de factibilidad
                        else  if($objInfoDetalleSolCaractFibraMetros)
                        {
                            $strMetraje = $objInfoDetalleSolCaractFibraMetros->getValor();
                            // Si existe la entidad obtiene el valor.
                            if($objInfoDetalleSolCaractOCivil)
                            {
                                $floatValorCaractOCivil = $objInfoDetalleSolCaractOCivil->getValor();
                            }
                            // // Si existe la entidad obtiene el valor.
                            if($entityOtrosMateriales)
                            {
                                $floatValorCaractOtrosMateriales = $entityOtrosMateriales->getValor();
                            }                        
                            if($objInfoDetalleSolCaractCancPorCli)
                            {
                                $floatValorCaractCancPorCli = $objInfoDetalleSolCaractCancPorCli->getValor();
                            }
                            if($objInfoDetalleSolCaractAsumeCli)
                            {
                                $floatValorCaractAsumeCli = $objInfoDetalleSolCaractAsumeCli->getValor();
                            }
                            if($objInfoDetalleSolCaractAsumeEmpresa)
                            {
                                $floatValorCaractAsumeEmpresa = $objInfoDetalleSolCaractAsumeEmpresa->getValor();
                            }
                        }
                    }
                    //Verificar si es un retiro de equipo
                    $entityDetSolRetiro = $em->getRepository('schemaBundle:AdmiTipoSolicitud')
                                              ->findOneBy(array("descripcionSolicitud" => "SOLICITUD RETIRO EQUIPO",
                                                                "estado"               => "Activo"));
                    if($entityDetSolRetiro)
                    {
                        // Busca la caracteristica de metraje
                        $entityDetalleSolicitud = $em->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                     ->findOneBy(array("servicioId"      => $data["idServicio"],
                                                                       "tipoSolicitudId" => $entityDetSolRetiro->getId()));
                        if($entityDetalleSolicitud)
                        {
                            // Busca la caracteristica de ELEMENTO CLIENTE
                            $objCaracteristicaElemento = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                                        ->findOneBy(array(
                                                                     "descripcionCaracteristica" => 'ELEMENTO CLIENTE',
                                                                     "estado"                    => 'Activo'
                                                        ));
                            if(is_object($objCaracteristicaElemento))                            
                            {
                                // Busca la caracteristica de Elementos en el Detalle
                                $arrayElementoCliente = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                           ->findBy(array(
                                                                    "detalleSolicitudId"   => $entityDetalleSolicitud->getId(),
                                                                    "caracteristicaId"     => $objCaracteristicaElemento
                                                           ));
                               
                                foreach( $arrayElementoCliente as $objElementoCliente )
                                {
                                    // Busca el Elemento
                                    $objElementoRetiro = $em->getRepository('schemaBundle:InfoElemento')
                                                            ->findOneById($objElementoCliente->getValor());
                                    if(is_object($objElementoRetiro))
                                    {
                                        if(is_object($objElementoRetiro->getModeloElementoId()) &&
                                           is_object($objElementoRetiro->getModeloElementoId()->getTipoElementoId()))
                                        {
                                            $strTipoElemento      = $objElementoRetiro->getModeloElementoId()->getTipoElementoId()
                                                                                      ->getNombreTipoElemento();
                                            $data["observacion"] .= "\nTipo Elemento:  ".$strTipoElemento;
                                        }
                                        $strNombreElemento    = $objElementoRetiro->getNombreElemento();
                                        $data["observacion"] .= " \nNombre Elemento:  ".$strNombreElemento;
                                    }
                                }                                
                            }
                            $strTituloCoordinar = "Replanificar retiro de equipo ";
                            //=================== Consulto si el retiro de equipo proviene de un cambio de tipo medio ========================
                            $objCaracteristica = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                                    ->findOneBy(array('descripcionCaracteristica' => "ID_CAMBIO_TIPO_MEDIO",
                                                                      'estado'                    => "Activo"
                                                                     )
                                                               );
                            if(is_object($objCaracteristica))
                            {
                                $objProdCaractTipoMedio = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                             ->findOneBy(array(
                                                                               "productoId"       => $Servicio->getProductoId()->getId(),
                                                                               "caracteristicaId" => $objCaracteristica->getId(),
                                                                               "estado"           => "Activo"
                                                                               ));
                                if(is_object($objProdCaractTipoMedio))
                                {
                                    $entityInfoServicioProdCaract = $em
                                                                    ->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                    ->findOneBy(array(
                                                                                       'productoCaracterisiticaId' => $objProdCaractTipoMedio->
                                                                                                                        getId(),
                                                                                       'valor'                     => $Servicio->getId(),
                                                                                       'estado'                    => "Activo"));
                                    if(is_object($entityInfoServicioProdCaract))
                                    {
                                        $strTituloCoordinar .= "por cambio de tipo medio";
                                    }
                                }
                            }

                            //=================== Consulto si el retiro de equipo proviene de un cambio de tipo medio ========================
                            $objCaracteristica = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                                    ->findOneBy(array('descripcionCaracteristica' => "TRASLADO",
                                                                      'estado'                    => "Activo"
                                                                     )
                                                               );
                            if(is_object($objCaracteristica))
                            {
                                $objProdCaractTipoMedio = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                             ->findOneBy(array(
                                                                               "productoId"       => $Servicio->getProductoId()->getId(),
                                                                               "caracteristicaId" => $objCaracteristica->getId(),
                                                                               "estado"           => "Activo"
                                                                               ));
                                if(is_object($objProdCaractTipoMedio))
                                {
                                    $entityInfoServicioProdCaract = $em
                                                                    ->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                    ->findOneBy(array(
                                                                                       'productoCaracterisiticaId' => $objProdCaractTipoMedio->
                                                                                                                        getId(),
                                                                                       'valor'                     => $Servicio->getId(),
                                                                                       'estado'                    => "Activo"));
                                    if(is_object($entityInfoServicioProdCaract))
                                    {
                                        $strTituloCoordinar .="por Traslado";
                                    }
                                }
                            }
                        }
                    }
                    
                    if($data["descripcionSolicitud"] === "SOLICITUD MIGRACION"
                        && is_object($ultimaMillaText) && $ultimaMillaText->getNombreTipoMedio() === "FTTx")
                    {
                        $boolPermiteAnular      = false;
                        $boolPermiteRechazar    = false;
                    }
                    
                    if(is_object($Servicio) && is_object($Servicio->getProductoId()) 
                        && ($Servicio->getProductoId()->getNombreTecnico() === "INTERNET SMALL BUSINESS" 
                            || $Servicio->getProductoId()->getNombreTecnico() === "TELCOHOME")
                        && ($data["descripcionSolicitud"] !== "SOLICITUD RETIRO EQUIPO" ))
                    {
                        $strTituloCoordinar     = "";
                        $data["observacion"]    = "";
                    }
                }
                
                $strEsSolucion = 'N';
                if( is_object($Servicio) && isset($datosBusqueda['serviceTecnico']) && is_object($datosBusqueda['serviceTecnico']) 
                    && !$boolEsXLS )
                {
                    //Verificar si el servicio a coordinar es solucion o no
                    $objServCaractSecuencial = $datosBusqueda['serviceTecnico']->getServicioProductoCaracteristica($Servicio,
                                                                                                                  'SECUENCIAL_GRUPO',
                                                                                                                  $Servicio->getProductoId()
                                                                                                                  );
                    if(is_object($objServCaractSecuencial))
                    {
                        $strEsSolucion = 'S';
                    }
                }

                $boolMobile = false;
                $entityMobile = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                        ->getSolicitudCaractPorTipoCaracteristica($data["idDetalleSolicitud"], 'Planificacion desde Mobile');
                if (count($entityMobile) > 0) 
                {
                    $boolMobile = true;
                }
                
                if($prefijoEmpresa === "MD")
                {
                    $objServicioTecnicoMd = null;
                    if($data['idServicioTecnico'])
                    {
                        $objServicioTecnicoMd = $em->getRepository('schemaBundle:InfoServicioTecnico')->find($data["idServicioTecnico"]);
                    }

                    if ( is_object($Servicio) && is_object($objServicioTecnicoMd) )
                    {
                        $arrayRespuestaInfoEquiposTecnico   = $datosBusqueda['serviceTecnico']->obtieneRespuestaInfoEquiposTecnico(
                                                                array(
                                                                        "intIdSolicitud"            => $data['idDetalleSolicitud'],
                                                                        "objServicio"               => $Servicio,
                                                                        "strTipoSolicitud"          => $data["descripcionSolicitud"],
                                                                        "objServicioTecnico"        => $objServicioTecnicoMd,
                                                                        "strCodEmpresa"             => $codEmpresa,
                                                                        "strTipoConsultaListGrid"   => $datosBusqueda['tipoConsulta']));

                        $strStatusInfoEquiposTecnico    = $arrayRespuestaInfoEquiposTecnico["status"];
                        $strEsSolAgregarEquipoCambioOnt = $arrayRespuestaInfoEquiposTecnico["esSolAgregarEquipoCambioOnt"];
                        if($strStatusInfoEquiposTecnico === "OK")
                        {
                            $strObservacionAdicional    = $arrayRespuestaInfoEquiposTecnico["infoObservacionAdicional"];
                            $strObsEquiposGrid          = $arrayRespuestaInfoEquiposTecnico["infoEquiposListGrid"];
                        }
                    }
                    
                    
                    if(($data["descripcionSolicitud"] === "SOLICITUD RETIRO EQUIPO" && is_object($Servicio->getProductoId()) 
                        && $Servicio->getProductoId()->getNombreTecnico() === "WDB_Y_EDB" )
                        || ($data["descripcionSolicitud"] === "SOLICITUD AGREGAR EQUIPO MASIVO" && !empty($strNombrePlan))
                        || ($data["descripcionSolicitud"] === "SOLICITUD AGREGAR EQUIPO" && !empty($strNombrePlan) 
                            && $strEsSolAgregarEquipoCambioOnt === "NO"))
                    {
                        $boolPermiteAnular      = false;
                        $boolPermiteRechazar    = false;
                    }
                    
                    if(($strEsSolAgregarEquipoCambioOnt === "SI" 
                        || (is_object($Servicio) && is_object($Servicio->getProductoId()) && 
                            $Servicio->getProductoId()->getNombreTecnico() === "EXTENDER_DUAL_BAND"))
                        && strtoupper($data["estado"]) === "ASIGNADA")
                    {
                        $boolPermisoEspecialAnular      = true;
                        $boolPermisoEspecialRechazar    = true;
                    }
                    
                    /*
                     * Información del modelo de cpe a utilizar en instalación de nuevo equipo a cliente 
                     * mediante solicitud de cambio de equipo por soporte
                     */
                    if(is_object($Servicio) && is_object($Servicio->getPlanId()) &&
                       ($data["descripcionSolicitud"] == "SOLICITUD CAMBIO EQUIPO POR SOPORTE" ||
                        $data["descripcionSolicitud"] == "SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO"))
                    {
                        $objDetalleSolCeps = $em->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                ->find($data["idDetalleSolicitud"]);
                        // Busca la caracteristica de ELEMENTO CLIENTE
                        $objCaractElemento = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                                ->findOneBy(array("descripcionCaracteristica" => 'MODELO ROUTER',
                                                                  "estado"                    => 'Activo'));
                        if(is_object($objDetalleSolCeps) && is_object($objCaractElemento))
                        {
                            // Busca la caracteristica de Elementos en el Detalle
                            $objCaractEleCliente = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                      ->findOneBy(array("detalleSolicitudId"   => $objDetalleSolCeps->getId(),
                                                                        "caracteristicaId"     => $objCaractElemento));
                            if (is_object($objCaractEleCliente))
                            {
                                $strModeloCpeCeps = $objCaractEleCliente->getValor();
                                if ($datosBusqueda["tipoConsulta"] == "GRID")
                                {
                                    $strObsEquiposGrid = "<br><br><b>Equipo a instalar:</b><br><span style=\"text-decoration: underline;\">".
                                                         $strModeloCpeCeps."</span></h3>";
                                }
                                else
                                {
                                    $strObsEquiposGrid = " - Equipo a instalar: ".$strModeloCpeCeps;
                                }
                            }
                        }
                    }
                }
                
                $boolFWA    =   false;
                if($prefijoEmpresa === "TN" && is_object($Servicio) && is_object($Servicio->getProductoId())
                    && ($Servicio->getProductoId()->getNombreTecnico() === "DATOS FWA"))
                {
                    $boolFWA    =   true;
                }
                
                $boolSegumiento         = false;
                $boolExcedenteMaterial  = false;
                 if(is_object($Servicio) && is_object($Servicio->getProductoId()))
                {
                    $strLineaNegocio        = $Servicio->getProductoId()->getLineaNegocio();
                    $strGrupo               = $Servicio->getProductoId()->getGrupo();
                }
                if($prefijoEmpresa === "TN" && is_object($Servicio) && is_object($Servicio->getProductoId()))
                {
                    $arrayParametrosDet =   $em->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne("SEGUIMIENTO_PRODUCTOS", 
                                                                         "COMERCIAL", 
                                                                         "", 
                                                                         "", 
                                                                         $strNombreProducto, 
                                                                         "", 
                                                                         "",
                                                                         "",
                                                                         "",
                                                                         $codEmpresa
                                                                       );
                    if(!is_array($arrayParametrosDet) && empty($arrayParametrosDet))
                    {
                        $boolSegumiento = false;
                    }
                    else
                    {
                        $boolSegumiento = true;
                    }
                    
                    //Código que valida si el producto pertenece a la vertical connectivity
                    $arrayParametrosDet = null;
                    $arrayParametrosDet =   $em->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne("Vertical para proyecto excedente de material", 
                                                                         "PLANIFICACIÓN", 
                                                                         "", 
                                                                         "", 
                                                                         $strLineaNegocio, 
                                                                         $strGrupo, 
                                                                         "",
                                                                         "",
                                                                         "",
                                                                         $codEmpresa
                                                                       );
                    $objSolicitud = $em->getRepository('schemaBundle:InfoDetalleSolicitud')
                                       ->findOneById($data["idDetalleSolicitud"]);
                    if($objSolicitud)
                    {
                        $objServicio  = $em->getRepository('schemaBundle:InfoServicio')
                                           ->findOneById($objSolicitud->getServicioId());
                        $objTipoSolExcMaterial = $em->getRepository("schemaBundle:AdmiTipoSolicitud")
                                            ->findByDescripcionSolicitud('SOLICITUD MATERIALES EXCEDENTES');
                        $objSolicitudExcedente = $em->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                ->findUlitmoDetalleSolicitudByIds
                                                ( $objServicio->getId(),$objTipoSolExcMaterial[0]->getId());
                        $strSolExcedenteMaterial = 'No existen solicitudes previas';
                        if($objSolicitudExcedente)
                        {
                            $strSolExcedenteMaterial = 'Solicitud de excedente de material #'.
                                                        $objSolicitudExcedente->getId().' en estado '.
                                                        $objSolicitudExcedente->getEstado().'.';

                            $boolTextoColor = true;
                            
                            if($objSolicitudExcedente->getEstado() == 'Rechazada')
                            {
                                $boolMarcarRechazo = true;
                            }
                            
                            if($objSolicitudExcedente->getEstado() == 'Aprobado' ||
                               $objSolicitudExcedente->getEstado() == 'Rechazada')
                            {
                                $boolNegritaEstado = true;
                            }
                        }
                        
                    }

                    // CONDICIONES PARA QUE SE MUESTRE EL BOTÓN DEL VALIDADOR EXCEDENTES DE MATERIALES
                    if($objServicio && $objServicio->getFrecuenciaProducto() == 1 &&
                       $objSolicitud->getTipoSolicitudId()->getDescripcionSolicitud() 
                       == 'SOLICITUD PLANIFICACION')
                    {
                        $strEstadoInfoDetalleSolicitud = $objSolicitud->getEstado();
                        if(is_array($arrayParametrosDet) && !empty($arrayParametrosDet)
                            &&(($codEmpresa==10) || ($codEmpresa=="TN"))
                            && (strtoupper($strEstadoInfoDetalleSolicitud)==strtoupper('PrePlanificada') 
                            || strtoupper($strEstadoInfoDetalleSolicitud)==strtoupper('Factible') || 
                                strtoupper($strEstadoInfoDetalleSolicitud)==strtoupper('Replanificada')|| 
                                strtoupper($strEstadoInfoDetalleSolicitud)==strtoupper('Detenido'))  )
                        {
                            if($strMetraje)
                            {
                                  $boolExcedenteMaterial = true;
                            }
                        }
                        else
                        {
                            $boolExcedenteMaterial = false;
                        }
                        $arrayParametrosFibra =   $em->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->getOne("Precio de fibra", 
                                                                             "SOPORTE", 
                                                                             "", 
                                                                             "Precio de fibra", 
                                                                             "", 
                                                                             "", 
                                                                             "",
                                                                             "",
                                                                             "",
                                                                             $codEmpresa
                                                                           );
                         if(is_array($arrayParametrosFibra) && !empty($arrayParametrosFibra) && $strMetraje)
                        {
                            $intPrecioFibra = $arrayParametrosFibra['valor1'];
                            $arrayParametrosMaximoFibra =   $em->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne('Metraje que cubre el precio de instalación',
                                                                        "COMERCIAL",
                                                                        "",
                                                                        'Metraje que cubre el precio de instalación',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $codEmpresa);
                            if(isset($arrayParametrosMaximoFibra["valor1"]) && !empty($arrayParametrosMaximoFibra["valor1"]))
                            {
                                $intMetrosDeDistancia = $arrayParametrosMaximoFibra["valor1"];
                            }
                        }
                    }
                    
                    
                }
                
                //BUSCAMOS SI TIENE COTIZACION EL SERVICIO
                $boolCotizacion = false;
                if(is_object($Servicio) && isset($datosBusqueda['serviceTecnico']) && is_object($datosBusqueda['serviceTecnico'])
                    && !$boolEsXLS)
                {
                    $objServCaractCotizacion = $datosBusqueda['serviceTecnico']->getServicioProductoCaracteristica($Servicio,
                                                                                                                  'COTIZACION_PRODUCTOS',
                                                                                                                  $Servicio->getProductoId()
                                                                                                                  );
                    if(is_object($objServCaractCotizacion))
                    {
                        $boolCotizacion = true;
                    }
                }    
                //
                
                $strMuestraIngL2 = "S";
                
                if($prefijoEmpresa == "TN" && is_object($ultimaMillaText) 
                    && $ultimaMillaText->getNombreTipoMedio() === "FTTx")
                {
                    $objParametroDetProductosTn = $em->getRepository('schemaBundle:AdmiParametroDet')
                                                   ->findBy( array('estado'      => 'Activo',
                                                                   'parametroId' => $objAdmiParametroCabMovil,
                                                                   'descripcion' => 'EQUIPOS EN PRODUCTO TN') );
                    
                    if($objParametroDetProductosTn)
                    {
                        foreach($objParametroDetProductosTn as $objProductoTnFttx) 
                        {
                            if($objProductoTnFttx->getValor3() == $Servicio->getProductoId()->getId())
                            {
                                $strMuestraIngL2 = "N";
                                break;
                            }
                        }    
                    }   
                }
                
                //
                $strEstadoSol      = trim($data["estado"]);
                if($boolNegritaEstado && $boolMarcarRechazo)
                {
                   $strEstadoSol   = '<p style="color:red;">'.$data["estado"].'</p>'; 
                }
                if($boolNegritaEstado && !$boolMarcarRechazo)
                {
                    $strEstadoSol  = '<b>'.trim($data["estado"]).'</b>';
                }
                
                $strObservacionOpcionPyl = "";
                if(isset($data["observacion"]) && !empty($data["observacion"]))
                {
                    $strObservacionOpcionPyl .= ucwords(strtolower($data["observacion"]));
                }
                
                if(isset($data["observacion_solicitud"]) && !empty($data["observacion_solicitud"]))
                {
                    if(isset($strObservacionOpcionPyl) && !empty($strObservacionOpcionPyl))
                    {
                        $strObservacionOpcionPyl .= '  ';
                    }
                    $strObservacionOpcionPyl .= ucwords(strtolower($data["observacion_solicitud"]));
                }
                
                if(isset($strObservacionAdicional) && !empty($strObservacionAdicional) && !$boolEsXLS)
                {
                    $arrayPermiteConcatenarInfoEquipos  = $em->getRepository('schemaBundle:AdmiParametroDet')
                                                             ->getOne(  'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD', 
                                                                        '', 
                                                                        '', 
                                                                        '',
                                                                        'ESTADOS_SOLICITUDES_ABIERTAS',
                                                                        strtoupper($data["descripcionSolicitud"]),
                                                                        $data['estado'],
                                                                        'PERMITE_CONCATENAR_INFO_EQUIPOS_COORDINAR',
                                                                        '',
                                                                        $codEmpresa);
                    if(isset($arrayPermiteConcatenarInfoEquipos) && !empty($arrayPermiteConcatenarInfoEquipos))
                    {
                        if(isset($strObservacionOpcionPyl) && !empty($strObservacionOpcionPyl))
                        {
                            $strObservacionOpcionPyl .= '  ';
                        }
                        $strObservacionOpcionPyl .= $strObservacionAdicional;
                    }
                }

                /*Valido si el objeto de servicio no es null.*/
                $strTipoRed = "";
                if (!empty($serviceInfoServicio) && is_object($serviceInfoServicio) && is_object($Servicio) && is_object($Servicio->getProductoId()))
                {
                    //se verifica si el producto tambien pertenece a GPON para setear por default tipo red MPLS
                    $arrayParProductoGpon = $em->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('NUEVA_RED_GPON_TN',
                                                         'COMERCIAL',
                                                         '',
                                                         'PARAMETRO PARA DEFINIR EL TIPO DE RED GPON DE UN PRODUCTO',
                                                         $Servicio->getProductoId()->getId(),
                                                         '',
                                                         '',
                                                         'S',
                                                         'RELACION_PRODUCTO_CARACTERISTICA',
                                                         $codEmpresa);
                    if(isset($arrayParProductoGpon) && !empty($arrayParProductoGpon))
                    {
                        $strTipoRed = "MPLS";
                    }
                    /*Obtengo el valor de la característica "Tipo de Red.*/
                    $objTipoDeRed = $serviceInfoServicio->getValorCaracteristicaServicio(
                        array(
                            'objServicio' => $Servicio,
                            'strNombreCaracteristica' => 'TIPO_RED'
                        )
                    );
                    /*Valido si la característica existe para poder asignarla al arreglo final.*/
                    if(is_object($objTipoDeRed))
                    {
                        /*Asigno el valor al objeto de respuesta.*/
                        $strTipoRed = $objTipoDeRed->getValor();
                    }
                }
                
                //verificar si el tipo de red es GPON
                $booleanTipoRedGpon = false;
                if(!empty($strTipoRed) && !$boolEsXLS)
                {
                    $arrayParVerTipoRed = $em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    'VERIFICAR TIPO RED',
                                                                                                    'VERIFICAR_GPON',
                                                                                                    $strTipoRed,
                                                                                                    '',
                                                                                                    '',
                                                                                                    '');
                    if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                    {
                        $booleanTipoRedGpon = true;
                    }
                }

                if(is_object($Servicio) && is_object($Servicio->getProductoId())
                   && ( $Servicio->getProductoId()->getNombreTecnico() === "DATOS SAFECITY"
                        || $Servicio->getProductoId()->getNombreTecnico() === "SAFECITYSWPOE"
                        || $Servicio->getProductoId()->getDescripcionProducto() === "INTERNET VPNoGPON")
                   && isset($datosBusqueda['serviceTecnico']) && is_object($datosBusqueda['serviceTecnico']) 
                   && !$boolEsXLS)
                {
                    $intIdServicioGpon  = $Servicio->getId();
                    $intIdProdGpon      = $Servicio->getProductoId()->getId();
                    if($Servicio->getProductoId()->getNombreTecnico() === "SAFECITYSWPOE")
                    {
                        //verificar si el servicio principal
                        $objServProdCaractDatos = $datosBusqueda['serviceTecnico']->getServicioProductoCaracteristica($Servicio,
                                                                                                        "RELACION_SERVICIOS_GPON_SAFECITY",
                                                                                                        $Servicio->getProductoId());
                        if(is_object($objServProdCaractDatos))
                        {
                            $objServicioPrincipal = $this->_em->getRepository('schemaBundle:InfoServicio')
                                                                                            ->find($objServProdCaractDatos->getValor());
                            if(is_object($objServicioPrincipal))
                            {
                                $intIdServicioGpon  = $objServicioPrincipal->getId();
                                $intIdProdGpon      = $objServicioPrincipal->getProductoId()->getId();
                            }
                        }
                    }
                    $arrayParAdicionalDatosGpon = $em->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->get('CONFIG_PRODUCTO_DATOS_SAFE_CITY',
                                                                 'COMERCIAL',
                                                                 '',
                                                                 '',
                                                                 $intIdProdGpon,
                                                                 'AGREGAR_SERVICIO_ADICIONAL',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 $codEmpresa);
                    //verifico si se agrega un nuevo servicio relacionado
                    foreach($arrayParAdicionalDatosGpon as $arrayParAddServicioDatosGpon)
                    {
                        $intIdProductoAdicional     = $arrayParAddServicioDatosGpon['valor4'];
                        $strCractRelacionAdicional  = $arrayParAddServicioDatosGpon['valor6'];
                        //obtener la cantidad de servicios para la planificación
                        $arrayServAdicionalesGpon   = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                        ->createQueryBuilder('t')
                                        ->innerJoin('schemaBundle:InfoServicio', 's', 'WITH', 't.servicioId = s.id')
                                        ->innerJoin('schemaBundle:AdmiProductoCaracteristica', 'pc', 'WITH', 't.productoCaracterisiticaId = pc.id')
                                        ->innerJoin('schemaBundle:AdmiCaracteristica', 'c', 'WITH', 'pc.caracteristicaId = c.id')
                                        ->where('t.valor = :valor')
                                        ->andWhere("pc.productoId = :productoId")
                                        ->andWhere("c.descripcionCaracteristica = :caracteristica")
                                        ->andWhere("t.estado = :estado")
                                        ->andWhere("pc.estado = :estado")
                                        ->andWhere("c.estado = :estado")
                                        ->andWhere("s.estado = :estadoServicio")
                                        ->andWhere("s.puntoId = :puntoId")
                                        ->setParameter('valor', $intIdServicioGpon)
                                        ->setParameter('productoId', $intIdProductoAdicional)
                                        ->setParameter('caracteristica', $strCractRelacionAdicional)
                                        ->setParameter('estadoServicio', $Servicio->getEstado())
                                        ->setParameter('puntoId', $Servicio->getPuntoId()->getId())
                                        ->setParameter('estado', 'Activo')
                                        ->getQuery()
                                        ->getResult();
                        //agrego la relacion del servicio adicional
                        if(!empty($arrayServAdicionalesGpon) && count($arrayServAdicionalesGpon) > 0)
                        {
                            $strObservacionOpcionPyl .= "\n".str_replace(['[',']'],'', $arrayParAddServicioDatosGpon['valor3']).": ".
                                                        count($arrayServAdicionalesGpon);
                        }
                    }
                }
                
                if(($prefijoEmpresa == "TN" || 
                    (isset($arraySolProdParamsConsultaCoordinar) && !empty($arraySolProdParamsConsultaCoordinar)))
                    && is_object($Servicio) && is_object($Servicio->getProductoId()))
                {
                    $strNombreTecnicoProd = $Servicio->getProductoId()->getNombreTecnico();
                }
                else
                {
                    $strNombreTecnicoProd = "";
                }
                $boolBotonProgramarSolProdPerfiles       = true;
                $boolBotonReplanificarSolProdPerfiles    = true;
                $boolBotonDetenerSolProdPerfiles         = true;
                $boolBotonAnularSolProdPerfiles          = true;
                $boolBotonRechazarSolProdPerfiles        = true;
                if(isset($arraySolProdParamsConsultaCoordinar) && !empty($arraySolProdParamsConsultaCoordinar)
                    && isset($arrayPersonalizacionOpcionesGridCoordinar) && !empty($arrayPersonalizacionOpcionesGridCoordinar))
                {
                    $strNombreParamSolProd = strtoupper(trim($data["descripcionSolicitud"]))."-".$strNombreTecnicoProd;
                    //Se verifica si se encuentra parametrizado el registro por lo que se procede a buscar los botones permitidos
                    if (in_array($strNombreParamSolProd, $arraySolProdParamsConsultaCoordinar))
                    {
                        $strBotonProgramarSolProdPerfiles       = "PROGRAMAR-".$strNombreParamSolProd;
                        $strBotonReplanificarSolProdPerfiles    = "REPLANIFICAR-".$strNombreParamSolProd;
                        $strBotonDetenerSolProdPerfiles         = "DETENER-".$strNombreParamSolProd;
                        $strBotonAnularSolProdPerfiles          = "ANULAR-".$strNombreParamSolProd;
                        $strBotonRechazarSolProdPerfiles        = "RECHAZAR-".$strNombreParamSolProd;
                        
                        if(!array_key_exists($strBotonProgramarSolProdPerfiles,$arrayPersonalizacionOpcionesGridCoordinar))
                        {
                            $boolBotonProgramarSolProdPerfiles = false;
                        }
                        
                        if(!array_key_exists($strBotonReplanificarSolProdPerfiles,$arrayPersonalizacionOpcionesGridCoordinar))
                        {
                            $boolBotonReplanificarSolProdPerfiles = false;
                        }
                        
                        if(!array_key_exists($strBotonDetenerSolProdPerfiles,$arrayPersonalizacionOpcionesGridCoordinar))
                        {
                            $boolBotonDetenerSolProdPerfiles = false;
                        }
                        
                        if(!array_key_exists($strBotonAnularSolProdPerfiles,$arrayPersonalizacionOpcionesGridCoordinar))
                        {
                            $boolBotonAnularSolProdPerfiles = false;
                        }
                        
                        if(!array_key_exists($strBotonRechazarSolProdPerfiles,$arrayPersonalizacionOpcionesGridCoordinar))
                        {
                            $boolBotonRechazarSolProdPerfiles = false;
                        }
                    }
                    else
                    {
                        /*
                         * Si el usuario en sesión tiene asignado uno de los perfiles parametrizados, se restringe los botones nuevos asociados 
                         * al perfil en el grid para las solicitudes no parametrizadas
                         */
                        $boolBotonAnularSolProdPerfiles = false;
                        
                    }
                }
                
                //sacamos el proyecto y el estado de la caracteristica
                $strBoolProyectoPlan = false;
                $strFechaIngArticulo = "";
                $strValidaPlanificacion = (strtoupper(trim($data["descripcionSolicitud"]))=='SOLICITUD INSPECCION') ? 'S':'N';
                if($datosBusqueda["tipoSolicitudPeticion"] == "SOLICITUD PLANIFICACION" && $strValidaPlanificacion =='S')
                {
                    continue;
                }
                $objServicio = $this->_em->getRepository('schemaBundle:InfoServicio')
                                                                        ->findOneBy(array('id'=> $data["idServicio"]));
                if(is_object($objServicio))
                {
                    $objInfoServicioProdCaractPro = $datosBusqueda['serviceTecnico']->getServicioProductoCaracteristica($objServicio,
                                                                                                        'Relacionar Proyecto',
                                                                                                         $objServicio->getProductoId());
                    if(!empty($objInfoServicioProdCaractPro) && is_object($objInfoServicioProdCaractPro))
                    {
                        $strBoolProyectoPlan = true;
                        $objInfoServicioProdCaractEst = $datosBusqueda['serviceTecnico']->getServicioProductoCaracteristica($objServicio,
                                                                                                        'PEDIDO_ESTADO',
                                                                                                         $objServicio->getProductoId());
                        if(!empty($objInfoServicioProdCaractEst) && is_object($objInfoServicioProdCaractEst))
                        {
                            if($datosBusqueda['proyecto'] == null && $datosBusqueda['tipoConsulta'] != 'XLS')
                            {
                                continue;
                            }
                            else
                            {
                                if($objInfoServicioProdCaractEst->getValor() == 'BODEGA')
                                {
                                    $strBoolProyectoPlan = false;
                                    $strFechaIngArticuloF = "";
                                    $strFechaIngArticuloF = strval(date_format($objInfoServicioProdCaractEst->getFeUltMod(), "d/m/Y G:i"));
                                    if(!empty($strFechaIngArticuloF))
                                    {
                                        $strFechaIngArticulo = $strFechaIngArticuloF;
                                    }
                                }
                                else
                                {
                                   $strBoolProyectoPlan = true; 
                                }
                            }
                        }
                    }
                }
                
                //fin de cambios
                
                $strModulo = 'PLANIFICACION';
                $strEsSolicitudInspeccion = (strtoupper(trim($data["descripcionSolicitud"]))=='SOLICITUD INSPECCION') ? 'S':'N';

                //Si es solicitud de inspección y no existe el login 
                //consulta las características de la solicitud
                if ($strEsSolicitudInspeccion == 'S' && empty($data["login"]))
                {
                    $arrayDetalleSolCaract   = $em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                  ->findBy(
                                                                 array(
                                                                       "detalleSolicitudId"=> $data["idDetalleSolicitud"],
                                                                       "estado"            => 'Activo'
                                                                      )
                                                          );
                
                    foreach($arrayDetalleSolCaract as $objDetalleSolCaract)
                    {
                
                        $objAdmiCaracteristica = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                                    ->findOneBy(array('id'=>$objDetalleSolCaract->getCaracteristicaId()));
                        if ($objAdmiCaracteristica->getDescripcionCaracteristica() == 'LONGITUD_INSPECCION')
                        {
                            $longitud = $objDetalleSolCaract->getValor();
                        }
                        if ($objAdmiCaracteristica->getDescripcionCaracteristica() == 'LATITUD_INSPECCION')
                        {
                            $latitud = $objDetalleSolCaract->getValor();
                        }
                        if ($objAdmiCaracteristica->getDescripcionCaracteristica() == 'DIRECCION_INSPECCION')
                        {
                            $data["direccion"] = $objDetalleSolCaract->getValor();
                        }
                        if ($objAdmiCaracteristica->getDescripcionCaracteristica() == 'NOMBRE_CLIENTE_INSPECCION')
                        {
                            $cliente = $objDetalleSolCaract->getValor();
                        }
                        if ($objAdmiCaracteristica->getDescripcionCaracteristica() == 'USR_VENDEDOR_INSPECCION')
                        {
                            $arrayPersona = $em->getRepository('schemaBundle:InfoPersona')->findByLogin($objDetalleSolCaract->getValor());
                            if (count($arrayPersona)>0)
                            {
                                $nombreVendedor = ucwords(strtolower($arrayPersona[0]->getNombres()." ".$arrayPersona[0]->getApellidos())) ;
                            }    
                            else
                            {
                                $nombreVendedor = $objDetalleSolCaract->getValor();
                            }
                        }
                    }
                }

                $boolEsMdDifDetenido = false;
                if (strtoupper($data["estado"])!=strtoupper("Detenido") && 
                    strtoupper($data["estado"])!=strtoupper("Asignada") && 
                    ($prefijoEmpresa == "MD" || $prefijoEmpresa == "EN"))
                {
                    $boolEsMdDifDetenido = true;
                }
                $boolEsMdDifAsignada = false;
                if (strtoupper($data["estado"])!=strtoupper("Asignada") && ($prefijoEmpresa == "MD" || $prefijoEmpresa == "EN"))
                {
                    $boolEsMdDifAsignada = true;
                }

                // se omiten estas variables que no son utilizadas en el excel y generan tiempo innecesario
                if ( !$boolEsXLS )
                {
                    $strTipoEsquema      = (method_exists($objPlanificarService, 'getTipoEsquema') && is_object($Servicio)) 
                        ? $objPlanificarService->getTipoEsquema($Servicio) : null;
                    $intIdWifiSim     = (method_exists($objPlanificarService, 'getIdWifiInstSim') && is_object($Servicio))
                        ? $objPlanificarService->getIdWifiInstSim($Servicio->getId()) : null;
                    $intIdCouSim      = (method_exists($objPlanificarService, 'getIdCouInstSim') && is_object($Servicio))
                        ? $objPlanificarService->getIdCouInstSim($Servicio->getId()) : null;
                    $arraySimultaneos = (method_exists($objPlanificarService, 'getServiciosInstalacionSimultanea') && is_object($Servicio))
                        ? $objPlanificarService->getServiciosInstalacionSimultanea($Servicio->getId()) : null;
                }

                $arr_encontrados[]=array(
                        'strTipoRed'              => $strTipoRed,
                        'booleanTipoRedGpon'      => $booleanTipoRedGpon,
                        'id_factibilidad'         => $data["idDetalleSolicitud"],
                        'feCreacion'              => $strFeCreacion,
                        'motivo'                  => $motivo,
                        'observacionMotivo'       => $observacionMotivo,
                        'id_servicio'             => $data["idServicio"],
                        'id_punto'                => $data["idPunto"],
                        'estado_punto'            => $data["estadoPunto"],
                        'nombreTecnico'           => $strNombreTecnicoProd,
                        'id_orden_trabajo'        => "",
                        'caja'                    => $caja,
                        'cliente'                 => ucwords(strtolower(trim($cliente))),
                        'descripcionSolicitud'    => ucwords(strtolower(trim($data["descripcionSolicitud"]))).$strObsEquiposGrid,
                        'vendedor'                => trim($nombreVendedor),
                        'tipo_orden'              => trim($tipo_orden),
                        'esRecontratacion'        => $esRecontratacion,
                        'tercerizadora'           => $tercerizadora,
                        'login2'                  => trim($data["login"]),
                        'telefonos'               => $strTelefonos,
                        'producto'                => (!empty($strHtmlNombreProducto))?$strHtmlNombreProducto:trim($strNombreProductoPlan),
                        'productoServicio'        => $strNombreProductoPlan,
                        'coordenadas'             => trim($coordenadas),
                        'direccion'               => ucwords(strtolower(trim($data["direccion"]))),
                        'observacion'             => ucwords(trim(strtolower($data["observacion"].'  '.$data["observacion_solicitud"]))),
                        'ciudad'                  => ucwords(strtolower(trim($ciudad))),
                        'nombreSector'            => ucwords(strtolower(trim($nombreSector))),
                        'jurisdiccion'            => ucwords(strtolower(trim($jurisdiccion))),
                        'feSolicitaPlanificacion' => trim($strFeSolicitaPlanificacion),
                        'fePlanificada'           => trim($fePlanificada),
                        'HoraIniPlanificada'      => trim($HoraIniPlanificada),
                        'HoraFinPlanificada'      => trim($HoraFinPlanificada),
                        'latitud'                 => trim($latitud),
                        'longitud'                => trim($longitud),
                        'strTipoEnlace'           => isset($strTipoEnlace) ? trim($strTipoEnlace) : "",
                        'boolMarcarRechazo'       => $boolMarcarRechazo,
                        'estado'                  => $strEstadoSol,
                        'ultimaMilla'             =>($ultimaMillaText)?$ultimaMillaText->getNombreTipoMedio():"",
                        'strPrefijoEmpresa'       => $prefijoEmpresa?$prefijoEmpresa:"",
                        'strMetraje'              => $strMetraje?$strMetraje:"",
                        'strModulo'               => $strModulo,
                        'floatValorCaractOCivil'  => $floatValorCaractOCivil,
                        'floatValorCaractOtrosMateriales' => $floatValorCaractOtrosMateriales,
                        'floatValorCaractCancPorCli'      => $floatValorCaractCancPorCli,
                        'floatValorCaractAsumeCli'        => $floatValorCaractAsumeCli,
                        'floatValorCaractAsumeEmpresa'    => $floatValorCaractAsumeEmpresa,
                        'splitterMigra'           => $splitterMigra,
                        'switch'                  => $switch,
                        'puerto'                  => $puerto,
                        'hilo'                    => $hilo,
                        'estadoServicio'          => $data['estadoServicio'],
                        'tituloCoordinar'         => isset($strTituloCoordinar) ? $strTituloCoordinar : "" ,
                        'rutaCroquis'             => $rutaCroquis,
                        'esSolucion'              => $strEsSolucion,
                        'intIdComunicacion'       => $intIdComunicacionTarea,
                        'intIdDetalle'            => $intIdDetalleTarea,
                        'strTareaEsHal'           => (($boolEsHal)?"S":"N"),
                        'seguimiento'             => $boolSegumiento,
                        'pedidos'                 => $boolCotizacion,
                        'precioFibra'             => intval($intPrecioFibra),
                        'metrosDeDistancia'       => intval($intMetrosDeDistancia),
                        'solExcedenteMaterial'    => $strSolExcedenteMaterial,
                        'nombreProyecto'          => $strNombreProyecto,
                        'fechaIngArticulo'        => $strFechaIngArticulo,
                        'action1' => (/*Programar*/
                                        ($boolBotonProgramarSolProdPerfiles &&
                                        (
                                            strtoupper($data["estado"])==strtoupper("PrePlanificada") ||
                                            strtoupper($data["estado"])==strtoupper("Replanificada") ||
                                            strtoupper($data["estado"])==strtoupper("Detenido"))) ? 
                                            (($strEsSolicitudInspeccion != 'S')? "button-grid-Time2" : "icon-invisible") : "icon-invisible"
                                     ),
                        'action2' => (/*Replanificar*/
                                        ($boolBotonReplanificarSolProdPerfiles &&
                                        (
                                            strtoupper($data["estado"])==strtoupper("Planificada") ||
                                            strtoupper($data["estado"])==strtoupper("AsignadoTarea")  ||
                                            (strtoupper($data["estado"])==strtoupper("Asignada") &&
                                                ($prefijoEmpresa == "MD" || $prefijoEmpresa == "EN")) ||
                                            (strtoupper($data["estado"])==strtoupper("Asignada") && $strNombreProducto == 'WIFI Alquiler Equipos')
                                        )) ? (($strEsSolicitudInspeccion != 'S')? "button-grid-Retime" : "icon-invisible") : "icon-invisible"
                                    ),
                        'action3' => (/*Detener*/
                                        ($boolBotonDetenerSolProdPerfiles &&
                                        (
                                            strtoupper($data["estado"])==strtoupper("PrePlanificada") ||
                                            strtoupper($data["estado"])==strtoupper("Planificada") ||
                                            strtoupper($data["estado"])==strtoupper("Replanificada") ||
                                            strtoupper($data["estado"])==strtoupper("AsignadoTarea") ||
                                            ($boolEsMdDifDetenido) ||
                                            (strtoupper($data["estado"])==strtoupper("Asignada") && $strNombreProducto == 'WIFI Alquiler Equipos')
                                        )) ? (($strEsSolicitudInspeccion != 'S')? "button-grid-Pausa" : "icon-invisible") : "icon-invisible"
                                     ),
                        'action4' => (/*Anular Orden*/
                                        ($boolBotonAnularSolProdPerfiles &&
                                        (
                                            $boolPermiteAnular &&
                                            (
                                                strtoupper($data["estado"])==strtoupper("PrePlanificada") ||
                                                strtoupper($data["estado"])==strtoupper("Planificada") ||
                                                strtoupper($data["estado"])==strtoupper("Replanificada") ||
                                                strtoupper($data["estado"])==strtoupper("Detenido") ||
                                                strtoupper($data["estado"])==strtoupper("AsignadoTarea") ||
                                                ($boolEsMdDifAsignada) ||
                                                $boolPermisoEspecialAnular
                                            )
                                        )) ? (($strEsSolicitudInspeccion != 'S')? "button-grid-Anular" : "icon-invisible") : "icon-invisible"
                                     ),
                        'action5' => (/*Rechazar Orden*/
                                        ($boolBotonRechazarSolProdPerfiles &&
                                        (
                                            $boolPermiteRechazar &&
                                            (
                                                strtoupper($data["estado"])==strtoupper("PrePlanificada") ||
                                                strtoupper($data["estado"])==strtoupper("Planificada") ||
                                                strtoupper($data["estado"])==strtoupper("Replanificada") ||
                                                strtoupper($data["estado"])==strtoupper("Detenido") ||
                                                strtoupper($data["estado"])==strtoupper("AsignadoTarea") ||
                                                ($boolEsMdDifAsignada) ||
                                                $boolPermisoEspecialRechazar
                                            )
                                        )) ? (($strEsSolicitudInspeccion != 'S')? "button-grid-BigDelete" : "icon-invisible") : "icon-invisible"
                                     ),
                        'action6' => 'button-grid-Gmaps',
                        'action7' => 'button-grid-Foto',
                        'action8' => $boolMobile && strtoupper($data["estado"]) == strtoupper("Planificada") ?
                        (($strEsSolicitudInspeccion != 'S')? 'button-grid-asignarCuadrilla' : "icon-invisible") : 'icon-invisible',
                        'action9' => !$boolMobile && strtoupper($data["estado"]) == strtoupper("Planificada") ? 
                        (($strEsSolicitudInspeccion != 'S')? 'button-grid-Tuerca' : "icon-invisible") : 'icon-invisible',
                        'origenPlanificacion' => $boolMobile ? 'SI' : 'NO',
                        'tipo_esquema' => $strTipoEsquema,
                        'idIntWifiSim' => $intIdWifiSim,
                        'idIntCouSim' => $intIdCouSim,
                        'arraySimultaneos' => $arraySimultaneos,
                        'action10' => (/*Ingresar Seguimiento*/
                                        (
                                            strtoupper($data["estado"])==strtoupper("Replanificada") ||
                                            strtoupper($data["estado"])==strtoupper("Detenido")
                                        
                                        ) ? (($strEsSolicitudInspeccion != 'S')? 
                                             "button-grid-agregarSeguimiento" : "icon-invisible") : "icon-invisible"
                                      ),
                        'action11' => ($boolFWA  && strtoupper($data["estado"])==
                                      strtoupper("PrePlanificada")? (($strEsSolicitudInspeccion != 'S')? 
                                      'button-grid-solicitarFactibilidad' : "icon-invisible") : "icon-invisible"),
                    
                        'action12' => (!empty($data["login"])?'button-grid-verTarea' : 'icon-invisible'),

                        'action13' => "button-grid-Tracing",
                        'action14' => 'button-grid-Pedidos',
                        'muestraIngL2' => $strMuestraIngL2,
                        // 'action15' => ($boolExcedenteMaterial ? 'button-grid-validador' :  "icon-invisible"),
                        'action15' => ( /* Boton de Excedentes de materiales */
                                        $boolExcedenteMaterial ? 'button-grid-validador' :  "icon-invisible"),
                        'action16' => ( /** Boton consulta de evidencias para Excedentes de materiales */
                                        $boolExcedenteMaterial ? 'button-grid-show' :  "icon-invisible"),
                        'action17' => ( ($strEsSolicitudInspeccion == 'S')? 'button-grid-Tuerca' : "icon-invisible"),
                        'action18' => ( ($strEsSolicitudInspeccion == 'S')? 'button-grid-pdf' : "icon-invisible"),
                        'action19' => ( ($strEsSolicitudInspeccion == 'S' && strtoupper($data["estado"])==strtoupper("PrePlanificada") )? 
                                      'button-grid-BigDelete' : "icon-invisible"),
                        'action20' => (is_object($objInfoServicioProdCaractPro)? 'button-grid-pdf' : "icon-invisible"),              
                        'observacionOpcionPyl'  => $strObservacionOpcionPyl,
                        'observacionAdicional'  => $strObservacionAdicional,
                        'BoolProyectoPlan'  => $strBoolProyectoPlan,
                        'arrayPersonalizacionOpcionesGridCoordinar' => $arrayPersonalizacionOpcionesGridCoordinar
                    );
            }
            //seteo el total menos los ocultos
            $num -= $intContServicioOculto;
            if($num == 0)
            {
                $resultado= array('total' => 1 ,
                                 'encontrados' => array('id_factibilidad' => 0 , 'nombre_factibilidad' => 'Ninguno', 'factibilidad_id' => 0 , 'factibilidad_nombre' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);
                return $resultado;
            }
            else
            {
                $dataF =json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$dataF.'}';
                return $resultado;
            }
        }
        else
        {
            
            $resultado= '{"total":"0","encontrados":[]}';
            return $resultado;
        }
        
    }
    
    /**
     * Documentacion de la Funcion  getRegistrosSolicitudesCoordinar
     *
     * Esta funcion retorna las solicitudes de Planificacion,Retira de Equipo,Cambio de Equipo,Migracion segun el tipo de solicitud
     * que se envia en la opcion de Planificacion->Planificar
     *
     * @author Desarrollo Inicial
     * @version 1.0
     *
     * @author Modificado: Richard Cabrera Pereira <rcabrera@telconet.ec>
     * @version 1.1 02-08-2016 Se restructura la funcion para mejorar su rendimiento
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 Se agrega en la consulta el estado del punto
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.3 Se agrega nuevo tipo solicitud SOLICITUD AGREGAR EQUIPO para  gestionar solicitudes generadas
     *              en el proceso de cambio de planes donde el nuevo plan incluya como detalle un producto SMART WIFI
     * @since 1.2
     * 
     * @author Modificado: Allan Suarez <arsuarez@telconet.ec>
     * @version 1.4 22-05-2017 Se muestra en la consulta el estado del Servicio
     * @since 1.3
     * 
     * @author Modificado: Allan Suarez <arsuarez@telconet.ec>
     * @version 1.5 15-12-2017 Se agrega filtro en la consulta por decripcion de productos para escenarios donde exista un flujo DC
     *                         y se necesite discriminar los registros por producto que pueda ver el departamento parametrizado
     * @since 1.4
     * 
     * @author Modificado: Jesús Bozada <jbozada@telconet.ec>
     * @version 1.6 22-01-2018 Se agregar programación para poder retornar información de solicitudes de reubicación
     * @since 1.4
     * 
     * @author Modificado: Edgar Pin Villavicencio <epin@telconet.ec>
     * @version 1.7 22-03-2018 Se cambia el filtro de ciudad para filtrar por multiples ciudades
     * @since 1.5
     * 
     * @author Modificado: Jesús Bozada <jbozada@telconet.ec>
     * @version 1.8 19-06-2019 Se agregan nuevos tipos de solicitudes(SOLICITUD AGREGAR EQUIPO, SOLICITUD CAMBIO EQUIPO POR SOPORTE) para gestionarlas
     *                         en el módulo de planificación
     * @since 1.7
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.9 05-05-2020 - Se agrega el tipo de solicitud: 'SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO' y 'SOLICITUD AGREGAR EQUIPO MASIVO'
     * @since 1.8
     * 
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 2.0 02-06-2020 - Se quita error_log para calidad del código.
     * @since 1.9
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 2.1 24-09-2020 - Se valida para mostrar solicitudes de producto adicionales.
     * @since 2.0
     * 
     * @author Karen Rodríguez Véliz <kyrodriguez@telconet.ec>
     * @version 2.2 22-04-2021 - Se agrega validación del tipo de orden si es empresa MD
     * @since 2.1
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 2.3 24-09-2020 - Se aumenta tipo cableado ethernet para validacion de productos en servicios.
     * @since 2.2
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.4 08-04-2022 Se agregan los filtros respectivos para poder obtener las solicitudes de productos parametrizados cuando los perfiles
     *                         del usuario en sesión también se encuentren parametrizados.
     * 
     * @param $intStart
     * @param $intLimit
     * @param $arrayParametros   [fechaDesdePlanif, fechaHastaPlanif, estado, login, descripcionPunto, vendedor,
     *                            ciudad, tipoSolicitud,$codEmpresa,$idSector,$identificacion,nombres, apellidos,$ultimaMilla]
     *
     * @return $arrayDatosTotal
     */
    public function getRegistrosSolicitudesCoordinar($intStart,$intLimit,$arrayParametros)
    {
        $strSolPlanificacion    = "SOLICITUD PLANIFICACION";
        $strSolicitudMigracion  = "SOLICITUD MIGRACION";
        $strDescripTipoRol      = "Cliente";
        $strWhere               = "";
        $arrayDatosTotal        = array();
        $intTotalRegistros      = 0;
        $strFromAdicional       = '';
        $strLeftJoinInfoServicio= "";
        $objQuery               = $this->_em->createQuery();
        $objQueryCount          = $this->_em->createQuery();
        $boolEsDC               = false;

        if(isset($arrayParametros['grupo']) && $arrayParametros['grupo'] == 'DATACENTER')
        {
            $boolEsDC = true;
        }
        
        $arrayEstados = array("PrePlanificada",
                               "Planificada",
                               "Replanificada",
                               "Rechazada",
                               "Detenido",
                               "AsignadoTarea",
                               "Asignada");

        $arrayEstadosSolMigracion = array("PrePlanificada",
                                          "AsignadoTarea",
                                          "Planificada",
                                          "Replanificada");

        $arrayEstadosOtrasSol = array("PrePlanificada",
                                      "Planificada",
                                      "Replanificada",
                                      "Detenido",
                                      "AsignadoTarea",
                                      "Asignada");

        $arrayTipoSolicitudes = array("SOLICITUD PLANIFICACION",
                                      "SOLICITUD REUBICACION",
                                      "SOLICITUD CAMBIO EQUIPO",
                                      "SOLICITUD RETIRO EQUIPO",
                                      "SOLICITUD MIGRACION",
                                      "SOLICITUD AGREGAR EQUIPO",
                                      "SOLICITUD AGREGAR EQUIPO MASIVO",
                                      "SOLICITUD CAMBIO EQUIPO POR SOPORTE",
                                      "SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO",
                                      "SOLICITUD DE INSTALACION CABLEADO ETHERNET");

        $arrayOtrosTiposSolicitudes = array("SOLICITUD CAMBIO EQUIPO",
                                            "SOLICITUD RETIRO EQUIPO",
                                            "SOLICITUD PLANIFICACION",
                                            "SOLICITUD AGREGAR EQUIPO",
                                            "SOLICITUD AGREGAR EQUIPO MASIVO",
                                            "SOLICITUD CAMBIO EQUIPO POR SOPORTE",
                                            "SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO",
                                            "SOLICITUD DE INSTALACION CABLEADO ETHERNET");

        $arrayEstadosSolicitudCambioEquipo = array("Activo","Cancelado");
        $arraySolicitudesPlanificacion     = array("SOLICITUD PLANIFICACION",
                                                   "SOLICITUD MIGRACION","SOLICITUD REUBICACION",
                                                   "SOLICITUD DE INSTALACION CABLEADO ETHERNET");
        $arraySolicitudesCambioEquipo      = array("SOLICITUD CAMBIO EQUIPO", "SOLICITUD RETIRO EQUIPO", "SOLICITUD AGREGAR EQUIPO",
                                                   "SOLICITUD AGREGAR EQUIPO MASIVO","SOLICITUD CAMBIO EQUIPO POR SOPORTE",
                                                   "SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO");

        if($arrayParametros["fechaDesdePlanif"]!="")
        {
            $dateF    = explode("-",$arrayParametros["fechaDesdePlanif"]);
            $fechaSql = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));

            $strWhere .= " AND ds.feCreacion >= :paramFechaCreacionD ";
            $objQuery->setParameter("paramFechaCreacionD",trim($fechaSql));
            $objQueryCount->setParameter("paramFechaCreacionD",trim($fechaSql));
        }
        if($arrayParametros["fechaHastaPlanif"]!="")
        {
            $dateF       = explode("-",$arrayParametros["fechaHastaPlanif"]);
            $fechaSqlAdd = strtotime(date("Y-m-d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0])). " +1 day");
            $fechaSql    = date("Y/m/d", $fechaSqlAdd);

            $strWhere .= " AND ds.feCreacion <= :paramFechaCreacionH ";
            $objQuery->setParameter("paramFechaCreacionH",trim($fechaSql));
            $objQueryCount->setParameter("paramFechaCreacionH",trim($fechaSql));
        }

        if($arrayParametros["login"]!="")
        {
            $strWhere .= "AND UPPER(p.login) like UPPER(:paramLogin) ";
            $objQuery->setParameter("paramLogin",$arrayParametros["login"].'%');
            $objQueryCount->setParameter("paramLogin",$arrayParametros["login"].'%');
        }
        
        if($arrayParametros["descripcionPunto"]!="")
        {
            $strWhere .= "AND UPPER(p.descripcionPunto) like UPPER(:paramDescripcionPunto) ";
            $objQuery->setParameter("paramDescripcionPunto",$arrayParametros["descripcionPunto"].'%');
            $objQueryCount->setParameter("paramDescripcionPunto",$arrayParametros["descripcionPunto"].'%');
        }
        
        
        if(isset($arrayParametros["estadoPunto"]) && !empty($arrayParametros["estadoPunto"]))
        {
            if(trim($arrayParametros["estadoPunto"])!="Todos")
            {
                $strWhere .= "AND p.estado = :paramEstadoPunto ";
                $objQuery->setParameter("paramEstadoPunto",$arrayParametros["estadoPunto"]);
                $objQueryCount->setParameter("paramEstadoPunto",$arrayParametros["estadoPunto"]);
            }
        }
        
        if($arrayParametros["vendedor"]!="")
        {
            $strWhere .= "AND CONCAT(LOWER(peVend.nombres),CONCAT(' ',LOWER(peVend.apellidos))) like :paramVendedor ";
            $objQuery->setParameter("paramVendedor",strtolower(trim($arrayParametros["vendedor"])).'%');
            $objQueryCount->setParameter("paramVendedor",strtolower(trim($arrayParametros["vendedor"])).'%');
        }
        if($arrayParametros["ciudad"][0] != "")
        {
            $strWhere .= "AND UPPER(ca.nombreCanton) IN (:paramCiudad) ";
            $objQuery->setParameter("paramCiudad",$arrayParametros["ciudad"]);
            $objQueryCount->setParameter("paramCiudad",$arrayParametros["ciudad"]);

        }
        
        if($arrayParametros["estado"]!="" && $arrayParametros["estado"])
        {
            if (in_array($arrayParametros["estado"], $arrayEstados))
            {
                $strWhere .= "AND (ds.estado = :paramEstado) ";
                $objQuery->setParameter("paramEstado",$arrayParametros["estado"]);
                $objQueryCount->setParameter("paramEstado",$arrayParametros["estado"]);
            }
            else
            {
                if($arrayParametros["tipoSolicitud"] == "SOLICITUD MIGRACION")
                {
                    $strWhere .= "AND (ds.estado IN (:paramEstados) ) ";
                    $objQuery->setParameter("paramEstados",$arrayEstadosSolMigracion);
                    $objQueryCount->setParameter("paramEstados",$arrayEstadosSolMigracion);
                }
                else if($arrayParametros["tipoSolicitud"] == "SOLICITUD PLANIFICACION"         || 
                        $arrayParametros["tipoSolicitud"] == "SOLICITUD CAMBIO EQUIPO"         ||
                        $arrayParametros["tipoSolicitud"] == "SOLICITUD RETIRO EQUIPO"         ||
                        $arrayParametros["tipoSolicitud"] == "SOLICITUD AGREGAR EQUIPO"        ||
                        $arrayParametros["tipoSolicitud"] == "SOLICITUD AGREGAR EQUIPO MASIVO" ||
                        $arrayParametros["tipoSolicitud"] == "SOLICITUD REUBICACION"           ||
                        $arrayParametros["tipoSolicitud"] == "SOLICITUD CAMBIO EQUIPO POR SOPORTE" ||
                        $arrayParametros["tipoSolicitud"] == "SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO" ||
                        $arrayParametros["tipoSolicitud"] == "SOLICITUD DE INSTALACION CABLEADO ETHERNET")
                {
                    $strWhere .= "AND (ds.estado IN (:paramEstados) ) ";
                    $objQuery->setParameter("paramEstados",$arrayEstadosOtrasSol);
                    $objQueryCount->setParameter("paramEstados",$arrayEstadosOtrasSol);
                }
                else if(!isset($arrayParametros['arrayFiltrosConsultaCoordinar']) || empty($arrayParametros['arrayFiltrosConsultaCoordinar']))
                {
                    $strWhere .= "AND ( (ts.descripcionSolicitud = :paramTipoSolicitude AND ds.estado IN (:paramEstadoPers) ) OR
                                  (ts.descripcionSolicitud IN (:paramTipoSolici) AND ds.estado IN (:paramEstadoPerso))) ";

                    $objQuery->setParameter("paramTipoSolicitude",$strSolicitudMigracion);
                    $objQueryCount->setParameter("paramTipoSolicitude",$strSolicitudMigracion);
                    $objQuery->setParameter("paramEstadoPers",$arrayEstadosSolMigracion);
                    $objQueryCount->setParameter("paramEstadoPers",$arrayEstadosSolMigracion);

                    $objQuery->setParameter("paramTipoSolici",$arrayOtrosTiposSolicitudes);
                    $objQueryCount->setParameter("paramTipoSolici",$arrayOtrosTiposSolicitudes);
                    $objQuery->setParameter("paramEstadoPerso", $arrayEstadosOtrasSol);
                    $objQueryCount->setParameter("paramEstadoPerso", $arrayEstadosOtrasSol);
                }
            }
        }

        if(isset($arrayParametros['arrayFiltrosConsultaCoordinar']) && !empty($arrayParametros['arrayFiltrosConsultaCoordinar']))
        {
            $strLeftJoinInfoServicio .= " LEFT JOIN schemaBundle:AdmiProducto prod WITH prod.id = s.productoId  ";

            if (!isset($arrayParametros["estado"]) || empty($arrayParametros["estado"])
                || !in_array($arrayParametros["estado"], $arrayEstados))
            {
                $strWhere .= "AND (ds.estado IN (:paramEstadosSolPerfilesCoord) ) ";
                $objQuery->setParameter("paramEstadosSolPerfilesCoord", $arrayEstadosOtrasSol);
                $objQueryCount->setParameter("paramEstadosSolPerfilesCoord", $arrayEstadosOtrasSol);
            }

            //$strFromAdicional .= " schemaBundle:AdmiProducto prod, ";
            //$strWhere       .= " AND s.productoId = prod.id ";
            $strWhere       .= " AND ( ";//Validación 1
            $strWhere       .= "        (s.productoId = prod.id ";//Validación 2
            $strWhere       .= "         AND ( ";//Validación 3
            $intContadorFiltrosConsultaCoordinar = 0;
            $intNumTotalFiltrosConsultaCoordinar = $arrayParametros['intNumTotalFiltrosConsultaCoordinar'];
            foreach($arrayParametros['arrayFiltrosConsultaCoordinar'] as $arrayFiltroConsultaCoordinar)
            {
                $strNombreParamFiltroTipoSol                  = "filtroTipoSol".$intContadorFiltrosConsultaCoordinar;
                $strNombreParamFiltroNombreTecnico            = "filtroNombreTecnico".$intContadorFiltrosConsultaCoordinar;
                $strTipoSolicitudFiltrosConsultaCoordinar     = $arrayFiltroConsultaCoordinar['tipoSolicitud'];
                $strNombreTecnicoProdFiltrosConsultaCoordinar = $arrayFiltroConsultaCoordinar['nombreTecnicoProd'];
                
                $strWhere .= " ( ts.descripcionSolicitud = :".$strNombreParamFiltroTipoSol 
                              ." AND prod.nombreTecnico = :".$strNombreParamFiltroNombreTecnico." ) ";
                $objQuery->setParameter($strNombreParamFiltroTipoSol, $strTipoSolicitudFiltrosConsultaCoordinar);
                $objQuery->setParameter($strNombreParamFiltroNombreTecnico, $strNombreTecnicoProdFiltrosConsultaCoordinar);
                $objQueryCount->setParameter($strNombreParamFiltroTipoSol, $strTipoSolicitudFiltrosConsultaCoordinar);
                $objQueryCount->setParameter($strNombreParamFiltroNombreTecnico, $strNombreTecnicoProdFiltrosConsultaCoordinar);
                $intContadorFiltrosConsultaCoordinar++;
                if(intval($intContadorFiltrosConsultaCoordinar) < intval($intNumTotalFiltrosConsultaCoordinar))
                {
                    $strWhere .= " OR ";
                }
            }
            $strWhere .= "         ) ";//Validación 3
            $strWhere .= "        ) ";//Validación 2
            
            if(isset($arrayParametros["tipoSolicitudPerfilesCoordinar"]) && !empty($arrayParametros["tipoSolicitudPerfilesCoordinar"]))
            {
                $strWhereAdic = "";
                if (in_array($arrayParametros["tipoSolicitudPerfilesCoordinar"], $arrayTipoSolicitudes))
                {
                    $strWhereAdic .= " ts.descripcionSolicitud = :paramTipoSolicitudPerfilCoord AND ";
                    $objQuery->setParameter("paramTipoSolicitudPerfilCoord",$arrayParametros["tipoSolicitudPerfilesCoordinar"]);
                    $objQueryCount->setParameter("paramTipoSolicitudPerfilCoord",$arrayParametros["tipoSolicitudPerfilesCoordinar"]);
                }
                
                if ($arrayParametros["tipoSolicitudPerfilesCoordinar"] == "SOLICITUD CAMBIO EQUIPO" || 
                    $arrayParametros["tipoSolicitudPerfilesCoordinar"] == "SOLICITUD RETIRO EQUIPO" ||
                    $arrayParametros["tipoSolicitudPerfilesCoordinar"] == "SOLICITUD AGREGAR EQUIPO" ||
                    $arrayParametros["tipoSolicitudPerfilesCoordinar"] == "SOLICITUD AGREGAR EQUIPO MASIVO" ||
                    $arrayParametros["tipoSolicitudPerfilesCoordinar"] == "SOLICITUD CAMBIO EQUIPO POR SOPORTE" ||
                    $arrayParametros["tipoSolicitudPerfilesCoordinar"] == "SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO"
                   )
                {
                    $strWhereAdic .= " per.estado IN (:paramEstadoPerPerfilCoord) AND ";
                    $objQuery->setParameter("paramEstadoPerPerfilCoord", $arrayEstadosSolicitudCambioEquipo);
                    $objQueryCount->setParameter("paramEstadoPerPerfilCoord",$arrayEstadosSolicitudCambioEquipo);
                }
                else if($arrayParametros["tipoSolicitudPerfilesCoordinar"] == "SOLICITUD PLANIFICACION" 
                    || $arrayParametros["tipoSolicitudPerfilesCoordinar"] == "SOLICITUD MIGRACION")
                {
                    $strWhereAdic .= " per.estado = :paramEstadoPerPerfilCoord AND ";
                    $objQuery->setParameter("paramEstadoPerPerfilCoord", "Activo");
                    $objQueryCount->setParameter("paramEstadoPerPerfilCoord","Activo");
                }
                
                if(isset($arrayParametros["arrayTipoOrdenPerfilesCoordinar"]) && !empty($arrayParametros["arrayTipoOrdenPerfilesCoordinar"]))
                {
                    $strWhereAdic .= " s.tipoOrden in (:tipoOrdenPerfilesCoordinar) AND ";
                    $objQuery->setParameter("tipoOrdenPerfilesCoordinar", $arrayParametros["arrayTipoOrdenPerfilesCoordinar"]);
                    $objQueryCount->setParameter("tipoOrdenPerfilesCoordinar",$arrayParametros["arrayTipoOrdenPerfilesCoordinar"]);
                }
                
                if($arrayParametros["tipoSolicitudPerfilesCoordinar"] == $strSolPlanificacion && $arrayParametros['prodAdicional']!='SI')
                {
                    $strWhereAdic .= " s.estado = ds.estado AND ";
                }
                
                if(isset($strWhereAdic) && !empty($strWhereAdic))
                {
                    $strWhere .= " OR (".rtrim($strWhereAdic,"AND ").") ";
                }
            }
            $strWhere .= "     ) ";//Validación 1
            
            if(isset($arrayParametros["tipoSolicitud"]) && !empty($arrayParametros["tipoSolicitud"])
                && in_array($arrayParametros["tipoSolicitud"], $arrayTipoSolicitudes))
            {
                $strWhere .= "AND ts.descripcionSolicitud = :paramTipoSolFiltroPerfilCoord ";
                $objQuery->setParameter("paramTipoSolFiltroPerfilCoord",$arrayParametros["tipoSolicitud"]);
                $objQueryCount->setParameter("paramTipoSolFiltroPerfilCoord",$arrayParametros["tipoSolicitud"]);
            }
        }
        else if($arrayParametros["tipoSolicitud"] != "")
        {
            if (in_array($arrayParametros["tipoSolicitud"], $arrayTipoSolicitudes))
            {
                $strWhere .= "AND ts.descripcionSolicitud = :paramTipoSolicitud ";
                $objQuery->setParameter("paramTipoSolicitud",$arrayParametros["tipoSolicitud"]);
                $objQueryCount->setParameter("paramTipoSolicitud",$arrayParametros["tipoSolicitud"]);
            }
            if ($arrayParametros["tipoSolicitud"] == "SOLICITUD CAMBIO EQUIPO" || 
                $arrayParametros["tipoSolicitud"] == "SOLICITUD RETIRO EQUIPO" ||
                $arrayParametros["tipoSolicitud"] == "SOLICITUD AGREGAR EQUIPO" ||
                $arrayParametros["tipoSolicitud"] == "SOLICITUD AGREGAR EQUIPO MASIVO" ||
                $arrayParametros["tipoSolicitud"] == "SOLICITUD CAMBIO EQUIPO POR SOPORTE" ||
                $arrayParametros["tipoSolicitud"] == "SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO"
               )
            {
                $strWhere .= "AND per.estado IN (:paramEstadoPer) ";
                $objQuery->setParameter("paramEstadoPer", $arrayEstadosSolicitudCambioEquipo);
                $objQueryCount->setParameter("paramEstadoPer",$arrayEstadosSolicitudCambioEquipo);
            }
            else if($arrayParametros["tipoSolicitud"] == "SOLICITUD PLANIFICACION" or $arrayParametros["tipoSolicitud"] == "SOLICITUD MIGRACION")
            {
                $strWhere .= "AND per.estado = :paramEstadoPer ";
                $objQuery->setParameter("paramEstadoPer", "Activo");
                $objQueryCount->setParameter("paramEstadoPer","Activo");
            }
        }
        else
        {
            $strWhere .= " AND ( (ts.descripcionSolicitud IN (:paramTipoSolicitudes) AND per.estado = :paramEstadoPer ) OR
                          (ts.descripcionSolicitud IN (:paramTipoSolicitu) AND per.estado IN (:paramEstadoPe))) ";

            $objQuery->setParameter("paramTipoSolicitudes",$arraySolicitudesPlanificacion);
            $objQueryCount->setParameter("paramTipoSolicitudes",$arraySolicitudesPlanificacion);
            $objQuery->setParameter("paramEstadoPer", "Activo");
            $objQueryCount->setParameter("paramEstadoPer", "Activo");

            $objQuery->setParameter("paramTipoSolicitu",$arraySolicitudesCambioEquipo);
            $objQueryCount->setParameter("paramTipoSolicitu",$arraySolicitudesCambioEquipo);
            $objQuery->setParameter("paramEstadoPe", $arrayEstadosSolicitudCambioEquipo);
            $objQueryCount->setParameter("paramEstadoPe", $arrayEstadosSolicitudCambioEquipo);
        }

        if($arrayParametros["idSector"]>0)
        {
            $strWhere .= "AND se.id = :paramIdSector ";
            $objQuery->setParameter("paramIdSector",$arrayParametros["idSector"]);
            $objQueryCount->setParameter("paramIdSector",$arrayParametros["idSector"]);
        }

        if($arrayParametros["identificacion"] != "")
        {
            $strWhere .= "AND pe.identificacionCliente = :paramIdentificacion ";
            $objQuery->setParameter("paramIdentificacion",$arrayParametros["identificacion"]);
            $objQueryCount->setParameter("paramIdentificacion",$arrayParametros["identificacion"]);
        }
        if($arrayParametros["nombres"] != "")
        {
            $strWhere .= "AND UPPER(pe.nombres) like UPPER(:paramNombres) ";
            $objQuery->setParameter("paramNombres",$arrayParametros["nombres"].'%');
            $objQueryCount->setParameter("paramNombres",$arrayParametros["nombres"].'%');
        }
        if($arrayParametros["apellidos"] != "")
        {
            $strWhere .= "AND UPPER(pe.apellidos) like UPPER(:paramApellidos) ";
            $objQuery->setParameter("paramApellidos",$arrayParametros["apellidos"].'%');
            $objQueryCount->setParameter("paramApellidos",$arrayParametros["apellidos"].'%');
        }

        if(isset($arrayParametros["ultimaMilla"]) && !empty($arrayParametros["ultimaMilla"]) && $arrayParametros["ultimaMilla"] > 0)
        {
            $strWhere .= "AND st.ultimaMillaId = :paramUltimaMilla ";
            $objQuery->setParameter("paramUltimaMilla", $arrayParametros["ultimaMilla"]);
            $objQueryCount->setParameter("paramUltimaMilla",$arrayParametros["ultimaMilla"]);
        }
        
         //Si el TIPO DE ORDEN viene en el arreglo se filtra por esa tipo de orden
        if($arrayParametros["prefijoEmpresa"] == 'MD'
        && isset($arrayParametros["arrayTipoOrden"]) && !empty($arrayParametros["arrayTipoOrden"]))
        {
            $strWhere         .= " AND s.tipoOrden  in (:tipoOrden) ";
            $objQuery->setParameter("tipoOrden", $arrayParametros["arrayTipoOrden"]);
            $objQueryCount->setParameter("tipoOrden",$arrayParametros["arrayTipoOrden"]);
        }
        
        if($arrayParametros["prefijoEmpresa"] == 'TN')
        {
            //Si el producto viene en el arreglo se filtra por esa descricipcion en particular
            if(isset($arrayParametros["arrayDescripcionProducto"]) && !empty($arrayParametros["arrayDescripcionProducto"]))
            {
                $strFromAdicional .= ' schemaBundle:AdmiProducto prod, ';
                $strWhere         .= " AND s.productoId = prod.id AND prod.descripcionProducto in (:descripcionProducto) ";
                $objQuery->setParameter("descripcionProducto", $arrayParametros["arrayDescripcionProducto"]);
                $objQueryCount->setParameter("descripcionProducto",$arrayParametros["arrayDescripcionProducto"]);
            }
            
            if(isset($arrayParametros["arrayDescripcionProductoExcepcion"]) && !empty($arrayParametros["arrayDescripcionProductoExcepcion"]))
            {
                $strFromAdicional .= ' schemaBundle:AdmiProducto prod, ';
                $strWhere         .= " AND s.productoId = prod.id AND prod.descripcionProducto not in (:descripcionProducto) ";
                $objQuery->setParameter("descripcionProducto", $arrayParametros["arrayDescripcionProductoExcepcion"]);
                $objQueryCount->setParameter("descripcionProducto",$arrayParametros["arrayDescripcionProductoExcepcion"]);
            }
        }
        
        if($boolEsDC)
        {
            if(isset($arrayParametros['region']) && !empty($arrayParametros['region']))
            {
                $strWhere   .= " AND aj.oficinaId        = oficina.id   AND "
                         .  "     oficina.cantonId    = canton.id    AND "
                         .  "     canton.provinciaId  = provincia.id AND "
                         .  "     provincia.regionId  = region.id    AND "
                         .  "     region.nombreRegion = :region ";
                $strFromAdicional .= 
                            " schemaBundle:InfoOficinaGrupo oficina,"
                          . " schemaBundle:AdmiCanton       canton,"
                          . " schemaBundle:AdmiProvincia    provincia,"
                          . " schemaBundle:AdmiRegion       region, ";
                $objQuery->setParameter('region', $arrayParametros['region']);
                $objQueryCount->setParameter("region",$arrayParametros["region"]);
            }
        }
        
        if($arrayParametros["servicioId"] != "")
        {
            $strWhere .= "AND s.id = :paramServicio ";
            $objQuery->setParameter("paramServicio",$arrayParametros["servicioId"]);
            $objQueryCount->setParameter("paramServicio",$arrayParametros["servicioId"]);
        }
        
        $sqlCampos = " SELECT
                            ds.id as idDetalleSolicitud,
                            s.id as idServicio,
                            p.id as idPunto,
                            p.estado as estadoPunto,
                            st.tercerizadoraId,
                            st.id as idServicioTecnico,
                            se.nombreSector,
                            pa.nombreParroquia,
                            ca.nombreCanton,
                            pe.id as id_persona,
                            pe.razonSocial,
                            pe.nombres,
                            pe.apellidos,
                            p.usrVendedor,
                            p.login,
                            s.tipoOrden ,
                            s.estado as estadoServicio,
                            aj.nombreJurisdiccion ,
                            p.longitud,
                            p.latitud,
                            p.direccion,
                            p.path as rutaCroquis,
                            ds.feCreacion as feCreacion,
                            ds.estado,
                            ts.descripcionSolicitud ,
                            p.observacion as observacion,
                            CONCAT(peVend.nombres,CONCAT(' ',peVend.apellidos)) as nombreVendedor,
                            st.ultimaMillaId,
                            ds.observacion as observacion_solicitud, 
                            ds.motivoId as motivoId ";
    
        $strFrom  =  " FROM
                            schemaBundle:AdmiTipoSolicitud ts,
                            schemaBundle:InfoServicio s
                            $strLeftJoinInfoServicio ,
                            $strFromAdicional
                            schemaBundle:InfoServicioTecnico st,
                            schemaBundle:InfoDetalleSolicitud ds,
                            schemaBundle:InfoPersona pe,
                            schemaBundle:InfoPersonaEmpresaRol per,
                            schemaBundle:InfoEmpresaRol er,
                            schemaBundle:AdmiRol ar,
                            schemaBundle:AdmiTipoRol atr,
                            schemaBundle:AdmiJurisdiccion aj,
                            schemaBundle:AdmiSector se,
                            schemaBundle:AdmiParroquia pa,
                            schemaBundle:AdmiCanton ca,
                            schemaBundle:InfoPunto p

                            LEFT JOIN schemaBundle:InfoPersona peVend WITH peVend.login = p.usrVendedor
                            
                            WHERE
                                s.id = ds.servicioId
                                AND s.puntoId = p.id
                                AND st.servicioId = s.id ";

        if($arrayParametros["tipoSolicitud"] == $strSolPlanificacion && $arrayParametros['prodAdicional']!='SI')
        {
            $strFrom = $strFrom . " AND s.estado = ds.estado ";
        }
        else if($arrayParametros["tipoSolicitud"] == "" && $arrayParametros['prodAdicional']!='SI'
            && (!isset($arrayParametros['arrayFiltrosConsultaCoordinar']) || empty($arrayParametros['arrayFiltrosConsultaCoordinar'])))
        {
            $strFrom = $strFrom . " AND (( s.estado = ds.estado AND ts.descripcionSolicitud = :paramTipoSoli ) OR
                                    (s.estado <> ds.estado AND ts.descripcionSolicitud <> :paramTipoSoli)) ";
            $objQuery->setParameter("paramTipoSoli", $strSolPlanificacion);
            $objQueryCount->setParameter("paramTipoSoli",$strSolPlanificacion);
        }

        $strFrom  =   $strFrom . "  AND ts.id = ds.tipoSolicitudId
                                    AND p.personaEmpresaRolId = per.id
                                    AND per.empresaRolId = er.id
                                    AND er.rolId = ar.id
                                    AND per.personaId = pe.id
                                    AND p.sectorId = se.id
                                    AND se.parroquiaId = pa.id
                                    AND pa.cantonId = ca.id
                                    AND aj.id = p.puntoCoberturaId
                                    AND er.empresaCod = :paramCodEmpresa
                                    AND ar.tipoRolId = atr.id
                                    AND atr.descripcionTipoRol = :paramDescripcionTipoRol ";

        $strOrderBy = " ORDER BY ds.feCreacion DESC ";
        $strFrom = $strFrom . $strWhere . $strOrderBy;

        $objQuery->setParameter("paramCodEmpresa", $arrayParametros["codEmpresa"]);
        $objQuery->setParameter("paramDescripcionTipoRol", $strDescripTipoRol);
        $objQueryCount->setParameter("paramCodEmpresa",$arrayParametros["codEmpresa"]);
        $objQueryCount->setParameter("paramDescripcionTipoRol",$strDescripTipoRol);

        $objQuery->setDQL($sqlCampos.$strFrom);

        if(!empty($intStart))
        {
            $objQuery->setFirstResult($intStart);
        }
        if(!empty($intLimit))
        {
            $objQuery->setMaxResults($intLimit);
        }
        $arrayDatos = $objQuery->getResult();

        if($arrayDatos)
        {
            $sqlCamposCount = "SELECT COUNT(ds.id) ";

            $objQueryCount->setDQL($sqlCamposCount.$strFrom);
                        
            $intTotalRegistros = $objQueryCount->getSingleScalarResult();
        }
        
        $arrayDatosTotal["registros"] = $arrayDatos;
        $arrayDatosTotal["total"]     = $intTotalRegistros;
        return $arrayDatosTotal;
    }
    
    /* ************************** ASIGNAR RESPONSABLE ***************************************************** */
    /**
     * Método que genera el json con los registros de las respectivas solicitudes de la opción asignar responsable
     * @param entityManager $em
     * @param integer $start
     * @param integer $limit
     * @param string $startDate
     * @param string $endDate
     * @param string $login2
     * @param string $sectorId 
     * @param string $descripcionPunto 
     * @param string $estado
     * @param string $login
     * @param string $usrvendedor
     * @param string $search_tipoSolicitud
     * @param string $ciudad
     * @param string $codEmpresa
     * 
     * @return json $resultado
     * 
     * @author Modificado: Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 15-12-2017 Se parametriza variables entrantes a la funcion
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 09-09-2016 Se coloca el nombre para el origen como 'asignarResponsable' que permitirá validar las solicitudes 
     *                         de cambio de equipo y retiro de equipo que se encuentran como opciones en el combo de tipo de solicitudes
     *                         Se filtra para que no muestre los productos parametrizados que deben verse en el flujo normal dado que otras areas
     *                         los gestionan
     * 
     * @author Walther Joao Gaibor C. <wgaibor@telconet.ec>
     * @version 1.2 21-01-2018 Si tipo orden es C se setea el valor cambio tipo medio
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 21-02-2018 Se agrega validacion para solicitudes de reubicacion de servicios cambie el 
     *                         nombre de producto segun lo indicado por el usuario
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.4 17-04-2018 Se elimina indice [0] del array de productos especiales y excepcion dado que se cambia la forma
     *                         en que esta informacion es enviada desde el controller
     * 
     * @since 1.0
     */
    public function generarJsonAsignarResponsable( $arrayParametros )
    {      
        $arr_encontrados    = array();
        $numOrdenServicio   = null;
        $arrayRegistrosTotal = $this->getRegistros(  '',
                                                    '',
                                                    $arrayParametros['strFechaDesde'],
                                                    $arrayParametros['strFechaHasta'],
                                                    'Planificada',
                                                    $arrayParametros['strLogin'],
                                                    $arrayParametros['intSectorId'],
                                                    '',
                                                    $arrayParametros['strDescripcionPunto'], 
                                                    $arrayParametros['strUsrVendedor'], 
                                                    $numOrdenServicio, 
                                                    $arrayParametros['strCiudad'],
                                                    'asignarResponsable',
                                                    $arrayParametros['intCodEmpresa'],
                                                    $arrayParametros['intIdTipoSolicitud']);
        
        $arrayRegistros     = $this->getRegistros(  $arrayParametros['intStart'],
                                                    $arrayParametros['intLimit'] ,
                                                    $arrayParametros['strFechaDesde'],
                                                    $arrayParametros['strFechaHasta'],
                                                    'Planificada', 
                                                    $arrayParametros['strLogin'],
                                                    $arrayParametros['intSectorId'],
                                                    '',
                                                    $arrayParametros['strDescripcionPunto'],
                                                    $arrayParametros['strUsrVendedor'], 
                                                    $numOrdenServicio, 
                                                    $arrayParametros['strCiudad'],
                                                    'asignarResponsable',
                                                    $arrayParametros['intCodEmpresa'],
                                                    $arrayParametros['intIdTipoSolicitud']);
        
        $boolFlujoNormal = true;
        
        if(isset($arrayParametros['arrayDescripcionProducto']) && !empty($arrayParametros['arrayDescripcionProducto']))
        {
            $boolFlujoNormal = false;//Flujo DC
        }
        
        if($arrayRegistros)
        {
            $num = count($arrayRegistrosTotal);
            foreach($arrayRegistros as $data)
            {
                $Servicio           = $this->_em->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]);
                
                //si contiene producto
                if($arrayParametros['strPrefijoEmpresa'] == 'TN' && $Servicio->getProductoId())
                {                    
                    $strDescripcionProducto = $Servicio->getProductoId()->getDescripcionProducto();

                    if($boolFlujoNormal)
                    {
                        if(in_array($strDescripcionProducto,$arrayParametros['arrayDescripcionProductoExcepcion']))
                        {
                           continue; 
                        }
                    }
                    else
                    {
                        if(!in_array($strDescripcionProducto,$arrayParametros['arrayDescripcionProducto']))
                        {
                           continue; 
                        }
                        else//Si si existe y la region es igual
                        {
                            if($arrayParametros['strRegion'] != $data["nombreRegion"])
                            {
                                continue;
                            }
                        }
                    }
                }
                
                $nombreVendedor     = (isset($data["nombreVendedor"]) ? ($data["nombreVendedor"] ? ucwords(strtolower($data["nombreVendedor"])) : "")
                                                                      : "");
                $objServicioTecnico = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($data["idServicio"]);
                $nombreProducto     = ($Servicio->getProductoId() ? $Servicio->getProductoId()->getDescripcionProducto() : "");
                $nombrePlan         = ($Servicio->getPlanId() ? $Servicio->getPlanId()->getNombrePlan() : "");
                $nombreProductoPlan = $nombreProducto . $nombrePlan;
                
                if ($arrayParametros['strPrefijoEmpresa']  == 'TN' && $data["tipoOrden"]== 'R')
                {
                    $nombreProductoPlan = "Reubicación de servicios";
                }
                $ultimaMilla        = $arrayParametros['emInfraestructura']->getRepository('schemaBundle:AdmiTipoMedio')
                                                                           ->findOneById($data["ultimaMillaId"]);

                $nombreSector       = ($data["nombreSector"] ? $data["nombreSector"] : "");
                $parroquia          = ($data["nombreParroquia"] ? $data["nombreParroquia"] : "");
                $ciudad             = ($data["nombreCanton"] ? $data["nombreCanton"] : "");
                $jurisdiccion       = ($data["nombreJurisdiccion"] ? $data["nombreJurisdiccion"] : "");
                $cliente            = ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
                ($data["longitud"] && $data["latitud"]) ? $coordenadas = $data["longitud"] . ", " . $data["latitud"] : $coordenadas = "";
                $feSolicitaPlanificacion    = strval(date_format($data["feCreacion"], "d/m/Y G:i"));
                $latitud                    = ($data["latitud"] ? $data["latitud"] : "");
                $longitud                   = ($data["longitud"] ? $data["longitud"] : "");

                // ************************* RUTA DE LA IMAGEN DEL CROQUIS *************** 
                $pathCroquis        = "public/uploads/croquis/";
                $pathImagenDefault  = "public/images/images_crud/";
                $strRutaVerificaCroquis= ($data["rutaCroquis"] != "" ? "./$pathCroquis" . $data["rutaCroquis"] : "" );
                if(file_exists($rutaVerificaCroquis))
                {
                    $strNombreArchivo  = $data["rutaCroquis"];
                    $rutaArchivo    = "/" . $pathCroquis . $strNombreArchivo;
                }
                else
                {
                    $strNombreArchivo  = "no_image_200_200.png";
                    $rutaArchivo    = "/" . $pathImagenDefault . $strNombreArchivo;
                }
                $rutaCroquis = ($rutaArchivo != "" ? "<img src='$rutaArchivo' title='$strNombreArchivo' alt='$strNombreArchivo' width='480' height='450' />"
                                                   : "" );
                $fePlanificada = "";
                $HoraIniPlanificada = "";
                $HoraFinPlanificada = "";


                if(strtoupper($data["estado"]) != strtoupper("PrePlanificada"))
                {
                    $HistDetalles = $this->_em->getRepository('schemaBundle:InfoDetalleSolHist')
                                              ->findOneDetalleSolicitudHistorial($data["idDetalleSolicitud"], $data["estado"]);
                    if($HistDetalles && count($HistDetalles) > 0)
                    {
                        $DetalleHistorial   = $HistDetalles;
                        $fePlanificada      = strval(date_format($DetalleHistorial->getFeIniPlan(), "d/m/Y"));
                        $HoraIniPlanificada = strval(date_format($DetalleHistorial->getFeIniPlan(), "h:i"));
                        $HoraFinPlanificada = strval(date_format($DetalleHistorial->getFeFinPlan(), "h:i"));
                    }
                }

                $fechaPlanificacionReal = $fePlanificada . " (" . $HoraIniPlanificada . " - " . $HoraFinPlanificada . ")";

                if($data['tercerizadoraId'])
                {
                    $infoPersona    = $arrayParametros['emInfraestructura']->getRepository('schemaBundle:InfoPersona')
                                                                           ->find($data["tercerizadoraId"]);
                    $tercerizadora  = sprintf("%s", $infoPersona);
                }
                else
                {
                    $tercerizadora = "";
                }

                if($data["tipoOrden"])
                {
                    switch($data["tipoOrden"])
                    {
                        case "N":
                            $tipo_orden = "Nuevo";
                            break;
                        case "T":
                            $tipo_orden = "Traslado";
                            break;
                        case "R":
                            $tipo_orden = "Reubicacion";
                            break;
                        case "C":
							 $tipo_orden = "Cambio Tipo Medio";
							 break;
                        default:
                            $tipo_orden = "Nuevo";
                            break;
                    }
                }
                else
                {
                    $tipo_orden = "Nuevo";
                }
                $esRecontratacion = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                              ->esRecontratacion($data['id_persona'], $arrayParametros['intCodEmpresa']);
                $arr_encontrados[] = array(
                    'id_factibilidad'       => $data["idDetalleSolicitud"],
                    'id_servicio'           => $data["idServicio"],
                    'id_punto'              => $data["idPunto"],
                    'tipo_orden'            => $tipo_orden,
                    'esRecontratacion'      => $esRecontratacion,
                    'cliente'               => ucwords(strtolower(trim($cliente))),
                    'descripcionSolicitud'  => ucwords(strtolower(trim($data['descripcionSolicitud']))),
                    'vendedor'              => trim($nombreVendedor),
                    'login2'                => trim($data["login"]),
                    'tercerizadora'         => $tercerizadora,
                    'producto'              => trim($nombreProductoPlan),
                    'coordenadas'           => trim($coordenadas),
                    'direccion'             => trim($data["direccion"]),
                    'ciudad'                => ucwords(strtolower(trim($ciudad))),
                    'jurisdiccion'          => ucwords(strtolower(trim($jurisdiccion))),
                    'nombreSector'          => ucwords(strtolower(trim($nombreSector))),
                    'fechaPlanificacionReal'=> trim($fechaPlanificacionReal),
                    'fePlanificada'         => trim($fePlanificada),
                    'HoraIniPlanificada'    => trim($HoraIniPlanificada),
                    'HoraFinPlanificada'    => trim($HoraFinPlanificada),
                    'ultimaMilla'           => ($ultimaMilla) ? $ultimaMilla->getNombreTipoMedio() : "",
                    'strTipoEnlace'         => ($objServicioTecnico) ? $objServicioTecnico->getTipoEnlace() : "",
                    'rutaCroquis'           => trim($rutaCroquis),
                    'latitud'               => trim($latitud),
                    'longitud'              => trim($longitud),
                    'action1'               => 'button-grid-Gmaps',
                    'action2'               => 'button-grid-Foto',
                    'action3'               => 'button-grid-Tuerca'
                );
            }

            if($num == 0)
            {
                $resultado  = array(
                                    'total'         => 1,
                                    'encontrados'   => array(
                                                                'id_factibilidad'       => 0, 
                                                                'id_servicio'           => 'Ninguno', 
                                                                'factibilidad_id'       => 0,
                                                                'factibilidad_nombre'   => 'Ninguno', 
                                                                'estado'                => 'Ninguno'));
                $resultado  = json_encode($resultado);
                return $resultado;
            }
            else
            {
                $dataF      = json_encode($arr_encontrados);
                $resultado  = '{"total":"' . $num . '","encontrados":' . $dataF . '}';
                return $resultado;
            }
        }
        else
        {
            $resultado      = '{"total":"0","encontrados":[]}';
            return $resultado;
        }
    }

    /*     * ************************* ASIGNAR RED ***************************************************** */
    /**
     * Documentación para el método 'generarJsonAsignarRed'.
     *
     * Obtiene json con registros de asignacion de recursos de red
     *
     * @param EntityManager     $em
     * @param integer           $start
     * @param integer           $limit
     * @param date              $startDate
     * @param date              $endDate
     * @param String            $login2
     * @param integer           $sectorId
     * @param String            $descripcionPunto
     * @param String            $usrvendedor
     * @param String            $numOrdenServicio
     * @param String            $ciudad
     * @param integer           $codEmpresa
     * @param object            $serviceTecnico
     *
     * @return Object           $datos json con listado de registros de asignacion de recursos de red
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 02-12-2014
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 23-12-2014
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.3 21-03-2016          Se agrega parametro tipoElementoPadre en funcion generarJsonDatosBackbone
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.4 25-05-2016          Se agrega parametro UM en json de respuesta de metodo
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.5 12-09-2016          Se agrega validación en bloque If de servicios con tipo de orden traslado para que solo sean 
     *                                  considerado para la empresa MD, para TN no se deben ejecutar estas validaciones
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.6 15-11-2016          Se agrega validación que determina si un servicio depende de un punto que es pseudoPe para mostrar
     *                                  pantalla correcta de asignacion de recursos de red
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.7 18-12-2017          Se parametriza la funcion y se valida visualizacion de registros segun flujos de DC dado que multiples
     *                                  departamentos pueden consultar información
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.8 23-11-2017          Se agrega validación para obtener la información técnica para la última milla FTTx y además se agrega
     *                                  la obtención de la ip de acuerdo a la cantidad de servicios
     * 
     *
     * @author Walther Joao Gaibor C. <wgaibor@telconet.ec>
     * @version 1.9 21-01-2018 Si tipo orden es C se setea el valor cambio tipo medio
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.0 24-04-2018          Se agrega validaciones para flujo de Ips adicionales para Small Business  
     * 
     * @author Allan Suarez C. <arsuarez@telconet.ec>
     * @version 2.1 14-05-2018 Se ajusta para que muestre los registros segun parametrizacion de productos como Especiales y para que sean
     *                         visualizados segun el departamento que tenga configurado
     * 
     * @author John Vera R. <javera@telconet.ec>
     * @version 2.2 25-10-2018 Se agrega al json la descripción factura para de esta manera identificarlo como un servicio que esta relacionado con 
     * el producto de Cou Lineas Telefonia Fija de TN
     * 
     * @author John Vera R. <javera@telconet.ec>
     * @version 2.3 04-12-2018 Se excluye el producto COU LINEAS TELEFONIA FIJA de la pantalla de ASIGNAR RECURSOS DE RED
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.4 14-01-2019 - Se realizan ajustes en la consulta de ordenes de trabajo de nodos-wifi, se especifican si son de
     *                           Administación o Navegación
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.5 07-02-2019 Se agrega validación para obtener la información técnica para los servicios TELCOHOME y la obtención de sus ips
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.6 07-03-2019 Servicios TelcoHome no trabajarán con ips, por lo que se elimina obtención de ip propia del producto
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.7 25-06-2019 Se oculta el botón de asignación recursos de red para las solicitudes de migración de 
     *                          servicios Small Business y TelcoHome
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.8 30-09-2019 Se retorna el tipo de red por servicio
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 2.9 20-11-2019 - Se agrega logica para agregar 'strTipoDeRed' al arreglo de retorno y asi obtener el tipo de red GPON o MPLS.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 3.0 26-11-2019 | Se agrega condicional para que se pueda obtener la data de los servicios "INTERNET WIFI"
     *                           con ultima milla "UTP".
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 01-04-2021 | Se agrega caracteristica para controlar el flujo de zerotouch y prevenir que los usuarios de L2 asignen
     *                       recursos de red durante el proceso.
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 2.9 18-02-2021 | Se agrega condicional para que se pueda obtener el tipo de Ip si es Privada o Fija
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.0 20-05-2021 - Se verifica si existen productos adicionales Camara con servicio principal DATOS SAFECITY,
     *                           las adicionales no deben aparecer en el grid solo el principal.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.1 17-07-2021 Se valida el objeto producto para obtener el tipo de red.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.2 18-10-2021 Se agrega la asignación de recursos de red para los servicios adicionales Wi-Fi GPON_MPLS
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.3 16-03-2022 - Se verifica la vrf para los servicios cámara safecity.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.4 11-05-2022 - Se obtiene el arreglo de las vrf de los servicios cámara safecity.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.5 15-06-2022 - Se pasa el id de la empresa al método de obtener la vrf y vlan de los servicios safecity.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.6 01-08-2022 - Se agrega el parámetro para validar si el servicio es Cámara VPN GPON.
     * 
     * @author Josue Valencia <ajvalencia@telconet.ec>
     * @version 3.7 26-10-2022 - Se agrega parámetro boolean para verificar que el producto sea CLEAR CHANNEL PUNTO A PUNTO.
     *
     * @author Emmanuel Martillo  <emartillo@telconet.ec>
     * @version 3.7 22-03-2023    Se agrega validacion por prefijo de empresa para Ecuanet.
     * 
     */
    public function generarJsonAsignarRed($arrayParametros)
    {
        $em                     = $arrayParametros['emInfraestructura'];
        $codEmpresa             = $arrayParametros['strCodEmpresa'];
        $serviceTecnico         = $arrayParametros['serviceTecnico'];
        $arr_encontrados        = array();
        $arrayCantidadIps       = array();
        $strDescripcionFactura  = "";
        $strTipoNodoWifi        = "";
        $strTipoNodoWifiAdm     = "";
        $strTipoNodoWifiNav     = "";

        $arrayRegistrosTotal = $this->getRegistros('', 
                                                '', 
                                                $arrayParametros['strFechaDesde'], 
                                                $arrayParametros['strFechaHasta'], 
                                                'AsignadoTarea', 
                                                $arrayParametros['strLogin'], 
                                                $arrayParametros['intSectorId'], 
                                                '', 
                                                $arrayParametros['strDescripcionPunto'], 
                                                $arrayParametros['strUsrVendedor'], 
                                                $arrayParametros['intNumeroOrden'], 
                                                $arrayParametros['strCiudad'], 
                                                "recursosRed", 
                                                $codEmpresa, 
                                                $arrayParametros['strTipoSolicitud']
                                               );
        $arrayRegistros   = $this->getRegistros($arrayParametros['intStart'], 
                                                $arrayParametros['intLimit'], 
                                                $arrayParametros['strFechaDesde'], 
                                                $arrayParametros['strFechaHasta'], 
                                                'AsignadoTarea', 
                                                $arrayParametros['strLogin'], 
                                                $arrayParametros['intSectorId'], 
                                                '', 
                                                $arrayParametros['strDescripcionPunto'], 
                                                $arrayParametros['strUsrVendedor'], 
                                                $arrayParametros['intNumeroOrden'], 
                                                $arrayParametros['strCiudad'], 
                                                "recursosRed", 
                                                $codEmpresa, 
                                                $arrayParametros['strTipoSolicitud']
                                               );
        $elemento                 = "";
        $intCantidadIpsReservadas = 0;
        $boolMostrarTodo          = true;
        $intContServicioOculto       = 0;
        
        if($arrayRegistros)
        {
            //SI el departamento es el distinto al asignado procedimentalmente
            $boolVisualizarProductosEspeciales = false;
            
            if(!empty($arrayParametros['arrayDescripcionProducto']))
            {
                $boolVisualizarProductosEspeciales = true;
                
                if($arrayParametros['arrayDescripcionProducto'][0]['visibilidad'] == 'UNICO')
                {
                    $boolMostrarTodo = false;//Indicara que el departamento solo vera el producto configuirado especial en caso
                                             //de ser parametrizado
                }
            }
            
            $num = count($arrayRegistrosTotal);
            foreach($arrayRegistros as $key => $data)
            {
                $Servicio               = $this->_em->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]);                
                $objProducto            = $Servicio->getProductoId();
                $strDescripcionProducto = is_object($objProducto)?$objProducto->getDescripcionProducto():'';
                
                //Extrae descripcion parametrizada del producto CLEAR CHANNEL PUNTO A PUNTO
                
                $arrayParDet= $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne('ESTADO_CLEAR_CHANNEL','COMERCIAL','','ESTADO_CLEAR_CHANNEL','','','','','',10);
                
                
                $strDescripcionServicio = $arrayParDet["valor1"];
                $boolMostrarClearChannel = false;
                $strTipoRedServicio = '';
                if(is_object($objProducto))
                {
                    $boolMostrarClearChannel = $objProducto->getDescripcionProducto() == $strDescripcionServicio ?true:false;
                    if($boolMostrarClearChannel)
                    {
                        $arrayServicioProdCaracts   = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                           ->findByValorCaractServicio(array(  "tipo" => 'COMERCIAL',
                                                           						               "descripCaract"  => 'Tecnologia OTN',
                                                                                                "servicioId"    => $Servicio->getId(),
                                                                                                "estado"        => 'Activo'));
                        foreach($arrayServicioProdCaracts as $objServicioProdCaract)
                        {
                            $strTipoRedServicio = $objServicioProdCaract->getValor();
                        }
                    }
                }
                
                $boolMostrarProducto    = true;
                
                //Si se trata de visualizacion de productos especiales 
                if($boolVisualizarProductosEspeciales && in_array($strDescripcionProducto,$arrayParametros['arrayDescripcionProductoExcepcion']) )
                {
                    $boolMostrarProducto    = false;
                    
                    //Si el producto se encuentra configurado para el departamento que esta realizando la gestion
                    foreach($arrayParametros['arrayDescripcionProducto'] as $arrayProductosEspeciales)
                    {
                        if($strDescripcionProducto == $arrayProductosEspeciales['producto'])
                        {
                            //Busca la caracteristica parametrizada en el producto para validar si existe y mostrar este registro de forma normal
                            if(!empty($arrayProductosEspeciales['caracteristica']))
                            {
                                $arrayRespuesta = $serviceTecnico
                                                  ->getArrayInformacionTipoSolucionPorPreferencial($Servicio,
                                                                                                   $arrayProductosEspeciales['caracteristica']);
                                
                                if($arrayRespuesta['boolContieneCaract'])
                                {
                                    $boolMostrarProducto = true;
                                    break;
                                }
                            }
                            else
                            {
                                $boolMostrarProducto = true;
                                break;
                            }
                        }                                                
                    }       
                }
                else
                {
                    if(!$boolMostrarTodo)
                    {
                        continue;
                    }
                }
                              
                if(!$boolMostrarProducto)
                {
                    continue;
                }

                //se realiza la validación para agregar el servicio adicionales para la red GPON
                if(is_object($Servicio) && is_object($objProducto) && isset($serviceTecnico) && is_object($serviceTecnico))
                {
                    $arrayParProductoVisible = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('NUEVA_RED_GPON_TN',
                                                                        'COMERCIAL',
                                                                        '',
                                                                        '',
                                                                        $objProducto->getId(),
                                                                        'FLUJO_OCULTO',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $codEmpresa);
                    if(isset($arrayParProductoVisible) && !empty($arrayParProductoVisible)
                        && isset($arrayParProductoVisible['valor3']) && !empty($arrayParProductoVisible['valor3'])
                        && isset($arrayParProductoVisible['valor4']) && !empty($arrayParProductoVisible['valor4']))
                    {
                        $strDescCaract    = $arrayParProductoVisible['valor3'];
                        $strPermiteCaract = $arrayParProductoVisible['valor4'];
                        $objServProdCaractValServ = $serviceTecnico->getServicioProductoCaracteristica($Servicio,
                                                                                                       $strDescCaract,
                                                                                                       $objProducto);
                        //verificar si el servicio principal esta EnVerificion o Activo
                        $objServicioPrincipal   = null;
                        $objServProdCaractDatos = $serviceTecnico->getServicioProductoCaracteristica($Servicio,
                                                                                                     "RELACION_SERVICIOS_GPON_SAFECITY",
                                                                                                     $objProducto);
                        if(is_object($objServProdCaractDatos))
                        {
                            $objServicioPrincipal = $this->_em->getRepository('schemaBundle:InfoServicio')
                                                                                            ->find($objServProdCaractDatos->getValor());
                        }
                        if( is_object($objServicioPrincipal) &&
                            ($objServicioPrincipal->getEstado() != "EnVerificacion" && $objServicioPrincipal->getEstado() != "Activo") &&
                            ( (!is_object($objServProdCaractValServ) && $strPermiteCaract == "NO") ||
                              (is_object($objServProdCaractValServ) && $strPermiteCaract == "SI") ) )
                        {
                            $intContServicioOculto++;
                            continue;
                        }
                        //obtener servicio SW POE
                        $arrayParServSwPoe = array(
                            "objPunto"      => $Servicio->getPuntoId(),
                            "strParametro"  => "PRODUCTO_ADICIONAL_SW_POE",
                            "strCodEmpresa" => $codEmpresa
                        );
                        $arrayResultServicioSwPoe = $serviceTecnico->getServicioGponPorProducto($arrayParServSwPoe);
                        if($arrayResultServicioSwPoe['status'] == "OK"
                           && is_object($objServicioPrincipal) && $objServicioPrincipal->getEstado() == "Activo")
                        {
                            $objServicioSwPoe = $arrayResultServicioSwPoe['objServicio'];
                            if(is_object($objServicioSwPoe) && $objServicioSwPoe->getEstado() != "Activo"
                               && $objServicioSwPoe->getId() != $Servicio->getId())
                            {
                                $intContServicioOculto++;
                                continue;
                            }
                        }
                    }
                }

                $nombreVendedor = (isset($data["nombreVendedor"]) ? 
                                  ($data["nombreVendedor"] ? ucwords(strtolower($data["nombreVendedor"])) : "") : "");
                
                $entityServicioTecnico = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($data["idServicio"]);
                $strNombreProducto     = "";
                $strNombrePlan         = "";

                $nombreTecnico          = "";
                $tieneIp                = 0;
                $cantidadIp             = 0;
                $esPlan                 = "no";
                $idPlan                 = "";
                $elementoInterface      = "";
                $elementoCaja           = "";
                $elementoSplitter       = "";
                $strMismosRecursos      = "";
                $strDiferenteTecnologia = "";
                $objPlan    = $Servicio->getPlanId();
                
                if(is_object($objPlan))
                {
                    $idPlan     = $objPlan->getId();
                    $strNombrePlan = $objPlan->getNombrePlan();
                    $arrayDetallesPlan = $this->_em->getRepository('schemaBundle:InfoPlanDet')->findByPlanId($idPlan);
                    if (count($arrayDetallesPlan) == 1)
                    {    
                        foreach($arrayDetallesPlan as $detallePlan)
                        {
                            $entityProducto = $this->_em->getRepository('schemaBundle:AdmiProducto')->find($detallePlan->getProductoId());
                            $nombreTecnico  = $entityProducto->getNombreTecnico();
                        }
                    }
                    $esPlan     = "si";
                    
                    /** dms * */
                    //Se obtiene la cantidad de ips correspondientes al plan de acuerdo a la empresa
                    $detalleProd = $this->_em->createQuery("select  pd.cantidadDetalle from
                                                            schemaBundle:InfoPlanCab pc
                                                            join schemaBundle:InfoPlanDet pd WITH pd.planId = pc.id
                                                            join schemaBundle:AdmiProducto p WITH p.id = pd.productoId
                                                            where pc.empresaCod = $codEmpresa and
                                                            pc.id = $idPlan and p.nombreTecnico = 'IP' 
                                                            and pc.estado = pd.estado    
                                                            ");

                    try
                    {
                        $detalleProd->setMaxResults(1);
                        $cantidadIp = $detalleProd->getSingleScalarResult();
                        if($cantidadIp > 0)
                            $tieneIp = 1;
                    }
                    catch(\Doctrine\ORM\NoResultException $e)
                    {
                        $cantidadIp = 0;
                    }
                    /** dms * */
                }
                
                if(is_object($objProducto))
                {
                    $strNombreProducto  = $Servicio->getProductoId()->getDescripcionProducto();
                    $nombreTecnico      = strtoupper($objProducto->getNombreTecnico());
                    if($nombreTecnico === 'INTERNET SMALL BUSINESS' || $nombreTecnico === 'IPSB')
                    {
                        $tieneIp    = 1;
                        $cantidadIp = $Servicio->getCantidad();
                    }
                    else if($nombreTecnico === 'TELCOHOME')
                    {
                        $tieneIp    = 0;
                        $cantidadIp = 0;
                    }
                    else
                    {
                        $idServicio = $Servicio->getId();
                        /** dms * */
                        //Se obtiene la cantidad de ips correspondientes al plan de acuerdo a la empresa
                        $detalleProd = $this->_em->createQuery("select s.cantidad from
                                                                schemaBundle:InfoServicio s
                                                                join schemaBundle:AdmiProducto ap WITH ap.id = s.productoId
                                                                where s.id = $idServicio and ap.nombreTecnico = 'IP'");

                        try
                        {
                            $cantidadIp = $detalleProd->getSingleScalarResult();
                            if($cantidadIp > 0)
                                $tieneIp = 1;
                        }
                        catch(\Doctrine\ORM\NoResultException $e)
                        {
                            $cantidadIp = 0;
                        }
                        /** dms * */
                    }
                }

                $strNombreProductoPlan = $strNombreProducto . $strNombrePlan;

                if(is_object($Servicio))
                {
                    $arrayValoresParametros = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne("PARAMETROS OS NODOS WIFI",
                                                                                                                 "INFRAESTRUCTURA",
                                                                                                                 "RECURSOS DE RED NODO WIFI",
                                                                                                                 "Orden Servicio NODO WIFI",
                                                                                                                 '',
                                                                                                                 '',
                                                                                                                 '',
                                                                                                                 '',
                                                                                                                 '',
                                                                                                                 '');

                    if(isset($arrayValoresParametros) && !empty($arrayValoresParametros))
                    {
                        $strTipoNodoWifiAdm = $arrayValoresParametros["valor1"];
                        $strTipoNodoWifiNav = $arrayValoresParametros["valor3"];

                        $strDescripcionFactura = $Servicio->getDescripcionPresentaFactura();

                        if(!empty($strDescripcionFactura))
                        {
                            if($strDescripcionFactura === $strTipoNodoWifiAdm)
                            {
                                $strTipoNodoWifi = $arrayValoresParametros["valor2"];
                            }

                            if($strDescripcionFactura === $strTipoNodoWifiNav)
                            {
                                $strTipoNodoWifi = $arrayValoresParametros["valor4"];
                            }
                        }
                    }

                    $strNombreProductoPlan = $strNombreProductoPlan .$strTipoNodoWifi;
                }

                $strDescripcionFactura = "";
                $strTipoNodoWifi       = "";

                $ultimaMilla = $em->getRepository('schemaBundle:AdmiTipoMedio')->findOneById($data["ultimaMillaId"]);
                if($ultimaMilla)
                {
                    if($ultimaMilla->getNombreTipoMedio() == "Cobre")
                    {
                        if($data["elementoId"])
                        {
                            $elemento = $em->getRepository('schemaBundle:InfoElemento')->findOneById($data["elementoId"]);
                            $pop      = $em->getRepository('schemaBundle:InfoRelacionElemento')->getPadrebyHijo($data["elementoId"], "", "");
                        }
                        else
                        {
                            $pop['id'] = "";
                            $pop['nombreElemento'] = "";
                        }
                    }
                    if($ultimaMilla->getNombreTipoMedio() == "Radio")
                    {
                        $elemento = $em->getRepository('schemaBundle:InfoElemento')->findOneById($data["elementoId"]);
                        $pop['id'] = "";
                        $pop['nombreElemento'] = "";
                    }
                    $pop['marcaElemento'] = null;

                    /*Se agrega validacion para servicios INTERNET WIFI con UM UTP o Radio.*/
                    if($ultimaMilla->getNombreTipoMedio() == "Fibra Optica" ||
                        $ultimaMilla->getNombreTipoMedio() == "FTTx" ||
                        ($strDescripcionProducto == 'INTERNET WIFI' &&
                        ($ultimaMilla->getNombreTipoMedio() == "UTP" || $ultimaMilla->getNombreTipoMedio() == "Radio"))
                    )
                    {
                        if($data["elementoId"])
                        {
                            $elemento              = $em->getRepository('schemaBundle:InfoElemento')->findOneById($data["elementoId"]);
                            $elementoInterface     = $em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                        ->findOneById($data["interfaceElementoId"]);
                            $elementoCaja          = $em->getRepository('schemaBundle:InfoElemento')->findOneById($data["elementoContenedorId"]);
                            $elementoSplitter      = $em->getRepository('schemaBundle:InfoElemento')->findOneById($data["elementoConectorId"]);
                            $pop['id']             = $elemento->getId();
                            $pop['nombreElemento'] = $elemento->getNombreElemento();
                            $pop['marcaElemento']  = $elemento->getModeloElementoId()
                                                              ->getMarcaElementoId()
                                                              ->getNombreMarcaElemento();
                            if ($data["descripcionSolicitud"]=='SOLICITUD MIGRACION')
                            {
                                $objElementoHuawei  = $em->getRepository('schemaBundle:InfoElemento')
                                                         ->findOneBy(array('refElementoId'=>$data["elementoConectorId"]));
                                $elementoSplitter   = $objElementoHuawei;
                                if($objElementoHuawei)
                                {
                                $arrayElementoContenedorOlt       = $em->getRepository('schemaBundle:InfoElemento')
                                                                       ->getElementoPadre($objElementoHuawei->getId(), 'ELEMENTO', 'OLT');
                                if ($arrayElementoContenedorOlt)
                                {
                                    $elementoInterface                = $em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                       ->findOneById($arrayElementoContenedorOlt[0]['IDINTERFACEELEMENTO']);
                                    $pop['id']                           = $arrayElementoContenedorOlt[0]['IDELEMENTO'];
                                    $pop['nombreElemento']               = $arrayElementoContenedorOlt[0]['NOMBREELEMENTO'];
                                    $elementoOlt                         = $em->getRepository('schemaBundle:InfoElemento')
                                                                              ->find($arrayElementoContenedorOlt[0]['IDELEMENTO']);
                                    $pop['marcaElemento']                = $elementoOlt
                                                                           ->getModeloElementoId()
                                                                           ->getMarcaElementoId()
                                                                           ->getNombreMarcaElemento();
                                }
                                $data['interfaceElementoConectorId'] = null;
                                }
                                
                            }
                            
                        }
                        else
                        {
                            $pop['id'] = "";
                            $pop['nombreElemento'] = "";
                        }
                    }
                }
                else
                {
                    $elemento = "";
                    $pop['id'] = "";
                    $pop['nombreElemento'] = "";
                }
                
                $nombreSector            = ($data["nombreSector"] ? $data["nombreSector"] : "");
                $parroquia               = ($data["nombreParroquia"] ? $data["nombreParroquia"] : "");
                $ciudad                  = ($data["nombreCanton"] ? $data["nombreCanton"] : "");
                $jurisdiccion            = ($data["nombreJurisdiccion"] ? $data["nombreJurisdiccion"] : "");
                $cliente                 = ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
                ($data["longitud"] && $data["latitud"]) ? $coordenadas = $data["longitud"] . ", " . $data["latitud"] : $coordenadas = "";
                $feSolicitaPlanificacion = strval(date_format($data["feCreacion"], "d/m/Y G:i"));
                $latitud                 = ($data["latitud"] ? $data["latitud"] : "");
                $longitud                = ($data["longitud"] ? $data["longitud"] : "");

                // ************************* RUTA DE LA IMAGEN DEL CROQUIS *************** 
                $pathCroquis         = "public/uploads/croquis/";
                $pathImagenDefault   = "public/images/images_crud/";
                $rutaVerificaCroquis = ($data["rutaCroquis"] != "" ? "./$pathCroquis" . $data["rutaCroquis"] : "" );
                if(file_exists($rutaVerificaCroquis))
                {
                    $nombreArchivo = $data["rutaCroquis"];
                    $rutaArchivo   = "/" . $pathCroquis . $nombreArchivo;
                }
                else
                {
                    $nombreArchivo = "no_image_200_200.png";
                    $rutaArchivo   = "/" . $pathImagenDefault . $nombreArchivo;
                }
                $rutaCroquis = ($rutaArchivo != "" ? 
                               "<img src='$rutaArchivo' title='$nombreArchivo' alt='$nombreArchivo' width='480' height='450' />" : "" );

                $fePlanificada      = "";
                $HoraIniPlanificada = "";
                $HoraFinPlanificada = "";
                if(strtoupper($data["estado"]) != strtoupper("PrePlanificada"))
                {
                    $HistDetalles = $this->_em->getRepository('schemaBundle:InfoDetalleSolHist')
                                         ->findOneDetalleSolicitudHistorial($data["idDetalleSolicitud"], $data["estado"]);
                    if($HistDetalles && count($HistDetalles) > 0)
                    {
                        $DetalleHistorial   = $HistDetalles;
                        $fePlanificada      = ($DetalleHistorial->getFeIniPlan()) ? strval(date_format($DetalleHistorial->getFeIniPlan(), "d/m/Y")) : 
                                                                                    "";
                        $HoraIniPlanificada = ($DetalleHistorial->getFeIniPlan()) ? 
                                              strval(date_format($DetalleHistorial->getFeIniPlan(), "h:i")) : "";
                        $HoraFinPlanificada = ($DetalleHistorial->getFeFinPlan()) ? 
                                              strval(date_format($DetalleHistorial->getFeFinPlan(), "h:i")) : "";
                    }
                }

                $action4 = "";
                $idServicioTrasladado = "";
                // se agrega filtro de empresa MD por que las validaciones dentro del bloque if no deben ser consideradas para la empresa TN
                if($data["tipoOrden"] == "T" && ($codEmpresa == "18" || $codEmpresa == "33"))
                {
                    $productoInternetDedicado   = $this->_em->getRepository('schemaBundle:AdmiProducto')
                                                       ->findOneBy(array("descripcionProducto" => "INTERNET DEDICADO", 
                                                                         "estado" => "Activo", 
                                                                         "empresaCod" => $codEmpresa));
                    $AdmiCaracteristicaTraslado = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                                       ->findOneBy(array("descripcionCaracteristica" => "TRASLADO", "estado" => "Activo"));
                    $prodCaractTraslado         = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                       ->findOneBy(array("productoId" => $productoInternetDedicado->getId(), 
                                                                         "caracteristicaId" => $AdmiCaracteristicaTraslado->getId(), 
                                                                         "estado" => "Activo"));

                    if($prodCaractTraslado)
                    {

                        $servicioProdCaractTraslado = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                           ->findOneBy(array("servicioId" => $data["idServicio"], 
                                                                             "productoCaracterisiticaId" => $prodCaractTraslado->getId(), 
                                                                             "estado" => "Activo"));

                        if($servicioProdCaractTraslado)
                        {
                            $idServicioTrasladado           = $servicioProdCaractTraslado->getValor();
                            $infoServicioTrasladado         = $this->_em->getRepository('schemaBundle:InfoServicio')->find($idServicioTrasladado);
                            $infoServicioTecnicoTrasladado  = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')
                                                                   ->findOneByServicioId($idServicioTrasladado);

                            $ultimaMillaTrasladado = $em->getRepository('schemaBundle:AdmiTipoMedio')
                                                        ->findOneById($infoServicioTecnicoTrasladado->getUltimaMillaId());
                            if($ultimaMilla->getNombreTipoMedio() == $ultimaMillaTrasladado->getNombreTipoMedio())
                            {
                                $action4 = "button-grid-Import";
                            }
                            // se agrega validación de ultima milla
                            if ($ultimaMilla->getNombreTipoMedio() == "Fibra Optica")
                            {

                                $respuestaArray = $this->_em->getRepository('schemaBundle:InfoServicioTecnico')
                                                       ->generarJsonDatosBackbone(
                                                           array(
                                                               'idServicio' => $Servicio->getId(),
                                                               'empresa' => $codEmpresa,
                                                               'serviceTecnico' => $serviceTecnico,
                                                               'tipoElementoPadre' => '',
                                                               'emComercial' => $this->_em,
                                                               'emInfraestructura' => $em
                                                           ));
                                $respuestaArray         = json_decode($respuestaArray);
                                $strMismosRecursos      = $respuestaArray->encontrados[0]->mismosRecursos;
                                $strDiferenteTecnologia = $respuestaArray->encontrados[0]->diferenteTecnologia;
                                if ($pop['marcaElemento'] == 'HUAWEI' && $nombreTecnico == 'IP')
                                {
                                    $strMismosRecursos = $respuestaArray->encontrados[0]->mismosRecursosIp;
                                }
                            }
                            else
                            {
                                // se agrega validación de ultima milla, clientes cobre/radio validacion recursos asignados
                                if ($infoServicioTecnicoTrasladado->getElementoId() == $entityServicioTecnico->getElementoId())
                                {
                                    $strMismosRecursos      = "SI";
                                    $strDiferenteTecnologia = "NO";
                                }
                                else
                                {
                                    $strMismosRecursos      = "NO";
                                    $strDiferenteTecnologia = "NO";
                                }                                
                            }
                            
                        }
                    }
                }

                if($data["tipoOrden"])
                {
                    switch($data["tipoOrden"])
                    {
                        case "N":
                            $tipo_orden = "Nuevo";
                            break;
                        case "T":
                            $tipo_orden = "Traslado";
                            break;
                        case "R":
                            $tipo_orden = "Reubicacion";
                            break;
                        case "C":
							$tipo_orden = "Cambio Tipo Medio";
							break;
                        default:
                            $tipo_orden = "Nuevo";
                            break;
                    }
                }
                else
                {
                    $tipo_orden = "Nuevo";
                }

                $fechaPlanificacionReal = $fePlanificada . " (" . $HoraIniPlanificada . " - " . $HoraFinPlanificada . ")";

                if($data['tercerizadoraId'])
                {
                    $infoPersona = $em->getRepository('schemaBundle:InfoPersona')->find($data["tercerizadoraId"]);
                    $tercerizadora = sprintf("%s", $infoPersona);
                }
                else
                {
                    $tercerizadora = "";
                }
                $esRecontratacion = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                         ->esRecontratacion($data['id_persona'], $codEmpresa);
                
                //caracteristica para saber donde esta ubicada la caja (pedestal - edificio)
                $entityDetalleElemento = $em->getRepository('schemaBundle:InfoDetalleElemento')
                                            ->findOneBy(array( "elementoId"    => $pop['id'], 
                                                               "detalleNombre" => "APROVISIONAMIENTO_IP"));
                if ($entityDetalleElemento)
                {
                    $strAprovisionamiento = $entityDetalleElemento->getdetalleValor();
                }
                else
                {
                    $strAprovisionamiento = "POOL" ;
                }
                
                if (($data["descripcionSolicitud"]=='SOLICITUD MIGRACION' || $strAprovisionamiento == 'CNR') && $idPlan !='' )
                {
                    $entityPlanCab          = $this->_em->getRepository('schemaBundle:InfoPlanCab')->find($idPlan);
                    $admiCaracteristica     = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                                        ->findOneBy(array("descripcionCaracteristica" => "EDICION LIMITADA", "estado" => "Activo"));
                    $infoPlanCaracteristica = $this->_em->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                        ->findOneBy(
                                                                    array(
                                                                            "planId"           => $idPlan,
                                                                            "caracteristicaId" => $admiCaracteristica->getId(),
                                                                            "valor"            => "SI",
                                                                            "estado"           => $entityPlanCab->getEstado()
                                                                         )
                                                                    );
                    if($infoPlanCaracteristica)
                    { 
                        $tieneIp    = 0;
                        $cantidadIp = 0;
                    }
                }
                
                $arrayCantidadIps = $this->_em->getRepository('schemaBundle:InfoIp')->getIpsReservadasOlt($data["idServicio"]);
                
                $intCantidadIpsReservadas = count($arrayCantidadIps['ips']);
                
                
                $strEsPseudoPe        = 'N';
                $strPseudoPeDependeDe = 'EMPRESA';
                
                // Verificar si el servicio depende de un Edificio ( PseudoPe ) perteneciente a Cliente o Empresa
                $objInfoPuntoDatoAdicional = $this->_em->getRepository("schemaBundle:InfoPuntoDatoAdicional")->findOneByPuntoId($data["idPunto"]);
                
                if(is_object($objInfoPuntoDatoAdicional))
                {
                    $intElementoEdificio = $objInfoPuntoDatoAdicional->getElementoId();
                    
                    if($objInfoPuntoDatoAdicional->getDependeDeEdificio() == 'S')
                    {
                        $objDetalleElementoAministra = $this->_em->getRepository("schemaBundle:InfoDetalleElemento")
                                                            ->findOneBy(array('detalleNombre'  =>  'ADMINISTRA',
                                                                              'estado'         =>  'Activo',
                                                                              'elementoId'     =>  $intElementoEdificio
                                                                              )
                                                                        );
                        if(is_object($objDetalleElementoAministra))
                        {
                            $strPseudoPeDependeDe = $objDetalleElementoAministra->getDetalleValor();
                        }
                        
                        $objDetalleElementoEsPseudoPe = $this->_em->getRepository("schemaBundle:InfoDetalleElemento")
                                                                   ->findOneBy(array('detalleNombre'  =>  'TIPO_ELEMENTO_RED',
                                                                                     'estado'         =>  'Activo',
                                                                                     'elementoId'     =>  $intElementoEdificio
                                                                                    )
                                                                              );
                        //Si existe registro de elemento red siginifica que es de tipo pseudoPe
                        if(is_object($objDetalleElementoEsPseudoPe))
                        {
                            $strEsPseudoPe = 'S';
                        }
                        
                    }
                }

                $strZeroTouch = $serviceTecnico->getCaracteristicaServicio($Servicio, 'FLUJO_ZEROTOUCH');

                $strDescripcion = '';
                if(is_object($Servicio))
                {
                    $strDescripcion = $Servicio->getDescripcionPresentaFactura();
                }  
                
                //Si el servicio es bajo Red GPON debe aprovisionar la ip privada
                $strIp         = 'FIJA';
                $objServicio = $this->_em->getRepository('schemaBundle:InfoServicio')->find($data["idServicio"]);
                
                if (is_object($objServicio) && $codEmpresa == "10")
                {
                    $objCaracteristicaIpPrivada = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                                    ->findOneBy(array( "descripcionCaracteristica" => "TIPO_ENRUTAMIENTO"));
                    if(is_object($objCaracteristicaIpPrivada))
                    {
                        $objProducto = $this->_em->getRepository('schemaBundle:AdmiProducto')->find($objServicio->getProductoId()->getId());

                        $objProdCaracteristicaIpPrivada = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                ->findOneBy(array( "productoId"       => $objProducto->getId(), 
                                                                                   "caracteristicaId" => $objCaracteristicaIpPrivada->getId()
                                                                                 )
                                                                           );
                        if(is_object($objProdCaracteristicaIpPrivada))
                        {
                            $objInfoServicioProdCaractIpPrivada = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                        ->findOneBy(array( "servicioId"                => $objServicio->getId(), 
                                                                           "productoCaracterisiticaId" => $objProdCaracteristicaIpPrivada->getId()
                                                                         )
                                                                   );
                            if (is_object($objInfoServicioProdCaractIpPrivada))
                            {
                                $strIpPrivada = ($objInfoServicioProdCaractIpPrivada)?$objInfoServicioProdCaractIpPrivada->getValor():"";
                                $strIp = strtoupper($strIpPrivada);
                            }
                        }
                    }
                }

                //Obtener el nombre de la interface
                $strNombreInterface = "";
                if(!empty($data['interfaceElementoConectorId']))
                {
                    $objInfoInterfaceElemento = $this->_em->getRepository("schemaBundle:InfoInterfaceElemento")
                                                          ->find($data['interfaceElementoConectorId']);

                    if(is_object($objInfoInterfaceElemento))
                    {
                        $strNombreInterface = $objInfoInterfaceElemento->getNombreInterfaceElemento();
                    }
                }

                $strTipoRed = "MPLS";
                $strCapacidad1 = "";
                $strCapacidad2 = "";

                if(is_object($Servicio) && is_object($Servicio->getProductoId()) && is_object($ultimaMilla) 
                   && $ultimaMilla->getNombreTipoMedio() === "FTTx")
                {
                    //Obtener la caracteristica tipo de RED
                    $objServProdCaractRed = $serviceTecnico->getServicioProductoCaracteristica($Servicio,
                                                                                               'TIPO_RED',
                                                                                               $Servicio->getProductoId());

                    if(is_object($objServProdCaractRed))
                    {
                        $strTipoRed = $objServProdCaractRed->getValor();
                    }

                    //Obtener la caracteristica CAPACIDAD1
                    $objServProdCaractCap1 = $serviceTecnico->getServicioProductoCaracteristica($Servicio,
                                                                                                'CAPACIDAD1',
                                                                                                $Servicio->getProductoId());

                    if(is_object($objServProdCaractCap1))
                    {
                        $strCapacidad1 = $objServProdCaractCap1->getValor();
                    }

                    //Obtener la caracteristica CAPACIDAD2
                    $objServProdCaractCap2 = $serviceTecnico->getServicioProductoCaracteristica($Servicio,
                                                                                                'CAPACIDAD2',
                                                                                                $Servicio->getProductoId());

                    if(is_object($objServProdCaractCap2))
                    {
                        $strCapacidad2 = $objServProdCaractCap2->getValor();
                    }
                }
                //Verifica si el Producto es Clear a Channel Punto a Punto
                if($boolMostrarClearChannel)
                {
                    $strTipoRed = $strTipoRedServicio;
                }
                //verificar si el tipo de red es GPON
                $booleanTipoRedGpon = false;
                $arrayParVerTipoRed = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                'COMERCIAL',
                                                                                                '',
                                                                                                'VERIFICAR TIPO RED',
                                                                                                'VERIFICAR_GPON',
                                                                                                $strTipoRed,
                                                                                                '',
                                                                                                '',
                                                                                                '');
                if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                {
                    $booleanTipoRedGpon = true;
                }

                $booleanWifiSafeCity = false;
                $booleanCamVpnSafeCity = false;
                $strVrfCamaraGpon  = "";
                $strVlanCamaraGpon = "";
                $strVrfAdminGpon   = "";
                $strVlanAdminGpon  = "";
                if( ( $nombreTecnico == "SAFECITYDATOS" || $nombreTecnico == "SAFECITYWIFI" )
                    && is_object($Servicio) && is_object($Servicio->getProductoId())
                    && is_object($serviceTecnico) && is_object($em) )
                {
                    //obtengo los datos de vlan y vrf por servicio
                    $arrayResultadoVlanVrf = $serviceTecnico->getVlanVrfPorServicio(array("objServicio"   => $Servicio,
                                                                                          "strCodEmpresa" => $codEmpresa));
                    if($arrayResultadoVlanVrf['status'] == "OK")
                    {
                        $strVrfCamaraGpon       = "";
                        $objDetalleEleVlan      = $arrayResultadoVlanVrf['objDetalleElementoVlan'];
                        $objPersonaEmpCaractVrf = $arrayResultadoVlanVrf['objPersonaEmpCaractVrf'];
                        $objDetalleEleVlanAdmin = $arrayResultadoVlanVrf['objDetalleElementoVlanAdmin'];
                        $objPerEmpCarVrfAdmin   = $arrayResultadoVlanVrf['objPersonaEmpCaractVrfAdmin'];
                        //vlan camara o wifi ssid
                        if(is_object($objDetalleEleVlan))
                        {
                            $strVlanCamaraGpon = $objDetalleEleVlan->getDetalleValor();
                        }
                        //vrf camara o wifi ssid
                        if(is_object($objPersonaEmpCaractVrf))
                        {
                            $strVrfCamaraGpon = $objPersonaEmpCaractVrf->getValor();
                        }
                        //verificar si el servicio es WIFI SafeCity
                        if($Servicio->getProductoId()->getNombreTecnico() === "SAFECITYWIFI")
                        {
                            $booleanWifiSafeCity  = true;
                            if(is_object($objDetalleEleVlanAdmin))
                            {
                                $strVlanAdminGpon = $objDetalleEleVlanAdmin->getDetalleValor();
                            }
                            if(is_object($objPerEmpCarVrfAdmin))
                            {
                                $strVrfAdminGpon = $objPerEmpCarVrfAdmin->getValor();
                            }
                        }
                    }
                }
                //verificar camara vpn
                if(is_object($Servicio) && is_object($Servicio->getProductoId()))
                {
                    $arrayParametrosDet = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                                         'INFRAESTRUCTURA',
                                                                         'PARAMETROS',
                                                                         'VALIDAR RELACION SERVICIO ADICIONAL CON DATOS SAFECITY',
                                                                         $Servicio->getProductoId()->getId(),
                                                                         '',
                                                                         '',
                                                                         '',
                                                                         'CAMARAVPN',
                                                                         $codEmpresa);
                    if(!empty($arrayParametrosDet["valor1"]) && isset($arrayParametrosDet["valor1"]))
                    {
                        $booleanCamVpnSafeCity = true;
                    }
                }

                if($nombreTecnico != 'TELEFONIA_NETVOICE')
                {
                    
                    if(isset($arrayParametros['strCodEmpresa']) && !empty($arrayParametros['strCodEmpresa']) 
                        && $arrayParametros['strCodEmpresa'] == "10" && $data["descripcionSolicitud"] === "SOLICITUD MIGRACION"
                        && is_object($ultimaMilla) && $ultimaMilla->getNombreTipoMedio() === "FTTx")
                    {
                        $boolPermiteAsignarRecursos = false;
                    }
                    else
                    {
                        $boolPermiteAsignarRecursos = true;
                    }
                    $arr_encontrados[] = array(
                        'id_factibilidad'           => $data["idDetalleSolicitud"],
                        'tipo_enlace'               => $data["tipoEnlace"],
                        'id_persona_empresa_rol'    => $data["id_persona_empresa_rol"],
                        'id_servicio'               => $data["idServicio"],
                        'cantidad'                  => $data["cantidad"],
                        'tieneIp'                   => $tieneIp,
                        'nombreTecnico'             => $nombreTecnico,
                        'cantidadIp'                => $cantidadIp,
                        'id_servicio_trasladado'    => $idServicioTrasladado,
                        'id_punto'                  => $data["idPunto"],
                        'tipo_orden'                => $tipo_orden,
                        'mismosRecursos'            => $strMismosRecursos,
                        'diferenteTecnologia'       => $strDiferenteTecnologia,
                        'esRecontratacion'          => $esRecontratacion,
                        'cliente'                   => ucwords(strtolower(trim($cliente))),
                        'vendedor'                  => trim($nombreVendedor),
                        'login2'                    => trim($data["login"]),
                        'tercerizadora'             => $tercerizadora,
                        'producto'                  => trim($strNombreProductoPlan),
                        'capacidad1'                => $strCapacidad1,
                        'capacidad2'                => $strCapacidad2,
                        'esPlan'                    => $esPlan,
                        'idPlan'                    => $idPlan,
                        'coordenadas'               => trim($coordenadas),
                        'direccion'                 => trim($data["direccion"]),
                        'ciudad'                    => ucwords(strtolower(trim($ciudad))),
                        'jurisdiccion'              => ucwords(strtolower(trim($jurisdiccion))),
                        'nombreSector'              => ucwords(strtolower(trim($nombreSector))),
                        'fechaPlanificacionReal'    => trim($fechaPlanificacionReal),
                        'fePlanificada'             => trim($fePlanificada),
                        'HoraIniPlanificada'        => trim($HoraIniPlanificada),
                        'HoraFinPlanificada'        => trim($HoraFinPlanificada),
                        'idPop'                     => $pop['id'],
                        'pop'                       => $pop['nombreElemento'],
                        'elementoId'                => $data["elementoId"],
                        'dslam'                     => ($elemento) ? $elemento->getNombreElemento() : "",
                        'radio'                     => ($elemento) ? $elemento->getNombreElemento() : "",
                        'intElemento'               => ($elementoInterface) ? $elementoInterface->getNombreInterfaceElemento() : "",
                        'idCaja'                    => ($elementoCaja) ? $elementoCaja->getId() : "",
                        'caja'                      => ($elementoCaja) ? $elementoCaja->getNombreElemento() : "",
                        'idSplitter'                => ($elementoSplitter) ? $elementoSplitter->getId() : "",
                        'splitter'                  => ($elementoSplitter) ? $elementoSplitter->getNombreElemento() : "",
                        'ultimaMilla'               => ($ultimaMilla) ? $ultimaMilla->getNombreTipoMedio() : "",
                        'rutaCroquis'               => trim($rutaCroquis),
                        'latitud'                   => trim($latitud),
                        'longitud'                  => trim($longitud),
                        'action1'                   => 'button-grid-Gmaps',
                        'action2'                   => 'button-grid-Foto',
                        'action3'                   => $boolPermiteAsignarRecursos ? 'button-grid-Tuerca' : 'icon-invisible',
                        'action4'                   => $action4,
                        'action5'                   => 'button-grid-Tuerca',
                        //se agrega parametro para validar interface de splitter en asignacion de recursos de red
                        'interfaceSplitter'         => $data['interfaceElementoConectorId'],
                        'idInterfaceConector'       => $strNombreInterface,
                        'strTipoRed'                => $strTipoRed,
                        'booleanTipoRedGpon'        => $booleanTipoRedGpon,
                        'strVrfCamaraGpon'          => $strVrfCamaraGpon,
                        'strVlanCamaraGpon'         => $strVlanCamaraGpon,
                        'strVrfAdminGpon'           => $strVrfAdminGpon,
                        'strVlanAdminGpon'          => $strVlanAdminGpon,
                        'booleanWifiSafeCity'       => $booleanWifiSafeCity,
                        'booleanCamVpnSafeCity'     => $booleanCamVpnSafeCity,
                        'descripcionSolicitud'      => $data["descripcionSolicitud"],
                        'intElementoInterface'      => ($elementoInterface) ? $elementoInterface->getId() : "",
                        'marcaOlt'                  => $pop['marcaElemento'],
                        'intCantidadIpsReservadas'  => $intCantidadIpsReservadas,
                        //se agregan parametros para asignacion de red radio tn
                        'um'                        => ($ultimaMilla) ? $ultimaMilla->getCodigoTipoMedio() : "",
                        'esPseudoPe'                => $strEsPseudoPe,
                        'esAdminstradoPor'          => $strPseudoPeDependeDe,
                        'strDescripcion'            => $strDescripcion,
                        'strTipoIp'                 => $strIp,
                        'flujoZeroTouch'            => $strZeroTouch,
                        //Se agregar parametro boolean para verificar que el producto sea CLEAR CHANNEL PUNTO A PUNTO
                        'booleanClearChannelPaP'    => $boolMostrarClearChannel,
                        'tipoRedServicio'           => $strTipoRedServicio
                    );
                }
            }

            //seteo el total menos los ocultos
            $num -= $intContServicioOculto;
            if($num == 0)
            {
                $resultado = array('total' => 1,
                                   'encontrados' => array('id_factibilidad' => 0, 'id_servicio' => 'Ninguno', 'factibilidad_id' => 0,
                                   'factibilidad_nombre' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode($resultado);
                return $resultado;
            }
            else
            {
                $dataF     = json_encode($arr_encontrados);
                $resultado = '{"total":"' . $num . '","encontrados":' . $dataF . '}';
                return $resultado;
            }
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';
            return $resultado;
        }
    }

    /* ************************** ASIGNADOS ***************************************************** */
    public function generarJsonAsignados($em='', $start='', $limit='', $startDate='', $endDate='', $login2='', $sectorId='', $descripcionPunto='', $usrvendedor='', $numOrdenServicio='', $ciudad='',$codEmpresa='')
    {
        $arr_encontrados = array();
        $elemento ="";
        $registrosTotal = $this->getRegistros('', '', $startDate, $endDate, 'Asignada', $login2, $sectorId, '', $descripcionPunto, $usrvendedor, $numOrdenServicio, $ciudad,'',$codEmpresa);
        $registros = $this->getRegistros($start, $limit, $startDate, $endDate, 'Asignada', $login2, $sectorId, '', $descripcionPunto, $usrvendedor, $numOrdenServicio, $ciudad,'',$codEmpresa);
                
        if ($registros) {
            $num = count($registrosTotal);            
            foreach ($registros as $data)
            {                            
                $nombreVendedor = (isset($data["nombreVendedor"]) ?  ($data["nombreVendedor"] ? ucwords(strtolower($data["nombreVendedor"])) : "") : "");
				
                $Servicio = $this->_em->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]); 
                $nombreProducto =  ($Servicio->getProductoId() ? $Servicio->getProductoId()->getDescripcionProducto() : "");  
                $nombrePlan =  ($Servicio->getPlanId() ? $Servicio->getPlanId()->getNombrePlan() : "");  
                $nombreProductoPlan = $nombreProducto . $nombrePlan;
                
                $ultimaMilla =  $em->getRepository('schemaBundle:AdmiTipoMedio')->findOneById($data["ultimaMillaId"]);
				
				if($ultimaMilla->getNombreTipoMedio()=="Cobre"){
					$elemento =  $em->getRepository('schemaBundle:InfoElemento')->findOneById($data["elementoId"]);
					$pop =  $em->getRepository('schemaBundle:InfoRelacionElemento')->getPadrebyHijo($data["elementoId"],"","");
				}
				if($ultimaMilla->getNombreTipoMedio()=="Radio"){
					$elemento =  $em->getRepository('schemaBundle:InfoElemento')->findOneById($data["elementoId"]);
					$pop['nombreElemento'] = "";
				}
					  
                
                $nombreSector =  ($data["nombreSector"] ? $data["nombreSector"]  : "");    
                $parroquia =  ($data["nombreParroquia"] ? $data["nombreParroquia"]  : ""); 
                $ciudad =  ($data["nombreCanton"] ? $data["nombreCanton"]  : "");  
                $cliente = ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
                ($data["longitud"]&&$data["latitud"])?$coordenadas = $data["longitud"] . ", ". $data["latitud"]:$coordenadas ="";
                $feSolicitaPlanificacion = strval(date_format($data["feCreacion"],"d/m/Y G:i"));                
                $latitud =  ($data["latitud"] ? $data["latitud"]  : "");  
                $longitud =  ($data["longitud"] ? $data["longitud"]  : "");  
                
                // ************************* RUTA DE LA IMAGEN DEL CROQUIS *************** 
                $pathCroquis = "public/uploads/croquis/";
                $pathImagenDefault = "public/images/images_crud/";
                $rutaVerificaCroquis = ($data["rutaCroquis"]!="" ? "./$pathCroquis".$data["rutaCroquis"] : "" );
                if(file_exists($rutaVerificaCroquis))
                {
                    $nombreArchivo = $data["rutaCroquis"];
                    $rutaArchivo = "/" . $pathCroquis . $nombreArchivo;
                }
                else 
                {
                    $nombreArchivo = "no_image_200_200.png";
                    $rutaArchivo = "/" . $pathImagenDefault . $nombreArchivo;
                }                
                $rutaCroquis = ($rutaArchivo!="" ?  "<img src='$rutaArchivo' title='$nombreArchivo' alt='$nombreArchivo' width='480' height='450' />" : "" );
                //$rutaCroquis = ($data["rutaCroquis"]!="" ?  "<img src='/telconet/web/public/uploads/croquis/".$data["rutaCroquis"]."' title='".$data["rutaCroquis"]."' alt='".$data["rutaCroquis"]."' width='480' height='450' />" : "" );  
                
                $fePlanificada = "";
                $HoraIniPlanificada = "";
                $HoraFinPlanificada = "";
                if( strtoupper($data["estado"])!=strtoupper("PrePlanificada"))
                {
                    $HistDetalles = $this->_em->getRepository('schemaBundle:InfoDetalleSolHist')->findOneDetalleSolicitudHistorial($data["idDetalleSolicitud"], $data["estado"]);
                    if($HistDetalles && count($HistDetalles)>0)
                    {
                        $DetalleHistorial = $HistDetalles;
                        $fePlanificada = strval(date_format($DetalleHistorial->getFeIniPlan(), "d/m/Y"));  
                        $HoraIniPlanificada = strval(date_format($DetalleHistorial->getFeIniPlan(),"h:i"));  
                        $HoraFinPlanificada = strval(date_format($DetalleHistorial->getFeFinPlan(),"h:i"));   
                    }                    
                }
                
                $fechaPlanificacionReal = $fePlanificada . " (" . $HoraIniPlanificada . " - " . $HoraFinPlanificada . ")";
                
                
                $arr_encontrados[]=array(
                                         'id_factibilidad' =>$data["idDetalleSolicitud"],
                                         'id_servicio' =>$data["idServicio"],
                                         'id_punto' =>$data["idPunto"],
                                         'id_orden_trabajo' =>$data["idOrdenTrabajo"],
                                         'num_orden_trabajo' =>$data["numeroOrdenTrabajo"],
                                         'cliente' =>ucwords(strtolower(trim($cliente))),
                                         'vendedor' =>trim($nombreVendedor),
                                         'login2' =>trim($data["login"]),
                                         'producto' =>trim($nombreProductoPlan),
                                         'coordenadas' =>trim($coordenadas),
                                         'direccion' =>trim($data["direccion"]),
                                         'ciudad' =>ucwords(strtolower(trim($ciudad))),
                                         'nombreSector' =>ucwords(strtolower(trim($nombreSector))),
                                         'fechaPlanificacionReal' =>trim($fechaPlanificacionReal),
                                         'fePlanificada' =>trim($fePlanificada),
                                         'HoraIniPlanificada' =>trim($HoraIniPlanificada),
                                         'HoraFinPlanificada' =>trim($HoraFinPlanificada),
                                         'pop' =>$pop['nombreElemento'],
                                         'elementoId' =>$data["elementoId"],
                                         'dslam' =>($elemento)?$elemento->getNombreElemento():"",
                                         'radio' =>($elemento)?$elemento->getNombreElemento():"",
                                         'ultimaMilla' =>($ultimaMilla)?$ultimaMilla->getNombreTipoMedio():"",
                                         'rutaCroquis' =>trim($rutaCroquis),
                                         'latitud' =>trim($latitud),
                                         'longitud' =>trim($longitud),
                                         'action1' => 'button-grid-pdf'
                                        );
            }

            if($num == 0)
            {
                $resultado= array('total' => 1 ,
                                 'encontrados' => array('id_factibilidad' => 0 , 'id_servicio' => 'Ninguno', 'factibilidad_id' => 0 , 'factibilidad_nombre' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);
                return $resultado;
            }
            else
            {
                $dataF =json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$dataF.'}';
                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';
            return $resultado;
        }
        
    }
        
    /* ************************** PLANIFICADAS ***************************************************** */
    public function generarJsonVerPlanificacion($em, $start, $limit, $startDate, $endDate, $estado, $login, $cantonId, $parroquiaId, $sectorId, $vendedorId,$codEmpresa)
    {
        $arr_encontrados = array();
        
        $estado = ($estado ? $estado : "TODOS-2");
        if($estado == "TODOS-2")
        {
            //$registrosTotal = array();
            $registros = array();
            
            //$registrosTotal1 = $this->getRegistros('', '', $startDate, $endDate, "Planificada", $login, $sectorId, '');
            $registros1 = $this->getRegistros($start, $limit, $startDate, $endDate, "Planificada", $login, $sectorId, '','',$vendedorId,'','','',$codEmpresa);
            
            /*if($registrosTotal1 && count($registrosTotal1)>0)
            {
                foreach($registrosTotal1 as $dataTotal1)
                {
                    $registrosTotal[] = $dataTotal1;
                }
            }*/
            if($registros1 && count($registros1)>0)
            {
                foreach($registros1 as $data1)
                {
                    $registros[] = $data1;
                }
            }
            
            //$registrosTotal2 = $this->getRegistros('', '', $startDate, $endDate, "Asignada", $login, $sectorId, '');
            $registros2 = $this->getRegistros($start, $limit, $startDate, $endDate, "AsignadoTarea", $login, $sectorId, '','',$vendedorId,'','','',$codEmpresa);
            
            /*if($registrosTotal2 && count($registrosTotal2)>0)
            {
                foreach($registrosTotal2 as $dataTotal2)
                {
                    $registrosTotal[] = $dataTotal2; 
                }
            }*/
            if($registros2 && count($registros2)>0)
            {
                foreach($registros2 as $data2)
                {
                    $registros[] = $data2;
                }
            }
        }
        else
        {
            //$registrosTotal = $this->getRegistros('', '', $startDate, $endDate, $estado, $login, $sectorId, '');
            $registros = $this->getRegistros($start, $limit, $startDate, $endDate, $estado, $login, $sectorId, '','',$vendedorId,'','','',$codEmpresa);
        }
        
        if ($registros) {
            $num = count($registros);            
            foreach ($registros as $data)
            {                
                if($data["estado"] == "AsignadoTarea")
                {
                    $ceroHoraCreacion = (intval(date_format($data["feAsignada"], "G"))<10 ? "0" : "" );
                    $feCreacion = strval(date_format($data["feAsignada"], "Y-m-d")). "T" . strval(date_format($data["feAsignada"], $ceroHoraCreacion."G:i:s"));  
                    
                    $feFin = $feCreacion;
                }
                else
                {
                    $ceroHoraCreacion = (intval(date_format($data["feIniPlan"], "G"))<10 ? "0" : "" );
                    $feCreacion = strval(date_format($data["feIniPlan"], "Y-m-d")). "T" . strval(date_format($data["feIniPlan"], $ceroHoraCreacion."G:i:s"));  

                    $ceroHoraFin = (intval(date_format($data["feFinPlan"], "G"))<10 ? "0" : "" );
                    $feFin = strval(date_format($data["feFinPlan"], "Y-m-d")). "T" . strval(date_format($data["feFinPlan"], $ceroHoraFin."G:i:s"));  
                }
                
                $arr_encontrados[]=array('id' =>$data["idDetalleSolHist"],
                                         'cid' =>$data["idDetalleSolHist"],
                                         'start' =>$feCreacion,
                                         'end' =>$feFin,
                                         'title' => $data["login"] . " - " . $data["nombreSector"],
                                         'estado' =>$data["estado"],
                                         'note' => "HAVE FUN"
                                         /*'estado' =>(strtolower(trim($data->getEstado()))==strtolower('ELIMINADO') ? 'Eliminado':'Activo'),
                                         'action1' => 'button-grid-show',
                                         'action2' => (strtolower(trim($data->getEstado()))==strtolower('ELIMINADO') ? 'icon-invisible':'button-grid-edit'),
                                         'action3' => (strtolower(trim($data->getEstado()))==strtolower('ELIMINADO') ? 'icon-invisible':'button-grid-delete')*/
                                        );
            }

            if($num == 0)
            {
                $resultado= '{"success":false,"message":"No Loaded data","total":"0","encontrados":[]}';
                return $resultado;
            }
            else
            {
                $dataF =json_encode($arr_encontrados);
                $resultado= '{"success":true,"message":"Loaded data","total":"'.$num.'","encontrados":'.$dataF.'}';
                return $resultado;
            }
        }
        else
        {
            $resultado= '{"success":true,"message":"No Loaded data","total":"0","encontrados":[]}';
            return $resultado;
        }        
    } 
    
    /* ************************** ASIGNADAS ***************************************************** */
    public function generarJsonVerAsignaciones($em='', $start='', $limit='', $startDate='', $endDate='', $login2='', $sectorId='', $descripcionPunto='', $usrvendedor='', $numOrdenServicio='', $ciudad='',$codEmpresa='')
    {
        $arr_encontrados = array();
        $registrosTotal = $this->getRegistros('', '', $startDate, $endDate, 'AsignadoTarea', $login2, $sectorId, '', $descripcionPunto, $usrvendedor, $numOrdenServicio, $ciudad,'',$codEmpresa);
        $registros = $this->getRegistros($start, $limit, $startDate, $endDate, 'AsignadoTarea', $login2, $sectorId, '', $descripcionPunto, $usrvendedor, $numOrdenServicio, $ciudad,'',$codEmpresa);
        
		$registrosTotal2 = $this->getRegistros('', '', $startDate, $endDate, 'Asignada', $login2, $sectorId, '', $descripcionPunto, $usrvendedor, $numOrdenServicio, $ciudad,'',$codEmpresa);
        $registros2 = $this->getRegistros($start, $limit, $startDate, $endDate, 'Asignada', $login2, $sectorId, '', $descripcionPunto, $usrvendedor, $numOrdenServicio, $ciudad,'',$codEmpresa);
        
        $registrosTotal3 = $this->getRegistros('', '', $startDate, $endDate, 'Finalizada', $login2, $sectorId, '', $descripcionPunto, $usrvendedor, $numOrdenServicio, $ciudad,'',$codEmpresa);
        $registros3 = $this->getRegistros($start, $limit, $startDate, $endDate, 'Finalizada', $login2, $sectorId, '', $descripcionPunto, $usrvendedor, $numOrdenServicio, $ciudad,'',$codEmpresa);
        
		$registrosTotal = array_merge($registrosTotal,$registrosTotal2);
		$registros = array_merge($registros,$registros2);
		
		$registrosTotal = array_merge($registrosTotal,$registrosTotal3);
		$registros = array_merge($registros,$registros3);
		
        if ($registros) {
            $num = count($registrosTotal);            
            foreach ($registros as $data)
            {                            
                $nombreVendedor = (isset($data["nombreVendedor"]) ?  ($data["nombreVendedor"] ? ucwords(strtolower($data["nombreVendedor"])) : "") : "");
				
                $Servicio = $em->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]); 
                $nombreProducto =  ($Servicio->getProductoId() ? $Servicio->getProductoId()->getDescripcionProducto() : "");  
                $nombrePlan =  ($Servicio->getPlanId() ? $Servicio->getPlanId()->getNombrePlan() : "");  
                $nombreProductoPlan = $nombreProducto . $nombrePlan;
                
                $nombreSector =  ($data["nombreSector"] ? $data["nombreSector"]  : "");    
                $parroquia =  ($data["nombreParroquia"] ? $data["nombreParroquia"]  : ""); 
                $ciudad =  ($data["nombreCanton"] ? $data["nombreCanton"]  : "");  
                $cliente = ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
                ($data["longitud"]&&$data["latitud"])?$coordenadas = $data["longitud"] . ", ". $data["latitud"]:$coordenadas ="";
                $feSolicitaPlanificacion = strval(date_format($data["feCreacion"],"d/m/Y G:i"));                
                $latitud =  ($data["latitud"] ? $data["latitud"]  : "");  
                $longitud =  ($data["longitud"] ? $data["longitud"]  : "");  
                
                // ************************* RUTA DE LA IMAGEN DEL CROQUIS *************** 
                $pathCroquis = "public/uploads/croquis/";
                $pathImagenDefault = "public/images/images_crud/";
                $rutaVerificaCroquis = ($data["rutaCroquis"]!="" ? "./$pathCroquis".$data["rutaCroquis"] : "" );
                if(file_exists($rutaVerificaCroquis))
                {
                    $nombreArchivo = $data["rutaCroquis"];
                    $rutaArchivo = "/" . $pathCroquis . $nombreArchivo;
                }
                else 
                {
                    $nombreArchivo = "no_image_200_200.png";
                    $rutaArchivo = "/" . $pathImagenDefault . $nombreArchivo;
                }                
                $rutaCroquis = ($rutaArchivo!="" ?  "<img src='$rutaArchivo' title='$nombreArchivo' alt='$nombreArchivo' width='480' height='450' />" : "" );
                //$rutaCroquis = ($data["rutaCroquis"]!="" ?  "<img src='/telconet/web/public/uploads/croquis/".$data["rutaCroquis"]."' title='".$data["rutaCroquis"]."' alt='".$data["rutaCroquis"]."' width='480' height='450' />" : "" );  
                if($data["feAsignada"])
					$fechaAsignada = strval(date_format($data["feAsignada"], "d/m/Y h:i"));    
				else	
					$fechaAsignada = "";
                $arr_encontrados[]=array(
                                         'id_factibilidad' =>$data["idDetalleSolicitud"],
                                         'id_servicio' =>$data["idServicio"],
                                         'id_punto' =>$data["idPunto"],
                                         'id_orden_trabajo' =>$data["idOrdenTrabajo"],
                                         'num_orden_trabajo' =>$data["numeroOrdenTrabajo"],
                                         'cliente' =>ucwords(strtolower(trim($cliente))),
                                         'vendedor' =>trim($nombreVendedor),
                                         'login2' =>trim($data["login"]),
                                         'producto' =>trim($nombreProductoPlan),
                                         'coordenadas' =>trim($coordenadas),
                                         'direccion' =>trim($data["direccion"]),
                                         'estado' =>trim($data["estado"]),
                                         'ciudad' =>ucwords(strtolower(trim($ciudad))),
                                         'nombreSector' =>ucwords(strtolower(trim($nombreSector))),
                                         'fechaAsignadaReal' =>$fechaAsignada,
                                         'rutaCroquis' =>trim($rutaCroquis),
                                         'latitud' =>trim($latitud),
                                         'longitud' =>trim($longitud),
                                         'action1' => 'button-grid-Gmaps',
                                         'action2' => 'button-grid-Foto',
                                         'action3' => 'button-grid-Time2',
                                         'action4' => 'button-grid-Time2',
                                         'action5' => 'button-grid-Time2'
                                        );
            }

            if($num == 0)
            {
                $resultado= array('total' => 1 ,
                                 'encontrados' => array('id_factibilidad' => 0 , 'id_servicio' => 'Ninguno', 'factibilidad_id' => 0 , 'factibilidad_nombre' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);
                return $resultado;
            }
            else
            {
                $dataF =json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$dataF.'}';
                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';
            return $resultado;
        }
    }
    
    /**
     * Consulta las solicitudes de retiro de equipo 
     * Retorna array de solicitudes de retiro
     * @param array $arrayParametros parametros de filtro de busqueda
     * @return array
     *  
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 24-09-2016 Se obtiene la fecha de la activacion del servicio que será comparada con la fecha de migración, 
     *                         para validar si se debe buscar el cpe en el naf
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 11-05-2016 Mejoras al a la opcion, se optimiza el query
     * 
     * @author Walther Joao Gaibor C. <wgaibor@telconet.ec>
     * @version 1.4 21-01-2018 Si tipo orden es C se setea el valor cambio tipo medio
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 10-02-2015
     * @since 1.0
   */
    public function generarJsonSolicitudesRetirarEquipo( $arrayParametros )
    {
        $em                                             = $arrayParametros['em'];
        $start                                          = $arrayParametros['start'];
        $limit                                          = $arrayParametros['limit'];
        $startDate                                      = $arrayParametros['startDate'];
        $endDate                                        = $arrayParametros['endDate'];
        $login2                                         = $arrayParametros['login2'];
        $sectorId                                       = $arrayParametros['sectorId'];
        $descripcionPunto                               = $arrayParametros['descripcionPunto'];
        $usrvendedor                                    = $arrayParametros['usrvendedor'];
        $numOrdenServicio                               = $arrayParametros['numOrdenServicio'];
        $ciudad                                         = $arrayParametros['ciudad'];
        $emSoporte                                      = $arrayParametros['emSoporte'];
        $codEmpresa                                     = $arrayParametros['codEmpresa'];
        $prefijoEmpresa                                 = $arrayParametros['prefijoEmpresa'];
        $nombre                                         = $arrayParametros['nombre'];
        $apellido                                       = $arrayParametros['apellido'];
        $razonSocial                                    = $arrayParametros['razonSocial'];
        $identificacion                                 = $arrayParametros['identificacion'];
        $strFechaComparacionBusquedaNaf                 = $arrayParametros['fechaComparacionBusquedaNaf'];
        $arr_encontrados                                = array();
        $arrayParametrosRegistros                       = array();
        $arrayParametrosRegistros['start']              = '';
        $arrayParametrosRegistros['limit']              = '';
        $arrayParametrosRegistros['startDate']          = $startDate;
        $arrayParametrosRegistros['endDate']            = $endDate;
        $arrayParametrosRegistros['estado']             = 'AsignadoTarea';
        $arrayParametrosRegistros['login']              = $login2;
        $arrayParametrosRegistros['sectorId']           = $sectorId;
        $arrayParametrosRegistros['idDetalleSolicitud'] = '';
        $arrayParametrosRegistros['descripcionPunto']   = $descripcionPunto;
        $arrayParametrosRegistros['vendedor']           = $usrvendedor;
        $arrayParametrosRegistros['numOrdenServicio']   = $numOrdenServicio;
        $arrayParametrosRegistros['ciudad']             = $ciudad;
        $arrayParametrosRegistros['origen']             = '';
        $arrayParametrosRegistros['codEmpresa']         = $codEmpresa;
        $arrayParametrosRegistros['nombre']             = $nombre;
        $arrayParametrosRegistros['apellido']           = $apellido;
        $arrayParametrosRegistros['razonSocial']        = $razonSocial;
        $arrayParametrosRegistros['identificacion']     = $identificacion;
        $strDatos                                       = $this->getRegistrosSolicitudesRetiroEquipo( $arrayParametrosRegistros );
        
        $registros      = $strDatos['resultado'];
        $registrosTotal = $strDatos['total'];

        if ($registros) {
            $num = $registrosTotal;
            foreach ($registros as $data)
            {           
                $nombreVendedor             =  (isset($data["nombreVendedor"]) ?  ($data["nombreVendedor"] ? 
                                               ucwords(strtolower($data["nombreVendedor"])) : "") : "");
                $Servicio                   =  $em->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]); 
                $nombreProducto             =  ($Servicio->getProductoId() ? $Servicio->getProductoId()->getDescripcionProducto() : "");  
                $nombrePlan                 =  ($Servicio->getPlanId() ? $Servicio->getPlanId()->getNombrePlan() : "");  
                $nombreProductoPlan         =  $nombreProducto . $nombrePlan;
                $nombreSector               =  ($data["nombreSector"] ? $data["nombreSector"]  : "");    
                $parroquia                  =  ($data["nombreParroquia"] ? $data["nombreParroquia"]  : ""); 
                $ciudad                     =  ($data["nombreCanton"] ? $data["nombreCanton"]  : "");  
                $cliente                    =  ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
                ($data["longitud"]&&$data["latitud"])?$coordenadas = $data["longitud"] . ", ". $data["latitud"]:$coordenadas ="";
                $feSolicitaPlanificacion    =  $data["feCreacion"];
                $latitud                    =  ($data["latitud"] ? $data["latitud"]  : "");  
                $longitud                   =  ($data["longitud"] ? $data["longitud"]  : "");  
                // ************************* RUTA DE LA IMAGEN DEL CROQUIS *************** 
                $pathCroquis                = "public/uploads/croquis/";
                $pathImagenDefault          = "public/images/images_crud/";
                $rutaVerificaCroquis        = ($data["rutaCroquis"]!="" ? "./$pathCroquis".$data["rutaCroquis"] : "" );
                //se agrega parametro para validar si es un servicio migrado
                $esMigracionMd              = (($Servicio->getUsrCreacion() == "migracion_md" || $Servicio->getIpCreacion() == "0.0.0.0") ? "SI" : "NO" );
                if(file_exists($rutaVerificaCroquis))
                {
                    $nombreArchivo = $data["rutaCroquis"];
                    $rutaArchivo   = "/" . $pathCroquis . $nombreArchivo;
                }
                else 
                {
                    $nombreArchivo = "no_image_200_200.png";
                    $rutaArchivo   = "/" . $pathImagenDefault . $nombreArchivo;
                }                
                $rutaCroquis   = ($rutaArchivo!="" ?  
                                 "<img src='$rutaArchivo' title='$nombreArchivo' alt='$nombreArchivo' width='480' height='450' />" : "" );
                $fechaAsignada = $data["feAsignada"];
                //excedentes
				$detalleSolicitud          = $em->find('schemaBundle:InfoDetalleSolicitud', $data["idDetalleSolicitud"]);			
				$entitySolicitudMateriales = $em->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                ->getDetalleSolicitudMaterialByServicioAndEstado($em ,
                                                                                                 $detalleSolicitud->getServicioId()->getId(),
                                                                                                'Aprobada');
                if($entitySolicitudMateriales)
                {
					$observacionExcedente = $entitySolicitudMateriales->getObservacion();
                }
                else
                {
					$observacionExcedente = "Sin Informacion";
				}
				//responsale
				$responsable            = "Sin informacion";
				$urlResponsable         = "";
				$fieldIdResponsable     = "";
				$fieldValueResponsable  = "";
				$empleadoInst           = "";
				$tareasPlanificacion    = $emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                    ->generarArrayTareasAsignadas($em, "", "", $data["idDetalleSolicitud"]);
				$tareaRetiro            = "INSTALACION MODEN";
				if($prefijoEmpresa=="MD")
                {
					$tareaRetiro = "INSTALACION UM";
				}
				foreach($tareasPlanificacion as $tareaPlanificacion)
                {
					if(strpos($tareaPlanificacion['nombre_tarea'],$tareaRetiro)==false)
                    {
						$empleadoInst = $em->getRepository('schemaBundle:InfoPersona')
                                           ->findOneById(($tareaPlanificacion['ref_id_asignado'])?
                                                          $tareaPlanificacion['ref_id_asignado']:
                                                          $tareaPlanificacion['id_asignado']);
						$responsable  = sprintf("%s",$empleadoInst);
						if($tareaPlanificacion['ref_id_asignado'])
                        {
							$urlResponsable        = "getEmpleados";
							$fieldIdResponsable    = "id_empleado";
							$fieldValueResponsable = "nombre_empleado";
						}
                        else
                        {
							$contratista = $em->getRepository('schemaBundle:InfoPersona')->findPersonasXTipoRol("Proveedor", $responsable, "");
							if($contratista && count($contratista)>0)
							{
								$urlResponsable        = "getEmpresasExternas";
								$fieldIdResponsable    = "id_empresa_externa";
								$fieldValueResponsable = "nombre_empresa_externa";
							} 
							else
							{
								$urlResponsable        = "getCuadrillas";
								$fieldIdResponsable    = "id_cuadrilla";
								$fieldValueResponsable = "nombre_cuadrilla";
							}  
						}	
						break;
					}
				}
				if($data["tipoOrden"])
                {
					switch ($data["tipoOrden"]) {
					   case "N":
							 $tipo_orden = "Nuevo";
							 break;
					   case "T":
							 $tipo_orden = "Traslado";
							 break;
					   case "R":
							 $tipo_orden = "Reubicacion";
							 break;
                       case "C":
							 $tipo_orden = "Cambio Tipo Medio";
							 break;
						default:
							$tipo_orden = "Nuevo";
							 break;
					}
				}
                else
                {
					$tipo_orden = "Nuevo";
				}
				$esRecontratacion = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                              ->esRecontratacion($data['id_persona'],$codEmpresa);	
				if($data['tercerizadoraId'])
                {
				    $infoPersona   = $em->getRepository('schemaBundle:InfoPersona')->find($data["tercerizadoraId"]); 
				    $tercerizadora = sprintf("%s",$infoPersona);
				}
                else
                {
				    $tercerizadora = "";
				}
                
                //Se obtiene la fecha de activacion del servicio
                $entityServicioHistorial    = $em->getRepository('schemaBundle:InfoServicioHistorial')
                                                 ->findFechaActivacionPorServicioId($data["idServicio"]);
                $boolBuscarCpeNaf           = true;
                
                $strFechaActivacion         = "";
                
                if($entityServicioHistorial)
                {
                    //Se obtiene la fecha desde la que se podrá comparar con la fecha de activación del servicio 2016-07-01
                    if($strFechaComparacionBusquedaNaf!="")
                    {
                        $strFechaActivacion                 = strval(date_format($entityServicioHistorial[0]->getFeCreacion(), "Y-m-d"));
                        $timestampValidacionMigracionUser   = strtotime($strFechaComparacionBusquedaNaf); 
                        $timestampActivacion                = strtotime($strFechaActivacion); 

                        //Solo se buscará en Naf si la fecha de activación del servicio es mayor o igual a la fecha dada por el usuario.
                        if($timestampActivacion<$timestampValidacionMigracionUser)
                        {
                            $boolBuscarCpeNaf   = false;
                        }
                    }
                }
                else
                {
                    $boolBuscarCpeNaf   = false;
                }
                
                $arr_encontrados[]=array(
                                         'id_factibilidad'       =>$data["idDetalleSolicitud"],
                                         'id_servicio'           =>$data["idServicio"],
                                         'fe_activacion_servicio'=>$strFechaActivacion,
                                         'buscar_cpe_naf'        =>$boolBuscarCpeNaf,
                                         'id_punto'              =>$data["idPunto"],
                                         'id_orden_trabajo'      =>"",
                                         'num_orden_trabajo'     =>"",
                                         'cliente'               =>ucwords(strtolower(trim($cliente))),
                                         'esRecontratacion'      =>$esRecontratacion,
                                         'tercerizadora'         =>$tercerizadora,
                                         'vendedor'              =>trim($nombreVendedor),
                                         'login2'                =>trim($data["login"]),
                                         'tipo_orden'            =>$tipo_orden,
                                         'producto'              =>trim($nombreProductoPlan),
                                         'coordenadas'           =>trim($coordenadas),
                                         'direccion'             =>trim($data["direccion"]),
                                         'ciudad'                =>ucwords(strtolower(trim($ciudad))),
                                         'nombreSector'          =>ucwords(strtolower(trim($nombreSector))),
                                         'fechaAsignadaReal'     =>$fechaAsignada,
                                         'rutaCroquis'           =>trim($rutaCroquis),
                                         'latitud'               =>trim($latitud),
                                         'longitud'              =>trim($longitud),
										 'responsable'           => $responsable,
										 'idResponsable'         => $empleadoInst ? $empleadoInst->getId() : "",
										 'url_responsable'       => $urlResponsable,
										 'fieldIdResponsable'    => $fieldIdResponsable,
										 'fieldValueResponsable' => $fieldValueResponsable,
										 'observacion_excedente' => $observacionExcedente,
                                         //se agrega parametro para validar si es un servicio migrado
                                         'esMigracionMd'         => $esMigracionMd,
                                         'action1'               => 'button-grid-Gmaps',
                                         'action2'               => 'button-grid-Foto',
                                         'action3'               => 'button-grid-Tuerca'
                                        );
            }

            if($num == 0)
            {
                $resultado = array('total' => 1 ,
                                  'encontrados' => array('id_factibilidad'     => 0 , 
                                                         'id_servicio'         => 'Ninguno', 
                                                         'factibilidad_id'     => 0 , 
                                                         'factibilidad_nombre' => 'Ninguno', 
                                                         'estado'              => 'Ninguno'
                                                        )
                                 );
                $resultado = json_encode( $resultado);
                return $resultado;
            }
            else
            {
                $dataF     = json_encode($arr_encontrados);
                $resultado = '{"total":"'.$num.'","encontrados":'.$dataF.'}';
                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';
            return $resultado;
        }
    }
    
    
    /**
     * generarArraySolicitudesRetirarEquipoWs
     * 
     * Consulta las solicitudes de retiro de equipo mediante WS
     * Retorna array de solicitudes de retiro
     *  
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 27-12-2016
     * @since 1.0
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.1 24-11-2017 - Se recupera el idDetalle y el idComunicacion para poder gestionar la tarea de retiro de equipo.
     * 
     * @author Modificado: Walther Joao Gaibor C. <wgaibor@telconet.ec>
     * @version 1.2 21-01-2018 Si tipo orden es C se setea el valor cambio tipo medio
     * 
     * @author Modificado: Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.3 16-06-2021 Se agrega filtro para que no tome en cuenta equipos en el nodo
     * 
     * @author Modificado: Wilmer Vera <wvera@telconet.ec>
     * @version 1.4 29-09-2021 Se agrega marca del elemento por motivo de nuevas ISO
     * al momento de generar actas y encuestas TN (FOR OPU-05)
     * 
     * 
     * @param Array $arrayPeticiones [ strCodEmpresa      Empresa a la que pertenece el cliente consultado
     *                                 strLoginAsignado  Identificacion del cliente que solicita informacion
     *                               ]
     * 
     * @return Array $arrayRespuesta
     * [
     *  - strStatus   Estado de la transaccion ejecutada
     *  - strMensaje  Mensaje de la transaccion ejecutada
     *  - arrayRetiros   [ - idDetalleSolicitud       Identificador de solicitud de retiro de equipos    
     *                     - idServicio               Identificador de servicio a procesar
     *                     - idDetalle                Identificador de la solicitud de la tarea.
     *                     - idComunicacion           Identificador del numero de la tarea.
     *                     - fechaActivacionServicio  Fecha de Activacion de servicio
     *                     - buscaCpeNaf              Bandera que indica si un servicio debe ser consultado en el naf 
     *                                                para el procesamiento de la solicitud
     *                     - idPunto                  Identificador del punto del servicio a procesar     
     *                     - cliente                  Nombre del cliente del cual se procesara la solicitud de retiro 
     *                                                de equipo
     *                     - esRecontratacion         Cadena de caracteres que indica si un servicio es recontratacion
     *                     - tercerizadora            Cadena de caracteres que indica el nombre de tercerizadora segun el
     *                                                servicio procesado         
     *                     - login                    Cadena de caracteres que indica el login del servicio a procesar          
     *                     - tipoOrden                Cadena de caracteres que indica el tipo de orden del servicio a procesar
     *                     - producto                 Cadena de caracteres que indica el nombre de producto o plan del
     *                                                servicio a procesar            
     *                     - coordenadas              Cadena de caracteres que indica la coordenada del servicio a procesar
     *                     - direccion                Cadena de caracteres que indica la direccion del login a procesar
     *                     - ciudad                   Cadena de caracteres que indica la ciudad del login a procesar
     *                     - nombreSector             Cadena de caracteres que indica el nombre del sector del login a procesar
     *                     - idDetalleSolHistorial    Identificador de historial de servicio
     *                     - feIniPlan                Cadena de caracteres que indican la fecha de inicio de planificacion
     *                     - feFinPlan                Cadena de caracteres que indican la fecha de fin de planificacion
     *                     - latitud                  Cadena de caracteres que indica la latitud del login a procesar
     *                     - longitud                 Cadena de caracteres que indica la longitud del login a procesar
     *                     - elementosPorSolicitud    [  - idSolCaract      Identificador de caracteristica de solicitud
     *                                                   - tipoElemento     Cadena de caracteres que indica el tipo de elemento a retirar
     *                                                   - nombreElemento   Cadena de caracteres que indica el nombre del elemento a retirar
     *                                                   - idElemento       Identificador del elemento a retirar
     *                                                ]
     *                   ]
     * ]
     */
    public function generarArraySolicitudesRetirarEquipoWs( $arrayParametros )
    {
        $arrayInformacionRetiros                 = array();
        $arrayInformacionRetiros['strStatus']    = "ERROR";  
        $arrayInformacionRetiros['strMensaje']   = "Problemas al recuperar Información de retiros de equipos";  
        $arrayInformacionRetiros['arrayRetiros'] = array();
        try
        {
            $objProducto  = $this->_em->getRepository('schemaBundle:AdmiProducto')
                                      ->findOneBy(array("nombreTecnico"   => "INTERNET", 
                                                        "empresaCod"      => $arrayParametros['codEmpresa'],
                                                        "estado"          => "Activo"));

            $objMacOnt   = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                       ->findOneBy(array("descripcionCaracteristica" => "MAC ONT", "estado" => "Activo"));
            
            $objMacWifi  = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                       ->findOneBy(array("descripcionCaracteristica" => "MAC WIFI", "estado" => "Activo"));
            
            if(is_object($objProducto) && is_object($objMacOnt) )
            {
                $objProdCaractMo  = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                ->findOneBy(array("productoId"      => $objProducto->getId(), 
                                                                  "caracteristicaId"=> $objMacOnt->getId()));           
            }
            
            if(is_object($objProducto) && is_object($objMacWifi) )
            {
                $objProdCaractWi  = $this->_em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                ->findOneBy(array("productoId"      => $objProducto->getId(), 
                                                                  "caracteristicaId"=> $objMacWifi->getId()));
            }
            
            
            $strFechaComparacionBusquedaNaf = $arrayParametros['strFechaComparacionBusquedaNaf'];
            $arrayEncontrados               = array();
            $arrayDatos                     = $this->getRegistrosSolicitudesRetiroEquipoWs( $arrayParametros );
            $arrayRegistros                 = $arrayDatos['arrayResultado'];
            if ($arrayRegistros) 
            {
                foreach ($arrayRegistros as $arrayData)
                {
                    $strLatitud        = "";
                    $strLongitud       = "";
                    $objServicio       = $this->_em
                                              ->getRepository('schemaBundle:InfoServicio')
                                              ->findOneById($arrayData["idServicio"]); 
                    
                    if(is_object($objProdCaractMo))
                    {
                        $objSpcMacOnt = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                  ->findOneBy(array("productoCaracterisiticaId" => $objProdCaractMo->getId(), 
                                                                                   "servicioId" => $objServicio->getId()));  
                        if(is_object($objSpcMacOnt))
                        {
                            $strMacOnt = $objSpcMacOnt->getValor();
                        }
                    }
                    
                    if(is_object($objProdCaractWi))
                    {                        
                        $objSpcMacWifi = $this->_em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                  ->findOneBy(array("productoCaracterisiticaId" => $objProdCaractWi->getId(), 
                                                                                   "servicioId"=> $objServicio->getId()));   
                        if(is_object($objSpcMacWifi))
                        {
                            $strMacWifi = $objSpcMacWifi->getValor();
                        }
                    }

                    
                    if (!is_object($objServicio))
                    {
                        throw new \Exception("Error al recuperar información del punto del servicio");
                    }
                    $strNombreProducto = ( $objServicio->getProductoId() ?
                                           $objServicio->getProductoId()->getDescripcionProducto() : 
                                           ""
                                         );  
                    $strNombrePlan     = ( $objServicio->getPlanId() ? 
                                           $objServicio->getPlanId()->getNombrePlan() : 
                                           ""
                                         );  
                    $strNombreProductoPlan =  $strNombreProducto . $strNombrePlan;
                    $strNombreSector       =  ($arrayData["nombreSector"] ? $arrayData["nombreSector"]  : "");    
                    $strCiudad             =  ($arrayData["nombreCanton"] ? $arrayData["nombreCanton"]  : "");  
                    $strCliente            =  ( $arrayData["razonSocial"]  ? 
                                                $arrayData["razonSocial"] : 
                                                $arrayData["nombres"] . " " . $arrayData["apellidos"]
                                              );
                    if((isset($arrayData["longitud"]) && !empty($arrayData["longitud"]))&&
                       (isset($arrayData["latitud"])  && !empty($arrayData["latitud"]))
                      )
                    {
                        $strLatitud     = $arrayData["latitud"];  
                        $strLongitud    = $arrayData["longitud"];  
                        $strCoordenadas = $arrayData["longitud"] . ", ". $arrayData["latitud"];
                    }
                    else
                    {    
                        $strCoordenadas = "";
                    }
                    if(isset($arrayData["tipoOrden"]) &&! empty($arrayData["tipoOrden"]))
                    {
                        switch ($arrayData["tipoOrden"]) 
                        {
                            case "N":
                                $strTipoOrden = "Nuevo";
                                break;
                            case "T":
                                $strTipoOrden = "Traslado";
                                break;
                            case "R":
                                $strTipoOrden = "Reubicacion";
                                break;
                            case "C":
                                $strTipoOrden = "Cambio Tipo Medio";
                                break;
                            default:
                                $strTipoOrden = "Nuevo";
                                break;
                        }
                    }
                    else 
                    {
                        $strTipoOrden = "Nuevo";
                    }
                    $strEsRecontratacion = $this->_em
                                                ->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                ->esRecontratacion($arrayData['id_persona'], $arrayParametros['strCodEmpresa']);
                    if ($arrayData['tercerizadoraId']) 
                    {
                        $objPersona       = $this->_em->getRepository('schemaBundle:InfoPersona')->find($arrayData["tercerizadoraId"]);
                        $strTercerizadora = sprintf("%s", $objPersona);
                    }
                    else
                    {
                        $strTercerizadora = "";
                    }

                    //Se obtiene la fecha de activacion del servicio
                    $arrayServicioHistorial = $this->_em
                                                   ->getRepository('schemaBundle:InfoServicioHistorial')
                                                   ->findFechaActivacionPorServicioId($arrayData["idServicio"]);
                    $boolBuscarCpeNaf       = true;
                    $strFechaActivacion     = "";

                    if ($arrayServicioHistorial) 
                    {
                        //Se obtiene la fecha desde la que se podrá comparar con la fecha de activación del servicio 2016-07-01
                        if ($strFechaComparacionBusquedaNaf != "") 
                        {
                            $strFechaActivacion               = strval(date_format($arrayServicioHistorial[0]->getFeCreacion(), "Y-m-d"));
                            $timestampValidacionMigracionUser = strtotime($strFechaComparacionBusquedaNaf);
                            $timestampActivacion              = strtotime($strFechaActivacion);
                            //Solo se buscará en Naf si la fecha de activación del servicio es mayor o igual a la fecha dada por el usuario.
                            if ($timestampActivacion < $timestampValidacionMigracionUser) 
                            {
                                $boolBuscarCpeNaf = false;
                            }
                        }
                    }
                    else 
                    {
                        $boolBuscarCpeNaf = false;
                    }
                    
                    $arrayCaracteristicasSolicitud = $this->_em
                                                          ->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                          ->findBy(array( "detalleSolicitudId" => $arrayData["idDetalleSolicitud"],
                                                                          "estado"             => "AsignadoTarea"
                                                                        )
                                                                  );
                    $arrayElementosPorSolicitud    = array();
                    foreach($arrayCaracteristicasSolicitud as $objCaracteristicaSolicitud)
                    {

                        //Filtrar equipos que solo se encuentren en el cliente
                        $objInfoDetalleElemento = $this->_em->getRepository("schemaBundle:InfoDetalleElemento")
                                                ->findOneBy(array('detalleNombre'   =>  'UBICACION',
                                                                    'detalleValor'  =>  'Nodo',
                                                                    'elementoId'    =>  $objCaracteristicaSolicitud->getValor()
                                                                ));

                        if(!is_object($objInfoDetalleElemento))
                        {
                            $arrayElementoSolicitud = array();
                            $objElementoCliente     = $this->_em
                                                           ->getRepository('schemaBundle:InfoElemento')
                                                           ->find($objCaracteristicaSolicitud->getValor());

                            if (!is_object($objElementoCliente))
                            {
                                throw new \Exception("Error al recuperar información del Elemento del cliente");
                            }

                            $objModeloElemento      = $this->_em
                                                           ->getRepository('schemaBundle:AdmiModeloElemento')
                                                           ->find($objElementoCliente->getModeloElementoId());
                            //getMarcaElementoId
                            $objMarcaElemento       = $this->_em
                                                           ->getRepository('schemaBundle:AdmiMarcaElemento')
                                                           ->find($objModeloElemento->getMarcaElementoId());
                            if (!is_object($objModeloElemento))
                            {
                                throw new \Exception("Error al recuperar información del Modelo del Elemento del cliente");
                            }

                            $objTipoElemento        = $this->_em
                                                           ->getRepository('schemaBundle:AdmiTipoElemento')
                                                           ->find($objModeloElemento->getTipoElementoId());

                            if (!is_object($objTipoElemento))
                            {
                                throw new \Exception("Error al recuperar información del tipo del Elemento del cliente");
                            }
                            
                            $arrayElementoSolicitud['idSolCaract']    = $objCaracteristicaSolicitud->getId();
                            $arrayElementoSolicitud['tipoElemento']   = $objTipoElemento->getNombreTipoElemento();
                            $arrayElementoSolicitud['nombreElemento'] = $objElementoCliente->getNombreElemento();
                            $arrayElementoSolicitud['modelo']         = $objElementoCliente->getModeloElementoId()->getNombreModeloElemento();
                            $arrayElementoSolicitud['serie']          = $objElementoCliente->getSerieFisica();
                            $arrayElementoSolicitud['idElemento']     = $objElementoCliente->getId();
                            $arrayElementoSolicitud['marcaElemento']  = $objMarcaElemento->getNombreMarcaElemento();
                            
                            if($objTipoElemento->getNombreTipoElemento() == 'CPE ONT')
                            {
                                $arrayElementoSolicitud['mac'] = $strMacOnt;
                            }
                            else
                            {
                                $arrayElementoSolicitud['mac'] = $strMacWifi;
                            }                           
    
                            $arrayElementosPorSolicitud[] = $arrayElementoSolicitud;
                        }
                    }

                    $arrayEncontrados[] = array(
                                                'idFactibilidad'            => $arrayData["idDetalleSolicitud"],
                                                'idServicio'                => $arrayData["idServicio"],
                                                'idDetalle'                 => $arrayData["idDetalle"],
                                                'idComunicacion'            => $arrayData["idComunicacion"],
                                                'fechaActivacionServicio'   => $strFechaActivacion,
                                                'buscaCpeNaf'               => $boolBuscarCpeNaf?"SI":"NO",
                                                'idPunto'                   => $arrayData["idPunto"],
                                                'cliente'                   => ucwords(strtolower(trim($strCliente))),
                                                'esRecontratacion'          => $strEsRecontratacion,
                                                'tercerizadora'             => $strTercerizadora,
                                                'login'                     => trim($arrayData["login"]),
                                                'tipoOrden'                 => $strTipoOrden,
                                                'producto'                  => trim($strNombreProductoPlan),
                                                'coordenadas'               => trim($strCoordenadas),
                                                'direccion'                 => trim($arrayData["direccion"]),
                                                'ciudad'                    => ucwords(strtolower(trim($strCiudad))),
                                                'nombreSector'              => ucwords(strtolower(trim($strNombreSector))),
                                                'idDetalleSolHistorial'     => $arrayData["idDetalleSolHist"],
                                                'feIniPlan'                 => $arrayData["feIniPlan"],
                                                'feFinPlan'                 => $arrayData["feFinPlan"],
                                                'latitud'                   => trim($strLatitud),
                                                'longitud'                  => trim($strLongitud),
                                                'elementosPorSolicitud'     => $arrayElementosPorSolicitud
                                               );
                }
            }
            $arrayInformacionRetiros['strStatus']    = "OK";  
            $arrayInformacionRetiros['strMensaje']   = "Se recuperó información de retiros de equipos";  
            $arrayInformacionRetiros['arrayRetiros'] = $arrayEncontrados;
        } 
        catch (\Exception $ex) 
        {
            throw($ex);
        }
        return $arrayInformacionRetiros;
    }
    
    
    /* ************************** ASIGNADAS ***************************************************** */
    public function generarJsonIngresarMateriales($em='', $start='', $limit='', $startDate='', $endDate='', $login2='', $sectorId='', $descripcionPunto='', $usrvendedor='', $numOrdenServicio='', $ciudad='',$emSoporte='',$codEmpresa='')
    {
        $arr_encontrados = array();
        $registrosTotal = $this->getRegistros('', '', $startDate, $endDate, 'Asignada', $login2, $sectorId, '', $descripcionPunto, $usrvendedor, $numOrdenServicio, $ciudad,'instalacion',$codEmpresa);
        $registros = $this->getRegistros($start, $limit, $startDate, $endDate, 'Asignada', $login2, $sectorId, '', $descripcionPunto, $usrvendedor, $numOrdenServicio, $ciudad,'instalacion',$codEmpresa);
           
        if ($registros) {
            $num = count($registrosTotal);            
            foreach ($registros as $data)
            {           
                
                $strNombreVendedor = (isset($data["nombreVendedor"]) ?  ($data["nombreVendedor"] ? ucwords(strtolower($data["nombreVendedor"])) : "") : "");
				
                $Servicio = $em->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]); 
                $nombreProducto =  ($Servicio->getProductoId() ? $Servicio->getProductoId()->getDescripcionProducto() : "");  
                $nombrePlan =  ($Servicio->getPlanId() ? $Servicio->getPlanId()->getNombrePlan() : "");  
                $nombreProductoPlan = $nombreProducto . $nombrePlan;
                
                $nombreSector =  ($data["nombreSector"] ? $data["nombreSector"]  : "");    
                $parroquia =  ($data["nombreParroquia"] ? $data["nombreParroquia"]  : ""); 
                $ciudad =  ($data["nombreCanton"] ? $data["nombreCanton"]  : "");  
                $cliente = ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
                ($data["longitud"]&&$data["latitud"])?$coordenadas = $data["longitud"] . ", ". $data["latitud"]:$coordenadas ="";
                $feSolicitaPlanificacion = strval(date_format($data["feCreacion"],"d/m/Y G:i"));                
                $latitud =  ($data["latitud"] ? $data["latitud"]  : "");  
                $longitud =  ($data["longitud"] ? $data["longitud"]  : "");  
                
                // ************************* RUTA DE LA IMAGEN DEL CROQUIS *************** 
                $pathCroquis = "public/uploads/croquis/";
                $pathImagenDefault = "public/images/images_crud/";
                $rutaVerificaCroquis = ($data["rutaCroquis"]!="" ? "./$pathCroquis".$data["rutaCroquis"] : "" );
                if(file_exists($rutaVerificaCroquis))
                {
                    $nombreArchivo = $data["rutaCroquis"];
                    $rutaArchivo = "/" . $pathCroquis . $nombreArchivo;
                }
                else 
                {
                    $nombreArchivo = "no_image_200_200.png";
                    $rutaArchivo = "/" . $pathImagenDefault . $nombreArchivo;
                }                
                $rutaCroquis = ($rutaArchivo!="" ?  "<img src='$rutaArchivo' title='$nombreArchivo' alt='$nombreArchivo' width='480' height='450' />" : "" );
                //$rutaCroquis = ($data["rutaCroquis"]!="" ?  "<img src='/telconet/web/public/uploads/croquis/".$data["rutaCroquis"]."' title='".$data["rutaCroquis"]."' alt='".$data["rutaCroquis"]."' width='480' height='450' />" : "" );  
                
                $fechaAsignada = strval(date_format($data["feAsignada"], "d/m/Y h:i"));    
                
				//excedentes
				$detalleSolicitud = $em->find('schemaBundle:InfoDetalleSolicitud', $data["idDetalleSolicitud"]);			
				$entitySolicitudMateriales = $em->getRepository('schemaBundle:InfoDetalleSolicitud')->getDetalleSolicitudMaterialByServicioAndEstado($em,$detalleSolicitud->getServicioId()->getId(),'Aprobada'); 
                
				if($entitySolicitudMateriales){
					$observacionExcedente = $entitySolicitudMateriales->getObservacion();
                }else{
					$observacionExcedente = "Sin Informacion";
				}
				//responsale
				$responsable = "Sin informacion";
				$urlResponsable = "";
				$fieldIdResponsable = "";
				$fieldValueResponsable = "";
				
				$tareasPlanificacion = $emSoporte->getRepository('schemaBundle:InfoDetalle')->generarArrayTareasAsignadas($em, "", "", $data["idDetalleSolicitud"]);
				
				foreach($tareasPlanificacion as $tareaPlanificacion){
					if(strpos($tareaPlanificacion['nombre_tarea'],"INSTALACION UM")!=false){
						
						$empleadoInst = $em->getRepository('schemaBundle:InfoPersona')->findOneById(($tareaPlanificacion['ref_id_asignado'])?$tareaPlanificacion['ref_id_asignado']:$tareaPlanificacion['id_asignado']);
						$responsable = sprintf("%s",$empleadoInst);
						
						if($tareaPlanificacion['ref_id_asignado']){
							// echo "es empleado:".$responsable;
							$urlResponsable = "getEmpleados";
							$fieldIdResponsable = "id_empleado";
							$fieldValueResponsable = "nombre_empleado";
						}else{
							// echo "es externa:".$responsable;
							
							$contratista = $em->getRepository('schemaBundle:InfoPersona')->findPersonasXTipoRol("Proveedor", $responsable, "");
							
							
// 							$num = count($contratista); 
							if($contratista && count($contratista)>0)
							{
								// echo "Es contratista";
								$urlResponsable = "getEmpresasExternas";
								$fieldIdResponsable = "id_empresa_externa";
								$fieldValueResponsable = "nombre_empresa_externa";
							} 
							else
							{
								// echo "Es Cuadrilla";
								$urlResponsable = "getCuadrillas";
								$fieldIdResponsable = "id_cuadrilla";
								$fieldValueResponsable = "nombre_cuadrilla";
							}  
							
						}	
						
						break;
					}
				}
				if($data["tipoOrden"]){
					switch ($data["tipoOrden"]) {
					   case "N":
							 $tipo_orden = "Nuevo";
							 break;
					   case "T":
							 $tipo_orden = "Traslado";
							 break;
					   case "R":
							 $tipo_orden = "Reubicacion";
							 break;
                       case "C":
							 $tipo_orden = "Cambio Tipo Medio";
							 break;
						default:
							$tipo_orden = "Nuevo";
							 break;
					}
				}else{
					$tipo_orden = "Nuevo";
				}
				$esRecontratacion = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRol')->esRecontratacion($data['id_persona'],$codEmpresa);	
				if($data['tercerizadoraId']){
				    $infoPersona = $em->getRepository('schemaBundle:InfoPersona')->find($data["tercerizadoraId"]); 
				    $tercerizadora = sprintf("%s",$infoPersona);
				}else{
				    $tercerizadora = "";
				}
                $arr_encontrados[]=array(
                                         'id_factibilidad' =>$data["idDetalleSolicitud"],
                                         'id_servicio' =>$data["idServicio"],
                                         'id_punto' =>$data["idPunto"],
                                         'id_orden_trabajo' =>$data["idOrdenTrabajo"],
                                         'num_orden_trabajo' =>$data["numeroOrdenTrabajo"],
                                         'cliente' =>ucwords(strtolower(trim($cliente))),
                                         'esRecontratacion'=>$esRecontratacion,
                                         'tercerizadora'=>$tercerizadora,
                                         'vendedor' =>trim($strNombreVendedor),
                                         'login2' =>trim($data["login"]),
                                         'tipo_orden' =>$tipo_orden,
                                         'producto' =>trim($nombreProductoPlan),
                                         'coordenadas' =>trim($coordenadas),
                                         'direccion' =>trim($data["direccion"]),
                                         'ciudad' =>ucwords(strtolower(trim($ciudad))),
                                         'nombreSector' =>ucwords(strtolower(trim($nombreSector))),
                                         'fechaAsignadaReal' =>$fechaAsignada,
                                         'rutaCroquis' =>trim($rutaCroquis),
                                         'latitud' =>trim($latitud),
                                         'longitud' =>trim($longitud),
										 'responsable' => $responsable,
										 'url_responsable' => $urlResponsable,
										 'fieldIdResponsable' => $fieldIdResponsable,
										 'fieldValueResponsable' => $fieldValueResponsable,
										 'observacion_excedente' => $observacionExcedente,
                                         'action1' => 'button-grid-Gmaps',
                                         'action2' => 'button-grid-Foto',
                                         'action3' => 'button-grid-Time2'
                                        );
                                        
               
            }

            if($num == 0)
            {
                $resultado= array('total' => 1 ,
                                 'encontrados' => array('id_factibilidad' => 0 , 'id_servicio' => 'Ninguno', 'factibilidad_id' => 0 , 'factibilidad_nombre' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode( $resultado);
                return $resultado;
            }
            else
            {
                $dataF =json_encode($arr_encontrados);
                $resultado= '{"total":"'.$num.'","encontrados":'.$dataF.'}';
                return $resultado;
            }
        }
        else
        {
            $resultado= '{"total":"0","encontrados":[]}';
            return $resultado;
        }
    }
    /**
     * Método que busca las solicitudes de acuerdo a los parámetros enviados 
     * 
     * Esta función es utilizada desde las siguientes opciones:
     * Ver Planificación: 
     *                  Opciones Combo Estado: Todos, Planificada, Asignada
     *                                         Cuando el estado es Todos se realiza la consulta para el estado AsignadoTarea y Planificada
     *                  No hay combo de tipo de solicitudes
     *                  Origen = ''
     * 
     * Ver Asignaciones:
     *                  No hay combo de estados, se busca por defecto por los estados AsignadoTarea,Asignada y Finalizada
     *                  No hay combo de tipo de solicitudes
     *                  Origen = ''
     * 
     * Ingresar Materiales:
     *                     No hay combo de estados, se busca por defecto por el estado Asignada
     *                     No hay combo de tipo de solicitudes
     *                     Origen = ''
     * 
     * Asignar Responsable:
     *                     No hay combo de estados, se busca por defecto por el estado Planificada
     *                     Combo de tipo de solicitudes SOLICITUD PLANIFICACION,SOLICITUD RETIRO EQUIPO,SOLICITUD CAMBIO EQUIPO,SOLICITUD MIGRACION
     *                     Origen = 'asignarResponsable'
     * 
     * Asignar Recursos de Red:
     *                         No hay combo de estados, se busca por defecto por el estado AsignadoTarea
     *                         Combo de tipo de solicitudes SOLICITUD PLANIFICACION,SOLICITUD INFO TECNICA,SOLICITUD MIGRACION,SOLICITUD ULTIMA MILLA
     *                         Origen='recursosRed'
     * 
     * Retorna array de registros de solicitudes
     * @param integer $start
     * @param integer $limit
     * @param string $startDate
     * @param string $endDate
     * @param string $estado
     * @param string $login
     * @param string $sectorId 
     * @param string $idDetalleSolicitud
     * @param string $descripcionPunto
     * @param string $vendedor
     * @param string $numOrdenServicio
     * @param string $ciudad
     * @param string $origen
     * @param string $codEmpresa
     * @param string $search_tipoSolicitud 
     * @return array
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 07-09-2016 Se agrega la búsqueda por solicitud de cambio de equipo y retiro de equipo
     * @since 1.0
     * 
     * @author Modificado: Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 23-02-2017 - Se agrega nuevo tipo solicitud SOLICITUD AGREGAR EQUIPO para  gestionar solicitudes generadas
     *                           en el proceso de cambio de planes donde el nuevo plan incluya como detalle un producto SMART WIFI
     * @since 1.1
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 05-05-2020 - Se agrega el tipo de solicitud: 'SOLICITUD AGREGAR EQUIPO MASIVO'
     * @since 1.2
     */
    public function getRegistros( $start='', 
                                  $limit='', 
                                  $startDate='', 
                                  $endDate='', 
                                  $estado='', 
                                  $login='', 
                                  $sectorId='', 
                                  $idDetalleSolicitud='', 
                                  $descripcionPunto='', 
                                  $vendedor='', 
                                  $numOrdenServicio='', 
                                  $ciudad='',
                                  $origen='',
                                  $codEmpresa='', 
                                  $search_tipoSolicitud = '')
    {
        $boolBusqueda = false; 
        $where        = "";
        if ( $search_tipoSolicitud != '' )
        {
            $whereTiposSolicitud = "AND ( LOWER(ts.descripcionSolicitud) = LOWER('".$search_tipoSolicitud."') )";
        }
        else
        {
            $whereTiposSolicitud = "AND ( LOWER(ts.descripcionSolicitud) = LOWER('SOLICITUD PLANIFICACION') OR ".
                                   "LOWER(ts.descripcionSolicitud) = LOWER('SOLICITUD INFO TECNICA') OR ".
                                   "LOWER(ts.descripcionSolicitud) = LOWER('SOLICITUD MIGRACION') OR ".
                                   "LOWER(ts.descripcionSolicitud) = LOWER('SOLICITUD AGREGAR EQUIPO') OR ".
                                   "LOWER(ts.descripcionSolicitud) = LOWER('SOLICITUD AGREGAR EQUIPO MASIVO') OR ".
                                   "LOWER(ts.descripcionSolicitud) = LOWER('SOLICITUD REUBICACION') OR ". 
                                   "LOWER(ts.descripcionSolicitud) = LOWER('SOLICITUD CAMBIO ULTIMA MILLA') ";
            
            if($origen=="asignarResponsable")
            {
                $whereTiposSolicitud.= " OR LOWER(ts.descripcionSolicitud) = LOWER('SOLICITUD CAMBIO EQUIPO') ".
                                       " OR LOWER(ts.descripcionSolicitud) = LOWER('SOLICITUD AGREGAR EQUIPO') ".
                                       " OR LOWER(ts.descripcionSolicitud) = LOWER('SOLICITUD AGREGAR EQUIPO MASIVO') ".
                                       " OR LOWER(ts.descripcionSolicitud) = LOWER('SOLICITUD RETIRO EQUIPO')) ";
            }
            else
            {
                $whereTiposSolicitud.= " ) ";
            }
                
        }
        
        if($login!="")
        {
            $boolBusqueda  = true;
            $where        .= "AND UPPER(p.login) like UPPER('$login%') ";
        }      
        
        if($sectorId!="")
        {
            $boolBusqueda  = true;
            $where        .= "AND se.id = '$sectorId' ";
        }                
        
        if($idDetalleSolicitud!="")
        {
            $boolBusqueda  = true;
            $where        .= "AND ds.id = '$idDetalleSolicitud' ";
        } 
              
        if($descripcionPunto!="")
        {
            $boolBusqueda  = true;
            $where        .= "AND UPPER(p.descripcionPunto) like UPPER('$descripcionPunto%') ";
        }
        
        if($vendedor!="")
        {
            $boolBusqueda  = true;
            $where        .= "AND (CONCAT(LOWER(peVend.nombres),CONCAT(' ',LOWER(peVend.apellidos))) like '".
                             strtolower(trim($vendedor))."%' OR UPPER(p.usrVendedor) like UPPER('$vendedor%') ) ";
        }
        
        if($numOrdenServicio!="")
        {
            $boolBusqueda  = true;
            $where        .= "AND ot.numeroOrdenTrabajo like '$numOrdenServicio%' ";
        }        
        if($ciudad!="")
        {
            $boolBusqueda  = true;
            $where        .= "AND UPPER(ca.nombreCanton) like UPPER('$ciudad%') ";
        }    
        
        $ad_select = ""; $ad_from=""; $ad_where="";        
        
        if(($estado == "AsignadoTarea" or $estado == "Asignada") && $origen!="recursosRed")
        {
            $ad_select = ",d.feCreacion as feAsignada ";
            $ad_from   = ",schemaBundle:InfoDetalle d ";
            $ad_where  = "AND d.detalleSolicitudId = ds.id " . 
                         "AND d.id = (SELECT MAX(dMax.id) 
                                      FROM schemaBundle:InfoDetalle dMax
                                      WHERE dMax.detalleSolicitudId = d.detalleSolicitudId) ";
                
            if($startDate!="")
            {
                $dateF    = explode("-",$startDate);
                $fechaSql = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));

                $boolBusqueda  = true;
                $where        .= "AND d.feCreacion >= '".trim($fechaSql)."' ";
            }
            if($endDate!="")
            {
                $dateF       = explode("-",$endDate);
                $fechaSqlAdd = strtotime(date("Y-m-d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0])). " +1 day");
                $fechaSql    = date("Y/m/d", $fechaSqlAdd);

                $boolBusqueda  = true;
                $where        .= "AND d.feCreacion <= '".trim($fechaSql)."' ";
            }        
        }
        else
        {      
            if($startDate!="")
            {
                $dateF    = explode("-",$startDate);
                $fechaSql = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));

                $boolBusqueda  = true;
                $where        .= "AND dsh.feIniPlan >= '".trim($fechaSql)."' ";
            }
            if($endDate!="")
            {
                $dateF       = explode("-",$endDate);
                $fechaSqlAdd = strtotime(date("Y-m-d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0])). " +1 day");
                $fechaSql    = date("Y/m/d", $fechaSqlAdd);

                $boolBusqueda  = true;
                $where        .= "AND dsh.feIniPlan <= '".trim($fechaSql)."' ";
            } 
        }
            
        if($estado!="" && $estado)
        {
            $boolBusqueda = true;
            
            if($estado == "Planificada")
            {
                $where        .= "AND (LOWER(ds.estado) = LOWER('Planificada') OR LOWER(ds.estado) = LOWER('Replanificada')) ";
                $where        .= "AND (LOWER(dsh.estado) = LOWER('Planificada') OR LOWER(dsh.estado) = LOWER('Replanificada'))  ";
                $boolBusqueda  = false;
            }
            else if($estado == "AsignadoTarea")
            {
                if($origen=="recursosRed")
                {
                        $where .= "AND ( LOWER(ds.estado) = LOWER('AsignadoTarea') or LOWER(ds.estado) = LOWER('PreAsignacionInfoTecnica') ) ";
                        $where .= "AND ( LOWER(dsh.estado) = LOWER('AsignadoTarea') or LOWER(dsh.estado) = LOWER('PreAsignacionInfoTecnica') ) ";
                }
                else
                {
                        $where .= "AND ((LOWER(ds.estado) = LOWER('AsignadoTarea')) OR (LOWER(ds.estado) = LOWER('Replanificada'))) ";
                        $where .= "AND ((LOWER(dsh.estado) = LOWER('AsignadoTarea'))  OR (LOWER(dsh.estado) = LOWER('Replanificada'))) ";
                }
                $boolBusqueda = false;
            }         
            else if($estado == "Asignada")
            {
                $where .= "AND ((LOWER(ds.estado) = LOWER('Asignada'))) ";
                $where .= "AND ((LOWER(dsh.estado) = LOWER('Asignada'))) ";
                if($origen=="instalacion")
                {
                    $where .= "AND ((LOWER(s.estado) = LOWER('enpruebas'))) ";
                }
                $boolBusqueda = false;
            }
            else if($estado == "Finalizada")
            {
                $where .= "AND ((LOWER(ds.estado) = LOWER('Finalizada')) OR (LOWER(ds.estado) = LOWER('Asignada'))) ";
                $where .= "AND ((LOWER(dsh.estado) = LOWER('Finalizada')) OR (LOWER(dsh.estado) = LOWER('Asignada'))) ";
                $boolBusqueda = false;
            }
            else 
            {
                $where .= "AND (LOWER(ds.estado) = LOWER('Planificada') OR LOWER(ds.estado) = ".
                          "LOWER('Replanificada') OR LOWER(ds.estado) = LOWER('Asignada')) ";
                $where .= "AND (LOWER(dsh.estado) = LOWER('Planificada') OR LOWER(dsh.estado) =".
                          " LOWER('Replanificada') OR LOWER(dsh.estado) = LOWER('Asignada')) ";
            }
        } 
        
        $sql = "SELECT 
                        ds.id as idDetalleSolicitud, s.id as idServicio, s.tipoOrden, s.estado as estadoServicio,s.cantidad ,
                        p.id as idPunto,
                        (select 
                            region.nombreRegion 
                         from 
                            schemaBundle:InfoOficinaGrupo oficina,
                            schemaBundle:AdmiCanton       canton, 
                            schemaBundle:AdmiProvincia    provincia, 
                            schemaBundle:AdmiRegion       region 
                         where
                            aj.oficinaId       = oficina.id and
                            oficina.cantonId   = canton.id and
                            canton.provinciaId = provincia.id and
                            provincia.regionId = region.id 
                        ) as nombreRegion,
                        se.nombreSector, pa.nombreParroquia, ca.nombreCanton, pe.id as id_persona , per.id as id_persona_empresa_rol ,
                        pe.razonSocial, pe.nombres, pe.apellidos, p.usrVendedor, p.login, aj.nombreJurisdiccion,
                        p.longitud, p.latitud, p.direccion, p.path as rutaCroquis, ds.feCreacion, ds.estado, ts.descripcionSolicitud ,
                        dsh.id as idDetalleSolHist, dsh.feIniPlan, dsh.feFinPlan , st.ultimaMillaId , st.elementoId,st.tercerizadoraId,
                        st.interfaceElementoId , st.elementoConectorId , st.interfaceElementoConectorId , st.elementoContenedorId , st.tipoEnlace,
                        CONCAT(peVend.nombres,CONCAT(' ',peVend.apellidos)) as nombreVendedor 
                        $ad_select 
        
                FROM 
			schemaBundle:InfoDetalleSolHist dsh, schemaBundle:AdmiTipoSolicitud ts,
			schemaBundle:InfoServicio s, schemaBundle:InfoServicioTecnico st,
			schemaBundle:InfoDetalleSolicitud ds, schemaBundle:AdmiJurisdiccion aj,
			schemaBundle:InfoPersona pe, schemaBundle:InfoPersonaEmpresaRol per, schemaBundle:InfoEmpresaRol emr,
			schemaBundle:AdmiSector se, schemaBundle:AdmiParroquia pa, schemaBundle:AdmiCanton ca,
                        schemaBundle:InfoPunto p  
					
			LEFT JOIN schemaBundle:InfoPersona peVend WITH peVend.login = p.usrVendedor 	
			$ad_from
			
                WHERE 
			st.servicioId = s.id
                        AND s.puntoId = p.id
			AND s.id = ds.servicioId
			AND ds.id = dsh.detalleSolicitudId  
			AND p.personaEmpresaRolId = per.id 
			AND per.personaId = pe.id 
			AND p.sectorId = se.id 
			AND se.parroquiaId = pa.id 
			AND pa.cantonId = ca.id 
			AND aj.id = p.puntoCoberturaId
			AND ts.id = ds.tipoSolicitudId
			AND per.empresaRolId = emr.id
			AND emr.empresaCod = $codEmpresa
			$whereTiposSolicitud
			AND dsh.id = (SELECT MAX(dshMax.id) 
			FROM schemaBundle:InfoDetalleSolHist dshMax
			WHERE dshMax.detalleSolicitudId = dsh.detalleSolicitudId) 
			$where	
			$ad_where          					
				
			ORDER BY ds.feCreacion DESC
               ";      
        
        $query = $this->_em->createQuery($sql);
        		
        if(!$boolBusqueda)
        {
            if($start!='' && !$boolBusqueda && $limit!='')
            {
                $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
            }
            else if($start!='' && !$boolBusqueda && $limit=='')
            {
                $datos = $query->setFirstResult($start)->getResult();
            }
            else if(($start=='' || $boolBusqueda) && $limit!='')
            {
                $datos = $query->setMaxResults($limit)->getResult();
            }
            else
            {
                $datos = $query->getResult();
            }
        }
        else
        {
            $datos = $query->getResult();
	}
        return $datos;
    }

    /**
     * Obtiene registros de las solicitudes de retiro de equipo 
     * Retorna array de registros de solicitudes de retiro
     * @param array $arrayParametros parametros de filtro de busqueda
     * @return array
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 11-05-2016 Mejoras al a la opcion, se optimiza el query
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 12-02-2015
     * @since 1.0
     */
    public function getRegistrosSolicitudesRetiroEquipo( $arrayParametros )
    {
        $startDate          = $arrayParametros['startDate'];
        $endDate            = $arrayParametros['endDate'];
        $estado             = $arrayParametros['estado'];
        $login              = $arrayParametros['login'];
        $sectorId           = $arrayParametros['sectorId'];
        $idDetalleSolicitud = $arrayParametros['idDetalleSolicitud'];        
        $descripcionPunto   = $arrayParametros['descripcionPunto'];
        $vendedor           = $arrayParametros['vendedor'];
        $numOrdenServicio   = $arrayParametros['numOrdenServicio'];
        $ciudad             = $arrayParametros['ciudad'];
        $origen             = $arrayParametros['origen'];
        $codEmpresa         = $arrayParametros['codEmpresa'];
        $nombre             = $arrayParametros['nombre'];
        $apellido           = $arrayParametros['apellido'];
        $razonSocial        = $arrayParametros['razonSocial'];
        $identificacion     = $arrayParametros['identificacion'];

        $arrayRespuesta['total']     = 0;
        $arrayRespuesta['resultado'] = "";

        try
        {
            $where       = "";
            $rsm         = new ResultSetMappingBuilder($this->_em);
            $rsmCount    = new ResultSetMappingBuilder($this->_em);
            $query       = $this->_em->createNativeQuery(null, $rsm);
            $queryCount  = $this->_em->createNativeQuery(null, $rsmCount);

            $strSelectCount = " SELECT COUNT(*) AS TOTAL ";
            $strSelect = " SELECT DISTINCT (ds.ID_DETALLE_SOLICITUD)             AS ID_DETALLE_SOLICITUD,
                                            s.ID_SERVICIO                        AS ID_SERVICIO,
                                            s.TIPO_ORDEN                         AS TIPO_ORDEN,
                                            s.ESTADO                             AS ESTADO_SERVICIO,
                                            s.CANTIDAD                           AS CANTIDAD,
                                            p.ID_PUNTO                           AS ID_PUNTO ,
                                            se.NOMBRE_SECTOR                     AS NOMBRE_SECTOR,
                                            pa.NOMBRE_PARROQUIA                  AS NOMBRE_PARROQUIA,
                                            ca.NOMBRE_CANTON                     AS NOMBRE_CANTON,
                                            pe.ID_PERSONA                        AS ID_PERSONA,
                                            pe.RAZON_SOCIAL                      AS RAZON_SOCIAL,
                                            pe.NOMBRES                           AS NOMBRES,
                                            pe.APELLIDOS                         AS APELLIDOS,
                                            p.USR_VENDEDOR                       AS USR_VENDEDOR,
                                            p.LOGIN                              AS LOGIN,
                                            aj.NOMBRE_JURISDICCION               AS NOMBRE_JURISDICCION,
                                            p.LONGITUD                           AS LONGITUD,
                                            p.LATITUD                            AS LATITUD,
                                            p.DIRECCION                          AS DIRECCION,
                                            p.RUTA_CROQUIS                       AS RUTA_CROQUIS,
                                            ds.FE_CREACION                       AS FE_CREACION,
                                            ds.ESTADO                            AS ESTADO,
                                            ts.DESCRIPCION_SOLICITUD             AS DESCRIPCION_SOLICITUD,
                                            dsh.ID_SOLICITUD_HISTORIAL           AS ID_SOLICITUD_HISTORIAL,
                                            dsh.FE_INI_PLAN                      AS FE_INI_PLAN,
                                            dsh.FE_FIN_PLAN                      AS FE_FIN_PLAN,
                                            st.ULTIMA_MILLA_ID                   AS ULTIMA_MILLA_ID,
                                            st.ELEMENTO_ID                       AS ELEMENTO_ID,
                                            st.TERCERIZADORA_ID                  AS TERCERIZADORA_ID,
                                            peVend.NOMBRES
                                            || ' '
                                            || peVend.APELLIDOS AS NOMBRE_COMPLETO ";
         if($login != "")
            {
                $boolBusqueda = true;
                $where       .= "AND p.login = :login ";
                $query->setParameter('login',$login);
                $queryCount->setParameter('login',$login);
            }

            if($sectorId != "")
            {
                $boolBusqueda = true;
                $where       .= "AND se.id_sector = :sectorId ";
                $query->setParameter('sectorId', $sectorId);
                $queryCount->setParameter('sectorId', $sectorId);
            }

            if($idDetalleSolicitud != "")
            {
                $boolBusqueda = true;
                $where       .= "AND ds.id_detalle_solicitud = :idDetalleSolicitud ";
                $query->setParameter('idDetalleSolicitud', $idDetalleSolicitud);
                $queryCount->setParameter('idDetalleSolicitud', $idDetalleSolicitud);
            }

            if($descripcionPunto != "")
            {
                $boolBusqueda = true;
                $where       .= "AND UPPER(p.descripcion_punto) like UPPER(:descripcionPunto) ";
                $query->setParameter('descripcionPunto', '%' . $descripcionPunto . '%');
                $queryCount->setParameter('descripcionPunto', '%' . $descripcionPunto . '%');
            }

            if($vendedor != "")
            {
                $boolBusqueda = true;
                $where       .= "AND (CONCAT(LOWER(peVend.nombres),CONCAT(' ',LOWER(peVend.apellidos))) like :vendedor1 OR UPPER(p.usr_vendedor) "
                             .  "like UPPER(:vendedor2) ) ";
                $query->setParameter('vendedor1', '%' . strtolower(trim($vendedor)) . '%');
                $query->setParameter('vendedor2', '%' . $vendedor . '%');
                $queryCount->setParameter('vendedor1', '%' . strtolower(trim($vendedor)) . '%');
                $queryCount->setParameter('vendedor2', '%' . $vendedor . '%');
            }

            if($ciudad != "")
            {
                $boolBusqueda = true;
                $where       .= "AND UPPER(ca.nombre_canton) like UPPER(:ciudad) ";
                $query->setParameter('ciudad', '%' . $ciudad . '%');
                $queryCount->setParameter('ciudad', '%' . $ciudad . '%');
            }
            //se agrega codigo para validar nuevo filtro
            if($nombre != "")
            {
                $boolBusqueda = true;
                $where       .= "AND UPPER(pe.nombres) like UPPER(:nombres) ";
                $query->setParameter(':nombres', '%' . $nombre . '%');
                $queryCount->setParameter(':nombres', '%' . $nombre . '%');
            }
            //se agrega codigo para validar nuevo filtro
            if($apellido != "")
            {
                $boolBusqueda = true;
                $where       .= "AND UPPER(pe.apellidos) like UPPER(:apellidos) ";
                $query->setParameter('apellidos', '%' . $apellido . '%');
                $queryCount->setParameter('apellidos', '%' . $apellido . '%');
            }
            //se agrega codigo para validar nuevo filtro
            if($razonSocial != "")
            {
                $boolBusqueda = true;
                $where       .= "AND UPPER(pe.razon_social) like UPPER(:razonSocial) ";
                $query->setParameter('razonSocial', '%' . $razonSocial . '%');
                $queryCount->setParameter('razonSocial', '%' . $razonSocial . '%');
            }
            //se agrega codigo para validar nuevo filtro
            if($identificacion != "")
            {
                $boolBusqueda = true;
                $where       .= "AND pe.identificacion_cliente like :identificacion ";
                $query->setParameter('identificacion', '%' . $identificacion . '%');
                $queryCount->setParameter('identificacion', '%' . $identificacion . '%');
            }

            $ad_select = "";
            $ad_from   = "";
            $ad_where  = "";

            if(($estado == "AsignadoTarea" or $estado == "Asignada") && $origen != "recursosRed")
            {
                $ad_select = ",d.fe_creacion as FEASIGNADA";
                $ad_from   = ",info_detalle d ";
                $ad_where  = "AND d.detalle_solicitud_id = ds.id_detalle_solicitud " .
                             "AND d.id_detalle = (SELECT MAX(dMax.id_detalle)
                                          FROM info_detalle dMax
                                          WHERE dMax.detalle_solicitud_id = d.detalle_solicitud_id) ";

                if($startDate != "")
                {
                    $arrayFechaDesde = explode("-", $startDate);
                    $timeFechaDesde  = strtotime($arrayFechaDesde[0]."-".$arrayFechaDesde[1]."-".$arrayFechaDesde[2]);
                    $dateFechaDesde  = date("Y/m/d", $timeFechaDesde);

                    $where        .= "AND d.fe_creacion >= :fechaSql1 ";
                    $query->setParameter('fechaSql1', $dateFechaDesde);
                    $queryCount->setParameter('fechaSql1', $dateFechaDesde);
                }
                if($endDate != "")
                {
                    $arrayFechaHasta = explode("-", $endDate);
                    $timeFechaHasta  = strtotime($arrayFechaHasta[2]."-".$arrayFechaHasta[1]."-".$arrayFechaHasta[0]);
                    $timeFechaHasta  = strtotime(date("d-m-Y", $timeFechaHasta)." +1 day");
                    $dateFechaHasta  = date("Y/m/d", $timeFechaHasta);

                    $where       .= "AND d.fe_creacion <= :fechaSql2 ";
                    $query->setParameter('fechaSql2', $dateFechaHasta);
                    $queryCount->setParameter('fechaSql2', $dateFechaHasta);
                }
            }
            else
            {
                if($startDate != "")
                {
                    $dateF        = explode("-", $startDate);
                    $fechaSql     = date("Y/m/d", strtotime($dateF[2] . "-" . $dateF[1] . "-" . $dateF[0]));

                    $where       .= "AND dsh.fe_ini_plan >= :fechaSql1 ";
                    $query->setParameter('fechaSql1', trim($fechaSql));
                    $queryCount->setParameter('fechaSql1', trim($fechaSql));
                }
                if($endDate != "")
                {
                    $dateF       = explode("-", $endDate);
                    $fechaSqlAdd = strtotime(date("d-m-Y", strtotime($dateF[2] . "-" . $dateF[1] . "-" . $dateF[0])) . " +1 day");
                    $fechaSql    = date("Y/m/d", $fechaSqlAdd);

                    $where       .= "AND dsh.fe_ini_plan <= :fechaSql2 ";
                    $query->setParameter('fechaSql2', trim($fechaSql));
                    $queryCount->setParameter('fechaSql2', trim($fechaSql));
                }
            }

            $strSelect .= $ad_select;

            $strFrom = " FROM INFO_DETALLE_SOL_HIST dsh,
                            ADMI_TIPO_SOLICITUD ts,
                            INFO_SERVICIO s,
                            INFO_SERVICIO_TECNICO st,
                            INFO_DETALLE_SOLICITUD ds,
                            ADMI_JURISDICCION aj ,
                            INFO_PERSONA pe,
                            INFO_PERSONA_EMPRESA_ROL per,
                            INFO_EMPRESA_ROL emr,
                            ADMI_SECTOR se,
                            ADMI_PARROQUIA pa,
                            ADMI_CANTON ca,
                            INFO_PUNTO p LEFT JOIN INFO_PERSONA peVend ON peVend.login = p.usr_vendedor ";

            $strFrom .= $ad_from;

            $strWhere  = "WHERE   s.punto_id = p.id_punto
                            AND st.servicio_id = s.id_servicio
                            AND s.id_servicio = ds.servicio_id
                            AND ds.id_detalle_solicitud = dsh.detalle_solicitud_id
                            AND p.persona_empresa_rol_id = per.id_persona_rol
                            AND per.persona_id = pe.id_persona
                            AND p.sector_id = se.id_sector
                            AND se.parroquia_id = pa.id_parroquia
                            AND pa.canton_id = ca.id_canton
                            AND aj.id_jurisdiccion = p.punto_cobertura_id
                            AND ts.id_tipo_solicitud = ds.tipo_solicitud_id
                            AND per.empresa_rol_id = emr.id_empresa_rol
                            AND emr.empresa_cod = :codEmpresa
                            AND ts.descripcion_solicitud = :desSolicitud
                            AND dsh.id_solicitud_historial = (SELECT MAX(dshMax.id_solicitud_historial)
                                          FROM info_detalle_sol_hist dshMax
                                          WHERE dshMax.detalle_solicitud_id = dsh.detalle_solicitud_id) ";

            $query->setParameter('codEmpresa', $codEmpresa);
            $query->setParameter('desSolicitud', 'SOLICITUD RETIRO EQUIPO');
            $queryCount->setParameter('codEmpresa', $codEmpresa);
            $queryCount->setParameter('desSolicitud', 'SOLICITUD RETIRO EQUIPO');

            if($estado != "" && $estado)
            {
                if($estado == "Planificada")
                {
                    $where .= "AND (ds.estado = :estadoPla OR ds.estado = :estadoRe) ";
                    $where .= "AND (dsh.estado = :estadoPla OR dsh.estado = :estadoRe)  ";
                    $query->setParameter('estadoPla', 'Planificada');
                    $query->setParameter('estadoRe', 'Replanificada');
                    $queryCount->setParameter('estadoPla', 'Planificada');
                    $queryCount->setParameter('estadoRe', 'Replanificada');
                }
                else if($estado == "AsignadoTarea")
                {
                    if($origen == "recursosRed")
                    {
                        $where .= "AND ( ds.estado = :estadoAsig or ds.estado = :estadoPre ) ";
                        $where .= "AND ( dsh.estado = :estadoAsig or dsh.estado = :estadoPre ) ";
                        $query->setParameter('estadoAsig', 'AsignadoTarea');
                        $query->setParameter('estadoPre', 'PreAsignacionInfoTecnica');
                        $queryCount->setParameter('estadoAsig', 'AsignadoTarea');
                        $queryCount->setParameter('estadoPre', 'PreAsignacionInfoTecnica');
                    }
                    else
                    {
                        $where .= "AND ((ds.estado = :estadoAsig) OR (ds.estado = :estadoRe)) ";
                        $where .= "AND ((dsh.estado = :estadoAsig)  OR (dsh.estado = :estadoRe)) ";
                        $query->setParameter('estadoAsig', 'AsignadoTarea');
                        $query->setParameter('estadoRe', 'Replanificada');
                        $queryCount->setParameter('estadoAsig', 'AsignadoTarea');
                        $queryCount->setParameter('estadoRe', 'Replanificada');
                    }
                }
                else if($estado == "Asignada")
                {
                    $where .= "AND ((ds.estado = :estadoAsig)) ";
                    $where .= "AND ((dsh.estado = :estadoAsig)) ";
                    $query->setParameter('estadoAsig', 'Asignada');
                    $queryCount->setParameter('estadoAsig', 'Asignada');
                }
                else if($estado == "Finalizada")
                {
                    $where .= "AND ((ds.estado = ':estadoFina) OR (ds.estado = :estadoAsig)) ";
                    $where .= "AND ((dsh.estado = :estadoFina) OR (dsh.estado = :estadoAsig)) ";
                    $query->setParameter('estadoFina', 'Finalizada');
                    $query->setParameter('estadoAsig', 'Asignada');
                    $queryCount->setParameter('estadoFina', 'Finalizada');
                    $queryCount->setParameter('estadoAsig', 'Asignada');
                }
                else
                {
                    $where .= "AND (ds.estado = :estadoPlan OR ds.estado = :estadoRepl OR ds.estado = :estadoAsig) ";
                    $where .= "AND (dsh.estado = 'Planificada' OR dsh.estado = 'Replanificada' OR dsh.estado = 'Asignada') ";
                    $query->setParameter('estadoPlan', 'Planificada');
                    $query->setParameter('estadoRepl', 'Replanificada');
                    $query->setParameter('estadoAsig', 'Asignada');
                    $queryCount->setParameter('estadoPlan', 'Planificada');
                    $queryCount->setParameter('estadoRepl', 'Replanificada');
                    $queryCount->setParameter('estadoAsig', 'Asignada');
                }
            }

            $strWhere .= $where . $ad_where;
            $strOrder = "   ORDER BY ds.fe_creacion DESC ";

            $rsm->addScalarResult('ID_DETALLE_SOLICITUD', 'idDetalleSolicitud','integer');
            $rsm->addScalarResult('ID_SERVICIO', 'idServicio','integer');
            $rsm->addScalarResult('TIPO_ORDEN','tipoOrden','string');
            $rsm->addScalarResult('ESTADO_SERVICIO','estadoServicio','string');
            $rsm->addScalarResult('CANTIDAD','cantidad','integer');
            $rsm->addScalarResult('ID_PUNTO','idPunto','integer');
            $rsm->addScalarResult('NOMBRE_SECTOR','nombreSector','string');
            $rsm->addScalarResult('NOMBRE_PARROQUIA','nombreParroquia','string');
            $rsm->addScalarResult('NOMBRE_CANTON','nombreCanton','string');
            $rsm->addScalarResult('ID_PERSONA','id_persona','integer');
            $rsm->addScalarResult('RAZON_SOCIAL','razonSocial','string');
            $rsm->addScalarResult('NOMBRES','nombres','string');
            $rsm->addScalarResult('APELLIDOS','apellidos','string');
            $rsm->addScalarResult('USR_VENDEDOR','usrVendedor','string');
            $rsm->addScalarResult('LOGIN','login','string');
            $rsm->addScalarResult('NOMBRE_JURISDICCION','nombreJuridiscion','string');
            $rsm->addScalarResult('LONGITUD','longitud','string');
            $rsm->addScalarResult('LATITUD','latitud','string');
            $rsm->addScalarResult('DIRECCION','direccion','string');
            $rsm->addScalarResult('RUTA_CROQUIS','rutaCroquis','string');
            $rsm->addScalarResult('FE_CREACION','feCreacion','string');
            $rsm->addScalarResult('ESTADO','estado','string');
            $rsm->addScalarResult('DESCRIPCION_SOLICITUD','descripcionSolicitud','string');
            $rsm->addScalarResult('ID_SOLICITUD_HISTORIAL','idDetalleSolHist','integer');
            $rsm->addScalarResult('FE_INI_PLAN','feIniPlan','string');
            $rsm->addScalarResult('FE_FIN_PLAN','feFiniPlan','string');
            $rsm->addScalarResult('ULTIMA_MILLA_ID','ultimaMillaId','integer');
            $rsm->addScalarResult('ELEMENTO_ID','elementoId','integer');
            $rsm->addScalarResult('TERCERIZADORA_ID','tercerizadoraId','integer');
            $rsm->addScalarResult('NOMBRE_COMPLETO','nombreVendedor','string');
            $rsm->addScalarResult('FEASIGNADA','feAsignada','string');

            $rsmCount->addScalarResult('TOTAL', 'total', 'integer');

            $strSqlFinal = $strSelect . $strFrom . $strWhere . $strOrder;
            
            $query->setSQL($strSqlFinal);

            $arrayResultado = $query->getResult();

            $strSqlFinalCount = $strSelectCount ." FROM (".$strSelect .$strFrom . $strWhere . $strOrder.")";

            $queryCount->setSQL($strSqlFinalCount);

            $intTotal = $queryCount->getSingleScalarResult();
            
            $arrayRespuesta['resultado'] = $arrayResultado;
            $arrayRespuesta['total']     = $intTotal;
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        return $arrayRespuesta;
    }
    
    /**
     * getRegistrosSolicitudesRetiroEquipoWs
     * 
     * Obtiene registros de las solicitudes de retiro de equipo mediante WS
     * Retorna array de registros de solicitudes de retiro
     * 
     * Costo : 3745
     * 
     * @param array $arrayParametros parametros de filtro de busqueda
     * @return Array $arrayRespuesta
     * [
     *  - arrayResultado  [
     *                     - idDetalleSolicitud       Identificador de solicitud de retiro de equipos    
     *                     - idServicio               Identificador de servicio a procesar
     *                     - fechaActivacionServicio  Fecha de Activacion de servicio
     *                     - buscaCpeNaf              Bandera que indica si un servicio debe ser consultado en el naf 
     *                                                para el procesamiento de la solicitud
     *                     - idPunto                  Identificador del punto del servicio a procesar     
     *                     - cliente                  Nombre del cliente del cual se procesara la solicitud de retiro 
     *                                                de equipo
     *                     - esRecontratacion         Cadena de caracteres que indica si un servicio es recontratacion
     *                     - tercerizadora            Cadena de caracteres que indica el nombre de tercerizadora segun el
     *                                                servicio procesado         
     *                     - login                    Cadena de caracteres que indica el login del servicio a procesar          
     *                     - tipoOrden                Cadena de caracteres que indica el tipo de orden del servicio a procesar
     *                     - producto                 Cadena de caracteres que indica el nombre de producto o plan del
     *                                                servicio a procesar            
     *                     - coordenadas              Cadena de caracteres que indica la coordenada del servicio a procesar
     *                     - direccion                Cadena de caracteres que indica la direccion del login a procesar
     *                     - ciudad                   Cadena de caracteres que indica la ciudad del login a procesar
     *                     - nombreSector             Cadena de caracteres que indica el nombre del sector del login a procesar  
     *                     - idDetalleSolHistorial    Identificador de historial de servicio
     *                     - feIniPlan                Cadena de caracteres que indican la fecha de inicio de planificacion
     *                     - feFinPlan                Cadena de caracteres que indican la fecha de fin de planificacion
     *                     - latitud                  Cadena de caracteres que indica la latitud del login a procesar
     *                     - longitud                 Cadena de caracteres que indica la longitud del login a procesar
     *                    ]
     * ]
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 27-12-2016
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.1 24-11-2017 - Se recupera el id_detalle y el id_comunicacion para poder gestionar
     *                           la tarea de retiro de equipo.
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.2 29-11-2017 - Se solventa el error de que no se muestra el numero de la tarea en los
     *                           dispositivos.
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.3 25/02/2018 - Se filtra por el id servicio .
     * 
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.4 16-06-2021 - Se modifica lógica para buscar solicitudes en estado Asignada y AsignadoTarea
     * 
     */
    public function getRegistrosSolicitudesRetiroEquipoWs( $arrayParametros )
    {
        $strLoginAsignado                 = $arrayParametros['strLoginAsignado'];
        $strCodEmpresa                    = $arrayParametros['strCodEmpresa'];
        $intServicio                      = $arrayParametros['idServicio'];
        $arrayRespuesta                   = array();
        $arrayRespuesta['arrayResultado'] = "";
        
        try
        {
            $objRsm    = new ResultSetMappingBuilder($this->_em);
            $objQuery  = $this->_em->createNativeQuery(null, $objRsm);

            $strSelect = " SELECT DISTINCT (ds.ID_DETALLE_SOLICITUD)             AS ID_DETALLE_SOLICITUD,
                                            da.DETALLE_ID                        AS ID_DETALLE,
                                            (SELECT MIN(ic.ID_COMUNICACION) FROM DB_SOPORTE.INFO_COMUNICACION IC
                                            WHERE ic.detalle_id = da.detalle_id) AS ID_COMUNICACION,
                                            s.ID_SERVICIO                        AS ID_SERVICIO,
                                            s.TIPO_ORDEN                         AS TIPO_ORDEN,
                                            s.ESTADO                             AS ESTADO_SERVICIO,
                                            s.CANTIDAD                           AS CANTIDAD,
                                            p.ID_PUNTO                           AS ID_PUNTO ,
                                            se.NOMBRE_SECTOR                     AS NOMBRE_SECTOR,
                                            pa.NOMBRE_PARROQUIA                  AS NOMBRE_PARROQUIA,
                                            ca.NOMBRE_CANTON                     AS NOMBRE_CANTON,
                                            pe.ID_PERSONA                        AS ID_PERSONA,
                                            pe.RAZON_SOCIAL                      AS RAZON_SOCIAL,
                                            pe.NOMBRES                           AS NOMBRES,
                                            pe.APELLIDOS                         AS APELLIDOS,
                                            p.USR_VENDEDOR                       AS USR_VENDEDOR,
                                            p.LOGIN                              AS LOGIN,
                                            aj.NOMBRE_JURISDICCION               AS NOMBRE_JURISDICCION,
                                            p.LONGITUD                           AS LONGITUD,
                                            p.LATITUD                            AS LATITUD,
                                            p.DIRECCION                          AS DIRECCION,
                                            p.RUTA_CROQUIS                       AS RUTA_CROQUIS,
                                            ds.FE_CREACION                       AS FE_CREACION,
                                            ds.ESTADO                            AS ESTADO,
                                            ts.DESCRIPCION_SOLICITUD             AS DESCRIPCION_SOLICITUD,
                                            dsh.ID_SOLICITUD_HISTORIAL           AS ID_SOLICITUD_HISTORIAL,
                                            dsh.FE_INI_PLAN                      AS FE_INI_PLAN,
                                            dsh.FE_FIN_PLAN                      AS FE_FIN_PLAN,
                                            st.ULTIMA_MILLA_ID                   AS ULTIMA_MILLA_ID,
                                            st.ELEMENTO_ID                       AS ELEMENTO_ID,
                                            st.TERCERIZADORA_ID                  AS TERCERIZADORA_ID ";

            $strFrom = " FROM DB_COMERCIAL.INFO_DETALLE_SOL_HIST dsh,
                            DB_COMERCIAL.ADMI_TIPO_SOLICITUD ts,
                            DB_COMERCIAL.INFO_SERVICIO s,
                            DB_COMERCIAL.INFO_SERVICIO_TECNICO st,
                            DB_COMERCIAL.INFO_DETALLE_SOLICITUD ds,
                            DB_INFRAESTRUCTURA.ADMI_JURISDICCION aj ,
                            DB_COMERCIAL.INFO_PERSONA pe,
                            DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL per,
                            DB_COMERCIAL.INFO_EMPRESA_ROL emr,
                            DB_GENERAL.ADMI_SECTOR se,
                            DB_GENERAL.ADMI_PARROQUIA pa,
                            DB_GENERAL.ADMI_CANTON ca,
                            DB_SOPORTE.INFO_DETALLE_ASIGNACION DA, 
                            DB_SOPORTE.INFO_DETALLE D, 
                            DB_COMERCIAL.INFO_PERSONA PEASIGNADA,
                            DB_COMERCIAL.INFO_PUNTO p ";


            $strWhere  = "WHERE   s.punto_id               = p.id_punto
                            AND st.servicio_id             = s.id_servicio
                            AND s.id_servicio              = ds.servicio_id
                            AND ds.id_detalle_solicitud    = dsh.detalle_solicitud_id
                            AND p.persona_empresa_rol_id   = per.id_persona_rol
                            AND per.persona_id             = pe.id_persona
                            AND p.sector_id                = se.id_sector
                            AND se.parroquia_id            = pa.id_parroquia
                            AND pa.canton_id               = ca.id_canton
                            AND aj.id_jurisdiccion         = p.punto_cobertura_id
                            AND ts.id_tipo_solicitud       = ds.tipo_solicitud_id
                            AND per.empresa_rol_id         = emr.id_empresa_rol
                            AND emr.empresa_cod            = :paramCodEmpresa
                            AND ts.descripcion_solicitud   = :paramDesSolicitud
                            AND ds.estado                  IN (:paramEstadoAsig)
                            AND dsh.estado                 IN (:paramEstadoAsig)
                            AND dsh.id_solicitud_historial = (SELECT MAX(dshMax.id_solicitud_historial)
                                                              FROM DB_COMERCIAL.info_detalle_sol_hist dshMax
                                                              WHERE dshMax.detalle_solicitud_id = dsh.detalle_solicitud_id) 
                            AND d.detalle_solicitud_id     = ds.id_detalle_solicitud
                            AND d.id_detalle               = (SELECT MAX(dMax.id_detalle)
                                                              FROM DB_COMERCIAL.info_detalle dMax
                                                              WHERE dMax.detalle_solicitud_id = d.detalle_solicitud_id)
                            AND DA.DETALLE_ID = d.id_detalle 
                            AND DA.TIPO_ASIGNADO           IN (:paramTipoAsignado)
                            AND DA.REF_ASIGNADO_ID         = PEASIGNADA.ID_PERSONA
                            AND PEASIGNADA.LOGIN           = :paramLogin
                            ";
            

            if(!empty($intServicio))
            {
               
                $strWhere .= " AND s.id_servicio = :idServicio ";
                $objQuery->setParameter('idServicio',   $intServicio);

            }            
            
            $strOrder = "   ORDER BY ds.fe_creacion DESC ";
            
            $objQuery->setParameter('paramCodEmpresa',   $strCodEmpresa);
            $objQuery->setParameter('paramDesSolicitud', 'SOLICITUD RETIRO EQUIPO');
            $objQuery->setParameter('paramEstadoAsig',   array("Asignada", "AsignadoTarea"));
            $objQuery->setParameter("paramTipoAsignado", array('EMPLEADO','CUADRILLA'));
            $objQuery->setParameter("paramLogin",        $strLoginAsignado);



            $objRsm->addScalarResult('ID_DETALLE_SOLICITUD',   'idDetalleSolicitud',    'integer');
            $objRsm->addScalarResult('ID_DETALLE',             'idDetalle',             'integer');
            $objRsm->addScalarResult('ID_COMUNICACION',        'idComunicacion',        'integer');
            $objRsm->addScalarResult('ID_SERVICIO',            'idServicio',            'integer');
            $objRsm->addScalarResult('TIPO_ORDEN',             'tipoOrden',             'string');
            $objRsm->addScalarResult('ESTADO_SERVICIO',        'estadoServicio',        'string');
            $objRsm->addScalarResult('CANTIDAD',               'cantidad',              'integer');
            $objRsm->addScalarResult('ID_PUNTO',               'idPunto',               'integer');
            $objRsm->addScalarResult('NOMBRE_SECTOR',          'nombreSector',          'string');
            $objRsm->addScalarResult('NOMBRE_PARROQUIA',       'nombreParroquia',       'string');
            $objRsm->addScalarResult('NOMBRE_CANTON',          'nombreCanton',          'string');
            $objRsm->addScalarResult('ID_PERSONA',             'id_persona',            'integer');
            $objRsm->addScalarResult('RAZON_SOCIAL',           'razonSocial',           'string');
            $objRsm->addScalarResult('NOMBRES',                'nombres',               'string');
            $objRsm->addScalarResult('APELLIDOS',              'apellidos',             'string');
            $objRsm->addScalarResult('USR_VENDEDOR',           'usrVendedor',           'string');
            $objRsm->addScalarResult('LOGIN',                  'login',                 'string');
            $objRsm->addScalarResult('NOMBRE_JURISDICCION',    'nombreJuridiscion',     'string');
            $objRsm->addScalarResult('LONGITUD',               'longitud',              'string');
            $objRsm->addScalarResult('LATITUD',                'latitud',               'string');
            $objRsm->addScalarResult('DIRECCION',              'direccion',             'string');
            $objRsm->addScalarResult('RUTA_CROQUIS',           'rutaCroquis',           'string');
            $objRsm->addScalarResult('FE_CREACION',            'feCreacion',            'string');
            $objRsm->addScalarResult('ESTADO',                 'estado',                'string');
            $objRsm->addScalarResult('DESCRIPCION_SOLICITUD',  'descripcionSolicitud',  'string');
            $objRsm->addScalarResult('ID_SOLICITUD_HISTORIAL', 'idDetalleSolHist',      'integer');
            $objRsm->addScalarResult('FE_INI_PLAN',            'feIniPlan',             'string');
            $objRsm->addScalarResult('FE_FIN_PLAN',            'feFinPlan',             'string');
            $objRsm->addScalarResult('ULTIMA_MILLA_ID',        'ultimaMillaId',         'integer');
            $objRsm->addScalarResult('ELEMENTO_ID',            'elementoId',            'integer');
            $objRsm->addScalarResult('TERCERIZADORA_ID',       'tercerizadoraId',       'integer');

            
            $strSqlFinal                      = $strSelect . $strFrom . $strWhere . $strOrder;
            $objQuery->setSQL($strSqlFinal);
            $arrayResultado                   = $objQuery->getResult();
            $arrayRespuesta['arrayResultado'] = $arrayResultado;
        }
        catch(\Exception $ex)
        {
            throw($ex);
        }
        return $arrayRespuesta;
    }

    /* ************************** OTROS ***************************************************** */

 	public function findTotalInstalacionesAprobadas($fechaIni,$fechaFin)
	{
		$query="SELECT count(b.id) AS total
			FROM 
			schemaBundle:InfoDetalleSolicitud b,
			schemaBundle:AdmiTipoSolicitud ts
			WHERE 
			b.feCreacion >= :fechaIni 
			AND b.feCreacion <= :fechaFin 
			AND ts.id = b.tipoSolicitudId
			AND ts.descripcionSolicitud = 'SOLICITUD PLANIFICACION'
			AND b.estado not in ('Rechazada')";
		$result= $this->_em->createQuery($query)
                             ->setParameter('fechaIni', $fechaIni)
                             ->setParameter('fechaFin', $fechaFin)
                             ->setMaxResults(1)
                             ->getOneOrNullResult();	
		if(!$result)
                    return 0;            
        return $result;
	}
	public function findTotalInstalacionesRechazadas($fechaIni,$fechaFin)
	{
		$query="SELECT count(b.id) AS total
			FROM 
			schemaBundle:InfoDetalleSolicitud b
			WHERE 
			b.feCreacion >= :fechaIni 
			AND b.feCreacion <= :fechaFin 
			AND b.estado in ('Rechazada')";
		$result= $this->_em->createQuery($query)
                             ->setParameter('fechaIni', $fechaIni)
                             ->setParameter('fechaFin', $fechaFin)
                             ->setMaxResults(1)
                             ->getOneOrNullResult();

		if(!$result)
                    return 0;            
        return $result;
	}
	
	public function findTotalInstalacionesRechazadasGroupByMotivoRechazo($fechaIni,$fechaFin)
	{
		$query="SELECT e.nombreMotivo as descripcionMotivo, count(d.id) AS total
			FROM schemaBundle:InfoDetalleSolicitud d, schemaBundle:AdmiMotivo e
			WHERE 
			d.feCreacion >= :fechaIni 
			AND d.feCreacion <= :fechaFin
			AND d.motivoId=e.id
			AND d.estado in ('Rechazada') GROUP BY e.nombreMotivo";
		$result= $this->_em->createQuery($query)
                             ->setParameter('fechaIni', $fechaIni)
                             ->setParameter('fechaFin', $fechaFin)
                             ->getResult();	
//		if(!$result)
//                    return 0;            
        return $result;
	}
	public function findTotalInstalacionesAprobadasGroupByEstado($fechaIni,$fechaFin)
	{
		$query="SELECT d.estado as descripcionEstado, count(d.id) AS total
			FROM 
			schemaBundle:InfoDetalleSolicitud d,
			schemaBundle:AdmiTipoSolicitud ts
			WHERE 
			d.feCreacion >= :fechaIni 
			AND d.feCreacion <= :fechaFin 
			AND ts.id = d.tipoSolicitudId
			AND ts.descripcionSolicitud = 'SOLICITUD PLANIFICACION'
			AND d.feCreacion <= :fechaFin
			AND d.estado not in ('Rechazada') GROUP BY d.estado";
		$result= $this->_em->createQuery($query)
                             ->setParameter('fechaIni', $fechaIni)
                             ->setParameter('fechaFin', $fechaFin)
                             ->getResult();	
//		if(!$result)
//                    return 0;            
        return $result;
	}	
	
    public function find30SolicDescuento($empresa,$tipoSolicitud,$estado){	    
		$query = $this->_em->createQuery("SELECT a
		FROM 
                schemaBundle:InfoDetalleSolicitud a, schemaBundle:AdmiTipoSolicitud b,
				schemaBundle:InfoServicio c, schemaBundle:InfoPunto d, 
				schemaBundle:InfoPersonaEmpresaRol e, schemaBundle:InfoEmpresaRol f
		WHERE 
                a.tipoSolicitudId = b.id AND
				a.servicioId=c.id AND
				c.puntoId=d.id AND
				d.personaEmpresaRolId=e.id AND
				e.empresaRolId=f.id AND
				f.empresaCod='$empresa' AND
                UPPER(b.descripcionSolicitud) = '".strtoupper($tipoSolicitud)."' AND
                UPPER(a.estado)= '".strtoupper($estado)."' ")->setFirstResult(0)->setMaxResults(30);
                //echo $query->getSQL();die;
		$datos = $query->getResult();
		return $datos;
	}	
	
   /**
    * Busca las solicitudes que existan segun tipo de solicitud enviado por parametro
    * @param string  $estado
    * @param integer $tipoSolicitud
    * @param integer $idEmpresa
    * @param string  $fechaDesde
    * @param string  $fechaHasta
    * @param integer $start  
    * @param integer $limit
    * @return array (Retorna arreglo con el valor total y los registros encontrados)
    * 
    * @author Sofia Fernandez <sfernandez@telconet.ec>
    * @version 1.1 13-12-2017 Metodo recibe un arreglo.
    * $arrayParametros['strEstado'],
    * $arrayParametros['strTipoSolicitud'],
    * $arrayParametros['intIdEmpresa'],
    * $arrayParametros['strFechaDesde'],
    * $arrayParametros['strFechaHasta'],
    * $arrayParametros['strNombre'],
    * $arrayParametros['strApellido'],
    * $arrayParametros['strRazonSocial'],
    * $arrayParametros['strUsuarioCreacion'],
    * $arrayParametros['strLogin']
    * $arrayParametros['intStart'],
    * $arrayParametros['intLimit']
    * 
    * @author Edgar Holguín <eholguin@telconet.ec>
    * @version 1.2 27-12-2017 Se agrega lógica para paginación.
    *
    * @author Kevin Baque Puya <kbaque@telconet.ec>
    * @version 1.3 13-12-2019 - Se agrega lógica para realizar una mejor búsqueda, al momento de consultar:
    *                           nombre, apellido, razón social, usuario creación y login.
    *
    * @author : Kevin Baque Puya <kbaque@telconet.ec>
    * @version 1.4 16-06-2021 - Se agrega en la consulta el usuario en sesión, IdPersonEmpresaRol
    *                           Adicional se agrega lógica para retornar las solicitudes de acuerdo
    *                           a la caracteristica de la persona en sesión por medio de las siguiente 
    *                           descripciones de caracteristica:
    *                           'CARGO_GRUPO_ROLES_PERSONAL','ASISTENTE_POR_CARGO'
    *                           Estos cambios solo aplican para Telconet
    *
    * @author Kevin Baque Puya <kbaque@telconet.ec>
    * @version 1.5 03-12-2021 - Se establece nueva lógica para visualizar las solicitudes de acuerdo a la región,
    *                           los cambios solo aplican para Telconet.
    *
    * @author Kevin Baque Puya <kbaque@telconet.ec>
    * @version 1.6 19-09-2022 - Se establece nuevo filtro para retornar los clientes con el tipo de negocio ISP.
    *
    * Costo del query: 800
    */        
	public function findSolicDescuentoPorCriterios($arrayParametros)
    {
        $strSql            = "";
        $strSelect         = "";
        $strFrom           = "";
        $strWhere          = "";
        
        $objRsm            = new ResultSetMappingBuilder($this->_em);
        $objRsm->addRootEntityFromClassMetadata('telconet\schemaBundle\Entity\InfoDetalleSolicitud', 'A');
        $objQuery          = $this->_em->createNativeQuery(null,$objRsm);
        
        $objRsmCount       = new ResultSetMappingBuilder($this->_em);
        $objQueryCount     = $this->_em->createNativeQuery(null, $objRsmCount);
        $objRsmCount->addScalarResult('TOTAL', 'total', 'integer');        
        
        $strTipo                 = ( isset($arrayParametros['strTipoPersonal']) && !empty($arrayParametros['strTipoPersonal']) )
                                      ? $arrayParametros['strTipoPersonal'] : 'Otros';
        $strPrefijoEmpresa       = ( isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) )
                                      ? $arrayParametros['strPrefijoEmpresa'] : '';
        $intIdEmpresa            = ( isset($arrayParametros['intIdEmpresa']) && !empty($arrayParametros['intIdEmpresa']) )
                                      ? $arrayParametros['intIdEmpresa'] : '';
        $strRegion               = ( isset($arrayParametros['strRegion']) && !empty($arrayParametros['strRegion']) )
                                      ? $arrayParametros['strRegion'] : '';
        $arrayRolNoPermitido     = ( isset($arrayParametros['arrayRolNoPermitido']) && !empty($arrayParametros['arrayRolNoPermitido']) )
                                      ? $arrayParametros['arrayRolNoPermitido'] : '';
        $strIsp                  = ( isset($arrayParametros['strIsp']) && !empty($arrayParametros['strIsp']) ) ? $arrayParametros['strIsp'] : 'No';
        $boolVerTodo             = ( isset($arrayParametros['boolVerTodo']) && !empty($arrayParametros['boolVerTodo']) ) ? 
                                    $arrayParametros['boolVerTodo'] : 'No';
        $strEstadoActivo         = 'Activo';
        $arrayEstados            = array("Activo","Pendiente","Modificado");
        $strDescripcion          = 'ASISTENTE_POR_CARGO';
        $boolContinuar           = true;
        $intIdPersonEmpresaRol   = $arrayParametros['intIdPersonEmpresaRol'] ? intval($arrayParametros['intIdPersonEmpresaRol']) : 0;
        $arrayLoginVendedoresKam = ( isset($arrayParametros['arrayLoginVendedoresKam']) && !empty($arrayParametros['arrayLoginVendedoresKam']) )
                                   ? $arrayParametros['arrayLoginVendedoresKam'] : '';
        $boolTotalInstalacion    = ( isset($arrayParametros['boolTotalInstalacion']) && !empty($arrayParametros['boolTotalInstalacion']) )
                                   ? $arrayParametros['boolTotalInstalacion'] : "NO";
        $strSelectCount = " SELECT COUNT(*) AS TOTAL ";
        
        $strSelect = " SELECT A.* ";
        
        $strFrom   = " FROM 
                            DB_COMERCIAL.INFO_DETALLE_SOLICITUD   A, 
                            DB_COMERCIAL.ADMI_TIPO_SOLICITUD      B,
                            DB_COMERCIAL.INFO_SERVICIO            C, 
                            DB_COMERCIAL.INFO_PUNTO               D, 
                            DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL E, 
                            DB_COMERCIAL.INFO_EMPRESA_ROL         F,
                            DB_COMERCIAL.INFO_PERSONA             P ";
        $strWhere  = " WHERE 
                            A.TIPO_SOLICITUD_ID                = B.ID_TIPO_SOLICITUD
                            AND A.SERVICIO_ID                  = C.ID_SERVICIO
                            AND C.PUNTO_ID                     = D.ID_PUNTO
                            AND D.PERSONA_EMPRESA_ROL_ID       = E.ID_PERSONA_ROL
                            AND E.EMPRESA_ROL_ID               = F.ID_EMPRESA_ROL
                            AND F.EMPRESA_COD                  = :id_empresa 
                            AND P.ID_PERSONA                   = E.PERSONA_ID
                            AND UPPER(B.DESCRIPCION_SOLICITUD) = :tipo_solicitud ";
        if($boolTotalInstalacion == "SI")
        {
            $strSelectTotalInstalacion = " SELECT SUM(c.precio_instalacion) AS PRECIO_INSTALACION,
                                                  SUM(a.precio_descuento)   AS PRECIO_DESCUENTO ";
            $objRsmInstalacion         = new ResultSetMappingBuilder($this->_em);
            $objQuery                  = $this->_em->createNativeQuery(null, $objRsmInstalacion);
            $objRsmInstalacion->addScalarResult('PRECIO_INSTALACION', 'PRECIO_INSTALACION', 'string');
            $objRsmInstalacion->addScalarResult('PRECIO_DESCUENTO', 'PRECIO_DESCUENTO', 'string');
        }
        $objQuery->setParameter("id_empresa",     $arrayParametros['intIdEmpresa']);
        $objQuery->setParameter("tipo_solicitud", strtoupper($arrayParametros['strTipoSolicitud']));

        $objQueryCount->setParameter("id_empresa",     $arrayParametros['intIdEmpresa']);
        $objQueryCount->setParameter("tipo_solicitud", strtoupper($arrayParametros['strTipoSolicitud']));

        if(isset($arrayParametros['strFechaDesde']) && !empty($arrayParametros['strFechaDesde'][0]))
        {
            $strFechaDesde = $arrayParametros['strFechaDesde'][0];
            $strWhere     .= " AND A.FE_CREACION >= :fe_desde ";
            $objQuery->setParameter('fe_desde', $strFechaDesde);
            $objQueryCount->setParameter('fe_desde', $strFechaDesde);
        }
        if(isset($arrayParametros['strFechaHasta']) && !empty($arrayParametros['strFechaHasta'][0]))
        {
            $strFechaHasta = $arrayParametros['strFechaHasta'][0];
            $strWhere     .= " AND A.FE_CREACION <= :fe_hasta ";
            $objQuery->setParameter('fe_hasta', $strFechaHasta);
            $objQueryCount->setParameter('fe_hasta', $strFechaHasta);
        }
        
        if(isset($arrayParametros['strNombre']) && !empty($arrayParametros['strNombre']))
        {
            $strWhere .= " AND UPPER(P.NOMBRES)    LIKE (:strNombre) ";
            $objQuery->setParameter('strNombre', '%' . strtoupper($arrayParametros['strNombre']) . '%');
            $objQueryCount->setParameter('strNombre', '%' . strtoupper($arrayParametros['strNombre']) . '%');
        }
        if(isset($arrayParametros['strApellido']) && !empty($arrayParametros['strApellido']))
        {
            $strWhere .= " AND UPPER(P.APELLIDOS)    LIKE (:strApellido) ";
            $objQuery->setParameter('strApellido', '%' . strtoupper($arrayParametros['strApellido']) . '%');
            $objQueryCount->setParameter('strApellido', '%' . strtoupper($arrayParametros['strApellido']) . '%');
        }
        if(isset($arrayParametros['strRazonSocial']) && !empty($arrayParametros['strRazonSocial']))
        {
            $strWhere .= " AND UPPER(P.RAZON_SOCIAL)    LIKE (:strRazonSocial) ";
            $objQuery->setParameter('strRazonSocial', '%' . strtoupper($arrayParametros['strRazonSocial']) . '%');
            $objQueryCount->setParameter('strRazonSocial', '%' . strtoupper($arrayParametros['strRazonSocial']) . '%');
        }
        if(isset($arrayParametros['strIdentificacion']) && !empty($arrayParametros['strIdentificacion']))
        {
            $strWhere .= " AND P.IDENTIFICACION_CLIENTE = :strIdentificacion ";
            $objQuery->setParameter('strIdentificacion', $arrayParametros['strIdentificacion']);
            $objQueryCount->setParameter('strIdentificacion', $arrayParametros['strIdentificacion']);
        }
        if(isset($arrayParametros['strUsuarioCreacion']) && !empty($arrayParametros['strUsuarioCreacion']))
        {
            $strWhere .= " AND UPPER(A.USR_CREACION)    LIKE (:strUsuarioCreacion) ";
            $objQuery->setParameter('strUsuarioCreacion', strtoupper($arrayParametros['strUsuarioCreacion']) . '%');
            $objQueryCount->setParameter('strUsuarioCreacion', strtoupper($arrayParametros['strUsuarioCreacion']) . '%');
        }
        if(isset($arrayParametros['strLogin']) && !empty($arrayParametros['strLogin']))
        {
            $strWhere .= " AND UPPER(D.LOGIN)    LIKE (:strLogin) ";
            $objQuery->setParameter('strLogin', strtoupper($arrayParametros['strLogin']) . '%');
            $objQueryCount->setParameter('strLogin', strtoupper($arrayParametros['strLogin']) . '%');
        }
        
        if(($strPrefijoEmpresa == 'TN' && $strTipo !== 'Otros' ) && !empty($intIdPersonEmpresaRol) && $strIsp == "No")
        {
            $boolAgregarParametros = false;
            if( $strTipo == 'GERENTE_VENTAS' )
            {
                if(!empty($strRegion) && !empty($arrayRolNoPermitido))
                {
                    $strFrom  .= ",DB_COMERCIAL.INFO_PERSONA              IPE_VEND,
                                   DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL  IPER_VEND,
                                   DB_COMERCIAL.INFO_OFICINA_GRUPO        IOG_VEND,
                                   DB_COMERCIAL.ADMI_CANTON               AC_VEND,
                                   DB_COMERCIAL.INFO_EMPRESA_ROL          IER_VEND,
                                   DB_COMERCIAL.INFO_EMPRESA_GRUPO        IEG_VEND,
                                   DB_COMERCIAL.ADMI_ROL                  AR_VEND ";
                    $strWhere .= " AND IPE_VEND.LOGIN          = D.USR_VENDEDOR
                                   AND IPER_VEND.PERSONA_ID    = IPE_VEND.ID_PERSONA
                                   AND IOG_VEND.ID_OFICINA     = IPER_VEND.OFICINA_ID
                                   AND AC_VEND.ID_CANTON       = IOG_VEND.CANTON_ID
                                   AND IER_VEND.ID_EMPRESA_ROL = IPER_VEND.EMPRESA_ROL_ID
                                   AND IEG_VEND.COD_EMPRESA    = IER_VEND.EMPRESA_COD
                                   AND AR_VEND.ID_ROL          = IER_VEND.ROL_ID
                                   AND IPER_VEND.ESTADO        = :strEstadoActivo
                                   AND IEG_VEND.COD_EMPRESA    = :intIdEmpresa
                                   AND IEG_VEND.PREFIJO        = :strPrefijoEmpresa
                                   AND AC_VEND.REGION          = :strRegion 
                                   AND IPE_VEND.ESTADO         IN (:arrayEstados)
                                   AND AR_VEND.DESCRIPCION_ROL NOT IN(:arrayRolNoPermitido) ";
                    $objQuery->setParameter('arrayEstados',             $arrayEstados);
                    $objQueryCount->setParameter('arrayEstados',        $arrayEstados);
                    $objQuery->setParameter('strEstadoActivo',          $strEstadoActivo);
                    $objQueryCount->setParameter('strEstadoActivo',     $strEstadoActivo);
                    $objQuery->setParameter('intIdEmpresa',             $intIdEmpresa);
                    $objQueryCount->setParameter('intIdEmpresa',        $intIdEmpresa);
                    $objQuery->setParameter('strPrefijoEmpresa',        $strPrefijoEmpresa);
                    $objQueryCount->setParameter('strPrefijoEmpresa',   $strPrefijoEmpresa);
                    $objQuery->setParameter('strRegion',                $strRegion);
                    $objQueryCount->setParameter('strRegion',           $strRegion);
                    $objQuery->setParameter('arrayRolNoPermitido',      $arrayRolNoPermitido);
                    $objQueryCount->setParameter('arrayRolNoPermitido', $arrayRolNoPermitido);
                }
                if($arrayParametros['strEstado'] != 'Todos')
                {
                    $boolContinuar         = false;
                    $strWhere             .= " AND (UPPER(A.ESTADO) LIKE (:estado) OR C.USR_VENDEDOR IN (:arrayLoginVendedoresKam)
                                               OR C.USR_VENDEDOR = :strUsrCreacion)
                                               AND UPPER(A.ESTADO) LIKE ('%PENDIENTE%') ";
                    $objQuery->setParameter("estado",'%'.strtoupper($arrayParametros['strEstado']));
                    $objQueryCount->setParameter("estado",'%'.strtoupper($arrayParametros['strEstado']));
                    $objQuery->setParameter("strUsrCreacion",$arrayParametros['strUsrCreacion']);
                    $objQueryCount->setParameter("strUsrCreacion",$arrayParametros['strUsrCreacion']);
                }
                else
                {
                    $strSubQuery = " AND C.USR_VENDEDOR IN (:arrayLoginVendedoresKam) ";
                }
                $objQuery->setParameter('arrayLoginVendedoresKam', $arrayLoginVendedoresKam);
                $objQueryCount->setParameter('arrayLoginVendedoresKam', $arrayLoginVendedoresKam);
            }
            if($strTipo == 'SUBGERENTE')
            {
                $strSubQuery = " AND C.USR_VENDEDOR IN
                                (SELECT IPVENDEDOR.LOGIN
                                    FROM DB_COMERCIAL.INFO_PERSONA IPVENDEDOR
                                    JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPERVENDEDOR
                                    ON IPERVENDEDOR.PERSONA_ID = IPVENDEDOR.ID_PERSONA
                                WHERE IPERVENDEDOR.ESTADO                            = :strEstadoActivo
                                    AND IPVENDEDOR.ESTADO                            = :strEstadoActivo
                                    AND (IPERVENDEDOR.REPORTA_PERSONA_EMPRESA_ROL_ID = :intIdPersonEmpresaRol
                                    OR IPERVENDEDOR.ID_PERSONA_ROL                   = :intIdPersonEmpresaRol)) ";
                $boolAgregarParametros = true;
                if($arrayParametros['strEstado'] != 'Todos')
                {
                    $boolContinuar         = false;
                    $strWhere             .= " AND UPPER(A.ESTADO) LIKE (:estado) ";
                    $objQuery->setParameter("estado",'%'.strtoupper($arrayParametros['strEstado']).'%');
                    $objQueryCount->setParameter("estado",'%'.strtoupper($arrayParametros['strEstado']).'%');
                }
            }
            elseif( $strTipo == 'ASISTENTE' )
            {
                $strSubQuery = " AND C.USR_VENDEDOR IN
                                (SELECT
                                        ip.login
                                    FROM
                                        DB_COMERCIAL.info_persona_empresa_rol_carac     iperc
                                        JOIN DB_COMERCIAL.admi_caracteristica           ac ON ac.id_caracteristica = iperc.caracteristica_id
                                        JOIN DB_COMERCIAL.info_persona                  ip ON ip.id_persona = to_number(iperc.valor)
                                    WHERE
                                        iperc.persona_empresa_rol_id = :intIdPersonEmpresaRol
                                        AND ac.descripcion_caracteristica = :strDescripcion
                                        AND ac.estado = :strEstadoActivo
                                        AND iperc.estado = :strEstadoActivo
                                        AND ip.estado = :strEstadoActivo) ";
                $objQuery->setParameter('strDescripcion', $strDescripcion);
                $objQueryCount->setParameter('strDescripcion', $strDescripcion);
                $boolAgregarParametros = true;
            }
            elseif( $strTipo == 'VENDEDOR' )
            {
                $strSubQuery = " AND C.USR_VENDEDOR IN
                                (SELECT IP.LOGIN
                                    FROM DB_COMERCIAL.INFO_PERSONA IP
                                    JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER
                                    ON IPER.PERSONA_ID = IP.ID_PERSONA
                                WHERE IPER.ID_PERSONA_ROL    = :intIdPersonEmpresaRol
                                    AND IPER.ESTADO          = :strEstadoActivo
                                    AND IP.ESTADO            = :strEstadoActivo) ";
                $boolAgregarParametros = true;
            }
            if($boolAgregarParametros)
            {
                $objQuery->setParameter('strEstadoActivo', $strEstadoActivo);
                $objQuery->setParameter('intIdPersonEmpresaRol', $intIdPersonEmpresaRol);

                $objQueryCount->setParameter('strEstadoActivo', $strEstadoActivo);
                $objQueryCount->setParameter('intIdPersonEmpresaRol', $intIdPersonEmpresaRol);
            }
        }
        if($strIsp == "Si")
        {
            $strFrom  .= " ,DB_COMERCIAL.ADMI_TIPO_NEGOCIO           G ";
            $strWhere .= " AND G.ID_TIPO_NEGOCIO=D.TIPO_NEGOCIO_ID 
                           AND G.CODIGO_TIPO_NEGOCIO='ISP' ";
        }
        elseif($strIsp == "No" && $strTipo == 'SUBGERENTE' && $boolVerTodo == "NO")
        {
            $strFrom  .= " ,DB_COMERCIAL.ADMI_TIPO_NEGOCIO           G ";
            $strWhere .= " AND G.ID_TIPO_NEGOCIO=D.TIPO_NEGOCIO_ID 
                           AND G.CODIGO_TIPO_NEGOCIO != 'ISP' ";
        }
        if($boolContinuar && $arrayParametros['strEstado'] !== 'Todos')
        {
            $strWhere .= " AND UPPER(A.ESTADO) LIKE (:estado) ";
            $objQuery->setParameter("estado",'%'.strtoupper($arrayParametros['strEstado']).'%');
            $objQueryCount->setParameter("estado",'%'.strtoupper($arrayParametros['strEstado']).'%');
        }
        $strOrderBy = " order by a.fe_creacion desc ";
        $strSql = $strSelect.$strFrom.$strWhere.$strSubQuery.$strOrderBy;
        
        $strSqlFinal='';

        if( isset($arrayParametros['intStart']) && isset($arrayParametros['intLimit']) )
        {
            if($arrayParametros['intStart'] && $arrayParametros['intLimit'])
            {
                $intInicio     = $arrayParametros['intStart'];
                $intFin        = $arrayParametros['intStart'] + $arrayParametros['intLimit'];
                $strSqlFinal   = '  SELECT * FROM 
                                    (
                                        SELECT consultaPrincipal.*,rownum AS consultaPrincipal_rownum 
                                        FROM ('.$strSql.') consultaPrincipal 
                                        WHERE rownum<='.$intFin.'
                                    ) WHERE consultaPrincipal_rownum >'.$intInicio;
            }
            else
            {
                $strSqlFinal   = '  SELECT consultaPrincipal.* 
                                    FROM ('.$strSql.') consultaPrincipal 
                                    WHERE rownum<='.$arrayParametros['intLimit'];
            }
        }
        else
        {
            $strSqlFinal = $strSql;
        }
        
        try
        {
            if($boolTotalInstalacion == "SI")
            {
                $strSql     = $strSelectTotalInstalacion.$strFrom.$strWhere.$strSubQuery.$strOrderBy;
                $objQuery->setSQL($strSql);
                $arrayDatos = $objQuery->getResult();
            }
            else
            {
                $objQuery->setSQL($strSqlFinal);
                $arrayDatos = $objQuery->getResult();
            }
            $strSqlCount   = $strSelectCount." FROM (".$strSql.")";
            $objQueryCount->setSQL($strSqlCount);
            $intTotal      = $objQueryCount->getSingleScalarResult();    
        } 
        catch (\Exception $ex) 
        {
            error_log('InfoDetalleSolicitudRepository->findSolicDescuentoPorCriterios ' . $ex->getMessage() ); 
        }

        $arrayResultado['registros'] = $arrayDatos;
        $arrayResultado['total']     = $intTotal;
        return $arrayResultado;
	}
        
        
    public function find30SolicCancelacion($strEmpresa,$strTipoSolicitud,$strEstado)
    {	    
		$query = $this->_em->createQuery("SELECT a
		FROM 
                schemaBundle:InfoDetalleSolicitud a, schemaBundle:AdmiTipoSolicitud b,
				schemaBundle:InfoServicio c, schemaBundle:InfoPunto d, 
				schemaBundle:InfoPersonaEmpresaRol e, schemaBundle:InfoEmpresaRol f
		WHERE 
                a.tipoSolicitudId = b.id AND
				a.servicioId=c.id AND
				c.puntoId=d.id AND
				d.personaEmpresaRolId=e.id AND
				e.empresaRolId=f.id AND
				f.empresaCod='$strEmpresa' AND
                UPPER(b.descripcionSolicitud) = '".strtoupper($strTipoSolicitud)."' AND
                UPPER(a.estado)= '".strtoupper($strEstado)."' ")->setFirstResult(0)->setMaxResults(30);
                //echo $query->getSQL();die;
		$datos = $query->getResult();
		return $datos;
	}	
	
	public function findSolicCancelacionPorCriterios($estado,$tipoSolicitud,$idEmpresa,$start,$limit,$fechaDesde,$fechaHasta,$login){
            $criterio_fecha_desde="";
            $criterio_fecha_hasta="";
            $criterio_login="";
                if ($fechaDesde){
                    $fechaD = date("Y/m/d", strtotime($fechaDesde));			
                    $fechaDesde = $fechaD ;
                    $criterio_fecha_desde=" a.feCreacion >= '$fechaDesde' AND ";
                }
                if ($fechaHasta){
                    $fechaH = date("Y/m/d", strtotime($fechaHasta));			
                    $fechaHasta = $fechaH;
                    $criterio_fecha_hasta=" a.feCreacion <= '$fechaHasta' AND ";
                }   
                if($login){
                    $criterio_login=" d.login like'$login%' AND ";
                }
			$query = $this->_em->createQuery("SELECT a
		FROM 
                schemaBundle:InfoDetalleSolicitud a, schemaBundle:AdmiTipoSolicitud b,
				schemaBundle:InfoServicio c, schemaBundle:InfoPunto d, 
				schemaBundle:InfoPersonaEmpresaRol e, schemaBundle:InfoEmpresaRol f
		WHERE 
                a.tipoSolicitudId = b.id AND
                $criterio_fecha_desde
                $criterio_fecha_hasta  
                $criterio_login
				a.servicioId=c.id AND
				c.puntoId=d.id AND
				d.personaEmpresaRolId=e.id AND
				e.empresaRolId=f.id AND
				f.empresaCod='$idEmpresa' AND
                UPPER(b.descripcionSolicitud) = '".strtoupper($tipoSolicitud)."' AND
                UPPER(a.estado)= '".strtoupper($estado)."' ");
                $total=count($query->getResult());        
                $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
                $resultado['registros']=$datos;
                $resultado['total']=$total;
		return $resultado;                                        
                                      //  echo $query->getSQL(); die;
			//$datos = $query->getDQL();
					//print_r($datos);
					//die();

	}
    
    
    /**
     * getDetalleSolicitudesByCriterios
     *
     * Metodo encargado de obtener las solicitudes creadas por los usuarios dependiendo de los criterios enviados por el usuario
     *
     * @param array $arrayParametros [intInicio                  => Número de inicio de un registro, 
     *                                intLimite                  => Cantidad de registros a retornar por el query, 
     *                                strLogin                   => Login de las solicitudes a buscar,
     *                                intIdTipoSolicitud         => Id del tipo de solicitud a buscar,
     *                                strTipoSolicitud           => Descripción de la solicitud a buscar,
     *                                intIdServicio              => Id del servicio de las solicitudes a buscar,
     *                                strCaracteristicaSolicitud => Nombre de la característica a buscar asociadas al detalle de la solicitud
     *                                strFechaCreacionDesde      => Rango de fecha de creacion desde,
     *                                strFechaCreacionHasta      => Rango de fecha de creacion hasta,
     *                                strEstadoSolicitud         => Estado de la solicitud de detalle,
     *                                criterios                  => ('strCaracteristica' => Nombre de la caracteristica asociada a la solicitud, 
     *                                                               'intIdAlerta'       => Id de la alerta a buscar asociada a la solicitud, 
     *                                                               'intIdElemento'     => Elemento asociado a la solicitud, 
     *                                                               'boolAsociadaTarea' => Indica si la solicitud esta asociada a una tarea)]
     *
     * @return array $arrayResultados
     * 
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 08-04-2016
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 27-04-2017 - Se agregan los parámetros:
     *                           strLogin - Para buscar las solicitudes asociadas a los servicios que pertenecen al login.
     *                           intIdTipoSolicitud - Buscar las solicitudes pertenecientes al id tipo de solicitud.
     *                           strTipoSolicitud - Para buscar las solicitudes dependiendo de su descripcion.
     *                           intIdServicio - Para buscar las solicitudes asociadas a un servicio
     *                           strFechaCreacionDesde - Para buscar las solicitudes desde el rango de fecha enviado.
     *                           strFechaCreacionHasta - Para buscar las solicitudes hasta el rango de fecha enviado.
     *                           strEstadoSolicitud - Estado de la solicitud del detalle que se desean buscar
     *                           Adicional se implementa el manejo de excepciones.
     *
     * @author Christian Jaramillo Espinoza <cjaramilloe@telconet.ec>
     * @version 1.2 27-11-2019 - Se agregan los parámetros:
     *                           strCambioMasivoVendedor - Para saber si la búsqueda es por solicitud de cambio masivo
     *                           de vendedor.
     *
     * @author Christian Jaramillo Espinoza <cjaramilloe@telconet.ec>
     * @version 1.3 29-09-2020 - Se agregan los parámetros:
     *                            strCodEmpresa: Para filtrar por empresa
     *
     * Costo del query: 13
     */  
    public function getDetalleSolicitudesByCriterios( $arrayParametros )
    {
        $arrayResultados = array('total' => 0, 'registros' => array());
        
        try
        {
            $query      = $this->_em->createQuery();
            $queryCount = $this->_em->createQuery();

            $strSelect      = "SELECT ids.id, ids.estado, ids.observacion, SUBSTRING(ids.feCreacion, 0 , 10) as feCreacion, ids.usrCreacion, ".
                              "ids.usrRechazo, ids.feRechazo, ids.precioDescuento, ids.porcentajeDescuento, ids.feEjecucion, ip.id as intIdPunto, ".
                              "iser.id as intIdServicio, ip.login, iser.descripcionPresentaFactura as strDescripcionServicio ";
            $strSelectCount = "SELECT COUNT(ids.id) ";
            $strFrom        = "FROM schemaBundle:InfoDetalleSolicitud ids, ".
                              "     schemaBundle:InfoServicio iser, ".
                              "     schemaBundle:InfoPunto ip ";
            $strWhere       = "WHERE ids.id IS NOT NULL ".
                              "AND iser.id = ids.servicioId ".
                              "AND iser.puntoId = ip.id ";
            $strOrderBy     = "ORDER BY ids.feCreacion DESC ";

            if( isset($arrayParametros['strCambioMasivoVendedor']) && $arrayParametros['strCambioMasivoVendedor'] == 'S' )
            {
                $strSelect      = "SELECT ids.id, ids.estado, ids.observacion, SUBSTRING(ids.feCreacion, 0 , 10) as feCreacion, ids.usrCreacion, 
                                   ids.usrRechazo, ids.feRechazo, ids.precioDescuento, ids.porcentajeDescuento, ids.feEjecucion ";
                $strFrom        = "FROM schemaBundle:InfoDetalleSolicitud ids ";

                if( isset($arrayParametros['strCaracteristicaSolicitud']) && !empty($arrayParametros['strCaracteristicaSolicitud']) )
                {
                    $strSelect .= " , idsc.valor as loginVendedor ";
                }

                $strWhere       = "WHERE ids.id IS NOT NULL ";
            }
            
            if( isset($arrayParametros['intIdServicio']) && !empty($arrayParametros['intIdServicio']) )
            {
                $strWhere  .= "AND iser.id = :intIdServicio ";

                $query->setParameter("intIdServicio",      trim($arrayParametros['intIdServicio']));
                $queryCount->setParameter("intIdServicio", trim($arrayParametros['intIdServicio']));
            }//( isset($arrayParametros['intIdServicio']) && !empty($arrayParametros['intIdServicio']) )
            
            
            if( isset($arrayParametros['strCaracteristicaSolicitud']) && !empty($arrayParametros['strCaracteristicaSolicitud']) )
            {
                $strFrom   .= ", schemaBundle:InfoDetalleSolCaract idsc, ".
                              " schemaBundle:AdmiCaracteristica ac ";
                $strWhere  .= "AND idsc.detalleSolicitudId      = ids.id ".
                              "AND idsc.caracteristicaId        = ac.id ".
                              "AND idsc.estado                  = :strEstadoActivo ".
                              "AND ac.descripcionCaracteristica = :strCaracteristicaSolicitud ";

                $query->setParameter("strCaracteristicaSolicitud",      trim($arrayParametros['strCaracteristicaSolicitud']));
                $query->setParameter("strEstadoActivo",                 'Activo');
                $queryCount->setParameter("strCaracteristicaSolicitud", trim($arrayParametros['strCaracteristicaSolicitud']));
                $queryCount->setParameter("strEstadoActivo",            'Activo');
                
                if( isset($arrayParametros['intValor']) && !empty($arrayParametros['intValor']) )
                {
                    $strWhere  .= "AND idsc.valor = :intValor ";
                    
                    $query->setParameter("intValor",      $arrayParametros['intValor']);
                    $queryCount->setParameter("intValor", $arrayParametros['intValor']);
                }//( isset($arrayParametros['intValor']) && !empty($arrayParametros['intValor']) )
            }//( isset($arrayParametros['strCaracteristicaSolicitud']) && !empty($arrayParametros['strCaracteristicaSolicitud']) )
            

            if( isset($arrayParametros['strLogin']) && !empty($arrayParametros['strLogin']) )
            {
                $strWhere  .= "AND ip.login = :strLogin ";

                $query->setParameter("strLogin",      trim($arrayParametros['strLogin']));
                $queryCount->setParameter("strLogin", trim($arrayParametros['strLogin']));
            }//( isset($arrayParametros['strLogin']) && !empty($arrayParametros['strLogin']) )


            if( isset($arrayParametros['strEstadoSolicitud']) && !empty($arrayParametros['strEstadoSolicitud']) )
            {
                $strWhere .= "AND ids.estado = :strEstadoSolicitud ";

                $query->setParameter("strEstadoSolicitud",      $arrayParametros['strEstadoSolicitud']);
                $queryCount->setParameter("strEstadoSolicitud", $arrayParametros['strEstadoSolicitud']);
            }//( isset($arrayParametros['strEstadoSolicitud']) && !empty($arrayParametros['strEstadoSolicitud']) )
            
            
            if( isset($arrayParametros['intIdTipoSolicitud']) && !empty($arrayParametros['intIdTipoSolicitud']) )
            {
                $strSelect .= ", ats.descripcionSolicitud ";
                $strFrom   .= ", schemaBundle:AdmiTipoSolicitud ats ";
                $strWhere  .= "AND ats.id = ids.tipoSolicitudId ".
                              "AND ats.id = :intIdTipoSolicitud ";

                $query->setParameter("intIdTipoSolicitud",      $arrayParametros['intIdTipoSolicitud']);
                $queryCount->setParameter("intIdTipoSolicitud", $arrayParametros['intIdTipoSolicitud']);
            }//( isset($arrayParametros['intIdTipoSolicitud']) && !empty($arrayParametros['intIdTipoSolicitud']) )
            
            
            if( isset($arrayParametros['strTipoSolicitud']) && !empty($arrayParametros['strTipoSolicitud']) )
            {
                $strSelect .= ", ats.descripcionSolicitud ";
                $strFrom   .= ", schemaBundle:AdmiTipoSolicitud ats ";
                $strWhere  .= "AND ats.id = ids.tipoSolicitudId ".
                              "AND ats.descripcionSolicitud = :strTipoSolicitud ";

                $query->setParameter("strTipoSolicitud",      $arrayParametros['strTipoSolicitud']);
                $queryCount->setParameter("strTipoSolicitud", $arrayParametros['strTipoSolicitud']);
            }//( isset($arrayParametros['strTipoSolicitud']) && !empty($arrayParametros['strTipoSolicitud']) )


            $strFechaCreacionDesde = ( isset($arrayParametros["strFechaCreacionDesde"]) ? $arrayParametros["strFechaCreacionDesde"] : '' );

            if( !empty($strFechaCreacionDesde) )
            {
                $arrayTmpFeCreacionDesde = explode("-", $strFechaCreacionDesde);
                $strFechaCreacionDesde   = date("Y/m/d", strtotime($arrayTmpFeCreacionDesde[0]."-".$arrayTmpFeCreacionDesde[1]. "-".
                                                                   $arrayTmpFeCreacionDesde[2]));
                $strFechaCreacionDesde   = trim($strFechaCreacionDesde);

                if( !empty($strFechaCreacionDesde) )
                {
                    $strWhere .= "AND ids.feCreacion >= :strFechaCreacionDesde ";

                    $query->setParameter("strFechaCreacionDesde",      $strFechaCreacionDesde);
                    $queryCount->setParameter("strFechaCreacionDesde", $strFechaCreacionDesde);
                }//( !empty($strFechaCreacionDesde) )
            }//( !empty($strFechaCreacionDesde) )


            $strFechaCreacionHasta = ( isset($arrayParametros["strFechaCreacionHasta"]) ? $arrayParametros["strFechaCreacionHasta"] : '' );

            if( !empty($strFechaCreacionHasta) )
            {
                $arrayFeCreacionHasta   = explode("-", $strFechaCreacionHasta);
                $timeFechaCreacionHasta = strtotime(date("Y-m-d", strtotime( $arrayFeCreacionHasta[0]."-".$arrayFeCreacionHasta[1]."-".
                                                                             $arrayFeCreacionHasta[2])). " +1 day");
                $strFechaCreacionHasta = date("Y/m/d", $timeFechaCreacionHasta);
                $strFechaCreacionHasta = trim($strFechaCreacionHasta);

                if( !empty($strFechaCreacionHasta) )
                {
                    $strWhere .= "AND ids.feCreacion < :strFechaCreacionHasta ";

                    $query->setParameter("strFechaCreacionHasta",      $strFechaCreacionHasta);
                    $queryCount->setParameter("strFechaCreacionHasta", $strFechaCreacionHasta);
                }//( !empty($strFechaCreacionHasta) )
            }//( !empty($strFechaCreacionHasta) )


            $arrayCriterios = ( isset($arrayParametros['criterios']) ) ? $arrayParametros['criterios'] : array();

            if( !empty($arrayCriterios) )
            {
                if( !empty($arrayCriterios['strCaracteristica']) )
                {
                    $strSelect .= ", idsc.valor ";
                    $strFrom   .= ", schemaBundle:InfoDetalleSolCaract idsc,
                                     schemaBundle:AdmiCaracteristica ac ";
                    $strWhere  .= "AND ids.id = idsc.detalleSolicitudId
                                   AND idsc.caracteristicaId = ac.id 
                                   AND ac.descripcionCaracteristica = :strCaracteristica ";

                    $query->setParameter("strCaracteristica",      trim($arrayCriterios['strCaracteristica']));
                    $queryCount->setParameter("strCaracteristica", trim($arrayCriterios['strCaracteristica']));
                }


                if( !empty($arrayCriterios['intIdAlerta']) )
                {
                    $strWhere .= "AND idsc.valor = :intIdAlerta ";

                    $query->setParameter("intIdAlerta",      trim($arrayCriterios['intIdAlerta']));
                    $queryCount->setParameter("intIdAlerta", trim($arrayCriterios['intIdAlerta']));
                }


                if( !empty($arrayCriterios['intIdElemento']) )
                {
                    $strWhere .= "AND ids.elementoId = :intIdElemento ";

                    $query->setParameter("intIdElemento",      trim($arrayCriterios['intIdElemento']));
                    $queryCount->setParameter("intIdElemento", trim($arrayCriterios['intIdElemento']));
                }


                if( !empty($arrayCriterios['boolAsociadaTarea']) )
                {
                    $strSelect .= ", idet.id as idDetalleTarea ";
                    $strFrom   .= ", schemaBundle:InfoDetalle idet ";
                    $strWhere  .= "AND idet.detalleSolicitudId = ids.id ";
                }
            }

            if( isset($arrayParametros['strCodEmpresa']) && !empty($arrayParametros['strCodEmpresa']) )
            {
                $strFrom   .= ", schemaBundle:InfoPersonaEmpresaRol iper, schemaBundle:InfoEmpresaRol ier ";
                $strWhere  .= " AND ip.personaEmpresaRolId = iper.id AND ier.id = iper.empresaRolId " .
                              "AND ier.empresaCod = :strCodEmpresa ";

                $query->setParameter("strCodEmpresa",      $arrayParametros['strCodEmpresa']);
                $queryCount->setParameter("strCodEmpresa", $arrayParametros['strCodEmpresa']);
            }

            $strDql      = $strSelect.$strFrom.$strWhere.$strOrderBy;
            $strDqlCount = $strSelectCount.$strFrom.$strWhere;

            $query->setDQL($strDql);
            $queryCount->setDQL($strDqlCount);

            if( !empty($arrayParametros['intInicio']) )
            {
                $query->setFirstResult($arrayParametros['intInicio']);
            }


            if( !empty($arrayParametros['intLimite']) )
            {
                $query->setMaxResults($arrayParametros['intLimite']);
            }

            $arrayResultados['registros'] = $query->getResult();
            $arrayResultados['total']     = $queryCount->getSingleScalarResult();
        }
        catch(\Exception $e)
        {
            throw($e);
        }

        return $arrayResultados;
    }
    
    
	public function getEstados()
	{
		$query="SELECT distinct ids.estado
			FROM schemaBundle:InfoDetalleSolicitud ids 
			ORDER BY ids.estado";
		$result= $this->_em->createQuery($query)
                             ->getResult();	          
        return $result;
	}	
    

    /**
     * Funcion que retorna solicitudes de migracion huawei existentes para un determinado servicio
     * 
     * @param integer $idServicio 
     * @return  mixed $result 
     * @author  Edgar Holguin    <eholguin@telconet.ec>
     * @version 1.0 modificado:20-03-2015
     */    
    public function getSolicitudesMigracionHuawei($idServicio)
    {
      
	$sqlDetallesExistentes = "select ds.id
				  from schemaBundle:InfoDetalleSolicitud ds
				  where ds.tipoSolicitudId  = :tipoSolicitudId 
				  and ds.motivoId 	    = :motivoId
				  and ds.servicioId	    = :servicioId 
				  and ds.estado 	  not in (:estados)";
				  
	$estados=array('Anulado', 'Anulada');
	$queryDetallesExistentes = $this->_em->createQuery($sqlDetallesExistentes);
	$queryDetallesExistentes->setParameter('estados',$estados); 
	$queryDetallesExistentes->setParameter('servicioId',$idServicio);
	// 13 solicitud migracion  
	$queryDetallesExistentes->setParameter('tipoSolicitudId',13);
	// 445 cambio de tencologia
	$queryDetallesExistentes->setParameter('motivoId',445);	
	$result= $queryDetallesExistentes->getResult();	  
	
	return $result;
    }    

    
     /**
      * getSolicitudPorPuntoPorEstadoPorTipoSolicitud
      * 
     * Función que retorna datos de la solicitud que pertenece a un punto especifico
     * @param mixed $start 
     * @param mixed $limit 
     * @param mixed $puntoId 
     * @param mixed $estadoSolicitud 
     *  
     * @return mixed $datos Retorna el arreglo con la informacion del query solicitada
     * 
     * @author amontero@telconet.ec
     * @version 1.0 04-06-2015
     * @version 1.1 modificado: 25-09-2015 Richard Cabrera
     */
    public function getSolicitudPorPuntoPorEstado($start,$limit,$puntoId, $estadoSolicitud)
    {
        $rsm= new ResultSetMappingBuilder($this->_em);        
        $sql="SELECT 
                  a.id_detalle_solicitud, d.login, b.descripcion_solicitud,
                  a.precio_descuento, a.porcentaje_descuento,a.observacion,
                  a.fe_creacion,a.usr_creacion,a.estado,m.nombre_motivo,
                  p.descripcion_producto,pl.nombre_plan,count(e.material_cod) cantidad_materiales
              FROM 
                  INFO_DETALLE_SOLICITUD a 
                  JOIN  ADMI_TIPO_SOLICITUD b ON a.tipo_solicitud_id=b.id_tipo_solicitud
                  JOIN INFO_SERVICIO c ON a.servicio_id=c.id_servicio 
                  JOIN INFO_PUNTO d ON c.punto_id=d.id_punto
                  JOIN ADMI_MOTIVO m ON a.motivo_id=m.id_motivo
                  LEFT JOIN ADMI_PRODUCTO p ON c.producto_id=p.id_producto
                  LEFT JOIN INFO_PLAN_CAB pl ON c.plan_id=pl.id_plan
                  LEFT JOIN INFO_DETALLE_SOL_MATERIAL e ON a.id_detalle_solicitud=e.DETALLE_SOLICITUD_ID
              WHERE 
                c.punto_Id = :puntoId 
                AND a.estado not in (:estadoSolicitud) 
              GROUP BY a.id_detalle_solicitud,d.login,b.descripcion_solicitud,a.precio_descuento,a.porcentaje_descuento,a.observacion,
                a.fe_creacion,a.usr_creacion,a.estado,m.nombre_motivo,p.descripcion_producto,pl.nombre_plan
              ORDER BY a.fe_Creacion DESC";
        $query = $this->_em->createNativeQuery(null,$rsm);

        $query->setParameter("puntoId", $puntoId);
        $query->setParameter("estadoSolicitud", $estadoSolicitud);
        
        $rsm->addScalarResult('ID_DETALLE_SOLICITUD', 'id','integer');
        $rsm->addScalarResult('ESTADO', 'estado', 'string');
        $rsm->addScalarResult('LOGIN', 'login','string');
        $rsm->addScalarResult('DESCRIPCION_SOLICITUD', 'descripcionSolicitud','string');
        $rsm->addScalarResult('PORCENTAJE_DESCUENTO', 'porcentajeDescuento','float');
        $rsm->addScalarResult('FE_CREACION', 'feCreacion','string');            
        $rsm->addScalarResult('OBSERVACION', 'observacion','string');   
        $rsm->addScalarResult('USR_CREACION', 'usrCreacion','string');   
        $rsm->addScalarResult('PRECIO_DESCUENTO', 'precioDescuento','float');            
        $rsm->addScalarResult('NOMBRE_MOTIVO', 'nombreMotivo','string');
        $rsm->addScalarResult('NOMBRE_PLAN', 'nombrePlan','string');
        $rsm->addScalarResult('DESCRIPCION_PRODUCTO', 'descripcionProducto','string');
        $rsm->addScalarResult('CANTIDAD_MATERIALES', 'cantidadMateriales','integer');

        $query->setSQL($sql);
        $total=count($query->getScalarResult());
        $query->setParameter('start', $start+1);
        $query->setParameter('limit', ($start+$limit)); 
        $sql="SELECT a.*, rownum as intDoctrineRowNum FROM (".$sql.") a WHERE ROWNUM <= :limit";
        if($start>0)
        {
            $sql="SELECT * FROM (".$sql.") WHERE intDoctrineRowNum >= :start";
        }
        $query->setSQL($sql);
        $datos                  = $query->getScalarResult();
        $resultado['registros'] = $datos;
        $resultado['total']     = $total;
        return $resultado;
    }    
    
    
    /**
     * getInstalacionesByCriterios
     *
     * Metodo encargado de obtener las instalaciones guardadas de acuerdo a los
     * criterios ingresados por el usuario.
     *
     * @param array $arrayParametros
     *          
     * @return array $arrayResultados
     *
     * @author Modificado: Edson Franco <efranco@telconet.ec>
     * @version 1.1 21-10-2015 - Se modifica el query para realizar la consulta por estados y fechas de creación de los 
     *                           servicios de las instalaciones
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 29-09-2015
     */  
    public function getInstalacionesByCriterios( $arrayParametros )
    {
        $arrayResultados = array();
        
        $query      = $this->_em->createQuery();
        $queryCount = $this->_em->createQuery();
        
        $dateFechaDesde = null;
        $dateFechaHasta = null;
        $boolByEstados  = false;
        
        $strFrom    = "FROM schemaBundle:InfoDetalleSolicitud ids,
                            schemaBundle:AdmiTipoSolicitud ats,
                            schemaBundle:InfoServicio iser,
                            schemaBundle:InfoPunto ip,
                            schemaBundle:AdmiSector ads,
                            schemaBundle:AdmiParroquia ap,
                            schemaBundle:AdmiCanton ac,
                            schemaBundle:InfoPersonaEmpresaRol iper,
                            schemaBundle:InfoEmpresaRol ier,
                            schemaBundle:InfoEmpresaGrupo ieg ";
        
        $strWhere   = "WHERE iser.id = ids.servicioId
                         AND iser.puntoId = ip.id
                         AND ip.sectorId = ads.id 
                         AND ads.parroquiaId = ap.id
                         AND ap.cantonId = ac.id
                         AND iper.id = ip.personaEmpresaRolId
                         AND ier.id = iper.empresaRolId
                         AND ieg.id = ier.empresaCod
                         AND ats.descripcionSolicitud = :nombreSolicitud ";
        
        
        if( isset($arrayParametros['groupBy']) )
        {
            if($arrayParametros['groupBy'] == 'estados')
            {
                $strSelect      = "SELECT iser.estado, COUNT(DISTINCT iser.id) as totalInstalaciones ";
                $strSelectCount = "SELECT COUNT(DISTINCT ids.estado) ";
            
                $strGroupBy = 'GROUP BY iser.estado ';
                
                $boolByEstados = true;
            }
        }
        else
        {
            $strSelect      = "SELECT DISTINCT iser.id as idServicio ";
            $strSelectCount = "SELECT COUNT(DISTINCT iser.id) ";            
            
            $strFrom        .= ", schemaBundle:InfoServicioHistorial iserh ";
            
            $strGroupBy     = '';
            
            $strWhere       .= "AND iser.id = iserh.servicioId 
                                AND iserh.observacion LIKE :observacion
                                AND ( iserh.accion = :accion OR iserh.accion IS NULL ) ";
            
            $query->setParameter("accion",          "confirmarServicio");
            $query->setParameter("observacion",     "%Se confirmo el servicio%");
            
            $queryCount->setParameter("accion",          "confirmarServicio");
            $queryCount->setParameter("observacion",     "%Se confirmo el servicio%");
        }
        
        
        $query->setParameter("nombreSolicitud", "SOLICITUD PLANIFICACION");
        
        $queryCount->setParameter("nombreSolicitud", "SOLICITUD PLANIFICACION");
            
        
        if( isset($arrayParametros['fechaDesde']) )
        {
            if( $arrayParametros['fechaDesde'] )
            {
                $arrayFechaDesde = explode("-", $arrayParametros['fechaDesde']);
                $timeFechaDesde  = strtotime($arrayFechaDesde[2]."-".$arrayFechaDesde[1]."-".$arrayFechaDesde[0]);
                $dateFechaDesde  = date("Y/m/d", $timeFechaDesde);

                if( $boolByEstados )
                {
                    $strWhere .= "AND iser.feCreacion >= :fechaDesde ";
                }
                else
                {
                    $strWhere .= "AND iserh.feCreacion >= :fechaDesde ";
                }

                $query->setParameter("fechaDesde", trim($dateFechaDesde));

                $queryCount->setParameter("fechaDesde", trim($dateFechaDesde));
            }
        }
        
        
        if( isset($arrayParametros['fechaHasta']) )
        {
            if( $arrayParametros['fechaHasta'] )
            {
                $arrayFechaHasta = explode("-", $arrayParametros['fechaHasta']);
                $timeFechaHasta  = strtotime($arrayFechaHasta[2]."-".$arrayFechaHasta[1]."-".$arrayFechaHasta[0]);
                $dateFechaHasta  = strtotime(date("d-m-Y", $timeFechaHasta)." +1 day");
                $dateFechaHasta  = date("Y/m/d", $dateFechaHasta);

                if( $boolByEstados )
                {
                    $strWhere .= "AND iser.feCreacion < :fechaHasta ";
                }
                else
                {
                    $strWhere .= "AND iserh.feCreacion < :fechaHasta ";
                }
                
                $query->setParameter("fechaHasta", trim($dateFechaHasta));
                
                $queryCount->setParameter("fechaHasta", trim($dateFechaHasta));
            }
        }
        
        
        if( isset($arrayParametros['canton']) )
        {
            if($arrayParametros['canton'])
            {
                $strWhere .= "AND ac.nombreCanton = :canton ";
                
                $query->setParameter("canton", $arrayParametros['canton']);
                
                $queryCount->setParameter("canton", $arrayParametros['canton']);
            }
        }
        
        
        if( isset($arrayParametros['empresa']) )
        {
            if($arrayParametros['empresa'])
            {
                $strWhere .= "AND ieg.id = :empresa ";
                
                $query->setParameter("empresa", $arrayParametros['empresa']);
                
                $queryCount->setParameter("empresa", $arrayParametros['empresa']);
            }
        }
        
        
        $strDql      = $strSelect.$strFrom.$strWhere.$strGroupBy;
        $strDqlCount = $strSelectCount.$strFrom.$strWhere;
        
        $query->setDQL($strDql);
        $queryCount->setDQL($strDqlCount);

        if( isset($arrayParametros['inicio']) )
        {
            if($arrayParametros['inicio'])
            {
                $query->setFirstResult($arrayParametros['inicio']);
            }
        }
        
        
        if( isset($arrayParametros['limite']) )
        {
            if($arrayParametros['limite'])
            {
                $query->setMaxResults($arrayParametros['limite']);
            }
        }
            
        
        $arrayResultados['registros'] = $query->getResult();
        $arrayResultados['total']     = $queryCount->getSingleScalarResult();

        return $arrayResultados;
    }
    
    /*
    * genera el json de la data de la fucion getRegistrosFactibilidadNodoCliente que obtiene los elementos y solicitudes
    *
    * @author John Vera 
    * @version 1.0 09-03-2016
    * @param array $arrayParametros [$start, $limit, $idSolicitud, $codEmpresa, $nombreNodo, $idCanton, $userCrea, $estado, $estadoElemento, 
     *                               $modeloElemento, $fechaDesde,  $fechaHasta ]
    * @return json $data[total, encontrados]
    */
    
    public function getJsonFactibilidadNodoCliente($arrayParametros)
    {

        $respuestaSolicitudes = $this->getRegistrosFactibilidadNodoCliente($arrayParametros);

        if($respuestaSolicitudes)
        {
            $data = '{"total":"' . $respuestaSolicitudes['total'] . '","encontrados":' . json_encode($respuestaSolicitudes['registros']) . '}';
        }
        else
        {
            $data = '{"total":"0","encontrados":[]}';
        }
        
        return $data;
    }

    /**
    *
    * getRegistrosFactibilidadNodoCliente
    * obtiene las solicitudes de nodo cliente
    *
    * @author John Vera 
    * @version 1.0 09-03-2016
    * @param array $arrayParametros [$start, $limit, $idSolicitud, $codEmpresa, $nombreNodo, $idCanton, $userCrea, $estado, $estadoElemento, 
    *                               $modeloElemento, $fechaDesde,  $fechaHasta ]
    * @author John Vera 
    * @version 1.1 11-07-2017 Se agrego sentencia porque en desarrollo se cae por inconsistencia de data
    * 
    * @return array $resultadoArray[registros, total]
    */
    
    public function getRegistrosFactibilidadNodoCliente($arrayParametros)
    {
        $rsm = new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null, $rsm);
        $start = $arrayParametros['start'];
        $limit = $arrayParametros['limit'];
        $idSolicitud    = $arrayParametros["idSolicitud"];
        $codEmpresa     = $arrayParametros["codEmpresa"];
        $nombreNodo     = $arrayParametros["nombreNodo"];
        $idCanton       = $arrayParametros["idCanton"];
        $userCrea       = $arrayParametros["userCrea"];
        $estado         = $arrayParametros["estado"];
        $estadoElemento = $arrayParametros["estadoElemento"];
        $modeloElemento = $arrayParametros["modeloElemento"];
        $fechaDesde     = $arrayParametros["search_fechaDesde"];
        $fechaHasta     = $arrayParametros["search_fechaHasta"];
        $arrayJurisdicciones = $arrayParametros["arrayJurisdicciones"];
        $strSearchJurisdiccion = $arrayParametros["search_jurisdiccion"];
        $strJurisdiccion = $arrayParametros["jurisdiccion"];
        $strLimite = $arrayParametros["limite"] === 'true';

        $sql = "SELECT
                E.ID_ELEMENTO,
                DS.ID_DETALLE_SOLICITUD,
                E.NOMBRE_ELEMENTO,
                U.DIRECCION_UBICACION,
                U.LATITUD_UBICACION,
                U.LONGITUD_UBICACION,
                DS.FE_CREACION,
                C.NOMBRE_CANTON,
                C.ID_CANTON,
                DS.USR_CREACION,
                DS.ESTADO,
                ME.NOMBRE_MODELO_ELEMENTO,                 
                E.ESTADO ESTADO_ELEMENTO,
                (SELECT DE.DETALLE_VALOR 
                   FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DE
                  WHERE DE.ELEMENTO_ID = E.ID_ELEMENTO 
                    AND DE.DETALLE_NOMBRE = :detalleAdministra
                    AND DE.ESTADO = :estadoDetalle 
                    AND ROWNUM < 2) ADMINISTRA,
                ( SELECT J.NOMBRE_JURISDICCION
                FROM ADMI_CANTON_JURISDICCION CJ,
                  INFO_OFICINA_GRUPO OG,
                  ADMI_JURISDICCION J
                WHERE CJ.CANTON_ID    = C.ID_CANTON
                AND J.ID_JURISDICCION = CJ.JURISDICCION_ID
                AND J.OFICINA_ID      = OG.ID_OFICINA
                AND OG.EMPRESA_ID     = :codEmpresa
                AND ROWNUM < 2) JURISDICCION,
                (SELECT J.ID_JURISDICCION
                FROM DB_INFRAESTRUCTURA.ADMI_CANTON_JURISDICCION CJ,
                    DB_COMERCIAL.INFO_OFICINA_GRUPO OG,
                    DB_INFRAESTRUCTURA.ADMI_JURISDICCION J
                WHERE CJ.CANTON_ID    = C.ID_CANTON
                AND J.ID_JURISDICCION = CJ.JURISDICCION_ID
                AND J.OFICINA_ID      = OG.ID_OFICINA
                AND OG.EMPRESA_ID     = :codEmpresa
                AND ROWNUM < 2) JURISDICCION_ID
                FROM INFO_DETALLE_SOLICITUD DS,
                INFO_ELEMENTO E,
                INFO_EMPRESA_ELEMENTO_UBICA EE,
                INFO_UBICACION U,
                ADMI_PARROQUIA P,
                ADMI_CANTON C,
                ADMI_MODELO_ELEMENTO ME
                WHERE DS.ELEMENTO_ID = E.ID_ELEMENTO
                AND ME.ID_MODELO_ELEMENTO = E.MODELO_ELEMENTO_ID
                AND E.ID_ELEMENTO = EE.ELEMENTO_ID
                AND EE.UBICACION_ID = U.ID_UBICACION
                AND P.ID_PARROQUIA = U.PARROQUIA_ID
                AND C.ID_CANTON = P.CANTON_ID
                AND EE.EMPRESA_COD = :codEmpresa
                AND DS.TIPO_SOLICITUD_ID = :idSolicitud";
        $query->setParameter("codEmpresa", $codEmpresa);
        $query->setParameter("idSolicitud", $idSolicitud);
        $query->setParameter("detalleAdministra", 'ADMINISTRA');
        $query->setParameter("estadoDetalle", 'Activo');

        if($estado)
        {
            $sql.= " AND DS.ESTADO = :estado ";
            $query->setParameter("estado", $estado);
        }
        if($estadoElemento)
        {
            $sql.= " AND E.ESTADO = :estadoElemento ";
            $query->setParameter("estadoElemento", $estadoElemento);
        }
        if($idCanton)
        {
            $sql.= " AND C.ID_CANTON = :idCanton ";
            $query->setParameter("idCanton", $idCanton);
        }
        if($fechaDesde)
        {
            $sql.= " AND DS.FE_CREACION >= :fechaDesde ";
            $query->setParameter("fechaDesde", $fechaDesde);
        }
        if($fechaHasta)
        {
            $sql.= " AND DS.FE_CREACION <= :fechaHasta ";
            $query->setParameter("fechaHasta", $fechaHasta);
        }
        if($nombreNodo)
        {
            $sql.= " AND UPPER(E.NOMBRE_ELEMENTO) LIKE :nombreNodo ";
            $query->setParameter("nombreNodo", strtoupper('%' . $nombreNodo . '%'));
        }
        if($userCrea)
        {
            $sql.= " AND UPPER(DS.USR_CREACION) LIKE :userCrea ";
            $query->setParameter("userCrea", strtoupper('%' . $userCrea . '%'));
        }
        if($modeloElemento)
        {
            $sql.= " AND E.MODELO_ELEMENTO_ID = :modeloElemento ";
            $query->setParameter("modeloElemento", $modeloElemento);
        } 
        if (is_array($arrayJurisdicciones) && count($arrayJurisdicciones) > 0)
        {
            $sql.=" AND (( SELECT J.ID_JURISDICCION
            FROM DB_INFRAESTRUCTURA.ADMI_CANTON_JURISDICCION CJ,
                DB_COMERCIAL.INFO_OFICINA_GRUPO OG,
                DB_INFRAESTRUCTURA.ADMI_JURISDICCION J
            WHERE CJ.CANTON_ID    = C.ID_CANTON
            AND J.ID_JURISDICCION = CJ.JURISDICCION_ID
            AND J.OFICINA_ID      = OG.ID_OFICINA
            AND OG.EMPRESA_ID     = :codEmpresa
            AND ROWNUM < 2) in (:arrayJurisdiccion) ) ";
            $query->setParameter("arrayJurisdiccion", $arrayJurisdicciones);
        }
        
        if ($strSearchJurisdiccion != "")
        {
            $sql.=" AND ( SELECT J.ID_JURISDICCION
            FROM DB_INFRAESTRUCTURA.ADMI_CANTON_JURISDICCION CJ,
              DB_COMERCIAL.INFO_OFICINA_GRUPO OG,
              DB_INFRAESTRUCTURA.ADMI_JURISDICCION J
            WHERE CJ.CANTON_ID    = C.ID_CANTON
            AND J.ID_JURISDICCION = CJ.JURISDICCION_ID
            AND J.OFICINA_ID      = OG.ID_OFICINA
            AND OG.EMPRESA_ID     = :codEmpresa
            AND ROWNUM < 2) = :idJurisdiccion ";
            $query->setParameter("idJurisdiccion", $strSearchJurisdiccion);
        }

        if ($strJurisdiccion != "")
        {
            $sql.=" AND upper((SELECT J.NOMBRE_JURISDICCION
            FROM DB_INFRAESTRUCTURA.ADMI_CANTON_JURISDICCION CJ,
              DB_COMERCIAL.INFO_OFICINA_GRUPO OG,
              DB_INFRAESTRUCTURA.ADMI_JURISDICCION J
            WHERE CJ.CANTON_ID    = C.ID_CANTON
            AND J.ID_JURISDICCION = CJ.JURISDICCION_ID
            AND J.OFICINA_ID      = OG.ID_OFICINA
            AND OG.EMPRESA_ID     = :codEmpresa
            AND ROWNUM < 2)) like :jurisdiccion ";
            $query->setParameter("jurisdiccion", '%' . strtoupper($strJurisdiccion) . '%');
        }

        $sql.= " ORDER BY DS.FE_CREACION DESC ";
        $rsm->addScalarResult(strtoupper('ID_ELEMENTO'), 'idElemento', 'integer');
        $rsm->addScalarResult(strtoupper('NOMBRE_MODELO_ELEMENTO'), 'modeloElemento', 'string');
        $rsm->addScalarResult(strtoupper('ID_DETALLE_SOLICITUD'), 'idSolicitud', 'integer');
        $rsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');
        $rsm->addScalarResult(strtoupper('DIRECCION_UBICACION'), 'direccion', 'string');
        $rsm->addScalarResult(strtoupper('LATITUD_UBICACION'), 'latitud', 'string');
        $rsm->addScalarResult(strtoupper('LONGITUD_UBICACION'), 'longitud', 'string');
        $rsm->addScalarResult(strtoupper('FE_CREACION'), 'feCreacion', 'string');
        $rsm->addScalarResult(strtoupper('NOMBRE_CANTON'), 'canton', 'string');
        $rsm->addScalarResult(strtoupper('ID_CANTON'), 'idCanton', 'string');
        $rsm->addScalarResult(strtoupper('JURISDICCION_ID'), 'idJurisdiccion', 'integer');
        $rsm->addScalarResult(strtoupper('JURISDICCION'), 'jurisdiccion', 'string');
        $rsm->addScalarResult(strtoupper('USR_CREACION'), 'usrCreacion', 'string');
        $rsm->addScalarResult(strtoupper('ESTADO'), 'estado', 'string');
        $rsm->addScalarResult(strtoupper('ESTADO_ELEMENTO'), 'estadoElemento', 'string');
        $rsm->addScalarResult(strtoupper('ADMINISTRA'), 'administra', 'string');

        $query->setSQL($sql);

        $solicitudes = $query->getResult();
        $totalSolicitudes = count($solicitudes);

        if ($strLimite)
        {

            $encontrados = array_slice($solicitudes, $start, $limit);
        }else
        {
            $encontrados = $solicitudes;
        }

        $solicitudesArray = array();
        if($encontrados)
        {
            foreach($encontrados as $registro)
            {
                $solicitudesArray[] = array(
                    'idElemento'    => $registro['idElemento'],
                    'idSolicitud'   => $registro['idSolicitud'],
                    'nombreElemento'=> $registro['nombreElemento'],
                    'direccion'     => $registro['direccion'],
                    'latitud'       => $registro['latitud'],
                    'longitud'      => $registro['longitud'],
                    'feCreacion'    => $registro['feCreacion'],
                    'canton'        => $registro['canton'],
                    'idCanton'      => $registro['idCanton'],
                    'id_jurisdiccion'=>$registro['idJurisdiccion'],
                    'jurisdiccion'  => $registro['jurisdiccion'],
                    'estado'        => $registro['estado'],
                    'estadoElemento'=> $registro['estadoElemento'],
                    'modeloElemento'=> $registro['modeloElemento'],
                    'administra'    => $registro['administra'],
                    'usrCreacion'   => $registro['usrCreacion']);
            }
        }

        $resultadoArray['registros'] = $solicitudesArray;
        $resultadoArray['total'] = $totalSolicitudes;
        return $resultadoArray;
    }


     /*
     * cerrarTareasPorSolicitud
     *
     * Método que realiza el cierre de las tareas generadas en base a una solicitud                        
     *      
     * @param array $arrayParametros  [ 'intIdDetalleSolicitud','proceso' ]
     * 
     * @return array $arrayResultados [ 'strMensajeRespuesta' ]
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 15-02-2016
     */
    public function cerrarTareasPorSolicitud($arrayParametros)
    {
        $pv_mensajeerror = str_repeat(' ', 2000);
        $sql = "BEGIN INFRK_TRANSACCIONES.INFRP_CIERRA_TAREAS_SOLICITUD(:idDetalleSolicitud, :proceso, :mensajeSalidaParam); END;";
        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->bindParam('idDetalleSolicitud' , $arrayParametros['intIdDetalleSolicitud']);
        $stmt->bindParam('proceso'            , $arrayParametros['strProceso']);
        $stmt->bindParam('mensajeSalidaParam' , $pv_mensajeerror);
        $stmt->execute();
        if (strlen(trim($pv_mensajeerror)) > 0)
        {
            $mensajeResponse = $pv_mensajeerror;
        }
        else
        {
            $mensajeResponse = 'OK';
        }
        if ($mensajeResponse != 'OK')
        {
            error_log("Error: Se intento procesar la solicitud -> ".$arrayParametros['intIdDetalleSolicitud'] . 
                      " - Se obtuvo el siguiente mensaje de error ->" . $mensajeResponse);
        }
        return $mensajeResponse;
    }
    
    /********************************************************************/
    /*************************Asignacion Operativa**********************/
    /********************************************************************/
    
    
    /**
     * getJSONHistorialAsignacionProvisionalXElemento, Devuelve el json de las asignaciones provisionales que se han realizado
     * a determinado vehículo
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 
     * 
     * @param array $arrayParametros[  'intStart'                      => Inicio del rownum,
     *                                  'intLimit'                      => Fin del rownum,
     *                                  'idElemento'                    => id del vehículo a consultar,
     *                                  'idTipoSolicitud'               => id del tipo de solicitud,
     *                                  'strFechaDesde'                 => fecha desde a consultar,
     *                                  'strFechaHasta'                 => fecha hasta a consultar,
     *                                  'errorFechas'                   => Indica si existe un error o no en el rango de fechas a buscar
     *                               ]
     * 
     * @return $jsonData
     */
    public function getJSONHistorialAsignacionProvisionalXElemento($arrayParametros)
    {
        
        $arrayEncontrados   = array();
        if($arrayParametros['errorFechas'])
        {
            $total              = 0;
        }
        else
        {
            $arrayResultado     = $this->getResultadoHistorialAsignacionProvisionalChofer($arrayParametros);
            $resultado          = $arrayResultado['resultado'];
            $intTotal           = $arrayResultado['total'];
            $total              = 0;

            if($resultado)
            {
                $total = $intTotal;
                foreach($resultado as $data)
                {
                    $strFechaInicio = "";
                    $strFechaFin    = "";
                    $strHoraInicio  = "";
                    $strHoraFin     = "";
                    
                    if($data["feIniPlan"] && $data["feFinPlan"])
                    {
                        $strFechaHoraInicio = $data["feIniPlan"]->format('d/m/Y H:i');
                        $strFechaHoraFin    = $data["feFinPlan"]->format('d/m/Y H:i');
                        list($strFechaInicio,$strHoraInicio)    = explode(" ",$strFechaHoraInicio);
                        list($strFechaFin,$strHoraFin)          = explode(" ",$strFechaHoraFin);
                    }
                    
                    $arrayItem = array();

                    $arrayItem['strFechaInicioAsignacionProvisionalHisto']  = $strFechaInicio;
                    $arrayItem['strFechaFinAsignacionProvisionalHisto']     = $strFechaFin;
                    $arrayItem['strHoraInicioAsignacionProvisionalHisto']   = $strHoraInicio;
                    $arrayItem['strHoraFinAsignacionProvisionalHisto']      = $strHoraFin;


                    $arrayItem['strMotivoProvisionalHisto']                      = $data["nombreMotivo"] ? $data["nombreMotivo"] : '';
                    $arrayItem['strObservacionProvisionalHisto']                 = $data["observacion"] ? $data["observacion"] : '';
                    $estadoProvisional='';
                    
                    if($data["estado"]=='Pendiente')
                    {
                        $estadoProvisional = 'Activo';
                    }
                    else if ($data["estado"]=='Finalizado') 
                    {
                        $estadoProvisional = 'Eliminado';
                    }
                    $arrayItem['strEstadoProvisionalHisto']                      = $estadoProvisional;


                    $arrayItem['strTipoAsignacionProvisionalHisto']  = $data["tipoAsignado"];


                    if($data["tipoAsignado"]=="CUADRILLA")
                    {
                        $arrayItem['idCuadrillaProvisionalHisto']                    = $data["asignadoId"];
                        $arrayItem['nombreCuadrillaProvisionalHisto']                = $data["asignadoNombre"];
                    }
                    else
                    {
                        $arrayItem['idCuadrillaProvisionalHisto']                    = '';
                        $arrayItem['nombreCuadrillaProvisionalHisto']                = 'N/A';
                    }


                    $arrayItem['personaIdChoferProvisionalHisto']               = $data["idPersonaChoferProvisional"] 
                                                                                    ? $data["idPersonaChoferProvisional"] : '';
                    
                    
                    $arrayItem['strNombresChoferProvisionalHisto']      = $data["nombres"] ? $data["nombres"]: '' ;
                    $arrayItem['strApellidosChoferProvisionalHisto']    = $data["apellidos"] ? $data["apellidos"]: '' ;
                    $arrayItem['strIdentificacionChoferProvisionalHisto']    = $data["identificacionCliente"] ? $data["identificacionCliente"]: '' ;
                    
                    
                    $arrayItem['personaEmpresaRolIdChoferProvisionalHisto']     = $data["idPerChoferProvisional"] ? $data["idPerChoferProvisional"] : '';

                    $arrayEncontrados[] = $arrayItem;

                }

            }
        }
        $arrayRespuesta = array('total' => $total, 'encontrados' => $arrayEncontrados);
        $jsonData       = json_encode($arrayRespuesta);
        return $jsonData;
    }
    
     /**
     * Funcion que retorna las tareas por Login de con solicitud de AGREGAR EQUIPO
     *  
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.0
     *
     * @return Array $arrayResultado
     * 
     */
    public function buscarTareasPorLogin($arrayParametros)
    {
        $strWhere             = '';
        $strSelect            = '';
        $boolMostrarAsignados = false;
        $boolMostrarTareasAbiertas = false;
        try
        {
            $objRsm   = new ResultSetMappingBuilder($this->_em);
            $objQuery = $this->_em->createNativeQuery(null, $objRsm);
            
            if (isset($arrayParametros['strVerTareasValidas']) && 
                !empty($arrayParametros['strVerTareasValidas']) && 
                $arrayParametros['strVerTareasValidas'] == 'S')
                {
                    $boolMostrarTareasAbiertas = true;
                }
            if (isset($arrayParametros['strMostrarAsignado']) && 
                !empty($arrayParametros['strMostrarAsignado']) && 
                $arrayParametros['strMostrarAsignado'] == 'S')
                {
                    $boolMostrarAsignados = true;
                }
            if (isset($arrayParametros['strLogin']) && !empty($arrayParametros['strLogin']))
            {
                $strWhere .= "AND LOWER(IPUN.LOGIN) = LOWER(:strLogin) "; 
                $objQuery->setParameter("strLogin", $arrayParametros['strLogin']);
            }
            if (isset($arrayParametros['strEstado']) && !empty($arrayParametros['strEstado']))
            {
                $strWhere .= "AND LOWER(IDHI.ESTADO) = LOWER(:strEstado) ";
                $objQuery->setParameter("strEstado", $arrayParametros['strEstado']);
            }
            else
            {
                if($boolMostrarTareasAbiertas)
                {
                    $strWhere .= "AND IDHI.ESTADO NOT IN (:strEstadoFinalizado,:strEstadoCancelada,:strEstadoRechazada) ";
                    $objQuery->setParameter("strEstadoFinalizado", 'Finalizada');
                    $objQuery->setParameter("strEstadoCancelada",  'Cancelada');
                    $objQuery->setParameter("strEstadoRechazada",  'Rechazada');
                }
            }
            if (isset($arrayParametros['strFechaIni']) && !empty($arrayParametros['strFechaIni']))
            {
                $strWhere .= "AND TO_CHAR(IDET.FE_CREACION,'RRRR-MM-DD') >= :strFechaIni ";
                $objQuery->setParameter("strFechaIni", $arrayParametros['strFechaIni']);
            }
            if (isset($arrayParametros['strFechaFin']) && !empty($arrayParametros['strFechaFin']))
            {
                $strWhere .= "AND TO_CHAR(IDET.FE_CREACION,'RRRR-MM-DD') <= :strFechaFin ";
                $objQuery->setParameter("strFechaFin", $arrayParametros['strFechaFin']);
            }
            if($boolMostrarAsignados)
            {
                $strSelect = ",(SELECT ASIGNADO_NOMBRE FROM DB_SOPORTE.INFO_DETALLE_ASIGNACION WHERE DETALLE_ID = IDET.ID_DETALLE
                                and id_detalle_asignacion = (SELECT max(id_detalle_asignacion) 
                                FROM DB_SOPORTE.INFO_DETALLE_ASIGNACION WHERE DETALLE_ID = IDET.ID_DETALLE)) DEPARTAMENTO,
                                (SELECT REF_ASIGNADO_NOMBRE FROM DB_SOPORTE.INFO_DETALLE_ASIGNACION WHERE DETALLE_ID = IDET.ID_DETALLE
                                and id_detalle_asignacion = (SELECT max(id_detalle_asignacion) 
                                FROM DB_SOPORTE.INFO_DETALLE_ASIGNACION WHERE DETALLE_ID = IDET.ID_DETALLE)) EMPLEADO,
                                IDET.OBSERVACION ";
            }
                $strSql = "SELECT NVL(IPER.RAZON_SOCIAL,IPER.APELLIDOS||' '||IPER.NOMBRES) AS RAZONSOCIAL, ".
                             "IPUN.LOGIN            AS LOGIN, ".
                             "ICOM.ID_COMUNICACION  AS NUMEROTAREA, ".
                             "IDET.ID_DETALLE, ".
                             "IDET.DETALLE_SOLICITUD_ID, ".
                             "ATAR.NOMBRE_TAREA     AS NOMBRETAREA, ".
                             "APRO.NOMBRE_PROCESO   AS NOMBREPROCESO, ".
                             "TO_CHAR(IDET.FE_CREACION,'RRRR-MM-DD HH24:MI') AS FECHACREACION, ".
                             "TO_CHAR(IDHI.FE_CREACION,'RRRR-MM-DD HH24:MI') AS FECHAESTADO, ".
                             "IDHI.ESTADO AS ESTADO, ".
                             "CAST((CAST(IDHI.FE_CREACION AS DATE) - ".
                                   "CAST(IDET.FE_CREACION AS DATE))*24*60 ".
                             "AS INTEGER) AS TIEMPOMINUTOS, ".
                             "NVL(UPPER(IDET.ES_SOLUCION),'N') AS ESSOLUCION ".
                             $strSelect.
                       "FROM DB_SOPORTE.INFO_DETALLE               IDET, ".
                            "DB_SOPORTE.INFO_DETALLE_HISTORIAL     IDHI, ".
                            "DB_COMUNICACION.INFO_COMUNICACION     ICOM, ".
                            "DB_SOPORTE.INFO_PARTE_AFECTADA        IPAF, ".
                            "DB_SOPORTE.ADMI_TAREA                 ATAR, ".
                            "DB_SOPORTE.ADMI_PROCESO               APRO, ".
                            "DB_COMERCIAL.INFO_PUNTO               IPUN, ".
                            "DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPERO, ".
                            "DB_COMERCIAL.INFO_PERSONA             IPER ".
                       "WHERE IDET.ID_DETALLE           = IDHI.DETALLE_ID ".
                         "AND IDET.ID_DETALLE           = ICOM.DETALLE_ID ".
                         "AND IDET.ID_DETALLE           = IPAF.DETALLE_ID ".
                         "AND IDET.TAREA_ID             = ATAR.ID_TAREA ".
                         "AND ATAR.PROCESO_ID           = APRO.ID_PROCESO ".
                         "AND IPUN.ID_PUNTO             = IPAF.AFECTADO_ID ".
                         "AND NOMBRE_PROCESO            = :strnombreSolicitud ".
                         "AND IPERO.ID_PERSONA_ROL      = IPUN.PERSONA_EMPRESA_ROL_ID ".
                         "AND IPERO.PERSONA_ID          = IPER.ID_PERSONA ".
                         "AND ICOM.ID_COMUNICACION      = ".
                               "(SELECT MIN(ICOMMIN.ID_COMUNICACION) ".
                                   "FROM DB_COMUNICACION.INFO_COMUNICACION ICOMMIN ".
                                "WHERE ICOMMIN.DETALLE_ID = IDET.ID_DETALLE) ".
                         "AND IDHI.ID_DETALLE_HISTORIAL = ".
                               "(SELECT MAX(MAXIDHIS.ID_DETALLE_HISTORIAL) ".
                                   "FROM DB_SOPORTE.INFO_DETALLE_HISTORIAL MAXIDHIS ".
                                "WHERE MAXIDHIS.DETALLE_ID = IDET.ID_DETALLE) ".
                         "AND LOWER(IPAF.TIPO_AFECTADO) = LOWER(:strTipoAfectado) ".
                         "$strWhere".
                       "ORDER BY IDET.FE_CREACION ASC";
            $objQuery->setParameter('strTipoAfectado' , 'cliente');
            $objQuery->setParameter('strnombreSolicitud' , 'SOLICITUD AGREGAR EQUIPO');
            $objRsm->addScalarResult('RAZONSOCIAL'   , 'razonSocial'   , 'string');
            $objRsm->addScalarResult('LOGIN'         , 'login'         , 'string');
            $objRsm->addScalarResult('ID_DETALLE'    , 'id_detalle'    , 'string');
            $objRsm->addScalarResult('DETALLE_SOLICITUD_ID', 'detalle_solicitud_id','string');
            $objRsm->addScalarResult('NUMEROTAREA'   , 'numeroTarea'   , 'integer');
            $objRsm->addScalarResult('NOMBRETAREA'   , 'nombreTarea'   , 'string');
            $objRsm->addScalarResult('NOMBREPROCESO' , 'nombreProceso' , 'string');
            $objRsm->addScalarResult('FECHACREACION' , 'fechaCreacion' , 'string');
            $objRsm->addScalarResult('FECHAESTADO'   , 'fechaEstado'   , 'string');
            $objRsm->addScalarResult('ESTADO'        , 'estado'        , 'string');
            $objRsm->addScalarResult('TIEMPOMINUTOS' , 'tiempoMinutos' , 'integer');
            $objRsm->addScalarResult('ESSOLUCION'    , 'esSolucion'    , 'string');
            $objRsm->addScalarResult('ESSOLUCION'    , 'esSolucion'    , 'string');
            if($boolMostrarAsignados)
            {
                $objRsm->addScalarResult('DEPARTAMENTO'    , 'nombreDepartamento' , 'string');
                $objRsm->addScalarResult('EMPLEADO'        , 'empleado'           , 'string');
                $objRsm->addScalarResult('OBSERVACION'     , 'observacion'        , 'string');
            }
            
            $objQuery->setSQL($strSql);
            $arrayResult = $objQuery->getArrayResult();
            $intTotal    = count($arrayResult);
            if (empty($arrayResult) || $intTotal < 1)
            {
                $arrayResultado = array('status' => 'fail');
            }
            $arrayResultado = array('status' => 'ok',
                                    'total'  => $intTotal,
                                    'result' => $arrayResult);
        }
        catch(\Exception $objException)
        {
            $arrayResultado = array('status'  => 'fail',
                                    'message' => $objException->getMessage());
        }
        return $arrayResultado;
    }
    
    /**
     * getResultadoHistorialAsignacionProvisionalChofer, Consulta las asignaciones provisionales de chofer que se han realizado
     * a determinado vehículo
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 
     * 
     * @param  array $arrayParametros[  'intStart'                      => Inicio del rownum,
     *                                  'intLimit'                      => Fin del rownum,
     *                                  'idElemento'                    => id del vehículo a consultar,
     *                                  'idTipoSolicitud'               => id del tipo de solicitud,
     *                                  'strFechaDesde'                 => fecha desde a consultar,
     *                                  'strFechaHasta'                 => fecha hasta a consultar,
     *                                  'errorFechas'                   => Indica si existe un error o no en el rango de fechas a buscar
     *                               ]
     * 
     * @return $arrayRespuesta ['resultado','total']
     */ 
    public function getResultadoHistorialAsignacionProvisionalChofer($arrayParametros)
    {
        $arrayRespuesta['total']     = 0;
        $arrayRespuesta['resultado'] = "";
        try
        {
            $rsm = new ResultSetMappingBuilder($this->_em);
            $rsmCount = new ResultSetMappingBuilder($this->_em);
            $query = $this->_em->createNativeQuery(null, $rsm);
            $queryCount = $this->_em->createNativeQuery(null, $rsmCount);
            
            
            $strSelectCount     = "SELECT COUNT(*) AS TOTAL ";
            $strSelect          = " SELECT sol.ID_DETALLE_SOLICITUD,
                                    solHist.FE_INI_PLAN, solHist.FE_FIN_PLAN,
                                    ( COALESCE(TO_CHAR(solHist.FE_INI_PLAN,'DD/MM/YYYY'),'') || ' al ' 
                                    || COALESCE(TO_CHAR(solHist.FE_FIN_PLAN,'DD/MM/YYYY'),'') 
                                    || ' De ' || COALESCE(TO_CHAR(solHist.FE_INI_PLAN,'HH24:MI'),'') 
                                    || ' a ' || COALESCE(TO_CHAR(solHist.FE_FIN_PLAN,'HH24:MI'),'') ) AS FECHA_HORA_PROV,
                                    sol.MOTIVO_ID,m.NOMBRE_MOTIVO,sol.OBSERVACION,sol.ESTADO, 
                                    detAsignacion.TIPO_ASIGNADO, detAsignacion.ASIGNADO_ID, detAsignacion.ASIGNADO_NOMBRE, 
                                    detAsignacion.REF_ASIGNADO_ID, detAsignacion.REF_ASIGNADO_NOMBRE,
                                    detAsignacion.PERSONA_EMPRESA_ROL_ID, sol.ELEMENTO_ID,
                                    per.ID_PERSONA_ROL, p.ID_PERSONA, p.NOMBRES, p.APELLIDOS, p.IDENTIFICACION_CLIENTE,
                                    ie.NOMBRE_ELEMENTO,
                                    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleDISCO,ie.ID_ELEMENTO,:estadoActivo)
                                    AS DISCO,
                                    ame.NOMBRE_MODELO_ELEMENTO,
                                    detalleSolCaractDep.VALOR as ID_DEPARTAMENTO,
                                    departamento.NOMBRE_DEPARTAMENTO,
                                    detalleSolCaractZona.VALOR as ID_ZONA, 
                                    zona.NOMBRE_ZONA,
                                    (departamento.NOMBRE_DEPARTAMENTO || ' / ' || zona.NOMBRE_ZONA) AS DEPARTAMENTO_ZONA,
                                    detalleAsignacionPredProv.REF_ASIGNADO_NOMBRE AS CHOFER_PREDEFINIDO ";
            
            $strFromAndWhere    = " FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD sol
                                    INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOL_HIST solHist 
                                        ON sol.ID_DETALLE_SOLICITUD=solHist.DETALLE_SOLICITUD_ID  
                                    INNER JOIN DB_COMERCIAL.INFO_DETALLE det ON sol.ID_DETALLE_SOLICITUD=det.DETALLE_SOLICITUD_ID 
                                    
                                    INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT detalleSolCaractDep
                                        ON detalleSolCaractDep.DETALLE_SOLICITUD_ID = sol.ID_DETALLE_SOLICITUD 
                                        
                                    INNER JOIN DB_GENERAL.ADMI_DEPARTAMENTO departamento
                                        ON departamento.ID_DEPARTAMENTO = detalleSolCaractDep.VALOR 
                                    		
                                    INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT detalleSolCaractZona
                                        ON detalleSolCaractZona.DETALLE_SOLICITUD_ID = sol.ID_DETALLE_SOLICITUD
                                            AND detalleSolCaractZona.CARACTERISTICA_ID = :idCaractZonaAPChofer 
                                    
                                    INNER JOIN DB_GENERAL.ADMI_ZONA zona
                                        ON zona.ID_ZONA = detalleSolCaractZona.VALOR
                                    
                                    INNER JOIN DB_SOPORTE.INFO_DETALLE_ASIGNACION detAsignacion 
                                        ON det.ID_DETALLE=detAsignacion.DETALLE_ID 
                                    INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL per 
                                        ON per.ID_PERSONA_ROL=detAsignacion.PERSONA_EMPRESA_ROL_ID
                                    INNER JOIN DB_COMERCIAL.INFO_PERSONA p ON per.PERSONA_ID = p.ID_PERSONA 
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ie ON ie.ID_ELEMENTO = sol.ELEMENTO_ID 
                                    LEFT JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO detSolAsignacionProv
                                        ON detSolAsignacionProv.DETALLE_NOMBRE = :strDetalleSolProv 
                                        AND sol.ID_DETALLE_SOLICITUD = detSolAsignacionProv.DETALLE_VALOR
                                        
                                    LEFT JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO detSolAsignacionPredProv
                                        ON detSolAsignacionProv.REF_DETALLE_ELEMENTO_ID = detSolAsignacionPredProv.REF_DETALLE_ELEMENTO_ID
                                        AND detSolAsignacionPredProv.DETALLE_NOMBRE = :strDetalleSolPredProv 
                                        
                                    LEFT JOIN DB_COMERCIAL.INFO_DETALLE_SOLICITUD solicitudAsignacionPredProv
                                        ON detSolAsignacionPredProv.DETALLE_VALOR = solicitudAsignacionPredProv.ID_DETALLE_SOLICITUD
                                        
                                    LEFT JOIN DB_SOPORTE.INFO_DETALLE detallePredProv 
                                        ON detallePredProv.DETALLE_SOLICITUD_ID=solicitudAsignacionPredProv.ID_DETALLE_SOLICITUD 

                                    LEFT JOIN DB_SOPORTE.INFO_DETALLE_ASIGNACION detalleAsignacionPredProv
                                        ON detalleAsignacionPredProv.DETALLE_ID=detallePredProv.ID_DETALLE 
                                        
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO ame ON ie.MODELO_ELEMENTO_ID = ame.ID_MODELO_ELEMENTO 
                                   
                                    LEFT JOIN DB_GENERAL.ADMI_MOTIVO m ON m.ID_MOTIVO=sol.MOTIVO_ID
                                    WHERE sol.TIPO_SOLICITUD_ID=:idTipoSolicitud
                                        AND solHist.ID_SOLICITUD_HISTORIAL=
                                        (
                                            SELECT MAX(solHistorialMax.ID_SOLICITUD_HISTORIAL) 
                                            FROM DB_COMERCIAL.INFO_DETALLE_SOL_HIST solHistorialMax
                                            WHERE solHistorialMax.DETALLE_SOLICITUD_ID=solHist.DETALLE_SOLICITUD_ID
                                        ) 
                                        AND detalleSolCaractDep.CARACTERISTICA_ID = :idCaractDepartamentoAPChofer ";
            
            $strOrderBy         = " ORDER BY sol.ID_DETALLE_SOLICITUD DESC ";
            
            
            
            $rsm->addScalarResult('ID_DETALLE_SOLICITUD', 'idDetalleSolicitud', 'integer');
            $rsm->addScalarResult('FE_INI_PLAN', 'feIniPlan', 'datetime');
            $rsm->addScalarResult('FE_FIN_PLAN', 'feFinPlan', 'datetime');
            $rsm->addScalarResult('FECHA_HORA_PROV', 'fechaHoraProv', 'string');
            $rsm->addScalarResult('MOTIVO_ID', 'idMotivo', 'integer');
            $rsm->addScalarResult('NOMBRE_MOTIVO', 'nombreMotivo', 'string');
            $rsm->addScalarResult('OBSERVACION', 'observacion', 'string');
            $rsm->addScalarResult('ESTADO', 'estado', 'string');
            $rsm->addScalarResult('TIPO_ASIGNADO', 'tipoAsignado', 'string');
            $rsm->addScalarResult('ASIGNADO_ID', 'asignadoId', 'string');
            $rsm->addScalarResult('ASIGNADO_NOMBRE', 'asignadoNombre', 'string');
            $rsm->addScalarResult('REF_ASIGNADO_ID', 'refAsignadoId', 'string');
            $rsm->addScalarResult('REF_ASIGNADO_NOMBRE', 'refAsignadoNombre', 'string');
            $rsm->addScalarResult('PERSONA_EMPRESA_ROL_ID', 'personaEmpresaRolId', 'integer');
            $rsm->addScalarResult('ELEMENTO_ID', 'elementoId', 'integer');
            $rsm->addScalarResult('ID_PERSONA_ROL', 'idPerChoferProvisional', 'integer');
            $rsm->addScalarResult('ID_PERSONA', 'idPersonaChoferProvisional', 'integer');
            $rsm->addScalarResult('NOMBRES', 'nombres', 'string');
            $rsm->addScalarResult('APELLIDOS', 'apellidos', 'string');
            $rsm->addScalarResult('IDENTIFICACION_CLIENTE', 'identificacionCliente', 'string');
            $rsm->addScalarResult('NOMBRE_ELEMENTO', 'nombreElemento', 'string');
            $rsm->addScalarResult('DISCO', 'disco', 'string');
            $rsm->addScalarResult('NOMBRE_MODELO_ELEMENTO', 'nombreModeloElemento', 'string');
            $rsm->addScalarResult('ID_DEPARTAMENTO', 'idDepartamentoChoferProvisional', 'integer');
            $rsm->addScalarResult('NOMBRE_DEPARTAMENTO', 'nombreDepartamento', 'string');
            $rsm->addScalarResult('ID_ZONA', 'idZonaChoferProvisional', 'integer');
            $rsm->addScalarResult('NOMBRE_ZONA', 'nombreZona', 'string');
            $rsm->addScalarResult('DEPARTAMENTO_ZONA', 'departamentoZona', 'string');
            $rsm->addScalarResult('CHOFER_PREDEFINIDO', 'choferPredefinido', 'string');
            
            $rsmCount->addScalarResult('TOTAL', 'total', 'integer');

            
            if( isset($arrayParametros["idElemento"]) )
            {
                if($arrayParametros["idElemento"])
                {
                    $strFromAndWhere.=" AND sol.ELEMENTO_ID = :idElemento ";
                    $query->setParameter('idElemento', $arrayParametros['idElemento']);
                    $queryCount->setParameter('idElemento', $arrayParametros['idElemento']);
                }
            }
            
            if(isset($arrayParametros["strFechaDesde"]) && isset($arrayParametros["strFechaHasta"]) )
            {
                if($arrayParametros["strFechaDesde"] && $arrayParametros["strFechaHasta"])
                {
                    $dateFechaDesde = explode("/", $arrayParametros["strFechaDesde"]);
                    $feDesde = date("Y/m/d", strtotime($dateFechaDesde[2] . "-" . $dateFechaDesde[1] . "-" . $dateFechaDesde[0]));

                    $dateFechaHasta = explode("/", $arrayParametros["strFechaHasta"]);
                    $fechaSqlHasta  = strtotime(date("Y/m/d", strtotime($dateFechaHasta[2] . "-" . $dateFechaHasta[1] . "-" 
                                                                        . $dateFechaHasta[0])) . " +1 day");
                    $feHasta = date("Y/m/d", $fechaSqlHasta);

                    $strFromAndWhere.=
                    " AND 
                        (
                            ( TO_CHAR(solHist.FE_FIN_PLAN,'YYYY/MM/DD') >= :strFechaDesde 
                                AND TO_CHAR(solHist.FE_FIN_PLAN, 'YYYY/MM/DD') <= :strFechaHasta )
                            OR
                            ( TO_CHAR(solHist.FE_INI_PLAN,'YYYY/MM/DD') <= :strFechaHasta 
                                AND TO_CHAR(solHist.FE_INI_PLAN,'YYYY/MM/DD') >= :strFechaDesde )
                            OR
                            (TO_CHAR(solHist.FE_INI_PLAN,'YYYY/MM/DD') <= :strFechaDesde 
                                AND TO_CHAR(solHist.FE_FIN_PLAN,'YYYY/MM/DD') >= :strFechaHasta)
                        ) ";
                    
                    $query->setParameter('strFechaDesde', $feDesde);
                    $queryCount->setParameter('strFechaDesde', $feDesde);
                    
                    $query->setParameter('strFechaHasta', $feHasta);
                    $queryCount->setParameter('strFechaHasta', $feHasta);
                }
            }
            
            if( isset($arrayParametros["strEstadoAsignacion"]) )
            {
                if($arrayParametros["strEstadoAsignacion"])
                {
                    $strFromAndWhere.=" AND sol.ESTADO = :strEstadoAsignacion ";
                    $query->setParameter('strEstadoAsignacion', $arrayParametros["strEstadoAsignacion"]);
                    $queryCount->setParameter('strEstadoAsignacion', $arrayParametros["strEstadoAsignacion"]);
                }
            }
            
            if( isset($arrayParametros["criterios_busqueda"]) )
            {
                if($arrayParametros["criterios_busqueda"])
                {
                    if( isset($arrayParametros["criterios_busqueda"]["strNombresChoferAP"]) )
                    {
                        if($arrayParametros["criterios_busqueda"]["strNombresChoferAP"])
                        {
                            $strFromAndWhere.=" AND p.NOMBRES like :nombresChoferAP ";
                            $query->setParameter('nombresChoferAP', "%".strtoupper($arrayParametros["criterios_busqueda"]['strNombresChoferAP'])."%");
                            $queryCount->setParameter('nombresChoferAP', "%".strtoupper($arrayParametros["criterios_busqueda"]['strNombresChoferAP'])."%");
                        }
                    }
                    
                    if( isset($arrayParametros["criterios_busqueda"]["strApellidosChoferAP"]) )
                    {
                        if($arrayParametros["criterios_busqueda"]["strApellidosChoferAP"])
                        {
                            $strFromAndWhere.=" AND p.APELLIDOS like :apellidosChoferAP ";
                            $query->setParameter('apellidosChoferAP', "%".strtoupper($arrayParametros["criterios_busqueda"]['strApellidosChoferAP'])."%");
                            $queryCount->setParameter('apellidosChoferAP', "%".strtoupper($arrayParametros["criterios_busqueda"]['strApellidosChoferAP'])."%");
                        }
                    }
                    
                    
                    if( isset($arrayParametros["criterios_busqueda"]["strIdentificacionChoferAP"]) )
                    {
                        if($arrayParametros["criterios_busqueda"]["strIdentificacionChoferAP"])
                        {
                            $strFromAndWhere.=" AND p.IDENTIFICACION_CLIENTE = :identificacionChoferAP ";
                            $query->setParameter('identificacionChoferAP', $arrayParametros["criterios_busqueda"]['strIdentificacionChoferAP']);
                            $queryCount->setParameter('identificacionChoferAP', $arrayParametros["criterios_busqueda"]['strIdentificacionChoferAP']);
                        }
                    }
                    
                    
                    if( isset($arrayParametros["criterios_busqueda"]["placa"]) )
                    {
                        if($arrayParametros["criterios_busqueda"]["placa"])
                        {
                            $strFromAndWhere.=" AND ie.NOMBRE_ELEMENTO = :placa ";
                            $query->setParameter('placa', $arrayParametros["criterios_busqueda"]['placa']);
                            $queryCount->setParameter('placa', $arrayParametros["criterios_busqueda"]['placa']);
                        }
                    }
                    
                    
                    if( isset($arrayParametros["criterios_busqueda"]["disco"]) )
                    {
                        if($arrayParametros["criterios_busqueda"]["disco"])
                        {
                            
                            $strFromAndWhere.=" AND ie.ID_ELEMENTO IN (
                                                                SELECT ide.ELEMENTO_ID 
                                                                FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO ide
                                                                WHERE ide.DETALLE_NOMBRE = :nombreDetalleDISCO 
                                                                AND ide.DETALLE_VALOR = :valorDisco 
                                                                AND ide.ESTADO = :estadoActivo ) ";
                            $query->setParameter('nombreDetalleDISCO', 'DISCO');
                            $queryCount->setParameter('nombreDetalleDISCO', 'DISCO');
                            
                            $query->setParameter('valorDisco', $arrayParametros["criterios_busqueda"]['disco']);
                            $queryCount->setParameter('valorDisco', $arrayParametros["criterios_busqueda"]['disco']);
                            
                            $query->setParameter('estadoActivo', 'Activo');
                            $queryCount->setParameter('estadoActivo', 'Activo');
                        }
                    }
                    
                }
            }
            
            $query->setParameter('idTipoSolicitud', $arrayParametros['idTipoSolicitud']);
            $queryCount->setParameter('idTipoSolicitud', $arrayParametros['idTipoSolicitud']);
            
            $query->setParameter('idCaractDepartamentoAPChofer', $arrayParametros['idCaractDepartamentoAPChofer']);
            $queryCount->setParameter('idCaractDepartamentoAPChofer', $arrayParametros['idCaractDepartamentoAPChofer']);
            
            $query->setParameter('idCaractZonaAPChofer', $arrayParametros['idCaractZonaAPChofer']);
            $queryCount->setParameter('idCaractZonaAPChofer', $arrayParametros['idCaractZonaAPChofer']);
            
            $query->setParameter('idCaractTareaAPChofer', $arrayParametros['idCaractTareaAPChofer']);
            $queryCount->setParameter('idCaractTareaAPChofer', $arrayParametros['idCaractTareaAPChofer']);
            
            $query->setParameter('strDetalleDISCO', 'DISCO');
            $queryCount->setParameter('strDetalleDISCO', 'DISCO');
            
            $query->setParameter('estadoActivo', 'Activo');
            $queryCount->setParameter('estadoActivo', 'Activo');
            
            $query->setParameter('strDetalleSolProv', $arrayParametros['strDetalleSolProv']);
            $queryCount->setParameter('strDetalleSolProv', $arrayParametros['strDetalleSolProv']);
            
            $query->setParameter('strDetalleSolPredProv', $arrayParametros['strDetalleSolPredProv']);
            $queryCount->setParameter('strDetalleSolPredProv', $arrayParametros['strDetalleSolPredProv']);
            $strSqlPrincipal = $strSelect.$strFromAndWhere.$strOrderBy;
            
            $strSqlFinal = '';

            if(isset($arrayParametros['intStart']) && isset($arrayParametros['intLimit']))
            {
                if($arrayParametros['intStart'] && $arrayParametros['intLimit'])
                {
                    $intInicio = $arrayParametros['intStart'];
                    $intFin = $arrayParametros['intStart'] + $arrayParametros['intLimit'];
                    $strSqlFinal = '  SELECT * FROM 
                                        (
                                            SELECT consultaPrincipal.*,rownum AS consultaPrincipal_rownum 
                                            FROM (' . $strSqlPrincipal . ') consultaPrincipal 
                                            WHERE rownum<=' . $intFin . '
                                        ) WHERE consultaPrincipal_rownum >' . $intInicio;
                }
                else
                {
                    $strSqlFinal = '  SELECT consultaPrincipal.* 
                                        FROM (' . $strSqlPrincipal . ') consultaPrincipal 
                                        WHERE rownum<=' . $arrayParametros['intLimit'];
                }
            }
            else
            {
                $strSqlFinal = $strSqlPrincipal;
            }

            $query->setSQL($strSqlFinal);

            $arrayResultado = $query->getResult();
            $strSqlCount = $strSelectCount . " FROM (" . $strSqlPrincipal . ")";
            $queryCount->setSQL($strSqlCount);

            $intTotal = $queryCount->getSingleScalarResult();

            $arrayRespuesta['resultado'] = $arrayResultado;
            $arrayRespuesta['total']     = $intTotal;

            return $arrayRespuesta;
            
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
    }

    
    /**
     * getJSONHistorialAsignacionProvisionalChofer, Obtiene el json con la información de los vehículos con
     * la asignación de la cuadrilla si es ésta asignación existiera y su respectiva asignación provisional
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 
     * 
     * @param  array $arrayParametros[  'intStart'                      => Inicio del rownum,
     *                                  'intLimit'                      => Fin del rownum,
     *                                  'idTipoSolicitud'               => id del tipo de solicitud,
     *                                  'strEstadoAsignacion'           => estado pendiente de las solicitudes (Activa)
     *                                  'idElemento'                    => id del vehículo a consultar,
     *                                  'errorFechas'                   => Indica si existe un error o no en el rango de fechas a buscar
     *                                  'strFechaDesde'                 => fecha desde a consultar,
     *                                  'strFechaHasta'                 => fecha hasta a consultar,
     *                                  
     *                               ]
     * 
     * @return $jsonData
     */ 
    public function getJSONHistorialAsignacionProvisionalChofer($arrayParametros,$emInfraestructura,$emGeneral)
    {
        $arrayEncontrados   = array();
        $total=0;
        if($arrayParametros['errorFechas'])
        {
            $total              = 0;
        }
        else
        {
            $arrayResultado=$this->getInfoFinalHistorialAsignacionProvisionalChofer($arrayParametros,$emInfraestructura,$emGeneral);
            $arrayEncontrados      = $arrayResultado['resultado'];
            $total       = $arrayResultado['total'];
            
        }
        $arrayRespuesta = array('total' => $total, 'encontrados' => $arrayEncontrados);
        $jsonData       = json_encode($arrayRespuesta);
        return $jsonData;
        
    }

    
    /**
     * getInfoFinalHistorialAsignacionProvisionalChofer, Obtiene el array completo de la información de los vehículos con
     * la asignación de la cuadrilla si es ésta asignación existiera y su respectiva asignación provisional
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 
     * 
     * @param  array $arrayParametros[  'intStart'                      => Inicio del rownum,
     *                                  'intLimit'                      => Fin del rownum,
     *                                  'idTipoSolicitud'               => id del tipo de solicitud,
     *                                  'strEstadoAsignacion'           => estado pendiente de las solicitudes (Activa)
     *                                  'idElemento'                    => id del vehículo a consultar,
     *                                  'errorFechas'                   => Indica si existe un error o no en el rango de fechas a buscar
     *                                  'strFechaDesde'                 => fecha desde a consultar,
     *                                  'strFechaHasta'                 => fecha hasta a consultar,
     *                                  
     *                               ]
     * 
     * @return $arrayResultadoFinal ['resultado','total']
     */ 
    public function getInfoFinalHistorialAsignacionProvisionalChofer($arrayParametros,$emInfraestructura,$emGeneral)
    {
        $arrayEncontrados   = array();
        $arrayResultadoFinal['resultado'] = "";
        $arrayResultadoFinal['total'] = 0;
        
        $arrayResultado     = $this->getResultadoHistorialAsignacionProvisionalChofer($arrayParametros);
        $resultado          = $arrayResultado['resultado']; 
        $intTotal           = $arrayResultado['total'];
        $total              = 0;

        if($resultado)
        {
            $total = $intTotal;
            foreach($resultado as $data)
            {
                $arrayItem = array();
                
                $arrayItem['strDptoZonaAsignacionProvisionalHisto']     = $data["departamentoZona"];
                
                $arrayItem['strConductorAReemplazarAsignacionProvisionalHisto']  = $data["choferPredefinido"];

                if($data["tipoAsignado"]=="CUADRILLA")
                {
                    $arrayItem['idCuadrillaProvisionalHisto']           = $data["asignadoId"];
                    $arrayItem['nombreCuadrillaProvisionalHisto']       = $data["asignadoNombre"];

                    $arrayParametrosCuadrilla   = array(
                                                        'idCuadrilla'           => $arrayItem['idCuadrillaProvisionalHisto'],
                                                        'strLider'              =>'Lider',
                                                        'strEstadoActivo'       =>'Activo',
                                                        'strEstadoModificado'   =>'Modificado',
                                                        'strEstadoPrestado'     =>'Prestado',
                                                        'intRowNum'             => 2,
                                                        'strEmpleado'           =>'Empleado',
                                                        'strJefeCuadrilla'      =>'Jefe Cuadrilla',
                                                        'strCargo'              =>'CARGO'

                                                        );
                    $arrayResultadoCuadrilla    = $this->_em->getRepository("schemaBundle:AdmiCuadrilla")
                                                            ->getResultadoInfoCuadrillaAsignacionProvisional($arrayParametrosCuadrilla);

                    $resultadoCuadrilla          = $arrayResultadoCuadrilla['resultado'];
                    if($resultadoCuadrilla)
                    {
                        foreach($resultadoCuadrilla as $dataCuadrilla)
                        {
                            
                            
                            $arrayItem['strCoordinadorAsignacionProvisionalHisto']  = $dataCuadrilla['coordinadorCuadrilla'] 
                                                                                      ? $dataCuadrilla['coordinadorCuadrilla']:'';
                            $arrayItem['nombreLiderCuadrillaProvisionalHisto']      = $dataCuadrilla['liderCuadrilla'] 
                                                                                      ? $dataCuadrilla['liderCuadrilla']:'';
                        }
                    }

                }
                else
                {
                    $arrayItem['idCuadrillaProvisionalHisto']                       = '';
                    $arrayItem['nombreCuadrillaProvisionalHisto']                   = '';
                    $arrayItem['strCoordinadorAsignacionProvisionalHisto']          = '';
                    $arrayItem['nombreLiderCuadrillaProvisionalHisto']              = '';

                }

                $arrayItem['personaIdChoferReemplazoProvisionalHisto']          = $data["refAsignadoId"];
                $arrayItem['strConductorReemplazoAsignacionProvisionalHisto']   = $data["refAsignadoNombre"];
                $arrayItem['personaEmpresaRolIdChoferReemplazoProvisionalHisto']= $data["personaEmpresaRolId"];
                $arrayItem['strMotivoAsignacionProvisionalHisto']               = $data["nombreMotivo"];

                $arrayItem['strModeloAsignacionProvisionalHisto']   = $data["nombreModeloElemento"];
                $arrayItem['strPlacaAsignacionProvisionalHisto']    = $data["nombreElemento"];
                $arrayItem['strDiscoAsignacionProvisionalHisto']    = $data["disco"];
                $arrayItem['strFechaHoraAsignacionProvisionalHisto']= $data["fechaHoraProv"];

                $arrayItem['strObservacionProvisionalHisto']    = $data["observacion"];
                $arrayItem['strTipoAsignacionProvisionalHisto'] = $data["tipoAsignado"];
                
                $arrayEncontrados[] = $arrayItem;
            }
            
            $arrayResultadoFinal['resultado'] = $arrayEncontrados;
            $arrayResultadoFinal['total'] = $total;

        }
        return $arrayResultadoFinal;
    }
    /*************************Fin de Asignacion Operativa**********************/

    
     /**
     * Costo: 7
     * getValorCaracteristicaDemo - Función que busca por servicio el valor de una caracteristica
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 27/04/2018 - Se realizan ajustes para considerar tambien las solicitudes en Fallo
     *
     * @param  Array $arrayParametros[ 'descripcionSolicitud'      => nombre de la solicitud
     *                                 'descripcionCaracteristica' => nombre de la caracteristica
     *                                 'estadoSolicitud'           => estado de la solicitud
     *                                 'idServicio'                => id servicio ]
     *
     * @return String $strValor
     * 
     */
    public function getValorCaracteristicaXServicio($arrayParametros)
    {
        $arrayResultado = array();
        
        try
        {
            $objRsm   = new ResultSetMappingBuilder($this->_em);
            $objQuery = $this->_em->createNativeQuery(null, $objRsm);

            $strSql = "  SELECT IDSC.VALOR
                        FROM INFO_DETALLE_SOLICITUD IDS,
                          INFO_DETALLE_SOL_CARACT IDSC
                        WHERE IDS.ID_DETALLE_SOLICITUD = IDSC.DETALLE_SOLICITUD_ID
                        AND IDSC.CARACTERISTICA_ID =
                          (SELECT AC2.ID_CARACTERISTICA
                          FROM ADMI_CARACTERISTICA AC2
                          WHERE AC2.DESCRIPCION_CARACTERISTICA = :descripcionCaracteristica
                          )
                        AND IDS.ID_DETALLE_SOLICITUD =
                          (SELECT MAX(IDS2.ID_DETALLE_SOLICITUD)
                          FROM INFO_DETALLE_SOLICITUD IDS2
                          WHERE IDS2.SERVICIO_ID = :servicioId
                          AND IDS2.ESTADO        IN ( :estado )
                          AND IDS2.TIPO_SOLICITUD_ID = (SELECT ATS.ID_TIPO_SOLICITUD
                            FROM ADMI_TIPO_SOLICITUD ATS
                            WHERE ATS.DESCRIPCION_SOLICITUD = :descripcionSolicitud
                            ) ) ";
           
            $objRsm->addScalarResult('VALOR', 'valor', 'string');

            $objQuery->setParameter("descripcionSolicitud", $arrayParametros["descripcionSolicitud"]);
            $objQuery->setParameter("descripcionCaracteristica", $arrayParametros["descripcionCaracteristica"]);
            $objQuery->setParameter("servicioId", $arrayParametros["idServicio"]);
            $objQuery->setParameter("estado", $arrayParametros["estadoSolicitud"]);                
            
            $objQuery->setSQL($strSql);

            $arrayResultado = $objQuery->getOneOrNullResult();
            
            if($arrayResultado["valor"] != "S")
            {
                $arrayResultado["valor"] = "N";
            }
        } 
        catch (\Exception $ex) 
        {
            error_log($ex->getMessage());
        }
        
        return $arrayResultado;
    }    
        
    
     /**
     * getArrayInfoCambioPlanPorSolicitud, Obtiene el array completo de la información de cambio de plan de clientes TN
     * por solicitud creada
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 
     * 
     * @param  Array $arrayParametros['idServicio'  => id servicio
     *                                'tipoProceso' => tipo de proceso ]
     *
     * @return Array $arrayResultado [ idServicio , idSolicitud , idSolicitudPadre , capacidadUno , capacidadDos , precio ]
     * 
     * @author Modificado: Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.1 14-08-2016 - Consulta de caracteristicas por detalle
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 24-05-2017 - Se consideran tambien las solicitudes de Demos y cambia los parametros de entrada a un array
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 09-01-2018 - Se agrega la obtención del tipo de solicitud en la consulta
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 08-03-2018 - Se agrega la obtención del valor de la característica VELOCIDAD de la solicitud enviada por parámetros
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.5 27-04-2018 - Se realizan ajustes para considerar las solicitudes en estado Fallo, cuando sea una cancelacion de demos
     */
    public function getArrayInfoCambioPlanPorSolicitud($arrayParametros)
    {
        $arrayResultado = array();
        $arrayEstado    = array();

        if($arrayParametros["tipoProceso"] == "CancelDemos")
        {
            $arrayEstado = array("Activa","Fallo");
        }
        else
        {
            $arrayEstado = array("EnProceso");
        }

        try
        {
            $rsm = new ResultSetMappingBuilder($this->_em);
            $query = $this->_em->createNativeQuery(null, $rsm);
            $strWhereAdic = "";
            if(isset($arrayParametros["strTipoSolicitud"]) && !empty($arrayParametros["strTipoSolicitud"]))
            {
                $strWhereAdic .= " AND TIPO.DESCRIPCION_SOLICITUD = :strTipoSolicitud ";
                $query->setParameter("strTipoSolicitud", $arrayParametros["strTipoSolicitud"]);
            }
            else
            {
                $strWhereAdic .= " AND TIPO.DESCRIPCION_SOLICITUD IN (:tipoSolicitud) ";
                $query->setParameter("tipoSolicitud", array('CAMBIO PLAN','CANCELACION','DEMOS'));  
            }

            $sql = "  SELECT                         
                        SOLICITUD.ID_DETALLE_SOLICITUD SOLICITUD,
                        SOL_CARACT.VALOR SOLICITUD_PADRE,                        
                        SERVICIO.PRECIO_VENTA PRECIO,                        
                        (SELECT DET.VALOR
                        FROM INFO_DETALLE_SOL_CARACT DET,
                          ADMI_CARACTERISTICA CARACT
                        WHERE DET.DETALLE_SOLICITUD_ID        = SOLICITUD.ID_DETALLE_SOLICITUD
                        AND CARACT.ID_CARACTERISTICA          = DET.CARACTERISTICA_ID
                        AND CARACT.DESCRIPCION_CARACTERISTICA = :cap1
                        ) CAPACIDAD1_NUEVA,
                        (SELECT DET.VALOR
                        FROM INFO_DETALLE_SOL_CARACT DET,
                          ADMI_CARACTERISTICA CARACT
                        WHERE DET.DETALLE_SOLICITUD_ID        = SOLICITUD.ID_DETALLE_SOLICITUD
                        AND CARACT.ID_CARACTERISTICA          = DET.CARACTERISTICA_ID
                        AND CARACT.DESCRIPCION_CARACTERISTICA = :cap2
                        ) CAPACIDAD2_NUEVA,
                        (SELECT DET.VALOR
                        FROM INFO_DETALLE_SOL_CARACT DET,
                          ADMI_CARACTERISTICA CARACT
                        WHERE DET.DETALLE_SOLICITUD_ID        = SOLICITUD.ID_DETALLE_SOLICITUD
                        AND CARACT.ID_CARACTERISTICA          = DET.CARACTERISTICA_ID
                        AND CARACT.DESCRIPCION_CARACTERISTICA = :velocidad
                        ) VELOCIDAD_NUEVA,
                        (SELECT DET.VALOR
                        FROM INFO_DETALLE_SOL_CARACT DET,
                          ADMI_CARACTERISTICA CARACT
                        WHERE DET.DETALLE_SOLICITUD_ID        = SOLICITUD.ID_DETALLE_SOLICITUD
                        AND CARACT.ID_CARACTERISTICA          = DET.CARACTERISTICA_ID
                        AND CARACT.DESCRIPCION_CARACTERISTICA = :precio
                        ) PRECIO_NUEVO
                      FROM 
                        INFO_SERVICIO SERVICIO,
                        INFO_DETALLE_SOLICITUD SOLICITUD,
                        ADMI_TIPO_SOLICITUD TIPO,
                        INFO_DETALLE_SOL_CARACT SOL_CARACT,
                        ADMI_CARACTERISTICA CARACT_REF,                                                
                        ADMI_PRODUCTO PRODUCTO
                      WHERE 
                            SERVICIO.ID_SERVICIO                = SOLICITUD.SERVICIO_ID
                      AND SERVICIO.ID_SERVICIO                  = :servicio
                      AND SOLICITUD.TIPO_SOLICITUD_ID           = TIPO.ID_TIPO_SOLICITUD "
                      .$strWhereAdic.
                      "AND SOLICITUD.ESTADO                      IN (:estado)
                      AND SOLICITUD.ID_DETALLE_SOLICITUD        = SOL_CARACT.DETALLE_SOLICITUD_ID
                      AND SOL_CARACT.CARACTERISTICA_ID          = CARACT_REF.ID_CARACTERISTICA
                      AND CARACT_REF.DESCRIPCION_CARACTERISTICA = :referenciaSolicitud
                      AND SOLICITUD.ID_DETALLE_SOLICITUD        =
                        (SELECT MAX(ID_DETALLE_SOLICITUD)
                        FROM INFO_DETALLE_SOLICITUD
                        WHERE SERVICIO_ID     = SERVICIO.ID_SERVICIO
                        AND TIPO_SOLICITUD_ID = TIPO.ID_TIPO_SOLICITUD
                        AND ESTADO            IN (:estado)
                        )                     
                      AND SERVICIO.PRODUCTO_ID                  = PRODUCTO.ID_PRODUCTO ";
            
            $rsm->addScalarResult('SOLICITUD', 'idSolicitud', 'integer');
            $rsm->addScalarResult('TIPO_DETALLE_SOLICITUD', 'tipoDetalleSolicitud', 'string');
            $rsm->addScalarResult('SOLICITUD_PADRE', 'idSolicitudPadre', 'integer');            
            $rsm->addScalarResult('CAPACIDAD1_NUEVA', 'capacidadUnoNueva', 'integer');
            $rsm->addScalarResult('CAPACIDAD2_NUEVA', 'capacidadDosNueva', 'integer');
            $rsm->addScalarResult('VELOCIDAD_NUEVA', 'velocidadNueva', 'integer');
            $rsm->addScalarResult('PRECIO', 'precio', 'float');                        
            $rsm->addScalarResult('PRECIO_NUEVO', 'precioNuevo', 'float');  

            $query->setParameter("servicio", $arrayParametros["idServicio"]);
            $query->setParameter("cap1", "CAPACIDAD1");
            $query->setParameter("cap2", "CAPACIDAD2");
            $query->setParameter("velocidad", "VELOCIDAD");
            $query->setParameter("precio", 'Precio');
            $query->setParameter("estado", $arrayEstado);
            $query->setParameter("referenciaSolicitud", 'Referencia Solicitud');

            $query->setSQL($sql);

            $arrayResultado = $query->getOneOrNullResult();
        } 
        catch (\Exception $ex) 
        {
            error_log($ex->getMessage());
        }
        
        return $arrayResultado;
    }
    
    /**
     * 
     * getTieneSolicitudesHijasPendientes, Devuelve si una solicitud padre contiene aun solicitudes detalles hijas pendiente de procesar
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 
     * @since 21-05-2016
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 - Se agrega Fallo para poder validar que se hayan ejecutado todas las solicitudes y poder finalizar la cabecera
     * @since 18-06-2016
     * 
     * @author Anabelle Penaherrera <apenaherrera@telconet.ec>
     * @version 1.2  09-02-2017
     * Se reporta Bug que existen Solicitudes masivas que estan quedando en estado Pendiente y sus detalles Finalizados
     * El metodo tiene un error al comparar SOL_CARACT.VALOR = :solicitudPadre , debe hacerse un casteo a numero, dado que el campo valor es string,
     * caso contrario se genera un error ORA-01722: invalid number.
     * 
     * @param integer $intIdSolicitudPadre
     * @return boolean
     */
    public function getTieneSolicitudesHijasPendientes($intIdSolicitudPadre)
    {
        $boolTieneSolPdte = true;
        
        try
        {
            $rsm = new ResultSetMappingBuilder($this->_em);
            $query = $this->_em->createNativeQuery(null, $rsm);

            $sql = "  SELECT 
                        COUNT(*) SOLICITUDES_PENDIENTES
                        FROM 
                          INFO_DETALLE_SOLICITUD SOLICITUD,
                          ADMI_TIPO_SOLICITUD TIPO,
                          INFO_DETALLE_SOL_CARACT SOL_CARACT,
                          ADMI_CARACTERISTICA CARACT_REF  
                        WHERE SOLICITUD.TIPO_SOLICITUD_ID         = TIPO.ID_TIPO_SOLICITUD
                        AND TIPO.DESCRIPCION_SOLICITUD           IN (:tipoSolicitud)
                        AND SOLICITUD.ID_DETALLE_SOLICITUD        = SOL_CARACT.DETALLE_SOLICITUD_ID
                        AND SOL_CARACT.CARACTERISTICA_ID          = CARACT_REF.ID_CARACTERISTICA
                        AND CARACT_REF.DESCRIPCION_CARACTERISTICA = :referenciaSolicitud                        
                        AND COALESCE(TO_NUMBER(REGEXP_SUBSTR(SOL_CARACT.VALOR,'^\d+')),0) = :solicitudPadre
                        AND SOLICITUD.ESTADO NOT IN (:estados)";
           
            $rsm->addScalarResult('SOLICITUDES_PENDIENTES', 'numeroSolPdtes', 'integer');            

            $query->setParameter("solicitudPadre", $intIdSolicitudPadre);                  
            $query->setParameter("estados", array('Finalizada','Rechazada'));            
            $query->setParameter("tipoSolicitud", array('CAMBIO PLAN','CANCELACION','DEMOS'));            
            $query->setParameter("referenciaSolicitud", 'Referencia Solicitud');   
            
            $query->setSQL($sql);

            $resultado = $query->getOneOrNullResult();
            
            if($resultado)
            {
                //Si el resultado es 0 significa que la solicitud padre no tiene solicitudes de procesos masivas pendientes de procesar
                if($resultado['numeroSolPdtes']==0)
                {
                    $boolTieneSolPdte = false;
                }
            }
        } 
        catch (\Exception $ex) 
        {
            error_log($ex->getMessage());
        }
        
        return $boolTieneSolPdte;
    }

     /**
     * 
     * getFechasDemo, Devuelve las fechas de inicio y fin de Demo
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0  30-05-2017
     * 
     * @param array $arrayParametros[intSolicitudId => id detalle de la solicitud a consultar]
     * 
     * @return array $arrayRespuesta[ strFechaInicio        => fecha de inicio del demo,
     *                                strFechaFin           => fecha de fin del demo,
     *                                intDiasMaximoSolDemo  => duración del demo]
     */
    public function getFechasDemo($arrayParametros)
    {
        $strFechaInicioDemo   = "";
        $strFechaFinDemo      = "";        
        $intDiasMaximoSolDemo = "";
        $arrayRespuesta       = "";
        $objInfoDetalleSolHist = null;
        
        try
        {                        
            $objCaractDuracionDemo = $this->_em->getRepository('schemaBundle:AdmiCaracteristica')
                                               ->findOneBy(array("descripcionCaracteristica" => 'Duracion Demo'));

            if(is_object($objCaractDuracionDemo))
            {
                $objInfoDetalleSolCaract = $this->_em->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                     ->findOneBy(array("detalleSolicitudId" => $arrayParametros["intSolicitudId"],
                                                                       "caracteristicaId"   => $objCaractDuracionDemo->getId()));                    
                if(is_object($objInfoDetalleSolCaract))
                {
                    $intDiasMaximoSolDemo = $objInfoDetalleSolCaract->getValor() ? $objInfoDetalleSolCaract->getValor() : "";
                } 
            }

            //Se calcula la fecha de inicio del Demo
            $objInfoDetalleSolHist = $this->_em->getRepository('schemaBundle:InfoDetalleSolHist')
                                               ->findOneBy(array("detalleSolicitudId" => $arrayParametros["intSolicitudId"],
                                                                 "estado"             => "Activa"));
            
            if(is_object($objInfoDetalleSolHist))
            {
                $strFechaInicioDemo = strval(date_format($objInfoDetalleSolHist->getFeCreacion(), "d-m-Y"));

                //Se calcula la fecha fin del Demo
                $strFechaFinDemo = date('d-m-Y', strtotime("$strFechaInicioDemo + ".$intDiasMaximoSolDemo." day"));
                
            }

            $arrayRespuesta["strFechaInicio"]       = $strFechaInicioDemo;
            $arrayRespuesta["strFechaFin"]          = $strFechaFinDemo;
            $arrayRespuesta["intDiasMaximoSolDemo"] = $intDiasMaximoSolDemo;
        } 
        catch (\Exception $ex) 
        {
            error_log($ex->getMessage());
        }
        
        return $arrayRespuesta;
    }    
   
    
    
     /**
     * Costo: 2
     * getSolicitudDemoActivaPorServicio
     * 
     * Función que retorna una solicitud de Demo en estado activa por servicio
     *
     * @param array arrayParametros [ intServicio  => servicio a consultar
     *                                strSolicitud => nombre de la solicitud
     *                                strEstado    => estado de la solicitud ] 
     *
     * @return integer intSolicitud
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 14-07-2017
     */
    public function getSolicitudActivaPorServicio($arrayParametros)
    { 
        $intSolicitudId = "";

        $strSql = " SELECT IDS.ID_DETALLE_SOLICITUD
                        FROM INFO_DETALLE_SOLICITUD IDS
                        WHERE IDS.ID_DETALLE_SOLICITUD = (SELECT MAX(IDS2.ID_DETALLE_SOLICITUD)
                        FROM INFO_DETALLE_SOLICITUD IDS2 WHERE IDS2.ESTADO = :paramEstado
                          AND IDS2.TIPO_SOLICITUD_ID = 
                        (SELECT ATS.ID_TIPO_SOLICITUD FROM ADMI_TIPO_SOLICITUD ATS WHERE ATS.DESCRIPCION_SOLICITUD = :paramSolicitud)
                        AND IDS2.SERVICIO_ID = :paramServicio) ";
                        
        $objStmt = $this->_em->getConnection()->prepare($strSql);
        $objStmt->bindValue('paramServicio',$arrayParametros["intServicio"]);
        $objStmt->bindValue('paramSolicitud',$arrayParametros["strSolicitud"]);
        $objStmt->bindValue('paramEstado',$arrayParametros["strEstado"]);
        $objStmt->execute();            

        $intSolicitudId = $objStmt->fetchColumn();     

        return $intSolicitudId;
    }     
    
    
    
     /**
     * Costo: 25
     * getFacturasAbiertasMesAnterior
     * 
     * Función que retorna las facturas abiertas al mes anterior
     *
     * @param array arrayParametros [ intPersonaEmpresaRol  => id persona empresa rol del cliente ] 
     *
     * @return integer facturasMora retorna las facturas abiertas del mes anterior
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 17-07-2017
     */
    public function getFacturasAbiertasMesAnterior($arrayParametros)
    { 
        $arrayTipoDocumentos = array('fac','facp');
        $strEstado           = "activo";
        $intCantidadFacturas = 0;    
        $intDiasRestar       = 1;
        $strFechaActual      = "";
        $strFechaAnterior    = "";
        $objRsmb             = new ResultSetMappingBuilder($this->_em);
        $objQuery            = $this->_em->createNativeQuery(null,$objRsmb);      

        $objFechaActual = new \DateTime('now');
        $objFechaActual->modify('first day of this month');

        $strFechaActual   = strval(date_format($objFechaActual, "d-m-Y"));
        $strFechaAnterior = date("d-m-Y", strtotime("$strFechaActual -$intDiasRestar day"));

        $strSql = " SELECT COUNT(IDFC.PUNTO_ID) AS FACTURAS
                        FROM
                          INFO_DOCUMENTO_FINANCIERO_CAB IDFC ,
                          ADMI_TIPO_DOCUMENTO_FINANCIERO ATDF
                        WHERE IDFC.TIPO_DOCUMENTO_ID = ATDF.ID_TIPO_DOCUMENTO
                        AND IDFC.RECURRENTE='S'
                        AND LOWER(ATDF.CODIGO_TIPO_DOCUMENTO) IN (:paramTipoDocumentos)
                        AND LOWER(IDFC.ESTADO_IMPRESION_FACT) = :paramEstado
                        AND IDFC.FE_AUTORIZACION  <= TO_DATE (:paramUltimoDiaMesAnterior, 'dd/mm/yyyy')
                        AND IDFC.PUNTO_ID IN (SELECT IPU1.ID_PUNTO FROM INFO_PUNTO IPU1 
                        WHERE IPU1.PERSONA_EMPRESA_ROL_ID = :paramPersonaEmpresaRol) ";

        $objQuery->setParameter('paramTipoDocumentos',$arrayTipoDocumentos);
        $objQuery->setParameter('paramEstado',$strEstado);        
        $objQuery->setParameter('paramUltimoDiaMesAnterior',$strFechaAnterior);
        $objQuery->setParameter('paramPersonaEmpresaRol',$arrayParametros["intPersonaEmpresaRol"]);        

        $objRsmb->addScalarResult('FACTURAS', 'facturas', 'integer');  
        
        $objQuery->setSQL($strSql);
        
        $intCantidadFacturas = $objQuery->getSingleScalarResult();

        return $intCantidadFacturas;
    }       
    
    
    
     /**
     * Costo: 30
     * getSolicitudesHijasDemoAbiertas
     * 
     * Función que retorna la cantidad de solicitudes hijas que esten pendientes
     *
     * @param array arrayParametros [ intSolicitudId  => id de la solicitud padre ] 
     *
     * @return integer intSolicitudes retorna las solicitudes que esten pendientes
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 02-08-2017
     */
    public function getSolicitudesHijasDemoAbiertas($arrayParametros)
    { 
        $arrayEstadoSolicitudes   = array('Pendiente','Aprobada','EnProceso');
        $strDescripcionSolicitud  = "DEMOS";
        $strCaracteristica        = "Referencia Solicitud";    
        $intSolicitudesPendientes = 0;
        $objRsmb                  = new ResultSetMappingBuilder($this->_em);
        $objQuery                 = $this->_em->createNativeQuery(null,$objRsmb);      


        $strSql = " SELECT 
                        COUNT(*) AS SOLICITUDES_PENDIENTES
                        FROM 
                          INFO_DETALLE_SOLICITUD SOLICITUD,
                          ADMI_TIPO_SOLICITUD TIPO,
                          INFO_DETALLE_SOL_CARACT SOL_CARACT,
                          ADMI_CARACTERISTICA CARACT_REF  
                        WHERE SOLICITUD.TIPO_SOLICITUD_ID         = TIPO.ID_TIPO_SOLICITUD
                        AND TIPO.DESCRIPCION_SOLICITUD           IN :paramSolicitud
                        AND SOLICITUD.ID_DETALLE_SOLICITUD        = SOL_CARACT.DETALLE_SOLICITUD_ID
                        AND SOL_CARACT.CARACTERISTICA_ID          = CARACT_REF.ID_CARACTERISTICA
                        AND CARACT_REF.DESCRIPCION_CARACTERISTICA = :paramCaracteristica                       
                        AND COALESCE(TO_NUMBER(REGEXP_SUBSTR(SOL_CARACT.VALOR,'^\d+')),0) = :paramSolicitudId
                        AND SOLICITUD.ESTADO IN (:paramEstados) ";

        $objQuery->setParameter('paramSolicitud',$strDescripcionSolicitud);
        $objQuery->setParameter('paramCaracteristica',$strCaracteristica);        
        $objQuery->setParameter('paramSolicitudId',$arrayParametros["intSolicitudId"]);
        $objQuery->setParameter('paramEstados',$arrayEstadoSolicitudes);        

        $objRsmb->addScalarResult('SOLICITUDES_PENDIENTES', 'solicitudesPendientes', 'integer');  
        
        $objQuery->setSQL($strSql);
        
        $intSolicitudesPendientes = $objQuery->getSingleScalarResult();

        return $intSolicitudesPendientes;
    }           
    
    
     /**
     * Costo: 2
     * getJefePorDepartamento
     *
     * Función que retorna el jefe por departamento
     *
     * @param array arrayParametros [ intCantonId     => id de canton
     *                                strEstado       => estado de la persona
     *                                intDepartamento => id del departamento
     *                                strRol          => rol
     *                                strTipoRol      => tipo del rol
     *                                strEmpresaCod   => codigo de la empresa ]
     *
     * @return integer facturasMora retorna las facturas abiertas del mes anterior
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 02-08-2017
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.1 22-10-2019 - Se cambia la lógica de búsqueda agregando el campo ES_JEFE para certificar que es un jefe de área
     *                           Y se hace un like de búsqueda a la descripción de rol enviada.                                                       
     * @since  1.0
     * 
     */
    public function getJefePorDepartamento($arrayParametros)
    { 
        $arrayRespuesta      = array();
        $objRsmb             = new ResultSetMappingBuilder($this->_em);
        $objQuery            = $this->_em->createNativeQuery(null,$objRsmb);      

        $strSql = " SELECT IPE2.ID_PERSONA AS IDPERSONA,IPE2.NOMBRES||' '||IPE2.APELLIDOS AS NOMBRECOMPLETO,
                            IPER2.ID_PERSONA_ROL AS PERSONAEMPRESAROLID
                        FROM INFO_PERSONA_EMPRESA_ROL IPER2,INFO_PERSONA IPE2
                        WHERE IPER2.PERSONA_ID = IPE2.ID_PERSONA
                        AND IPER2.ID_PERSONA_ROL = (
                        SELECT MAX(IPER.ID_PERSONA_ROL)
                        FROM INFO_OFICINA_GRUPO IOG,INFO_PERSONA_EMPRESA_ROL IPER
                        WHERE IOG.ID_OFICINA = IPER.OFICINA_ID
                        AND IPER.DEPARTAMENTO_ID = :paramDepartamento
                        AND IPER.ESTADO = :paramEstado
                        AND IOG.CANTON_ID = :paramCanton
                        AND IPER.EMPRESA_ROL_ID IN (SELECT IERO.ID_EMPRESA_ROL
                        FROM ADMI_TIPO_ROL ATI,ADMI_ROL ARO,DB_COMERCIAL.INFO_EMPRESA_ROL IERO
                        WHERE ATI.ID_TIPO_ROL = ARO.TIPO_ROL_ID
                        AND IERO.ROL_ID = ARO.ID_ROL
                        AND ATI.DESCRIPCION_TIPO_ROL = :paramTipoRol
                        AND UPPER(ARO.DESCRIPCION_ROL) like UPPER(:paramRol)
                        AND ARO.ES_JEFE = :strDescripRolEsJefe
                        AND IERO.EMPRESA_COD = :paramEmpresaCod)) ";

        $objQuery->setParameter('paramDepartamento',$arrayParametros["intDepartamento"]);
        $objQuery->setParameter('paramEstado',$arrayParametros["strEstado"]);        
        $objQuery->setParameter('paramCanton',$arrayParametros["intCantonId"]);
        $objQuery->setParameter('paramTipoRol',$arrayParametros["strTipoRol"]);
        $objQuery->setParameter('paramRol','%'.$arrayParametros["strRol"].'%');        
        $objQuery->setParameter('paramEmpresaCod',$arrayParametros["strEmpresaCod"]);
        $objQuery->setParameter('strDescripRolEsJefe','S');      

        $objRsmb->addScalarResult('IDPERSONA', 'idPersona', 'integer');  
        $objRsmb->addScalarResult('NOMBRECOMPLETO', 'nombreCompleto', 'string');
        $objRsmb->addScalarResult('PERSONAEMPRESAROLID', 'personaEmpresaRolId', 'integer');        

        $objQuery->setSQL($strSql);
        
        $arrayRespuesta = $objQuery->getResult();

        return $arrayRespuesta[0];
    }        

    
     /**
     * Costo: 2
     * getSolicitudDemoAbiertas
     *
     * Función que retorna las solicitudes de demo no finalizadas
     *
     * @param array arrayParametros [ arrayEstados  => array de los estados a considerar
     *                                strSolicitud  => nombre de la solicitud
     *                                intServicioId => id del servicio ]
     *
     * @return integer $inSolicitudes retorna el numero de solicitudes
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 01-08-2017
     */
    public function getSolicitudDemoAbiertas($arrayParametros)
    {
        $inSolicitudes = 0;
        $objRsmb       = new ResultSetMappingBuilder($this->_em);
        $objQuery      = $this->_em->createNativeQuery(null,$objRsmb);

        $strSql = " SELECT COUNT(IDS.ID_DETALLE_SOLICITUD) AS SOLICITUDES
                        FROM INFO_DETALLE_SOLICITUD IDS
                        WHERE IDS.ID_DETALLE_SOLICITUD = (SELECT MAX(IDS2.ID_DETALLE_SOLICITUD)
                        FROM INFO_DETALLE_SOLICITUD IDS2 WHERE IDS2.ESTADO IN (:paramEstado)
                          AND IDS2.TIPO_SOLICITUD_ID =
                        (SELECT ATS.ID_TIPO_SOLICITUD FROM ADMI_TIPO_SOLICITUD ATS WHERE ATS.DESCRIPCION_SOLICITUD = :paramSolicitud)
                        AND IDS2.SERVICIO_ID = :paramServicio) ";

        $objQuery->setParameter('paramEstado',$arrayParametros["arrayEstados"]);
        $objQuery->setParameter('paramServicio',$arrayParametros["intServicioId"]);
        $objQuery->setParameter('paramSolicitud',$arrayParametros["strSolicitud"]);

        $objRsmb->addScalarResult('SOLICITUDES', 'solicitudes', 'integer');

        $objQuery->setSQL($strSql);

        $inSolicitudes = $objQuery->getSingleScalarResult();

        return $inSolicitudes;
    }


     /**
     * Costo: 4
     * getSolicitudesReqDeClientes
     *
     * Función que retorna por servicio la cantidad de solicitudes de clientes en estado Pendiente
     *
     * @param array arrayParametros [ intServicioId  => servicio a consultar
     *                                strUsrCreacion => usuario de creacion
     *                                strEstado      => estado de la solicitud ]
     *
     * @return integer $inSolicitudes retorna el numero de solicitudes
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 12-09-2017
     */
    public function getSolicitudesReqDeClientes($arrayParametros)
    {
        $intSolicitudes = 0;
        $objRsmb        = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null,$objRsmb);

        $strSql = " SELECT COUNT(ID_DETALLE_SOLICITUD) AS SOLICITUDES
                        FROM INFO_DETALLE_SOLICITUD
                        WHERE USR_CREACION = :paramUsrCreacion
                        AND ESTADO         = :paramEstado
                        AND SERVICIO_ID    = :paramServicioId ";

        $objQuery->setParameter('paramUsrCreacion',$arrayParametros["strUsrCreacion"]);
        $objQuery->setParameter('paramEstado',$arrayParametros["strEstado"]);
        $objQuery->setParameter('paramServicioId',$arrayParametros["intServicioId"]);

        $objRsmb->addScalarResult('SOLICITUDES', 'solicitudes', 'integer');

        $objQuery->setSQL($strSql);

        $intSolicitudes = $objQuery->getSingleScalarResult();

        return $intSolicitudes;
    }


     /**
     * Costo: 3
     * getEstadoSolDemo
     *
     * Función que retorna el estado actual de una solicitud de Demo
     *
     * @param array arrayParametros [ intServicioId => id del servicio ]
     *
     * @return string $strEstadoDemo retorna el estado del Demo
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 01-08-2017
     */
    public function getEstadoSolDemo($arrayParametros)
    {
        $strNombreSolicitud  = "DEMOS";
        $strEstadoDemo       = "";
        $objRsmb             = new ResultSetMappingBuilder($this->_em);
        $objQuery            = $this->_em->createNativeQuery(null,$objRsmb);


        $strSql = " SELECT IDS1.ESTADO  as ESTADO
                        FROM INFO_DETALLE_SOLICITUD IDS1 WHERE IDS1.ID_DETALLE_SOLICITUD = (
                        SELECT MAX(IDS.ID_DETALLE_SOLICITUD) FROM INFO_DETALLE_SOLICITUD IDS WHERE IDS.SERVICIO_ID = :paramServicio
                        AND IDS.TIPO_SOLICITUD_ID = (SELECT ATS.ID_TIPO_SOLICITUD
                        FROM ADMI_TIPO_SOLICITUD ATS WHERE ATS.DESCRIPCION_SOLICITUD = :paramNombreSol)) ";

        $objQuery->setParameter('paramServicio',$arrayParametros["intServicioId"]);
        $objQuery->setParameter('paramNombreSol',$strNombreSolicitud);

        $objRsmb->addScalarResult('ESTADO', 'estado', 'string');

        $objQuery->setSQL($strSql);

        $strEstadoDemo = $objQuery->getSingleScalarResult();

        return $strEstadoDemo;
    }


     /**
     * Costo: 2
     * getSolCambioModenInmediato
     * 
     * Función que retorna la ultima solicitud de cambio de moden inmediato
     *
     * @param array arrayParametros [ intServicioId => id del servicio ] 
     *
     * @return integer $intSolicitud retorna la solicitud
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 19-07-2017
     */
    public function getSolCambioModenInmediato($arrayParametros)
    {         
        $strNombreSolicitud  = "SOLICITUD CAMBIO DE MODEM INMEDIATO";        
        $intSolicitud        = "";
        $objRsmb             = new ResultSetMappingBuilder($this->_em);
        $objQuery            = $this->_em->createNativeQuery(null,$objRsmb);      

        
        $strSql = " SELECT IDS1.ID_DETALLE_SOLICITUD  as ID_SOLICITUD 
                        FROM INFO_DETALLE_SOLICITUD IDS1 WHERE IDS1.ID_DETALLE_SOLICITUD = (
                        SELECT MAX(IDS.ID_DETALLE_SOLICITUD) FROM INFO_DETALLE_SOLICITUD IDS WHERE IDS.SERVICIO_ID = :paramServicio 
                        AND IDS.TIPO_SOLICITUD_ID = (SELECT ATS.ID_TIPO_SOLICITUD 
                        FROM ADMI_TIPO_SOLICITUD ATS WHERE ATS.DESCRIPCION_SOLICITUD = :paramNombreSol)) ";
                        
        $objQuery->setParameter('paramServicio',$arrayParametros["intServicioId"]);
        $objQuery->setParameter('paramNombreSol',$strNombreSolicitud);

        $objRsmb->addScalarResult('ID_SOLICITUD', 'idSolicitud', 'integer');  
        
        $objQuery->setSQL($strSql);
        
        $intSolicitud = $objQuery->getSingleScalarResult();
                
        return $intSolicitud;
    }        
    
    
     /**
     * Costo: 9
     * getRegionPorServicio
     * 
     * Función que retorna la región a la que pertence el servicio
     *
     * @param array arrayParametros [ intServicioId => id del servicio ] 
     *
     * @return string $strRegion retorna la region
     * 
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 19-07-2017
     */
    public function getRegionPorServicio($arrayParametros)
    {         
        $strRegion           = "";
        $objRsmb             = new ResultSetMappingBuilder($this->_em);
        $objQuery            = $this->_em->createNativeQuery(null,$objRsmb);      
        
        $strSql = " SELECT NVL(ACO.REGION,'R1') AS REGION
                        FROM INFO_SERVICIO ISE,INFO_PUNTO IPU,INFO_PERSONA_EMPRESA_ROL IPER,INFO_OFICINA_GRUPO IOG,ADMI_CANTON ACO
                        WHERE ISE.PUNTO_ID = IPU.ID_PUNTO
                        AND IPER.ID_PERSONA_ROL = IPU.PERSONA_EMPRESA_ROL_ID
                        AND IPER.OFICINA_ID = IOG.ID_OFICINA
                        AND IOG.CANTON_ID = ACO.ID_CANTON
                        AND ISE.ID_SERVICIO = :paramServicio
                        AND ROWNUM < 2 ";
                        
        $objQuery->setParameter('paramServicio',$arrayParametros["intServicioId"]);
             

        $objRsmb->addScalarResult('REGION', 'region', 'string');  
        
        $objQuery->setSQL($strSql);
        
        $strRegion = $objQuery->getSingleScalarResult();
                
        return $strRegion;
    }         
    
    
     /**
     * Costo: 8
     * getRegionPorPunto
     *
     * Función que retorna la región a la que pertence el punto
     *
     * @param array arrayParametros [ intPuntoId => id del punto ]
     *
     * @return string $strRegion retorna la region
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 04-07-2018
     */
    public function getRegionPorPunto($arrayParametros)
    {
        $strRegion           = "";
        $objRsmb             = new ResultSetMappingBuilder($this->_em);
        $objQuery            = $this->_em->createNativeQuery(null,$objRsmb);

        $strSql = " SELECT NVL(ACO.REGION,'R1') AS REGION
                        FROM INFO_PUNTO IPU,INFO_PERSONA_EMPRESA_ROL IPER,INFO_OFICINA_GRUPO IOG,ADMI_CANTON ACO
                        WHERE IPER.ID_PERSONA_ROL = IPU.PERSONA_EMPRESA_ROL_ID
                        AND IPER.OFICINA_ID = IOG.ID_OFICINA
                        AND IOG.CANTON_ID = ACO.ID_CANTON
                        AND IPU.ID_PUNTO = :paramPunto
                        AND ROWNUM < 2 ";

        $objQuery->setParameter('paramPunto',$arrayParametros["intPuntoId"]);

        $objRsmb->addScalarResult('REGION', 'region', 'string');

        $objQuery->setSQL($strSql);

        $strRegion = $objQuery->getSingleScalarResult();

        return $strRegion;
    }


    /**
     * findSolicitudes, obtiene solicitudes enviando criterios de busqueda
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0 27-03-2016
     * @since 1.0
     * @param array  $arrayParametros Obtiene los criterios de busqueda
     * @return array $arrayResultado  Retorna el array de datos y conteo de datos
     * 
     * @author Modificado: Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.1 22-06-2016 - Se añadieron filtros para que una vez autorizadas por un area no vuelvan a salir en el listado
     *                           y se corrigio el filtro de fechas por fecha de creacion
     * 
     * @author Modificado: Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.2 24-06-2016 - Se añadieron filtro de cliente por identificacion o razon social y se codigo referencia SM
     * 
     * @author Modificado: Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.3 24-06-2016 - Correccion de parametros de consulta de vendedor
     * 
     * @author Modificado: Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.4 01-07-2016 - Consuta de datos del CPE para cuando son detalles de Solicitud
     * 
     */
    public function findSolicitudes($arrayParametros) {
        if(empty($arrayParametros['boolMasivas']))
        { 
            $arrayParametros['boolMasivas'] = true;
        }
        
        $rsm= new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null,$rsm);
        //Query que obtiene los Datos
        $sqlSelect="SELECT 
                    IDS.ID_DETALLE_SOLICITUD,
                    IDS.PRECIO_DESCUENTO,
                    IDS.PORCENTAJE_DESCUENTO,
                    ISER.ID_SERVICIO,
                    IPTO.ID_PUNTO,
                    IP.ID_PERSONA,
                    IP.RAZON_SOCIAL, 
                    IP.NOMBRES, 
                    IP.APELLIDOS, 
                    IPTO.USR_VENDEDOR, 
                    IPTO.LOGIN, 
                    ATS.DESCRIPCION_SOLICITUD, 
                    TO_CHAR(IDS.FE_CREACION, 'DD-MM-YYYY HH24:MI') FE_CREACION,
                    (SELECT TO_CHAR(IDSH.FE_FIN_PLAN,'DD-MM-YYYY HH24:MI') 
                        FROM  INFO_DETALLE_SOL_HIST IDSH   
                        WHERE 
                        IDSH.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD
                        AND Estado = 'Pendiente'  AND IDSH.FE_FIN_PLAN IS NOT NULL
                    ) FE_PLANIFICACION,
                    TO_CHAR(IDS.FE_EJECUCION, 'DD-MM-YYYY HH24:MI') FE_EJECUCION, 
                    TO_CHAR(IDS.FE_RECHAZO, 'DD-MM-YYYY HH24:MI') FE_RECHAZO,
                    ISER.TIPO_ORDEN,
                    IDS.ESTADO,
                    APROD.ID_PRODUCTO,
                    APROD.DESCRIPCION_PRODUCTO,
                    AM.NOMBRE_MOTIVO,
                    IDS.OBSERVACION,
                    IDS.USR_CREACION,
                    CONCAT(ipv.nombres,CONCAT(' ',ipv.apellidos)) as NOMBRE_VENDEDOR,
                    (SELECT VALOR
                        FROM INFO_DETALLE_SOL_CARACT IDSC
                        JOIN ADMI_CARACTERISTICA ACAR ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA
                        WHERE 
                        IDSC.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD AND
                        UPPER(ACAR.DESCRIPCION_CARACTERISTICA) = 'ARCHIVO'
                    ) ARCHIVO,
                    (SELECT VALOR
                        FROM INFO_DETALLE_SOL_CARACT IDSC
                        JOIN ADMI_CARACTERISTICA ACAR ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA
                        WHERE 
                        IDSC.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD AND
                        UPPER(ACAR.DESCRIPCION_CARACTERISTICA) = 'REFERENCIA SOLICITUD MASIVA'
                    ) ID_SOLICITUD_REFERENCIA ";
        
        if($arrayParametros['boolMasivas'] == 'false')
        {
            $sqlSelect .= ", DB_COMERCIAL.COMEK_CONSULTAS.GET_MODEL_ELE_X_SERV_TIPO(ISER.ID_SERVICIO, 'CPE', 'NOMBRE') NOMBRE_MODELO_ELEMENTO, 
                           DB_COMERCIAL.COMEK_CONSULTAS.GET_MODEL_ELE_X_SERV_TIPO(ISER.ID_SERVICIO, 'CPE', 'CAPACIDAD1') CAPACIDAD1_MODELO_ELEMENTO, 
                           DB_COMERCIAL.COMEK_CONSULTAS.GET_MODEL_ELE_X_SERV_TIPO(ISER.ID_SERVICIO, 'CPE', 'CAPACIDAD2') CAPACIDAD2_MODELO_ELEMENTO ";
        }
        
        //Cuerpo del Query
        $sqlFrom = "FROM 
                    INFO_DETALLE_SOLICITUD IDS ";
        
        $sqlJoin = "LEFT JOIN INFO_SERVICIO ISER ON IDS.SERVICIO_ID = ISER.ID_SERVICIO 
                    LEFT JOIN INFO_SERVICIO_TECNICO IST ON IST.SERVICIO_ID = ISER.ID_SERVICIO    
                    LEFT JOIN ADMI_TIPO_SOLICITUD ATS ON IDS.TIPO_SOLICITUD_ID = ATS.ID_TIPO_SOLICITUD
                    LEFT JOIN INFO_PUNTO IPTO ON ISER.PUNTO_ID = IPTO.ID_PUNTO 
                    LEFT JOIN INFO_PERSONA_EMPRESA_ROL IPER ON IPTO.PERSONA_EMPRESA_ROL_ID = IPER.ID_PERSONA_ROL
                    LEFT JOIN INFO_PERSONA IP ON IPER.PERSONA_ID = IP.ID_PERSONA
                    LEFT JOIN INFO_EMPRESA_ROL IER ON IPER.EMPRESA_ROL_ID = IER.ID_EMPRESA_ROL
                    LEFT JOIN ADMI_MOTIVO AM ON IDS.MOTIVO_ID = AM.ID_MOTIVO
                    LEFT JOIN ADMI_PRODUCTO APROD ON ISER.PRODUCTO_ID = APROD.ID_PRODUCTO
                    LEFT JOIN INFO_DETALLE_SOL_MATERIAL IDSM ON IDS.ID_DETALLE_SOLICITUD = IDSM.DETALLE_SOLICITUD_ID
                    LEFT JOIN INFO_PERSONA IPV ON IPTO.USR_VENDEDOR = IPV.LOGIN ";
        
        $sqlWhere = "WHERE 
                    IER.EMPRESA_COD = :idEmpresa
                    AND UPPER(ACAR.DESCRIPCION_CARACTERISTICA) = 'REFERENCIA SOLICITUD' ";
        
        $query->setParameter('idEmpresa', $arrayParametros['intIdEmpresa']);
        
        if (!empty($arrayParametros['strFechaDesdeIngOrd'][0])){
            // Formateo la fecha
            $dateF = explode("-",$arrayParametros['strFechaDesdeIngOrd'][0]);
            $strFechaDesdeIngOrd = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));
            //cuerpo del query
            $sqlWhere .= "AND IDS.FE_CREACION >= :strFechaDesdeIngOrd ";
            //query de datos
            $query->setParameter('strFechaDesdeIngOrd', $strFechaDesdeIngOrd);      
        }
        
        if (!empty($arrayParametros['strFechaHastaIngOrd'][0])){
            // Formateo la fecha
            $dateF = explode("-",$arrayParametros['strFechaHastaIngOrd'][0]);
            $strFechaHastaIngOrd = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));
            //cuerpo del query
            $sqlWhere .= "AND IDS.FE_CREACION <= :strFechaHastaIngOrd ";
            //query de datos
            $query->setParameter('strFechaHastaIngOrd', $strFechaHastaIngOrd);
        }
        
        if (!empty($arrayParametros['strLogin'])){            
            //cuerpo del query
            $sqlWhere .= "AND UPPER(IPTO.LOGIN) like UPPER(:strLogin) ";
            //query de datos
            $query->setParameter('strLogin', $arrayParametros['strLogin'].'%');
        }
        
        if (!empty($arrayParametros['strDescripcionPunto'])){            
            //cuerpo del query
            $sqlWhere .= "AND UPPER(IPTO.DESCRIPCION_PUNTO) like UPPER(:strDescripcionPunto) ";
            //query de datos
            $query->setParameter('strDescripcionPunto', $arrayParametros['strDescripcionPunto'].'%');
        }
        
        if (!empty($arrayParametros['intIdPuntoCobertura'])){            
            //cuerpo del query
            $sqlWhere .= "AND IPTO.PUNTO_COBERTURA_ID = :intIdPuntoCobertura ";
            //query de datos
            $query->setParameter('intIdPuntoCobertura', $arrayParametros['intIdPuntoCobertura']);
        }
        
        if (!empty($arrayParametros['strVendedor'])){            
            //cuerpo del query
            $sqlWhere .= "AND ( CONCAT(LOWER(IPV.NOMBRES),CONCAT(' ',LOWER(IPV.APELLIDOS))) like LOWER(:strVendedor) ";
            $sqlWhere .= "OR LOWER(IDS.USR_CREACION) like LOWER(:strVendedor)) ";
            //query de datos
            $query->setParameter('strVendedor', '%'.$arrayParametros['strVendedor'].'%');
        }
        
        if (!empty($arrayParametros['strEstado']) && $arrayParametros['boolMasivas'] == 'false'){            
            //cuerpo del query
            $sqlWhere .= "AND LOWER(IDS.ESTADO) like LOWER(:strEstado) ";
            //query de datos
            $query->setParameter('strEstado', $arrayParametros['strEstado']);
        }
        
        if (!empty($arrayParametros['strCiudad'])){            
            //cuerpo del query
            $sqlWhere .= "AND UPPER(AC.NOMBRE_CANTON) like UPPER(:strCiudad) ";
            //query de datos
            $query->setParameter('strCiudad', '%'.$arrayParametros['strCiudad'].'%');
        }
        
        if (!empty($arrayParametros['intIdTipoSolicitud'])){            
            //cuerpo del query
            $sqlWhere .= "AND ATS.ID_TIPO_SOLICITUD = :intIdTipoSolicitud ";
            //query de datos
            $query->setParameter('intIdTipoSolicitud', $arrayParametros['intIdTipoSolicitud']);
        }
        
        if (!empty($arrayParametros['intIdItemMenu'])){            
            //cuerpo del query
            $sqlWhere .= "AND ATS.ITEM_MENU_ID = :intIdItemMenu ";
            //query de datos
            $query->setParameter('intIdItemMenu', $arrayParametros['intIdItemMenu']);
        }
        
        if (!empty($arrayParametros['intIdProducto'])){            
            //cuerpo del query
            $sqlWhere .= "AND ISER.PRODUCTO_ID = :intIdProducto ";
            //query de datos
            $query->setParameter('intIdProducto', $arrayParametros['intIdProducto']);
        }
        
        if (!empty($arrayParametros['strCodigoSolicitud'])){  
            //cuerpo del query
            $sqlWhere .= "AND IDSC.VALOR = :strCodigoSolicitud ";
            //query de datos
            $query->setParameter('strCodigoSolicitud', $arrayParametros['strCodigoSolicitud']);
        }
                
        //query de datos
        $sqlInterno = $sqlWhere;
        if($arrayParametros['boolMasivas'] == 'true'){
            $sqlJoinInterno = $sqlJoin." LEFT JOIN INFO_DETALLE_SOL_CARACT IDSC   ON IDS.ID_DETALLE_SOLICITUD = IDSC.DETALLE_SOLICITUD_ID 
                                         LEFT JOIN ADMI_CARACTERISTICA ACAR   ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA ";
            $sqlInterno = "WHERE IDS.ID_DETALLE_SOLICITUD IN (
                            SELECT DISTINCT                    
                            IDSC.VALOR ID_PADRE ".$sqlFrom.$sqlJoinInterno.$sqlWhere;
                        
            if (!empty($arrayParametros['strEstadoDetalles']) &&
                ((!empty($arrayParametros['boolReqAprobPrecio']) && $arrayParametros['boolReqAprobPrecio'] == 'true') ||
                (!empty($arrayParametros['boolReqAprobRadio']) && $arrayParametros['boolReqAprobRadio'] == 'true') ||
                (!empty($arrayParametros['boolReqAprobIpccl2']) && $arrayParametros['boolReqAprobIpccl2'] == 'true'))){
                //cuerpo del query
                $sqlInterno .= "AND IDS.ESTADO IN (:strEstadoDetalle) ";
                //query de datos
                $query->setParameter('strEstadoDetalle', explode(",",$arrayParametros['strEstadoDetalles']));
                
                if (!empty($arrayParametros['strEstadoAprobPrecio']))
                {
                    //cuerpo del query
                    $sqlInterno .= "AND EXISTS (SELECT VALOR
                                        FROM INFO_DETALLE_SOL_CARACT IDSC
                                        JOIN ADMI_CARACTERISTICA ACAR ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA
                                        WHERE 
                                        IDSC.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD AND
                                        ACAR.DESCRIPCION_CARACTERISTICA = :strCaracteristicaCP
                                        AND IDSC.VALOR IN (:strEstadoAprobPrecio) 
                                    ) ";
                    //query de datos
                    $query->setParameter('strCaracteristicaCP', 'Estado Cambio Precio');
                    $query->setParameter('strEstadoAprobPrecio', explode(",",$arrayParametros['strEstadoAprobPrecio']));
                }
                
                if (!empty($arrayParametros['strEstadoAprobRadio']))
                {
                    //cuerpo del query
                    $sqlInterno .= "AND EXISTS (SELECT VALOR
                                        FROM INFO_DETALLE_SOL_CARACT IDSC
                                        JOIN ADMI_CARACTERISTICA ACAR ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA
                                        WHERE 
                                        IDSC.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD AND
                                        ACAR.DESCRIPCION_CARACTERISTICA = :strCaracteristicaRadio
                                        AND IDSC.VALOR IN (:strEstadoAprobRadio) 
                                    ) ";
                    //query de datos
                    $query->setParameter('strCaracteristicaRadio', 'Estado Radio');
                    $query->setParameter('strEstadoAprobRadio', explode(",",$arrayParametros['strEstadoAprobRadio']));
                }
                
                if (!empty($arrayParametros['strEstadoAprobIpccl2']))
                {
                    //cuerpo del query
                    $sqlInterno .= "AND EXISTS (SELECT VALOR
                                        FROM INFO_DETALLE_SOL_CARACT IDSC
                                        JOIN ADMI_CARACTERISTICA ACAR ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA
                                        WHERE 
                                        IDSC.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD AND
                                        ACAR.DESCRIPCION_CARACTERISTICA = :strCaracteristicaIpccl2
                                        AND IDSC.VALOR IN (:strEstadoAprobIpccl2)
                                    ) ";
                    //query de datos
                    $query->setParameter('strCaracteristicaIpccl2', 'Estado IPCCL2');
                    $query->setParameter('strEstadoAprobIpccl2', explode(",",$arrayParametros['strEstadoAprobIpccl2']));
                }
            }
            
            if (!empty($arrayParametros['txtClienteIdentificacion']))
            {
                //cuerpo del query
                $sqlInterno .= "AND EXISTS (SELECT IP1.ID_PERSONA
                                    FROM INFO_PERSONA IP1 
                                    WHERE IP1.ID_PERSONA = IP.ID_PERSONA
                                    AND ( IP1.IDENTIFICACION_CLIENTE like (:txtClienteIdentificacion) 
                                    OR UPPER(IP1.RAZON_SOCIAL) like UPPER(:txtClienteIdentificacion) 
                                    OR UPPER(IP1.NOMBRES) like UPPER(:txtClienteIdentificacion) 
                                    OR UPPER(IP1.APELLIDOS) like UPPER(:txtClienteIdentificacion) ) 
                                ) ";
                //query de datos
                $query->setParameter('txtClienteIdentificacion', '%' . $arrayParametros['txtClienteIdentificacion'] . '%');
            }
            
            $sqlInterno .= ") ";
            
            if (!empty($arrayParametros['strEstado'])){            
                //cuerpo del query
                $sqlInterno .= "AND IDS.ESTADO = :strEstado ";
                //query de datos
                $query->setParameter('strEstado', $arrayParametros['strEstado']);
            }   
            
            if (!empty($arrayParametros['boolReqArchivo']) && $arrayParametros['boolReqArchivo'] == 'true'){            
                //cuerpo del query
                $sqlInterno .= "AND EXISTS (SELECT VALOR
                                    FROM INFO_DETALLE_SOL_CARACT IDSC
                                    JOIN ADMI_CARACTERISTICA ACAR ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA
                                    WHERE 
                                    IDSC.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD AND
                                    UPPER(ACAR.DESCRIPCION_CARACTERISTICA) = :strCaracteristicaArchivo
                                ) ";
                //query de datos
                $query->setParameter('strCaracteristicaArchivo', 'ARCHIVO');
            }
            
            if (!empty($arrayParametros['txtCodigoSolicitudMasiva'])){
                  //cuerpo del query
                $sqlInterno .= "AND EXISTS (SELECT IDSC2.VALOR
                                    FROM INFO_DETALLE_SOL_CARACT IDSC2
                                    JOIN ADMI_CARACTERISTICA ACAR2 ON IDSC2.CARACTERISTICA_ID = ACAR2.ID_CARACTERISTICA
                                    WHERE 
                                    IDSC2.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD AND
                                   ACAR2.DESCRIPCION_CARACTERISTICA = :strCaracteristicaSolRef
                                    AND IDSC2.VALOR = :txtCodigoSolicitudMasiva
                                ) ";
                //query de datos
                $query->setParameter('strCaracteristicaSolRef', 'Referencia Solicitud Masiva');
                $query->setParameter('txtCodigoSolicitudMasiva', $arrayParametros['txtCodigoSolicitudMasiva']);
            }
        }
        
        if (!empty($arrayParametros['intIdPadre'])){
            $sqlJoin .= " LEFT JOIN INFO_DETALLE_SOL_CARACT IDSC   ON IDS.ID_DETALLE_SOLICITUD = IDSC.DETALLE_SOLICITUD_ID 
                          LEFT JOIN ADMI_CARACTERISTICA ACAR   ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA ";
            //cuerpo del query
            $sqlInterno .= "AND IDSC.VALOR = :intIdPadre ";
            //query de datos
            $query->setParameter('intIdPadre', $arrayParametros['intIdPadre']);
        }
        
        $sql = $sqlSelect.$sqlFrom.$sqlJoin.$sqlInterno." ORDER BY IDS.FE_CREACION DESC ";
        
        $rsm->addScalarResult('ID_DETALLE_SOLICITUD', 'idDetalleSolicitud','integer');
        $rsm->addScalarResult('ID_SERVICIO', 'idServicio', 'integer');
        $rsm->addScalarResult('ID_PUNTO', 'idPunto', 'integer');
        $rsm->addScalarResult('ID_PERSONA', 'idCliente','string');
        $rsm->addScalarResult('RAZON_SOCIAL', 'razonSocialCliente','string');
        $rsm->addScalarResult('NOMBRES', 'nombreCliente','string');
        $rsm->addScalarResult('APELLIDOS', 'apellidoCliente','string');
        $rsm->addScalarResult('USR_VENDEDOR', 'usrVendedor','string');
        $rsm->addScalarResult('LOGIN', 'login','string');
        $rsm->addScalarResult('DESCRIPCION_SOLICITUD', 'descripcionSolicitud','string');
        $rsm->addScalarResult('FE_CREACION', 'feCreacion','string');
        $rsm->addScalarResult('FE_PLANIFICACION', 'fePlanificacion','string');
        $rsm->addScalarResult('FE_EJECUCION', 'feEjecucion','string');
        $rsm->addScalarResult('FE_RECHAZO', 'feRechazo','string');
        $rsm->addScalarResult('OBSERVACION', 'observacion','string');
        $rsm->addScalarResult('TIPO_ORDEN', 'tipoOrden','string');
        $rsm->addScalarResult('ESTADO', 'estado','string');
        $rsm->addScalarResult('ID_PRODUCTO', 'productoId','integer');
        $rsm->addScalarResult('DESCRIPCION_PRODUCTO', 'descripcionProducto','string');
        $rsm->addScalarResult('NOMBRE_MOTIVO', 'motivo','string');
        $rsm->addScalarResult('NOMBRE_VENDEDOR', 'nombreVendedor','string');
        $rsm->addScalarResult('USR_CREACION', 'usrCreacion','string');
        $rsm->addScalarResult('ARCHIVO', 'archivo','string');
        $rsm->addScalarResult('ID_SOLICITUD_REFERENCIA', 'idDetalleSolicitudReferencia','string');
        $rsm->addScalarResult('PRECIO_DESCUENTO', 'precioDescuento','integer');
        $rsm->addScalarResult('PORCENTAJE_DESCUENTO', 'porcentajeDescuento','integer');
        if($arrayParametros['boolMasivas'] == 'false')
        {
            $rsm->addScalarResult('NOMBRE_MODELO_ELEMENTO', 'nombreModeloElemento', 'string');
            $rsm->addScalarResult('CAPACIDAD1_MODELO_ELEMENTO', 'capacidad1ModeloElemento', 'integer');
            $rsm->addScalarResult('CAPACIDAD2_MODELO_ELEMENTO', 'capacidad2ModeloElemento', 'integer');
        }
        
        $query->setSQL($sql);
        $total=count($query->getScalarResult());
        
        if(!empty($arrayParametros['intStart']) && !empty($arrayParametros['intLimit'])) {
            $query->setParameter('start', $arrayParametros['intStart']+1);
            $query->setParameter('limit', ($arrayParametros['intStart'] + $arrayParametros['intLimit'])); 
            $sql = "SELECT a.*, rownum as intDoctrineRowNum FROM (".$sql.") a WHERE ROWNUM <= :limit";
            if($arrayParametros['intStart'] > 0) {
                $sql = "SELECT * FROM (".$sql.") WHERE intDoctrineRowNum >= :start";
            }
            $query->setSQL($sql);
        }        
        $datos                  = $query->getScalarResult();
        $resultado['registros'] = $datos;
        $resultado['total']     = $total;
        return $resultado;
    }
    
    /**
     * findTotalSolicitudesPorEstado, obtiene solicitudes enviando criterios de busqueda
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0 27-03-2016
     * @since 1.0
     * 
     * @author Anabelle Penaherrera <apenaherrera@telconet.ec>
     * @version 1.1  09-02-2017
     * Se reporta Bug que existen Solicitudes masivas que estan quedando en estado Pendiente y sus detalles Finalizados
     * El metodo tiene un error al comparar IDSC.VALOR = :idDetalleSolicitud , debe hacerse un casteo a numero, dado que el campo valor es string,
     * caso contrario se genera un error ORA-01722: invalid number.
     * 
     * @param array  $arrayParametros Obtiene los criterios de busqueda
     * @return array $arrayResultado  Retorna el array de datos y conteo de datos
     */
    public function findTotalSolicitudesPorEstado($arrayParametros) {
        
        $rsm= new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null,$rsm);
        //Query que obtiene los Datos   
        
        if (!empty($arrayParametros['strEstado'])){  
            //cuerpo del query
            $sql = "SELECT COUNT(*) TOTAL 
                    FROM INFO_DETALLE_SOLICITUD IDS 
                    LEFT JOIN INFO_DETALLE_SOL_CARACT IDSC   ON IDS.ID_DETALLE_SOLICITUD = IDSC.DETALLE_SOLICITUD_ID  
                    LEFT JOIN ADMI_CARACTERISTICA ACAR   ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA 
                    WHERE 
                    ACAR.DESCRIPCION_CARACTERISTICA = :strDescripcionCaracteristica                     
                    AND COALESCE(TO_NUMBER(REGEXP_SUBSTR(IDSC.VALOR,'^\d+')),0) = :idDetalleSolicitud
                    AND IDS.ESTADO = :strEstado";
            //query de datos
            $query->setParameter('strEstado', $arrayParametros['strEstado']);
        }
        else if(!empty($arrayParametros['strEstadoCambioPrecio']) 
                || !empty($arrayParametros['strEstadoRadio']) 
                || !empty($arrayParametros['strEstadoIpccl2']))
        {
            //cuerpo del query
            $sql = "SELECT  COUNT(T1.ID_DETALLE_SOLICITUD) TOTAL 
                    FROM 
                    (SELECT IDS.* 
                    FROM INFO_DETALLE_SOLICITUD IDS 
                    LEFT JOIN INFO_DETALLE_SOL_CARACT IDSC   ON IDS.ID_DETALLE_SOLICITUD = IDSC.DETALLE_SOLICITUD_ID  
                    LEFT JOIN ADMI_CARACTERISTICA ACAR   ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA 
                    WHERE 
                    ACAR.DESCRIPCION_CARACTERISTICA = :strDescripcionCaracteristica                     
                    AND COALESCE(TO_NUMBER(REGEXP_SUBSTR(IDSC.VALOR,'^\d+')),0) = :idDetalleSolicitud) T1 
                    JOIN  
                    (SELECT IDS.*, ACAR.DESCRIPCION_CARACTERISTICA, IDSC.VALOR 
                    FROM INFO_DETALLE_SOLICITUD IDS 
                    LEFT JOIN INFO_DETALLE_SOL_CARACT IDSC   ON IDS.ID_DETALLE_SOLICITUD = IDSC.DETALLE_SOLICITUD_ID  
                    LEFT JOIN ADMI_CARACTERISTICA ACAR   ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA 
                    WHERE 
                    ACAR.DESCRIPCION_CARACTERISTICA = :strDescripcionCaracteristicaEstado 
                    AND IDSC.VALOR = :strEstado ) T2 
                    ON T2.ID_DETALLE_SOLICITUD = T1.ID_DETALLE_SOLICITUD ";
            
            //query de datos
            
            $strDescripcionCaracteristicaEstado = '';
            $strEstado = '';
            if(!empty($arrayParametros['strEstadoCambioPrecio']))
            {
                $strDescripcionCaracteristicaEstado = 'Estado Cambio Precio';
                $strEstado = $arrayParametros['strEstadoCambioPrecio'];
            }
            else if(!empty($arrayParametros['strEstadoRadio']))
            {
                $strDescripcionCaracteristicaEstado = 'Estado Radio';
                $strEstado = $arrayParametros['strEstadoRadio'];
            }
            else if(!empty($arrayParametros['strEstadoIpccl2']))
            {
                $strDescripcionCaracteristicaEstado = 'Estado IPCCL2';
                $strEstado = $arrayParametros['strEstadoIpccl2'];
            }
        
            $query->setParameter('strDescripcionCaracteristicaEstado', $strDescripcionCaracteristicaEstado);
            $query->setParameter('strEstado', $strEstado);
        }
        else
        {
             //cuerpo del query
            $sql = "SELECT COUNT(*) TOTAL 
                    FROM INFO_DETALLE_SOLICITUD IDS 
                    LEFT JOIN INFO_DETALLE_SOL_CARACT IDSC   ON IDS.ID_DETALLE_SOLICITUD = IDSC.DETALLE_SOLICITUD_ID  
                    LEFT JOIN ADMI_CARACTERISTICA ACAR   ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA 
                    WHERE 
                    ACAR.DESCRIPCION_CARACTERISTICA = :strDescripcionCaracteristica                     
                    AND COALESCE(TO_NUMBER(REGEXP_SUBSTR(IDSC.VALOR,'^\d+')),0) = :idDetalleSolicitud
                    AND IDS.ESTADO not in (:strNotInEstado)";
            
            $query->setParameter('strNotInEstado', 'Eliminada');
        }
        $query->setParameter('strDescripcionCaracteristica', 'Referencia Solicitud');
        $query->setParameter('idDetalleSolicitud', $arrayParametros['idDetalleSolicitud']);
        
        $rsm->addScalarResult('TOTAL', 'total','integer');        
        $query->setSQL($sql);
        $datos                  = $query->getScalarResult();
        
        $resultado['total']     = $datos[0]['total'];
        return $resultado;
    }
    
    /**
     * findServiciosEnSolicitudesNoFinalizadas, obtiene servicios enviando criterios de busqueda
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0 02-04-2016
     * @since 1.0
     * @param array  $arrayParametros Obtiene los criterios de busqueda
     * @return array $arrayResultado  Retorna el array de datos y conteo de datos
     * 
     * @author Modificado: Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.1 06-08-2016 -  Se cambio el paso de parametros para los estados finalizados
     * 
     * @author Modificado: Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.2 11-08-2016 -  Se corrigio el estado Eliminada
     */
    public function findServiciosEnSolicitudesNoFinalizadas($arrayParametros) {
        $arrayEstadosFinales = array('Finalizada','Eliminada','Rechazada');
        $rsm                 = new ResultSetMappingBuilder($this->_em);
        $query               = $this->_em->createNativeQuery(null,$rsm);
        //Query que obtiene los Datos
        $sqlSelect="SELECT DISTINCT    
                    IDS.SERVICIO_ID, 
                    IDS.ID_DETALLE_SOLICITUD,
                    IDS.ESTADO ";   
        //Cuerpo del Query
        $sqlFrom = "FROM INFO_DETALLE_SOLICITUD IDS  ";
        
        $sqlJoin = "JOIN INFO_SERVICIO ISER ON ISER.ID_SERVICIO = IDS.SERVICIO_ID 
                    JOIN INFO_PUNTO IPTO ON ISER.PUNTO_ID = IPTO.ID_PUNTO  
                    JOIN ADMI_PRODUCTO APROD ON ISER.PRODUCTO_ID = APROD.ID_PRODUCTO  
                    JOIN INFO_PERSONA_EMPRESA_ROL IPER ON IPTO.PERSONA_EMPRESA_ROL_ID = IPER.ID_PERSONA_ROL 
                    JOIN INFO_PERSONA IP ON IPER.PERSONA_ID = IP.ID_PERSONA 
                    JOIN INFO_EMPRESA_ROL IER ON IPER.EMPRESA_ROL_ID = IER.ID_EMPRESA_ROL ";
        
        $sqlWhere = "WHERE 
                    IER.EMPRESA_COD = :idEmpresa
                    AND IP.ID_PERSONA = :idCliente 
                    AND APROD.ID_PRODUCTO is not null 
                    AND ISER.ESTADO = :strEstado 
                    AND APROD.ID_PRODUCTO = :intIdProducto 
                    AND IDS.ESTADO not in (:strEstadoFinales) ";
        
        $query->setParameter('idEmpresa', $arrayParametros['intIdEmpresa']);
        $query->setParameter('idCliente', $arrayParametros['intIdCliente']);
        $query->setParameter('intIdProducto', $arrayParametros['intIdProducto']);
        $query->setParameter('strEstado','Activo');        
        $query->setParameter('strEstadoFinales',$arrayEstadosFinales);
        
        if (!empty($arrayParametros['strTiposSolicitudes'])){
            $sqlJoin .= "JOIN ADMI_TIPO_SOLICITUD ATS ON ATS.ID_TIPO_SOLICITUD = IDS.TIPO_SOLICITUD_ID ";
            //cuerpo del query
            $sqlWhere .= "AND ATS.DESCRIPCION_SOLICITUD in (:strTiposSolicitudes) ";
            //query de datos
            $query->setParameter('strTiposSolicitudes', explode(",",$arrayParametros['strTiposSolicitudes']));
        }
        
        $sql = $sqlSelect.$sqlFrom.$sqlJoin.$sqlWhere;
        
        $rsm->addScalarResult('SERVICIO_ID', 'servicioId','integer');
        $rsm->addScalarResult('ID_DETALLE_SOLICITUD', 'detalleSolicitudId','integer');
        $rsm->addScalarResult('ESTADO', 'estado', 'string');        
        
        $query->setSQL($sql);
        $total=count($query->getScalarResult());
        if(!empty($arrayParametros['intStart']) && !empty($arrayParametros['intLimit'])) {
            $query->setParameter('start', $arrayParametros['intStart']+1);
            $query->setParameter('limit', ($arrayParametros['intStart'] + $arrayParametros['intLimit'])); 
            $sql = "SELECT a.*, rownum as intDoctrineRowNum FROM (".$sql.") a WHERE ROWNUM <= :limit";
            if($arrayParametros['intStart'] > 0) {
                $sql = "SELECT * FROM (".$sql.") WHERE intDoctrineRowNum >= :start";
            }
            $query->setSQL($sql);
        }
        $datos                  = $query->getScalarResult();
        $resultado['registros'] = $datos;
        $resultado['total']     = $total;
        return $resultado;
    }
    
    
    /**
     * findSolicitudesMasivas, obtiene solicitudes masivas enviando criterios de busqueda
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0 18-07-2016
     * @since 1.0
     * @param array  $arrayParametros Obtiene los criterios de busqueda
     * @return array $arrayResultado  Retorna el array de datos y conteo de datos
     * 
     * @author Modificado: Kevin Baque <kbaque@telconet.ec>
     * @version 1.2 19-11-2018 Se agrega en la consulta el usuario en sesion, IdPersonEmpresaRol
     *                         Adicional se agrega logica para retornar las Solicitudes Masivas de acuerdo
     *                         a la caracteristica de la persona en sesion por medio de las siguiente 
     *                         descripciones de caracteristica:
     *                         'CARGO_GRUPO_ROLES_PERSONAL','ASISTENTE_POR_CARGO'
     *                         Estos cambios solo aplican para Telconet
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 1.3 16-12-2021 - Se establece nueva lógica para visualizar las solicitudes de acuerdo a la región,
     *                           los cambios solo aplican para Telconet.
     *
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 1.4 19-09-2022 - Se establece nuevo filtro para retornar los clientes con el tipo de negocio ISP.
     *
     */
    public function findSolicitudesMasivas($arrayParametros) {       
        
        $rsm= new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null,$rsm);

        $objRsmCount       = new ResultSetMappingBuilder($this->_em);
        $objQueryCount     = $this->_em->createNativeQuery(null, $objRsmCount);
        $objRsmCount->addScalarResult('TOTAL', 'total', 'integer');        

        $strTipo           = ( isset($arrayParametros['strTipoPersonal']) && !empty($arrayParametros['strTipoPersonal']) )
                                ? $arrayParametros['strTipoPersonal'] : 'Otros';
        $strPrefijoEmpresa = ( isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) )
                                ? $arrayParametros['strPrefijoEmpresa'] : '';
        $intIdEmpresa          = ( isset($arrayParametros['intIdEmpresa']) && !empty($arrayParametros['intIdEmpresa']) )
                                 ? $arrayParametros['intIdEmpresa'] : '';
        $intIdPersonEmpresaRol = $arrayParametros['intIdPersonEmpresaRol'] ? intval($arrayParametros['intIdPersonEmpresaRol']) : 0;
        $strRegion             = ( isset($arrayParametros['strRegion']) && !empty($arrayParametros['strRegion']) )
                                 ? $arrayParametros['strRegion'] : '';
        $arrayRolNoPermitido   = ( isset($arrayParametros['arrayRolNoPermitido']) && !empty($arrayParametros['arrayRolNoPermitido']) )
                                 ? $arrayParametros['arrayRolNoPermitido'] : '';
        $strIsp                = ( isset($arrayParametros['strIsp']) && !empty($arrayParametros['strIsp']) ) ? $arrayParametros['strIsp'] : 'No';
        $arrayEstados      = array("Activo","Pendiente","Modificado");
        $strEstadoActivo   = 'Activo';
        $strDescripcion    = 'ASISTENTE_POR_CARGO';
        $strQueryIn        = " ";
        $boolContinuar     = true;
        //Query que obtiene los Datos
        $strSelectCount = " SELECT COUNT(*) AS TOTAL ";
        $sqlSelect="SELECT IDS.ID_DETALLE_SOLICITUD, 
                    ATS.DESCRIPCION_SOLICITUD, 
                    COMEK_CONSULTAS.F_GET_SOLMA_NOMBRE_CLIENTE(IDS.ID_DETALLE_SOLICITUD) CLIENTE, 
                    COMEK_CONSULTAS.F_GET_SOLMA_NOMBRE_PRODUCTO(IDS.ID_DETALLE_SOLICITUD) PRODUCTO, 
                    TO_CHAR(IDS.FE_CREACION, 'DD-MM-YYYY HH24:MI') FE_CREACION, 
                    (SELECT TO_CHAR(IDSH.FE_FIN_PLAN,'DD-MM-YYYY HH24:MI') 
                    FROM DB_COMERCIAL.INFO_DETALLE_SOL_HIST IDSH 
                    WHERE IDSH.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD 
                    AND Estado                      = 'Pendiente' 
                    AND IDSH.FE_FIN_PLAN           IS NOT NULL 
                    ) FE_PLANIFICACION, 
                    TO_CHAR(IDS.FE_EJECUCION, 'DD-MM-YYYY HH24:MI') FE_EJECUCION, 
                    TO_CHAR(IDS.FE_RECHAZO, 'DD-MM-YYYY HH24:MI') FE_RECHAZO, 
                    IDS.ESTADO, 
                    IDS.USR_CREACION, 
                    COMEK_CONSULTAS.F_GET_SOLMA_CARACTERISTICA(IDS.ID_DETALLE_SOLICITUD,'Archivo') ARCHIVO, 
                    COMEK_CONSULTAS.F_GET_SOLMA_CARACTERISTICA(IDS.ID_DETALLE_SOLICITUD,'Referencia Solicitud Masiva') ID_SOLICITUD_REFERENCIA,
                    COMEK_CONSULTAS.F_GET_SOLMA_TOTAL_DET_EST(IDS.ID_DETALLE_SOLICITUD,'Aprobada') TOTAL_APROBADAS, 
                    COMEK_CONSULTAS.F_GET_SOLMA_TOTAL_DET_EST(IDS.ID_DETALLE_SOLICITUD,'Rechazada') TOTAL_RECHAZADAS, 
                    COMEK_CONSULTAS.F_GET_SOLMA_TOTAL_DET_EST(IDS.ID_DETALLE_SOLICITUD,'EnProceso') TOTAL_PROCESO, 
                    COMEK_CONSULTAS.F_GET_SOLMA_TOTAL_DET_EST(IDS.ID_DETALLE_SOLICITUD,'Fallo') TOTAL_FALLO, 
                    COMEK_CONSULTAS.F_GET_SOLMA_TOTAL_DET_EST(IDS.ID_DETALLE_SOLICITUD,'Eliminada') TOTAL_ELIMINADA, 
                    COMEK_CONSULTAS.F_GET_SOLMA_TOTAL_DET_EST(IDS.ID_DETALLE_SOLICITUD,'Finalizada') TOTAL_FINALIZADAS ";
        
        if (!empty($arrayParametros['totalesExtra']) && $arrayParametros['totalesExtra'] == true)
        {
            
            $sqlSelect .= ", COMEK_CONSULTAS.F_GET_SOLMA_TOTAL_DET_EST(IDS.ID_DETALLE_SOLICITUD,'') TOTAL_DETALLES, 
                           COMEK_CONSULTAS.F_GET_SOLMA_TOTAL_DET_EST_CAR(IDS.ID_DETALLE_SOLICITUD,'Estado Cambio Precio', 'N/A') DET_CP_NA, 
                           COMEK_CONSULTAS.F_GET_SOLMA_TOTAL_DET_EST_CAR(IDS.ID_DETALLE_SOLICITUD,'Estado Cambio Precio', 'Aprobada') DET_CP_APROBADAS, 
                           COMEK_CONSULTAS.F_GET_SOLMA_TOTAL_DET_EST_CAR(IDS.ID_DETALLE_SOLICITUD,'Estado Radio', 'N/A') DET_RADIO_NA, 
                           COMEK_CONSULTAS.F_GET_SOLMA_TOTAL_DET_EST_CAR(IDS.ID_DETALLE_SOLICITUD,'Estado Radio', 'Aprobada') DET_RADIO_APROBADAS, 
                           COMEK_CONSULTAS.F_GET_SOLMA_TOTAL_DET_EST_CAR(IDS.ID_DETALLE_SOLICITUD,'Estado IPCCL2', 'N/A') DET_IPCCL2_NA, 
                           COMEK_CONSULTAS.F_GET_SOLMA_TOTAL_DET_EST_CAR(IDS.ID_DETALLE_SOLICITUD,'Estado IPCCL2', 'Aprobada') DET_IPCCL2_APROBADAS ";
        }
        
        $sqlFrom = "FROM 
                    DB_COMERCIAL.INFO_DETALLE_SOLICITUD IDS ";
        
        $sqlJoin = "LEFT JOIN DB_COMERCIAL.ADMI_TIPO_SOLICITUD ATS 
                    ON IDS.TIPO_SOLICITUD_ID = ATS.ID_TIPO_SOLICITUD ";
        
        $sqlWhere = "WHERE 
                    IDS.ID_DETALLE_SOLICITUD IN ( ";
        
        $sqlSubQuery = "SELECT 
                        DISTINCT COALESCE(TO_NUMBER(REGEXP_SUBSTR(IDSC.VALOR,'^\d+')),0) 
                        FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD IDS 
                        LEFT JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT IDSC 
                        ON IDS.ID_DETALLE_SOLICITUD = IDSC.DETALLE_SOLICITUD_ID  
                        LEFT JOIN DB_COMERCIAL.INFO_SERVICIO ISER 
                        ON IDS.SERVICIO_ID = ISER.ID_SERVICIO 
                        LEFT JOIN DB_COMERCIAL.ADMI_TIPO_SOLICITUD ATS 
                        ON IDS.TIPO_SOLICITUD_ID = ATS.ID_TIPO_SOLICITUD 
                        LEFT JOIN DB_COMERCIAL.INFO_PUNTO IPTO 
                        ON ISER.PUNTO_ID = IPTO.ID_PUNTO 
                        LEFT JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER 
                        ON IPTO.PERSONA_EMPRESA_ROL_ID = IPER.ID_PERSONA_ROL 
                        LEFT JOIN DB_COMERCIAL.INFO_EMPRESA_ROL IER 
                        ON IPER.EMPRESA_ROL_ID = IER.ID_EMPRESA_ROL 
                        LEFT JOIN DB_COMERCIAL.ADMI_CARACTERISTICA ACAR 
                        ON IDSC.CARACTERISTICA_ID                  = ACAR.ID_CARACTERISTICA ";

        if( ($strPrefijoEmpresa == 'TN' && $strTipo != 'Otros' ) && !empty($intIdPersonEmpresaRol) && $strIsp == "No")
        {
            $sqlSubQuery  .= "LEFT JOIN DB_COMERCIAL.INFO_PERSONA IPV ON IPTO.USR_VENDEDOR = IPV.LOGIN ";
            $boolContinuar = false;
            if( $strTipo == 'GERENTE_VENTAS' && !empty($strRegion) && !empty($arrayRolNoPermitido) )
            {
                $sqlSubQuery  .=" LEFT JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPERV ON IPERV.PERSONA_ID    = IPV.ID_PERSONA
                                  LEFT JOIN DB_COMERCIAL.INFO_OFICINA_GRUPO       IOGV  ON IOGV.ID_OFICINA     = IPERV.OFICINA_ID
                                  LEFT JOIN DB_COMERCIAL.ADMI_CANTON              ACV   ON ACV.ID_CANTON       = IOGV.CANTON_ID
                                  LEFT JOIN DB_COMERCIAL.INFO_EMPRESA_ROL         IERV  ON IERV.ID_EMPRESA_ROL = IPERV.EMPRESA_ROL_ID
                                  LEFT JOIN DB_COMERCIAL.INFO_EMPRESA_GRUPO       IEGV  ON IEGV.COD_EMPRESA    = IERV.EMPRESA_COD
                                  LEFT JOIN DB_COMERCIAL.ADMI_ROL                 ARV   ON ARV.ID_ROL          = IERV.ROL_ID ";
                $strQueryIn    = " AND IPERV.ESTADO     = :strEstadoActivo
                                   AND IEGV.COD_EMPRESA = :intIdEmpresa
                                   AND IEGV.PREFIJO     = :strPrefijoEmpresa
                                   AND ACV.REGION       = :strRegion
                                   AND IPV.ESTADO              IN (:arrayEstados)
                                   AND ARV.DESCRIPCION_ROL NOT IN (:arrayRolNoPermitido) ";
                $query->setParameter('intIdEmpresa',        $intIdEmpresa);
                $query->setParameter('strPrefijoEmpresa',   $strPrefijoEmpresa);
                $query->setParameter('strRegion',           $strRegion);
                $query->setParameter('arrayEstados',        $arrayEstados);
                $query->setParameter('arrayRolNoPermitido', $arrayRolNoPermitido);
                $objQueryCount->setParameter('intIdEmpresa',        $intIdEmpresa);
                $objQueryCount->setParameter('strPrefijoEmpresa',   $strPrefijoEmpresa);
                $objQueryCount->setParameter('strRegion',           $strRegion);
                $objQueryCount->setParameter('arrayEstados',        $arrayEstados);
                $objQueryCount->setParameter('arrayRolNoPermitido', $arrayRolNoPermitido);
            }
            elseif( $strTipo == 'SUBGERENTE' )
            {
                $strQueryIn = " AND IPV.LOGIN IN
                                (SELECT IPVENDEDOR.LOGIN
                                    FROM INFO_PERSONA IPVENDEDOR
                                    JOIN INFO_PERSONA_EMPRESA_ROL IPERSUB
                                    ON IPERSUB.PERSONA_ID                       = IPVENDEDOR.ID_PERSONA
                                WHERE IPERSUB.ESTADO                            = :strEstadoActivo
                                    AND IPVENDEDOR.ESTADO                       = :strEstadoActivo
                                    AND (IPERSUB.REPORTA_PERSONA_EMPRESA_ROL_ID = :intIdPersonEmpresaRol
                                    OR IPERSUB.ID_PERSONA_ROL                   = :intIdPersonEmpresaRol))
                              ";
                $query->setParameter('intIdPersonEmpresaRol', $intIdPersonEmpresaRol);
                $objQueryCount->setParameter('intIdPersonEmpresaRol', $intIdPersonEmpresaRol);
            }
            elseif( $strTipo == 'ASISTENTE' )
            {
                $strQueryIn = " AND IPV.LOGIN IN
                                (SELECT IPVENDEDOR.LOGIN
                                    FROM INFO_PERSONA_EMPRESA_ROL_CARAC   IPERCASIS
                                    JOIN DB_COMERCIAL.ADMI_CARACTERISTICA ACASIS     ON ACASIS.ID_CARACTERISTICA = IPERCASIS.CARACTERISTICA_ID
                                    JOIN INFO_PERSONA                     IPVENDEDOR ON IPVENDEDOR.ID_PERSONA    = IPERCASIS.VALOR
                                WHERE IPERCASIS.PERSONA_EMPRESA_ROL_ID        = :intIdPersonEmpresaRol
                                        AND ACASIS.DESCRIPCION_CARACTERISTICA = :strDescripcion
                                        AND ACASIS.ESTADO                     = :strEstadoActivo
                                        AND IPERCASIS.ESTADO                  = :strEstadoActivo
                                        AND IPVENDEDOR.ESTADO                 = :strEstadoActivo )
                              ";
                $query->setParameter('strDescripcion', $strDescripcion);
                $query->setParameter('intIdPersonEmpresaRol', $intIdPersonEmpresaRol);
                $objQueryCount->setParameter('strDescripcion', $strDescripcion);
                $objQueryCount->setParameter('intIdPersonEmpresaRol', $intIdPersonEmpresaRol);
            }
            elseif( $strTipo == 'VENDEDOR' )
            {
                $strQueryIn = " AND IPV.LOGIN IN
                                (SELECT IPVENDEDOR.LOGIN
                                    FROM INFO_PERSONA             IPVENDEDOR
                                    JOIN INFO_PERSONA_EMPRESA_ROL IPERVENDEDOR ON IPERVENDEDOR.PERSONA_ID = IPVENDEDOR.ID_PERSONA
                                WHERE IPERVENDEDOR.ID_PERSONA_ROL    = :intIdPersonEmpresaRol
                                    AND IPERVENDEDOR.ESTADO          = :strEstadoActivo
                                    AND IPVENDEDOR.ESTADO            = :strEstadoActivo)
                              ";
                $query->setParameter('intIdPersonEmpresaRol', $intIdPersonEmpresaRol);
                $objQueryCount->setParameter('intIdPersonEmpresaRol', $intIdPersonEmpresaRol);
            }
            $query->setParameter('strEstadoActivo', $strEstadoActivo);
            $objQueryCount->setParameter('strEstadoActivo', $strEstadoActivo);
        }
        if (!empty($arrayParametros['txtClienteIdentificacion']))
        {
            $sqlSubQuery .= "LEFT JOIN DB_COMERCIAL.INFO_PERSONA IP ON IPER.PERSONA_ID = IP.ID_PERSONA ";
        }
       
        if( !empty($arrayParametros['strVendedor']) && $boolContinuar)
        {
            $sqlSubQuery .= "LEFT JOIN DB_COMERCIAL.INFO_PERSONA IPV ON IPTO.USR_VENDEDOR = IPV.LOGIN ";
        }
        
        $sqlSubQuery .= "WHERE IER.EMPRESA_COD                      = :idEmpresa 
                        AND ACAR.DESCRIPCION_CARACTERISTICA        = :strDescCaractRefSol ";
        
        $query->setParameter('idEmpresa', $arrayParametros['intIdEmpresa']);
        $query->setParameter('strDescCaractRefSol', 'Referencia Solicitud');
        $objQueryCount->setParameter('idEmpresa', $arrayParametros['intIdEmpresa']);
        $objQueryCount->setParameter('strDescCaractRefSol', 'Referencia Solicitud');
        if( !$boolContinuar )
        {
            $sqlSubQuery .= $strQueryIn;
        }
        $strWhereIsp = "";
        if($strIsp == "Si")
        {
            $sqlSubQuery  .= " AND IPTO.TIPO_NEGOCIO_ID  IN (SELECT ATN.ID_TIPO_NEGOCIO 
                                FROM DB_COMERCIAL.ADMI_TIPO_NEGOCIO ATN WHERE ATN.CODIGO_TIPO_NEGOCIO = :CODIGO_TIPO_NEGOCIO ) ";
            $query->setParameter('CODIGO_TIPO_NEGOCIO', 'ISP');
            $objQueryCount->setParameter('CODIGO_TIPO_NEGOCIO', 'ISP');
        }
        elseif($strIsp == "No" && $strTipo == 'SUBGERENTE')
        {
            $sqlSubQuery  .= " AND IPTO.TIPO_NEGOCIO_ID  IN (SELECT ATN.ID_TIPO_NEGOCIO 
                                FROM DB_COMERCIAL.ADMI_TIPO_NEGOCIO ATN WHERE ATN.CODIGO_TIPO_NEGOCIO != :CODIGO_TIPO_NEGOCIO ) ";
            $query->setParameter('CODIGO_TIPO_NEGOCIO', 'ISP');
            $objQueryCount->setParameter('CODIGO_TIPO_NEGOCIO', 'ISP');
        }

        if (!empty($arrayParametros['strCodigoSolicitud'])){  
            //cuerpo del query
            $sqlSubQuery .= "AND IDSC.VALOR = :strCodigoSolicitud ";
            //query de datos
            $query->setParameter('strCodigoSolicitud', $arrayParametros['strCodigoSolicitud']);
            $objQueryCount->setParameter('strCodigoSolicitud', $arrayParametros['strCodigoSolicitud']);
        }
        
        if (!empty($arrayParametros['intIdItemMenu'])){
            //cuerpo del query
            $sqlSubQuery .= "AND ATS.ITEM_MENU_ID = :intIdItemMenu ";
            //query de datos
            $query->setParameter('intIdItemMenu', $arrayParametros['intIdItemMenu']);
            $objQueryCount->setParameter('intIdItemMenu', $arrayParametros['intIdItemMenu']);
        }
        
        if( !empty($arrayParametros['strVendedor']) && $boolContinuar)
        {
            //cuerpo del query
            $sqlSubQuery .= "AND ( CONCAT(LOWER(IPV.NOMBRES),CONCAT(' ',LOWER(IPV.APELLIDOS))) like LOWER(:strVendedor) ";
            $sqlSubQuery .= "OR LOWER(IDS.USR_CREACION) like LOWER(:strVendedor)) ";
            //query de datos
            $query->setParameter('strVendedor', '%'.$arrayParametros['strVendedor'].'%');
            $objQueryCount->setParameter('strVendedor', '%'.$arrayParametros['strVendedor'].'%');
        }
        
        if (!empty($arrayParametros['strLogin'])){
            //cuerpo del query
            $sqlSubQuery .= "AND UPPER(IPTO.LOGIN) like UPPER(:strLogin) ";
            //query de datos
            $query->setParameter('strLogin', $arrayParametros['strLogin'].'%');
            $objQueryCount->setParameter('strLogin', $arrayParametros['strLogin'].'%');
        }
        
        if (!empty($arrayParametros['intIdPuntoCobertura'])){
            //cuerpo del query
            $sqlSubQuery .= "AND IPTO.PUNTO_COBERTURA_ID = :intIdPuntoCobertura ";
            //query de datos
            $query->setParameter('intIdPuntoCobertura', $arrayParametros['intIdPuntoCobertura']);
            $objQueryCount->setParameter('intIdPuntoCobertura', $arrayParametros['intIdPuntoCobertura']);
        }
        
        if (!empty($arrayParametros['intIdProducto'])){
            //cuerpo del query
            $sqlSubQuery .= "AND ISER.PRODUCTO_ID = :intIdProducto ";
            //query de datos
            $query->setParameter('intIdProducto', $arrayParametros['intIdProducto']);
            $objQueryCount->setParameter('intIdProducto', $arrayParametros['intIdProducto']);
        }
        
        if (!empty($arrayParametros['strEstadoDetalles']) &&
                ((!empty($arrayParametros['boolReqAprobPrecio']) && $arrayParametros['boolReqAprobPrecio'] == 'true') ||
                (!empty($arrayParametros['boolReqAprobRadio']) && $arrayParametros['boolReqAprobRadio'] == 'true') ||
                (!empty($arrayParametros['boolReqAprobIpccl2']) && $arrayParametros['boolReqAprobIpccl2'] == 'true')))
        {
            if(empty($arrayParametros['strConector']))
            {
                $arrayParametros['strConector'] = 'AND';
            }
            
            //cuerpo del query
            $sqlSubQuery .= "AND IDS.ESTADO IN (:strEstadoDetalle) ";
            //query de datos
            $query->setParameter('strEstadoDetalle', explode(",",$arrayParametros['strEstadoDetalles']));
            $objQueryCount->setParameter('strEstadoDetalle', explode(",",$arrayParametros['strEstadoDetalles']));
            $boolEstados = false;
            $sqlSubQueryEstados = '';
            if (!empty($arrayParametros['strEstadoAprobPrecio']))
            {
                $boolEstados = true;
                $sqlSubQueryEstados .= empty($sqlSubQueryEstados) ? 'AND ( ' : $arrayParametros['strConector'];
                //cuerpo del query
                $sqlSubQueryEstados .= " EXISTS (SELECT VALOR
                                    FROM DB_COMERCIAL.INFO_DETALLE_SOL_CARACT IDSC
                                    JOIN DB_COMERCIAL.ADMI_CARACTERISTICA ACAR ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA
                                    WHERE 
                                    IDSC.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD AND
                                    ACAR.DESCRIPCION_CARACTERISTICA = :strCaracteristicaCP
                                    AND IDSC.VALOR IN (:strEstadoAprobPrecio) 
                                ) ";
                //query de datos
                $query->setParameter('strCaracteristicaCP', 'Estado Cambio Precio');
                $query->setParameter('strEstadoAprobPrecio', explode(",",$arrayParametros['strEstadoAprobPrecio']));
                $objQueryCount->setParameter('strCaracteristicaCP', 'Estado Cambio Precio');
                $objQueryCount->setParameter('strEstadoAprobPrecio', explode(",",$arrayParametros['strEstadoAprobPrecio']));
            }

            if (!empty($arrayParametros['strEstadoAprobRadio']))
            {
                $boolEstados = true;
                $sqlSubQueryEstados .= empty($sqlSubQueryEstados) ? 'AND ( ' : $arrayParametros['strConector'];
                //cuerpo del query
                $sqlSubQueryEstados .= " EXISTS (SELECT VALOR
                                    FROM DB_COMERCIAL.INFO_DETALLE_SOL_CARACT IDSC
                                    JOIN DB_COMERCIAL.ADMI_CARACTERISTICA ACAR ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA
                                    WHERE 
                                    IDSC.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD AND
                                    ACAR.DESCRIPCION_CARACTERISTICA = :strCaracteristicaRadio
                                    AND IDSC.VALOR IN (:strEstadoAprobRadio) 
                                ) ";
                //query de datos
                $query->setParameter('strCaracteristicaRadio', 'Estado Radio');
                $query->setParameter('strEstadoAprobRadio', explode(",",$arrayParametros['strEstadoAprobRadio']));
                $objQueryCount->setParameter('strCaracteristicaRadio', 'Estado Radio');
                $objQueryCount->setParameter('strEstadoAprobRadio', explode(",",$arrayParametros['strEstadoAprobRadio']));
            }

            if (!empty($arrayParametros['strEstadoAprobIpccl2']))
            {
                $boolEstados = true;
                $sqlSubQueryEstados .= empty($sqlSubQueryEstados) ? 'AND ( ' : $arrayParametros['strConector'];
                //cuerpo del query
                $sqlSubQueryEstados .= " EXISTS (SELECT VALOR
                                    FROM DB_COMERCIAL.INFO_DETALLE_SOL_CARACT IDSC
                                    JOIN DB_COMERCIAL.ADMI_CARACTERISTICA ACAR ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA
                                    WHERE 
                                    IDSC.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD AND
                                    ACAR.DESCRIPCION_CARACTERISTICA = :strCaracteristicaIpccl2
                                    AND IDSC.VALOR IN (:strEstadoAprobIpccl2)
                                ) ";
                //query de datos
                $query->setParameter('strCaracteristicaIpccl2', 'Estado IPCCL2');
                $query->setParameter('strEstadoAprobIpccl2', explode(",",$arrayParametros['strEstadoAprobIpccl2']));
                $objQueryCount->setParameter('strCaracteristicaIpccl2', 'Estado IPCCL2');
                $objQueryCount->setParameter('strEstadoAprobIpccl2', explode(",",$arrayParametros['strEstadoAprobIpccl2']));
            }
            
            $sqlSubQuery .= $sqlSubQueryEstados;
            
            if($boolEstados)
            {
                $sqlSubQuery .= ')';
            }
            
        }
        
        if (!empty($arrayParametros['txtClienteIdentificacion']))
        {
            //cuerpo del query
            $sqlSubQuery .= "AND EXISTS (SELECT IP1.ID_PERSONA
                                FROM DB_COMERCIAL.INFO_PERSONA IP1 
                                WHERE IP1.ID_PERSONA = IP.ID_PERSONA
                                AND ( IP1.IDENTIFICACION_CLIENTE like (:txtClienteIdentificacion) 
                                OR UPPER(IP1.RAZON_SOCIAL) like UPPER(:txtClienteIdentificacion) 
                                OR UPPER(IP1.NOMBRES) like UPPER(:txtClienteIdentificacion) 
                                OR UPPER(IP1.APELLIDOS) like UPPER(:txtClienteIdentificacion) ) 
                            ) ";
            //query de datos
            $query->setParameter('txtClienteIdentificacion', '%' . $arrayParametros['txtClienteIdentificacion'] . '%');
            $objQueryCount->setParameter('txtClienteIdentificacion', '%' . $arrayParametros['txtClienteIdentificacion'] . '%');
        }
        
        if (!empty($arrayParametros['intIdTipoSolicitud']))
        {            
            //cuerpo del query
            $sqlSubQuery .= "AND ATS.ID_TIPO_SOLICITUD = :intIdTipoSolicitud ";
            //query de datos
            $query->setParameter('intIdTipoSolicitud', $arrayParametros['intIdTipoSolicitud']);
            $objQueryCount->setParameter('intIdTipoSolicitud', $arrayParametros['intIdTipoSolicitud']);
        }            
        
        $sqlWhere .= $sqlSubQuery . ") ";
        
        if (!empty($arrayParametros['strEstado'])){            
            //cuerpo del query
            $sqlWhere .= "AND IDS.ESTADO = :strEstado ";
            //query de datos
            $query->setParameter('strEstado', $arrayParametros['strEstado']);
            $objQueryCount->setParameter('strEstado', $arrayParametros['strEstado']);
        }
        
        if (!empty($arrayParametros['strFechaDesdeIngOrd'][0])){
            // Formateo la fecha
            $dateF = explode("-",$arrayParametros['strFechaDesdeIngOrd'][0]);
            $strFechaDesdeIngOrd = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));
            //cuerpo del query
            $sqlWhere .= "AND IDS.FE_CREACION >= :strFechaDesdeIngOrd ";
            //query de datos
            $query->setParameter('strFechaDesdeIngOrd', $strFechaDesdeIngOrd);      
            $objQueryCount->setParameter('strFechaDesdeIngOrd', $strFechaDesdeIngOrd);      
        }
        
        if (!empty($arrayParametros['strFechaHastaIngOrd'][0])){
            // Formateo la fecha
            $dateF = explode("-",$arrayParametros['strFechaHastaIngOrd'][0]);
            $strFechaHastaIngOrd = date("Y/m/d", strtotime($dateF[2]."-".$dateF[1]."-".$dateF[0]));
            //cuerpo del query
            $sqlWhere .= "AND IDS.FE_CREACION <= :strFechaHastaIngOrd ";
            //query de datos
            $query->setParameter('strFechaHastaIngOrd', $strFechaHastaIngOrd);
            $objQueryCount->setParameter('strFechaHastaIngOrd', $strFechaHastaIngOrd);
        }
        
        if (!empty($arrayParametros['boolReqArchivo']) && $arrayParametros['boolReqArchivo'] == 'true'){            
            //cuerpo del query
            $sqlWhere .= "AND EXISTS (SELECT VALOR
                                FROM DB_COMERCIAL.INFO_DETALLE_SOL_CARACT IDSC
                                JOIN DB_COMERCIAL.ADMI_CARACTERISTICA ACAR ON IDSC.CARACTERISTICA_ID = ACAR.ID_CARACTERISTICA
                                WHERE 
                                IDSC.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD AND
                                UPPER(ACAR.DESCRIPCION_CARACTERISTICA) = :strCaracteristicaArchivo
                            ) ";
            //query de datos
            $query->setParameter('strCaracteristicaArchivo', 'ARCHIVO');
            $objQueryCount->setParameter('strCaracteristicaArchivo', 'ARCHIVO');
        }
        
         $sqlOrderBy =" ORDER BY IDS.FE_CREACION DESC ";        
                
        
        $sql = $sqlSelect.$sqlFrom.$sqlJoin.$sqlWhere.$sqlOrderBy;
        
        $rsm->addScalarResult('ID_DETALLE_SOLICITUD', 'idDetalleSolicitud','integer');        
        $rsm->addScalarResult('DESCRIPCION_SOLICITUD', 'descripcionSolicitud','string');
        $rsm->addScalarResult('CLIENTE', 'cliente','string');
        $rsm->addScalarResult('PRODUCTO', 'producto','string');
        $rsm->addScalarResult('FE_CREACION', 'feCreacion','string');
        $rsm->addScalarResult('FE_PLANIFICACION', 'fePlanificacion','string');
        $rsm->addScalarResult('FE_EJECUCION', 'feEjecucion','string');
        $rsm->addScalarResult('FE_RECHAZO', 'feRechazo','string');
        $rsm->addScalarResult('ESTADO', 'estado','string');
        $rsm->addScalarResult('USR_CREACION', 'usrCreacion','string');
        $rsm->addScalarResult('ARCHIVO', 'archivo','string');
        $rsm->addScalarResult('TOTAL_APROBADAS', 'totalAprobadas','integer');
        $rsm->addScalarResult('TOTAL_RECHAZADAS', 'totalRechazadas','integer');
        $rsm->addScalarResult('TOTAL_PROCESO', 'totalProceso','integer');
        $rsm->addScalarResult('TOTAL_FALLO', 'totalFallo','integer');
        $rsm->addScalarResult('TOTAL_ELIMINADA', 'totalEliminada','integer');
        $rsm->addScalarResult('TOTAL_FINALIZADAS', 'totalFinalizadas','integer');
        $rsm->addScalarResult('ID_SOLICITUD_REFERENCIA', 'idDetalleSolicitudReferencia','integer');
        
        if (!empty($arrayParametros['totalesExtra']) && $arrayParametros['totalesExtra'] == true)
        {            
            $rsm->addScalarResult('TOTAL_DETALLES', 'totalDetalles','integer');
            $rsm->addScalarResult('DET_CP_NA', 'totalDetallesCPNA','integer');
            $rsm->addScalarResult('DET_CP_APROBADAS', 'totalDetallesCPAprobados','integer');
            $rsm->addScalarResult('DET_RADIO_NA', 'totalDetallesRadioNA','integer');
            $rsm->addScalarResult('DET_RADIO_APROBADAS', 'totalDetallesRadioAprobados','integer');
            $rsm->addScalarResult('DET_IPCCL2_NA', 'totalDetallesIpccl2NA','integer');
            $rsm->addScalarResult('DET_IPCCL2_APROBADAS', 'totalDetallesIpccl2Aprobados','integer');
        }
        if(isset($arrayParametros['intStart']) && isset($arrayParametros['intLimit']))
        {
            $intInicio     = $arrayParametros['intStart'];
            $intFin        = $arrayParametros['intStart'] + $arrayParametros['intLimit'];
            $strSqlFinal   = '  SELECT * FROM 
                                (
                                    SELECT consultaPrincipal.*,rownum AS consultaPrincipal_rownum 
                                    FROM ('.$sql.') consultaPrincipal 
                                    WHERE rownum<='.$intFin.'
                                ) WHERE consultaPrincipal_rownum >'.$intInicio;
        }
        else
        {
            $strSqlFinal = $sql;
        }
        $query->setSQL($strSqlFinal);
        $datos                  = $query->getScalarResult();
        $resultado['registros'] = $datos;
        $strSqlCount            = $strSelectCount." FROM (".$sql.")";
        $objQueryCount->setSQL($strSqlCount);
        $intTotal               = $objQueryCount->getSingleScalarResult();
        $resultado['total']     = $intTotal;
        return $resultado;
    }
    
    /**
     * 
     * Documentación para el método 'getAsignacionesPredefinidasHorariosSolapados'.
     *
     * Obtiene las asignaciones vehiculares predefinidas cuyo horario se solape con el horario de la asignación que se quiere ingresar
     *
     * @return Response 

     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 23-08-2016
     */
    public function getAsignacionesPredefinidasHorariosSolapados($arrayParametros)
    {
        $rsm                  = new ResultSetMappingBuilder($this->_em);
        $ntvQuery             = $this->_em->createNativeQuery(null, $rsm);
        $arrayResultado       = "";
        try
        {
            $strQuery = "   SELECT detalleSolicitud.ID_DETALLE_SOLICITUD,
                            detalleSolicitudHist.ID_SOLICITUD_HISTORIAL,
                            COALESCE(TO_CHAR(detalleSolicitudHist.FE_INI_PLAN,'HH24:MI'),'') AS HORA_INICIO,
                            COALESCE(TO_CHAR(detalleSolicitudHist.FE_FIN_PLAN,'HH24:MI'),'') AS HORA_FIN,
                            per.ID_PERSONA_ROL as ID_PER_CHOFER_PREDEFINIDO,
                            p.IDENTIFICACION_CLIENTE as IDENTIFICACION_CHOFER_PRED,
                            p.ID_PERSONA AS ID_PERSONA_CHOFER_PREDEFINIDO,
                            p.NOMBRES AS NOMBRES_CHOFER_PREDEFINIDO,
                            p.APELLIDOS AS APELLIDOS_CHOFER_PREDEFINIDO 
                            FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD detalleSolicitud 
                            INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOL_HIST detalleSolicitudHist 
                                ON detalleSolicitudHist.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD 
                            INNER JOIN DB_SOPORTE.INFO_DETALLE detalle 
                                ON detalle.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD
                            INNER JOIN DB_SOPORTE.INFO_DETALLE_ASIGNACION detalleAsignacion
                                ON detalleAsignacion.DETALLE_ID = detalle.ID_DETALLE
                            INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL per 
                                ON per.ID_PERSONA_ROL=detalleAsignacion.PERSONA_EMPRESA_ROL_ID 		
                            INNER JOIN DB_COMERCIAL.INFO_PERSONA p 
                                ON per.PERSONA_ID = p.ID_PERSONA
                                        
                            WHERE detalleSolicitud.TIPO_SOLICITUD_ID = :idTipoSolicitud
                            AND detalleSolicitud.ELEMENTO_ID = :idElemento 
                            AND detalleSolicitud.ESTADO = :estadoActivo 
                            AND detalleSolicitudHist.ESTADO = :estadoActivo 
                            AND detalleSolicitudHist.FE_INI_PLAN is not null
                            AND detalleSolicitudHist.FE_FIN_PLAN is not null
                            AND
                            (
                              (
                                  TO_CHAR( detalleSolicitudHist.FE_FIN_PLAN ,'HH24:MI' ) > :strHoraDesdeAsignacionPredefinida 
                                  AND
                                  TO_CHAR( detalleSolicitudHist.FE_FIN_PLAN ,'HH24:MI' ) < :strHoraHastaAsignacionPredefinida 
                              )

                              OR

                              (
                                  TO_CHAR( detalleSolicitudHist.FE_INI_PLAN ,'HH24:MI' ) < :strHoraHastaAsignacionPredefinida 
                                  AND
                                  TO_CHAR( detalleSolicitudHist.FE_INI_PLAN ,'HH24:MI' ) > :strHoraDesdeAsignacionPredefinida 
                              )

                              OR
                              (
                                  TO_CHAR( detalleSolicitudHist.FE_INI_PLAN ,'HH24:MI' ) <= :strHoraDesdeAsignacionPredefinida
                                  AND
                                  TO_CHAR( detalleSolicitudHist.FE_FIN_PLAN ,'HH24:MI' ) >= :strHoraHastaAsignacionPredefinida
                              )
                              OR
                              (
                                  TO_CHAR( detalleSolicitudHist.FE_INI_PLAN ,'HH24:MI' ) >= :strHoraDesdeAsignacionPredefinida
                                  AND
                                  TO_CHAR( detalleSolicitudHist.FE_FIN_PLAN ,'HH24:MI' ) <= :strHoraHastaAsignacionPredefinida
                              )
                            )
                            ";
            
            $rsm->addScalarResult('ID_DETALLE_SOLICITUD',        'idDetalleSolicitud',               'integer');
            $rsm->addScalarResult('ID_SOLICITUD_HISTORIAL',      'idDetalleSolHist',                 'integer');
            $rsm->addScalarResult('HORA_INICIO',                 'horaDesdeAsignacionPredefinida',   'string');
            $rsm->addScalarResult('HORA_FIN',                    'horaHastaAsignacionPredefinida',   'string');
            $rsm->addScalarResult('NOMBRES_CHOFER_PREDEFINIDO',  'nombresChoferPredefinido',         'string');
            $rsm->addScalarResult('APELLIDOS_CHOFER_PREDEFINIDO','apellidosChoferPredefinido',       'string');
            
            
            $ntvQuery->setParameter('idElemento', $arrayParametros['idElemento']);
            $ntvQuery->setParameter('idTipoSolicitud', $arrayParametros['idTipoSolicitud']);
            $ntvQuery->setParameter('strHoraDesdeAsignacionPredefinida', $arrayParametros['strHoraDesdeAsignacionPredefinida']);
            $ntvQuery->setParameter('strHoraHastaAsignacionPredefinida', $arrayParametros['strHoraHastaAsignacionPredefinida']);
            $ntvQuery->setParameter('estadoActivo', 'Activo');
            
            
            $ntvQuery->setSQL($strQuery);
            $arrayResultado = $ntvQuery->getResult();

        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        return $arrayResultado;
    }

    /**
     * Función encargada para retornar todas las ordenes con un cambio de plan
     * 
     * @author Kevin Baque <kbaque@telconet.ec>
     * @version 1.0 17-08-2018
     * Costo query: 144
     *      
     * @param array $arrayParametrosServiceComercial [strPrefijoEmpresa       => Prefijo de la empresa que realizará la consulta para la información comercial
     *                                                strFechaInicio          => Fecha de inicio de la búsqueda
     *                                                strFechaFin             => Fecha final de la búsqueda
     *                                                strUsrCreacion          => Usuario en sessión
     *                                                strIpCreacion           => Ip del usuario en sessión
     *                                                strDatabaseDsn          => Base de datos a la cual se conectará para realizar la consulta
     *                                                strTipo                 => Tipo
     *                                                strTipoConsulta         => Tipo de consulta
     *                                                strUserBiFinanciero     => Usuario del esquema comercial 'BI_FINANCIERO'
     *                                                strPasswordBiFinanciero => Password del esquema comercial 'BI_FINANCIERO' ]
     *                                                strTipoPersonal         => Tipo del personal
     *                                                intIdPersonEmpresaRol   => Id de la persona
     * 
     * @return array $arrayListaOrdenesUpgrade ['USR_VENDEDOR' => Todos los vendedores de acuerdo al intIdPersonEmpresaRol recibido por parametro
     *                                          'ID_SERVICIO'  => id del servicio de la orden upgrade
     *                                         ]                             
     */    
    public function getListaOrdenes($arrayParametrosServiceComercial)
    {
        $arrayListaOrdenesUpgrade = array();
        try
        {
            $strSelect ="SELECT iser.usr_vendedor ,iser.id_servicio  ";
            $strFrom   ="FROM db_comercial.info_detalle_solicitud ids                 
                            JOIN db_comercial.admi_tipo_solicitud ats ON ids.tipo_solicitud_id=ats.id_tipo_solicitud                  
                            JOIN db_comercial.info_servicio iser ON iser.id_servicio=ids.servicio_id
                            JOIN db_comercial.info_punto ip ON ip.id_punto=iser.punto_id
                            JOIN db_comercial.info_persona iper ON iper.login=iser.usr_vendedor
                            JOIN db_comercial.info_persona_empresa_rol ifper ON ifper.persona_id=iper.id_persona 
                            JOIN db_comercial.info_oficina_grupo        iog  ON iog.id_oficina=ifper.oficina_id
                            JOIN db_comercial.info_empresa_grupo        ieg  ON iog.empresa_id=ieg.cod_empresa ";
            $strWhere  ="WHERE ids.fe_creacion BETWEEN to_date(:FechaInicio,'dd-MON-yy') AND to_date(:FechaFin,'dd-MON-yy')
                            AND ats.descripcion_solicitud IN ('CAMBIO PLAN')
                            AND lower(ids.estado)    = lower('Finalizada')
                            AND lower(ieg.prefijo)   = lower(:strPrefijoEmpresa)
                            AND lower(iog.estado)    = lower('Activo')
                            AND lower(iper.estado)   = lower('Activo')
                            AND lower(ifper.estado)  = lower('Activo')
                            AND ifper.reporta_persona_empresa_rol_id=:IdPersonaEmpresaRol ";

            $strSql = $strSelect.$strFrom.$strWhere;

            $objStmt = $this->_em->getConnection()->prepare($strSql);

            $objStmt->bindValue('FechaInicio'         , $arrayParametrosServiceComercial['strFechaInicio']);
            $objStmt->bindValue('FechaFin'            , $arrayParametrosServiceComercial['strFechaFin']);
            $objStmt->bindValue("IdPersonaEmpresaRol" , $arrayParametrosServiceComercial['intIdPersonEmpresaRol']);
            $objStmt->bindValue("strPrefijoEmpresa" , $arrayParametrosServiceComercial['strPrefijoEmpresa']);

            $objStmt->execute();

            $arrayListaOrdenesUpgrade = $objStmt->fetchAll();
        }
        catch(\Exception $e)
        {
            error_log('getListaOrdenes -> '.$e->getMessage());
            throw($e);
        }   
        return $arrayListaOrdenesUpgrade;
    }
        
    /**
     * getJsonSolicitudReproceso
     *
     * Función que retorna un array con la información consolidada de solicitudes por cargo de reproceso existentes en formato JSON                               
     *
     * @param  int  $intIdPto  Id del punto a consultar
     * @return json $jsonData  Respuesta en formato json.
     *
     * @author Edgar Holguin <eholguin@telconet.ec>
     * @version 1.0 03-03-2017
     */
    public function getJsonSolicitudReproceso($intIdPto)
    {  
        $arrayParametros                             = array();
        $arrayParametros['intIdPunto']               = $intIdPto;
        $arrayParametros['strEstado']                = 'Pendiente';        
        $arrayParametros['strDescripcionSolicitud']  = 'SOLICITUD CARGO REPROCESO DEBITO';
        
        
        $arrayRespuesta                              = array();
        $arrayRespuesta['floatPrecioUnitario']       = 0;
        $arrayRespuesta['intCantidadSolicitudes']    = 0; 
        $arrayRespuesta['intProductoId']             = 0;
        $arrayRespuesta['strDescripcionProd']        = "";         
        
        $objAdmiParametroCabReproceso       = $this->_em->getRepository('schemaBundle:AdmiParametroCab')
                                                        ->findOneBy( array('nombreParametro' => 'CARGO REPROCESO DEBITO', 
                                                                           'estado'          => 'Activo') );
        if(is_object($objAdmiParametroCabReproceso))
        {
            $objParametroDet = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                         ->findOneBy( array( 'estado'      => 'Activo',
                                                             'parametroId' => $objAdmiParametroCabReproceso) );
            if(is_object($objParametroDet))
            {
                $strValorCargoReproceso                 =  $objParametroDet->getValor2();
                $arrayRespuesta['floatPrecioUnitario']  =  floatval($strValorCargoReproceso); 
            }
                       
            
            $objProductoCargoReproceso = $this->_em->getRepository('schemaBundle:AdmiProducto')
                                                  ->findOneBy(array('codigoProducto'=>'CGC')); 
            
            if(is_object($objProductoCargoReproceso))
            {
                $arrayRespuesta['intProductoId']       = $objProductoCargoReproceso->getId();
                $arrayRespuesta['strDescripcionProd']  = $objProductoCargoReproceso->getDescripcionProducto();            
            }

            $arraySolicitudes  = $this->getSolicitudByParametros($arrayParametros);     

            if( count($arraySolicitudes) > 0)
            {
                $arrayRespuesta['intCantidadSolicitudes'] = count($arraySolicitudes);

            }
        }

        $jsonData       = json_encode($arrayRespuesta);

        return $jsonData;
    } 
    
    /**
     * getSolicitudByParametros
     *
     * Método que retorna información de la solicitud según los criterios enviados como parámetro.                                    
     *      
     * @param  array $arrayParametros  [ 'intPtoId'                    => Id del punto
     *                                   'strDescripcionTipoSolicitud' => Descripción del tipo de solicitud. 
     *                                   'strEstadoSolicitud'          => Estado de la solicitud]
     * @return array $arrayResultado
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.0 03-03-2017
     */
    public function getSolicitudByParametros($arrayParametros)
    {
        $arrayResultado = array();

        $objQuery   = $this->_em->createQuery();

        $strQuery   = "SELECT ids ". 
                      "FROM   schemaBundle:InfoDetalleSolicitud ids ".
                      "JOIN   schemaBundle:InfoServicio         iser WITH ids.servicioId       = iser.id ".
                      "JOIN   schemaBundle:InfoPunto            ipto WITH iser.puntoId         = ipto.id ".
                      "JOIN   schemaBundle:AdmiTipoSolicitud    ats WITH ids.tipoSolicitudId   = ats.id  ".
                      "WHERE  ids.estado               = :strEstado  ".
                      "AND    ipto.id                  = :intIdPunto ".
                      "AND    ats.descripcionSolicitud = :strDescripcionSolicitud";

        $objQuery->setParameter('strEstado'              , $arrayParametros['strEstado']);
        $objQuery->setParameter('intIdPunto'             , $arrayParametros['intIdPunto']);
        $objQuery->setParameter('strDescripcionSolicitud', $arrayParametros['strDescripcionSolicitud']);
      
        $objQuery->setDQL($strQuery);
        
        $arrayResultado = $objQuery->getResult();

        return $arrayResultado;
    }    
    
    
    /**
     * getCaracteristicaPorDetalleSol
     * 
     * Obtiene la caracteristica de una la solicitud.
     * 
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.0 03-10-2018
     * costoQuery: 10
     * @param  array $arrayParametros [
     *                                  "intIdDetalleSol"     : Id del detalle de la solicitud  
     *                                  "strDescripcionCaract"   :Descripcion de la caracteristica   
     *                                ]          
     * 
     * @return array $arrayResultado
     */
    public function getCaracteristicaPorDetalleSol($arrayParametros)
    {     
        $objRsm           = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery      = $this->_em->createNativeQuery(null, $objRsm);
        $intIdDetalleSol  = $arrayParametros['intIdDetalleSol'];
        $strDescripCaract = $arrayParametros['strDescripcionCaract'];
        
        $strSql           = "   SELECT ISPC.VALOR 
                                FROM 
                                  DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISPC
                                  JOIN DB_COMERCIAL.INFO_DETALLE_SOLICITUD IDS ON IDS.SERVICIO_ID = ISPC.SERVICIO_ID
                                  JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC ON APC.ID_PRODUCTO_CARACTERISITICA = ISPC.PRODUCTO_CARACTERISITICA_ID
                                  JOIN DB_COMERCIAL.ADMI_CARACTERISTICA AC  ON AC.ID_CARACTERISTICA = APC.CARACTERISTICA_ID
                                WHERE 
                                   AC.DESCRIPCION_CARACTERISTICA = :descripcionCaract AND 
                                   IDS.ID_DETALLE_SOLICITUD = :idDetaSolicitud  
                                AND AC.ESTADO = :estado AND ISPC.ESTADO = :estado ";
        
        $objRsm->addScalarResult('VALOR','valor','string');
                
        $objNtvQuery->setParameter('idDetaSolicitud', $intIdDetalleSol);
        $objNtvQuery->setParameter('estado', 'Activo');
        $objNtvQuery->setParameter('descripcionCaract', $strDescripCaract);
        $objNtvQuery->setSQL($strSql);
        $arrayResultado = $objNtvQuery->getOneOrNullResult();
        
        if($arrayResultado==null)
        {
            $arrayResultado['valor'] = 'DIRECTA';
        }
                
        return $arrayResultado;
    }
    /**
     * getUltSoliDescFijoAprob
     * 
     * Metodo que devuelve la ultima solicitud de descuento fijo que haya sido autorizada (maximo Historial de la solicitud aprobada)
     * 
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 15-06-2021 
     * costoQuery: 10
     * @param  array $arrayParametros [
     *                                  "intIdPunto"     : Id del Punto                                     
     *                                ]          
     * 
     * @return array $arrayResultado
     */
    public function getUltSoliDescFijoAprob($arrayParametros)
    {     
        $objRsm           = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery      = $this->_em->createNativeQuery(null, $objRsm);
        
        $strSql = "  SELECT SOL.ID_DETALLE_SOLICITUD
                FROM DB_COMERCIAL.INFO_PUNTO PTO, DB_COMERCIAL.INFO_SERVICIO SERV, DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOL, 
                DB_COMERCIAL.ADMI_TIPO_SOLICITUD TSOL, DB_GENERAL.ADMI_MOTIVO MOT, DB_COMERCIAL.INFO_PLAN_CAB PLAC, 
                DB_COMERCIAL.INFO_PLAN_DET PLAD, DB_COMERCIAL.ADMI_PRODUCTO PROD
                WHERE PTO.ID_PUNTO             = SERV.PUNTO_ID
                AND PTO.ID_PUNTO               = :intIdPunto 
                AND SERV.ID_SERVICIO           = SOL.SERVICIO_ID
                AND SOL.TIPO_SOLICITUD_ID      = TSOL.ID_TIPO_SOLICITUD
                AND TSOL.DESCRIPCION_SOLICITUD = :strDescSolicitud
                AND TSOL.ESTADO                ='Activo'                
                AND SOL.MOTIVO_ID              = MOT.ID_MOTIVO
                AND SERV.PLAN_ID               = PLAC.ID_PLAN
                AND PLAC.ID_PLAN               = PLAD.PLAN_ID
                AND PLAD.PRODUCTO_ID           = PROD.ID_PRODUCTO
                AND PROD.CODIGO_PRODUCTO       = :strCodProducto
                AND SOL.ID_DETALLE_SOLICITUD = 
                                (SELECT MAX(SOL_MAX.ID_DETALLE_SOLICITUD) 
                                FROM INFO_DETALLE_SOLICITUD SOL_MAX,
                                DB_COMERCIAL.INFO_DETALLE_SOL_HIST SOL_HISMAX,
                                INFO_SERVICIO SERV_MAX 
                                WHERE SOL_HISMAX.ESTADO          = :srtEstado  
                                AND SOL_MAX.ID_DETALLE_SOLICITUD = SOL_HISMAX.DETALLE_SOLICITUD_ID
                                AND SOL_MAX.SERVICIO_ID          = SERV_MAX.ID_SERVICIO
                                AND SERV_MAX.PUNTO_ID            = PTO.ID_PUNTO) ";
        
        $objRsm->addScalarResult('ID_DETALLE_SOLICITUD','intIdDetalleSolicitud','integer');
                
        $objNtvQuery->setParameter('intIdPunto', $arrayParametros['intIdPunto']);
        $objNtvQuery->setParameter('strDescSolicitud', 'SOLICITUD DESCUENTO');
        $objNtvQuery->setParameter('strCodProducto', 'INTD');
        $objNtvQuery->setParameter('srtEstado', 'Aprobado');
        $objNtvQuery->setSQL($strSql);
        $arrayResultado = $objNtvQuery->getOneOrNullResult();                
                
        return $arrayResultado;
    }

    /*
     * Documentación para el método 'getSolictudesPorCriterios'.
     *
     * Método que devuelve Listado de las solicitudes de descuento Fijo por motivo "Cliente con Discapacidad", 
     * "Beneficio 3era Edad / Adulto Mayor" en base a los criterios de Busqueda.
     *
     * @param  arrayParametros [
     *                            'strCodEmpresa'         => Empresa en sesion     
     *                            'strIdentificacion'     => Identificación del cliente
     *                            'strLogin'              => Login del Punto Cliente
     *                            'intIdDetalleSolicitud' => Id detalle solicitud
     *                         ]
     * 
     * costoQuery: 2465
     * 
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 08-03-2021 
     *
     * @author Alex Arreaga <atarreaga@telconet.ec>
     * @version 1.1 19-08-2021 - Se agrega sentencia en el query principal para obtener el tipo de categoría del plan y 
     *                           adicional se agrega sentencia en campo valor por el proceso en el subquery de parámetros 
     *                           de nombres motivo 3era edad.
     * 
     * costoQuery: 1325
     * 
     * @return $arrayResultado
     */
    public function getSolictudesPorCriterios($arrayParametros)
    {
        error_log("parametros " . json_encode($arrayParametros));
        $objRsm      = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $objRsmCount      = new ResultSetMappingBuilder($this->_em);
        $objNtvQueryCount = $this->_em->createNativeQuery(null, $objRsmCount);               
        
        $strQueryCount = " SELECT COUNT(*) AS CANTIDAD "; 
        $strQuery      = "SELECT CLIE.ID_PERSONA_ROL, SERV.ID_SERVICIO, SOL.ID_DETALLE_SOLICITUD, PERS.IDENTIFICACION_CLIENTE,
                          CASE
                            WHEN PERS.RAZON_SOCIAL IS NULL
                            THEN PERS.NOMBRES || ' ' ||PERS.APELLIDOS
                            ELSE PERS.RAZON_SOCIAL
                          END AS NOMBRE_CLIENTE,
                          TIDE.DESCRIPCION AS TIPO_IDENTIFICACION,
                          CASE
                            WHEN PERS.TIPO_TRIBUTARIO = 'NAT'
                            THEN 'Natural'
                            WHEN PERS.TIPO_TRIBUTARIO = 'JUR'
                            THEN 'Juridico'
                            ELSE '' 
                          END AS TIPO_TRIBUTARIO,  
                          PERS.FECHA_NACIMIENTO, DB_COMERCIAL.CMKG_BENEFICIOS.F_EDAD_PERSONA(PERS.ID_PERSONA) AS EDAD,
                          PTO.DIRECCION, PTO.LOGIN, PLAC.NOMBRE_PLAN, MOT.NOMBRE_MOTIVO, SERV.PRECIO_VENTA,SOL.PRECIO_DESCUENTO, 
                          SOL.PORCENTAJE_DESCUENTO,  
                          (
                          SELECT IPCARACT.VALOR
                          FROM   
                          DB_COMERCIAL.INFO_PLAN_CAB IPCAB,
                          DB_COMERCIAL.INFO_PLAN_CARACTERISTICA IPCARACT,
                          DB_COMERCIAL.ADMI_CARACTERISTICA AC
                          WHERE
                           IPCARACT.PLAN_ID                 = IPCAB.ID_PLAN
                          AND IPCARACT.CARACTERISTICA_ID    = AC.ID_CARACTERISTICA
                          AND AC.DESCRIPCION_CARACTERISTICA = 'TIPO_CATEGORIA_PLAN_ADULTO_MAYOR'
                          AND IPCAB.ID_PLAN                 = PLAC.ID_PLAN
                          ) AS CATEGORIA_PLAN  ";
        
        $strFromQuery  = " FROM DB_COMERCIAL.INFO_PUNTO PTO, DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL CLIE, DB_COMERCIAL.INFO_EMPRESA_ROL EMPROL, ".
                " DB_COMERCIAL.INFO_PERSONA PERS, DB_GENERAL.ADMI_TIPO_IDENTIFICACION TIDE, DB_COMERCIAL.INFO_SERVICIO SERV,  ".
                " DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOL, DB_COMERCIAL.ADMI_TIPO_SOLICITUD TSOL, DB_GENERAL.ADMI_MOTIVO MOT, ".
                " DB_COMERCIAL.INFO_PLAN_CAB PLAC, DB_COMERCIAL.INFO_PLAN_DET PLAD, DB_COMERCIAL.ADMI_PRODUCTO PROD ".    
                " WHERE PTO.ID_PUNTO             = SERV.PUNTO_ID ".
                " AND SERV.ID_SERVICIO           = SOL.SERVICIO_ID ".
                " AND SOL.TIPO_SOLICITUD_ID      = TSOL.ID_TIPO_SOLICITUD ".
                " AND TSOL.ID_TIPO_SOLICITUD     IN (SELECT ID_TIPO_SOLICITUD  ".
                "                                    FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD  ".
                "                                    WHERE DESCRIPCION_SOLICITUD = 'SOLICITUD DESCUENTO')  ".
                " AND TSOL.ESTADO                = 'Activo' ".
                " AND PTO.PERSONA_EMPRESA_ROL_ID = CLIE.ID_PERSONA_ROL ".
                " AND CLIE.EMPRESA_ROL_ID        = EMPROL.ID_EMPRESA_ROL ".
                " AND EMPROL.EMPRESA_COD         =:strCodEmpresa ".       
                " AND CLIE.PERSONA_ID            = PERS.ID_PERSONA ".
                " AND PERS.TIPO_IDENTIFICACION   = TIDE.ID_TIPO_IDENTIFICACION ".
                " AND SOL.MOTIVO_ID              = MOT.ID_MOTIVO ".                
                " AND SERV.PLAN_ID               = PLAC.ID_PLAN  ".
                " AND PLAC.ID_PLAN               = PLAD.PLAN_ID ".
                " AND PLAD.PRODUCTO_ID           = PROD.ID_PRODUCTO ".
                " AND PROD.CODIGO_PRODUCTO       IN (SELECT PD.VALOR1 ".
                                                   " FROM DB_GENERAL.ADMI_PARAMETRO_DET PD, ".
                                                   " DB_GENERAL.ADMI_PARAMETRO_CAB PC ".
                                                   " WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID ".
                                                   " AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_ADULTO_MAYOR' ".
                                                   " AND PC.ESTADO           = 'Activo' ".
                                                   " AND PD.ESTADO           = 'Activo' ".
                                                   " AND PD.DESCRIPCION      = 'CODIGO_PRODUCTO' ".
                                                   " AND PD.EMPRESA_COD      = :strCodEmpresa) ".                
                " AND SERV.ESTADO         IN (SELECT PD.VALOR1 ".
                                                  "  FROM DB_GENERAL.ADMI_PARAMETRO_DET PD, ".
                                                  "  DB_GENERAL.ADMI_PARAMETRO_CAB PC ".
                                                  "  WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID ".
                                                  "  AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_ADULTO_MAYOR' ".
                                                  "  AND PC.ESTADO           = 'Activo' ".
                                                  "  AND PD.ESTADO           = 'Activo' ".
                                                  "  AND PD.DESCRIPCION      = 'ESTADOS_SERVICIO')  ". 
                " AND SOL.ESTADO          IN (:arrayEstadosSolicitud) ".                 
                " AND MOT.ID_MOTIVO       IN (SELECT PD.VALOR7 ".
                                            "  FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,  ".
                                            "  DB_GENERAL.ADMI_PARAMETRO_CAB PC  ".
                                            "  WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID  ".
                                            "  AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_ADULTO_MAYOR'  ".
                                            "  AND PC.ESTADO           = 'Activo'  ".
                                            "  AND PD.ESTADO           = 'Activo'  ".
                                            "  AND PD.DESCRIPCION      = 'MOTIVO_DESC_ADULTO_MAYOR'  ".
                                            "  AND PD.VALOR3           = 'CANCEL_CAMBIO_BENEFICIO'  ".
                                            "  UNION ".
                                            "  SELECT PD.VALOR7 ".
                                            "  FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,  ".
                                            "  DB_GENERAL.ADMI_PARAMETRO_CAB PC  ".
                                            "  WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID  ".
                                            "  AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_SOLICITUD_DESC_DISCAPACIDAD'  ".
                                            "  AND PC.ESTADO           = 'Activo'  ".
                                            "  AND PD.ESTADO           = 'Activo'  ".
                                            "  AND PD.DESCRIPCION      = 'MOTIVO_DESC_DISCAPACIDAD'  ".
                                            "  )  " ; 
                     
        $objRsm->addScalarResult('ID_PERSONA_ROL', 'idPersonaRol', 'integer');
        $objRsm->addScalarResult('ID_SERVICIO', 'idServicio', 'integer');
        $objRsm->addScalarResult('ID_DETALLE_SOLICITUD', 'idDetalleSolicitud', 'integer');
        $objRsm->addScalarResult('IDENTIFICACION_CLIENTE', 'identificacion', 'string');
        $objRsm->addScalarResult('NOMBRE_CLIENTE', 'nombreCliente', 'string');
        $objRsm->addScalarResult('TIPO_IDENTIFICACION', 'tipoIdentificacion', 'string');
        $objRsm->addScalarResult('TIPO_TRIBUTARIO', 'tipoTributario', 'string');        
        $objRsm->addScalarResult('FECHA_NACIMIENTO' , 'fechaNacimiento' , 'datetime');
        $objRsm->addScalarResult('EDAD' , 'edad' , 'integer');
        $objRsm->addScalarResult('DIRECCION', 'direccionPto', 'string');
        $objRsm->addScalarResult('LOGIN', 'login', 'string');
        $objRsm->addScalarResult('NOMBRE_PLAN', 'nombrePlan', 'string');
        $objRsm->addScalarResult('NOMBRE_MOTIVO', 'nombreMotivo', 'string'); 
        $objRsm->addScalarResult('PRECIO_VENTA', 'precioVenta', 'float'); 
        $objRsm->addScalarResult('PRECIO_DESCUENTO', 'precioDescuento', 'float'); 
        $objRsm->addScalarResult('PORCENTAJE_DESCUENTO', 'porcentajeDescuento', 'float'); 
        $objRsm->addScalarResult('CATEGORIA_PLAN' , 'categoriaPlan' , 'string');
        
        $objRsmCount->addScalarResult('CANTIDAD', 'Cantidad', 'integer');         
        
        $objNtvQuery->setParameter("strCodEmpresa", $arrayParametros["strCodEmpresa"]);       
        $objNtvQuery->setParameter("arrayEstadosSolicitud", array('Aprobado','Finalizada'));       
        $objNtvQueryCount->setParameter("strCodEmpresa", $arrayParametros["strCodEmpresa"]);               
        $objNtvQueryCount->setParameter("arrayEstadosSolicitud", array('Aprobado','Finalizada'));       

        if (isset($arrayParametros["strIdentificacion"]) && !empty($arrayParametros["strIdentificacion"]))
        {
            $strFromQuery.= ' AND PERS.IDENTIFICACION_CLIENTE = :strIdentificacion ';
            
            $objNtvQuery->setParameter("strIdentificacion", $arrayParametros["strIdentificacion"]);  
            $objNtvQueryCount->setParameter("strIdentificacion", $arrayParametros["strIdentificacion"]);   
        }
        
        if (isset($arrayParametros["strLogin"]) && !empty($arrayParametros["strLogin"]))
        {
            $strFromQuery.= ' AND PTO.LOGIN = :strLogin ';
            
            $objNtvQuery->setParameter("strLogin", $arrayParametros["strLogin"]);  
            $objNtvQueryCount->setParameter("strLogin", $arrayParametros["strLogin"]);               
        }       
        
        if (isset($arrayParametros["intIdDetalleSolicitud"]) && !empty($arrayParametros["intIdDetalleSolicitud"]))
        {
            $strFromQuery.= ' AND SOL.ID_DETALLE_SOLICITUD = :intIdDetalleSolicitud ';
            
            $objNtvQuery->setParameter("intIdDetalleSolicitud", $arrayParametros["intIdDetalleSolicitud"]);  
            $objNtvQueryCount->setParameter("intIdDetalleSolicitud", $arrayParametros["intIdDetalleSolicitud"]);               
        }   
                
        $objNtvQuery->setSQL($strQuery . $strFromQuery);                     
        $objDatos = $objNtvQuery->getResult();   
                   
        $objNtvQueryCount->setSQL($strQueryCount . $strFromQuery);                        
        $intCantidad = $objNtvQueryCount->getSingleScalarResult();
                              
        $arrayResultado['objRegistros']     = $objDatos; 
        $arrayResultado['intCantidad']      = $intCantidad;       
        error_log("cantidad " .  $intCantidad); 
        return $arrayResultado;
    }
    
     /*
     * Documentación para el método 'getValidaSolicitudPorDiscapacidad'.
     *
     * Método que devuelve la cantidad de solicitudes de descuento Fijo por motivo "Cliente con Discapacidad" que posee un Punto
     * o un Cliente dependiendo del tipo de Consulta definido por el parametro VALIDACION_SOLICITUD_DISCAPACIDAD_POR_CLIENTE.
     * Tipo de Validación habilitada S: POR_CLIENTE, N: POR_PUNTO.                 
     *
     * @param  arrayParametros [
     *                            'intIdPunto'             => Id del Punto 
     *                            'intIdPersonaRol'        => Id del cliente  
     *                            'strParametroValidacion' => Tipo de Validacion : S: Por cliente, N: Por punto
     *                            'intTipoSolicitudId'     => Id del tipo de solicitud
     *                            'intMotivoId'            => Id Motivo de la Solicitud 
     *                         ]
     * costoQuery: 29
     * 
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 01-09-2020 
     */
     public function getValidaSolicitudPorDiscapacidad($arrayParametros)
    {
        $objRsm      = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $objRsmCount      = new ResultSetMappingBuilder($this->_em);
        $objNtvQueryCount = $this->_em->createNativeQuery(null, $objRsmCount);
        
        $strQueryCount = " SELECT COUNT(*) AS CANTIDAD "; 
        $strQuery      = "SELECT PTO.LOGIN, PTO.DIRECCION ";
        $strFromQuery  = "FROM INFO_PUNTO PTO, INFO_PERSONA_EMPRESA_ROL CLIE, INFO_SERVICIO SERV, INFO_DETALLE_SOLICITUD SOL,
                ADMI_TIPO_SOLICITUD TSOL,
                DB_GENERAL.ADMI_MOTIVO MOT,
                INFO_PLAN_CAB PLAC, INFO_PLAN_DET PLAD,
                ADMI_PRODUCTO PROD
                WHERE PTO.ID_PUNTO             = SERV.PUNTO_ID
                AND SERV.ID_SERVICIO           = SOL.SERVICIO_ID
                AND SOL.TIPO_SOLICITUD_ID      = TSOL.ID_TIPO_SOLICITUD
                AND TSOL.ID_TIPO_SOLICITUD     = :intTipoSolicitudId
                AND TSOL.ESTADO                ='Activo'
                AND PTO.PERSONA_EMPRESA_ROL_ID = CLIE.ID_PERSONA_ROL
                AND SOL.MOTIVO_ID              = MOT.ID_MOTIVO
                AND SERV.PLAN_ID               = PLAC.ID_PLAN
                AND PLAC.ID_PLAN               = PLAD.PLAN_ID
                AND PLAD.PRODUCTO_ID           = PROD.ID_PRODUCTO
                AND PROD.CODIGO_PRODUCTO       = 'INTD'
                AND MOT.ID_MOTIVO              = :intMotivoId
                AND UPPER(MOT.NOMBRE_MOTIVO)   IN (SELECT UPPER(PD.VALOR1)
                                                   FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                   DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                   WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                   AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_SOLICITUD_DESC_DISCAPACIDAD'
                                                   AND PC.ESTADO           = 'Activo'
                                                   AND PD.ESTADO           = 'Activo'
                                                   AND PD.DESCRIPCION      = 'MOTIVO_DESC_DISCAPACIDAD')
                AND UPPER(SOL.ESTADO)          IN (SELECT UPPER(PD.VALOR1)
                                                   FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                   DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                   WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                   AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_SOLICITUD_DESC_DISCAPACIDAD'
                                                   AND PC.ESTADO           = 'Activo'
                                                   AND PD.ESTADO           = 'Activo'
                                                   AND PD.DESCRIPCION      = 'ESTADOS_SOLICITUD')
                AND UPPER(SERV.ESTADO)         IN (SELECT UPPER(PD.VALOR1)
                                                   FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                   DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                   WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                   AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_SOLICITUD_DESC_DISCAPACIDAD'
                                                   AND PC.ESTADO           = 'Activo'
                                                   AND PD.ESTADO           = 'Activo'
                                                   AND PD.DESCRIPCION      = 'ESTADOS_SERVICIO')                
                ";
        
        $objRsm->addScalarResult('LOGIN', 'login', 'string');
        $objRsm->addScalarResult('DIRECCION', 'direccion', 'string');                        
        $objNtvQuery->setParameter("intTipoSolicitudId", $arrayParametros["intTipoSolicitudId"]);
        $objNtvQuery->setParameter("intMotivoId", $arrayParametros["intMotivoId"]);
        
        if (isset($arrayParametros["strParametroValidacion"]) && $arrayParametros["strParametroValidacion"] =='N'
            && isset($arrayParametros["intIdPunto"]))
        {
            $strFromQuery.= ' AND PTO.ID_PUNTO = :intIdPunto ';
            $objNtvQuery->setParameter("intIdPunto", $arrayParametros["intIdPunto"]);  
        }
        if (isset($arrayParametros["strParametroValidacion"]) && $arrayParametros["strParametroValidacion"] =='S'
            && isset($arrayParametros["intIdPersonaRol"]))
        {
            $strFromQuery.= ' AND CLIE.ID_PERSONA_ROL = :intIdPersonaRol ';
            $objNtvQuery->setParameter("intIdPersonaRol", $arrayParametros["intIdPersonaRol"]);               
        }
        $objNtvQuery->setSQL($strQuery . $strFromQuery);                     
        $objDatos = $objNtvQuery->getResult();                
                
        $objRsmCount->addScalarResult('CANTIDAD', 'Cantidad', 'integer');        
        $objNtvQueryCount->setParameter("intTipoSolicitudId", $arrayParametros["intTipoSolicitudId"]);
        $objNtvQueryCount->setParameter("intMotivoId", $arrayParametros["intMotivoId"]);
                
       if (isset($arrayParametros["strParametroValidacion"]) && $arrayParametros["strParametroValidacion"] =='N'
            && isset($arrayParametros["intIdPunto"]))        
        {
            $strFromQuery.= ' AND PTO.ID_PUNTO = :intIdPunto ';            
            $objNtvQueryCount->setParameter("intIdPunto", $arrayParametros["intIdPunto"]);        
        }
        if (isset($arrayParametros["strParametroValidacion"]) && $arrayParametros["strParametroValidacion"] =='S'
            && isset($arrayParametros["intIdPersonaRol"]))
        {
            $strFromQuery.= ' AND CLIE.ID_PERSONA_ROL = :intIdPersonaRol ';
            $objNtvQueryCount->setParameter("intIdPersonaRol", $arrayParametros["intIdPersonaRol"]);               
        }
        
        $objNtvQueryCount->setSQL($strQueryCount . $strFromQuery);
        $intCantidad = $objNtvQueryCount->getSingleScalarResult();

        $arrayResultado['objRegistros'] = $objDatos[0];
        $arrayResultado['intCantidad']  = $intCantidad;
        
        return $arrayResultado;                       
    }
    
    /*
     * Documentación para el método 'validaSolDobleBeneficio'.
     *
     * Método que devuelve si la solicitud enviada a procesar aplica o no aplica para la creación de la misma, considerando el
     * proceso de doble beneficio con los motivos de 'Beneficio 3era Edad / Adulto Mayor', 'Cliente con Discapacidad'. 
     * Se valida cuando el parámetro enviado para de doble beneficio está habilitada en "S" ó "N".
     * Se retorna, los registros, cantidad y bandera en caso de no aplicar la solicitud del cliente.
     *
     * @param  arrayParametros [
     *                            'intIdPunto'             => Id del Punto 
     *                            'intIdPersonaRol'        => Id del cliente  
     *                            'intCantMaxPorCliente'   => Cantidad máxima por cliente cuando doble beneficio es S.
     *                            'intCantMaxPorPunto'     => Cantidad máxima por punto cuando doble beneficio es S.
     *                            'intCantExistBenefecio'  => Cantidad si existe beneficio en los puntos cliente. (bandera)
     *                            'intCantMaxCliente'      => Cantidad máxima por cliente cuando doble beneficio es N.
     *                            'strDobleBeneficio'      => Parámetro que indica doble beneficio : S ó N
     *                            'intMotivoId'            => Id Motivo de la Solicitud
     *                         ]
     * 
     * 
     * @author Alex Arreaga <atarreaga@telconet.ec>
     * @version 1.0 20-01-2021 
     */
    public function validaSolDobleBeneficio($arrayParametros) 
    {
        $strDobleBeneficio     =  $arrayParametros["strDobleBeneficio"];
        $intMotivoId           =  $arrayParametros["intMotivoId"];
        $strBanderaAplica      =  '';
        
        //Se valida cuando el parámetro está "N" no aplica doble beneficio
        if($strDobleBeneficio == 'N')
        {
            $intCantMaxCliente             =  $arrayParametros["intCantMaxCliente"];
            
            $strBandera                    = 'N';
            $arrayParametros["strBandera"] = $strBandera;

            $arrayDatos     = $this->getSolictudesPorCliente($arrayParametros);
            $arrayRegistros = $arrayDatos['objRegistros'];
            $intCantidad    = $arrayDatos['intCantidad'];
            
            if($intCantidad < $intCantMaxCliente) 
            {
                $strBanderaAplica = 'S';
                $arrayResultado['objRegistros'] = null;
                $arrayResultado['intCantidad']  = 0;
            }
            else 
            {
                $strBanderaAplica               = 'N';
                $arrayResultado['objRegistros'] = $arrayRegistros;
                $arrayResultado['intCantidad']  = $intCantidad;
            } 
            
            $arrayResultado['strBanderaAplica'] = $strBanderaAplica;
            
            return $arrayResultado;
        }
        
        //Se valida cuando el parámetro está "S" de doble beneficio.
        if($strDobleBeneficio == 'S')
        {
            $intCantMaxPorCliente  = $arrayParametros["intCantMaxPorCliente"];
            $intCantMaxPorPunto    = $arrayParametros["intCantMaxPorPunto"];
            $intCantExistBeneficio = $arrayParametros['intCantExistBeneficio'];
            
            $arrayDatosPuntos      = $this->getSolicitudesPorPunto($arrayParametros);
            $arrayRegistrosPuntos  = $arrayDatosPuntos['objRegistros'];
            $intCantidadPuntos     = $arrayDatosPuntos['intCantidad'];
            
            if($intCantidadPuntos < $intCantMaxPorPunto)
            {   
                $objMotivo       = $this->_em->find('schemaBundle:AdmiMotivo', $intMotivoId);
                $strNombreMotivo = $objMotivo->getNombreMotivo();
                        
                $strBandera                         = 'S';
                $arrayParametros["strBandera"]      = $strBandera;
                $arrayParametros["strNombreMotivo"] = $strNombreMotivo;
                
                $arrayDatos     = $this->getSolictudesPorCliente($arrayParametros);
                $arrayRegistros = $arrayDatos['objRegistros'];
                $intCantidad    = $arrayDatos['intCantidad'];  // SI YA EXISTE EL BENEFICIO EN UNO DE LOS PUNTOS DEL CLIENTE
                
                
                $strBandera                    = 'N';
                $arrayParametros["strBandera"] = $strBandera;
                
                $arrayDatosBeneficio = $this->getSolictudesPorCliente($arrayParametros);
                $arrayRegistrosBenef = $arrayDatosBeneficio['objRegistros'];
                $intCantidadBenf     = $arrayDatosBeneficio['intCantidad']; //LA CANTIDAD DE BENEFICIOS POR CLIENTE
                
                if($intCantidadBenf < $intCantMaxPorCliente && $intCantidad == $intCantExistBeneficio)
                {
                    $strBanderaAplica                   = 'S';
                    $arrayResultado['strBanderaAplica'] = $strBanderaAplica;
                    $arrayResultado['objRegistros']     = null;
                    $arrayResultado['intCantidad']      = 0;
                }
                else
                {
                    $strBanderaAplica                   = 'N';
                    $arrayResultado['objRegistros']     = $arrayRegistrosBenef;
                    $arrayResultado['intCantidad']      = $intCantidadBenf;
                    $arrayResultado['strBanderaAplica'] = $strBanderaAplica;
                }
            } 
            else 
            { 
                $strBanderaAplica                   = 'N';
                $arrayResultado['objRegistros']     = $arrayRegistrosPuntos;
                $arrayResultado['intCantidad']      = $intCantidadPuntos;
                $arrayResultado['strBanderaAplica'] = $strBanderaAplica;
            }
                       
            return $arrayResultado;
        }  
        
    }
    
     /*
     * Documentación para el método 'getSolictudesPorCliente'.
     *
     * Método que devuelve la cantidad de solicitudes de descuento Fijo por motivo "Cliente con Discapacidad", 
     * "Beneficio 3era Edad / Adulto Mayor" que posee un Cliente.
     *
     * @param  arrayParametros [
     *                            'intIdPersonaRol' => Id del cliente  
     *                         ]
     * 
     * costoQuery: 43
     * 
     * @author Alex Arreaga <atarreaga@telconet.ec>
     * @version 1.0 20-01-2021 
     */
    public function getSolictudesPorCliente($arrayParametros)
    {
        $objRsm      = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $objRsmCount      = new ResultSetMappingBuilder($this->_em);
        $objNtvQueryCount = $this->_em->createNativeQuery(null, $objRsmCount);
        
        $strBandera      = $arrayParametros["strBandera"];
        $strNombreMotivo = $arrayParametros["strNombreMotivo"];
        
        $strQueryCount = " SELECT COUNT(*) AS CANTIDAD "; 
        $strQuery      = "SELECT PTO.ID_PUNTO, PTO.LOGIN, MOT.NOMBRE_MOTIVO, PTO.DIRECCION, SOL.ESTADO ";
        $strFromQuery  = "FROM DB_COMERCIAL.INFO_PUNTO PTO, 
                DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL CLIE, 
                DB_COMERCIAL.INFO_SERVICIO SERV, 
                DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOL,
                DB_COMERCIAL.ADMI_TIPO_SOLICITUD TSOL,
                DB_GENERAL.ADMI_MOTIVO MOT,
                DB_COMERCIAL.INFO_PLAN_CAB PLAC, DB_COMERCIAL.INFO_PLAN_DET PLAD, DB_COMERCIAL.ADMI_PRODUCTO PROD
                
                WHERE PTO.ID_PUNTO             = SERV.PUNTO_ID
                AND SERV.ID_SERVICIO           = SOL.SERVICIO_ID
                AND SOL.TIPO_SOLICITUD_ID      = TSOL.ID_TIPO_SOLICITUD
                AND TSOL.ID_TIPO_SOLICITUD     IN (SELECT ID_TIPO_SOLICITUD 
                                                   FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD 
                                                   WHERE DESCRIPCION_SOLICITUD = 'SOLICITUD DESCUENTO') 
                AND TSOL.ESTADO                = 'Activo'
                AND PTO.PERSONA_EMPRESA_ROL_ID = CLIE.ID_PERSONA_ROL
                AND SOL.MOTIVO_ID              = MOT.ID_MOTIVO
                
                AND SERV.PLAN_ID               = PLAC.ID_PLAN
                AND PLAC.ID_PLAN               = PLAD.PLAN_ID
                AND PLAD.PRODUCTO_ID           = PROD.ID_PRODUCTO
                AND PROD.CODIGO_PRODUCTO       IN (SELECT UPPER(PD.VALOR1)
                                                   FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                   DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                   WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                   AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_ADULTO_MAYOR'
                                                   AND PC.ESTADO           = 'Activo'
                                                   AND PD.ESTADO           = 'Activo'
                                                   AND PD.DESCRIPCION      = 'CODIGO_PRODUCTO')

                AND UPPER(SOL.ESTADO)          IN (SELECT UPPER(PD.VALOR1)
                                                   FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                   DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                   WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                   AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_ADULTO_MAYOR'
                                                   AND PC.ESTADO           = 'Activo'
                                                   AND PD.ESTADO           = 'Activo'
                                                   AND PD.DESCRIPCION      = 'ESTADOS_SOLICITUD')
                AND UPPER(SERV.ESTADO)         IN (SELECT UPPER(PD.VALOR1)
                                                   FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                   DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                   WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                   AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_ADULTO_MAYOR'
                                                   AND PC.ESTADO           = 'Activo'
                                                   AND PD.ESTADO           = 'Activo'
                                                   AND PD.DESCRIPCION      = 'ESTADOS_SERVICIO')                
                ";
        
                if ($strBandera == 'N') 
                {
                $strFromQuery .= " AND (UPPER(MOT.NOMBRE_MOTIVO)   IN (SELECT UPPER(PD.VALOR1)
                                                   FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                   DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                   WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                   AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_ADULTO_MAYOR'
                                                   AND PC.ESTADO           = 'Activo'
                                                   AND PD.ESTADO           = 'Activo'
                                                   AND PD.DESCRIPCION      = 'MOTIVO_DESC_ADULTO_MAYOR') 
                    OR     
                    UPPER(MOT.NOMBRE_MOTIVO)   IN (SELECT UPPER(PD.VALOR1)
                                                 FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                 DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                 WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                 AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_SOLICITUD_DESC_DISCAPACIDAD'
                                                 AND PC.ESTADO           = 'Activo'
                                                 AND PD.ESTADO           = 'Activo'
                                                 AND PD.DESCRIPCION      = 'MOTIVO_DESC_DISCAPACIDAD')                               
                    )";
                }
                
                
                if ($strBandera == 'S') 
                {
                $strFromQuery .= " AND UPPER(MOT.NOMBRE_MOTIVO)   IN (SELECT UPPER(PD.VALOR1) 
                                                                    FROM DB_GENERAL.ADMI_PARAMETRO_DET PD, 
                                                                    DB_GENERAL.ADMI_PARAMETRO_CAB PC 
                                                                    WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID 
                                                                    AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_ADULTO_MAYOR' 
                                                                    AND PC.ESTADO           = 'Activo' 
                                                                    AND PD.ESTADO           = 'Activo' 
                                                                    AND PD.DESCRIPCION      = 'MOTIVO_DESC_ADULTO_MAYOR' 
                                                                    AND PD.VALOR1           = :strNombreMotivo 
                                                                    UNION 
                                                                    SELECT UPPER(PD.VALOR1) 
                                                                    FROM DB_GENERAL.ADMI_PARAMETRO_DET PD, 
                                                                    DB_GENERAL.ADMI_PARAMETRO_CAB PC 
                                                                    WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID 
                                                                    AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_SOLICITUD_DESC_DISCAPACIDAD' 
                                                                    AND PC.ESTADO           = 'Activo' 
                                                                    AND PD.ESTADO           = 'Activo' 
                                                                    AND PD.DESCRIPCION      = 'MOTIVO_DESC_DISCAPACIDAD' 
                                                                    AND PD.VALOR1           = :strNombreMotivo 
                                                                    ) " ;
                }

        $objRsm->addScalarResult('ID_PUNTO', 'idPunto', 'string');
        $objRsm->addScalarResult('LOGIN', 'login', 'string');
        $objRsm->addScalarResult('NOMBRE_MOTIVO', 'nombreMotivo', 'string'); 
        $objRsm->addScalarResult('DIRECCION', 'direccion', 'string'); 
        $objRsm->addScalarResult('ESTADO', 'estado', 'string');
        
        if($strBandera == 'S')
        {
            $objNtvQuery->setParameter("strNombreMotivo", $strNombreMotivo);
        } 

        if (isset($arrayParametros["intIdPersonaRol"]))
        {
            $strFromQuery.= ' AND CLIE.ID_PERSONA_ROL = :intIdPersonaRol ';
            $objNtvQuery->setParameter("intIdPersonaRol", $arrayParametros["intIdPersonaRol"]);               
        }
        $objNtvQuery->setSQL($strQuery . $strFromQuery);                     
        $objDatos = $objNtvQuery->getResult();    
        
                
        $objRsmCount->addScalarResult('CANTIDAD', 'Cantidad', 'integer'); 
        
        if($strBandera == 'S')
        {
            $objNtvQueryCount->setParameter("strNombreMotivo", $strNombreMotivo);
        } 
        
        if (isset($arrayParametros["intIdPersonaRol"]))
        {
            $strFromQuery.= ' AND CLIE.ID_PERSONA_ROL = :intIdPersonaRol ';
            $objNtvQueryCount->setParameter("intIdPersonaRol", $arrayParametros["intIdPersonaRol"]);               
        }
        
        $objNtvQueryCount->setSQL($strQueryCount . $strFromQuery);
        $intCantidad = $objNtvQueryCount->getSingleScalarResult();
        
        $arrayResultado['objRegistros']     = $objDatos;
        $arrayResultado['intCantidad']      = $intCantidad;
        
        return $arrayResultado;
    }

     /*
     * Documentación para el método 'getSolicitudesPorPunto'.
     *
     * Método que devuelve la cantidad de solicitudes de descuento Fijo por motivo "Cliente con Discapacidad", 
     * "Beneficio 3era Edad / Adulto Mayor" que posee un Punto.
     *
     * @param  arrayParametros [
     *                            'intIdPunto'  => Id del punto  
     *                         ]
     * 
     * costoQuery: 42
     * 
     * @author Alex Arreaga <atarreaga@telconet.ec>
     * @version 1.0 20-01-2021 
     */
    public function getSolicitudesPorPunto($arrayParametros)
    {
        $objRsm      = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $objRsmCount      = new ResultSetMappingBuilder($this->_em);
        $objNtvQueryCount = $this->_em->createNativeQuery(null, $objRsmCount);
        
        
        $strQueryCount = " SELECT COUNT(*) AS CANTIDAD "; 
        $strQuery      = "SELECT PTO.ID_PUNTO, PTO.LOGIN, MOT.NOMBRE_MOTIVO, PTO.DIRECCION, SOL.ESTADO ";
        $strFromQuery  = "FROM DB_COMERCIAL.INFO_PUNTO PTO, 
                DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL CLIE, 
                DB_COMERCIAL.INFO_SERVICIO SERV, 
                DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOL,
                DB_COMERCIAL.ADMI_TIPO_SOLICITUD TSOL,
                DB_GENERAL.ADMI_MOTIVO MOT,
                DB_COMERCIAL.INFO_PLAN_CAB PLAC, DB_COMERCIAL.INFO_PLAN_DET PLAD, DB_COMERCIAL.ADMI_PRODUCTO PROD
                
                WHERE PTO.ID_PUNTO             = SERV.PUNTO_ID
                AND SERV.ID_SERVICIO           = SOL.SERVICIO_ID
                AND SOL.TIPO_SOLICITUD_ID      = TSOL.ID_TIPO_SOLICITUD
                AND TSOL.ID_TIPO_SOLICITUD     IN (SELECT ID_TIPO_SOLICITUD 
                                                   FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD 
                                                   WHERE DESCRIPCION_SOLICITUD = 'SOLICITUD DESCUENTO') 
                AND TSOL.ESTADO                = 'Activo'
                AND PTO.PERSONA_EMPRESA_ROL_ID = CLIE.ID_PERSONA_ROL
                AND SOL.MOTIVO_ID              = MOT.ID_MOTIVO
                
                AND SERV.PLAN_ID               = PLAC.ID_PLAN
                AND PLAC.ID_PLAN               = PLAD.PLAN_ID
                AND PLAD.PRODUCTO_ID           = PROD.ID_PRODUCTO
                AND PROD.CODIGO_PRODUCTO       IN (SELECT UPPER(PD.VALOR1)
                                                   FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                   DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                   WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                   AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_ADULTO_MAYOR'
                                                   AND PC.ESTADO           = 'Activo'
                                                   AND PD.ESTADO           = 'Activo'
                                                   AND PD.DESCRIPCION      = 'CODIGO_PRODUCTO')
                
                AND (UPPER(MOT.NOMBRE_MOTIVO)   IN (SELECT UPPER(PD.VALOR1)
                                                   FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                   DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                   WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                   AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_ADULTO_MAYOR'
                                                   AND PC.ESTADO           = 'Activo'
                                                   AND PD.ESTADO           = 'Activo'
                                                   AND PD.DESCRIPCION      = 'MOTIVO_DESC_ADULTO_MAYOR') 
                    OR     
                    UPPER(MOT.NOMBRE_MOTIVO)   IN (SELECT UPPER(PD.VALOR1)
                                                 FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                 DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                 WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                 AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_SOLICITUD_DESC_DISCAPACIDAD'
                                                 AND PC.ESTADO           = 'Activo'
                                                 AND PD.ESTADO           = 'Activo'
                                                 AND PD.DESCRIPCION      = 'MOTIVO_DESC_DISCAPACIDAD')                               
                    )
                AND UPPER(SOL.ESTADO)          IN (SELECT UPPER(PD.VALOR1)
                                                   FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                   DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                   WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                   AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_ADULTO_MAYOR'
                                                   AND PC.ESTADO           = 'Activo'
                                                   AND PD.ESTADO           = 'Activo'
                                                   AND PD.DESCRIPCION      = 'ESTADOS_SOLICITUD')
                AND UPPER(SERV.ESTADO)         IN (SELECT UPPER(PD.VALOR1)
                                                   FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                   DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                   WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                   AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_ADULTO_MAYOR'
                                                   AND PC.ESTADO           = 'Activo'
                                                   AND PD.ESTADO           = 'Activo'
                                                   AND PD.DESCRIPCION      = 'ESTADOS_SERVICIO')                
                ";
       
        $objRsm->addScalarResult('ID_PUNTO', 'idPunto', 'string');
        $objRsm->addScalarResult('LOGIN', 'login', 'string');
        $objRsm->addScalarResult('NOMBRE_MOTIVO', 'nombreMotivo', 'string'); 
        $objRsm->addScalarResult('DIRECCION', 'direccion', 'string'); 
        $objRsm->addScalarResult('ESTADO', 'estado', 'string'); 
        
        if (isset($arrayParametros["intIdPunto"]))
        {
            $strFromQuery.= ' AND PTO.ID_PUNTO = :intIdPunto ';
            $objNtvQuery->setParameter("intIdPunto", $arrayParametros["intIdPunto"]);  
        }

        $objNtvQuery->setSQL($strQuery . $strFromQuery);                     
        $objDatos = $objNtvQuery->getResult();                
                
        $objRsmCount->addScalarResult('CANTIDAD', 'Cantidad', 'integer');        
        
        if (isset($arrayParametros["intIdPunto"]))
        {
            $strFromQuery.= ' AND PTO.ID_PUNTO = :intIdPunto ';
            $objNtvQueryCount->setParameter("intIdPunto", $arrayParametros["intIdPunto"]);  
        } 
        
        $objNtvQueryCount->setSQL($strQueryCount . $strFromQuery);
        $intCantidad = $objNtvQueryCount->getSingleScalarResult();
        
        $arrayResultado['objRegistros']     = $objDatos;
        $arrayResultado['intCantidad']      = $intCantidad;
        
        return $arrayResultado;
    }
    
    
    /*
     * Documentación para el método 'getValidaSolicitudOtrosMotivos'.
     *
     * Método que valida si existe solicitud de Descuento Fijo en el Punto en sesion cuando se ingresa una solicitud
     * por cualquier motivo se debe validar si el punto ya posee el mayor descuento otorgado por discapacidad.
     *
     * @param  arrayParametros [
     *                            'intIdPunto'             => Id del Punto                                     
     *                            'intTipoSolicitudId'     => Id del tipo de solicitud     
     *                         ]
     * costoQuery: 15
     * 
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 24-09-2020 
     */
     public function getValidaSolicitudOtrosMotivos($arrayParametros)
    {
        $objRsm      = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $objRsmCount      = new ResultSetMappingBuilder($this->_em);
        $objNtvQueryCount = $this->_em->createNativeQuery(null, $objRsmCount);
        
        $strQueryCount = " SELECT COUNT(*) AS CANTIDAD "; 
        $strQuery      = "SELECT PTO.LOGIN, PTO.DIRECCION ";
        $strFromQuery  = "FROM INFO_PUNTO PTO, INFO_SERVICIO SERV, INFO_DETALLE_SOLICITUD SOL,
                ADMI_TIPO_SOLICITUD TSOL,
                DB_GENERAL.ADMI_MOTIVO MOT,
                INFO_PLAN_CAB PLAC, INFO_PLAN_DET PLAD,
                ADMI_PRODUCTO PROD
                WHERE PTO.ID_PUNTO             = SERV.PUNTO_ID
                AND PTO.ID_PUNTO               = :intIdPunto 
                AND SERV.ID_SERVICIO           = SOL.SERVICIO_ID
                AND SOL.TIPO_SOLICITUD_ID      = TSOL.ID_TIPO_SOLICITUD
                AND TSOL.ID_TIPO_SOLICITUD     = :intTipoSolicitudId
                AND TSOL.ESTADO                ='Activo'                
                AND SOL.MOTIVO_ID              = MOT.ID_MOTIVO
                AND SERV.PLAN_ID               = PLAC.ID_PLAN
                AND PLAC.ID_PLAN               = PLAD.PLAN_ID
                AND PLAD.PRODUCTO_ID           = PROD.ID_PRODUCTO
                AND PROD.CODIGO_PRODUCTO       = 'INTD'                   
                AND UPPER(MOT.NOMBRE_MOTIVO)   IN (SELECT UPPER(PD.VALOR1)
                                                   FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                   DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                   WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                   AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_SOLICITUD_DESC_DISCAPACIDAD'
                                                   AND PC.ESTADO           = 'Activo'
                                                   AND PD.ESTADO           = 'Activo'
                                                   AND PD.DESCRIPCION      = 'MOTIVO_DESC_DISCAPACIDAD')
                AND UPPER(SOL.ESTADO)          IN (SELECT UPPER(PD.VALOR1)
                                                   FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                   DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                   WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                   AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_SOLICITUD_DESC_DISCAPACIDAD'
                                                   AND PC.ESTADO           = 'Activo'
                                                   AND PD.ESTADO           = 'Activo'
                                                   AND PD.DESCRIPCION      = 'ESTADOS_SOLICITUD')
                AND UPPER(SERV.ESTADO)         IN (SELECT UPPER(PD.VALOR1)
                                                   FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                                   DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                                   WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                                   AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_SOLICITUD_DESC_DISCAPACIDAD'
                                                   AND PC.ESTADO           = 'Activo'
                                                   AND PD.ESTADO           = 'Activo'
                                                   AND PD.DESCRIPCION      = 'ESTADOS_SERVICIO')                
                ";
        
        $objRsm->addScalarResult('LOGIN', 'login', 'string');
        $objRsm->addScalarResult('DIRECCION', 'direccion', 'string'); 
        $objNtvQuery->setParameter("intIdPunto", $arrayParametros["intIdPunto"]);  
        $objNtvQuery->setParameter("intTipoSolicitudId", $arrayParametros["intTipoSolicitudId"]);        
                
        $objNtvQuery->setSQL($strQuery . $strFromQuery);                     
        $objDatos = $objNtvQuery->getResult();                
                
        $objRsmCount->addScalarResult('CANTIDAD', 'Cantidad', 'integer');     
        $objNtvQueryCount->setParameter("intIdPunto", $arrayParametros["intIdPunto"]);        
        $objNtvQueryCount->setParameter("intTipoSolicitudId", $arrayParametros["intTipoSolicitudId"]);                               
        
        $objNtvQueryCount->setSQL($strQueryCount . $strFromQuery);
        $intCantidad = $objNtvQueryCount->getSingleScalarResult();

        $arrayResultado['objRegistros'] = $objDatos[0];
        $arrayResultado['intCantidad']  = $intCantidad;
        
        return $arrayResultado;                       
    }
    
    /**
     * aprobarRechazarSolicitudesMasivo
     *
     * Aprobación o rechazo de las solicitudes de cambio masivo de vendedor.
     *
     * @author Christian Jaramillo Espinoza <cjaramilloe@telconet.ec>
     * @version 1.0 28-11-2019
     *
     * @param  array $arrayParametros [
     *                                  'intIdSolicitud':           Id de la solicitud
     *                                  'strAccion':                Acción de la solicitud
     *                                  'arrayIdClientes':          Lista de clientes
     *                                  'intIdVendedorOrigen':      Id del vendedor origen
     *                                  'intIdVendedorDestino':     Id del vendedor destino
     *                                  'intIdMotivoRechazo':       Id del motivo de rechazo
     *                                  'strCambiarANivelPunto':    Bandera para cambiar a nivel punto
     *                                  'strCambiarANivelServicio': Bandera para cambiar a nivel servicio
     *                                  'strCodEmpresa':            Id de la empresa
     *                                  'intIdOficina':             Id de la oficina
     *                                  'strUsuario':               Usuario en sesión
     *                                  'strIp':                    Ip del usuario en sesión
     *                                ]
     *
     * @throws $objException
     * @return array $arrayRespuesta
     */
    public function aprobarRechazarSolicitudesMasivo($arrayParametros)
    {
        $intIdSolicitud           = isset($arrayParametros['intIdSolicitud'])
            ? $arrayParametros['intIdSolicitud']
            : 0;
        $strAccion                = isset($arrayParametros['strAccion'])
            ? $arrayParametros['strAccion']
            : '';
        $arrayIdClientes          = isset($arrayParametros['arrayIdClientes'])
            ? $arrayParametros['arrayIdClientes']
            : array();
        $intIdVendedorOrigen      = isset($arrayParametros['intIdVendedorOrigen'])
            ? $arrayParametros['intIdVendedorOrigen']
            : 0;
        $intIdVendedorDestino     = isset($arrayParametros['intIdVendedorDestino'])
            ? $arrayParametros['intIdVendedorDestino']
            : 0;
        $intIdMotivoRechazo       = isset($arrayParametros['intIdMotivoRechazo'])
            ? $arrayParametros['intIdMotivoRechazo']
            : 0;
        $strCambiarANivelPunto    = isset($arrayParametros['strCambiarANivelPunto'])
            ? $arrayParametros['strCambiarANivelPunto'] :
            'S';
        $strCambiarANivelServicio = isset($arrayParametros['strCambiarANivelServicio'])
            ? $arrayParametros['strCambiarANivelServicio'] :
            'S';
        $strCodEmpresa            = isset($arrayParametros['strCodEmpresa'])
            ? $arrayParametros['strCodEmpresa'] :
            '';
        $intIdOficina             = isset($arrayParametros['intIdOficina'])
            ? $arrayParametros['intIdOficina']
            : 0;
        $strUsuario               = isset($arrayParametros['strUsuario'])
            ? $arrayParametros['strUsuario']
            : '';
        $strIp                    = isset($arrayParametros['strIp'])
            ? $arrayParametros['strIp']
            : '';
        $arrayExtraParams         = array('strCambiarANivelPunto'    => $strCambiarANivelPunto,
                                          'strCambiarANivelServicio' => $strCambiarANivelServicio,
                                          'strCodEmpresa'            => $strCodEmpresa,
                                          'intIdOficina'             => $intIdOficina,
                                          'strUsuario'               => $strUsuario,
                                          'strIp'                    => $strIp);

        $intStatusError           = 0;
        $strMensajeError          = '';


        try
        {
            $strSql = "BEGIN DB_COMERCIAL.CMKG_VENDEDOR_MASIVO.P_CAMBIAR_CLIENTES_VENDEDOR(:PN_ID_SOLICITUD, 
                                                                                           :PV_ACCION,
                                                                                           :PN_ID_VENDEDOR_ORIGEN,
                                                                                           :PN_ID_VENDEDOR_DESTINO,
                                                                                           :PN_ID_MOTIVO_RECHAZO,
                                                                                           :PCL_ID_CLIENTES,
                                                                                           :PCL_EXTRA_PARAMS,
                                                                                           :PN_STATUS_ERROR,
                                                                                           :PV_MENSAJE_ERROR);
                                                                                            END;";

            $arrayConnParams = $this->getEntityManager()->getConnection()->getParams();

            $objConn = oci_connect($arrayConnParams['user'],
                $arrayConnParams['password'],
                $arrayConnParams['dbname']);

            $objStmt = oci_parse($objConn, $strSql);

            $objIdClientesClob = oci_new_descriptor($objConn);
            $objExtraParamsClob = oci_new_descriptor($objConn);

            $objIdClientesClob->writetemporary(json_encode($arrayIdClientes, JSON_NUMERIC_CHECK | JSON_FORCE_OBJECT));
            $objExtraParamsClob->writetemporary(json_encode($arrayExtraParams, JSON_NUMERIC_CHECK));

            oci_bind_by_name($objStmt,':PN_ID_SOLICITUD', $intIdSolicitud, -1, SQLT_INT);
            oci_bind_by_name($objStmt,':PV_ACCION', $strAccion, -1, SQLT_CHR);
            oci_bind_by_name($objStmt,':PN_ID_VENDEDOR_ORIGEN', $intIdVendedorOrigen, -1, SQLT_INT);
            oci_bind_by_name($objStmt,':PN_ID_VENDEDOR_DESTINO', $intIdVendedorDestino, -1, SQLT_INT);
            oci_bind_by_name($objStmt,':PN_ID_MOTIVO_RECHAZO', $intIdMotivoRechazo, -1, SQLT_INT);
            oci_bind_by_name($objStmt,':PCL_ID_CLIENTES', $objIdClientesClob, -1, SQLT_CLOB);
            oci_bind_by_name($objStmt,':PCL_EXTRA_PARAMS', $objExtraParamsClob, -1, SQLT_CLOB);
            oci_bind_by_name($objStmt,':PN_STATUS_ERROR', $intStatusError, -1, SQLT_INT);
            oci_bind_by_name($objStmt,':PV_MENSAJE_ERROR', $strMensajeError, 32*1024, SQLT_CHR);

            if(oci_execute($objStmt) === false)
            {
                $strOCIError = oci_error($objStmt);
                $strMensajeError = trim($strMensajeError);

                if(empty($strMensajeError))
                {
                    $strMensajeError = $strOCIError['message'];
                }

                $intStatusError = 1;
            }
            else
            {
                $strMensajeError = trim($strMensajeError);
            }

            $arrayRespuesta = array ('strMensajeError' => $strMensajeError,
                                     'intStatusError'  => $intStatusError);
        }
        catch(\Exception $objException)
        {
            $arrayRespuesta = array ('strMensajeError' => $objException->getMessage(),
                                     'intStatusError'  => 1);
        }

        return $arrayRespuesta;
    }

    /**
     * Documentación para el método 'getSolicitudProyecto'.
     *
     * Método encargado de retornar las solicitudes de proyectos agrupadas por el id de la cotización.
     *
     * Costo 28
     *
     * @param array $arrayParametros [
     *                                  "strNombre"          => Nombre del cliente.
     *                                  "strApellido"        => Apellido del cliente.
     *                                  "strRazonSocial"     => Razón social del cliente.
     *                                  "strLogin"           => Login del cliente.
     *                                  "strFechaInicio"     => Fecha inicio de la solicitud.
     *                                  "strFechaFin"        => Fecha hasta de la solicitud.
     *                                  "intIdEmpresa"       => Código de la empresa.
     *                                  "strTipoSolicitud"   => Tipo de la solicitud.
     *                                  "strCaracteristica"  => Caracteristica del producto.
     *                                  "strEstado"          => Estado de la solicitud.
     *                                  "intIdCotizacion"    => Id de la cotización.
     *                                  "strTipoProyecto"    => Tipo de proyecto(PYL/PMO).
     *                                  "strCaracProyecto"   => Caracteristica del proyecto.
     *                                  "strBandera"         => Valor que me permite saber si se debe retornar el 
     *                                                          totalizado o el detalle de las solicitudes.
     *                               ]
     *
     * @return array $arrayResultado arreglo de las solicitudes.
     *
     * @author Kevin Baque <kbaque@telconet.ec>
     * @version 1.0 03-07-2020
     *
     */
    public function getSolicitudProyecto($arrayParametros)
    {
        try
        {
            $strNombre         = $arrayParametros['strNombre']         ? $arrayParametros['strNombre']:"";
            $strApellido       = $arrayParametros['strApellido']       ? $arrayParametros['strApellido']:"";
            $strRazonSocial    = $arrayParametros['strRazonSocial']    ? $arrayParametros['strRazonSocial']:"";
            $strLogin          = $arrayParametros['strLogin']          ? $arrayParametros['strLogin']:"";
            $strFechaInicio    = $arrayParametros['strFechaInicio']    ? $arrayParametros['strFechaInicio']:"";
            $strFechaFin       = $arrayParametros['strFechaFin']       ? $arrayParametros['strFechaFin']:"";
            $intIdEmpresa      = $arrayParametros['intIdEmpresa']      ? $arrayParametros['intIdEmpresa']:"";
            $strTipoSolicitud  = $arrayParametros['strTipoSolicitud']  ? $arrayParametros['strTipoSolicitud']:"";
            $strCaracteristica = $arrayParametros['strCaracteristica'] ? $arrayParametros['strCaracteristica']:"";
            $strEstado         = $arrayParametros['strEstado']         ? $arrayParametros['strEstado']:"";
            $strBandera        = $arrayParametros['strBandera']        ? $arrayParametros['strBandera']:"";
            $intIdCotizacion   = $arrayParametros['intIdCotizacion']   ? $arrayParametros['intIdCotizacion']:"";
            $strTipoProyecto   = $arrayParametros['strTipoProyecto']   ? $arrayParametros['strTipoProyecto']:"";
            $strCaracProyecto  = $arrayParametros['strCaracProyecto']   ? $arrayParametros['strCaracProyecto']:"";
            $arrayDatos        = array();
            $intTotal          = 0;
            $strMensajeError   = "";
            $objRsm            = new ResultSetMappingBuilder($this->_em);
            $objQuery          = $this->_em->createNativeQuery(null,$objRsm);
            $objRsmCount       = new ResultSetMappingBuilder($this->_em);
            $objQueryCount     = $this->_em->createNativeQuery(null, $objRsmCount);

            $strSelectCount = " SELECT COUNT(*) AS TOTAL ";

            $strSelect = " SELECT   ISPC.VALOR AS IDCOTIZACION,
                                    CASE
                                        WHEN IPE.RAZON_SOCIAL IS NOT NULL THEN
                                            IPE.RAZON_SOCIAL
                                        ELSE
                                            CONCAT(IPE.NOMBRES, CONCAT(' ', IPE.APELLIDOS))
                                    END AS NOMBRE_CLIENTE,
                                    IPE.IDENTIFICACION_CLIENTE,
                                    IPU.USR_VENDEDOR,
                                    IDS.ESTADO,
                                    IDS.OBSERVACION,
                                    TO_CHAR(IDS.FE_CREACION, 'DD/MM/YYYY') FE_CREACION ";

            $strFrom   = " FROM info_detalle_solicitud         ids,
                                admi_tipo_solicitud            ats,
                                info_servicio                  iser,
                                info_punto                     ipu,
                                info_persona_empresa_rol       iper,
                                info_empresa_rol               ier,
                                info_persona                   ipe,
                                info_servicio_prod_caract      ispc,
                                admi_caracteristica            ac,
                                admi_producto_caracteristica   apc,
                                admi_producto                  apr ";

            $strWhere  = " WHERE ids.tipo_solicitud_id                    = ats.id_tipo_solicitud
                                 AND ids.servicio_id                      = iser.id_servicio
                                 AND iser.punto_id                        = ipu.id_punto
                                 AND ipu.persona_empresa_rol_id           = iper.id_persona_rol
                                 AND iper.empresa_rol_id                  = ier.id_empresa_rol
                                 AND ispc.servicio_id                     = iser.id_servicio
                                 AND ac.id_caracteristica                 = apc.caracteristica_id
                                 AND ispc.producto_caracterisitica_id     = apc.id_producto_caracterisitica
                                 AND ipu.persona_empresa_rol_id           = iper.id_persona_rol
                                 AND ipe.id_persona                       = iper.persona_id
                                 AND apr.id_producto                      = iser.producto_id " ;

            $strGroupBy= " GROUP BY ispc.valor,
                                    ipe.identificacion_cliente,
                                    ipe.razon_social,
                                    ipe.nombres,
                                    ipe.apellidos,
                                    ispc.valor,
                                    ipu.usr_vendedor,
                                    ids.estado,
                                    ids.observacion,
                                    to_char(ids.fe_creacion, 'DD/MM/YYYY') ";
            $strOrderBy = " order by fe_creacion asc ";
            if(!empty($intIdEmpresa))
            {
                $strWhere     .= " AND ier.empresa_cod = :id_empresa ";
                $objQuery->setParameter("id_empresa", $intIdEmpresa);
                $objQueryCount->setParameter("id_empresa", $intIdEmpresa);
            }
            if(!empty($strTipoSolicitud))
            {
                $strWhere     .= " AND UPPER(ats.descripcion_solicitud) = :tipo_solicitud ";
                $objQuery->setParameter("tipo_solicitud", strtoupper($strTipoSolicitud));
                $objQueryCount->setParameter("tipo_solicitud", strtoupper($strTipoSolicitud));
            }
            if(!empty($strEstado))
            {
                $strWhere     .= " AND UPPER(ids.estado) = :estado ";
                $objQuery->setParameter("estado", strtoupper($strEstado));
                $objQueryCount->setParameter("estado", strtoupper($strEstado));
            }
            if(!empty($strCaracteristica))
            {
                $strWhere     .= " AND UPPER(ac.descripcion_caracteristica) = :descripcion_caracteristica ";
                $objQuery->setParameter("descripcion_caracteristica", strtoupper($strCaracteristica));
                $objQueryCount->setParameter("descripcion_caracteristica", strtoupper($strCaracteristica));
            }
            if(!empty($strFechaInicio))
            {
                $strWhere     .= " AND to_char(ids.fe_creacion, 'DD/MM/YYYY') >= :fe_desde ";
                $objQuery->setParameter('fe_desde', $strFechaInicio);
                $objQueryCount->setParameter('fe_desde', $strFechaInicio);
            }
            if(!empty($strFechaFin))
            {
                $strWhere     .= " AND to_char(ids.fe_creacion, 'DD/MM/YYYY') <= :fe_hasta ";
                $objQuery->setParameter('fe_hasta', $strFechaFin);
                $objQueryCount->setParameter('fe_hasta', $strFechaFin);
            }
            if(!empty($strNombre))
            {
                $strWhere .= " AND UPPER(ipe.NOMBRES)    LIKE (:strNombre) ";
                $objQuery->setParameter('strNombre', '%' . strtoupper($strNombre) . '%');
                $objQueryCount->setParameter('strNombre', '%' . strtoupper($strNombre) . '%');
            }
            if(!empty($strApellido))
            {
                $strWhere .= " AND UPPER(ipe.APELLIDOS)    LIKE (:strApellido) ";
                $objQuery->setParameter('strApellido', '%' . strtoupper($strApellido) . '%');
                $objQueryCount->setParameter('strApellido', '%' . strtoupper($strApellido) . '%');
            }
            if(!empty($strRazonSocial))
            {
                $strWhere .= " AND UPPER(ipe.RAZON_SOCIAL)    LIKE (:strRazonSocial) ";
                $objQuery->setParameter('strRazonSocial', '%' . strtoupper($strRazonSocial) . '%');
                $objQueryCount->setParameter('strRazonSocial', '%' . strtoupper($strRazonSocial) . '%');
            }
            if(!empty($strLogin))
            {
                $strWhere .= " AND UPPER(ipu.LOGIN)    LIKE (:strLogin) ";
                $objQuery->setParameter('strLogin', strtoupper($strLogin) . '%');
                $objQueryCount->setParameter('strLogin', strtoupper($strLogin) . '%');
            }

            if(!empty($intIdCotizacion))
            {
                $strWhere     .= " AND ISPC.VALOR IN (:intIdCotizacion) ";
                $objQuery->setParameter("intIdCotizacion", $intIdCotizacion);
                $objQueryCount->setParameter("intIdCotizacion", $intIdCotizacion);
            }

            if(!empty($strTipoProyecto) && !empty($strCaracProyecto))
            {
                $strFrom      .= " ,info_servicio_prod_caract      ispcp,
                                    admi_caracteristica            acp,
                                    admi_producto_caracteristica   apcp ";

                $strWhere     .= " AND ispcp.servicio_id                 = iser.id_servicio
                                   AND acp.id_caracteristica             = apcp.caracteristica_id
                                   AND acp.descripcion_caracteristica    = :strCaracProyecto
                                   AND ispcp.producto_caracterisitica_id = apcp.id_producto_caracterisitica
                                   AND ispcp.valor                       = :strTipoProyecto ";
                $objQuery->setParameter("strTipoProyecto", $strTipoProyecto);
                $objQueryCount->setParameter("strTipoProyecto", $strTipoProyecto);

                $objQuery->setParameter("strCaracProyecto", $strCaracProyecto);
                $objQueryCount->setParameter("strCaracProyecto", $strCaracProyecto);

            }
            if(!empty($strBandera) && $strBandera="TOTALIZADO")
            {
                $strSql = $strSelect.$strFrom.$strWhere.$strGroupBy.$strOrderBy;
            }
            else
            {
                $strSelect .= " ,IDS.ID_DETALLE_SOLICITUD,
                                ISER.ID_SERVICIO,
                                IPU.LOGIN,
                                APR.DESCRIPCION_PRODUCTO,
                                ISER.CANTIDAD,
                                ISER.DESCUENTO_UNITARIO,
                                ISER.VALOR_DESCUENTO,
                                ISER.PORCENTAJE_DESCUENTO,
                                ISER.ESTADO AS ESTADO_SERVICIO,
                                ISER.PRECIO_VENTA,
                                ISER.PRECIO_INSTALACION ";
                $objRsm->addScalarResult('ID_DETALLE_SOLICITUD', 'ID_DETALLE_SOLICITUD', 'string');
                $objRsm->addScalarResult('ID_SERVICIO',          'ID_SERVICIO',          'string');
                $objRsm->addScalarResult('DESCRIPCION_PRODUCTO', 'DESCRIPCION_PRODUCTO', 'string');
                $objRsm->addScalarResult('CANTIDAD',             'CANTIDAD',             'string');
                $objRsm->addScalarResult('DESCUENTO_UNITARIO',   'DESCUENTO_UNITARIO',   'string');
                $objRsm->addScalarResult('VALOR_DESCUENTO',      'VALOR_DESCUENTO',      'string');
                $objRsm->addScalarResult('PORCENTAJE_DESCUENTO', 'PORCENTAJE_DESCUENTO', 'string');
                $objRsm->addScalarResult('ESTADO_SERVICIO',      'ESTADO_SERVICIO',      'string');
                $objRsm->addScalarResult('PRECIO_VENTA',         'PRECIO_VENTA',         'string');
                $objRsm->addScalarResult('PRECIO_INSTALACION',   'PRECIO_INSTALACION',   'string');
                $objRsm->addScalarResult('LOGIN',                'LOGIN',                'string');
                $strSql = $strSelect.$strFrom.$strWhere.$strOrderBy;
            }
            $objRsm->addScalarResult('NOMBRE_CLIENTE', 'NOMBRE_CLIENTE', 'string');
            $objRsm->addScalarResult('IDCOTIZACION',   'IDCOTIZACION', 'string');
            $objRsm->addScalarResult('IDENTIFICACION_CLIENTE', 'IDENTIFICACION_CLIENTE', 'string');
            $objRsm->addScalarResult('USR_VENDEDOR', 'USR_VENDEDOR', 'string');
            $objRsm->addScalarResult('ESTADO',       'ESTADO',       'string');
            $objRsm->addScalarResult('OBSERVACION',  'OBSERVACION',  'string');
            $objRsm->addScalarResult('FE_CREACION',  'FE_CREACION',  'string');
            $objRsmCount->addScalarResult('TOTAL',   'total',        'integer');

            $strSqlFinal='';

            if( isset($arrayParametros['intStart']) && isset($arrayParametros['intLimit']) )
            {
                if($arrayParametros['intStart'] && $arrayParametros['intLimit'])
                {
                    $intInicio     = $arrayParametros['intStart'];
                    $intFin        = $arrayParametros['intStart'] + $arrayParametros['intLimit'];
                    $strSqlFinal   = '  SELECT * FROM 
                                        (
                                            SELECT consultaPrincipal.*,rownum AS consultaPrincipal_rownum 
                                            FROM ('.$strSql.') consultaPrincipal 
                                            WHERE rownum<='.$intFin.'
                                        ) WHERE consultaPrincipal_rownum >'.$intInicio;
                }
                else
                {
                    $strSqlFinal   = '  SELECT consultaPrincipal.* 
                                        FROM ('.$strSql.') consultaPrincipal 
                                        WHERE rownum<='.$arrayParametros['intLimit'];
                }
            }
            else
            {
                $strSqlFinal = $strSql;
            }

            $objQuery->setSQL($strSqlFinal);
            $arrayDatos = $objQuery->getResult();

            $strSqlCount   = $strSelectCount." FROM (".$strSql.")";
            $objQueryCount->setSQL($strSqlCount);
            $intTotal      = $objQueryCount->getSingleScalarResult();
        } 
        catch (\Exception $ex) 
        {
            $strMensajeError = $ex->getMessage();
        }
        $arrayResultado['registros'] = $arrayDatos;
        $arrayResultado['total']     = $intTotal;
        $arrayResultado['error']     = $strMensajeError;
        return $arrayResultado;
    }
    
    /**
     * getEstadoSolicitudAdicional
     * 
     * Verifica si un producto se encuentra asociado a una solicitud.
     * 
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.0 21-09-2020
     * costoQuery: 12
     * @param  array $arrayParametros [
     *                                  "Servicio"        :Servicio a consultar  
     *                                  "Producto"        :Producto a consultar 
     *                                  "TipoSolicitud"   :Descripcion de la Solciitud   
     *                                ]          
     * 
     * @return array $arrayResultado
     */
    public function getEstadoSolicitudAdicional($arrayParametros)
    {     
        $arrayResultado = array();
        $objQuery   = $this->_em->createQuery();
        $intServicioId    = $arrayParametros['Servicio'];
        $intProductoId    = $arrayParametros['Producto'];
        $intTipoSolicitud = $arrayParametros['TipoSolicitud'];

        
        $strSql           = "   SELECT ids
                                    FROM schemaBundle:InfoDetalleSolicitud ids, schemaBundle:InfoDetalleSolCaract idsc
                                    WHERE ids.servicioId=:servicio and
                                    ids.tipoSolicitudId = :solicitud and
                                    idsc.detalleSolicitudId = ids.id and
                                    idsc.valor =:producto " ;
        if(!isset($arrayParametros['Estado']) && $arrayParametros['Estado']!= 'NO')
        {
            $strSql .= " and ids.estado  NOT IN (:estados)";
            $objQuery->setParameter('estados', array('Activo','Finalizada'));
        }
                
        $objQuery->setParameter('servicio', $intServicioId);
        $objQuery->setParameter('producto', $intProductoId);
        $objQuery->setParameter('solicitud', $intTipoSolicitud);
        $objQuery->setDQL($strSql);
        $arrayResultado = $objQuery->getResult();
                
        return $arrayResultado;
    }

    /**
     * Documentación para la función 'getSolicitudReactivacion'.
     *
     * Función encargada de retornar las solicitudes de reactivacion.
     *
     * Costo 28
     *
     * @param array $arrayParametros [
     *                                  "intIdSolicitud"     => Id de la solicitud.
     *                                  "strIdentificacion"  => Identificación del cliente.
     *                                  "strNombre"          => Nombre del cliente.
     *                                  "strApellido"        => Apellido del cliente.
     *                                  "strRazonSocial"     => Razón social del cliente.
     *                                  "strFechaInicio"     => Fecha inicio de la solicitud.
     *                                  "strFechaFin"        => Fecha hasta de la solicitud.
     *                                  "strTipoSolicitud"   => Tipo de la solicitud.
     *                                  "strEstado"          => Estado de la solicitud.
     *                                  "strEstadoNotIn"     => Estado a no considerar.
     *                                  "strUsrCreacion"     => Usuario creador de la solicitud.
     *                                  "strPrefijoEmpresa"  => Prefijo de la empresa.
     *                                  "strTipoPersonal"    => Tipo de persona en sesión.
     *                                  "strCaracClt"        => Caracteristica de la solicitud donde se hace referencia al cliente.
     *                                  "strCaracUsuario"    => Caracteristica de la solicitud donde se hace referencia al usuario.
     *                                  "strCaracUsuarioC"   => Caracteristica de la solicitud donde se hace referencia al usuario cobranza.
     *                                  "strCaracTarea"      => Caracteristica de la solicitud donde se hace referencia a la tarea.
     *                                  "strCaracSaldoP"     => Caracteristica de la solicitud donde se hace referencia al saldo pendiente.
     *                                  "strCaracSaldoR"     => Caracteristica de la solicitud donde se hace referencia al saldo pendiente real.
     *                               ]
     *
     * @return array $arrayResultado arreglo de las solicitudes.
     *
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 1.0 11-11-2020
     *
     */
    public function getSolicitudReactivacion($arrayParametros)
    {
        try
        {
            $intIdSolicitud    = $arrayParametros['intIdSolicitud']    ? $arrayParametros['intIdSolicitud']:"";
            $strIdentificacion = $arrayParametros['strIdentificacion'] ? $arrayParametros['strIdentificacion']:"";
            $strNombre         = $arrayParametros['strNombre']         ? $arrayParametros['strNombre']:"";
            $strApellido       = $arrayParametros['strApellido']       ? $arrayParametros['strApellido']:"";
            $strRazonSocial    = $arrayParametros['strRazonSocial']    ? $arrayParametros['strRazonSocial']:"";
            $strFechaInicio    = $arrayParametros['strFechaInicio']    ? $arrayParametros['strFechaInicio']:"";
            $strFechaFin       = $arrayParametros['strFechaFin']       ? $arrayParametros['strFechaFin']:"";
            $strTipoSolicitud  = $arrayParametros['strTipoSolicitud']  ? $arrayParametros['strTipoSolicitud']:"";
            $strEstado         = $arrayParametros['strEstado']         ? $arrayParametros['strEstado']:"Pendiente";
            $strEstadoNotIn    = $arrayParametros['strEstadoNotIn']    ? $arrayParametros['strEstadoNotIn']:"";
            $strUsrCreacion    = $arrayParametros['strUsrCreacion']    ? $arrayParametros['strUsrCreacion']:"";
            $strPrefijoEmpresa = $arrayParametros['strPrefijoEmpresa'] ? $arrayParametros['strPrefijoEmpresa']:"";
            $strTipo           = $arrayParametros['strTipoPersonal']   ? $arrayParametros['strTipoPersonal']:"";
            $strCaracClt       = $arrayParametros['strCaracClt']       ? $arrayParametros['strCaracClt']:"";
            $strCaracUsuario   = $arrayParametros['strCaracUsuario']   ? $arrayParametros['strCaracUsuario']:"";
            $strCaracUsuarioC  = $arrayParametros['strCaracUsuarioC']  ? $arrayParametros['strCaracUsuarioC']:"";
            $strCaracTarea     = $arrayParametros['strCaracTarea']     ? $arrayParametros['strCaracTarea']:"";
            $strCaracSaldoP    = $arrayParametros['strCaracSaldoP']    ? $arrayParametros['strCaracSaldoP']:"";
            $strCaracSaldoR    = $arrayParametros['strCaracSaldoR']    ? $arrayParametros['strCaracSaldoR']:"";
            $arrayDatos        = array();
            $intTotal          = 0;
            $strMensajeError   = "";
            $objRsm            = new ResultSetMappingBuilder($this->_em);
            $objQuery          = $this->_em->createNativeQuery(null,$objRsm);
            $objRsmCount       = new ResultSetMappingBuilder($this->_em);
            $objQueryCount     = $this->_em->createNativeQuery(null, $objRsmCount);

            if($strPrefijoEmpresa != 'TN')
            {
                throw new \Exception('La consulta solo aplica para Telconet.');
            }

            $strSelectCount   = " SELECT COUNT(*) AS TOTAL ";
            $strSubQueryTarea = " SELECT
                                    IDSCT.VALOR
                                FROM
                                    DB_COMERCIAL.INFO_DETALLE_SOL_CARACT    IDSCT
                                    JOIN DB_COMERCIAL.ADMI_CARACTERISTICA   ACT ON ACT.ID_CARACTERISTICA = IDSCT.CARACTERISTICA_ID
                                    AND UPPER(ACT.DESCRIPCION_CARACTERISTICA) = :DESCRIPCION_CARACTERISTICA_TAREA
                                WHERE
                                    IDS.ID_DETALLE_SOLICITUD = IDSCT.DETALLE_SOLICITUD_ID ";
            $strSubQueryUs    = " SELECT
                                    IDSCU.VALOR
                                FROM
                                    DB_COMERCIAL.INFO_DETALLE_SOL_CARACT    IDSCU
                                    JOIN DB_COMERCIAL.ADMI_CARACTERISTICA   ACU ON ACU.ID_CARACTERISTICA = IDSCU.CARACTERISTICA_ID
                                    AND UPPER(ACU.DESCRIPCION_CARACTERISTICA) = :DESCRIPCION_CARACTERISTICA_USUARIO
                                WHERE
                                    IDS.ID_DETALLE_SOLICITUD = IDSCU.DETALLE_SOLICITUD_ID ";
            $strSubQuerySP    = " SELECT
                                    IDSCP.VALOR
                                FROM
                                    DB_COMERCIAL.INFO_DETALLE_SOL_CARACT    IDSCP
                                    JOIN DB_COMERCIAL.ADMI_CARACTERISTICA   ACU ON ACU.ID_CARACTERISTICA = IDSCP.CARACTERISTICA_ID
                                    AND UPPER(ACU.DESCRIPCION_CARACTERISTICA) = :DESCRIPCION_CARACTERISTICA_SALDO_P
                                WHERE
                                    IDS.ID_DETALLE_SOLICITUD = IDSCP.DETALLE_SOLICITUD_ID ";
            $strSubQuerySR    = " SELECT
                                    IDSCR.VALOR
                                FROM
                                    DB_COMERCIAL.INFO_DETALLE_SOL_CARACT    IDSCR
                                    JOIN DB_COMERCIAL.ADMI_CARACTERISTICA   ACU ON ACU.ID_CARACTERISTICA = IDSCR.CARACTERISTICA_ID
                                    AND UPPER(ACU.DESCRIPCION_CARACTERISTICA) = :DESCRIPCION_CARACTERISTICA_SALDO_R
                                WHERE
                                    IDS.ID_DETALLE_SOLICITUD = IDSCR.DETALLE_SOLICITUD_ID ";
            $strSelect = " SELECT
                            IDS.ID_DETALLE_SOLICITUD,
                            CASE
                                WHEN IPE.RAZON_SOCIAL IS NOT NULL THEN
                                    IPE.RAZON_SOCIAL
                                ELSE
                                    CONCAT(IPE.NOMBRES, CONCAT(' ', IPE.APELLIDOS))
                            END AS NOMBRE_CLIENTE,
                            IPE.ID_PERSONA,
                            IPE.IDENTIFICACION_CLIENTE,
                            IPE.DIRECCION_TRIBUTARIA,
                            IDS.ESTADO,
                            IDS.OBSERVACION,
                            TO_CHAR(IDS.FE_CREACION, 'DD/MM/YYYY') FE_CREACION,
                            IDS.USR_CREACION, 
                            (
                                ".$strSubQueryTarea."
                            ) AS TAREA,
                            (
                                ".$strSubQueryUs."
                            ) AS US_ASIGNADO,
                            (
                                ".$strSubQuerySP."
                            ) AS SALDO_P,
                            (
                                ".$strSubQuerySR."
                            ) AS SALDO_R ";

            $strFrom   = " FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD       IDS
                                JOIN DB_COMERCIAL.ADMI_TIPO_SOLICITUD     ATS ON ATS.ID_TIPO_SOLICITUD      = IDS.TIPO_SOLICITUD_ID
                                JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT IDSC ON IDSC.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD
                                JOIN DB_COMERCIAL.ADMI_CARACTERISTICA     AC ON AC.ID_CARACTERISTICA        = IDSC.CARACTERISTICA_ID
                                JOIN DB_COMERCIAL.INFO_PERSONA            IPE ON to_char(IPE.ID_PERSONA)    = IDSC.VALOR ";

            $strWhere  = " WHERE UPPER(ATS.DESCRIPCION_SOLICITUD)    = :DESCRIPCION_SOLICITUD 
                            AND UPPER(AC.DESCRIPCION_CARACTERISTICA) = :DESCRIPCION_CARACTERISTICA_CLT " ;

            $objQuery->setParameter("DESCRIPCION_SOLICITUD", strtoupper($strTipoSolicitud));
            $objQueryCount->setParameter("DESCRIPCION_SOLICITUD", strtoupper($strTipoSolicitud));

            $objQuery->setParameter("DESCRIPCION_CARACTERISTICA_CLT", strtoupper($strCaracClt));
            $objQueryCount->setParameter("DESCRIPCION_CARACTERISTICA_CLT", strtoupper($strCaracClt));

            $objQuery->setParameter("DESCRIPCION_CARACTERISTICA_TAREA", strtoupper($strCaracTarea));
            $objQueryCount->setParameter("DESCRIPCION_CARACTERISTICA_TAREA", strtoupper($strCaracTarea));

            $objQuery->setParameter("DESCRIPCION_CARACTERISTICA_USUARIO", strtoupper($strCaracUsuario));
            $objQueryCount->setParameter("DESCRIPCION_CARACTERISTICA_USUARIO", strtoupper($strCaracUsuario));

            $objQuery->setParameter("DESCRIPCION_CARACTERISTICA_SALDO_P", strtoupper($strCaracSaldoP));
            $objQueryCount->setParameter("DESCRIPCION_CARACTERISTICA_SALDO_P", strtoupper($strCaracSaldoP));

            $objQuery->setParameter("DESCRIPCION_CARACTERISTICA_SALDO_R", strtoupper($strCaracSaldoR));
            $objQueryCount->setParameter("DESCRIPCION_CARACTERISTICA_SALDO_R", strtoupper($strCaracSaldoR));

            $strOrderBy = " ORDER BY IDS.FE_CREACION DESC ";

            if(!empty($strTipo) && ($strTipo == 'ASISTENTE' || $strTipo == 'VENDEDOR'))
            {
                $strQueryIn = " JOIN DB_COMERCIAL.INFO_PERSONA IPT ON  IPT.LOGIN = IDS.USR_CREACION 
                                    AND UPPER(IPT.LOGIN) = :LOGIN ";
                $objQuery->setParameter("LOGIN", strtoupper($strUsrCreacion));
                $objQueryCount->setParameter("LOGIN", strtoupper($strUsrCreacion));
                $strFrom .= $strQueryIn;
            }

            if(!empty($strTipo) && $strTipo == 'USUARIO_GESTION_SOLICITUD')
            {
                $strWhere .= "AND IDS.ID_DETALLE_SOLICITUD IN (
                                SELECT IDSC_T.DETALLE_SOLICITUD_ID
                                    FROM
                                        DB_COMERCIAL.INFO_DETALLE_SOL_CARACT  IDSC_T
                                        JOIN DB_COMERCIAL.ADMI_CARACTERISTICA ACT ON  ACT.ID_CARACTERISTICA = IDSC_T.CARACTERISTICA_ID
                                            AND UPPER(ACT.DESCRIPCION_CARACTERISTICA) = :DESCRIPCION_CARACTERISTICA_US
                                            AND UPPER(IDSC_T.VALOR)                   = :LOGIN ) ";
                $objQuery->setParameter("LOGIN", strtoupper($strUsrCreacion));
                $objQueryCount->setParameter("LOGIN", strtoupper($strUsrCreacion));

                $objQuery->setParameter("DESCRIPCION_CARACTERISTICA_US", strtoupper($strCaracUsuario));
                $objQueryCount->setParameter("DESCRIPCION_CARACTERISTICA_US", strtoupper($strCaracUsuario));
            }

            if(!empty($strTipo) && $strTipo == 'USUARIO_ASIGNA_SOLICITUD')
            {
                $strWhere .= "AND IDS.ID_DETALLE_SOLICITUD IN (
                                SELECT IDSC_T.DETALLE_SOLICITUD_ID
                                    FROM
                                        DB_COMERCIAL.INFO_DETALLE_SOL_CARACT  IDSC_T
                                        JOIN DB_COMERCIAL.ADMI_CARACTERISTICA ACT ON  ACT.ID_CARACTERISTICA = IDSC_T.CARACTERISTICA_ID
                                            AND UPPER(ACT.DESCRIPCION_CARACTERISTICA) = :DESCRIPCION_CARACTERISTICA_US_C
                                            AND UPPER(IDSC_T.VALOR)                   = :LOGIN ) ";
                $objQuery->setParameter("LOGIN", strtoupper($strUsrCreacion));
                $objQueryCount->setParameter("LOGIN", strtoupper($strUsrCreacion));

                $objQuery->setParameter("DESCRIPCION_CARACTERISTICA_US_C", strtoupper($strCaracUsuarioC));
                $objQueryCount->setParameter("DESCRIPCION_CARACTERISTICA_US_C", strtoupper($strCaracUsuarioC));
            }

            if(!empty($strEstadoNotIn))
            {
                $strSubQueryTarea .= " AND UPPER(IDSCT.ESTADO) != :strEstadoTarea ";
                $objQuery->setParameter("strEstadoTarea", strtoupper($strEstadoNotIn));
                $objQueryCount->setParameter("strEstadoTarea", strtoupper($strEstadoNotIn));

                $strWhere         .= " AND UPPER(IDS.ESTADO)   != :strEstado ";
                $objQuery->setParameter("strEstado", strtoupper($strEstadoNotIn));
                $objQueryCount->setParameter("strEstado", strtoupper($strEstadoNotIn));

                $strWhere .= " AND UPPER(IDSC.ESTADO) != :strEstado ";
                $objQuery->setParameter("strEstado", strtoupper($strEstadoNotIn));
                $objQueryCount->setParameter("strEstado", strtoupper($strEstadoNotIn));

                $strSubQueryUs    .=" AND UPPER(IDSCU.ESTADO)  != :strEstadoUs ";
                $objQuery->setParameter("strEstadoUs", strtoupper($strEstadoNotIn));
                $objQueryCount->setParameter("strEstadoUs", strtoupper($strEstadoNotIn));

                $strSubQuerySP    .=" AND UPPER(IDSCP.ESTADO)  != :strEstadoSaldoP ";
                $objQuery->setParameter("strEstadoSaldoP", strtoupper($strEstadoNotIn));
                $objQueryCount->setParameter("strEstadoSaldoP", strtoupper($strEstadoNotIn));

                $strSubQuerySR    .=" AND UPPER(IDSCR.ESTADO)  != :strEstadoSaldoR ";
                $objQuery->setParameter("strEstadoSaldoR", strtoupper($strEstadoNotIn));
                $objQueryCount->setParameter("strEstadoSaldoR", strtoupper($strEstadoNotIn));
            }
            else if(!empty($strEstado))
            {
                $strSubQueryTarea .=" AND UPPER(IDSCT.ESTADO) = :strEstadoTarea ";
                $objQuery->setParameter("strEstadoTarea", strtoupper($strEstado));
                $objQueryCount->setParameter("strEstadoTarea", strtoupper($strEstado));

                $strWhere         .= " AND UPPER(IDS.ESTADO)  = :strEstado ";
                $objQuery->setParameter("strEstado", strtoupper($strEstado));
                $objQueryCount->setParameter("strEstado", strtoupper($strEstado));

                $strWhere .= " AND UPPER(IDSC.ESTADO) = :strEstado ";
                $objQuery->setParameter("strEstado", strtoupper($strEstado));
                $objQueryCount->setParameter("strEstado", strtoupper($strEstado));

                $strSubQueryUs    .=" AND UPPER(IDSCU.ESTADO) = :strEstadoUs ";
                $objQuery->setParameter("strEstadoUs", strtoupper($strEstado));
                $objQueryCount->setParameter("strEstadoUs", strtoupper($strEstado));

                $strSubQuerySP    .=" AND UPPER(IDSCP.ESTADO) = :strEstadoSaldoP ";
                $objQuery->setParameter("strEstadoSaldoP", strtoupper($strEstado));
                $objQueryCount->setParameter("strEstadoSaldoP", strtoupper($strEstado));

                $strSubQuerySR    .=" AND UPPER(IDSCR.ESTADO) = :strEstadoSaldoR ";
                $objQuery->setParameter("strEstadoSaldoR", strtoupper($strEstado));
                $objQueryCount->setParameter("strEstadoSaldoR", strtoupper($strEstado));
            }

            if(!empty($strFechaInicio))
            {
                $strWhere .= " AND to_char(IDS.fe_creacion, 'DD/MM/YYYY') >= :strFechaInicio ";
                $objQuery->setParameter('strFechaInicio', $strFechaInicio);
                $objQueryCount->setParameter('strFechaInicio', $strFechaInicio);
            }

            if(!empty($strFechaFin))
            {
                $strWhere .= " AND to_char(IDS.fe_creacion, 'DD/MM/YYYY') <= :strFechaFin ";
                $objQuery->setParameter('strFechaFin', $strFechaFin);
                $objQueryCount->setParameter('strFechaFin', $strFechaFin);
            }

            if(!empty($strNombre))
            {
                $strWhere .= " AND UPPER(IPE.NOMBRES)    LIKE (:strNombre) ";
                $objQuery->setParameter('strNombre', '%' . strtoupper($strNombre) . '%');
                $objQueryCount->setParameter('strNombre', '%' . strtoupper($strNombre) . '%');
            }

            if(!empty($strApellido))
            {
                $strWhere .= " AND UPPER(IPE.APELLIDOS)    LIKE (:strApellido) ";
                $objQuery->setParameter('strApellido', '%' . strtoupper($strApellido) . '%');
                $objQueryCount->setParameter('strApellido', '%' . strtoupper($strApellido) . '%');
            }

            if(!empty($strRazonSocial))
            {
                $strWhere .= " AND UPPER(IPE.RAZON_SOCIAL)    LIKE (:strRazonSocial) ";
                $objQuery->setParameter('strRazonSocial', '%' . strtoupper($strRazonSocial) . '%');
                $objQueryCount->setParameter('strRazonSocial', '%' . strtoupper($strRazonSocial) . '%');
            }

            if(!empty($strIdentificacion))
            {
                $strWhere .= " AND IPE.IDENTIFICACION_CLIENTE = :strIdentificacion ";
                $objQuery->setParameter('strIdentificacion', $strIdentificacion);
                $objQueryCount->setParameter('strIdentificacion', $strIdentificacion);
            }

            if(!empty($intIdSolicitud))
            {
                $strWhere .= " AND IDS.ID_DETALLE_SOLICITUD IN (:intIdSolicitud) ";
                $objQuery->setParameter('intIdSolicitud', $intIdSolicitud);
                $objQueryCount->setParameter('intIdSolicitud', $intIdSolicitud);
            }

            $objRsm->addScalarResult('ID_DETALLE_SOLICITUD',   'ID_DETALLE_SOLICITUD',   'string');
            $objRsm->addScalarResult('NOMBRE_CLIENTE',         'NOMBRE_CLIENTE',         'string');
            $objRsm->addScalarResult('ID_PERSONA',             'ID_PERSONA',             'string');
            $objRsm->addScalarResult('IDENTIFICACION_CLIENTE', 'IDENTIFICACION_CLIENTE', 'string');
            $objRsm->addScalarResult('DIRECCION_TRIBUTARIA',   'DIRECCION_TRIBUTARIA',   'string');
            $objRsm->addScalarResult('ESTADO',                 'ESTADO',                 'string');
            $objRsm->addScalarResult('OBSERVACION',            'OBSERVACION',            'string');
            $objRsm->addScalarResult('FE_CREACION',            'FE_CREACION',            'string');
            $objRsm->addScalarResult('USR_CREACION',           'USR_CREACION',           'string');
            $objRsm->addScalarResult('TAREA',                  'TAREA',                  'string');
            $objRsm->addScalarResult('US_ASIGNADO',            'US_ASIGNADO',            'string');
            $objRsm->addScalarResult('SALDO_P',                'SALDO_P',                'string');
            $objRsm->addScalarResult('SALDO_R',                'SALDO_R',                'string');
            $objRsmCount->addScalarResult('TOTAL',             'total',                  'integer');
            $strSql      = $strSelect.$strFrom.$strWhere.$strOrderBy;
            $strSqlFinal ='';

            if(isset($arrayParametros['intStart']) && isset($arrayParametros['intLimit']))
            {
                if($arrayParametros['intStart'] && $arrayParametros['intLimit'])
                {
                    $intInicio     = $arrayParametros['intStart'];
                    $intFin        = $arrayParametros['intStart'] + $arrayParametros['intLimit'];
                    $strSqlFinal   = '  SELECT * FROM 
                                        (
                                            SELECT consultaPrincipal.*,rownum AS consultaPrincipal_rownum 
                                            FROM ('.$strSql.') consultaPrincipal 
                                            WHERE rownum<='.$intFin.'
                                        ) WHERE consultaPrincipal_rownum >'.$intInicio;
                }
                else
                {
                    $strSqlFinal   = '  SELECT consultaPrincipal.* 
                                        FROM ('.$strSql.') consultaPrincipal 
                                        WHERE rownum<='.$arrayParametros['intLimit'];
                }
            }
            else
            {
                $strSqlFinal = $strSql;
            }

            $objQuery->setSQL($strSqlFinal);
            $arrayDatos  = $objQuery->getResult();
            $strSqlCount = $strSelectCount." FROM ( ".$strSql." )";
            $objQueryCount->setSQL($strSqlCount);
            $intTotal    = $objQueryCount->getSingleScalarResult();
        } 
        catch (\Exception $ex) 
        {
            $strMensajeError = $ex->getMessage();
        }
        $arrayResultado['registros'] = $arrayDatos;
        $arrayResultado['total']     = $intTotal;
        $arrayResultado['error']     = $strMensajeError;

        return $arrayResultado;

    }
    
    /**
     * Documentación para el método 'getListadoSolCamFactura'.
     *
     * Método encargado de retornar el listado de solicitudes de facturas .
     * 
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.0 21-09-2020
     * costoQuery: 12
     * @param  array $arrayParametros [
     *                                  "intCaracteristica"   => Identificador de la característica a consultar
     *                                  "intIdTipoSolicitud"  => Identificador de la solicitud a consultar
     *                                  "intCaractFactura"    => Identificador de la característica de factura a consultar
     *                                  "intIdEmpresa"        => Identificador de la empresa a consultar
     *                                  "strUsuario"          => Login del usuario a consultar
     *                                  "strEstado"           => Estado de la solicitud a consultar
     *                                  "strRegion"           => Región de la solicitud a consultar
     *                                  "strPrefijoEmpresa"   => Prefijo de la empresa a consultar
     *                                  "strCargo"            => Cargo de la persona en sesión a consultar
     *                                  "strLogin"            => Login del creador de la solicitud a consultar
     *                                  "boolIgnorarCargo"    => Bandera que indica si el usuario aprueba sin importar el cargo
     *                                  "strFechaInicio"      => Fecha de inicio de la solicitud a consultar
     *                                  "strFechaFin"         => Fecha de fin de la solicitud a consultar
     *                                  "arrayRolNoPermitido" => Roles no permitidos de los usuarios
     *                                  "arrayVendedores"     => Listado de vendedores en caso de ser subgerente la persona en sesión
     *                                ]
     * 
     * @return array $arrayResultado
     * 
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 1.1 07-04-2021 - Se agrega lógica para listar las solicitudes de R1 y R2.
     */
    public function getListadoSolCamFactura($arrayParametros)
    {     
        $arrayResultado = array();
        $objQuery   = $this->_em->createQuery();
        $intCaracteristicaId = $arrayParametros['intCaracteristica'];
        $intCaractFactura    = $arrayParametros['intCaractFactura'];
        $intTipoSolicitud    = $arrayParametros['intIdTipoSolicitud'];
        $strUsuario          = $arrayParametros['strUsuario'];
        $strEstado           = $arrayParametros['strEstado'];
        $strRegion           = $arrayParametros['strRegion'];
        $intIdEmpresa        = $arrayParametros['intIdEmpresa'];
        $strPrefijoEmpresa   = $arrayParametros['strPrefijoEmpresa'];
        $strCargo            = $arrayParametros['strCargo'];
        $strLogin            = $arrayParametros['strLogin'];
        $boolIgnorarCargo    = $arrayParametros['boolIgnorarCargo'];
        $strFechaInicio      = $arrayParametros['strFechaInicio'];
        $strFechaFin         = $arrayParametros['strFechaFin'];
        $strEstadoActivo     = "Activo";
        $arrayEstados        = array("Activo","Pendiente","Modificado");
        $arrayRolNoPermitido = ( isset($arrayParametros['arrayRolNoPermitido']) && !empty($arrayParametros['arrayRolNoPermitido']) ) 
                                ? $arrayParametros['arrayRolNoPermitido'] : '';
        $arrayVendedores      = ( isset($arrayParametros['arrayVendedores']) && !empty($arrayParametros['arrayVendedores']) ) 
                                   ? $arrayParametros['arrayVendedores'] : '';
        $strSelect = " SELECT IDS.ID_DETALLE_SOLICITUD AS ID_SOLICITUD,
                              (SELECT CONCAT(IPE_SUB.NOMBRES,CONCAT(' ',IPE_SUB.APELLIDOS)) 
                                FROM INFO_PERSONA IPE_SUB 
                                WHERE TO_CHAR(IPE_SUB.LOGIN)=TO_CHAR(IDSC.VALOR)) AS VENDEDOR,
                              IDS.ESTADO               AS ESTADO,
                              IDS.OBSERVACION          AS OBSERVACION,
                              (
                                SELECT
                                    IDFC.VALOR_TOTAL
                                FROM
                                    INFO_DETALLE_SOL_CARACT              IDSC_SUB
                                    JOIN ADMI_CARACTERISTICA             AC_SUB   ON AC_SUB.ID_CARACTERISTICA = IDSC_SUB.CARACTERISTICA_ID
                                    JOIN INFO_DOCUMENTO_FINANCIERO_CAB   IDFC     ON IDFC.ID_DOCUMENTO        = IDSC_SUB.VALOR
                                WHERE
                                    IDSC_SUB.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD
                                    AND ID_CARACTERISTICA = :intCaractFactura
                              ) AS VALOR_TOTAL,
                              IDS.FE_CREACION          AS FECHA ";
        $strFrom   = " FROM INFO_DETALLE_SOLICITUD IDS
                       JOIN INFO_DETALLE_SOL_CARACT IDSC ON IDS.ID_DETALLE_SOLICITUD = IDSC.DETALLE_SOLICITUD_ID ";
        $strWhere  = " WHERE IDS.TIPO_SOLICITUD_ID = :tipoSolicitud 
                       AND IDSC.CARACTERISTICA_ID  = :caracteristicaId ";

        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        $objQuery->setParameter("intCaractFactura", $intCaractFactura);
        $objQuery->setParameter("tipoSolicitud", $intTipoSolicitud);
        $objQuery->setParameter("caracteristicaId", $intCaracteristicaId);

        if($boolIgnorarCargo && !empty($strRegion))
        {
            $strFrom .= " JOIN INFO_PERSONA               IPE  ON IPE.LOGIN          = TO_CHAR(IDSC.VALOR)
                          JOIN INFO_PERSONA_EMPRESA_ROL   IPER ON IPER.PERSONA_ID    = IPE.ID_PERSONA
                          JOIN INFO_OFICINA_GRUPO         IOG  ON IOG.ID_OFICINA     = IPER.OFICINA_ID
                          JOIN ADMI_CANTON                AC   ON AC.ID_CANTON       = IOG.CANTON_ID
                          JOIN INFO_EMPRESA_ROL           IER  ON IER.ID_EMPRESA_ROL = IPER.EMPRESA_ROL_ID
                          JOIN INFO_EMPRESA_GRUPO         IEG  ON IEG.COD_EMPRESA    = IER.EMPRESA_COD
                          JOIN ADMI_ROL                   AR   ON AR.ID_ROL          = IER.ROL_ID ";
            $strWhere .= " AND IPE.ESTADO IN (:arrayEstados)
                           AND IPER.ESTADO     = :strEstadoActivo
                           AND IEG.COD_EMPRESA = :intIdEmpresa
                           AND IEG.PREFIJO     = :strPrefijoEmpresa
                           AND AC.REGION       = :strRegion 
                           AND AR.DESCRIPCION_ROL NOT IN(:arrayRolNoPermitido) ";
            $objQuery->setParameter('arrayEstados',        $arrayEstados);
            $objQuery->setParameter('strEstadoActivo',     $strEstadoActivo);
            $objQuery->setParameter('intIdEmpresa',        $intIdEmpresa);
            $objQuery->setParameter('strPrefijoEmpresa',   $strPrefijoEmpresa);
            $objQuery->setParameter('strRegion',           $strRegion);
            $objQuery->setParameter('arrayRolNoPermitido', $arrayRolNoPermitido);
        }
        else
        {
            if(!empty($strCargo) && $strCargo == "VENDEDOR")
            {
                $strWhere .= " AND IDSC.VALOR = :usuario ";
                $objQuery->setParameter('usuario', $strUsuario);
            }
            elseif((!empty($strCargo) && $strCargo == "SUBGERENTE") && (!empty($arrayVendedores) && is_array($arrayVendedores)))
            {
                $strWhere .= " AND  ((IDSC.VALOR IN (:vendedores) and IDS.ESTADO=:estado) OR (IDSC.VALOR =:usuario)) ";
                $objQuery->setParameter('vendedores', $arrayVendedores);
                $objQuery->setParameter('usuario', $strUsuario);
                $objQuery->setParameter('estado', $strEstado);
            }
            elseif(!empty($strCargo) && $strCargo == "GERENTE_VENTAS")
            {
                $strWhere .= " AND (IDSC.VALOR =:usuario OR IDSC.estado=:estado) ";
                $objQuery->setParameter('usuario', $strUsuario);
                $objQuery->setParameter('estado', $strEstado);
            }
        }

        if(!empty($strEstado) && $strEstado!='Seleccionar')
        {
            $strWhere .= " AND IDSC.estado=:estado ";
            $objQuery->setParameter('estado', $strEstado);
        }
        
        if(!empty($strLogin))
        {
            $strWhere .= " AND  IDSC.USR_CREACION=:strLogin ";
            $objQuery->setParameter('strLogin', $strLogin);
        }
        
        if(!empty($strFechaInicio))
        {
            $strWhere .= " AND to_char(IDS.fe_creacion, 'DD/MM/YYYY') >= :strFechaInicio ";
            $objQuery->setParameter('strFechaInicio', $strFechaInicio);
        }

        if(!empty($strFechaFin))
        {
            $strWhere .= " AND to_char(IDS.fe_creacion, 'DD/MM/YYYY') <= :strFechaFin ";
            $objQuery->setParameter('strFechaFin', $strFechaFin);
        }

        $objRsm->addScalarResult('ID_SOLICITUD', 'idSolicitud', 'string');
        $objRsm->addScalarResult('VENDEDOR', 'vendedor', 'string');
        $objRsm->addScalarResult('ESTADO', 'estado', 'string');
        $objRsm->addScalarResult('OBSERVACION', 'observacion', 'string');
        $objRsm->addScalarResult('VALOR_TOTAL', 'valor_total', 'string');
        $objRsm->addScalarResult('FECHA', 'fecha', 'string');
        $strSql    = $strSelect.$strFrom.$strWhere;
        $objQuery->setSQL($strSql);
        $arrayRespuesta = $objQuery->getScalarResult();
        return $arrayRespuesta;
    }

    /*
     * getTareasxSolicitudxProceso
     * 
     * Obtiene tareas asociado a una solicitud según el nombre de tarea y
     * proceso que se envíe y que sigan abiertas.
     * 
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.0 11-02-2021
     * costoQuery: 12
     * @param  array $arrayParametros [
     *                                  "detalleSolId"    :Solicitud a consultar  
     *                                  "nombreTarea"     :Nombre de tarea a filtrar 
     *                                  "nombreProceso"   :Proceso de la tarea  
     *                                ]          
     * 
     * @return array $arrayResultado
     */
    public function getTareasxSolicitudxProceso($arrayParametros)
    {     
        $objRsm           = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery      = $this->_em->createNativeQuery(null, $objRsm);
        $intDetalleSol  = $arrayParametros['detalleSolId'];
        $strTarea       = $arrayParametros['nombreTarea'];
        $strProceso     = $arrayParametros['nombreProceso'];

        try
        {
         $strSql       = "  SELECT TAREA.ID_INFO_TAREA,
                                    TAREA.NUMERO_TAREA,
                                    TAREA.ESTADO,
                                    DETALLE.ID_DETALLE
                            FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOL
                            JOIN DB_SOPORTE.INFO_DETALLE DETALLE
                            ON DETALLE.DETALLE_SOLICITUD_ID = SOL.ID_DETALLE_SOLICITUD
                            JOIN DB_SOPORTE.INFO_TAREA TAREA
                            ON TAREA.DETALLE_ID             = DETALLE.ID_DETALLE
                            JOIN DB_SOPORTE.ADMI_TAREA ATAREA
                            ON ATAREA.ID_TAREA              = TAREA.TAREA_ID
                            JOIN DB_SOPORTE.ADMI_PROCESO PROCESO
                            ON PROCESO.ID_PROCESO           = ATAREA.PROCESO_ID
                            WHERE SOL.ID_DETALLE_SOLICITUD  = :detalleSolId
                            AND   TAREA.ESTADO    NOT IN ('Finalizada', 'Cancelada', 'Rechazada') 
                            AND   ATAREA.NOMBRE_TAREA       = :nombreTarea
                            AND   PROCESO.NOMBRE_PROCESO    = :nombreProceso" ;

            $objRsm->addScalarResult('ID_INFO_TAREA'  ,'idTarea'     ,'integer');
            $objRsm->addScalarResult('NUMERO_TAREA'   ,'numeroTarea' ,'integer');
            $objRsm->addScalarResult('ID_DETALE'      ,'detalleId'   ,'integer');
            $objRsm->addScalarResult('ESTADO'         ,'estadoTarea' ,'string');
            $objRsm->addScalarResult('ID_DETALLE'     ,'detalleId'   ,'integer');
            $objNtvQuery->setParameter('detalleSolId'  ,  $intDetalleSol);
            $objNtvQuery->setParameter('nombreTarea'   ,  $strTarea);
            $objNtvQuery->setParameter('nombreProceso' ,  $strProceso);
            $objNtvQuery->setSQL($strSql);
            $arrayResultado = $objNtvQuery->getResult();
        }
        catch (\Exception $ex) 
        {
            $strMensajeError = $ex->getMessage();
            $arrayResultado ['estado']  = 'ERROR';
            $arrayResultado ['mensaje'] = $strMensajeError;
        }        
        return $arrayResultado;
    }
    /**
     * Documentación para la función 'getSolicitudDistribuidor'.
     *
     * Función encargada de retornar las solicitudes de Distribuidor.
     *
     * Costo 28
     *
     * @param array $arrayParametros [
     *                                  "intIdSolicitud"         => Id de la solicitud.
     *                                  "strIdentificacion"      => Identificación del cliente.
     *                                  "strRazonSocial"         => Razón social del cliente.
     *                                  "strFechaInicio"         => Fecha inicio de la solicitud.
     *                                  "strFechaFin"            => Fecha hasta de la solicitud.
     *                                  "strTipoSolicitud"       => Tipo de la solicitud.
     *                                  "strEstado"              => Estado de la solicitud.
     *                                  "strEstadoNotIn"         => Estado a no considerar en la solicitud.
     *                                  "strUsrCreacion"         => Usuario creador de la solicitud.
     *                                  "strPrefijoEmpresa"      => Prefijo de la empresa.
     *                                  "strCaracIdentificacion" => Caracteristica de la solicitud donde se hace referencia al cliente.
     *                                  "strCaracRazonSocial"    => Caracteristica de la solicitud donde se hace referencia al cliente.
     *                                  "strCaracVendedor"       => Caracteristica de la solicitud donde se hace referencia al usuario vendedor.
     *                                  "strCaracProducto"       => Caracteristica de la solicitud donde se hace referencia a los productos.
     *                                  "intIdPersonaEmpresaRol" => Id persona rol del cliente.
     *                                  "arrayRolNoPermitido"    => Roles no permitidos.
     *                                  "strRegion"              => Región de la persona para realizar la gestión de la solicitud.
     *                                  "boolIgnorarCargo"       => Bandera que permite ignorar el cargo de la persona en sesión.
     *                                  "intIdEmpresa"           => Identificador de la empresa.
     *                               ]
     *
     * @return array $arrayResultado arreglo de las solicitudes.
     *
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 1.0 11-05-2021
     *
     */
    public function getSolicitudDistribuidor($arrayParametros)
    {
        try
        {
            $intIdSolicitud         = $arrayParametros['intIdSolicitud']         ? $arrayParametros['intIdSolicitud']:"";
            $strIdentificacion      = $arrayParametros['strIdentificacion']      ? $arrayParametros['strIdentificacion']:"";
            $strRazonSocial         = $arrayParametros['strRazonSocial']         ? $arrayParametros['strRazonSocial']:"";
            $strFechaInicio         = $arrayParametros['strFechaInicio']         ? $arrayParametros['strFechaInicio']:"";
            $strFechaFin            = $arrayParametros['strFechaFin']            ? $arrayParametros['strFechaFin']:"";
            $strTipoSolicitud       = $arrayParametros['strTipoSolicitud']       ? $arrayParametros['strTipoSolicitud']:"";
            $strTipo                = $arrayParametros['strTipoPersonal']        ? $arrayParametros['strTipoPersonal']:"";
            $strEstado              = $arrayParametros['strEstado']              ? $arrayParametros['strEstado']:"";
            $strEstadoNotIn         = $arrayParametros['strEstadoNotIn']         ? $arrayParametros['strEstadoNotIn']:"";
            $strUsrCreacion         = $arrayParametros['strUsrCreacion']         ? $arrayParametros['strUsrCreacion']:"";
            $strPrefijoEmpresa      = $arrayParametros['strPrefijoEmpresa']      ? $arrayParametros['strPrefijoEmpresa']:"";
            $strCaracIdentificacion = $arrayParametros['strCaracIdentificacion'] ? $arrayParametros['strCaracIdentificacion']:"";
            $strCaracRazonSocial    = $arrayParametros['strCaracRazonSocial']    ? $arrayParametros['strCaracRazonSocial']:"";
            $strCaracVendedor       = $arrayParametros['strCaracVendedor']       ? $arrayParametros['strCaracVendedor']:"";
            $strCaracProducto       = $arrayParametros['strCaracProducto']       ? $arrayParametros['strCaracProducto']:"";
            $intIdPersonaEmpresaRol = $arrayParametros['intIdPersonaEmpresaRol'] ? $arrayParametros['intIdPersonaEmpresaRol']:"";
            $arrayRolNoPermitido    = $arrayParametros['arrayRolNoPermitido']    ? $arrayParametros['arrayRolNoPermitido']:"";
            $strRegion              = $arrayParametros['strRegion']              ? $arrayParametros['strRegion']:"";
            $boolIgnorarCargo       = $arrayParametros['boolIgnorarCargo']       ? $arrayParametros['boolIgnorarCargo']:"";
            $intIdEmpresa           = $arrayParametros['intIdEmpresa']           ? $arrayParametros['intIdEmpresa']:"";
            $arrayVendedoresKam     = $arrayParametros['arrayVendedoresKam']     ? $arrayParametros['arrayVendedoresKam']:"";
            $arrayDatos             = array();
            $intTotal               = 0;
            $strMensajeError        = "";
            $objRsm                 = new ResultSetMappingBuilder($this->_em);
            $objQuery               = $this->_em->createNativeQuery(null,$objRsm);
            $objRsmCount            = new ResultSetMappingBuilder($this->_em);
            $objQueryCount          = $this->_em->createNativeQuery(null, $objRsmCount);
            $strEstadoActivo        = "Activo";
            $strEstadoKam           = "Pendiente";
            $arrayEstados           = array("Activo","Pendiente","Modificado"); 
            if($strPrefijoEmpresa != 'TN')
            {
                throw new \Exception('La consulta solo aplica para Telconet.');
            }

            $strSelectCount   = " SELECT COUNT(*) AS TOTAL ";
            $strSubQueryProductos   = " 
                                        SELECT
                                            IDSCPR.VALOR
                                        FROM
                                            DB_COMERCIAL.INFO_DETALLE_SOL_CARACT    IDSCPR
                                            JOIN DB_COMERCIAL.ADMI_CARACTERISTICA   ACU ON ACU.ID_CARACTERISTICA = IDSCPR.CARACTERISTICA_ID
                                            AND UPPER(ACU.DESCRIPCION_CARACTERISTICA) = :DESCRIPCION_CARACTERISTICA_PRODUCTOS
                                        WHERE
                                            IDS.ID_DETALLE_SOLICITUD = IDSCPR.DETALLE_SOLICITUD_ID ";
            $strSelect = " SELECT
                            IDS.ID_DETALLE_SOLICITUD,
                            IDS.ESTADO,
                            IDS.OBSERVACION,
                            TO_CHAR(IDS.FE_CREACION, 'DD/MM/YYYY') FE_CREACION,
                            IDS.USR_CREACION, 
                            IDSCT.VALOR AS IDENTIFICACION,
                            IDSCU.VALOR AS RAZON_SOCIAL,
                            (
                                ".$strSubQueryProductos."
                            ) AS PRODUCTOS,
                            IPE.LOGIN AS VENDEDOR ";

            $strFrom   = " FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD       IDS
                                JOIN DB_COMERCIAL.ADMI_TIPO_SOLICITUD     ATS   ON ATS.ID_TIPO_SOLICITUD    = IDS.TIPO_SOLICITUD_ID 
                                JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT IDSCP ON IDS.ID_DETALLE_SOLICITUD = IDSCP.DETALLE_SOLICITUD_ID
                                JOIN DB_COMERCIAL.ADMI_CARACTERISTICA     ACU   ON ACU.ID_CARACTERISTICA    = IDSCP.CARACTERISTICA_ID
                                    AND UPPER(ACU.DESCRIPCION_CARACTERISTICA) = :DESCRIPCION_CARACTERISTICA_VENDEDOR
                                JOIN DB_COMERCIAL.INFO_PERSONA          IPE ON IPE.LOGIN=IDSCP.VALOR
                                JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT   IDSCT ON IDSCT.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD
                                JOIN DB_COMERCIAL.ADMI_CARACTERISTICA       ACT ON ACT.ID_CARACTERISTICA = IDSCT.CARACTERISTICA_ID
                                                            AND UPPER(ACT.DESCRIPCION_CARACTERISTICA) = :DESCRIPCION_CARACTERISTICA_IDENTIFICACION
                                JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT   IDSCU ON IDSCU.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD
                                JOIN DB_COMERCIAL.ADMI_CARACTERISTICA       ACU ON ACU.ID_CARACTERISTICA = IDSCU.CARACTERISTICA_ID
                                                            AND UPPER(ACU.DESCRIPCION_CARACTERISTICA) = :DESCRIPCION_CARACTERISTICA_RAZON_SOCIAL
                                ";

            $strWhere  = " WHERE UPPER(ATS.DESCRIPCION_SOLICITUD)    = :DESCRIPCION_SOLICITUD " ;

            $objQuery->setParameter("DESCRIPCION_SOLICITUD", strtoupper($strTipoSolicitud));
            $objQueryCount->setParameter("DESCRIPCION_SOLICITUD", strtoupper($strTipoSolicitud));

            $objQuery->setParameter("DESCRIPCION_CARACTERISTICA_IDENTIFICACION", strtoupper($strCaracIdentificacion));
            $objQueryCount->setParameter("DESCRIPCION_CARACTERISTICA_IDENTIFICACION", strtoupper($strCaracIdentificacion));

            $objQuery->setParameter("DESCRIPCION_CARACTERISTICA_RAZON_SOCIAL", strtoupper($strCaracRazonSocial));
            $objQueryCount->setParameter("DESCRIPCION_CARACTERISTICA_RAZON_SOCIAL", strtoupper($strCaracRazonSocial));

            $objQuery->setParameter("DESCRIPCION_CARACTERISTICA_VENDEDOR", strtoupper($strCaracVendedor));
            $objQueryCount->setParameter("DESCRIPCION_CARACTERISTICA_VENDEDOR", strtoupper($strCaracVendedor));

            $objQuery->setParameter("DESCRIPCION_CARACTERISTICA_PRODUCTOS", strtoupper($strCaracProducto));
            $objQueryCount->setParameter("DESCRIPCION_CARACTERISTICA_PRODUCTOS", strtoupper($strCaracProducto));

            $strOrderBy = " ORDER BY IDS.FE_CREACION DESC ";

            if($boolIgnorarCargo && !empty($strRegion))
            {
                $strFrom .= " JOIN INFO_PERSONA_EMPRESA_ROL   IPER ON IPER.PERSONA_ID    = IPE.ID_PERSONA
                              JOIN INFO_OFICINA_GRUPO         IOG  ON IOG.ID_OFICINA     = IPER.OFICINA_ID
                              JOIN ADMI_CANTON                AC   ON AC.ID_CANTON       = IOG.CANTON_ID
                              JOIN INFO_EMPRESA_ROL           IER  ON IER.ID_EMPRESA_ROL = IPER.EMPRESA_ROL_ID
                              JOIN INFO_EMPRESA_GRUPO         IEG  ON IEG.COD_EMPRESA    = IER.EMPRESA_COD
                              JOIN ADMI_ROL                   AR   ON AR.ID_ROL          = IER.ROL_ID ";
                $strWhere .= " AND IPE.ESTADO IN (:arrayEstados)
                               AND IPER.ESTADO     = :strEstadoActivo
                               AND IEG.COD_EMPRESA = :intIdEmpresa
                               AND IEG.PREFIJO     = :strPrefijoEmpresa
                               AND AC.REGION       = :strRegion 
                               AND AR.DESCRIPCION_ROL NOT IN(:arrayRolNoPermitido) ";
                $objQuery->setParameter('arrayEstados',             $arrayEstados);
                $objQueryCount->setParameter('arrayEstados',        $arrayEstados);
                $objQuery->setParameter('strEstadoActivo',          $strEstadoActivo);
                $objQueryCount->setParameter('strEstadoActivo',     $strEstadoActivo);
                $objQuery->setParameter('intIdEmpresa',             $intIdEmpresa);
                $objQueryCount->setParameter('intIdEmpresa',        $intIdEmpresa);
                $objQuery->setParameter('strPrefijoEmpresa',        $strPrefijoEmpresa);
                $objQueryCount->setParameter('strPrefijoEmpresa',   $strPrefijoEmpresa);
                $objQuery->setParameter('strRegion',                $strRegion);
                $objQueryCount->setParameter('strRegion',           $strRegion);
                $objQuery->setParameter('arrayRolNoPermitido',      $arrayRolNoPermitido);
                $objQueryCount->setParameter('arrayRolNoPermitido', $arrayRolNoPermitido);
            }
            else
            {
                if(!empty($strTipo) && $strTipo == 'ASISTENTE')
                {
                    $strWhere .= " AND UPPER(IDS.USR_CREACION) = :LOGIN ";
                    $objQuery->setParameter("LOGIN", strtoupper($strUsrCreacion));
                    $objQueryCount->setParameter("LOGIN", strtoupper($strUsrCreacion));
                }

                if(!empty($strTipo) && $strTipo == 'VENDEDOR')
                {
                    $strWhere .= " AND UPPER(IPE.LOGIN) = :LOGIN ";
                    $objQuery->setParameter("LOGIN", strtoupper($strUsrCreacion));
                    $objQueryCount->setParameter("LOGIN", strtoupper($strUsrCreacion));
                }

                if(!empty($strTipo) && $strTipo == 'SUBGERENTE' )
                {
                    $strWhere .= " AND IPE.LOGIN IN
                                    (SELECT IPVENDEDOR.LOGIN
                                        FROM DB_COMERCIAL.INFO_PERSONA IPVENDEDOR
                                        JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPERSUB
                                        ON IPERSUB.PERSONA_ID                       = IPVENDEDOR.ID_PERSONA
                                    WHERE IPERSUB.ESTADO                            = :strEstadoActivo
                                        AND IPVENDEDOR.ESTADO                       = :strEstadoActivo
                                        AND (IPERSUB.REPORTA_PERSONA_EMPRESA_ROL_ID = :intIdPersonaEmpresaRol
                                        OR IPERSUB.ID_PERSONA_ROL                   = :intIdPersonaEmpresaRol)) ";
                    $objQuery->setParameter("strEstadoActivo", $strEstadoActivo);
                    $objQueryCount->setParameter("strEstadoActivo", $strEstadoActivo);
                    $objQuery->setParameter("intIdPersonaEmpresaRol", $intIdPersonaEmpresaRol);
                    $objQueryCount->setParameter("intIdPersonaEmpresaRol", $intIdPersonaEmpresaRol);
                }
            }
            if(!empty($strEstadoNotIn))
            {
                $strWhere         .= " AND UPPER(IDS.ESTADO)  != :strEstado ";
                $objQuery->setParameter("strEstado", strtoupper($strEstadoNotIn));
                $objQueryCount->setParameter("strEstado", strtoupper($strEstadoNotIn));

                $strWhere .= " AND UPPER(IDSCP.ESTADO) != :strEstadoVend ";
                $objQuery->setParameter("strEstadoVend", strtoupper($strEstadoNotIn));
                $objQueryCount->setParameter("strEstadoVend", strtoupper($strEstadoNotIn));

                $strWhere .=" AND UPPER(IDSCU.ESTADO) != :strEstadoRS ";
                $objQuery->setParameter("strEstadoRS", strtoupper($strEstadoNotIn));
                $objQueryCount->setParameter("strEstadoRS", strtoupper($strEstadoNotIn));

                $strWhere .=" AND UPPER(IDSCT.ESTADO) != :strEstadoIdentificacion ";
                $objQuery->setParameter("strEstadoIdentificacion", strtoupper($strEstadoNotIn));
                $objQueryCount->setParameter("strEstadoIdentificacion", strtoupper($strEstadoNotIn));

                $strSubQueryProductos .=" AND UPPER(IDSCPR.ESTADO) != :strEstadoPR ";
                $objQuery->setParameter("strEstadoPR", strtoupper($strEstadoNotIn));
                $objQueryCount->setParameter("strEstadoPR", strtoupper($strEstadoNotIn));
            }
            if(!empty($strEstado))
            {
                if(!empty($strTipo) && $strTipo == 'GERENTE_VENTAS' && $strEstado == "Pendiente Gerente" )
                {
                    $strWhere         .= " AND (UPPER(IDS.ESTADO) = :strEstado 
                                           OR (IPE.LOGIN IN (:arrayVendedoresKam) AND UPPER(IDS.ESTADO) = :strEstadoKam)) ";
                    $objQuery->setParameter("strEstado", strtoupper($strEstado));
                    $objQueryCount->setParameter("strEstado", strtoupper($strEstado));
                    $objQuery->setParameter("arrayVendedoresKam", $arrayVendedoresKam);
                    $objQueryCount->setParameter("arrayVendedoresKam", $arrayVendedoresKam);
                    $objQuery->setParameter("strEstadoKam", strtoupper($strEstadoKam));
                    $objQueryCount->setParameter("strEstadoKam", strtoupper($strEstadoKam));
                }
                else
                {
                    $strWhere         .= " AND UPPER(IDS.ESTADO)  = :strEstado ";
                    $objQuery->setParameter("strEstado", strtoupper($strEstado));
                    $objQueryCount->setParameter("strEstado", strtoupper($strEstado));

                    $strWhere .= " AND UPPER(IDSCP.ESTADO) = :strEstadoVend ";
                    $objQuery->setParameter("strEstadoVend", strtoupper($strEstado));
                    $objQueryCount->setParameter("strEstadoVend", strtoupper($strEstado));

                    $strWhere .=" AND UPPER(IDSCU.ESTADO) = :strEstadoRS ";
                    $objQuery->setParameter("strEstadoRS", strtoupper($strEstado));
                    $objQueryCount->setParameter("strEstadoRS", strtoupper($strEstado));

                    $strWhere .=" AND UPPER(IDSCT.ESTADO) = :strEstadoIdentificacion ";
                    $objQuery->setParameter("strEstadoIdentificacion", strtoupper($strEstado));
                    $objQueryCount->setParameter("strEstadoIdentificacion", strtoupper($strEstado));

                    $strSubQueryProductos .=" AND UPPER(IDSCPR.ESTADO) = :strEstadoPR ";
                    $objQuery->setParameter("strEstadoPR", strtoupper($strEstado));
                    $objQueryCount->setParameter("strEstadoPR", strtoupper($strEstado));
                }
            }

            if(!empty($strFechaInicio))
            {
                $strWhere .= " AND to_char(IDS.fe_creacion, 'DD/MM/YYYY') >= :strFechaInicio ";
                $objQuery->setParameter('strFechaInicio', $strFechaInicio);
                $objQueryCount->setParameter('strFechaInicio', $strFechaInicio);
            }

            if(!empty($strFechaFin))
            {
                $strWhere .= " AND to_char(IDS.fe_creacion, 'DD/MM/YYYY') <= :strFechaFin ";
                $objQuery->setParameter('strFechaFin', $strFechaFin);
                $objQueryCount->setParameter('strFechaFin', $strFechaFin);
            }

            if(!empty($strRazonSocial))
            {
                $strWhere .= " AND UPPER(IDSCU.VALOR)    LIKE (:strRazonSocial) ";
                $objQuery->setParameter('strRazonSocial', '%' . strtoupper($strRazonSocial) . '%');
                $objQueryCount->setParameter('strRazonSocial', '%' . strtoupper($strRazonSocial) . '%');
            }

            if(!empty($strIdentificacion))
            {
                $strWhere .= " AND IDSCT.VALOR = :strIdentificacion ";
                $objQuery->setParameter('strIdentificacion', $strIdentificacion);
                $objQueryCount->setParameter('strIdentificacion', $strIdentificacion);
            }

            if(!empty($intIdSolicitud))
            {
                $strWhere .= " AND IDS.ID_DETALLE_SOLICITUD IN (:intIdSolicitud) ";
                $objQuery->setParameter('intIdSolicitud', $intIdSolicitud);
                $objQueryCount->setParameter('intIdSolicitud', $intIdSolicitud);
            }

            $objRsm->addScalarResult('ID_DETALLE_SOLICITUD',   'ID_DETALLE_SOLICITUD',   'string');
            $objRsm->addScalarResult('RAZON_SOCIAL',           'RAZON_SOCIAL',           'string');
            $objRsm->addScalarResult('VENDEDOR',               'VENDEDOR',               'string');
            $objRsm->addScalarResult('PRODUCTOS',              'PRODUCTOS',              'string');
            $objRsm->addScalarResult('IDENTIFICACION',         'IDENTIFICACION',         'string');
            $objRsm->addScalarResult('ESTADO',                 'ESTADO',                 'string');
            $objRsm->addScalarResult('OBSERVACION',            'OBSERVACION',            'string');
            $objRsm->addScalarResult('FE_CREACION',            'FE_CREACION',            'string');
            $objRsm->addScalarResult('USR_CREACION',           'USR_CREACION',           'string');
            $objRsmCount->addScalarResult('TOTAL',             'total',                  'integer');
            $strSql      = $strSelect.$strFrom.$strWhere.$strOrderBy;
            $strSqlFinal ='';

            if(isset($arrayParametros['intStart']) && isset($arrayParametros['intLimit']))
            {
                if($arrayParametros['intStart'] && $arrayParametros['intLimit'])
                {
                    $intInicio     = $arrayParametros['intStart'];
                    $intFin        = $arrayParametros['intStart'] + $arrayParametros['intLimit'];
                    $strSqlFinal   = '  SELECT * FROM 
                                        (
                                            SELECT consultaPrincipal.*,rownum AS consultaPrincipal_rownum 
                                            FROM ('.$strSql.') consultaPrincipal 
                                            WHERE rownum<='.$intFin.'
                                        ) WHERE consultaPrincipal_rownum >'.$intInicio;
                }
                else
                {
                    $strSqlFinal   = '  SELECT consultaPrincipal.* 
                                        FROM ('.$strSql.') consultaPrincipal 
                                        WHERE rownum<='.$arrayParametros['intLimit'];
                }
            }
            else
            {
                $strSqlFinal = $strSql;
            }

            $objQuery->setSQL($strSqlFinal);
            $arrayDatos  = $objQuery->getResult();
            $strSqlCount = $strSelectCount." FROM ( ".$strSql." )";
            $objQueryCount->setSQL($strSqlCount);
            $intTotal    = $objQueryCount->getSingleScalarResult();
        } 
        catch (\Exception $ex) 
        {
            $strMensajeError = $ex->getMessage();
        }
        $arrayResultado['registros'] = $arrayDatos;
        $arrayResultado['total']     = $intTotal;
        $arrayResultado['error']     = $strMensajeError;
        return $arrayResultado; 
    } 

    /**
     * Documentación para la función 'ejecutaProcesoRecalculo'.
     * 
     * Función que permite invocar la llamada al procedimiento que realiza el proceso de recálculo de la solicitud
     * con motivo (Beneficio 3era Edad / Adulto Mayor ó Cliente con Discapacidad) ligada al servicio.
     * 
     * @author Alex Arreaga <atarreaga@telconet.ec>
     * @version 1.0 22-03-2021 
     * 
     * @param  array $arrayParametros [
     *                                  "intIdEmpresa"      => Id de la empresa.
     *                                  "strPrefijoEmpresa" => Prefijo de la empresa.
     *                                  "strUsuario"        => Usuario ejecuta proceso.
     *                                  "strEmailUsuario"   => Email de usuario.
     *                                  "intIdServicio"     => Id del servicio.
     *                                  "strMensaje"        => Mensaje de salida.
     *                                  "strMsjError"       => Mensaje de salida error.
     *                                ] 
     * 
     * @return array $arrayRespuesta
     */
    public function ejecutaProcesoRecalculo($arrayParametros)
    {
        $strMsjError    = '';
        $strMsjError    = str_pad($strMsjError, 8000, " ");
        $strMensaje     = '';
        $strMensaje     = str_pad($strMensaje, 8000, " ");
        $strUsuario     = $arrayParametros['strUsuario'] ? $arrayParametros['strUsuario'] : 'telcos_recalculo';
        $strIp          = $arrayParametros['strIp'] ? $arrayParametros['strIp'] : '127.0.0.1';
        $objUtilService = $arrayParametros['objUtilService'];

        try
        {
            $strSql = "BEGIN DB_COMERCIAL.CMKG_BENEFICIOS.P_RECALCULO(:intIdEmpresa,".
                                                                     ":strPrefijoEmpresa,".
                                                                     ":strUsuario,".
                                                                     ":strEmailUsuario,".
                                                                     ":intIdServicio,".
                                                                     ":strTipoProceso,".
                                                                     ":strMensaje,".
                                                                     ":strMsjError); END;";

            $objStmt = $this->_em->getConnection()->prepare($strSql);

            $objStmt->bindParam('intIdEmpresa'      , $arrayParametros['intIdEmpresa']);
            $objStmt->bindParam('strPrefijoEmpresa' , $arrayParametros['strPrefijoEmpresa']);
            $objStmt->bindParam('strUsuario'        , $strUsuario);
            $objStmt->bindParam('strEmailUsuario'   , $arrayParametros['strEmailUsuario']);
            $objStmt->bindParam('intIdServicio'     , $arrayParametros['intIdServicio']);
            $objStmt->bindParam('strTipoProceso'    , $arrayParametros['strTipoProceso']);
            $objStmt->bindParam('strMensaje'        , $strMensaje);
            $objStmt->bindParam('strMsjError'       , $strMsjError);
            $objStmt->execute();

            if (!empty($strMsjError) && $strMsjError !== null && $strMsjError !== '')
            {
                $objUtilService->insertError('Telcos+',
                                             'InfoDetalleSolicitudRepository->ejecutaProcesoRecalculo',
                                             $strMsjError,
                                             $strUsuario,
                                             $strIp);
            }

            $arrayRespuesta = array ('status'  => 'OK',
                                     'mensaje' => $strMensaje);
        }
        catch (\Exception $objException)
        {
            $strMsjError = 'Error al ejecutar el proceso de recálculo. ';
            
            if (is_object($objUtilService))
            {
                $objUtilService->insertError('Telcos+',
                                             'InfoDetalleSolicitudRepository->ejecutaProcesoRecalculo',
                                              $objException->getMessage(),
                                              $strUsuario,
                                              $strIp);
            }

            $arrayRespuesta = array ('status'  => 'ERROR',
                                     'mensaje' => $strMsjError);
        }

        return $arrayRespuesta; 
    }
    
   /*
     * Documentación para el método 'getSolicitudAdultoMayorPorServicio'.
     *
     * Método que devuelve la cantidad de solicitudes de descuento Fijo por motivo 
     * "3era Edad Resolución 07-2021" que posee el servicio enviado como parámetro.
     *
     * @param  arrayParametros [
     *                            'intIdServicio'  => Id del servicio  
     *                         ]
     * 
     * costoQuery: 12
     * 
     * @author Alex Arreaga <atarreaga@telconet.ec>
     * @version 1.0 23-08-2021 
     */
    public function getSolicitudAdultoMayorPorServicio($arrayParametros)
    {
        $objRsm      = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $objRsmCount      = new ResultSetMappingBuilder($this->_em);
        $objNtvQueryCount = $this->_em->createNativeQuery(null, $objRsmCount);
        
        $strQueryCount = " SELECT COUNT(*) AS CANTIDAD "; 
        $strQuery      = "SELECT SOL.ID_DETALLE_SOLICITUD, SOL.SERVICIO_ID, SOL.PRECIO_DESCUENTO, MOT.NOMBRE_MOTIVO ";
        $strFromQuery  = "FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOL,
                DB_COMERCIAL.ADMI_TIPO_SOLICITUD TSOL,
                DB_GENERAL.ADMI_MOTIVO MOT
                WHERE 
                    SOL.TIPO_SOLICITUD_ID    = TSOL.ID_TIPO_SOLICITUD
                AND TSOL.ID_TIPO_SOLICITUD   IN (SELECT ID_TIPO_SOLICITUD 
                                                FROM DB_COMERCIAL.ADMI_TIPO_SOLICITUD 
                                                WHERE DESCRIPCION_SOLICITUD = 'SOLICITUD DESCUENTO') 
                AND TSOL.ESTADO              = 'Activo'
                AND SOL.MOTIVO_ID            = MOT.ID_MOTIVO
                AND MOT.ID_MOTIVO       IN (SELECT PD.VALOR7
                                            FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                            DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                            WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                            AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_ADULTO_MAYOR'
                                            AND PC.ESTADO           = 'Activo'
                                            AND PD.ESTADO           = 'Activo'
                                            AND PD.DESCRIPCION      = 'MOTIVO_DESC_ADULTO_MAYOR'
                                            AND PD.VALOR5           = 'CAMBIO_PLAN')
                AND UPPER(SOL.ESTADO)   IN (SELECT UPPER(PD.VALOR1)
                                            FROM DB_GENERAL.ADMI_PARAMETRO_DET PD,
                                            DB_GENERAL.ADMI_PARAMETRO_CAB PC
                                            WHERE PC.ID_PARAMETRO   = PD.PARAMETRO_ID
                                            AND PC.NOMBRE_PARAMETRO = 'PARAM_FLUJO_ADULTO_MAYOR'
                                            AND PC.ESTADO           = 'Activo'
                                            AND PD.ESTADO           = 'Activo'
                                            AND PD.DESCRIPCION      = 'ESTADOS_SOLICITUD')  
                AND SOL.SERVICIO_ID          =  :intIdServicio ";
       
        $objRsm->addScalarResult('ID_DETALLE_SOLICITUD', 'idDetalleSolicitud', 'integer');
        $objRsm->addScalarResult('SERVICIO_ID', 'servicioId', 'integer');
        $objRsm->addScalarResult('PRECIO_DESCUENTO', 'precioDescuento', 'string'); 
        $objRsm->addScalarResult('NOMBRE_MOTIVO', 'nombreMotivo', 'string'); 
            
        $objNtvQuery->setParameter("intIdServicio", $arrayParametros["intIdServicio"]);  
        
        $objNtvQuery->setSQL($strQuery . $strFromQuery);                     
        $objDatos = $objNtvQuery->getResult();                
                
        $objRsmCount->addScalarResult('CANTIDAD', 'Cantidad', 'integer');
        
        $objNtvQueryCount->setParameter("intIdServicio", $arrayParametros["intIdServicio"]);  
        
        $objNtvQueryCount->setSQL($strQueryCount . $strFromQuery);
        $intCantidad = $objNtvQueryCount->getSingleScalarResult();
        
        $arrayResultado['objRegistros']     = $objDatos;
        $arrayResultado['intCantidad']      = $intCantidad;
        
        return $arrayResultado;
    }

     /**
     * Documentación para la función getCortesíasAprobadas
     * 
     *  
     * Permite traer la SOlicitud de cambio de documento de tipo Cortesia aprobada en base a un servicio pasado como parámetro
     * 
     * @author Jorge Luis Veliz <jlveliz@telconet.ec>
     * @version 1.0 17-08-2021 
     * 
     * @param  int $intServicioId
     * 
     * @return array $arrayRespuesta
     */
    public function findCortesiasAprobadas($intServicioId)
    {
        $emEntity =  $this->_em->createQuery();  
        $emEntity->setParameter('TIPO_DOCUMENTO',  'C'); //Cortesia
        $emEntity->setParameter('ESTADO' ,  'Aprobado');
        $emEntity->setParameter('SERVICIO_ID'  , $intServicioId);


        $strSelect = "SELECT ids
                        FROM schemaBundle:InfoDetalleSolicitud ids
                            WHERE ids.tipoDocumento   = :TIPO_DOCUMENTO
                            AND ids.estado            = :ESTADO
                            AND ids.servicioId        = :SERVICIO_ID";


        $emEntity-> setDQL($strSelect);  
        $arrayResult = $emEntity->getResult();
        return $arrayResult;
    }

    /**
     * validaExisteSolicitudXCaracteristica - Función que valida que exista una solicitud con la caracteristica,
     *                                        tipo de solicitud y estado de solicitud recibidos por parámetro
     *
     * @author Andrés Montero H. <amontero@telconet.ec>
     * @version 1.0 10-12-2021
     *
     * @param  Array $arrayParametros[ 'descripcionSolicitud'      => nombre de la solicitud
     *                                 'descripcionCaracteristica' => nombre de la caracteristica
     *                                 'estadoSolicitud'           => estado de la solicitud
     *                                 'valorCaracteristica'       => valor de la característica ]
     *
     * @return String $strValor
     * 
     */
    public function validaExisteSolicitudXCaracteristica($arrayParametros)
    {
        $arrayResultado = array();
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);

        $strSql = "  SELECT COUNT(IDSC.VALOR) AS VALOR
                    FROM INFO_DETALLE_SOLICITUD IDS 
                        JOIN INFO_DETALLE_SOL_CARACT IDSC ON IDSC.DETALLE_SOLICITUD_ID = IDS.ID_DETALLE_SOLICITUD
                        JOIN ADMI_CARACTERISTICA CARAC ON CARAC.ID_CARACTERISTICA = IDSC.CARACTERISTICA_ID
                        JOIN ADMI_TIPO_SOLICITUD ATS ON ATS.ID_TIPO_SOLICITUD = IDS.TIPO_SOLICITUD_ID

                    WHERE 
                        CARAC.DESCRIPCION_CARACTERISTICA = :descripcionCaracteristica
                        AND IDSC.VALOR = :valorCaracteristica
                        AND IDS.ESTADO = :estadoSolicitud
                        AND ATS.DESCRIPCION_SOLICITUD = :descripcionSolicitud ";

        $objRsm->addScalarResult('VALOR', 'valor', 'string');
        $objQuery->setParameter("valorCaracteristica", $arrayParametros["valorCaracteristica"]);
        $objQuery->setParameter("descripcionSolicitud", $arrayParametros["descripcionSolicitud"]);
        $objQuery->setParameter("descripcionCaracteristica", $arrayParametros["descripcionCaracteristica"]);
        $objQuery->setParameter("estadoSolicitud", $arrayParametros["estadoSolicitud"]);                

        $objQuery->setSQL($strSql);

        $arrayResultado = $objQuery->getOneOrNullResult();

        return $arrayResultado;
    }


    /**
     * Método encargado de obtiene los registros de las solicitudes de planificación
     *
     * @author Andrés Montero H. <amontero@telconet.ec>
     * @version 1.0 18-12-2021
     *
     * @param  Array $arrayParametros => Datos en formato json que se envian a procedimiento DB_COMERCIAL.CMKG_SOLICITUD_CONSULTA.P_GET_SOLICITUDES
     * @return Array $arrayRespuesta
     */
    public function getRegistrosSolicitudesPlanificar($arrayParametros)
    {
        $intTotal   = 0;
        $strStatus  = "";
        $strMessage = "";

        try
        {
            $strSql = "BEGIN DB_COMERCIAL.CMKG_SOLICITUD_CONSULTA.P_GET_SOLICITUDES(:Pcl_Json,".
                                                                                   ":Pcl_JsonRespuesta,".
                                                                                   ":Pn_Total,".
                                                                                   ":Pv_Status,".
                                                                                   ":Pv_Message); END;";

            $arrayOciCon               = $arrayParametros['ociCon'];
            $objRscCon                 = oci_connect($arrayOciCon['userComercial'], 
                                                     $arrayOciCon['passComercial'], 
                                                     $arrayOciCon['databaseDsn'],'AL32UTF8');
            $objStmt                   = oci_parse($objRscCon,$strSql);
            $arrayParametros['ociCon'] = null;
            $objClobJsonRespuesta      = oci_new_descriptor($objRscCon, OCI_D_LOB);
            oci_bind_by_name($objStmt,':Pcl_Json'   ,json_encode($arrayParametros,JSON_UNESCAPED_UNICODE));
            oci_bind_by_name($objStmt,':Pcl_JsonRespuesta', $objClobJsonRespuesta, -1, OCI_B_CLOB);
            oci_bind_by_name($objStmt,':Pn_Total'   ,$intTotal,10);
            oci_bind_by_name($objStmt,':Pv_Status'  ,$strStatus,50);
            oci_bind_by_name($objStmt,':Pv_Message' ,$strMessage,4000);

            oci_execute($objStmt);

            $arrayRespuesta = array ('status'       => $strStatus,
                                     'message'      => $strMessage,
                                     'total'        => $intTotal,
                                     'objJsonRespuesta'=> $objClobJsonRespuesta->load()
                                    );
        }
        catch (\Exception $objException)
        {
            $arrayRespuesta = array ('status'  => 'fail',
                                     'message' => $objException->getMessage());
        }
        return $arrayRespuesta;
    }

    /**
     * Documentación para la función getSolicitudCambio
     * 
     *  
     * Obtiene la Solicitud de cambio de cpe del servicio
     * 
     * @author Jenniffer Mujica Meneses <jmujica@telconet.ec>
     * @version 1.0 02-12-2022
     * 
     * @param  array  $arrayP
     *                $strDescripcionSolicitud
     * 
     * @return array $arrayRespuesta
     */
    public function getSolicitudCambio($intServicioId)
    {
        try
        {
            $objRsm            = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery       = $this->_em->createNativeQuery(null, $objRsm);

            $strSelect = "SELECT IDD.ID_DETALLE_SOLICITUD   FROM  DB_COMERCIAL.INFO_DETALLE_SOLICITUD  IDD
                            INNER JOIN DB_COMERCIAL.ADMI_TIPO_SOLICITUD  ATS ON IDD.TIPO_SOLICITUD_ID = ATS.ID_TIPO_SOLICITUD
                            WHERE IDD.SERVICIO_ID         = :SERVICIO_ID
                            AND IDD.ESTADO                = :ESTADO
                            AND ATS.DESCRIPCION_SOLICITUD = :DESCRIPCION_SOLICITUD";

            $objNtvQuery->setParameter('DESCRIPCION_SOLICITUD',  'SOLICITUD CAMBIO DE MODEM INMEDIATO');
            $objNtvQuery->setParameter('ESTADO' ,  'AsignadoTarea');
            $objNtvQuery->setParameter('SERVICIO_ID'  , $intServicioId);

            $objRsm->addScalarResult('ID_DETALLE_SOLICITUD','idSolicitudCambio','integer');

            $objNtvQuery->setSQL($strSelect);
            $arrayResultado = array("status" => true, "result" => $objNtvQuery->getResult());

        }
        catch(\Exception $objException)
        {
            if (is_object($serviceUtil))
            {
                $serviceUtil->insertError('InfoDetalleRepository',
                                          'obtenerTareaSolicitudServicio',
                                           $objException->getMessage(),
                                           $strUsuario,
                                           $strIpUsuario);
            }

            $arrayResultado = array ('status' => false,'message' => 'Error al obtener los datos');
        }
        
        return $arrayResultado;
    }

    /**
     * Documentación para la función generarJsonServiciosEstado
     * 
     * Genera JSON con los servicios según parámetros recibidos
     * 
     * @author Alex Gómez <algomez@telconet.ec>
     * @version 1.0 03/11/2022
     * 
     * @param  array $arrayParametros [
     *                                  "intStart"                  => Index inicio.
     *                                  "intLimit"                  => Index fin.
     *                                  "strSearchFechaDesdePlanif" => Fecha DESDE planificacion.
     *                                  "strSearchFechaHastaPlanif" => Fecha HASTA planificacion.
     *                                  "strSearchLogin"            => Login del punto.
     *                                  "strSearchDescripcionPunto" => Descripción del punto.
     *                                  "strSearchVendedor"         => Descripción del vendedor.
     *                                  "strSearchCiudad"           => Descripción de la ciudad.
     *                                  "strCodEmpresa"             => Código de la empresa.
     *                                  "arrayEstadosServicio"      => Array de estados de servicios a consultar. 
     *                                ] 
     * 
     * @return array $arrayResultado [
     *                                  "total"       => Cantidad total de registros obtenidos.
     *                                  "encontrados" => Array de registros.
     *                               ];
     */
    public function generarJsonServiciosEstado($arrayParametros)
    {
        $emComercial               = $arrayParametros["emComercial"];
        $intStart                  = $arrayParametros["intStart"];
        $intLimit                  = $arrayParametros["intLimit"];
        $strSearchFechaDesdePlanif = $arrayParametros["strSearchFechaDesdePlanif"];
        $strSearchFechaHastaPlanif = $arrayParametros["strSearchFechaHastaPlanif"];
        $strSearchLogin            = $arrayParametros["strSearchLogin"];
        $strSearchDescripcionPunto = $arrayParametros["strSearchDescripcionPunto"];
        $strSearchVendedor         = $arrayParametros["strSearchVendedor"];
        $strSearchCiudad           = $arrayParametros["strSearchCiudad"];
        $strCodEmpresa             = $arrayParametros["strCodEmpresa"];
        $arrayEstadosServicio      = $arrayParametros["arrayEstadosServicio"];

        $arrayEncontrados = array();

        $objEmpresaSession = $emComercial->getRepository('schemaBundle:InfoEmpresaGrupo')->find($strCodEmpresa);
        $strPrefijoEmpresa = $objEmpresaSession->getPrefijo();

        $arrayRegistrosTotal = $this->getRegistrosEstado('', 
                                                          '', 
                                                          $strSearchFechaDesdePlanif, 
                                                          $strSearchFechaHastaPlanif, 
                                                          $strSearchLogin, 
                                                          $strSearchDescripcionPunto, 
                                                          $strSearchVendedor, 
                                                          $strSearchCiudad, 
                                                          $arrayEstadosServicio,
                                                          $strCodEmpresa, 
                                                          $strPrefijoEmpresa);
        $arrayRegistros      = $this->getRegistrosEstado($intStart, 
                                                          $intLimit, 
                                                          $strSearchFechaDesdePlanif, 
                                                          $strSearchFechaHastaPlanif, 
                                                          $strSearchLogin, 
                                                          $strSearchDescripcionPunto, 
                                                          $strSearchVendedor, 
                                                          $strSearchCiudad, 
                                                          $arrayEstadosServicio,
                                                          $strCodEmpresa, 
                                                          $strPrefijoEmpresa);

        if($arrayRegistros && $strPrefijoEmpresa == "MD")
        {
            $intCountTotal = count($arrayRegistrosTotal);

            foreach($arrayRegistros as $data)
            {
                $strNombreVendedor = (isset($data["nombreVendedor"]) ? ($data["nombreVendedor"] ?
                                  ucwords(strtolower($data["nombreVendedor"])) : "") : "");

                $objServicio           = $emComercial->getRepository('schemaBundle:InfoServicio')->findOneById($data["idServicio"]);
                $strNombreProducto     = ($objServicio->getProductoId() ? $objServicio->getProductoId()->getDescripcionProducto() : "");
                $strNombrePlan         = ($objServicio->getPlanId() ? $objServicio->getPlanId()->getNombrePlan() : "");
                $strNombreProductoPlan = $strNombreProducto . $strNombrePlan;
                $intIdProducto         = $objServicio->getProductoId();
                $objUltimaMilla        = $emComercial->getRepository('schemaBundle:AdmiTipoMedio')->findOneById($data["ultimaMillaId"]);
                $strNombreSector       = ($data["nombreSector"] ? $data["nombreSector"] : "");
                $strCiudad             = ($data["nombreCanton"] ? $data["nombreCanton"] : "");
                $strJurisdiccion       = ($data["nombreJurisdiccion"] ? $data["nombreJurisdiccion"] : "Sin Jurisdiccion");
                $strCliente            = ($data["razonSocial"] ? $data["razonSocial"] : $data["nombres"] . " " . $data["apellidos"]);
                $strCoordenadas        = ($data["longitud"] && $data["latitud"]) ? $data["longitud"] . ", " . $data["latitud"] : "Sin Coordenadas";
                $strFePlanificacion    = strval(date_format($data["feCreacion"], "d/m/Y G:i"));
                $strLatitud            = ($data["latitud"] ? $data["latitud"] : "");
                $strLongitud           = ($data["longitud"] ? $data["longitud"] : "");
                $strTipoOrden          = ($data["tipoOrden"] ? $data["tipoOrden"] : "N");
                $strUltimaMilla        = ($objUltimaMilla) ? $objUltimaMilla->getNombreTipoMedio() : "";
                
                $strEsRecontratacion   = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                ->esRecontratacion($data['id_persona'], $strCodEmpresa);

                // Se consultan datos de Caja o Splitter
                $entityInfoElementoPadre            = "";
                $entityInfoInterfaceElementoPadre   = "";
                $entityInfoElementoContenedor       = "";
                $entityInfoElementoDistribucion     = "";
                $entityInfoInterfaceElementoDist    = "";

                if($data["idOlt"] && ($strUltimaMilla == "Fibra Optica" || $strUltimaMilla == "FTTx"))
                {
                    $entityInfoElementoPadre          = $emComercial->getRepository('schemaBundle:InfoElemento')->find($data["idOlt"]);
                    $entityInfoInterfaceElementoPadre = $emComercial->getRepository('schemaBundle:InfoInterfaceElemento')->find($data["idLinea"]);
                    if($data["idCaja"])
                    {
                        $entityInfoElementoContenedor     = $emComercial->getRepository('schemaBundle:InfoElemento')->find($data["idCaja"]);
                    }
                    if($data["idSplitter"])
                    {
                        $entityInfoElementoDistribucion   = $emComercial->getRepository('schemaBundle:InfoElemento')->find($data["idSplitter"]);
                    }
                }

                // Se busca en la info servicio tecnico para obtener la interface del elemento conector.
                if($data["idServicio"])
                {
                    $entityInfoServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                        ->findOneByServicioId($data["idServicio"]);
                }
                // Entra si existe datos en la info servicio tecnico.
                if($entityInfoServicioTecnico && $entityInfoServicioTecnico->getInterfaceElementoConectorId())
                {
                    // Busca el nombre de la interface del elemento conector.
                    $strNombreInfoInterfaceElementoDist = $emComercial->getRepository('schemaBundle:InfoInterfaceElemento')
                                                             ->find($entityInfoServicioTecnico->getInterfaceElementoConectorId())
                                                             ->getNombreInterfaceElemento();
                }
                // Entra si tiene el id de la solicitud, para buscar las caracterisiticas de la solicitud
                if($data["idDetalleSolicitud"])
                {
                    $strObraCivil = '';
                    // Busca la caracteristica de obra civil.
                    $entityObraCivil                    = $emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                             ->getSolicitudCaractPorTipoCaracteristica($data["idDetalleSolicitud"], 
                                                                                                       'OBRA CIVIL');
                    // Si existe la entidad obtiene el valor.
                    if($entityObraCivil)
                    {
                        $strObraCivil = $entityObraCivil[0]->getValor();
                    }
                    $strPermisosRegeneracion = '';
                    // Busca la caracteristica de permiso de regeneracion.
                    $entityPermisosRegeneracion         = $emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                             ->getSolicitudCaractPorTipoCaracteristica($data["idDetalleSolicitud"], 
                                                                                                       'PERMISOS REGENERACION');
                    // Si existe la entidad obtiene el valor.
                    if($entityPermisosRegeneracion)
                    {
                        $strPermisosRegeneracion = $entityPermisosRegeneracion[0]->getValor();
                    }
                    $strObservacionPermiRegeneracion = '';
                    // Busca la caracteristica de observacion permiso de regeneracion.
                    $entityObservacionPermiRegeneracion = $emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                             ->getSolicitudCaractPorTipoCaracteristica($data["idDetalleSolicitud"], 
                                                                                                       'OBSERVACION PERMISO REGENERACION');
                    // Si existe la entidad obtiene el valor.
                    if($entityObservacionPermiRegeneracion)
                    {
                        $strObservacionPermiRegeneracion = $entityObservacionPermiRegeneracion[0]->getValor();
                    }
                    $strMetraje = '';
                    // Busca la caracteristica de metraje
                    $entityMetraje = $emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                             ->getSolicitudCaractPorTipoCaracteristica($data["idDetalleSolicitud"], 
                                                                                                       'METRAJE FACTIBILIDAD');
                    // Si existe la entidad obtiene el valor.
                    if($entityMetraje)
                    {
                        $strMetraje = $entityMetraje[0]->getValor();
                    }
                }

                $strTipoRed = "MPLS";

                if(is_object($objServicio) && is_object($objServicio->getProductoId()))
                {
                    //Obtener el tipo de RED
                    $objCaracTipoRed = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                          ->findOneBy(array("descripcionCaracteristica" => "TIPO_RED",
                                                            "estado"                    => "Activo"));

                    if(is_object($objCaracTipoRed))
                    {
                        $objProductoCaract = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                ->findOneBy(array("productoId"       => $objServicio->getProductoId()->getId(),
                                                                  "caracteristicaId" => $objCaracTipoRed->getId(),
                                                                  "estado"           => "Activo"));

                        if(is_object($objProductoCaract))
                        {
                            $objInfoServicioProdCaract = $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                            ->findOneBy(array("servicioId"                => $objServicio,
                                                                              "productoCaracterisiticaId" => $objProductoCaract,
                                                                              "estado"                    => "Activo"));

                            if(is_object($objInfoServicioProdCaract))
                            {
                                $strTipoRed = $objInfoServicioProdCaract->getValor();
                            }
                        }
                    }
                }

                //verificar si el tipo de red es GPON
                $booleanTipoRedGpon = false;
                $arrayParVerTipoRed = $emComercial->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                'COMERCIAL',
                                                                                                '',
                                                                                                'VERIFICAR TIPO RED',
                                                                                                'VERIFICAR_GPON',
                                                                                                $strTipoRed,
                                                                                                '',
                                                                                                '',
                                                                                                '');
                if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                {
                    $booleanTipoRedGpon = true;
                }
                if($data["strDependeDeEdificio"] == "S")
                {
                    $booleanTipoRedGpo = true; 
                }
                if($strCoordenadas != "Sin Coordenadas")
                {
                    $arrayEncontrados[] = array(
                        'id_factibilidad'                    => $data["idDetalleSolicitud"],
                        'estadoFactibilidad'                 => $data["estadoFactibilidad"],
                        'id_servicio'                        => $data["idServicio"],
                        'id_punto'                           => $data["idPunto"],
                        'idOlt'                              => $data["idOlt"],
                        'olt'                                => ($entityInfoElementoPadre) ? 
                                                                $entityInfoElementoPadre->getNombreElemento() : "Sin Dato",
                        'strNombreTipoElementoPadre'         => ($entityInfoElementoPadre) ? 
                                                                $entityInfoElementoPadre->getModeloElementoId()
                                                                                        ->getTipoElementoId()
                                                                                        ->getNombreTipoElemento() : "Sin Dato",
                        'strNombreMarcaElementoPadre'        => ($entityInfoElementoPadre) ? 
                                                                $entityInfoElementoPadre->getModeloElementoId()
                                                                                        ->getMarcaElementoId()
                                                                                        ->getNombreMarcaElemento() : "Sin Dato",
                        'strNombreModeloElementoPadre'       => ($entityInfoElementoPadre) ? 
                                                                $entityInfoElementoPadre->getModeloElementoId()
                                                                ->getNombreModeloElemento() : "Sin Dato",
                        'idLinea'                            => $data["idLinea"],
                        'linea'                              => ($entityInfoInterfaceElementoPadre) ? 
                                                                $entityInfoInterfaceElementoPadre->getNombreInterfaceElemento() : "Sin Dato",
                        'idCaja'                             => $data["idCaja"],
                        'caja'                               => ($entityInfoElementoContenedor) ? 
                                                                $entityInfoElementoContenedor->getNombreElemento() : "Sin Dato",
                        'idSplitter'                         => $data["idSplitter"],
                        'splitter'                           => ($entityInfoElementoDistribucion) ? 
                                                                $entityInfoElementoDistribucion->getNombreElemento() : "Sin Dato",
                        'strNombreTipoElementoDist'          => ($entityInfoElementoDistribucion) ? 
                                                                $entityInfoElementoDistribucion->getModeloElementoId()
                                                                                               ->getTipoElementoId()
                                                                                               ->getNombreTipoElemento() : "Sin Dato",
                        'strNombreMarcaElementoDist'         => ($entityInfoElementoDistribucion) ? 
                                                                $entityInfoElementoDistribucion->getModeloElementoId()
                                                                                               ->getMarcaElementoId()
                                                                                               ->getNombreMarcaElemento() : "Sin Dato",
                        'strNombreModeloElementoDist'        => ($entityInfoElementoDistribucion) ? 
                                                                $entityInfoElementoDistribucion->getModeloElementoId()
                                                                                               ->getNombreModeloElemento() : "Sin Dato",
                        'strNombreInfoInterfaceElementoDist' => (!empty($strNombreInfoInterfaceElementoDist)) ? 
                                                                $strNombreInfoInterfaceElementoDist : "Sin Dato",
                        'idIntSplitter'                      => $data["idIntSplitter"],
                        'intSplitter'                        => ($entityInfoInterfaceElementoDist) ? 
                                                                $entityInfoInterfaceElementoDist->getNombreInterfaceElemento() : "Sin Dato",
                        'observacion'                        => $data["observacion"],
                        'intIdPersona'                       => $data["id_persona"],
                        'intIdPersonaEmpresaRol'             => $data["intIdPersonaEmpresaRol"],
                        'strEsEdificio'                      => $data["strEsEdificio"],
                        'strDependeDeEdificio'               => $data["strDependeDeEdificio"],
                        'strNombreEdificio'                  => $data["strNombreEdificio"],
                        'intIdElemento'                      => $data["intIdElemento"],
                        'intIdUltimaMilla'                   => $data["intIdUltimaMilla"],
                        'strCodigoTipoMedio'                 => $data["strCodigoTipoMedio"],
                        'strNombreTipoMedio'                 => $data["strNombreTipoMedio"],
                        'strTipoEnlace'                      => $data["strTipoEnlace"],
                        'strTipoRed'                         => $strTipoRed,
                        'booleanTipoRedGpon'                 => $booleanTipoRedGpon,
                        'strPrefijoEmpresa'                  => $prefijoEmpresa,
                        'strObraCivil'                       => $strObraCivil,
                        'strPermisosRegeneracion'            => $strPermisosRegeneracion,
                        'strObservacionPermiRegeneracion'    => $strObservacionPermiRegeneracion,
                        'strMetraje'                         => $strMetraje,
                        'cliente'                            => ucwords(strtolower(trim($strCliente))),
                        'vendedor'                           => trim($strNombreVendedor),
                        'login2'                             => trim($data["login"]),
                        'tipo_orden'                         => $strTipoOrden,
                        'esRecontratacion'                   => $strEsRecontratacion,
                        'producto'                           => trim($strNombreProductoPlan),
                        'coordenadas'                        => trim($strCoordenadas),
                        'direccion'                          => trim($data["direccion"]),
                        'ciudad'                             => ucwords(strtolower(trim($strCiudad))),
                        'jurisdiccion'                       => ucwords(strtolower(trim($strJurisdiccion))),
                        'nombreSector'                       => ucwords(strtolower(trim($strNombreSector))),
                        'fePlanificacion'                    => trim($strFePlanificacion),
                        'latitud'                            => trim($strLatitud),
                        'longitud'                           => trim($strLongitud),
                        'objUltimaMilla'                     => ($objUltimaMilla) ? $objUltimaMilla->getNombreTipoMedio() : "",
                        'intPuntoCobertura'                  => $data["intPuntoCobertura"],
                        'intCanton'                          => $data["intCanton"],
                        'intParroquia'                       => $data["intParroquia"],
                        'intSector'                          => $data["intSector"],
                        'intIdProducto'                      => $intIdProducto,
                        'action1'                            => ($strUltimaMilla == "Fibra Optica")?"button-grid-edit":"icon-invisible");
                }
            }

            if($intCountTotal == 0)
            {
                $arrayResultado = array('total' => 1,
                                   'encontrados' => array('id_factibilidad'     => 0, 
                                                          'nombre_factibilidad' => 'Ninguno', 
                                                          'factibilidad_id'     => 0,
                                                          'factibilidad_nombre' => 'Ninguno', 
                                                          'estado'              => 'Ninguno'));
                $arrayResultado = json_encode($arrayResultado);
                return $arrayResultado;
            }
            else
            {
                $arrayDataF = json_encode($arrayEncontrados);
                $arrayResultado = '{"total":"' . $intCountTotal . '","encontrados":' . $arrayDataF . '}';
                return $arrayResultado;
            }
        }
        else
        {
            $arrayResultado = '{"total":"0","encontrados":[]}';
            return $arrayResultado;
        }
    } //generarJsonServiciosEstado

    /**
     * Documentación para la función getRegistrosEstado
     * 
     * Consulta 
     * 
     * @author Alex Gómez <algomez@telconet.ec>
     * @version 1.0 03/11/2022
     * 
     * @param  int $intStart  => Index inicio.
     * @param  int $intLimit  => Index fin.
     * @param  string $strSearchFechaDesdePlanif => Fecha DESDE planificacion.
     * @param  string $strSearchFechaHastaPlanif => Fecha HASTA planificacion.
     * @param  string $strSearchLogin            => Login del punto.
     * @param  string $strSearchDescripcionPunto => Descripción del punto.
     * @param  string $strSearchVendedor         => Descripción del vendedor.
     * @param  string $strSearchCiudad           => Descripción de la ciudad.
     * @param  string $strCodEmpresa"            => Código de la empresa.
     * @param  array  $arrayEstadosServicio      => Array de estados de servicios a consultar. 
     * 
     * @return array $arrayDatos => Array de registros obtenidos.
     */
    public function getRegistrosEstado($intStart, 
                                        $intLimit, 
                                        $strSearchFechaDesdePlanif, 
                                        $strSearchFechaHastaPlanif, 
                                        $strSearchLogin, 
                                        $strSearchDescripcionPunto, 
                                        $strSearchVendedor, 
                                        $strSearchCiudad, 
                                        $arrayEstadosServicios,
                                        $strCodEmpresa = "")
    {
        $arrayEstados = $arrayEstadosServicios;
        $strWhere = "";

        if($strSearchFechaDesdePlanif != "")
        {
            $arrayDateF          = explode("-", $strSearchFechaDesdePlanif);
            $objFechaSql       = date("Y/m/d", strtotime($arrayDateF[2] . "-" . $arrayDateF[1] . "-" . $arrayDateF[0]));
            $strWhere         .= "AND ds.feCreacion >= '" . trim($objFechaSql) . "' ";
        }
        if($strSearchFechaHastaPlanif != "")
        {
            $arrayDateF       = explode("-", $strSearchFechaHastaPlanif);
            $objFechaSqlAdd = strtotime(date("Y-m-d", strtotime($arrayDateF[2] . "-" . $arrayDateF[1] . "-" . $arrayDateF[0])) . " +1 day");
            $objFechaSql    = date("Y/m/d", $objFechaSqlAdd);

            $strWhere       .= "AND ds.feCreacion <= '" . trim($objFechaSql) . "' ";
        }

        if($strSearchLogin != "")
        {
            $strWhere       .= "AND UPPER(p.login) like UPPER('$strSearchLogin%') ";
        }

        if($strSearchDescripcionPunto != "")
        {
            $strWhere       .= "AND UPPER(p.descripcionPunto) like UPPER('%$strSearchDescripcionPunto%') ";
        }

        if($strSearchVendedor != "")
        {
            $strWhere       .= "AND CONCAT(LOWER(peVend.nombres),CONCAT(' ',LOWER(peVend.apellidos))) like '%" . 
                            strtolower(trim($strSearchVendedor)) . "%' ";
        }

        if($strSearchCiudad != "")
        {
            $strWhere       .= "AND UPPER(ca.nombreCanton) like UPPER('%$strSearchCiudad%') ";
        }

        $strSql = "SELECT 
					ds.id as idDetalleSolicitud, 
                    s.id as idServicio, 
					p.id as idPunto, 
                    se.nombreSector, 
                    pa.nombreParroquia, 
                    ca.nombreCanton, 
                    pe.id as id_persona,
					pe.razonSocial, 
                    pe.nombres, 
                    pe.apellidos, 
                    p.usrVendedor, 
                    p.login, 
					p.longitud, 
                    p.latitud, 
                    p.direccion, 
                    p.path as rutaCroquis, 
                    ds.feCreacion,
                    s.estado as estadoFactibilidad,
					st.ultimaMillaId, 
                    p.observacion, 
                    aj.nombreJurisdiccion, 
                    st.elementoId as idOlt, 
                    st.interfaceElementoId as idLinea,
					st.elementoContenedorId as idCaja, 
                    st.elementoConectorId as idSplitter, 
                    st.interfaceElementoConectorId as idIntSplitter,
					s.tipoOrden,
					CONCAT(peVend.nombres,CONCAT(' ',peVend.apellidos)) as nombreVendedor,
                    per.id intIdPersonaEmpresaRol,
                    ipda.esEdificio strEsEdificio ,
                    ipda.dependeDeEdificio strDependeDeEdificio,
                    ie.nombreElemento strNombreEdificio,
                    isrt.elementoId intIdElemento,
                    isrt.ultimaMillaId intIdUltimaMilla,
                    atm.codigoTipoMedio strCodigoTipoMedio,
                    atm.nombreTipoMedio strNombreTipoMedio,
                    st.tipoEnlace strTipoEnlace,
                    aj.id as intPuntoCobertura,
                    ca.id as intCanton,
                    pa.id as intParroquia,
                    se.id as intSector
                FROM 
                    schemaBundle:InfoServicio s
                     LEFT JOIN schemaBundle:InfoServicioTecnico isrt WITH isrt.servicioId = s.id 
                     LEFT JOIN schemaBundle:AdmiTipoMedio atm WITH atm.id = isrt.ultimaMillaId, 
                    schemaBundle:AdmiTipoSolicitud ts,
					schemaBundle:InfoDetalleSolicitud ds, 
                    schemaBundle:AdmiJurisdiccion aj, 
					schemaBundle:InfoPersona pe, 
                    schemaBundle:InfoPersonaEmpresaRol per,
					schemaBundle:AdmiSector se, 
                    schemaBundle:AdmiParroquia pa, 
                    schemaBundle:InfoServicioTecnico st,
					schemaBundle:AdmiCanton ca, 
                    schemaBundle:InfoEmpresaRol emr,
					schemaBundle:InfoPunto p 
                     LEFT JOIN schemaBundle:InfoPersona peVend WITH peVend.login = p.usrVendedor 
                     LEFT JOIN schemaBundle:InfoPuntoDatoAdicional ipda WITH ipda.puntoId = p.id 
                     LEFT JOIN schemaBundle:InfoElemento ie   WITH ie.id = ipda.elementoId 
                WHERE 
					s.id                                = ds.servicioId
					AND st.servicioId                   = s.id
					AND s.puntoId                       = p.id
					AND ts.id                           = ds.tipoSolicitudId 
					AND p.personaEmpresaRolId           = per.id 
					AND per.personaId                   = pe.id 
					AND p.sectorId                      = se.id 
					AND se.parroquiaId                  = pa.id 
					AND pa.cantonId                     = ca.id 
					AND per.empresaRolId                = emr.id
					AND aj.id                           = p.puntoCoberturaId
					AND ( ds.estado            in (:estados) or ds.estado in (:estados) )
					AND ( s.estado             in (:estados) or s.estado  in (:estados) )
					AND emr.empresaCod                  = $strCodEmpresa
					$strWhere 		
				
				ORDER BY ds.feCreacion DESC ";

        $objQuery = $this->_em->createQuery($strSql);
        $objQuery->setParameter('estados', $arrayEstados);
        if($intStart != '' && $intLimit != '')
        {
            $arrayDatos = $objQuery->setFirstResult($intStart)->setMaxResults($intLimit)->getResult();
        }
        else if($intStart != '' && $intLimit == '')
        {
            $arrayDatos = $objQuery->setFirstResult($intStart)->getResult();
        }
        else if($intStart == '' && $intLimit != '')
        {
            $arrayDatos = $objQuery->setMaxResults($intLimit)->getResult();
        }
        else
        {
            $arrayDatos = $objQuery->getResult();
        }

        return $arrayDatos;
    } //getRegistrosEstado

    /* 
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.0 20-01-2023 Se extrae los registros para la ventana de proyectos de Pyl.
     * 
     * @param $intStart
     * @param $intLimit
     * @param $arrayParametros   [fechaDesdePlanif, fechaHastaPlanif, estado, login, descripcionPunto, vendedor,
     *                            ciudad, tipoSolicitud,codEmpresa,idSector,identificacion,nombres, apellidos,ultimaMilla]
     *
     * @return $arrayDatosTotal
     */
    public function getRegistrosServiciosProyecto($intStart,$intLimit,$arrayParametros)
    {
        $strDescripTipoRol      = "Cliente";
        $strWhere               = "";
        $arrayDatosTotal        = array();
        $intTotalRegistros      = 0;
        $objQuery               = $this->_em->createQuery();
        $objQueryCount          = $this->_em->createQuery();
        
        
        $strSqlCampos = " SELECT
                            s.id as idServicio,
                            p.id as idPunto,
                            p.estado as estadoPunto,
                            st.tercerizadoraId,
                            st.id as idServicioTecnico,
                            se.nombreSector,
                            pa.nombreParroquia,
                            ca.nombreCanton,
                            pe.id as id_persona,
                            pe.razonSocial,
                            pe.nombres,
                            pe.apellidos,
                            p.usrVendedor,
                            p.login,
                            s.tipoOrden ,
                            s.estado as estadoServicio,
                            aj.nombreJurisdiccion ,
                            p.longitud,
                            p.latitud,
                            p.direccion,
                            p.observacion as observacion,
                            CONCAT(peVend.nombres,CONCAT(' ',peVend.apellidos)) as nombreVendedor,
                            st.ultimaMillaId ";
    
        $strFrom  =  " FROM
                            schemaBundle:InfoServicio s,
                            schemaBundle:InfoServicioTecnico st,
                            schemaBundle:InfoPersona pe,
                            schemaBundle:InfoPersonaEmpresaRol per,
                            schemaBundle:InfoEmpresaRol er,
                            schemaBundle:AdmiRol ar,
                            schemaBundle:AdmiTipoRol atr,
                            schemaBundle:AdmiJurisdiccion aj,
                            schemaBundle:AdmiSector se,
                            schemaBundle:AdmiParroquia pa,
                            schemaBundle:AdmiCanton ca,
                            schemaBundle:InfoPunto p

                            LEFT JOIN schemaBundle:InfoPersona peVend WITH peVend.login = p.usrVendedor
                            
                            WHERE
                                s.puntoId = p.id
                                AND st.servicioId = s.id 
                                AND p.personaEmpresaRolId = per.id
                                AND per.empresaRolId = er.id
                                AND er.rolId = ar.id
                                AND per.personaId = pe.id
                                AND p.sectorId = se.id
                                AND se.parroquiaId = pa.id
                                AND pa.cantonId = ca.id
                                AND aj.id = p.puntoCoberturaId
                                AND er.empresaCod = :paramCodEmpresa
                                AND ar.tipoRolId = atr.id
                                AND atr.descripcionTipoRol = :paramDescripcionTipoRol 
                                AND s.id = :paramIdServicio ";


        $objQuery->setParameter("paramCodEmpresa", $arrayParametros["codEmpresa"]);
        $objQuery->setParameter("paramDescripcionTipoRol", $strDescripTipoRol);
        $objQuery->setParameter("paramIdServicio", $arrayParametros["servicioId"]);
        $objQueryCount->setParameter("paramCodEmpresa",$arrayParametros["codEmpresa"]);
        $objQueryCount->setParameter("paramDescripcionTipoRol",$strDescripTipoRol);
        $objQueryCount->setParameter("paramIdServicio", $arrayParametros["servicioId"]);

        
        $objQuery->setDQL($strSqlCampos.$strFrom);

        if(!empty($intStart))
        {
            $objQuery->setFirstResult($intStart);
        }
        if(!empty($intLimit))
        {
            $objQuery->setMaxResults($intLimit);
        }
        $arrayDatos = $objQuery->getResult();

        if($arrayDatos)
        {
            $strSqlCamposCount = "SELECT COUNT(s.id) ";

            $objQueryCount->setDQL($strSqlCamposCount.$strFrom);
                        
            $intTotalRegistros = $objQueryCount->getSingleScalarResult();
        }
        
        $arrayDatosTotal["registros"] = $arrayDatos;
        $arrayDatosTotal["total"]     = $intTotalRegistros;
        return $arrayDatosTotal;
    }
}
