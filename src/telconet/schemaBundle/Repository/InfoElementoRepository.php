<?php

namespace telconet\schemaBundle\Repository;

use Symfony\Component\HttpFoundation\JsonResponse;
use telconet\schemaBundle\DependencyInjection\BaseRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
use telconet\schemaBundle\Entity\ReturnResponse;
use telconet\schemaBundle\Entity\InfoServicio;
use telconet\schemaBundle\Entity\InfoServicioProdCaract;
use telconet\schemaBundle\Entity\AdmiProductoCaracteristica;
use telconet\schemaBundle\Entity\AdmiCaracteristica;

class InfoElementoRepository extends BaseRepository
{

    /**
     * getJurisdiccionPorElemtoId
     *
     * Metodo encargado de obtener la jurisdiccion de un elemento
     * 
     * @param $intElementoId => id del elemento
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.0 09/05/2019
     * @since 1.0
     * costoQuery: 10
     * 
     */
    public function getJurisdiccionPorElemtoId($intElementoId)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        try
        {
        $strQuery = "Select Distinct 
            Ac.Jurisdiccion as JURISDICCION
        From 
            DB_INFRAESTRUCTURA.Info_Empresa_Elemento_Ubica Eeu,
            DB_INFRAESTRUCTURA.Info_Ubicacion Iu,
            DB_GENERAL.Admi_Parroquia Ap,
            DB_GENERAL.Admi_Canton Ac
        Where 
            Eeu.Elemento_Id       = :elementoId 
            And Eeu.Ubicacion_Id  = Iu.Id_Ubicacion 
            And Iu.Parroquia_Id   = Ap.Id_Parroquia 
            And Ap.Canton_Id      = Ac.Id_Canton 
            And Ap.Estado         = 'Activo'";

            
        $objQuery->setParameter("elementoId", $intElementoId);
        $objRsm->addScalarResult('JURISDICCION', 'jurisdiccion','string');
        $objQuery->setSQL($strQuery);

        $arrayRespuesta["status"]   = 'ok';
        $arrayRespuesta["registros"] = $objQuery->getArrayResult();
        }
        catch (\Exception $objException)
        {
            $arrayRespuesta["status"]  = 'fail';
            $arrayRespuesta["mensaje"] = $objException->getMessage();
        }
        return $arrayRespuesta;
    }

    /**
     * getCantonPorElementoId
     *
     * Metodo encargado de obtener el canton de un elemento
     * 
     * @param $intElementoId => id del elemento
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.0 08/09/2022
     * 
     */
    public function getCantonPorElementoId($intElementoId)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        try
        {
        $strQuery = "SELECT 
                    distinct can.nombre_canton as nombre_canton
                    FROM 
                    DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA ubi,
                    DB_INFRAESTRUCTURA.INFO_ELEMENTO ele,
                    DB_INFRAESTRUCTURA.INFO_UBICACION info,
                    DB_GENERAL.ADMI_PARROQUIA parr,
                    DB_GENERAL.ADMI_canton can,
                    DB_GENERAL.ADMI_CANTON_jurisdiccion cjur,
                    DB_GENERAL.ADMI_jurisdiccion jur,
                    DB_COMERCIAL.INFO_OFICINA_GRUPO ofi,
                    DB_GENERAL.ADMI_PROVINCIA prov
                    where ELEMENTO_ID = :elementoId
                    and ele.ID_ELEMENTO = ubi.elemento_id
                    and ubi.ubicacion_id = info.id_ubicacion
                    and info.PARROQUIA_ID = parr.id_parroquia
                    and parr.canton_id = can.id_canton
                    and can.id_canton = cjur.canton_id
                    and can.provincia_id =  prov.id_provincia
                    and cjur.jurisdiccion_id = jur.id_jurisdiccion
                    and cjur.estado = 'Activo'
                    and jur.oficina_id = ofi.id_oficina
                    and ofi.empresa_id = ubi.empresa_cod";

        $objQuery->setParameter("elementoId", $intElementoId);
        $objRsm->addScalarResult('NOMBRE_CANTON', 'nombre_canton','string');
        $objQuery->setSQL($strQuery);

        $arrayRespuesta["status"]   = 'ok';
        $arrayRespuesta["registros"] = $objQuery->getArrayResult();
        }
        catch (\Exception $objException)
        {
            $arrayRespuesta["status"]  = 'fail';
            $arrayRespuesta["mensaje"] = $objException->getMessage();
        }
        return $arrayRespuesta;
    }
    
    /**
     * Función que sirve para obtener los olts listos para ejecutar el cambio de plan masivo
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 27-11-2019
     * 
     * @param array $arrayParametros [
     *                                  "strRetornaDataOltsCpm"     => 'SI' o 'NO' se necesita obtener la información de los olts,
     *                                  "strRetornaTotalOltsCpm"    => 'SI' o 'NO' se necesita obtener el total de olts,
     *                                  "strDatabaseDsn"            => Conexión a la Base de Datos
     *                                  "strUserComercial"          => Usuario del esquema Comercial
     *                                  "strPasswordComercial"      => Password del esquema Comercial
     *                                ]
     * @return array $arrayRespuesta [
     *                                  "status"            => OK o ERROR,
     *                                  "mensaje"           => Mensaje de error,
     *                                  "arrayResultado"    => Cursor con la información de los olts
     *                                  "intTotal"          => Total de olts
     *                                ]
     */
    public function getJsonOltsInicioCpm($arrayParametros)
    {
        $strMensaje                     = "";
        $arrayResultado                 = array();
        $boolFalse                      = false;
        $arrayRespuestaOltsInicioCpm    = $this->getRespuestaOltsInicioCpm($arrayParametros);
        $strStatus                      = $arrayRespuestaOltsInicioCpm["status"];
        if($strStatus === "OK")
        {
            $intTotal           = $arrayRespuestaOltsInicioCpm["intTotalOltsCpm"];
            $objCursorOltsCpm   = $arrayRespuestaOltsInicioCpm["objCursorOltsCpm"];
            if(!empty($objCursorOltsCpm))
            {
                while(($arrayRowCursor = oci_fetch_array($objCursorOltsCpm, OCI_ASSOC + OCI_RETURN_NULLS)) != $boolFalse)
                {
                    $arrayResultado[]   = array("idOlt"         => $arrayRowCursor["ID_ELEMENTO"],
                                                "nombreOlt"     => $arrayRowCursor["NOMBRE_ELEMENTO"],
                                                "estadoOlt"     => $arrayRowCursor["ESTADO"],
                                                "numLogines"    => $arrayRowCursor["NUM_LOGINES"]);
                }
            }
        }
        else
        {
            $intTotal   = 0;
            $strMensaje = $arrayRespuestaOltsInicioCpm["mensaje"];
        }
        $strJsonData    = json_encode(array('status'            => $strStatus,
                                            'mensaje'           => $strMensaje,
                                            'intTotal'          => $intTotal, 
                                            'arrayResultado'    => $arrayResultado));
        return $strJsonData;
    }
    
    /**
     * Función que sirve para invocar el procedimiento creado para obtener los olts que están listos para iniciar el cambio de plan masivo de las
     * solicitudes asociadas a servicios de dichos olts
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 27-11-2019
     * 
     * @author Alberto Arias <farias@telconet.ec>
     * @version 1.1 17-04-2023  Se agrega el filtro de empresa en sesión     
     * 
     * @param array $arrayParametros [
     *                                  "strRetornaDataOltsCpm"     => 'SI' o 'NO' se necesita obtener la información de los olts,
     *                                  "strRetornaTotalOltsCpm"    => 'SI' o 'NO' se necesita obtener el total de olts,
     *                                  "intIdOlt"                  => Id del olt,
     *                                  "intStart"                  => inicio del pagineo,
     *                                  "intLimit"                  => número de registros del pagineo,
     *                                  "strDatabaseDsn"            => Conexión a la Base de Datos,
     *                                  "strUserComercial"          => Usuario del esquema Comercial,
     *                                  "strPasswordComercial"      => Password del esquema Comercial
     *                                ]
     * @return array $arrayRespuesta [
     *                                  "status"            => OK o ERROR,
     *                                  "mensaje"           => Mensaje de error,
     *                                  "objCursorOltsCpm"  => Cursor con la información de los olts,
     *                                  "intTotalOltsCpm"   => Total de olts
     *                                ]
     */
    public function getRespuestaOltsInicioCpm($arrayParametros)
    {
        $strRetornaDataOltsCpm      = ( isset($arrayParametros['strRetornaDataOltsCpm']) && !empty($arrayParametros['strRetornaDataOltsCpm'])) 
                                        ? $arrayParametros['strRetornaDataOltsCpm'] : "";
        $strRetornaTotalOltsCpm     = ( isset($arrayParametros['strRetornaTotalOltsCpm'])  && !empty($arrayParametros['strRetornaTotalOltsCpm']))
                                        ? $arrayParametros['strRetornaTotalOltsCpm'] : "";
        $intIdOlt                   = ( isset($arrayParametros['intIdOlt']) && !empty($arrayParametros['intIdOlt']) ) 
                                        ? $arrayParametros['intIdOlt'] : 0;
        $intStart                   = ( isset($arrayParametros['intStart']) && !empty($arrayParametros['intStart']) ) 
                                        ? $arrayParametros['intStart'] : 0;
        $intLimit                   = ( isset($arrayParametros['intLimit']) && !empty($arrayParametros['intLimit']) )  
                                        ? $arrayParametros['intLimit'] : 0;
        $strStatus                  = "";
        $strMsjError                = "";
        $intTotalOltsCpm            = 0;
        $strDatabaseDsn             = ( isset($arrayParametros['strDatabaseDsn']) && !empty($arrayParametros['strDatabaseDsn']) )
                                        ? $arrayParametros['strDatabaseDsn'] : null;
        $strUserComercial           = ( isset($arrayParametros['strUserComercial']) && !empty($arrayParametros['strUserComercial']) )
                                        ? $arrayParametros['strUserComercial'] : null;
        $strPasswordComercial       = ( isset($arrayParametros['strPasswordComercial']) 
                                        && !empty($arrayParametros['strPasswordComercial']) ) ? $arrayParametros['strPasswordComercial'] : null;
        
        $strIdEmpresa               = $arrayParametros['idEmpresa'];
        $strPrefijoEmpresa          = $arrayParametros['strPrefijoEmpresa'];
        try
        {
            if( !empty($strDatabaseDsn) && !empty($strUserComercial) && !empty($strPasswordComercial) )
            {
                $objOciConexion             = oci_connect($strUserComercial, $strPasswordComercial, $strDatabaseDsn);
                $objCursorOltsCpm           = oci_new_cursor($objOciConexion);
                $strSQL                     = "BEGIN DB_COMERCIAL.TECNK_SERVICIOS.P_GET_OLTS_INICIO_CPM(
                                                                                                        :strRetornaDataOltsCpm,
                                                                                                        :strRetornaTotalOltsCpm,
                                                                                                        :intIdOlt,
                                                                                                        :intStart,
                                                                                                        :intLimit,
                                                                                                        :strStatus,
                                                                                                        :strMsjError,
                                                                                                        :objCursorOltsCpm,
                                                                                                        :intTotalOltsCpm,
                                                                                                        :intIdEmpresa,
                                                                                                        :strPrefijoEmpresa); 
                                               END;";
                $objStmt                    = oci_parse($objOciConexion,$strSQL);
                oci_bind_by_name($objStmt, ":strRetornaDataOltsCpm",    $strRetornaDataOltsCpm);
                oci_bind_by_name($objStmt, ":strRetornaTotalOltsCpm",   $strRetornaTotalOltsCpm);
                oci_bind_by_name($objStmt, ":intIdOlt",                 $intIdOlt);
                oci_bind_by_name($objStmt, ":intStart",                 $intStart);
                oci_bind_by_name($objStmt, ":intLimit",                 $intLimit);
                oci_bind_by_name($objStmt, ":strStatus",                $strStatus, 5);
                oci_bind_by_name($objStmt, ":strMsjError",              $strMsjError, 4000);
                oci_bind_by_name($objStmt, ":objCursorOltsCpm",         $objCursorOltsCpm, -1, OCI_B_CURSOR);
                oci_bind_by_name($objStmt, ":intTotalOltsCpm",          $intTotalOltsCpm, 10);
                oci_bind_by_name($objStmt, ":intIdEmpresa",             $strIdEmpresa);
                oci_bind_by_name($objStmt, ":strPrefijoEmpresa",        $strPrefijoEmpresa);
                oci_execute($objStmt);
                oci_execute($objCursorOltsCpm, OCI_DEFAULT);
            }
            else
            {
                throw new \Exception('No se han enviado los parámetros adecuados para consultar los olts para el cambio de plan masivo. Database('.
                                     $strDatabaseDsn.'), UsrComercial('.$strUserComercial.'), PassComunicacion('.$strPasswordComercial.').');
            }
        }
        catch(\Exception $e)
        {
            $strStatus      = "ERROR";
            $strMsjError    = "Ha ocurrido una excepción al intentar realizar la consulta";
            error_log("Error en getRespuestaOltsInicioCpm ".$e->getMessage());
            
        }
        $arrayRespuesta = array("status"                => $strStatus,
                                "mensaje"               => $strMsjError,
                                "objCursorOltsCpm"      => $objCursorOltsCpm,
                                "intTotalOltsCpm"       => $intTotalOltsCpm);
        return $arrayRespuesta;
    }
    
    /**
     * getResultadoSwitchesEnNodo
     * 
     * Obtiene los switches que están contenidos en un nodo de manera directa o dentro de las unidades de un rack
     * Costo = 7368
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 05-09-2017
     * 
     * @param  array $arrayParametros[  
     *                                  "strCodEmpresa"       => id de la empresa
     *                                  "intIdElementoNodo"   => id del elemento nodo
     *                               ]
     * 
     * @return array $arrayRespuesta['intTotal', 'arrayResultado']
     */
    public function getResultadoSwitchesEnNodo($arrayParametros)
    {
        $arrayRespuesta['intTotal']        = 0;
        $arrayRespuesta['arrayResultado']   = array();
        try
        {
            $objRsm             = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery        = $this->_em->createNativeQuery(null, $objRsm);
            
            $strQueryNodos      = " SELECT DISTINCT nodos.ID_ELEMENTO
                                    FROM DB_INFRAESTRUCTURA.VISTA_ELEMENTOS nodos
                                    WHERE nodos.ESTADO = :strEstadoActivo 
                                    AND nodos.NOMBRE_TIPO_ELEMENTO = :strTipoNodo ";
            $strWhereNodos      = "";
            if(isset($arrayParametros['strCodEmpresa']) && !empty($arrayParametros['strCodEmpresa']))
            {
                $strWhereNodos .= "AND nodos.EMPRESA_COD = :strCodEmpresa ";
                $objNtvQuery->setParameter('strCodEmpresa', $arrayParametros['strCodEmpresa']);
            }
            
            if(isset($arrayParametros['intIdElementoNodo']) && !empty($arrayParametros['intIdElementoNodo']))
            {
                $strWhereNodos .= "AND nodos.ID_ELEMENTO = :intIdElementoNodo ";
                $objNtvQuery->setParameter('intIdElementoNodo', $arrayParametros['intIdElementoNodo']);
            }
            
            $strQueryNodosFinal = $strQueryNodos . $strWhereNodos;
            $strSqlWithNodos    = " WITH NODOS AS (".$strQueryNodosFinal.") ";
            
            $strQuerySwitchesDirectoNodo = "SELECT elemSwitch.ID_ELEMENTO, elemSwitch.NOMBRE_ELEMENTO
                                            FROM DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO relacionNodoSwitch
                                            INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO elemSwitch
                                            ON elemSwitch.ID_ELEMENTO = relacionNodoSwitch.ELEMENTO_ID_B
                                            INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO modeloSwitch
                                            ON modeloSwitch.ID_MODELO_ELEMENTO = elemSwitch.MODELO_ELEMENTO_ID
                                            INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO tipoSwitch
                                            ON tipoSwitch.ID_TIPO_ELEMENTO = modeloSwitch.TIPO_ELEMENTO_ID
                                            INNER JOIN NODOS nodos 
                                            ON nodos.ID_ELEMENTO = relacionNodoSwitch.ELEMENTO_ID_A
                                            WHERE elemSwitch.ESTADO = :strEstadoActivo
                                            AND relacionNodoSwitch.ESTADO = :strEstadoActivo
                                            AND tipoSwitch.NOMBRE_TIPO_ELEMENTO = :strTipoSwitch ";
            
            
            $strQuerySwitchesRackNodo   = " SELECT elemSwitch.ID_ELEMENTO, elemSwitch.NOMBRE_ELEMENTO 
                                            FROM DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO relacionNodoRack
                                            INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO elemRack
                                            ON elemRack.ID_ELEMENTO = relacionNodoRack.ELEMENTO_ID_B
                                            INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO modeloRack
                                            ON modeloRack.ID_MODELO_ELEMENTO = elemRack.MODELO_ELEMENTO_ID
                                            INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO tipoRack
                                            ON tipoRack.ID_TIPO_ELEMENTO = modeloRack.TIPO_ELEMENTO_ID
                                            
                                            INNER JOIN DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO relacionRackUnid
                                            ON relacionRackUnid.ELEMENTO_ID_A = elemRack.ID_ELEMENTO
                                            INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO elemUnidRack
                                            ON elemUnidRack.ID_ELEMENTO = relacionRackUnid.ELEMENTO_ID_B
                                            INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO modeloUnidRack
                                            ON modeloUnidRack.ID_MODELO_ELEMENTO = elemUnidRack.MODELO_ELEMENTO_ID
                                            INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO tipoUnidRack
                                            ON tipoUnidRack.ID_TIPO_ELEMENTO = modeloUnidRack.TIPO_ELEMENTO_ID

                                            INNER JOIN DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO relacionUnidRackSwitch
                                            ON relacionUnidRackSwitch.ELEMENTO_ID_A = elemUnidRack.ID_ELEMENTO
                                            INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO elemSwitch
                                            ON elemSwitch.ID_ELEMENTO = relacionUnidRackSwitch.ELEMENTO_ID_B
                                            INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO modeloSwitch
                                            ON modeloSwitch.ID_MODELO_ELEMENTO = elemSwitch.MODELO_ELEMENTO_ID
                                            INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO tipoSwitch
                                            ON tipoSwitch.ID_TIPO_ELEMENTO = modeloSwitch.TIPO_ELEMENTO_ID
                                            INNER JOIN NODOS nodos 
                                            ON nodos.ID_ELEMENTO = relacionNodoRack.ELEMENTO_ID_A
                                            WHERE elemSwitch.ESTADO = :strEstadoActivo
                                            AND relacionUnidRackSwitch.ESTADO = :strEstadoActivo
                                            AND relacionRackUnid.ESTADO = :strEstadoActivo
                                            AND relacionNodoRack.ESTADO = :strEstadoActivo
                                            AND tipoRack.NOMBRE_TIPO_ELEMENTO = :strTipoRack
                                            AND tipoUnidRack.NOMBRE_TIPO_ELEMENTO = :strTipoUnidRack
                                            AND tipoSwitch.NOMBRE_TIPO_ELEMENTO = :strTipoSwitch ";
            
            $strWhereSwitches      = "";
            if(isset($arrayParametros['strNombreSwitch']) && !empty($arrayParametros['strNombreSwitch']))
            {
                $strWhereSwitches .= "AND elemSwitch.NOMBRE_ELEMENTO LIKE :strNombreSwitch ";
                $objNtvQuery->setParameter('strNombreSwitch', '%'.$arrayParametros['strNombreSwitch'].'%');
            }

            $strQuerySwitches   = $strQuerySwitchesDirectoNodo . $strWhereSwitches." UNION ALL ".$strQuerySwitchesRackNodo . $strWhereSwitches;
            $strQueryFinal      = $strSqlWithNodos . "  SELECT DISTINCT * FROM (".$strQuerySwitches." ) switches ";
            
            $strQueryCount      = $strSqlWithNodos . "  SELECT COUNT(DISTINCT ID_ELEMENTO) AS TOTAL FROM (".$strQuerySwitches.")";
            
            $objNtvQuery->setParameter('strEstadoActivo', 'Activo');
            $objNtvQuery->setParameter('strTipoNodo', 'NODO');
            $objNtvQuery->setParameter('strTipoSwitch', 'SWITCH');
            $objNtvQuery->setParameter('strTipoRack', 'RACK');
            $objNtvQuery->setParameter('strTipoUnidRack', 'UDRACK');
            
            $objRsm->addScalarResult('ID_ELEMENTO', 'idElementoSwith', 'integer');
            $objRsm->addScalarResult('NOMBRE_ELEMENTO', 'nombreElementoSwitch', 'string');
            $objRsm->addScalarResult('TOTAL', 'intTotal', 'integer');
            
            $objNtvQuery->setSQL($strQueryFinal);            
            $arrayResultado = $objNtvQuery->getResult();
            
            $objNtvQuery->setSQL($strQueryCount);
            $intTotal       = $objNtvQuery->getSingleScalarResult();

            $arrayRespuesta['arrayResultado']   = $arrayResultado;
            $arrayRespuesta['intTotal']         = $intTotal;

        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        return $arrayRespuesta;
    }

    /**
     * getJSONSwitchesEnNodo
     * 
     * Obtiene la información de las cámaras de los servicios de los clientes
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 05-09-2017
     * 
     * @param  array $arrayParametros[  
     *                                  "strCodEmpresa"       => id de la empresa
     *                                  "intIdElementoNodo"   => id del elemento nodo
     *                               ]
     * 
     * @return return json $strJsonData
     */
    public function getJSONSwitchesEnNodo($arrayParametros)
    {  
        $arrayRespuesta             = $this->getResultadoSwitchesEnNodo($arrayParametros);
        $arrayResultado             = $arrayRespuesta['arrayResultado'];
        $intTotal                   = $arrayRespuesta['intTotal'];
        $strJsonData                = json_encode(array('intTotal'   => $intTotal, 'arrayResultado' => $arrayResultado));
        return $strJsonData;
    }
    
    /**
     * getResultadoCamarasPortal
     * 
     * Obtiene la información de las cámaras de los servicios de los clientes
     * Costo = 28
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 23-05-2017
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 17-07-2017 Se agrega parámetro adicional para obtener información adicional del elemento y no consultar los usuarios
     *                         de la cámara cuando no es necesario. Además se agrega la información del puerto para el DDNS de la cámara
     * 
     * @param  array $arrayParametros[  
     *                                  'idPer'         => id del cliente
     *                                  'idServidor'    => id parametro det donde se encuentra registrado el servidor en el que almacenará
     *                                                     las cámaras
     *                                  'estadoServ'    => estado del servicio
     *                                  'estadosServ'   => array con estado del servicio
     *                                  'idPunto'       => id del punto,
     *                      
     *                               ]
     * 
     * @return array $arrayRespuesta['total', 'resultInfo']
     */
    public function getResultadoCamarasPortal($arrayParametros)
    {
        $arrayRespuesta['total']        = 0;
        $arrayRespuesta['resultInfo']   = array();
        try
        {
            $objRsm             = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery        = $this->_em->createNativeQuery(null, $objRsm);
            
            
            $strSelect          = " SELECT IPUNTO.PERSONA_EMPRESA_ROL_ID AS ID_PERSONA_EMPRESA_ROL, IPUNTO.ID_PUNTO, ISERV.ID_SERVICIO, 
                                    IE.ID_ELEMENTO, APDSERVIDOR.DESCRIPCION AS SERVIDOR, 
                                    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleElementoNombre,
                                                                                                   IE.ID_ELEMENTO,
                                                                                                   :strEstadoActivo) AS NOMBRE_CAM,
                                    CONCAT( DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleElementoDDNS,
                                                                                                           IE.ID_ELEMENTO,
                                                                                                           :strEstadoActivo),
                                            CONCAT(':', DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetallePuertoDDNS,
                                                                                                                       IE.ID_ELEMENTO,
                                                                                                                       :strEstadoActivo)) 
                                    ) AS DDNS_CAM ";
            
            $strSelectCount     = " SELECT COUNT(DISTINCT ISERV.ID_SERVICIO) AS TOTAL ";
            
            $strFrom            = " FROM DB_COMERCIAL.INFO_SERVICIO ISERV
                                    INNER JOIN DB_COMERCIAL.INFO_PUNTO IPUNTO
                                    ON IPUNTO.ID_PUNTO =  ISERV.PUNTO_ID
                                    INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO ISERVTEC
                                    ON ISERVTEC.SERVICIO_ID = ISERV.ID_SERVICIO
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO IE 
                                    ON IE.ID_ELEMENTO = ISERVTEC.ELEMENTO_CLIENTE_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AME 
                                    ON AME.ID_MODELO_ELEMENTO = IE.MODELO_ELEMENTO_ID 
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ATE
                                    ON ATE.ID_TIPO_ELEMENTO = AME.TIPO_ELEMENTO_ID
                                    INNER JOIN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISPCSERVIDOR
                                    ON ISPCSERVIDOR.SERVICIO_ID = ISERV.ID_SERVICIO
                                    INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APCSERVIDOR
                                    ON APCSERVIDOR.ID_PRODUCTO_CARACTERISITICA = ISPCSERVIDOR.PRODUCTO_CARACTERISITICA_ID
                                    INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA ACSERVIDOR
                                    ON ACSERVIDOR.ID_CARACTERISTICA = APCSERVIDOR.CARACTERISTICA_ID
                                    INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET APDSERVIDOR 
                                    ON APDSERVIDOR.ID_PARAMETRO_DET = COALESCE(TO_NUMBER(REGEXP_SUBSTR(ISPCSERVIDOR.VALOR,'^\d+')),0) ";
            
            $strWhere           = " WHERE ATE.NOMBRE_TIPO_ELEMENTO = :strNombreTipoElemento
                                    AND ACSERVIDOR.DESCRIPCION_CARACTERISTICA = :strCaractServidor 
                                    AND ISPCSERVIDOR.ESTADO = :strEstadoActivo 
                                    AND APDSERVIDOR.ESTADO = :strEstadoActivo ";
            
            $strOrderBy         = "ORDER BY NOMBRE_CAM ASC ";
            
            $objNtvQuery->setParameter('strNombreTipoElemento', 'CAMARA');
            $objNtvQuery->setParameter('strDetalleElementoDDNS', 'DDNS_CAMARA');
            $objNtvQuery->setParameter('strDetallePuertoDDNS', 'PUERTO_DDNS_CAMARA');
            $objNtvQuery->setParameter('strDetalleElementoNombre', 'NOMBRE_CAMARA');
            $objNtvQuery->setParameter('strCaractServidor', 'SERVIDOR_VIDEOS_CLIENTE');
            
            $objNtvQuery->setParameter('strCaractServidor', 'SERVIDOR_VIDEOS_CLIENTE');
            $objNtvQuery->setParameter('strEstadoActivo', 'Activo');
            
            if(isset($arrayParametros['strSoloDataPrincipalCam']) && !empty($arrayParametros['strSoloDataPrincipalCam'])
                && $arrayParametros['strSoloDataPrincipalCam']=="SI")
            {
                $strSelect .= ", DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleMacCamara,
                                                                                                IE.ID_ELEMENTO,
                                                                                                :strEstadoActivo) AS MAC_CAMARA,
                                 AME.NOMBRE_MODELO_ELEMENTO,
                                 IE.SERIE_FISICA,
                                 CONCAT( DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleElementoIP,
                                                                                                        IE.ID_ELEMENTO,
                                                                                                        :strEstadoActivo),
                                            CONCAT(':', DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetallePuertoIP,
                                                                                                                       IE.ID_ELEMENTO,
                                                                                                                       :strEstadoActivo)) 
                                    ) AS IP_CAM ";
                $objNtvQuery->setParameter('strDetalleMacCamara', 'MAC_CAMARA');
                $objNtvQuery->setParameter('strDetalleElementoIP', 'IP_CAMARA');
                $objNtvQuery->setParameter('strDetallePuertoIP', 'PUERTO_IP_CAMARA');
                
                $objRsm->addScalarResult('MAC_CAMARA', 'mac', 'string');
                $objRsm->addScalarResult('NOMBRE_MODELO_ELEMENTO', 'modelo', 'string');
                $objRsm->addScalarResult('SERIE_FISICA', 'serie', 'string');
                $objRsm->addScalarResult('IP_CAM', 'ipCam', 'string');
            }
            else
            {
                $strSelect .= ",DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleElemUserAdmin,
                                                                                               IE.ID_ELEMENTO,
                                                                                               :strEstadoActivo) AS USER_ADMIN,
                                DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleElemPassAdmin,
                                                                                               IE.ID_ELEMENTO,
                                                                                               :strEstadoActivo) AS PASS_ADMIN,
                                DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleElemUserVisitor,
                                                                                               IE.ID_ELEMENTO,
                                                                                               :strEstadoActivo) AS USER_VISITOR,
                                DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleElemPassVisitor,
                                                                                                IE.ID_ELEMENTO,
                                                                                                :strEstadoActivo) AS PASS_VISITOR ";
                
                $objNtvQuery->setParameter('strDetalleElemUserAdmin', 'USER_ADMIN_CAMARA');
                $objNtvQuery->setParameter('strDetalleElemPassAdmin', 'PASS_ADMIN_CAMARA');
                $objNtvQuery->setParameter('strDetalleElemUserVisitor', 'USER_VISIT_CAMARA');
                $objNtvQuery->setParameter('strDetalleElemPassVisitor', 'PASS_VISIT_CAMARA');
                
                $objRsm->addScalarResult('USER_ADMIN', 'admin', 'string');
                $objRsm->addScalarResult('PASS_ADMIN', 'passAdmin', 'string');
                $objRsm->addScalarResult('USER_VISITOR', 'visitor', 'string');
                $objRsm->addScalarResult('PASS_VISITOR', 'passVisitor', 'string');
                
            }
            if(isset($arrayParametros['idPer']) && !empty($arrayParametros['idPer']))
            {
                $strWhere .= "AND IPUNTO.PERSONA_EMPRESA_ROL_ID = :intIdPersonaEmpresaRol ";
                $objNtvQuery->setParameter('intIdPersonaEmpresaRol', $arrayParametros['idPer']);
            }
            
            if(isset($arrayParametros['idPunto']) && !empty($arrayParametros['idPunto']))
            {
                $strWhere .= "AND IPUNTO.ID_PUNTO = :intIdPunto ";
                $objNtvQuery->setParameter('intIdPunto', $arrayParametros['idPunto']);
            }
            
            if(isset($arrayParametros['idServidor']) && !empty($arrayParametros['idServidor']))
            {
                $strWhere .= "AND APDSERVIDOR.ID_PARAMETRO_DET = :intIdParamServidor ";
                $objNtvQuery->setParameter('intIdParamServidor', $arrayParametros['idServidor']);
            }
            
            if(isset($arrayParametros['descripServidor']) && !empty($arrayParametros['descripServidor']))
            {
                $strWhere .= "AND APDSERVIDOR.DESCRIPCION = :descripServidor ";
                $objNtvQuery->setParameter('descripServidor', $arrayParametros['descripServidor']);
            }
            
            if(isset($arrayParametros['estadosServ']) && !empty($arrayParametros['estadosServ']))
            {
                $strWhere .= "AND ISERV.ESTADO IN (:arrayEstadosServicios) ";
                $objNtvQuery->setParameter('arrayEstadosServicios', array_values($arrayParametros['estadosServ']));
            }
            
            if(isset($arrayParametros['estadoServ']) && !empty($arrayParametros['estadoServ']))
            {
                $strWhere .= "AND ISERV.ESTADO = :strEstadoServicio ";
                $objNtvQuery->setParameter('strEstadoServicio', $arrayParametros['estadoServ']);
            }
            
            $objRsm->addScalarResult('ID_SERVICIO', 'idServ', 'integer');
            $objRsm->addScalarResult('ID_PUNTO', 'idPunto', 'integer');
            $objRsm->addScalarResult('ID_ELEMENTO', 'idElem', 'integer');
            $objRsm->addScalarResult('ID_PERSONA_EMPRESA_ROL', 'idPer', 'integer');
            $objRsm->addScalarResult('SERIE_FISICA', 'serie', 'string');
            $objRsm->addScalarResult('DDNS_CAM', 'ddns', 'string');
            $objRsm->addScalarResult('NOMBRE_CAM', 'nombre', 'string');
            $objRsm->addScalarResult('SERVIDOR', 'servidor', 'string');
            
            
            
            $objRsm->addScalarResult('TOTAL', 'intTotal', 'integer');
            
            $strQuery       = $strSelect . $strFrom . $strWhere. $strOrderBy;

            $objNtvQuery->setSQL($strQuery);            
            $arrayResultado = $objNtvQuery->getResult();
            
            $strQueryCount  = $strSelectCount . $strFrom . $strWhere;
            $objNtvQuery->setSQL($strQueryCount);
            
            $intTotal       = $objNtvQuery->getSingleScalarResult();

            $arrayRespuesta['resultInfo']   = $arrayResultado;
            $arrayRespuesta['total']        = $intTotal;

        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        return $arrayRespuesta;
    }
    
    
    /*
    * Costo: 3
    *
    * getElementos
    * Obtiene los Elementos
    *
    * @param array $arrayParametros[ strEstadoElemento => estado del elemento,
    *                                strNombreElemento => nombre del elemento,
    *                                strModeloElemento => modelo del elemento,
    *                                intStart          => valor inicial para el pagineo,
    *                                intLimit          => valor final para el pagineo,
    *                                intZona           => Zona
    *
    * @return array $arrayRespuesta
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 17-04-2018
	*/
    public function getElementos($arrayParametros)
    {
        $arrayRespuesta    = array();
        $strWhere          = "";       
        $strSql            = "";
        $intStart          = $arrayParametros["intStart"];
        $intLimit          = $arrayParametros["intLimit"];
        $strEstadoElemento = $arrayParametros['strEstadoElemento'];
        $strNombreElemento = $arrayParametros['strNombreElemento'];
        $strModeloElemento = $arrayParametros['strModeloElemento'];
        $intZona           = $arrayParametros['intZona'];
        $boolEsWhere       = true;

        try
        {
            $objQuery          = $this->_em->createQuery();
            $objQueryCount     = $this->_em->createQuery();

            $strSqlCount = " SELECT count(infoE.id) ";
            $strSql      = " SELECT infoE.id, infoE.nombreElemento, infoE.estado ";
            $strFrom     = " FROM schemaBundle:InfoElemento infoE ";

            if ($strEstadoElemento != 'Todos')
            {
                $boolEsWhere = false;
                $strWhere  = 'WHERE infoE.estado = :paramEstado ';
                $objQuery->setParameter("paramEstado", $strEstadoElemento);
                $objQueryCount->setParameter("paramEstado", $strEstadoElemento);
            }

            if(!empty($strModeloElemento))
            {
                $strEsAnd  = ' AND ';
                if ($boolEsWhere)
                {
                    $boolEsWhere = false;
                    $strEsAnd  = ' WHERE ';
                }
                $strWhere .= $strEsAnd."infoE.modeloElementoId = :paramModelo ";
                $objQuery->setParameter("paramModelo", $strModeloElemento);
                $objQueryCount->setParameter("paramModelo", $strModeloElemento);
            }

            if(!empty($strNombreElemento))
            {
                $strEsAnd  = ' AND ';
                if ($boolEsWhere)
                {
                    $boolEsWhere = false;
                    $strEsAnd  = ' WHERE ';
                }

                $strWhere .= $strEsAnd."infoE.nombreElemento LIKE :paramNombreElemento ";
                $objQuery->setParameter("paramNombreElemento", $strNombreElemento."%");
                $objQueryCount->setParameter("paramNombreElemento", $strNombreElemento."%");
            }        

            if (!empty($intZona))
            {
                $strFrom .= ', schemaBundle:InfoDetalleElemento detalle ';

                $strEsAnd  = ' AND ';
                if ($boolEsWhere)
                {
                    $boolEsWhere = false;
                    $strEsAnd  = ' WHERE ';
                }

                $strWhere .= $strEsAnd."infoE.id = detalle.elementoId "
                              ." AND detalle.detalleNombre = :detalleNombre "
                              ." AND detalle.detalleValor  = :detalleValor "
                              ." AND detalle.estado = :detalleEstado ";

                $objQuery->setParameter("detalleNombre", 'ZONA');
                $objQuery->setParameter("detalleValor", $intZona);
                $objQuery->setParameter("detalleEstado", 'Activo');

                $objQueryCount->setParameter("detalleNombre", 'ZONA');
                $objQueryCount->setParameter("detalleValor", $intZona);
                $objQueryCount->setParameter("detalleEstado", 'Activo');
            }

            $strSql = $strSql . $strFrom . $strWhere;

            $objQuery->setDQL($strSql);

            if( $intStart != "" && $intLimit != "" )
            {
                $arrayRegistros = $objQuery->setFirstResult($intStart)->setMaxResults($intLimit)->getResult();
            }

            $strSql = $strSqlCount . $strFrom . $strWhere;
            $objQueryCount->setDQL($strSql);

            $intTotal = $objQueryCount->getSingleScalarResult();   

            $arrayRespuesta["arrayRegistros"] = $arrayRegistros;
            $arrayRespuesta["intTotal"]       = $intTotal;
        }
        catch(\Exception $objEx)
        {
            error_log('Error: InfoElementoRepository.getElementos -> '.$objEx->getMessage());
        }
        return $arrayRespuesta;
    }
    
    /*
    *
    * getElemVisInfSubRed
    * Obtiene los Elementos de un Pe
    *
    * @param array $arrayParametros[ strEstadoElemento => estado del elemento,
    *                                strNombreElemento => nombre del elemento,
    *                                strModeloElemento => modelo del elemento    *                               
    *
    * @return array $arrayRespuesta
    *
    * @author Jonathan Montece <jmontece@telconet.ec>
    * @version 1.0 11-08-2021
	*/
    public function getElemVisInfSubRed($arrayParametros)
    {
        $arrayResultado    = array();
        $strWhere          = "";       
        $strSql            = "";
        
        $strLike = $arrayParametros['strLike'];
        $strLikeRo = $arrayParametros['strLikeRo'];
        $strTipoElemento    = $arrayParametros["strTipoElemento"];


       
        $boolEsWhere       = true;

        try
        {
           
            $objRsm            = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery       = $this->_em->createNativeQuery(null, $objRsm);

            $strSqlCount = " SELECT count(ie.id_elemento) AS TOTAL ";
            $strSql      = " SELECT ie.id_elemento, ie.nombre_elemento, ie.estado ";
            $strFrom     = " FROM 
                                db_infraestructura.info_elemento ie,
                                db_infraestructura.admi_modelo_elemento ame,
                                db_infraestructura.admi_tipo_elemento ate 
                                WHERE ie.modelo_elemento_id = ame.id_modelo_elemento
                                AND ame.tipo_elemento_id = ate.id_tipo_elemento
                                AND ate.nombre_tipo_elemento = :strTipoElemento
                                AND ie.estado = :estado
                                AND  ";
                                $objNtvQuery->setParameter("estado",'Activo' );
            if(isset($strLike) && !empty($strLike))
            {
                $strFrom.= " (ie.nombre_elemento LIKE :nombrePe ";
                $objNtvQuery->setParameter("nombrePe",$strLike );
            }
            if(isset($strLikeRo) && !empty($strLikeRo))
            {
                $strFrom.= " OR ie.nombre_elemento LIKE :nombreRo ) ";
                $objNtvQuery->setParameter("nombreRo",$strLikeRo );
            }
             //Parametro para una búsqueda solamente por ROUTER
            $objNtvQuery->setParameter("strTipoElemento", $strTipoElemento);

           
                  
            $objRsm->addScalarResult('ID_ELEMENTO', 'id_elemento', 'integer');
            $objRsm->addScalarResult('NOMBRE_ELEMENTO', 'nombre_elemento', 'string');            
            $objRsm->addScalarResult('ESTADO', 'estado', 'string');
            $objRsm->addScalarResult('TOTAL', 'total', 'integer');

            $strQuery = $strSql . $strFrom;
            $strQueryCount = $strSqlCount . $strFrom;

            $objNtvQuery->setSQL($strQuery);            
            $arrayResultado = $objNtvQuery->getResult();

            $objNtvQuery->setSQL($strQueryCount);
            $intTotal       = $objNtvQuery->getSingleScalarResult();

           
            $strJsonResponse   =  json_encode(array('total'   => $intTotal, 'encontrados' => $arrayResultado));
        }
        catch(\Exception $objEx)
        {
            error_log('Error: InfoElementoRepository.getElementosVistaInfoSubRed -> '.$objEx->getMessage());
        }
        return $strJsonResponse;
    }

    /*
    * getUsoSubred
    * Obtiene el uso de Subred
    *
    * @author Jonathan Montecé <jmontece@telconet.ec>
    * @version 1.0 13-09-2021
	*/
     public function getUsoSubred($arrayParametros)
    {
        $arrayResultado    = array();
        $strWhere          = "";       
        $strSql            = "";
    
        $strEstadoUso = $arrayParametros['strEstadoUso'];
        $strNombreUso = $arrayParametros['strNombreUso'];
       
        $boolEsWhere       = true;

        try
        {
           
            $objRsm            = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery       = $this->_em->createNativeQuery(null, $objRsm);

            $strSqlCount = " SELECT count(AdmiParamDet.id_parametro_det) AS TOTAL ";
            $strSql      = " SELECT AdmiParamDet.id_parametro_det, AdmiParamDet.descripcion, AdmiParamDet.estado ";
            $strFrom     = " FROM DB_INFRAESTRUCTURA.admi_parametro_det AdmiParamDet ";

            if ($strEstadoUso != 'Todos')
            {
                $boolEsWhere = false;
                $strWhere  = 'WHERE AdmiParamDet.estado = :paramEstado ';
                $objNtvQuery->setParameter("paramEstado", $strEstadoUso);
               
            }


            if(!empty($strNombreUso))
            {
                $strEsAnd  = ' AND ';
                if ($boolEsWhere)
                {
                    $boolEsWhere = false;
                    $strEsAnd  = ' WHERE ';
                }

                $strWhere .= $strEsAnd."AdmiParamDet.descripcion LIKE :paramNombreElemento";
                $objNtvQuery->setParameter("paramNombreElemento", $strNombreUso."%");
                
            }        
            $objRsm->addScalarResult('ID_PARAMETRO_DET', 'id_parametro_det', 'integer');
            $objRsm->addScalarResult('DESCRIPCION', 'descripcion', 'string');            
            $objRsm->addScalarResult('ESTADO', 'estado', 'string');
            $objRsm->addScalarResult('TOTAL', 'total', 'integer');

            $strQuery = $strSql . $strFrom . $strWhere;
            $strQueryCount = $strSqlCount . $strFrom . $strWhere;

            $objNtvQuery->setSQL($strQuery);            
            $arrayResultado = $objNtvQuery->getResult();

            $objNtvQuery->setSQL($strQueryCount);
            $intTotal       = $objNtvQuery->getSingleScalarResult();

           
            $strJsonResponse   =  json_encode(array('total'   => $intTotal, 'encontrados' => $arrayResultado));
        }
        catch(\Exception $objEx)
        {
            error_log('Error: InfoElementoRepository.getUsoSubred -> '.$objEx->getMessage());
        }
        return $strJsonResponse;
    }

     

    /*
    * Costo: 3
    *
    * getZonaPorElemento
    * Obtiene los Elementos
    *
    * @param array $arrayParametros[ strIdElemento => id del elemento ],
    *
    * @return array $arrayZona
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 18-04-2018
	*/
    public function getZonaPorElemento($arrayParametros)
    {
        $objQuery          = $this->_em->createQuery();
        $strDetalleNombre  = "ZONA";
        $strEstadoDetalle  = "Activo";
        $arrayZona         = array();

        if(!empty($arrayParametros["strIdElemento"]))
        {
            $strSql = " SELECT admiZona.nombreZona FROM schemaBundle:AdmiZona admiZona WHERE admiZona.id = (
                                    SELECT infoDeta2.detalleValor FROM 
                                    schemaBundle:InfoDetalleElemento infoDeta2
                                    WHERE infoDeta2.id = (
                                    SELECT MAX(infoDeta.id) FROM 
                                    schemaBundle:InfoDetalleElemento infoDeta
                                    WHERE infoDeta.elementoId = :paramIdDetalle
                                    AND infoDeta.estado = :paramEstadoDetalle
                                    AND infoDeta.detalleNombre = :paramDetalleNombre )) ";

            $objQuery->setParameter("paramIdDetalle", $arrayParametros["strIdElemento"]);
            $objQuery->setParameter("paramEstadoDetalle", $strEstadoDetalle);
            $objQuery->setParameter("paramDetalleNombre", $strDetalleNombre);
        
            $objQuery->setDQL($strSql);

            $arrayZona = $objQuery->getResult();   

            return $arrayZona[0];            
        }
    }    
    
    
    
    /**
     * getJSONCamarasPortal
     * 
     * Obtiene la información de las cámaras de los servicios de los clientes
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 07-06-2017
     * 
     * @param  array $arrayParametros[  
     *                                  'idPer'         => id del cliente
     *                                  'idServidor'    => id parametro det donde se encuentra registrado el servidor en el que almacenará
     *                                                     las cámaras
     *                                  'estadoServ'    => estado del servicio
     *                                  'estadosServ'   => array con estado del servicio
     *                                  'idPunto'       => id del punto
     *                               ]
     * 
     * @return return json $strJsonData
     */
    public function getJSONCamarasPortal($arrayParametros)
    {  
        $arrayRespuesta             = $this->getResultadoCamarasPortal($arrayParametros);
        $arrayResultado             = $arrayRespuesta['resultInfo'];
        $intTotal                   = $arrayRespuesta['total'];
        
        $strJsonData = json_encode(array('intTotal'   => $intTotal, 'arrayResultado' => $arrayResultado));
        return $strJsonData;
    }
    
    
    /**
     * getCalculoHorasCamaras
     * 
     * Obtiene las horas de grabación de las cámaras de los servicios de los clientes
     * Costo = 586
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 16-06-2017
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 18-07-2017 Se agrega la información del puerto para el DDNS de la cámara
     * 
     * @param  array $arrayParametros[  
     *                                  'idPer'         => id del cliente
     *                                  'idServidor'    => id parametro det donde se encuentra registrado el servidor en el que almacenará
     *                                                     las cámaras
     *                                  'estadoServ'    => estado del servicio
     *                                  'estadosServ'   => array con estado del servicio
     *                                  'idPunto'       => id del punto
     *                               ]
     * 
     * @return array $arrayRespuesta['intTotal', 'resultInfo']
     */
    public function getCalculoHorasCamaras($arrayParametros)
    {
        $arrayRespuesta['total']        = 0;
        $arrayRespuesta['resultInfo']   = array();
        try
        {
            $objRsm             = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery        = $this->_em->createNativeQuery(null, $objRsm);
            
            
            $strSelect          = " SELECT IPUNTO.PERSONA_EMPRESA_ROL_ID AS ID_PERSONA_EMPRESA_ROL, IPUNTO.ID_PUNTO, 
                                    ISERV.ID_SERVICIO, ISERV.ESTADO AS ESTADO_SERVICIO, 
                                    IE.ID_ELEMENTO, IDENOMBRECAM.DETALLE_VALOR AS NOMBRE_CAM,
                                    IDEESTADOGRAB.DETALLE_VALOR AS ESTADO_GRAB_CAM, 
                                    CONCAT( DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleElementoDDNS,
                                                                                                           IE.ID_ELEMENTO,
                                                                                                           :strEstadoActivo),
                                            CONCAT(':', DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetallePuertoDDNS,
                                                                                                                       IE.ID_ELEMENTO,
                                                                                                                       :strEstadoActivo)) 
                                    ) AS DDNS_CAM, 
                                    INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleElemUserAdmin,IE.ID_ELEMENTO,:strEstadoActivo) 
                                      AS USER_ADMIN,
                                    INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleElemPassAdmin,IE.ID_ELEMENTO,:strEstadoActivo)
                                      AS PASS_ADMIN,
                                    APDSERVIDOR.DESCRIPCION AS SERVIDOR,
                                    NVL(SUM(T_SERV_ELEM_HRS.HORAS),0) AS HORAS_TOTAL ";
            
            $strSelectCount     = " SELECT COUNT(DISTINCT ISERV.ID_SERVICIO) AS TOTAL ";
            
            $strFromUnionAll    = " SELECT ISERVTEC_STORAGEPLAN.SERVICIO_ID AS ID_SERVICIO, ISPC_STORAGEPLAN.VALOR AS HORAS 
                                    FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISPC_STORAGEPLAN
                                    INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO ISERVTEC_STORAGEPLAN
                                    ON ISERVTEC_STORAGEPLAN.SERVICIO_ID = ISPC_STORAGEPLAN.SERVICIO_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO IE_STORAGEPLAN
                                    ON ISERVTEC_STORAGEPLAN.ELEMENTO_CLIENTE_ID = IE_STORAGEPLAN.ID_ELEMENTO
                                    INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC_STORAGEPLAN
                                    ON APC_STORAGEPLAN.ID_PRODUCTO_CARACTERISITICA = ISPC_STORAGEPLAN.PRODUCTO_CARACTERISITICA_ID
                                    INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA AC_STORAGEPLAN
                                    ON AC_STORAGEPLAN.ID_CARACTERISTICA             = APC_STORAGEPLAN.CARACTERISTICA_ID
                                    WHERE AC_STORAGEPLAN.DESCRIPCION_CARACTERISTICA = :strCaractHoras
                                    AND ISPC_STORAGEPLAN.ESTADO                     = :strEstadoActivo
                                    UNION ALL
                                    SELECT ISERVCAM.ID_SERVICIO AS ID_SERVICIO, ISPC_HORS_STORAGE.VALOR AS HORAS
                                    FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISPC_REFSERV
                                    INNER JOIN DB_COMERCIAL.INFO_SERVICIO ISERVADIC
                                    ON ISERVADIC.ID_SERVICIO = ISPC_REFSERV.SERVICIO_ID
                                    INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC_REFSERV
                                    ON APC_REFSERV.ID_PRODUCTO_CARACTERISITICA = ISPC_REFSERV.PRODUCTO_CARACTERISITICA_ID
                                    INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA AC_REFSERV
                                    ON AC_REFSERV.ID_CARACTERISTICA = APC_REFSERV.CARACTERISTICA_ID
                                    INNER JOIN DB_COMERCIAL.INFO_SERVICIO ISERVCAM
                                    ON ISERVCAM.ID_SERVICIO = ISPC_REFSERV.VALOR
                                    INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO ISERVTECCAM
                                    ON ISERVTECCAM.SERVICIO_ID = ISERVCAM.ID_SERVICIO
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO IECAM
                                    ON IECAM.ID_ELEMENTO = ISERVTECCAM.ELEMENTO_CLIENTE_ID
                                    INNER JOIN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISPC_HORS_STORAGE
                                    ON ISPC_HORS_STORAGE.SERVICIO_ID = ISPC_REFSERV.SERVICIO_ID
                                    INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC_HORS_STORAGE
                                    ON APC_HORS_STORAGE.ID_PRODUCTO_CARACTERISITICA = ISPC_HORS_STORAGE.PRODUCTO_CARACTERISITICA_ID
                                    INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA AC_HORS_STORAGE
                                    ON AC_HORS_STORAGE.ID_CARACTERISTICA             = APC_HORS_STORAGE.CARACTERISTICA_ID
                                    WHERE AC_HORS_STORAGE.DESCRIPCION_CARACTERISTICA = :strCaractHoras
                                    AND AC_REFSERV.DESCRIPCION_CARACTERISTICA        = :strCaractRefServId
                                    AND ISPC_REFSERV.ESTADO                          = :strEstadoActivo
                                    AND ISPC_HORS_STORAGE.ESTADO                     = :strEstadoActivo ";
            
            
            $strWhere           = " WHERE ATE.NOMBRE_TIPO_ELEMENTO            = :strNombreTipoElemento
                                    AND IDENOMBRECAM.DETALLE_NOMBRE           = :strDetalleElementoNombre
                                    AND IDENOMBRECAM.ESTADO                   = :strEstadoActivo
                                    AND IDEESTADOGRAB.DETALLE_NOMBRE          = :strDetalleEstadoGrab
                                    AND IDEESTADOGRAB.ESTADO                  = :strEstadoActivo
                                    AND ACSERVIDOR.DESCRIPCION_CARACTERISTICA = :strDescCaractServidor
                                    AND ISPCSERVIDOR.ESTADO                   = :strEstadoActivo
                                    AND APDSERVIDOR.ESTADO                    = :strEstadoActivo ";
            
            $strGroupBy         = " GROUP BY IPUNTO.PERSONA_EMPRESA_ROL_ID, IPUNTO.ID_PUNTO, ISERV.ID_SERVICIO, ISERV.ESTADO,
                                    IE.ID_ELEMENTO, IDENOMBRECAM.DETALLE_VALOR, IDEESTADOGRAB.DETALLE_VALOR,
                                    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleElementoDDNS,
                                                                                                   IE.ID_ELEMENTO,
                                                                                                   :strEstadoActivo),
                                    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetallePuertoDDNS,
                                                                                                   IE.ID_ELEMENTO,
                                                                                                   :strEstadoActivo),
                                    INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleElemUserAdmin,IE.ID_ELEMENTO,:strEstadoActivo),
                                    INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleElemPassAdmin,IE.ID_ELEMENTO,:strEstadoActivo),
                                    APDSERVIDOR.DESCRIPCION ";
            
            
            $objNtvQuery->setParameter('strNombreTipoElemento', 'CAMARA');
            $objNtvQuery->setParameter('strDetalleElementoDDNS', 'DDNS_CAMARA');
            $objNtvQuery->setParameter('strDetallePuertoDDNS', 'PUERTO_DDNS_CAMARA');
            $objNtvQuery->setParameter('strDetalleElementoNombre', 'NOMBRE_CAMARA');
            $objNtvQuery->setParameter('strDetalleEstadoGrab', 'ESTADO_GRABACION_CAMARA');
            $objNtvQuery->setParameter('strCaractHoras', 'HORAS_STORAGE_CAM');
            $objNtvQuery->setParameter('strCaractRefServId', 'REF_SERVICIO_ID');
            $objNtvQuery->setParameter('strDetalleElemUserAdmin', 'USER_ADMIN_CAMARA');
            $objNtvQuery->setParameter('strDetalleElemPassAdmin', 'PASS_ADMIN_CAMARA');
            $objNtvQuery->setParameter('strDescCaractServidor', 'SERVIDOR_VIDEOS_CLIENTE');
            $objNtvQuery->setParameter('strEstadoActivo', 'Activo');
            
            
            if(isset($arrayParametros['idPer']) && !empty($arrayParametros['idPer']))
            {
                $strWhere .= "AND IPUNTO.PERSONA_EMPRESA_ROL_ID = :intIdPersonaEmpresaRol ";
                $objNtvQuery->setParameter('intIdPersonaEmpresaRol', $arrayParametros['idPer']);
            }
            
            if(isset($arrayParametros['idPunto']) && !empty($arrayParametros['idPunto']))
            {
                $strWhere .= "AND IPUNTO.ID_PUNTO = :intIdPunto ";
                $objNtvQuery->setParameter('intIdPunto', $arrayParametros['idPunto']);
            }
            
            if(isset($arrayParametros['idServidor']) && !empty($arrayParametros['idServidor']))
            {
                $strWhere .= "AND APDSERVIDOR.ID_PARAMETRO_DET = :intIdParamServidor ";
                $objNtvQuery->setParameter('intIdParamServidor', $arrayParametros['idServidor']);
            }
            
            if(isset($arrayParametros['estadosGrab']) && !empty($arrayParametros['estadosGrab']))
            {
                $strWhere .= "AND IDEESTADOGRAB.DETALLE_VALOR IN (:arrayEstadosGrabacion) ";
                $objNtvQuery->setParameter('arrayEstadosGrabacion', array_values($arrayParametros['estadosGrab']));
            }
            
            if(isset($arrayParametros['estadoGrab']) && !empty($arrayParametros['estadoGrab']))
            {
                $strWhere .= "AND IDEESTADOGRAB.DETALLE_VALOR = :strEstadoGrabacion) ";
                $objNtvQuery->setParameter('strEstadoGrabacion', $arrayParametros['estadoGrab']);
            }
            
            if(isset($arrayParametros['descripServidor']) && !empty($arrayParametros['descripServidor']))
            {
                $strWhere .= "AND APDSERVIDOR.DESCRIPCION = :descripServidor ";
                $objNtvQuery->setParameter('descripServidor', $arrayParametros['descripServidor']);
            }
            
            if(isset($arrayParametros['idElem']) && !empty($arrayParametros['idElem']))
            {
                $strWhere .= "AND IE.ID_ELEMENTO = :intIdElemento ";
                $objNtvQuery->setParameter('intIdElemento', $arrayParametros['idElem']);
            }
            
            if(isset($arrayParametros['estadosServ']) && !empty($arrayParametros['estadosServ']))
            {
                $strFromUnionAll    .= "AND ISERVADIC.ESTADO IN (:arrayEstadosServicios) ";
                $strWhere           .= "AND ISERV.ESTADO IN (:arrayEstadosServicios) ";
                $objNtvQuery->setParameter('arrayEstadosServicios', array_values($arrayParametros['estadosServ']));
            }
            
            if(isset($arrayParametros['estadoServ']) && !empty($arrayParametros['estadoServ']))
            {
                $strFromUnionAll    .= "AND ISERVADIC.ESTADO = :strEstadoServicio ";
                $strWhere           .= "AND ISERV.ESTADO = :strEstadoServicio ";
                $objNtvQuery->setParameter('strEstadoServicio', $arrayParametros['estadoServ']);
            }
            
            $strFrom            =  "FROM (".$strFromUnionAll.") T_SERV_ELEM_HRS 
                                    INNER JOIN DB_COMERCIAL.INFO_SERVICIO ISERV
                                    ON ISERV.ID_SERVICIO = T_SERV_ELEM_HRS.ID_SERVICIO
                                    INNER JOIN DB_COMERCIAL.INFO_PUNTO IPUNTO
                                    ON IPUNTO.ID_PUNTO = ISERV.PUNTO_ID
                                    INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO ISERVTEC
                                    ON ISERVTEC.SERVICIO_ID = ISERV.ID_SERVICIO
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO IE
                                    ON IE.ID_ELEMENTO = ISERVTEC.ELEMENTO_CLIENTE_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AME
                                    ON AME.ID_MODELO_ELEMENTO = IE.MODELO_ELEMENTO_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ATE
                                    ON ATE.ID_TIPO_ELEMENTO = AME.TIPO_ELEMENTO_ID 
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDENOMBRECAM
                                    ON IDENOMBRECAM.ELEMENTO_ID = IE.ID_ELEMENTO
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDEESTADOGRAB
                                    ON IDEESTADOGRAB.ELEMENTO_ID = IE.ID_ELEMENTO
                                    INNER JOIN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISPCSERVIDOR
                                    ON ISPCSERVIDOR.SERVICIO_ID = ISERV.ID_SERVICIO
                                    INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APCSERVIDOR
                                    ON APCSERVIDOR.ID_PRODUCTO_CARACTERISITICA = ISPCSERVIDOR.PRODUCTO_CARACTERISITICA_ID
                                    INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA ACSERVIDOR
                                    ON ACSERVIDOR.ID_CARACTERISTICA = APCSERVIDOR.CARACTERISTICA_ID
                                    INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET APDSERVIDOR
                                    ON APDSERVIDOR.ID_PARAMETRO_DET           = COALESCE(TO_NUMBER(REGEXP_SUBSTR(ISPCSERVIDOR.VALOR,'^\d+')),0) ";

            $objRsm->addScalarResult('ID_PERSONA_EMPRESA_ROL', 'idPer', 'integer');
            $objRsm->addScalarResult('ID_PUNTO', 'idPunto', 'integer');
            $objRsm->addScalarResult('ID_SERVICIO', 'idServ', 'integer');
            $objRsm->addScalarResult('ID_ELEMENTO', 'idElem', 'integer');
            $objRsm->addScalarResult('NOMBRE_CAM', 'nombre', 'string');
            $objRsm->addScalarResult('DDNS_CAM', 'ddns', 'string');
            $objRsm->addScalarResult('USER_ADMIN', 'user', 'string');
            $objRsm->addScalarResult('PASS_ADMIN', 'pass', 'string');
            $objRsm->addScalarResult('ESTADO_GRAB_CAM', 'estadoGrab', 'string');
            $objRsm->addScalarResult('ESTADO_SERVICIO', 'estadoServicio', 'string');
            $objRsm->addScalarResult('SERVIDOR', 'servidor', 'string');
            $objRsm->addScalarResult('HORAS_TOTAL', 'hrs', 'string');
            
            $objRsm->addScalarResult('TOTAL', 'intTotal', 'integer');
            
            $strQuery       = $strSelect . $strFrom . $strWhere . $strGroupBy;

            $objNtvQuery->setSQL($strQuery);            
            $arrayResultado = $objNtvQuery->getResult();
            
            $strQueryCount  = $strSelectCount . $strFrom . $strWhere;
            $objNtvQuery->setSQL($strQueryCount);
            
            $intTotal       = $objNtvQuery->getSingleScalarResult();

            $arrayRespuesta['resultInfo']   = $arrayResultado;
            $arrayRespuesta['total']        = $intTotal;
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        return $arrayRespuesta;
    }
    
    
    /**
     * getJSONTabletsMonitoreo
     * 
     * Obtiene el json con las tablets que actualmente se encuentran registradas en el sistema con su respectiva información de monitoreo
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 Se agregan los filtros por región, ciudad y departamento del responsable de la tablet y se agrega como parámetro
     *                         la cantidad de minutos que será utilizada para la comparación de fechas y horas en el monitoreo de tablets
     * 
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.2 Se agrega filtro por SerieLogica.
     * 
     * @param  array $arrayParametros[  
     *                                  'strMinutosMonitoreo'           => número de minutos que será utilizado para la comparación en el monitoreo
     *                                                                     de tablets
     *                                  'intInicio'                     => inicio el rownum,
     *                                  'intLimite'                     => fin del rownum,
     *                                  'draw'                          => string del secuencial que se dispara cada vez que la tabla se vuelve a 
     *                                                                     dibujar en la página al utilizar datatables
     *                                  'strEstadoPrestadoCuadrilla'    => estado 'Prestado' de la cuadrilla
     *                                  'strEstadoEsPrestamoCuadrilla'  => estado 'Es_Prestamo' de la cuadrilla
     *                                  'strNombreTipoElemento'         => nombre del tipo elemento 'TABLET'
     *                                  'strDetalleResponsable'         => nombre del detalle que asocia una tablet con un empleado
     *                                  'strDetalleMotivo'              => nombre del detalle que asocia el motivo de inactividad de una tablet 
     *                                  'arrayValuesMotivos'            => array con los nombres de los motivos que deben ser considerados para 
     *                                                                     el listado de tablets en mantenimiento
     *                                  'arrayRegistrosEstadosMonitoreo'=> array con los estados del monitoreo
     *                                  'strTipoReporte'                => string con los diferentes tipos de reporte que existen: 
     *                                                                     'MANTENIMIENTO_LIBRE', 'EN_CAMPO', 'TODAS_EN_CAMPO',
     *                                  'strFiltrarEstadosMonitoreoMapa'=> 'SI' o 'NO' para filtrar los estados  que se visualizan en el mapa
     *                                  'arrayCriterios'                => array con los criterios de búsqueda
     *                                  [
     *                                      'strImeiTablet'             => imei de la tablet
     *                                      'strSerieLogica'              => serieLogica (valor único usado en versiones android10) 
     *                                      'strResponsableTablet'      => nombre del responsable de la tablet
     *                                      'strDepartamentoPer'        => nombre del departamento de la persona responsable de la tablet
     *                                      'strCuadrillaPer'           => nombre de la cuadrilla
     *                                  ]
     *                                  'arrayCriteriosBusquedaAvanzada'    => array con los campos de la búsqueda avanzada
     *                                  [
     *                                      'intIdDepartamentoCuadrillaBusqAvanzada'    => id del departamento al que está asignada una cuadrilla
     *                                      'intIdZonaCuadrillaBusqAvanzada'            => id de la zona a la que está asignada una cuadrilla
     *                                      'intIdModeloBusqAvanzada'                   => id del modelo de la tablet
     *                                      'strEstadoMonitoreoBusqAvanzada'            => estado del monitoreo de la tablet
     *                                      'strFiltrarMisCuadrillasBusqAvanzada'       => string 'SI' O 'NO' cuando se desea filtrar las cuadrillas
     *                                                                                     que están a cargo de la persona en sesión
     *                                      'strFiltrarPorHorarioBusqAvanzada'          => string 'SI' O 'NO' para filtrar las tablets que estén a
     *                                                                                     cargo de un empleado que pertenece a una cuadrilla que se
     *                                                                                     se encuentra en ese momento trabajando de acuerdo al
     *                                                                                     horario de cuadrilla
     *                                      'intIdPerSession'                           => id persona empresa rol del usuario en sesión,
     *                                      'strRegionPerBusqAvanzada'                  => región a la que pertenece el responsable de la tablet 
     *                                                                                     R1 o R2
     *                                      'intIdCantonPerBusqAvanzada'                => id del cantón del responsable de la tablet
     *                                      'intIdDepartamentoPerBusqAvanzada'          => id del departamento del responsable de la tablet
     * 
     *                                  ]
     *                               ]
     * 
     * @return json $strJsonData
     */
    public function getJSONTabletsMonitoreo($arrayParametros)
    {
        $arrayEncontrados            = array();
        $arrayRespuesta              = $this->getResultadoTabletsMonitoreo($arrayParametros);
        $arrayResultado              = $arrayRespuesta['resultado'];
        $intTotal                    = $arrayRespuesta['total'];
        $arrayColumnEstadosMonitoreo = array();
        if($arrayResultado)
        {
            if(isset($arrayParametros['arrayRegistrosEstadosMonitoreo']) && !empty($arrayParametros['arrayRegistrosEstadosMonitoreo']))
            {
                foreach ($arrayParametros['arrayRegistrosEstadosMonitoreo'] as $arrayRegistroEstado) 
                {
                    foreach($arrayRegistroEstado as $strKeyEstado => $strValueEstado)
                    {
                        if($strKeyEstado=='valor1')
                        {
                            $arrayColumnEstadosMonitoreo[] = $strValueEstado;
                        }
                    }
                }
            }

            foreach($arrayResultado as $arrayData)
            {
                $strEstadoMonitoreoTablet       = "";
                $strKeyEstadoMonitoreoTablet    = "";
                
                if(isset($arrayParametros['arrayRegistrosEstadosMonitoreo']) && !empty($arrayParametros['arrayRegistrosEstadosMonitoreo'])
                    && isset($arrayData['strEstadoMonitoreoTablet']) && !empty($arrayData['strEstadoMonitoreoTablet']))
                {
                    $strKeyEstadoMonitoreoTablet = array_search($arrayData['strEstadoMonitoreoTablet'], $arrayColumnEstadosMonitoreo);

                    if(isset($arrayParametros['arrayRegistrosEstadosMonitoreo'][$strKeyEstadoMonitoreoTablet]['valor2'])
                        && !empty($arrayParametros['arrayRegistrosEstadosMonitoreo'][$strKeyEstadoMonitoreoTablet]['valor2']))
                    {
                        $strEstadoMonitoreoTablet = $arrayParametros['arrayRegistrosEstadosMonitoreo'][$strKeyEstadoMonitoreoTablet]['valor2'];

                    }
                        
                }
                
                $arrayEncontrados[] = array(
                                            "intIdTablet"               => $arrayData['intIdTablet'],
                                            "strImeiTablet"             => $arrayData['strImeiTablet'],
                                            "strSerieLogicaTablet"      => $arrayData['strSerieLogicaTablet'],
                                            "strEstadoTablet"           => $arrayData['strEstadoTablet'],
                                            "strMotivoTablet"           => $arrayData['strMotivoTablet'],
                                            "intIdPersonaRol"           => $arrayData['intIdPersonaRol'],
                                            "intIdPersona"              => $arrayData['intIdPersona'],
                                            "strNombresResponsable"     => $arrayData['strNombresResponsable'],
                                            "strApellidosResponsable"   => $arrayData['strApellidosResponsable'],
                                            "strResponsable"            => $arrayData['strNombresResponsable'] 
                                                                           . " ".$arrayData['strApellidosResponsable'],
                                            "strNombreDepartamentoPer"  => $arrayData['strNombreDepartamentoPer'],
                                            "strNombreCuadrilla"        => $arrayData['strNombreCuadrilla'],
                                            "strTurnoHoraInicio"        => $arrayData['strTurnoHoraInicio'],
                                            "strTurnoHoraFin"           => $arrayData['strTurnoHoraFin'],
                                            "strNombreDepartamento"     => $arrayData['strNombreDepartamento'],
                                            "strNombreZona"             => $arrayData['strNombreZona'],
                                            "strFechaUltIntento"        => $arrayData['strFechaUltIntento'],
                                            "strFechaUltPunto"          => $arrayData['strFechaUltPunto'],
                                            "strLatitud"                => $arrayData['strLatitud'],
                                            "strLongitud"               => $arrayData['strLongitud'],
                                            "strEstadoMonitoreoTablet"  => $strEstadoMonitoreoTablet
                                      );
            }
        }
        
        
        $arrayRespuestaFinal    = array(
                                        'draw'                      => $arrayParametros['draw'],
                                        'recordsTotal'              => $intTotal, 
                                        'recordsFiltered'           => $intTotal,
                                        'data'                      => $arrayEncontrados,
                                        'intInicio'                 => $arrayParametros['intInicio'],
                                        'intLimite'                 => $arrayParametros['intLimite']
                                  );

        $strJsonData = json_encode($arrayRespuestaFinal);
        return $strJsonData;
    }
    
    /**
     * getResultadoTabletsMonitoreo
     * 
     * Obtiene las tablets que actualmente se encuentran registradas en el sistema con su respectiva información de monitoreo
     * 
     * Costo = 51
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 Se agregan los filtros por región, ciudad y departamento del responsable de la tablet. Además se agrega como parámetro
     *                         la cantidad de minutos que será utilizada para la comparación de fechas y horas en el monitoreo de tablets
     * 
     * @version 1.2 08-01-2017 Se agrega la consulta para obtener el integrante responsable de una tablet que pertenezca a una cuadrilla libre y
     *                         que por ende no deberá formar parte del monitoreo de tablets.
     *                         Costo Query $strQueryIntegrantesTabletCuadrillasLibres = 18 
     * 
     * @param  array $arrayParametros[
     *                                  'strMinutosMonitoreo'           => número de minutos que será utilizado para la comparación en el monitoreo
     *                                                                     de tablets
     *                                  'intInicio'                     => inicio el rownum,
     *                                  'intLimite'                     => fin del rownum,
     *                                  'draw'                          => string del secuencial que se dispara cada vez que la tabla se vuelve a 
     *                                                                     dibujar en la página al utilizar datatables
     *                                  'strEstadoPrestadoCuadrilla'    => estado 'Prestado' de la cuadrilla
     *                                  'strEstadoEsPrestamoCuadrilla'  => estado 'Es_Prestamo' de la cuadrilla
     *                                  'strNombreTipoElemento'         => nombre del tipo elemento 'TABLET'
     *                                  'strDetalleResponsable'         => nombre del detalle que asocia una tablet con un empleado
     *                                  'strDetalleMotivo'              => nombre del detalle que asocia el motivo de inactividad de una tablet 
     *                                  'arrayValuesMotivos'            => array con los nombres de los motivos que deben ser considerados para 
     *                                                                     el listado de tablets en mantenimiento
     *                                  'arrayRegistrosEstadosMonitoreo'=> array con los estados del monitoreo
     *                                  'strTipoReporte'                => string con los diferentes tipos de reporte que existen: 
     *                                                                     'MANTENIMIENTO_LIBRE', 'EN_CAMPO', 'TODAS_EN_CAMPO'
     *                                  'arrayCriterios'                => array con los criterios de búsqueda
     *                                  [
     *                                      'strImeiTablet'             => imei de la tablet
     *                                      'strResponsableTablet'      => nombre del responsable de la tablet
     *                                      'strDepartamentoPer'        => nombre del departamento de la persona responsable de la tablet
     *                                      'strCuadrillaPer'           => nombre de la cuadrilla
     *                                  ]
     *                                  'arrayCriteriosBusquedaAvanzada'    => array con los campos de la búsqueda avanzada
     *                                  [
     *                                      'intIdDepartamentoCuadrillaBusqAvanzada'    => id del departamento al que está asignada una cuadrilla
     *                                      'intIdZonaCuadrillaBusqAvanzada'            => id de la zona a la que está asignada una cuadrilla
     *                                      'intIdModeloBusqAvanzada'                   => id del modelo de la tablet
     *                                      'strEstadoMonitoreoBusqAvanzada'            => estado del monitoreo de la tablet
     *                                      'strFiltrarMisCuadrillasBusqAvanzada'       => string 'SI' O 'NO' cuando se desea filtrar las cuadrillas
     *                                                                                     que están a cargo de la persona en sesión
     *                                      'strFiltrarPorHorarioBusqAvanzada'          => string 'SI' O 'NO' para filtrar las tablets que estén a
     *                                                                                     cargo de un empleado que pertenece a una cuadrilla que se
     *                                                                                     se encuentra en ese momento trabajando de acuerdo al
     *                                                                                     horario de cuadrilla
     *                                      'intIdPerSession'                           => id persona empresa rol del usuario en sesión
     *                                      'strRegionPerBusqAvanzada'                  => región a la que pertenece el responsable de la tablet 
     *                                                                                     R1 o R2
     *                                      'intIdCantonPerBusqAvanzada'                => id del cantón del responsable de la tablet
     *                                      'intIdDepartamentoPerBusqAvanzada'          => id del departamento del responsable de la tablet
     *                                  ]
     *                               ]
     * 
     * @return json $arrayRespuesta
     */
    public function getResultadoTabletsMonitoreo($arrayParametros)
    {
        $arrayRespuesta['total']        = 0;
        $arrayRespuesta['resultado']    = array();
        try
        {

            $rsm                = new ResultSetMappingBuilder($this->_em);
            $rsmCount           = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery        = $this->_em->createNativeQuery(null, $rsm);
            $objNtvQueryCount   = $this->_em->createNativeQuery(null, $rsmCount);
            
            /*
             * Se obtienen los integrantes de cuadrillas libres que son responsables de tablets
             */
            $strQueryIntegrantesTabletCuadrillasLibres  = " SELECT DISTINCT IPERL.ID_PERSONA_ROL
                                                            FROM DB_COMERCIAL.ADMI_CUADRILLA ACL
                                                            INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPERL
                                                            ON IPERL.CUADRILLA_ID             = ACL.ID_CUADRILLA 
                                                            INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE
                                                            ON IDE.DETALLE_VALOR = IPERL.ID_PERSONA_ROL
                                                            WHERE ACL.ESTA_LIBRE              = :strCuadrillaEstaLibre
                                                            AND ( ACL.ESTADO                  = :strEstadoActivo 
                                                            OR (ACL.ESTADO                    = :strEstadoPrestadoCuadrilla 
                                                            AND ACL.COORDINADOR_PRINCIPAL_ID IS NOT NULL)
                                                            OR (ACL.ESTADO                    = :strEstadoPrestadoCuadrilla 
                                                            AND ACL.COORDINADOR_PRESTADO_ID  IS NOT NULL) )
                                                            AND IPERL.ESTADO                  = :strEstadoActivo  
                                                            AND IDE.DETALLE_NOMBRE = :strDetalleResponsable 
                                                            AND IDE.ESTADO = :strEstadoActivo ";

            /*
             * Se realiza la respectiva relación para obtener la cuadrilla si es que estuviera asociado a una y la relación con el monitoreo 
             */
            $strSelectCount   = " SELECT COUNT(IE.ID_ELEMENTO) AS TOTAL ";
            $strSelectGeneral = " SELECT 
                                    IE.ID_ELEMENTO,
                                    IE.NOMBRE_ELEMENTO,
                                    IE.SERIE_LOGICA,
                                    IE.ESTADO AS ESTADO_ELEMENTO,
                                    IPER.ID_PERSONA_ROL,
                                    IPERS.ID_PERSONA,
                                    IPERS.NOMBRES,
                                    IPERS.APELLIDOS,
                                    AD.NOMBRE_DEPARTAMENTO AS NOMBRE_DEPARTAMENTO_PER,
                                    NVL(AC.NOMBRE_CUADRILLA, 'N/A') AS NOMBRE_CUADRILLA 
                                ";

            $strFromJoinGeneral = "FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO IE 
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AME 
                                    ON AME.ID_MODELO_ELEMENTO = IE.MODELO_ELEMENTO_ID 
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ATE
                                    ON ATE.ID_TIPO_ELEMENTO = AME.TIPO_ELEMENTO_ID 
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDER
                                    ON IDER.ELEMENTO_ID = IE.ID_ELEMENTO 
                                    INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER 
                                    ON IDER.DETALLE_VALOR = IPER.ID_PERSONA_ROL 
                                    INNER JOIN DB_COMERCIAL.INFO_PERSONA IPERS
                                    ON IPERS.ID_PERSONA = IPER.PERSONA_ID 
                                    INNER JOIN DB_GENERAL.ADMI_DEPARTAMENTO AD
                                    ON AD.ID_DEPARTAMENTO = IPER.DEPARTAMENTO_ID 
                                    INNER JOIN DB_COMERCIAL.INFO_OFICINA_GRUPO IOG
                                    ON IOG.ID_OFICINA = IPER.OFICINA_ID 
                                    INNER JOIN DB_GENERAL.ADMI_CANTON ACANT
                                    ON ACANT.ID_CANTON = IOG.CANTON_ID 
                                    LEFT JOIN 
                                        (SELECT *
                                        FROM
                                          (SELECT ACU.* 
                                          FROM DB_COMERCIAL.ADMI_CUADRILLA ACU  
                                          WHERE ACU.ZONA_ID IS NOT NULL 
                                          AND ACU.DEPARTAMENTO_ID IS NOT NULL
                                          AND ( ACU.ESTADO                  = :strEstadoActivo 
                                                OR (ACU.ESTADO              = :strEstadoPrestadoCuadrilla 
                                                    AND ACU.COORDINADOR_PRINCIPAL_ID IS NOT NULL) 
                                                OR (ACU.ESTADO              = :strEstadoPrestadoCuadrilla 
                                                    AND ACU.COORDINADOR_PRESTADO_ID  IS NOT NULL)
                                              )
                                          )
                                        ) AC 
                                        ON IPER.CUADRILLA_ID = AC.ID_CUADRILLA ";
            $strSelectAdicional   = "";
            $strJoinAdicional     = "";
            
            $strWhereGeneral      = " WHERE IDER.DETALLE_NOMBRE = :strDetalleResponsable 
                                        AND ATE.NOMBRE_TIPO_ELEMENTO = :strNombreTipoElemento 
                                        AND IDER.ESTADO = :strEstadoActivo 
                                        AND IPER.ESTADO = :strEstadoActivo  ";
            
            $strWhereAdicional    = "";
            
            $strOrderByGeneral    = " ORDER BY APELLIDOS, NOMBRES, NOMBRE_ELEMENTO ";
            
            $objNtvQuery->setParameter('strDetalleResponsable', $arrayParametros['strDetalleResponsable']);
            $objNtvQueryCount->setParameter('strDetalleResponsable', $arrayParametros['strDetalleResponsable']);
            
            $objNtvQuery->setParameter('strEstadoActivo', $arrayParametros['strEstadoActivo']);
            $objNtvQueryCount->setParameter('strEstadoActivo', $arrayParametros['strEstadoActivo']);
            
            $objNtvQuery->setParameter('strNombreTipoElemento', $arrayParametros['strNombreTipoElemento']);
            $objNtvQueryCount->setParameter('strNombreTipoElemento', $arrayParametros['strNombreTipoElemento']);
            
            $objNtvQuery->setParameter('strEstadoPrestadoCuadrilla', $arrayParametros['strEstadoPrestadoCuadrilla']);
            $objNtvQueryCount->setParameter('strEstadoPrestadoCuadrilla', $arrayParametros['strEstadoPrestadoCuadrilla']);
            
            
            $rsm->addScalarResult('ID_ELEMENTO', 'intIdTablet', 'integer');
            $rsm->addScalarResult('NOMBRE_ELEMENTO', 'strImeiTablet', 'string');
            $rsm->addScalarResult('SERIE_LOGICA', 'strSerieLogicaTablet', 'string');
            $rsm->addScalarResult('ESTADO_ELEMENTO', 'strEstadoTablet', 'string');
            $rsm->addScalarResult('ID_PERSONA_ROL', 'intIdPersonaRol', 'integer');
            $rsm->addScalarResult('ID_PERSONA', 'intIdPersona', 'integer');
            $rsm->addScalarResult('NOMBRES', 'strNombresResponsable', 'string');
            $rsm->addScalarResult('APELLIDOS', 'strApellidosResponsable', 'string');
            $rsm->addScalarResult('NOMBRE_DEPARTAMENTO_PER', 'strNombreDepartamentoPer', 'string');
            $rsm->addScalarResult('NOMBRE_CUADRILLA', 'strNombreCuadrilla', 'string');
            
            $rsmCount->addScalarResult('TOTAL', 'total', 'integer');
            
            if(isset($arrayParametros['strTipoReporte']) && !empty($arrayParametros['strTipoReporte']))
            {
                /*
                 * Tablets que deben ser monitoreadas
                 * Cuando el reporte es de tipo 'EN_CAMPO' se obtendrán todas las tablets monitoreadas de acuerdo al inicio y límite enviado
                 * mientras que cuando es 'TODAS_EN_CAMPO' se obtendrán todas las tablets que deben ser mostradas en el mapa
                 */
                if($arrayParametros['strTipoReporte']=="EN_CAMPO" || $arrayParametros['strTipoReporte']=="TODAS_EN_CAMPO")
                {
                    
                    $rsm->addScalarResult('TURNO_HORA_INICIO', 'strTurnoHoraInicio', 'string');
                    $rsm->addScalarResult('TURNO_HORA_FIN', 'strTurnoHoraFin', 'string');
                    $rsm->addScalarResult('NOMBRE_DEPARTAMENTO', 'strNombreDepartamento', 'string');
                    $rsm->addScalarResult('NOMBRE_ZONA', 'strNombreZona', 'string');
                    $rsm->addScalarResult('FECHA_ULT_INTENTO', 'strFechaUltIntento', 'string');
                    $rsm->addScalarResult('FECHA', 'strFechaUltPunto', 'string');
                    $rsm->addScalarResult('LATITUD', 'strLatitud', 'string');
                    $rsm->addScalarResult('LONGITUD', 'strLongitud', 'string');
                    $rsm->addScalarResult('ESTADO_MONITOREO', 'strEstadoMonitoreoTablet', 'string');
                    
                    $strSelectAdicional .= ", NVL(ADC.NOMBRE_DEPARTAMENTO,'N/A') AS NOMBRE_DEPARTAMENTO,
                                            NVL(AZ.NOMBRE_ZONA, 'N/A')  AS NOMBRE_ZONA,
                                            NVL(AC.TURNO_HORA_INICIO, 'N/A') AS TURNO_HORA_INICIO,
                                            NVL(AC.TURNO_HORA_FIN, 'N/A') AS TURNO_HORA_FIN,
                                            GUP.FECHA_ULT_INTENTO,
                                            GUP.FECHA,
                                            GUP.LATITUD,
                                            GUP.LONGITUD,
                                            (
                                            CASE
                                              WHEN GUP.ID_ULTIMO_PUNTO IS NULL
                                              THEN 'SIN INFORMACION'
                                              ELSE
                                                CASE
                                                  WHEN ROUND((CAST(CURRENT_TIMESTAMP AS DATE) - CAST(GUP.FECHA_ULT_INTENTO AS DATE)) * 24 * 60 ) 
                                                       <= :strMinutosMonitoreo
                                                  THEN
                                                    CASE
                                                      WHEN ROUND((CAST(GUP.FECHA_ULT_INTENTO AS DATE) - CAST(GUP.FECHA AS DATE)) * 24 * 60 ) = 0
                                                      THEN 'CON UBICACION ACTUALIZADA'
                                                      ELSE 'SIN UBICACION'
                                                    END
                                                  ELSE 'CON UBICACION DESACTUALIZADA'
                                                END
                                            END ) AS ESTADO_MONITOREO ";
                        
            
                    $strJoinAdicional   .= "
                                              LEFT JOIN DB_GENERAL.ADMI_ZONA AZ 
                                              ON AZ.ID_ZONA = AC.ZONA_ID 
                                              LEFT JOIN DB_GENERAL.ADMI_DEPARTAMENTO ADC 
                                              ON ADC.ID_DEPARTAMENTO = AC.DEPARTAMENTO_ID 
                                              LEFT JOIN
                                                (SELECT *
                                                FROM
                                                  (SELECT GUPMAX.IMEI,
                                                    GUPMAX.FECHA_ULT_INTENTO,
                                                    GUPMAX.FECHA,
                                                    GUPMAX.ID_ULTIMO_PUNTO,
                                                    GUPMAX.LATITUD,
                                                    GUPMAX.LONGITUD,
                                                    rank() over (partition BY GUPMAX.IMEI 
                                                                 order by GUPMAX.FECHA_ULT_INTENTO DESC, GUPMAX.ID_ULTIMO_PUNTO DESC) rnk
                                                  FROM DB_MONITOREO.GPS_ULTIMO_PUNTO GUPMAX
                                                  WHERE GUPMAX.FECHA           IS NOT NULL
                                                  AND GUPMAX.FECHA_ULT_INTENTO IS NOT NULL
                                                  )
                                                WHERE rnk = 1
                                                ) GUP 
                                              ON GUP.IMEI                  = IE.NOMBRE_ELEMENTO ";
                    
                    $objNtvQuery->setParameter('strMinutosMonitoreo', $arrayParametros['strMinutosMonitoreo']);
                    $objNtvQueryCount->setParameter('strMinutosMonitoreo', $arrayParametros['strMinutosMonitoreo']);
                    
                    $strWhereAdicional.= " AND IPER.ID_PERSONA_ROL NOT IN (".$strQueryIntegrantesTabletCuadrillasLibres.") ";
                    $objNtvQuery->setParameter('strCuadrillaEstaLibre', $arrayParametros['strCuadrillaEstaLibre']);
                    $objNtvQueryCount->setParameter('strCuadrillaEstaLibre', $arrayParametros['strCuadrillaEstaLibre']);
                    
                }
                /*Tablets que se encuentran en mantenimiento y que no deben ser consideradas en el monitoreo*/
                else if($arrayParametros['strTipoReporte']=="MANTENIMIENTO_LIBRE")
                {
                    $strSelectAdicional.= ", AM.NOMBRE_MOTIVO ";
                    $strJoinAdicional .= "INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDEM 
                                            ON IDEM.ELEMENTO_ID = IE.ID_ELEMENTO 
                                          INNER JOIN DB_GENERAL.ADMI_MOTIVO AM 
                                            ON AM.ID_MOTIVO = IDEM.DETALLE_VALOR 
                                          LEFT JOIN DB_GENERAL.ADMI_ZONA AZ 
                                            ON AZ.ID_ZONA = AC.ZONA_ID 
                                          LEFT JOIN DB_GENERAL.ADMI_DEPARTAMENTO ADC 
                                            ON ADC.ID_DEPARTAMENTO = AC.DEPARTAMENTO_ID";
                    $strWhereAdicional .= "AND IDEM.DETALLE_NOMBRE = :strDetalleMotivo 
                                           AND IDEM.ESTADO = :strEstadoActivo
                                           AND AM.NOMBRE_MOTIVO IN (:arrayValuesMotivos) ";
                    
                    $rsm->addScalarResult('NOMBRE_MOTIVO', 'strMotivoTablet', 'string');
                    
                    $objNtvQuery->setParameter('strDetalleMotivo', $arrayParametros['strDetalleMotivo']);
                    $objNtvQueryCount->setParameter('strDetalleMotivo', $arrayParametros['strDetalleMotivo']);
                    
                    $objNtvQuery->setParameter('arrayValuesMotivos', $arrayParametros['arrayValuesMotivos']);
                    $objNtvQueryCount->setParameter('arrayValuesMotivos', $arrayParametros['arrayValuesMotivos']);
                }
                else if($arrayParametros['strTipoReporte']=="CUADRILLAS_LIBRES")
                {
                    $strWhereAdicional.= " AND IPER.ID_PERSONA_ROL IN (".$strQueryIntegrantesTabletCuadrillasLibres.") ";
                    $objNtvQuery->setParameter('strCuadrillaEstaLibre', $arrayParametros['strCuadrillaEstaLibre']);
                    $objNtvQueryCount->setParameter('strCuadrillaEstaLibre', $arrayParametros['strCuadrillaEstaLibre']);
                }
                else
                {
                    $strWhereAdicional.= " AND IPER.ID_PERSONA_ROL NOT IN (".$strQueryIntegrantesTabletCuadrillasLibres.") ";
                    $objNtvQuery->setParameter('strCuadrillaEstaLibre', $arrayParametros['strCuadrillaEstaLibre']);
                    $objNtvQueryCount->setParameter('strCuadrillaEstaLibre', $arrayParametros['strCuadrillaEstaLibre']);
                }
            }
            
            
            if((isset($arrayParametros['strFiltrarEstadosMonitoreoMapa']) 
                && !empty($arrayParametros['strFiltrarEstadosMonitoreoMapa']))
                && $arrayParametros['strFiltrarEstadosMonitoreoMapa']=="SI")
            {
                $strWhereAdicional.= "AND ( ";
                $strWhereAdicional.= "(ROUND((CAST(CURRENT_TIMESTAMP AS DATE) - CAST(GUP.FECHA_ULT_INTENTO AS DATE)) * 24 * 60 ) <= 
                                     :strMinutosMonitoreo ";
                $strWhereAdicional.= "AND ROUND((CAST(GUP.FECHA_ULT_INTENTO AS DATE) - CAST(GUP.FECHA AS DATE)) * 24 * 60 ) = 0 ) ";
                $strWhereAdicional.= " OR ";
                $strWhereAdicional.= "(ROUND((CAST(CURRENT_TIMESTAMP AS DATE) - CAST(GUP.FECHA_ULT_INTENTO AS DATE)) * 24 * 60 ) > 
                                     :strMinutosMonitoreo ) ";
                $strWhereAdicional.= " AND GUP.ID_ULTIMO_PUNTO IS NOT NULL ) ";
                
            }
            
            if(isset($arrayParametros['arrayCriterios']) && !empty($arrayParametros['arrayCriterios']))
            {
                if(isset($arrayParametros['arrayCriterios']['arrayEstadosTablet']) 
                    && !empty($arrayParametros['arrayCriterios']['arrayEstadosTablet']))
                {
                    $strWhereAdicional   .= "AND IE.ESTADO IN (:arrayEstadosTablet) ";
                    $objNtvQuery->setParameter('arrayEstadosTablet', array_values($arrayParametros['arrayCriterios']['arrayEstadosTablet']));
                    $objNtvQueryCount->setParameter('arrayEstadosTablet', array_values($arrayParametros['arrayCriterios']['arrayEstadosTablet']));
                }
                
                if(isset($arrayParametros['arrayCriterios']['strImeiTablet']) 
                    && !empty($arrayParametros['arrayCriterios']['strImeiTablet']))
                {
                    $strWhereAdicional .= "AND IE.NOMBRE_ELEMENTO LIKE :strImeiTablet ";
                    $objNtvQuery->setParameter('strImeiTablet', '%'.$arrayParametros['arrayCriterios']['strImeiTablet'].'%');
                    $objNtvQueryCount->setParameter('strImeiTablet', '%'.$arrayParametros['arrayCriterios']['strImeiTablet'].'%'); 
                }
                
                if(isset($arrayParametros['arrayCriterios']['strSerieLogicaTablet'])
                    && !empty($arrayParametros['arrayCriterios']['strSerieLogicaTablet']))
                {
                    $strWhereAdicional .= "AND IE.SERIE_LOGICA = :strSerieLogicaTablet ";
                    $objNtvQuery->setParameter('strSerieLogicaTablet', $arrayParametros['arrayCriterios']['strSerieLogicaTablet']);
                    $objNtvQueryCount->setParameter('strSerieLogicaTablet', $arrayParametros['arrayCriterios']['strSerieLogicaTablet']);
                }
                
                if(isset($arrayParametros['arrayCriterios']['strResponsableTablet']) 
                    && !empty($arrayParametros['arrayCriterios']['strResponsableTablet']))
                {
                    $strWhereAdicional .= "AND (IPERS.NOMBRES LIKE :strResponsableTablet 
                                                 OR IPERS.APELLIDOS LIKE :strResponsableTablet) ";
                     
                    $objNtvQuery->setParameter('strResponsableTablet', 
                                               '%'.strtoupper(trim($arrayParametros['arrayCriterios']['strResponsableTablet'])).'%');
                    $objNtvQueryCount->setParameter('strResponsableTablet', 
                                                    '%'.strtoupper(trim($arrayParametros['arrayCriterios']['strResponsableTablet'])).'%');
                }
                
                if(isset($arrayParametros['arrayCriterios']['strDepartamentoPer']) 
                    && !empty($arrayParametros['arrayCriterios']['strDepartamentoPer']))
                {
                    $strWhereAdicional .= "AND UPPER(AD.NOMBRE_DEPARTAMENTO) LIKE :strDepartamentoPer ";
                     
                    $objNtvQuery->setParameter( 'strDepartamentoPer', 
                                                '%'.strtoupper(trim($arrayParametros['arrayCriterios']['strDepartamentoPer'])).'%');
                    $objNtvQueryCount->setParameter('strDepartamentoPer', 
                                                    '%'.strtoupper(trim($arrayParametros['arrayCriterios']['strDepartamentoPer'])).'%');
                }
                
                if(isset($arrayParametros['arrayCriterios']['strCuadrillaPer']) 
                    && !empty($arrayParametros['arrayCriterios']['strCuadrillaPer']))
                {
                    $strWhereAdicional .= "AND AC.NOMBRE_CUADRILLA LIKE :strCuadrillaPer ";
                     
                    $objNtvQuery->setParameter('strCuadrillaPer', '%'.trim($arrayParametros['arrayCriterios']['strCuadrillaPer']).'%');
                    $objNtvQueryCount->setParameter('strCuadrillaPer', '%'.trim($arrayParametros['arrayCriterios']['strCuadrillaPer']).'%');
                }
            }

            
            if(isset($arrayParametros['arrayCriteriosBusquedaAvanzada']) && !empty($arrayParametros['arrayCriteriosBusquedaAvanzada']))
            {
                if(isset($arrayParametros['arrayCriteriosBusquedaAvanzada']['strRegionPerBusqAvanzada']) 
                    && !empty($arrayParametros['arrayCriteriosBusquedaAvanzada']['strRegionPerBusqAvanzada']))
                {
                    $strWhereAdicional .= "AND ACANT.REGION = :strRegionPerBusqAvanzada ";
                    $objNtvQuery->setParameter('strRegionPerBusqAvanzada', 
                                               $arrayParametros['arrayCriteriosBusquedaAvanzada']['strRegionPerBusqAvanzada']);
                    $objNtvQueryCount->setParameter('strRegionPerBusqAvanzada', 
                                                    $arrayParametros['arrayCriteriosBusquedaAvanzada']['strRegionPerBusqAvanzada']);
                }
                
                if(isset($arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdCantonPerBusqAvanzada']) 
                    && !empty($arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdCantonPerBusqAvanzada']))
                {
                    $strWhereAdicional .= "AND ACANT.ID_CANTON = :intIdCantonPerBusqAvanzada ";
                    $objNtvQuery->setParameter('intIdCantonPerBusqAvanzada', 
                                               $arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdCantonPerBusqAvanzada']);
                    $objNtvQueryCount->setParameter('intIdCantonPerBusqAvanzada', 
                                                    $arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdCantonPerBusqAvanzada']);
                }
                
                if(isset($arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdDepartamentoPerBusqAvanzada']) 
                    && !empty($arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdDepartamentoPerBusqAvanzada']))
                {
                    $strWhereAdicional .= "AND IPER.DEPARTAMENTO_ID = :intIdDepartamentoPerBusqAvanzada ";
                    $objNtvQuery->setParameter('intIdDepartamentoPerBusqAvanzada', 
                                               $arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdDepartamentoPerBusqAvanzada']);
                    $objNtvQueryCount->setParameter('intIdDepartamentoPerBusqAvanzada', 
                                                    $arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdDepartamentoPerBusqAvanzada']);
                }
                
                if(isset($arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdDepartamentoCuadrillaBusqAvanzada']) 
                    && !empty($arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdDepartamentoCuadrillaBusqAvanzada']))
                {
                    $strWhereAdicional .= "AND ADC.ID_DEPARTAMENTO = :intIdDepartamentoCuadrillaBusqAvanzada ";
                    $objNtvQuery->setParameter('intIdDepartamentoCuadrillaBusqAvanzada', 
                                               $arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdDepartamentoCuadrillaBusqAvanzada']);
                    $objNtvQueryCount->setParameter('intIdDepartamentoCuadrillaBusqAvanzada', 
                                                    $arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdDepartamentoCuadrillaBusqAvanzada']);
                }
                
                if(isset($arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdZonaCuadrillaBusqAvanzada']) 
                    && !empty($arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdZonaCuadrillaBusqAvanzada']))
                {
                    $strWhereAdicional .= "AND AZ.ID_ZONA = :intIdZonaCuadrillaBusqAvanzada ";
                    $objNtvQuery->setParameter('intIdZonaCuadrillaBusqAvanzada', 
                                                $arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdZonaCuadrillaBusqAvanzada']);
                    $objNtvQueryCount->setParameter('intIdZonaCuadrillaBusqAvanzada', 
                                                    $arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdZonaCuadrillaBusqAvanzada']);
                    
                }
                
                if(isset($arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdModeloBusqAvanzada']) 
                    && !empty($arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdModeloBusqAvanzada']))
                {
                    $strWhereAdicional .= "AND AME.ID_MODELO_ELEMENTO = :intIdModeloElemento ";
                    $objNtvQuery->setParameter('intIdModeloElemento', $arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdModeloBusqAvanzada']);
                    $objNtvQueryCount->setParameter('intIdModeloElemento', 
                                                    $arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdModeloBusqAvanzada']);
                }
                
                
                if((isset($arrayParametros['arrayCriteriosBusquedaAvanzada']['strEstadoMonitoreoBusqAvanzada']) 
                    && !empty($arrayParametros['arrayCriteriosBusquedaAvanzada']['strEstadoMonitoreoBusqAvanzada']))
                    && 
                    (isset($arrayParametros['strTipoReporte']) && !empty($arrayParametros['strTipoReporte'])
                        && ($arrayParametros['strTipoReporte']=="EN_CAMPO" || $arrayParametros['strTipoReporte']=="TODAS_EN_CAMPO")))
                {
                    if($arrayParametros['arrayCriteriosBusquedaAvanzada']['strEstadoMonitoreoBusqAvanzada']=="SIN INFORMACION")
                    {
                        $strWhereAdicional.= "AND GUP.ID_ULTIMO_PUNTO IS NULL ";
                    }
                    else if($arrayParametros['arrayCriteriosBusquedaAvanzada']['strEstadoMonitoreoBusqAvanzada']=="CON UBICACION ACTUALIZADA" 
                        || $arrayParametros['arrayCriteriosBusquedaAvanzada']['strEstadoMonitoreoBusqAvanzada']=="SIN UBICACION")
                    {
                        $strWhereAdicional.= "AND ROUND((CAST(CURRENT_TIMESTAMP AS DATE) - CAST(GUP.FECHA_ULT_INTENTO AS DATE)) * 24 * 60 ) <= 
                                             :strMinutosMonitoreo ";
                        if($arrayParametros['arrayCriteriosBusquedaAvanzada']['strEstadoMonitoreoBusqAvanzada']=="CON UBICACION ACTUALIZADA")
                        {
                            $strWhereAdicional.= "AND ROUND((CAST(GUP.FECHA_ULT_INTENTO AS DATE) - CAST(GUP.FECHA AS DATE)) * 24 * 60 ) = 0 ";
                        }
                        else
                        {
                            $strWhereAdicional.= "AND ROUND((CAST(GUP.FECHA_ULT_INTENTO AS DATE) - CAST(GUP.FECHA AS DATE)) * 24 * 60 ) > 0 ";
                        }
                    }
                    else if($arrayParametros['arrayCriteriosBusquedaAvanzada']['strEstadoMonitoreoBusqAvanzada']=="CON UBICACION DESACTUALIZADA")
                    {
                        $strWhereAdicional.= "AND ROUND((CAST(CURRENT_TIMESTAMP AS DATE) - CAST(GUP.FECHA_ULT_INTENTO AS DATE)) * 24 * 60 ) > 
                                             :strMinutosMonitoreo ";
                    }
                }
                
                
                if(isset($arrayParametros['arrayCriteriosBusquedaAvanzada']['strFiltrarMisCuadrillasBusqAvanzada']) 
                    && !empty($arrayParametros['arrayCriteriosBusquedaAvanzada']['strFiltrarMisCuadrillasBusqAvanzada'])
                    && $arrayParametros['arrayCriteriosBusquedaAvanzada']['strFiltrarMisCuadrillasBusqAvanzada']=="SI")
                {
                    $strWhereAdicional .= "AND (
                                                    AC.COORDINADOR_PRINCIPAL_ID = :intIdPerSession 
                                                    OR 
                                                    AC.COORDINADOR_PRESTADO_ID = :intIdPerSession 
                                                ) ";
                    
                    $objNtvQuery->setParameter('intIdPerSession', $arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdPerSession']);
                    $objNtvQueryCount->setParameter('intIdPerSession', $arrayParametros['arrayCriteriosBusquedaAvanzada']['intIdPerSession']);
                }
                
                if(isset($arrayParametros['arrayCriteriosBusquedaAvanzada']['strFiltrarPorHorarioBusqAvanzada']) 
                    && !empty($arrayParametros['arrayCriteriosBusquedaAvanzada']['strFiltrarPorHorarioBusqAvanzada'])
                    && ($arrayParametros['arrayCriteriosBusquedaAvanzada']['strFiltrarPorHorarioBusqAvanzada']=="SI"))
                {
                    $strWhereAdicional .= " AND TO_TIMESTAMP( TO_CHAR(CURRENT_TIMESTAMP,'HH24:MI'),'HH24:MI' ) >= 
                                                TO_TIMESTAMP( AC.TURNO_HORA_INICIO, 'HH24:MI')
                                            AND TO_TIMESTAMP( TO_CHAR(CURRENT_TIMESTAMP,'HH24:MI'),'HH24:MI' ) <= 
                                                TO_TIMESTAMP( AC.TURNO_HORA_FIN, 'HH24:MI') "; 
                }
            }
            
            $strQuery       = $strSelectGeneral . $strSelectAdicional 
                              . $strFromJoinGeneral . $strJoinAdicional. $strWhereGeneral . $strWhereAdicional . $strOrderByGeneral;
            
            $objNtvQuery->setSQL($strQuery);
            
            
            $intStart = 0;
            $intLimit = 0;
            if(isset($arrayParametros['intInicio']) && isset($arrayParametros['intLimite']))
            {
                if($arrayParametros['intInicio'] && $arrayParametros['intLimite'])
                {
                    $intStart = $arrayParametros['intInicio'];
                    $intLimit = $arrayParametros['intLimite'];
                }
                else
                {
                    $intLimit = 10;
                }
            }
            
            $objNtvQueryFinal   = $this->setQueryLimit($objNtvQuery, $intLimit, $intStart);
                        
            $arrayResultado     = $objNtvQueryFinal->getResult();

            $strQueryCount      = $strSelectCount . $strFromJoinGeneral . $strJoinAdicional. $strWhereGeneral . $strWhereAdicional;
            $objNtvQueryCount->setSQL($strQueryCount);
            $intTotal           = $objNtvQueryCount->getSingleScalarResult();
            error_log("Resultado : ".print_r($arrayResultado,1));
            $arrayRespuesta['resultado']    = $arrayResultado;
            $arrayRespuesta['total']        = $intTotal;

        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        return $arrayRespuesta;
    }
    
    /**
     * getJSONReporteTabletsMonitoreo
     * 
     * Obtiene el reporte general del monitoreo de tablets
     *  
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 Se agregan filtros en la búsqueda avanzada para que el reporte que se visualiza sea actualizado en cada consulta y se agrega
     *              como parámetro la cantidad de minutos que será utilizada para la comparación de fechas y horas en el monitoreo de tablets
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 16-01-2017 Se elimina el arreglo arrayCriterios dentro del arreglo de los parámetro que recibe esta función, ya que sólo contenía
     *                         la variable strBusqRegion que no está siendo utilizada ya que dicho valor es enviado en la variable 
     *                         strRegionPerBusqAvanzada del arreglo arrayCriteriosPerBusquedaAvanzada enviado como parámetro.
     * 
     * @param  array $arrayParametros[
     *                                  'strMinutosMonitoreo'           => número de minutos que será utilizado para la comparación en el monitoreo
     *                                                                     de tablets
     *                                  'strTipoReporteMonitoreo'       => tipo de reporte 'RESUMEN_GENERAL', 'RESUMEN_NACIONAL', 'RESUMEN_REGIONAL'
     *                                  'strEstadoActivo'               => string del estado activo
     *                                  'strEstadoInactivo'             => string del estado inactivo
     *                                  'strDetalleResponsable'         => nombre del detalle que asocia una tablet a un responsable
     *                                  'strNombreTipoElemento'         => nombre del tipo elemento 'TABLET'
     *                                  'strDetalleMotivo'              => nombre del detalle que asocia un motivo a una tablet
     *                                  'arrayMotivosEnTotalTablets'    => array con las tablets inactivas cuyos motivos deben ser considerados
     *                                                                     para el conteo de tablets
     *                                  'arrayCriteriosPerBusquedaAvanzada'   => array con los diferentes filtros de búsqueda avanzada
     *                                                                                 correspondientes a persona empresa rol
     *                                  [
     *                                      'strRegionPerBusqAvanzada'          => region de la persona empresa rol 'R1' o 'R2'
     *                                      'intIdCantonPerBusqAvanzada'        => id del canton de la persona empresa rol
     *                                      'intIdDepartamentoPerBusqAvanzada'  => id del departamento de la persona empresa rol
     *                                  ] 
     *                                  'arrayCriteriosCuadrillaBusquedaAvanzada'   => array con los diferentes filtros de búsqueda avanzada
     *                                                                                 correspondientes a cuadrillas
     *                                  [
     *                                      'intIdDepartamentoCuadrillaBusqAvanzada'    => id del departamento de cuadrilla
     *                                      'intIdZonaCuadrillaBusqAvanzada'            => id de la zona de cuadrilla
     *                                      'strFiltrarMisCuadrillasBusqAvanzada'       => 'SI' o 'NO' se desean filtrar las cuadrillas que
     *                                                                                      están a cargo del usuario en sesión
     *                                      'intIdPerSession'                           => id persona empresa rol del usuario en sesión
     *                                      'strFiltrarPorHorarioBusqAvanzada'          => 'SI' o 'NO' se desean filtrar por horarios de cuadrillas
     *                                  ],
     *                                  'arrayCriteriosTabletBusquedaAvanzada'  =>  array con los diferentes filtros de búsqueda avanzada
     *                                                                                 correspondientes a cuadrillas
     *                                  [
     *                                      'intIdModeloBusqAvanzada'           => id del modelo de la tablet
     *                                  ]                     
     *                                ]
     * 
     * @return json $jsonData
     */
    public function getJSONReporteTabletsMonitoreo($arrayParametros)
    {  
        $arrayRespuesta             = $this->getResultadoReporteTabletsMonitoreo($arrayParametros);
        $arrayResultado             = $arrayRespuesta['resultado'];
        $intTotal                   = $arrayRespuesta['total'];
        
        $jsonData = json_encode(array('total'   => $intTotal, 'encontrados' => $arrayResultado));
        return $jsonData;
    }
    
    
    /**
     * getResultadoReporteTabletsMonitoreo
     * 
     * Obtiene la consulta general del monitoreo de tablets
     * 
     * Costo = 22
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 Se agregan filtros en la búsqueda avanzada para que el reporte que se visualiza sea actualizado en cada consulta y se agrega 
     *              como parámetro la cantidad de minutos que será utilizada para la comparación de fechas y horas en el monitoreo de tablets
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 08-01-2017 Se agrega la consulta para obtener el integrante responsable de una tablet que pertenezca a una cuadrilla libre y
     *                         que por ende no deberá formar parte del monitoreo de tablets.
     *                         Costo Query $strQueryIntegrantesTabletCuadrillasLibres = 18
     * 
     * @version 1.3 08-01-2017 Se modifica la consulta para tablets en mantenimiento y libres, de tal manera que no se encuentre una tablet tanto 
     *                         en ambas categorías, tomando como prioridad una tablet en mantenimiento para el conteo en el monitoreo de Tablets
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 16-01-2017 Se elimina el filtro de la consulta por strBusqRegion, ya que el arreglo arrayCriterios que contiene la variable 
     *                         strBusqRegion no está siendo utilizada debido a que el valor de la región es enviado en la variable 
     *                         strRegionPerBusqAvanzada del arreglo arrayCriteriosPerBusquedaAvanzada enviado como parámetro.
     * 
     *
     * @param  array $arrayParametros[
     *                                  'strMinutosMonitoreo'           => número de minutos que será utilizado para la comparación en el monitoreo
     *                                                                     de tablets
     *                                  'strTipoReporteMonitoreo'       => tipo de reporte 'RESUMEN_GENERAL', 'RESUMEN_NACIONAL', 'RESUMEN_REGIONAL'
     *                                  'strEstadoActivo'               => string del estado activo
     *                                  'strEstadoInactivo'             => string del estado inactivo
     *                                  'strDetalleResponsable'         => nombre del detalle que asocia una tablet a un responsable
     *                                  'strNombreTipoElemento'         => nombre del tipo elemento 'TABLET'
     *                                  'strDetalleMotivo'              => nombre del detalle que asocia un motivo a una tablet
     *                                  'arrayMotivosEnTotalTablets'    => array con las tablets inactivas cuyos motivos deben ser considerados
     *                                                                     para el conteo de tablets
     *                                  'arrayCriteriosPerBusquedaAvanzada'     => array con los diferentes filtros de búsqueda avanzada
     *                                                                                 correspondientes a persona empresa rol
     *                                  [
     *                                      'strRegionPerBusqAvanzada'          => region de la persona empresa rol 'R1' o 'R2'
     *                                      'intIdCantonPerBusqAvanzada'        => id del canton de la persona empresa rol
     *                                      'intIdDepartamentoPerBusqAvanzada'  => id del departamento de la persona empresa rol
     *                                  ] 
     *                                  'arrayCriteriosCuadrillaBusquedaAvanzada'   => array con los diferentes filtros de búsqueda avanzada
     *                                                                                 correspondientes a cuadrillas
     *                                  [
     *                                      'intIdDepartamentoCuadrillaBusqAvanzada'    => id del departamento de cuadrilla
     *                                      'intIdZonaCuadrillaBusqAvanzada'            => id de la zona de cuadrilla
     *                                      'strFiltrarMisCuadrillasBusqAvanzada'       => 'SI' o 'NO' se desean filtrar las cuadrillas que
     *                                                                                      están a cargo del usuario en sesión
     *                                      'intIdPerSession'                           => id persona empresa rol del usuario en sesión
     *                                      'strFiltrarPorHorarioBusqAvanzada'          => 'SI' o 'NO' se desean filtrar por horarios de cuadrillas
     *                                  ],
     *                                  'arrayCriteriosTabletBusquedaAvanzada'  =>  array con los diferentes filtros de búsqueda avanzada
     *                                                                                 correspondientes a cuadrillas
     *                                  [
     *                                      'intIdModeloBusqAvanzada'           => id del modelo de la tablet
     *                                  ]                                                                    
     *                                ]
     * 
     * @return json $jsonData
     */
    public function getResultadoReporteTabletsMonitoreo($arrayParametros)
    {
        $arrayRespuesta['total']        = 0;
        $arrayRespuesta['resultado']    = array();
        try
        {
            $rsm                = new ResultSetMappingBuilder($this->_em);
            $rsmCount           = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery        = $this->_em->createNativeQuery(null, $rsm);
            $objNtvQueryCount   = $this->_em->createNativeQuery(null, $rsmCount);
            
            $strInnerJoinOficina                = "";
            $strInnerJoinCanton                 = "";
            $strInnerJoinDepartamentoGeneral    = "";
            $strInnerJoinOficinaGeneral         = "";
            $strInnerJoinCantonGeneral          = "";
            $strWhereJoinDepartamento           = "";
            $strWhereJoinOficinaCanton          = "";
            $strInnerJoinBusqAvanzadaGeneral    = "";
            $strInnerJoinBusqAvanzada           = "";
            $strWhereCriteriosGeneral           = "";
            $strWhereCriterios                  = "";
            $strSelectGeneral                   = "";
            $strGroupByGeneral                  = "";
            $strOrderByGeneral                  = "";
            $strSelectCountGeneral              = "";
            
            /*
             * Se obtienen los integrantes de cuadrillas libres que son responsables de tablets
             */
            $strQueryIntegrantesTabletCuadrillasLibres  = " SELECT DISTINCT IPERL.ID_PERSONA_ROL
                                                            FROM DB_COMERCIAL.ADMI_CUADRILLA ACL
                                                            INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPERL
                                                            ON IPERL.CUADRILLA_ID             = ACL.ID_CUADRILLA 
                                                            INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE
                                                            ON IDE.DETALLE_VALOR = IPERL.ID_PERSONA_ROL
                                                            WHERE ACL.ESTA_LIBRE              = :strCuadrillaEstaLibre
                                                            AND ( ACL.ESTADO                  = :strEstadoActivo 
                                                            OR (ACL.ESTADO                    = :strEstadoPrestadoCuadrilla
                                                            AND ACL.COORDINADOR_PRINCIPAL_ID IS NOT NULL)
                                                            OR (ACL.ESTADO                    = :strEstadoPrestadoCuadrilla
                                                            AND ACL.COORDINADOR_PRESTADO_ID  IS NOT NULL) )
                                                            AND IPERL.ESTADO                  = :strEstadoActivo  
                                                            AND IDE.DETALLE_NOMBRE = :strDetalleResponsable 
                                                            AND IDE.ESTADO = :strEstadoActivo ";
            
            $objNtvQuery->setParameter('strEstadoPrestadoCuadrilla', $arrayParametros['strEstadoPrestadoCuadrilla']);
            $objNtvQueryCount->setParameter('strEstadoPrestadoCuadrilla', $arrayParametros['strEstadoPrestadoCuadrilla']);

            $objNtvQuery->setParameter('strCuadrillaEstaLibre', $arrayParametros['strCuadrillaEstaLibre']);
            $objNtvQueryCount->setParameter('strCuadrillaEstaLibre', $arrayParametros['strCuadrillaEstaLibre']);
                        
            /*
             * Se realiza la consulta con el join con la tabla de monitore para que se realice correctamente la cuantificación de Tablets en cada
             * una de las categorías
             * 
             */
            $strInnerJoinMonit  = " INNER JOIN 
                                      (SELECT *
                                      FROM
                                        (SELECT GUPMAX.IMEI,
                                          GUPMAX.FECHA_ULT_INTENTO,
                                          GUPMAX.FECHA,
                                          GUPMAX.ID_ULTIMO_PUNTO,
                                          GUPMAX.LATITUD,
                                          GUPMAX.LONGITUD,
                                          rank() over (partition BY GUPMAX.IMEI order by GUPMAX.FECHA_ULT_INTENTO DESC, GUPMAX.ID_ULTIMO_PUNTO DESC) 
                                          rnk
                                        FROM DB_MONITOREO.GPS_ULTIMO_PUNTO GUPMAX
                                        WHERE GUPMAX.FECHA           IS NOT NULL
                                        AND GUPMAX.FECHA_ULT_INTENTO IS NOT NULL
                                        )
                                      WHERE rnk = 1
                                      ) TABLET_MONITOREADA  
                                    ON TABLET_MONITOREADA.IMEI           = TABLET.NOMBRE_ELEMENTO ";
            

            if(isset($arrayParametros['arrayCriteriosPerBusquedaAvanzada']) 
                && !empty($arrayParametros['arrayCriteriosPerBusquedaAvanzada']))
            {
                $strInnerJoinBusqAvanzadaGeneral    .= "INNER JOIN DB_COMERCIAL.INFO_OFICINA_GRUPO IOGG
                                                          ON IOGG.ID_OFICINA = IPERG.OFICINA_ID 
                                                        INNER JOIN DB_GENERAL.ADMI_CANTON ACANTG 
                                                          ON ACANTG.ID_CANTON = IOGG.CANTON_ID ";

                $strInnerJoinBusqAvanzada           .= "INNER JOIN DB_COMERCIAL.INFO_OFICINA_GRUPO IOG
                                                          ON IOG.ID_OFICINA = IPER.OFICINA_ID 
                                                        INNER JOIN DB_GENERAL.ADMI_CANTON ACANT 
                                                          ON ACANT.ID_CANTON = IOG.CANTON_ID ";
                
                
                if(isset($arrayParametros['arrayCriteriosPerBusquedaAvanzada']['strRegionPerBusqAvanzada']) 
                   && !empty($arrayParametros['arrayCriteriosPerBusquedaAvanzada']['strRegionPerBusqAvanzada']))
                {
                    $strWhereCriteriosGeneral   .= "AND ACANTG.REGION = :strRegionPerBusqAvanzada ";
                    $strWhereCriterios          .= "AND ACANT.REGION = :strRegionPerBusqAvanzada ";
                    $objNtvQuery->setParameter(  'strRegionPerBusqAvanzada', 
                                                 $arrayParametros['arrayCriteriosPerBusquedaAvanzada']['strRegionPerBusqAvanzada']);
                    $objNtvQueryCount->setParameter('strRegionPerBusqAvanzada', 
                                                     $arrayParametros['arrayCriteriosPerBusquedaAvanzada']['strRegionPerBusqAvanzada']);
                }
                
                if(isset($arrayParametros['arrayCriteriosPerBusquedaAvanzada']['intIdCantonPerBusqAvanzada']) 
                   && !empty($arrayParametros['arrayCriteriosPerBusquedaAvanzada']['intIdCantonPerBusqAvanzada']))
                {
                    $strWhereCriteriosGeneral .= "AND ACANTG.ID_CANTON = :intIdCantonPerBusqAvanzada ";
                    $strWhereCriterios .= "AND ACANT.ID_CANTON = :intIdCantonPerBusqAvanzada ";
                    $objNtvQuery->setParameter( 'intIdCantonPerBusqAvanzada', 
                                                $arrayParametros['arrayCriteriosPerBusquedaAvanzada']['intIdCantonPerBusqAvanzada']);
                    $objNtvQueryCount->setParameter('intIdCantonPerBusqAvanzada', 
                                                    $arrayParametros['arrayCriteriosPerBusquedaAvanzada']['intIdCantonPerBusqAvanzada']);
                }
                
                if(isset($arrayParametros['arrayCriteriosPerBusquedaAvanzada']['intIdDepartamentoPerBusqAvanzada']) 
                   && !empty($arrayParametros['arrayCriteriosPerBusquedaAvanzada']['intIdDepartamentoPerBusqAvanzada']))
                {
                    $strWhereCriteriosGeneral .= "AND IPERG.DEPARTAMENTO_ID = :intIdDepartamentoPerBusqAvanzada ";
                    $strWhereCriterios .= "AND IPER.DEPARTAMENTO_ID = :intIdDepartamentoPerBusqAvanzada ";
                    $objNtvQuery->setParameter('intIdDepartamentoPerBusqAvanzada', 
                                               $arrayParametros['arrayCriteriosPerBusquedaAvanzada']['intIdDepartamentoPerBusqAvanzada']);
                    $objNtvQueryCount->setParameter('intIdDepartamentoPerBusqAvanzada', 
                                                    $arrayParametros['arrayCriteriosPerBusquedaAvanzada']['intIdDepartamentoPerBusqAvanzada']);
                }
            }
            
            if(isset($arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']) 
                && !empty($arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']))
            {
                $strInnerJoinBusqAvanzadaGeneral    .= "INNER JOIN DB_COMERCIAL.ADMI_CUADRILLA ACG 
                                                          ON ACG.ID_CUADRILLA = IPERG.CUADRILLA_ID ";
                
                $strInnerJoinBusqAvanzada           .= "INNER JOIN DB_COMERCIAL.ADMI_CUADRILLA AC 
                                                          ON AC.ID_CUADRILLA = IPER.CUADRILLA_ID ";
                

                if(isset($arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']['intIdDepartamentoCuadrillaBusqAvanzada']) 
                    && !empty($arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']['intIdDepartamentoCuadrillaBusqAvanzada']))
                {

                    $strWhereCriteriosGeneral   .= "AND ACG.DEPARTAMENTO_ID = :intIdDepartamentoCuadrillaBusqAvanzada ";
                    $strWhereCriterios          .= "AND AC.DEPARTAMENTO_ID = :intIdDepartamentoCuadrillaBusqAvanzada  ";

                    $objNtvQuery->setParameter('intIdDepartamentoCuadrillaBusqAvanzada', 
                                               $arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']['intIdDepartamentoCuadrillaBusqAvanzada']);
                    $objNtvQueryCount->setParameter('intIdDepartamentoCuadrillaBusqAvanzada', 
                                                    $arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']
                                                                    ['intIdDepartamentoCuadrillaBusqAvanzada']);
                }

                if(isset($arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']['intIdZonaCuadrillaBusqAvanzada']) 
                    && !empty($arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']['intIdZonaCuadrillaBusqAvanzada']))
                {
                    $strWhereCriteriosGeneral   .= "AND ACG.ZONA_ID = :intIdZonaCuadrillaBusqAvanzada ";
                    $strWhereCriterios          .= "AND AC.ZONA_ID  = :intIdZonaCuadrillaBusqAvanzada ";

                    $objNtvQuery->setParameter('intIdZonaCuadrillaBusqAvanzada', 
                                                $arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']['intIdZonaCuadrillaBusqAvanzada']);
                    $objNtvQueryCount->setParameter('intIdZonaCuadrillaBusqAvanzada', 
                                                    $arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']['intIdZonaCuadrillaBusqAvanzada']);

                }

                if(isset($arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']['strFiltrarMisCuadrillasBusqAvanzada']) 
                    && !empty($arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']['strFiltrarMisCuadrillasBusqAvanzada'])
                    && $arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']['strFiltrarMisCuadrillasBusqAvanzada']=="SI")
                {
                    $strWhereCriteriosGeneral   .= "AND (
                                                        ACG.COORDINADOR_PRINCIPAL_ID = :intIdPerSession 
                                                        OR 
                                                        ACG.COORDINADOR_PRESTADO_ID = :intIdPerSession 
                                                    ) ";

                    $strWhereCriterios          .= "AND (
                                                        AC.COORDINADOR_PRINCIPAL_ID = :intIdPerSession 
                                                        OR 
                                                        AC.COORDINADOR_PRESTADO_ID = :intIdPerSession 
                                                    ) ";
                    
                    $objNtvQuery->setParameter('intIdPerSession', $arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']['intIdPerSession']);
                    $objNtvQueryCount->setParameter('intIdPerSession', 
                                                    $arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']['intIdPerSession']);
                }

                if(isset($arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']['strFiltrarPorHorarioBusqAvanzada']) 
                    && !empty($arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']['strFiltrarPorHorarioBusqAvanzada'])
                    && ($arrayParametros['arrayCriteriosCuadrillaBusquedaAvanzada']['strFiltrarPorHorarioBusqAvanzada']=="SI"))
                {   
                    $strWhereCriteriosGeneral   .= " AND TO_TIMESTAMP( TO_CHAR(CURRENT_TIMESTAMP,'HH24:MI'),'HH24:MI' ) >= 
                                                        TO_TIMESTAMP( ACG.TURNO_HORA_INICIO, 'HH24:MI')
                                                    AND TO_TIMESTAMP( TO_CHAR(CURRENT_TIMESTAMP,'HH24:MI'),'HH24:MI' ) <= 
                                                        TO_TIMESTAMP( ACG.TURNO_HORA_FIN, 'HH24:MI') ";

                    $strWhereCriterios          .= " AND TO_TIMESTAMP( TO_CHAR(CURRENT_TIMESTAMP,'HH24:MI'),'HH24:MI' ) >= 
                                                        TO_TIMESTAMP( AC.TURNO_HORA_INICIO, 'HH24:MI')
                                                    AND TO_TIMESTAMP( TO_CHAR(CURRENT_TIMESTAMP,'HH24:MI'),'HH24:MI' ) <= 
                                                        TO_TIMESTAMP( AC.TURNO_HORA_FIN, 'HH24:MI') ";
                }
                
                $strWhereCriteriosGeneral   .= " AND ( ACG.ESTADO                   = :strEstadoActivo 
                                                        OR (ACG.ESTADO              = :strEstadoPrestadoCuadrilla 
                                                            AND ACG.COORDINADOR_PRINCIPAL_ID IS NOT NULL) 
                                                        OR (ACG.ESTADO              = :strEstadoPrestadoCuadrilla 
                                                            AND ACG.COORDINADOR_PRESTADO_ID  IS NOT NULL)
                                                    ) ";
                
                
                
                $strWhereCriterios  .= " AND ( AC.ESTADO               = :strEstadoActivo 
                                            OR (AC.ESTADO              = :strEstadoPrestadoCuadrilla 
                                                AND AC.COORDINADOR_PRINCIPAL_ID IS NOT NULL) 
                                            OR (AC.ESTADO              = :strEstadoPrestadoCuadrilla 
                                                AND AC.COORDINADOR_PRESTADO_ID  IS NOT NULL)
                                            ) ";
            }

            
            
            
            if(isset($arrayParametros['arrayCriteriosTabletBusquedaAvanzada']) 
                && !empty($arrayParametros['arrayCriteriosTabletBusquedaAvanzada']))
            {
                if(isset($arrayParametros['arrayCriteriosTabletBusquedaAvanzada']['intIdModeloBusqAvanzada']) 
                    && !empty($arrayParametros['arrayCriteriosTabletBusquedaAvanzada']['intIdModeloBusqAvanzada']))
                {
                    $strWhereCriterios          .= "AND AME.ID_MODELO_ELEMENTO = :intIdModeloBusqAvanzada ";

                    $objNtvQuery->setParameter( 'intIdModeloBusqAvanzada', 
                                                $arrayParametros['arrayCriteriosTabletBusquedaAvanzada']['intIdModeloBusqAvanzada']);
                    $objNtvQueryCount->setParameter('intIdModeloBusqAvanzada', 
                                                    $arrayParametros['arrayCriteriosTabletBusquedaAvanzada']['intIdModeloBusqAvanzada']);
                }
            }
            
            if(isset($arrayParametros['strTipoReporteMonitoreo']) && !empty($arrayParametros['strTipoReporteMonitoreo']))
            {
                /*
                 * El RESUMEN_NACIONAL muestra un reporte cuantificando las tablets por departamentos
                 */
                if($arrayParametros['strTipoReporteMonitoreo']=="RESUMEN_NACIONAL")
                {
                    $strSelectCountGeneral      .= "SELECT COUNT(DISTINCT(ADG.ID_DEPARTAMENTO)) AS TOTAL ";
                    $strSelectGeneral           .= " ADG.ID_DEPARTAMENTO, ADG.NOMBRE_DEPARTAMENTO, ";
                    
                    $strInnerJoinOficina            .= " INNER JOIN DB_COMERCIAL.INFO_OFICINA_GRUPO IOG
                                                            ON IOG.ID_OFICINA = IPER.OFICINA_ID ";
                
                    $strInnerJoinCanton             .= " INNER JOIN DB_GENERAL.ADMI_CANTON ACANT 
                                                            ON ACANT.ID_CANTON = IOG.CANTON_ID ";
                    
                    $strInnerJoinDepartamentoGeneral.= " INNER JOIN DB_GENERAL.ADMI_DEPARTAMENTO ADG 
                                                            ON ADG.ID_DEPARTAMENTO = IPERG.DEPARTAMENTO_ID "; 
                    $strInnerJoinOficinaGeneral     .= " INNER JOIN DB_COMERCIAL.INFO_OFICINA_GRUPO IOGG
                                                            ON IOGG.ID_OFICINA = IPERG.OFICINA_ID ";
                    
                    $strInnerJoinCantonGeneral      .= " INNER JOIN DB_GENERAL.ADMI_CANTON ACANTG 
                                                           ON ACANTG.ID_CANTON = IOGG.CANTON_ID ";
                    
                    $strWhereJoinDepartamento       .= " AND IPER.DEPARTAMENTO_ID        = ADG.ID_DEPARTAMENTO ";
                    
                    $strInnerJoinMonit              .= $strInnerJoinOficina . $strInnerJoinCanton;
                    
                    $strGroupByGeneral              .= " GROUP BY ADG.ID_DEPARTAMENTO, ADG.NOMBRE_DEPARTAMENTO ";
                    $strOrderByGeneral              .= "ORDER BY ADG.NOMBRE_DEPARTAMENTO ";
                    
                    $rsm->addScalarResult('ID_DEPARTAMENTO',        'intIdFila', 'integer');
                    $rsm->addScalarResult('NOMBRE_DEPARTAMENTO',    'strNombreFila', 'string');
                }
                /*
                 * El RESUMEN_REGIONAL muestra un reporte cuantificando las tablets por región, ciudad y departamento
                 */
                else if($arrayParametros['strTipoReporteMonitoreo']=="RESUMEN_REGIONAL")
                {
                    $strSelectCountGeneral          .= "SELECT COUNT (DISTINCT ACANTG.ID_CANTON || ADG.ID_DEPARTAMENTO ) AS TOTAL ";
                    
                    $strSelectGeneral               .= " ACANTG.ID_CANTON, ACANTG.REGION, ACANTG.NOMBRE_CANTON, 
                                                        ADG.ID_DEPARTAMENTO, ADG.NOMBRE_DEPARTAMENTO,
                                                        ( ACANTG.ID_CANTON || ' - ' || ADG.ID_DEPARTAMENTO ) AS ID_FILA, 
                                                        (ACANTG.REGION || ' - ' || ACANTG.NOMBRE_CANTON || ' - ' || ADG.NOMBRE_DEPARTAMENTO) 
                                                        AS NOMBRE_FILA, ";
                    
                    $strInnerJoinOficina            .= " INNER JOIN DB_COMERCIAL.INFO_OFICINA_GRUPO IOG
                                                            ON IOG.ID_OFICINA = IPER.OFICINA_ID ";
                
                    $strInnerJoinCanton             .= " INNER JOIN DB_GENERAL.ADMI_CANTON ACANT 
                                                            ON ACANT.ID_CANTON = IOG.CANTON_ID ";
                    
                    $strInnerJoinDepartamentoGeneral.= " INNER JOIN DB_GENERAL.ADMI_DEPARTAMENTO ADG 
                                                            ON ADG.ID_DEPARTAMENTO = IPERG.DEPARTAMENTO_ID ";    
                        
                        
                    $strInnerJoinOficinaGeneral     .= " INNER JOIN DB_COMERCIAL.INFO_OFICINA_GRUPO IOGG
                                                            ON IOGG.ID_OFICINA = IPERG.OFICINA_ID ";
                    
                    $strInnerJoinCantonGeneral      .= " INNER JOIN DB_GENERAL.ADMI_CANTON ACANTG 
                                                         ON ACANTG.ID_CANTON = IOGG.CANTON_ID ";
                    
                    $strWhereJoinDepartamento       .= " AND IPER.DEPARTAMENTO_ID        = ADG.ID_DEPARTAMENTO ";

                    $strWhereJoinOficinaCanton      .= " AND ACANTG.ID_CANTON = ACANT.ID_CANTON ";
                    
                    $strInnerJoinMonit              .= $strInnerJoinOficina . $strInnerJoinCanton;
                    
                    $strGroupByGeneral              .= " GROUP BY ACANTG.ID_CANTON, ACANTG.REGION, ACANTG.NOMBRE_CANTON, 
                                                       ADG.ID_DEPARTAMENTO, ADG.NOMBRE_DEPARTAMENTO ";
                    $strOrderByGeneral              .= "ORDER BY ACANTG.REGION, ADG.NOMBRE_DEPARTAMENTO, ACANTG.NOMBRE_CANTON  ";
                    
                    $rsm->addScalarResult('ID_FILA',        'intIdFila', 'string');
                    $rsm->addScalarResult('NOMBRE_FILA',    'strNombreFila', 'string');
                    
                }
                else
                {
                    $strSelectCountGeneral      .= "SELECT COUNT(*) AS TOTAL ";

                    $strInnerJoinMonit          .= $strInnerJoinBusqAvanzada;
                    
                }
            }
            
            

            
            $strInnerJoinMonit .= "WHERE TABLET.ESTADO = :strEstadoActivo ";
            
            $strSelect          = " SELECT DISTINCT " . $strSelectGeneral . " 
                                    (SELECT COUNT(DISTINCT(IE.ID_ELEMENTO))
                                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO IE 
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AME 
                                    ON AME.ID_MODELO_ELEMENTO = IE.MODELO_ELEMENTO_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ATE 
                                    ON ATE.ID_TIPO_ELEMENTO    = AME.TIPO_ELEMENTO_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE 
                                    ON IDE.ELEMENTO_ID = IE.ID_ELEMENTO 
                                    LEFT JOIN 
                                      (SELECT *
                                      FROM
                                        (SELECT IDEMA.*
                                        FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDEMA
                                        INNER JOIN DB_GENERAL.ADMI_MOTIVO AMA ON AMA.ID_MOTIVO = IDEMA.DETALLE_VALOR 
                                        WHERE IDEMA.DETALLE_NOMBRE = :strDetalleMotivo
                                          AND AMA.NOMBRE_MOTIVO IN (:arrayMotivosEnTotalTablets)
                                          AND IDEMA.ESTADO = :strEstadoActivo 
                                        ) 
                                      ) IDE_MOTIVOS_TOTAL
                                    ON IDE_MOTIVOS_TOTAL.ELEMENTO_ID = IE.ID_ELEMENTO 
                                    
                                    INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER
                                    ON IPER.ID_PERSONA_ROL = IDE.DETALLE_VALOR 
                                    " . $strInnerJoinBusqAvanzada . " 
                                    " . $strInnerJoinOficina . " 
                                    " . $strInnerJoinCanton . " 
                                    WHERE 
                                    ATE.NOMBRE_TIPO_ELEMENTO = :strNombreTipoElemento 
                                    " . $strWhereJoinDepartamento . " 
                                    " . $strWhereJoinOficinaCanton . "
                                    " . $strWhereCriterios . "
                                    AND ( IE.ESTADO = :strEstadoActivo 
                                          OR (IE.ESTADO = :strEstadoInactivo AND IDE_MOTIVOS_TOTAL.ID_DETALLE_ELEMENTO IS NOT NULL)
                                        )
                                    AND IDE.DETALLE_NOMBRE = :strDetalleResponsable 
                                    AND IDE.ESTADO = :strEstadoActivo
                                    AND IPER.ESTADO = :strEstadoActivo 
                                    ) AS NUM_TABLETS_TOTAL, 
                                    
                                    (SELECT COUNT(DISTINCT(IE.ID_ELEMENTO))
                                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO IE 
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AME 
                                    ON AME.ID_MODELO_ELEMENTO = IE.MODELO_ELEMENTO_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ATE 
                                    ON ATE.ID_TIPO_ELEMENTO    = AME.TIPO_ELEMENTO_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE 
                                    ON IDE.ELEMENTO_ID = IE.ID_ELEMENTO 
                                    INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER
                                    ON IPER.ID_PERSONA_ROL = IDE.DETALLE_VALOR 
                                    " . $strInnerJoinBusqAvanzada . " 
                                    " . $strInnerJoinOficina . " 
                                    " . $strInnerJoinCanton . " 
                                    WHERE 
                                    ATE.NOMBRE_TIPO_ELEMENTO = :strNombreTipoElemento 
                                    " . $strWhereJoinDepartamento . " 
                                    " . $strWhereJoinOficinaCanton . " 
                                    " . $strWhereCriterios . "
                                    AND IE.ESTADO = :strEstadoActivo
                                    AND IDE.DETALLE_NOMBRE = :strDetalleResponsable 
                                    AND IDE.ESTADO = :strEstadoActivo
                                    AND IPER.ESTADO = :strEstadoActivo 
                                    AND IPER.ID_PERSONA_ROL NOT IN (".$strQueryIntegrantesTabletCuadrillasLibres.")
                                    ) AS NUM_TABLETS_EN_CAMPO, 
                                    
                                    (SELECT COUNT(DISTINCT(IE.ID_ELEMENTO))
                                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO IE 
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AME 
                                    ON AME.ID_MODELO_ELEMENTO = IE.MODELO_ELEMENTO_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ATE 
                                    ON ATE.ID_TIPO_ELEMENTO    = AME.TIPO_ELEMENTO_ID 
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE 
                                    ON IDE.ELEMENTO_ID = IE.ID_ELEMENTO 
                                    INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER
                                    ON IPER.ID_PERSONA_ROL = IDE.DETALLE_VALOR 
                                    " . $strInnerJoinBusqAvanzada . " 
                                    " . $strInnerJoinOficina . " 
                                    " . $strInnerJoinCanton . " 
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDEM 
                                    ON IDEM.ELEMENTO_ID = IE.ID_ELEMENTO 
                                    INNER JOIN DB_GENERAL.ADMI_MOTIVO AM
                                    ON AM.ID_MOTIVO = IDEM.DETALLE_VALOR
                                    WHERE 
                                    ATE.NOMBRE_TIPO_ELEMENTO = :strNombreTipoElemento 
                                    " . $strWhereJoinDepartamento . " 
                                    " . $strWhereJoinOficinaCanton . "
                                    " . $strWhereCriterios . "
                                    AND IE.ESTADO = :strEstadoInactivo   
                                    AND IDE.DETALLE_NOMBRE = :strDetalleResponsable 
                                    AND IDEM.DETALLE_NOMBRE = :strDetalleMotivo  
                                    AND AM.NOMBRE_MOTIVO IN (:arrayMotivosEnTotalTablets)
                                    AND IDE.ESTADO = :strEstadoActivo
                                    AND IDEM.ESTADO = :strEstadoActivo
                                    AND IPER.ESTADO = :strEstadoActivo 
                                    ) AS NUM_TABLETS_MANT_LIBRE,
                                    
                                    (SELECT COUNT(DISTINCT(IE.ID_ELEMENTO))
                                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO IE 
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AME 
                                    ON AME.ID_MODELO_ELEMENTO = IE.MODELO_ELEMENTO_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ATE 
                                    ON ATE.ID_TIPO_ELEMENTO    = AME.TIPO_ELEMENTO_ID 
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE 
                                    ON IDE.ELEMENTO_ID = IE.ID_ELEMENTO 
                                    INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER
                                    ON IPER.ID_PERSONA_ROL = IDE.DETALLE_VALOR 
                                    " . $strInnerJoinBusqAvanzada . " 
                                    " . $strInnerJoinOficina . " 
                                    " . $strInnerJoinCanton . " 
                                    WHERE 
                                    ATE.NOMBRE_TIPO_ELEMENTO = :strNombreTipoElemento 
                                    " . $strWhereJoinDepartamento . " 
                                    " . $strWhereJoinOficinaCanton . "
                                    " . $strWhereCriterios . "
                                    AND IE.ESTADO = :strEstadoActivo   
                                    AND IDE.DETALLE_NOMBRE = :strDetalleResponsable 
                                    AND IDE.ESTADO = :strEstadoActivo
                                    AND IPER.ESTADO = :strEstadoActivo 
                                    AND IPER.ID_PERSONA_ROL IN (".$strQueryIntegrantesTabletCuadrillasLibres.")
                                    ) AS NUM_TABLETS_CUAD_LIBRE,
                                    
                                    (SELECT COUNT(DISTINCT(TABLET.ID_ELEMENTO))
                                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO TABLET 
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AME 
                                    ON AME.ID_MODELO_ELEMENTO = TABLET.MODELO_ELEMENTO_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ATE 
                                    ON ATE.ID_TIPO_ELEMENTO    = AME.TIPO_ELEMENTO_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE 
                                    ON IDE.ELEMENTO_ID = TABLET.ID_ELEMENTO 
                                    INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER
                                    ON IPER.ID_PERSONA_ROL = IDE.DETALLE_VALOR 
                                    " . $strInnerJoinMonit . " 
                                    " . $strWhereJoinOficinaCanton . "
                                    " . $strWhereJoinDepartamento . "
                                    " . $strWhereCriterios . "
                                    AND ATE.NOMBRE_TIPO_ELEMENTO = :strNombreTipoElemento 
                                    AND IDE.DETALLE_NOMBRE = :strDetalleResponsable 
                                    AND IDE.ESTADO = :strEstadoActivo 
                                    AND IPER.ESTADO = :strEstadoActivo 
                                    AND IPER.ID_PERSONA_ROL NOT IN (".$strQueryIntegrantesTabletCuadrillasLibres.")
                                    AND ROUND((CAST(CURRENT_TIMESTAMP AS DATE) - CAST(TABLET_MONITOREADA.FECHA_ULT_INTENTO AS DATE)) * 24 * 60 ) 
                                    <= :strMinutosMonitoreo 
                                    AND ROUND((CAST(TABLET_MONITOREADA.FECHA_ULT_INTENTO AS DATE) - CAST(TABLET_MONITOREADA.FECHA AS DATE)) * 24 * 60)
                                    = 0 
                                    ) AS NUM_TABLETS_ACTUALIZADAS,
                                    
                                    (SELECT COUNT(DISTINCT(TABLET.ID_ELEMENTO))
                                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO TABLET 
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AME 
                                    ON AME.ID_MODELO_ELEMENTO = TABLET.MODELO_ELEMENTO_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ATE 
                                    ON ATE.ID_TIPO_ELEMENTO    = AME.TIPO_ELEMENTO_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE 
                                    ON IDE.ELEMENTO_ID = TABLET.ID_ELEMENTO 
                                    INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER
                                    ON IPER.ID_PERSONA_ROL = IDE.DETALLE_VALOR 
                                    " . $strInnerJoinMonit . "
                                    " . $strWhereJoinOficinaCanton . " 
                                    " . $strWhereJoinDepartamento . "
                                    " . $strWhereCriterios . "
                                    AND ATE.NOMBRE_TIPO_ELEMENTO = :strNombreTipoElemento 
                                    AND IDE.DETALLE_NOMBRE = :strDetalleResponsable 
                                    AND IDE.ESTADO = :strEstadoActivo 
                                    AND IPER.ESTADO = :strEstadoActivo 
                                    AND IPER.ID_PERSONA_ROL NOT IN (".$strQueryIntegrantesTabletCuadrillasLibres.")
                                    AND ROUND((CAST(CURRENT_TIMESTAMP AS DATE) - CAST(TABLET_MONITOREADA.FECHA_ULT_INTENTO AS DATE)) * 24 * 60 ) 
                                    <= :strMinutosMonitoreo 
                                    AND ROUND((CAST(TABLET_MONITOREADA.FECHA_ULT_INTENTO AS DATE) - CAST(TABLET_MONITOREADA.FECHA AS DATE)) * 24 * 60)
                                    > 0  
                                    ) AS NUM_TABLETS_PROBL_GPS,
                                    
                                    
                                    (SELECT COUNT(DISTINCT(TABLET.ID_ELEMENTO))
                                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO TABLET 
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AME 
                                    ON AME.ID_MODELO_ELEMENTO = TABLET.MODELO_ELEMENTO_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ATE 
                                    ON ATE.ID_TIPO_ELEMENTO    = AME.TIPO_ELEMENTO_ID 
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE 
                                    ON IDE.ELEMENTO_ID = TABLET.ID_ELEMENTO 
                                    INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER
                                    ON IPER.ID_PERSONA_ROL = IDE.DETALLE_VALOR 
                                    " . $strInnerJoinMonit . "
                                    " . $strWhereJoinOficinaCanton . " 
                                    " . $strWhereJoinDepartamento . "
                                    " . $strWhereCriterios . "
                                    AND ATE.NOMBRE_TIPO_ELEMENTO = :strNombreTipoElemento
                                    AND IDE.DETALLE_NOMBRE = :strDetalleResponsable 
                                    AND IDE.ESTADO = :strEstadoActivo 
                                    AND IPER.ESTADO = :strEstadoActivo 
                                    AND IPER.ID_PERSONA_ROL NOT IN (".$strQueryIntegrantesTabletCuadrillasLibres.")
                                    AND ROUND((CAST(CURRENT_TIMESTAMP AS DATE) - CAST(TABLET_MONITOREADA.FECHA_ULT_INTENTO AS DATE)) * 24 * 60 ) > 
                                    :strMinutosMonitoreo
                                    ) AS NUM_TABLETS_DESACTUALIZADAS,
                                    
                                    (SELECT COUNT(DISTINCT(TABLET.ID_ELEMENTO))
                                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO TABLET 
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AME 
                                    ON AME.ID_MODELO_ELEMENTO = TABLET.MODELO_ELEMENTO_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ATE 
                                    ON ATE.ID_TIPO_ELEMENTO    = AME.TIPO_ELEMENTO_ID 
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE 
                                    ON IDE.ELEMENTO_ID = TABLET.ID_ELEMENTO 
                                    INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER
                                    ON IPER.ID_PERSONA_ROL = IDE.DETALLE_VALOR 
                                    " . $strInnerJoinBusqAvanzada . " 
                                    " . $strInnerJoinOficina . " 
                                    " . $strInnerJoinCanton . " 
                                    LEFT JOIN 
                                      (SELECT *
                                      FROM
                                        (SELECT GUPMAX.IMEI,
                                          GUPMAX.FECHA_ULT_INTENTO,
                                          GUPMAX.FECHA,
                                          GUPMAX.ID_ULTIMO_PUNTO,
                                          GUPMAX.LATITUD,
                                          GUPMAX.LONGITUD,
                                          rank() over (partition BY GUPMAX.IMEI order by GUPMAX.FECHA_ULT_INTENTO DESC, GUPMAX.ID_ULTIMO_PUNTO DESC) 
                                          rnk
                                        FROM DB_MONITOREO.GPS_ULTIMO_PUNTO GUPMAX
                                        WHERE GUPMAX.FECHA           IS NOT NULL
                                        AND GUPMAX.FECHA_ULT_INTENTO IS NOT NULL
                                        )
                                      WHERE rnk = 1
                                      ) TABLET_MONITOREADA  
                                    ON TABLET_MONITOREADA.IMEI           = TABLET.NOMBRE_ELEMENTO 
                                    WHERE TABLET.ESTADO = :strEstadoActivo 
                                    " . $strWhereJoinOficinaCanton . "
                                    AND TABLET_MONITOREADA.ID_ULTIMO_PUNTO IS NULL 
                                    " . $strWhereJoinDepartamento . "
                                    " . $strWhereCriterios . "
                                    AND ATE.NOMBRE_TIPO_ELEMENTO = :strNombreTipoElemento
                                    AND IDE.DETALLE_NOMBRE = :strDetalleResponsable 
                                    AND IDE.ESTADO = :strEstadoActivo 
                                    AND IPER.ESTADO = :strEstadoActivo 
                                    AND IPER.ID_PERSONA_ROL NOT IN (".$strQueryIntegrantesTabletCuadrillasLibres.")
                                    ) AS NUM_TABLETS_NO_MONITOREADAS 
                                    ";
            
            $strFrom            = " FROM DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPERG
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDEG
                                    ON IDEG.DETALLE_VALOR = IPERG.ID_PERSONA_ROL "
                                    .$strInnerJoinBusqAvanzadaGeneral
                                    .$strInnerJoinDepartamentoGeneral.$strInnerJoinOficinaGeneral.$strInnerJoinCantonGeneral;
            
            $strWhere           = " WHERE IDEG.DETALLE_NOMBRE = :strDetalleResponsable 
                                    AND IDEG.ESTADO = :strEstadoActivo 
                                    AND IPERG.ESTADO = :strEstadoActivo ".$strWhereCriteriosGeneral;
            
            $objNtvQuery->setParameter('strMinutosMonitoreo', $arrayParametros['strMinutosMonitoreo']);
            $objNtvQueryCount->setParameter('strMinutosMonitoreo', $arrayParametros['strMinutosMonitoreo']);
                        
            $objNtvQuery->setParameter('strEstadoActivo', $arrayParametros['strEstadoActivo']);
            $objNtvQueryCount->setParameter('strEstadoActivo', $arrayParametros['strEstadoActivo']);
            
            $objNtvQuery->setParameter('strEstadoInactivo', $arrayParametros['strEstadoInactivo']);
            $objNtvQueryCount->setParameter('strEstadoInactivo', $arrayParametros['strEstadoInactivo']);
            
            $objNtvQuery->setParameter('strDetalleResponsable', $arrayParametros['strDetalleResponsable']);
            $objNtvQueryCount->setParameter('strDetalleResponsable', $arrayParametros['strDetalleResponsable']);
            
            $objNtvQuery->setParameter('strNombreTipoElemento', $arrayParametros['strNombreTipoElemento']);
            $objNtvQueryCount->setParameter('strNombreTipoElemento', $arrayParametros['strNombreTipoElemento']);
            
            $objNtvQuery->setParameter('strDetalleMotivo', $arrayParametros['strDetalleMotivo']);
            $objNtvQueryCount->setParameter('strDetalleMotivo', $arrayParametros['strDetalleMotivo']);
            
            $objNtvQuery->setParameter('arrayMotivosEnTotalTablets', array_values($arrayParametros['arrayMotivosEnTotalTablets']));
            $objNtvQueryCount->setParameter('arrayMotivosEnTotalTablets', array_values($arrayParametros['arrayMotivosEnTotalTablets']));
            
            
            $rsm->addScalarResult('NUM_TABLETS_TOTAL', 'intNumTabletsTotal', 'integer');
            $rsm->addScalarResult('NUM_TABLETS_EN_CAMPO', 'intNumTabletsEnCampo', 'integer');
            $rsm->addScalarResult('NUM_TABLETS_MANT_LIBRE', 'intNumTabletsMantLibre', 'integer');
            $rsm->addScalarResult('NUM_TABLETS_ACTUALIZADAS', 'intNumTabletsActualizadas', 'integer');
            $rsm->addScalarResult('NUM_TABLETS_DESACTUALIZADAS', 'intNumTabletsDesactualizadas', 'integer');
            $rsm->addScalarResult('NUM_TABLETS_PROBL_GPS', 'intNumTabletsProblGPS', 'integer');
            $rsm->addScalarResult('NUM_TABLETS_NO_MONITOREADAS', 'intNumTabletsNoMonitoreadas', 'integer');
            $rsm->addScalarResult('NUM_TABLETS_CUAD_LIBRE', 'intNumTabletsCuadrillasLibres', 'integer');
            
            $rsmCount->addScalarResult('TOTAL', 'total', 'integer');
            
            $strQuery       = $strSelect . $strFrom . $strWhere . $strGroupByGeneral. $strOrderByGeneral;
            
            
            $objNtvQuery->setSQL($strQuery);            
            $arrayResultado = $objNtvQuery->getResult();
            
            $strQueryCount  = $strSelectCountGeneral . $strFrom . $strWhere;
            $objNtvQueryCount->setSQL($strQueryCount);
            
            $intTotal       = $objNtvQueryCount->getSingleScalarResult();

            $arrayRespuesta['resultado']    = $arrayResultado;
            $arrayRespuesta['total']        = $intTotal;
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        return $arrayRespuesta;
    }
    
    
    
    /**
     * Obtiene el nombre y el id del splitter segun el nivel 
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 09-02-2015
     * 
     * @param type $nivel
     * @param type $nombreSplitter
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 27-02-2020 Se agrega validación para obtener los splitters de marca ZTE en caso de que la migración 
     *                          se realice a dicha tecnología
     * 
     * 
     * @return string $data
     * */
    public function getJsonSplitterPorNivel($nivel, $nombreSplitter)
    {
        $data = '{"total":"0","encontrados":[]}';

        if($nivel && $nombreSplitter)
        {
            $rsm = new ResultSetMappingBuilder($this->_em);
            $query = $this->_em->createNativeQuery(null, $rsm);
            $nombreSplitter = strtoupper($nombreSplitter);
            $nombreElemento = strtoupper($nombreElemento);

            $sql = "SELECT i0_.ID_ELEMENTO ,
                        i0_.NOMBRE_ELEMENTO  ,
                        (SELECT NOMBRE_MARCA_ELEMENTO
                        FROM INFO_ELEMENTO E1 ,
                          INFO_INTERFACE_ELEMENTO IE1,
                          ADMI_MODELO_ELEMENTO ME1,
                          ADMI_MARCA_ELEMENTO MEL1
                        WHERE E1.ID_ELEMENTO          = IE1.ELEMENTO_ID
                        AND E1.MODELO_ELEMENTO_ID     = ME1.ID_MODELO_ELEMENTO
                        AND MEL1.ID_MARCA_ELEMENTO    = ME1.MARCA_ELEMENTO_ID
                        AND ME1.ESTADO                = :estado
                        AND MEL1.ESTADO               = :estado
                        AND IE1.ID_INTERFACE_ELEMENTO = GET_ELEMENTO_PADRE(i0_.ID_ELEMENTO,'ELEMENTO','OLT')
                        ) MARCA
                      FROM ADMI_TIPO_ELEMENTO a1_,
                        ADMI_MODELO_ELEMENTO a2_,
                        INFO_ELEMENTO i0_,
                        INFO_DETALLE_ELEMENTO i3_
                      WHERE a1_.ID_TIPO_ELEMENTO    = a2_.TIPO_ELEMENTO_ID
                      AND a2_.ID_MODELO_ELEMENTO    = i0_.MODELO_ELEMENTO_ID
                      AND i0_.ID_ELEMENTO           = i3_.ELEMENTO_ID
                      AND a1_.NOMBRE_TIPO_ELEMENTO  = :tipoElementoSplitter
                      AND a1_.ESTADO                = :estado
                      AND i3_.DETALLE_NOMBRE        = :detalleNombre
                      AND i3_.DETALLE_VALOR         = :detalleValor
                      AND UPPER(i0_.NOMBRE_ELEMENTO) LIKE :nombreElemento
                      AND i0_.ESTADO <> :estadoElemento
                      UNION
                      SELECT E.ID_ELEMENTO,
                        E.NOMBRE_ELEMENTO,
                        'HUAWEI'
                      FROM INFO_ELEMENTO E,
                        ADMI_TIPO_ELEMENTO TE,
                        ADMI_MODELO_ELEMENTO ME
                      WHERE E.MODELO_ELEMENTO_ID  = ME.ID_MODELO_ELEMENTO
                      AND ME.TIPO_ELEMENTO_ID     = TE.ID_TIPO_ELEMENTO
                      AND TE.NOMBRE_TIPO_ELEMENTO = :tipoElementoOdf
                      AND UPPER(E.NOMBRE_ELEMENTO) LIKE  :nombreElemento
                      AND E.ESTADO = :estado";

            $rsm->addScalarResult(strtoupper('ID_ELEMENTO'), 'idElemento', 'integer');
            $rsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');
            $rsm->addScalarResult(strtoupper('MARCA'), 'marca', 'string');

            $query->setParameter("nombreElemento", "%$nombreSplitter%");
            $query->setParameter("tipoElementoSplitter", 'SPLITTER');
            $query->setParameter("tipoElementoOdf", 'ODF');

            $query->setParameter("estado", "Activo");
            $query->setParameter("detalleNombre", "NIVEL");
            $query->setParameter("detalleValor", $nivel);
            $query->setParameter("estadoElemento", "Eliminado");

            $query->setSQL($sql);

            $elementos = $query->getResult();

            if($elementos)
            {
                $elementosArray = array();

                foreach($elementos as $elemento)
                {
                    //solo filtro los marca HUAWEI
                    if($elemento['marca'] == 'HUAWEI' || $elemento['marca'] == 'ZTE')
                    {
                        $elementosArray[] = array('id_elemento' => $elemento['idElemento'], 'elemento' => $elemento['nombreElemento']);
                    }
                }

                $data = '{"total":"' . count($elementos) . '","encontrados":' . json_encode($elementosArray) . '}';
            }
            return $data;
        }
    }

    /**
     * Obtiene el nombre y el id del splitter segun el nombre ingresado por el usuario
     * 
     * @author Edgar Holguin <eholguin@telconet.ec>
     * @version 1.0 25-03-2015
     * @param type $nivel
     * @param type $nombreSplitter
     * 
     * @return string $data
     * */
    public function getJsonSplitterAnterior($nivel, $nombreSplitter)
    {
        $data = '{"total":"0","encontrados":[]}';

        if($nivel && $nombreSplitter)
        {
            $rsm = new ResultSetMappingBuilder($this->_em);
            $query = $this->_em->createNativeQuery(null, $rsm);
            $nombreSplitter = strtoupper($nombreSplitter);
            $nombreElemento = strtoupper($nombreElemento);


            $sql = " SELECT i0_.ID_ELEMENTO,
                          i0_.NOMBRE_ELEMENTO,
                          i0_.DESCRIPCION_ELEMENTO
                   FROM   ADMI_TIPO_ELEMENTO a1_,
                          ADMI_MODELO_ELEMENTO a2_,
                          INFO_ELEMENTO i0_,
                          INFO_DETALLE_ELEMENTO i3_   
                   WHERE  i0_.ID_ELEMENTO 
                   IN     (select ie.REF_ELEMENTO_ID from INFO_ELEMENTO ie where ie.estado=:estadoElementoNuevo and ie.REF_ELEMENTO_ID is not null)
                   AND    a1_.ID_TIPO_ELEMENTO      = a2_.TIPO_ELEMENTO_ID
                   AND    a2_.ID_MODELO_ELEMENTO    = i0_.MODELO_ELEMENTO_ID
                   AND    i0_.ID_ELEMENTO           = i3_.ELEMENTO_ID
                   AND    a1_.NOMBRE_TIPO_ELEMENTO  = :tipoElementoSplitter
                   AND    a1_.ESTADO                = :estado
                   AND    i3_.DETALLE_NOMBRE        = :detalleNombre
                   AND    i3_.DETALLE_VALOR         = :detalleValor
                   AND    UPPER(i0_.NOMBRE_ELEMENTO) LIKE :nombreElemento
                   AND    i0_.ESTADO = :estadoElemento
                   AND    i0_.REF_ELEMENTO_ID is null";

            $rsm->addScalarResult(strtoupper('ID_ELEMENTO'), 'idElemento', 'integer');
            $rsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');

            $query->setParameter("nombreElemento", "%$nombreSplitter%");
            $query->setParameter("tipoElementoSplitter", 'SPLITTER');
            $query->setParameter("estado", "Activo");
            $query->setParameter("detalleNombre", "NIVEL");
            $query->setParameter("detalleValor", $nivel);
            $query->setParameter("estadoElemento", "Eliminado");
            $query->setParameter("estadoElementoNuevo", "Activo");

            $query->setSQL($sql);

            $elementos = $query->getResult();

            if($elementos)
            {
                $elementosArray = array();

                foreach($elementos as $elemento)
                {
                    $elementosArray[] = array('id_elemento' => $elemento['idElemento'], 'elemento' => $elemento['nombreElemento']);
                }

                $data = '{"total":"' . count($elementos) . '","encontrados":' . json_encode($elementosArray) . '}';
            }
            return $data;
        }
        return $data;
    }

    /**
     * Obtiene el nombre y el id del splitter nuevo (clonado)
     * 
     * @author Edgar Holguin <eholguin@telconet.ec>
     * @version 1.0 26-03-2015
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 01-04-2016 mostrar splitter huawei nuevos
     * 
     * @param type $nivel
     * @param type $nombreSplitter
     * 
     * @return string $data
     * */
    public function getJsonSplitterNuevo($nivel, $nombreSplitter)
    {
        $cont = 0;
        $data = '{"total":"0","encontrados":[]}';

        if($nivel && $nombreSplitter)
        {
            $rsm = new ResultSetMappingBuilder($this->_em);
            $query = $this->_em->createNativeQuery(null, $rsm);
            $nombreSplitter = strtoupper($nombreSplitter);
            $nombreElemento = strtoupper($nombreElemento);

            $sql = " SELECT i0_.ID_ELEMENTO,
                          i0_.NOMBRE_ELEMENTO,
                          i0_.DESCRIPCION_ELEMENTO,
                       (SELECT NOMBRE_MARCA_ELEMENTO
                        FROM INFO_ELEMENTO E1 ,
                          INFO_INTERFACE_ELEMENTO IE1,
                          ADMI_MODELO_ELEMENTO ME1,
                          ADMI_MARCA_ELEMENTO MEL1
                        WHERE E1.ID_ELEMENTO          = IE1.ELEMENTO_ID
                        AND E1.MODELO_ELEMENTO_ID     = ME1.ID_MODELO_ELEMENTO
                        AND MEL1.ID_MARCA_ELEMENTO    = ME1.MARCA_ELEMENTO_ID
                        AND ME1.ESTADO                = :estado
                        AND MEL1.ESTADO               = :estado
                        AND IE1.ID_INTERFACE_ELEMENTO = GET_ELEMENTO_PADRE(i0_.ID_ELEMENTO,'ELEMENTO','OLT')
                        ) MARCA
                   FROM   ADMI_TIPO_ELEMENTO a1_,
                          ADMI_MODELO_ELEMENTO a2_,
                          INFO_ELEMENTO i0_,
                          INFO_DETALLE_ELEMENTO i3_   
                   WHERE  a1_.ID_TIPO_ELEMENTO      = a2_.TIPO_ELEMENTO_ID
                   AND    a2_.ID_MODELO_ELEMENTO    = i0_.MODELO_ELEMENTO_ID
                   AND    i0_.ID_ELEMENTO           = i3_.ELEMENTO_ID
                   AND    a1_.NOMBRE_TIPO_ELEMENTO  = :tipoElementoSplitter
                   AND    a1_.ESTADO                = :estado
                   AND    i3_.DETALLE_NOMBRE        = :detalleNombre
                   AND    i3_.DETALLE_VALOR         = :detalleValor
                   AND    UPPER(i0_.NOMBRE_ELEMENTO) LIKE :nombreElemento
                   AND    i0_.ESTADO = :estadoElemento";

            $rsm->addScalarResult(strtoupper('ID_ELEMENTO'), 'idElemento', 'integer');
            $rsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');
            $rsm->addScalarResult(strtoupper('MARCA'), 'marca', 'string');

            $query->setParameter("nombreElemento", "%$nombreSplitter%");
            $query->setParameter("tipoElementoSplitter", 'SPLITTER');
            $query->setParameter("estado", "Activo");
            $query->setParameter("detalleNombre", "NIVEL");
            $query->setParameter("detalleValor", $nivel);
            $query->setParameter("estadoElemento", "Activo");
            $query->setParameter("estadoElementoAnterior", "Eliminado");

            $query->setSQL($sql);

            $elementos = $query->getResult();

            if($elementos)
            {
                $elementosArray = array();

                foreach($elementos as $elemento)
                {
                    if($elemento['marca'] == 'HUAWEI')
                    {
                        $elementosArray[] = array('id_elemento' => $elemento['idElemento'], 'elemento' => $elemento['nombreElemento']);
                        $cont++;
                    }
                }

                $data = '{"total":"' . $cont . '","encontrados":' . json_encode($elementosArray) . '}';
            }
            return $data;
        }
        return $data;
    }

    /**
     * Obtiene el nombre y el id del elemento segun parte del nombre junto con el modelo y el tipo del elemento,
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 20-01-2015
     * 
     * @param type $nombreElemento
     * @param type $idModeloElemento
     * @param type $idTipoElemento
     * @param type $emInfraestructura
     * 
     * @return string $data
     * */
    public function getElementoPorNombreModeloTipo($nombreElemento, $idModeloElemento, $idTipoElemento)
    {
        $data = '{"total":"0","encontrados":[]}';

        if($nombreElemento && $idTipoElemento)
        {

            $nombreElemento = strtoupper($nombreElemento);
            $query = $this->_em->createQuery();

            $sql = "SELECT IE.id, IE.nombreElemento
                      FROM schemaBundle:AdmiModeloElemento ME,
                           schemaBundle:InfoElemento IE 
                     WHERE IE.modeloElementoId = ME.id 
                       AND ME.tipoElementoId = :idTipoElemento
                       AND IE.estado = :estado
                       AND UPPER(IE.nombreElemento) LIKE :nombre_elemento ";

            if($idModeloElemento)
            {
                $sql .= " AND ME.id = :idModeloElemento ";
                $query->setParameter("idModeloElemento", $idModeloElemento);
            }
            $nombreTipoElemento = '';
            $objTipoElemento = $this->_em->getRepository('schemaBundle:AdmiTipoElemento')->findOneById($idTipoElemento);

            if($objTipoElemento)
            {
                $nombreTipoElemento = $objTipoElemento->getNombreTipoElemento();
                if($nombreTipoElemento == 'CAJA DISPERSION')
                {
                    $sql .="AND exists (SELECT de.id 
                                          FROM schemaBundle:InfoDetalleElemento de
                                         WHERE de.detalleNombre = :detalleNombre
                                           AND de.detalleValor = :detalleValor
                                           AND IE.id = de.elementoId)";

                    $query->setParameter("detalleNombre", "NIVEL");
                    $query->setParameter("detalleValor", "2");
                }
            }

            $query->setParameter("idTipoElemento", $idTipoElemento);
            $query->setParameter("nombre_elemento", "%$nombreElemento%");
            $query->setParameter("estado", "Activo");

            $query->setDQL($sql);
            $elementos = $query->getResult();

            if($elementos)
            {
                $elementosArray = array();

                foreach($elementos as $elemento)
                {
                    $elementosArray[] = array('id_elemento' => $elemento['id'], 'elemento' => $elemento['nombreElemento']);
                }

                $data = '{"total":"' . count($elementos) . '","encontrados":' . json_encode($elementosArray) . '}';
            }
        }
        return $data;
    }

    /**
     * Obtiene el elemento dado el id del servicio, esta informacion se encuentra registrada
     * en la tabla infoServicioTecnico
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 07-02-2019  Se agrega validación para enviar el nombre técnico del producto y obtener el servicio de INternet correcto 
     *                           para servicios Small Business y TelcoHome
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 02-05-2020  Se elimina la función obtenerInfoMapeoProdPrefYProdsAsociados y en su lugar se usa obtenerParametrosProductosTnGpon,
     *                           debido a los cambios realizados por la reestructuración de servicios Small Business
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 08-07-2022  Se valida si el producto es IP INTERNET VPNoGPON, se obtiene el id del servicio del INTERNET VPNoGPON
     *                          de la característica de la relación del producto principal
     * 
     * @param type $id_servicio
     * @return string
     */
    public function getElementoParaPerfil($id_servicio, $esPlan, $id_punto)
    {
        $em = $this->_em;
        $objSerProdCaractRelacion = null;
        //obtener el servicio que contiene el plan de internet
        if(strtolower($esPlan) == 'no')
        {
            $objServicioParam = $em->getRepository('schemaBundle:InfoServicio')->find($id_servicio);
            if(is_object($objServicioParam) && is_object($objServicioParam->getProductoId()) 
                && is_object($objServicioParam->getProductoId()->getEmpresaCod()))
            {
                $arrayParamsInfoProds   = array("strValor1ParamsProdsTnGpon"    => "PRODUCTOS_RELACIONADOS_INTERNET_IP",
                                                "strCodEmpresa"                 => $objServicioParam->getProductoId()->getEmpresaCod()->getId(),
                                                "intIdProductoIp"               => $objServicioParam->getProductoId()->getId());
                $arrayInfoMapeoProds    = $em->getRepository('schemaBundle:InfoServicio')->obtenerParametrosProductosTnGpon($arrayParamsInfoProds);
                if(isset($arrayInfoMapeoProds) && !empty($arrayInfoMapeoProds))
                {
                    $intIdProdInternet          = $arrayInfoMapeoProds[0]["intIdProdInternet"];
                    //obtengo la caracteristica del servicio principal
                    $strCaractRelProdPrincipal  = $arrayInfoMapeoProds[0]["strCaractRelProdIp"];
                    if(isset($strCaractRelProdPrincipal) && !empty($strCaractRelProdPrincipal))
                    {
                        $objCaracteristica  = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                                ->findOneBy(array("descripcionCaracteristica" => $strCaractRelProdPrincipal,
                                                                  "estado"                    => "Activo"));
                        if(is_object($objCaracteristica))
                        {
                            $objProdCaractRelacion = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                    ->findOneBy(array("productoId"          => $objServicioParam->getProductoId()->getId(),
                                                                      "caracteristicaId"    => $objCaracteristica->getId(),
                                                                      "estado"              => "Activo"));
                            if(is_object($objProdCaractRelacion))
                            {
                                $objSerProdCaractRelacion = $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                        ->findOneBy(array("servicioId"                => $objServicioParam->getId(),
                                                                          "productoCaracterisiticaId" => $objProdCaractRelacion->getId(),
                                                                          "estado"                    => "Activo"));
                            }
                        }
                    }
                }
                else
                {
                    $intIdProdInternet  = 0;
                }
            }
            else
            {
                $intIdProdInternet  = 0;
            }
            if(is_object($objSerProdCaractRelacion))
            {
                $id_servicio = $objSerProdCaractRelacion->getValor();
            }
            else
            {
                $id_servicio = $em->getRepository('schemaBundle:InfoServicio')
                                            ->getServicioByPuntoId(array("intIdPunto"            => $id_punto, 
                                                                         "intIdProdInternet"     => $intIdProdInternet));
            }

            if(strpos($id_servicio, 'Error') !== false)
                return $id_servicio;
        }

        $perfilEnt = $em->createQuery("Select a.elementoId from schemaBundle:InfoServicioTecnico a where a.servicioId = $id_servicio");
        try
        {
            $olt = $perfilEnt->getSingleScalarResult();
            if(!$olt)
                $olt = 'Error: Punto Cliente sin Plan con un Olt asignado para poder asignar IP FIJA. Favor revisar.';
        }
        catch(\Exception $e)
        {
            $olt = 'Error: Punto Cliente sin Plan con un Olt asignado para poder asignar IP FIJA. Favor revisar.';
        }

        return $olt;
    }

    /**
     * Obtiene las cajas por canton por empresa nivel y nombre del elemento
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 20-01-2015
     * 
     * @param type $nombre
     * @param type $nivel
     * @param type $idEmpresa
     * @param type $idCanton
     * 
     * @return string $data
     **/
    public function findCajasByNivelEmpresaCanton($nombre, $nivel, $idEmpresa, $idCanton)
    {
        $response = array();

        //busco las cajas
        $sql = " SELECT
		      caja.id as id_caja,
		      caja.nombreElemento as nombre_caja
		  FROM
		      schemaBundle:InfoElemento caja,
		      schemaBundle:AdmiTipoElemento caja_te,
		      schemaBundle:AdmiModeloElemento caja_me,
		      schemaBundle:InfoEmpresaElemento caja_ub,
		      schemaBundle:InfoDetalleElemento caja_det,
              schemaBundle:InfoEmpresaElementoUbica eeu,
              schemaBundle:InfoUbicacion u,
              schemaBundle:AdmiParroquia p,
              schemaBundle:AdmiCanton c
		  WHERE caja.modeloElementoId = caja_me.id
		  AND caja_me.tipoElementoId = caja_te.id
		  AND lower(caja.nombreElemento) like lower(:nombreCaja)
		  AND caja_te.nombreTipoElemento = 'CAJA DISPERSION'
		  AND caja.id = caja_ub.elementoId
		  AND caja_ub.empresaCod = :codEmpresa
		  AND caja.id = caja_det.elementoId
		  AND caja_det.detalleNombre = 'NIVEL'
		  AND caja.estado = 'Activo'
		  AND caja_det.detalleValor = :nivel
          AND eeu.elementoId = caja.id 
          AND u.id = eeu.ubicacionId 
          AND p.id = u.parroquiaId
          AND c.id = p.cantonId 
          AND c.id = :idCanton ";

        $query = $this->_em->createQuery($sql);
        if($nombre != "")
        {
            $query->setParameter('nombreCaja', '%' . $nombre . '%');
        }
        $query->setParameter('nivel', $nivel);
        $query->setParameter('codEmpresa', $idEmpresa);
        $query->setParameter('idCanton', $idCanton);

        $cajas = $query->getResult();

        foreach($cajas as $caja)
        {
            $responseItem = array();
            $responseItem['id_caja'] = $caja['id_caja'];
            $responseItem['nombre_caja'] = $caja['nombre_caja'];

            $response[] = $responseItem;
        }

        return $response;
    }

    public function findInfoCajasByNivelAndEmpresa($nombre, $nivel, $idEmpresa)
    {
        $response = array();

        //busco las cajas
        $sql = " SELECT
		      caja.id as id_caja,
		      caja.nombreElemento as nombre_caja,
		      olt.id as id_olt,
		      olt.nombreElemento as nombre_olt,
		      puerto_olt.id as id_linea,
		      puerto_olt.nombreInterfaceElemento as linea
		  FROM
		      schemaBundle:InfoRelacionElemento rel_caja_splitter,
		      schemaBundle:InfoElemento caja,
		      schemaBundle:AdmiTipoElemento caja_te,
		      schemaBundle:AdmiModeloElemento caja_me,
		      schemaBundle:InfoEmpresaElementoUbica caja_ub,
		      schemaBundle:InfoUbicacion ubicacion,
		      schemaBundle:InfoElemento splitter,
		      schemaBundle:InfoDetalleElemento caja_det,
		      schemaBundle:InfoInterfaceElemento int_splitter,
		      
		      schemaBundle:InfoEnlace enlace_l2,
		      schemaBundle:InfoEnlace enlace_l1,
		      schemaBundle:InfoInterfaceElemento puerto_olt,
		      schemaBundle:InfoInterfaceElemento puerto_spl2_in,
		      schemaBundle:InfoElemento spl1,
		      schemaBundle:InfoElemento olt,
		      schemaBundle:InfoInterfaceElemento puerto_spl1,
		      schemaBundle:InfoInterfaceElemento puerto_spl1_in
		  WHERE rel_caja_splitter.elementoIdA = caja.id 
		      AND caja.modeloElementoId = caja_me.id
		      AND caja_me.tipoElementoId = caja_te.id
		      AND caja_te.nombreTipoElemento = 'CAJA DISPERSION'
		      AND caja.id = caja_ub.elementoId
		      AND caja_ub.empresaCod = :codEmpresa
		      AND caja_ub.ubicacionId = ubicacion.id
		      AND caja.id = caja_det.elementoId
		      AND caja_det.detalleNombre = 'NIVEL'
		      AND caja_det.detalleValor = :nivel
		      AND rel_caja_splitter.elementoIdB = splitter.id
		      AND rel_caja_splitter.estado = 'Activo'
		      AND splitter.id = int_splitter.elementoId
		      AND int_splitter.estado = 'not connect'
		      AND int_splitter.nombreInterfaceElemento not like 'IN%' 
		      
		      AND puerto_spl2_in.nombreInterfaceElemento = 'IN 1'
		      AND puerto_spl2_in.elementoId = splitter.id
		      AND enlace_l2.interfaceElementoFinId = puerto_spl2_in.id
		      AND puerto_spl1.id = enlace_l2.interfaceElementoIniId
		      AND spl1.id = puerto_spl1.elementoId
		      AND puerto_spl1_in.nombreInterfaceElemento = 'IN 1'
		      AND puerto_spl1_in.elementoId = spl1.id
		      AND enlace_l1.interfaceElementoFinId = puerto_spl1_in.id
		      AND puerto_olt.id = enlace_l1.interfaceElementoIniId
		      AND puerto_olt.elementoId = olt.id";



        $query = $this->_em->createQuery($sql);
        if($nombre != "")
        {
            $query->where('caja.nombreElemento like ?1');
            $query->setParameter(1, '%' . $nombre . '%');
        }
        else
        {
            $query->where('caja.nombreElemento like ?1');
            $query->setParameter(1, '%%');
        }
        $query->setParameter('nivel', $nivel);
        $query->setParameter('codEmpresa', $idEmpresa);

        $cajas = $query->getResult();

        foreach($cajas as $caja)
        {
            $responseItem = array();
            $responseItem['id_caja'] = $caja['id_caja'];
            $responseItem['nombre_caja'] = $caja['nombre_caja'];
            $responseItem['id_olt'] = $caja['id_olt'];
            $responseItem['nombre_olt'] = $caja['nombre_olt'];
            $responseItem['id_linea'] = $caja['id_linea'];
            $responseItem['linea'] = $caja['linea'];

            $response[] = $responseItem;
        }

        return $response;
    }

    public function findInfoCajaByIdCaja($idCaja)
    {
        $response = array();
        $response['id_caja'] = "";
        $response['nombre_caja'] = "";
        $response['id_olt'] = "";
        $response['nombre_olt'] = "";
        $response['id_linea'] = "";
        $response['linea'] = "";
        //busco las cajas
        $sql = " SELECT
		      distinct(caja.id) as id_caja,
		      caja.nombreElemento as nombre_caja,
		      olt.id as id_olt,
		      olt.nombreElemento as nombre_olt,
		      puerto_olt.id as id_linea,
		      puerto_olt.nombreInterfaceElemento as linea
		  FROM
		      schemaBundle:InfoRelacionElemento rel_caja_splitter,
		      schemaBundle:InfoElemento caja,
		      schemaBundle:InfoElemento splitter,
		      schemaBundle:InfoInterfaceElemento int_splitter,
		      
		      schemaBundle:InfoEnlace enlace_l2,
		      schemaBundle:InfoEnlace enlace_l1,
		      schemaBundle:InfoInterfaceElemento puerto_olt,
		      schemaBundle:InfoInterfaceElemento puerto_spl2_in,
		      schemaBundle:InfoElemento spl1,
		      schemaBundle:InfoElemento olt,
		      schemaBundle:InfoInterfaceElemento puerto_spl1,
		      schemaBundle:InfoInterfaceElemento puerto_spl1_in
		  WHERE rel_caja_splitter.elementoIdA = caja.id 
		      AND caja.id = :idCaja
		      AND rel_caja_splitter.elementoIdB = splitter.id
		      AND rel_caja_splitter.estado = 'Activo'
		      AND splitter.id = int_splitter.elementoId
		      
		      AND puerto_spl2_in.nombreInterfaceElemento = 'IN 1'
		      AND puerto_spl2_in.elementoId = splitter.id
		      AND enlace_l2.interfaceElementoFinId = puerto_spl2_in.id
		      AND puerto_spl1.id = enlace_l2.interfaceElementoIniId
		      AND enlace_l2.estado = 'Activo'
		      AND spl1.id = puerto_spl1.elementoId
		      AND puerto_spl1_in.nombreInterfaceElemento = 'IN 1'
		      AND puerto_spl1_in.elementoId = spl1.id
		      AND enlace_l1.interfaceElementoFinId = puerto_spl1_in.id
		      AND puerto_olt.id = enlace_l1.interfaceElementoIniId
		      AND enlace_l1.estado = 'Activo'
		      AND puerto_olt.elementoId = olt.id";



        $query = $this->_em->createQuery($sql);
        $query->setParameter('idCaja', $idCaja);

        try
        {
            $caja = $query->getOneOrNullResult();
        }
        catch(\Exception $e)
        {
            return " con mas de un Enlace. Favor corregir.";
        }

        if($caja)
        {
            $response['id_caja'] = $caja['id_caja'];
            $response['nombre_caja'] = $caja['nombre_caja'];
            $response['id_olt'] = $caja['id_olt'];
            $response['nombre_olt'] = $caja['nombre_olt'];
            $response['id_linea'] = $caja['id_linea'];
            $response['linea'] = $caja['linea'];
        }
        else
        {
            return "No existe enlace. Favor notificar a GIS para su corrección.";
        }

        return $response;
    }

    /**
     * Documentación para el método 'findInfoCajaByIdElementoDistribucion'.
     *
     * Obtiene información del elemento distribuidor y el elemento padre mediante el id del elemento distribuidor y id del elemento contenedor
     * 
     * @param array $arrayParametros[
     *                              'intIdElementoContenedor'   => Recibe el id del elemento contenedor
     *                              'intIdElementoDistribucion' => Recibe el id del elemento distribuidor
     *                              'strTipoBusqueda'           => Recibe si es ELEMENTO para realizar la busqueda del elemento padre
     *                              'strNombreElementoPadre'    => Recibe el nombre del elemento padre
     *                              ]
     * 
     * @return array $arrayResponse.
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 30-03-2015
     * 
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.1 14-04-2016 Se modifca el modo en que el metodo recibe los parametros para la busqueda.
     * 
     * @author John Vera R. <javera@telconet.ec>
     * @version 1.2 02-08-2017 Se valida el objeto $entityInfoElementoContenedor
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 14-06-2021 Se verifica si el tipo de red es GPON debe validar el elemento olt sea multiplataforma
     *
     * @since 1.0
     */
    public function findInfoCajaByIdElementoDistribucion($arrayParametros)
    {
        $arrayResponse                  = array();
        $arrayResponse['id_caja']       = "";
        $arrayResponse['nombre_caja']   = "";
        $arrayResponse['id_olt']        = "";
        $arrayResponse['nombre_olt']    = "";
        $arrayResponse['id_linea']      = "";
        $arrayResponse['linea']         = "";

        $arrayElementoContenedor = $this->getElementoPadre($arrayParametros['intIdElementoDistribucion'],
                                                           $arrayParametros['strTipoBusqueda'],
                                                           $arrayParametros['strNombreElementoPadre']);
        if(!$arrayElementoContenedor)
        {
            return $arrayParametros['strNombreElementoPadre'] . " con Enlaces incorrectos. Favor GIS corregir.";
        }

        $entityInfoInterfaceElemento  = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                             ->find($arrayElementoContenedor[0]['IDINTERFACEELEMENTO']);
        $entityInfoElemento           = $this->_em->getRepository('schemaBundle:InfoElemento')
                                             ->find($entityInfoInterfaceElemento->getElementoId());
        if(isset($arrayParametros['booleanTipoRedGpon']) && $arrayParametros['booleanTipoRedGpon'] === true)
        {
            $strDetalleMulti         = "MULTIPLATAFORMA";
            $arrayParametrosDetMulti = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                            'COMERCIAL',
                                                                                            '',
                                                                                            'NOMBRES PARAMETROS DETALLES MULTIPLATAFORMA',
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            '');
            if(isset($arrayParametrosDetMulti) && !empty($arrayParametrosDetMulti)
               && isset($arrayParametrosDetMulti['valor1']) && !empty($arrayParametrosDetMulti['valor1']))
            {
                $strDetalleMulti = $arrayParametrosDetMulti['valor1'];
            }
            $objDetMultiplataforma  = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                           ->findOneBy(array("elementoId"    => $entityInfoElemento->getId(),
                                                             "detalleNombre" => $strDetalleMulti,
                                                             "detalleValor"  => "SI",
                                                             "estado"        => "Activo"));
            if(!is_object($objDetMultiplataforma))
            {
                return "Elemento <b>" . $entityInfoElemento->getNombreElemento()."</b> no es multiplataforma.";
            }
        }
        $entityInfoElementoContenedor = $this->_em->getRepository('schemaBundle:InfoElemento')->find($arrayParametros['intIdElementoContenedor']);

        if(is_object($entityInfoElementoContenedor))
        {
            $arrayResponse['id_caja']                   = $entityInfoElementoContenedor->getId();
            $arrayResponse['nombre_caja']               = $entityInfoElementoContenedor->getNombreElemento();
        }
        $arrayResponse['id_olt']                    = $entityInfoElemento->getId();
        $arrayResponse['nombre_olt']                = $entityInfoElemento->getNombreElemento();
        $arrayResponse['strNombreTipoElemento']     = $entityInfoElemento->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();
        $arrayResponse['strNombreModeloElemento']   = $entityInfoElemento->getModeloElementoId()->getNombreModeloElemento();
        $arrayResponse['id_linea']                  = $entityInfoInterfaceElemento->getId();
        $arrayResponse['linea']                     = $entityInfoInterfaceElemento->getNombreInterfaceElemento();
        $arrayResponse['marca_olt']                 = $entityInfoElemento->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
        return $arrayResponse;
    } //findInfoCajaByIdElementoDistribucion

    /**
     * Documentación para el método 'generarJsonInfoCajaByIdCajaOrIdElementoDistribuidor'.
     *
     * Obtiene información del elemento distribuidor y el elemento padre mediante el id del elemento distribuidor y id del elemento contenedor
     * @param array $arrayParametros[
     *                              'intIdElementoContenedor'   => Recibe el id del elemento contenedor
     *                              'intIdElementoDistribucion' => Recibe el id del elemento distribuidor
     *                              'strTipoBusqueda'           => Recibe si es ELEMENTO para realizar la busqueda del elemento padre
     *                              'strNombreElementoPadre'    => Recibe el nombre del elemento padre
     *                              ]
     * 
     * @return array response.
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 30-03-2015
     * 
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.1 14-04-2016 Se cambia el parametro de entrada a Array se hace la llamada al metodo findInfoCajaByIdElementoDistribucion
     * @since 1.0
     * 
     */
    public function generarJsonInfoCajaByIdCajaOrIdElementoDistribuidor($arrayParametros)
    {

        $infoCaja = "Error: Sin parametros para consultar";
        
        if($arrayParametros['intIdElementoDistribucion'] > 0)
        {
            $infoCaja = $this->findInfoCajaByIdElementoDistribucion($arrayParametros);
        }
        elseif($arrayParametros['intIdElementoContenedor'] > 0)
        {
            $infoCaja = $this->findInfoCajaByIdCaja($arrayParametros['intIdElementoContenedor']);
        }

        if(is_string($infoCaja))
        {
            $response = array('idElemento' => "",
                'nombreElemento' => "",
                'idOlt' => "",
                'olt' => "",
                'marcaOlt' => "",
                'idLinea' => "",
                'linea' => "",
                'error' => 1,
                'msg' => $infoCaja
            );
        }
        elseif($infoCaja)
        {
            $response = array('idElemento'                => $infoCaja['id_caja'],
                                'nombreElemento'          => $infoCaja['nombre_caja'],
                                'idOlt'                   => $infoCaja['id_olt'],
                                'olt'                     => $infoCaja['nombre_olt'],
                                'marcaOlt'                => $infoCaja['marca_olt'],
                                'strNombreTipoElemento'   => $infoCaja['strNombreTipoElemento'],
                                'strNombreModeloElemento' => $infoCaja['strNombreModeloElemento'],
                                'idLinea'                 => $infoCaja['id_linea'],
                                'linea'                   => $infoCaja['linea'],
                                'error'                   => 0,
                                'msg'                     => ""
                             );
        }
        else
        {
            $response = array('idElemento' => 0,
                'nombreElemento' => "Sin Datos",
                'idOlt' => 0,
                'olt' => "Sin Datos",
                'marcaOlt' => 'Sin Datos',
                'idLinea' => 0,
                'linea' => "Sin Datos",
                'error' => 0,
                'msg' => ""
            );
        }

        $response = json_encode($response);

        return $response;
    }

    
        /**
    * 
    * getJsonCajasNodoCliente 
    * obtiene las cajas que no esten en un nodo cliente
    * 
    * @param integer $nivel     
    * @param integer $idEmpresa    
    * @param string $nombre       
    * 
    * @return json $resultado
    *
    * @author John Vera <javera@telconet.ec>
    * @version 1.0 28-12-2015
	*/  
    
    public function getJsonCajasNodoCliente ($nombre, $nivel, $idEmpresa, $idCanton)
    {
        $arr_encontrados = array();
        $encontrados = $this->findCajasByNivelEmpresaCanton($nombre, $nivel, $idEmpresa, $idCanton);

        if($encontrados)
        {

            foreach($encontrados as $entidad)
            {
                $objRelacionElemento = $this->_em->getRepository('schemaBundle:InfoRelacionElemento')
                                          ->findOneBy(array("elementoIdB"   => $entidad['id_caja'],
                                                            "estado"        => "Activo",
                                                            "observacion"   => "Nodo Cliente contiene Caja"));
                if(!$objRelacionElemento)
                {
                    $arr_encontrados[] = array( 'idElemento'    => $entidad['id_caja'],
                                                'nombreElemento'=> $entidad['nombre_caja']
                    );
                }
            }
            $num = count($arr_encontrados);

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    
    /**
    * 
    * getJsonElementosPseudoPe
    * obtiene las cajas que no esten en un nodo cliente
    * 
    * @param array $arrayParametros      
    * 
    * @return json $resultado
    *
    * @author John Vera <javera@telconet.ec>
    * @version 1.0 28-12-2015
	*/  
    
    public function getJsonElementosPseudoPe($arrayParametros)
    {
        $arrayResultado = $this->getElementosPseudoPe($arrayParametros);

        if($arrayResultado)
        {
            $arrayElementos = array();

            foreach($arrayResultado as $elemento)
            {
                $arrayElementos[] = array('idElemento' => $elemento['intIdElemento'], 'nombreElemento' => $elemento['strNombreElemento']);
            }
            $data = '{"total":"' . count($arrayResultado) . '","encontrados":' . json_encode($arrayElementos) . '}';            
        }
        return $data;
    }

    /**
    * 
    * getJsonElementosPseudoPe
    * obtiene las cajas que no esten en un nodo cliente
    * 
    * @param array $arrayParametros      
    * 
    * @return json $resultado
    *
    * @author John Vera <javera@telconet.ec>
    * @version 1.0 28-12-2015
    * 
    * @author Allan Suarez <arsuarez@telconet.ec>
    * @version 1.1 19-04-2017 - Se agrega condicional para filtrar registros Routers marcados como PseudoPe
	*/  
    
    public function getElementosPseudoPe($arrayParametros)
    {
        $strTipoElemento  = $arrayParametros['strTipoElemento'];
        $strNombre        = strtoupper($arrayParametros['strNombre']);
        
        $objRsm = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $strWhere = "";
        $strFrom  = "";
        
        if($strTipoElemento == 'ROUTER')
        {
            $strFrom  = " ,DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DE ";
            $strWhere = " AND DE.ELEMENTO_ID               = E.ID_ELEMENTO
                          AND DE.DETALLE_NOMBRE            = :detalle
                          AND DE.DETALLE_VALOR             = :valor" ;
            
            $objQuery->setParameter("detalle", 'ES_PSEUDO_PE');
            $objQuery->setParameter("valor", 'SI');
        }

        $sql = "SELECT E.ID_ELEMENTO, 
                       E.NOMBRE_ELEMENTO
                  FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO E,
                       DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TE,
                       DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO ME
                       $strFrom
                 WHERE E.MODELO_ELEMENTO_ID = ME.ID_MODELO_ELEMENTO
                   AND ME.TIPO_ELEMENTO_ID  = TE.ID_TIPO_ELEMENTO
                   AND TE.DESCRIPCION_TIPO_ELEMENTO = :tipoElemento
                   AND UPPER(E.NOMBRE_ELEMENTO) like :nombreElemento 
                   $strWhere
                   AND E.ESTADO = :estado ";

        $objRsm->addScalarResult(strtoupper('ID_ELEMENTO'), 'intIdElemento', 'integer');
        $objRsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'strNombreElemento', 'string');

        $objQuery->setParameter("estado", "Activo");
        $objQuery->setParameter("tipoElemento", $strTipoElemento);
        $objQuery->setParameter("nombreElemento", '%'.$strNombre.'%');
        
        $objQuery->setSQL($sql);

        return $objQuery->getResult();

    }

    public function findElementoBackboneByInterfaceConectorId($idInterfaceSplitter){
	
	$sql = "SELECT
		    puerto_olt
		FROM
		    schemaBundle:InfoEnlace enlace_l2,
		    schemaBundle:InfoEnlace enlace_l1,
		    schemaBundle:InfoInterfaceElemento puerto_olt,
		    schemaBundle:InfoInterfaceElemento puerto_spl2,
		    schemaBundle:InfoElemento spl2,
		    schemaBundle:InfoInterfaceElemento puerto_spl2_in,
		    schemaBundle:InfoElemento spl1,
		    schemaBundle:InfoElemento olt,
		    schemaBundle:InfoInterfaceElemento puerto_spl1,
		    schemaBundle:InfoInterfaceElemento puerto_spl1_in
		WHERE
		    puerto_spl2.id = :idInterfaceSplitter
		AND spl2.id = puerto_spl2.elementoId
		AND puerto_spl2_in.nombreInterfaceElemento = 'IN 1'
		AND puerto_spl2_in.elementoId = spl2.id
		AND enlace_l2.interfaceElementoFinId = puerto_spl2_in.id
		AND puerto_spl1.id = enlace_l2.interfaceElementoIniId
		AND enlace_l2.estado = 'Activo'
		AND spl1.id = puerto_spl1.elementoId
		AND puerto_spl1_in.nombreInterfaceElemento = 'IN 1'
		AND puerto_spl1_in.elementoId = spl1.id
		AND enlace_l1.interfaceElementoFinId = puerto_spl1_in.id
		AND puerto_olt.id = enlace_l1.interfaceElementoIniId
		AND enlace_l1.estado = 'Activo'
		AND puerto_olt.elementoId = olt.id";

        $query = $this->_em->createQuery($sql);
        $query->setParameter('idInterfaceSplitter', $idInterfaceSplitter);

        try
        {
            $infoElementoOlt = $query->getOneOrNullResult();
        }
        catch(\Exception $e)
        {
            return " con mas de un Enlace. Se envio una solicitud a GIS para la Factibilidad.";
        }

        return $infoElementoOlt;
    }

    /**
    * Costo: 3
    *
    * getTiposElementos
    * Obtiene los tipos de elementos
    *
    * @param array $arrayParametros[ "strNombreTipoElemento" => nombre del tipo de elemento
    *                                "strEstado"             => estado del tipo de elemento ]
    *
    * @return array $arrayRespuesta
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 08-03-2018
	*/
    public function getTiposElementos($arrayParametros)
    {
        $objQuery              = $this->_em->createQuery();
        $arrayRespuesta        = array();
        $strNombreTipoElemento = $arrayParametros['strNombreTipoElemento'];
        $strEstado             = $arrayParametros['strEstado'];

        $strSql = " SELECT ate
                        FROM schemaBundle:AdmiTipoElemento ate
                        WHERE ate.estado = :paramEstado ";

        $objQuery->setParameter("paramEstado", $strEstado);

        if($strNombreTipoElemento != "")
        {
            $strSql .= " AND ate.nombreTipoElemento LIKE :paramNombreTipoElemento ";
            $objQuery->setParameter("paramNombreTipoElemento", '%'.$strNombreTipoElemento.'%');
        }

        $objQuery->setDQL($strSql);

        $arrayRespuesta = $objQuery->getResult();

        return $arrayRespuesta;
    }


    /**
    * Costo: 3
    *
    * getOficinasPorEmpresa
    * Obtiene las empresas por empresa
    *
    * @param array $arrayParametros[ "strNombreOficina" => nombre de la oficina ]
    *
    * @return array $arrayRespuesta
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 08-03-2018
	*/
    public function getOficinasPorEmpresa($arrayParametros)
    {
        $objQuery         = $this->_em->createQuery();
        $arrayRespuesta   = array();
        $strNombreOficina = $arrayParametros['strNombreOficina'];

        $strSql = " select iog FROM schemaBundle:InfoOficinaGrupo iog ";

        if($strNombreOficina != "")
        {
            $strSql .= " WHERE upper(iog.nombreOficina) LIKE upper(:paramNombreOficina) ";
            $objQuery->setParameter("paramNombreOficina", '%'.$strNombreOficina.'%');
        }

        $objQuery->setDQL($strSql);

        $arrayRespuesta = $objQuery->getResult();

        return $arrayRespuesta;
    }


    /**
    * Costo: 6
    *
    * getModelosElementos
    * Obtiene los tipos de elementos
    *
    * @param array $arrayParametros[ "strNombreModeloElemento" => nombre del modelo de elemento
    *                                "intTipoElementoId"       => tipo de elemento
    *                                "strEstado"               => estado de los modelos de elementos ]
    *
    * @return array $arrayRespuesta
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 08-03-2018
	*/
    public function getModelosElementos($arrayParametros)
    {
        $objQuery                = $this->_em->createQuery();
        $strNombreModeloElemento = $arrayParametros['strNombreModeloElemento'];
        $intTipoElementoId       = $arrayParametros['intTipoElementoId'];
        $strEstado               = $arrayParametros['strEstado'];
        $arrayRespuesta          = array();

        $strSql = " SELECT ame
                        FROM schemaBundle:AdmiModeloElemento ame
                        WHERE ame.estado = :paramEstado
                        AND ame.tipoElementoId = :paramTipoElementoId ";

        $objQuery->setParameter("paramEstado", $strEstado);
        $objQuery->setParameter("paramTipoElementoId", $intTipoElementoId);

        if($strNombreModeloElemento != "")
        {
            $strSql .= " AND ame.nombreModeloElemento LIKE :paramNombreModeloElemento ";
            $objQuery->setParameter("paramNombreModeloElemento", '%'.$strNombreModeloElemento.'%');
        }

        $objQuery->setDQL($strSql);

        $arrayRespuesta = $objQuery->getResult();

        return $arrayRespuesta;
    }


    /**
    * Costo: 4
    *
    * getTrazabilidadElemento
    * Obtiene la trazabilidad de un elemento
    *
    * @param array $arrayParametros[ "strNumeroSerie" => numero de la serie del elemento ]
    *
    * @return array $arrayRespuesta
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 08-03-2018
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.1 23-04-2018 - Se ordena en forma descendente la consulta
	*/
    public function getTrazabilidadElemento($arrayParametros)
    {
        $objQuery       = $this->_em->createQuery();
        $strNumeroSerie = $arrayParametros['strNumeroSerie'];

        $strSql = " SELECT iet
                        FROM schemaBundle:InfoElementoTrazabilidad iet
                        WHERE iet.numeroSerie = :paramSerie ORDER BY iet.id DESC";

        $objQuery->setParameter("paramSerie", $strNumeroSerie);

        $objQuery->setDQL($strSql);

        $arrayRespuesta = $objQuery->getResult();

        return $arrayRespuesta;
    }


    /**
    * Costo: 6
    *
    * getRegistroNaf
    * Obtiene la fecha de creacion del Naf, registrada en la tabla de trazabilidad del elemento
    *
    * @param array $arrayParametros[ "strNumeroSerie" => numero de la serie del elemento ]
    *
    * @return array $arrayRespuesta
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 19-03-2018
	*/
    public function getRegistroNaf($arrayParametros)
    {
        $objQuery       = $this->_em->createQuery();
        $arrayRespuesta = array();
        $strNumeroSerie = $arrayParametros['strNumeroSerie'];

        $strSql = " SELECT iet2 FROM schemaBundle:InfoElementoTrazabilidad iet2
                        WHERE iet2.id = (
                        SELECT MIN(iet.id)
                        FROM schemaBundle:InfoElementoTrazabilidad iet
                        WHERE iet.numeroSerie = :paramSerie AND iet.feCreacionNaf IS NOT NULL ) ";

        $objQuery->setParameter("paramSerie", $strNumeroSerie);

        $objQuery->setDQL($strSql);

        $arrayRespuesta = $objQuery->getResult();

        return $arrayRespuesta[0];
    }


    /**
    * Costo: 5
    *
    * getExisteSerieTelcos
    * Esta funcion busca el numero de la serie en el Telcos
    *
    * @param array $arrayParametros[ "strNumeroSerie" => numero de la serie del elemento ]
    *
    * @return integer $intCantidadElementos
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 20-04-2018
	*/
    public function getExisteSerieTelcos($arrayParametros)
    {
        $objQuery       = $this->_em->createQuery();
        $arrayRespuesta = array();

        $strSql = " SELECT COUNT(iele.id) FROM schemaBundle:InfoElemento iele
                        WHERE upper(iele.serieFisica) = upper( :paramSerieFisica ) ";

        $objQuery->setParameter("paramSerieFisica", $arrayParametros["strNumeroSerie"]);

        $objQuery->setDQL($strSql);

        $intCantidadElementos = $objQuery->getSingleScalarResult();

        return $intCantidadElementos;
    }


    /**
    * Costo: 18
    *
    * getElementosAuditoria
    * Obtiene los elementos para la auditoria
    *
    * @param array $arrayParametros[ "strCriterio"      => criterio de busqueda: Login,Identificacion,Razon Social
    *                                "strValor"         => valor ingresado del criterio de busqueda elegido
    *                                "intModelo"        => id del modelo de elemento
    *                                "strSerie"         => serie del elemento
    *                                "strCodEmpresa"    => codigo de la empresa
    *                                "strResponsable"   => responsable del elemento
    *                                "strUbicacion"     => ubicacion del elemento
    *                                "strEstado"        => estado del activo
    *                                "intStart"         => inicio del pagineo
    *                                "intLimit"         => fin del pagineo ]
    *
    * @return array $arrayRespuesta
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 08-03-2018
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.1 12-04-2018 Se realizan ajustes para consultar las series en el NAF, cuando no esten en la trazabilidad ni en el telcos
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.2 20-04-2018 - Se realizan ajustes para no considerar mayusculas ni minusculas en el numero de la serie
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.3 02-08-2018 Se realizan ajustes para consultar la descripcion,marca y modelo de las series que estan en la trazabilidad en
    *                         estado: PendienteInstalar y no se encuentran en telcos aun
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.4 27-11-2020 Se realiza ajustes en el query principal para reducir el costo
    *
    * @author Germán Valenzuela <gvalenzuela@telconet.ec>
    * @version 1.5 20-07-2021 - Se agrega en el criterio por Nodo.
    *
    * @author Anthony Santillan <asantillany@telconet.ec>
    * @version 1.6 23-06-2023 - Se agrega el filtro por numero de serie en la tabla InfoElementoTrazabilidad.
	*/
    public function getElementosAuditoria($arrayParametros)
    {
        $objQuery           = $this->_em->createQuery();
        $objQuery2          = $this->_em->createQuery();
        $arrayRespuesta     = array();
        $arrayRegistros     = array();
        $strWhere           = "";
        $strWhereCriterio   = "";
        $strBanderaElemento = "N";
        $strCriterio        = $arrayParametros['strCriterio'];
        $strValor           = $arrayParametros['strValor'];
        $intModelo          = $arrayParametros['intModelo'];
        $strSerie           = $arrayParametros['strSerie'];
        $strResponsable     = $arrayParametros['strResponsable'];
        $strUbicacion       = $arrayParametros['strUbicacion'];
        $strEstado          = $arrayParametros['strEstado'];
        $intStart           = $arrayParametros['intStart'];
        $intLimit           = $arrayParametros['intLimit'];
        $strFechaDesde      = $arrayParametros['strFechaDesde'];
        $strFechaHasta      = $arrayParametros['strFechaHasta'];
        $strOficina         = $arrayParametros['strOficina'];
        $intOficina         = $arrayParametros['intOficina'];
        $emNaf              = $arrayParametros['emNaf'];

        $strSql = " SELECT
                        iet.numeroSerie,

                        (select ie8.nombreElemento from schemaBundle:InfoElemento ie8 where ie8.id = (
                            select max(ie7.id) from schemaBundle:InfoElemento ie7 where UPPER(ie7.serieFisica) = UPPER(iet.numeroSerie))) descripcionElemento,

                        (select ie10.feCreacion from schemaBundle:InfoElemento ie10 where ie10.id = (
                            select max(ie9.id) from schemaBundle:InfoElemento ie9 where UPPER(ie9.serieFisica) = UPPER(iet.numeroSerie))) feCreacionElemento,

                        (select ate3.nombreTipoElemento from schemaBundle:AdmiTipoElemento ate3 where ate3.id = (
                            select IDENTITY(ame2.tipoElementoId) from schemaBundle:AdmiModeloElemento ame2 where ame2.id = (
                            select IDENTITY(ie6.modeloElementoId) from schemaBundle:InfoElemento ie6 where ie6.id = (
                            select max(ie5.id) from schemaBundle:InfoElemento ie5 where UPPER(ie5.serieFisica) = UPPER(iet.numeroSerie))))) tipo,

                        (select ame1.nombreMarcaElemento from schemaBundle:AdmiMarcaElemento ame1 where ame1.id = (
                            select IDENTITY(ame.marcaElementoId) from schemaBundle:AdmiModeloElemento ame where ame.id = (
                            select IDENTITY(ie4.modeloElementoId) from schemaBundle:InfoElemento ie4 where ie4.id = (
                            select max(ie3.id) from schemaBundle:InfoElemento ie3 where UPPER(ie3.serieFisica) = UPPER(iet.numeroSerie))))) marca,

                        (select ame4.nombreModeloElemento from schemaBundle:AdmiModeloElemento ame4 where ame4.id = (
                            select IDENTITY(ie.modeloElementoId) from schemaBundle:InfoElemento ie where ie.id = (
                            select max(ie2.id) from schemaBundle:InfoElemento ie2 where UPPER(ie2.serieFisica) = UPPER(iet.numeroSerie)))) modelo,
                        iet.estadoTelcos,
                        iet.estadoNaf,
                        iet.estadoActivo,
                        iet.feCreacion,
                        iet.codEmpresa,
                        iet.observacion,
                        iet.ubicacion,
                        iet.login,
                        iet.responsable
                        FROM schemaBundle:InfoElementoTrazabilidad iet WHERE iet.numeroSerie = iet.numeroSerie ";

        if($strSerie != "")
        {
            $strWhere .= " AND iet.id = ( SELECT MAX(iet2.id) FROM schemaBundle:infoElementoTrazabilidad iet2
                         WHERE UPPER(iet2.numeroSerie) = UPPER(:paramSerie) ) ";

            $objQuery->setParameter("paramSerie", $strSerie);
        }
        else
        {
            $strSql .= " AND iet.id IN (SELECT MAX(iet3.id) FROM schemaBundle:InfoElementoTrazabilidad iet3 
                                        WHERE iet3.numeroSerie = iet.numeroSerie
                                        GROUP BY iet3.numeroSerie ) ";
        }

        if($strEstado != "")
        {
            $strWhere .= " AND iet.estadoActivo = :paramEstado";

            $objQuery->setParameter("paramEstado", $strEstado);
        }

        if($strFechaDesde != "")
        {
            $arrayFechaDesde = explode("-", $strFechaDesde);
            $dateFechaDesde = date("Y/m/d", strtotime($arrayFechaDesde[2] . "-" . $arrayFechaDesde[1] . "-" . $arrayFechaDesde[0]));

            $strWhere .= " AND iet.feCreacion >= :paramFechaDesde ";
            $objQuery->setParameter('paramFechaDesde',  trim($dateFechaDesde) );
        }

        if($strFechaHasta != "")
        {
            $arrayFechaHasta = explode("-", $strFechaHasta);
            $dateFechaHasta = strtotime ( '+1 day' , strtotime ($arrayFechaHasta[2] . "-" . $arrayFechaHasta[1] . "-" . $arrayFechaHasta[0]));
            $dateFechaHasta = date ( 'Y/m/d' , $dateFechaHasta );

            $strWhere .= " AND iet.feCreacion <= :paramFechaHasta ";
            $objQuery->setParameter('paramFechaHasta',  trim($dateFechaHasta) );
        }

        if($intOficina != "")
        {
            $strWhere .= " AND iet.oficinaId = :paramOficina";

            $objQuery->setParameter("paramOficina", $intOficina);
        }

        if ($strCriterio == "login" || $strCriterio == 'nodo')
        {
            $strWhere .= " AND iet.login = :paramValor";
            $objQuery->setParameter("paramValor", $strValor);
        }
        else if($strCriterio == "identificacion" || $strCriterio == "razonSocial")
        {
            $strWhereCriterio = " AND iet.login IN (
                                        SELECT infoPunto.login FROM schemaBundle:InfoPunto infoPunto WHERE infoPunto.personaEmpresaRolId IN (
                                        SELECT infoPersonaEmpresa.id FROM schemaBundle:InfoPersonaEmpresaRol infoPersonaEmpresa
                                        WHERE infoPersonaEmpresa.personaId IN (
                                        SELECT infoPersona.id
                                        FROM schemaBundle:InfoPersona infoPersona WHERE ";

            if($strCriterio == "identificacion")
            {
                $strWhere .= $strWhereCriterio . " infoPersona.identificacionCliente = :paramValor))) ORDER BY iet.numeroSerie ";
            }
            else if($strCriterio == "razonSocial")
            {
                $strWhere .= $strWhereCriterio . " infoPersona.razonSocial = :paramValor))) ORDER BY iet.numeroSerie ";
            }

            $objQuery->setParameter("paramValor", $strValor);
        }

        if($intModelo != "")
        {
            $strWhere .= " AND iet.numeroSerie IN ( SELECT infoElemento.serieFisica FROM schemaBundle:InfoElemento infoElemento
                            WHERE infoElemento.modeloElementoId = :paramModelo and infoElemento.serieFisica IS NOT NULL )";

            $objQuery->setParameter("paramModelo", $intModelo);
        }

        if($strResponsable != "")
        {
            $strWhere .= " AND iet.responsable = :paramResponsable ";

            $objQuery->setParameter("paramResponsable", $strResponsable);
        }

        if($strUbicacion != "")
        {
            $strWhere .= " AND iet.ubicacion = :paramUbicacion ";

            $objQuery->setParameter("paramUbicacion", $strUbicacion);
        }


        $strSql = $strSql.$strWhere;
        $objQuery->setDQL($strSql);

        $arrayRespuesta["total"] = count($objQuery->getResult());

        //Si se buscan elementos por numero de serie y no se encuentran en la trazabilidad se busca en el Telcos
        if($arrayRespuesta["total"] == 0)
        {
            if($strSerie != "")
            {
                $strBanderaElemento = "S";
                //Se valida si la serie no exista en la trazabilidad
                $objInfoElemento = $this->_em->getRepository('schemaBundle:InfoElementoTrazabilidad')->findOneBy(array("numeroSerie" => $strSerie));

                if(!is_object($objInfoElemento))
                {
                    //Se busca la informacion en el Telcos
                    $strSql2 = " SELECT
                                    ie.id,
                                    ie.estado estadoTelcos,
                                    ie.serieFisica numeroSerie,
                                    ie.feCreacion,
                                    ie.nombreElemento descripcionElemento,

                                    (select ate3.nombreTipoElemento from schemaBundle:AdmiTipoElemento ate3 where ate3.id = (
                                           select IDENTITY(ame2.tipoElementoId) from schemaBundle:AdmiModeloElemento ame2 where ame2.id = (
                                           select IDENTITY(ie6.modeloElementoId) from schemaBundle:InfoElemento ie6 where ie6.id = (
                                           select max(ie5.id) from schemaBundle:InfoElemento ie5 where ie5.id = ie.id)))) tipo,

                                       (select ame1.nombreMarcaElemento from schemaBundle:AdmiMarcaElemento ame1 where ame1.id = (
                                           select IDENTITY(ame.marcaElementoId) from schemaBundle:AdmiModeloElemento ame where ame.id = (
                                           select IDENTITY(ie4.modeloElementoId) from schemaBundle:InfoElemento ie4 where ie4.id = (
                                           select max(ie3.id) from schemaBundle:InfoElemento ie3 where ie3.id = ie.id)))) marca,

                                       (select ame4.nombreModeloElemento from schemaBundle:AdmiModeloElemento ame4 where ame4.id = (
                                           select IDENTITY(ie7.modeloElementoId) from schemaBundle:InfoElemento ie7 where ie7.id = (
                                           select max(ie2.id) from schemaBundle:InfoElemento ie2 where ie2.id = ie.id))) modelo

                                    FROM schemaBundle:InfoElemento ie
                                    WHERE ie.id = ( SELECT MAX( ie8.id )
                                            FROM schemaBundle:InfoElemento ie8 WHERE UPPER(ie8.serieFisica) = UPPER(:paramSerieFisica) ) ";

                    $objQuery2->setParameter("paramSerieFisica", $strSerie);

                    $objQuery2->setDQL($strSql2);

                    $arrayRegistros          = $objQuery2->getResult();
                    $arrayRespuesta["total"] = count($objQuery2->getResult());
                }
            }
        }

        if( $intStart != '' && $intLimit != '' )
        {
            if($strBanderaElemento == "N")
            {
                $arrayRegistros = $objQuery->setFirstResult($intStart)->setMaxResults($intLimit)->getResult();
            }
        }
        else
        {
            $arrayRegistros = $objQuery->getResult();
        }
        //Cambio realizado cuando una serie es consultada y no tiene descripcion,marca,modelo en el telcos
        if($arrayRespuesta["total"] == 1)
        {
            $objElementos = $emNaf->getRepository('schemaBundle:InfoElemento')->getElementoDesdeNaf($arrayParametros);

            foreach($objElementos["registros"] as $objElemento2)
            {
                //Se valida si no tiene tipo , marca y modelo y se asigna uno desde el naf
                if(empty($arrayRegistros[0]["descripcionElemento"]))
                {
                     $arrayRegistros[0]["descripcionElemento"] = $objElemento2["descripcionElemento"];
                }
                if(empty($arrayRegistros[0]["marca"]))
                {
                    $arrayRegistros[0]["marca"] = $objElemento2["marca"];
                }
                if(empty($arrayRegistros[0]["modelo"]))
                {
                    $arrayRegistros[0]["modelo"] = $objElemento2["modelo"];
                }
            }
        }

        $arrayRespuesta["bandera"]   = $strBanderaElemento;
        $arrayRespuesta["registros"] = $arrayRegistros;

        return $arrayRespuesta;
    }

    /**
     * Método recursivo para obtener el elemento antecesor de un elemento.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0
     * @since 14-05-2021
     *
     * @param  Array $arrayParametros [
     *                                  strNumeroSerie    : Número de serie del elemento.
     *                                  strNombreElemento : Nombre del elemento.
     *                                  intIdElemento     : Id del elemento.
     *                                  strEstado         : Estado de la relacion elemento.
     *                                ]
     * @return Array $arrayResultado
     */
    public function obtenerElementoAntecesor($arrayParametros)
    {
        $strStart          = "";
        $strAnd            = "";
        $boolEjecutarQuery = false;

        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);

            if (isset($arrayParametros['strNumeroSerie']) && !empty($arrayParametros['strNumeroSerie']))
            {
                $boolEjecutarQuery = true;
                $strStart = 'START WITH IEL.SERIE_FISICA = :strNumeroSerie ';
                $objNativeQuery->setParameter('strNumeroSerie', $arrayParametros['strNumeroSerie']);
            }

            if (isset($arrayParametros['intIdElemento']) && !empty($arrayParametros['intIdElemento']))
            {
                $boolEjecutarQuery = true;
                $strStart = 'START WITH IEL.ID_ELEMENTO = :intIdElemento ';
                $objNativeQuery->setParameter('intIdElemento', $arrayParametros['intIdElemento']);
            }

            if (isset($arrayParametros['strNombreElemento']) && !empty($arrayParametros['strNombreElemento']))
            {
                $strAnd .= 'AND IEL.NOMBRE_ELEMENTO = :strNombreElemento ';
                $objNativeQuery->setParameter('strNombreElemento', $arrayParametros['strNombreElemento']);
            }

            $strSql = "SELECT ".
                        "ELEMENTO.ELEMENTO_ID_A, ".
                        "ELEMENTO.ELEMENTO_ID_B, ".
                        "ELEMENTO.NOMBRE_ELEMENTO ".
                      "FROM ( ".
                        "SELECT IREL.ELEMENTO_ID_A, ".
                               "IREL.ELEMENTO_ID_B, ".
                               "IEL.NOMBRE_ELEMENTO, ".
                               "LEVEL ".
                          "FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO IEL, ".
                               "DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO IREL ".
                        "WHERE IEL.ID_ELEMENTO = IREL.ELEMENTO_ID_B ".
                          "AND IREL.ESTADO     = :strEstado ".
                          "$strAnd".
                          "$strStart".
                          "CONNECT BY NOCYCLE IEL.ID_ELEMENTO  = PRIOR IREL.ELEMENTO_ID_A ".
                          "ORDER BY LEVEL DESC ".
                        ") ELEMENTO ".
                       "WHERE ROWNUM <= 1 ";

            $objNativeQuery->setParameter('strEstado',$arrayParametros['strEstado']);

            $objResultSetMap->addScalarResult('ELEMENTO_ID_A'  , 'elementoIdA'    , 'integer');
            $objResultSetMap->addScalarResult('ELEMENTO_ID_B'  , 'elementoIdB'    , 'integer');
            $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO', 'nombreElemento' , 'string');

            if ($boolEjecutarQuery)
            {
                $objNativeQuery->setSQL($strSql);
                $arrayResultado = $objNativeQuery->getOneOrNullResult();
            }
        }
        catch (\Exception $objException)
        {
            error_log($objException->getMessage());
        }
        return $arrayResultado;
    }

    /**
    * Costo: 4
    *
    * getCriterioBusqueda
    * Obtiene los distintos criterio de busqueda para la auditoria de elemento
    *
    * @param array $arrayParametros [
    *                                "strCriterio" => criterio de busqueda: Login,Identificacion,Razon Social
    *                                "strValor"    => valor ingresado del criterio de busqueda elegido
    *                               ]
    *
    * @return array $arrayRespuesta
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 08-03-2018
    *
    * @author Germán Valenzuela <gvalenzuela@telconet.ec>
    * @version 1.1 20-07-2021 - Se agrega el criterio por nodo.
	*/
    public function getCriterioBusqueda($arrayParametros)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        $arrayRespuesta = array();
        $arrayRegistros = array();
        $strValor       = $arrayParametros['strValor'];
        $strCriterio    = $arrayParametros['strCriterio'];

        if (!empty($arrayParametros['strValor']))
        {
            if($strCriterio == "login")
            {
                $strSql = " select infoPunto.id_punto as ID_VALOR,infoPunto.login as NOMBRE_VALOR from info_punto infoPunto
                                where infoPunto.login like :paramValor ";
            }
            else if($strCriterio == "identificacion")
            {
                $strSql = "  select infoPersona.id_persona as ID_VALOR,INFOPERSONA.IDENTIFICACION_CLIENTE as NOMBRE_VALOR
                              from info_persona infoPersona
                                where infoPersona.IDENTIFICACION_CLIENTE like :paramValor ";
            }
            else if($strCriterio == "razonSocial")
            {
                $strSql = "  select infoPersona2.id_persona as ID_VALOR,INFOPERSONA2.RAZON_SOCIAL as NOMBRE_VALOR from info_persona infoPersona2
                                where infoPersona2.razon_social like :paramValor ";
            }

            if ($strCriterio == "nodo")
            {
                $arrayParametrosNodo = array();
                $arrayParametrosNodo['nombre']  = $arrayParametros['strValor'];
                $arrayParametrosNodo['empresa'] = $arrayParametros['strIdEmpresa'];
                $objQuery = $this->getElementoNodo($arrayParametrosNodo, 'data');
            }
            else
            {
                $objRsm->addScalarResult('ID_VALOR'    , 'idValor'    , 'integer');
                $objRsm->addScalarResult('NOMBRE_VALOR', 'nombreValor', 'string');
                $objQuery->setParameter("paramValor", $strValor.'%');
                $objQuery->setSQL($strSql);
            }

            $arrayRespuesta["total"] = count($objQuery->getResult());

            $arrayRegistros = $objQuery->getResult();

            $arrayRespuesta["registros"] = $arrayRegistros;

            return $arrayRespuesta;
        }
    }


    /**
    * Costo: 2
    *
    * getResponsableFueraBodega
    * Se obtiene el nombre del responsable cuando una serie se encuentra fuera de bodega y no esta isntalada ni pendiente de instalar
    *
    * @param array $arrayParametros[ "strSerie" => numero de la serie ]
    *
    * @return array $arrayRespuesta
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 23-04-2018
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.1 14-12-2020 - Se cambia el orden de los nombres en el campo RESPONSABLE.
	*/
    public function getResponsableFueraBodega($arrayParametros)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        $arrayRespuesta = array();
        $strSerie       = $arrayParametros['strSerie'];

        if(!empty($strSerie))
        {
            $strSql = " select vempleados.nombre_pila||' '||vempleados.nombre_segundo||' '||vempleados.ape_pat||' '||vempleados.ape_mat NOMBRE
                            from V_EMPLEADOS_EMPRESAS vempleados where vempleados.no_emple = (
                            select ari2.EMPLE_SOLIC from arinme ari2 where  ari2.rowid = (
                            select max(ari.rowid) from arinme ari where ari.no_docu in (
                            select IDSE.ID_DOCUMENTO from inv_documento_serie idse where upper(idse.serie) = upper(:paramSerie))
                            and ari.EMPLE_SOLIC is not null))
                            and vempleados.NO_CIA = (
                            select ari2.NO_CIA_RESPONSABLE from arinme ari2 where  ari2.rowid = (
                            select max(ari.rowid) from arinme ari where ari.no_docu in (
                            select IDSE.ID_DOCUMENTO from inv_documento_serie idse where upper(idse.serie) = upper(:paramSerie))
                            and ari.EMPLE_SOLIC is not null)) ";

            $objRsm->addScalarResult('NOMBRE', 'nombreResponsable', 'string');

            $objQuery->setParameter("paramSerie", $strSerie);

            $objQuery->setSQL($strSql);

            $arrayRespuesta = $objQuery->getResult();

            return $arrayRespuesta[0];
        }
    }


    /**
    * Costo: 5
    *
    * getResponsableArticuloInstalacion
    * Funcion que valida si un serie esta registrada como un articulo de instalacion.
    *
    * @param array $arrayParametros[ "strSerie" => numero de la serie ]
    *
    * @return array $arrayRespuesta
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 23-04-2018
	*/
    public function getResponsableArticuloInstalacion($arrayParametros)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        $arrayRespuesta = array();
        $strSerie       = $arrayParametros['strSerie'];

        if(!empty($strSerie))
        {
            $strSql = " select inArticu2.cedula CEDULA from in_articulos_instalacion inArticu2 where inArticu2.rowid = (
                            select max(inArticu.rowid) from in_articulos_instalacion inArticu
                            where inArticu.numero_serie = :paramSerie and inArticu.cedula is not null) ";

            $objRsm->addScalarResult('CEDULA', 'cedula', 'string');

            $objQuery->setParameter("paramSerie", $strSerie);

            $objQuery->setSQL($strSql);

            $arrayRespuesta = $objQuery->getResult();

            return $arrayRespuesta[0];
        }
    }

    /**
    * Costo: 5
    *
    * getElementoDesdeNaf
    * Obtiene datos de un elemento que no existe en Telcos
    *
    * @param array $arrayParametros[ "strSerie" => numero de la serie ]
    *
    * @return array $arrayRespuesta
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 08-03-2018
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.1 20-04-2018 - Se realiza ajuste para no descriminar por mayusculas ni minusculas
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.2 02-06-2018 - Se realiza ajustes en la consulta del responsable de la serie, se consulta por num_empleado y codigo de empresa
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.3 14-12-2020 - Se parametriza el valor  del decode del campo ESTADO y se cambia el orden de los nombres en el campo RESPONSABLE.
	*/
    public function getElementoDesdeNaf($arrayParametros)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        $arrayRespuesta = array();
        $arrayRegistros = array();
        $strSerie       = $arrayParametros['strSerie'];

        if(!empty($strSerie))
        {
            $strSql = "  select
                                ins.serie SERIE,
                                (SELECT ARIN2.DESCRIPCION FROM ARINDA arin2 where ARIN2.rowid = (
                                SELECT max(arin.rowid) FROM ARINDA arin where ARIN.NO_ARTI = (ins.no_articulo))) DESCRIPCION,
                                (select marc2.descripcion from MARCAS marc2 where marc2.rowid = (
                                select max(marc.rowid) from MARCAS marc where marc.codigo = (
                                (SELECT ARIN4.marca FROM ARINDA arin4 where ARIN4.rowid = (
                                SELECT max(arin3.rowid) FROM ARINDA arin3 where ARIN3.NO_ARTI = (ins.no_articulo)))))) MARCA,
                                (SELECT ARIN2.modelo FROM ARINDA arin2 where ARIN2.rowid = (
                                SELECT max(arin.rowid) FROM ARINDA arin where ARIN.NO_ARTI = (ins.no_articulo))) MODELO,

                                (SELECT TEMP2.ESTADO ESTADO FROM (
                                    SELECT DECODE(INVS2.ESTADO,'FB','Fuera de Bodega','En Bodega') ESTADO,INVS2.ROWID REGID
                                    FROM inv_numero_serie INVS2 WHERE INVS2.rowid = (
                                    (SELECT max(INVS.rowid) FROM inv_numero_serie INVS WHERE upper(INVS.SERIE) = upper(:paramSerie)))
                                    union
                                    select DECODE(inai2.estado,'IN','Instalado','PI',
                                    (select valor1 from admi_parametro_DET where descripcion = 'VALOR DECODE CAMPO ESTADO_NAF' and
                                    estado = 'Activo'),'RE','Retirado') ESTADO,
                                    inai2.ROWID REGID from IN_ARTICULOS_INSTALACION inai2 where inai2.rowid = (
                                    select max(inai.rowid) from IN_ARTICULOS_INSTALACION inai where upper(inai.numero_serie) =
                                    upper(:paramSerie))) TEMP2
                                    WHERE TEMP2.REGID = (
                                    SELECT MAX(TEMP.REGID) FROM (
                                    SELECT DECODE(INVS2.ESTADO,'FB','Fuera de Bodega','En Bodega') ESTADO,INVS2.ROWID REGID
                                    FROM inv_numero_serie INVS2 WHERE INVS2.rowid = (
                                    (SELECT max(INVS.rowid) FROM inv_numero_serie INVS WHERE upper(INVS.SERIE) = upper(:paramSerie)))
                                    union
                                    select DECODE(inai2.estado,'IN','Instalado','PI',
                                    (select valor1 from admi_parametro_DET where descripcion = 'VALOR DECODE CAMPO ESTADO_NAF' and
                                    estado = 'Activo'),'RE','Retirado') ESTADO,
                                    inai2.ROWID REGID from IN_ARTICULOS_INSTALACION inai2 where inai2.rowid = (
                                    select max(inai.rowid) from IN_ARTICULOS_INSTALACION inai where upper(inai.numero_serie) =
                                    upper(:paramSerie))) TEMP)) ESTADO_NAF,

                                (  select vemp2.nombre_pila||' '||vemp2.nombre_segundo||' '||vemp2.ape_pat||' '||vemp2.ape_mat
                                      from V_EMPLEADOS_EMPRESAS vemp2 where vemp2.rowid = (
                                    select max(vemp.rowid)  from V_EMPLEADOS_EMPRESAS vemp where vemp.no_emple = (
                                    select tagU2.id_empleado from TASGUSUARIO tagU2 where tagU2.rowid = (
                                    select max(tagU.rowid) from TASGUSUARIO tagU where tagU.usuario = ins.usuario_crea))
                                    and vemp.no_cia = (  select tagU2.no_cia from TASGUSUARIO tagU2 where tagU2.rowid = (
                                    select max(tagU.rowid) from TASGUSUARIO tagU where tagU.usuario = ins.usuario_crea)))) RESPONSABLE

                                from inv_numero_serie ins
                                where ins.rowid = (
                                select max(ins1.rowid) from inv_numero_serie ins1 where upper(ins1.serie) = upper(:paramSerie) ) ";


            $objRsm->addScalarResult('SERIE', 'numeroSerie', 'string');
            $objRsm->addScalarResult('DESCRIPCION', 'descripcionElemento', 'string');
            $objRsm->addScalarResult('MARCA', 'marca', 'string');
            $objRsm->addScalarResult('MODELO', 'modelo', 'string');
            $objRsm->addScalarResult('ESTADO_NAF', 'estadoNaf', 'string');
            $objRsm->addScalarResult('RESPONSABLE', 'responsable', 'string');

            $objQuery->setParameter("paramSerie", $strSerie);

            $objQuery->setSQL($strSql);

            $arrayRespuesta["total"] = count($objQuery->getResult());

            $arrayRegistros = $objQuery->getResult();

            $arrayRespuesta["bandera"]   = "NAF";
            $arrayRespuesta["registros"] = $arrayRegistros;

            return $arrayRespuesta;
        }
    }


    /**
    * Costo: 6
    *
    * getResponsable
    * Obtiene los posibles reponsables para la auditoria de elementos
    *
    * @param array $arrayParametros[ "strResponsable" => apellido del responsable ]
    *
    * @return array $arrayRespuesta
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 16-03-2018
	*/
    public function getResponsable($arrayParametros)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        $arrayRespuesta = array();
        $arrayRegistros = array();
        $strResponsable = $arrayParametros['strResponsable'];

        if(!empty($arrayParametros['strResponsable']))
        {
            $strSql = " select infoPersona.id_persona as ID_PERSONA,infoPersona.nombres||' '||infoPersona.apellidos as NOMBRES
                            from info_persona infoPersona
                            where upper(infoPersona.apellidos) like upper(:paramResponsable) ";

            $objRsm->addScalarResult('ID_PERSONA', 'idPersona', 'integer');
            $objRsm->addScalarResult('NOMBRES', 'nombres', 'string');

            $objQuery->setParameter("paramResponsable", $strResponsable.'%');

            $objQuery->setSQL($strSql);

            $arrayRespuesta["total"] = count($objQuery->getResult());

            $arrayRegistros = $objQuery->getResult();

            $arrayRespuesta["registros"] = $arrayRegistros;

            return $arrayRespuesta;
        }
    }


    /**
     * Funcion que obtiene la caja mas cercana al momento de solicitar factibilidad automatica de un Servicio de Internet
     * 
     * @param Integer    $idEmpresa
     * @param Integer    $latitudPunto
     * @param Integer    $longitudPunto
     * @param String     $tecnologiaFactibilidad
     * 
     * @return array     $response
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 05-11-2015
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 2.0 26-12-2015 Se agrega factibilidad para servicios de internet dedicado TN 
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 2.1 15-06-2016 Se agrega agregan validaciones para controlar el aprovisionamiento de factibilidad de servicios dependiendo
     *                         de la caracterisitica del plan TECNOLOGIA_FACTIBILIDAD
     * 
     * 
     * @author Alexander Samaniego
     * @version 2.2 27-06-2016 Se segmenta funcionalidad de factibilidad para las empresas MD y TN, para el caso de TN no
     * 
     * @author Jesus Bozada
     * @version 2.3 04-07-2016 Se agregan validaciones para aprovisionar factibilidad TN segun nuevo esquema definido por GIS
     * 
     * @author Ricardo Coello Quezada <rcoello@telconet.ec>
     * @version 2.4 19-01-2018 - Se agrega validacion para el producto "INTERNET SMALL BUSINESS" en cuanto a la consideracion de SPLITTERS.
     * 
     * @author Jesus Bozada
     * @version 2.5 21-02-2018 Se agrega filtro de factibilidades MD para servicios que no dependan de edificios
     * @since 2.4
     * 
     * @author Jesus Bozada
     * @version 2.6 29-07-2018 Se agrega validación para bloquear factibilidad zte para servicios ISB
     * @since 2.5
     * 
     * @author Jesus Bozada
     * @version 2.7 28-09-2018 Se agrega validación para servicios MD con planes 1 GBPS
     * @since 2.6
     * 
     * @author Jesus Bozada
     * @version 2.8 28-11-2018 Se agregan validaciones para gestionar productos de la empresa TNP
     * @since 2.6
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 2.9 04-06-2019 - Se modifica la variable sql agregando la palabra DISTINC para evitar que se seleccionen
     *                           resultados repetidos y además se modifica el setParameters de estadoRelacionCajaParam,
     *                           para añadir los elementos restringidos y se agrega el "estado" del elemento,
     *                           al array resultante para poder hacer una validacion por estado y empresa.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 3.0 03-09-2020 - Se parametriza el metraje que se usa para validar la distancia de las cajas
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.1 05-04-2021 - Se verifica si el servicio posee la característica tipo de red GPON, se realiza el filtro
     *                           de búsqueda de cajas con OLT Multiplataforma.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.2 02-09-2021 - Se valida que para empresas no soportadas se retorne el arreglo vacío y no se ejecute el query en la base de datos
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.3 16-03-2022 - Se valida cantidad de vrf del elemento olt para los servicios Cámara Safecity para la red GPON_MPLS.
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 3.4 21-02-2022 - Se agregan validaciones de tecnología para traslados MD
     * 
     * @author Emmanuel Martillo <emartillo@telconet.ec>
     * @version 3.5 03-04-2023 - Se agrega parametro por codigo de empresa para busqueda de caja mas cercana, para que
     *                             ecuanet pueda seguir el flujo de MD.
     */
    public function findCajaMasCercana($arryParametros)
    {
        $response                                       = array();
        $response['id_caja']                            = 0;
        $response['nombre_caja']                        = "";
        $response['distancia_caja']                     = 0;
        $response['id_elemento_conector']               = 0;
        $response['nombre_elemento_conector']           = "";
        $response['id_interface_elemento_conector']     = 0;
        $response['nombre_interface_elemento_conector'] = "";
        $response['supera_distancia']                   = "no";
        $objResultSetMap                                = new ResultSetMappingBuilder($this->_em);
        $objNativeQuery                                 = $this->_em->createNativeQuery(null,$objResultSetMap);
        $intIdCajaMasCercana                = 0;
        $strNombreCajaMasCercana            = "";
        $strEstadoCaja                      = "";
        $intIdElementoConector              = 0;
        $strNombreElementoConector          = "";
        $strEstadoElementoConector          = "";
        $intIdInterfaceElementoConector     = 0;
        $strNombreInterfaceElementoConector = "";
        $strDistanciaCajaMasCercana         = 0;
        $intMetrosDeDistancia            = 250;
        $arrayRegistrosFactibilidad      = array();
        $arrayParamValidacionFact        = array();
        $intIdCanton                        = null;
        $intIdProvincia                     = null;
        $arrayOltVerificarVrf               = array();

        $objRestriccionEmpresa               = $arryParametros['infoServicioService']->getRestriccionEmpresa();
        $boolProductoEspecial                = $arryParametros['objParametrosRestriccion']['boolProductoEspecial'];
        $objInfoEmpresa                      = $arryParametros['objParametrosRestriccion']['objInfoEmpresa'];
 
        if($arryParametros['intIdEmpresa'] == 33)
        {
            $arryParametros['intIdEmpresa'] = 18;
        }
        //Se obtiene el valor del metraje
        if(isset($arryParametros['booleanTipoRedGpon']) && $arryParametros['booleanTipoRedGpon'] === true)
        {
            $strDescripcionParametro = 'VALOR DE LA DISTANCIA USADO PARA LAS CAJAS RED GPON';
        }
        else
        {
            $strDescripcionParametro = 'VALOR DE LA DISTANCIA USADO PARA LAS CAJAS';
        }
        $arrayValoresParametros = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('PROYECTO PARAMETRIZAR DISTANCIA DE CAJAS',
                                                                                                     'TECNICO',
                                                                                                     'PROCESO DE FACTIBILIDAD',
                                                                                                     $strDescripcionParametro,
                                                                                                     '',
                                                                                                     '',
                                                                                                     '',
                                                                                                     '',
                                                                                                     '',
                                                                                                     '10');

        if(isset($arrayValoresParametros["valor1"]) && !empty($arrayValoresParametros["valor1"]))
        {
            $intMetrosDeDistancia = $arrayValoresParametros["valor1"];
        }

        //filtrar por provincia o canton las cajas
        $arrayValoresFiltro = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('PROYECTO PARAMETRIZAR FILTRO DE CAJAS',
                                                                                                     'TECNICO',
                                                                                                     '',
                                                                                                     '',
                                                                                                     '',
                                                                                                     '',
                                                                                                     '',
                                                                                                     '',
                                                                                                     '',
                                                                                                     $arryParametros['intIdEmpresa']);
        if(!isset($arrayValoresFiltro) || empty($arrayValoresFiltro))
        {
            $arrayValoresFiltro = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('PROYECTO PARAMETRIZAR FILTRO DE CAJAS',
                                                                                                     'TECNICO',
                                                                                                     '',
                                                                                                     '',
                                                                                                     '',
                                                                                                     '',
                                                                                                     '',
                                                                                                     '',
                                                                                                     '');
        }
        if(isset($arryParametros['objServicio']) && is_object($arryParametros['objServicio'])
           && isset($arrayValoresFiltro) && isset($arrayValoresFiltro['valor1']) && !empty($arrayValoresFiltro['valor1']))
        {
            $objPunto = $arryParametros['objServicio']->getPuntoId();
            if(is_object($objPunto))
            {
                //obtengo el id del filtro
                $objCantonPunto = $objPunto->getSectorId()->getParroquiaId()->getCantonId();
                if($arrayValoresFiltro['valor1'] == "PROVINCIA")
                {
                    $intIdProvincia = $objCantonPunto->getProvinciaId()->getId();
                }
                else if($arrayValoresFiltro['valor1'] == "CANTON")
                {
                    $intIdCanton    = $objCantonPunto->getId();
                }
            }
        }

        $strSql = "SELECT DISTINCT
                          caja.ID_ELEMENTO ID_CAJA,
                          caja.NOMBRE_ELEMENTO NOMBRE_CAJA,
                          caja.ESTADO ESTADO_CAJA,
                          elementoConector.ID_ELEMENTO ID_ELEMENTO_CONECTOR,
                          elementoConector.NOMBRE_ELEMENTO NOMBRE_ELEMENTO_CONECTOR,
                          elementoConector.ESTADO ESTADO_ELEMENTO_CONECTOR,
                          elementoConector_me.NOMBRE_MODELO_ELEMENTO,
                          int_elementoConector.ID_INTERFACE_ELEMENTO,
                          int_elementoConector.NOMBRE_INTERFACE_ELEMENTO,
                          ubicacion.LONGITUD_UBICACION,
                          ubicacion.LATITUD_UBICACION
                      FROM
                          DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO rel_caja_elementoConector,
                          DB_INFRAESTRUCTURA.INFO_ELEMENTO caja,
                          DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO caja_te,
                          DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO caja_me,
                          DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA caja_ub,
                          DB_INFRAESTRUCTURA.INFO_UBICACION ubicacion,
                          DB_INFRAESTRUCTURA.INFO_ELEMENTO elementoConector,
                          DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO elementoConector_te,
                          DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO elementoConector_me,
                          DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO int_elementoConector";

        $strSql2 = " ,DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO caja_det ";

        $strSqlCantonTbl = " ,DB_GENERAL.ADMI_PARROQUIA PAR ";

        $strSqlProvinTbl = " ,DB_GENERAL.ADMI_PARROQUIA PAR
                             ,DB_GENERAL.ADMI_CANTON CAN ";

        $strSql3 = "  WHERE rel_caja_elementoConector.ELEMENTO_ID_A = caja.ID_ELEMENTO 
                      AND caja.MODELO_ELEMENTO_ID = caja_me.ID_MODELO_ELEMENTO
                      AND caja_me.TIPO_ELEMENTO_ID = caja_te.ID_TIPO_ELEMENTO
                      AND caja_te.NOMBRE_TIPO_ELEMENTO = :elementoContenedorParam
                      AND caja.ID_ELEMENTO = caja_ub.ELEMENTO_ID
                      AND caja_ub.UBICACION_ID = ubicacion.ID_UBICACION ";

        $strSqlCantonCond = " AND ubicacion.PARROQUIA_ID = PAR.ID_PARROQUIA
                              AND PAR.CANTON_ID = :cantonId ";

        $strSqlProvinCond = " AND ubicacion.PARROQUIA_ID = PAR.ID_PARROQUIA
                              AND PAR.CANTON_ID = CAN.ID_CANTON
                              AND CAN.PROVINCIA_ID = :provinciaId ";

        $strSql4 = " AND caja_ub.EMPRESA_COD = :codEmpresaParam
                      AND caja.ID_ELEMENTO = caja_det.ELEMENTO_ID
                      AND caja_det.DETALLE_NOMBRE = :nivelParam
                      AND caja_det.DETALLE_VALOR = :valorNivelParam ";

        $strSql5 = " AND rel_caja_elementoConector.ELEMENTO_ID_B = elementoConector.ID_ELEMENTO
                      AND rel_caja_elementoConector.ESTADO IN (:estadoRelacionCajaParam)
                      AND elementoConector.ID_ELEMENTO = int_elementoConector.ELEMENTO_ID
                      AND elementoConector.MODELO_ELEMENTO_ID = elementoConector_me.ID_MODELO_ELEMENTO
                      AND elementoConector_me.TIPO_ELEMENTO_ID = elementoConector_te.ID_TIPO_ELEMENTO
                      AND elementoConector_te.NOMBRE_TIPO_ELEMENTO = :nombreTipoElementoParam
                      AND int_elementoConector.ESTADO = :estadoInterfaceConectorParam
                      AND int_elementoConector.NOMBRE_INTERFACE_ELEMENTO not like :nombreInterfaceParam ";

        $strSqlEdiTbl = " AND NOT EXISTS (SELECT
                                        1
                                    FROM
                                        DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO I4_,
                                        DB_INFRAESTRUCTURA.INFO_ELEMENTO I0_,
                                        DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO A5_,
                                        DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO A6_,
                                        DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA I7_,
                                        DB_INFRAESTRUCTURA.INFO_UBICACION I3_,
                                        DB_INFRAESTRUCTURA.INFO_ELEMENTO I1_,
                                        DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO A8_,
                                        DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO A9_,
                                        DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO I10_ ";
        $strSqlEdiTblCan = ",DB_GENERAL.ADMI_PARROQUIA PAR2_ ";
        $strSqlEdiTblPro = ",DB_GENERAL.ADMI_PARROQUIA PAR2_, DB_GENERAL.ADMI_CANTON CAN2_ ";

        $strSqlEdiWhere = " WHERE caja.ID_ELEMENTO = I0_.ID_ELEMENTO
                                AND   I4_.ELEMENTO_ID_B = I0_.ID_ELEMENTO
                                AND   I0_.MODELO_ELEMENTO_ID = A6_.ID_MODELO_ELEMENTO
                                AND   A6_.TIPO_ELEMENTO_ID = A5_.ID_TIPO_ELEMENTO
                                AND   A5_.NOMBRE_TIPO_ELEMENTO = :elementoContenedorParam
                                AND   I0_.ID_ELEMENTO = I7_.ELEMENTO_ID
                                AND   I7_.UBICACION_ID = I3_.ID_UBICACION
                                AND   I7_.EMPRESA_COD = :codEmpresaParam
                                AND   I0_.ESTADO = :estadoActivoParam
                                AND   I4_.ESTADO = :estadoActivoParam
                                AND   I0_.ID_ELEMENTO = I10_.ELEMENTO_ID
                                AND   I10_.DETALLE_NOMBRE = :nivelParam
                                AND   I10_.DETALLE_VALOR  = :valorNivelParam
                                AND   I4_.ELEMENTO_ID_A    = I1_.ID_ELEMENTO
                                AND   I1_.MODELO_ELEMENTO_ID = A9_.ID_MODELO_ELEMENTO
                                AND   A9_.TIPO_ELEMENTO_ID     = A8_.ID_TIPO_ELEMENTO
                                AND   A8_.NOMBRE_TIPO_ELEMENTO = :tipoEdificioParam
                                AND   I1_.ESTADO             = :estadoActivoParam ";

        $strSqlEdiWhereCan = "  AND   I3_.PARROQUIA_ID = PAR2_.ID_PARROQUIA
                                AND   PAR2_.CANTON_ID  = :cantonId";

        $strSqlEdiWherePro = "  AND   I3_.PARROQUIA_ID = PAR2_.ID_PARROQUIA
                                AND   PAR2_.CANTON_ID  = CAN2_.ID_CANTON
                                AND   CAN2_.PROVINCIA_ID = :provinciaId";

        $strSqlGpon = " AND EXISTS (
        SELECT 1 FROM DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INT_OLT
        WHERE INT_OLT.ID_INTERFACE_ELEMENTO = DB_INFRAESTRUCTURA.INFRK_DML.GET_ELEMENTO_FILTER_DETALLE(int_elementoConector.ID_INTERFACE_ELEMENTO,
                                                                                                        :elementoBuscarMulti,
                                                                                                        :detalleNombreMulti,
                                                                                                        :detalleValorMulti)
                        )";

        if("MD" === $arryParametros['strPrefijoEmpresa'] || "TNP" === $arryParametros['strPrefijoEmpresa']
           || "EN" === $arryParametros['strPrefijoEmpresa'])
        {
            if(!empty($intIdProvincia) && $intIdProvincia > 0)
            {
                $strSql .= $strSql2 . $strSqlProvinTbl . $strSql3 . $strSqlProvinCond . $strSql4 . $strSql5;
                $objNativeQuery->setParameter('provinciaId', $intIdProvincia);
            }
            else if(!empty($intIdCanton) && $intIdCanton > 0)
            {
                $strSql .= $strSql2 . $strSqlCantonTbl . $strSql3 . $strSqlCantonCond . $strSql4 . $strSql5;
                $objNativeQuery->setParameter('cantonId', $intIdCanton);
            }
            else
            {
                $strSql .= $strSql2 . $strSql3 . $strSql4 . $strSql5;
            }

            if ($arryParametros['strDependeEdificio'] != "S")
            {
                if(!empty($intIdProvincia) && $intIdProvincia > 0)
                {
                    $strSql .= $strSqlEdiTbl . $strSqlEdiTblPro . $strSqlEdiWhere . $strSqlEdiWherePro . ") ";
                }
                else if(!empty($intIdCanton) && $intIdCanton > 0)
                {
                    $strSql .= $strSqlEdiTbl . $strSqlEdiTblCan . $strSqlEdiWhere . $strSqlEdiWhereCan . ") ";
                }
                else
                {
                    $strSql .= $strSqlEdiTbl . $strSqlEdiWhere . ") ";
                }
                $objNativeQuery->setParameter('estadoActivoParam', 'Activo');
                $objNativeQuery->setParameter('tipoEdificioParam', 'EDIFICACION');
            }

            if(isset($arryParametros['booleanTipoRedGpon']) && $arryParametros['booleanTipoRedGpon'] === true)
            {
                $strDetalleMulti         = "MULTIPLATAFORMA";
                $arrayParametrosDetMulti = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                'COMERCIAL',
                                                                                                '',
                                                                                                'NOMBRES PARAMETROS DETALLES MULTIPLATAFORMA',
                                                                                                '',
                                                                                                '',
                                                                                                '',
                                                                                                '',
                                                                                                '');
                if(isset($arrayParametrosDetMulti) && !empty($arrayParametrosDetMulti)
                   && isset($arrayParametrosDetMulti['valor1']) && !empty($arrayParametrosDetMulti['valor1']))
                {
                    $strDetalleMulti = $arrayParametrosDetMulti['valor1'];
                }
                $strSql .= $strSqlGpon;
                $objNativeQuery->setParameter('detalleNombreMulti',  $strDetalleMulti);
                $objNativeQuery->setParameter('detalleValorMulti',   'SI');
                $objNativeQuery->setParameter('elementoBuscarMulti', 'INTERFACE');
            }

            $objNativeQuery->setParameter('codEmpresaParam', $arryParametros['intIdEmpresa']);
            $objNativeQuery->setParameter('nivelParam', 'NIVEL');
            $objNativeQuery->setParameter('valorNivelParam', 2);
            $objNativeQuery->setParameter('nombreTipoElementoParam', 'SPLITTER');
        }
        else if("TN" === $arryParametros['strPrefijoEmpresa'])
        {
            if(!empty($intIdProvincia) && $intIdProvincia > 0)
            {
                $strSql .= $strSqlProvinTbl . $strSql3 . $strSqlProvinCond . $strSql5;
                $objNativeQuery->setParameter('provinciaId', $intIdProvincia);
            }
            else if(!empty($intIdCanton) && $intIdCanton > 0)
            {
                $strSql .= $strSqlCantonTbl . $strSql3 . $strSqlCantonCond . $strSql5;
                $objNativeQuery->setParameter('cantonId', $intIdCanton);
            }
            else
            {
                $strSql .= $strSql3 . $strSql5;
            }
            $objNativeQuery->setParameter('nombreTipoElementoParam', 'CASSETTE');
        }
        else
        {
            //se guarda el error log de la empresa no soportada
            error_log('InfoElementoRepository - findCajaMasCercana - Empresa no soportada');
            //se retorna el response
            $arrayResponse['id_caja']                            = $intIdCajaMasCercana;
            $arrayResponse['nombre_caja']                        = $strNombreCajaMasCercana;
            $arrayResponse['estado_caja']                        = $strEstadoCaja;
            $arrayResponse['id_elemento_conector']               = $intIdElementoConector;
            $arrayResponse['nombre_elemento_conector']           = $strNombreElementoConector;
            $arrayResponse['estado_elemento_conector']           = $strEstadoElementoConector;
            $arrayResponse['id_interface_elemento_conector']     = $intIdInterfaceElementoConector;
            $arrayResponse['nombre_interface_elemento_conector'] = $strNombreInterfaceElementoConector;
            $arrayResponse['distancia_caja']                     = round($strDistanciaCajaMasCercana, 2);
            return $arrayResponse;
        }

        $objNativeQuery->setParameter('elementoContenedorParam', 'CAJA DISPERSION');
        $objNativeQuery->setParameter('estadoRelacionCajaParam', array('Activo', 'Restringido'));
        $objNativeQuery->setParameter('estadoInterfaceConectorParam', 'not connect');
        $objNativeQuery->setParameter('nombreInterfaceParam', 'IN%');

        $objResultSetMap->addScalarResult('ID_CAJA',  'id_caja', 'string');
        $objResultSetMap->addScalarResult('NOMBRE_CAJA', 'nombre_caja', 'string');
        $objResultSetMap->addScalarResult('ESTADO_CAJA', 'estado_caja', 'string');
        $objResultSetMap->addScalarResult('ID_ELEMENTO_CONECTOR', 'id_elemento_conector', 'string');
        $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO_CONECTOR', 'nombre_elemento_conector', 'string');
        $objResultSetMap->addScalarResult('ESTADO_ELEMENTO_CONECTOR', 'estado_elemento_conector', 'string');
        $objResultSetMap->addScalarResult('NOMBRE_MODELO_ELEMENTO', 'nombre_modelo_elemento_conector', 'string');
        $objResultSetMap->addScalarResult('ID_INTERFACE_ELEMENTO', 'id_interface_elemento_conector', 'string');
        $objResultSetMap->addScalarResult('NOMBRE_INTERFACE_ELEMENTO', 'nombre_interface_elemento_conector', 'string');
        $objResultSetMap->addScalarResult('LONGITUD_UBICACION', 'longitud', 'string');
        $objResultSetMap->addScalarResult('LATITUD_UBICACION', 'latitud', 'string');

        $objNativeQuery->setSQL($strSql);
        $arrayCajas = $objNativeQuery->getScalarResult();

        foreach($arrayCajas as $arrayCaja)
        {
            /*Valido si el estado es "Restringido" y si el prefijo de la empresa es igual al que debe ser restringido*/
            if ($arrayCaja['estado_elemento_conector'] == 'Restringido'
                && $objRestriccionEmpresa['intIdEmpresa'] == $objInfoEmpresa->getId()
                && $boolProductoEspecial == null)
            {
                /*En caso de cumplirse la condición, se va a saltar dicho elemento y continuara con el siguiente*/
                continue;
            }

            $intDistance = $this->haversineGreatCircleDistance($arryParametros['intLatitudPunto'], $arryParametros['intLongitudPunto'],
                                                            $arrayCaja['latitud'], $arrayCaja['longitud']);
            if(("MD" === $arryParametros['strPrefijoEmpresa'] || "TNP" === $arryParametros['strPrefijoEmpresa']
                || "EN" === $arryParametros['strPrefijoEmpresa']) &&
               (($intDistance < $strDistanciaCajaMasCercana) || $intIdCajaMasCercana == 0))
            {
                $booleanVerificarVrf = true;
                //verificar disponibilidad de vrf camara para servicios gpon_mpls
                if(isset($arryParametros['booleanTipoRedGpon']) && $arryParametros['booleanTipoRedGpon'] === true
                   && isset($arryParametros['servicioTecnico']) && is_object($arryParametros['servicioTecnico'])
                   && isset($arryParametros['objServicio']))
                {
                    $arrayValidarVrfCamaras = $arryParametros['servicioTecnico']->validarVrfCamaraGponMpls(
                                                    array("arrayOltVerificarVrf"   => $arrayOltVerificarVrf,
                                                          "objPunto"               => $arryParametros['objServicio']->getPuntoId(),
                                                          "strTipoOrden"           => 'FACTIBILIDAD',
                                                          "intIdInterfaceConector" => $arrayCaja['id_interface_elemento_conector'],
                                                          "strCodEmpresa"          => $arryParametros['intIdEmpresaOrigin'],
                                                          "strPrefijoEmpresa"      => $arryParametros['strPrefijoEmpresaOrigin'],
                                                          "strUsrCreacion"         => $arryParametros['strUsrCreacion'],
                                                          "strIpCreacion"          => $arryParametros['strIpCreacion']));
                    if($arrayValidarVrfCamaras['status'] == "ERROR")
                    {
                        $booleanVerificarVrf = false;
                    }
                    $arrayOltVerificarVrf = $arrayValidarVrfCamaras['elementos'];
                }

                $intValidacionFactibilidad = null;

                $strEsISB    = (isset($arryParametros['strEsISB']) && $arryParametros['strEsISB'] != null) ? $arryParametros['strEsISB'] : null; 

                /* se agrega validación para no considerar SPLITTERS que pertenezcan a OLT NO OPERATIVOS y para validar tecnologia de OLTS 
                   en los cuales debe darse factibilidad */
                $arrayParamValidacionFact = array (
                                                    "intElementoConectorId"        => $arrayCaja['id_elemento_conector'],
                                                    "strTecnologiaFactibilidad"    => $arryParametros['strTecnologiaFactibilidad'],
                                                    "strEsISB"                     => $strEsISB,
                                                    "arrayTecnologiasNoPermitidas" => $arryParametros['arrayTecnologiasNoPermitidas'],
                                                    "strPlanGbps"                  => $arryParametros['strPlanGbps'],
                                                    "strTipoOrdenServicio"         => $arryParametros["strTipoOrdenServicio"],
                                                    "strObligaTecnologia"          => $arryParametros["strObligaTecnologia"]
                                                  );
                $intValidacionFactibilidad = $this->validacionesFactibilidadMd($arrayParamValidacionFact);
                if($intValidacionFactibilidad == null && $booleanVerificarVrf)
                {
                    $intIdCajaMasCercana                   = $arrayCaja['id_caja'];
                    $strEstadoCaja                         = $arrayCaja['estado_caja'];
                    $strNombreCajaMasCercana               = $arrayCaja['nombre_caja'];
                    $intIdElementoConector                 = $arrayCaja['id_elemento_conector'];
                    $strNombreElementoConector             = $arrayCaja['nombre_elemento_conector'];
                    $strEstadoElementoConector             = $arrayCaja['estado_elemento_conector'];
                    $intIdInterfaceElementoConector        = $arrayCaja['id_interface_elemento_conector'];
                    $strNombreInterfaceElementoConector    = $arrayCaja['nombre_interface_elemento_conector'];
                    $strDistanciaCajaMasCercana            = $intDistance;
                }
            }
            else if(("TN" === $arryParametros['strPrefijoEmpresa']) && ( $intDistance <= $intMetrosDeDistancia ))
            {
                $arrayRegistrosFactibilidad[]= array(
                                                     'idCaja'                          => $arrayCaja['id_caja'],
                                                     'estadoCaja'                      => $arrayCaja['estado_caja'],
                                                     'nombreCaja'                      => $arrayCaja['nombre_caja'],
                                                     'idElementoConector'              => $arrayCaja['id_elemento_conector'],
                                                     'nombreElementoConector'          => $arrayCaja['nombre_elemento_conector'],
                                                     'estadoElementoConector'          => $arrayCaja['estado_elemento_conector'],
                                                     'idInterfaceElementoConector'     => $arrayCaja['id_interface_elemento_conector'],
                                                     'nombreInterfaceElementoConector' => $arrayCaja['nombre_interface_elemento_conector'],
                                                     'distancia'                       => $intDistance
                                                    );

            }
            else
            {
               $intDistance = 0;
            }
        }// Fin de foreach

        if("MD" === $arryParametros['strPrefijoEmpresa'] || "TNP" === $arryParametros['strPrefijoEmpresa']
        || "EN" === $arryParametros['strPrefijoEmpresa'])
        {
            if(($strDistanciaCajaMasCercana) && ($strDistanciaCajaMasCercana > $intMetrosDeDistancia))
            {
                $response['supera_distancia'] = "si";
            }

            $response['id_caja'] = $intIdCajaMasCercana;
            $response['nombre_caja'] = $strNombreCajaMasCercana;
            $response['estado_caja'] = $strEstadoCaja;
            $response['id_elemento_conector'] = $intIdElementoConector;
            $response['nombre_elemento_conector'] = $strNombreElementoConector;
            $response['estado_elemento_conector'] = $strEstadoElementoConector;
            $response['id_interface_elemento_conector'] = $intIdInterfaceElementoConector;
            $response['nombre_interface_elemento_conector'] = $strNombreInterfaceElementoConector;
            $response['distancia_caja'] = round($strDistanciaCajaMasCercana, 2);
        }
        else if("TN" === $arryParametros['strPrefijoEmpresa'])
        {
            $response = array();
            $response = $arrayRegistrosFactibilidad;
        }
        else
        {
            error_log('InfoElementoRepository - findCajaMasCercana - Empresa no soportada.');
        }
        return $response;
    }

     /**
     * validarBufferHilo
     *
     * Método que valida si el enlace entre el ODF y el CASSETTE tiene configurado un bufferHiloId
     *
     * @param $intInterfaceOutCassette
     *
     * @return string strTieneBufferHilo
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 23-09-2016
     *
     */
    public function validarBufferHilo($intInterfaceOutCassette)
    {
        $objQueryEnlaceCassette     = $this->_em->createQuery();
        $objQueryEnlaceOdfCassette  = $this->_em->createQuery();
        $intCantidadEnlaces         = 0;
        $strTieneBufferHilo         = "N";

        $strSql = " SELECT ie
                        FROM schemaBundle:InfoEnlace ie
                        WHERE ie.interfaceElementoFinId = :paramInterfaceFin
                        AND ie.estado = :paramEstado ";

        $objQueryEnlaceCassette->setParameter('paramInterfaceFin',$intInterfaceOutCassette);
        $objQueryEnlaceCassette->setParameter('paramEstado',"Activo");
        $objQueryEnlaceCassette->setDQL($strSql);
        $arrayInfoEnlace = $objQueryEnlaceCassette->getResult();

        if($arrayInfoEnlace)
        {
            //se obtiene la cantidad de enlaces
            $intCantidadEnlaces = count($arrayInfoEnlace);
            //se valida qie solo exista un enlace relacionado al OUT del cassette
            if($intCantidadEnlaces == 1)
            {
                $strSql = $strSql . " AND ie.bufferHiloId IS NOT NULL ";

                foreach($arrayInfoEnlace as $arrayItemInfoEnlace)
                {
                    if($arrayItemInfoEnlace->getInterfaceElementoIniId())
                    {
                        $objQueryEnlaceOdfCassette->setParameter('paramInterfaceFin',$arrayItemInfoEnlace->getInterfaceElementoIniId()->getId());
                        $objQueryEnlaceOdfCassette->setParameter('paramEstado',"Activo");
                        $objQueryEnlaceOdfCassette->setDQL($strSql);

                        $arrayInfoEnlaceOdf = $objQueryEnlaceOdfCassette->getResult();


                        if($arrayInfoEnlaceOdf)
                        {
                            //se obtiene la cantidad de enlaces
                            $intCantidadEnlaces = count($arrayInfoEnlaceOdf);

                            if($intCantidadEnlaces == 1)
                            {
                                $strTieneBufferHilo = "S";
                            }
                            else
                            {
                                $strTieneBufferHilo = "N";
                            }
                        }
                    }
                }
            }
            else
            {
                $strTieneBufferHilo = "N";
            }
        }
        return $strTieneBufferHilo;
    }

    /**
     * Calculates the great-circle distance between two points, with
     * the Haversine formula.
     * @param float $latitudeFrom Latitude of start point in [deg decimal]
     * @param float $longitudeFrom Longitude of start point in [deg decimal]
     * @param float $latitudeTo Latitude of target point in [deg decimal]
     * @param float $longitudeTo Longitude of target point in [deg decimal]
     * @param float $earthRadius Mean earth radius in [m]
     * @return float Distance between points in [m] (same as earthRadius)
     */
    function haversineGreatCircleDistance(
    $latitudeFrom, $longitudeFrom, $latitudeTo, $longitudeTo, $earthRadius = 6371000)
    {
        // convert from degrees to radians
        $latFrom = deg2rad($latitudeFrom);
        $lonFrom = deg2rad($longitudeFrom);
        $latTo = deg2rad($latitudeTo);
        $lonTo = deg2rad($longitudeTo);

        $latDelta = $latTo - $latFrom;
        $lonDelta = $lonTo - $lonFrom;

        $angle = 2 * asin(sqrt(pow(sin($latDelta / 2), 2) +
                    cos($latFrom) * cos($latTo) * pow(sin($lonDelta / 2), 2)));
        return $angle * $earthRadius;
    }

    /**
     * Funcion que obtiene elementos por los filtros especficiados como parametros de entrada
     * 
     * @param String     $nombre
     * @param String     $estado
     * @param String     $tipoElemento
     * @param String     $modelo
     * @param String     $strTipoElementoRed
     * 
     * @return array     $resultado
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 20-05-2016
     * 
     * @since 1.0
     */
    public function generarJsonComboElementosByNombreEstadoTipoModelo($nombre, $estado, $tipoElemento, $modelo, $strTipoElementoRed )
    {
        $arr_encontrados = array();

        $encontrados = $this->getElementosByNombreEstadoTipoModelo($nombre, $estado, $tipoElemento, $modelo, $strTipoElementoRed, '', '');

        if($encontrados)
        {

            $num = count($encontrados);

//            if ($strTipoElementoRed != "RED")
//            {
//                foreach($encontrados as $entidad)
//                {
//                    $objDetalleElementoRadio = $this->_em
//                                                    ->getRepository('schemaBundle:InfoDetalleElemento')
//                                                    ->findOneBy(array("elementoId"    => $entidad->getId(),
//                                                                      "detalleNombre" => "TIPO ELEMENTO RED"));
//                    if ($objDetalleElementoRadio)
//                    {
//                        if ($objDetalleElementoRadio->getDetalleValor() == $strTipoElementoRed)
//                        {
//                            $arr_encontrados[] = array('idElemento'     => $entidad->getId(),
//                                                       'nombreElemento' => trim($entidad->getNombreElemento()));
//                        }
//                    }
//                }
//            }
//            else
//            {
                foreach($encontrados as $entidad)
                {
                    $arr_encontrados[] = array('idElemento'     => $entidad->getId(),
                                               'nombreElemento' => trim($entidad->getNombreElemento()));
                }
//            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    public function getElementosByNombreEstadoTipoModelo($nombre, $estado, $tipoElemento, $modelo, $strTipoElementoRed, $start, $limit)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('e')
            ->from('schemaBundle:InfoElemento', 'e');


        if($nombre != "")
        {
            $qb->where('e.nombreElemento like ?1');
            $qb->setParameter(1, '%' . $nombre . '%');
        }
        if($tipoElemento != "")
        {
            $qb->from('schemaBundle:AdmiModeloElemento', 'admi_modelo_elemento')
                ->andWhere('e.modeloElementoId = admi_modelo_elemento')
                ->andWhere('admi_modelo_elemento.tipoElementoId = ?2')
                ->setParameter(2, $tipoElemento);
        }
        if($modelo != '')
        {
            $qb->andWhere("admi_modelo_elemento.nombreModeloElemento = ?4")
                ->setParameter(4, $modelo);
        }
        if($strTipoElementoRed != '')
        {
             $qb->from('schemaBundle:InfoDetalleElemento', 'de')
                ->andWhere('e.id = de.elementoId')
                ->andWhere('de.detalleNombre = ?6')
                ->andWhere('de.detalleValor = ?7')
                ->setParameter(6, 'TIPO ELEMENTO RED')
                ->setParameter(7, $strTipoElementoRed);
        }
        if($estado != "Todos")
        {
            if($estado == "Activo")
            {
                $qb->andWhere("e.estado = ?5");
                //migracion clientes transtelco - se filtran solo por registros activos
                $qb->setParameter(5, $estado);
            }
            else
            {
                $qb->andWhere('e.estado = ?3');
                $qb->setParameter(3, $estado);
            }
        }
        if($start != '')
            $qb->setFirstResult($start);
        if($limit != '')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function generarJsonElementosTarea($nombre, $estado, $tipoElemento, $start, $limit, $codEmpresa = "09")
    {
        $arr_encontrados = array();
        $parametros = array();
        $datos = array();
        $parametros["nombre"] = $nombre;
        $parametros["estado"] = $estado;
        $parametros["tipoElemento"] = $tipoElemento;
        $parametros["start"] = '';
        $parametros["limit"] = '';
        $parametros["codEmpresa"] = $codEmpresa;

        $datos = $this->getElementosXTipo($parametros);
        $encontradosTotal = $datos["total"];
        $encontrados = $datos["registros"];

        if($encontrados)
        {

            $num = $encontradosTotal;

            foreach($encontrados as $entidad)
            {
                $arr_encontrados[] = array('idTipo' => $entidad->getId(),
                    'nombreTipo' => trim($entidad->getNombreElemento()));
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    /**
     * generarJsonElementosXTipo
     *
     * Metodo encargado de obtener el json de los elementos segun parametros
     * 
     * @return json 
     *
     * @param array   $parametros[string  $nombre,string  $estado,integer $tipoElemento,integer $start,integer $limit,string  $codEmpresa]
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.7 26-07-2016 Se realiza ajustes porque se agrega elementos en la creacion de actividades
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.6 17-12-2015 Se realizan ajustes para presentar los elementos asociados al tipo de elemento seleccionado
     *                         en el nuevo panel de movilizacion, en opcion de crear un nuevo caso
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.5 02-02-2015
     *
     * @version 1.0 Version Inicial
     */
    public function generarJsonElementosXTipo($parametros)
    {
        $arr_encontrados = array();
        $datos = array();
        $activoFijo = $parametros['activoFijo'];
        $datos = $this->getElementosXTipo($parametros);
        $encontrados = $datos['registros'];
        $encontradosTotal = $datos['total'];

        if($encontrados)
        {

            $num = $encontradosTotal;
            if($parametros['actividades'] != "S")
            {
                $arr_encontrados[] = array('idElemento' => '', 'nombreElemento' => 'Todos', 'estado' => 'Todos');
            }
            $estado = '';
            foreach($encontrados as $entidad)
            {
                if($activoFijo == 'S')
                {
                    $estado = trim($entidad->getEstado());
                }
                else
                {
                    $estado = trim($entidad->getEstadoElemento());
                }

                $arr_encontrados[] = array('idElemento' => $entidad->getId(),
                    'nombreElemento' => trim($entidad->getNombreElemento()),
                    'estado' => $estado);
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    /**
     * getElementosXTipo
     *
     * Metodo encargado de ejecutar query a la vista de elementos de acuerdo a los parametros
     * 
     * @return array 
     *
     * @param array   $parametros[string  $nombre,string  $estado,integer $tipoElemento,integer $start,integer $limit,string  $codEmpresa]
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.7 30-12-2015 Se realizan ajustes para presentar todos los elementos cuando no se envie ninguna empresa por session
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.6 17-12-2015 Se realizan ajustes para presentar los elementos asociados al tipo de elemento seleccionado
     *                         en el nuevo panel de movilizacion, en opcion de crear un nuevo caso 
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.5 02-02-2015
     *
     * @version 1.0 Version Inicial
     */
    public function getElementosXTipo($parametros)
    {
        $nombre = $parametros['nombre'];
        $estado = $parametros['estado'];
        $tipoElemento = $parametros['tipoElemento'];
        $codEmpresa = $parametros['codEmpresa'];
        $start = $parametros['start'];
        $limit = $parametros['limit'];
        $activoFijo = $parametros['activoFijo'];
        $datos = array();
        $query = $this->_em->createQuery(null);
        $queryCount = $this->_em->createQuery(null);


        //Si la consulta se realiza por tipos de elemento Activo Fijo no se toma en cuanta las interfaces
        if($activoFijo == 'S')
        {
            $selectActivoCount = "SELECT COUNT(infoElemento) ";

            $selectActivo = " SELECT
                            infoElemento ";

            $dql = "         FROM
                            schemaBundle:AdmiTipoElemento admiTipoElemento,schemaBundle:AdmiModeloElemento admiModeloElemento,
                            schemaBundle:InfoElemento infoElemento,schemaBundle:InfoEmpresaElemento infoEmpresaElemento

                     WHERE  admiTipoElemento.id = admiModeloElemento.tipoElementoId
                     AND    admiModeloElemento.id = infoElemento.modeloElementoId
                     AND    infoElemento.id = infoEmpresaElemento.elementoId
                     AND    infoElemento.estado = :varEstado
                     AND    admiTipoElemento.id = :varTipoElemento
                     AND    infoEmpresaElemento.empresaCod = :varEmpresa ";

            if($nombre != '')
            {
                $dql .= " AND upper(infoElemento.nombreElemento) like upper(:varNombre) ";
                $query->setParameter('varNombre', '%' . $nombre . '%');
                $queryCount->setParameter('varNombre', '%' . $nombre . '%');
            }

            $query->setParameter("varEstado", $estado);
            $query->setParameter("varTipoElemento", $tipoElemento);
            $query->setParameter("varEmpresa", $codEmpresa);
            $queryCount->setParameter("varEstado", $estado);
            $queryCount->setParameter("varTipoElemento", $tipoElemento);
            $queryCount->setParameter("varEmpresa", $codEmpresa);
        }
        else
        {
            $selectCount = "SELECT COUNT(a) ";

            $select = "SELECT
                    a ";

            $dql = " FROM
                    schemaBundle:VistaElementos a
                    WHERE
                    a.estadoElemento = :estado ";

            $query->setParameter('estado', $estado);
            $queryCount->setParameter('estado', $estado);

            if($nombre != '')
            {
                $dql .= " and upper(a.nombreElemento) like upper(:nombre) ";
                $query->setParameter('nombre', '%' . $nombre . '%');
                $queryCount->setParameter('nombre', '%' . $nombre . '%');
            }

            if($tipoElemento != '')
            {
                $dql .= " and a.idTipoElemento = :tipoElemento ";
                $query->setParameter('tipoElemento', $tipoElemento);
                $queryCount->setParameter('tipoElemento', $tipoElemento);
            }

            if($codEmpresa != '')
            {

                if($codEmpresa == '33')
                {
                    $dql .= "and a.empresaCod in ('18','33') ";
                }
                else
                {
                    $dql .= " and a.empresaCod = :empresa ";
                    $query->setParameter('empresa', $codEmpresa);
                    $queryCount->setParameter('empresa', $codEmpresa);
                  }
              
            }
        }

        //Si la consulta se realiza por tipos de elemento Activo Fijo no se toma en cuanta las interfaces
        if($activoFijo == 'S')
        {
            $dqlCount = $selectActivoCount . $dql;
            $dql = $selectActivo . $dql;
        }
        else
        {
            $dqlCount = $selectCount . $dql;
            $dql = $select . $dql;
        }
        $queryCount->setDQL($dqlCount);

        $datos['total'] = $queryCount->getSingleScalarResult();


        $query->setDQL($dql);

        if($start != '')
        {
            $query->setFirstResult($start);
        }
        if($limit != '')
        {
            $query->setMaxResults($limit);
        }

        $datos['registros'] = $query->getResult();

        return $datos;
    }

    /**
    * getJsonAfectadosPorSplitter
    *
    * Esta funcion retorna la lista de clientes afectados de un splitter, que podran ser agregados en un caso.
    *
    * @author Richard Cabrera <rcabrera@telconet.ec>
    * @version 1.0 11-08-2016
    *
    * @param  integer $intIdElemento
    * @param  string  $strCodEmpresa
    *
    * @return JSON $objResultado
    *
    */
   public function getJsonAfectadosPorSplitter($intIdElemento,$strCodEmpresa)
    {
        $arrayEncontrados = array();
        $intAfectados     = 0;
        $intIdPersona     = "";
        $arrayInterfaces  = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')->getInterfaces($intIdElemento,"Todos",0,100);
        if ($arrayInterfaces)
        {
            foreach ($arrayInterfaces as $strInterface)
            {
                $intAfectados     = $intAfectados + 1;
                $strLogin         = "";
                $intPuntoId       = "";
                $intIdCliente     = "";
                $strNombreCliente = "";
                $arrayServiciosPorInterface = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                        ->getServiciosPorInterface($strInterface->getId(), $strCodEmpresa);
                foreach($arrayServiciosPorInterface as $arrayServicio)
                {
                    if(!$strLogin)
                    {
                        $strLogin = $arrayServicio['login'];
                    }
                    else
                    {
                        $strLogin = $strLogin . ", " . $arrayServicio['login'];
                    }
                }

                $objInfoPunto = $this->_em->getRepository('schemaBundle:InfoPunto')->findOneByLogin($strLogin);
                if($objInfoPunto)
                {
                    $intPuntoId       = $objInfoPunto->getId();
                    $objInfoPersona   = $objInfoPunto->getPersonaEmpresaRolId()->getPersonaId();
                    if($objInfoPersona)
                    {
                       $intIdCliente     = $objInfoPersona->getId();
                       $strNombreCliente = $objInfoPersona->__toString();
                    }

                    $arrayEncontrados[] = array('id_parte_afectada'    => $intPuntoId,
                                               'nombre_parte_afectada' => $strLogin,
                                               'id_descripcion_1'      => $intIdCliente ? $intIdCliente : "",
                                               'nombre_descripcion_1'  => $strNombreCliente,
                                               'id_descripcion_2'      => '',
                                               'nombre_descripcion_2'  => '');
                }
            }
            $objAfectados = json_encode($arrayEncontrados);
            $objResultado = '{"total":"' . $intAfectados . '","encontrados":' . $objAfectados . '}';
            return $objResultado;
        }
        else
        {
            $objResultado = '{"total":"0","encontrados":[]}';
            return $objResultado;
        }
    }

    public function generarJsonLoginesXElemento($id_param)
    {
        $arr_encontrados = array();
        //AND s.interfaceElementoId = ie.id      
        $sql = "SELECT pu  
                FROM 
                schemaBundle:InfoPersona pe, 
                schemaBundle:InfoPersonaEmpresaRol per, 
                schemaBundle:InfoPunto pu, 
                schemaBundle:InfoServicio s, 
                schemaBundle:InfoInterfaceElemento ie, 
                schemaBundle:InfoElemento e,
                schemaBundle:InfoServicioTecnico ift
                
                WHERE 
                per.personaId = pe.id 
                AND pu.personaEmpresaRolId = per.id 
                AND s.puntoId = pu.id                              
                AND ift.interfaceElementoId = ie.id               
                AND ift.servicioId = s.id                
                AND ie.elementoId = e.id 
                AND e.id = '$id_param'  
        
                AND LOWER(s.estado) not like LOWER('Eliminado') 
                AND LOWER(pu.estado) not like LOWER('Eliminado') 
                AND LOWER(per.estado) not like LOWER('Eliminado') 
                AND LOWER(pe.estado) not like LOWER('Eliminado') 
               ";

        $query = $this->_em->createQuery($sql);
        $registros = $query->getResult();

        if($registros)
        {
            $num = count($registros);

            foreach($registros as $data)
            {
                $idCliente = ($data->getPersonaEmpresaRolId() ? ($data->getPersonaEmpresaRolId()->getPersonaId() ?
                            ($data->getPersonaEmpresaRolId()->getPersonaId()->getId() ? $data->getPersonaEmpresaRolId()->getPersonaId()->getId() : "" ) : "") : "");
                $nombreCliente = ($data->getPersonaEmpresaRolId() ? ($data->getPersonaEmpresaRolId()->getPersonaId() ?
                            ($data->getPersonaEmpresaRolId()->getPersonaId()->getRazonSocial() ? $data->getPersonaEmpresaRolId()->getPersonaId()->getRazonSocial() : $data->getPersonaEmpresaRolId()->getPersonaId()->getNombres() . " " . $data->getPersonaEmpresaRolId()->getPersonaId()->getApellidos() ) : "") : "");

                $arr_encontrados[] = array('id_parte_afectada' => $data->getId(),
                    'nombre_parte_afectada' => $data->getLogin(),
                    'id_descripcion_1' => $idCliente,
                    'nombre_descripcion_1' => $nombreCliente,
                    'id_descripcion_2' => '',
                    'nombre_descripcion_2' => '');
            }
            $dataF = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $dataF . '}';
            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';
            return $resultado;
        }
    }

    public function generarJsonInterfacesXElemento($id_elemento, $estado, $start, $limit)
    {
        $arr_encontrados = array();

        $encontradosTotal = $this->getInterfacesXElemento($id_elemento, $estado, '', '');
        //$encontrados = $this->getInterfacesXElemento($id_elemento,$estado,$start,$limit);

        if($encontradosTotal != null && count($encontradosTotal) > 0)
        {
            $num = count($encontradosTotal);
            foreach($encontradosTotal as $entidad)
            {
                $arr_encontrados[] = array('id_parte_afectada' => $entidad->getElementoId()->getId(),
                    'nombre_parte_afectada' => $entidad->getElementoId()->getNombreElemento(),
                    'id_descripcion_1' => $entidad->getId(),
                    'nombre_descripcion_1' => $entidad->getNombreInterfaceElemento(),
                    'id_descripcion_2' => '',
                    'nombre_descripcion_2' => '');
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    /**
     * Funcion que obtiene Json de interface por elemento enviado como parametro
     * 
     * @param Integer    $id_elemento
     * @param String     $estado
     * @param Integer    $start
     * @param Integer    $limit
     * 
     * @return array     $resultado
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 01-06-2016
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.2 04-07-2016 se aumento en el json un campo con nombre de interface y estado
     * 
     * @since 1.0
     */
    public function generarJsonInterfacesPorElemento($id_elemento, $estado, $start, $limit)
    {
        $arr_encontrados = array();

        $encontradosTotal = $this->getInterfacesXElemento($id_elemento, $estado, '', '');

        $encontrados = $this->getInterfacesXElemento($id_elemento, $estado, $start, $limit);

        if($encontrados)
        {

            $num = count($encontradosTotal);

            foreach($encontrados as $entidad)
            {
                $arr_encontrados[] = array('idInterface'             => $entidad->getId(),
                                           'nombreInterfaceElemento' => $entidad->getNombreInterfaceElemento(),
                                           'estado'                  => $entidad->getEstado(),
                                           'nombreEstadoInterface'   => $entidad->getNombreInterfaceElemento().' - '.$entidad->getEstado());
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    /**
     * generarJsonActivoFijo
     *
     * Esta funcion retorna la informacion del modelo y la marca del elemento seleccionado en el panel de movilizacion
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 17-12-2015
     *
     * @param integer  $id_param
     * @param String   $name_param
     *
     * @return JSON $resultado
     *
     */
    public function generarJsonActivoFijo($id_param, $name_param)
    {
        $arr_encontrados = array();
        $nombreModelo = '';
        $nombreMarca = '';
        if($id_param)
        {
            $elemento = $this->_em->getRepository('schemaBundle:InfoElemento')->find($id_param);
            if($elemento)
            {
                $modeloId = $elemento->getModeloElementoId();
                if($modeloId)
                {
                    $modelo = $this->_em->getRepository('schemaBundle:AdmiModeloElemento')->find($modeloId);
                    if($modelo)
                    {
                        $nombreModelo = $modelo->getNombreModeloElemento();
                        $marca = $this->_em->getRepository('schemaBundle:AdmiMarcaElemento')->find($modelo->getMarcaElementoId());
                        if($marca)
                        {
                            $nombreMarca = $marca->getNombreMarcaElemento();
                        }
                    }
                }
            }

            $arr_encontrados[] = array('id_parte_afectada' => $id_param,
                'nombre_parte_afectada' => $name_param,
                'id_descripcion_1' => '',
                'nombre_descripcion_1' => $nombreModelo,
                'id_descripcion_2' => '',
                'nombre_descripcion_2' => $nombreMarca);

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"1","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }


     /**
     * generarJsonElementosPorCiudadYTipoYEmpresa
     *
     * Esta funcion retorna los elementos de una ciudad, de un tipo especifico y que pertenescan a una empresa especifica
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 13-07-2016
     *
     * @param array $arrayParametros[
     *                              'tipoElemento' => Recibe el nombre del tipo de elemento
     *                              'cantonId'     => Recibe el codigo de la ciudad
     *                              'codEmpresa'   => Recibe el codigo de la empresa
     *                              'tipoConsulta' => Recibe el nombre para saber si se busca por afectados o por elementos
     *                              'wsNetWorking' => Recibe S o N para saber si se debe consumir el WS de networking
     *                              'pe'           => Recibe el nombre del PE
     *                              'anillo'       => Recibe el numero del anillo
     *                              ]
     *
     * @return JSON $objResultado
     *
     */
    public function generarJsonElementosPorCiudadYTipoYEmpresa($arrayParametros)
    {
        $intCantidadElementos = 0;
        $arrayResultado       = array('total'       => 0,
                                      'encontrados' => array(),
                                      'mensaje'     => 'No se realizó la consulta',
                                      'status'      => '000');
        try
        {
            if($arrayParametros != null && $arrayParametros["cantonId"])
            {
                if($arrayParametros["wsNetWorking"] == "N")
                {
                   $arrayParametros["empresaCod"]   =  $arrayParametros["codEmpresa"];

                    $arrayElementos = $this->generarRegistrosElementosPorCiudadYTipoYEmpresa($arrayParametros);
                    $arrayElementos = $arrayElementos['registros'];

                    foreach ($arrayElementos as $arrayItemElemento)
                    {
                        $intCantidadElementos = $intCantidadElementos + 1;
                        if($arrayParametros["tipoConsulta"] == "getEncontrados")
                        {
                            $arrayEncontrados[] = array('id_parte_afectada'     => $arrayItemElemento['idElemento'],
                                                        'nombre_parte_afectada' => $arrayItemElemento['nombreElemento'],
                                                        'nombre_descripcion_1'  => $arrayItemElemento['nombreModeloElemento']);
                        }
                        else if($arrayParametros["tipoConsulta"] == "getElementos")
                        {
                            $arrayEncontrados[] = array('idElemento'     => $arrayItemElemento['idElemento'],
                                                        'nombreElemento' => $arrayItemElemento['nombreElemento']);
                        }
                    }

                    $arrayResultado = array('total'       => $intCantidadElementos,
                                            'encontrados' => $arrayEncontrados,
                                            'mensaje'     => 'Consulta realizada con éxito',
                                            'status'      => '100');
                }
                else
                {
                    if($arrayParametros["pe"])
                    {
                        $objElemento = $this->_em->getRepository("schemaBundle:InfoElemento")->findOneBy(array("nombreElemento" => $arrayParametros["pe"]));

                        if($objElemento)
                        {
                            $arraySwitches = $arrayParametros["servicioTecnico"]->getSwitchesByPe($objElemento->getId());
                        }

                        foreach($arraySwitches as $arrayItemSwitch)
                        {
                            if($arrayItemSwitch['anillo'] == $arrayParametros["anillo"])
                            {
                                $objElemento = $this->_em->getRepository("schemaBundle:InfoElemento")
                                                         ->findOneBy(array("nombreElemento" => $arrayItemSwitch['sw'],"estado" => "Activo"));

                                if(is_object($objElemento))
                                {
                                    if(!in_array($arrayItemSwitch,$arrayIds))
                                    {
                                        $intCantidadElementos = $intCantidadElementos + 1;
                                        $arrayIds[]           = $objElemento->getId();
                                        $arrayEncontrados[]   = array('id_parte_afectada'     => $objElemento->getId(),
                                                                      'nombre_parte_afectada' => $objElemento->getNombreElemento(),
                                                                      'id_descripcion_1'      => '',
                                                                      'nombre_descripcion_1'  => '',
                                                                      'id_descripcion_2'      => '',
                                                                      'nombre_descripcion_2'  => '');
                                    }
                                }
                            }
                        }

                        $arrayResultado = array('total'       => $intCantidadElementos,
                                                'encontrados' => $arrayEncontrados,
                                                'mensaje'     => 'Consulta realizada con éxito',
                                                'status'      => '100');
                    }
                    else
                    {
                        $arrayResultado = array('total'       => "0",
                                                'encontrados' => "",
                                                'mensaje'     => 'Consulta realizada con éxito',
                                                'status'      => '100');
                    }
                }
            }
            else
            {
                $arrayResultado = array('total'       => "0",
                                        'encontrados' => "",
                                        'mensaje'     => 'Consulta realizada con éxito',
                                        'status'      => '100');
            }
        }
        catch(\Exception $e)
        {
            $arrayResultado = array('total'       => $intCantidadElementos,
                                    'encontrados' => '',
                                    'mensaje'     => 'Existio un error en generarJsonElementosPorCiudadYTipoYEmpresa - ' . $e->getMessage(),
                                    'status'      => '001');
        }

        $objResultado = json_encode($arrayResultado);
        return $objResultado;
    }

     /**
     * generarRegistrosElementosPorCiudadYTipoYEmpresa
     *
     * Esta funcion retorna los elementos de una ciudad, de un tipo especifico y que pertenescan a una empresa especifica
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 13-07-2016
     *
     * @param array $arrayParametros[
     *                              'tipoElemento' => Recibe el nombre del tipo de elemento
     *                              'cantonId'     => Recibe el codigo de la ciudad
     *                              'empresaCod'   => Recibe el codigo de la empresa
     *                              ]
     *
     * @return JSON $arrayDatos
     *
     */
    public function generarRegistrosElementosPorCiudadYTipoYEmpresa($arrayParametros)
    {
        $objQuery    = $this->_em->createQuery();
        $arrayDatos  = array('registros'   => array(),
                             'status'      => '000',
                             'mensaje'     => 'No se realizó la consulta');
        if($arrayParametros)
        {
            try
            {
                $strSql = " SELECT
                                io.id as idElemento,
                                io.nombreElemento,
                                ame.nombreModeloElemento

                            FROM
                                schemaBundle:InfoElemento io,
                                schemaBundle:InfoEmpresaElemento ieo,
                                schemaBundle:AdmiModeloElemento ame,
                                schemaBundle:AdmiTipoElemento ate,
                                schemaBundle:InfoEmpresaElementoUbica ieeu,
                                schemaBundle:InfoUbicacion iu,
                                schemaBundle:AdmiParroquia ap,
                                schemaBundle:AdmiCanton ac

                            WHERE io.id = ieo.elementoId
                                AND io.modeloElementoId = ame.id
                                AND ame.tipoElementoId = ate.id
                                AND io.id = ieeu.elementoId
                                AND ieeu.ubicacionId = iu.id
                                AND iu.parroquiaId = ap.id
                                AND ap.cantonId = ac.id ";

                if($arrayParametros["empresaCod"])
                {
                    $strSql .= " AND ieo.empresaCod = :empresaCod ";
                    $objQuery->setParameter('empresaCod',$arrayParametros["empresaCod"]);
                }

                if($arrayParametros["tipoElemento"])
                {
                    $strSql .= " AND ate.nombreTipoElemento = :tipoElemento ";
                    $objQuery->setParameter('tipoElemento',$arrayParametros["tipoElemento"]);
                }

                if($arrayParametros["empresaCod"])
                {
                    $strSql .= " AND ac.id = :cantonId ";
                    $objQuery->setParameter('cantonId',$arrayParametros["cantonId"]);
                }

                $objQuery->setDQL($strSql);

                $arrayDatos["registros"] = $objQuery->getResult();
                $arrayDatos["status"]    = "100";
                $arrayDatos["mensaje"]   = "Se realizo la consulta con éxito";
            }
            catch(\Exception $e)
            {
                $arrayDatos["registros"] = "";
                $arrayDatos["status"]    = "001";
                $arrayDatos["mensaje"]   = "Existio un error en generarRegistrosElementosPorCiudadYTipoYEmpresa - ".$e->getMessage();
            }
        }
        return $arrayDatos;
    }

    public function getInterfacesXElemento($id_elemento, $estado, $start, $limit)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('e')
            ->from('schemaBundle:InfoInterfaceElemento', 'e');


        if($id_elemento != "")
        {
            $qb->where('e.elementoId = ?1');
            $qb->setParameter(1, $id_elemento);
        }
        if($estado != "Todos")
        {

            if($estado == "not connect" || $estado == "connected")
            {
                $qb->andWhere("e.estado not like 'err-disabled'");
            }
            else
            {
                $qb->andWhere('e.estado = ?3');
                $qb->setParameter(3, $estado);
            }
        }
        if($start != '')
            $qb->setFirstResult($start);
        if($limit != '')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();
        $datos = $query->getResult();

        return $datos;
    }

    public function generarJsonElementosXElementoPadre($id_elemento_padre, $id_tipo_elemento, $estado, $start, $limit)
    {
        $arr_encontrados = array();

        $resultados = $this->getElementosXElementoPadre($id_elemento_padre, $id_tipo_elemento, $estado, $start, $limit);
        if($resultados)
        {
            $num = $resultados['total'];
            $encontrados = $resultados['registros'];

            if($encontrados && count($encontrados) > 0)
            {
                foreach($encontrados as $entidad)
                {
                    $arr_encontrados[] = array('id_parte_afectada' => $entidad->getId(),
                        'nombre_parte_afectada' => $entidad->getNombreElemento(),
                        'id_descripcion_1' => '',
                        'nombre_descripcion_1' => '',
                        'id_descripcion_2' => '',
                        'nombre_descripcion_2' => '');
                }

                $data = json_encode($arr_encontrados);
                $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

                return $resultado;
            }
            else
            {
                $resultado = '{"total":"0","encontrados":[]}';
                return $resultado;
            }
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';
            return $resultado;
        }
    }

    public function getElementosXElementoPadre($id_elemento_padre, $id_tipo_elemento, $estado, $start, $limit)
    {
        $selectedCont = " count(e) as cont ";
        $selectedData = " DISTINCT e ";

        $cuerpoQuery = "FROM 
							schemaBundle:InfoElemento e,
							schemaBundle:AdmiModeloElemento me,
							schemaBundle:AdmiTipoElemento te,
							schemaBundle:InfoRelacionElemento re,
							schemaBundle:InfoHistorialElemento eHist 
						WHERE 
							e.modeloElementoId = me.id
							AND me.tipoElementoId = te.id
							AND te.id = '$id_tipo_elemento' 
							AND re.elementoIdB = e.id
							AND re.elementoIdA = '$id_elemento_padre' 
							AND e.id = eHist.elementoId 
							AND eHist.id = (SELECT MAX(eHistMax.id) 
											FROM schemaBundle:InfoHistorialElemento eHistMax
											WHERE eHistMax.elementoId = eHist.elementoId)   
							AND lower(eHist.estadoElemento) not like lower('Eliminado') 
						
						ORDER BY e.nombreElemento ASC
					";

        $sqlC = "SELECT $selectedCont $cuerpoQuery ";
        $sql = "SELECT $selectedData $cuerpoQuery ";

        $queryC = $this->_em->createQuery($sqlC);
        $query = $this->_em->createQuery($sql);

        $resultTotal = $queryC->getOneOrNullResult();
        $total = ($resultTotal ? ($resultTotal["cont"] ? $resultTotal["cont"] : 0) : 0);
        //$total=count($query->getResult());
        //echo $query->getSql();

        $datos = $query->setFirstResult($start)->setMaxResults($limit)->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;

        return $resultado;
    }

    public function getIdsInterfacesXElementoId($id_elemento)
    {
        $selectedCont = " count(ie) as cont ";
        $selectedData = " DISTINCT ie.id ";

        $cuerpoQuery = "FROM 
							schemaBundle:InfoElemento e, 
							schemaBundle:InfoInterfaceElemento ie, 
							schemaBundle:InfoHistorialElemento eHist 
						WHERE  
							ie.elementoId = e.id
							AND e.id = '$id_elemento' 
							AND e.id = eHist.elementoId 
							AND eHist.id = (SELECT MAX(eHistMax.id) 
											FROM schemaBundle:InfoHistorialElemento eHistMax
											WHERE eHistMax.elementoId = eHist.elementoId)   
							AND lower(eHist.estadoElemento) not like lower('Eliminado') 
					";

        $sqlC = "SELECT $selectedCont $cuerpoQuery ";
        $sql = "SELECT $selectedData $cuerpoQuery ";

        //$queryC = $this->_em->createQuery($sqlC); 
        $query = $this->_em->createQuery($sql);

        //$resultTotal = $queryC->getOneOrNullResult();
        //$total = ($resultTotal ? ($resultTotal["cont"] ? $resultTotal["cont"] : 0) : 0);
        //$total=count($query->getResult());
        //echo $query->getSql();

        $datos = $query->getResult();
        //$resultado['registros']=$datos;
        //$resultado['total']=$total;

        return $datos;
    }

    public function getTipoElementoXElementoId($id_elemento)
    {
        $selectedCont = " count(te) as cont ";
        $selectedData = " te.nombreTipoElemento ";

        $cuerpoQuery = "FROM 
							schemaBundle:InfoElemento e,
							schemaBundle:AdmiModeloElemento me,
							schemaBundle:AdmiTipoElemento te,
							schemaBundle:InfoHistorialElemento eHist 
						WHERE  
							e.modeloElementoId = me.id
							AND me.tipoElementoId = te.id
							AND e.id = '$id_elemento' 
							AND e.id = eHist.elementoId 
							AND eHist.id = (SELECT MAX(eHistMax.id) 
											FROM schemaBundle:InfoHistorialElemento eHistMax
											WHERE eHistMax.elementoId = eHist.elementoId)   
							AND lower(eHist.estadoElemento) not like lower('Eliminado') 
					";

        $sqlC = "SELECT $selectedCont $cuerpoQuery ";
        $sql = "SELECT $selectedData $cuerpoQuery ";

        //$queryC = $this->_em->createQuery($sqlC); 
        $query = $this->_em->createQuery($sql);

        //$resultTotal = $queryC->getOneOrNullResult();
        //$total = ($resultTotal ? ($resultTotal["cont"] ? $resultTotal["cont"] : 0) : 0);
        //$total=count($query->getResult());
        //echo $query->getSql();

        $datos = $query->getOneOrNullResult();
        //$resultado['registros']=$datos;
        //$resultado['total']=$total;

        return $datos;
    }

    /**
     * @version Inicial
     * 
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.1 26-08-2016   Se cambia los paramtros que recibe la función a un array
     *                           se modifica la consulta que devuelve las cajas
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.2 10-10-2016   Se valida para que soporte modelos separados por coma, y la consulta no dependa del modelo
     * 
     * @param array $arrayParams['tipoElemento']    String: Tipo elemento 
     *                          ['idEmpresa']       String: Código de la empresa
     *                          ['nombreElemento']  String: Nombre del elemento ej 'CASSETTE, ODF'
     *                          ['estado']          String: Estado de los elementos
     *                          ['jurisdiccion']    String: Jurisdiccion a la que pertenece
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.3 08-09-2017  En el retorno se agrega el modelo del elemento y el estado
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.4 05-05-2022  Se agrega limite de datos a cargar en el combo de elementos contenedor
     *                          
     * @return array InfoElemento retorna json que setea los valores en el dropdown Jurisdicción
     */
    public function generarJsonElementoContenedor($arrayParams)
    {
        $arrayEncontrados              = array();
        $jsonResultado                 = null;
        $arrayParams['nombreElemento'] = strtoupper($arrayParams['nombreElemento']);
        try
        {
            //Query que obtiene los Datos
            $query          = $this->_em->createQuery();
            $dqlSelect      = "SELECT e ";
            //Query que obtiene el conteo de resultado de datos
            $queryCount     = $this->_em->createQuery();
            $dqlSelectCount = "SELECT count(e.id) ";
             
            //Cuerpo del Query
            $from        = " FROM schemaBundle:InfoElemento e ";
            $dqlBody =         " WHERE 1=1 ";

            if($arrayParams['tipoElemento'] != "")
            {
                $from      .= " ,schemaBundle:AdmiModeloElemento admi_modelo_elemento,
                           schemaBundle:AdmiTipoElemento admi_tipo_elemento";
                $arrayTipoElemento = explode(",", $arrayParams['tipoElemento']);   
                
                $dqlBody   .= " AND e.modeloElementoId = admi_modelo_elemento
                                AND admi_modelo_elemento.tipoElementoId = admi_tipo_elemento ";
                
                $dqlBody   .= " AND admi_tipo_elemento.nombreTipoElemento in (:tipoElemento) ";                
                $query->setParameter('tipoElemento', $arrayTipoElemento);
                $queryCount->setParameter('tipoElemento', $arrayParams['tipoElemento']);
            }
            if($arrayParams['idEmpresa'] != "")
            {
                $from       .= " ,schemaBundle:InfoEmpresaElemento info_empresa_elemento ";
                $dqlBody    .= " AND e = info_empresa_elemento.elementoId
                                AND info_empresa_elemento.empresaCod = :idEmpresa ";
                $query->setParameter('idEmpresa', $arrayParams['idEmpresa']);
                $queryCount->setParameter('idEmpresa', $arrayParams['idEmpresa']);
            }

            if($arrayParams['jurisdiccion'] != "")
            {
                $from       .= " , schemaBundle:InfoEmpresaElementoUbica info_empresa_elemento_ubica,
                                schemaBundle:InfoUbicacion info_ubicacion,
                                schemaBundle:AdmiParroquia admi_parroquia,
                                schemaBundle:AdmiCanton admi_canton,
                                schemaBundle:AdmiCantonJurisdiccion admi_canton_jurisdiccion,
                                schemaBundle:AdmiJurisdiccion admi_jurisdiccion ";
                $dqlBody    .= " AND info_empresa_elemento_ubica.ubicacionId = info_ubicacion
                                AND info_ubicacion.parroquiaId = admi_parroquia
                                AND admi_parroquia.cantonId = admi_canton
                                AND admi_canton = admi_canton_jurisdiccion.cantonId
                                AND admi_canton_jurisdiccion.jurisdiccionId = admi_jurisdiccion";
                $dqlBody    .= "AND admi_jurisdiccion.id = :jurisdiccion ";
                $query->setParameter('jurisdiccion', $arrayParams['jurisdiccion']);
                $queryCount->setParameter('jurisdiccion', $arrayParams['jurisdiccion']);
            }
            
            if($arrayParams['nombreElemento'] != "")
            {
                $dqlBody    .= "AND UPPER(e.nombreElemento) like :nombreElemento ";            
                $query->setParameter('nombreElemento', "%" . strtoupper($arrayParams['nombreElemento']) . "%");
                $queryCount->setParameter('nombreElemento', "%" . strtoupper($arrayParams['nombreElemento']) . "%");
            }
            if($arrayParams['estado'] != "Todos")
            {
                $dqlBody    .= "AND e.estado = :estado ";            
                $query->setParameter('estado', $arrayParams['estado']);
                $queryCount->setParameter('estado', $arrayParams['estado']);
            }

            //query de datos        
            $dqlCompleto = $dqlSelect.$from.$dqlBody." order by e.nombreElemento ASC";

            //resultado de query de datos
            $query->setDQL($dqlCompleto);  
            
            $arrayDatos     = $query->setFirstResult($arrayParams['start'])->setMaxResults($arrayParams['limit'])->getResult();

            $arrayResultado = array('total'         => 0,
                                    'encontrados'   => [],
                                    "status"        => "ERROR",
                                    "mensaje"       => "Problemas al realizar la consulta." );
            if($arrayDatos)
            {
                $dqlCompleto    = $dqlSelectCount.$from.$dqlBody;
                $queryCount->setDQL($dqlCompleto);
                $intTotal       = $queryCount->getSingleScalarResult();
                foreach($arrayDatos as $entidad)
                {
                    $arrayEncontrados[] = array('id_elemento'           => $entidad->getId(),
                                                'nombre_elemento'       => trim($entidad->getNombreElemento()),
                                                'estado'                => trim($entidad->getEstado()),
                                                'nombre_modelo_elemento'=> is_object($entidad->getModeloElementoId()) ? 
                                                                                     $entidad->getModeloElementoId()->getNombreModeloElemento() : '');
                    
                }
                $arrayResultado = array('total'         => $intTotal,
                                        'encontrados'   => $arrayEncontrados,
                                        "status"        => "OK",
                                        "mensaje"       => "Consulta Exitosa." );

            }
            $jsonResultado = json_encode($arrayResultado);
        }
        catch (\Exception $ex)
        {
            $arrayResultado = array('total'         => 0,
                                    'encontrados'   => [],
                                    "status"        => "ERROR",
                                    "mensaje"       => "Error: " . $ex->getMessage());
        }
        return $jsonResultado;
    }
    
    //----------------
    //----- DSLAM ----
    //----------------
    /**
     * Documentación para el método 'generarJsonDslams'.
     *
     * Metodo utilizado para generar JSON de elementos DSLAMS
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 18-05-2016    Se agrega parametro de respuesta de operatividad de elemento
     * @since 1.0
     */
    public function generarJsonDslams( $nombreElemento, 
                                       $ipElemento, 
                                       $modeloElemento, 
                                       $marcaElemento, 
                                       $tipoElemento, 
                                       $canton, 
                                       $jurisdiccion, 
                                       $popElemento,
                                       $estado, 
                                       $start, 
                                       $limit, 
                                       $em, 
                                       $idEmpresa
                                     )
    {
        $arr_encontrados = array();

        $resultado = $this->getElementosDslams( $nombreElemento, 
                                                $ipElemento, 
                                                $modeloElemento, 
                                                $marcaElemento, 
                                                $tipoElemento, 
                                                $canton, 
                                                $jurisdiccion, 
                                                $popElemento, 
                                                $estado, 
                                                $start, 
                                                $limit, 
                                                $idEmpresa
                                              );

        $encontrados = $resultado['registros'];
        $encontradosTotal = $resultado['total'];


        if($encontrados)
        {
            $num = $encontradosTotal;
            foreach($encontrados as $entidad)
            {
                $ipDslam        = $entidad->getIp();
                $historicoDslam = $entidad->getEstadoElemento();
                $modeloDslam    = $entidad->getNombreModeloElemento();
                $marcaDslam     = $entidad->getNombreMarcaElemento();
                $canton         = $entidad->getNombreCanton();

                if($entidad->getIdJurisdiccion())
                {
                    $jurisdiccionNombre = $entidad->getNombreJurisdiccion();
                }
                else
                {
                    $jurisdiccionNombre = "NA";
                }

                if($entidad->getIdElementoB())
                {
                    $nombrePop = $entidad->getNombreElementoB();
                }
                else
                {
                    $nombrePop = "NA";
                }
                
                //Se agrega codigo para validar existencia de caracteristica de elemento Operativo
                $entityDetalleElementoOp = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                     ->findOneBy(array("elementoId"    => $entidad->getId(),
                                                                       "detalleNombre" => "RADIO OPERATIVO"));
                if($entityDetalleElementoOp)
                {
                    $strRadioOperativo = "NO";
                }
                else
                {
                    $strRadioOperativo = "SI";
                }

                $arr_encontrados[] = array( 'idElemento'         => $entidad->getId(),
                                            'nombreElemento'     => $entidad->getNombreElemento(),
                                            'nombreElementoPop'  => $nombrePop,
                                            'ipElemento'         => $ipDslam,
                                            'cantonNombre'       => $canton,
                                            'jurisdiccionNombre' => $jurisdiccionNombre,
                                            'switchTelconet'     => "",
                                            'puertoSwitch'       => "",
                                            'marcaElemento'      => $marcaDslam,
                                            'modeloElemento'     => $modeloDslam,
                                            'estado'             => (trim($historicoDslam) == 'Eliminado' ? 'Eliminado' : 'Activo'),
                                            'action1'            => 'button-grid-show',
                                            'action2'            => (trim($historicoDslam) == 'Eliminado' ? 
                                                                    'button-grid-invisible' : 
                                                                    'button-grid-edit'),
                                            'action3'            => (trim($historicoDslam) == 'Eliminado' ? 
                                                                    'button-grid-invisible' : 
                                                                    'button-grid-delete'),
                                            'action4'            => (trim($historicoDslam) == 'Eliminado' ? 
                                                                    'button-grid-invisible' : 
                                                                    'button-grid-edit-perfiles'),
                                            'botonOperatividad'  => (trim($entidad->getEstadoElemento()) != 'Eliminado' ? 
                                                                    $strRadioOperativo :
                                                                    'Eliminado')
                                          );
            }

            $data      = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';
            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';
            return $resultado;
        }
    }

    public function getUltimoEstadoElemento($idElemento)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('info_historial_elemento')
            ->from('schemaBundle:InfoHistorialElemento', 'info_historial_elemento')
            ->where('info_historial_elemento.elementoId = ?1')
            ->andWhere($qb->expr()->in('info_historial_elemento', $this->_em->createQueryBuilder()->select('MAX(info_historial_elemento_max)')
                    ->from('schemaBundle:InfoHistorialElemento', 'info_historial_elemento_max')
                    ->where('info_historial_elemento_max.elementoId = info_historial_elemento.elementoId')
                    ->getDQL()))
            ->setParameter(1, $idElemento);
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getElementosDslams($nombreElemento, $ipElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $popElemento, $estado, $start, $limit, $idEmpresa)
    {
        $qb = $this->_em->createQueryBuilder();
        $qbC = $this->_em->createQueryBuilder();
        $qb->select('e');
        $qb->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?2')
            ->setParameter(2, $tipoElemento);

        $qbC->select('count(e.id)');
        $qbC->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?2')
            ->setParameter(2, $tipoElemento);


        if($nombreElemento != "")
        {
//            print_r("entre nombre elemento");
            $qb->andWhere('UPPER(e.nombreElemento) like ?1');
            $qb->setParameter(1, '%' . $nombreElemento . '%');

            $qbC->andWhere('UPPER(e.nombreElemento) like ?1');
            $qbC->setParameter(1, '%' . $nombreElemento . '%');
        }
        if($ipElemento != "")
        {
//            print_r("entre ip elemento");
            $qb->andWhere('e.ip like ?5')
                ->setParameter(5, '%' . $ipElemento . '%');

            $qbC->andWhere('e.ip like ?5')
                ->setParameter(5, '%' . $ipElemento . '%');
        }
        if($marcaElemento != "")
        {
//            print_r("entre marca elemento");
            $qb->andWhere('e.idMarcaElemento = ?6')
                ->setParameter(6, $marcaElemento);

            $qbC->andWhere('e.idMarcaElemento = ?6')
                ->setParameter(6, $marcaElemento);
        }
        if($canton != "" || $jurisdiccion != "")
        {

            if($canton != "")
            {
                $qb->andWhere('e.idCanton = ?7')
                    ->setParameter(7, $canton);

                $qbC->andWhere('e.idCanton = ?7')
                    ->setParameter(7, $canton);
            }
            if($jurisdiccion != "")
            {
                $qb->andWhere('e.idJurisdiccion = ?8')
                    ->setParameter(8, $jurisdiccion);

                $qbC->andWhere('e.idJurisdiccion= ?8')
                    ->setParameter(8, $jurisdiccion);
            }
        }
        if($popElemento != "")
        {
            $qb->andWhere('e.idElementoB = ?9')
                ->setParameter(9, $popElemento);

            $qbC->andWhere('e.idElementoB = ?9')
                ->setParameter(9, $popElemento);
        }
        if($idEmpresa != "")
        {
            $qb->andWhere('e.empresaCod = ?10')
                ->setParameter(10, $idEmpresa);

            $qbC->andWhere('e.empresaCod = ?10')
                ->setParameter(10, $idEmpresa);
        }
        if($modeloElemento != "")
        {
//            print_r("entre modelo elemento");
            $qb->andWhere('e.idModeloElemento = ?3')
                ->setParameter(3, $modeloElemento);

            $qbC->andWhere('e.idModeloElemento = ?3')
                ->setParameter(3, $modeloElemento);
        }
        if($estado != "Todos")
        {
//            print_r("entre estado elemento");

            $qb->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $estado);

            $qbC->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $estado);
        }

        //contar cuantos datos trae en total
        $total = $qbC->getQuery()->getSingleScalarResult();

        //datos con limits
        if($start != '')
            $qb->setFirstResult($start);
        if($limit != '')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();

//        print($query->getSQL());
//        die();

        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;

        return $resultado;
    }
   
    /**
     * Documentación para el método 'generarJsonElementosEmpresa'.
     *
     * Retorna una acadena tipo JSON con el listado paginado elementos asignados por empresa
     *
     * @param Array $arrayParametros['EMPRESA']      String: Código de la empresa
     *                              ['TIPO']         String: Id tipo de Elemento
     *                              ['ESTADO']       String: Estado del elemento
     *                              ['ELEMENTO']     Int   : nombre del elemento
     *                              ['JURISDICCION'] Int   : Id de la jurisdicción 
     *                              ['CANTON']       Int   : Id del cantón 
     *                              ['MARCA']        Int   : Id de la marca del elemento
     *                              ['MODELO']       Int   : Id del modelo del elemento
     *
     * @return String JSON listado elementos
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 16-03-2016
     * 
     * @author Sofia Fernandez <sfernandez@telconet.ec>
     * @version 1.1 10-03-2017 Se modifca el modo para considerar en el detalle del elemento el costo y propietario
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 20-07-2018 Se corrige el parámetro START para mostrar correctamente la paginación de elementos pasivos 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 03-10-2018 Se corrige la consulta para la obtención del propietario 
     * 
     */
    public function generarJsonElementosEmpresa($arrayParametros)
    {
        try
        {
            $objNativeQuery = $this->getResultadoElementosEmpresa($arrayParametros); 
            $strQueryAll    = $objNativeQuery->getSQL();
            $arrResultado   = array();
            
            $objNativeQuery->setSQL("SELECT COUNT(*) AS TOTAL FROM ($strQueryAll)");
            
            $intTotal   = $objNativeQuery->getSingleScalarResult();
            
            if($intTotal > 0)
            {
                if(isset($arrayParametros['LIMIT']))
                {
                    if($arrayParametros['LIMIT'] > 0)
                    {
                        $objNativeQuery->setSQL("SELECT a.*, rownum AS intRownum FROM($strQueryAll) a WHERE rownum <= :LIMIT");
                        $objNativeQuery->setParameter("LIMIT", $arrayParametros['LIMIT'] + $arrayParametros['START']);
                        
                        $strQuery = $objNativeQuery->getSQL();

                        if(isset($arrayParametros['START']))
                        {
                            if($arrayParametros['START'] > 0)
                            {
                                $objNativeQuery->setSQL("SELECT * FROM ($strQuery) WHERE intRownum >= :START");
                                $objNativeQuery->setParameter("START", $arrayParametros['START'] + 1);
                            }
                        }
                    }
                    else
                    {
                        $objNativeQuery->setSQL($strQueryAll);
                    }
                }
                $arrResult = $objNativeQuery->getResult();
                
                if(is_array($arrResult))
                {
                    foreach($arrResult as $arrDatos)
                    {   
                        $arrDatos['propietario'] = '';
                        $objDetElementoProp = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                   ->findOneBy(array('elementoId'    => $arrDatos['id_elemento'],
                                                                     'detalleNombre' => 'PROPIETARIO',
                                                                     'estado'        => 'Activo'));
                        
                        if(is_object($objDetElementoProp))
                        {
                            if(intval($objDetElementoProp->getDetalleValor()) > 0)
                            {
                                $objInfoPerPropietario = $this->_em->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                   ->find($objDetElementoProp->getDetalleValor());
                                if(is_object($objInfoPerPropietario))
                                {
                                    $objInfoPersona = $objInfoPerPropietario->getPersonaId();
                                    if(is_object($objInfoPersona))
                                    {
                                        $arrDatos['propietario'] = sprintf("%s",$objInfoPersona);
                                    }
                                }
                            }
                        }

                        $objDetElementoCost = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                   ->findOneBy(array('elementoId'    => $arrDatos['id_elemento'],
                                                                     'detalleNombre' => 'COSTO',
                                                                     'estado'        => 'Activo'));

                        if(is_object($objDetElementoCost))
                        {   
                            $arrDatos['costo'] = $objDetElementoCost->getDetalleValor();
                        }
                        else
                        {
                            $arrDatos['costo'] = 0;
                        }

                        $arrResultado[]= $arrDatos;
                    }
                    return '{"total":"' . $intTotal . '","encontrados":' . json_encode($arrResultado) . '}';
                }
            }
            else
            {
                return '{"total":"0","encontrados":[]}';
            }
        }
        catch(\Exception $ex)
        {
            return '{"total":"0","error":"' . $ex->getMessage() . '"}';
        }
    }
    
    /**
     * Documentación para el método 'getResultadoElementosEmpresa'.
     *
     * Retorna el objeto Query-Nativo para obtener el listado de elementos asignados a empresa
     *
     * @param Array $arrayParametros['EMPRESA']      String: Código de la empresa
     *                              ['TIPO']         String: Id tipo de Elemento
     *                              ['ESTADO']       String: Estado del elemento
     *                              ['ELEMENTO']     Int   : nombre del elemento
     *                              ['JURISDICCION'] Int   : Id de la jurisdicción 
     *                              ['CANTON']       Int   : Id del cantón 
     *                              ['MARCA']        Int   : Id de la marca del elemento
     *                              ['MODELO']       Int   : Id del modelo del elemento
     * 
     * costoQuery: 308
     * 
     * @return NativeQuery Objeto Native Query para obtener los registros de la consulta.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 16-03-2016
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.1 12-07-2016
     * Se modifica el query para que soporte el seteo del prefijo de la empresa y ya no el código.
     * 
     * @version 1.2 22-07-2016
     * Se modifica el query para la correcta obtención de los elementos por ubicación.
     * 
     * @author Sofia Fernandez <sfernandez@telconet.ec>
     * @version 1.3 08-03-2017
     * Se modifica el query para que soporte extraccion de datos para Postes.
     * 
     * @author Sofia Fernandez <sfernandez@telconet.ec>
     * @version 1.4 27-03-2017
     * Se modifica el query para agregar filtro por empresa-oficina.
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.5 05-10-2017
     * Se modifica el query para agregar filtro por id del elemento
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.6 26-09-2018 Se agrega el rownum en el select por error al consultar elementos pasivos 
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.7 13-04-2022 Se agrega validacion del estado que sea Activo en la tabla 
     *                         ADMI_CANTON_JURISDICCION  
     */
    private function getResultadoElementosEmpresa($arrayParametros)
    {
        $rsmBuilder = new ResultSetMappingBuilder($this->_em);
        $ntvQuery   = $this->_em->createNativeQuery(null, $rsmBuilder);
        
        $strWhere = '';
        
        if(isset($arrayParametros['JURISDICCION']) && !empty ($arrayParametros['JURISDICCION']))
        {
            if($arrayParametros['JURISDICCION'] != 'Todas')
            {
                $strWhere .= "AND   J.ID_JURISDICCION = :JURISDICCION ";
                $ntvQuery->setParameter('JURISDICCION',  $arrayParametros['JURISDICCION']);
            }
        }
        
        if(isset($arrayParametros['ELEMENTO']) && !empty ($arrayParametros['ELEMENTO']))
        {
            if($arrayParametros['ELEMENTO'] != '')
            {
                $strWhere .= "AND   UPPER(E.NOMBRE_ELEMENTO) LIKE UPPER(:ELEMENTO) ";
                $ntvQuery->setParameter('ELEMENTO',  '%'.$arrayParametros['ELEMENTO'].'%');
            }
        }
        
        if(isset($arrayParametros['ID_ELEMENTO']) && !empty ($arrayParametros['ID_ELEMENTO']) && $arrayParametros['ID_ELEMENTO'] != '' )
        {
            $strWhere .= "AND   E.ID_ELEMENTO = :ID_ELEMENTO ";
            $ntvQuery->setParameter('ID_ELEMENTO', $arrayParametros['ID_ELEMENTO']);        
        }        
        
        if(isset($arrayParametros['ESTADO']) && !empty ($arrayParametros['ESTADO']))
        {
            if($arrayParametros['ESTADO'] != 'Todos')
            {
                $strWhere .= "AND  E.ESTADO = :ESTADO ";
                $ntvQuery->setParameter('ESTADO',  $arrayParametros['ESTADO']);
            }
        }
        
        if(isset($arrayParametros['CANTON']) && !empty ($arrayParametros['CANTON']))
        {
            if($arrayParametros['CANTON'] != 'Todos')
            {
                $strWhere .= "AND  CA.ID_CANTON = :CANTON ";
                $ntvQuery->setParameter('CANTON',  $arrayParametros['CANTON']);
            }
        }
        
        if(isset($arrayParametros['MARCA']) && !empty ($arrayParametros['MARCA']))
        {
            if($arrayParametros['MARCA'] != 'Todas')
            {
                $strWhere .= "AND  MRE.ID_MARCA_ELEMENTO = :MARCA ";
                $ntvQuery->setParameter('MARCA',  $arrayParametros['MARCA']);
            }
        }
        
        if(isset($arrayParametros['MODELO']) && !empty ($arrayParametros['MODELO']))
        {
            if($arrayParametros['MODELO'] != 'Todos')
            {
                $strWhere .= "AND  MDE.ID_MODELO_ELEMENTO = :MODELO ";
                $ntvQuery->setParameter('MODELO',  $arrayParametros['MODELO']);
            }
        }
        
        $sqlSelect  = " SELECT TE.NOMBRE_TIPO_ELEMENTO,    E.ID_ELEMENTO,              E.NOMBRE_ELEMENTO, 
                               MRE.NOMBRE_MARCA_ELEMENTO,  MDE.NOMBRE_MODELO_ELEMENTO, E.ESTADO ";
        
        $sqlFrom    = " FROM INFO_ELEMENTO                E
                            INNER JOIN INFO_EMPRESA_ELEMENTO_UBICA  EU  ON EU.ELEMENTO_ID         = E.ID_ELEMENTO
                            INNER JOIN INFO_EMPRESA_GRUPO           EG  ON EG.COD_EMPRESA         = EU.EMPRESA_COD
                            INNER JOIN INFO_UBICACION               U   ON U.ID_UBICACION         = EU.UBICACION_ID
                            INNER JOIN ADMI_PARROQUIA               P   ON P.ID_PARROQUIA         = U.PARROQUIA_ID
                            INNER JOIN ADMI_CANTON                  CA  ON CA.ID_CANTON           = P.CANTON_ID
                            INNER JOIN ADMI_CANTON_JURISDICCION     CJ  ON CA.ID_CANTON           = CJ.CANTON_ID ";
        $sqlFrom .=   "AND CJ.ESTADO = :ESTADO_CANTON
                            INNER JOIN ADMI_MODELO_ELEMENTO         MDE ON MDE.ID_MODELO_ELEMENTO = E.MODELO_ELEMENTO_ID
                            INNER JOIN ADMI_TIPO_ELEMENTO           TE  ON TE.ID_TIPO_ELEMENTO    = MDE.TIPO_ELEMENTO_ID
                            INNER JOIN ADMI_MARCA_ELEMENTO          MRE ON MRE.ID_MARCA_ELEMENTO  = MDE.MARCA_ELEMENTO_ID
                            INNER JOIN ADMI_JURISDICCION            J   ON J.ID_JURISDICCION      = CJ.JURISDICCION_ID ";
        
        $ntvQuery->setParameter('ESTADO_CANTON',  'Activo');
        
         $strWhere  = " WHERE TE.ID_TIPO_ELEMENTO = :TIPO
                        AND   EG.PREFIJO          = :EMPRESA
                        $strWhere
                        AND MDE.ESTADO = :ESTADO_MDE "; 
                       
        $strGroup   = "GROUP BY TE.NOMBRE_TIPO_ELEMENTO,    E.ID_ELEMENTO,              E.NOMBRE_ELEMENTO, 
                                MRE.NOMBRE_MARCA_ELEMENTO,  MDE.NOMBRE_MODELO_ELEMENTO, E.ESTADO";    
        
        if(isset($arrayParametros['NOMBRE_TIPO']) && !empty ($arrayParametros['NOMBRE_TIPO']) && ($arrayParametros['NOMBRE_TIPO'] == 'POSTE') 
           && $arrayParametros['UBICACION'] != 'OK')
        {   
            $sqlSelect  .= ", TE.ID_TIPO_ELEMENTO, PR.ID_PERSONA_ROL, PE.RAZON_SOCIAL, J.ID_JURISDICCION, J.NOMBRE_JURISDICCION, CA.ID_CANTON,
                              CA.NOMBRE_CANTON, 
                            CA.REGION , E.DESCRIPCION_ELEMENTO, U.LONGITUD_UBICACION, U.LATITUD_UBICACION,U.DIRECCION_UBICACION, 
                            P.NOMBRE_PARROQUIA, U.ALTURA_SNM, P.ID_PARROQUIA, MDE.ID_MODELO_ELEMENTO, U.ID_UBICACION ";
            
            $sqlFrom    .= " INNER JOIN INFO_OFICINA_GRUPO    O   ON O.ID_OFICINA           = J.OFICINA_ID
                           INNER JOIN INFO_DETALLE_ELEMENTO DE  ON DE.ELEMENTO_ID         = E.ID_ELEMENTO
                           INNER JOIN INFO_PERSONA_EMPRESA_ROL  PR  ON TO_CHAR(PR.ID_PERSONA_ROL) = DE.DETALLE_VALOR 
                           INNER JOIN INFO_PERSONA PE ON PE.ID_PERSONA = PR.PERSONA_ID";
            
            $strWhere   .= " AND DE.DETALLE_NOMBRE = :DETALLE_NOMBRE AND O.EMPRESA_ID = :IDEMPRESA ";
            
            $ntvQuery->setParameter('DETALLE_NOMBRE', 'PROPIETARIO');
            $ntvQuery->setParameter('IDEMPRESA',  $arrayParametros['IDEMPRESA']);
            
            if(isset($arrayParametros['PROPIETARIO']) && !empty ($arrayParametros['PROPIETARIO'])) 
            { 
                
                if($arrayParametros['PROPIETARIO'] != 'Todos')
                {  
                    $strWhere .= " AND DE.DETALLE_VALOR  = :PROPIETARIO ";
                    $ntvQuery->setParameter('PROPIETARIO',  $arrayParametros['PROPIETARIO']);
                    
                }
                       
            }   
 
            $strGroup .= " , TE.ID_TIPO_ELEMENTO, PR.ID_PERSONA_ROL, PE.RAZON_SOCIAL,J.ID_JURISDICCION, J.NOMBRE_JURISDICCION, CA.ID_CANTON, 
                             CA.NOMBRE_CANTON, CA.REGION , E.DESCRIPCION_ELEMENTO, U.LONGITUD_UBICACION,U.LATITUD_UBICACION,U.DIRECCION_UBICACION, 
                             P.NOMBRE_PARROQUIA, U.ALTURA_SNM, P.ID_PARROQUIA, MDE.ID_MODELO_ELEMENTO, U.ID_UBICACION ";
            
            $rsmBuilder->addScalarResult('ID_TIPO_ELEMENTO',     'id_tipo_elemento',      'integer');
            $rsmBuilder->addScalarResult('RAZON_SOCIAL',         'razon_social',          'string');
            $rsmBuilder->addScalarResult('ID_PERSONA_ROL',       'id_persona_rol',        'integer');
            $rsmBuilder->addScalarResult('ID_JURISDICCION',      'id_jurisdiccion',      'integer');
            $rsmBuilder->addScalarResult('NOMBRE_JURISDICCION',  'nombre_jurisdiccion',  'string');
            $rsmBuilder->addScalarResult('ID_CANTON',            'id_canton',            'integer');
            $rsmBuilder->addScalarResult('NOMBRE_CANTON',        'nombre_canton',        'string');
            $rsmBuilder->addScalarResult('REGION',               'region',               'string');
            $rsmBuilder->addScalarResult('DESCRIPCION_ELEMENTO', 'descripcion_elemento', 'string');
            $rsmBuilder->addScalarResult('LONGITUD_UBICACION',   'longitud_ubicacion',   'string');
            $rsmBuilder->addScalarResult('LATITUD_UBICACION',    'latitud_ubicacion',    'string');
            $rsmBuilder->addScalarResult('DIRECCION_UBICACION',  'direccion_ubicacion',  'string');
            $rsmBuilder->addScalarResult('NOMBRE_PARROQUIA',     'nombre_parroquia',     'string');
            $rsmBuilder->addScalarResult('ALTURA_SNM',           'altura_snm',           'string');
            $rsmBuilder->addScalarResult('ID_PARROQUIA',         'id_parroquia',         'integer');
            $rsmBuilder->addScalarResult('ID_MODELO_ELEMENTO',   'id_modelo_elemento',   'integer');
            $rsmBuilder->addScalarResult('ID_UBICACION',         'id_ubicacion',         'integer');

        } 
        
        
        //cargar ubicacion del elemento
        if($arrayParametros['UBICACION'] == 'OK')
        {
            $sqlSelect  .= ", TE.ID_TIPO_ELEMENTO,  J.ID_JURISDICCION, J.NOMBRE_JURISDICCION, CA.ID_CANTON,
                              CA.NOMBRE_CANTON, 
                            CA.REGION , E.DESCRIPCION_ELEMENTO, U.LONGITUD_UBICACION, U.LATITUD_UBICACION,U.DIRECCION_UBICACION, 
                            P.NOMBRE_PARROQUIA, U.ALTURA_SNM, P.ID_PARROQUIA, MDE.ID_MODELO_ELEMENTO, U.ID_UBICACION, 
                            (SELECT DE2.DETALLE_VALOR FROM INFO_DETALLE_ELEMENTO DE2 WHERE DE2.ELEMENTO_ID = E.ID_ELEMENTO AND 
                             DE2.DETALLE_NOMBRE = :DETALLE_LUGAR AND DE2.ESTADO = 'Activo'
                             AND ROWNUM < 2) TIPO_LUGAR,     
                            (SELECT DE2.DETALLE_VALOR FROM INFO_DETALLE_ELEMENTO DE2 WHERE DE2.ELEMENTO_ID = E.ID_ELEMENTO AND 
                             DE2.DETALLE_NOMBRE = :DETALLE_UBICA AND DE2.ESTADO = 'Activo'
                             AND ROWNUM < 2) UBICADO_EN,                               
                            (SELECT DE3.DETALLE_VALOR FROM INFO_DETALLE_ELEMENTO DE3 WHERE DE3.ELEMENTO_ID = E.ID_ELEMENTO AND 
                             DE3.DETALLE_NOMBRE = :DETALLE_NIVEL AND DE3.ESTADO = 'Activo'
                             AND ROWNUM < 2) NIVEL,                             
                            (SELECT E1.NOMBRE_ELEMENTO FROM INFO_RELACION_ELEMENTO RE, INFO_ELEMENTO  E1 WHERE E1.ID_ELEMENTO = RE.ELEMENTO_ID_A AND  
                             RE.TIPO_RELACION NOT IN (:RELACION) AND RE.ELEMENTO_ID_B =  E.ID_ELEMENTO AND  RE.ESTADO = 'Activo') ELEMENTO_CONTENEDOR,
                            (SELECT E1.ID_ELEMENTO FROM INFO_RELACION_ELEMENTO RE, INFO_ELEMENTO  E1 WHERE E1.ID_ELEMENTO = RE.ELEMENTO_ID_A AND  
                             RE.TIPO_RELACION NOT IN (:RELACION) AND RE.ELEMENTO_ID_B =  E.ID_ELEMENTO AND  RE.ESTADO = 'Activo') 
                             ID_ELEMENTO_CONTENEDOR,
                            (SELECT  PE1.RAZON_SOCIAL
                             FROM INFO_DETALLE_ELEMENTO DE3,
                             INFO_PERSONA_EMPRESA_ROL PER,
                             INFO_PERSONA PE1 
                             WHERE DE3.ELEMENTO_ID  = E.ID_ELEMENTO
                             AND TO_CHAR(PER.ID_PERSONA_ROL) = DE3.DETALLE_VALOR
                             AND PE1.ID_PERSONA = PER.PERSONA_ID
                             AND DE3.DETALLE_NOMBRE = :DETALLE_PROPIETARIO
                             AND DE3.ESTADO         = :ESTADO_MDE) PROPIETARIO,
                            (SELECT  PER.ID_PERSONA_ROL
                             FROM INFO_DETALLE_ELEMENTO DE3,
                             INFO_PERSONA_EMPRESA_ROL PER,
                             INFO_PERSONA PE1 
                             WHERE DE3.ELEMENTO_ID  = E.ID_ELEMENTO
                             AND TO_CHAR(PER.ID_PERSONA_ROL) = DE3.DETALLE_VALOR
                             AND PE1.ID_PERSONA = PER.PERSONA_ID
                             AND DE3.DETALLE_NOMBRE = :DETALLE_PROPIETARIO
                             AND DE3.ESTADO         = :ESTADO_MDE) ID_PERSONA_ROL       
                             ";
               
            $sqlFrom    .= " INNER JOIN INFO_OFICINA_GRUPO    O   ON O.ID_OFICINA           = J.OFICINA_ID ";
            
            $strWhere   .= " AND O.EMPRESA_ID = :IDEMPRESA ";
            $ntvQuery->setParameter('IDEMPRESA',  $arrayParametros['IDEMPRESA']);
            $ntvQuery->setParameter('DETALLE_LUGAR',  'TIPO LUGAR');
            $ntvQuery->setParameter('DETALLE_UBICA',  'UBICADO EN');
            $ntvQuery->setParameter('DETALLE_NIVEL',  'NIVEL');
            $ntvQuery->setParameter('DETALLE_PROPIETARIO', 'PROPIETARIO');
            $ntvQuery->setParameter('RELACION', array('TRAMO','RUTA'));
            
            $strGroup .= " , TE.ID_TIPO_ELEMENTO,  J.ID_JURISDICCION, J.NOMBRE_JURISDICCION, CA.ID_CANTON, 
                             CA.NOMBRE_CANTON, CA.REGION , E.DESCRIPCION_ELEMENTO, U.LONGITUD_UBICACION,U.LATITUD_UBICACION,U.DIRECCION_UBICACION, 
                             P.NOMBRE_PARROQUIA, U.ALTURA_SNM, P.ID_PARROQUIA, MDE.ID_MODELO_ELEMENTO, U.ID_UBICACION ";
            
            $rsmBuilder->addScalarResult('ID_TIPO_ELEMENTO',     'id_tipo_elemento',     'integer');
            $rsmBuilder->addScalarResult('RAZON_SOCIAL',         'razon_social',         'string');
            $rsmBuilder->addScalarResult('ID_JURISDICCION',      'id_jurisdiccion',      'integer');
            $rsmBuilder->addScalarResult('NOMBRE_JURISDICCION',  'nombre_jurisdiccion',  'string');
            $rsmBuilder->addScalarResult('ID_CANTON',            'id_canton',            'integer');
            $rsmBuilder->addScalarResult('NOMBRE_CANTON',        'nombre_canton',        'string');
            $rsmBuilder->addScalarResult('REGION',               'region',               'string');
            $rsmBuilder->addScalarResult('DESCRIPCION_ELEMENTO', 'descripcion_elemento', 'string');
            $rsmBuilder->addScalarResult('LONGITUD_UBICACION',   'longitud_ubicacion',   'string');
            $rsmBuilder->addScalarResult('LATITUD_UBICACION',    'latitud_ubicacion',    'string');
            $rsmBuilder->addScalarResult('DIRECCION_UBICACION',  'direccion_ubicacion',  'string');
            $rsmBuilder->addScalarResult('NOMBRE_PARROQUIA',     'nombre_parroquia',     'string');
            $rsmBuilder->addScalarResult('ALTURA_SNM',           'altura_snm',           'string');
            $rsmBuilder->addScalarResult('ID_PARROQUIA',         'id_parroquia',         'integer');
            $rsmBuilder->addScalarResult('ID_MODELO_ELEMENTO',   'id_modelo_elemento',   'integer');
            $rsmBuilder->addScalarResult('ID_UBICACION',         'id_ubicacion',         'integer');            
            $rsmBuilder->addScalarResult('PROPIETARIO',          'propietario',          'string');
            $rsmBuilder->addScalarResult('ID_PERSONA_ROL',       'id_persona_rol',       'string');
            $rsmBuilder->addScalarResult('TIPO_LUGAR',           'tipoLugar',            'string');
            $rsmBuilder->addScalarResult('ELEMENTO_CONTENEDOR',  'elementoContenedor',   'string');       
            $rsmBuilder->addScalarResult('NIVEL',                'nivel',                'string');            
            $rsmBuilder->addScalarResult('ID_ELEMENTO_CONTENEDOR','idElementoContenedor','string');           
            $rsmBuilder->addScalarResult('UBICADO_EN'            ,'ubicadoEn'           ,'string');  

        }
        
        $ntvQuery->setParameter('TIPO',       $arrayParametros['TIPO']);
        $ntvQuery->setParameter('EMPRESA',    $arrayParametros['EMPRESA']);
        $ntvQuery->setParameter('ESTADO_MDE', 'Activo');
        
        $rsmBuilder->addScalarResult('NOMBRE_TIPO_ELEMENTO',   'tipo_elemento',   'string');
        $rsmBuilder->addScalarResult('ID_ELEMENTO',            'id_elemento',     'integer');
        $rsmBuilder->addScalarResult('NOMBRE_ELEMENTO',        'nombre_elemento', 'string');
        $rsmBuilder->addScalarResult('NOMBRE_MARCA_ELEMENTO',  'marca_elemento',  'string');
        $rsmBuilder->addScalarResult('NOMBRE_MODELO_ELEMENTO', 'modelo_elemento', 'string');
        $rsmBuilder->addScalarResult('ESTADO',                 'estado',          'string');
        $rsmBuilder->addScalarResult('TOTAL',                  'total',           'integer');
        
        return $ntvQuery->setSQL($sqlSelect.$sqlFrom.$strWhere.$strGroup);        
    }
    
    public function generarJsonCargarDatosDslam($idDslam,$em){
        $arr_encontrados = array();
//        $em = $this->getEntityManager('telconet_infraestructura');

        $dslam = $em->find('schemaBundle:InfoElemento', $idDslam);

        $elementoUbica = $em->getRepository('schemaBundle:InfoEmpresaElementoUbica')->findBy(array("elementoId" => $dslam->getId()));
        $ubicacion = $em->getRepository('schemaBundle:InfoUbicacion')->findBy(array("id" => $elementoUbica[0]->getUbicacionId()));
        $parroquia = $em->getRepository('schemaBundle:AdmiParroquia')->findBy(array("id" => $ubicacion[0]->getParroquiaId()));
        $canton = $em->getRepository('schemaBundle:AdmiCanton')->findBy(array("id" => $parroquia[0]->getCantonId()));
        $cantonJurisdiccion = $em->getRepository('schemaBundle:AdmiCantonJurisdiccion')->findBy(array("cantonId" => $canton[0]->getId()));
        $jurisdiccion = $em->find('schemaBundle:AdmiJurisdiccion', $cantonJurisdiccion[0]->getJurisdiccionId());
        $popElemento = $em->getRepository('schemaBundle:InfoRelacionElemento')->findBy(array("elementoIdB" => $dslam->getId()));


        $arr_encontrados[] = array('idElemento' => $dslam->getId(),
            'popElementoId' => $popElemento[0]->getElementoIdA(),
            'idCanton' => $canton[0]->getId(),
            'nombreCanton' => trim($canton[0]->getNombreCanton()),
            'idJurisdiccion' => $jurisdiccion->getId(),
            'nombreJurisdiccion' => trim($jurisdiccion->getNombreJurisdiccion()),
            'idParroquia' => $parroquia[0]->getId(),
            'nombreParroquia' => trim($parroquia[0]->getNombreParroquia()));


        $data = json_encode($arr_encontrados);
        $resultado = '{"total":"1","encontrados":' . $data . '}';

        return $resultado;
    }

    //----------------
    //----- RADIO ----
    //----------------

    /**
     * Funcion que sirve para generar json de Radios
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 06-08-2015
     * @version 1.2 26-08-2015
     * @version 1.3 07-06-2016   Se agrega recuperacion de enlaces de elementos radio repetidoras
     * 
     * @author Antonio Ayala <afayala@telconet.ec> 
     * @version 1.4 26-11-2020   Se agrega validación si existe registros de operatividad para obtener el valor de los mismos
     * 
     * @param   $nombreElemento     String
     * @param   $ipElemento         String
     * @param   $modeloElemento     int
     * @param   $marcaElemento      int
     * @param   $tipoElemento       int
     * @param   $canton             int
     * @param   $jurisdiccion       int
     * @param   $popElemento       int
     * @param   $estado             String
     * @param   $start              int
     * @param   $limit              int
     * @param   $em                 entityManager
     * @param   $idEmpresa          int
     */
    public function generarJsonRadios($nombreElemento, $ipElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $popElemento, $estado, $start, $limit, $em, $idEmpresa)
    {
        $arr_encontrados = array();

        $resultado = $this->getElementosRadios($nombreElemento, $ipElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $popElemento, $estado, $start, $limit, $idEmpresa);

        $encontrados = $resultado['registros'];
        $encontradosTotal = $resultado['total'];


        if($encontrados)
        {

            $num = $encontradosTotal;

            foreach($encontrados as $entidad)
            {
                $ipDslam = $entidad->getIp();
                $historicoDslam = $entidad->getEstadoElemento();
                $modeloDslam = $entidad->getNombreModeloElemento();
                $marcaDslam = $entidad->getNombreMarcaElemento();
                $canton = $entidad->getNombreCanton();

                if($entidad->getIdJurisdiccion())
                {
                    $jurisdiccionNombre = $entidad->getNombreJurisdiccion();
                }
                else
                {
                    $jurisdiccionNombre = "NA";
                }

                if($entidad->getIdElementoB())
                {
                    $nombrePop = $entidad->getNombreElementoB();
                }
                else
                {
                    $nombrePop = "NA";
                }

                //Se agrega codigo para validar existencia de caracteristica de elemento Operativo
                $entityDetalleElementoOp = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                    ->findOneBy(array("elementoId" => $entidad->getId(),
                    "detalleNombre" => "RADIO OPERATIVO"));
                if(is_object($entityDetalleElementoOp))
                {
                    $strRadioOperativo = $entityDetalleElementoOp->getDetalleValor();
                }
                else
                {
                    $strRadioOperativo = "SI";
                }
                $objInfoEnlace = null;
                $objInterfaceElemento  = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                        ->findOneBy(array( "elementoId"              => $entidad->getId(),
                                                           "nombreInterfaceElemento" => "wlan1",
                                                           "estado"                  => "connected"));
                //recuper switch padre de elemento
                if($objInterfaceElemento)
                {
                    $objInfoEnlace = $this->_em->getRepository('schemaBundle:InfoEnlace')
                                        ->findOneBy(array( "interfaceElementoFinId" => $objInterfaceElemento->getId(), 
                                                           "estado"                 => "Activo"));
                }
                //recuper radio padre de elemento repetidora
                else
                {
                    $objInterfaceElemento  = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                  ->findOneBy(array( "elementoId"              => $entidad->getId(),
                                                                     "nombreInterfaceElemento" => "esp1",
                                                                     "estado"                  => "connected"));
                    if($objInterfaceElemento)
                    {
                        $objInfoEnlace = $em->getRepository('schemaBundle:InfoEnlace')
                                            ->findOneBy(array( "interfaceElementoFinId" => $objInterfaceElemento->getId(), 
                                                               "estado"                 => "Activo"));
                    }
                }
                
                $arr_encontrados[] = array('idElemento' => $entidad->getId(),
                    'nombreElemento' => $entidad->getNombreElemento(),
                    'nombreElementoPop' => $nombrePop,
                    'ipElemento' => $ipDslam,
                    'cantonNombre' => $canton,
                    'jurisdiccionNombre' => $jurisdiccionNombre,
                    'switchTelconet' => $objInfoEnlace?$objInfoEnlace->getInterfaceElementoIniId()->getElementoId()->getNombreElemento():'',
                    'puertoSwitch' => $objInfoEnlace?$objInfoEnlace->getInterfaceElementoIniId()->getNombreInterfaceElemento():'',
                    'marcaElemento' => $marcaDslam,
                    'modeloElemento' => $modeloDslam,
                    'estado' => (trim($historicoDslam)),
                    'action1' => 'button-grid-show',
                    'action2' => (trim($historicoDslam) == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-edit'),
                    'action3' => (trim($historicoDslam) == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-delete'),
                    'botonOperatividad' => (trim($entidad->getEstadoElemento()) != 'Eliminado' ?
                        $strRadioOperativo :
                        'Eliminado')
                );
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    public function getElementosRadios($nombreElemento, $ipElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $popElemento, $estado, $start, $limit, $idEmpresa)
    {
        $qb = $this->_em->createQueryBuilder();
        $qbC = $this->_em->createQueryBuilder();
        $qb->select('e');
        $qb->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?1')
            ->setParameter(1, $tipoElemento);

        $qbC->select('count(e.id)');
        $qbC->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?1')
            ->setParameter(1, $tipoElemento);


        if($nombreElemento != "")
        {
//            print_r("entre nombre elemento");
            $qb->andWhere('UPPER(e.nombreElemento) like ?2');
            $qb->setParameter(2, '%' . $nombreElemento . '%');

            $qbC->andWhere('UPPER(e.nombreElemento) like ?2');
            $qbC->setParameter(2, '%' . $nombreElemento . '%');
        }
        if($ipElemento != "")
        {
//            print_r("entre ip elemento");
            $qb->andWhere('e.ip like ?5')
                ->setParameter(5, '%' . $ipElemento . '%');

            $qbC->andWhere('e.ip like ?5')
                ->setParameter(5, '%' . $ipElemento . '%');
        }
        if($marcaElemento != "")
        {
//            print_r("entre marca elemento");
            $qb->andWhere('e.idMarcaElemento = ?6')
                ->setParameter(6, $marcaElemento);

            $qbC->andWhere('e.idMarcaElemento = ?6')
                ->setParameter(6, $marcaElemento);
        }
        if($canton != "" || $jurisdiccion != "")
        {

            if($canton != "")
            {
                $qb->andWhere('e.idCanton = ?7')
                    ->setParameter(7, $canton);

                $qbC->andWhere('e.idCanton = ?7')
                    ->setParameter(7, $canton);
            }
            if($jurisdiccion != "")
            {
                $qb->andWhere('e.idJurisdiccion = ?8')
                    ->setParameter(8, $jurisdiccion);

                $qbC->andWhere('e.idJurisdiccion= ?8')
                    ->setParameter(8, $jurisdiccion);
            }
        }
        if($popElemento != "")
        {
            $qb->andWhere('e.idElementoB = ?9')
                ->setParameter(9, $popElemento);

            $qbC->andWhere('e.idElementoB = ?9')
                ->setParameter(9, $popElemento);
        }
        if($idEmpresa != "")
        {
            $qb->andWhere('e.empresaCod = ?10')
                ->setParameter(10, $idEmpresa);

            $qbC->andWhere('e.empresaCod = ?10')
                ->setParameter(10, $idEmpresa);
        }
        if($modeloElemento != "")
        {
//            print_r("entre modelo elemento");
            $qb->andWhere('e.idModeloElemento = ?3')
                ->setParameter(3, $modeloElemento);

            $qbC->andWhere('e.idModeloElemento = ?3')
                ->setParameter(3, $modeloElemento);
        }
        if($estado != "Todos")
        {
//            print_r("entre estado elemento");

            $qb->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $estado);

            $qbC->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $estado);
        }

        //contar cuantos datos trae en total
        $total = $qbC->getQuery()->getSingleScalarResult();

        //datos con limits
        if($start != '')
            $qb->setFirstResult($start);
        if($limit != '')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();

//        print($query->getSQL());
//        die();

        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;

        return $resultado;
    }

    public function generarJsonCargarDatosRadio($idRadio, $em)
    {
        $arr_encontrados = array();
//        $em = $this->getEntityManager('telconet_infraestructura');

        $dslam = $em->find('schemaBundle:InfoElemento', $idRadio);

        $elementoUbica = $em->getRepository('schemaBundle:InfoEmpresaElementoUbica')->findBy(array("elementoId" => $dslam->getId()));
        $ubicacion = $em->getRepository('schemaBundle:InfoUbicacion')->findBy(array("id" => $elementoUbica[0]->getUbicacionId()));
        $parroquia = $em->getRepository('schemaBundle:AdmiParroquia')->findBy(array("id" => $ubicacion[0]->getParroquiaId()));
        $canton = $em->getRepository('schemaBundle:AdmiCanton')->findBy(array("id" => $parroquia[0]->getCantonId()));
        $cantonJurisdiccion = $em->getRepository('schemaBundle:AdmiCantonJurisdiccion')->findBy(array("cantonId" => $canton[0]->getId()));
        $jurisdiccion = $em->find('schemaBundle:AdmiJurisdiccion', $cantonJurisdiccion[0]->getJurisdiccionId());
        $popElemento = $em->getRepository('schemaBundle:InfoRelacionElemento')->findBy(array("elementoIdB" => $dslam->getId()));


        $arr_encontrados[] = array('idElemento' => $dslam->getId(),
            'popElementoId' => $popElemento[0]->getElementoIdA(),
            'idCanton' => $canton[0]->getId(),
            'nombreCanton' => trim($canton[0]->getNombreCanton()),
            'idJurisdiccion' => $jurisdiccion->getId(),
            'nombreJurisdiccion' => trim($jurisdiccion->getNombreJurisdiccion()),
            'idParroquia' => $parroquia[0]->getId(),
            'nombreParroquia' => trim($parroquia[0]->getNombreParroquia()));


        $data = json_encode($arr_encontrados);
        $resultado = '{"total":"1","encontrados":' . $data . '}';

        return $resultado;
    }

    //--------------
    //----- POP ----
    //--------------

    public function generarJsonPops($nombreElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $estado, $start, $limit, $em, $idEmpresa)
    {
        $arr_encontrados = array();
//        $em = $this->getEntityManager('telconet_infraestructura'); 
        //$encontradosTotal = $this->getElementosPops($nombreElemento,$modeloElemento,$marcaElemento,$tipoElemento,$canton,$jurisdiccion,$estado,'','');

        $resultado = $this->getElementosPops($nombreElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $estado, $start, $limit, $idEmpresa);

        $encontrados = $resultado['registros'];
        $encontradosTotal = $resultado['total'];

        if($encontrados)
        {

            $num = count($encontradosTotal);

            foreach($encontrados as $entidad)
            {

                $historicoDslam = $entidad->getEstadoElemento();
                $modeloDslam = $entidad->getNombreModeloElemento();
                $marcaDslam = $entidad->getNombreMarcaElemento();

                $canton = $entidad->getNombreCanton();

                if($entidad->getIdJurisdiccion())
                {

                    $jurisdiccionNombre = $entidad->getNombreJurisdiccion();
                }
                else
                {
                    $jurisdiccionNombre = "NA";
                }

                $arr_encontrados[] = array('idElemento' => $entidad->getId(),
                    'nombreElemento' => $entidad->getNombreElemento(),
                    'cantonNombre' => $canton,
                    'jurisdiccionNombre' => $jurisdiccionNombre,
                    'switchTelconet' => "",
                    'puertoSwitch' => "",
                    'marcaElemento' => $marcaDslam,
                    'modeloElemento' => $modeloDslam,
                    'estado' => (trim($historicoDslam) == 'Eliminado' ? 'Eliminado' : 'Activo'),
                    'action1' => 'button-grid-show',
                    'action2' => (trim($historicoDslam) == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-edit'),
                    'action3' => (trim($historicoDslam) == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-delete'));
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    public function getElementosPops($nombreElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $estado, $start, $limit, $idEmpresa)
    {
        $qb = $this->_em->createQueryBuilder();
        $qbC = $this->_em->createQueryBuilder();
        $qb->select('e')
            ->from('schemaBundle:VistaElementos', 'e')
            ->andWhere('e.idTipoElemento = ?1')
            ->setParameter(1, $tipoElemento);

        $qbC->select('count(e.id)');
        $qbC->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?1')
            ->setParameter(1, $tipoElemento);

        if($nombreElemento != "")
        {
            //print_r("entre nombre elemento");
            $qb->andWhere('UPPER(e.nombreElemento) like ?2')
                ->setParameter(2, '%' . $nombreElemento . '%');

            $qbC->andWhere('UPPER(e.nombreElemento) like ?2')
                ->setParameter(2, '%' . $nombreElemento . '%');
        }
        if($marcaElemento != "")
        {
//            print_r("entre marca elemento");
            $qb->andWhere('e.idMarcaElemento = ?3')
                ->setParameter(3, $marcaElemento);

            $qbC->andWhere('e.idMarcaElemento = ?3')
                ->setParameter(3, $marcaElemento);
        }
        if($canton != "" || $jurisdiccion != "")
        {
            if($canton != "")
            {
                $qb->andWhere('e.idCanton = ?4')
                    ->setParameter(4, $canton);
                $qbC->andWhere('e.idCanton = ?4')
                    ->setParameter(4, $canton);
            }
            if($jurisdiccion != "")
            {
                $qb->andWhere('e.idJurisdiccion = ?5')
                    ->setParameter(5, $jurisdiccion);

                $qbC->andWhere('e.idJurisdiccion = ?5')
                    ->setParameter(5, $jurisdiccion);
            }
        }

        if($modeloElemento != "")
        {
//            print_r("entre modelo elemento");
            $qb->andWhere('e.idModeloElemento = ?6')
                ->setParameter(6, $modeloElemento);

            $qbC->andWhere('e.idModeloElemento = ?6')
                ->setParameter(6, $modeloElemento);
        }
        if($estado != "Todos")
        {
//            print_r("entre estado elemento");

            $qb->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $estado);

            $qbC->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $estado);
        }
        if($idEmpresa != "")
        {
            $qb->andWhere('e.empresaCod = ?7')
                ->setParameter(7, $idEmpresa);

            $qbC->andWhere('e.empresaCod = ?7')
                ->setParameter(7, $idEmpresa);
        }

        //contar cuantos datos trae en total
        $total = $qbC->getQuery()->getSingleScalarResult();

        //datos con limits
        if($start != '')
            $qb->setFirstResult($start);
        if($limit != '')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();

//        print($query->getSQL());
//        die();

        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;

        return $resultado;
    }

    /**
     * Función para obtener los datos de un elemento pop
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 26-09-2018 Se modifica el envío de parámetros y el formato de variables
     * @since 1.0
     */
    public function generarJsonCargarDatosPop($arrayParametros)
    {
        $arrayEncontrados = array();

        $objElemento        = $this->_em->find('schemaBundle:InfoElemento', $arrayParametros["idPop"]);

        $objElementoUbica   = $this->_em->getRepository('schemaBundle:InfoEmpresaElementoUbica')
                                        ->findOneBy(array(  "elementoId" => $objElemento->getId(),
                                                            "empresaCod" => $arrayParametros["codEmpresa"]));
        $objUbicacion       = $this->_em->getRepository('schemaBundle:InfoUbicacion')
                                        ->findOneBy(array("id" => $objElementoUbica->getUbicacionId()));
        $objParroquia       = $this->_em->getRepository('schemaBundle:AdmiParroquia')->findOneBy(array("id" => $objUbicacion->getParroquiaId()));
        $objCanton          = $this->_em->getRepository('schemaBundle:AdmiCanton')->findOneBy(array("id" => $objParroquia->getCantonId()));
        $arrayJurisdiccion  = $this->_em->getRepository('schemaBundle:AdmiJurisdiccion')
                                        ->getJurisdiccionPorCanton($objCanton->getId(), $arrayParametros["codEmpresa"], '');


        $arrayEncontrados[] = array('idElemento'            => $objElemento->getId(),
                                    'idCanton'              => $objCanton->getId(),
                                    'nombreCanton'          => trim($objCanton->getNombreCanton()),
                                    'idJurisdiccion'        => $arrayJurisdiccion[0]->getId(),
                                    'nombreJurisdiccion'    => trim($arrayJurisdiccion[0]->getNombreJurisdiccion()),
                                    'idParroquia'           => $objParroquia->getId(),
                                    'nombreParroquia'       => trim($objParroquia->getNombreParroquia()));
        $strData = json_encode($arrayEncontrados);
        $strResultado = '{"total":"1","encontrados":' . $strData . '}';

        return $strResultado;
    }

    public function generarJsonElementosPorPop($popId, $empresa, $estado, $start, $limit, $emInfraestructura)
    {
        $arr_encontrados = array();

        //$em = $this->getManager('telconet');
        $entidadesTotal = $this->getElementosPorPop($popId, $estado, '', '');

        $entidad = $this->getElementosPorPop($popId, $estado, $start, $limit);

        if($entidad)
        {

            $num = count($entidadesTotal);
            foreach($entidad as $entity)
            {

                $elementoPopId = $entity->getElementoIdA();
                $pop = $emInfraestructura->find('schemaBundle:InfoElemento', $elementoPopId);

                $relacionElemento = $emInfraestructura->getRepository('schemaBundle:InfoEmpresaElemento')->findOneBy(array("elementoId" => $pop->getId()));
                $empresaId = $relacionElemento->getEmpresaCod();

                if($empresaId == $empresa)
                {
                    $elementoDslamId = $entity->getElementoIdB();
                    $dslam = $emInfraestructura->find('schemaBundle:InfoElemento', $elementoDslamId);
                    $nombreDslam = $dslam->getNombreElemento();
                    $ipObj = $emInfraestructura->getRepository('schemaBundle:InfoIp')->findOneBy(array("elementoId" => $dslam->getId(), "estado" => "Activo"));
                    if($ipObj)
                    {
                        $ip = $ipObj->getIp();
                    }
                    else
                    {
                        $ip = "NA";
                    }


                    $arr_encontrados[] = array(
                        'nombreElemento' => $nombreDslam,
                        'modeloElemento' => $dslam->getModeloElementoId()->getNombreModeloElemento(),
                        'tipoElemento' => $dslam->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento(),
                        'ip' => $ip,
                        'estado' => $dslam->getEstado()
                    );
                }
            }

            if($num == 0)
            {
                $resultado = array('total' => 1,
                    'encontrados' => array('idConectorInterface' => 0, 'nombreConectorInterface' => 'Ninguno', 'idConectorInterface' => 0, 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode($resultado);

                return $resultado;
            }
            else
            {
                $data = json_encode($arr_encontrados);
                $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

                return $resultado;
            }
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    public function getElementosPorPop($popId, $estado, $start, $limit)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('e')
            ->from('schemaBundle:InfoRelacionElemento', 'e');

        if($popId != "")
        {
            $qb->where('e.elementoIdA = ?1');
            $qb->setParameter(1, $popId);
        }
        if($estado != "")
        {
            $qb->andWhere('e.estado = ?2');
            $qb->setParameter(2, $estado);
        }
        if($start != '')
            $qb->setFirstResult($start);
        if($limit != '')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();


        return $query->getResult();
    }

    //---------------
    //----- NODO ----
    //---------------

    public function generarJsonNodos($nombreElemento, $ipElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $nodoElemento, $estado, $start, $limit, $em, $idEmpresa)
    {
        $arr_encontrados = array();

        $resultado = $this->getElementosNodos($nombreElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $estado, $start, $limit, $idEmpresa);

        $encontrados = $resultado['registros'];
        $encontradosTotal = $resultado['total'];
        
        if($encontrados)
        {

            $num = $encontradosTotal;

            foreach($encontrados as $entidad)
            {

                $historicoDslam = $entidad->getEstadoElemento();
                $modeloDslam = $entidad->getNombreModeloElemento();
                $marcaDslam = $entidad->getNombreMarcaElemento();
                $canton = $entidad->getNombreCanton();


                if($entidad->getIdJurisdiccion())
                {

                    $jurisdiccionNombre = $entidad->getNombreJurisdiccion();
                }
                else
                {
                    $jurisdiccionNombre = "NA";
                }

                if($entidad->getIdElementoB())
                {
                    $nombrePop = $entidad->getNombreElementoB();
                }
                else
                {
                    $nombrePop = "NA";
                }



                $arr_encontrados[] = array('idElemento' => $entidad->getId(),
                    'nombreElemento' => $entidad->getNombreElemento(),
                    'nombreElementoNodo' => "",
                    'ipElemento' => "",
                    'cantonNombre' => $canton,
                    'jurisdiccionNombre' => $jurisdiccionNombre,
                    'switchTelconet' => "",
                    'puertoSwitch' => "",
                    'marcaElemento' => $marcaDslam,
                    'modeloElemento' => $modeloDslam,
                    'longitud' => $entidad->getLongitud(),
                    'latitud' => $entidad->getLatitud(),
                    'estado' => (trim($historicoDslam) == 'Eliminado' ? 'Eliminado' : 'Activo'),
                    'action1' => 'button-grid-show',
                    'action2' => (trim($historicoDslam) == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-edit'),
                    'action3' => (trim($historicoDslam) == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-delete'));
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    public function getElementosNodos($nombreElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $estado, $start, $limit, $idEmpresa)
    {
        $qb = $this->_em->createQueryBuilder();
        $qbC = $this->_em->createQueryBuilder();
        $qb->select('e');
        $qb->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?2')
            ->setParameter(2, $tipoElemento);

        $qbC->select('count(e.id)');
        $qbC->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?2')
            ->setParameter(2, $tipoElemento);


        if($nombreElemento != "")
        {
//            print_r("entre nombre elemento");
            $qb->andWhere('UPPER(e.nombreElemento) like ?1');
            $qb->setParameter(1, '%' . $nombreElemento . '%');

            $qbC->andWhere('UPPER(e.nombreElemento) like ?1');
            $qbC->setParameter(1, '%' . $nombreElemento . '%');
        }

        if($marcaElemento != "")
        {
//            print_r("entre marca elemento");
            $qb->andWhere('e.idMarcaElemento = ?6')
                ->setParameter(6, $marcaElemento);

            $qbC->andWhere('e.idMarcaElemento = ?6')
                ->setParameter(6, $marcaElemento);
        }
        if($canton != "" || $jurisdiccion != "")
        {

            if($canton != "")
            {
                $qb->andWhere('e.idCanton = ?7')
                    ->setParameter(7, $canton);

                $qbC->andWhere('e.idCanton = ?7')
                    ->setParameter(7, $canton);
            }
            if($jurisdiccion != "")
            {
                $qb->andWhere('e.idJurisdiccion = ?8')
                    ->setParameter(8, $jurisdiccion);

                $qbC->andWhere('e.idJurisdiccion= ?8')
                    ->setParameter(8, $jurisdiccion);
            }
        }

        if($idEmpresa != "")
        {
            $qb->andWhere('e.empresaCod = ?10')
                ->setParameter(10, $idEmpresa);

            $qbC->andWhere('e.empresaCod = ?10')
                ->setParameter(10, $idEmpresa);
        }
        if($modeloElemento != "")
        {
//            print_r("entre modelo elemento");
            $qb->andWhere('e.idModeloElemento = ?3')
                ->setParameter(3, $modeloElemento);

            $qbC->andWhere('e.idModeloElemento = ?3')
                ->setParameter(3, $modeloElemento);
        }
        if($estado != "Todos")
        {
//            print_r("entre estado elemento");

            $qb->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $estado);

            $qbC->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $estado);
        }

        //contar cuantos datos trae en total
        $total = $qbC->getQuery()->getSingleScalarResult();

        //datos con limits
        if($start != '')
            $qb->setFirstResult($start);
        if($limit != '')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();

//        print($query->getSQL());
//        die();

        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;

        return $resultado;
    }

    /**
     * Funcion que sirve para obtener la informacion de ubicacion de los elementos de tipo NODO
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.5 04-03-2015
     * @param   $id     int   
     * 
     * @version 1.0 Version Inicial
     */
    public function generarJsonCargarDatosNodo($id)
    {
        $arr_encontrados = array();

        $arrayUbicacionElemento = $this->getUbicacionElementoNodo($id);

        if($arrayUbicacionElemento && count($arrayUbicacionElemento) > 0)
        {
            $arr_encontrados[] = array('idElemento' => $arrayUbicacionElemento[0]['id'],
                'idCanton' => $arrayUbicacionElemento[0]['idCanton'],
                'nombreCanton' => $arrayUbicacionElemento[0]['nombreCanton'],
                'idProvincia' => $arrayUbicacionElemento[0]['idProvincia'],
                'nombreProvincia' => $arrayUbicacionElemento[0]['nombreProvincia'],
                'idRegion' => $arrayUbicacionElemento[0]['idRegion'],
                'nombreRegion' => $arrayUbicacionElemento[0]['nombreRegion'],
                'idParroquia' => $arrayUbicacionElemento[0]['idParroquia'],
                'nombreParroquia' => $arrayUbicacionElemento[0]['nombreParroquia']
            );

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"1","encontrados":' . $data . '}';
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';
        }

        return $resultado;
    }

    //----------------------
    //----- SERVIDORES ----
    //---------------------

    /**
     * Funcion que sirve para generar un json con la informacion de los elementos servidores buscados
     * por medio de un filtro
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 19-02-2015
     * @param   $nombreElemento     String
     * @param   $ipElemento         String
     * @param   $modeloElemento     int
     * @param   $marcaElemento      int
     * @param   $tipoElemento       int
     * @param   $canton             int
     * @param   $jurisdiccion       int
     * @param   $estado             String
     * @param   $start              int
     * @param   $limit              int
     */
    public function generarJsonServidores($nombreElemento, $ipElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $estado, $start, $limit)
    {
        $arr_encontrados = array();

        $resultado = $this->getElementosServidores($nombreElemento, $ipElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $estado, $start, $limit, '');

        $encontrados = $resultado['registros'];
        $encontradosTotal = $resultado['total'];

        if($encontrados)
        {

            $num = $encontradosTotal;

            foreach($encontrados as $entidad)
            {
                $ip = $entidad->getIp();
                $estado = $entidad->getEstadoElemento();
                $modelo = $entidad->getNombreModeloElemento();
                $marca = $entidad->getNombreMarcaElemento();
                $canton = $entidad->getNombreCanton();
                $tipo = $entidad->getNombreTipoElemento();

                if($entidad->getIdJurisdiccion())
                {

                    $jurisdiccionNombre = $entidad->getNombreJurisdiccion();
                }
                else
                {
                    $jurisdiccionNombre = "NA";
                }

                if($estado != "migracion_ttco" && $estado != "Eliminado")
                {
                    $arr_encontrados[] = array('idElemento' => $entidad->getId(),
                        'nombreElemento' => $entidad->getNombreElemento(),
                        'ipElemento' => $ip,
                        'cantonNombre' => $canton,
                        'jurisdiccionNombre' => $jurisdiccionNombre,
                        'marcaElemento' => $marca,
                        'modeloElemento' => $modelo,
                        'tipoElemento' => $tipo,
                        'estado' => $estado,
                        'action1' => 'button-grid-show',
                        'action2' => ($estado == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-edit'),
                        'action3' => ($estado == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-delete')
                    );
                }
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    /**
     * Funcion que sirve para generar un sql y ejecutarlo, para obtener
     * la informacion de los elementos servidores mediante un filtro
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 19-02-2015
     * @param   $nombreElemento     String
     * @param   $ipElemento         String
     * @param   $modeloElemento     int
     * @param   $marcaElemento      int
     * @param   $tipoElemento       int
     * @param   $canton             int
     * @param   $jurisdiccion       int
     * @param   $estado             String
     * @param   $start              int
     * @param   $limit              int
     */
    public function getElementosServidores($nombreElemento, $ipElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $estado, $start, $limit)
    {
        $qb = $this->_em->createQueryBuilder();
        $qbC = $this->_em->createQueryBuilder();
        $qb->select('e');
        $qb->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?2')
            ->setParameter(2, $tipoElemento);

        $qbC->select('count(e.id)');
        $qbC->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?2')
            ->setParameter(2, $tipoElemento);


        if($nombreElemento != "")
        {
            $qb->andWhere('UPPER(e.nombreElemento) like ?1');
            $qb->setParameter(1, '%' . $nombreElemento . '%');

            $qbC->andWhere('UPPER(e.nombreElemento) like ?1');
            $qbC->setParameter(1, '%' . $nombreElemento . '%');
        }
        if($ipElemento != "")
        {
            $qb->andWhere('e.ip like ?5')
                ->setParameter(5, '%' . $ipElemento . '%');

            $qbC->andWhere('e.ip like ?5')
                ->setParameter(5, '%' . $ipElemento . '%');
        }
        if($marcaElemento != "")
        {
            $qb->andWhere('e.idMarcaElemento = ?6')
                ->setParameter(6, $marcaElemento);

            $qbC->andWhere('e.idMarcaElemento = ?6')
                ->setParameter(6, $marcaElemento);
        }
        if($canton != "" || $jurisdiccion != "")
        {

            if($canton != "")
            {
                $qb->andWhere('e.idCanton = ?7')
                    ->setParameter(7, $canton);

                $qbC->andWhere('e.idCanton = ?7')
                    ->setParameter(7, $canton);
            }
            if($jurisdiccion != "")
            {
                $qb->andWhere('e.idJurisdiccion = ?8')
                    ->setParameter(8, $jurisdiccion);

                $qbC->andWhere('e.idJurisdiccion= ?8')
                    ->setParameter(8, $jurisdiccion);
            }
        }
        if($modeloElemento != "")
        {
            $qb->andWhere('e.idModeloElemento = ?3')
                ->setParameter(3, $modeloElemento);

            $qbC->andWhere('e.idModeloElemento = ?3')
                ->setParameter(3, $modeloElemento);
        }
        if($estado != "Todos")
        {
            $qb->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $estado);

            $qbC->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $estado);
        }

        //contar cuantos datos trae en total
        $total = $qbC->getQuery()->getSingleScalarResult();

        //datos con limits
        if($start != '')
            $qb->setFirstResult($start);
        if($limit != '')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();

        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;

        return $resultado;
    }

    public function generarJsonCargarDatosOlt($idOlt, $em)
    {
        $arr_encontrados = array();
//        $em = $this->getEntityManager('telconet_infraestructura');

        $dslam = $em->find('schemaBundle:InfoElemento', $idOlt);

        $elementoUbica = $em->getRepository('schemaBundle:InfoEmpresaElementoUbica')->findBy(array("elementoId" => $dslam->getId()));
        $ubicacion = $em->getRepository('schemaBundle:InfoUbicacion')->findBy(array("id" => $elementoUbica[0]->getUbicacionId()));
        $parroquia = $em->getRepository('schemaBundle:AdmiParroquia')->findBy(array("id" => $ubicacion[0]->getParroquiaId()));
        $canton = $em->getRepository('schemaBundle:AdmiCanton')->findBy(array("id" => $parroquia[0]->getCantonId()));
        $cantonJurisdiccion = $em->getRepository('schemaBundle:AdmiCantonJurisdiccion')->findBy(array("cantonId" => $canton[0]->getId()));
        $jurisdiccion = $em->find('schemaBundle:AdmiJurisdiccion', $cantonJurisdiccion[0]->getJurisdiccionId());
        $popElemento = $em->getRepository('schemaBundle:InfoRelacionElemento')->findBy(array("elementoIdB" => $dslam->getId()));


        $arr_encontrados[] = array('idElemento' => $dslam->getId(),
            'popElementoId' => $popElemento[0]->getElementoIdA(),
            'idCanton' => $canton[0]->getId(),
            'nombreCanton' => trim($canton[0]->getNombreCanton()),
            'idJurisdiccion' => $jurisdiccion->getId(),
            'nombreJurisdiccion' => trim($jurisdiccion->getNombreJurisdiccion()),
            'idParroquia' => $parroquia[0]->getId(),
            'nombreParroquia' => trim($parroquia[0]->getNombreParroquia()));


        $data = json_encode($arr_encontrados);
        $resultado = '{"total":"1","encontrados":' . $data . '}';

        return $resultado;
    }

    public function findByIdTipoElemento($idTipoElemento)
    {
        $query_string = "SELECT ie 
                        FROM schemaBundle:AdmiTipoElemento ate,
                             schemaBundle:AdmiModeloElemento ame,
                             schemaBundle:InfoElemento ie
                        WHERE ate.id = ame.tipoElementoId
                        AND ame.id = ie.modeloElementoId
                        AND ate.id = $idTipoElemento
                        AND lower(ie.estado) = lower('activo')
                        ORDER BY ie.nombreElemento
                        ";
        return $this->_em->createQuery($query_string)->getResult();
    }

    /**
     * Funcion que sirve para generar json de Olt
     * 
     * @author Jesus Bozada <jbozada.ec>
     * @author Jesus Bozada <jbozada.ec>
     * @author Jesus Bozada <jbozada.ec> 
     * @author Jesus Bozada <jbozada.ec> 
     * @version 1.1 25-02-2015
     * @version 1.2 06-08-2015
     * @version 1.3 26-08-2015
     * @version 1.4 21-12-2015 Se agregan validaciones para mostrar boton de Operatividad de elementos
     * 
     * @author Edson Franco <efranco.ec>
     * @version 1.5 19-01-2016 Se valida que si el OLT es de tipo aprovisionamiento 'CNR' se muestre el botón de migración
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.6 26-01-2016 - Se valida que si el olt ya fue migrado y su valor es FIN muestra el botón de migración
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.7 01-07-2016 - Se agrega recuperación de caracteristica FACTIBILIDAD AUTOMATICA utilizada en ODF's
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.8 21-11-2018 - Se agrega validación para ejecutar cambio de plan masivo en MD
     * 
     * @author Angel Reina <areina@telconet.ec>
     * @version 1.9 22-03-2019 - Se agrega la validación $strOltMigradoHuaweiZte que identifica los olt's migrado Huawei-Zte 
     * 
     * @author Angel Reina <areina@telconet.ec>
     * @version 1.10 15-05-2019 - Se agrega la validación $strReservoIps que identifica los olt's que realizaron el proceso de reserva de ips por migración.
     *  
     * @author Angel Reina <areina@telconet.ec>
     * @version 1.11 13-06-2019 - Se agrega validación !$entityDetalleReservaIp para identificar los olt's que realizaron el proceso de reserva de ips por migración con la tecnología ZTE.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.0 23-03-2021 - Se define en un solo arreglo de parámetro el filtro para los Olt
     *
     * @author Alberto Aias <farias@telconet.ec>
     * @version 2.1 17-04-2023 - Se agrega validación de filtro por empresa en sesión
     * 
     * @param Array $arrayParametros {
     *    strNombreElemento     String
     *    strIpElemento         String
     *    strModeloElemento     int
     *    strMarcaElemento      int
     *    strTipoElemento       int
     *    strCanton             int
     *    strJurisdiccion       int
     *    strNodoElemento       int
     *    strEstado             String
     *    strMultiplataforma    String
     *    strIdEmpresa          int
     *    strStart              int
     *    strLimit              int
     * }
     */
    public function generarJsonOlts($arrayParametros)
    {
        $strReservoIps        = "";
        $arr_encontrados      = array();
        $arrayResultado       = $this->getElementosOlts($arrayParametros);
        $arrayEncontrados     = $arrayResultado['registros'];
        $intEncontradosTotal  = $arrayResultado['total'];
        $strOdfFactAutomatica = "";
        $strPrefijoEmpresa    = $arrayParametros["prefijoEmpresa"];
        $emComercial          = isset($arrayParametros['emComercial']) ? $arrayParametros['emComercial'] : null;

        if(!empty($arrayEncontrados))
        {

            $intNum = $intEncontradosTotal;

            $strDetalleMulti         = "MULTIPLATAFORMA";
            $arrayParametrosDetMulti = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                            'COMERCIAL',
                                                                                            '',
                                                                                            'NOMBRES PARAMETROS DETALLES MULTIPLATAFORMA',
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            '');
            if(isset($arrayParametrosDetMulti) && !empty($arrayParametrosDetMulti)
               && isset($arrayParametrosDetMulti['valor1']) && !empty($arrayParametrosDetMulti['valor1']))
            {
                $strDetalleMulti = $arrayParametrosDetMulti['valor1'];
            }
            foreach($arrayEncontrados as $entidad)
            {
                $boolOltMigrado = false;
                $strOltMigradoHuaweiZte = '';
                $ipDslam        = $entidad->getIp();
                $historicoDslam = $entidad->getEstadoElemento();
                $modeloDslam    = $entidad->getNombreModeloElemento();
                $marcaDslam     = $entidad->getNombreMarcaElemento();
                $strCanton      = $entidad->getNombreCanton();
                $intIdTipoElemento = $entidad->getIdTipoElemento();
                $entityElemento     = $this->_em->getRepository('schemaBundle:InfoElemento')
                                           ->find($entidad->getId());
                $strOltMultiplataforma  = 'NO';
                $strEstadoSolMultiplataforma = '';

                $objDetMultiplataforma  = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                               ->findOneBy(array("elementoId"    => $entidad->getId(),
                                                                 "detalleNombre" => $strDetalleMulti,
                                                                 "estado"        => "Activo"));
                if(is_object($objDetMultiplataforma))
                {
                    $strOltMultiplataforma = $objDetMultiplataforma->getDetalleValor();
                }

                if(!empty($emComercial) && is_object($emComercial))
                {
                    //obtengo el tipo de la solicitud olt multiplataforma
                    $objTipoSolicitudMulti  = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                         ->findOneByDescripcionSolicitud('SOLICITUD OLT MULTIPLATAFORMA');
                    if(is_object($objTipoSolicitudMulti))
                    {
                        //obtengo el detalle de la solicitud olt multiplataforma
                        $objSolMultiplataforma  = $emComercial->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                        ->createQueryBuilder('p')
                                                        ->where('p.tipoSolicitudId =  :tipoSolicitudId')
                                                        ->andWhere("p.elementoId   =  :elementoId")
                                                        ->andWhere("p.estado       != :estado")
                                                        ->setParameter('tipoSolicitudId', $objTipoSolicitudMulti->getId())
                                                        ->setParameter('elementoId',      $entidad->getId())
                                                        ->setParameter('estado',          'Anulado')
                                                        ->orderBy('p.id', 'DESC')
                                                        ->setMaxResults(1)
                                                        ->getQuery()
                                                        ->getOneOrNullResult();
                        if(is_object($objSolMultiplataforma))
                        {
                            $strEstadoSolMultiplataforma = $objSolMultiplataforma->getEstado();
                        }
                    }
                }

                if($entidad->getIdJurisdiccion())
                {

                    $jurisdiccionNombre = $entidad->getNombreJurisdiccion();
                }
                else
                {
                    $jurisdiccionNombre = "NA";
                }

                if($entidad->getIdElementoB())
                {
                    $nombrePop              = $entidad->getNombreElementoB();
                    $objElementoRelacion    = $this->_em->find('schemaBundle:InfoElemento', $entidad->getIdElementoB());
                    $objModeloElemento      = $this->_em->find('schemaBundle:AdmiModeloElemento', $objElementoRelacion->getModeloElementoId());
                    $objTipoElemento        = $this->_em->find('schemaBundle:AdmiTipoElemento', $objModeloElemento->getTipoElementoId());
                    $strTipoElemento        = ucwords(strtolower($objTipoElemento->getNombreTipoElemento())) . ":";
                }
                else
                {
                    $nombrePop       = "NA";
                    $strTipoElemento = 'Nodo:';
                }

                $entityDetalleReservaIp = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                               ->findOneBy(array("elementoId"    => $entidad->getId(),
                                                                 "detalleNombre" => "RESERVA IP MIGRACION HW"));
                
                if(!$entityDetalleReservaIp)
                {
                    $entityDetalleReservaIp = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                   ->findOneBy(array("elementoId"    => $entidad->getId(),
                                                                     "detalleNombre" => "RESERVA IP MIGRACION ZTE"));
                }
                
                if($entityDetalleReservaIp || $entityElemento->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento() == 'HUAWEI'
                                            || $entityElemento->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento() == 'ZTE')
                {
                    
                    $strReservoIps = "SI";
                }
                else
                {
                    $strReservoIps = "NO";
                }
                

                $entityAprovisionaElemento = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                  ->findOneBy(array("elementoId"    => $entidad->getId(),
                                                                    "detalleNombre" => "APROVISIONAMIENTO_IP"));
                $strAprovisionamientoIp = "";
                if($entityAprovisionaElemento)
                {
                    $strAprovisionamientoIp = $entityAprovisionaElemento->getDetalleValor();
                }

                //Se agrega codigo para validar existencia de caracteristica de elemento Operativo
                $entityDetalleElementoOp = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                ->findOneBy(array("elementoId"    => $entidad->getId(),
                                                                  "detalleNombre" => "OLT OPERATIVO"));
                if($entityDetalleElementoOp)
                {
                    if($entityDetalleElementoOp->getDetalleValor() == "NO")
                    {
                        $strOltOperativo = "Eliminado";
                    }
                    else
                    {
                        $strOltOperativo = $entityDetalleElementoOp->getDetalleValor();
                    }
                }
                else
                {
                    $strOltOperativo = "SI";
                }

                
                /*
                 * Bloque que verifica si el OLT ha sido migrado o no
                 */
                $entityDetalleMigracion = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                               ->findOneBy(array("elementoId"    => $entidad->getId(),
                                                                 "detalleNombre" => "MIGRACION",
                                                                 "estado"        => "Activo"));
                if($entityDetalleMigracion)
                {
                    if($entityDetalleMigracion->getDetalleValor() != "FIN")
                    {
                        //Se determina TRUE cuando ha empezado un proceso de migracion con estados INICIO o PROCESANDO, caso
                        //contrario logicamente el proceso pasa a tener el valor de un Olt NO migrado
                        $boolOltMigrado = true;
                    }
                }
                /*
                 * Fin Bloque que verifica si el OLT ha sido migrado o no
                 */
                
                /*
                 * Bloque que verifica si el OLT TELLION ha sido migrado o no HUAWEI - ZTE
                 */
                //Verificamos si es Olt marca TELLION
                if($marcaDslam == 'TELLION')
                {
                    $entityDetalleMigracionHuaweiZte = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                   ->findOneBy(array("elementoId"    => $entidad->getId(),
                                                                     "detalleNombre" => "MIGRACION HUAWEI-ZTE",
                                                                     "estado"        => "Activo"));
                    
                    //Se determina TRUE cuando ha seleccionado con anterioridad y cambiado a la tecnologia Huawei - Zte, caso
                    //contrario la variable strOltMigradoHuaweiZte pasa a tener el valor NO migrado Huawei - Zte                    
                    if($entityDetalleMigracionHuaweiZte)
                    {

                            $strOltMigradoHuaweiZte = $entityDetalleMigracionHuaweiZte->getDetalleValor();                        
                    }
                    else
                    {
                        $strOltMigradoHuaweiZte = 'NO MIGRADO';

                    }
                }
                /*
                 * Fin Bloque que verifica si el OLT TELLION ha sido migrado o no HUAWEI - ZTE
                 */
                
                
                /*
                 * Bloque que verifica si el OLT tiene permitido o no realizar un nuevo cambio plan masivo 
                 */
                $boolPermiteCambioPlanOlt = true;
                $strNombreDetalleMg       = "CAMBIO_PLAN_MASIVO_".$strPrefijoEmpresa;
                $objCambioPlanMasivoOlt = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                    ->findOneBy(array("elementoId"    => $entidad->getId(),
                                                                      "detalleNombre" => $strNombreDetalleMg,
                                                                      "estado"        => "Activo"));
                //Se verifica si existe un proceso de cambio de plan masivo con valor INICIO o PROCESANDO
                if(is_object($objCambioPlanMasivoOlt) && $objCambioPlanMasivoOlt->getDetalleValor() !== "FIN" )
                {
                    $boolPermiteCambioPlanOlt = false;
                }
                
                //Se agrega codigo para obtener caracteristica FACTIBILIDAD AUTOMATICA utilizadas en ODF
                $entityDetalleElementoFact = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                  ->findOneBy(array("elementoId"    => $entidad->getId(),
                                                                    "detalleNombre" => "FACTIBILIDAD AUTOMATICA",
                                                                    "estado"        => "Activo"));
                $strOdfFactAutomatica = "";
                if($entityDetalleElementoFact)
                {
                    $strOdfFactAutomatica = $entityDetalleElementoFact->getDetalleValor();
                }
                else
                {
                    $strOdfFactAutomatica = "N/A";
                }

                $arr_encontrados[] = array( 'idElemento'             => $entidad->getId(),
                                            'nombreElemento'         => $entidad->getNombreElemento(),
                                            'nombreElementoNodo'     => $nombrePop,
                                            'tipoElemento'           => $strTipoElemento,
                                            'ipElemento'             => $ipDslam,
                                            'cantonNombre'           => $strCanton,
                                            'jurisdiccionNombre'     => $jurisdiccionNombre,
                                            'switchTelconet'         => "",
                                            'puertoSwitch'           => "",
                                            'marcaElemento'          => $marcaDslam,
                                            'modeloElemento'         => $modeloDslam,
                                            'idTipoElemento'         => $intIdTipoElemento,
                                            'estado'                 => (trim($historicoDslam) == 'Eliminado' || trim($historicoDslam) == 'Restringido' ? trim($historicoDslam) : 'Activo'),
                                            'strmigracionHuaweiZte'  => $strOltMigradoHuaweiZte,
                                            'action1'                => 'button-grid-show',
                                            'action2'                => (trim($historicoDslam) == 'Eliminado' ?
                                                                        'button-grid-invisible' :
                                                                        'button-grid-edit'),
                                            'action3'                => (trim($historicoDslam) == 'Eliminado' ?
                                                                        'button-grid-invisible' :
                                                                        'button-grid-delete'),
                                            'action5'                => ((trim($historicoDslam) == 'Eliminado' || $strReservoIps == 'SI') ?
                                                                        'button-grid-invisible' :
                                                                        'button-grid-ipReserva'),
                                            'botonOperatividad'      => (trim($entidad->getEstadoElemento()) != 'Eliminado' ?
                                                                        $strOltOperativo :
                                                                        'Eliminado'),
                                            'strAprovisionamientoIp' => $strAprovisionamientoIp,
                                            'botonMigracion'         => ( ( $strAprovisionamientoIp == 'CNR' && 
                                                                            !$boolOltMigrado && trim($historicoDslam) != 'Eliminado' ) ? 
                                                                       'button-grid-btnMigracion' : 'button-grid-invisible' ),
                                            'botonCambioPlanMasivo' => ( ( $strAprovisionamientoIp == 'CNR' && $boolPermiteCambioPlanOlt 
                                                                        && trim($historicoDslam) != 'Eliminado' ) ? 
                                                                       'button-grid-btnMigracion' : 'button-grid-invisible' ),
                                            'strOdfFactAutomatica' => $strOdfFactAutomatica,
                                            'strOltMultiplataforma' => $strOltMultiplataforma,
                                            'strEstadoSolMultiplataforma' => $strEstadoSolMultiplataforma,
                                            'idEmpresa'                   => $entidad->getEmpresaCod()
                );
            }

            $data      = json_encode($arr_encontrados);
            $strResultado = '{"total":"' . $intNum . '","encontrados":' . $data . '}';

            return $strResultado;
        }
        else
        {
            $strResultado = '{"total":"0","encontrados":[]}';

            return $strResultado;
        }
    }

    /**
     * Funcion que sirve para generar el query del listado de olt con sus filtros.
     * 
     * Version Inicial
     * @version 1.0
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 23-03-2021 - Se agrega nuevo filtro para los Olt Multiplataforma
     */
    public function getElementosOlts($arrayParametros)
    {
        $strNombreElemento  = isset($arrayParametros['strNombreElemento'])  ? $arrayParametros['strNombreElemento'] : null;
        $strIpElemento      = isset($arrayParametros['strIpElemento'])      ? $arrayParametros['strIpElemento']     : null;
        $strModeloElemento  = isset($arrayParametros['strModeloElemento'])  ? $arrayParametros['strModeloElemento'] : null;
        $strMarcaElemento   = isset($arrayParametros['strMarcaElemento'])   ? $arrayParametros['strMarcaElemento']  : null;
        $strTipoElemento    = isset($arrayParametros['strTipoElemento'])    ? $arrayParametros['strTipoElemento']   : null;
        $strCanton          = isset($arrayParametros['strCanton'])          ? $arrayParametros['strCanton']         : null;
        $strJurisdiccion    = isset($arrayParametros['strJurisdiccion'])    ? $arrayParametros['strJurisdiccion']   : null;
        $strNodoElemento    = isset($arrayParametros['strNodoElemento'])    ? $arrayParametros['strNodoElemento']   : null;
        $strEstado          = isset($arrayParametros['strEstado'])          ? $arrayParametros['strEstado']         : null;
        $strMultiplataforma = isset($arrayParametros['strMultiplataforma']) ? $arrayParametros['strMultiplataforma'] : null;
        $strEstadoMultiplataforma = isset($arrayParametros['strEstadoMultiplataforma']) ? $arrayParametros['strEstadoMultiplataforma'] : null;
        $strIdEmpresa       = isset($arrayParametros['strIdEmpresa'])       ? $arrayParametros['strIdEmpresa']      : null;
        $strStart           = isset($arrayParametros['strStart'])           ? $arrayParametros['strStart']          : null;
        $strLimit           = isset($arrayParametros['strLimit'])           ? $arrayParametros['strLimit']          : null;
        $booleanMultiplataforma = isset($arrayParametros['booleanMultiplataforma']) ? $arrayParametros['booleanMultiplataforma'] : null;

        $strDetalleMulti         = "MULTIPLATAFORMA";
        $arrayParametrosDetMulti = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                        'COMERCIAL',
                                                                                        '',
                                                                                        'NOMBRES PARAMETROS DETALLES MULTIPLATAFORMA',
                                                                                        '',
                                                                                        '',
                                                                                        '',
                                                                                        '',
                                                                                        '');
        if(isset($arrayParametrosDetMulti) && !empty($arrayParametrosDetMulti)
           && isset($arrayParametrosDetMulti['valor1']) && !empty($arrayParametrosDetMulti['valor1']))
        {
            $strDetalleMulti = $arrayParametrosDetMulti['valor1'];
        }

        $qb = $this->_em->createQueryBuilder();
        $qbC = $this->_em->createQueryBuilder();
        $qb->select('e');
        $qb->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?2')
            ->setParameter(2, $strTipoElemento);

        $qbC->select('count(e.id)');
        $qbC->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?2')
            ->setParameter(2, $strTipoElemento);

        if(!empty($strNombreElemento))
        {
            $qb->andWhere('UPPER(e.nombreElemento) like ?1');
            $qb->setParameter(1, '%' . $strNombreElemento . '%');

            $qbC->andWhere('UPPER(e.nombreElemento) like ?1');
            $qbC->setParameter(1, '%' . $strNombreElemento . '%');
        }
        if(!empty($strIpElemento))
        {
            $qb->andWhere('e.ip like ?5')
                ->setParameter(5, '%' . $strIpElemento . '%');

            $qbC->andWhere('e.ip like ?5')
                ->setParameter(5, '%' . $strIpElemento . '%');
        }
        if(!empty($strMarcaElemento))
        {
            $qb->andWhere('e.idMarcaElemento = ?6')
                ->setParameter(6, $strMarcaElemento);

            $qbC->andWhere('e.idMarcaElemento = ?6')
                ->setParameter(6, $strMarcaElemento);
        }
        if(!empty($strCanton) || !empty($strJurisdiccion))
        {
            if($strCanton != "")
            {
                $qb->andWhere('e.idCanton = ?7')
                    ->setParameter(7, $strCanton);

                $qbC->andWhere('e.idCanton = ?7')
                    ->setParameter(7, $strCanton);
            }
            if($strJurisdiccion != "")
            {
                $qb->andWhere('e.idJurisdiccion = ?8')
                    ->setParameter(8, $strJurisdiccion);

                $qbC->andWhere('e.idJurisdiccion= ?8')
                    ->setParameter(8, $strJurisdiccion);
            }
        }
        if($strNodoElemento != "")
        {
            $qb->andWhere('e.idElementoB = ?9')
                ->setParameter(9, $strNodoElemento);

            $qbC->andWhere('e.idElementoB = ?9')
                ->setParameter(9, $strNodoElemento);
        }
        if($strIdEmpresa != "")
        {
            if($booleanMultiplataforma)
            {
                $objSubEmp = $this->_em->createQueryBuilder()
                    ->select("d.id")
                    ->from("schemaBundle:InfoDetalleElemento","d")
                    ->where('d.elementoId       = e.id')
                    ->andWhere("d.detalleNombre = '".$strDetalleMulti."'")
                    ->andWhere("d.detalleValor  = 'SI'")
                    ->andWhere("d.estado        = 'Activo'");
                $qb->andWhere($qb->expr()->orx(
                    $qb->expr()->eq('e.empresaCod','?10'),
                    $qb->expr()->exists($objSubEmp->getDQL())
                ));
                $qb->setParameter(10, $strIdEmpresa);
                $qbC->andWhere($qbC->expr()->orx(
                    $qbC->expr()->eq('e.empresaCod','?10'),
                    $qbC->expr()->exists($objSubEmp->getDQL())
                ));
                $qbC->setParameter(10, $strIdEmpresa);
            }
            else
            {
                $qb->andWhere('e.empresaCod = ?10')
                    ->setParameter(10, $strIdEmpresa);
    
                $qbC->andWhere('e.empresaCod = ?10')
                    ->setParameter(10, $strIdEmpresa);
            }
        }
        if($strModeloElemento != "")
        {
            $qb->andWhere('e.idModeloElemento = ?3')
                ->setParameter(3, $strModeloElemento);

            $qbC->andWhere('e.idModeloElemento = ?3')
                ->setParameter(3, $strModeloElemento);
        }
        if($strEstado != "Todos")
        {
            $qb->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $strEstado);

            $qbC->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $strEstado);
        }
        if(!empty($strMultiplataforma) && $strMultiplataforma != "Todos")
        {
            $objSub = $this->_em->createQueryBuilder()
                ->select("de.id")
                ->from("schemaBundle:InfoDetalleElemento","de")
                ->where('de.elementoId       = e.id')
                ->andWhere("de.detalleNombre = '".$strDetalleMulti."'")
                ->andWhere("de.detalleValor  = 'SI'")
                ->andWhere("de.estado        = 'Activo'");
            if($strMultiplataforma == 'SI')
            {
                $qb->andWhere($qb->expr()->exists($objSub->getDQL()));
                $qbC->andWhere($qbC->expr()->exists($objSub->getDQL()));
            }
            else
            {
                $qb->andWhere($qb->expr()->not($qb->expr()->exists($objSub->getDQL())));
                $qbC->andWhere($qbC->expr()->not($qbC->expr()->exists($objSub->getDQL())));
            }
        }
        if(!empty($strEstadoMultiplataforma) && $strEstadoMultiplataforma != "Todos")
        {
            $objSubSol = $this->_em->createQueryBuilder()
                ->select("s.id")
                ->from("schemaBundle:InfoDetalleSolicitud","s")
                ->join("s.tipoSolicitudId", "t")
                ->where('s.elementoId = e.id')
                ->andWhere("t.descripcionSolicitud = 'SOLICITUD OLT MULTIPLATAFORMA'")
                ->andWhere("t.estado = 'Activo'")
                ->andWhere("s.estado = '$strEstadoMultiplataforma'");
            $qb->andWhere($qb->expr()->exists($objSubSol->getDQL()));
            $qbC->andWhere($qbC->expr()->exists($objSubSol->getDQL()));
        }

        //contar cuantos datos trae en total
        $total = $qbC->getQuery()->getSingleScalarResult();

        //datos con limits
        if(!empty($strStart))
        {
            $qb->setFirstResult($strStart);
        }
        if(!empty($strLimit))
        {
            $qb->setMaxResults($strLimit);
        }
        $query = $qb->getQuery();

        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;

        return $resultado;
    }

    /**
     * Funcion que genera un json con los pools
     * que tiene el elemento
     * 
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 23-09-2014
     * @param int $idElemento id del elemento (olt)
     * @param int $start
     * @param int $limit
     * 
     */
    public function generarJsonPoolsPorOlt($idElemento, $start, $limit)
    {
        $arr_encontrados = array();

        $resultado = $this->getPerfilesPorOlt($idElemento, $start, $limit);

        $encontrados = $resultado['registros'];
        $encontradosTotal = $resultado['total'];

        if($encontrados)
        {
            $num = $encontradosTotal;

            foreach($encontrados as $entidad)
            {
                $refDetalleElementoId = $entidad->getId();
                $pool = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                    ->findOneBy(array("parent" => $entidad));
                if($pool)
                {
                    $arr_encontrados[] = array('idPool' => $pool->getId(),
                        'pool' => $pool->getDetalleValor(),
                        'idPerfil' => $entidad->getId(),
                        'perfil' => $entidad->getDetalleValor());
                }
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    /**
     * Funcion que genera el resultado generado por el sql
     * para obtener los pools de un elemento
     * 
     * @author Creado: Francisco Adum <fadum@telconet.ec>
     * @version 1.0 23-09-2014
     * @param int $idElemento id del elemento (olt)
     * @param int $start
     * @param int $limit
     * 
     */
    public function getPerfilesPorOlt($idElemento, $start, $limit)
    {
        $detalleNombre = "PERFIL";

        $qb = $this->_em->createQueryBuilder();
        $qbC = $this->_em->createQueryBuilder();

        $qb->select('e');
        $qb->from('schemaBundle:InfoDetalleElemento', 'e')
            ->where('e.elementoId = ?1')
            ->setParameter(1, $idElemento);
        $qb->andWhere('e.detalleNombre = ?2');
        $qb->setParameter(2, $detalleNombre);
        $qb->andWhere($qb->expr()->isNull('e.parent'));

        $qbC->select('count(e.id)');
        $qbC->from('schemaBundle:InfoDetalleElemento', 'e')
            ->where('e.elementoId = ?1')
            ->setParameter(1, $idElemento);
        $qbC->andWhere('e.detalleNombre = ?2');
        $qbC->setParameter(2, $detalleNombre);
        $qbC->andWhere($qbC->expr()->isNull('e.parent'));

        //contar cuantos datos trae en total
        $total = $qbC->getQuery()->getSingleScalarResult();

        //datos con limits
        if($start != '')
            $qb->setFirstResult($start);
        if($limit != '')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();

        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;

        return $resultado;
    }

    //-------------------
    //----- SPLITTER ----
    //-------------------
    /**
     * Obtiene el nombre y el id del elemento segun parte del nombre junto con el modelo y el tipo del elemento,
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 01-04-2016 mostrar splitter huawei nuevos
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.2 13-06-2019 - Se agrega funcionalidad para que el estado del arreglo de la respuesta no sea fijo,
     *                           e incluya la opcion de "Restringido".
     * 
     * @param type $nombreElemento
     * @param type $modeloElemento
     * @param type $marcaElemento
     * @param type $tipoElemento
     * @param type $canton
     * @param type $jurisdiccion
     * @param type $contenidoEn
     * @param type $elementoContenedor
     * @param type $estado
     * @param type $start
     * @param type $limit
     * @param type $em
     * @param type $idEmpresa
     * 
     * @return string $resultado
     **/
    
    public function generarJsonSplitters(   $nombreElemento, 
                                            $modeloElemento, 
                                            $marcaElemento, 
                                            $tipoElemento, 
                                            $canton, 
                                            $jurisdiccion, 
                                            $contenidoEn, 
                                            $elementoContenedor, 
                                            $estado, 
                                            $start, 
                                            $limit, 
                                            $em, 
                                            $idEmpresa)
    {
        $arr_encontrados = array();
        $em = $this->_em;
        $resultado = $this->getElementosSplitters(  $nombreElemento,
                                                    $modeloElemento,
                                                    $marcaElemento,
                                                    $tipoElemento,
                                                    $canton,
                                                    $jurisdiccion,
                                                    $contenidoEn,
                                                    $elementoContenedor,
                                                    $estado,
                                                    $start,
                                                    $limit,
                                                    $idEmpresa);
        
        $encontrados = $resultado['registros'];
        $encontradosTotal = $resultado['total'];


        if($encontrados)
        {

            $num = $encontradosTotal;

            foreach($encontrados as $entidad)
            {
                $ipDslam = $entidad->getIp();
                $historicoDslam = $entidad->getEstadoElemento();
                $modeloDslam = $entidad->getNombreModeloElemento();
                $marcaDslam = $entidad->getNombreMarcaElemento();
                $canton = $entidad->getNombreCanton();


                if($entidad->getIdJurisdiccion())
                {

                    $jurisdiccionNombre = $entidad->getNombreJurisdiccion();
                }
                else
                {
                    $jurisdiccionNombre = "NA";
                }

                if($entidad->getIdElementoB())
                {
                    $nombrePop = $entidad->getNombreElementoB();
                }
                else
                {
                    $nombrePop = "NA";
                }

                $objElemento = $em->getRepository('schemaBundle:InfoElemento')
                    ->findOneById($entidad->getId());
                $clonado = '';
                if($objElemento)
                {
                    //se realiza esta equivalencia xq la referencia id tienen los splitter que fueron clonados
                    $clonado = $objElemento->getRefElementoId();
                    //si no es clonado compruebo que sea huawei
                    if(!$clonado)
                    {
                        $clonado = strpos($objElemento->getNombreElemento(), 'OLTHW');
                        if ($clonado === false)
                        {
                            $clonado = null;
                        }
                    }
                }

                $objDetElemento = $em->getRepository('schemaBundle:InfoDetalleElemento')
                    ->findOneBy(array("elementoId" => $entidad->getId(), "detalleNombre" => "NIVEL"));
                $nivel = '';
                if($objDetElemento)
                {
                    $nivel = $objDetElemento->getDetalleValor();
                }


                $arr_encontrados[] = array('idElemento' => $entidad->getId(),
                    'nombreElemento' => $entidad->getNombreElemento(),
                    'nombreElementoNodo' => $nombrePop,
                    'ipElemento' => $ipDslam,
                    'cantonNombre' => $canton,
                    'jurisdiccionNombre' => $jurisdiccionNombre,
                    'switchTelconet' => "",
                    'puertoSwitch' => "",
                    'marcaElemento' => $marcaDslam,
                    'modeloElemento' => $modeloDslam,
                    'estado' => (trim($historicoDslam) == 'Eliminado' || trim($historicoDslam) == 'Restringido' ? trim($historicoDslam) : 'Activo'),
                    'action1' => 'button-grid-show',
                    'action2' => (trim($historicoDslam) == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-edit'),
                    'action3' => (trim($historicoDslam) == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-delete'),
                    'nivel' => $nivel,
                    'clonado' => $clonado
                );
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    public function getElementosSplitters($nombreElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $contenidoEn, $elementoContenedor, $estado, $start, $limit, $idEmpresa)
    {
        if($idEmpresa == 33)
        {
            $idEmpresa = 18;
        }
        $qb = $this->_em->createQueryBuilder();
        $qbC = $this->_em->createQueryBuilder();
        $qb->select('e');
        $qb->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?2')
            ->setParameter(2, $tipoElemento);

        $qbC->select('count(e.id)');
        $qbC->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?2')
            ->setParameter(2, $tipoElemento);


        if($nombreElemento != "")
        {
//            print_r("entre nombre elemento");
            $qb->andWhere('UPPER(e.nombreElemento) like ?1');
            $qb->setParameter(1, '%' . $nombreElemento . '%');

            $qbC->andWhere('UPPER(e.nombreElemento) like ?1');
            $qbC->setParameter(1, '%' . $nombreElemento . '%');
        }
        if($marcaElemento != "")
        {
//            print_r("entre marca elemento");
            $qb->andWhere('e.idMarcaElemento = ?6')
                ->setParameter(6, $marcaElemento);

            $qbC->andWhere('e.idMarcaElemento = ?6')
                ->setParameter(6, $marcaElemento);
        }
        if($canton != "" || $jurisdiccion != "")
        {

            if($canton != "")
            {
                $qb->andWhere('e.idCanton = ?7')
                    ->setParameter(7, $canton);

                $qbC->andWhere('e.idCanton = ?7')
                    ->setParameter(7, $canton);
            }
            if($jurisdiccion != "")
            {
                $qb->andWhere('e.idJurisdiccion = ?8')
                    ->setParameter(8, $jurisdiccion);

                $qbC->andWhere('e.idJurisdiccion= ?8')
                    ->setParameter(8, $jurisdiccion);
            }
        }
        if($contenidoEn != "" || $elementoContenedor != "")
        {
            $qb->from('schemaBundle:VistaElementosContenedores', 'vistaElementosContenedores');
            $qbC->from('schemaBundle:VistaElementosContenedores', 'vistaElementosContenedores');
            if($contenidoEn != "")
            {
                $qb->andWhere('vistaElementosContenedores.nombreTipoElementoA = ?9')
                    ->setParameter(9, $contenidoEn)
                    ->andWhere('e = vistaElementosContenedores.elementoIdA');

                $qbC->andWhere('vistaElementosContenedores.nombreTipoElementoA = ?9')
                    ->setParameter(9, $contenidoEn)
                    ->andWhere('e = vistaElementosContenedores.elementoIdA');
            }
            if($elementoContenedor != "")
            {
                $qb->andWhere('vistaElementosContenedores.elementoIdA = ?11')
                    ->setParameter(11, $elementoContenedor)
                    ->andWhere('e = vistaElementosContenedores.elementoIdA');

                $qbC->andWhere('vistaElementosContenedores.elementoIdA = ?11')
                    ->setParameter(11, $elementoContenedor)
                    ->andWhere('e = vistaElementosContenedores.elementoIdA');
            }
        }
        if($idEmpresa != "")
        {
            $qb->andWhere('e.empresaCod = ?10')
                ->setParameter(10, $idEmpresa);

            $qbC->andWhere('e.empresaCod = ?10')
                ->setParameter(10, $idEmpresa);
        }
        if($modeloElemento != "")
        {
//            print_r("entre modelo elemento");
            $qb->andWhere('e.idModeloElemento = ?3')
                ->setParameter(3, $modeloElemento);

            $qbC->andWhere('e.idModeloElemento = ?3')
                ->setParameter(3, $modeloElemento);
        }
        if($estado != "Todos")
        {
//            print_r("entre estado elemento");

            $qb->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $estado);

            $qbC->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $estado);
        }

        //contar cuantos datos trae en total
        $total = $qbC->getQuery()->getSingleScalarResult();
        //datos con limits
        if($start != '')
            $qb->setFirstResult($start);
        if($limit != '')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();

//        print($query->getSQL());
//        die();

        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;

        return $resultado;
    }

    public function generarJsonCargarDatosSplitter($id, $em)
    {
        $arr_encontrados = array();
//        $em = $this->getEntityManager('telconet_infraestructura');

        $splitter = $em->find('schemaBundle:InfoElemento', $id);

        $elementoUbica = $em->getRepository('schemaBundle:InfoEmpresaElementoUbica')->findBy(array("elementoId" => $splitter->getId()));
        $ubicacion = $em->getRepository('schemaBundle:InfoUbicacion')->findBy(array("id" => $elementoUbica[0]->getUbicacionId()));
        $parroquia = $em->getRepository('schemaBundle:AdmiParroquia')->findBy(array("id" => $ubicacion[0]->getParroquiaId()));
        $canton = $em->getRepository('schemaBundle:AdmiCanton')->findBy(array("id" => $parroquia[0]->getCantonId()));
        $cantonJurisdiccion = $em->getRepository('schemaBundle:AdmiCantonJurisdiccion')->findBy(array("cantonId" => $canton[0]->getId()));
        $jurisdiccion = $em->find('schemaBundle:AdmiJurisdiccion', $cantonJurisdiccion[0]->getJurisdiccionId());
        $relacionElemento = $em->getRepository('schemaBundle:InfoRelacionElemento')->findOneBy(array("elementoIdB" => $splitter->getId()));
        $elementoContenedor = $em->getRepository('schemaBundle:InfoElemento')->find($relacionElemento->getElementoIdA());
        $tipoElementoContenedor = $elementoContenedor->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();
        $nivel = $em->getRepository('schemaBundle:InfoDetalleElemento')->findOneBy(array("elementoId" => $id, "detalleNombre" => "NIVEL"));

        $arr_encontrados[] = array('idElemento' => $splitter->getId(),
            'cajaElementoId' => $elementoContenedor->getId(),
            'nombreElementoContenedor' => $elementoContenedor->getNombreElemento(),
            'tipoElementoContenedor' => $tipoElementoContenedor,
            'idCanton' => $canton[0]->getId(),
            'nombreCanton' => trim($canton[0]->getNombreCanton()),
            'idJurisdiccion' => $jurisdiccion->getId(),
            'nombreJurisdiccion' => trim($jurisdiccion->getNombreJurisdiccion()),
            'idParroquia' => $parroquia[0]->getId(),
            'nombreParroquia' => trim($parroquia[0]->getNombreParroquia()),
            'nivel' => $nivel->getDetalleValor());


        $data = json_encode($arr_encontrados);
        $resultado = '{"total":"1","encontrados":' . $data . '}';

        return $resultado;
    }

    //---------------------------
    //----- CAJA DISPERSION ----
    //--------------------------

    public function generarJsonCajas($nombreElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $estado, $start, $limit, $em, $idEmpresa)
    {
        $arr_encontrados = array();

        $resultado = $this->getElementosCajas($nombreElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $estado, $start, $limit, $idEmpresa);

        $encontrados = $resultado['registros'];
        $encontradosTotal = $resultado['total'];


        if($encontrados)
        {

            $num = $encontradosTotal;

            foreach($encontrados as $entidad)
            {
                $historicoDslam = $entidad->getEstadoElemento();
                $modeloDslam = $entidad->getNombreModeloElemento();
                $marcaDslam = $entidad->getNombreMarcaElemento();
                $canton = $entidad->getNombreCanton();


                if($entidad->getIdJurisdiccion())
                {

                    $jurisdiccionNombre = $entidad->getNombreJurisdiccion();
                }
                else
                {
                    $jurisdiccionNombre = "NA";
                }

                if($entidad->getIdElementoB())
                {
                    $nombrePop = $entidad->getNombreElementoB();
                }
                else
                {
                    $nombrePop = "NA";
                }

                $detalleElemento = $em->getRepository('schemaBundle:InfoDetalleElemento')->findOneBy(array("elementoId" => $entidad->getId(), "detalleNombre" => "NIVEL"));
                if($detalleElemento != null)
                {
                    $nivel = $detalleElemento->getDetalleValor();
                }
                else
                {
                    $nivel = "NA";
                }

                $detalleElementoUbicacion = $em->getRepository('schemaBundle:InfoDetalleElemento')->findOneBy(array("elementoId" => $entidad->getId(), "detalleNombre" => "UBICADO EN"));
                if($detalleElementoUbicacion != null)
                {
                    $ubicadoEn = $detalleElementoUbicacion->getDetalleValor();
                }
                else
                {
                    $ubicadoEn = "NA";
                }

                $arr_encontrados[] = array('idElemento' => $entidad->getId(),
                    'nombreElemento' => $entidad->getNombreElemento(),
                    'nombreElementoNodo' => "",
                    'ipElemento' => "",
                    'cantonNombre' => $canton,
                    'jurisdiccionNombre' => $jurisdiccionNombre,
                    'switchTelconet' => "",
                    'puertoSwitch' => "",
                    'marcaElemento' => $marcaDslam,
                    'modeloElemento' => $modeloDslam,
                    'nivel' => $nivel,
                    'ubicadoEn' => $ubicadoEn,
                    'longitud' => $entidad->getLongitud(),
                    'latitud' => $entidad->getLatitud(),
                    'estado' => (trim($historicoDslam) == 'Eliminado' ? 'Eliminado' : 'Activo'),
                    'action1' => 'button-grid-show',
                    'action2' => (trim($historicoDslam) == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-edit'),
                    'action3' => (trim($historicoDslam) == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-delete'));
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    public function getElementosCajas($nombreElemento, $modeloElemento, $marcaElemento, $tipoElemento, $canton, $jurisdiccion, $estado, $start, $limit, $idEmpresa)
    {
        $qb = $this->_em->createQueryBuilder();
        $qbC = $this->_em->createQueryBuilder();
        $qb->select('e');
        $qb->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?2')
            ->setParameter(2, $tipoElemento);

        $qbC->select('count(e.id)');
        $qbC->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?2')
            ->setParameter(2, $tipoElemento);


        if($nombreElemento != "")
        {
//            print_r("entre nombre elemento");
            $qb->andWhere('UPPER(e.nombreElemento) like ?1');
            $qb->setParameter(1, '%' . $nombreElemento . '%');

            $qbC->andWhere('UPPER(e.nombreElemento) like ?1');
            $qbC->setParameter(1, '%' . $nombreElemento . '%');
        }

        if($marcaElemento != "")
        {
//            print_r("entre marca elemento");
            $qb->andWhere('e.idMarcaElemento = ?6')
                ->setParameter(6, $marcaElemento);

            $qbC->andWhere('e.idMarcaElemento = ?6')
                ->setParameter(6, $marcaElemento);
        }
        if($canton != "" || $jurisdiccion != "")
        {

            if($canton != "")
            {
                $qb->andWhere('e.idCanton = ?7')
                    ->setParameter(7, $canton);

                $qbC->andWhere('e.idCanton = ?7')
                    ->setParameter(7, $canton);
            }
            if($jurisdiccion != "")
            {
                $qb->andWhere('e.idJurisdiccion = ?8')
                    ->setParameter(8, $jurisdiccion);

                $qbC->andWhere('e.idJurisdiccion= ?8')
                    ->setParameter(8, $jurisdiccion);
            }
        }

        if($idEmpresa != "")
        {
            $qb->andWhere('e.empresaCod = ?10')
                ->setParameter(10, $idEmpresa);

            $qbC->andWhere('e.empresaCod = ?10')
                ->setParameter(10, $idEmpresa);
        }
        if($modeloElemento != "")
        {
//            print_r("entre modelo elemento");
            $qb->andWhere('e.idModeloElemento = ?3')
                ->setParameter(3, $modeloElemento);

            $qbC->andWhere('e.idModeloElemento = ?3')
                ->setParameter(3, $modeloElemento);
        }
        if($estado != "Todos")
        {
//            print_r("entre estado elemento");

            $qb->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $estado);

            $qbC->andWhere('e.estadoElemento = ?4')
                ->setParameter(4, $estado);
        }

        //contar cuantos datos trae en total
        $total = $qbC->getQuery()->getSingleScalarResult();

        //datos con limits
        if($start != '')
            $qb->setFirstResult($start);
        if($limit != '')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();

//        print($query->getSQL());
//        die();

        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;

        return $resultado;
    }
    
    /**
     * Funcion que sirve para obtener datos de la caja
     * 
     * @version 1.1 14-01-2015 John Vera Nodo cliente
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.2 14-10-2016 Se aumentó el detalle del elemento 'ubicado en'
     */    
    
    public function generarJsonCargarDatosCaja($id, $empresaId, $em, $emC){
        $arr_encontrados = array();
//        $em = $this->getEntityManager('telconet_infraestructura');

        $elemento = $em->find('schemaBundle:InfoElemento', $id);
        
        $elementoUbica = $em->getRepository('schemaBundle:InfoEmpresaElementoUbica')->findBy(array( "elementoId" =>$elemento->getId()));
        $ubicacion = $em->getRepository('schemaBundle:InfoUbicacion')->findBy(array( "id" =>$elementoUbica[0]->getUbicacionId()));
        $parroquia = $em->getRepository('schemaBundle:AdmiParroquia')->findBy(array( "id" =>$ubicacion[0]->getParroquiaId()));
        $canton = $em->getRepository('schemaBundle:AdmiCanton')->findBy(array( "id" =>$parroquia[0]->getCantonId()));
        $cantonJurisdiccion = $em->getRepository('schemaBundle:AdmiCantonJurisdiccion')->findBy(array( "cantonId" =>$canton[0]->getId()));
        $nivel = $em->getRepository('schemaBundle:InfoDetalleElemento')->findOneBy(array( "elementoId" =>$id, "detalleNombre"=>"NIVEL"));
        if($nivel)
        {
            $nivel = $nivel->getDetalleValor();
        }
        $objRelacionElementoOld = $em->getRepository('schemaBundle:InfoRelacionElemento')->findOneBy(array('elementoIdB'=> $id,
                                                                                                           'estado'=> 'Activo'));
        $nombreNodoCliente = '';
        if ($objRelacionElementoOld)
        {
            $objNodoCliente = $em->getRepository('schemaBundle:InfoElemento')->findOneById($objRelacionElementoOld->getElementoIdA());
            $nombreNodoCliente = $objNodoCliente->getId();
        }
        
        $objDetalleUbicado = $em->getRepository('schemaBundle:InfoDetalleElemento')
                                ->findOneBy(array( "elementoId" =>$id, "detalleNombre"=>"UBICADO EN", "estado"=>"Activo"));
        $strUbicacion= "";
        if(is_object($objDetalleUbicado))
        {
            $strUbicado = $objDetalleUbicado->getDetalleValor();
        }
        
        $jurisdiccion = $em->getRepository('schemaBundle:AdmiJurisdiccion')
                      ->getJurisdiccionPorCanton($canton[0]->getId(), $empresaId, '');
        
        $arr_encontrados[]=array('idElemento'           =>$elemento->getId(),
                                 'idCanton'             =>$canton[0]->getId(),
                                 'nombreCanton'         =>trim($canton[0]->getNombreCanton()),
                                 'idJurisdiccion'       =>$jurisdiccion[0]->getId(),
                                 'nombreJurisdiccion'   =>trim($jurisdiccion[0]->getNombreJurisdiccion()),
                                 'idParroquia'          =>$parroquia[0]->getId(),
                                 'nombreParroquia'      =>trim($parroquia[0]->getNombreParroquia()),
                                 'nivel'                => $nivel,
                                 'strUbicado'           => $strUbicado,
                                 'id'                   => $nombreNodoCliente);
            

        $data = json_encode($arr_encontrados);
        $resultado = '{"total":"1","encontrados":' . $data . '}';

        return $resultado;
    }

    public function generarJsonElementosPorCaja($cajaId, $empresa, $estado, $start, $limit, $emInfraestructura)
    {
        $arr_encontrados = array();

        //$em = $this->getManager('telconet');
        $entidadesTotal = $this->getElementosPorCaja($cajaId, $estado, '', '');

        $entidad = $this->getElementosPorCaja($cajaId, $estado, $start, $limit);

        if($entidad)
        {

            $num = count($entidadesTotal);
            foreach($entidad as $entity)
            {

                $elementoCajaId = $entity->getElementoIdA();
                $caja = $emInfraestructura->find('schemaBundle:InfoElemento', $elementoCajaId);

                $empresaElemento = $emInfraestructura->getRepository('schemaBundle:InfoEmpresaElemento')->findOneBy(array("elementoId" => $caja->getId()));
                $empresaId = $empresaElemento->getEmpresaCod();

                if($empresaId == $empresa)
                {
                    $elementoId = $entity->getElementoIdB();
                    $elemento = $emInfraestructura->find('schemaBundle:InfoElemento', $elementoId);
                    $nombreElemento = $elemento->getNombreElemento();
                    $ipObj = $emInfraestructura->getRepository('schemaBundle:InfoIp')->findOneBy(array("elementoId" => $elemento->getId(), "estado" => "Activo"));
                    if($ipObj)
                    {
                        $ip = $ipObj->getIp();
                    }
                    else
                    {
                        $ip = "NA";
                    }


                    $arr_encontrados[] = array(
                        'nombreElemento' => $nombreElemento,
                        'modeloElemento' => $elemento->getModeloElementoId()->getNombreModeloElemento(),
                        'tipoElemento' => $elemento->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento(),
                        'ip' => $ip,
                        'estado' => $elemento->getEstado()
                    );
                }
            }

            if($num == 0)
            {
                $resultado = array('total' => 1,
                    'encontrados' => array('idConectorInterface' => 0, 'nombreConectorInterface' => 'Ninguno', 'idConectorInterface' => 0, 'nombreConectorInterface' => 'Ninguno', 'estado' => 'Ninguno'));
                $resultado = json_encode($resultado);

                return $resultado;
            }
            else
            {
                $data = json_encode($arr_encontrados);
                $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

                return $resultado;
            }
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    public function getElementosPorCaja($cajaId, $estado, $start, $limit)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('e')
            ->from('schemaBundle:InfoRelacionElemento', 'e');

        if($cajaId != "")
        {
            $qb->where('e.elementoIdA = ?1');
            $qb->setParameter(1, $cajaId);
        }
        if($estado != "")
        {
            $qb->andWhere('e.estado = ?2');
            $qb->setParameter(2, $estado);
        }
        if($start != '')
            $qb->setFirstResult($start);
        if($limit != '')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();


        return $query->getResult();
    }

    public function generarJsonElementosPorTipo($estado, $tipoElemento, $start, $limit, $empresaCod)
    {

        $arr_encontrados = array();

        $encontradosTotal = $this->getElementosPorTipo($estado, $tipoElemento, '', '', $empresaCod);

        $encontrados = $this->getElementosPorTipo($estado, $tipoElemento, $start, $limit, $empresaCod);

        if($encontrados)
        {

            $num = count($encontradosTotal);

            $arr_encontrados[] = array('idElemento' => '', 'nombreElemento' => 'Todos');

            foreach($encontrados as $entidad)
            {
                $arr_encontrados[] = array('idElemento' => $entidad->getId(),
                    'nombreElemento' => trim($entidad->getNombreElemento()));
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    public function getElementosPorTipo($estado, $tipoElemento, $start, $limit, $codEmpresa)
    {

        $qb = $this->_em->createQueryBuilder();
        $qb->select('e')
            ->from('schemaBundle:InfoElemento', 'e')
            ->from('schemaBundle:InfoRelacionElemento', 're')
            ->from('schemaBundle:AdmiModeloElemento', 'a')
            ->from('schemaBundle:AdmiTipoElemento', 'b')
            ->where('e = re.elementoIdB')
            ->andWhere('e.modeloElementoId = a')
            ->andWhere('a.tipoElementoId = b');

        if($codEmpresa == 'MD')
        {
            $qb->andWhere("b.nombreTipoElemento = 'OLT' ");
        }

        if($tipoElemento != "")
        {
            $qb->andWhere('re.elementoIdA = ?1');
            $qb->setParameter(1, $tipoElemento);
        }
        if($estado != "")
        {
            $qb->andWhere('e.estado = ?2');
            $qb->setParameter(2, $estado);
        }

        if($start != '')
            $qb->setFirstResult($start);
        if($limit != '')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * Funcion que sirve para llamar al metodo que ejecuta el query y con esa data genera el json que sirve para
     * llenar el grid.
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 8-12-2015
     * @param $arrayParametros [strNombreElemento, intModeloElemento, intMarcaElemento, intTipoElemento, intCanton, intJurisdiccion,
     *                          strEstado, intStart, intLimit, strEmpresa]
     * 
     * @author John Vera Rendon <javera@telconet.ec>
     * @version 1.1 23-09-2016 Se valido para que no aparezcan los routers wifi
     * 
     * @return $resultado
     */
    public function generarJsonElementosPorParametros($arrayParametros)
    {
        $arrayEncontrados = array();
        $resultado = $this->getElementosDeVistaElementosPorParametros($arrayParametros);
        $encontrados = $resultado['registros'];
        $encontradosTotal = $resultado['total'];
                

        if($encontrados)
        {
            $totalElementos = $encontradosTotal;

            foreach($encontrados as $entidad)
            {
                $strEstadoElemento = $entidad->getEstadoElemento();
                $strModeloElemento = $entidad->getNombreModeloElemento();
                $strMarcaElemento = $entidad->getNombreMarcaElemento();
                $strNombreCanton = $entidad->getNombreCanton();


                if($entidad->getIdJurisdiccion())
                {
                    $strNombreJurisdiccion = $entidad->getNombreJurisdiccion();
                }
                else
                {
                    $strNombreJurisdiccion = "NA";
                }

                //relacion de contenencia
                if($entidad->getIdElementoB())
                {
                    $nombreElementoPadre = $entidad->getNombreElementoB();
                }
                else
                {
                    $nombreElementoPadre = "NA";
                }
                //si son wifi no los incluyo
                $objDetalle  = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')->findOneBy(array("elementoId"     => $entidad->getId(),
                                                                                                              "detalleNombre"  => "TIPO ELEMENTO RED",
                                                                                                              "detalleValor"   => "WIFI" ,
                                                                                                              "estado"         => "Activo"));
                if(!$objDetalle)
                {
                
                    $arrayEncontrados[] = array(
                        'idElemento'            => $entidad->getId(),
                        'nombreElemento'        => $entidad->getNombreElemento(),
                        'nombreElementoPadre'   => $nombreElementoPadre,
                        'ipElemento'            => $entidad->getIp(),
                        'cantonNombre'          => $strNombreCanton,
                        'jurisdiccionNombre'    => $strNombreJurisdiccion,
                        'marcaElemento'         => $strMarcaElemento,
                        'modeloElemento'        => $strModeloElemento,
                        'longitud'              => $entidad->getLongitud(),
                        'latitud'               => $entidad->getLatitud(),
                        'estado'                => (trim($strEstadoElemento) == 'Eliminado' ? 'Eliminado' : 'Activo'),
                        'action1'               => 'button-grid-show',
                        'action2'               => (trim($strEstadoElemento) == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-edit'),
                        'action3'               => (trim($strEstadoElemento) == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-delete')
                    );
                }
            }

            //convertir array -> json
            $data = json_encode($arrayEncontrados);
            $resultado = '{"total":"' . $totalElementos . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    /**
     * Funcion que sirve para crear y ejecutar el query para obtener
     * los elementos de la vista de elementos que se encuentra en db_infraestructura
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 8-12-2015
     *  
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 10-03-2016 - Se modifica para que retorne la información de los elementos relacionados a un elemento Padre.
     * 
     * @param $arrayParametros [strNombreElemento, intModeloElemento, intMarcaElemento, intTipoElemento, intCanton, intJurisdiccion,
     *                          strEstado, intStart, intLimit, strEmpresa, intIdElementoPadre]
     * @return $resultado
     */
    public function getElementosDeVistaElementosPorParametros($arrayParametros)
    {
        $intTipoElemento    = $arrayParametros['tipoElemento'];
        $strNombreElemento  = $arrayParametros['nombreElemento'];
        $intModeloElemento  = $arrayParametros['modeloElemento'];
        $intMarcaElemento   = $arrayParametros['marcaElemento'];
        $intCanton          = $arrayParametros['canton'];
        $intJurisdiccion    = $arrayParametros['jurisdiccion'];
        $strEstado          = $arrayParametros['estado'];
        $intStart           = $arrayParametros['start'];
        $intLimit           = $arrayParametros['limit'];
        $strEmpresa         = $arrayParametros['empresa'];
        $intIdElementoPadre = $arrayParametros['intIdElementoPadre'];
        
        $qb = $this->_em->createQueryBuilder();
        $qbC = $this->_em->createQueryBuilder();
        $qb->select('vista');
        $qb->from('schemaBundle:VistaElementos', 'vista')
            ->where('vista.idTipoElemento = ?1')
            ->setParameter(1, $intTipoElemento);

        $qbC->select('count(vista.id)');
        $qbC->from('schemaBundle:VistaElementos', 'vista')
            ->where('vista.idTipoElemento = ?1')
            ->setParameter(1, $intTipoElemento);


        if($strNombreElemento != "")
        {
            $qb->andWhere('UPPER(vista.nombreElemento) like ?2');
            $qb->setParameter(2, '%' . $strNombreElemento . '%');

            $qbC->andWhere('UPPER(vista.nombreElemento) like ?2');
            $qbC->setParameter(2, '%' . $strNombreElemento . '%');
        }

        if($intModeloElemento != "")
        {
            $qb->andWhere('vista.idModeloElemento = ?3')
                ->setParameter(3, $intModeloElemento);

            $qbC->andWhere('vista.idModeloElemento = ?3')
                ->setParameter(3, $intModeloElemento);
        }

        if($strEstado != "Todos")
        {
            $qb->andWhere('vista.estadoElemento = ?4')
                ->setParameter(4, $strEstado);

            $qbC->andWhere('vista.estadoElemento = ?4')
                ->setParameter(4, $strEstado);
        }

        if($strEmpresa != "")
        {
            $qb->andWhere('vista.empresaCod = ?5')
                ->setParameter(5, $strEmpresa);

            $qbC->andWhere('vista.empresaCod = ?5')
                ->setParameter(5, $strEmpresa);
        }

        if($intMarcaElemento != "")
        {
            $qb->andWhere('vista.idMarcaElemento = ?6')
                ->setParameter(6, $intMarcaElemento);

            $qbC->andWhere('vista.idMarcaElemento = ?6')
                ->setParameter(6, $intMarcaElemento);
        }
        if($intCanton != "" || $intJurisdiccion != "")
        {
            if($intCanton != "")
            {
                $qb->andWhere('vista.idCanton = ?7')
                    ->setParameter(7, $intCanton);

                $qbC->andWhere('vista.idCanton = ?7')
                    ->setParameter(7, $intCanton);
            }
            if($intJurisdiccion != "")
            {
                $qb->andWhere('vista.idJurisdiccion = ?8')
                    ->setParameter(8, $intJurisdiccion);

                $qbC->andWhere('vista.idJurisdiccion= ?8')
                    ->setParameter(8, $intJurisdiccion);
            }
        }
        
        
        if( $intIdElementoPadre )
        {
            $qb->andWhere( 'vista.idElementoB = ?9')
               ->setParameter(9, $intIdElementoPadre);
            
            $qbC->andWhere( 'vista.idElementoB = ?9')
                ->setParameter(9, $intIdElementoPadre);
        }
        
        //contar cuantos datos trae en total
        $total = $qbC->getQuery()->getSingleScalarResult();

        //datos con limits
        if($intStart != '')
        {
            $qb->setFirstResult($intStart);
        }

        if($intLimit != '')
        {
            $qb->setMaxResults($intLimit);
        }

        $query = $qb->getQuery();
        $datos = $query->getResult();

        $resultado['registros'] = $datos;
        $resultado['total'] = $total;

        return $resultado;
    }

    //-------------------
    //----- CPE ----
    //-------------------
    /**
     * Funcion que genera el json para consultar
     * los elementos cpes.
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 26-05-2014
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 17-12-2015 Se agrega modificacion al recuperar informacion NAF, se agrega fecha de creacion Telcos, se cambia etiqueta de grid 
     * de registros
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 26-07-2016 Se agrega filtro de id de articulo de instalación en recuperación de elementos NAF
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.3 28-07-2016 Se agrega recuperación de clientes que utilizan equipo CPE consulado, se solicita eliminar filtro de codigo de empresa
     *                         para poder verificar información de CPE sin importar la empresa en sesion del usuario del sistema
     * 
     * @author Jenniffer Mujica <jmujica@telconet.ec>
     * @version 1.4 29-09-2022 Se agrega modificacion al recuperar informacion NAF, se agrega login del responsable, mac cpe naf
     * 
     * @param String        $nombreElemento     nombre del elemento (cpe)
     * @param int           $modeloElemento     id del modelo elemento
     * @param int           $marcaElemento      id de la marca elemento
     * @param String        $tipoElemento       nombre del tipo de elemento
     * @param String        $serial             serial del elemento
     * @param int           $start              numero de inicio para el limit
     * @param int           $limit              numero de fin para el limit
     * @param EntityManager $em                 entity manager para db_infraestructura
     * @param int           $idEmpresa          id de la empresa en sesion
     * @param EntityManager $emNaf              entity manager para db_naf
     * @param EntityManager $emComercial        entity manager para db_comercial
     */
    public function generarJsonCpes($modeloElemento, $tipoElemento, $serial, $start, $limit, $em, $idEmpresa, $emNaf, $emComercial)
    {
        $arr_encontrados   = array();
        $nombreResponsable = "NA";
        $modeloDslam       = "NA";
        $historicoDslam    = "NA";
        $flag              = 0;
        $resultado         = $this->getElementosCpes($modeloElemento, $tipoElemento, $serial, $start, $limit, "");

        $encontrados      = $resultado['registros'];
        $encontradosTotal = $resultado['total'];
        $elementoNaf      = null;
        
        if($encontrados)
        {
            $num = $encontradosTotal;
            foreach($encontrados as $entidad)
            {
                if($serial != "")
                {
                    $elementoTelcos = $em->getRepository('schemaBundle:InfoElemento')
                        ->find($entidad->getId());

                    if($elementoTelcos->getSerieFisica() == $serial)
                    {
                        $flag           = 1;
                        $historicoDslam = $entidad->getEstadoElemento();
                        $modeloDslam    = $entidad->getNombreModeloElemento();
                        $marcaDslam     = $entidad->getNombreMarcaElemento();
                        
                        //se obtiene ultimo elemento registrado en el naf
                        $elementoNaf    = $emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                                                ->findOneBy(array("numeroSerie" => $elementoTelcos->getSerieFisica()), 
                                                            array('fecha' => 'DESC','idInstalacion' => 'DESC'));

                        if($elementoNaf)
                        {
                            $strEstNaf = $elementoNaf->getEstado();
                            
                            $strNafEstado = $this->getEstadosNaf($strEstNaf);
                            
                            
                            $cedulaResponsable = $elementoNaf->getCedula();
                            $responsable       = $emComercial->getRepository('schemaBundle:InfoPersona')
                                                             ->findOneBy(array("identificacionCliente" => $cedulaResponsable));
                            $nombreResponsable = $responsable->getNombres() . " " . $responsable->getApellidos();
                            $strLoginResponsable = $responsable->getLogin();
                            $strMacCpe = ($elementoNaf->getMac() != null ) ? $elementoNaf->getMac() : '';
                        }
                        else
                        {
                            $strNafEstado = "NA";
                            $strMacCpe = '';
                        }
                        
                        //codigo para recuperar los clientes(Activo,In-Corte) que utilizan ese elemento 
                        $arrayParametrosMetodo               = array();
                        $arrayParametrosMetodo['elementoId'] = $elementoTelcos->getId();
                        $strRespuestaMetodo                  = $this->getClientePerteneceEquipo($arrayParametrosMetodo);
                        
                        $arr_encontrados[] = array( 'idElemento'        => $entidad->getId(),
                                                    'nombreElemento'    => $entidad->getNombreElemento(),
                                                    'marcaElemento'     => $marcaDslam,
                                                    'modeloElemento'    => $modeloDslam,
                                                    'serial'            => $serial,
                                                    'responsable'       => $nombreResponsable,
                                                    'loginResponsable'  => $strLoginResponsable,
                                                    'estadoNaf'         => $strNafEstado,
                                                    'macCpeNaf'         => $strMacCpe,
                                                    'estadoTelcos'      => (trim($historicoDslam)),
                                                    'fechaTelcos'       => $elementoTelcos->getFeCreacion()->format('Y-m-d H:i:s'),
                                                    'clientesTelcos'    => $strRespuestaMetodo
                                                  );
                    }//if($elementoTelcos->getSerieFisica() == $serial)
                }//if($serial!="")
                else
                {
                    $flag           = 1;
                    $historicoDslam = $entidad->getEstadoElemento();
                    $modeloDslam    = $entidad->getNombreModeloElemento();
                    $marcaDslam     = $entidad->getNombreMarcaElemento();

                    $elementoTelcos = $em->getRepository('schemaBundle:InfoElemento')
                                         ->find($entidad->getId());

                    if($elementoTelcos->getSerieFisica())
                    {
                        $serialElemento = $elementoTelcos->getSerieFisica();
                    }
                    else
                    {
                        $serialElemento = "NA";
                    }

                    //se obtiene ultimo elemento registrado en el naf
                    $elementoNaf = $emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                                         ->findOneBy(array("numeroSerie" => $elementoTelcos->getSerieFisica()), 
                                                     array('fecha' => 'DESC','idInstalacion' => 'DESC'));

                    if($elementoNaf)
                    {
                        $strEstNaf = $elementoNaf->getEstado();
                        $strNafEstado = $this->getEstadosNaf($strEstNaf);
                        $cedulaResponsable = $elementoNaf->getCedula();
                        $responsable       = $emComercial->getRepository('schemaBundle:InfoPersona')
                                                         ->findOneBy(array("identificacionCliente" => $cedulaResponsable));
                        $nombreResponsable = $responsable->getNombres() . " " . $responsable->getApellidos();
                        $strMacCpe = ($elementoNaf->getMac() != null ) ? $elementoNaf->getMac() : '';
                    }
                    else
                    {
                        $strNafEstado = "NA";
                        $strMacCpe = '';
                    }
                    
                    //codigo para recuperar los clientes(Activo,In-Corte) que utilizan ese elemento 
                    $arrayParametrosMetodo               = array();
                    $arrayParametrosMetodo['elementoId'] = $elementoTelcos->getId();
                    $strRespuestaMetodo                  = $this->getClientePerteneceEquipo($arrayParametrosMetodo);

                    $arr_encontrados[] = array( 'idElemento'        => $entidad->getId(),
                                                'nombreElemento'    => $entidad->getNombreElemento(),
                                                'marcaElemento'     => $marcaDslam,
                                                'modeloElemento'    => $modeloDslam,
                                                'serial'            => $serialElemento,
                                                'responsable'       => $nombreResponsable,
                                                'loginResponsable'  => $strLoginResponsable,
                                                'estadoNaf'         => $strNafEstado,
                                                'macCpeNaf'         => $strMacCpe,
                                                'estadoTelcos'      => (trim($historicoDslam)),
                                                'fechaTelcos'       => $elementoTelcos->getFeCreacion()->format('Y-m-d H:i:s'),
                                                'clientesTelcos'    => $strRespuestaMetodo
                                              );
                }//else
            }//foreach ($encontrados as $entidad)

            if($flag == 0)
            {
                $num            = 1;
                $historicoDslam = "NA";
                $strNafEstado      = "NA";

                //se obtiene ultimo elemento registrado en el naf
                $elementoNaf = $emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                                     ->findOneBy(array("numeroSerie" => $serial), array('fecha' => 'DESC','idInstalacion' => 'DESC'));

                if($elementoNaf)
                {
                    $strEstNaf = $elementoNaf->getEstado();

                    $strNafEstado = $this->getEstadosNaf($strEstNaf);

                    $cedulaResponsable = $elementoNaf->getCedula();
                    $responsable       = $emComercial->getRepository('schemaBundle:InfoPersona')
                                                     ->findOneBy(array("identificacionCliente" => $cedulaResponsable));
                    $nombreResponsable = $responsable->getNombres() . " " . $responsable->getApellidos();

                    $arr_encontrados[] = array( 'idElemento'        => $entidad->getId(),
                                                'nombreElemento'    => "ELEMENTO NO ESTA ASIGNADO A NINGUN CLIENTE",
                                                'marcaElemento'     => "NA",
                                                'modeloElemento'    => $elementoNaf->getModelo(),
                                                'serial'            => $serial,
                                                'responsable'       => $nombreResponsable,
                                                'loginResponsable'  => $strLoginResponsable,
                                                'estadoNaf'         => $strNafEstado,
                                                'macCpeNaf'         => ($elementoNaf->getMac() != null ) ? $elementoNaf->getMac() : '',
                                                'estadoTelcos'      => (trim($historicoDslam)),
                                                'fechaTelcos'       => '',
                                                'clientesTelcos'    => ''
                                              );
                }//if($elementoNaf)
            }//if($flag==0)

            $data      = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $historicoDslam = "NA";
            $strNafEstado      = "NA";
            //se obtiene ultimo elemento registrado en el naf
            $elementoNaf    = $emNaf->getRepository('schemaBundle:InArticulosInstalacion')
                                    ->findOneBy(array("numeroSerie" => $serial), array('fecha' => 'DESC','idInstalacion' => 'DESC'));

            if($elementoNaf)
            {
                if($modeloElemento)
                {
                    $modeloElementoTelcos = $em->getRepository('schemaBundle:AdmiModeloElemento')
                                               ->find($modeloElemento);

                    if($modeloElementoTelcos->getNombreModeloElemento() == $elementoNaf->getModelo())
                    {
                        $num = 1;
                        $strEstNaf = $elementoNaf->getEstado();

                        $strNafEstado = $this->getEstadosNaf($strEstNaf);

                        $cedulaResponsable = $elementoNaf->getCedula();
                        $responsable       = $emComercial->getRepository('schemaBundle:InfoPersona')
                                                         ->findOneBy(array("identificacionCliente" => $cedulaResponsable));
                        $nombreResponsable = $responsable->getNombres() . " " . $responsable->getApellidos();
                        $strLoginResponsable = $responsable->getLogin();
                        $strMacCpe = ($elementoNaf->getMac() != null ) ? $elementoNaf->getMac() : '';

                        $arr_encontrados[] = array( 'idElemento'        => "0",
                                                    'nombreElemento'    => "ELEMENTO NO ESTA ASIGNADO A NINGUN CLIENTE",
                                                    'marcaElemento'     => "NA",
                                                    'modeloElemento'    => $elementoNaf->getModelo(),
                                                    'serial'            => $serial,
                                                    'responsable'       => $nombreResponsable,
                                                    'loginResponsable'  => $strLoginResponsable,
                                                    'estadoNaf'         => $strNafEstado,
                                                    'macCpeNaf'         => $strMacCpe,
                                                    'estadoTelcos'      => (trim($historicoDslam)),
                                                    'fechaTelcos'       => '',
                                                    'clientesTelcos'    => ''
                                                  );
                        $data      = json_encode($arr_encontrados);
                        $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';
                    }
                    else
                    {
                        $resultado = '{"total":"0","encontrados":[]}';
                    }
                }
                else
                {
                    $strEstNaf = $elementoNaf->getEstado();

                    $strNafEstado = $this->getEstadosNaf($strEstNaf);
                    
                    $cedulaResponsable = $elementoNaf->getCedula();
                    $responsable       = $emComercial->getRepository('schemaBundle:InfoPersona')
                                                     ->findOneBy(array("identificacionCliente" => $cedulaResponsable));
                    $nombreResponsable = $responsable->getNombres() . " " . $responsable->getApellidos();
                    $strLoginResponsable = $responsable->getLogin();
                    $strMacCpe = ($elementoNaf->getMac() != null ) ? $elementoNaf->getMac() : '';

                    $arr_encontrados[] = array( 'idElemento'        => "0",
                                                'nombreElemento'    => "ELEMENTO NO ESTA ASIGNADO A NINGUN CLIENTE",
                                                'marcaElemento'     => "NA",
                                                'modeloElemento'    => $elementoNaf->getModelo(),
                                                'serial'            => $serial,
                                                'responsable'       => $nombreResponsable,
                                                'loginResponsable'  => $strLoginResponsable,
                                                'estadoNaf'         => $strNafEstado,
                                                'macCpeNaf'         => $strMacCpe,
                                                'estadoTelcos'      => (trim($historicoDslam)),
                                                'fechaTelcos'       => '',
                                                'clientesTelcos'    => ''
                                              );
                    $data      = json_encode($arr_encontrados);
                    $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';
                }
            }//if($elementoNaf)
            else
            {
                $resultado = '{"total":"0","encontrados":[]}';
            }
            return $resultado;
        }
    }

    /**
     * Funcion que obtiene elementos CPE de la vista de base de datos VistaElementos
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 17-12-2015 Se agrega Ordenamiento de registros por campo ID de elemento 
     * 
     * @param int           $modeloElemento     id del modelo elemento
     * @param String        $tipoElemento       nombre del tipo de elemento
     * @param String        $serial             serial del elemento
     * @param int           $start              numero de inicio para el limit
     * @param int           $limit              numero de fin para el limit
     * @param int           $idEmpresa          id de la empresa en sesion
     * 
     * @return array con resultado $resultado
     */
    public function getElementosCpes($modeloElemento, $tipoElemento, $serial, $start, $limit, $idEmpresa)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->from('schemaBundle:VistaElementos', 'e')
            ->where('e.nombreTipoElemento like ?1')
            ->setParameter(1, $tipoElemento . "%");

        if($serial != "")
        {
            $qb->andWhere('UPPER(e.serieFisica) like ?2');
            $qb->setParameter(2, '%' . $serial . '%');
        }

        if($idEmpresa != "")
        {
            $qb->andWhere('e.empresaCod = ?3')
                ->setParameter(3, $idEmpresa);
        }
        if($modeloElemento != "")
        {
            $qb->andWhere('e.idModeloElemento = ?4')
                ->setParameter(4, $modeloElemento);
        }

        //contar cuantos datos trae en total
        $qb->select('count(e.id)');
        $total = $qb->getQuery()->getSingleScalarResult();

        //select de datos
        $qb->select('e');
        $qb->orderBy('e.id', 'ASC');

        //datos con limits
        if($start != '')
        {
            $qb->setFirstResult($start);
        }

        if($limit != '')
        {
            $qb->setMaxResults($limit);
        }

        $query = $qb->getQuery();

        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;

        return $resultado;
    }

    //---------------------------
    //----- SIN UBICACION ----
    //--------------------------

    public function generarJsonSinUbicacion($nombreElemento, $start, $limit, $em, $idEmpresa)
    {
        $arr_encontrados = array();

        $resultado = $this->getElementosSinUbicacion($nombreElemento, $start, $limit);

        $encontrados = $resultado['registros'];
        $encontradosTotal = $resultado['total'];


        if($encontrados)
        {

            $num = $encontradosTotal;

            foreach($encontrados as $entidad)
            {
                $empresaElemento = $em->getRepository('schemaBundle:InfoEmpresaElemento')
                    ->findOneBy(array("elementoId" => $entidad->getId(), "empresaCod" => $idEmpresa));
                if($empresaElemento)
                {
                    $empresaElementoUbica = $em->getRepository('schemaBundle:InfoEmpresaElementoUbica')
                        ->findOneBy(array("elementoId" => $entidad->getId(), "empresaCod" => $idEmpresa));
                    if($empresaElementoUbica)
                    {
                        
                    }
                    else
                    {
                        $arr_encontrados[] = array('idElemento' => $entidad->getId(),
                            'nombreElemento' => $entidad->getNombreElemento(),
                            'estado' => (trim($entidad->getEstado()) == 'Eliminado' ? 'Eliminado' : 'Activo'),
                            'action1' => 'button-grid-show',
                            'action2' => (trim($entidad->getEstado()) == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-edit'),
                            'action3' => (trim($entidad->getEstado()) == 'Eliminado' ? 'button-grid-invisible' : 'button-grid-delete'));
                    }
                }
            }

            $data = json_encode($arr_encontrados);
            $resultado = '{"total":"' . $num . '","encontrados":' . $data . '}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }

    public function getElementosSinUbicacion($nombreElemento, $start, $limit)
    {
        $qb = $this->_em->createQueryBuilder();
        $qbC = $this->_em->createQueryBuilder();
        $qb->select('e');
        $qb->from('schemaBundle:InfoElemento', 'e');

        $qbC->select('count(e.id)');
        $qbC->from('schemaBundle:InfoElemento', 'e');


        if($nombreElemento != "")
        {
//            print_r("entre nombre elemento");
            $qb->where('UPPER(e.nombreElemento) like ?1');
            $qb->setParameter(1, '%' . $nombreElemento . '%');

            $qbC->where('UPPER(e.nombreElemento) like ?1');
            $qbC->setParameter(1, '%' . $nombreElemento . '%');
        }

        //contar cuantos datos trae en total
        $total = $qbC->getQuery()->getSingleScalarResult();

        //datos con limits
        if($start != '')
            $qb->setFirstResult($start);
        if($limit != '')
            $qb->setMaxResults($limit);
        $query = $qb->getQuery();

//        print($query->getSQL());
//        die();

        $datos = $query->getResult();
        $resultado['registros'] = $datos;
        $resultado['total'] = $total;

        return $resultado;
    }

    /*     * *********************
     * MOBIL TECNICO        *
     * **********************
     */

    /**
     * Funcion que sirve para obtener los Elementos por Coordenadas
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 3-06-2015
     * @param int $idTipoElemento
     * @param int $longitudMax
     * @param int $longitudMin
     * @param int $latitudMax
     * @param int $latitudMin
     * @return array $arraResult (NOMBRE_ELEMENTO, ID_ELEMENTO, NOMBRE_MODELO_ELEMENTO, NOMBRE_TIPO_ELEMENTO, LONGITUD_UBICACION, LATITUD_UBICACION)
     */
    public function getElementosPorCoordenadas($idTipoElemento, $longitudMax, $longitudMin, $latitudMax, $latitudMin)
    {
        $sql = "select DISTINCT(ELEMENTO.NOMBRE_ELEMENTO) NOMBRE_ELEMENTO, 
                        ELEMENTO.ID_ELEMENTO ID_ELEMENTO,
                        MODELO.NOMBRE_MODELO_ELEMENTO NOMBRE_MODELO_ELEMENTO, 
                        TIPO.NOMBRE_TIPO_ELEMENTO NOMBRE_TIPO_ELEMENTO,
                        UBICACION.LONGITUD_UBICACION LONGITUD_UBICACION, 
                        UBICACION.LATITUD_UBICACION LATITUD_UBICACION
                from INFO_ELEMENTO ELEMENTO,
                        ADMI_MODELO_ELEMENTO MODELO,
                        ADMI_TIPO_ELEMENTO TIPO,
                        INFO_EMPRESA_ELEMENTO_UBICA EEU,
                        INFO_UBICACION UBICACION
                where ELEMENTO.ID_ELEMENTO = EEU.ELEMENTO_ID
                AND ELEMENTO.ESTADO = :estadoElemento
                and ELEMENTO.MODELO_ELEMENTO_ID = MODELO.ID_MODELO_ELEMENTO
                AND MODELO.TIPO_ELEMENTO_ID = TIPO.ID_TIPO_ELEMENTO
                AND TIPO.ID_TIPO_ELEMENTO = :idTipoElemento
                AND EEU.UBICACION_ID = UBICACION.ID_UBICACION
                AND UBICACION.LONGITUD_UBICACION BETWEEN :longitudMin and :longitudMax
                AND UBICACION.LATITUD_UBICACION BETWEEN :latitudMin AND :latitudMax";

        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->bindValue('estadoElemento', 'Activo');
        $stmt->bindValue('idTipoElemento', $idTipoElemento);
        $stmt->bindValue('longitudMax', $longitudMax);
        $stmt->bindValue('longitudMin', $longitudMin);
        $stmt->bindValue('latitudMax', $latitudMax);
        $stmt->bindValue('latitudMin', $latitudMin);
        $stmt->execute();

        $arraResult = $stmt->fetchAll();

        return $arraResult;
    }

    /**
     * clonarSplitter
     * funcion que permite clonar la data de un splitter e inactivar el splitter original
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 19-02-2015
     * @param string $idSplitterOriginal
     * @param string $idInterfaceSplitterL1
     * @param string $nombreNuevoElemento
     * @param string $userCrea
     * 
     * @return string $resultado
     */
    public function clonarSplitter($idSplitterOriginal, $idInterfaceSplitterL1, $nombreNuevoElemento, $idEmpresa, $userCrea, $ipIngresa)
    {
        if($idSplitterOriginal && $idInterfaceSplitterL1 && $nombreNuevoElemento && $userCrea && $idEmpresa)
        {
            {
                $out_msn_Error = null;
                $out_msn_Error = str_pad($out_msn_Error, 3000, " ");

                $sql = "BEGIN
                                INFRK_TRANSACCIONES.INFRP_CLONAR_SPLITTER(  :idSplitterOrigen,
                                                                            :nombreElemento,
                                                                            :idInterfaceSplitterL1 ,
                                                                            :idEmpresa,
                                                                            :usuarioCrea,
                                                                            :ipIngresa,
                                                                            :mensajeError);

                        END; ";
                $stmt = $this->_em->getConnection()->prepare($sql);
                $stmt->bindParam('idSplitterOrigen', $idSplitterOriginal);
                $stmt->bindParam('nombreElemento', $nombreNuevoElemento);
                $stmt->bindParam('idInterfaceSplitterL1', $idInterfaceSplitterL1);
                $stmt->bindParam('idEmpresa', $idEmpresa);
                $stmt->bindParam('usuarioCrea', $userCrea);
                $stmt->bindParam('ipIngresa', $ipIngresa);
                $stmt->bindParam('mensajeError', $out_msn_Error);
                $stmt->execute();

                if(!$out_msn_Error)
                {
                    $resultado = "{'status':'OK','mensaje':'Splitter clonado correctamente'}";
                }
                else
                {
                    $resultado = "{'status':'ERROR','mensaje':'$out_msn_Error'}";
                }
            }
        }
        else
        {
            $resultado = "{'status':'ERROR','mensaje':'Faltan datos para ejecutar el proceso'}";
        }


        return $resultado;
    }

    /**
     * Obtiene el nombre y el id del splitter segun el nivel 
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 07-03-2015
     * 
     * @param integer $idElemento
     * @param string $tipoRegistro
     * @param string $elementoFin
     * 
     * @return array[0]
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.1 10-10-2019 - Se agrega el ID del modelo a la respuesta.
     * 
     * */
    public function getElementoPadre($idElemento, $tipoRegistro, $elementoFin)
    {
        $strQueryObtenerPadre = "SELECT aa.ID_ELEMENTO idElemento,
                                                bb.ID_INTERFACE_ELEMENTO idInterfaceElemento,
                                                aa.NOMBRE_ELEMENTO nombreElemento,
                                                aa.MODELO_ELEMENTO_ID modeloElementoId
                                              FROM info_elemento aa,
                                                info_interface_elemento bb
                                              WHERE bb.ID_INTERFACE_ELEMENTO = get_elemento_padre(:idElementoFn, :tipoRegistroFn, :elementoFinFn)
                                              AND aa.ID_ELEMENTO             =bb.ELEMENTO_ID";
        $stmt = $this->_em->getConnection()->prepare($strQueryObtenerPadre);
        $stmt->bindValue('idElementoFn', $idElemento);
        $stmt->bindValue('tipoRegistroFn', $tipoRegistro);
        $stmt->bindValue('elementoFinFn', $elementoFin);
        $stmt->execute();
        $arraResult = $stmt->fetchAll();
        return $arraResult;
    }
    
    /**
     * Funcion que sirve para obtener el json de los elementos diferentes al anillo y pe.
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 27-04-2016
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.1 1-06-2016
     * Se actualizo la funcion para que consuma ws de Networking
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 17-07-2018 - Se enviá nuevo parámetro al método getPeBySwitch
     *
     * @param $arrayParametros [tipoElementoIngreso, tipoElementoPadre, estadoElemento, tipoElementoBusqueda, nombreElemento
     *                          detalleNombreElemento, detalleValorElemento, idElementoPadre]
     * @return $json
     */
    public function getJsonElementosParaUmProgramada($arrayParametros)
    {
        $arrayObjs      = array();
        $arrayParametrosWs = array();
        $serviceTecnico = $arrayParametros['serviceTecnico'];
        
        $objElemento = $this->_em->getRepository("schemaBundle:InfoElemento")->findOneBy(array("nombreElemento" => $arrayParametros['nombreElemento'],
                                                                                               "estado"         => "Activo"));
        
        //no existe el switch
        if(is_object($objElemento))
        {
            $objAnilloElemento = $this->_em->getRepository("schemaBundle:InfoDetalleElemento")
                                       ->findOneBy(array("elementoId"   => $objElemento,
                                                         "detalleNombre"=> "ANILLO",
                                                         "estado"       => "Activo"));
        
            //no tiene anillo el switch nuevo
            if(is_object($objAnilloElemento))
            {
                $arrayParametrosWs["intIdElemento"] = $objElemento->getId();
                $arrayParametrosWs["intIdServicio"] = "";

                //buscar pe del switch nuevo
                $objElementoPadre = $serviceTecnico->getPeBySwitch($arrayParametrosWs);

                if(is_object($objElementoPadre))
                {
                    //si esta en el mismo pe y mismo anillo
                    if($objElementoPadre->getId() == $arrayParametros['idElementoPadre'] && 
                       $objAnilloElemento->getDetalleValor() == $arrayParametros['detalleValorElemento'])
                    {
                        $arrayObjs['status'] = "ERROR";
                        $arrayObjs['mensaje'] = "Por favor ingresar un switch <br> que se encuentre en un diferente anillo y diferente PE";
                    }
                    else
                    {
                        $arrayObjs['status'] = "OK";
                        $arrayObjs['mensaje'] = "OK";
                        $arrayObjs['NOMBRE_ELEMENTO_PADRE'] = $objElementoPadre->getNombreElemento();
                        $arrayObjs['ID_ELEMENTO_PADRE'] = $objElementoPadre->getId();
                        $arrayObjs['DETALLE_VALOR'] = $objAnilloElemento->getDetalleValor();
                        $arrayObjs['ID_ELEMENTO'] = $objElemento->getId();
                    }
                }
                else
                {
                    $arrayObjs['status'] = "ERROR";
                    $arrayObjs['mensaje'] = "Switch no tiene Pe asociado!";
                }
            }
            else
            {
                $arrayObjs['status']  = "ERROR";
                $arrayObjs['mensaje'] = "Switch no tiene anillo";
            }
        }
        else
        {
            $arrayObjs['status']  = "ERROR";
            $arrayObjs['mensaje'] = "Switch no existe, favor verificar";
        }
        
        
        
        
                
        return json_encode($arrayObjs);
    }
    
    /**
     * Función que sirve para obtener los elementos (switches) diferentes al anillo y pe en el que
     * se encuentra el elemento enviado
     * 
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 27-04-2016
     * @param $arrayParametros [tipoElementoIngreso, tipoElementoPadre, estadoElemento, tipoElementoBusqueda, 
     *                          detalleNombreElemento, detalleValorElemento, idElementoPadre]
     * @return $arrayResult
     * costo 23
     */
    public function getElementosParaUmProgramada($arrayParametros)
    {   
        $sql = "SELECT ELEMENTO.ID_ELEMENTO ID_ELEMENTO,
                ELEMENTO.NOMBRE_ELEMENTO NOMBRE_ELEMENTO,
                DETALLE.DETALLE_VALOR DETALLE_VALOR,
                (SELECT ELE.ID_ELEMENTO
                FROM INFO_ELEMENTO ELE,
                  INFO_INTERFACE_ELEMENTO PORT
                WHERE PORT.ID_INTERFACE_ELEMENTO = DB_INFRAESTRUCTURA.GET_ELEMENTO_PADRE(ELEMENTO.ID_ELEMENTO, :tipoElementoIngreso, :tipoElementoPadre)
                AND ELE.ID_ELEMENTO              = PORT.ELEMENTO_ID
                ) ID_ELEMENTO_PADRE,
                (SELECT ELE.NOMBRE_ELEMENTO
                FROM INFO_ELEMENTO ELE,
                  INFO_INTERFACE_ELEMENTO PORT
                WHERE PORT.ID_INTERFACE_ELEMENTO = DB_INFRAESTRUCTURA.GET_ELEMENTO_PADRE(ELEMENTO.ID_ELEMENTO, :tipoElementoIngreso, :tipoElementoPadre)
                AND ELE.ID_ELEMENTO              = PORT.ELEMENTO_ID
                ) NOMBRE_ELEMENTO_PADRE
              FROM ADMI_TIPO_ELEMENTO TIPO,
                ADMI_MODELO_ELEMENTO MODELO,
                INFO_ELEMENTO ELEMENTO,
                INFO_DETALLE_ELEMENTO DETALLE,
                INFO_UBICACION UBICACION,
                INFO_EMPRESA_ELEMENTO_UBICA IEEU,
                DB_GENERAL.ADMI_PARROQUIA PARROQUIA,
                DB_GENERAL.ADMI_CANTON CANTON,
                ADMI_CANTON_JURISDICCION ACJ
              WHERE TIPO.NOMBRE_TIPO_ELEMENTO = :tipoElementoBusqueda
              AND TIPO.ID_TIPO_ELEMENTO       = MODELO.TIPO_ELEMENTO_ID
              AND MODELO.ID_MODELO_ELEMENTO   = ELEMENTO.MODELO_ELEMENTO_ID
              AND MODELO.ESTADO               = :estadoElemento
              AND ELEMENTO.ID_ELEMENTO        = DETALLE.ELEMENTO_ID
              AND ELEMENTO.ESTADO             = :estadoElemento
              AND ELEMENTO.ID_ELEMENTO        = IEEU.ELEMENTO_ID
              AND IEEU.EMPRESA_COD            = :codEmpresa
              AND IEEU.UBICACION_ID           = UBICACION.ID_UBICACION
              AND UBICACION.PARROQUIA_ID      = PARROQUIA.ID_PARROQUIA
              AND PARROQUIA.CANTON_ID         = CANTON.ID_CANTON
              AND CANTON.ID_CANTON            = ACJ.CANTON_ID
              AND ACJ.JURISDICCION_ID         = :puntoCoberturaId
              AND ACJ.ESTADO                  = :estadoElemento
              AND ELEMENTO.NOMBRE_ELEMENTO    = :nombreElemento
              AND DETALLE.DETALLE_NOMBRE      = :detalleNombreElemento
              AND DETALLE.ESTADO              = :estadoElemento
              AND DETALLE.DETALLE_VALOR      <> :detalleValorCero
              AND REGEXP_LIKE (DETALLE.DETALLE_VALOR, :expresionRegular)
              AND DETALLE.DETALLE_VALOR      IS NOT NULL";
        
        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->bindValue('tipoElementoIngreso',     $arrayParametros['tipoElementoIngreso']);
        $stmt->bindValue('tipoElementoPadre',       $arrayParametros['tipoElementoPadre']);
        $stmt->bindValue('estadoElemento',          $arrayParametros['estadoElemento']);
        $stmt->bindValue('tipoElementoBusqueda',    $arrayParametros['tipoElementoBusqueda']);
        $stmt->bindValue('detalleNombreElemento',   $arrayParametros['detalleNombreElemento']);
        $stmt->bindValue('puntoCoberturaId',        $arrayParametros['puntoCoberturaId']);
        $stmt->bindValue('nombreElemento',          $arrayParametros['nombreElemento']);
        $stmt->bindValue('detalleValorCero',        '0');
        $stmt->bindValue('expresionRegular',        '^[1-9][0-9]*$');
        $stmt->bindValue('codEmpresa',              $arrayParametros['codEmpresa']);
        $stmt->execute();
        
        $arraResult = $stmt->fetchAll();
        return $arraResult[0];
    }
    
    /**
     * Obtiene el array con con los ids de switches de que siguen el enlace a partir de un PE y dado un anillo 
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 06-04-2016
     * 
     * @param integer $intIdElemento PE
     * @param integer $intNumeroAnillo Anillo    
     * 
     * @return Array $arraySwitches [ ids ]
     **/
    public function getResultadoElementosPorAnillo($intIdElemento, $intNumeroAnillo)
    {
        $rsm              = new ResultSetMappingBuilder($this->_em);
        $query            = $this->_em->createNativeQuery(null, $rsm);     
                          
        try
        {
            $sql = "SELECT DB_INFRAESTRUCTURA.GET_ELEMENTOS_EN_ANILLO(:elemento, :numeroAnillo) AS SWS FROM DUAL";
            
            $rsm->addScalarResult('SWS', 'switches', 'string');
            $query->setParameter("elemento", $intIdElemento);
            $query->setParameter("numeroAnillo", $intNumeroAnillo);
            
            $query->setSQL($sql);
           
            $resultado = $query->getScalarResult();    
            
            $arraySwitches = explode("|",$resultado[0]['switches']);
        } 
        catch (\Exception $ex) 
        {
            error_log($ex->getMessage());
        }
        
        return $arraySwitches;
    }
    
     /**
      * Obtiene el json con con los switches pertenecientes a el PE dado un anillo particular
      * 
      * @author Allan Suarez <arsuarez@telconet.ec>
      * @version 1.0 18-04-2016
      * 
      * @author Francisco Adum <fadum@telconet.ec>
      * @version 1.1 31-05-2016
      * Se actualiza la funcion para que consuma los ws de networking
      * 
      * @param integer $intIdElemento PE
      * @param integer $intNumeroAnillo Anillo    
      * @param Service $serviceTecnico
      * 
      * @return json $objResultado [ total , data ]
      */
    public function getJsonElementosPorAnillo($objElementoPe, $intNumeroAnillo, $serviceTecnico)
    {
        $objResultado  = array();
        $arraySwitches = array();
        
        if(is_object($objElementoPe))
        {
            $arraySwitches = $serviceTecnico->getSwitchesByPe($objElementoPe->getId());
        }
        
        foreach($arraySwitches as $switch)
        {
            if($switch['anillo'] == $intNumeroAnillo)
            {
                $objElemento = $this->_em->getRepository("schemaBundle:InfoElemento")->findOneBy(array("nombreElemento"  => $switch['sw'],
                                                                                                       "estado"          => "Activo"));

                if(is_object($objElemento))
                {                          
                    if(!in_array($switch,$arrayIds))
                    {
                        $arrayIds[]       = $objElemento->getId(); //Validador de ids para no mostrar repetidos
                        $arrayElementos[] = array("idElemento" => $objElemento->getId(),"nombreElemento"=> $objElemento->getNombreElemento());
                    }                    
                }
            }
        }//foreach($arraySwitches as $switch)
        
        if(count($arrayElementos)>0)
        {
            $objResultado = array(
                              'total' => count($arrayElementos) ,
                              'data'  => $arrayElementos
                             );
        }            
        
        return $objResultado;
    }

    /**
     * Obtiene los cassette de las cajas que se encuentren disponibles para un Switch enviado como parametro
     * siguiendo el order : SWITCH - ODF - CAJA ( cassettes - hilos )
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 06-04-2016
     * 
     * @param integer $intIdElemento     
     * 
     * @return Array $arrayResultado
     **/
    public function getResultadoCajaPorPuertoDisponible($intIdElemento)
    {
        $rsm              = new ResultSetMappingBuilder($this->_em);
        $query            = $this->_em->createNativeQuery(null, $rsm);
        
        $arrayResultado = array();
        
        try
        {
            $sql = "  SELECT 
  
                        DISTINCT(ELEMENTO_CONTENEDOR.ID_ELEMENTO),
                        ELEMENTO_CONTENEDOR.NOMBRE_ELEMENTO  

                      FROM 

                        INFO_INTERFACE_ELEMENTO INTERF,
                        INFO_ELEMENTO ELEMENTO,
                        ADMI_MODELO_ELEMENTO MODELO,
                        ADMI_TIPO_ELEMENTO TIPO,
                        INFO_RELACION_ELEMENTO RELACION,
                        INFO_ELEMENTO ELEMENTO_CONTENEDOR,

                        (SELECT DISTINCT(INTERFAZE.ID_INTERFACE_ELEMENTO),
                        INTERFAZE.NOMBRE_INTERFACE_ELEMENTO,
                        ENLACE.INTERFACE_ELEMENTO_FIN_ID,
                        MINIENLACE.INTERFACE_ELEMENTO_FIN_ID INTERFACE_ODF_FIN,
                        ENLACEODFCAS.INTERFACE_ELEMENTO_FIN_ID INTERFACE_CAS_INI
                      FROM INFO_INTERFACE_ELEMENTO INTERFAZE,
                        INFO_INTERFACE_ELEMENTO INTERFAZE_FIN,
                        INFO_ENLACE ENLACE,
                        INFO_ENLACE MINIENLACE,
                        INFO_ENLACE ENLACEODFCAS,
                        INFO_ELEMENTO ELEMENTO,
                        ADMI_MODELO_ELEMENTO MODELO,
                        ADMI_TIPO_ELEMENTO TIPO
                      WHERE INTERFAZE.ID_INTERFACE_ELEMENTO     = ENLACE.INTERFACE_ELEMENTO_INI_ID
                      AND ENLACE.ESTADO                         = :estado
                      AND ENLACE.TIPO_ENLACE                    = :principal
                      AND ENLACE.INTERFACE_ELEMENTO_FIN_ID NOT IN
                        (SELECT ID_INTERFACE_ELEMENTO
                        FROM INFO_INTERFACE_ELEMENTO
                        WHERE ELEMENTO_ID = :elemento
                        )                      
                      AND ENLACEODFCAS.INTERFACE_ELEMENTO_INI_ID = MINIENLACE.INTERFACE_ELEMENTO_FIN_ID
                      AND MINIENLACE.INTERFACE_ELEMENTO_INI_ID   = ENLACE.INTERFACE_ELEMENTO_FIN_ID
                      AND INTERFAZE_FIN.ID_INTERFACE_ELEMENTO    = ENLACE.INTERFACE_ELEMENTO_FIN_ID
                      AND ELEMENTO.ID_ELEMENTO                   = INTERFAZE_FIN.ELEMENTO_ID
                      AND ELEMENTO.MODELO_ELEMENTO_ID            = MODELO.ID_MODELO_ELEMENTO
                      AND MODELO.TIPO_ELEMENTO_ID                = TIPO.ID_TIPO_ELEMENTO
                      AND TIPO.NOMBRE_TIPO_ELEMENTO              = :tipoOdf
                      AND INTERFAZE.ELEMENTO_ID                  = :elemento
                        ) INFO

                      WHERE INFO.INTERFACE_CAS_INI         = INTERF.ID_INTERFACE_ELEMENTO
                      AND INTERF.ELEMENTO_ID               = ELEMENTO.ID_ELEMENTO
                      AND ELEMENTO.MODELO_ELEMENTO_ID      = MODELO.ID_MODELO_ELEMENTO
                      AND MODELO.TIPO_ELEMENTO_ID          = TIPO.ID_TIPO_ELEMENTO
                      AND RELACION.ELEMENTO_ID_B           = ELEMENTO.ID_ELEMENTO
                      AND ELEMENTO_CONTENEDOR.ID_ELEMENTO  = RELACION.ELEMENTO_ID_A
                      AND TIPO.NOMBRE_TIPO_ELEMENTO        = :tipoCas";
            
            $rsm->addScalarResult(strtoupper('ID_ELEMENTO'),'idElemento','integer');
            $rsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'),'nombreElemento','string');
            $query->setParameter('elemento', $intIdElemento);
            $query->setParameter('estado', 'Activo');
            $query->setParameter('principal', 'PRINCIPAL');
            $query->setParameter('tipoCas', 'CASSETTE');
            $query->setParameter('tipoOdf', 'ODF');
            
            $query->setSQL($sql);
            
            $arrayResultado = $query->getArrayResult();
        } 
        catch (Exception $ex) 
        {
            error_log($ex->getMessage());
        }
        
        return $arrayResultado;
    }
    
    /**
     * Obtiene el json de los elementos contenidos por un elemento padre dado el tipo de los hijos
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 07-04-2016
     * 
     * @param integer $intIdElemento     
     * @param integer $tipoElemento    
     * @param integer $codEmpresa    
     * 
     * @return json 
     **/
    public function getJsonElementosPorContenedor($intElemento, $tipoElemento, $codEmpresa)
    {
        $arrayResultado = $this->getResultadoElementosPorContenedor($intElemento, $tipoElemento,$codEmpresa);
        
        $total = $arrayResultado['total'];
        
        if($total>0)
        { 
            $resultado = $arrayResultado['resultado'];
            
            if($resultado)
            {
                foreach($resultado as $data)
                {
                    $arrayEncontrados[] = array(
                                                "idElemento"           => $data['idElemento'],
                                                "nombreElemento"       => $data['nombreElemento']                                                                  
                    );
                }
                
                $arrayRespuesta = array('total'=> $total , 'encontrados' => $arrayEncontrados); 
            }
            else
            {
                $arrayRespuesta = array('total'=> 0 , 'encontrados' => '[]');                                                          
            }
        }
        else
        {
            $arrayRespuesta = array('total'=> 0 , 'encontrados' => '[]');  
        }
        
        $jsonData       = json_encode($arrayRespuesta);
        return $jsonData;
    }

    /**
     * Obtiene el array del resultado de los elementos contenidos por un elemento padre dado el tipo de los hijos
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 07-04-2016
     * 
     * @param integer $intIdElemento     
     * @param integer $tipoElemento    
     * @param integer $codEmpresa    
     * 
     * @return Array  $arrayResultado [ total , resultado ]
     **/
    public function getResultadoElementosPorContenedor($intElemento, $tipoElementoContenido,$codEmpresa)
    {
        $arrayResultado = array();
        
        try
        {
            $rsm   = new ResultSetMappingBuilder($this->_em);	      
            $query = $this->_em->createNativeQuery(null, $rsm);
            
            $strWhere = "";
            
            if($tipoElementoContenido && $tipoElementoContenido!="")
            {
                $strWhere .= " AND TIPO.NOMBRE_TIPO_ELEMENTO = :tipoContenido ";
                $query->setParameter('tipoContenido', $tipoElementoContenido);
            }
            
            $strSelectCont = "SELECT COUNT(*) CONT ";

            $strSelectData = "SELECT ELEMENTO_CONTENIDO.ID_ELEMENTO,
                                     ELEMENTO_CONTENIDO.NOMBRE_ELEMENTO ";
            $strSql = "
                      FROM 
                        INFO_ELEMENTO ELEMENTO,
                        INFO_ELEMENTO ELEMENTO_CONTENIDO,
                        INFO_RELACION_ELEMENTO RELACION,
                        ADMI_MODELO_ELEMENTO MODELO,
                        ADMI_TIPO_ELEMENTO TIPO,
                        INFO_EMPRESA_ELEMENTO EMPRESA
                      WHERE ELEMENTO.ID_ELEMENTO                = :elemento
                      AND ELEMENTO.ID_ELEMENTO                  = RELACION.ELEMENTO_ID_A
                      AND ELEMENTO_CONTENIDO.ID_ELEMENTO        = RELACION.ELEMENTO_ID_B
                      AND ELEMENTO_CONTENIDO.MODELO_ELEMENTO_ID = MODELO.ID_MODELO_ELEMENTO
                      AND ELEMENTO_CONTENIDO.ESTADO             = :estado
                      AND MODELO.TIPO_ELEMENTO_ID               = TIPO.ID_TIPO_ELEMENTO 
                      AND EMPRESA.EMPRESA_COD                   = :empresa
                      AND EMPRESA.ELEMENTO_ID                   = ELEMENTO_CONTENIDO.ID_ELEMENTO
                      $strWhere";

            $rsm->addScalarResult('ID_ELEMENTO','idElemento','integer');
            $rsm->addScalarResult('NOMBRE_ELEMENTO','nombreElemento','string');           
            $rsm->addScalarResult('CONT','cont','integer');

            $query->setParameter('elemento', $intElemento); 
            $query->setParameter('empresa', $codEmpresa); 
            $query->setParameter('estado', 'Activo');                                         
            
            $query->setSQL($strSelectCont.$strSql);	   

            $arrayResultado['total'] = $query->getSingleScalarResult();

            $query->setSQL($strSelectData.$strSql);                        

            $arrayResultado['resultado'] = $query->getArrayResult();
            
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        
        return $arrayResultado;
    }

    /**
      * generarJsonElementoNodo
      *
      * Método que devuelve todos los registros en formato json de los elementos de tipo NODO
      * 
      * @param $arrayParams
      * @param $start
      * @param $limit
      *                                                                             
      * @return json con resultado
      *
      * @author Allan Suárez <arsuarez@telconet.ec>
      * @version 1.0 24-02-2015
      *
      * @author Allan Suárez <arsuarez@telconet.ec>
      * @version 1.1 11-03-2016 - Mostrar nombre de solicitante en mayuscula la primera letra
      * 
      * @author Allan Suárez <arsuarez@telconet.ec>
      * @version 1.2 07-07-2016 - Se obtiene Valor de Contrato de NODO al realizarse la consulta general, este valor es tomado de la informacion de
      *                           Contrato en Caso de que existe uno Activo o Pendiente
      * 
      * @author Allan Suárez <arsuarez@telconet.ec>
      * @version 1.3 15-07-2016 - Se modifica respuesta para que devuelve siempre e valor del nodo tomado del campo caracteristica creado para
      *                            almacenar este valor
      * 
      * @author Allan Suárez <arsuarez@telconet.ec>
      * @version 1.4 01-08-2016 - Se modifica respuesta para que devuelve el valor si tiene renovacion de contrato o no
      *
      * @author Pablo Pin <ppin@telconet.ec>
      * @version 1.5 29-01-2020 - Se agrega al arreglo de respuesta el valor 'arrayMantenimientoNodo', para determinar si un nodo Radio ya posee
      *                           la caracteristica del periodo de mantenimiento.
      *
      * @author Germán Valenzuela <gvalenzuela@telconet.ec>
      * @version 1.6 11-06-2021 - Se agrega al arreglo el atributo 'solicitudCambioElemento' para identificar
      *                           si el nodo cuenta con al menos una solicitud de cambio de equipo.
      */       
    public function generarJsonElementoNodo($arrayParams,$start,$limit)
    {                
        $query          = $this->getElementoNodo($arrayParams, 'data');
        $queryTotal     = $this->getElementoNodo($arrayParams, 'count');

        $total = $queryTotal->getSingleResult();
        
        if($limit > 0)
        {
            $query->setSQL('SELECT a.*, rownum AS doctrine_rownum FROM (' . $query->getSQL() . ') a WHERE rownum <= :doctrine_limit');
            $query->setParameter('doctrine_limit', $limit + $start);

            if($start > 0)
            {
                $query->setSQL('SELECT * FROM (' . $query->getSQL() . ') WHERE doctrine_rownum >= :doctrine_start');
                $query->setParameter('doctrine_start', $start + 1);
            }
        }

        $resultado = $query->getArrayResult();
        
        
        if($resultado)
        {
            foreach($resultado as $data)
            {
                //Nombre de Solicitante
                $objPersona = $this->_em->getRepository('schemaBundle:InfoPersona')->findOneBy(array('login' => $data['usrCreacion']));

                //Determinar si la solicitud posee contrato - Se devuelve objeto en caso de existir
                $contratoActivo = $this->verificarElementoNodoTieneContrato($data['idSolicitud']);

                $solicitante = 'Migracion';

                if($objPersona)
                {
                    $solicitante = ucwords(strtolower(sprintf("%s",$objPersona)));
                }                                                           
                
                //Bandera que indica si una solicitud de NODO ya posee un Contrato Activo para gestionar las acciones de acuerdo al estado
                $flagTieneContrato = 0;
                
                if($contratoActivo)
                {
                    if($contratoActivo[0]->getEstado()=='Activo')
                    {
                        $flagTieneContrato = 1;
                    }
                }            
                
                $tieneRenovacion = 'N';
                
                if($data['estadoSolicitud'] != 'Finalizada')
                {
                    if($data['cantFinalizadas']>0)
                    {
                        $tieneRenovacion = 'S';
                    }
                }
                else //Si ya existe una solcitud Finalizado debe tener al menos 2 estados Finalizados en historial
                {
                    if($data['cantFinalizadas']>1)
                    {
                        $tieneRenovacion = 'S';
                    }
                }

                /*Validamos que el parametro que contiene el servicio haya llegado y sea un objeto.*/
                if(isset($arrayParams['serviceInfoElemento']) && is_object($arrayParams['serviceInfoElemento']))
                {
                    /*Asignamos el objeto del servicio a una variable.*/
                    $serviceInfoElemento = $arrayParams['serviceInfoElemento'];

                    /*Asignamos una variable que reciba la respuesta del método hasPeriodoMantenimiento (true/false) */
                    $arrayMantenimientoNodo = $serviceInfoElemento->validaMantenimientoNodo($data['idElemento']);

                }

                //Verificamos si el nodo cuenta con al menos una solicitud de cambio de equipo.
                $boolSolicitudCambioElemento = false;
                $arrayParametrosSolicitud    = array();
                $arrayParametrosSolicitud['intIdElementoNodo']  = $data['idElemento'];
                $arrayParametrosSolicitud['arrayTipoSolicitud'] = array('SOLICITUD CAMBIO EQUIPO');
                $arraySolicitudes = $this->obtenerSolicitudesElementoNodo($arrayParametrosSolicitud);
                if (!empty($arraySolicitudes) && count($arraySolicitudes) > 0)
                {
                    $boolSolicitudCambioElemento = true;
                }

                $arr_encontrados[] =array('idElemento'              =>  $data['idElemento'],
                                         'nombreElemento'           =>  $data['nombreElemento'],
                                         'numeroMedidor'            =>  $data['numeroMedidor'],
                                         'nombreTipoMedidor'        =>  $data['nombreTipoMedidor'],
                                         'nombreClaseMedidor'       =>  $data['nombreClaseMedidor'],
                                         'idMedidor'                =>  $data['idMedidor'],
                                         'idTipoMedidor'            =>  $data['idTipoMedidor'],
                                         'idClaseMedidor'           =>  $data['idClaseMedidor'],
                                         'nombreProvincia'          =>  $data['nombreProvincia'],
                                         'nombreCanton'             =>  $data['nombreCanton'],
                                         'direccion'                =>  $data['direccionUbicacion'],
                                         'idSolicitud'              =>  $data['idSolicitud'],
                                         'estadoSolicitud'          =>  $data['estadoSolicitud'],
                                         'feEjecucionSol'           =>  $data['feEjecucionSol'],
                                         'motivo'                   =>  $data['nombreMotivo'],
                                         'idProvincia'              =>  $data['idProvincia'],
                                         'observacion'              =>  $data['descripcion'],
                                         'latitud'                  =>  $data['latitudUbicacion'],
                                         'longitud'                 =>  $data['longitudUbicacion'],
                                         'estado'                   =>  $data['estado'],
                                         'clase'                    =>  "<b>".$data['clase']."</b>",
                                         'valor'                    =>  $data['valor'],
                                         'contratoActivo'           =>  $flagTieneContrato,
                                         'tipoMedio'                =>  str_replace("|","<br />",$data['tipoMedio']),
                                         'solicitante'              =>  $solicitante,
                                         'tieneRenovacion'          =>  $tieneRenovacion,
                                         'solicitudCambioElemento'  =>  $boolSolicitudCambioElemento,
                                         'arrayMantenimientoNodo'   =>  isset($arrayMantenimientoNodo) ? $arrayMantenimientoNodo : null
                                        );
            }            
            $data      = json_encode($arr_encontrados);
            $resultado = '{"total":"'.$total['total'].'","encontrados":'.$data.'}';

            return $resultado;
        }
        else
        {
            $resultado = '{"total":"0","encontrados":[]}';

            return $resultado;
        }
    }
    
    /**
     * 
     * Metodo que devuelve la Informacion basica de los Nodos por medio de WebService publicado para uso de Aplicativo de Networking
     * 
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.0 31-08-2016
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 04-04-2019 - Se agrega los parámetros strEsBoc y strTipo para validar y obtener toda la información de los nodos.
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.2 01-07-2019 - Se eliminó el campo de cobertura
     *
     * @param Array  $arrayParametros  [ empresa , estado ]
     * @return Array $arrayEncontrados [ idElemento , nombreElemento ]
     */
    public function getArrayElementoNodo($arrayParametros)
    {        
        try
        {                
            $query          = $this->getElementoNodo($arrayParametros, 'data');
            $queryCont      = $this->getElementoNodo($arrayParametros, 'count');

            $arrayResultado = $query->getArrayResult();   
            $arrayElemento  = array();
                       
            if(isset($arrayResultado))
            {
                foreach($arrayResultado as $data)
                {
                    if (strtoupper($arrayParametros['strEsBoc']) === 'SI' &&
                            strtoupper($arrayParametros['strTipo']) === 'NODO')
                    {
                        $arrayElemento[] = array('idNodo'             => $data['idElemento'],
                                                 'motivoSolicitud'    => $data['nombreMotivo'],
                                                 'estadoSolicitud'    => $data['estadoSolicitud'],
                                                 'nombreNodo'         => $data['nombreElemento'],
                                                 'numeroMedidor'      => $data['numeroMedidor'],
                                                 'esFactibleTorre'    => $data['torre'],
                                                 'claseMedidor'       => $data['nombreClaseMedidor'],
                                                 'tipoMedidor'        => $data['nombreTipoMedidor'],
                                                 'claseNodo'          => $data['clase'],
                                                 'tipoNodo'           => $data['tipoMedio'],
                                                 'tipoMedidor'        => $data['nombreTipoMedidor'],
                                                 'observacion'        => $data['observacion'],
                                                 'nombreRegion'       => $data['nombreRegion'],
                                                 'nombreProvincia'    => $data['nombreProvincia'],
                                                 'nombreCanton'       => $data['nombreCanton'],
                                                 'nombreParroquia'    => $data['nombreParroquia'],
                                                 'direccionUbicacion' => $data['direccionUbicacion'],
                                                 'longitudUbicacion'  => $data['longitudUbicacion'],
                                                 'latitudUbicacion'   => $data['latitudUbicacion'],
                                                 'alturaSnm'          => $data['alturaSnm'],
                                                 'accesoPermanente'   => $data['accesoPermanente'],
                                                 'descripcion'        => $data['descripcion'],
                                                 'estadoElemento'     => $data['estado']);
                    }
                    else
                    {
                        $arrayElemento[] = array('idElemento'     => $data['idElemento'],
                                                 'nombreElemento' => $data['nombreElemento']);
                    }
                }
            }                

            $arrayResponse['status']     = "OK";
            $arrayResponse['mensaje']    = "OK";
            $arrayResponse['resultado']  = array('total' => $queryCont->getSingleScalarResult() , 
                                                 'data'  => $arrayElemento
                                                 );        
        }
        catch(\Exception $e)
        {
            $arrayResponse['status']     = "ERROR";
            $arrayResponse['mensaje']    = "No se pudo traer la información de Nodos";
            $arrayResponse['resultado']  = array(); 
        }
        
        return $arrayResponse;
    }

    /**
     * Obtiene Scope de Olt para realizar la asignacion de Ip fijas 
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 27-03-2015
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.1 11-02-2021 Se agrega variable $strIp para la consulta
     * 
     * @param Array  $arrayParametros  [ intIdElemento , strIp ]
     * 
     * @return string $data
     * */
    public function getScopeOltIpFija($arrayParametros)
    {
        $strQueryObtenerPadre = "SELECT NOMBRE_SCOPE,
                                    TIPO_SCOPE,
                                    IP_SCOPE_INI,
                                    IP_SCOPE_FIN,
                                    ESTADO_RED,
                                    NOMBRE_POLICY
                                  FROM
                                    (SELECT ID_SUBRED,
                                      (SELECT EEE.DETALLE_VALOR
                                      FROM INFO_DETALLE_ELEMENTO EEE
                                      WHERE REF_DETALLE_ELEMENTO_ID=REFERENCIA_DETALLE_ELEMENTO_ID
                                      AND DETALLE_NOMBRE           = :tipoDetalleScopeParam
                                      ) AS NOMBRE_SCOPE,
                                      (SELECT RRR.DETALLE_VALOR
                                      FROM INFO_DETALLE_ELEMENTO RRR
                                      WHERE REF_DETALLE_ELEMENTO_ID=REFERENCIA_DETALLE_ELEMENTO_ID
                                      AND DETALLE_NOMBRE           = :tipoDetalleTipoSParam
                                      ) AS TIPO_SCOPE,
                                      IP_SCOPE_INI,
                                      IP_SCOPE_FIN,
                                      ESTADO_RED,
                                      (SELECT NOMBRE_POLICY FROM ADMI_POLICY WHERE ID_POLICY=POLICESCOPE
                                      ) AS NOMBRE_POLICY
                                    FROM
                                      (SELECT ISD.ID_SUBRED AS ID_SUBRED,
                                        ISD.ESTADO          AS ESTADO_RED,
                                        ISD.IP_INICIAL      AS IP_SCOPE_INI,
                                        ISD.IP_FINAL        AS IP_SCOPE_FIN,
                                        ISD.NOTIFICACION    AS POLICESCOPE,
                                        (SELECT WWW.ID_DETALLE_ELEMENTO
                                        FROM INFO_DETALLE_ELEMENTO WWW
                                        WHERE WWW.ELEMENTO_ID=IDE.ELEMENTO_ID
                                        AND WWW.DETALLE_VALOR= TO_CHAR(ISD.ID_SUBRED)
                                        ) AS REFERENCIA_DETALLE_ELEMENTO_ID
                                      FROM INFO_SUBRED ISD,
                                        INFO_DETALLE_ELEMENTO IDE
                                      WHERE IDE.ELEMENTO_ID   = :idElementoParam
                                      AND IDE.DETALLE_NOMBRE IN (:tipoDetalleTipoSubRParam)
                                      AND IDE.DETALLE_VALOR   = ISD.ID_SUBRED
                                      )
                                    )
                                  WHERE TIPO_SCOPE  = :tipoIpsScopeParam
                                  AND ESTADO_RED    = :estadoScopeParam
                                  AND NOMBRE_SCOPE IS NOT NULL";
        $stmt = $this->_em->getConnection()->prepare($strQueryObtenerPadre);
        $stmt->bindValue('idElementoParam', $arrayParametros['intIdElemento']);
        $stmt->bindValue('tipoDetalleScopeParam', 'SCOPE');
        $stmt->bindValue('tipoDetalleTipoSParam', 'TIPO SCOPE');
        $stmt->bindValue('tipoDetalleTipoSubRParam', 'SUBRED');
        $stmt->bindValue('tipoIpsScopeParam', $arrayParametros['strIp']);
        $stmt->bindValue('estadoScopeParam', 'Activo');
        $stmt->execute();
        $arraResult = $stmt->fetchAll();
        return $arraResult;
    }

    /**
     * getElementoNodo
     *
     * Método que devuelve todos los registros de los elementos de tipo NODO
     * 
     * @param $arrayParams
     * @param $start
     * @param $limit 
     * @param $tipo
     *                                                                             
     * @return array con resultado
     *
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.0 24-02-2015
     * 
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.1 15-07-2016 - Se agrega nuevo campo a al vista que indica si el nodo tiene o  no renovacion de contrato
     * 
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.2 09-12-2016 - Se valida que campos no vengan vacios
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.3 20-06-2019 - Se ingreso campo de identificación para la búsqueda
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.4 26-05-2021 - Se agrega validación para mostrar los nodos multiplataforma
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.5 20-07-2021 - Se modifica el query agregando en el addScalarResult el id del elemento como ID_VALOR
     *                           y el nombre del elemento como NOMBRE_VALOR, para poder adactarlo a la consulta de
     *                           auditoria de elementos.
     */
    public function getElementoNodo($arrayParams, $tipo)
    {
        $rsm = new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null, $rsm);

        switch($tipo)
        {
            case 'count':
                $sql = "SELECT COUNT(*) AS TOTAL ";
                $rsm->addScalarResult('TOTAL', 'total', 'integer');
                break;

            case 'data':
                $sql = "SELECT
                        VISTA.ID_ELEMENTO,
                        VISTA.NOMBRE_ELEMENTO,
                        VISTA.ID_ELEMENTO     AS ID_VALOR,
                        VISTA.NOMBRE_ELEMENTO AS NOMBRE_VALOR,
                        VISTA.NOMBRE_MODELO_ELEMENTO,
                        VISTA.ACCESO_PERMANENTE,
                        VISTA.OBSERVACION, VISTA.ESTADO_ELEMENTO,
                        VISTA.USR_CREACION, VISTA.FE_CREACION,
                        VISTA.CLASE, VISTA.TORRE, VISTA.TIPO_MEDIO,
                        VISTA.ESTADO_SOLICITUD, VISTA.DESCRIPCION,
                        VISTA.ID_MOTIVO, VISTA.NOMBRE_MOTIVO,
                        VISTA.ID_MEDIDOR, VISTA.NUMERO_MEDIDOR,
                        VISTA.ID_TIPO_MEDIDOR, VISTA.NOMBRE_TIPO_MEDIDOR,
                        VISTA.ID_CLASE_MEDIDOR, VISTA.NOMBRE_CLASE_MEDIDOR,
                        VISTA.NOMBRE_REGION, VISTA.NOMBRE_PROVINCIA,
                        VISTA.NOMBRE_CANTON, VISTA.NOMBRE_PARROQUIA,
                        VISTA.ID_PROVINCIA,
                        VISTA.DIRECCION_UBICACION,
                        VISTA.LONGITUD_UBICACION,
                        VISTA.LATITUD_UBICACION,
                        VISTA.ALTURA_SNM,
                        VISTA.ID_SOLICITUD,
                        VISTA.FE_EJECUCION,
                        VISTA.VALOR,
                        VISTA.CANT_FINALIZADAS,
                        VISTA.MEDIDOR_ELECTRICO,
                        CONTACTO.NODO_ID,
                        PERSONA.ID_PERSONA,
                        PERSONA.IDENTIFICACION_CLIENTE
                        ";
                
                $rsm->addScalarResult(strtoupper('ID_ELEMENTO')    , 'idElemento'    , 'integer');
                $rsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');
                $rsm->addScalarResult(strtoupper('ID_VALOR')       , 'idValor'       , 'integer');
                $rsm->addScalarResult(strtoupper('NOMBRE_VALOR')   , 'nombreValor'   , 'string');
                $rsm->addScalarResult(strtoupper('ACCESO_PERMANENTE'), 'accesoPermanente', 'string');
                $rsm->addScalarResult(strtoupper('OBSERVACION'), 'observacion', 'string');
                $rsm->addScalarResult(strtoupper('ESTADO_ELEMENTO'), 'estado', 'string');
                $rsm->addScalarResult(strtoupper('USR_CREACION'), 'usrCreacion', 'string');
                $rsm->addScalarResult(strtoupper('FE_CREACION'), 'feCreacion', 'string');
                $rsm->addScalarResult(strtoupper('CLASE'), 'clase', 'string');
                $rsm->addScalarResult(strtoupper('TORRE'), 'torre', 'string');
                $rsm->addScalarResult(strtoupper('TIPO_MEDIO'), 'tipoMedio', 'string');
                $rsm->addScalarResult(strtoupper('ESTADO_SOLICITUD'), 'estadoSolicitud', 'string');
                $rsm->addScalarResult(strtoupper('DESCRIPCION'), 'descripcion', 'string');
                $rsm->addScalarResult(strtoupper('NOMBRE_MOTIVO'), 'nombreMotivo', 'string');
                $rsm->addScalarResult(strtoupper('ID_MEDIDOR'), 'idMedidor', 'integer');
                $rsm->addScalarResult(strtoupper('NUMERO_MEDIDOR'), 'numeroMedidor', 'string');
                $rsm->addScalarResult(strtoupper('ID_TIPO_MEDIDOR'), 'idTipoMedidor', 'integer');
                $rsm->addScalarResult(strtoupper('NOMBRE_TIPO_MEDIDOR'), 'nombreTipoMedidor', 'string');
                $rsm->addScalarResult(strtoupper('ID_CLASE_MEDIDOR'), 'idClaseMedidor', 'integer');
                $rsm->addScalarResult(strtoupper('NOMBRE_CLASE_MEDIDOR'), 'nombreClaseMedidor', 'string');
                $rsm->addScalarResult(strtoupper('NOMBRE_REGION'), 'nombreRegion', 'string');
                $rsm->addScalarResult(strtoupper('NOMBRE_PARROQUIA'), 'nombreParroquia', 'string');
                $rsm->addScalarResult(strtoupper('NOMBRE_PROVINCIA'), 'nombreProvincia', 'string');
                $rsm->addScalarResult(strtoupper('NOMBRE_CANTON'), 'nombreCanton', 'string');
                $rsm->addScalarResult(strtoupper('ID_PROVINCIA'), 'idProvincia', 'integer');
                $rsm->addScalarResult(strtoupper('DIRECCION_UBICACION'), 'direccionUbicacion', 'string');
                $rsm->addScalarResult(strtoupper('LONGITUD_UBICACION'), 'longitudUbicacion', 'float');
                $rsm->addScalarResult(strtoupper('LATITUD_UBICACION'), 'latitudUbicacion', 'float');
                $rsm->addScalarResult(strtoupper('ALTURA_SNM'), 'alturaSnm', 'string');
                $rsm->addScalarResult(strtoupper('ID_SOLICITUD'), 'idSolicitud', 'integer');
                $rsm->addScalarResult(strtoupper('FE_EJECUCION'), 'feEjecucionSol', 'string');
                $rsm->addScalarResult(strtoupper('VALOR'), 'valor', 'float');
                $rsm->addScalarResult(strtoupper('CANT_FINALIZADAS'), 'cantFinalizadas', 'integer');
                $rsm->addScalarResult(strtoupper('MEDIDOR_ELECTRICO'), 'medidorElectrico', 'string');
                $rsm->addScalarResult(strtoupper('NODO_ID'), 'nodoId', 'integer');
                $rsm->addScalarResult(strtoupper('ID_PERSONA'), 'idPersona', 'integer');
                $rsm->addScalarResult(strtoupper('IDENTIFICACION_CLIENTE'), 'identificacionCliente', 'string');
                break;
        }

        $sql .= "FROM DB_INFRAESTRUCTURA.VISTA_INFO_NODOS VISTA, DB_INFRAESTRUCTURA.INFO_CONTACTO_NODO CONTACTO, DB_COMERCIAL.INFO_PERSONA PERSONA
                    WHERE CONTACTO.NODO_ID = VISTA.ID_ELEMENTO 
                    AND PERSONA.ID_PERSONA = CONTACTO.PERSONA_ID
                    AND VISTA.NOMBRE_MODELO_ELEMENTO = :modeloElemento";
        
        $query->setParameter('modeloElemento', 'GENERICO');
        
        if(isset($arrayParams['id']) && ($arrayParams['id'] && $arrayParams['id'] != ''))
        {
            $sql .= " and  VISTA.id_elemento   =  :elemento ";
            $query->setParameter('elemento', $arrayParams['id']);
        }
        
        if(isset($arrayParams['estado']) && $arrayParams['estado'] != '' && $arrayParams['estado'] != 'Todos')
        {
            $sql .= " and  VISTA.estado_elemento  =  :estado ";
            $query->setParameter('estado', $arrayParams['estado']);
        }

        if(isset($arrayParams['provincia']) && $arrayParams['provincia'] != '')
        {
            $sql .= " and  VISTA.id_provincia   =  :provincia ";
            $query->setParameter('provincia', $arrayParams['provincia']);
        }

        if(isset($arrayParams['canton']) && $arrayParams['canton'] != '')
        {
            $sql .= " and  VISTA.id_canton   =  :canton ";
            $query->setParameter('canton', $arrayParams['canton']);
        }

        if(isset($arrayParams['empresa']) && $arrayParams['empresa'] != '')
        {
            if(isset($arrayParams['esMultiplataforma']) && $arrayParams['esMultiplataforma'] == 'SI')
            {
                $sql .= " AND ( VISTA.empresa_cod = :empresa
                                OR EXISTS (
                                    SELECT 1 FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DET
                                    WHERE DET.ELEMENTO_ID = VISTA.ID_ELEMENTO
                                    AND DET.DETALLE_NOMBRE = :detalleNombre
                                    AND DET.DETALLE_VALOR = :detalleValor
                                    AND DET.ESTADO = :detalleEstado
                                )
                            )";
                $query->setParameter('empresa', $arrayParams['empresa']);
                $query->setParameter('detalleNombre', 'PERMITE_MULTIPLATAFORMA');
                $query->setParameter('detalleValor',  'SI');
                $query->setParameter('detalleEstado', 'Activo');
            }
            else
            {
                $sql .= " and  VISTA.empresa_cod  =  :empresa ";
                $query->setParameter('empresa', $arrayParams['empresa']);
            }
        }

        if(isset($arrayParams['nombre']) && $arrayParams['nombre'] != '')
        {
            $sql .= " and  upper(VISTA.nombre_elemento) like upper(:nombre) ";
            $query->setParameter('nombre', '%' . $arrayParams['nombre'] . '%');
        }

        if(isset($arrayParams['motivo']) && $arrayParams['motivo'] != '')
        {
            $sql .= " and  VISTA.id_motivo = :motivo ";
            $query->setParameter('motivo', $arrayParams['motivo']);
        }

        if(isset($arrayParams['estadoSol']) && $arrayParams['estadoSol'] != '' && $arrayParams['estadoSol'] != 'Todos')
        {
            $sql .= " and  upper(VISTA.estado_solicitud) like upper(:estadoSol) ";
            $query->setParameter('estadoSol', '%' . $arrayParams['estadoSol'] . '%');
        }

        if(isset($arrayParams['clase']) && $arrayParams['clase'] != '' && $arrayParams['clase'] != 'Todos')
        {
            $sql .= " and  upper(VISTA.clase) like upper(:clase) ";
            $query->setParameter('clase', $arrayParams['clase']);
        }
        
        if(isset($arrayParams['identificacion']) && $arrayParams['identificacion'] != '')
        {
            $sql .= " and  PERSONA.IDENTIFICACION_CLIENTE = :identificacion ";
            $query->setParameter('identificacion', $arrayParams['identificacion']);
        }
        
        $sql .= " order by VISTA.FE_CREACION DESC ";
        
        $query->setSQL($sql);

        return $query;
    }

    /**
     * getUbicacionElementoNodo
     *
     * Método que devuelve la informacion de la ubicacion por region, provincia, canton y parroquia del elemento NODO
     * 
     * @param $idElemento    
     *                                                                             
     * @return array con resultado
     *
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.0 04-03-2015
     */
    public function getUbicacionElementoNodo($idElemento)
    {
        $query = $this->_em->createQuery();
        $dql = "
                        SELECT 
                        elemento.id,                       
                        region.id as idRegion,
                        provincia.id as idProvincia,
                        canton.id as idCanton,
                        parroquia.id as idParroquia,
                        region.nombreRegion,
                        provincia.nombreProvincia,
                        canton.nombreCanton,
                        parroquia.nombreParroquia                        
                        FROM                                
                        schemaBundle:InfoEmpresaElementoUbica elementoUbicacion,
                        schemaBundle:InfoElemento elemento,
                        schemaBundle:InfoUbicacion ubicacion,
                        schemaBundle:AdmiParroquia parroquia,
                        schemaBundle:AdmiCanton canton,
                        schemaBundle:AdmiProvincia provincia,
                        schemaBundle:AdmiRegion region                       
                        WHERE               
                        elementoUbicacion.elementoId  =  elemento.id and                        
                        elementoUbicacion.ubicacionId =  ubicacion.id and
                        parroquia.id                  =  ubicacion.parroquiaId and
                        parroquia.cantonId            =  canton.id and
                        canton.provinciaId            =  provincia.id and
                        provincia.regionId            =  region.id and
                        elemento.id                   =  :elemento
                        ";

        $query->setParameter('elemento', $idElemento);

        $query->setDQL($dql);

        $datos = $query->getResult();

        return $datos;
    }

    /**
     * verificarElementoNodoTieneContrato
     *
     * Método que devuelve si la solicitud de nuevo Nodo existente posee un contrato en estado Pendiente y me determina dependiendo
     * de los parametros enviados si posee contrato fisico subido
     * 
     * @param $idSolicitud    
     *                                                                             
     * @return array con resultado
     *
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.0 23-03-2015
     * 
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.1 07-07-2016 - Funcion devuelve el objeto del Contrato si es que posee
     */
    public function verificarElementoNodoTieneContrato($idSolicitud)
    {
        $query = $this->_em->createQuery();

        $dql = "select 
                    contrato
                    FROM
                    schemaBundle:InfoDetalleSolCaract sol,
                    schemaBundle:InfoContrato contrato,
                    schemaBundle:AdmiCaracteristica caract
                    WHERE
                    sol.detalleSolicitudId   =   :solicitud and
                    sol.caracteristicaId       =   caract.id and
                    caract.descripcionCaracteristica = :descripcion and
                    sol.valor                =   contrato.id and
                    contrato.estado          IN  (:estado)";


        $query->setParameter('solicitud', $idSolicitud);
        $query->setParameter('descripcion', 'CONTRATO');
        $query->setParameter('estado', array('Activo','Pendiente'));

        $query->setDQL($dql);

        $datos = $query->getResult();

        return $datos;
    }

    /**
     * Obtiene Olt no operativo por Splitter, metodo utilizado en la  asignación de factibilidad automatica
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 05-11-2015
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1 15-06-2016  Se agrega validación adicional para controlar la factibilidad de un servicio dependiendo de la tecnologia 
     *                          en la cual deba ser aprovisionado
     * 
     * @author Ricardo Coello Quezada <rcoello@telconet.ec>
     * @version 1.2 19-01-2018 - Se agrega validacion para el producto "INTERNET SMALL BUSINESS". Se valida tecnologia de aprovisionamiento que no sea
     *                           Huawei o no tenga asociado el middleware para la factibilidad de servicios.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 16-05-2018 - Se elimina restricción de factibilidad con OLTs TELLION
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.4 16-05-2018 - Se agrega restricción para servicios ISB, no se debe dar factibilidad automática para tecnologías parametrizadas
     * @since 1.3
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.5 28-05-2018 - Se agrega validación para servicios MD 1 GBPS
     * @since 1.4
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.6 21-02-2022 - Se agregan validaciones de tecnología para traslados MD
     * @since 1.5
     *
     * @param Integer $intElementoSplitterId
     * @param String  $strTecnologiaFactibilidad
     * @param String  $strEsISB
     * @param Array   $arrayTecnologiasNoPermitidas
     * 
     * @return Integer $data
     * */
    public function validacionesFactibilidadMd( $arrayParametros )
    {
        $strEsISB                     = $arrayParametros["strEsISB"];
        $strPlanGbps                  = $arrayParametros["strPlanGbps"];
        $intElementoSplitterId        = $arrayParametros["intElementoConectorId"];
        $strTecnologiaFactibilidad    = $arrayParametros["strTecnologiaFactibilidad"];
        $arrayTecnologiasNoPermitidas = $arrayParametros["arrayTecnologiasNoPermitidas"];
        $strTipoOrdenServicio         = $arrayParametros["strTipoOrdenServicio"];
        $strObligaTecnologia          = $arrayParametros["strObligaTecnologia"];

        $rsm   = new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null, $rsm);
        $intElementoOltId = null;

        //Inicio - bloque de codigo para validar operatividad de OLT en el cual se aprovisionara factibilidad
        $sql = "SELECT INFO_INTERFACE_ELEMENTO.ELEMENTO_ID ID_ELEMENTO
                    FROM INFO_INTERFACE_ELEMENTO,
                      INFO_DETALLE_ELEMENTO
                    WHERE ID_INTERFACE_ELEMENTO           = GET_ELEMENTO_PADRE(:ID_ELEMENTO_INICIO,:TIPO,:ELEMENTO_FIN)
                    AND INFO_DETALLE_ELEMENTO.ELEMENTO_ID = INFO_INTERFACE_ELEMENTO.ELEMENTO_ID
                    AND DETALLE_DESCRIPCION               = :DETALLE_D
                    AND DETALLE_VALOR                     = :DETALLE_V";

        $rsm->addScalarResult('ID_ELEMENTO', 'idElemento', 'integer');
        $query->setParameter("ID_ELEMENTO_INICIO", (int) $intElementoSplitterId);
        $query->setParameter("TIPO", "ELEMENTO");
        $query->setParameter("ELEMENTO_FIN", "OLT");
        $query->setParameter("DETALLE_D", "OLT OPERATIVO");
        $query->setParameter("DETALLE_V", "NO");

        $query->setSQL($sql);
        try
        {
            $intElementoOltId = $query->getOneOrNullResult();
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
            $intElementoOltId = null;
        }
        //Fin - bloque de codigo para validar operatividad de OLT en el cual se aprovisionara factibilidad
        if ($intElementoOltId == null && $strTecnologiaFactibilidad != null && ($strTipoOrdenServicio !== "T" || $strObligaTecnologia === "SI"))
        {
            //Inicio - bloque de codigo para validar tecnologia de aprovisionamiento de factibilidad de servicios
            $sql = "SELECT INFO_INTERFACE_ELEMENTO.ELEMENTO_ID ID_ELEMENTO
                        FROM INFO_INTERFACE_ELEMENTO,
                             INFO_ELEMENTO,
                             ADMI_MODELO_ELEMENTO,
                             ADMI_MARCA_ELEMENTO
                        WHERE ID_INTERFACE_ELEMENTO                    = GET_ELEMENTO_PADRE(:ID_ELEMENTO_INICIO,:TIPO,:ELEMENTO_FIN)
                        AND INFO_ELEMENTO.ID_ELEMENTO                  = INFO_INTERFACE_ELEMENTO.ELEMENTO_ID
                        AND ADMI_MODELO_ELEMENTO.ID_MODELO_ELEMENTO    = INFO_ELEMENTO.MODELO_ELEMENTO_ID
                        AND ADMI_MODELO_ELEMENTO.MARCA_ELEMENTO_ID     = ADMI_MARCA_ELEMENTO.ID_MARCA_ELEMENTO
                        AND ADMI_MARCA_ELEMENTO.NOMBRE_MARCA_ELEMENTO != :MARCA_ELEMENTO";

            $rsm->addScalarResult('ID_ELEMENTO'       , 'idElemento', 'integer');
            $query->setParameter("ID_ELEMENTO_INICIO" , (int) $intElementoSplitterId);
            $query->setParameter("TIPO"               , "ELEMENTO");
            $query->setParameter("ELEMENTO_FIN"       , "OLT");
            $query->setParameter("MARCA_ELEMENTO"     , $strTecnologiaFactibilidad);
            
            $query->setSQL($sql);
            try
            {
                $intElementoOltId = $query->getOneOrNullResult();
            }
            catch(\Exception $e)
            {
                error_log($e->getMessage());
                $intElementoOltId = null;
            }
            
        }
        
        //Verifico si la tecnologia del OLT sea HUAWEI.
        if ($intElementoOltId == null && $strEsISB === 'SI')
        {
            //Inicio - bloque de codigo para validar que no tenga asociado el middleware para la factibilidad de servicios.
            
            $strSql = "SELECT INFO_INTERFACE_ELEMENTO.ELEMENTO_ID ID_ELEMENTO
                        FROM INFO_INTERFACE_ELEMENTO,
                             INFO_ELEMENTO,
                             ADMI_MODELO_ELEMENTO,
                             ADMI_MARCA_ELEMENTO 
                        WHERE ID_INTERFACE_ELEMENTO                    = GET_ELEMENTO_PADRE(:ID_ELEMENTO_INICIO,:TIPO,:ELEMENTO_FIN)
                        AND INFO_ELEMENTO.ID_ELEMENTO                  = INFO_INTERFACE_ELEMENTO.ELEMENTO_ID
                        AND ADMI_MODELO_ELEMENTO.ID_MODELO_ELEMENTO    = INFO_ELEMENTO.MODELO_ELEMENTO_ID
                        AND ADMI_MODELO_ELEMENTO.MARCA_ELEMENTO_ID     = ADMI_MARCA_ELEMENTO.ID_MARCA_ELEMENTO
                        AND ( NOT EXISTS (  SELECT *
                                            FROM INFO_DETALLE_ELEMENTO 
                                            WHERE   INFO_ELEMENTO.ID_ELEMENTO = INFO_DETALLE_ELEMENTO.ELEMENTO_ID 
                                            AND INFO_DETALLE_ELEMENTO.DETALLE_NOMBRE       = :DETALLE_NOMBRE
                                            AND INFO_DETALLE_ELEMENTO.ESTADO               = :ESTADO 
                                            AND INFO_DETALLE_ELEMENTO.DETALLE_VALOR        = :DETALLE_VALOR ) ";
            
            if (isset($arrayTecnologiasNoPermitidas) && count($arrayTecnologiasNoPermitidas)>0)
            {
                $strSql .= " OR (ADMI_MODELO_ELEMENTO.NOMBRE_MODELO_ELEMENTO IN (:TECNOLOGIAS_NO_PERMITIDAS))";
                $query->setParameter("TECNOLOGIAS_NO_PERMITIDAS" , $arrayTecnologiasNoPermitidas);
            }
            
            $strSql .= " )";

            $rsm->addScalarResult('ID_ELEMENTO'       , 'idElemento', 'integer');
            $query->setParameter("ID_ELEMENTO_INICIO" , (int) $intElementoSplitterId);
            $query->setParameter("TIPO"               , "ELEMENTO");
            $query->setParameter("ELEMENTO_FIN"       , "OLT");
            $query->setParameter("DETALLE_NOMBRE"     , "MIDDLEWARE");
            $query->setParameter("ESTADO"             , "Activo");
            $query->setParameter("DETALLE_VALOR"      , "SI");
            
            $query->setSQL($strSql);
            try
            {
                $intElementoOltId = $query->getOneOrNullResult();
            }
            catch(\Exception $e)
            {
                error_log('InfoElementoRespository - validacionesFactibilidadMd ' . $e->getMessage());
                $intElementoOltId = null;
            }
        }
        
        //Verifico si la tecnologia del OLT este dentro de las permitidas según los parámetros enviados
        if ($intElementoOltId == null &&
            $strPlanGbps == "SI" &&
            isset($arrayTecnologiasNoPermitidas) &&
            count($arrayTecnologiasNoPermitidas) > 0)
        {
            //Inicio - bloque de codigo para validar que no tenga asociado el middleware para la factibilidad de servicios.
            $strSql = "SELECT INFO_INTERFACE_ELEMENTO.ELEMENTO_ID ID_ELEMENTO
                        FROM INFO_INTERFACE_ELEMENTO,
                             INFO_ELEMENTO,
                             ADMI_MODELO_ELEMENTO,
                             ADMI_MARCA_ELEMENTO 
                        WHERE ID_INTERFACE_ELEMENTO                    = GET_ELEMENTO_PADRE(:ID_ELEMENTO_INICIO,:TIPO,:ELEMENTO_FIN)
                        AND INFO_ELEMENTO.ID_ELEMENTO                  = INFO_INTERFACE_ELEMENTO.ELEMENTO_ID
                        AND ADMI_MODELO_ELEMENTO.ID_MODELO_ELEMENTO    = INFO_ELEMENTO.MODELO_ELEMENTO_ID
                        AND ADMI_MODELO_ELEMENTO.MARCA_ELEMENTO_ID     = ADMI_MARCA_ELEMENTO.ID_MARCA_ELEMENTO
                        AND ADMI_MODELO_ELEMENTO.NOMBRE_MODELO_ELEMENTO IN (:TECNOLOGIAS_NO_PERMITIDAS) ";

            $rsm->addScalarResult('ID_ELEMENTO'       , 'idElemento', 'integer');
            $query->setParameter("ID_ELEMENTO_INICIO" , (int) $intElementoSplitterId);
            $query->setParameter("TIPO"               , "ELEMENTO");
            $query->setParameter("ELEMENTO_FIN"       , "OLT");
            $query->setParameter("TECNOLOGIAS_NO_PERMITIDAS" , $arrayTecnologiasNoPermitidas);
            $query->setSQL($strSql);
            try
            {
                $intElementoOltId = $query->getOneOrNullResult();
            }
            catch(\Exception $e)
            {
                error_log('InfoElementoRespository - validacionesFactibilidadMd ' . $e->getMessage());
                $intElementoOltId = null;
            }
        }

        return $intElementoOltId;
    }

    /**
     * reversarOltMigradoNuevosPlanes
     *
     * Método que realiza la reversa de la data de los clientes de un olt migrado a planes ultravelocidad                               
     *      
     * @param array $arrayParametros  [ 'intIdOlt', 'strMarcaOlt' ]
     * 
     * @return array $arrayResultados [ 'strMensajeRespuesta' ]
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 15-02-2016
     */
    public function reversarOltMigradoNuevosPlanes($arrayParametros)
    {
        $pv_mensajeerror = str_repeat(' ', 2000);
        $sql = "BEGIN INFRK_TRANSACCIONES.INFRP_REVERSA_MIGRACION_PLANES(:idOltParam, :marcaParam, :mensajeSalidaParam); END;";
        $stmt = $this->_em->getConnection()->prepare($sql);
        $stmt->bindParam('idOltParam', $arrayParametros['intIdOlt']);
        $stmt->bindParam('marcaParam', $arrayParametros['strMarcaOlt']);
        $stmt->bindParam('mensajeSalidaParam', $pv_mensajeerror);
        $stmt->execute();
        if(strlen(trim($pv_mensajeerror)) > 0)
        {
            $mensajeResponse = $pv_mensajeerror;
        }
        else
        {
            $mensajeResponse = 'OK';
        }
        return $mensajeResponse;
    }

    /**
     * Documentación para el método 'getElementosByParametros'.
     *
     * Método utilizado para obtener elementos por parametros
     *
     * @param array arrayParametros Parametros a buscar
     *
     * @return array arrayDetalles
     *
     * @author Kenneth Jimenez <kjimenez@telconet.ec>
     * @version 1.0 08-12-2015
     *
     * @author Modificado: Duval Medina C. <dmedina@telconet.ec>
     * @version 1.1 2016-05-18 Remover parámetro 'id_tipo_elemento' por estado null siempre 
     *                         ya que idTipoElemento no es campo de AdmiTipoElemento solo es id
     *                         y al setear el campo lo setea como 'tipoElemento'
     */
    public function getElementosByParametros($arrayParametros)
    {
        $resultado = array();

        if($arrayParametros['estado'] != '')
        {
            $query = $this->_em->createQuery(null);

            $dql = "SELECT 
                    a 
                    FROM schemaBundle:InfoElemento a,
                        schemaBundle:AdmiModeloElemento ame,
                        schemaBundle:AdmiTipoElemento ate,
                        schemaBundle:InfoEmpresaElemento iee 
                    where a.modeloElementoId = ame.id
                             AND iee.elementoId = a.id
                             AND ame.tipoElementoId = ate.id
                    and a.estado = :estado ";

            $query->setParameter('estado', $arrayParametros['estado']);

            if($arrayParametros['nombre'] != '')
            {
                $dql .= " and a.nombreElemento like :nombre ";
                $query->setParameter('nombre', '%' . strtolower($arrayParametros['nombre']) . '%');
            }

            if($arrayParametros['tipo_elemento'] != '')
            {
                $dql .= " and ate.nombreTipoElemento = :tipoElemento ";
                $query->setParameter('tipoElemento', $arrayParametros['tipo_elemento']);
            }

            if($arrayParametros['jurisdiccion'] != '')
            {
                $dql .= " and a.nombreJurisdiccion = :nombreJurisdiccion ";
                $query->setParameter('nombreJurisdiccion', strtoupper($arrayParametros['jurisdiccion']));
            }

            $query->setDQL($dql);

            $resultado = $query->getResult();
        }
        return $resultado;
    }
    
    /**
     * Obtiene el array del resultado de los elementos por parametros
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 29-05-2016
     * 
     * @param integer $arrayParametros['tipo_elemento']      
     * @param integer $arrayParametros['estado']    
     * @param integer $arrayParametros['switchVirtual']    
     * 
     * @return Array  $arrayResultado [ total , resultado ]
     **/
    public function getElementosPorParametros($arrayParametros)
    {
        $arrayResultado = array();
        
        if ($arrayParametros['tipo_elemento'] && $arrayParametros['estado'])
        {
        
            try
            {
                $rsm   = new ResultSetMappingBuilder($this->_em);	      
                $query = $this->_em->createNativeQuery(null, $rsm);


                $strSql = " SELECT E.ID_ELEMENTO,
                                   E.NOMBRE_ELEMENTO
                              FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO E,
                                   DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO ME,
                                   DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TE
                             WHERE E.MODELO_ELEMENTO_ID  = ME.ID_MODELO_ELEMENTO
                               AND ME.TIPO_ELEMENTO_ID     = TE.ID_TIPO_ELEMENTO
                               AND TE.NOMBRE_TIPO_ELEMENTO = :tipoElemento
                               AND E.ESTADO                = :estado";

                $rsm->addScalarResult('ID_ELEMENTO','idElemento','integer');
                $rsm->addScalarResult('NOMBRE_ELEMENTO','nombreElemento','string');

                if($arrayParametros['nombre'] != '')
                {
                    $dql .= " AND E.NOMBRE_ELEMENTO like :nombre ";
                    $query->setParameter('nombre', '%' . strtolower($arrayParametros['nombre']) . '%');
                }                
                
                if($arrayParametros['switchVirtual'] == 'NO')
                {
                    $strSql.= " AND NOT EXISTS (SELECT *
                                                FROM INFO_DETALLE_ELEMENTO DE
                                                WHERE DE.ELEMENTO_ID  = E.ID_ELEMENTO
                                                AND DE.ESTADO         = :estadoDetalle
                                                AND DE.DETALLE_VALOR  = :valor
                                                AND DE.DETALLE_NOMBRE = :detalle )";
                    
                    $query->setParameter('detalle', 'ES_SWITCH_VIRTUAL'); 
                    $query->setParameter('estadoDetalle', 'Activo'); 
                    $query->setParameter('valor', 'SI'); 
                }                

                $query->setParameter('tipoElemento', $arrayParametros['tipo_elemento']); 
                $query->setParameter('estado', $arrayParametros['estado']);

                $query->setSQL($strSql);	   

                $arrayResultado = $query->getResult();

            }
            catch(\Exception $e)
            {
                error_log($e->getMessage());
            }
        }
        
        return $arrayResultado;
    }  
    

    /**
     * getElementosByCriterios
     *
     * Método que retorna los activos de la empresa dependiendo de los criterios enviados por el usuario.                                    
     *      
     * @param array $arrayParametros  [ 'intStart', 'intLimit', 'intEmpresa', 'strEstado', 'arrayCriterios' ]
     * 
     * @return array $arrayResultados [ 'registros', 'total' ]
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 06-11-2015
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 16-12-2015 - Se agregan las búsquedas por motor y por chasis del transporte
     * 
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.2 26-01-2016 - Se modifica para traer los elementos relacionados entre sí, por medio de la tabla INFO_RELACION_ELEMENTO
     * 
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.3 04-02-2016 - Se modifica para que retorne los elementos dependiendo del nombre del switch asociado
     * 
     * @author Modificado: Lizbeth Cruz<mlcruz@telconet.ec>
     * @version 1.4 29-07-2016 - Se modifica la consulta en los detalles del elemento
     * 
     * @author Modificado: Lizbeth Cruz<mlcruz@telconet.ec>
     * @version 1.5 14-12-2016 - Se modifica la consulta para que se filtre por estados del elemento y que no necesariamente sólo obtenga
     *                           los elementos en estado 'Activo'
     *
     * @author Modificado: Wilmer Vera <wvera@telconet.ec>
     * @version 1.7 24-09-2020 - Se modifica para poder agregar un criterio mas de busqueda, en este caso el PUBLISHID identificador de tablets
     * usados a partir de la versión 10 del sistema operativo Android.
     * 
     * @author Modificado: Wilmer Vera <wvera@telconet.ec>
     * @version 1.7 02-10-2020 - Se modifica para poder agregar dos criterios más de busqueda, en la pantalla del index se agregan los filtros por
     * serieLogicaIndex y nombreIndex.
     */
    public function getElementosByCriterios($arrayParametros)
    {
        $arrayResultados                = array();
        $arrayResultados['registros']   = array();
        $arrayResultados['total']       = 0;
        
        try
        {
            $query = $this->_em->createQuery();
            $queryCount = $this->_em->createQuery();

            $strSelect = "SELECT ie ";
            $strSelectCount = "SELECT COUNT ( ie.id ) ";
            $strFrom = "FROM schemaBundle:InfoElemento ie,
                                    schemaBundle:AdmiModeloElemento ame,
                                    schemaBundle:AdmiTipoElemento ate,
                                    schemaBundle:InfoEmpresaElemento iee ";
            $strWhere = "WHERE ie.modeloElementoId = ame.id
                                 AND iee.elementoId = ie.id
                                 AND ame.tipoElementoId = ate.id 
                                 AND ame.estado = :estadoActivo
                                 AND ate.estado = :estadoActivo ";
            $strOrderBy = "ORDER BY ie.nombreElemento ";

            $query->setParameter('estadoActivo', trim($arrayParametros['strEstadoActivo']));
            $queryCount->setParameter('estadoActivo', trim($arrayParametros['strEstadoActivo']));

            if(isset($arrayParametros['arrayEstadosBusqueda']) && !empty($arrayParametros['arrayEstadosBusqueda']))
            {
                $strWhere .= "AND ie.estado IN (:arrayEstadosBusqueda) ";
                $query->setParameter('arrayEstadosBusqueda', array_values($arrayParametros['arrayEstadosBusqueda']));
                $queryCount->setParameter('arrayEstadosBusqueda', array_values($arrayParametros['arrayEstadosBusqueda']));
            }
            else
            {
                $strWhere .= "AND ie.estado = :estadoActivo ";
            }

            if(isset($arrayParametros['intEmpresa']))
            {
                if($arrayParametros['intEmpresa'])
                {
                    $strWhere .= 'AND iee.empresaCod = :empresa ';

                    $query->setParameter('empresa', trim($arrayParametros['intEmpresa']));

                    $queryCount->setParameter('empresa', trim($arrayParametros['intEmpresa']));
                }
            }


            if(isset($arrayParametros['criterios']))
            {
                if(isset($arrayParametros['criterios']['mostrarElementosAsignados']))
                {
                    if($arrayParametros['criterios']['mostrarElementosAsignados'] == 'N')
                    {
                        $strWhere .= 'AND ie.id NOT IN (
                                                            SELECT ide.elementoId
                                                            FROM schemaBundle:InfoDetalleElemento ide
                                                            WHERE ide.detalleNombre IN (:elementosAsociados)
                                                              AND ide.estado = :estadoActivo
                                                       ) ';

                        if($arrayParametros['strCategoriaElemento'] == 'tablet')
                        {
                            $arrayDetallesNoMostrados = $arrayParametros['arrayDetallesNoMostrados'];
                            $arrayValoresDetallesNoMostrados = $arrayDetallesNoMostrados[$arrayParametros['strCategoriaElemento']];

                            $query->setParameter('elementosAsociados', array_values($arrayValoresDetallesNoMostrados));

                            $queryCount->setParameter('elementosAsociados', array_values($arrayValoresDetallesNoMostrados));
                        }
                    }
                }
                if(isset($arrayParametros['criterios']['strPublishIndex']) && !empty($arrayParametros['criterios']['strPublishIndex']))
                {
                    $strWhere .= ' AND ie.serieLogica LIKE  :strPublishIndex ';

                    $query->setParameter('strPublishIndex', '%' . trim($arrayParametros['criterios']['strPublishIndex']) . '%');

                    $queryCount->setParameter('strPublishIndex', '%' . trim($arrayParametros['criterios']['strPublishIndex']) . '%');
                    
                }

                if(isset($arrayParametros['criterios']['nombreIndex']) && !empty($arrayParametros['criterios']['nombreIndex']))
                {
                    $strWhere .= ' AND ie.nombreElemento LIKE  :nombreIndex ';

                    $query->setParameter('nombreIndex', '%' . trim($arrayParametros['criterios']['nombreIndex']) . '%');

                    $queryCount->setParameter('nombreIndex', '%' . trim($arrayParametros['criterios']['nombreIndex']) . '%');
                    
                }

                if(isset($arrayParametros['criterios']['nombre']))
                {
                    if($arrayParametros['criterios']['nombre'])
                    {
                        if(isset($arrayParametros['criterios']['serieLogica']))
                        {
                            if($arrayParametros['criterios']['serieLogica'])
                            {
                                $strWhere .= 'AND (ie.nombreElemento = :nombre OR  ie.serieLogica = :serieLogica )';
                               
                                $query->setParameter('nombre',($arrayParametros['criterios']['nombre']) );
    
                                $queryCount->setParameter('nombre', ($arrayParametros['criterios']['nombre']) );
                                
                                $query->setParameter('serieLogica', trim($arrayParametros['criterios']['serieLogica']));

                                $queryCount->setParameter('serieLogica', trim($arrayParametros['criterios']['serieLogica']));
                            }
                        }
                        else
                        {
                            $strWhere .= 'AND ie.nombreElemento = :nombre ';

                            $query->setParameter('nombre', ($arrayParametros['criterios']['nombre']) );
    
                            $queryCount->setParameter('nombre', ($arrayParametros['criterios']['nombre']) );
                        }
                        
                    }
                }

                if(isset($arrayParametros['criterios']['detallesElemento']))
                {
                    $intDetalleElemento = 0;
                    foreach($arrayParametros['criterios']['detallesElemento'] as $keyDetalleElemento => $valDetalleElemento)
                    {
                        if($valDetalleElemento)
                        {
                            $strWhere .= 'AND ie.id IN 
                                          (
                                            SELECT ide' . $intDetalleElemento . '.elementoId
                                            FROM schemaBundle:InfoDetalleElemento ide' . $intDetalleElemento . '
                                            WHERE upper(ide'.$intDetalleElemento.'.detalleNombre) = :keyDetalleElemento'.$intDetalleElemento.' 
                                            AND upper(ide'.$intDetalleElemento.'.detalleValor) = :valDetalleElemento'.$intDetalleElemento.' 
                                            AND ide'.$intDetalleElemento . '.estado = :estadoActivo
                                           ) ';
                            $query->setParameter('keyDetalleElemento'.$intDetalleElemento, trim(strtoupper($keyDetalleElemento)));
                            $queryCount->setParameter('keyDetalleElemento'.$intDetalleElemento, trim(strtoupper($keyDetalleElemento)));
                            $query->setParameter('valDetalleElemento'.$intDetalleElemento, trim(strtoupper($valDetalleElemento)));
                            $queryCount->setParameter('valDetalleElemento'.$intDetalleElemento, trim(strtoupper($valDetalleElemento)));
                            $intDetalleElemento++;
                        }
                    }
                }

                if(isset($arrayParametros['criterios']['modeloElemento']))
                {
                    if($arrayParametros['criterios']['modeloElemento'])
                    {
                        $strWhere .= 'AND ame.id IN (:modeloElemento) ';

                        $query->setParameter('modeloElemento', array_values($arrayParametros['criterios']['modeloElemento']));

                        $queryCount->setParameter('modeloElemento', array_values($arrayParametros['criterios']['modeloElemento']));
                    }
                }

                if(isset($arrayParametros['criterios']['tipoElemento']))
                {
                    if($arrayParametros['criterios']['tipoElemento'])
                    {
                        $strWhere .= 'AND ate.nombreTipoElemento IN (:tipoElemento) ';

                        $query->setParameter('tipoElemento', array_values($arrayParametros['criterios']['tipoElemento']));

                        $queryCount->setParameter('tipoElemento', array_values($arrayParametros['criterios']['tipoElemento']));
                    }
                }

                if(isset($arrayParametros['criterios']['idElemento']))
                {
                    if($arrayParametros['criterios']['idElemento'])
                    {
                        $strWhere .= 'AND ie.id = :idElemento ';

                        $query->setParameter('idElemento', trim($arrayParametros['criterios']['nombre']));

                        $queryCount->setParameter('idElemento', trim($arrayParametros['criterios']['nombre']));
                    }
                }

                if(isset($arrayParametros['criterios']['noMostrarElemento']))
                {
                    if($arrayParametros['criterios']['noMostrarElemento'])
                    {
                        $strWhere .= 'AND ie.id NOT IN (:noMostrarElemento) ';

                        $query->setParameter('noMostrarElemento', array_values($arrayParametros['criterios']['noMostrarElemento']));

                        $queryCount->setParameter('noMostrarElemento', array_values($arrayParametros['criterios']['noMostrarElemento']));
                    }
                }

                if( isset($arrayParametros['criterios']['ipElemento']) )
                {
                    if($arrayParametros['criterios']['ipElemento'])
                    {
                        $strFrom  .= ", schemaBundle:InfoIp ii "; 
                        $strWhere .= "AND ii.elementoId = ie.id
                                      AND ii.estado = :estadoActivo 
                                      AND ii.ip LIKE :ipElemento ";

                        $query->setParameter('ipElemento', '%'.$arrayParametros['criterios']['ipElemento'].'%');

                        $queryCount->setParameter('ipElemento', '%'.$arrayParametros['criterios']['ipElemento'].'%');
                    }  
                }


                if( isset($arrayParametros['criterios']['feInstalacionBaterias']) )
                {
                    if($arrayParametros['criterios']['feInstalacionBaterias'])
                    {
                        $strFrom  .= ", schemaBundle:InfoRelacionElemento ire4 "; 
                        $strWhere .= "AND ire4.elementoIdA = ie.id
                                      AND ire4.elementoIdB IN (
                                                                SELECT ie10.id
                                                                FROM schemaBundle:InfoElemento ie10,
                                                                     schemaBundle:AdmiModeloElemento ame10,
                                                                     schemaBundle:AdmiTipoElemento ate10,
                                                                     schemaBundle:InfoEmpresaElemento iee10,
                                                                     schemaBundle:InfoDetalleElemento ide10
                                                                WHERE ie10.modeloElementoId = ame10.id
                                                                  AND iee10.elementoId = ie10.id
                                                                  AND ide10.elementoId = ie10.id
                                                                  AND ame10.tipoElementoId = ate10.id
                                                                  AND ie10.estado = :estadoActivo
                                                                  AND ame10.estado = :estadoActivo
                                                                  AND ate10.estado = :estadoActivo
                                                                  AND ide10.estado = :estadoActivo
                                                                  AND ide10.detalleNombre = :nombreDetalle
                                                                  AND ate10.nombreTipoElemento = :tipoElementoBaterias
                                                                  AND ide10.detalleValor = :feInstalacionBaterias
                                                              ) ";

                        $query->setParameter('nombreDetalle'        , 'FECHA_INSTALACION');
                        $query->setParameter('tipoElementoBaterias' , 'BATERIA');
                        $query->setParameter('feInstalacionBaterias', $arrayParametros['criterios']['feInstalacionBaterias']);

                        $queryCount->setParameter('nombreDetalle'        , 'FECHA_INSTALACION');
                        $queryCount->setParameter('tipoElementoBaterias' , 'BATERIA');
                        $queryCount->setParameter('feInstalacionBaterias', $arrayParametros['criterios']['feInstalacionBaterias']);
                    }  
                }


                if( isset($arrayParametros['criterios']['relacionElemento']) )
                {
                    if($arrayParametros['criterios']['relacionElemento'])
                    {
                        $strWhere .= 'AND ie.id IN (
                                                        SELECT ire2.elementoIdB
                                                        FROM schemaBundle:InfoRelacionElemento ie2,
                                                             schemaBundle:InfoRelacionElemento ire2
                                                        WHERE ie2.estado = :estadoActivo
                                                          AND ire2.estado = :estadoActivo
                                                          AND ire2.elementoIdA = :elementoRelacionado
                                                   ) ';

                        $query->setParameter('elementoRelacionado', $arrayParametros['criterios']['relacionElemento']);

                        $queryCount->setParameter('elementoRelacionado', $arrayParametros['criterios']['relacionElemento']);
                    }  
                }


                if( isset($arrayParametros['criterios']['nombreDispositivo']) )
                {
                    if($arrayParametros['criterios']['nombreDispositivo'])
                    {
                        $strWhere .= 'AND ie.id IN (
                                                        SELECT ie20.id
                                                        FROM schemaBundle:InfoEnlace ienl20  
                                                        JOIN ienl20.interfaceElementoFinId iie20
                                                        JOIN iie20.elementoId ie20
                                                        WHERE ienl20.id IN (
                                                                                SELECT ienl.id
                                                                                FROM schemaBundle:InfoEnlace ienl  
                                                                                JOIN ienl.interfaceElementoIniId iie
                                                                                JOIN iie.elementoId ie10
                                                                                WHERE iie.estado = :estadoConectado
                                                                                  AND ie10.estado = :estadoActivo
                                                                                  AND ie10.nombreElemento LIKE :nombreSwitch
                                                                                  AND ienl.estado = :estadoActivo
                                                                                  AND ienl.tipoMedioId = (
                                                                                                           SELECT atm.id
                                                                                                           FROM schemaBundle:AdmiTipoMedio atm
                                                                                                           WHERE atm.estado = :estadoActivo
                                                                                                           AND atm.nombreTipoMedio = :nombreTipoMedio
                                                                                                         )
                                                                           )
                                                    ) ';

                        $query->setParameter('nombreTipoMedio', 'ELECTRICO');
                        $query->setParameter('nombreSwitch',    '%'.trim($arrayParametros['criterios']['nombreDispositivo']).'%');
                        $query->setParameter('estadoConectado', 'connected');

                        $queryCount->setParameter('nombreTipoMedio', 'ELECTRICO');
                        $queryCount->setParameter('nombreSwitch',    '%'.trim($arrayParametros['criterios']['nombreDispositivo']).'%');
                        $queryCount->setParameter('estadoConectado', 'connected');
                    }  
                }
            }


            $strSql         = $strSelect . $strFrom . $strWhere . $strOrderBy;        
            $strSqlCount    = $strSelectCount . $strFrom . $strWhere;
            error_log("SQL : ".$strSql);
            $query->setDQL($strSql);
            $queryCount->setDQL($strSqlCount);


            if( isset($arrayParametros['intStart']) )
            {
                if($arrayParametros['intStart'])
                {
                    $query->setFirstResult($arrayParametros['intStart']);
                }
            }


            if( isset($arrayParametros['intLimit']) )
            {
                if($arrayParametros['intLimit'])
                {
                    $query->setMaxResults($arrayParametros['intLimit']);
                }
            }


            $arrayTmpDatos  = $query->getResult();
            $intTotal       = $queryCount->getSingleScalarResult();
            
            error_log("Resultados totales : ".$intTotal);
            $arrayResultados['registros']   = $arrayTmpDatos;
            $arrayResultados['total']       = $intTotal;
            
        }
        catch (\Exception $e)
        {
            error_log($e->getMessage());
        }

        return $arrayResultados;
    }
        
    
    /**
     * getJSONElementosByCriterios
     *
     * Método que retornará los elementos dependiendo de los criterios ingresados por el usuario en formato JSON                               
     *
     * @param array $arrayParametros  [ 'intStart', 'intLimit', 'intEmpresa', 'strEstado', 'arrayCriterios' ]
     * 
     * @return array $arrayResultados [ 'registros', 'total' ]
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 13-01-2016
     */
    public function getJSONElementosByCriterios( $arrayParametros )
    {
        $arrayEncontrados   = array();
        $arrayResultado     = $this->getElementosByCriterios($arrayParametros);
        $arrayInfoElementos = $arrayResultado['registros'];
        $intTotal           = $arrayResultado['total'];

        if( $arrayInfoElementos )
        {
            foreach( $arrayInfoElementos as $objInfoElemento )
            {
                $intIdElemento         = $objInfoElemento->getId();
                $strNombreTipoElemento = ucwords( strtolower( $objInfoElemento->getModeloElementoId()
                                                                              ->getTipoElementoId()->getNombreTipoElemento() ) );
                
                $arrayItem                      = array();
                $arrayItem['intIdElemento']     = $intIdElemento;
                $arrayItem['strSerieFisica']    = $objInfoElemento->getSerieFisica();
                $arrayItem['strNombreElemento'] = $objInfoElemento->getNombreElemento();
                $arrayItem['strModeloElemento'] = $objInfoElemento->getModeloElementoId()
                                                  ? $objInfoElemento->getModeloElementoId()->getNombreModeloElemento() : '';
                $arrayItem['strFechaCreacion']  = $objInfoElemento->getFeCreacion()->format('d M Y');
                $arrayItem['strTipoElemento']   = $strNombreTipoElemento;
                
                $arrayEncontrados[] = $arrayItem;
            }//foreach( $arrayInfoElementos as $objParametroDet )
        }//( $arrayInfoElementos )

        $arrayRespuesta = array('total' => $intTotal, 'encontrados' => $arrayEncontrados);
        $jsonData       = json_encode($arrayRespuesta);

        return $jsonData;
    }
     
    
    /**
     * getJsonOltsMigrando
     *
     * Método que retorna el json con la informacion de procesamiento de un olt con cambio de plan                              
     *      
     * @param string $strNombreOlt 
     * 
     * @return json
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 11-02-2016
     *     
     */
    public function getJsonOltsMigrando($strNombreOlt, $strPrefijoEmpresa)
    {
        $arrayResultado = $this->getResultadoOltsMigrando($strNombreOlt, $strPrefijoEmpresa);

        $total = $arrayResultado['total'];

        if($total > 0)
        {
            $resultado = $arrayResultado['resultado'];

            if($resultado)
            {
                foreach($resultado as $data)
                {
                    $arrayEncontrados[] = array(
                        "idElemento" => $data['idElemento'],
                        "nombreOlt" => $data['nombreOlt'],
                        "totalClientes" => $data['totalClientes'],
                        "totalAProcesar" => $data['totalAProcesar'],
                        "totalNoConfigurados" => $data['totalNoConfigurados'] != 0 ?
                            '<div class="gridText">' . $data['totalNoConfigurados'] . '</div>' : 0,
                        "estadoMigracion" => $data['estadoMigracion'],
                        "fechaInicio" => $data['fechaInicio'],
                        "fechaFin" => $data['fechaFin']
                    );
                }

                $arrayRespuesta = array('total' => $total, 'encontrados' => $arrayEncontrados);
            }
            else
            {
                $arrayRespuesta = array('total' => 0, 'encontrados' => '[]');
            }
        }
        else
        {
            $arrayRespuesta = array('total'=> 0 , 'encontrados' => '[]');  
        }
        
        $jsonData       = json_encode($arrayRespuesta);
        return $jsonData; 
    }    
    
    /**
     * getJsonFactibilidadPorNodoWifi
     * genera el json de la data de la funcion getFactibilidadPorNodoWifi
     * 
     * @param string $idElemento
     * 
     * @return string $data
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 05-05-2016
     */
    public function getJsonFactibilidadPorNodoWifi($idElemento, $idServicio)
    {
        $arrayElementos = $this->getFactibilidadPorNodoWifi($idElemento, $idServicio);

        if($arrayElementos['status'] == 'OK')
        {
            $arrayResult = split(',', $arrayElementos['mensaje']);
            $elementosArray = array();
            for($i = 0; $i <= count($arrayResult); $i++)
            {
                $objElemento = $this->_em->getRepository('schemaBundle:InfoElemento')->findOneById($arrayResult[$i]);
                if($objElemento)
                {
                    $elementosArray[] = array(
                        'idElementoFactible' => $objElemento->getId(),
                        'nombreElementoFactible' => $objElemento->getNombreElemento());
                }
            }
            $resultadoArray['mensaje'] = 'OK';
            $resultadoArray['registros'] = $elementosArray;
            $resultadoArray['total'] = count($elementosArray);

            $data = '{"mensaje":"OK","total":"' . count($elementosArray) . '","encontrados":' . json_encode($elementosArray) . '}';
        }
        else
        {
            $data = '{"mensaje":"' . $arrayElementos['mensaje'] . '","total":"0","encontrados":[]}';
        }

        return $data;
    }

    /**
     * getFactibilidadPorNodoWifi
     * funcion que verifica si un elemento tiene disponibilidad de ancho de banda para un nuevo cliente, si es así nos devuelve los elementos que
     * tienen puertos libres y nos devuelve un array
     * 
     * @param String $idElemento
     * 
     * @return string $resultado
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 05-05-2016
     */
    public function getFactibilidadPorNodoWifi($idElemento, $idServicio)
    {
        if($idElemento)
        {
            {
                $strError   = null;
                $strError   = str_pad($strError, 3000, " ");
                $strResult  = null;
                $strResult  = str_pad($strResult, 3000, " ");

                $sql = "BEGIN
                                INFRK_TRANSACCIONES.INFRP_GET_FACTIBILIDAD_WIFI(:idElemento,
                                                                                :idServicio,
                                                                                :resultado,
                                                                                :mensajeError);
                        END; ";
                $stmt = $this->_em->getConnection()->prepare($sql);
                $stmt->bindParam('idElemento', $idElemento);
                $stmt->bindParam('idServicio', $idServicio);
                $stmt->bindParam('resultado', $strResult);
                $stmt->bindParam('mensajeError', $strError);
                $stmt->execute();

                if(!$strError)
                {
                    $resultado = $strResult;
                    $resultadoArray['status'] = 'OK';
                    $resultadoArray['mensaje'] = $strResult;
                }
                else
                {
                    $resultadoArray['status'] = 'ERROR';
                    $resultadoArray['mensaje'] = $strError;
                }
            }
        }
        else
        {
            $resultadoArray['status'] = 'ERROR';
            $resultadoArray['mensaje'] = 'Faltan datos para ejecutar el proceso';
        }

        return $resultadoArray;
    }

    /*getJsonRegistrosRouterClientes
     * genera el json de la data de la funcion getRegistrosFactibilidadNodoCliente que obtiene los elementos
     *
     * @param array $arrayParametros [$start, $limit, $idSolicitud, $codEmpresa, $nombreNodo, $idCanton, $userCrea, $estado, $estadoElemento,
     * $modeloElemento, $fechaDesde, $fechaHasta ]
     * 
     * @return json $data[total, encontrados]
     * 
     * @author John Vera
     * @version 1.0 05-05-2016
     */

    public function getJsonRegistrosRouterClientes($arrayParametros)
    {

        $respuestaSolicitudes = $this->getRegistrosRouterClientes($arrayParametros);

        if($respuestaSolicitudes)
        {
            $data = '{"total":"' . $respuestaSolicitudes['total'] . '","encontrados":' . json_encode($respuestaSolicitudes['registros']) . '}';
        }
        else
        {
            $data = '{"total":"0","encontrados":[]}';
        }
        return $data;
    }
    
    
        
    /**
     * getRegistrosRouterClientes
     * obtiene los elementos y devuelve un array
     *
     * @param array $arrayParametros [$start, $limit, $idSolicitud, $codEmpresa, $nombreNodo, $idCanton, $userCrea, $estado, $estadoElemento,
     * $modeloElemento, $fechaDesde, $fechaHasta ]
     * 
     * @return array $resultadoArray[registros, total]
     * 
     * @author John Vera
     * @version 1.0 05-05-2016
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 19-10-2016 Agregar el tipo elemento CPE
     */
    public function getRegistrosRouterClientes($arrayParametros)
    {
        $rsm            = new ResultSetMappingBuilder($this->_em);
        $query          = $this->_em->createNativeQuery(null, $rsm);
        $start          = $arrayParametros['start'];
        $limit          = $arrayParametros['limit'];
        $codEmpresa     = $arrayParametros["codEmpresa"];
        $nombreNodo     = $arrayParametros["nombreNodo"];
        $idCanton       = $arrayParametros["idCanton"];
        $userCrea       = $arrayParametros["userCrea"];
        $estado         = $arrayParametros["estado"];
        $estadoElemento = $arrayParametros["estadoElemento"];
        $modeloElemento = $arrayParametros["idModeloElemento"];
        $fechaDesde     = $arrayParametros["search_fechaDesde"];
        $fechaHasta     = $arrayParametros["search_fechaHasta"];

        $sql = "SELECT
                E.ID_ELEMENTO,
                E.NOMBRE_ELEMENTO,
                U.DIRECCION_UBICACION,
                U.LATITUD_UBICACION,
                U.LONGITUD_UBICACION,
                C.NOMBRE_CANTON,
                C.ID_CANTON,
                E.FE_CREACION,
                (SELECT DS.ESTADO FROM INFO_DETALLE_SOLICITUD DS WHERE DS.ELEMENTO_ID = E.ID_ELEMENTO) ESTADO,
                ME.NOMBRE_MODELO_ELEMENTO,
                E.ESTADO ESTADO_ELEMENTO,
                ( SELECT J.NOMBRE_JURISDICCION
                FROM ADMI_CANTON_JURISDICCION CJ,
                INFO_OFICINA_GRUPO OG,
                ADMI_JURISDICCION J
                WHERE CJ.CANTON_ID = C.ID_CANTON
                AND J.ID_JURISDICCION = CJ.JURISDICCION_ID
                AND J.OFICINA_ID = OG.ID_OFICINA
                AND OG.EMPRESA_ID = :codEmpresa
                AND ROWNUM < 2) JURISDICCION
                FROM INFO_ELEMENTO E,
                INFO_EMPRESA_ELEMENTO_UBICA EE,
                INFO_UBICACION U,
                ADMI_PARROQUIA P,
                ADMI_CANTON C,
                ADMI_MODELO_ELEMENTO ME,
                ADMI_TIPO_ELEMENTO TE,
                INFO_DETALLE_ELEMENTO DE
                WHERE ME.TIPO_ELEMENTO_ID = TE.ID_TIPO_ELEMENTO 
                AND ME.ID_MODELO_ELEMENTO = E.MODELO_ELEMENTO_ID
                AND DE.ELEMENTO_ID = E.ID_ELEMENTO
                AND E.ID_ELEMENTO = EE.ELEMENTO_ID
                AND EE.UBICACION_ID = U.ID_UBICACION
                AND P.ID_PARROQUIA = U.PARROQUIA_ID
                AND C.ID_CANTON = P.CANTON_ID
                AND DE.DETALLE_NOMBRE = :detalleNombre
                AND DE.DETALLE_VALOR  = :detalleValor
                AND DE.ESTADO = :estadoDetalle
                AND EE.EMPRESA_COD = :codEmpresa
                AND TE.NOMBRE_TIPO_ELEMENTO IN (:tipoElemento) ";

        $query->setParameter("codEmpresa", $codEmpresa);
        $query->setParameter("tipoElemento", array('ROUTER','CPE'));
        $query->setParameter("estadoDetalle", 'Activo');
        $query->setParameter("detalleNombre", 'TIPO ELEMENTO RED');
        $query->setParameter("detalleValor", 'WIFI');

        if($modeloElemento)
        {
            $sql.= " AND E.MODELO_ELEMENTO_ID = :modeloElemento  ";
            $query->setParameter("modeloElemento", $modeloElemento);
        }

        if($estado)
        {
            $sql.= " AND E.ESTADO = :estado ";
            $query->setParameter("estado", $estado);
        }
        if($estadoElemento)
        {
            $sql.= " AND E.ESTADO = :estadoElemento ";
            $query->setParameter("estadoElemento", $estadoElemento);
        }
        if($idCanton)
        {
            $sql.= " AND C.ID_CANTON = :idCanton ";
            $query->setParameter("idCanton", $idCanton);
        }
        if($fechaDesde)
        {
            $sql.= " AND E.FE_CREACION >= :fechaDesde ";
            $query->setParameter("fechaDesde", $fechaDesde);
        }
        if($fechaHasta)
        {
            $sql.= " AND E.FE_CREACION <= :fechaHasta ";
            $query->setParameter("fechaHasta", $fechaHasta);
        }
        if($nombreNodo)
        {
            $sql.= " AND UPPER(E.NOMBRE_ELEMENTO) LIKE :nombreNodo ";
            $query->setParameter("nombreNodo", strtoupper('%' . $nombreNodo . '%'));
        }
        if($userCrea)
        {
            $sql.= " AND UPPER(E.USR_CREACION) LIKE :userCrea ";
            $query->setParameter("userCrea", strtoupper('%' . $userCrea . '%'));
        }

        $sql.= " ORDER BY E.FE_CREACION DESC ";
        $rsm->addScalarResult(strtoupper('ID_ELEMENTO'), 'idElemento', 'integer');
        $rsm->addScalarResult(strtoupper('NOMBRE_MODELO_ELEMENTO'), 'modeloElemento', 'string');
        $rsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');
        $rsm->addScalarResult(strtoupper('DIRECCION_UBICACION'), 'direccion', 'string');
        $rsm->addScalarResult(strtoupper('LATITUD_UBICACION'), 'latitud', 'string');
        $rsm->addScalarResult(strtoupper('LONGITUD_UBICACION'), 'longitud', 'string');
        $rsm->addScalarResult(strtoupper('FE_CREACION'), 'feCreacion', 'string');
        $rsm->addScalarResult(strtoupper('NOMBRE_CANTON'), 'canton', 'string');
        $rsm->addScalarResult(strtoupper('ID_CANTON'), 'idCanton', 'string');
        $rsm->addScalarResult(strtoupper('JURISDICCION'), 'jurisdiccion', 'string');
        $rsm->addScalarResult(strtoupper('USR_CREACION'), 'usrCreacion', 'string');
        $rsm->addScalarResult(strtoupper('ESTADO'), 'estado', 'string');
        $rsm->addScalarResult(strtoupper('ESTADO_ELEMENTO'), 'estadoElemento', 'string');
        $rsm->addScalarResult(strtoupper('IP'), 'ip', 'string');

        $query->setSQL($sql);

        $solicitudes = $query->getResult();
        $totalSolicitudes = count($solicitudes);

        $encontrados = array_slice($solicitudes, $start, $limit);

        $solicitudesArray = array();
        if($encontrados)
        {
            foreach($encontrados as $registro)
            {
                $solicitudesArray[] = array(
                    'idElemento'        => $registro['idElemento'],
                    'nombreElemento'    => $registro['nombreElemento'],
                    'direccion'         => $registro['direccion'],
                    'latitud'           => $registro['latitud'],
                    'longitud'          => $registro['longitud'],
                    'feCreacion'        => $registro['feCreacion'],
                    'canton'            => $registro['canton'],
                    'idCanton'          => $registro['idCanton'],
                    'jurisdiccion'      => $registro['jurisdiccion'],
                    'ip'                => $registro['ip'],
                    'estadoElemento'    => $registro['estadoElemento'],
                    'modeloElemento'    => $registro['modeloElemento'],
                    'usrCreacion'       => $registro['usrCreacion']);
            }
        }

        $resultadoArray['registros'] = $solicitudesArray;
        $resultadoArray['total'] = $totalSolicitudes;
        return $resultadoArray;
    }

    /*getJsonRegistrosSubredes
     * genera el json de la data  que obtiene los elementos para la subred
     *
     * 
     * @return json $data[total, encontrados]
     * 
     * @author Jonathan Montecé
     * @version 1.0 13-09-2021
     */
    
    public function getJsonRegistrosSubredes($arrayParametros)
    {

        $arrayRespSol = $this->getRegistrosSubredes($arrayParametros);

        if($arrayRespSol)
        {
            $arrayData = '{"total":"' . $arrayRespSol['total'] . '","encontrados":' . json_encode($arrayRespSol['registros']) . '}';
        }
        else
        {
            $arrayData = '{"total":"0","encontrados":[]}';
        }
        return $arrayData;
    }

    /**
     * getRegistrosSubredes
     * obtiene los elementos y devuelve un array para la funcion getJsonRegistrosSubredes
     * 
     * @author Jonathan Montecé
     * @version 1.0 13-09-2021
     * 
     */
    public function getRegistrosSubredes($arrayParametros)
    {
        $objRsm            = new ResultSetMappingBuilder($this->_em);
        $strQuery          = $this->_em->createNativeQuery(null, $objRsm);
        $strStart          = $arrayParametros['start'];
        $strLlimit         = $arrayParametros['limit'];
        $strCodEmpresa     = $arrayParametros["codEmpresa"];
       
                
        $strNombrePe        =  $arrayParametros["strNombrePe"];
        $strUso             =  $arrayParametros["strUso"];
        $strTipo            = $arrayParametros["strTipo"];
        $strFechaDesde      =  $arrayParametros["strFechaDesde"];
        $strFechaHasta      = $arrayParametros["strFechaHasta"];
        $strEstadoSubred    = $arrayParametros["strEstadoSubred"];
        $strSubred          = $arrayParametros["strSubred"];
        $strLike            = $arrayParametros["strLike"];
        $strLikeRo          = $arrayParametros["strLikeRo"];
        $strTipoElemento    = $arrayParametros["strTipoElemento"];


       
        $strSql = "SELECT 
        S.ID_SUBRED,
        S.SUBRED,
        S.FE_CREACION,
        S.USR_CREACION,
        S.USO,
        S.TIPO, 
        S.ESTADO,
        S.ELEMENTO_ID,
        IE.NOMBRE_ELEMENTO,
        IE.MODELO_ELEMENTO_ID,
        ADM.TIPO_ELEMENTO_ID,
        ATE.NOMBRE_TIPO_ELEMENTO
        FROM INFO_SUBRED S 
        INNER JOIN INFO_ELEMENTO IE ON S.ELEMENTO_ID = IE.ID_ELEMENTO
        INNER JOIN ADMI_MODELO_ELEMENTO ADM ON IE.MODELO_ELEMENTO_ID = ADM.ID_MODELO_ELEMENTO
        INNER JOIN ADMI_TIPO_ELEMENTO ATE ON ADM.TIPO_ELEMENTO_ID = ATE.ID_TIPO_ELEMENTO
        WHERE ATE.NOMBRE_TIPO_ELEMENTO = :strTipoElemento ";

       //Parametros para posible búsqueda única mediante un LIKE pe o LIKE ro
        $strQuery->setParameter("strLike", $strLike);
        $strQuery->setParameter("strLikeRo", $strLikeRo);
        //Parametro para una búsqueda solamente por ROUTER
        $strQuery->setParameter("strTipoElemento", $strTipoElemento);

        //fecha desde y hasta para la busqueda
        $strQuery->setParameter("strFechaDesdeAsignacion", $strFechaDesde);
        $strQuery->setParameter("strFechaHastaAsignacion", $strFechaHasta);



    
        if(isset($strNombrePe) && !empty($strNombrePe))
        {
            $strSql.= " AND IE.NOMBRE_ELEMENTO LIKE :nombrePe ";
            $strQuery->setParameter("nombrePe",'%' . $strNombrePe . '%' );
        }

        if(isset($strTipo) && !empty($strTipo))
        {
            $strSql.= " AND S.TIPO = :tipo ";
            $strQuery->setParameter("tipo", $strTipo);
        }
        if(isset($strUso) && !empty($strUso))
        {
            $strSql.= " AND S.USO = :uso ";
            $strQuery->setParameter("uso", $strUso);
        }
        if(isset($strEstadoSubred) && !empty($strEstadoSubred))
        {
            $strSql.= " AND S.ESTADO = :estado ";
            $strQuery->setParameter("estado", $strEstadoSubred);
        }
        if(isset($strSubred) && !empty($strSubred))
        {
            $strSql.= " AND S.SUBRED LIKE :subRed ";
            $strQuery->setParameter("subRed", '%' . $strSubred . '%');
        }
        
    
        if(isset($strFechaDesde) && !empty($strFechaDesde))
        {
            $arrayFechaDesde = explode("-", $strFechaDesde);
            $strDateFeDesde = date("Y/m/d", strtotime($arrayFechaDesde[0] . "-" . $arrayFechaDesde[1] . "-" . $arrayFechaDesde[2]));

            $strSql.= " AND  S.FE_CREACION >= :fechaDesde ";
            $strQuery->setParameter('fechaDesde',  trim($strDateFeDesde) );

        }
        if(isset($strFechaHasta) && !empty($strFechaHasta))
        {
            $arrayFechaHasta = explode("-", $strFechaHasta);
            $strDateFeHasta = strtotime ( '+1 day' , strtotime ($arrayFechaHasta[0] . "-" . $arrayFechaHasta[1] . "-" . $arrayFechaHasta[2]));
            $strDateFeHasta = date ( "Y/m/d" , $strDateFeHasta );
            
            $strSql.= " AND S.FE_CREACION <= :fechaHasta  ";
            $strQuery->setParameter("fechaHasta", trim($strDateFeHasta));
        }
       
       

        $strSql.= " ORDER BY S.FE_CREACION ASC ";
        $objRsm->addScalarResult(strtoupper('ID_SUBRED'), 'idSubred', 'integer');  
        $objRsm->addScalarResult(strtoupper('SUBRED'), 'subRed', 'string');
        $objRsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombrePe', 'string');
        $objRsm->addScalarResult(strtoupper('USO'), 'uso', 'string');
        $objRsm->addScalarResult(strtoupper('TIPO'), 'tipo', 'string');
        $objRsm->addScalarResult(strtoupper('FE_CREACION'), 'feCreacion', 'string');   
        $objRsm->addScalarResult(strtoupper('ESTADO'), 'estadoElemento', 'string');

        $strQuery->setSQL($strSql);

        $objSolicitudes = $strQuery->getResult();
        $arrayTotalSolicitudes = count($objSolicitudes);

        $arrayEncontrados = array_slice($objSolicitudes, $strStart, $strLlimit);

        $arraySolicitudes = array();
       

        if($arrayEncontrados)
        {
            foreach($arrayEncontrados as $arrayRegistro)
            {
                $arraySolicitudes[] = array(
                    'idSubred'          => $arrayRegistro['idSubred'],
                    'subRed'            => $arrayRegistro['subRed'],
                    'nombrePe'          => $arrayRegistro['nombrePe'],
                    'uso'               => $arrayRegistro['uso'],
                    'tipo'              => $arrayRegistro['tipo'],
                    'feCreacion'        => $arrayRegistro['feCreacion'],                   
                    'estadoElemento'    => $arrayRegistro['estadoElemento'],                   
                    'usrCreacion'       => $arrayRegistro['usrCreacion']);
            }
        }

        $arrayResultado['registros'] = $arraySolicitudes;
        $arrayResultado['total'] = $arrayTotalSolicitudes;
        return $arrayResultado;
    }
    
    /*getJsonRegistrosNodoWifi
     * genera el json de la data de la funcion getRegistrosFactibilidadNodoCliente que obtiene los elementos
     *
     * @param array $arrayParametros [$start, $limit, $idSolicitud, $codEmpresa, $nombreNodo, $idCanton, $userCrea, $estado, $estadoElemento,
     * $modeloElemento, $fechaDesde, $fechaHasta ]
     * 
     * @return json $data[total, encontrados]
     * 
     * @author John Vera
     * @version 1.0 05-05-2016
     */

    public function getJsonRegistrosNodoWifi($arrayParametros)
    {

        $respuestaSolicitudes = $this->getRegistrosNodoWifi($arrayParametros);

        if($respuestaSolicitudes)
        {
            $data = '{"total":"' . $respuestaSolicitudes['total'] . '","encontrados":' . json_encode($respuestaSolicitudes['registros']) . '}';
        }
        else
        {
            $data = '{"total":"0","encontrados":[]}';
        }
        return $data;
    }
    
    /**
     * getRegistrosFactibilidadNodoCliente
     * obtiene los elementos nodo wifi y devuelve un array
     *
     * @param array $arrayParametros [$start, $limit, $idSolicitud, $codEmpresa, $nombreNodo, $idCanton, $userCrea, $estado, $estadoElemento,
     * $modeloElemento, $fechaDesde, $fechaHasta ]
     * 
     * @return array $resultadoArray[registros, total]
     * 
     * @author John Vera
     * @version 1.0 05-05-2016
     * 
     * @author John Vera
     * @version 1.1 26-07-2016 se aumentó que en la consulta obtenga el id servicio
     * 
     * @author Lizbeth Cruz 
     * @version 1.2 21-09-2018 Se modifica la consulta por error al obtener los nodos wifi
     * 
     */
    public function getRegistrosNodoWifi($arrayParametros)
    {
        $arrayRespuesta['intTotal']        = 0;
        $arrayRespuesta['arrayResultado']   = array();
        try
        {
            
            $objRsm             = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery        = $this->_em->createNativeQuery(null, $objRsm);
            
            $strSqlSolNodosWifi = " WITH MAX_SOL_NODOS_WIFI 
                                    AS (
                                        SELECT SOL_NODO_WIFI_MAX.ELEMENTO_ID, MAX(SOL_NODO_WIFI_MAX.ID_DETALLE_SOLICITUD) AS ID_DETALLE_SOLICITUD 
                                        FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOL_NODO_WIFI_MAX
                                        INNER JOIN DB_COMERCIAL.ADMI_TIPO_SOLICITUD TIPO_SOL
                                        ON TIPO_SOL.ID_TIPO_SOLICITUD = SOL_NODO_WIFI_MAX.TIPO_SOLICITUD_ID
                                        WHERE TIPO_SOL.DESCRIPCION_SOLICITUD = :tipoSolNodoWifi
                                        AND SOL_NODO_WIFI_MAX.ELEMENTO_ID IS NOT NULL
                                        GROUP BY SOL_NODO_WIFI_MAX.ELEMENTO_ID), 
                                    INFO_SOL_NODOS_WIFI
                                    AS (
                                        SELECT SOL_NODO_WIFI.ELEMENTO_ID, SOL_NODO_WIFI.ESTADO, SERVICIO.ID_SERVICIO, 
                                        PUNTO.ID_PUNTO, PUNTO.LOGIN
                                        FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOL_NODO_WIFI
                                        INNER JOIN MAX_SOL_NODOS_WIFI SOL_NODO_WIFI_MAX
                                        ON SOL_NODO_WIFI_MAX.ID_DETALLE_SOLICITUD =  SOL_NODO_WIFI.ID_DETALLE_SOLICITUD
                                        LEFT JOIN DB_COMERCIAL.INFO_SERVICIO SERVICIO
                                        ON SERVICIO.ID_SERVICIO = SOL_NODO_WIFI.SERVICIO_ID
                                        LEFT JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
                                        ON PUNTO.ID_PUNTO = SERVICIO.PUNTO_ID) ";
            
            $strSelectCount     = " SELECT COUNT(DISTINCT ELEMENTO.ID_ELEMENTO) AS TOTAL ";
            
            $strSelect          = " SELECT
                                    ELEMENTO.ID_ELEMENTO,
                                    ELEMENTO.NOMBRE_ELEMENTO,
                                    UBICACION.DIRECCION_UBICACION,
                                    UBICACION.LATITUD_UBICACION,
                                    UBICACION.LONGITUD_UBICACION,
                                    CANTON.NOMBRE_CANTON,
                                    CANTON.ID_CANTON,
                                    ELEMENTO.FE_CREACION,
                                    SOLICITUD_NODO_WIFI.LOGIN,
                                    SOLICITUD_NODO_WIFI.ID_PUNTO,
                                    NVL(SOLICITUD_NODO_WIFI.ESTADO, 'N/A') AS ESTADO,
                                    SOLICITUD_NODO_WIFI.ID_SERVICIO,
                                    MODELO_ELEM.NOMBRE_MODELO_ELEMENTO,
                                    ELEMENTO.ESTADO ESTADO_ELEMENTO,
                                    ( SELECT J.NOMBRE_JURISDICCION
                                    FROM ADMI_CANTON_JURISDICCION CJ,
                                    INFO_OFICINA_GRUPO OG,
                                    ADMI_JURISDICCION J
                                    WHERE CJ.CANTON_ID = CANTON.ID_CANTON
                                    AND J.ID_JURISDICCION = CJ.JURISDICCION_ID
                                    AND J.OFICINA_ID = OG.ID_OFICINA
                                    AND OG.EMPRESA_ID = :codEmpresa
                                    AND ROWNUM < 2) JURISDICCION ";
            $strFromWhere       = " FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA EEU
                                    ON EEU.ELEMENTO_ID = ELEMENTO.ID_ELEMENTO
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_UBICACION UBICACION
                                    ON UBICACION.ID_UBICACION = EEU.UBICACION_ID
                                    INNER JOIN DB_GENERAL.ADMI_PARROQUIA PARROQUIA
                                    ON PARROQUIA.ID_PARROQUIA = UBICACION.PARROQUIA_ID
                                    INNER JOIN DB_GENERAL.ADMI_CANTON CANTON
                                    ON CANTON.ID_CANTON = PARROQUIA.CANTON_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MODELO_ELEM
                                    ON MODELO_ELEM.ID_MODELO_ELEMENTO = ELEMENTO.MODELO_ELEMENTO_ID
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIPO_ELEM
                                    ON MODELO_ELEM.TIPO_ELEMENTO_ID = TIPO_ELEM.ID_TIPO_ELEMENTO 
                                    LEFT JOIN INFO_SOL_NODOS_WIFI SOLICITUD_NODO_WIFI
                                    ON SOLICITUD_NODO_WIFI.ELEMENTO_ID = ELEMENTO.ID_ELEMENTO 
                                    WHERE EEU.EMPRESA_COD = :codEmpresa
                                    AND TIPO_ELEM.NOMBRE_TIPO_ELEMENTO = :tipoElemento ";
            $strWhereAdic = "";
            $objNtvQuery->setParameter("tipoSolNodoWifi", "SOLICITUD NODO WIFI");
            $objNtvQuery->setParameter("codEmpresa", $arrayParametros["codEmpresa"]);
            $objNtvQuery->setParameter("tipoElemento", 'NODO WIFI');
            if(isset($arrayParametros['idModeloElemento']) && !empty($arrayParametros['idModeloElemento']))
            {
                $strWhereAdic .= " AND ELEMENTO.MODELO_ELEMENTO_ID = :modeloElemento  ";
                $objNtvQuery->setParameter("modeloElemento", $arrayParametros['idModeloElemento']);
            }

            if(isset($arrayParametros['estado']) && !empty($arrayParametros['estado']))
            {
                $strWhereAdic.= " AND ELEMENTO.ESTADO = :estado ";
                $objNtvQuery->setParameter("estado", $arrayParametros['estado']);
            }
            
            if(isset($arrayParametros['estadoElemento']) && !empty($arrayParametros['estadoElemento']))
            {
                $strWhereAdic.= " AND ELEMENTO.ESTADO = :estadoElemento ";
                $objNtvQuery->setParameter("estadoElemento", $arrayParametros['estadoElemento']);
            }
            
            if(isset($arrayParametros['idCanton']) && !empty($arrayParametros['idCanton']))
            {
                $strWhereAdic.= " AND CANTON.ID_CANTON = :idCanton ";
                $objNtvQuery->setParameter("idCanton", $arrayParametros['idCanton']);
            }
            
            if(isset($arrayParametros['search_fechaDesde']) && !empty($arrayParametros['search_fechaDesde']))
            {
                $strWhereAdic.= " AND ELEMENTO.FE_CREACION >= :fechaDesde ";
                $objNtvQuery->setParameter("fechaDesde", $arrayParametros['search_fechaDesde']);
            }
            
            if(isset($arrayParametros['search_fechaHasta']) && !empty($arrayParametros['search_fechaHasta']))
            {
                $strWhereAdic.= " AND ELEMENTO.FE_CREACION <= :fechaHasta ";
                $objNtvQuery->setParameter("fechaHasta", $arrayParametros['search_fechaHasta']);
            }
            
            if(isset($arrayParametros['nombreNodo']) && !empty($arrayParametros['nombreNodo']))
            {
                $strWhereAdic.= " AND UPPER(ELEMENTO.NOMBRE_ELEMENTO) LIKE :nombreNodo ";
                $objNtvQuery->setParameter("nombreNodo", strtoupper('%' . $arrayParametros['nombreNodo'] . '%'));
            }
            
            if(isset($arrayParametros['userCrea']) && !empty($arrayParametros['userCrea']))
            {
                $strWhereAdic.= " AND UPPER(ELEMENTO.USR_CREACION) LIKE :userCrea ";
                $objNtvQuery->setParameter("userCrea", strtoupper('%' . $arrayParametros['userCrea'] . '%'));
            }
            
            $strQuery = $strSelect.$strFromWhere.$strWhereAdic;
            $objRsm->addScalarResult('ID_ELEMENTO', 'idElemento', 'integer');
            $objRsm->addScalarResult(strtoupper('NOMBRE_MODELO_ELEMENTO'), 'modeloElemento', 'string');
            $objRsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');
            $objRsm->addScalarResult(strtoupper('DIRECCION_UBICACION'), 'direccion', 'string');
            $objRsm->addScalarResult('LATITUD_UBICACION', 'latitud', 'string');
            $objRsm->addScalarResult('LONGITUD_UBICACION', 'longitud', 'string');
            $objRsm->addScalarResult(strtoupper('FE_CREACION'), 'feCreacion', 'string');
            $objRsm->addScalarResult(strtoupper('NOMBRE_CANTON'), 'canton', 'string');
            $objRsm->addScalarResult('ID_CANTON', 'idCanton', 'string');
            $objRsm->addScalarResult(strtoupper('JURISDICCION'), 'jurisdiccion', 'string');
            $objRsm->addScalarResult(strtoupper('USR_CREACION'), 'usrCreacion', 'string');
            $objRsm->addScalarResult(strtoupper('ESTADO'), 'estado', 'string');
            $objRsm->addScalarResult(strtoupper('ESTADO_ELEMENTO'), 'estadoElemento', 'string');
            $objRsm->addScalarResult('ID_SERVICIO', 'idServicio', 'integer');
            $objRsm->addScalarResult('LOGIN', 'login', 'string');
            $objRsm->addScalarResult('ID_PUNTO', 'idPunto', 'integer');
            $objRsm->addScalarResult('TOTAL', 'total', 'integer');
            
            $objNtvQuery->setSQL($strQuery." ORDER BY ELEMENTO.FE_CREACION DESC ");  
            $objNtvQueryFinal   = $this->setQueryLimit($objNtvQuery, $arrayParametros['limit'], $arrayParametros['start']);
            $strQueryPaginacion = $strSqlSolNodosWifi. $objNtvQueryFinal->getSQL();
            $objNtvQueryFinal->setSQL($strQueryPaginacion);
            $arrayResultado     = $objNtvQueryFinal->getResult();
            
            $strQueryCount  = $strSqlSolNodosWifi.$strSelectCount.$strFromWhere.$strWhereAdic;
            $objNtvQuery->setSQL($strQueryCount);
            $intTotal       = $objNtvQuery->getSingleScalarResult();

            $arrayRespuesta['registros']    = $arrayResultado;
            $arrayRespuesta['total']        = $intTotal;
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        return $arrayRespuesta;
    }
    
    /*
     * getJsonFactibilidNodoWifi
     * genera el json de la data de la funcion getFactibilidadNodoWifi
     *
     * @param array $arrayParametros [$start, $limit, $idSolicitud, $codEmpresa, $nombreNodo, $idCanton, $userCrea, $estado, $estadoElemento,
     * $modeloElemento, $fechaDesde, $fechaHasta ]
     * 
     * @return json $data[total, encontrados]
     * 
     * @author John Vera
     * @version 1.0 05-05-2016
     */

    public function getJsonFactibilidNodoWifi($arrayParametros)
    {

        $respuestaSolicitudes = $this->getFactibilidadNodoWifi($arrayParametros);

        if($respuestaSolicitudes)
        {
            $data = '{"total":"' . $respuestaSolicitudes['total'] . '","encontrados":' . json_encode($respuestaSolicitudes['registros']) . '}';
        }
        else
        {
            $data = '{"total":"0","encontrados":[]}';
        }
        return $data;
    }

    /**
     * getFactibilidadNodoWifi
     * funcion que obtiene los registros que estan en proceso de factibilidad de nodo wifi y devuelve un array
     *
     * @param array $arrayParametros [$start, $limit, $idSolicitud, $codEmpresa, $nombreNodo, $idCanton, $userCrea, $estado, $estadoElemento,
     * $modeloElemento, $fechaDesde, $fechaHasta ]
     * 
     * @return array $resultadoArray[registros, total]
     * 
     * @author John Vera
     * @version 1.0 05-05-2016
     * 
     * @author John Vera
     * @version 1.1 24-06-2016 se aumentaron datos para factibilidad
     *
     * Costo 48
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 10-10-2018 - Se modifica el método y el query para soportar el filtro por cantón y la fecha de inicio por defecto.
     *                           Adicional se aplica los estandares de calidad y el control de excepciones.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.3 14-03-2019 - Se agrega funcionalidad para incluir el tipo de esquema en array de respuesta $arraySolicitudes[].
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.4 16-12-2019 - Se agrega campo boolInstalacionSim para poder realizar filtrado en el grid de Factibilidad Nodo Wifi.
     * 
     */
    public function getFactibilidadNodoWifi($arrayParametros)
    {
        $intStart           = $arrayParametros['start'];
        $intLimit           = $arrayParametros['limit'];
        $intIdTipoSolicitud = $arrayParametros["idSolicitud"];
        $strCodEmpresa      = $arrayParametros["codEmpresa"];
        $strNombreNodo      = $arrayParametros["nombreNodo"];
        $strLogin           = $arrayParametros["login"];
        $strEstado          = $arrayParametros["estado"];
        $strFechaDesde      = $arrayParametros["search_fechaDesde"];
        $strFechaHasta      = $arrayParametros["search_fechaHasta"];
        $strFechaIni        = $arrayParametros["strFechaIni"];
        $intIdCanton        = $arrayParametros["intIdCanton"];
        $strFromElemento    = '';
        $strFromServicio    = '';
        $strAnd             = '';
        $arraySolicitudes   = array();
        $arrayResultado     = array();

        try
        {
            $objRsm   = new ResultSetMappingBuilder($this->_em);
            $objQuery = $this->_em->createNativeQuery(null, $objRsm);

            if (empty($strFechaDesde) && empty($strFechaHasta) && isset($strFechaIni) && !empty($strFechaIni))
            {
                $strAnd .= " AND TO_CHAR(IDS.FE_CREACION,'RRRR-MM-DD') >= :strFechaIni ";
                $objQuery->setParameter("strFechaIni", $strFechaIni);
            }

            if (isset($strFechaDesde) && !empty($strFechaDesde))
            {
                $strAnd .= " AND TO_CHAR(IDS.FE_CREACION,'RRRR-MM-DD') >= :strFechaDesde ";
                $objQuery->setParameter("strFechaDesde", $strFechaDesde);
            }

            if (isset($strFechaHasta) && !empty($strFechaHasta))
            {
                $strAnd .= " AND TO_CHAR(IDS.FE_CREACION,'RRRR-MM-DD') <= :strFechaHasta ";
                $objQuery->setParameter("strFechaHasta", $strFechaHasta);
            }

            if (isset($strEstado) && !empty($strEstado))
            {
                $strAnd .= " AND IDS.ESTADO = :strEstado ";
                $objQuery->setParameter("strEstado", $strEstado);
            }

            if (isset($strNombreNodo) && !empty($strNombreNodo))
            {
                $strFromServicio = ", DB_INFRAESTRUCTURA.INFO_ELEMENTO IEL ";

                $strAnd .= " AND IEL.ID_ELEMENTO          = IDS.ELEMENTO_ID ".
                           " AND UPPER(IEL.NOMBRE_ELEMENTO) LIKE (:strNombreNodo) ";
                $objQuery->setParameter("strNombreNodo", strtoupper('%' . $strNombreNodo . '%'));
            }

            if (isset($strLogin) && !empty($strLogin))
            {
                $strFromElemento = ", DB_COMERCIAL.INFO_SERVICIO ISE,
                                      DB_COMERCIAL.INFO_PUNTO    IPU ";

                $strAnd .= " AND ISE.ID_SERVICIO = IDS.SERVICIO_ID ".
                           " AND IPU.ID_PUNTO    = ISE.PUNTO_ID ".
                           " AND UPPER(IPU.LOGIN) LIKE (:strLogin) ";
                $objQuery->setParameter("strLogin", strtoupper('%' . $strLogin . '%'));
            }

            if (isset($intIdCanton) && !empty($intIdCanton))
            {
                $strAnd .= " AND ACA.ID_CANTON = :intIdCanton ";
                $objQuery->setParameter("intIdCanton", $intIdCanton);
            }

            $strSqlSe = "SELECT IDS.ID_DETALLE_SOLICITUD,
                                IDS.ESTADO,
                                IDS.FE_CREACION,
                                IDS.SERVICIO_ID,
                                IDS.USR_CREACION,
                                IDS.ELEMENTO_ID,
                                (SELECT IPU.LOGIN
                                  FROM DB_COMERCIAL.INFO_PUNTO_DATO_ADICIONAL IPDA
                                 WHERE IPDA.PUNTO_ID    = IPU.ID_PUNTO
                                   AND IPDA.ELEMENTO_ID = IDS.ELEMENTO_ID
                                ) LOGIN_L3,
                                (IPU.ID_PUNTO ||'|'||
                                 IPU.NOMBRE_PUNTO||'|'||
                                 IPU.LOGIN
                                ) PUNTO,
                                (SELECT IELE.NOMBRE_ELEMENTO
                                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO IELE
                                 WHERE IELE.ID_ELEMENTO = IDS.ELEMENTO_ID
                                ) NOMBRE_ELEMENTO,
                                (SELECT AME.NOMBRE_MODELO_ELEMENTO
                                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO        IELE,
                                         DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AME
                                 WHERE IELE.ID_ELEMENTO        = IDS.ELEMENTO_ID
                                   AND AME.ID_MODELO_ELEMENTO = IELE.MODELO_ELEMENTO_ID
                                ) MODELO_ELEMENTO,
                                (IPU.DIRECCION     ||'|'||
                                 ACA.NOMBRE_CANTON ||'|'||
                                 IPU.LATITUD       ||'|'||
                                 IPU.LONGITUD      ||'|'||
                                 APA.ID_PARROQUIA  ||'|'||
                                 ACA.ID_CANTON     ||'|'||
                                 (SELECT APR.DESCRIPCION_PRODUCTO
                                    FROM DB_COMERCIAL.ADMI_PRODUCTO APR
                                  WHERE APR.ID_PRODUCTO = ISE.PRODUCTO_ID
                                 ) ||'|'||
                                 ISE.TIPO_ORDEN    ||'|'||
                                 ASE.NOMBRE_SECTOR ||'|'||
                                 IPU.PERSONA_EMPRESA_ROL_ID
                                ) SERVICIO,
                                (SELECT IUB.DIRECCION_UBICACION ||'|'||
                                        ACA.NOMBRE_CANTON       ||'|'||
                                        IUB.LATITUD_UBICACION   ||'|'||
                                        IUB.LONGITUD_UBICACION  ||'|'||
                                        APA.ID_PARROQUIA        ||'|'||
                                        ACA.ID_CANTON
                                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO               IEL,
                                         DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA IEEU,
                                         DB_INFRAESTRUCTURA.INFO_UBICACION              IUB
                                 WHERE IEL.ID_ELEMENTO  = IDS.ELEMENTO_ID
                                   AND IEEU.ELEMENTO_ID = IEL.ID_ELEMENTO
                                   AND IUB.ID_UBICACION = IEEU.UBICACION_ID
                                   AND APA.ID_PARROQUIA = IUB.PARROQUIA_ID
                                ) ELEMENTO
                             FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD   IDS,
                                  DB_COMERCIAL.INFO_SERVICIO            ISE,
                                  DB_COMERCIAL.INFO_PUNTO               IPU,
                                  DB_GENERAL.ADMI_SECTOR                ASE,
                                  DB_GENERAL.ADMI_PARROQUIA             APA,
                                  DB_GENERAL.ADMI_CANTON                ACA,
                                  DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER,
                                  DB_COMERCIAL.INFO_OFICINA_GRUPO       IOG
                                  $strFromServicio
                         WHERE ISE.ID_SERVICIO       = IDS.SERVICIO_ID
                           AND IPU.ID_PUNTO          = ISE.PUNTO_ID
                           AND ASE.ID_SECTOR         = IPU.SECTOR_ID
                           AND APA.ID_PARROQUIA      = ASE.PARROQUIA_ID
                           AND ACA.ID_CANTON         = APA.CANTON_ID
                           AND IPER.ID_PERSONA_ROL   = IPU.PERSONA_EMPRESA_ROL_ID
                           AND IOG.ID_OFICINA        = IPER.OFICINA_ID
                           AND IOG.EMPRESA_ID        = :strCodEmpresa
                           AND IDS.TIPO_SOLICITUD_ID = :intIdTipoSolicitud
                           $strAnd ";

            $strSqlEl = "SELECT IDS.ID_DETALLE_SOLICITUD,
                                IDS.ESTADO,
                                IDS.FE_CREACION,
                                IDS.SERVICIO_ID,
                                IDS.USR_CREACION,
                                IDS.ELEMENTO_ID,
                                (SELECT IPUN.LOGIN
                                    FROM DB_COMERCIAL.INFO_PUNTO                IPUN,
                                         DB_COMERCIAL.INFO_PUNTO_DATO_ADICIONAL IPDA
                                 WHERE IPDA.ELEMENTO_ID = IDS.ELEMENTO_ID
                                   AND IPDA.PUNTO_ID    = IPUN.ID_PUNTO
                                ) LOGIN_L3,
                                (SELECT IPUN.ID_PUNTO     ||'|'||
                                        IPUN.NOMBRE_PUNTO ||'|'||
                                        IPUN.LOGIN
                                    FROM DB_COMERCIAL.INFO_PUNTO    IPUN,
                                         DB_COMERCIAL.INFO_SERVICIO ISE
                                 WHERE ISE.ID_SERVICIO = IDS.SERVICIO_ID
                                   AND ISE.PUNTO_ID    = IPUN.ID_PUNTO
                                ) PUNTO,
                                IEL.NOMBRE_ELEMENTO,
                                AME.NOMBRE_MODELO_ELEMENTO,
                                (SELECT IPU.DIRECCION     ||'|'||
                                        ACA.NOMBRE_CANTON ||'|'||
                                        IPU.LATITUD       ||'|'||
                                        IPU.LONGITUD      ||'|'||
                                        APA.ID_PARROQUIA  ||'|'||
                                        ACA.ID_CANTON     ||'|'||
                                        (SELECT APR.DESCRIPCION_PRODUCTO
                                             FROM ADMI_PRODUCTO APR
                                         WHERE APR.ID_PRODUCTO = ISE.PRODUCTO_ID
                                        ) ||'|'||
                                        ISE.TIPO_ORDEN    ||'|'||
                                        ASE.NOMBRE_SECTOR ||'|'||
                                        IPU.PERSONA_EMPRESA_ROL_ID
                                    FROM DB_COMERCIAL.INFO_SERVICIO            ISE,
                                         DB_COMERCIAL.INFO_PUNTO               IPU,
                                         DB_GENERAL.ADMI_SECTOR                ASE,
                                         DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER,
                                         DB_COMERCIAL.INFO_OFICINA_GRUPO       IOG
                                 WHERE ISE.ID_SERVICIO     = IDS.SERVICIO_ID
                                   AND IPU.ID_PUNTO        = ISE.PUNTO_ID
                                   AND ASE.ID_SECTOR       = IPU.SECTOR_ID
                                   AND APA.ID_PARROQUIA    = ASE.PARROQUIA_ID
                                   AND IPER.ID_PERSONA_ROL = IPU.PERSONA_EMPRESA_ROL_ID
                                   AND IOG.ID_OFICINA      = IPER.OFICINA_ID
                                ) SERVICIO,
                                (IUB.DIRECCION_UBICACION ||'|'||
                                 ACA.NOMBRE_CANTON       ||'|'||
                                 IUB.LATITUD_UBICACION   ||'|'||
                                 IUB.LONGITUD_UBICACION  ||'|'||
                                 APA.ID_PARROQUIA        ||'|'||
                                 ACA.ID_CANTON
                                ) ELEMENTO
                             FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD            IDS,
                                  DB_INFRAESTRUCTURA.INFO_ELEMENTO               IEL,
                                  DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO        AME,
                                  DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA IEEU,
                                  DB_INFRAESTRUCTURA.INFO_UBICACION              IUB,
                                  DB_GENERAL.ADMI_PARROQUIA                      APA,
                                  DB_GENERAL.ADMI_CANTON                         ACA
                                  $strFromElemento
                         WHERE IEL.ID_ELEMENTO        = IDS.ELEMENTO_ID
                           AND IEEU.ELEMENTO_ID       = IEL.ID_ELEMENTO
                           AND AME.ID_MODELO_ELEMENTO = IEL.MODELO_ELEMENTO_ID
                           AND IUB.ID_UBICACION       = IEEU.UBICACION_ID
                           AND APA.ID_PARROQUIA       = IUB.PARROQUIA_ID
                           AND ACA.ID_CANTON          = APA.CANTON_ID
                           AND IEEU.EMPRESA_COD       = :strCodEmpresa
                           AND IDS.TIPO_SOLICITUD_ID  = :intIdTipoSolicitud
                           $strAnd ";

            $strSql = " SELECT A.* FROM ".
                      " ($strSqlSe UNION $strSqlEl) A ".
                      " ORDER BY A.FE_CREACION DESC ";

            $objQuery->setParameter("strCodEmpresa"      , $strCodEmpresa);
            $objQuery->setParameter("intIdTipoSolicitud" , $intIdTipoSolicitud);

            $objRsm->addScalarResult(strtoupper('ID_DETALLE_SOLICITUD') , 'idSolicitud'        , 'string');
            $objRsm->addScalarResult(strtoupper('PUNTO')                , 'punto'              , 'string');
            $objRsm->addScalarResult(strtoupper('ELEMENTO')             , 'elemento'           , 'string');
            $objRsm->addScalarResult(strtoupper('SERVICIO')             , 'servicio'           , 'string');
            $objRsm->addScalarResult(strtoupper('SERVICIO_ID')          , 'idServicio'         , 'string');
            $objRsm->addScalarResult(strtoupper('ESTADO')               , 'estado'             , 'string');
            $objRsm->addScalarResult(strtoupper('FE_CREACION')          , 'fechaCreacion'      , 'string');
            $objRsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO')      , 'nombreElemento'     , 'string');
            $objRsm->addScalarResult(strtoupper('USR_CREACION')         , 'usrCreacion'        , 'string');
            $objRsm->addScalarResult(strtoupper('ELEMENTO_ID')          , 'idElemento'         , 'integer');
            $objRsm->addScalarResult(strtoupper('LOGIN_L3')             , 'loginL3'            , 'string');
            $objRsm->addScalarResult(strtoupper('MODELO_ELEMENTO')      , 'modeloElementoWifi' , 'string');

            $objQuery->setSQL($strSql);
            $arrayResult         = $objQuery->getResult();
            $intTotalSolicitudes = count($arrayResult);
            $arrayEncontrados    = array_slice($arrayResult, $intStart, $intLimit);

            if (!empty($arrayEncontrados) && count($arrayEncontrados) > 0)
            {
                foreach ($arrayEncontrados as $arrayRegistro)
                {
                    if (!empty($arrayRegistro['servicio']))
                    {
                        $arrayServicio          = explode("|", $arrayRegistro['servicio']);
                        $strNombreProducto      = $arrayServicio[6];
                        $strTipoOrden           = $arrayServicio[7];
                        $strNombreSector        = $arrayServicio[8];
                        $strIdPersonaEmpresaRol = $arrayServicio[9];
                    }
                    else
                    {
                        $arrayServicio = explode("|", $arrayRegistro['elemento']);
                    }

                    $strDireccion     = $arrayServicio[0];
                    $strNombreCanton  = $arrayServicio[1];
                    $strLatitud       = $arrayServicio[2];
                    $strLongitud      = $arrayServicio[3];
                    $strIdParroquia   = $arrayServicio[4];
                    $strIdCanton      = $arrayServicio[5];

                    if (!empty($arrayRegistro['punto']))
                    {
                        $arrayPunto     = explode("|", $arrayRegistro['punto']);
                        $strIdPunto     = $arrayPunto[0];
                        $strNombrePunto = $arrayPunto[1];
                        $strLogin       = $arrayPunto[2];
                    }
                    else
                    {
                        $strIdPunto     = '';
                        $strNombrePunto = '';
                        $strLogin       = '';
                    }

                    $objAdmiCaract          = $this->getEntityManager()->getRepository("schemaBundle:AdmiCaracteristica")
                                                                       ->findOneBy(array(  'descripcionCaracteristica' => 'TIPO_ESQUEMA',
                                                                                           'estado'                    => 'Activo'));

                    $objAdmiProdCaract      = $this->getEntityManager()->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                                                       ->findOneBy(array( 'caracteristicaId' => $objAdmiCaract->getId()));

                    $objInfoServProdCaract  = $this->getEntityManager()->getRepository("schemaBundle:InfoServicioProdCaract")
                                                                       ->findOneBy(array( 'servicioId'   =>  $arrayRegistro['idServicio'],
                                                                           'estado'                      =>  'Activo',
                                                                           'productoCaracterisiticaId'   =>  $objAdmiProdCaract->getId()));

                    $objServicio = $this->getEntityManager()->getRepository('schemaBundle:InfoServicio')
                                                            ->find($arrayRegistro['idServicio']);


                    if ($strNombreProducto == 'INTERNET WIFI' && isset($arrayParametros['serviceInfoServicio']))
                    {
                        $serviceInfoServicio = $arrayParametros['serviceInfoServicio'];
                        $boolInstalacionSimultanea = $serviceInfoServicio->getValorCaracteristicaServicio($objServicio,
                                                                                                          'INSTALACION_SIMULTANEA_WIFI',
                                                                                                          'Activo');
                    }

                    $arraySolicitudes[] = array('login'              => $strLogin,
                                                'idPunto'            => $strIdPunto,
                                                'nombrePunto'        => $strNombrePunto,
                                                'tipoOrden'          => $strTipoOrden,
                                                'nombreProducto'     => $strNombreProducto,
                                                'nombreSector'       => $strNombreSector,
                                                'idPersonaEmpresaRol'=> $strIdPersonaEmpresaRol,
                                                'idServicio'         => $arrayRegistro['idServicio'],
                                                'idSolicitud'        => $arrayRegistro['idSolicitud'],
                                                'direccion'          => $strDireccion,
                                                'nombreCanton'       => $strNombreCanton,
                                                'idCanton'           => $strIdCanton,
                                                'latitud'            => $strLatitud,
                                                'longitud'           => $strLongitud,
                                                'estado'             => $arrayRegistro['estado'],
                                                'loginL3'            => $arrayRegistro['loginL3'],
                                                'fechaCreacion'      => $arrayRegistro['fechaCreacion'],
                                                'nombreElemento'     => $arrayRegistro['nombreElemento'],
                                                'idParroquia'        => $strIdParroquia,
                                                'idElemento'         => $arrayRegistro['idElemento'],
                                                'modeloElementoWifi' => $arrayRegistro['modeloElementoWifi'],
                                                'usrCreacion'        => $arrayRegistro['usrCreacion'],
                                                'tipoEsquema'        => $objInfoServProdCaract ? $objInfoServProdCaract->getValor() : null,
                                                'boolInstalacionSim' => isset($boolInstalacionSimultanea) &&
                                                                        !empty($boolInstalacionSimultanea)
                    );
                }
            }

            $arrayResultado['registros'] = $arraySolicitudes;
            $arrayResultado['total']     = $intTotalSolicitudes;
        }
        catch (\Exception $objException)
        {
            $strMensajeError = "Error InfoElementoRepository.getFactibilidadNodoWifi -> Error: ".$objException->getMessage();
            error_log($strMensajeError);
        }
        return $arrayResultado;
    }

    /**
     * getJsonRegistrosSwitchPerimetral
     * genera el json de la data de la funcion getJsonRegistrosSwitchPerimetral que obtiene los elementos
     *
     * @param array $arrayParametros [$start, $limit, $idSolicitud, $codEmpresa, $nombreNodo, $idCanton, $userCrea, $estado, $estadoElemento,
     * $modeloElemento, $fechaDesde, $fechaHasta ]
     * 
     * @return json $data[total, encontrados]
     * 
     * @author John Vera
     * @version 1.0 05-05-2016
     */

    public function getJsonRegistrosSwitchPerimetral($arrayParametros)
    {

        $respuesta = $this->getRegistrosSwitchPerimetral($arrayParametros);
        
        if($respuesta)
        {
            $data = '{"total":"' . $respuesta['total'] . '","encontrados":' . json_encode($respuesta['registros']) . '}';
        }
        else
        {
            $data = '{"total":"0","encontrados":[]}';
        }
        return $data;
    }
    
    
        
    /**
     * getRegistrosSwitchPerimetral
     * obtiene los elementos y devuelve un array
     *
     * @param array $arrayParametros [$start, $limit, $idSolicitud, $codEmpresa, $nombreNodo, $idCanton, $userCrea, $estado, $estadoElemento,
     * $modeloElemento, $fechaDesde, $fechaHasta ]
     * 
     * @return array $resultadoArray[registros, total]
     * 
     * @author John Vera
     * @version 1.0 05-05-2016
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.1 25-05-2017 Se cambio funcion nativa por mal funcionamiento en produccion
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 13-07-2017 Se corrige lineas agregadas en producción manualemnte
     */
    public function getRegistrosSwitchPerimetral($arrayParametros)
    {
        $rsm            = new ResultSetMappingBuilder($this->_em);
        $query          = $this->_em->createNativeQuery(null, $rsm);
        $start          = $arrayParametros['start'];
        $limit          = $arrayParametros['limit'];
        $codEmpresa     = $arrayParametros["codEmpresa"];
        $nombreNodo     = $arrayParametros["nombreNodo"];
        $idCanton       = $arrayParametros["idCanton"];
        $userCrea       = $arrayParametros["userCrea"];
        $estado         = $arrayParametros["estado"];
        $modeloElemento = $arrayParametros["idModeloElemento"];
        
        $selectCont = "SELECT COUNT(1) CONT ";
        
        $select = "SELECT
                E.ID_ELEMENTO,
                E.NOMBRE_ELEMENTO,
                U.DIRECCION_UBICACION,
                U.LATITUD_UBICACION,
                U.LONGITUD_UBICACION,
                C.NOMBRE_CANTON,
                C.ID_CANTON,
                E.FE_CREACION,
                (SELECT DS.ESTADO FROM INFO_DETALLE_SOLICITUD DS WHERE DS.ELEMENTO_ID = E.ID_ELEMENTO) ESTADO,
                ME.NOMBRE_MODELO_ELEMENTO,
                E.ESTADO ESTADO_ELEMENTO,
                ( SELECT J.NOMBRE_JURISDICCION
                FROM ADMI_CANTON_JURISDICCION CJ,
                INFO_OFICINA_GRUPO OG,
                ADMI_JURISDICCION J
                WHERE CJ.CANTON_ID = C.ID_CANTON
                AND J.ID_JURISDICCION = CJ.JURISDICCION_ID
                AND J.OFICINA_ID = OG.ID_OFICINA
                AND OG.EMPRESA_ID = :codEmpresa
                AND ROWNUM < 2) JURISDICCION";

        $sql = " FROM INFO_ELEMENTO E,
                INFO_EMPRESA_ELEMENTO_UBICA EE,
                INFO_UBICACION U,
                ADMI_PARROQUIA P,
                ADMI_CANTON C,
                ADMI_MODELO_ELEMENTO ME,
                ADMI_TIPO_ELEMENTO TE,
                INFO_DETALLE_ELEMENTO DE
                WHERE ME.TIPO_ELEMENTO_ID = TE.ID_TIPO_ELEMENTO 
                AND ME.ID_MODELO_ELEMENTO = E.MODELO_ELEMENTO_ID
                AND DE.ELEMENTO_ID = E.ID_ELEMENTO
                AND E.ID_ELEMENTO = EE.ELEMENTO_ID
                AND EE.UBICACION_ID = U.ID_UBICACION
                AND P.ID_PARROQUIA = U.PARROQUIA_ID
                AND C.ID_CANTON = P.CANTON_ID
                AND DE.DETALLE_NOMBRE = :detalleNombre
                AND DE.DETALLE_VALOR  = :detalleValor
                AND EE.EMPRESA_COD = :codEmpresa
                AND TE.NOMBRE_TIPO_ELEMENTO = :tipoElemento ";

        $query->setParameter("codEmpresa", $codEmpresa);
        $query->setParameter("tipoElemento", 'SWITCH');
        $query->setParameter("detalleNombre", 'TIPO ELEMENTO RED');
        $query->setParameter("detalleValor", 'WIFI');

        if($modeloElemento)
        {
            $sql.= " AND E.MODELO_ELEMENTO_ID = :modeloElemento  ";
            $query->setParameter("modeloElemento", $modeloElemento);
        }

        if($estado)
        {
            $sql.= " AND E.ESTADO = :estado ";
            $query->setParameter("estado", $estado);
        }
        if($idCanton)
        {
            $sql.= " AND C.ID_CANTON = :idCanton ";
            $query->setParameter("idCanton", $idCanton);
        }
        if($nombreNodo)
        {
            $sql.= " AND UPPER(E.NOMBRE_ELEMENTO) LIKE :nombreNodo ";
            $query->setParameter("nombreNodo", strtoupper('%' . $nombreNodo . '%'));
        }
        if($userCrea)
        {
            $sql.= " AND UPPER(E.USR_CREACION) LIKE :userCrea ";
            $query->setParameter("userCrea", strtoupper('%' . $userCrea . '%'));
        }

        $sql.= " ORDER BY E.FE_CREACION DESC ";
        $rsm->addScalarResult('ID_ELEMENTO', 'idElemento', 'integer');
        $rsm->addScalarResult(strtoupper('NOMBRE_MODELO_ELEMENTO'), 'modeloElemento', 'string');
        $rsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');
        $rsm->addScalarResult(strtoupper('DIRECCION_UBICACION'), 'direccion', 'string');
        $rsm->addScalarResult(strtoupper('LATITUD_UBICACION'), 'latitud', 'string');
        $rsm->addScalarResult(strtoupper('LONGITUD_UBICACION'), 'longitud', 'string');
        $rsm->addScalarResult(strtoupper('FE_CREACION'), 'feCreacion', 'string');
        $rsm->addScalarResult(strtoupper('NOMBRE_CANTON'), 'canton', 'string');
        $rsm->addScalarResult(strtoupper('ID_CANTON'), 'idCanton', 'string');
        $rsm->addScalarResult(strtoupper('JURISDICCION'), 'jurisdiccion', 'string');
        $rsm->addScalarResult(strtoupper('USR_CREACION'), 'usrCreacion', 'string');
        $rsm->addScalarResult(strtoupper('ESTADO'), 'estado', 'string');
        $rsm->addScalarResult(strtoupper('ESTADO_ELEMENTO'), 'estadoElemento', 'string');
        $rsm->addScalarResult(strtoupper('IP'), 'ip', 'string');
        $rsm->addScalarResult('CONT', 'cont', 'integer');

        $query->setSQL($selectCont . $sql);

        $resultadoArray['total'] = $query->getSingleScalarResult();

        $query->setSQL($select . $sql);

        $objQuery = $this->setQueryLimit($query, $start, $limit);
        
        $arrayResultado['resultado'] = $objQuery->getArrayResult();

        $encontrados = $arrayResultado['resultado'];
        
        $solicitudesArray = array();
        if($encontrados)
        {
            foreach($encontrados as $registro)
            {
                $solicitudesArray[] = array(
                    'idElemento'        => $registro['idElemento'],
                    'nombreElemento'    => $registro['nombreElemento'],
                    'direccion'         => $registro['direccion'],
                    'latitud'           => $registro['latitud'],
                    'longitud'          => $registro['longitud'],
                    'feCreacion'        => $registro['feCreacion'],
                    'canton'            => $registro['canton'],
                    'idCanton'          => $registro['idCanton'],
                    'jurisdiccion'      => $registro['jurisdiccion'],
                    'ip'                => $registro['ip'],
                    'estadoElemento'    => $registro['estadoElemento'],
                    'modeloElemento'    => $registro['modeloElemento'],
                    'usrCreacion'       => $registro['usrCreacion']);
            }
        }

        $resultadoArray['registros'] = $solicitudesArray;

        return $resultadoArray;
    }
    
     /**
     *
     * getJsonCajasNodoCliente
     * obtiene las cajas que no esten en un nodo cliente
     *
     * @param integer $nivel
     * @param integer $idEmpresa
     * @param string $nombre
     *
     * @return json $resultado
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 05-05-2016
     */
    public function getJsonElementosSinRelacion($strNombreElemento, $strTipoElemento, $idEmpresa, $idCanton)
    {
        $encontrados = $this->getElementosSinRelacion($strNombreElemento, $strTipoElemento, $idEmpresa, $idCanton);

           if($encontrados)
        {
            $data = '{"total":"' . $encontrados['total'] . '","encontrados":' . json_encode($encontrados['registros']) . '}';
        }
        else
        {
            $data = '{"total":"0","encontrados":[]}';
        }
        return $data;
    }
    
    
     /**
     * getElementosSinRelacion
     * Obtiene los elementos que no esten relacionados a otros elementos
     *
     * @param type $strNombreElemento
     * @param type $strTipoElemento
     * @param type $idEmpresa
     * @param type $idCanton
     *
     * @return string $data
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 05-05-2016
     * */
    
    public function getElementosSinRelacion($strNombreElemento, $strTipoElemento, $idEmpresa, $idCanton)
    {
        $rsm = new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null, $rsm);

        $sql = " SELECT E.ID_ELEMENTO ,
                    E.NOMBRE_ELEMENTO,
                    ME.NOMBRE_MODELO_ELEMENTO                    
                  FROM INFO_ELEMENTO E,
                    ADMI_MODELO_ELEMENTO ME,
                    ADMI_TIPO_ELEMENTO TE,
                    INFO_EMPRESA_ELEMENTO_UBICA EE,
                    INFO_UBICACION U,
                    ADMI_PARROQUIA P
                  WHERE E.MODELO_ELEMENTO_ID  = ME.ID_MODELO_ELEMENTO
                  AND E.ID_ELEMENTO           = EE.ELEMENTO_ID
                  AND EE.UBICACION_ID         = U.ID_UBICACION
                  AND P.ID_PARROQUIA          = U.PARROQUIA_ID
                  AND P.CANTON_ID             = :idCanton
                  AND EE.EMPRESA_COD          = :idEmpresa
                  AND ME.TIPO_ELEMENTO_ID     = TE.ID_TIPO_ELEMENTO
                  AND TE.NOMBRE_TIPO_ELEMENTO = :strTipoElemento
                  AND E.ESTADO                = :estado
                  AND UPPER(E.NOMBRE_ELEMENTO) LIKE :strNombreElemento
                  AND EXISTS (SELECT IE.ID_INTERFACE_ELEMENTO FROM INFO_INTERFACE_ELEMENTO IE WHERE IE.ELEMENTO_ID = E.ID_ELEMENTO )
                  AND NOT EXISTS
                    (SELECT RE.ID_RELACION_ELEMENTO
                    FROM INFO_RELACION_ELEMENTO RE,
                    INFO_ELEMENTO E1,
                    ADMI_MODELO_ELEMENTO ME1,
                    ADMI_TIPO_ELEMENTO TE1
                    WHERE RE.ELEMENTO_ID_B = E.ID_ELEMENTO
                    AND E1.ID_ELEMENTO = RE.ELEMENTO_ID_A
                    AND E1.MODELO_ELEMENTO_ID =  ME1.ID_MODELO_ELEMENTO
                    AND ME1.TIPO_ELEMENTO_ID = TE1.ID_TIPO_ELEMENTO
                    AND TE1.NOMBRE_TIPO_ELEMENTO = :strTipoElemento) ";
        
        $query->setParameter("strNombreElemento", strtoupper('%' . $strNombreElemento . '%'));
        $query->setParameter("strTipoElemento", $strTipoElemento);
        $query->setParameter("idEmpresa", $idEmpresa);
        $query->setParameter("idCanton", $idCanton);
        $query->setParameter("estado", 'Activo');

        $rsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');
        $rsm->addScalarResult(strtoupper('NOMBRE_MODELO_ELEMENTO'), 'nombreModeloElemento', 'string');
        $rsm->addScalarResult(strtoupper('ID_ELEMENTO'), 'idElemento', 'integer');

        $query->setSQL($sql);
        $encontrados = $query->getResult();
        $totalSolicitudes = count($encontrados);
        $solicitudesArray = array();
        if($encontrados)
        {
            foreach($encontrados as $registro)
            {
                $solicitudesArray[] = array(
                    'idElemento'            => $registro['idElemento'],
                    'nombreElemento'        => $registro['nombreElemento'],
                    'nombreModeloElemento'  => $registro['nombreModeloElemento']);
            }
        }

        $resultadoArray['registros'] = $solicitudesArray;
        $resultadoArray['total'] = $totalSolicitudes;
        return $resultadoArray;
    }    
    
    
     /**
     * getJsonElementosPorTipoEstado
     * Obtiene los elementos por tipo y por estado
     *
     * @param type $strTipoElemento     tipo de elemento
     * @param type $strEstado           estado del elemento
     * @param type $strNombreElemento   nombre del elemento
     * 
     * @return json $data  retorna un json
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 02-09-2017
     * */
    
    public function getJsonElementosPorTipoEstado($strTipoElemento, $strEstado, $strNombreElemento)
    {

        $arrayElementos = $this->getElementosPorTipoEstado($strTipoElemento, $strEstado, $strNombreElemento);
        
        if($arrayElementos)
        {
            $data = '{"total":"' . $arrayElementos['total'] . '","encontrados":' . json_encode($arrayElementos['registros']) . '}';
        }
        else
        {
            $data = '{"total":"0","encontrados":[]}';
        }
        return $data;        
        
        
    }
        
     /**
     * getElementosPorTipoEstado
     * Obtiene los elementos por tipo y por estado
     *
     * @param type $strTipoElemento     tipo de elemento
     * @param type $strEstado           estado del elemento
     * @param type $strNombreElemento   nombre del elemento
     * 
     * @return array $data  retorna un array
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 02-09-2017
     * */
    
    public function getElementosPorTipoEstado($strTipoElemento, $strEstado, $strNombreElemento)
    {
        $rsm = new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null, $rsm);

        $sql = " SELECT E.ID_ELEMENTO,
                        E.NOMBRE_ELEMENTO
                      FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO E,
                        DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO ME,
                        DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TE
                      WHERE E.MODELO_ELEMENTO_ID = ME.ID_MODELO_ELEMENTO
                      AND ME.TIPO_ELEMENTO_ID  = TE.ID_TIPO_ELEMENTO
                      AND E.ESTADO               = :estado
                      AND TE.NOMBRE_TIPO_ELEMENTO = :tipoElemento " ;
        
        if ($strNombreElemento)
        {
            $sql.= " AND upper(E.NOMBRE_ELEMENTO) LIKE :nombreElemento ";
            $query->setParameter("nombreElemento", '%'.strtoupper($strNombreElemento).'%');
        }
        
        $query->setParameter("tipoElemento", $strTipoElemento);
        $query->setParameter("estado", $strEstado);

        $rsm->addScalarResult(strtoupper('ID_ELEMENTO'), 'idElemento', 'string');
        $rsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');
        
        $query->setSQL($sql);
        $encontrados = $query->getResult();

        $totalSolicitudes = count($encontrados);
        $arrayElementos = array();
        if($encontrados)
        {
            foreach($encontrados as $registro)
            {
                $arrayElementos[] = array(
                    'idElemento'            => $registro['idElemento'],
                    'nombreElemento'        => $registro['nombreElemento']);
            }
        }

        $arrayResultado['registros'] = $arrayElementos;
        $arrayResultado['total'] = $totalSolicitudes;
        return $arrayResultado;
    }
    
    
    /**
     * getJsonElementosXtipoEmpresaCanton
     * Funcion que convierte en json los datos de la funcion getElementosXtipoEmpresaCanton
     *
     * @param type $strNombreElemento
     * @param type $strTipoElemento
     * @param type $idEmpresa
     * @param type $idCanton
     *
     * @return string $data
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 05-05-2016
     * 
     */
    
    public function getJsonElementosXtipoEmpresaCanton($strNombreElemento, $strTipoElemento, $idEmpresa, $idCanton)
    {
        $encontrados = $this->getElementosXtipoEmpresaCanton($strNombreElemento, $strTipoElemento, $idEmpresa, $idCanton);

           if($encontrados)
        {
            $data = '{"total":"' . $encontrados['total'] . '","encontrados":' . json_encode($encontrados['registros']) . '}';
        }
        else
        {
            $data = '{"total":"0","encontrados":[]}';
        }
        return $data;
    }

    
     /**
     * getElementosXtipoEmpresaCanton
     * Obtiene elementos por tipo, empresa y canton
     *
     * @param type $strNombreElemento
     * @param type $strTipoElemento
     * @param type $idEmpresa
     * @param type $idCanton
     *
     * @return string $data
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 05-05-2016
     * */
    public function getElementosXtipoEmpresaCanton($strNombreElemento, $strTipoElemento, $idEmpresa, $idCanton)
    {
        $rsm = new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null, $rsm);

        $sql = " SELECT E.ID_ELEMENTO ,
                    E.NOMBRE_ELEMENTO,
                    ME.NOMBRE_MODELO_ELEMENTO                    
                  FROM INFO_ELEMENTO E,
                    ADMI_MODELO_ELEMENTO ME,
                    ADMI_TIPO_ELEMENTO TE,
                    INFO_EMPRESA_ELEMENTO_UBICA EE,
                    INFO_UBICACION U,
                    ADMI_PARROQUIA P
                  WHERE E.MODELO_ELEMENTO_ID  = ME.ID_MODELO_ELEMENTO
                  AND E.ID_ELEMENTO           = EE.ELEMENTO_ID
                  AND EE.UBICACION_ID         = U.ID_UBICACION
                  AND P.ID_PARROQUIA          = U.PARROQUIA_ID
                  AND P.CANTON_ID             = :idCanton
                  AND EE.EMPRESA_COD          = :idEmpresa
                  AND ME.TIPO_ELEMENTO_ID     = TE.ID_TIPO_ELEMENTO
                  AND TE.NOMBRE_TIPO_ELEMENTO = :strTipoElemento
                  AND E.ESTADO                = :estado ";
        
        $query->setParameter("strTipoElemento", $strTipoElemento);
        $query->setParameter("idEmpresa", $idEmpresa);
        $query->setParameter("idCanton", $idCanton);
        $query->setParameter("estado", 'Activo');
        
        if($strNombreElemento)
        {
            $sql.= " AND UPPER(E.NOMBRE_ELEMENTO) LIKE :nombreTipoElemento ";
            $query->setParameter("nombreTipoElemento", strtoupper('%' . $strNombreElemento . '%'));
        }


        $rsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');
        $rsm->addScalarResult(strtoupper('NOMBRE_MODELO_ELEMENTO'), 'nombreModeloElemento', 'string');
        $rsm->addScalarResult(strtoupper('ID_ELEMENTO'), 'idElemento', 'integer');

        $query->setSQL($sql);
        $encontrados = $query->getResult();
        $totalSolicitudes = count($encontrados);
        $solicitudesArray = array();
        if($encontrados)
        {
            foreach($encontrados as $registro)
            {
                $solicitudesArray[] = array(
                    'idElemento'            => $registro['idElemento'],
                    'nombreElemento'        => $registro['nombreElemento'],
                    'nombreModeloElemento'  => $registro['nombreModeloElemento']);
            }
        }

        $resultadoArray['registros'] = $solicitudesArray;
        $resultadoArray['total'] = $totalSolicitudes;
        return $resultadoArray;
    }

    /**
     * getResultadoOltsMigrando
     *
     * Método que retorna el array con la informacion de procesamiento de un olt con cambio de plan                                   
     *      
     * @param string $strNombreElemento
     * 
     * @return array $arrayResultados [ 'registros', 'total' ]
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 11-02-2016
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 22-03-2016 - Se modifica query de monitoreo para que muestre la informacion de olts que han sido reversados
     *                           y contienen solicitudes anuladas, se validad que se verifique el estado despues del groupby del
     *                           ultimo creado y que sea diferente de Anulada
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 05-12-2018 - Se modifica el detalle nombre del elemento para el nuevo cambio de plan masivo por middleware
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 24-12-2019 - Se modifica los estados de la solicitud de cambio de plan masivo para consultar el número de registros 
     *                            procesados por olt
     * 
     * @author Alberto Arias <farias@telconet.ec>
     * @version 1.4 13-04-2023 - Se agrega filtro por empresa mediante el prefijo de la empresa en sesión.
     */
    public function getResultadoOltsMigrando($strNombreElemento, $strPrefijoEmpresa)
    {
        $arrayResultado = array();

        try
        {
            $rsm = new ResultSetMappingBuilder($this->_em);
            $query = $this->_em->createNativeQuery(null, $rsm);

            $strWhere = "";
            if($strNombreElemento && $strNombreElemento != "")
            {
                $strWhere .= " AND ELEMENTO.NOMBRE_ELEMENTO LIKE :nombreElemento ";
                $query->setParameter('nombreElemento', '%' . $strNombreElemento . '%');
            }

            $strSelectCont = "SELECT COUNT(COUNT(*)) CONT ";

            $strSelectData = "SELECT 
                                ELEMENTO.ID_ELEMENTO,
                                ELEMENTO.NOMBRE_ELEMENTO,
                                INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:detalleReferencia,ELEMENTO.ID_ELEMENTO,:estado) 
                                    TOTAL_MIGRAR,
                               INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:detalleClientesAProcesar,ELEMENTO.ID_ELEMENTO,:estado) 
                                    TOTAL_A_PROCESAR,
                                INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:detalleClientesSinConfigurar,ELEMENTO.ID_ELEMENTO,:estado) 
                                    TOTAL_NO_CONFIGURADOS,
                                INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:detalleMigracion,ELEMENTO.ID_ELEMENTO,:estado) 
                                    ESTADO_MIGRACION,
                                NVL(INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:detalleFechaInicio,ELEMENTO.ID_ELEMENTO,:estado),'-') 
                                    FECHA_INICIO,
                                NVL(INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:detalleFechaFin,ELEMENTO.ID_ELEMENTO,:estado),'-') 
                                    FECHA_FIN";
            $strSql = "
                      FROM 
                        INFO_ELEMENTO ELEMENTO,
                        INFO_DETALLE_SOLICITUD SOLICITUD
                      WHERE ELEMENTO.ID_ELEMENTO      = SOLICITUD.ELEMENTO_ID
                      AND SOLICITUD.TIPO_SOLICITUD_ID =
                        (SELECT ts.ID_TIPO_SOLICITUD
                        FROM admi_tipo_solicitud ts
                        WHERE ts.descripcion_solicitud = :solicitud
                        AND ts.estado                  = :estado
                        )
                      AND (SOLICITUD.ESTADO = :estadoPendiente OR SOLICITUD.ESTADO = :estadoFinalizada OR SOLICITUD.ESTADO = :estadoFallo)
                      AND EXISTS
                        (SELECT DETALLE_VALOR
                        FROM INFO_DETALLE_ELEMENTO
                        WHERE DETALLE_NOMBRE = :detalleReferencia
                        AND ELEMENTO_ID      = ELEMENTO.ID_ELEMENTO
                        )
                      AND EXISTS
                        (SELECT DETALLE_VALOR
                        FROM INFO_DETALLE_ELEMENTO
                        WHERE DETALLE_NOMBRE = :detalleMigracion
                        AND ELEMENTO_ID      = ELEMENTO.ID_ELEMENTO
                        )
                      AND SOLICITUD.FE_CREACION =
                        (SELECT MAX(FE_CREACION)
                        FROM INFO_DETALLE_SOLICITUD
                        WHERE ELEMENTO_ID = ELEMENTO.ID_ELEMENTO
                        )
                      $strWhere
                      GROUP BY 
                        ELEMENTO.ID_ELEMENTO,
                        ELEMENTO.NOMBRE_ELEMENTO,
                        SOLICITUD.FE_CREACION
                      ORDER BY 
                        SOLICITUD.FE_CREACION DESC";

            $rsm->addScalarResult('ID_ELEMENTO', 'idElemento', 'integer');
            $rsm->addScalarResult('NOMBRE_ELEMENTO', 'nombreOlt', 'string');
            $rsm->addScalarResult('TOTAL_MIGRAR', 'totalClientes', 'integer');
            $rsm->addScalarResult('TOTAL_A_PROCESAR', 'totalAProcesar', 'integer');
            $rsm->addScalarResult('TOTAL_NO_CONFIGURADOS', 'totalNoConfigurados', 'integer');
            $rsm->addScalarResult('ESTADO_MIGRACION', 'estadoMigracion', 'string');
            $rsm->addScalarResult('FECHA_INICIO', 'fechaInicio', 'string');
            $rsm->addScalarResult('FECHA_FIN', 'fechaFin', 'string');
            $rsm->addScalarResult('CONT', 'cont', 'integer');

            $strNombreDetalleMg               = "CAMBIO_PLAN_MASIVO_".$strPrefijoEmpresa;
            $strDetalleReferencia             = "TOTAL_CLIENTES_CPM_".$strPrefijoEmpresa;
            $strDetalleClientesSi             = "TOTAL_CLIENTES_SI_CPM_".$strPrefijoEmpresa;
            $strDetalleClientesNo             = "TOTAL_CLIENTES_NO_CPM_".$strPrefijoEmpresa;
            $strDetalleClientesAProcesar      = "TOTAL_CLIENTES_CPM_A_PROCESAR_".$strPrefijoEmpresa;
            $strDetalleClientesSinConfigurar  = "TOTAL_CLIENTES_CPM_NO_PROCESADOS_".$strPrefijoEmpresa;
            $strDetalleFechaInicio            = "FECHA_INICIO_CPM_".$strPrefijoEmpresa;
            $strDetalleFechaFin               = "FECHA_FIN_CPM_".$strPrefijoEmpresa;

            $query->setParameter('solicitud', 'SOLICITUD CAMBIO PLAN MASIVO');
            $query->setParameter('estado', 'Activo');
            $query->setParameter('estadoPendiente', 'Pendiente');
            $query->setParameter('estadoFinalizada', 'Finalizada');
            $query->setParameter('estadoFallo', 'Fallo');
            $query->setParameter('detalleReferencia', $strDetalleReferencia);
            $query->setParameter('no', 'NO');
            $query->setParameter('detalleClientesSi', $strDetalleClientesSi);
            $query->setParameter('detalleClientesNo', $strDetalleClientesNo);
            $query->setParameter('detalleClientesAProcesar', $strDetalleClientesAProcesar);
            $query->setParameter('detalleClientesSinConfigurar', $strDetalleClientesSinConfigurar);
            $query->setParameter('detalleMigracion', $strNombreDetalleMg);
            $query->setParameter('detalleOltMigrado', 'OLT MIGRADO CNR');
            $query->setParameter('detalleFechaInicio', $strDetalleFechaInicio);
            $query->setParameter('detalleFechaFin', $strDetalleFechaFin);

            $query->setSQL($strSelectCont . $strSql);

            $arrayResultado['total'] = $query->getSingleScalarResult();

            $query->setSQL($strSelectData . $strSql);

            $arrayResultado['resultado'] = $query->getArrayResult();
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }

        return $arrayResultado;
    }

    /**
     * getJsonClientesNoConfiguradosPorOlt
     *
     * Método que retorna el json con los clientes que no fueron configurados en el proceso de cambio de plan masivo                                    
     *      
     * @param integer $intIdElemento 
     * @param integer $intStart
     * @param integer $intLimit
     * @param integer $intIdLogin
     * 
     * @return json
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 11-02-2016
     *     
     */
    public function getJsonClientesNoConfiguradosPorOlt($intIdElemento, $intIdLogin, $intStart, $intLimit, $strCodEmpresa)
    {
        $arrayResultado = $this->getResultadoClientesNoConfiguradosPorOlt($intIdElemento, $intIdLogin, $intStart, $intLimit, $strCodEmpresa);

        $total = $arrayResultado['total'];

        if($total > 0)
        {
            $resultado = $arrayResultado['resultado'];

            if($resultado)
            {
                foreach($resultado as $data)
                {
                    $arrayEncontrados[] = array(
                        "login" => $data['login'],
                        "estado" => $data['estado'],
                        "puerto" => $data['puerto'],
                        "observacion" => $data['observacion'],
                        "solicitud" => $data['solicitud']
                    );
                }

                $arrayRespuesta = array('total' => $total, 'encontrados' => $arrayEncontrados);
            }
            else
            {
                $arrayRespuesta = array('total' => 0, 'encontrados' => '[]');
            }
        }
        else
        {
            $arrayRespuesta = array('total' => 0, 'encontrados' => '[]');
        }

        $jsonData = json_encode($arrayRespuesta);
        return $jsonData;
    }

    /**
     * getResultadoClientesNoConfiguradosPorOlt
     *
     * Método que retorna el array con los clientes que no fueron configurados en el proceso de cambio de plan masivo                                     
     *      
     * @param integer $intIdElemento 
     * @param integer $intStart
     * @param integer $intLimit
     * @param integer $intIdLogin
     * 
     * @return array $arrayResultados [ 'registros', 'total' ]
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 11-02-2016
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 05-12-2018 Se modifica consulta por proceso de cambio de plan masivo por middleware
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 24-12-2018 Se modifica consulta para el escenario en que el servicio tenga más de una solicitud de cambio de plan masivo
     *     
     */
    public function getResultadoClientesNoConfiguradosPorOlt($intIdElemento, $intIdLogin, $intStart, $intLimit, $strCodEmpresa)
    {
        $arrayResultado = array();

        try
        {
            $rsm = new ResultSetMappingBuilder($this->_em);
            $query = $this->_em->createNativeQuery(null, $rsm);

            $strWhere = "";

            if($intIdLogin != "")
            {
                $strWhere .= " AND PUNTO.ID_PUNTO = :punto ";
                $query->setParameter('punto', $intIdLogin);
            }

            $strSelectCont = "SELECT COUNT(*) CONT ";

            $strSelectData = "SELECT 
                                PUNTO.LOGIN,
                                INTERFAZE.NOMBRE_INTERFACE_ELEMENTO PUERTO,
                                SERVICIO.ESTADO,                               
                                DET.OBSERVACION,
                                SOL_CPM.ID_DETALLE_SOLICITUD AS SOLICITUD ";
            $strSql = " 
                    FROM 
                    DB_INFRAESTRUCTURA.INFO_PROCESO_MASIVO_CAB CAB,
                    DB_INFRAESTRUCTURA.INFO_PROCESO_MASIVO_DET DET,
                    DB_COMERCIAL.INFO_PUNTO PUNTO,
                    DB_COMERCIAL.INFO_SERVICIO SERVICIO,
                    DB_COMERCIAL.INFO_SERVICIO_TECNICO ST,
                    DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INTERFAZE,
                    DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOL_CPM,
                    DB_COMERCIAL.ADMI_TIPO_SOLICITUD TIPO_SOL_CPM,
                    DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER,
                    DB_COMERCIAL.INFO_EMPRESA_ROL IER,
                    DB_COMERCIAL.INFO_EMPRESA_GRUPO IEG
                WHERE CAB.ID_PROCESO_MASIVO_CAB = DET.PROCESO_MASIVO_CAB_ID
                AND PUNTO.ID_PUNTO              = DET.PUNTO_ID
                AND SERVICIO.ID_SERVICIO        = DET.SERVICIO_ID
                AND SERVICIO.ID_SERVICIO        = ST.SERVICIO_ID
                AND ST.INTERFACE_ELEMENTO_ID    = INTERFAZE.ID_INTERFACE_ELEMENTO
                AND SOL_CPM.SERVICIO_ID         = SERVICIO.ID_SERVICIO
                AND SOL_CPM.ELEMENTO_ID         = CAB.ELEMENTO_ID
                AND IPER.ID_PERSONA_ROL         = PUNTO.PERSONA_EMPRESA_ROL_ID
                AND IER.ID_EMPRESA_ROL          = IPER.EMPRESA_ROL_ID
                AND IEG.COD_EMPRESA             = IER.EMPRESA_COD
                AND IEG.COD_EMPRESA             = :codEmpresa
                AND SOL_CPM.ESTADO              = :estadoFallo 
                AND TIPO_SOL_CPM.ID_TIPO_SOLICITUD = SOL_CPM.TIPO_SOLICITUD_ID
                AND TIPO_SOL_CPM.DESCRIPCION_SOLICITUD = :tipoSolCpm
                $strWhere
                AND CAB.ELEMENTO_ID             = :elemento
                AND CAB.TIPO_PROCESO            = :tipoProceso
                AND (DET.ESTADO = :estado OR DET.ESTADO = :estadoDet ) 
                AND CAB.ESTADO                  = :estado ";

            $rsm->addScalarResult('LOGIN', 'login', 'string');
            $rsm->addScalarResult('ESTADO', 'estado', 'string');
            $rsm->addScalarResult('OBSERVACION', 'observacion', 'string');
            $rsm->addScalarResult('SOLICITUD', 'solicitud', 'integer');
            $rsm->addScalarResult('PUERTO', 'puerto', 'string');
            $rsm->addScalarResult('CONT', 'cont', 'integer');

            $query->setParameter('elemento', $intIdElemento);
            $query->setParameter('estado', 'Pendiente');
            $query->setParameter('estadoDet', 'PrePendiente');
            $query->setParameter('tipoProceso', 'CambioPlanMasivo');
            $query->setParameter('estadoFallo', 'Fallo');
            $query->setParameter('tipoSolCpm', 'SOLICITUD CAMBIO PLAN MASIVO');
            $query->setParameter('codEmpresa', $strCodEmpresa);

            $query->setSQL($strSelectCont . $strSql);

            $arrayResultado['total'] = $query->getSingleScalarResult();

            $query->setSQL($strSelectData . $strSql);

            $objQuery = $this->setQueryLimit($query, $intLimit, $intStart);

            $arrayResultado['resultado'] = $objQuery->getArrayResult();
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }

        return $arrayResultado;
    }

    /**
     * getJsonHistorialCambioPlan
     *
     * Método que retorna el json con el Historial de procesamientos previos de un olt que paso por cambio de plan masivo                               
     *      
     * @param integer $intIdElemento 
     * @param integer $intStart
     * @param integer $intLimit
     * 
     * @return json
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 11-02-2016
     *     
     * @author Alberto Arias <farias@telconet.ec>
     * @version 1.1 17-04-2023 Se agrega filtro por empresa en sesión
     */
    public function getJsonHistorialCambioPlan($intIdElemento, $intStart, $intLimit, $strPrefijoEmpresa)
    {
        $arrayResultado = $this->getResultadoHistorialCambioPlan($intIdElemento, $intStart, $intLimit, $strPrefijoEmpresa);

        $total = $arrayResultado['total'];

        if($total > 0)
        {
            $resultado = $arrayResultado['resultado'];

            if($resultado)
            {
                foreach($resultado as $data)
                {
                    $arrayEncontrados[] = array(
                        "totalClientes" => $data['totalClientes'],
                        "totalClientesSi" => $data['totalClientesSi'],
                        "totalClientesNo" => $data['totalClientesNo'],
                        "totalNoConfigurados" => $data['totalNoConfigurados'],
                        "fechaInicio" => $data['fechaInicio'],
                        "fechaFin" => $data['fechaFin']
                    );
                }

                $arrayRespuesta = array('total' => $total, 'encontrados' => $arrayEncontrados);
            }
            else
            {
                $arrayRespuesta = array('total' => 0, 'encontrados' => '[]');
            }
        }
        else
        {
            $arrayRespuesta = array('total' => 0, 'encontrados' => '[]');
        }

        $jsonData = json_encode($arrayRespuesta);
        return $jsonData;
    }
    
    /* Documentacion para el método 'getJsonInfoBackboneByElemento'
     *
     * Método que retorna un json de la informacion de backbone de un tipo de elemento
     *      
     * @author Kenneth Jimenez <kjimenez@telconet.ec>
     * @version 1.0 23-03-2016
     *
     * @author Eduardo Plua <eplua@telconet.ec>
     * @version 1.1 26-05-2016 - Se recupera elementoPe desde ws networking
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 23-08-2019 - Se agrega el parametro: $strBandCliente, se busca si el cliente en sesion esta configurado en el proyecto
     *                           de MAPEO de VRF
     *
     * @param $intIdElemento  -> id elemento SWITCH
     * @param $objElementoPe  -> entidad PE
     * @param $strBandCliente -> valor 'S' o 'N' valor para identificar si es o no un cliente permitido para el mapeo de VRF
     */
    public function getJsonInfoBackboneByElemento($intIdElemento,$objElementoPe,$strBandCliente)
    {
        $arrayInfo = $this->getInfoBackboneByElemento($intIdElemento,$objElementoPe,$strBandCliente);
        
        return json_encode($arrayInfo);
    }
    
    /**
     * Documentacion para el método 'getInfoBackboneByElemento'
     *
     * Método que retorna un array de la informacion de backbone de un tipo de elemento
     * 
     * @author Kenneth Jimenez <kjimenez@telconet.ec>
     * @version 1.0 23-03-2016
     *
     * @author Eduardo Plua <eplua@telconet.ec>
     * @version 1.1 26-05-2016 - Se recupera elementoPe desde ws networking
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 23-08-2019 - Se agrega el parametro: $strBandCliente, se busca si el cliente en sesion esta configurado en el proyecto
     *                           de MAPEO de VRF
     *
     * @param $intIdElemento  -> id elemento SWITCH
     * @param $objElementoPe  -> entidad PE
     * @param $strBandCliente -> valor 'S' o 'N' valor para identificar si es o no un cliente permitido para el mapeo de VRF
     */
    public function getInfoBackboneByElemento($intIdElemento,$objElementoPe,$strBandCliente)
    {
        $arrayInfo                        = array();
        $arrayInfo['idElementoPadre']     = "No definido";
        $arrayInfo['nombreElementoPadre'] = "No definido";
        $arrayInfo['anillo']              = "No definido";
        $arrayInfo['min']                 = "No definido";
        $arrayInfo['max']                 = "No definido";
        $strEsClienteMapeo                = "N";
        $strHabilidaValidacion            = "N";
        $strEsPePermitido                 = "N";

        if(is_object($objElementoPe))
        {
            $arrayInfo['idElementoPadre']     = $objElementoPe->getId();
            $arrayInfo['nombreElementoPadre'] = $objElementoPe->getNombreElemento();
        }        
        
        $arrayDetalles = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                        ->getDetallesElementoByNombre($intIdElemento, 'ANILLO');
        if($arrayDetalles)
        {
            $numAnillo           = $arrayDetalles[0]['detalleValor'];
            $arrayInfo['anillo'] = $numAnillo;
            
            $arrayParametros     = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne("ANILLOS_MPLS", 
                                                     "TECNICO", 
                                                     "", 
                                                     $numAnillo, 
                                                     "", 
                                                     "", 
                                                     "", 
                                                     ""
                                                   );

            if($arrayParametros)
            {
                $arrayInfo['min']       = $arrayParametros['valor1'];
                $arrayInfo['max']       = $arrayParametros['valor2'];
                $arrayInfo['vlan']      = $arrayParametros['valor3'];
                $arrayInfo['esVirtual'] = is_numeric($numAnillo)?'NO':'SI';
            }

            $arrayInfo['esClienteMapeo'] = $strEsClienteMapeo;

            //Ingresa a validaciones del proyecto de segmentacion de vlan solo si es un cliente permitido, por ej, NEDETEL
            if($strBandCliente === "S")
            {
                //Se verifica si es necesario aplicar la validación
                $arrayValoresParam = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('PARAMETROS PROYECTO SEGMENTACION VLAN',
                                                                                                        'INFRAESTRUCTURA',
                                                                                                        'ASIGNAR RECURSOS DE RED',
                                                                                                        'MAPEO VRF - HABILITAR_VALIDACION',
                                                                                                        '',
                                                                                                        '',
                                                                                                        '',
                                                                                                        '',
                                                                                                        '',
                                                                                                        '');

                if(isset($arrayValoresParam["valor1"]) && !empty($arrayValoresParam["valor1"]))
                {
                    $strHabilidaValidacion = $arrayValoresParam["valor1"];
                }

                //Se ingresa para verificar si el PE que se envia como parametro esta dentro de los permitidos
                if($strHabilidaValidacion === "S")
                {
                    //Se verifica si el cliente esta configurado para obtener vlans por vrf
                    $arrayValoresParametros = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('PARAMETROS PROYECTO SEGMENTACION VLAN',
                                                                 'INFRAESTRUCTURA',
                                                                 'ASIGNAR RECURSOS DE RED',
                                                                 'MAPEO VRF - PE_CONFIGURADO',
                                                                 $arrayInfo['idElementoPadre'],
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 '');

                    if(isset($arrayValoresParametros["valor1"]) && !empty($arrayValoresParametros["valor1"]))
                    {
                        $strEsPePermitido = "S";
                    }

                    if($strEsPePermitido === "S" && $numAnillo === "0")
                    {
                        //Se verifica si el cliente esta configurado para obtener vlans por vrf
                        $arrayValoresParametros = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne('PARAMETROS PROYECTO SEGMENTACION VLAN',
                                                                     'INFRAESTRUCTURA',
                                                                     'ASIGNAR RECURSOS DE RED',
                                                                     'RANGO_VLANS',
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     '');

                        if(isset($arrayValoresParametros["valor1"]) && !empty($arrayValoresParametros["valor1"]))
                        {
                            $strEsClienteMapeo = "S";

                            $arrayInfo['min']            = $arrayValoresParametros["valor1"] + 1;
                            $arrayInfo['max']            = $arrayValoresParametros["valor2"];
                            $arrayInfo['esClienteMapeo'] = $strEsClienteMapeo;
                        }
                    }
                }
            }
        }

        return $arrayInfo;
    }

    /**
     * Documentacion para la función 'getJsonInfoBackboneByElementoGpon'
     *
     * Función que retorna un array de la informacion de backbone de un tipo de elemento olt.
     * 
     * @param array $arrayParametros['intIdElemento'  => id elemento del Olt.
     *                               'objElementoPe'  => entidad PE.
     *                               'strCodEmpresa'  => código de la empresa en sesión.
     *                              ]
     *
     * @return json $objJsonData json con el catálogo de vlans disponibles para el tipo de red Gpon.
     *
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 1.0 19-11-2019
     *
     */
    public function getJsonInfoBackboneByElementoGpon($arrayParametros)
    {
        $intIdElemento                    = ( isset($arrayParametros['intIdElemento']) && !empty($arrayParametros['intIdElemento']) )
                                              ? $arrayParametros['intIdElemento'] : '';
        $objElementoPe                    = ( isset($arrayParametros['objElementoPe']) && !empty($arrayParametros['objElementoPe']) )
                                              ? $arrayParametros['objElementoPe'] : '';
        $strCodEmpresa                    = ( isset($arrayParametros['strCodEmpresa']) && !empty($arrayParametros['strCodEmpresa']) )
                                              ? $arrayParametros['strCodEmpresa'] : '';
        $arrayInfo                        = array();
        $arrayInfo['idElementoPadre']     = "No definido";
        $arrayInfo['nombreElementoPadre'] = "No definido";
        $arrayInfo['anillo']              = "No definido";
        $arrayInfo['min']                 = "No definido";
        $arrayInfo['max']                 = "No definido";
        $arrayInfo['esClienteMapeo']      = "N";
        $strTipoElemento                  = "";

        try
        {
            if(empty($objElementoPe) || !is_object($objElementoPe) || empty($intIdElemento))
            {
                throw new \Exception("Los parámetros proporcionados para la búsqueda del rango de vlans no son válidos.");
            }
            $arrayInfo['idElementoPadre']     = $objElementoPe->getId();
            $arrayInfo['nombreElementoPadre'] = $objElementoPe->getNombreElemento();
            $objElemento                      = $this->_em->getRepository('schemaBundle:InfoElemento')->find($intIdElemento);

            if(is_object($objElemento) && !empty($objElemento))
            {
                $strTipoElemento = $objElemento->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();
                if(!empty($strTipoElemento) && $strTipoElemento == 'OLT')
                {
                    $arrayParametros = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->get('NUEVA_RED_GPON_TN',
                                                                'COMERCIAL',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                'CATALOGO_VLANS_DATOS',
                                                                $strCodEmpresa);
                    if(!empty($arrayParametros) && is_array($arrayParametros))
                    {
                        $arrayInfo['min']                 = $arrayParametros[0]['valor1'];
                        $arrayInfo['max']                 = $arrayParametros[0]['valor2'];
                        $arrayInfo['vlan']                = $arrayParametros[0]['valor3'];
                        $arrayInfo['esVirtual']           = 'NO';
                    }
                }
            }
            $objJsonData = json_encode($arrayInfo);
        }
        catch(\Exception $ex)
        {
            $objJsonData = $ex->getMessage();
        }
        return $objJsonData;
    }

    /**
     * Obtiene registros de servicios reversados por olt 
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 16-03-2016
     * 
     * @param type $elementoId
     * 
     * @return array $data
     **/
    
    public function getResultadoServiciosReversadoPorOlt($elementoId)
    {
        $rsm            = new ResultSetMappingBuilder($this->_em);
        $query          = $this->_em->createNativeQuery(null, $rsm);
       

        $sql = "SELECT login, planAnterior , precioAnterior, planActual, precioActual FROM 
                (SELECT dd.login as login,
                  (SELECT ii.nombre_plan
                  FROM db_comercial.info_plan_cab ii
                  WHERE ii.id_plan=HH.VALOR
                  ) AS planAnterior,
                  (SELECT SUM(D1.COSTO_ITEM)
                  FROM DB_COMERCIAL.INFO_PLAN_DET D1
                  WHERE D1.PLAN_ID   = HH.VALOR
                  AND D1.ESTADO NOT IN (:estadoParam)
                  )               AS precioAnterior,
                  FF.NOMBRE_PLAN  AS planActual,
                  AA.PRECIO_VENTA AS precioActual
                FROM db_comercial.info_servicio aa,
                  db_comercial.INFO_SERVICIO_HISTORIAL bb,
                  db_comercial.info_servicio_tecnico cc,
                  db_comercial.info_punto dd,
                  db_comercial.info_plan_cab ff,
                  db_comercial.INFO_DETALLE_SOLICITUD gg,
                  db_comercial.INFO_DETALLE_SOL_CARACT hh
                WHERE aa.ID_SERVICIO = BB.SERVICIO_ID
                AND aa.ID_SERVICIO   =CC.SERVICIO_ID
                AND aa.punto_id      =DD.ID_PUNTO
                AND AA.PLAN_ID       =FF.ID_PLAN
                AND CC.ELEMENTO_ID   =:elementoIdParam
                AND TO_CHAR(BB.observacion) LIKE :observacionParam
                AND TRUNC(BB.FE_CREACION)   =TRUNC(SYSDATE)
                AND AA.ID_SERVICIO          = GG.SERVICIO_ID
                AND GG.ID_DETALLE_SOLICITUD =
                  (SELECT MAX(tt. id_detalle_solicitud)
                  FROM db_comercial.info_detalle_solicitud tt
                  WHERE tt.servicio_id    = AA.ID_SERVICIO
                  AND tt.tipo_solicitud_id=:tipoSolicitudIdParam
                  )
                AND HH.DETALLE_SOLICITUD_ID=GG.ID_DETALLE_SOLICITUD
                AND HH.CARACTERISTICA_ID   =:caracteristicaIdParam)
                GROUP BY login, planAnterior , precioAnterior, planActual, precioActual";
        
        $rsm->addScalarResult(strtoupper('login')          , 'login',          'string');
        $rsm->addScalarResult(strtoupper('planAnterior')   , 'planAnterior',   'string');
        $rsm->addScalarResult(strtoupper('precioAnterior') , 'precioAnterior', 'float');
        $rsm->addScalarResult(strtoupper('planActual')     , 'planActual',     'string');
        $rsm->addScalarResult(strtoupper('precioActual')   , 'precioActual',   'float');

        $query->setParameter("elementoIdParam"       , $elementoId);
        $query->setParameter("observacionParam"      , 'Se reverso el servicio a su plan anterior al cambio de plan masivo%');
        $query->setParameter("estadoParam"           , 'Eliminado');
        $query->setParameter("tipoSolicitudIdParam"  , 116);
        $query->setParameter("caracteristicaIdParam" , 27);

        $query->setSQL($sql);
        $arrayServicios = $query->getResult();

        return $arrayServicios;
    }
    
    /**
     * getResultadoHistorialCambioPlan
     *
     * Método que retorna el array con el Historial de procesamientos previos de un olt que paso por cambio de plan masivo                                        
     *      
     * @param integer $intIdElemento 
     * @param integer $intStart
     * @param integer $intLimit
     * 
     * @return array $arrayResultados [ 'registros', 'total' ]
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 11-02-2016
     *     
     * @author Alberto Arias <farias@telconet.ec>
     * @version 1.1 17-04-2023 Se agrega filtro por empresa en sesión
     */
    public function getResultadoHistorialCambioPlan($intIdElemento, $intStart, $intLimit, $strPrefijoEmpresa)
    {
        $arrayResultado = array();

        try
        {
            $rsm = new ResultSetMappingBuilder($this->_em);
            $query = $this->_em->createNativeQuery(null, $rsm);

            $strSelectCont = "SELECT COUNT(*) CONT ";

            $strSelectData = "SELECT
                                DETALLE.DETALLE_VALOR TOTAL_MIGRAR,
                                (SELECT DETALLE_VALOR FROM INFO_DETALLE_ELEMENTO WHERE REF_DETALLE_ELEMENTO_ID = DETALLE.ID_DETALLE_ELEMENTO AND
                                DETALLE_NOMBRE = :detalleClientesSi) TOTAL_CLIENTE_SI,
                                (SELECT DETALLE_VALOR FROM INFO_DETALLE_ELEMENTO WHERE REF_DETALLE_ELEMENTO_ID = DETALLE.ID_DETALLE_ELEMENTO AND
                                DETALLE_NOMBRE = :detalleClientesNo) TOTAL_CLIENTE_NO,
                                (SELECT DETALLE_VALOR FROM INFO_DETALLE_ELEMENTO WHERE REF_DETALLE_ELEMENTO_ID = DETALLE.ID_DETALLE_ELEMENTO AND
                                DETALLE_NOMBRE = :detalleClientesSinConfigurar) TOTAL_NO_CONFIGURADOS,
                                (SELECT DETALLE_VALOR FROM INFO_DETALLE_ELEMENTO WHERE REF_DETALLE_ELEMENTO_ID = DETALLE.ID_DETALLE_ELEMENTO AND
                                DETALLE_NOMBRE = :detalleFechaInicio) FECHA_INICIO,
                                (SELECT DETALLE_VALOR FROM INFO_DETALLE_ELEMENTO WHERE REF_DETALLE_ELEMENTO_ID = DETALLE.ID_DETALLE_ELEMENTO AND
                                DETALLE_NOMBRE = :detalleFechaFin) FECHA_FIN";
            $strSql = "
                      FROM 
                        INFO_DETALLE_ELEMENTO DETALLE 
                      WHERE 
                        DETALLE.ELEMENTO_ID       = :elemento AND 
                        DETALLE.DETALLE_NOMBRE    = :detalleReferencia AND 
                        DETALLE.ESTADO            = :estado";

            $rsm->addScalarResult('TOTAL_MIGRAR', 'totalClientes', 'integer');
            $rsm->addScalarResult('TOTAL_CLIENTE_SI', 'totalClientesSi', 'integer');
            $rsm->addScalarResult('TOTAL_CLIENTE_NO', 'totalClientesNo', 'integer');
            $rsm->addScalarResult('TOTAL_NO_CONFIGURADOS', 'totalNoConfigurados', 'integer');
            $rsm->addScalarResult('FECHA_INICIO', 'fechaInicio', 'string');
            $rsm->addScalarResult('FECHA_FIN', 'fechaFin', 'string');
            $rsm->addScalarResult('CONT', 'cont', 'integer');

            $strDetalleReferencia                 = 'TOTAL_CLIENTES_CPM_'.$strPrefijoEmpresa;
            $strDetalleClientesSi                 = 'TOTAL_CLIENTES_SI_CPM_'.$strPrefijoEmpresa;
            $strDetalleClientesNo                 = 'TOTAL_CLIENTES_NO_CPM_'.$strPrefijoEmpresa;
            $strDetalleClientesSinConfigurar      = 'TOTAL_CLIENTES_CPM_NO_PROCESADOS_'.$strPrefijoEmpresa;
            $strDetalleFechaInicio                = 'FECHA_INICIO_CPM_'.$strPrefijoEmpresa;
            $strDetalleFechaFin                   = 'FECHA_FIN_CPM_'.$strPrefijoEmpresa;

            $query->setParameter('estado', 'Eliminado');
            $query->setParameter('detalleReferencia', $strDetalleReferencia);
            $query->setParameter('detalleClientesSi', $strDetalleClientesSi);
            $query->setParameter('detalleClientesNo', $strDetalleClientesNo);
            $query->setParameter('detalleClientesSinConfigurar', $strDetalleClientesSinConfigurar);
            $query->setParameter('detalleFechaInicio', $strDetalleFechaInicio);
            $query->setParameter('detalleFechaFin', $strDetalleFechaFin);
            $query->setParameter('elemento', $intIdElemento);


            $query->setSQL($strSelectCont . $strSql);

            $arrayResultado['total'] = $query->getSingleScalarResult();

            $query->setSQL($strSelectData . $strSql);

            $objQuery = $this->setQueryLimit($query, $intLimit, $intStart);

            $arrayResultado['resultado'] = $objQuery->getArrayResult();
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }

        return $arrayResultado;
    }
    
    /******************************************Asignación Vehicular a Cuadrilla***************************/
    
    /**
     * getJSONVehiculosDisponibles, Obtiene el json con los vehículos que no se encuentran ocupados en el momento en que se quiere realizar
     * la asignación vehicular  
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 24-08-2016 Se obtiene el id de la solicitud realizada para poder conocer exactamente qué chofer predefinido está asignado
     * 
     * 
     * @param  array $arrayParametros[  'strEstadoActivo'           => string con el estado Activo,
     *                                  'intEmpresa'                => id de la empresa en sesión,
     *                                  'arrayDetallesFechasInicio' => array con los nombres de los detalles de las fechas de inicio de la 
     *                                                                  asignación vehicular y las asignación provisional del chofer,
     *                                  'arrayDetallesFechasFin'    => array con los nombres de los detalles de las fechas fin de la 
     *                                                                  asignación vehicular y las asignación provisional del chofer,
     *                                  'arrayDetallesHorasInicio'  => array con los nombres de los detalles de las horas de inicio de la 
     *                                                                  asignación vehicular y las asignación provisional del chofer
     *                                  'arrayDetallesHorasFin'     => array con los nombres de los detalles de las horas fin de la 
     *                                                                  asignación vehicular y las asignación provisional del chofer
     *                                  'strTipoElemento'           => string con el tipo de elemento VEHICULO,
     *                                  'intModeloElemento'         => id del modelo del vehículo,
     *                                  'strFechaDesdeAsignacion'   => string de la fecha en la que se quiere realizar la asignacion,
     *                                  'strFechaHastaAsignacion'   => string de la fecha en la que se quiere realizar la asignacion,
     *                                  'strHoraDesdeAsignacion'    => string de la hora inicio de la asignacion
     *                                  'strHoraHastaAsignacion'    => string de la hora inicio de la asignacion,
     *                                  'nombreElemento'            => placa del vehículo
     *                               ]
     * 
     * @return json $jsonData
     */
    public function getJSONVehiculosDisponibles($arrayParametros)
    {
        $arrayEncontrados = array();
        $arrayResultado = $this->getResultadoVehiculosDisponibles($arrayParametros);
        $resultado = $arrayResultado['resultado'];
        $intTotal = $arrayResultado['total'];
        $total = 0;

        if($resultado)
        {
            $total = $intTotal;
            foreach($resultado as $data)
            {
                $arrayEncontrados[] = array(
                                            "intIdDetalleSolicitud" => $data['idDetalleSolicitud'],
                                            "intIdElemento"         => $data['idElemento'],
                                            "strNombreElemento"     => $data['nombreElemento']
                                      );
            }
        }

        $arrayRespuesta = array('total' => $total, 'encontrados' => $arrayEncontrados);
        $jsonData = json_encode($arrayRespuesta);
        return $jsonData;
    }
    
    
    
    /**
     * getResultadoVehiculosDisponibles, Lista todos los vehículos que no se encuentran ocupados actualmente  
     * ya sea por una asignación de vehículo a una cuadrilla o por una asignación provisional de chofer y que tengan una asignación
     * vehicular predefinida
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 11-04-2016
     * 
     * @param  array $arrayParametros[  'strEstadoActivo'           => string con el estado Activo,
     *                                  'intEmpresa'                => id de la empresa en sesión,
     *                                  'intIdZonaCuadrilla'        => id de la zona de la cuadrilla
     *                                  'intIdTareaCuadrilla'       => id de la tarea de la cuadrilla,
     *                                  'intIdDepartamentoCuadrilla'=> id del departamento de la cuadrilla,
     *                                  'intIdTipoSolicitud'        => id del tipo de solicitud de la asignación vehicular predefinida,
     *                                  'intIdCaracteristicaTareaPredefinida'       => id de la caracteristica de la tarea predefinida,
     *                                  'intIdCaracteristicaZonaPredefinida'        => id de la caracteristica de la tarea predefinida,
     *                                  'intIdCaracteristicaDepartamentoPredefinido'=> id de la caracteristica del departamento predefinido,
     *                                  'strDetalleCuadrilla'                       => nombre del detalle de la asignación vehicular a una cuadrilla
                                    
     * 
     * 
     * 
     *                                  'arrayDetallesFechasInicio' => array con los nombres de los detalles de las fechas de inicio de la 
     *                                                                  asignación vehicular y las asignación provisional del chofer,
     *                                  'arrayDetallesFechasFin'    => array con los nombres de los detalles de las fechas fin de la 
     *                                                                  asignación vehicular y las asignación provisional del chofer,
     *                                  'arrayDetallesHorasInicio'  => array con los nombres de los detalles de las horas de inicio de la 
     *                                                                  asignación vehicular y las asignación provisional del chofer
     *                                  'arrayDetallesHorasFin'     => array con los nombres de los detalles de las horas fin de la 
     *                                                                  asignación vehicular y las asignación provisional del chofer
     *                                  'strTipoElemento'           => string con el tipo de elemento VEHICULO,
     *                                  'intModeloElemento'         => id del modelo del vehículo,
     *                                  'strFechaDesdeAsignacion'   => string de la fecha en la que se quiere realizar la asignacion,
     *                                  'strFechaHastaAsignacion'   => string de la fecha en la que se quiere realizar la asignacion,
     *                                  'strHoraDesdeAsignacion'    => string de la hora inicio de la asignacion
     *                                  'strHoraHastaAsignacion'    => string de la hora inicio de la asignacion,
     *                                  'nombreElemento'            => placa del vehículo
     *                               ]
     * 
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 29-07-2016 Se modifica la búsqueda por la región a la que pertenece el vehículo con la región a la que pertenece la persona 
     *                         que realiza la búsqueda
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 24-08-2016 Se modifica la consulta de vehículos disponibles de acuerdo al horario de asignación de chofer predefinido
     * 
     * @return json $jsonData
     */
    public function getResultadoVehiculosDisponibles($arrayParametros)
    {
        $arrayRespuesta['total'] = 0;
        $arrayRespuesta['resultado'] = "";
        try
        {

            $rsm = new ResultSetMappingBuilder($this->_em);
            $rsmCount = new ResultSetMappingBuilder($this->_em);
            $ntvQuery = $this->_em->createNativeQuery(null, $rsm);
            $ntvQueryCount = $this->_em->createNativeQuery(null, $rsmCount);

            $strSelectCount = " SELECT COUNT(*) AS TOTAL ";
            $strSelect      = " SELECT DISTINCT detalleSolicitud.ID_DETALLE_SOLICITUD, ie.ID_ELEMENTO, ie.NOMBRE_ELEMENTO  ";

            

            $strFrom = "FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO ie
                        INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO ame ON ie.MODELO_ELEMENTO_ID = ame.ID_MODELO_ELEMENTO 
                        INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ate ON ame.TIPO_ELEMENTO_ID = ate.ID_TIPO_ELEMENTO 
                        INNER JOIN DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO iee ON iee.ELEMENTO_ID = ie.ID_ELEMENTO 

                        INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOLICITUD detalleSolicitud 
                            ON detalleSolicitud.ELEMENTO_ID = ie.ID_ELEMENTO 
                            
                        INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOL_HIST detalleSolicitudHist 
                                ON detalleSolicitudHist.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD 
                            
                        INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT detalleSolCaractDepartamento
                            ON detalleSolCaractDepartamento.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD ";
            
            $strZonaTarea="";
            if(isset($arrayParametros['intIdZonaCuadrilla']))
            {
                if($arrayParametros['intIdZonaCuadrilla'])
                {
                    $strFrom .= "   INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT detalleSolCaractZona
                                    ON detalleSolCaractZona.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD
                                        AND detalleSolCaractZona.CARACTERISTICA_ID=:idCaracteristicaZonaPredefinida
                                        AND detalleSolCaractZona.VALOR = :idZonaCuadrilla ";
                    $strZonaTarea.= "AND cuadrilla.ZONA_ID = :idZonaCuadrilla ";
                    
                    
                    $ntvQuery->setParameter('idCaracteristicaZonaPredefinida', $arrayParametros['intIdCaracteristicaZonaPredefinida']);
                    $ntvQueryCount->setParameter('idCaracteristicaZonaPredefinida', $arrayParametros['intIdCaracteristicaZonaPredefinida']);

                    $ntvQuery->setParameter('idZonaCuadrilla', $arrayParametros['intIdZonaCuadrilla']);
                    $ntvQueryCount->setParameter('idZonaCuadrilla', $arrayParametros['intIdZonaCuadrilla']);

                }
            }
            
            if(isset($arrayParametros['intIdTareaCuadrilla']))
            {
                if($arrayParametros['intIdTareaCuadrilla'])
                {
                    $strFrom .= "   INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT detalleSolCaractTarea
                                        ON detalleSolCaractTarea.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD
                                            AND detalleSolCaractTarea.CARACTERISTICA_ID=:idCaracteristicaTareaPredefinida
                                            AND detalleSolCaractTarea.VALOR = :idTareaCuadrilla ";
                    $strZonaTarea.= "AND cuadrilla.TAREA_ID = :idTareaCuadrilla ";
                    
                    $ntvQuery->setParameter('idCaracteristicaTareaPredefinida', $arrayParametros['intIdCaracteristicaTareaPredefinida']);
                    $ntvQueryCount->setParameter('idCaracteristicaTareaPredefinida', $arrayParametros['intIdCaracteristicaTareaPredefinida']);

                    $ntvQuery->setParameter('idTareaCuadrilla', $arrayParametros['intIdTareaCuadrilla']);
                    $ntvQueryCount->setParameter('idTareaCuadrilla', $arrayParametros['intIdTareaCuadrilla']);
                }
            }
            
            $strQueryVehiculosOcupadosPorCuadrillas=
                "   SELECT DISTINCT ie.ID_ELEMENTO 
                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO ie
                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO ame ON ie.MODELO_ELEMENTO_ID = ame.ID_MODELO_ELEMENTO
                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ate ON ame.TIPO_ELEMENTO_ID = ate.ID_TIPO_ELEMENTO
                    INNER JOIN DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO iee ON iee.ELEMENTO_ID = ie.ID_ELEMENTO 

                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO ide_cuadrilla 
                        ON ide_cuadrilla.ELEMENTO_ID = ie.ID_ELEMENTO 

                    INNER JOIN DB_COMERCIAL.ADMI_CUADRILLA cuadrilla
                        ON ide_cuadrilla.DETALLE_VALOR = cuadrilla.ID_CUADRILLA

                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO ide_fecha_inicio 
                        ON ide_fecha_inicio.ELEMENTO_ID = ie.ID_ELEMENTO 
                        
                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO ide_hora_inicio 
                        ON ide_hora_inicio.ELEMENTO_ID = ie.ID_ELEMENTO 
                            AND ide_hora_inicio.DETALLE_NOMBRE = :strDetalleHoraInicioAV 
                            AND ide_hora_inicio.ESTADO = :strEstadoActivo 

                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO ide_hora_fin ON 
                            ide_hora_fin.ELEMENTO_ID = ie.ID_ELEMENTO 
                            AND ide_hora_fin.DETALLE_NOMBRE = :strDetalleHoraFinAV
                            AND ide_hora_fin.ESTADO = :strEstadoActivo 

                    WHERE ie.ESTADO = :strEstadoActivo
                            AND ame.ESTADO = :strEstadoActivo
                            AND ate.ESTADO = :strEstadoActivo 
                            AND ate.NOMBRE_TIPO_ELEMENTO=:strTipoElemento
                            AND ame.ID_MODELO_ELEMENTO=:intModeloElemento
                            AND iee.EMPRESA_COD=:intEmpresa 
                            AND cuadrilla.DEPARTAMENTO_ID = :idDepartamentoCuadrilla "
                            .$strZonaTarea.
                            "
                            AND ide_cuadrilla.DETALLE_NOMBRE = :strDetalleCuadrilla 
                            AND ide_cuadrilla.ESTADO = :strEstadoActivo 
                            AND ide_fecha_inicio.DETALLE_NOMBRE = :strDetalleFechaInicioAV
                            AND ide_fecha_inicio.ESTADO = :strEstadoActivo 
                            AND
                            (
                              (
                                  TO_TIMESTAMP( ide_hora_fin.DETALLE_VALOR ,'HH24:MI' ) > 
                                  TO_TIMESTAMP(:strHoraDesdeAsignacion,'HH24:MI')
                                  AND
                                  TO_TIMESTAMP( ide_hora_fin.DETALLE_VALOR ,'HH24:MI' ) < 
                                  TO_TIMESTAMP(:strHoraHastaAsignacion,'HH24:MI')
                              )

                              OR

                              (
                                  TO_TIMESTAMP( ide_hora_inicio.DETALLE_VALOR ,'HH24:MI' ) < 
                                  TO_TIMESTAMP(:strHoraHastaAsignacion,'HH24:MI')
                                  AND
                                  TO_TIMESTAMP( ide_hora_inicio.DETALLE_VALOR ,'HH24:MI' ) > 
                                  TO_TIMESTAMP(:strHoraDesdeAsignacion,'HH24:MI')
                              )

                              OR
                              (
                                  TO_TIMESTAMP( ide_hora_inicio.DETALLE_VALOR ,'HH24:MI' ) <= 
                                  TO_TIMESTAMP(:strHoraDesdeAsignacion,'HH24:MI')
                                  AND
                                  TO_TIMESTAMP( ide_hora_fin.DETALLE_VALOR ,'HH24:MI' ) >= 
                                  TO_TIMESTAMP(:strHoraHastaAsignacion,'HH24:MI')
                              )
                              OR

                              (
                                  TO_TIMESTAMP( ide_hora_inicio.DETALLE_VALOR ,'HH24:MI' ) >= 
                                  TO_TIMESTAMP(:strHoraDesdeAsignacion,'HH24:MI')
                                  AND
                                  TO_TIMESTAMP( ide_hora_fin.DETALLE_VALOR ,'HH24:MI' ) <= 
                                  TO_TIMESTAMP(:strHoraHastaAsignacion,'HH24:MI')
                              )
                            )
                            AND ide_fecha_inicio.REF_DETALLE_ELEMENTO_ID=ide_hora_inicio.REF_DETALLE_ELEMENTO_ID 
                            AND ide_hora_inicio.REF_DETALLE_ELEMENTO_ID=ide_hora_fin.REF_DETALLE_ELEMENTO_ID 
                ";
            
            $strQueryVehiculosOcupadosAsignacionProvisional=
                "   SELECT DISTINCT ie.ID_ELEMENTO 
                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO ie
                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO ame ON ie.MODELO_ELEMENTO_ID = ame.ID_MODELO_ELEMENTO
                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ate ON ame.TIPO_ELEMENTO_ID = ate.ID_TIPO_ELEMENTO
                    INNER JOIN DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO iee ON iee.ELEMENTO_ID = ie.ID_ELEMENTO 

                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO ide_fecha_inicio_AP
                        ON ide_fecha_inicio_AP.ELEMENTO_ID = ie.ID_ELEMENTO 
                    
                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO ide_fecha_fin_AP
                        ON ide_fecha_fin_AP.ELEMENTO_ID = ie.ID_ELEMENTO 
                            AND ide_fecha_fin_AP.DETALLE_NOMBRE = :strDetalleFechaFinAP 
                            AND ide_fecha_fin_AP.ESTADO = :strEstadoActivo 
                        
                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO ide_hora_inicio_AP
                        ON ide_hora_inicio_AP.ELEMENTO_ID = ie.ID_ELEMENTO 
                            AND ide_hora_inicio_AP.DETALLE_NOMBRE = :strDetalleHoraInicioAP 
                            AND ide_hora_inicio_AP.ESTADO = :strEstadoActivo 

                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO ide_hora_fin_AP ON 
                            ide_hora_fin_AP.ELEMENTO_ID = ie.ID_ELEMENTO 
                            AND ide_hora_fin_AP.DETALLE_NOMBRE = :strDetalleHoraFinAP
                            AND ide_hora_fin_AP.ESTADO = :strEstadoActivo 

                    WHERE ie.ESTADO = :strEstadoActivo
                            AND ame.ESTADO = :strEstadoActivo
                            AND ate.ESTADO = :strEstadoActivo 
                            AND ate.NOMBRE_TIPO_ELEMENTO=:strTipoElemento
                            AND ame.ID_MODELO_ELEMENTO=:intModeloElemento
                            AND iee.EMPRESA_COD=:intEmpresa 
                            AND ide_fecha_inicio_AP.DETALLE_NOMBRE = :strDetalleFechaInicioAP
                            AND ide_fecha_inicio_AP.ESTADO = :strEstadoActivo 
                            AND ide_fecha_inicio_AP.REF_DETALLE_ELEMENTO_ID=ide_fecha_fin_AP.REF_DETALLE_ELEMENTO_ID 
                            AND ide_fecha_inicio_AP.REF_DETALLE_ELEMENTO_ID=ide_hora_inicio_AP.REF_DETALLE_ELEMENTO_ID 
                            AND ide_hora_inicio_AP.REF_DETALLE_ELEMENTO_ID=ide_hora_fin_AP.REF_DETALLE_ELEMENTO_ID 
                            AND 
                            (
                                (
                                    TO_TIMESTAMP( ide_fecha_fin_AP.DETALLE_VALOR ,'DD/MM/YYYY' ) >= 
                                    TO_TIMESTAMP(:strFechaDesdeAsignacion,'DD/MM/YYYY' )
                                    AND 
                                    TO_TIMESTAMP( ide_fecha_fin_AP.DETALLE_VALOR ,'DD/MM/YYYY' )<= 
                                    TO_TIMESTAMP(:strFechaHastaAsignacion,'DD/MM/YYYY' )
                                )

                                OR

                                (
                                    TO_TIMESTAMP( ide_fecha_inicio_AP.DETALLE_VALOR ,'DD/MM/YYYY' ) <= 
                                    TO_TIMESTAMP(:strFechaHastaAsignacion,'DD/MM/YYYY' )
                                    AND 
                                    TO_TIMESTAMP( ide_fecha_inicio_AP.DETALLE_VALOR ,'DD/MM/YYYY' ) >= 
                                    TO_TIMESTAMP(:strFechaDesdeAsignacion,'DD/MM/YYYY' )
                                )

                                OR

                                (
                                    TO_TIMESTAMP( ide_fecha_inicio_AP.DETALLE_VALOR ,'DD/MM/YYYY' ) <= 
                                    TO_TIMESTAMP(:strFechaDesdeAsignacion,'DD/MM/YYYY' )
                                    AND
                                    TO_TIMESTAMP( ide_fecha_fin_AP.DETALLE_VALOR ,'DD/MM/YYYY' ) >= 
                                    TO_TIMESTAMP(:strFechaHastaAsignacion,'DD/MM/YYYY' )
                                )
                            )
                            AND
                            (
                              (
                                  TO_TIMESTAMP( ide_hora_fin_AP.DETALLE_VALOR ,'HH24:MI' ) > 
                                  TO_TIMESTAMP(:strHoraDesdeAsignacion,'HH24:MI')
                                  AND
                                  TO_TIMESTAMP( ide_hora_fin_AP.DETALLE_VALOR ,'HH24:MI' ) < 
                                  TO_TIMESTAMP(:strHoraHastaAsignacion,'HH24:MI')
                              )

                              OR

                              (
                                  TO_TIMESTAMP( ide_hora_inicio_AP.DETALLE_VALOR ,'HH24:MI' ) < 
                                  TO_TIMESTAMP(:strHoraHastaAsignacion,'HH24:MI')
                                  AND
                                  TO_TIMESTAMP( ide_hora_inicio_AP.DETALLE_VALOR ,'HH24:MI' ) > 
                                  TO_TIMESTAMP(:strHoraDesdeAsignacion,'HH24:MI')
                              )

                              OR
                              (
                                  TO_TIMESTAMP( ide_hora_inicio_AP.DETALLE_VALOR ,'HH24:MI' ) <= 
                                  TO_TIMESTAMP(:strHoraDesdeAsignacion,'HH24:MI')
                                  AND
                                  TO_TIMESTAMP( ide_hora_fin_AP.DETALLE_VALOR ,'HH24:MI' ) >= 
                                  TO_TIMESTAMP(:strHoraHastaAsignacion,'HH24:MI')
                              )

                              OR

                              (
                                  TO_TIMESTAMP( ide_hora_inicio_AP.DETALLE_VALOR ,'HH24:MI' ) >= 
                                  TO_TIMESTAMP(:strHoraDesdeAsignacion,'HH24:MI')
                                  AND
                                  TO_TIMESTAMP( ide_hora_fin_AP.DETALLE_VALOR ,'HH24:MI' ) <= 
                                  TO_TIMESTAMP(:strHoraHastaAsignacion,'HH24:MI')
                              )
                            )
                ";
            
            $strValidarHorariosAsignacionPredefinida=" 
                                AND
                                (
                                    :strHoraDesdeAsignacion >= TO_CHAR( detalleSolicitudHist.FE_INI_PLAN ,'HH24:MI' )  
                                    AND
                                    :strHoraHastaAsignacion <= TO_CHAR( detalleSolicitudHist.FE_FIN_PLAN ,'HH24:MI' )  
                                ) ";
            
            $strOrderBy = " ORDER BY ie.NOMBRE_ELEMENTO ";
            $strWhere   =" WHERE 
                            detalleSolicitud.TIPO_SOLICITUD_ID = :idTipoSolicitud
                            AND detalleSolicitud.ESTADO = :strEstadoActivo 
                            AND detalleSolicitudHist.ESTADO = :strEstadoActivo 
                            AND detalleSolCaractDepartamento.CARACTERISTICA_ID=:idCaracteristicaDepartamentoPredefinido
                            AND detalleSolCaractDepartamento.VALOR = :idDepartamentoCuadrilla "
                            .$strValidarHorariosAsignacionPredefinida.
                            "AND ie.ESTADO = :strEstadoActivo
                            AND ame.ESTADO = :strEstadoActivo
                            AND ate.ESTADO = :strEstadoActivo 
                            AND ate.NOMBRE_TIPO_ELEMENTO=:strTipoElemento
                            AND ame.ID_MODELO_ELEMENTO=:intModeloElemento
                            AND iee.EMPRESA_COD =:intEmpresa 
                            AND ie.ID_ELEMENTO NOT IN (".$strQueryVehiculosOcupadosPorCuadrillas.") 
                            AND ie.ID_ELEMENTO NOT IN (".$strQueryVehiculosOcupadosAsignacionProvisional.") ";
            

            $rsm->addScalarResult('ID_ELEMENTO', 'idElemento', 'integer');
            $rsm->addScalarResult('NOMBRE_ELEMENTO', 'nombreElemento', 'string');
            $rsm->addScalarResult('ID_DETALLE_SOLICITUD', 'idDetalleSolicitud', 'integer');
            

            $rsmCount->addScalarResult('TOTAL', 'total', 'integer');
            
            $ntvQuery->setParameter('idCaracteristicaDepartamentoPredefinido', $arrayParametros['intIdCaracteristicaDepartamentoPredefinido']);
            $ntvQueryCount->setParameter('idCaracteristicaDepartamentoPredefinido', $arrayParametros['intIdCaracteristicaDepartamentoPredefinido']);

            $ntvQuery->setParameter('idTipoSolicitud', $arrayParametros['intIdTipoSolicitud']);
            $ntvQueryCount->setParameter('idTipoSolicitud', $arrayParametros['intIdTipoSolicitud']);
            
            $ntvQuery->setParameter('strDetalleCuadrilla', $arrayParametros['strDetalleCuadrilla']);
            $ntvQueryCount->setParameter('strDetalleCuadrilla', $arrayParametros['strDetalleCuadrilla']);
            
            $ntvQuery->setParameter('idDepartamentoCuadrilla', $arrayParametros['intIdDepartamentoCuadrilla']);
            $ntvQueryCount->setParameter('idDepartamentoCuadrilla', $arrayParametros['intIdDepartamentoCuadrilla']);
            
            
            $ntvQuery->setParameter('strEstadoActivo', $arrayParametros['strEstadoActivo']);
            $ntvQueryCount->setParameter('strEstadoActivo', $arrayParametros['strEstadoActivo']);
            
            
            $arrayDetallesFechasAP=$arrayParametros["arrayDetallesFechasAP"];
            $ntvQuery->setParameter('strDetalleFechaInicioAP', $arrayDetallesFechasAP['strDetalleFechaInicioAPChofer']);
            $ntvQueryCount->setParameter('strDetalleFechaInicioAP', $arrayDetallesFechasAP['strDetalleFechaInicioAPChofer']);
            
            $ntvQuery->setParameter('strDetalleFechaFinAP', $arrayDetallesFechasAP['strDetalleFechaFinAPChofer']);
            $ntvQueryCount->setParameter('strDetalleFechaFinAP', $arrayDetallesFechasAP['strDetalleFechaFinAPChofer']);

            
            $arrayDetallesHorasAP=$arrayParametros["arrayDetallesHorasAP"];
            $ntvQuery->setParameter('strDetalleHoraInicioAP', $arrayDetallesHorasAP['strDetalleHoraInicioAPChofer']);
            $ntvQueryCount->setParameter('strDetalleHoraInicioAP', $arrayDetallesHorasAP['strDetalleHoraInicioAPChofer']);
            
            $ntvQuery->setParameter('strDetalleHoraFinAP', $arrayDetallesHorasAP['strDetalleHoraFinAPChofer']);
            $ntvQueryCount->setParameter('strDetalleHoraFinAP', $arrayDetallesHorasAP['strDetalleHoraFinAPChofer']);
            
            $ntvQuery->setParameter('strDetalleFechaInicioAV', $arrayParametros['strDetalleFechaInicioAV']);
            $ntvQueryCount->setParameter('strDetalleFechaInicioAV', $arrayParametros['strDetalleFechaInicioAV']);
            
            $arrayDetallesHorasAV=$arrayParametros["arrayDetallesHorasAV"];
            
            $ntvQuery->setParameter('strDetalleHoraInicioAV', $arrayDetallesHorasAV['strDetalleHoraInicioAV']);
            $ntvQueryCount->setParameter('strDetalleHoraInicioAV', $arrayDetallesHorasAV['strDetalleHoraInicioAV']);
            
            $ntvQuery->setParameter('strDetalleHoraFinAV', $arrayDetallesHorasAV['strDetalleHoraFinAV']);
            $ntvQueryCount->setParameter('strDetalleHoraFinAV', $arrayDetallesHorasAV['strDetalleHoraFinAV']);
            

            $ntvQuery->setParameter('strTipoElemento', $arrayParametros['strTipoElemento']);
            $ntvQueryCount->setParameter('strTipoElemento', $arrayParametros['strTipoElemento']);

            $ntvQuery->setParameter('intModeloElemento', $arrayParametros['intModeloElemento']);
            $ntvQueryCount->setParameter('intModeloElemento', $arrayParametros['intModeloElemento']);

            $ntvQuery->setParameter('intEmpresa', $arrayParametros['intEmpresa']);
            $ntvQueryCount->setParameter('intEmpresa', $arrayParametros['intEmpresa']);

            $ntvQuery->setParameter('strFechaDesdeAsignacion', $arrayParametros['strFechaDesdeAsignacion']);
            $ntvQueryCount->setParameter('strFechaDesdeAsignacion', $arrayParametros['strFechaDesdeAsignacion']);

            $ntvQuery->setParameter('strFechaHastaAsignacion', $arrayParametros['strFechaHastaAsignacion']);
            $ntvQueryCount->setParameter('strFechaHastaAsignacion', $arrayParametros['strFechaHastaAsignacion']);

            $ntvQuery->setParameter('strHoraDesdeAsignacion', $arrayParametros['strHoraDesdeAsignacion']);
            $ntvQueryCount->setParameter('strHoraDesdeAsignacion', $arrayParametros['strHoraDesdeAsignacion']);

            $ntvQuery->setParameter('strHoraHastaAsignacion', $arrayParametros['strHoraHastaAsignacion']);
            $ntvQueryCount->setParameter('strHoraHastaAsignacion', $arrayParametros['strHoraHastaAsignacion']);


            $strWhereBusqueda = '';

            if(isset($arrayParametros['nombreElemento']))
            {
                if($arrayParametros['nombreElemento'])
                {
                    $strWhereBusqueda .= 'AND ie.NOMBRE_ELEMENTO like :nombreElemento ';

                    $ntvQuery->setParameter('nombreElemento', '%' . trim($arrayParametros['nombreElemento']) . '%');

                    $ntvQueryCount->setParameter('nombreElemento', '%' . trim($arrayParametros['nombreElemento']) . '%');
                }
            }
            
            if(isset($arrayParametros['region']))
            {
                if($arrayParametros['region'])
                {
                    $strWhereBusqueda .= 'AND ie.ID_ELEMENTO IN (
                                                SELECT ideRegion.ELEMENTO_ID
                                                FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO ideRegion
                                                WHERE ideRegion.DETALLE_NOMBRE = :detalleNombreRegion
                                                AND ideRegion.DETALLE_VALOR = :detalleValorRegion
                                                AND ideRegion.ESTADO = :strEstadoActivo
                                               ) ';
                    $ntvQuery->setParameter('detalleNombreRegion', 'REGION');
                    $ntvQueryCount->setParameter('detalleNombreRegion', 'REGION');
                    $ntvQuery->setParameter('detalleValorRegion', $arrayParametros['region']);
                    $ntvQueryCount->setParameter('detalleValorRegion', $arrayParametros['region']);
                }
            }


            $strQuery = $strSelect . $strFrom . $strWhere . $strWhereBusqueda . $strOrderBy;

            $ntvQuery->setSQL($strQuery);            
            
            
            
            $arrayResultado = $ntvQuery->getResult();

            $strQueryCount = $strSelectCount . $strFrom . $strWhere . $strWhereBusqueda;
            $ntvQueryCount->setSQL($strQueryCount);
            $intTotal = $ntvQueryCount->getSingleScalarResult();

            $arrayRespuesta['resultado'] = $arrayResultado;
            $arrayRespuesta['total'] = $intTotal;

        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }

        return $arrayRespuesta;
    }
    
    /**
     * getJSONAsignacionOperativaByCriterios
     *
     * Método que retorna el json con las asignaciones que se han realizado a los vehículos.                                    
     *      
     * @param array $arrayParametros
     * @param EntityManager $em
     * @param EntityManager $emGeneral
     * @param EntityManager $emSoporte
     * 
     * @return json $jsonData
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 29-07-2016 - Se agregan las consultas por los detalles del vehículo
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 24-08-2016 - Se realizan las respectivas modificaciones para generar el listado con los diferentes horarios de las
     *                           asignaciones predefinidas de chofer
     * 
     */
	public function getJSONAsignacionOperativaByCriterios($arrayParametros, $em,$emGeneral,$emSoporte)
    {
        $arrayEncontrados = array();
        $arrayResultado = $this->getResultadoAsignacionOperativaByCriterios($arrayParametros, $em);
        $resultado = $arrayResultado['resultado'];
        $intTotal = $arrayResultado['total'];
        $total = 0;

        $arrayDetallesVehiculo = $arrayParametros['criterios']['detallesElemento'];
        
        if($resultado)
        {
            $total = $intTotal;
            foreach($resultado as $data)
            {
                $arrayItem = array();
				

                $arrayItem['intIdElemento']                 = $data['idElemento'];
                $arrayItem['strNombreElemento']             = $data['nombreElemento'];
                $arrayItem['strDetalleElementoDISCO']       = $data['discoElemento'] ? $data['discoElemento'] : '';
                $arrayItem['intIdModeloElemento']           = $data['idModeloElemento'];
                $arrayItem['strNombreModeloElemento']       = $data['nombreModeloElemento'];
                $arrayItem['strNombreTipoElemento']         = $data['nombreTipoElemento'];
                $arrayItem['intIdCuadrilla']                = $data['idCuadrilla'] ? $data['idCuadrilla'] : '';
                $arrayItem['strCodigoCuadrilla']            = $data['codigoCuadrilla'] ? $data['codigoCuadrilla'] : '';
                $arrayItem['strNombreCuadrilla']            = $data['nombreCuadrilla'] ? $data['nombreCuadrilla'] : '';
                $arrayItem['strTurnoInicioCuadrilla']       = $data['turnoInicioCuadrilla'] ? $data['turnoInicioCuadrilla'] : '';
                $arrayItem['strTurnoFinCuadrilla']          = $data['turnoFinCuadrilla'] ? $data['turnoFinCuadrilla'] : '';
				
				$arrayItem['strAsignacionVehicularFechaInicio'] = $data['fechaInicioAsignacionVehicular'] ? $data['fechaInicioAsignacionVehicular'] : '';
                $arrayItem['strAsignacionVehicularHoraInicio']  = $data['turnoInicioCuadrilla'] ? $data['turnoInicioCuadrilla'] : '';
                $arrayItem['strAsignacionVehicularHoraFin']     = $data['turnoFinCuadrilla'] ? $data['turnoFinCuadrilla'] : '';
				
                $arrayItem['intIdDetalleCuadrilla']             = $data['idDetalleCuadrilla'] ? $data['idDetalleCuadrilla'] : '';

                $arrayItem['strFechaInicioAPredefinido']        = $data['fechaInicioAPredefinido'] ? $data['fechaInicioAPredefinido'] : '';
                $arrayItem['strHoraInicioAPredefinido']         = $data['horaInicioAPredefinido'] ? $data['horaInicioAPredefinido'] : '';
                $arrayItem['strHoraFinAPredefinido']            = $data['horaFinAPredefinido'] ? $data['horaFinAPredefinido'] : '';
                
                
                $arrayItem['intIdSolicitudChoferPredefinido']       = $data['idDetalleSolicitudPredefinida'] ? 
                                                                        $data['idDetalleSolicitudPredefinida'] : '';
                 
				$arrayItem['intIdPerChoferPredefinido']				= $data['idPerChoferPredefinido'] ? $data['idPerChoferPredefinido'] : '';
				$arrayItem['intIdPersonaChoferPredefinido']			= $data['idPersonaChoferPredefinido'] ? $data['idPersonaChoferPredefinido'] : '';
				$arrayItem['strIdentificacionChoferPredefinido']	= $data['identificacionChoferPredefinido'] ? 
                                                                      $data['identificacionChoferPredefinido'] : '';
				$arrayItem['strNombresChoferPredefinido']			= $data['nombresChoferPredefinido'] ? $data['nombresChoferPredefinido'] : '';
				$arrayItem['strApellidosChoferPredefinido']			= $data['apellidosChoferPredefinido'] ? $data['apellidosChoferPredefinido'] : '';
                
                
                $arrayItem['idDetalleChoferProvisional']			= $data['idDetalleChoferProvisional'] ? $data['idDetalleChoferProvisional'] : '';
                $arrayItem['idPerChoferProvisional']                = $data['idPerChoferProvisional'] ? $data['idPerChoferProvisional'] : '';
                $arrayItem['asignacionProvisionalXCuadrilla']       = "";
			
				$arrayItem['intIdPerDetalleChofer']         = '';
                $arrayItem['intIdPersonaDetalleChofer']     = '';
                $arrayItem['strDetalleNombresChofer']       = '';
                $arrayItem['strDetalleApellidosChofer']     = '';
                $arrayItem['strDetalleIdentificacionChofer']= '';
                
				$arrayItem['strFechaInicioAsignacionProvisional']   = '';
				$arrayItem['strFechaFinAsignacionProvisional']      = '';
				$arrayItem['strHoraInicioAsignacionProvisional']    = ''; 
				$arrayItem['strHoraFinAsignacionProvisional']       = '';


                if($arrayItem['idDetalleChoferProvisional']!='')
                {
                    $idPerChoferProvisional = $arrayItem['idPerChoferProvisional'];
                    
                    $objPerChoferProvisional=$em->getRepository('schemaBundle:InfoPersonaEmpresaRol')->find($idPerChoferProvisional);
                    $objPersona             = null;
                    if($objPerChoferProvisional)
                    {
                        $objPersona=$objPerChoferProvisional->getPersonaId();
                    }
                    
                    $arrayItem['intIdPerDetalleChofer']         = $idPerChoferProvisional;
                    $arrayItem['intIdPersonaDetalleChofer']     = $objPersona ? $objPersona->getId() : '';
                    $arrayItem['strDetalleNombresChofer']       = $objPersona ? $objPersona->getNombres() : '';
                    $arrayItem['strDetalleApellidosChofer']     = $objPersona ? $objPersona->getApellidos() : '';
                    $arrayItem['strDetalleIdentificacionChofer']= $objPersona ? $objPersona->getIdentificacionCliente() : '';           

                    $objDetalleChofer = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                                                    ->find($arrayItem['idDetalleChoferProvisional']);
                    
                    $arrayDetallesFechasYHorasAsignacionProvisional = $arrayParametros['arrayDetallesFechasYHorasAsignacionProvisional'];

                    $arrayParam=array( 
                        'elementoId'    => $arrayItem['intIdElemento'],
                        'detalleNombre' => $arrayDetallesFechasYHorasAsignacionProvisional['strDetalleFechaInicioAsignacionProvisionalChofer'],
                        'parent'        => $objDetalleChofer,
                        'estado'        => 'Activo'
                    );
                    $objDetalleChoferFechaInicio = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')->findOneBy($arrayParam);
                    
                    
                    $arrayParam=array( 
                        'elementoId'    => $arrayItem['intIdElemento'],
                        'detalleNombre' => $arrayDetallesFechasYHorasAsignacionProvisional['strDetalleFechaFinAsignacionProvisionalChofer'],
                        'parent'        => $objDetalleChofer,
                        'estado'        => 'Activo'
                    );
                    $objDetalleChoferFechaFin = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')->findOneBy($arrayParam);
                    
                    
                    
                    $arrayParam=array( 
                        'elementoId'    => $arrayItem['intIdElemento'],
                        'detalleNombre' => $arrayDetallesFechasYHorasAsignacionProvisional['strDetalleHoraInicioAsignacionProvisionalChofer'],
                        'parent'        => $objDetalleChofer,
                        'estado'        => 'Activo'
                    );
                    $objDetalleChoferHoraInicio = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')->findOneBy($arrayParam);
                    
                    
                    $arrayParam=array( 
                        'elementoId'    => $arrayItem['intIdElemento'],
                        'detalleNombre' => $arrayDetallesFechasYHorasAsignacionProvisional['strDetalleHoraFinAsignacionProvisionalChofer'],
                        'parent'        => $objDetalleChofer,
                        'estado'        => 'Activo'
                    );
                    $objDetalleChoferHoraFin = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')->findOneBy($arrayParam);
                    
                    $arrayDetallesDepartamentoZonaTareaAsignacionProvisional = $arrayParametros['arrayDetallesDepartamentoZonaTareaAsignacionProvisional'];

                    $arrayParam=array( 
                        'elementoId'    => $arrayItem['intIdElemento'],
                        'detalleNombre' => $arrayDetallesDepartamentoZonaTareaAsignacionProvisional['strDetalleDepartamentoAsignacionProvisionalChofer'],
                        'parent'        => $objDetalleChofer,
                        'estado'        => 'Activo'
                    );
                    $objDetalleChoferDepartamento = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')->findOneBy($arrayParam);
                    
                    $arrayParam=array( 
                        'elementoId'    => $arrayItem['intIdElemento'],
                        'detalleNombre' => $arrayDetallesDepartamentoZonaTareaAsignacionProvisional['strDetalleZonaAsignacionProvisionalChofer'],
                        'parent'        => $objDetalleChofer,
                        'estado'        => 'Activo'
                    );
                    $objDetalleChoferZona = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')->findOneBy($arrayParam);
                    
                    $arrayParam=array( 
                        'elementoId'    => $arrayItem['intIdElemento'],
                        'detalleNombre' => $arrayDetallesDepartamentoZonaTareaAsignacionProvisional['strDetalleTareaAsignacionProvisionalChofer'],
                        'parent'        => $objDetalleChofer,
                        'estado'        => 'Activo'
                    );
                    $objDetalleChoferTarea=  $this->_em->getRepository('schemaBundle:InfoDetalleElemento')->findOneBy($arrayParam);
                    
                    $arrayItem['strFechaInicioAsignacionProvisional']   = $objDetalleChoferFechaInicio ? 
                                                                            $objDetalleChoferFechaInicio->getDetalleValor(): '';
                    $arrayItem['strFechaFinAsignacionProvisional']      = $objDetalleChoferFechaFin ? 
                                                                            $objDetalleChoferFechaFin->getDetalleValor(): '';
                    $arrayItem['strHoraInicioAsignacionProvisional']    = $objDetalleChoferHoraInicio ? 
                                                                            $objDetalleChoferHoraInicio->getDetalleValor(): ''; 
                    $arrayItem['strHoraFinAsignacionProvisional']       = $objDetalleChoferHoraFin ? 
                                                                            $objDetalleChoferHoraFin->getDetalleValor(): '';
                    $strDepartamento = "";
                    if($objDetalleChoferDepartamento )
                    {
                        $strDepartamento = $emGeneral->getRepository('schemaBundle:AdmiDepartamento')
                                                    ->find($objDetalleChoferDepartamento->getDetalleValor())->getNombreDepartamento();
                    }
                    $arrayItem['strDepartamentoAsignacionProvisional']   = $strDepartamento;
                    
                    
                    $strZona = "";
                    if($objDetalleChoferZona )
                    {
                        $strZona = $emGeneral->getRepository('schemaBundle:AdmiZona')
                                                    ->find($objDetalleChoferZona->getDetalleValor())->getNombreZona();
                    }
                    
                    
                    $arrayItem['strZonaAsignacionProvisional']           = $strZona;
                    $strTarea = "";
                    if($objDetalleChoferTarea )
                    {
                        $strTarea = $emSoporte->getRepository('schemaBundle:AdmiTarea')
                                                    ->find($objDetalleChoferTarea->getDetalleValor())->getNombreTarea();
                    }
                    
                    $arrayItem['strTareaAsignacionProvisional']           = $strTarea;
                }
                else
                {
                    $arrayItem['strFechaInicioAsignacionProvisional']   = '';
                    $arrayItem['strFechaFinAsignacionProvisional']      = '';
                    $arrayItem['strHoraInicioAsignacionProvisional']    = ''; 
                    $arrayItem['strHoraFinAsignacionProvisional']       = ''; 
                    $arrayItem['strDepartamentoAsignacionProvisional']  = '';
                    $arrayItem['strZonaAsignacionProvisional']          = '';
                    $arrayItem['strTareaAsignacionProvisional']         = '';
                    
                    
                    $arrayItem['intIdPerDetalleChofer']         = '';
                    $arrayItem['intIdPersonaDetalleChofer']     = '';
                    $arrayItem['strDetalleNombresChofer']       = '';
                    $arrayItem['strDetalleApellidosChofer']     = '';
                    $arrayItem['strDetalleIdentificacionChofer']= '';               

                }

                $arrayEncontrados[] = $arrayItem;
            }
        }

        $arrayRespuesta = array('total' => $total, 'encontrados' => $arrayEncontrados);
        $jsonData = json_encode($arrayRespuesta);
        return $jsonData;
    }
    
    /**
     * getResultadoAsignacionOperativaByCriterios
     *
     * Consulta las asignaciones operativas realizadas                              
     *      
     * @param array $arrayParametros
     * 
     * @return array $arrayRespuesta['total','resultado']
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 29-08-2016 Se ajusta la consulta para obtener las asignaciones predefinidas y provisionales por horarios
     * 
     */
	public function getResultadoAsignacionOperativaByCriterios($arrayParametros,$em)
    {
        $arrayRespuesta['total'] = 0;
        $arrayRespuesta['resultado'] = "";
        try
        {
            $rsm        = new ResultSetMappingBuilder($em);
            $rsmCount   = new ResultSetMappingBuilder($em);
            $query      = $em->createNativeQuery(null, $rsm);
            $queryCount = $em->createNativeQuery(null, $rsmCount);
            
            $strSelectCount = " SELECT COUNT(*) AS TOTAL ";
            
            $strQueryTodos  = "     SELECT ie.ID_ELEMENTO,ie.NOMBRE_ELEMENTO,
                                    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleDISCO,ie.ID_ELEMENTO,:estadoActivo) 
                                    AS DISCO_ELEMENTO,
                                    ame.ID_MODELO_ELEMENTO,ame.NOMBRE_MODELO_ELEMENTO,
                                    ate.NOMBRE_TIPO_ELEMENTO,
                                    0 AS ID_DETALLE_CUADRILLA,
                                    detChoferProvisional.ID_DETALLE_ELEMENTO AS ID_DETALLE_CHOFER_PROVISIONAL,
                                    detChoferProvisional.DETALLE_VALOR AS ID_PER_CHOFER_PROVISIONAL,
                                    0 as ID_CUADRILLA, '' as CODIGO, '' as NOMBRE_CUADRILLA, 
                                    '' as TURNO_HORA_INICIO,'' as TURNO_HORA_FIN,
									'' AS FECHA_INICIO_AV,
                                    0 AS ID_DETALLE_SOLICITUD,
                                    '' AS FE_INICIO_PRED,
                                    '' AS HORA_INICIO_PRED,
                                    '' AS HORA_FIN_PRED,
									0 as ID_PER_CHOFER_PRED,
									0 ID_PERSONA_CHOFER_PRED,
									'' as IDENTIFICACION_CHOFER_PRED,
									'' as NOMBRES_CHOFER_PRED,
									'' as APELLIDOS_CHOFER_PRED 
                                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO ie
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO ame ON ie.MODELO_ELEMENTO_ID = ame.ID_MODELO_ELEMENTO 
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ate ON ame.TIPO_ELEMENTO_ID = ate.ID_TIPO_ELEMENTO 
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO iee ON iee.ELEMENTO_ID = ie.ID_ELEMENTO 
                                    LEFT JOIN DB_COMERCIAL.INFO_DETALLE_ELEMENTO detChoferProvisional 
                                    ON detChoferProvisional.ELEMENTO_ID = ie.ID_ELEMENTO 
                                        AND detChoferProvisional.REF_DETALLE_ELEMENTO_ID IS NULL 
                                        AND detChoferProvisional.DETALLE_NOMBRE = :strDetalleChoferProvisional 
                                        AND detChoferProvisional.ESTADO = :estadoActivo
                                        AND detChoferProvisional.ID_DETALLE_ELEMENTO NOT IN
                                        (
                                            SELECT detAProvSinPred.REF_DETALLE_ELEMENTO_ID 
                                            FROM DB_COMERCIAL.INFO_DETALLE_ELEMENTO detAProvSinPred
                                            WHERE detAProvSinPred.ELEMENTO_ID = ie.ID_ELEMENTO
                                            AND detAProvSinPred.DETALLE_NOMBRE = :strDetalleSolPredProv
                                            and detAProvSinPred.estado= :estadoActivo 
                                        ) ";
            
            $strSelectAPredSinCuandrillas  = "  SELECT ie.ID_ELEMENTO,ie.NOMBRE_ELEMENTO,
                                                DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleDISCO,ie.ID_ELEMENTO,:estadoActivo) 
                                                AS DISCO_ELEMENTO,
                                                ame.ID_MODELO_ELEMENTO,ame.NOMBRE_MODELO_ELEMENTO,
                                                ate.NOMBRE_TIPO_ELEMENTO,
                                                0 AS ID_DETALLE_CUADRILLA,
                                                detElementoChoferProvisional.ID_DETALLE_ELEMENTO AS ID_DETALLE_CHOFER_PROVISIONAL,
                                                detElementoChoferProvisional.DETALLE_VALOR AS ID_PER_CHOFER_PROVISIONAL,
                                                0 as ID_CUADRILLA, '' as CODIGO, '' as NOMBRE_CUADRILLA, 
                                                '' as TURNO_HORA_INICIO,'' as TURNO_HORA_FIN,
                                                '' AS FECHA_INICIO_AV,
                                                detalleSolicitud.ID_DETALLE_SOLICITUD,
                                                COALESCE(TO_CHAR(detalleSolicitudHist.FE_INI_PLAN,'DD/MM/YYYY'),'') AS FE_INICIO_PRED,
                                                COALESCE(TO_CHAR(detalleSolicitudHist.FE_INI_PLAN,'HH24:MI'),'') AS HORA_INICIO_PRED,
                                                COALESCE(TO_CHAR(detalleSolicitudHist.FE_FIN_PLAN,'HH24:MI'),'') AS HORA_FIN_PRED,
                                                per.ID_PERSONA_ROL as ID_PER_CHOFER_PRED,
                                                p.ID_PERSONA as ID_PERSONA_CHOFER_PRED,
                                                p.IDENTIFICACION_CLIENTE as IDENTIFICACION_CHOFER_PRED,
                                                p.NOMBRES as NOMBRES_CHOFER_PRED,
                                                p.APELLIDOS as APELLIDOS_CHOFER_PRED  ";
            
            $strFromAPredSinCuandrillas         = "FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO ie
                                                INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO ame ON ie.MODELO_ELEMENTO_ID = ame.ID_MODELO_ELEMENTO 
                                                INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ate ON ame.TIPO_ELEMENTO_ID = ate.ID_TIPO_ELEMENTO 
                                                INNER JOIN DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO iee ON iee.ELEMENTO_ID = ie.ID_ELEMENTO 
                                                INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOLICITUD detalleSolicitud 
                                                    ON detalleSolicitud.ELEMENTO_ID = ie.ID_ELEMENTO 
                                                    
                                                INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOL_HIST detalleSolicitudHist 
                                                    ON detalleSolicitudHist.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD 
                                                    AND detalleSolicitudHist.ESTADO = :estadoActivo
                                                    
                                                INNER JOIN DB_SOPORTE.INFO_DETALLE detalle
                                                    ON detalle.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD

                                                INNER JOIN DB_SOPORTE.INFO_DETALLE_ASIGNACION detalleAsignacion 
                                                    ON detalleAsignacion.DETALLE_ID=detalle.ID_DETALLE 

                                                INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL per 
                                                    ON per.ID_PERSONA_ROL=detalleAsignacion.PERSONA_EMPRESA_ROL_ID

                                                INNER JOIN DB_COMERCIAL.INFO_PERSONA p 
                                                    ON per.PERSONA_ID = p.ID_PERSONA 
                                                    
                                                LEFT JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO detElementoIdSolProvPred
                                                    ON detElementoIdSolProvPred.ELEMENTO_ID = ie.ID_ELEMENTO
                                                    AND detElementoIdSolProvPred.DETALLE_NOMBRE = :strDetalleSolPredProv
                                                    AND detElementoIdSolProvPred.DETALLE_VALOR = detalleSolicitud.ID_DETALLE_SOLICITUD
                                                    AND detElementoIdSolProvPred.ESTADO = :estadoActivo 
                                                    
                                                LEFT JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO detElementoChoferProvisional
                                                    ON detElementoChoferProvisional.ID_DETALLE_ELEMENTO=detElementoIdSolProvPred.REF_DETALLE_ELEMENTO_ID

                                                ";
    

            $strSelectAVCuadrillas = "  SELECT ie.ID_ELEMENTO,ie.NOMBRE_ELEMENTO,
                                        DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleDISCO,ie.ID_ELEMENTO,:estadoActivo) 
                                        AS DISCO_ELEMENTO,
                                        ame.ID_MODELO_ELEMENTO,ame.NOMBRE_MODELO_ELEMENTO,
                                        ate.NOMBRE_TIPO_ELEMENTO,
                                        detalleCuadrilla.ID_DETALLE_ELEMENTO AS ID_DETALLE_CUADRILLA, 
                                        detChoferProvisional.ID_DETALLE_ELEMENTO AS ID_DETALLE_CHOFER_PROVISIONAL,
                                        detChoferProvisional.DETALLE_VALOR AS ID_PER_CHOFER_PROVISIONAL,
                                        ac.ID_CUADRILLA, ac.CODIGO,  CAST(ac.NOMBRE_CUADRILLA AS VARCHAR2(150)) AS NOMBRE_CUADRILLA, 
                                        ac.TURNO_HORA_INICIO,ac.TURNO_HORA_FIN,
                                        detalleFechaInicioAV.DETALLE_VALOR AS FECHA_INICIO_AV,
                                        detalleSolicitud.ID_DETALLE_SOLICITUD,
                                        COALESCE(TO_CHAR(detalleSolicitudHist.FE_INI_PLAN,'DD/MM/YYYY'),'') AS FE_INICIO_PRED,
                                        COALESCE(TO_CHAR(detalleSolicitudHist.FE_INI_PLAN,'HH24:MI'),'') AS HORA_INICIO_PRED,
                                        COALESCE(TO_CHAR(detalleSolicitudHist.FE_FIN_PLAN,'HH24:MI'),'') AS HORA_FIN_PRED,
                                        per.ID_PERSONA_ROL as ID_PER_CHOFER_PRED,
                                        p.ID_PERSONA as ID_PERSONA_CHOFER_PRED,
                                        p.IDENTIFICACION_CLIENTE as IDENTIFICACION_CHOFER_PRED,
                                        p.NOMBRES as NOMBRES_CHOFER_PRED,
                                        p.APELLIDOS as APELLIDOS_CHOFER_PRED ";
            

            $strFromAVCuadrillas  = " FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO ie
                                        INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO ame ON ie.MODELO_ELEMENTO_ID = ame.ID_MODELO_ELEMENTO 
                                        INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ate ON ame.TIPO_ELEMENTO_ID = ate.ID_TIPO_ELEMENTO 
                                        INNER JOIN DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO iee ON iee.ELEMENTO_ID = ie.ID_ELEMENTO 
                                        
                                        
                                        INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO detalleCuadrilla 
                                        ON ie.ID_ELEMENTO = detalleCuadrilla.ELEMENTO_ID 
                                            AND detalleCuadrilla.DETALLE_NOMBRE LIKE :strDetalleCuadrilla 
                                            AND detalleCuadrilla.ESTADO like :estadoActivo 
                                            
                                        LEFT JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO detChoferProvisional 
                                            ON detChoferProvisional.REF_DETALLE_ELEMENTO_ID = detalleCuadrilla.ID_DETALLE_ELEMENTO
                                                AND detChoferProvisional.ELEMENTO_ID = ie.ID_ELEMENTO 
                                                AND detChoferProvisional.DETALLE_NOMBRE = :strDetalleChoferProvisional 
                                                AND detChoferProvisional.ESTADO = :estadoActivo 

                                        INNER JOIN DB_COMERCIAL.ADMI_CUADRILLA ac 
                                        ON (detalleCuadrilla.DETALLE_VALOR = ac.ID_CUADRILLA 
                                            AND (ac.ESTADO=:estadoActivo or ac.ESTADO= :estadoPrestado))

                                        INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO detalleFechaInicioAV 
                                        ON detalleFechaInicioAV.DETALLE_NOMBRE LIKE :strDetalleFechaInicioAV
                                            AND detalleFechaInicioAV.ELEMENTO_ID = ie.ID_ELEMENTO 
                                            AND detalleFechaInicioAV.REF_DETALLE_ELEMENTO_ID = detalleCuadrilla.ID_DETALLE_ELEMENTO
                                            
                                        INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOLICITUD detalleSolicitud 
                                            ON detalleSolicitud.ELEMENTO_ID = ie.ID_ELEMENTO 
                                            AND detalleSolicitud.TIPO_SOLICITUD_ID = :idTipoSolicitud
                                            AND detalleSolicitud.ESTADO = :estadoActivo 
                                            
                                        INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOL_HIST detalleSolicitudHist 
                                                ON detalleSolicitudHist.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD 
                                                AND detalleSolicitudHist.ESTADO = :estadoActivo

                                        INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO detalleSolicitudAV 
                                        ON detalleSolicitudAV.DETALLE_NOMBRE LIKE :strDetalleSolicitudAV
                                            AND detalleSolicitudAV.DETALLE_VALOR = detalleSolicitud.ID_DETALLE_SOLICITUD 
                                            AND detalleSolicitudAV.ELEMENTO_ID = ie.ID_ELEMENTO 
                                            AND detalleSolicitudAV.REF_DETALLE_ELEMENTO_ID = detalleCuadrilla.ID_DETALLE_ELEMENTO 
                                        
                                        INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT detalleSolCaractDep
                                            ON detalleSolCaractDep.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD
                                                AND detalleSolCaractDep.CARACTERISTICA_ID = :idCaractDepartamentoPredefinido
                                                AND detalleSolCaractDep.VALOR = ac.DEPARTAMENTO_ID 
                                                AND detalleSolCaractDep.ESTADO = :estadoActivo

                                        LEFT JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT detalleSolCaractZona
                                            ON detalleSolCaractZona.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD
                                                AND detalleSolCaractZona.CARACTERISTICA_ID = :idCaractZonaPredefinida 
                                                AND detalleSolCaractZona.VALOR = ac.ZONA_ID 
                                                AND detalleSolCaractZona.ESTADO = :estadoActivo

                                        LEFT JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT detalleSolCaractTarea
                                            ON detalleSolCaractTarea.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD
                                                AND detalleSolCaractTarea.CARACTERISTICA_ID = :idCaractTareaPredefinida 
                                                AND detalleSolCaractTarea.VALOR = ac.TAREA_ID 
                                                AND detalleSolCaractTarea.ESTADO = :estadoActivo

                                        INNER JOIN DB_SOPORTE.INFO_DETALLE detalle
                                            ON detalle.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD

                                        INNER JOIN DB_SOPORTE.INFO_DETALLE_ASIGNACION detalleAsignacion 
                                            ON detalleAsignacion.DETALLE_ID=detalle.ID_DETALLE 

                                        INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL per 
                                            ON per.ID_PERSONA_ROL=detalleAsignacion.PERSONA_EMPRESA_ROL_ID

                                        INNER JOIN DB_COMERCIAL.INFO_PERSONA p 
                                            ON per.PERSONA_ID = p.ID_PERSONA ";
            
            $strWhereGeneral    =  "WHERE ie.ESTADO = :estadoActivo 
                                    AND ate.NOMBRE_TIPO_ELEMENTO LIKE :nombreTipoElemento 
                                    AND ame.ESTADO = :estadoActivo 
                                    AND ate.ESTADO = :estadoActivo
                                    AND iee.EMPRESA_COD = :codEmpresa ";

            $strOrderBy = "  ORDER BY LPAD(DISCO_ELEMENTO,10), HORA_INICIO_PRED,TURNO_HORA_INICIO";


            $rsm->addScalarResult('ID_ELEMENTO', 'idElemento', 'integer');
            $rsm->addScalarResult('NOMBRE_ELEMENTO', 'nombreElemento', 'string');
            $rsm->addScalarResult('DISCO_ELEMENTO', 'discoElemento', 'string');
            $rsm->addScalarResult('ID_MODELO_ELEMENTO', 'idModeloElemento', 'integer');
            $rsm->addScalarResult('NOMBRE_MODELO_ELEMENTO', 'nombreModeloElemento', 'string');
            $rsm->addScalarResult('NOMBRE_TIPO_ELEMENTO', 'nombreTipoElemento', 'string');
            $rsm->addScalarResult('ID_DETALLE_CUADRILLA', 'idDetalleCuadrilla', 'integer');
            $rsm->addScalarResult('ID_DETALLE_CHOFER_PROVISIONAL', 'idDetalleChoferProvisional','integer');
            $rsm->addScalarResult('ID_PER_CHOFER_PROVISIONAL', 'idPerChoferProvisional','integer');
            
            
            $rsm->addScalarResult('ID_CUADRILLA', 'idCuadrilla', 'integer');
			$rsm->addScalarResult('CODIGO', 'codigoCuadrilla', 'string');
            $rsm->addScalarResult('NOMBRE_CUADRILLA', 'nombreCuadrilla', 'string');
			$rsm->addScalarResult('TURNO_HORA_INICIO', 'turnoInicioCuadrilla', 'string');
            $rsm->addScalarResult('TURNO_HORA_FIN', 'turnoFinCuadrilla', 'string');
			
			$rsm->addScalarResult('FECHA_INICIO_AV', 'fechaInicioAsignacionVehicular', 'string');
            
            $rsm->addScalarResult('ID_DETALLE_SOLICITUD', 'idDetalleSolicitudPredefinida', 'integer');
            $rsm->addScalarResult('FE_INICIO_PRED', 'fechaInicioAPredefinido', 'string');
            $rsm->addScalarResult('HORA_INICIO_PRED', 'horaInicioAPredefinido', 'string');
            $rsm->addScalarResult('HORA_FIN_PRED', 'horaFinAPredefinido', 'string');
            
			$rsm->addScalarResult('ID_PER_CHOFER_PRED', 'idPerChoferPredefinido', 'integer');
			$rsm->addScalarResult('ID_PERSONA_CHOFER_PRED', 'idPersonaChoferPredefinido', 'integer');
			$rsm->addScalarResult('IDENTIFICACION_CHOFER_PRED', 'identificacionChoferPredefinido', 'string');
			$rsm->addScalarResult('NOMBRES_CHOFER_PRED', 'nombresChoferPredefinido', 'string');
			$rsm->addScalarResult('APELLIDOS_CHOFER_PRED', 'apellidosChoferPredefinido', 'string');

        
            $rsmCount->addScalarResult('TOTAL', 'total', 'integer');

            $query->setParameter('codEmpresa', $arrayParametros['codEmpresa']);
            $queryCount->setParameter('codEmpresa', $arrayParametros['codEmpresa']);

            $query->setParameter('nombreTipoElemento', $arrayParametros['tipoElemento']);
            $queryCount->setParameter('nombreTipoElemento', $arrayParametros['tipoElemento']);

            $query->setParameter('estadoActivo', $arrayParametros['strEstadoActivo']);
            $queryCount->setParameter('estadoActivo', $arrayParametros['strEstadoActivo']);

            $query->setParameter('estadoPrestado', $arrayParametros['strEstadoPrestado']);
            $queryCount->setParameter('estadoPrestado', $arrayParametros['strEstadoPrestado']);

            $query->setParameter('strDetalleCuadrilla', $arrayParametros['strDetalleCuadrilla']);
            $queryCount->setParameter('strDetalleCuadrilla', $arrayParametros['strDetalleCuadrilla']);
            
            $query->setParameter('idTipoSolicitud', $arrayParametros['intIdTipoSolicitud']);
            $queryCount->setParameter('idTipoSolicitud', $arrayParametros['intIdTipoSolicitud']);
            
            $query->setParameter('strDetalleDISCO', 'DISCO');
            $queryCount->setParameter('strDetalleDISCO', 'DISCO');
            
            $query->setParameter('strDetalleChoferProvisional', $arrayParametros['strDetalleChoferProvisional']);
            $queryCount->setParameter('strDetalleChoferProvisional', $arrayParametros['strDetalleChoferProvisional']);
			
            $detallesFechasYHorasAV = $arrayParametros['arrayDetallesFechasYHorasAsignacionVehicular'];
			$query->setParameter('strDetalleFechaInicioAV', $detallesFechasYHorasAV['strDetalleFechaInicioAsignacionVehicular']);
            $queryCount->setParameter('strDetalleFechaInicioAV',$detallesFechasYHorasAV['strDetalleFechaInicioAsignacionVehicular']);

            $query->setParameter('strDetalleSolicitudAV', $detallesFechasYHorasAV['strDetalleSolicitudAsignacionVehicular']);
            $queryCount->setParameter('strDetalleSolicitudAV',$detallesFechasYHorasAV['strDetalleSolicitudAsignacionVehicular']);
			
			$query->setParameter('idCaractDepartamentoPredefinido', $arrayParametros['intIdCaracteristicaDepartamentoPredefinido']);
            $queryCount->setParameter('idCaractDepartamentoPredefinido', $arrayParametros['intIdCaracteristicaDepartamentoPredefinido']);
			
			$query->setParameter('idCaractZonaPredefinida', $arrayParametros['intIdCaracteristicaZonaPredefinida']);
            $queryCount->setParameter('idCaractZonaPredefinida', $arrayParametros['intIdCaracteristicaZonaPredefinida']);
			
			$query->setParameter('idCaractTareaPredefinida', $arrayParametros['intIdCaracteristicaTareaPredefinida']);
            $queryCount->setParameter('idCaractTareaPredefinida', $arrayParametros['intIdCaracteristicaTareaPredefinida']);

            $strWhereBusquedaElemento   = "";
            $strWhereBusquedaChofer     = "";
            $strWhereBusquedaAV         = "";
            if(isset($arrayParametros['criterios']))
            {
                if(isset($arrayParametros['criterios']['idElemento']))
                {
                    if($arrayParametros['criterios']['idElemento'])
                    {
                        $strWhereBusquedaElemento .= 'AND ID_ELEMENTO = :idElemento ';

                        $query->setParameter('idElemento', $arrayParametros['criterios']['idElemento']);

                        $queryCount->setParameter('idElemento', $arrayParametros['criterios']['idElemento']);
                    }
                }
                if(isset($arrayParametros['criterios']['placa']))
                {
                    if($arrayParametros['criterios']['placa'])
                    {
                        $strWhereBusquedaElemento .= 'AND NOMBRE_ELEMENTO LIKE :placa ';

                        $query->setParameter('placa', '%' . trim($arrayParametros['criterios']['placa']) . '%');

                        $queryCount->setParameter('placa', '%' . trim($arrayParametros['criterios']['placa']) . '%');
                    }
                }

                if(isset($arrayParametros['criterios']['modeloElemento']))
                {
                    if($arrayParametros['criterios']['modeloElemento'])
                    {
                        $strWhereBusquedaElemento .= 'AND ID_MODELO_ELEMENTO IN (:modeloElemento) ';

                        $query->setParameter('modeloElemento', array_values($arrayParametros['criterios']['modeloElemento']));

                        $queryCount->setParameter('modeloElemento', array_values($arrayParametros['criterios']['modeloElemento']));
                    }
                }

                if(isset($arrayParametros['criterios']['detallesElemento']))
                {
                    $intDetalleElemento = 0;
                    foreach($arrayParametros['criterios']['detallesElemento'] as $keyDetalleElemento => $valDetalleElemento)
                    {
                        if($valDetalleElemento)
                        {
                            $strWhereBusquedaElemento .= 'AND ID_ELEMENTO IN (
                                                        SELECT ide' . $intDetalleElemento . '.ELEMENTO_ID
                                                        FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO ide' . $intDetalleElemento . '
                                                        WHERE ide'.$intDetalleElemento.'.DETALLE_NOMBRE = :keyDetalleElemento'.$intDetalleElemento.' 
                                                        AND ide' . $intDetalleElemento . '.DETALLE_VALOR = :valDetalleElemento'.$intDetalleElemento.' 
                                                        AND ide' . $intDetalleElemento . '.ESTADO = :estadoActivo
                                                       ) ';
                            $query->setParameter('keyDetalleElemento'.$intDetalleElemento, trim(strtoupper($keyDetalleElemento)));
                            $queryCount->setParameter('keyDetalleElemento'.$intDetalleElemento, trim(strtoupper($keyDetalleElemento)));
                            $query->setParameter('valDetalleElemento'.$intDetalleElemento, trim(strtoupper($valDetalleElemento)));
                            $queryCount->setParameter('valDetalleElemento'.$intDetalleElemento, trim(strtoupper($valDetalleElemento)));
                            $intDetalleElemento++;
                        }
                    }
                }
                if(isset($arrayParametros['criterios']['idCuadrilla']))
                {
                    if($arrayParametros['criterios']['idCuadrilla'])
                    {
                        $strWhereBusquedaAV .= 'AND ID_CUADRILLA LIKE :idCuadrilla ';

                        $query->setParameter('idCuadrilla', $arrayParametros['criterios']['idCuadrilla']);

                        $queryCount->setParameter('idCuadrilla', $arrayParametros['criterios']['idCuadrilla']);
                    }
                }

                if(isset($arrayParametros['criterios']['nombreCuadrilla']))
                {
                    if($arrayParametros['criterios']['nombreCuadrilla'])
                    {
                        $strWhereBusquedaAV .= 'AND NOMBRE_CUADRILLA LIKE :nombreCuadrilla ';

                        $query->setParameter('nombreCuadrilla', '%' . trim($arrayParametros['criterios']['nombreCuadrilla']) . '%');

                        $queryCount->setParameter('nombreCuadrilla', '%' . trim($arrayParametros['criterios']['nombreCuadrilla']) . '%');
                    }
                }

                if(isset($arrayParametros['criterios']['nombresChofer']))
                {
                    if($arrayParametros['criterios']['nombresChofer'])
                    {
                        $strWhereBusquedaChofer .= 'AND NOMBRES LIKE :nombresChofer ';

                        $query->setParameter('nombresChofer', '%' . strtoupper(trim($arrayParametros['criterios']['nombresChofer'])) . '%');
                        $queryCount->setParameter('nombresChofer', '%' . strtoupper(trim($arrayParametros['criterios']['nombresChofer'])) . '%');
                    }
                }

                if(isset($arrayParametros['criterios']['apellidosChofer']))
                {
                    if($arrayParametros['criterios']['apellidosChofer'])
                    {
                        $strWhereBusquedaChofer .= 'AND APELLIDOS LIKE :apellidosChofer ';

                        $query->setParameter('apellidosChofer', '%' . strtoupper(trim($arrayParametros['criterios']['apellidosChofer'])) . '%');
                        $queryCount->setParameter('apellidosChofer', '%' . strtoupper(trim($arrayParametros['criterios']['apellidosChofer'])) . '%');
                    }
                }
                if(isset($arrayParametros['criterios']['identificacionChofer']))
                {
                    if($arrayParametros['criterios']['identificacionChofer'])
                    {
                        $strWhereBusquedaChofer .= 'AND IDENTIFICACION_CLIENTE LIKE :identificacionChofer ';

                        $query->setParameter('identificacionChofer', $arrayParametros['criterios']['identificacionChofer']);
                        $queryCount->setParameter('identificacionChofer', $arrayParametros['criterios']['identificacionChofer']);
                    }
                }
            }
            
            
            $strWhereAdicionalAPredSinCuadrillas="  AND detalleSolicitud.TIPO_SOLICITUD_ID = :idTipoSolicitud
                                                    AND detalleSolicitud.ESTADO = :estadoActivo  
                                                    AND detalleSolicitud.ID_DETALLE_SOLICITUD NOT IN
                                                    (
                                                        SELECT detalleIdSolicitudAV.DETALLE_VALOR
                                                        FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO detalleIdSolicitudAV 
                                                        WHERE detalleIdSolicitudAV.DETALLE_NOMBRE LIKE :strDetalleSolicitudAV 
                                                        AND detalleIdSolicitudAV.ESTADO like :estadoActivo 
                                                    ) ";

            $strSqlAPredSinCuadrillas = $strSelectAPredSinCuandrillas.$strFromAPredSinCuandrillas.$strWhereGeneral
                                        .$strWhereAdicionalAPredSinCuadrillas.$strWhereBusquedaElemento.$strWhereBusquedaChofer;
            $strSqlAVCuadrillas = $strSelectAVCuadrillas . $strFromAVCuadrillas . $strWhereGeneral
                                . $strWhereBusquedaElemento.$strWhereBusquedaAV.$strWhereBusquedaChofer;
            $strSqlPrincipal    = "";
            
            if($strWhereBusquedaChofer!="")
            {
                $query->setParameter('strDetalleSolPredProv', 
                                        $arrayParametros['arrayDetallesFechasYHorasAsignacionProvisional']['strDetalleSolPredProv']);
                $queryCount->setParameter('strDetalleSolPredProv', 
                                        $arrayParametros['arrayDetallesFechasYHorasAsignacionProvisional']['strDetalleSolPredProv']);
                
                
                $strSqlPrincipal        = "SELECT * FROM (". $strSqlAVCuadrillas." UNION ".$strSqlAPredSinCuadrillas." ) ".$strOrderBy;
            }
            else if($strWhereBusquedaAV!="")
            {
                $strSqlPrincipal    = $strSqlAVCuadrillas;
            }
            else
            {
                $strSqlTodosVehiculos   = $strQueryTodos.$strWhereGeneral.$strWhereBusquedaElemento;
                $query->setParameter('strDetalleSolPredProv', 
                                        $arrayParametros['arrayDetallesFechasYHorasAsignacionProvisional']['strDetalleSolPredProv']);
                $queryCount->setParameter('strDetalleSolPredProv', 
                                        $arrayParametros['arrayDetallesFechasYHorasAsignacionProvisional']['strDetalleSolPredProv']);
                
                $strSqlPrincipal        = "SELECT * FROM (". $strSqlAVCuadrillas." UNION ".$strSqlTodosVehiculos
                                                                                ." UNION ".$strSqlAPredSinCuadrillas." ) ".$strOrderBy;
            }
            

            $strSqlFinal = '';

            if(isset($arrayParametros['intStart']) && isset($arrayParametros['intLimit']))
            {
                if($arrayParametros['intStart'] && $arrayParametros['intLimit'])
                {
                    $intInicio = $arrayParametros['intStart'];
                    $intFin = $arrayParametros['intStart'] + $arrayParametros['intLimit'];
                    $strSqlFinal = '  SELECT * FROM 
                                        (
                                            SELECT consultaPrincipal.*,rownum AS consultaPrincipal_rownum 
                                            FROM (' . $strSqlPrincipal . ') consultaPrincipal 
                                            WHERE rownum<=' . $intFin . '
                                        ) WHERE consultaPrincipal_rownum >' . $intInicio;
                }
                else
                {
                    $strSqlFinal = '  SELECT consultaPrincipal.* 
                                        FROM (' . $strSqlPrincipal . ') consultaPrincipal 
                                        WHERE rownum<=' . $arrayParametros['intLimit'];
                }
            }
            else
            {
                $strSqlFinal = $strSqlPrincipal;
            }

            $query->setSQL($strSqlFinal);
            $arrayResultado = $query->getResult();

            $strSqlCount = $strSelectCount . " FROM (" . $strSqlPrincipal . ")";
            $queryCount->setSQL($strSqlCount);

            $intTotal = $queryCount->getSingleScalarResult();

            $arrayRespuesta['resultado'] = $arrayResultado;
            $arrayRespuesta['total'] = $intTotal;
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        return $arrayRespuesta;
    }
    /***********************************Fin Asignación Operativa**********************************/
    
    
    
    /************************************Asignación Vehicular Predefinida************************/
    
    
        
   /*
    * getJsonRegistrosEdificacion
    * genera el json de la data de la fucion getRegistrosEdificacion que obtiene los elementos 
    *
    * @author John Vera 
    * @version 1.0 09-03-2016
    * @param array $arrayParametros [$start, $limit, $idSolicitud, $codEmpresa, $nombreNodo, $idCanton, $userCrea, $estado, $estadoElemento, 
     *                               $modeloElemento, $fechaDesde,  $fechaHasta ]
    * @return json $data[total, encontrados]
    */
    
    public function getJsonRegistrosEdificacion($arrayParametros)
    {

        $respuestaSolicitudes = $this->getRegistrosEdificacion($arrayParametros);

        if($respuestaSolicitudes)
        {
            $data = '{"total":"' . $respuestaSolicitudes['total'] . '","encontrados":' . json_encode($respuestaSolicitudes['registros']) . '}';
        }
        else
        {
            $data = '{"total":"0","encontrados":[]}';
        }
        
        return $data;
    }
    
        /**
    *
    * getRegistrosEdificacion
    * obtiene las solicitudes de nodo cliente
    *
    * @author John Vera 
    * @version 1.0 09-03-2016
    * 
    * @author John Vera <javera@telconet.ec>
    * @version 1.1 15-05-2016 nuevo filtro de direccion
    * 
    * @author John Vera <javera@telconet.ec>
    * @version 1.2 14-11-2016 se agrego que se consulte el detalle ADMINISTRA
    *
    * @author Allan Suarez <arsuarez@telconet.ec>
    * @version 1.3 16-05-2017 SE devuelve en la consults el tipo de administracion que posee el edificio
    * 
    * @author Allan Suarez <arsuarez@telconet.ec>
    * @version 1.4 07-06-2017 Cuando se trate de modelo de Búsqueda NODO SATELITAL no es necesaria la busqueda con canton dado que los
    *                         elementos Satelitales son gestionados a nivel nacional
    * 
    * @param array $arrayParametros [$start, $limit, $idSolicitud, $codEmpresa, $nombreNodo, $idCanton, $userCrea, $estado, $estadoElemento, 
     *                               $modeloElemento, $fechaDesde,  $fechaHasta ]
    * @return array $resultadoArray[registros, total]
    */
    
    public function getRegistrosEdificacion($arrayParametros)
    {
        $rsm = new ResultSetMappingBuilder($this->_em);
        $query = $this->_em->createNativeQuery(null, $rsm);
        $start = $arrayParametros['start'];
        $limit = $arrayParametros['limit'];
        $idSolicitud    = $arrayParametros["idSolicitud"];
        $codEmpresa     = $arrayParametros["codEmpresa"];
        $nombreNodo     = $arrayParametros["nombreNodo"];
        $idCanton       = $arrayParametros["idCanton"];
        $estadoElemento = $arrayParametros["estadoElemento"];
        $modeloElemento = $arrayParametros["modeloElemento"];
        $direccion      = $arrayParametros["direccion"];
        $boolEsVsat     = false;
        
        //Si el modelo es NODO SATELITAL se trata de la busqueda de edificios creados para UM VSAT
        if(isset($arrayParametros["nombreModelo"]) && !empty($arrayParametros["nombreModelo"]) &&
           $arrayParametros["nombreModelo"] == 'NODO SATELITAL' )
        {
            $boolEsVsat = true;
        }
        
        $strSelect = "";
        $strWhere  = "";
        $strFrom   = "";
        
        if(!$boolEsVsat)
        {
            $strSelect = "  
                            ,C.NOMBRE_CANTON,
                            C.ID_CANTON,
                            (
                            SELECT 
                              J.NOMBRE_JURISDICCION
                            FROM 
                              DB_GENERAL.ADMI_CANTON_JURISDICCION CJ,
                              DB_COMERCIAL.INFO_OFICINA_GRUPO OG,
                              DB_GENERAL.ADMI_JURISDICCION J
                            WHERE 
                                  CJ.CANTON_ID    = C.ID_CANTON
                            AND J.ID_JURISDICCION = CJ.JURISDICCION_ID
                            AND J.OFICINA_ID      = OG.ID_OFICINA
                            AND OG.EMPRESA_ID     = :codEmpresa
                            AND ROWNUM < 2) JURISDICCION ";
            
            $strWhere = " 
                          AND P.ID_PARROQUIA = U.PARROQUIA_ID
                          AND C.ID_CANTON    = P.CANTON_ID ";
            
            $strFrom  = "
                         ,DB_GENERAL.ADMI_PARROQUIA P,
                          DB_GENERAL.ADMI_CANTON    C ";
        }


        $sql = "SELECT
                E.ID_ELEMENTO,
                E.NOMBRE_ELEMENTO,                
                E.FE_CREACION,
                ME.NOMBRE_MODELO_ELEMENTO,                 
                E.ESTADO ESTADO_ELEMENTO,  
                NVL((SELECT DETALLE_VALOR 
                   FROM INFO_DETALLE_ELEMENTO 
                  WHERE ELEMENTO_ID = E.ID_ELEMENTO 
                    AND DETALLE_NOMBRE = :tipoAdministracion
                    AND ESTADO = :estadoDetalle),'TELCONET') TIPO_ADMINISTRACION,
                (SELECT DETALLE_VALOR 
                   FROM INFO_DETALLE_ELEMENTO 
                  WHERE ELEMENTO_ID = E.ID_ELEMENTO 
                    AND DETALLE_NOMBRE = :detalleElemento 
                    AND ESTADO = :estadoDetalle) ADMINISTRA_PSEUDO,
                U.DIRECCION_UBICACION,
                U.LATITUD_UBICACION,
                U.LONGITUD_UBICACION
                    
                $strSelect
                    
                FROM 
                DB_INFRAESTRUCTURA.INFO_ELEMENTO               E,
                DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA EE,
                DB_INFRAESTRUCTURA.INFO_UBICACION              U,                                
                DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO        ME,
                DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO          TE
                
                $strFrom
                    
                WHERE 
                TE.ID_TIPO_ELEMENTO         = ME.TIPO_ELEMENTO_ID
                AND TE.NOMBRE_TIPO_ELEMENTO = :tipoElemento
                AND ME.ID_MODELO_ELEMENTO   = E.MODELO_ELEMENTO_ID
                AND E.ID_ELEMENTO           = EE.ELEMENTO_ID
                AND EE.UBICACION_ID         = U.ID_UBICACION
                AND EE.EMPRESA_COD          = :codEmpresa
                
                $strWhere
                
                ";
        
        $query->setParameter("codEmpresa", $codEmpresa);
        $query->setParameter("idSolicitud", $idSolicitud);
        $query->setParameter("tipoElemento", 'EDIFICACION');
        $query->setParameter("detalleElemento", 'ADMINISTRA');
        $query->setParameter("tipoAdministracion", 'TIPO_ADMINISTRACION');
        $query->setParameter("estadoDetalle", 'Activo');

        if($estadoElemento)
        {
            $sql.= " AND E.ESTADO = :estadoElemento ";
            $query->setParameter("estadoElemento", $estadoElemento);
        }
        if($direccion && !$boolEsVsat)
        {
            $sql.= " AND UPPER(U.DIRECCION_UBICACION) LIKE :direccion ";
            $query->setParameter("direccion", strtoupper('%' . $direccion . '%'));
        }        
        if($idCanton && !$boolEsVsat)
        {
            $sql.= " AND C.ID_CANTON = :idCanton ";
            $query->setParameter("idCanton", $idCanton);
        }
        if($nombreNodo)
        {
            $sql.= " AND UPPER(E.NOMBRE_ELEMENTO) LIKE :nombreNodo ";
            $query->setParameter("nombreNodo", strtoupper('%' . $nombreNodo . '%'));
        }

        if($modeloElemento)
        {
            $sql.= " AND E.MODELO_ELEMENTO_ID = :modeloElemento ";
            $query->setParameter("modeloElemento", $modeloElemento);
        }        
        $sql.= " ORDER BY E.FE_CREACION DESC ";
        $rsm->addScalarResult(strtoupper('ID_ELEMENTO'), 'idElemento', 'integer');
        $rsm->addScalarResult(strtoupper('NOMBRE_MODELO_ELEMENTO'), 'modeloElemento', 'string');
        $rsm->addScalarResult(strtoupper('ID_DETALLE_SOLICITUD'), 'idSolicitud', 'integer');
        $rsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');
        $rsm->addScalarResult(strtoupper('DIRECCION_UBICACION'), 'direccion', 'string');
        $rsm->addScalarResult(strtoupper('LATITUD_UBICACION'), 'latitud', 'string');
        $rsm->addScalarResult(strtoupper('LONGITUD_UBICACION'), 'longitud', 'string');
        $rsm->addScalarResult(strtoupper('FE_CREACION'), 'feCreacion', 'string');
        $rsm->addScalarResult(strtoupper('NOMBRE_CANTON'), 'canton', 'string');
        $rsm->addScalarResult(strtoupper('ID_CANTON'), 'idCanton', 'string');
        $rsm->addScalarResult(strtoupper('JURISDICCION'), 'jurisdiccion', 'string');
        $rsm->addScalarResult(strtoupper('USR_CREACION'), 'usrCreacion', 'string');
        $rsm->addScalarResult(strtoupper('ESTADO'), 'estado', 'string');
        $rsm->addScalarResult(strtoupper('ESTADO_ELEMENTO'), 'estadoElemento', 'string');
        $rsm->addScalarResult(strtoupper('ADMINISTRA_PSEUDO'), 'administraPseudo', 'string');
        $rsm->addScalarResult(strtoupper('TIPO_ADMINISTRACION'), 'tipoAdministracion', 'string');

        $query->setSQL($sql);

        $solicitudes = $query->getResult();
        $totalSolicitudes = count($solicitudes);

        $encontrados = array_slice($solicitudes, $start, $limit);

        $solicitudesArray = array();
        if($encontrados)
        {
            foreach($encontrados as $registro)
            {
                $solicitudesArray[] = array(
                    'idElemento'      => $registro['idElemento'],
                    'idSolicitud'     => $registro['idSolicitud'],
                    'nombreElemento'  => $registro['nombreElemento'],
                    'direccion'       => $registro['direccion'],
                    'latitud'         => $registro['latitud'],
                    'longitud'        => $registro['longitud'],
                    'feCreacion'      => $registro['feCreacion'],
                    'canton'          => !$boolEsVsat?$registro['canton']:'NACIONAL',
                    'idCanton'        => !$boolEsVsat?$registro['idCanton']:0,
                    'jurisdiccion'    => !$boolEsVsat?$registro['jurisdiccion']:'NACIONAL',
                    'estado'          => $registro['estado'],
                    'estadoElemento'  => $registro['estadoElemento'],
                    'modeloElemento'  => $registro['modeloElemento'],
                    'administraPseudo'=> $registro['administraPseudo'],
                    'tipoAdmin'       => $registro['tipoAdministracion'],
                    'usrCreacion'     => $registro['usrCreacion']);
            }
        }

        $resultadoArray['registros'] = $solicitudesArray;
        $resultadoArray['total'] = $totalSolicitudes;
        return $resultadoArray;
    }
    
    /**
     * getJSONAsignacionVehicularPredefinidaByCriterios
     *
     * Método que devuelve el json con todos los vehículos de la empresa y la información de la asignacion vehicular predefinida.                                    
     *      
     * @param array $arrayParametros  [ 
     *                                  
     *                                  'intStart'                      => inicio el rownum,
     *                                  'intLimit'                      => fin del rownum, 
     *                                  'intEmpresa'                    => id de la empresa en sesión,
     *                                  'tipoElemento'                  => tipo 'VEHICULO', 
     *                                  'strEstadoActivo'               => string del estado Activo,
     *                                  'intIdTipoSolicitud'            => id del tipo de solicitud para una asignacion vehicular predefinida,
     *                                  'intIdCaracteristicaZonaPredefinida'            => id de la caracteristica de la zona predefinida,
     *                                  'intIdCaracteristicaTareaPredefinida'           => id de la caracteristica de la tarea predefinida,
     *                                  'intIdCaracteristicaDepartamentoPredefinido'    => id de la caracteristica del departamento predefinido,
     *                                  'criterios'                     => array con los datos propios del vehículo  
     *                                                                      'placa','modeloElemento', 'detallesElemento'
     *                              ]
     * @return json $jsonData
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 
     * 
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 25-08-2016 - Se realizan ajustes para obtener el número del disco y los horarios de las asignaciones predefinidas de choferes
     * 
     */
    public function getJSONAsignacionVehicularPredefinidaByCriterios($arrayParametros,$em)
    {
        $arrayEncontrados   = array();
        $arrayResultado     = $this->getResultadoAsignacionVehicularPredefinidaByCriterios($arrayParametros,$em);
        $resultado          = $arrayResultado['resultado'];
        $intTotal           = $arrayResultado['total'];
        $total = 0;

        if($resultado)
        {
            $total = $intTotal;
            foreach($resultado as $data)
            {
                $arrayItem = array();

                $arrayItem['intIdElemento']                         = $data['idElemento'];
                $arrayItem['strNombreElemento']                     = $data['nombreElemento'];
                $arrayItem['strDISCO']                              = $data['discoElemento'];
                $arrayItem['intIdModeloElemento']                   = $data['idModeloElemento'];
                $arrayItem['strNombreModeloElemento']               = $data['nombreModeloElemento'];
                $arrayItem['strNombreTipoElemento']                 = $data['nombreTipoElemento'];
                $arrayItem['intIdDetalleSolicitudPredefinida']      = $data['idDetalleSolicitudPredefinida'] 
                                                                        ? $data['idDetalleSolicitudPredefinida']:'';
                $arrayItem['strFechaDesdeAsignacionPredefinida']    = $data["fechaDesdeAsignacionPredefinida"];
                $arrayItem['strHoraDesdeAsignacionPredefinida']     = $data["horaDesdeAsignacionPredefinida"];
                $arrayItem['strHoraHastaAsignacionPredefinida']     = $data["horaHastaAsignacionPredefinida"];
                $arrayItem['intIdZonaPredefinida']                  = $data['idZonaPredefinida'] ? $data['idZonaPredefinida'] : '';
                $arrayItem['strZonaPredefinida']                    = $data['zonaPredefinida'] ? $data['zonaPredefinida'] : '';
                $arrayItem['intIdTareaPredefinida']                 = $data['idTareaPredefinida'] ? $data['idTareaPredefinida'] : '';
                $arrayItem['strTareaPredefinida']                   = $data['tareaPredefinida'] ? $data['tareaPredefinida'] : '';
                $arrayItem['intIdDepartamentoPredefinido']          = $data['idDepartamentoPredefinido'] ? $data['idDepartamentoPredefinido'] : '';
                $arrayItem['strDepartamentoPredefinido']            = $data['departamentoPredefinido'] ? $data['departamentoPredefinido'] : '';
                $arrayItem['intIdPerChoferPredefinido']             = $data['idPerChoferPredefinido'] ? $data['idPerChoferPredefinido']:'';
                $arrayItem['intIdPersonaChoferPredefinido']         = $data['idPersonaChoferPredefinido'] ? $data['idPersonaChoferPredefinido'] :'';
                $arrayItem['strIdentificacionChoferPredefinido']    = $data['identificacionChoferPredefinido'] 
                                                                        ? $data['identificacionChoferPredefinido'] : '';
                $arrayItem['strNombresChoferPredefinido']           = $data['nombresChoferPredefinido'] 
                                                                        ? $data['nombresChoferPredefinido'] : '';
                $arrayItem['strApellidosChoferPredefinido']         = $data['apellidosChoferPredefinido'] 
                                                                        ? $data['apellidosChoferPredefinido'] : '';
                $arrayEncontrados[] = $arrayItem;
            }
        }
        $arrayRespuesta = array('total' => $total, 'encontrados' => $arrayEncontrados);
        $jsonData = json_encode($arrayRespuesta);
        return $jsonData;
    }
    
    /**
     * getResultadoAsignacionVehicularPredefinidaByCriterios
     *
     * Método que retorna todos los vehículos de la empresa con la información de la asignación vehicular predefinida.                                    
     *      
     * @param array $arrayParametros  [ 
     *                                  
     *                                  'intStart'                      => inicio el rownum,
     *                                  'intLimit'                      => fin del rownum, 
     *                                  'intEmpresa'                    => id de la empresa en sesión,
     *                                  'tipoElemento'                  => tipo 'VEHICULO', 
     *                                  'strEstadoActivo'               => string del estado Activo,
     *                                  'intIdTipoSolicitud'            => id del tipo de solicitud para una asignacion vehicular predefinida,
     *                                  'intIdCaracteristicaZonaPredefinida'            => id de la caracteristica de la zona predefinida,
     *                                  'intIdCaracteristicaTareaPredefinida'           => id de la caracteristica de la tarea predefinida,
     *                                  'intIdCaracteristicaDepartamentoPredefinido'    => id de la caracteristica del departamento predefinido,
     *                                  'criterios'                     => array con los datos propios del vehículo  
     *                                                                      'placa','modeloElemento', 'detallesElemento'
     *                              ]
     * @return array $arrayResultados [ 'registros', 'total' ]
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 09-04-2016
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 25-08-2016 - Se realizan ajustes para obtener el disco y los horarios de las asignaciones predefinidas de choferes
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 06-10-2016 - Se realizan ajustes para filtrar por hora de inicio y hora de fin las asignaciones predefinidas de choferes
     */
    public function getResultadoAsignacionVehicularPredefinidaByCriterios($arrayParametros,$em)
    {
        $arrayRespuesta['total'] = 0;
        $arrayRespuesta['resultado'] = "";
        try
        {
            $rsm        = new ResultSetMappingBuilder($em);
            $rsmCount   = new ResultSetMappingBuilder($em);
            $query      = $em->createNativeQuery(null, $rsm);
            $queryCount = $em->createNativeQuery(null, $rsmCount);

            $strSelect = " SELECT DISTINCT (ie.ID_ELEMENTO),ie.NOMBRE_ELEMENTO,
                                    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INFRF_GET_DETALLE_VALOR(:strDetalleDISCO,ie.ID_ELEMENTO,:estadoActivo)
                                    AS DISCO_ELEMENTO,
                                    ame.ID_MODELO_ELEMENTO,ame.NOMBRE_MODELO_ELEMENTO,
                                    ate.NOMBRE_TIPO_ELEMENTO,
                                    detalleSolicitud.ID_DETALLE_SOLICITUD,
                                    COALESCE(TO_CHAR(detalleSolicitudHist.FE_INI_PLAN,'DD/MM/YYYY'),'') AS FE_INI_PLAN,
                                    COALESCE(TO_CHAR(detalleSolicitudHist.FE_INI_PLAN,'HH24:MI'),'') AS HORA_INICIO,
                                    COALESCE(TO_CHAR(detalleSolicitudHist.FE_FIN_PLAN,'HH24:MI'),'') AS HORA_FIN,
                                    zona.ID_ZONA AS ID_ZONA_PREDEFINIDA,
                                    zona.NOMBRE_ZONA AS ZONA_PREDEFINIDA,
                                    tarea.ID_TAREA AS ID_TAREA_PREDEFINIDA,
                                    tarea.NOMBRE_TAREA AS TAREA_PREDEFINIDA,
                                    departamento.ID_DEPARTAMENTO AS ID_DEPARTAMENTO_PREDEFINIDO,
                                    departamento.NOMBRE_DEPARTAMENTO AS DEPARTAMENTO_PREDEFINIDO,
                                    per.ID_PERSONA_ROL as ID_PER_CHOFER_PREDEFINIDO,
                                    p.IDENTIFICACION_CLIENTE as IDENTIFICACION_CHOFER_PRED,
                                    p.ID_PERSONA AS ID_PERSONA_CHOFER_PREDEFINIDO,
                                    p.NOMBRES AS NOMBRES_CHOFER_PREDEFINIDO,
                                    p.APELLIDOS AS APELLIDOS_CHOFER_PREDEFINIDO ";

            $strSelectCount = " SELECT COUNT(*) AS TOTAL ";

            $strFromAndWhere = " FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO ie
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO ame ON ie.MODELO_ELEMENTO_ID = ame.ID_MODELO_ELEMENTO 
                                    INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ate ON ame.TIPO_ELEMENTO_ID = ate.ID_TIPO_ELEMENTO 
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO iee ON iee.ELEMENTO_ID = ie.ID_ELEMENTO 
                                    
                                    LEFT JOIN DB_COMERCIAL.INFO_DETALLE_SOLICITUD detalleSolicitud 
                                        ON detalleSolicitud.ELEMENTO_ID = ie.ID_ELEMENTO 
                                            AND detalleSolicitud.TIPO_SOLICITUD_ID = :idTipoSolicitud
                                            AND detalleSolicitud.ESTADO = :estadoActivo
                                    LEFT JOIN DB_COMERCIAL.INFO_DETALLE_SOL_HIST detalleSolicitudHist 
                                        ON detalleSolicitudHist.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD 
                                            AND detalleSolicitudHist.ESTADO = :estadoActivo
                                            
                                    LEFT JOIN DB_SOPORTE.INFO_DETALLE detalle 
                                        ON detalle.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD
                                        
                                    LEFT JOIN DB_SOPORTE.INFO_DETALLE_ASIGNACION detalleAsignacion
                                        ON detalleAsignacion.DETALLE_ID = detalle.ID_DETALLE
                                    
                                    LEFT JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL per 
										ON per.ID_PERSONA_ROL=detalleAsignacion.PERSONA_EMPRESA_ROL_ID
										
                                    LEFT JOIN DB_COMERCIAL.INFO_PERSONA p 
										ON per.PERSONA_ID = p.ID_PERSONA
                                        
                                    LEFT JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT detalleSolCaractZona
                                        ON detalleSolCaractZona.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD
                                            AND detalleSolCaractZona.CARACTERISTICA_ID = :idCaracteristicaZonaPredefinida
                                    LEFT JOIN DB_GENERAL.ADMI_ZONA zona
                                        ON zona.ID_ZONA = detalleSolCaractZona.VALOR
                                    
                                    LEFT JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT detalleSolCaractTarea
                                        ON detalleSolCaractTarea.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD
                                            AND detalleSolCaractTarea.CARACTERISTICA_ID = :idCaracteristicaTareaPredefinida 
                                    LEFT JOIN DB_SOPORTE.ADMI_TAREA tarea
                                        ON tarea.ID_TAREA = detalleSolCaractTarea.VALOR
                                    
                                    LEFT JOIN DB_COMERCIAL.INFO_DETALLE_SOL_CARACT detalleSolCaractDepartamento
                                        ON detalleSolCaractDepartamento.DETALLE_SOLICITUD_ID = detalleSolicitud.ID_DETALLE_SOLICITUD
                                            AND detalleSolCaractDepartamento.CARACTERISTICA_ID = :idCaracteristicaDepartamentoPredefinido
                                    LEFT JOIN DB_GENERAL.ADMI_DEPARTAMENTO departamento
                                        ON departamento.ID_DEPARTAMENTO = detalleSolCaractDepartamento.VALOR


                                    WHERE ie.ESTADO = :estadoActivo 
                                    AND ate.NOMBRE_TIPO_ELEMENTO LIKE :nombreTipoElemento 
                                    AND ame.ESTADO = :estadoActivo 
                                    AND ate.ESTADO = :estadoActivo
                                    AND iee.EMPRESA_COD = :intEmpresa
                                     ";

            $strOrderBy = "  ORDER BY LPAD(DISCO_ELEMENTO,10), HORA_INICIO";

            $rsm->addScalarResult('ID_ELEMENTO', 'idElemento', 'integer');
            $rsm->addScalarResult('NOMBRE_ELEMENTO', 'nombreElemento', 'string');
            $rsm->addScalarResult('DISCO_ELEMENTO', 'discoElemento', 'string');
            
            $rsm->addScalarResult('ID_MODELO_ELEMENTO', 'idModeloElemento', 'integer');
            $rsm->addScalarResult('NOMBRE_MODELO_ELEMENTO', 'nombreModeloElemento', 'string');
            $rsm->addScalarResult('NOMBRE_TIPO_ELEMENTO', 'nombreTipoElemento', 'string');
            $rsm->addScalarResult('ID_DETALLE_SOLICITUD', 'idDetalleSolicitudPredefinida', 'string');
            $rsm->addScalarResult('FE_INI_PLAN', 'fechaDesdeAsignacionPredefinida', 'string');
            $rsm->addScalarResult('HORA_INICIO', 'horaDesdeAsignacionPredefinida', 'string');
            $rsm->addScalarResult('HORA_FIN', 'horaHastaAsignacionPredefinida', 'string');
            $rsm->addScalarResult('ID_ZONA_PREDEFINIDA', 'idZonaPredefinida', 'integer');
            $rsm->addScalarResult('ZONA_PREDEFINIDA', 'zonaPredefinida', 'string');
            $rsm->addScalarResult('ID_TAREA_PREDEFINIDA', 'idTareaPredefinida', 'integer');
            $rsm->addScalarResult('TAREA_PREDEFINIDA', 'tareaPredefinida', 'string');
            $rsm->addScalarResult('ID_DEPARTAMENTO_PREDEFINIDO', 'idDepartamentoPredefinido', 'integer');
            $rsm->addScalarResult('DEPARTAMENTO_PREDEFINIDO', 'departamentoPredefinido', 'string');
            $rsm->addScalarResult('ID_PER_CHOFER_PREDEFINIDO', 'idPerChoferPredefinido', 'integer');
            $rsm->addScalarResult('ID_PERSONA_CHOFER_PREDEFINIDO', 'idPersonaChoferPredefinido', 'integer');
            $rsm->addScalarResult('IDENTIFICACION_CHOFER_PRED', 'identificacionChoferPredefinido', 'string');
            $rsm->addScalarResult('NOMBRES_CHOFER_PREDEFINIDO', 'nombresChoferPredefinido', 'string');
            $rsm->addScalarResult('APELLIDOS_CHOFER_PREDEFINIDO', 'apellidosChoferPredefinido', 'string');
            $rsmCount->addScalarResult('TOTAL', 'total', 'integer');
 
            $query->setParameter('idTipoSolicitud', $arrayParametros['intIdTipoSolicitud']);
            $queryCount->setParameter('idTipoSolicitud', $arrayParametros['intIdTipoSolicitud']);
            
            $query->setParameter('idCaracteristicaZonaPredefinida', $arrayParametros['intIdCaracteristicaZonaPredefinida']);
            $queryCount->setParameter('idCaracteristicaZonaPredefinida', $arrayParametros['intIdCaracteristicaZonaPredefinida']);
            
            $query->setParameter('idCaracteristicaTareaPredefinida', $arrayParametros['intIdCaracteristicaTareaPredefinida']);
            $queryCount->setParameter('idCaracteristicaTareaPredefinida', $arrayParametros['intIdCaracteristicaTareaPredefinida']);
            
            $query->setParameter('idCaracteristicaDepartamentoPredefinido', $arrayParametros['intIdCaracteristicaDepartamentoPredefinido']);
            $queryCount->setParameter('idCaracteristicaDepartamentoPredefinido', $arrayParametros['intIdCaracteristicaDepartamentoPredefinido']);
            
            $query->setParameter('intEmpresa', $arrayParametros['intEmpresa']);
            $queryCount->setParameter('intEmpresa', $arrayParametros['intEmpresa']);

            $query->setParameter('nombreTipoElemento', $arrayParametros['tipoElemento']);
            $queryCount->setParameter('nombreTipoElemento', $arrayParametros['tipoElemento']);

            $query->setParameter('estadoActivo', $arrayParametros['strEstadoActivo']);
            $queryCount->setParameter('estadoActivo', $arrayParametros['strEstadoActivo']);
            
            $query->setParameter('strDetalleDISCO', 'DISCO');
            $queryCount->setParameter('strDetalleDISCO', 'DISCO');


            $strWhereBusqueda = "";
            if(isset($arrayParametros['strHoraInicioAsignacion']) && isset($arrayParametros['strHoraFinAsignacion']))
            {
                if($arrayParametros['strHoraInicioAsignacion'] && $arrayParametros['strHoraFinAsignacion'])
                {
                    $strWhereBusqueda .= " AND COALESCE(TO_CHAR(detalleSolicitudHist.FE_INI_PLAN,'HH24:MI'),'') = :strHoraInicioAsignacion ";

                    $query->setParameter('strHoraInicioAsignacion', $arrayParametros['strHoraInicioAsignacion']);

                    $queryCount->setParameter('strHoraInicioAsignacion', $arrayParametros['strHoraInicioAsignacion']);
                    
                    $strWhereBusqueda .= " AND COALESCE(TO_CHAR(detalleSolicitudHist.FE_FIN_PLAN,'HH24:MI'),'') = :strHoraFinAsignacion ";

                    $query->setParameter('strHoraFinAsignacion', $arrayParametros['strHoraFinAsignacion']);

                    $queryCount->setParameter('strHoraFinAsignacion', $arrayParametros['strHoraFinAsignacion']);
                }
            }
            
            if(isset($arrayParametros['criterios']))
            {
                if(isset($arrayParametros['criterios']['idElemento']))
                {
                    if($arrayParametros['criterios']['idElemento'])
                    {
                        $strWhereBusqueda .= 'AND ie.ID_ELEMENTO = :idElemento ';

                        $query->setParameter('idElemento', $arrayParametros['criterios']['idElemento']);

                        $queryCount->setParameter('idElemento', $arrayParametros['criterios']['idElemento']);
                    }
                }
                if(isset($arrayParametros['criterios']['placa']))
                {
                    if($arrayParametros['criterios']['placa'])
                    {
                        $strWhereBusqueda .= 'AND ie.NOMBRE_ELEMENTO LIKE :placa ';

                        $query->setParameter('placa', '%' . trim($arrayParametros['criterios']['placa']) . '%');

                        $queryCount->setParameter('placa', '%' . trim($arrayParametros['criterios']['placa']) . '%');
                    }
                }

                if(isset($arrayParametros['criterios']['modeloElemento']))
                {
                    if($arrayParametros['criterios']['modeloElemento'])
                    {
                        $strWhereBusqueda .= 'AND ame.ID_MODELO_ELEMENTO IN (:modeloElemento) ';

                        $query->setParameter('modeloElemento', array_values($arrayParametros['criterios']['modeloElemento']));

                        $queryCount->setParameter('modeloElemento', array_values($arrayParametros['criterios']['modeloElemento']));
                    }
                }

                if(isset($arrayParametros['criterios']['detallesElemento']))
                {
                    $intDetalleElemento = 0;
                    foreach($arrayParametros['criterios']['detallesElemento'] as $keyDetalleElemento => $valDetalleElemento)
                    {
                        if($valDetalleElemento)
                        {
                            $strWhereBusqueda .= 'AND ie.ID_ELEMENTO IN (
                                                        SELECT ide' . $intDetalleElemento . '.ELEMENTO_ID
                                                        FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO ide' . $intDetalleElemento . '
                                                        WHERE ide'.$intDetalleElemento.'.DETALLE_NOMBRE = :keyDetalleElemento'.$intDetalleElemento.' 
                                                        AND ide'.$intDetalleElemento.'.DETALLE_VALOR = :valDetalleElemento'.$intDetalleElemento.' 
                                                        AND ide' . $intDetalleElemento . '.ESTADO = :estadoActivo
                                                       ) ';
                            $query->setParameter('keyDetalleElemento'.$intDetalleElemento, trim(strtoupper($keyDetalleElemento)));
                            $queryCount->setParameter('keyDetalleElemento'.$intDetalleElemento, trim(strtoupper($keyDetalleElemento)));
                            $query->setParameter('valDetalleElemento'.$intDetalleElemento, trim(strtoupper($valDetalleElemento)));
                            $queryCount->setParameter('valDetalleElemento'.$intDetalleElemento, trim(strtoupper($valDetalleElemento)));
                            $intDetalleElemento++;
                        }
                    }
                }
            }
            
            
            if(isset($arrayParametros['criteriosChoferPredefinido']))
            {
                if(isset($arrayParametros['criteriosChoferPredefinido']['strIdentificacionChoferPredefinido']))
                {
                    if($arrayParametros['criteriosChoferPredefinido']['strIdentificacionChoferPredefinido'])
                    {
                        $identificacion=$arrayParametros['criteriosChoferPredefinido']['strIdentificacionChoferPredefinido'];
                        $strWhereBusqueda .= 'AND p.IDENTIFICACION_CLIENTE = :identificacionChoferPredefinido ';

                        $query->setParameter('identificacionChoferPredefinido', $identificacion);
                        $queryCount->setParameter('identificacionChoferPredefinido', $identificacion);
                    }
                }
                
                if(isset($arrayParametros['criteriosChoferPredefinido']['strNombresChoferPredefinido']))
                {
                    if($arrayParametros['criteriosChoferPredefinido']['strNombresChoferPredefinido'])
                    {
                        $nombres=$arrayParametros['criteriosChoferPredefinido']['strNombresChoferPredefinido'];
                        $strWhereBusqueda .= 'AND p.NOMBRES LIKE :nombresChoferPredefinido ';

                        $query->setParameter('nombresChoferPredefinido', '%'.$nombres.'%');
                        $queryCount->setParameter('nombresChoferPredefinido', '%'.$nombres.'%');
                    }
                }
                
                if(isset($arrayParametros['criteriosChoferPredefinido']['strApellidosChoferPredefinido']))
                {
                    if($arrayParametros['criteriosChoferPredefinido']['strApellidosChoferPredefinido'])
                    {
                        $apellidos=$arrayParametros['criteriosChoferPredefinido']['strApellidosChoferPredefinido'];
                        $strWhereBusqueda .= 'AND p.APELLIDOS LIKE :apellidosChoferPredefinido ';

                        $query->setParameter('apellidosChoferPredefinido', '%'.$apellidos.'%');
                        $queryCount->setParameter('apellidosChoferPredefinido', '%'.$apellidos.'%');
                    }
                }

                
            }

            $strSqlPrincipal = $strSelect . $strFromAndWhere . $strWhereBusqueda . $strOrderBy;

            $strSqlFinal = '';

            if(isset($arrayParametros['intStart']) && isset($arrayParametros['intLimit']))
            {
                if($arrayParametros['intStart'] && $arrayParametros['intLimit'])
                {
                    $intInicio = $arrayParametros['intStart'];
                    $intFin = $arrayParametros['intStart'] + $arrayParametros['intLimit'];
                    $strSqlFinal = '  SELECT * FROM 
                                        (
                                            SELECT consultaPrincipal.*,rownum AS consultaPrincipal_rownum 
                                            FROM (' . $strSqlPrincipal . ') consultaPrincipal 
                                            WHERE rownum<=' . $intFin . '
                                        ) WHERE consultaPrincipal_rownum >' . $intInicio;
                }
                else
                {
                    $strSqlFinal = '  SELECT consultaPrincipal.* 
                                        FROM (' . $strSqlPrincipal . ') consultaPrincipal 
                                        WHERE rownum<=' . $arrayParametros['intLimit'];
                }
            }
            else
            {
                $strSqlFinal = $strSqlPrincipal;
            }

            $query->setSQL($strSqlFinal);
            $arrayResultado = $query->getResult();

            $strSqlCount = $strSelectCount . " FROM (" . $strSqlPrincipal . ")";
            $queryCount->setSQL($strSqlCount);

            $intTotal = $queryCount->getSingleScalarResult();

            $arrayRespuesta['resultado'] = $arrayResultado;
            $arrayRespuesta['total'] = $intTotal;
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }
        return $arrayRespuesta;
    }
    
    /*********************************Fin Asignación Vehicular Predefinida************************/


     /** getJsonElementosContenidosNodo
     * 
     * Metodo que obtiene el json con los elemento contenidos en un nodo determinado
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 25-02-2016
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1          Se agrega parametro tipo de elemento para reutilizar metodo en proceso de Factibilidad Automatica TN
     * @since 30-06-2016
     * 
     * @author Sofia Fernandez <sfernandez@telconet.ec>
     * @version 1.2          Se agrega parametro id de elemento para reutilizar metodo en consulta de elementos relacionados.
     * @since 11-03-2017
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.3 08-04-2021 - 1.- Se modifica el método aplicando los estandares de calidad.
     *                           2.- Se modifica el método para consultar los elementos contenidos
     *                               de los elementos principales de un nodo.
     *
     * @param integer $intIdNodo
     * @param String  $strTipoElemento
     * @return json
     */
    public function getJsonElementosContenidosNodo($arrayParametros)
    {
        $boolNodo               = $arrayParametros['boolNodo'];
        $boolEsSecundario       = $arrayParametros['boolEsSecundario'];
        $intIdNodo              = $arrayParametros['intIdNodo'];
        $intIdElementoPrincipal = $arrayParametros['intIdElementoPrincipal'];
        $strTipoElemento        = $arrayParametros['strTipoElemento'];
        $arrayFiltros           = $arrayParametros['arrayFiltros'];
        $arrayResultado         = $this->getResultadoElementosContenidosNodo($intIdNodo,$strTipoElemento,$arrayFiltros);

        if (!empty($arrayResultado) && count($arrayResultado) > 0)
        {
            foreach ($arrayResultado['resultado'] as $arrayData)
            {
                $strLoginCliente                  = "";
                $boolExistenElementos             = false;
                $boolInhabilitar                  = false;
                $arrayElementos                   = array();
                $arrayElementos['idElemento']     = $arrayData['id'];
                $arrayElementos['nombreElemento'] = $arrayData['nombreElemento'];
                $arrayElementos['descripcionElemento']     = $arrayData['descripcionElemento'];
                $arrayElementos['modeloElemento'] = $arrayData['nombreModeloElemento'];
                $arrayElementos['tipoElemento']   = $arrayData['nombreTipoElemento'];
                $arrayElementos['serieFisica']    = $arrayData['serieFisica'];
                $arrayElementos['estado']         = $arrayData['estado'];
                $arrayElementos['feCreacion']     = $arrayData['feCreacion']->format('Y-m-d H:i:s');
                $arrayElementos['usrCreacion']    = $arrayData['usrCreacion'];

                if ($boolNodo)
                {
                    //Obtenemos el login del cliente.
                    $objInfoDetalleElemento = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                            ->findOneBy(array('elementoId'    =>  $arrayData['id'],
                                              'detalleNombre' => 'SERVICIO',
                                              'estado'        => 'Activo'));

                    if (is_object($objInfoDetalleElemento) && $objInfoDetalleElemento->getDetalleValor() !== null)
                    {
                        $strIdServicio   = $objInfoDetalleElemento->getDetalleValor();
                        $objInfoServicio = $this->_em->getRepository('schemaBundle:InfoServicio')->find($strIdServicio);

                        if (is_object($objInfoServicio))
                        {
                            $strLoginCliente = $objInfoServicio->getPuntoId()->getLogin();
                        }
                    }

                    //Verificamos si el elemento cuenta con alguna solicitud de cambio o retiro.
                    $arrayParametrosSolicitud = array();
                    $arrayParametrosSolicitud['intIdElementoNodo'] = $intIdNodo;
                    $arrayParametrosSolicitud['strIdElemento']     = $arrayData['id'];
                    $arraySolicitudes = $this->obtenerSolicitudesElementoNodo($arrayParametrosSolicitud);
                    if (!empty($arraySolicitudes) && count($arraySolicitudes) > 0)
                    {
                        $boolInhabilitar = true;
                    }

                    //Verificamos si el nodo tiene elementos asociados.
                    $objInfoRelacionElemento = $this->_em->getRepository('schemaBundle:InfoRelacionElemento')
                            ->findOneBy(array('elementoIdA' => $arrayData['id'], 'estado' => 'Activo'));

                    if (is_object($objInfoRelacionElemento))
                    {
                        $boolExistenElementos = true;

                        if ($boolEsSecundario)
                        {
                            $arrayResultado2 = $this->getResultadoElementosContenidosNodo($arrayData['id'],"");

                            if (!empty($arrayResultado2) && count($arrayResultado2) > 0)
                            {
                                $boolInhabilitar2  = false;
                                $strLoginCliente2  = "";
                                $arrayData2        = $arrayResultado2['resultado'][0];

                                //Obtenemos el login del cliente.
                                $objInfoDetalleElemento = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                        ->findOneBy(array('elementoId'    =>  $arrayData2['id'],
                                                          'detalleNombre' => 'SERVICIO',
                                                          'estado'        => 'Activo'));

                                if (is_object($objInfoDetalleElemento) && $objInfoDetalleElemento->getDetalleValor() !== null)
                                {
                                    $strIdServicio   = $objInfoDetalleElemento->getDetalleValor();
                                    $objInfoServicio = $this->_em->getRepository('schemaBundle:InfoServicio')->find($strIdServicio);

                                    if (is_object($objInfoServicio))
                                    {
                                        $strLoginCliente2 = $objInfoServicio->getPuntoId()->getLogin();
                                    }
                                }

                                //Verificamos si el elemento cuenta con alguna solicitud de cambio o retiro.
                                $arrayParametrosSolicitud = array();
                                $arrayParametrosSolicitud['intIdElementoNodo'] = $intIdElementoPrincipal;
                                $arrayParametrosSolicitud['strIdElemento']     = $arrayData2['id'];
                                $arraySolicitudes = $this->obtenerSolicitudesElementoNodo($arrayParametrosSolicitud);
                                if (!empty($arraySolicitudes) && count($arraySolicitudes) > 0)
                                {
                                    $boolInhabilitar2 = true;
                                }

                                $arrayElementos['idElemento2']     = $arrayData2['id'];
                                $arrayElementos['nombreElemento2'] = $arrayData2['nombreElemento'];
                                $arrayElementos['modeloElemento2'] = $arrayData2['nombreModeloElemento'];
                                $arrayElementos['tipoElemento2']   = $arrayData2['nombreTipoElemento'];
                                $arrayElementos['estado2']         = $arrayData2['estado'];
                                $arrayElementos['serieFisica2']    = $arrayData2['serieFisica'];
                                $arrayElementos['inhabilitar2']    = $boolInhabilitar2;
                                $arrayElementos['loginCliente2']   = $strLoginCliente2;
                            }
                        }
                    }
                }

                $arrayElementos['existenElementos'] = $boolExistenElementos;
                $arrayElementos['inhabilitar']      = $boolInhabilitar;
                $arrayElementos['loginCliente']     = $strLoginCliente;
                $arrayEncontrados[] = $arrayElementos;
            }

            $arrayRespuesta = array('encontrados' => $arrayEncontrados); 
        }
        else
        {
            $arrayRespuesta = array('encontrados' => '[]');
        }

        $strJsonData = json_encode($arrayRespuesta);
        return $strJsonData;
    }

    /** getResultadoElementosContenidosNodo
     * 
     * Metodo que obtiene el resultado con los elemento contenidos en un nodo determinado
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 25-02-2016
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1          Se agrega parametro tipo de elemento para reutilizar metodo en proceso de Factibilidad Automatica TN
     * @since 30-06-2016
     *
     * @author Sofia Fernandez <sfernandez@telconet.ec>
     * @version 1.2          Se agrega validacion de estado para elemento Poste
     * @since 12-03-2017
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.3          Se agregaron los campos serieFisica, feCreacion y usrCreacion
     * @since 18-07-2019
     *
     * @author Germán Valenzuela <gvalenuela@telconet.ec>
     * @version 1.4 03-06-2021 - Si el tipo de elemento es 'NODO', se obtiene la relación elemento con estado Activo.
     *                         - Se agrega un nuevo parámetro para enviar mas filtros en caso de ser necesario.
     *
     * @param integer $intIdNodo
     * @return arrayResultado [ 'resultado' ]
     */
    public function getResultadoElementosContenidosNodo($intIdNodo, $strTipoElemento, $arrayFiltros = null)
    {
        $arrayResultado = array();
        try
        {
            $query = $this->_em->createQuery(null);

            $dql = "SELECT 
                    ele.id,
                    ele.nombreElemento,
                    iai.descripcion as descripcionElemento,
                    ele.estado,
                    ele.serieFisica,
                    ele.feCreacion,
                    ele.usrCreacion,
                    model.nombreModeloElemento,
                    tipo.nombreTipoElemento
                    FROM 
                        schemaBundle:InfoRelacionElemento rel
                        join schemaBundle:InfoElemento ele with ele.id = rel.elementoIdB
                        join schemaBundle:AdmiModeloElemento model with ele.modeloElementoId = model.id
                        join schemaBundle:AdmiTipoElemento tipo with model.tipoElementoId = tipo.id
                        left join schemaBundle:InArticulosInstalacion iai with ele.serieFisica = iai.numeroSerie
                    where 
                        rel.elementoIdA       =  :nodo and
                        ele.estado            =  :estado ";

            if ($strTipoElemento != "")
            {
                if (in_array($strTipoElemento,array('POSTE','NODO')))
                {
                    $dql .= " and rel.estado = :estado ";
                }
                else
                {
                    $dql .= " and UPPER(tipo.nombreTipoElemento) = UPPER(:paramNombreTipoElemento) ";
                    $query->setParameter('paramNombreTipoElemento', $strTipoElemento);
                }
            }

            if (isset($arrayFiltros['strNombreElemento']) && !empty($arrayFiltros['strNombreElemento']))
            {
                $dql .= " and UPPER(ele.nombreElemento) LIKE UPPER(:strNombreElemento) ";
                $query->setParameter('strNombreElemento','%'.$arrayFiltros['strNombreElemento'].'%');
            }

            if (isset($arrayFiltros['strEstadoRelacion']) && !empty($arrayFiltros['strEstadoRelacion']))
            {
                $dql .= " and rel.estado = :strEstadoRelacion ";
                $query->setParameter('strEstadoRelacion',$arrayFiltros['strEstadoRelacion']);
            }

            $dql .= " order by tipo.nombreTipoElemento ";

            $query->setParameter('nodo', $intIdNodo);
            $query->setParameter('estado', 'Activo');

            $query->setDQL($dql);    

            $arrayResultado['resultado'] = $query->getResult();                        
        } 
        catch (Exception $ex) 
        {
            error_log($ex->getMessage());
        }
        return $arrayResultado;
    }

    /**
     * Metodo que obtiene las solicitudes creadas de los elementos que pertenecen a un nodo.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0
     * @since 11-06-2021
     *
     * @param Array $arrayParametros [
     *                                  intIdElementoNodo  : Id del elemento del nodo.
     *                                  strIdElemento      : Id del elemento que se encuentra en el nodo.
     *                                  arrayTipoSolicitud : Array de descripción de solicitudes.
     *                                  boolDatosElemento  : Bandera para obtener los datos del elemento.
     *                                  boolObtenerTarea   : Bandera para obtener el número de tarea.
     *                               ]
     * @return Aray $arrayResultado
     */
    public function obtenerSolicitudesElementoNodo($arrayParametros)
    {
        try
        {
            $strSelect          = "";
            $strFrom            = "";
            $strWhere           = "";
            $arrayTipoSolicitud = array('SOLICITUD CAMBIO EQUIPO','SOLICITUD RETIRO EQUIPO');
            $objResultSetMap    = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery     = $this->_em->createNativeQuery(null, $objResultSetMap);

            if (isset($arrayParametros['boolDatosElemento']) && $arrayParametros['boolDatosElemento'])
            {
                $strSelect .= ",IEL.NOMBRE_ELEMENTO        ".
                              ",IEL.SERIE_FISICA           ".
                              ",AME.NOMBRE_MODELO_ELEMENTO ".
                              ",ATE.NOMBRE_TIPO_ELEMENTO   ";

                $strFrom   .= ",DB_INFRAESTRUCTURA.INFO_ELEMENTO        IEL ".
                              ",DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AME ".
                              ",DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO   ATE ";

                $strWhere  .= "AND IDSC.VALOR             = IEL.ID_ELEMENTO        ".
                              "AND IEL.MODELO_ELEMENTO_ID = AME.ID_MODELO_ELEMENTO ".
                              "AND AME.TIPO_ELEMENTO_ID   = ATE.ID_TIPO_ELEMENTO   ";

                $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO'       , 'nombreElemento', 'string');
                $objResultSetMap->addScalarResult('SERIE_FISICA'          , 'serieElemento' , 'string');
                $objResultSetMap->addScalarResult('NOMBRE_MODELO_ELEMENTO', 'modeloElemento', 'string');
                $objResultSetMap->addScalarResult('NOMBRE_TIPO_ELEMENTO'  , 'tipoElemento'  , 'string');
            }

            if (isset($arrayParametros['boolObtenerTarea']) && $arrayParametros['boolObtenerTarea'])
            {
                $strSelect .= ",NVL((SELECT ".
                                      "ITC.TAREA_ID ".
                                    "FROM ".
                                      "DB_SOPORTE.INFO_TAREA_CARACTERISTICA ITC, ".
                                      "DB_COMERCIAL.ADMI_CARACTERISTICA     ACA  ".
                                    "WHERE ".
                                      "ITC.CARACTERISTICA_ID = ACA.ID_CARACTERISTICA    ".
                                      "AND ITC.VALOR         = to_char(IDS.ID_DETALLE_SOLICITUD) ".
                                      "AND ITC.ESTADO        = :strEstadoTareaCarac     ".
                                      "AND ACA.DESCRIPCION_CARACTERISTICA = :strCaracteristicaSol ".
                                      "AND ROWNUM <= 1),'0') AS NUMERO_TAREA ";

                $objNativeQuery->setParameter('strEstadoTareaCarac' , 'Activo');
                $objNativeQuery->setParameter('strCaracteristicaSol', 'SOLICITUD NODO');

                $objResultSetMap->addScalarResult('NUMERO_TAREA','numeroTarea','integer');
            }

            if (isset($arrayParametros['strIdElemento']) && !empty($arrayParametros['strIdElemento']))
            {
                $strWhere .= 'AND IDSC.VALOR = :strIdElemento ';
                $objNativeQuery->setParameter('strIdElemento',$arrayParametros['strIdElemento']);
            }

            if (isset($arrayParametros['arrayTipoSolicitud']) && !empty($arrayParametros['arrayTipoSolicitud']))
            {
                $arrayTipoSolicitud = $arrayParametros['arrayTipoSolicitud'];
            }

            $strSql = "SELECT ".
                        "ATS.DESCRIPCION_SOLICITUD        AS TIPO_SOLICITUD,     ".
                        "IDS.ID_DETALLE_SOLICITUD         AS ID_SOLICITUD,       ".
                        "IDSC.ID_SOLICITUD_CARACTERISTICA AS ID_SOLICITUD_CARAC, ".
                        "IDS.ELEMENTO_ID                  AS ID_ELEMENTO_NODO,   ".
                        "IDSC.VALOR                       AS ID_ELEMENTO,        ".
                        "TO_CHAR(IDS.FE_CREACION,'RRRR-MM-DD HH24:DD:MM') AS FE_CREACION ".
                        "$strSelect".
                      "FROM ".
                        "DB_COMERCIAL.ADMI_TIPO_SOLICITUD     ATS, ".
                        "DB_COMERCIAL.INFO_DETALLE_SOLICITUD  IDS, ".
                        "DB_COMERCIAL.ADMI_CARACTERISTICA     AC,  ".
                        "DB_COMERCIAL.INFO_DETALLE_SOL_CARACT IDSC ".
                        "$strFrom".
                      "WHERE ".
                        "ATS.ID_TIPO_SOLICITUD             =  IDS.TIPO_SOLICITUD_ID     ".
                        "AND IDS.ID_DETALLE_SOLICITUD      =  IDSC.DETALLE_SOLICITUD_ID ".
                        "AND AC.ID_CARACTERISTICA          =  IDSC.CARACTERISTICA_ID    ".
                        "AND AC.DESCRIPCION_CARACTERISTICA = :strCaracteristica         ".
                        "AND IDS.ESTADO                    IN (:arrayEstados)           ".
                        "AND IDSC.ESTADO                   IN (:arrayEstados)           ".
                        "AND ATS.DESCRIPCION_SOLICITUD     IN (:arrayTipoSolicitud)     ".
                        "AND IDS.ELEMENTO_ID               = :intIdElementoNodo         ".
                        "$strWhere".
                      "ORDER BY IDS.FE_CREACION ASC";

            $objNativeQuery->setParameter('strCaracteristica' , 'ELEMENTO NODO');
            $objNativeQuery->setParameter('arrayEstados'      ,  array('AsignadoTarea','Asignada'));
            $objNativeQuery->setParameter('arrayTipoSolicitud',  $arrayTipoSolicitud);
            $objNativeQuery->setParameter('intIdElementoNodo' ,  $arrayParametros['intIdElementoNodo']);

            $objResultSetMap->addScalarResult('TIPO_SOLICITUD'    , 'tipoSolicitud'   , 'string');
            $objResultSetMap->addScalarResult('ID_SOLICITUD'      , 'idSolicitud'     , 'integer');
            $objResultSetMap->addScalarResult('ID_SOLICITUD_CARAC', 'idSolicitudCarac', 'integer');
            $objResultSetMap->addScalarResult('ID_ELEMENTO_NODO'  , 'idElementoNodo'  , 'integer');
            $objResultSetMap->addScalarResult('ID_ELEMENTO'       , 'idElemento'      , 'string');
            $objResultSetMap->addScalarResult('FE_CREACION'       , 'feCreacion'      , 'string');

            $objNativeQuery->setSQL($strSql);
            $arrayResultado = $objNativeQuery->getResult();
        }
        catch (\Exception $objException)
        {
            $arrayResultado = array();
            error_log($objException->getMessage());
        }
        return $arrayResultado;
    }

    /**
     * Metodo que obtiene los dispositivos del cliente que se encuentran en el nodo.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0
     * @since 25-05-2021
     *
     * @param Array $arrayParametros [
     *                                  intIdServicio : Id del servicio.
     *                               ]
     * @return Aray $arrayResultado
     */
    public function obtenerDispositivosClienteNodo($arrayParametros)
    {
        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);

            $strSql = "SELECT ".
                        "IEL.* ".
                      "FROM ".
                        "DB_INFRAESTRUCTURA.INFO_ELEMENTO          IEL, ".
                        "DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE1, ".
                        "DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE2  ".
                      "WHERE ".
                        "IEL.ID_ELEMENTO         =  IDE1.ELEMENTO_ID    ".
                        "AND IEL.ID_ELEMENTO     =  IDE2.ELEMENTO_ID    ".
                        "AND IDE1.DETALLE_NOMBRE = :strDetalleServicio  ".
                        "AND IDE1.DETALLE_VALOR  = :strValorServicio    ".
                        "AND IDE2.DETALLE_NOMBRE = :strDetalleUbicacion ".
                        "AND IDE2.DETALLE_VALOR  = :strValorUbicacion   ".
                        "AND IEL.ESTADO          = :strEstado           ".
                        "AND IDE1.ESTADO         = :strEstado           ".
                        "AND IDE2.ESTADO         = :strEstado           ";

            $objNativeQuery->setParameter('strDetalleServicio' , 'SERVICIO');
            $objNativeQuery->setParameter('strValorServicio'   ,  $arrayParametros['intIdServicio']);
            $objNativeQuery->setParameter('strDetalleUbicacion', 'UBICACION');
            $objNativeQuery->setParameter('strValorUbicacion'  , 'Nodo');
            $objNativeQuery->setParameter('strEstado'          , 'Activo');

            $objResultSetMap->addRootEntityFromClassMetadata('\telconet\schemaBundle\Entity\InfoElemento','elemento');
            $objNativeQuery->setSQL($strSql);
            $arrayResultado = $objNativeQuery->getResult();
        }
        catch (\Exception $objException)
        {
            $arrayResultado = array();
            error_log($objException->getMessage());
        }
        return $arrayResultado;
    }

    /** getResultadoConteoElementosContenidosNodo
     *
     * Metodo que obtiene el resultado con la cantidad elemento contenidos en un nodo determinado que se
     * encuentren en estado Activo
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0
     * @since 13-06-2019
     *
     * @param integer $intIdNodo
     * @return arrayResultado [ 'resultado' ]
     */
    public function getResultadoConteoElementosContenidosNodo($intIdNodo)
    {
        $arrayResultado = array();
        
        $objQuery = $this->_em->createQuery(null);

        $objDql = "SELECT
                    count(ele.id)
                FROM
                    schemaBundle:InfoRelacionElemento rel,
                    schemaBundle:InfoElemento ele,
                    schemaBundle:AdmiModeloElemento model,
                    schemaBundle:AdmiTipoElemento tipo
                where
                    rel.elementoIdA       =  :nodo and
                    ele.id                =  rel.elementoIdB and
                    ele.modeloElementoId  =  model.id and
                    ele.estado            =  :estado and
                    model.tipoElementoId  =  tipo.id and
                    rel.estado = :estado ";
        
        $objQuery->setParameter('nodo', $intIdNodo);
        $objQuery->setParameter('estado', 'Activo');
                        
        $objQuery->setDQL($objDql);
        $intTotal       = $objQuery->getSingleScalarResult();
        if ($intTotal === null)
        {
            $intTotal = 0;
        }
            
        $arrayResultado['intTotal'] = $intTotal;
         
        return $arrayResultado;
    }
    
    /**
     * getResultadoElementoByNombreEmpresaEdificio, obtiene los elemento segun tipo, detalle elemento o relacion elemento
     * 
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.0 05-05-2016
     * @since 1.0
     * 
     * @param array $arrayParametros[
     *                              '(array)'                    => (array) Para todos los array's que contengan los elementos.
     *                                                              [
     *                                                              'strComparador' => Simbolo con el que se quiere realizar la busqueda (IN, =, LIKE)
     *                                                              'arrayEstado'   => Recibe el estado.
     *                                                              ]
     *                              'arrayEstadoElemento'        => ['strComparador', 'arrayEstado']
     *                              'arrayEstadoDetalleElemento' => ['strComparador', 'arrayEstado']
     *                              'arrayEstadoEmpresaElemento' => ['strComparador', 'arrayEstado']
     *                              'arrayEstadoModeloElemento'  => ['strComparador', 'arrayEstado']
     *                              'arrayEstadoTipoElemento'    => ['strComparador', 'arrayEstado']
     *                              'arrayNombreTipoElemento'    => ['arrayNombreTipoElemento'      => Recibe le nombre del elemento.]
     *                              'arrayEmpresaCod'            => ['arrayEmpresaCod'              => Recibe el codigo de la empresa.]
     *                              'arrayDetalleNombreElemento' => ['arrayDetalleNombreElemento'   => Recibe el detalle nombre elemento.]
     *                              'arrayDetalleValorElemento'  => ['arrayDetalleValorElemento'    => Recibe el detalle valor elemento.]
     *                              'arrayNombreElemento'        => ['arrayNombreElemento'          => Recibe el nombre del elemento.]
     *                              'arrayElemento'              => ['arrayElemento'                => Recibe el elemento relacion A.]
     * 
     *                              'intStart'                   => Recibe el inicio para el resultado de la busqueda.
     *                              'intLimit'                   => Recibe el fin para el resultado de la busqueda del query.
     *                              ]
     * @return \telconet\schemaBundle\Entity\ReturnResponse Retorna un objeto con los registros
     */
    public function getResultadoElementoByNombreEmpresaEdificio($arrayParametros)
    {
        $objReturnResponse = new ReturnResponse();
        $objReturnResponse->setStrMessageStatus($objReturnResponse::MSN_NOT_RESULT);
        $objReturnResponse->setStrStatus($objReturnResponse::NOT_RESULT);
        try
        {
            $objQueryCount = $this->_em->createQuery();
            $strQueryCount = "SELECT count(ie.id) ";
            $objQuery = $this->_em->createQuery();
            $strQuery = "SELECT ie.id intIdElemento, "
                            . " ie.nombreElemento strNombreElemento, "
                            . " ire.elementoIdA ";

            $strFromQuery = "FROM schemaBundle:InfoDetalleElemento ide, "
                                . " schemaBundle:InfoElemento ie "
                                . " LEFT JOIN schemaBundle:InfoRelacionElemento ire "
                                . " WITH ire.elementoIdB = ie.id, "
                                . " schemaBundle:InfoEmpresaElemento iee, "
                                . " schemaBundle:AdmiModeloElemento ame, "
                                . " schemaBundle:AdmiTipoElemento ate "
                                . " WHERE ide.elementoId        = ie.id "
                                . " AND ie.id                   = iee.elementoId "
                                . " AND ie.modeloElementoId     = ame.id "
                                . " AND ame.tipoElementoId       = ate.id ";

            //Pregunta si $arrayParametros['arrayEstadoElemento']['arrayEstado'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['arrayEstadoElemento']['arrayEstado']))
            {
                $arrayParams                    = array();
                $arrayParams['strField']        = ' ie.estado ';
                $arrayParams['strComparador']   = $arrayParametros['arrayEstadoElemento']['strComparador'];
                $arrayParams['strBindParam']    = ':arrayEstadoElemento';
                $arrayParams['arrayValue']      = $arrayParametros['arrayEstadoElemento']['arrayEstado'];
                $strFromQuery                   .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayEstadoElemento', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayEstadoElemento', $objReturnResponse->putTypeParamBind($arrayParams));
            }

            //Pregunta si $arrayParametros['arrayEstadoDetalleElemento']['arrayEstado'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['arrayEstadoDetalleElemento']['arrayEstado']))
            {
                $arrayParams                    = array();
                $arrayParams['strField']        = ' ide.estado ';
                $arrayParams['strComparador']   = $arrayParametros['arrayEstadoDetalleElemento']['strComparador'];
                $arrayParams['strBindParam']    = ':arrayEstadoDetalleElemento';
                $arrayParams['arrayValue']      = $arrayParametros['arrayEstadoDetalleElemento']['arrayEstado'];
                $strFromQuery                   .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayEstadoDetalleElemento', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayEstadoDetalleElemento', $objReturnResponse->putTypeParamBind($arrayParams));
            }

            //Pregunta si $arrayParametros['arrayEstadoEmpresaElemento']['arrayEstado'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['arrayEstadoEmpresaElemento']['arrayEstado']))
            {
                $arrayParams                    = array();
                $arrayParams['strField']        = ' iee.estado ';
                $arrayParams['strComparador']   = $arrayParametros['arrayEstadoEmpresaElemento']['strComparador'];
                $arrayParams['strBindParam']    = ':arrayEstadoEmpresaElemento';
                $arrayParams['arrayValue']      = $arrayParametros['arrayEstadoEmpresaElemento']['arrayEstado'];
                $strFromQuery                   .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayEstadoEmpresaElemento', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayEstadoEmpresaElemento', $objReturnResponse->putTypeParamBind($arrayParams));
            }

            //Pregunta si $arrayParametros['arrayEstadoModeloElemento']['arrayEstado'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['arrayEstadoModeloElemento']['arrayEstado']))
            {
                $arrayParams                    = array();
                $arrayParams['strField']        = ' ame.estado ';
                $arrayParams['strComparador']   = $arrayParametros['arrayEstadoModeloElemento']['strComparador'];
                $arrayParams['strBindParam']    = ':arrayEstadoModeloElemento';
                $arrayParams['arrayValue']      = $arrayParametros['arrayEstadoModeloElemento']['arrayEstado'];
                $strFromQuery                   .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayEstadoModeloElemento', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayEstadoModeloElemento', $objReturnResponse->putTypeParamBind($arrayParams));
            }

            //Pregunta si $arrayParametros['arrayEstadoTipoElemento']['arrayEstado'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['arrayEstadoTipoElemento']['arrayEstado']))
            {
                $arrayParams                    = array();
                $arrayParams['strField']        = ' ate.estado ';
                $arrayParams['strComparador']   = $arrayParametros['arrayEstadoTipoElemento']['strComparador'];
                $arrayParams['strBindParam']    = ':arrayEstadoTipoElemento';
                $arrayParams['arrayValue']      = $arrayParametros['arrayEstadoTipoElemento']['arrayEstado'];
                $strFromQuery                   .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayEstadoTipoElemento', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayEstadoTipoElemento', $objReturnResponse->putTypeParamBind($arrayParams));
            }

            //Pregunta si $arrayParametros['arrayNombreTipoElemento']['arrayNombreTipoElemento'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['arrayNombreTipoElemento']['arrayNombreTipoElemento']))
            {
                $arrayParams                    = array();
                $arrayParams['strField']        = ' ate.nombreTipoElemento ';
                $arrayParams['strComparador']   = $arrayParametros['arrayNombreTipoElemento']['strComparador'];
                $arrayParams['strBindParam']    = ':arrayNombreTipoElemento';
                $arrayParams['arrayValue']      = $arrayParametros['arrayNombreTipoElemento']['arrayNombreTipoElemento'];
                $strFromQuery                   .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayNombreTipoElemento', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayNombreTipoElemento', $objReturnResponse->putTypeParamBind($arrayParams));
            }

            //Pregunta si $arrayParametros['arrayEmpresaCod']['arrayEmpresaCod'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['arrayEmpresaCod']['arrayEmpresaCod']))
            {
                $arrayParams                    = array();
                $arrayParams['strField']        = ' iee.empresaCod ';
                $arrayParams['strComparador']   = $arrayParametros['arrayEmpresaCod']['strComparador'];
                $arrayParams['strBindParam']    = ':arrayEmpresaCod';
                $arrayParams['arrayValue']      = $arrayParametros['arrayEmpresaCod']['arrayEmpresaCod'];
                $strFromQuery                   .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayEmpresaCod', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayEmpresaCod', $objReturnResponse->putTypeParamBind($arrayParams));
            }

            //Pregunta si $arrayParametros['arrayDetalleNombreElemento']['arrayDetalleNombreElemento'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['arrayDetalleNombreElemento']['arrayDetalleNombreElemento']))
            {
                $arrayParams                    = array();
                $arrayParams['strField']        = ' ide.detalleNombre ';
                $arrayParams['strComparador']   = $arrayParametros['arrayDetalleNombreElemento']['strComparador'];
                $arrayParams['strBindParam']    = ':arrayDetalleNombreElemento';
                $arrayParams['arrayValue']      = $arrayParametros['arrayDetalleNombreElemento']['arrayDetalleNombreElemento'];
                $strFromQuery                   .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayDetalleNombreElemento', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayDetalleNombreElemento', $objReturnResponse->putTypeParamBind($arrayParams));
            }

            //Pregunta si $arrayParametros['arrayDetalleValorElemento']['arrayDetalleValorElemento'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['arrayDetalleValorElemento']['arrayDetalleValorElemento']))
            {
                $arrayParams                    = array();
                $arrayParams['strField']        = ' ide.detalleValor ';
                $arrayParams['strComparador']   = $arrayParametros['arrayDetalleValorElemento']['strComparador'];
                $arrayParams['strBindParam']    = ':arrayDetalleValorElemento';
                $arrayParams['arrayValue']      = $arrayParametros['arrayDetalleValorElemento']['arrayDetalleValorElemento'];
                $strFromQuery                   .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayDetalleValorElemento', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayDetalleValorElemento', $objReturnResponse->putTypeParamBind($arrayParams));
            }
            
            //Pregunta si $arrayParametros['arrayNombreElemento']['arrayNombreElemento'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['arrayNombreElemento']['arrayNombreElemento']))
            {
                $arrayParams                    = array();
                $arrayParams['strField']        = ' UPPER( ie.nombreElemento ) ';
                $arrayParams['strComparador']   = $arrayParametros['arrayNombreElemento']['strComparador'];
                $arrayParams['strBindParam']    = ':arrayNombreElemento';
                $arrayParams['arrayValue']      = $arrayParametros['arrayNombreElemento']['arrayNombreElemento'];
                $strFromQuery                   .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayNombreElemento', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayNombreElemento', $objReturnResponse->putTypeParamBind($arrayParams));
            }

            //Pregunta si $arrayParametros['arrayElemento'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['arrayElemento']['arrayElemento']))
            {
                $arrayParams                    = array();
                $arrayParams['strField']        = ' ire.elementoIdA ';
                $arrayParams['strComparador']   = $arrayParametros['arrayElemento']['strComparador'];
                $arrayParams['strBindParam']    = ':arrayElemento';
                $arrayParams['arrayValue']      = $arrayParametros['arrayElemento']['arrayElemento'];
                $strFromQuery                   .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayElemento', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayElemento', $objReturnResponse->putTypeParamBind($arrayParams));
            }
            $objQuery->setDQL($strQuery . $strFromQuery);
            //Pregunta si $arrayParametros['intStart'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['intStart']))
            {
                $objQuery->setFirstResult($arrayParametros['intStart']);
            }
            //Pregunta si $arrayParametros['intLimit'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['intLimit']))
            {
                $objQuery->setMaxResults($arrayParametros['intLimit']);
            }
            $objReturnResponse->setRegistros($objQuery->getResult());
            $objReturnResponse->setTotal(0);
            if($objReturnResponse->getRegistros())
            {
                $strQueryCount = $strQueryCount . $strFromQuery;
                $objQueryCount->setDQL($strQueryCount);
                $objReturnResponse->setTotal($objQueryCount->getSingleScalarResult());
            }
            $objReturnResponse->setStrMessageStatus($objReturnResponse::MSN_PROCESS_SUCCESS);
            $objReturnResponse->setStrStatus($objReturnResponse::PROCESS_SUCCESS);
        }
        catch(\Exception $ex)
        {
            $objReturnResponse->setStrMessageStatus('Existion un error en getResultadoElementoByNombreEmpresaEdificio - ' . $ex->getMessage());
            $objReturnResponse->setStrStatus($objReturnResponse::ERROR);
        }
        return $objReturnResponse;
    } //getResultadoElementoByNombreEmpresaEdificio

    /**
     * getJSONElementoByNombreEmpresaEdificio, obtiene los elemento segun tipo, detalle elemento o relacion elemento
     * 
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.0 05-05-2016
     * @since 1.0
     * 
     * @param array $arrayParametros[
     *                              '(array)'                    => (array) Para todos los array's que contengan los elementos.
     *                                                              [
     *                                                              'strComparador' => Simbolo con el que se quiere realizar la busqueda (IN, =, LIKE)
     *                                                              'arrayEstado'   => Recibe el estado.
     *                                                              ]
     *                              'arrayEstadoElemento'        => ['strComparador', 'arrayEstado']
     *                              'arrayEstadoDetalleElemento' => ['strComparador', 'arrayEstado']
     *                              'arrayEstadoEmpresaElemento' => ['strComparador', 'arrayEstado']
     *                              'arrayEstadoModeloElemento'  => ['strComparador', 'arrayEstado']
     *                              'arrayEstadoTipoElemento'    => ['strComparador', 'arrayEstado']
     *                              'arrayNombreTipoElemento'    => ['arrayNombreTipoElemento'      => Recibe le nombre del elemento.]
     *                              'arrayEmpresaCod'            => ['arrayEmpresaCod'              => Recibe el codigo de la empresa.]
     *                              'arrayDetalleNombreElemento' => ['arrayDetalleNombreElemento'   => Recibe el detalle nombre elemento.]
     *                              'arrayDetalleValorElemento'  => ['arrayDetalleValorElemento'    => Recibe el detalle valor elemento.]
     *                              'arrayNombreElemento'        => ['arrayNombreElemento'          => Recibe el nombre del elemento.]
     *                              'arrayElemento'              => ['arrayElemento'                => Recibe el elemento relacion A.]
     * 
     *                              'intStart'                   => Recibe el inicio para el resultado de la busqueda.
     *                              'intLimit'                   => Recibe el fin para el resultado de la busqueda del query.
     *                              ]
     * @return \telconet\schemaBundle\Entity\ReturnResponse Retorna un objeto con los registros
     */
    public function getJSONElementoByNombreEmpresaEdificio($arrayParametros)
    {
        $objReturnResponse = new ReturnResponse();
        try
        {
            $objGetResult = $this->getResultadoElementoByNombreEmpresaEdificio($arrayParametros);
            $jsonData = json_encode(array('strStatus'           => $objReturnResponse::PROCESS_SUCCESS,
                                          'strMessageStatus'    => $objReturnResponse::MSN_PROCESS_SUCCESS,
                                          'total'               => $objGetResult->getTotal(),
                                          'encontrados'         => $objGetResult->getRegistros()));
        }
        catch(\Exception $ex)
        {
            $jsonData = json_encode(array('strStatus'           => $objReturnResponse::ERROR, 
                                          'strMessageStatus'    => $objReturnResponse::MSN_ERROR . ' getJSONElementoByNombreEmpresaEdificio ' 
                                                                   . $ex->getMessage()));
        }
        return $jsonData;
    } //getJSONElementoByNombreEmpresaEdificio
    
    /**
     * getResultadoUbicacionElemento, obtiene la ubicacion de un elemento
     * 
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.0 19-05-2016
     * @since 1.0
     * 
     * @param array $arrayParametros[
     *                              '(array)'                    => (array) Para todos los array's que contengan los elementos.
     *                                                              [
     *                                                              'strComparador' => Simbolo con el que se quiere realizar la busqueda (IN, =, LIKE)
     *                                                              'arrayEstado'   => Recibe el estado.
     *                                                              ]
     * 
     *                              'intStart'                   => Recibe el inicio para el resultado de la busqueda.
     *                              'intLimit'                   => Recibe el fin para el resultado de la busqueda del query.
     *                              ]
     * @return \telconet\schemaBundle\Entity\ReturnResponse Retorna un objeto con los registros
     */
    public function getResultadoUbicacionElemento($arrayParametros)
    {
        $objReturnResponse = new ReturnResponse();
        $objReturnResponse->setStrMessageStatus($objReturnResponse::MSN_NOT_RESULT);
        $objReturnResponse->setStrStatus($objReturnResponse::NOT_RESULT);
        try
        {
            $objQueryCount = $this->_em->createQuery();
            $strQueryCount = "SELECT count(ie.id) ";
            $objQuery = $this->_em->createQuery();
            $strQuery = "SELECT ie.id intIdElemento, "
                            . " ie.nombreElemento strNombreElemento, "
                            . " iu.longitudUbicacion floadLongitudUbicacion, "
                            . " iu.latitudUbicacion floatLatitudUbicacion ";

            $strFromQuery = "FROM schemaBundle:InfoElemento ie, "
                                . " schemaBundle:InfoEmpresaElementoUbica ieeu,"
                                . " schemaBundle:InfoUbicacion iu "
                                . " WHERE ie.id             = ieeu.elementoId "
                                . " AND ieeu.ubicacionId    = iu.id ";

            //Pregunta si $arrayParametros['arrayEmpresaElementoUbica']['arrayEmpresaCod'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['arrayEmpresaElementoUbica']['arrayEmpresaCod']))
            {
                $arrayParams                    = array();
                $arrayParams['strField']        = ' ieeu.empresaCod ';
                $arrayParams['strComparador']   = $arrayParametros['arrayEmpresaElementoUbica']['strComparador'];
                $arrayParams['strBindParam']    = ':arrayEmpresaCod';
                $arrayParams['arrayValue']      = $arrayParametros['arrayEmpresaElementoUbica']['arrayEmpresaCod'];
                $strFromQuery                   .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayEmpresaCod', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayEmpresaCod', $objReturnResponse->putTypeParamBind($arrayParams));
            }
            
            //Pregunta si $arrayParametros['arrayElemento']['arrayEstado'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['arrayElemento']['arrayEstado']))
            {
                $arrayParams                    = array();
                $arrayParams['strField']        = ' ie.estado ';
                $arrayParams['strComparador']   = $arrayParametros['arrayElemento']['strComparador'];
                $arrayParams['strBindParam']    = ':arrayEstadoElemento';
                $arrayParams['arrayValue']      = $arrayParametros['arrayElemento']['arrayEstado'];
                $strFromQuery                   .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayEstadoElemento', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayEstadoElemento', $objReturnResponse->putTypeParamBind($arrayParams));
            }

            //Pregunta si $arrayParametros['arrayElemento']['arrayNombreElemento'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['arrayElemento']['arrayNombreElemento']))
            {
                $arrayParams                    = array();
                $arrayParams['strField']        = ' ie.nombreElemento ';
                $arrayParams['strComparador']   = $arrayParametros['arrayElemento']['strComparador'];
                $arrayParams['strBindParam']    = ':arrayNombreElemento';
                $arrayParams['arrayValue']      = $arrayParametros['arrayElemento']['arrayNombreElemento'];
                $strFromQuery                   .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayNombreElemento', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayNombreElemento', $objReturnResponse->putTypeParamBind($arrayParams));
            }
            
            //Pregunta si $arrayParametros['arrayElemento']['arrayIdElemento'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['arrayElemento']['arrayIdElemento']))
            {
                $arrayParams                    = array();
                $arrayParams['strField']        = ' ie.id ';
                $arrayParams['strComparador']   = $arrayParametros['arrayElemento']['strComparador'];
                $arrayParams['strBindParam']    = ':arrayIdElemento';
                $arrayParams['arrayValue']      = $arrayParametros['arrayElemento']['arrayIdElemento'];
                $strFromQuery                   .= $objReturnResponse->putWhereClause($arrayParams);
                $objQuery->setParameter('arrayIdElemento', $objReturnResponse->putTypeParamBind($arrayParams));
                $objQueryCount->setParameter('arrayIdElemento', $objReturnResponse->putTypeParamBind($arrayParams));
            }

            $objQuery->setDQL($strQuery . $strFromQuery);
            //Pregunta si $arrayParametros['intStart'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['intStart']))
            {
                $objQuery->setFirstResult($arrayParametros['intStart']);
            }
            //Pregunta si $arrayParametros['intLimit'] es diferente de vacío para agregar la condición.
            if(!empty($arrayParametros['intLimit']))
            {
                $objQuery->setMaxResults($arrayParametros['intLimit']);
            }
            $objReturnResponse->setRegistros($objQuery->getResult());
            $objReturnResponse->setTotal(0);
            if($objReturnResponse->getRegistros())
            {
                $strQueryCount = $strQueryCount . $strFromQuery;
                $objQueryCount->setDQL($strQueryCount);
                $objReturnResponse->setTotal($objQueryCount->getSingleScalarResult());
            }
            $objReturnResponse->setStrMessageStatus($objReturnResponse::MSN_PROCESS_SUCCESS);
            $objReturnResponse->setStrStatus($objReturnResponse::PROCESS_SUCCESS);
        }
        catch(\Exception $ex)
        {
            $objReturnResponse->setStrMessageStatus('Existion un error en getResultadoUbicacionElemento - ' . $ex->getMessage());
            $objReturnResponse->setStrStatus($objReturnResponse::ERROR);
        }
        return $objReturnResponse;
    } //getResultadoUbicacionElemento
    
    
    /**
     * getResultadoExportarNodos
     * 
     * Metodo que devuelve el array de los nodos para exportar la informacion segun filtros escogidos
     * 
     * @author Allan Suarez <arsuarez@telcone.ec>
     * @version 1.0
     * @since 07-03-2016
     * 
     * @author Allan Suarez <arsuarez@telcone.ec>
     * @version 1.1 - Se filtra por estados Activos los roles del contacto establecidad para el nodo para evitar duplicidad en el reporte
     * @since 07-07-2017
     * 
     * @author Antonio Ayala <afayala@telcone.ec>
     * @version 1.2 20-06-2019 - Se filtra por identificación del cliente
     *
     * @param $arrayParams [nombre , empresa , estado , estadoSol , motivo , canton , provincia ]
     * @return $arrayResultado [ resultado ]
     */
    public function getResultadoExportarNodos($arrayParams)
    {
        $arrayResultado = array();
        
        try
        {
            $rsm = new ResultSetMappingBuilder($this->_em);	      
            $query = $this->_em->createNativeQuery(null, $rsm);	                
               
            $sql = "SELECT                        
                        VISTA.NOMBRE_ELEMENTO,
                        VISTA.ESTADO_ELEMENTO,
                        VISTA.ESTADO_SOLICITUD,
                        VISTA.NOMBRE_PROVINCIA,                        
                        VISTA.NOMBRE_CANTON,
                        VISTA.DIRECCION_UBICACION,
                        VISTA.LONGITUD_UBICACION,
                        VISTA.LATITUD_UBICACION,
                        VISTA.CLASE,
                        VISTA.TIPO_MEDIO,
                        VISTA.NOMBRE_CLASE_MEDIDOR,
                        VISTA.NOMBRE_TIPO_MEDIDOR,
                        VISTA.NUMERO_MEDIDOR,
                        ROL.DESCRIPCION_ROL,
                        NVL(PERSONA.RAZON_SOCIAL,PERSONA.NOMBRES
                        ||' '
                        ||PERSONA.APELLIDOS) NOMBRE_CONTACTO,
                        TIPO_IDENTIFICACION.DESCRIPCION TIPO_IDENTIFICACION,
                        PERSONA.IDENTIFICACION_CLIENTE,
                        (SELECT NVL(RAZON_SOCIAL,NOMBRES
                          ||' '
                          ||APELLIDOS )
                        FROM INFO_PERSONA
                        WHERE LOGIN = SOL.USR_CREACION
                        ) SOLICITANTE,
                        (SELECT DB_COMERCIAL.GET_INFO_CONTRATO_NODO(SOL.ID_DETALLE_SOLICITUD,'VALOR') FROM DUAL) VALOR,
                        (SELECT DB_COMERCIAL.GET_INFO_CONTRATO_NODO(SOL.ID_DETALLE_SOLICITUD,'ANTICIPO') FROM DUAL) ANTICIPO,
                        (SELECT DB_COMERCIAL.GET_INFO_CONTRATO_NODO(SOL.ID_DETALLE_SOLICITUD,'DURACION') FROM DUAL) DURACION,
                        (SELECT DB_COMERCIAL.GET_INFO_CONTRATO_NODO(SOL.ID_DETALLE_SOLICITUD,'INICIO') FROM DUAL) INICIO,
                        (SELECT DB_COMERCIAL.GET_INFO_CONTRATO_NODO(SOL.ID_DETALLE_SOLICITUD,'FIN') FROM DUAL) FIN,
                        (SELECT DB_COMERCIAL.GET_INFO_CONTRATO_NODO(SOL.ID_DETALLE_SOLICITUD,'FORMA_PAGO') FROM DUAL) FORMA_PAGO,
                        (SELECT DB_COMERCIAL.GET_INFO_CONTRATO_NODO(SOL.ID_DETALLE_SOLICITUD,'BANCO') FROM DUAL) BANCO,
                        (SELECT DB_COMERCIAL.GET_INFO_CONTRATO_NODO(SOL.ID_DETALLE_SOLICITUD,'TIPO_CUENTA') FROM DUAL) TIPO_CUENTA,
                        (SELECT DB_COMERCIAL.GET_INFO_CONTRATO_NODO(SOL.ID_DETALLE_SOLICITUD,'NUMERO_CUENTA') FROM DUAL) NUMERO_CUENTA
                      FROM 
                        VISTA_INFO_NODOS VISTA,
                        INFO_CONTACTO_NODO CONTACTO,
                        INFO_PERSONA PERSONA,
                        INFO_PERSONA_EMPRESA_ROL PERSONA_ROL,
                        INFO_EMPRESA_ROL EMPRESA_ROL,
                        ADMI_ROL ROL,
                        ADMI_TIPO_ROL TIPO_ROL,
                        DB_GENERAL.ADMI_TIPO_IDENTIFICACION TIPO_IDENTIFICACION,
                        INFO_DETALLE_SOLICITUD SOL
                      WHERE 
                          CONTACTO.NODO_ID              = VISTA.ID_ELEMENTO
                      AND SOL.ID_DETALLE_SOLICITUD      = VISTA.ID_SOLICITUD
                      AND CONTACTO.PERSONA_ID           = PERSONA.ID_PERSONA
                      AND PERSONA.ID_PERSONA            = PERSONA_ROL.PERSONA_ID
                      AND EMPRESA_ROL.ID_EMPRESA_ROL    = PERSONA_ROL.EMPRESA_ROL_ID
                      AND EMPRESA_ROL.ROL_ID            = ROL.ID_ROL
                      AND ROL.TIPO_ROL_ID               = TIPO_ROL.ID_TIPO_ROL
                      AND PERSONA.TIPO_IDENTIFICACION   = TIPO_IDENTIFICACION.ID_TIPO_IDENTIFICACION
                      AND TIPO_ROL.DESCRIPCION_TIPO_ROL = :tipoRol
                      AND VISTA.NOMBRE_MODELO_ELEMENTO  = :modelo
                      AND VISTA.EMPRESA_COD             = :empresa
                      AND PERSONA_ROL.ESTADO            = :estado
                      AND EMPRESA_ROL.ESTADO            = :estado
                    ";
                            
            $rsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'),'nombreElemento','string');                        
            $rsm->addScalarResult(strtoupper('ESTADO_ELEMENTO'),'estado','string');			             
            $rsm->addScalarResult(strtoupper('CLASE'),'clase','string');			              
            $rsm->addScalarResult(strtoupper('TIPO_MEDIO'),'tipoMedio','string');		            
            $rsm->addScalarResult(strtoupper('ESTADO_SOLICITUD'),'estadoSolicitud','string');			                                      
            $rsm->addScalarResult(strtoupper('NUMERO_MEDIDOR'),'numeroMedidor','string');            
            $rsm->addScalarResult(strtoupper('NOMBRE_TIPO_MEDIDOR'),'nombreTipoMedidor','string');            
            $rsm->addScalarResult(strtoupper('NOMBRE_CLASE_MEDIDOR'),'nombreClaseMedidor','string');                        
            $rsm->addScalarResult(strtoupper('NOMBRE_PROVINCIA'),'nombreProvincia','string');
            $rsm->addScalarResult(strtoupper('NOMBRE_CANTON'),'nombreCanton','string');              
            $rsm->addScalarResult(strtoupper('DIRECCION_UBICACION'),'direccionUbicacion','string');
            $rsm->addScalarResult(strtoupper('LONGITUD_UBICACION'),'longitudUbicacion','string');
            $rsm->addScalarResult(strtoupper('LATITUD_UBICACION'),'latitudUbicacion','string');            
            $rsm->addScalarResult(strtoupper('DESCRIPCION_ROL'),'descripcionRol','string'); 
            $rsm->addScalarResult(strtoupper('NOMBRE_CONTACTO'),'contacto','string'); 
            $rsm->addScalarResult(strtoupper('SOLICITANTE'),'solicitante','string'); 
            $rsm->addScalarResult(strtoupper('TIPO_IDENTIFICACION'),'tipoIdentificacion','string'); 
            $rsm->addScalarResult(strtoupper('IDENTIFICACION_CLIENTE'),'identificacion','string'); 
            $rsm->addScalarResult(strtoupper('ANTICIPO'),'anticipo','float'); 
            $rsm->addScalarResult(strtoupper('VALOR'),'valor','float'); 
            $rsm->addScalarResult(strtoupper('DURACION'),'duracion','integer'); 
            $rsm->addScalarResult(strtoupper('INICIO'),'inicio','string'); 
            $rsm->addScalarResult(strtoupper('FIN'),'fin','string'); 
            $rsm->addScalarResult(strtoupper('FORMA_PAGO'),'formaPago','string'); 
            $rsm->addScalarResult(strtoupper('BANCO'),'banco','string'); 
            $rsm->addScalarResult(strtoupper('TIPO_CUENTA'),'tipoCuenta','string'); 
            $rsm->addScalarResult(strtoupper('NUMERO_CUENTA'),'numeroCuenta','string'); 
                        
            $query->setParameter('modelo', 'GENERICO');        
            $query->setParameter('estado', 'Activo');
            $query->setParameter('tipoRol', 'Contacto Nodo'); 
            $query->setParameter('empresa', $arrayParams['empresa']);

            if($arrayParams['estado'] && $arrayParams['estado']!='Todos')
            {
                $sql .= " AND VISTA.estado_elemento  =  :estado ";
                $query->setParameter('estado', $arrayParams['estado']);
            }

            if($arrayParams['provincia'] && $arrayParams['provincia']!="null")
            {
                $sql .= " AND  VISTA.id_provincia   =  :provincia ";
                $query->setParameter('provincia', $arrayParams['provincia']);
            }

            if($arrayParams['canton'] && $arrayParams['canton']!="null")
            {
                $sql .= " AND  VISTA.id_canton   =  :canton ";
                $query->setParameter('canton', $arrayParams['canton']);
            }
           
            if($arrayParams['nombre'] && $arrayParams['nombre']!='')
            {
                $sql .= " AND  upper(VISTA.nombre_elemento) like upper(:nombre) ";
                $query->setParameter('nombre', '%'.$arrayParams['nombre'].'%');
            }

            if($arrayParams['motivo'] && $arrayParams['motivo']!="null")
            {
                $sql .= " AND  VISTA.id_motivo = :motivo ";
                $query->setParameter('motivo', $arrayParams['motivo']);
            }

            if($arrayParams['estadoSol'] && $arrayParams['estadoSol']!='Todos')
            {
                $sql .= " AND  upper(VISTA.estado_solicitud) like upper(:estadoSol) ";
                $query->setParameter('estadoSol', '%'.$arrayParams['estadoSol'].'%');
            }

            if($arrayParams['clase'] && $arrayParams['clase']!='Todos')
            {
                $sql .= " AND  upper(VISTA.clase) like upper(:clase) ";
                $query->setParameter('clase', $arrayParams['clase']);
            }
            
            if($arrayParams['identificacion'] && $arrayParams['identificacion']!='')
            {
                $sql .= " AND  PERSONA.identificacion_cliente = :identificacion ";
                $query->setParameter('identificacion', $arrayParams['identificacion']);
            }

            $sql .= " ORDER BY VISTA.FE_CREACION DESC ";

            $query->setSQL($sql);                   
            
            $arrayResultado['resultado'] = $query->getResult();           
        } 
        catch (Exception $ex) 
        {
            error_log($ex->getMessage());
        }
        
        return $arrayResultado;
    }
    
    public function getElementoClienteByTipoElemento($arrayParametros)
    {
        $interfaceElementoConectorId = $arrayParametros['interfaceElementoConectorId'];
        $tipoElementoABuscar         = $arrayParametros['tipoElemento'];
        
        if($interfaceElementoConectorId)
        {
            $objInterfaceConector = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                            ->find($interfaceElementoConectorId);

            $objEnlace = $this->_em->getRepository('schemaBundle:InfoEnlace')
                            ->findOneBy( array("interfaceElementoIniId" => $objInterfaceConector->getId(),
                                                                "estado" => 'Activo' ));
            if($objEnlace)
            {
                // Se obtiene el interfaceElementoFinal
                $objInterfaceFin = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                        ->find($objEnlace->getInterfaceElementoFinId());
                // Se obtiene el elementoFinal
                $objElementoFin = $objInterfaceFin->getElementoId();
                
                if($objElementoFin->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento() == $tipoElementoABuscar )
                {
                    $arrayRequest = array();
                    $arrayRequest['msg']             = 'FOUND';
                    $arrayRequest['idElemento']      = $objElementoFin->getId();
                    $arrayRequest['nombreElemento']  = $objElementoFin->getNombreElemento();
                    return $arrayRequest;                 
                }

                $arrayParams = array();
                $arrayParams['interfaceElementoConectorId'] = $objInterfaceFin->getId();
                $arrayParams['tipoElemento']                = $tipoElementoABuscar;

                return $this->getElementoClienteByTipoElemento($arrayParams);
            }
            else
            {
                $arrayRequest = array();
                $arrayRequest['msg'] = 'NOT FOUND';
                return $arrayRequest;
            }
        }
        else
        {
            if($arrayParametros['elementoClienteId'])
            {
                $objElementoCpe = $this->_em->getRepository('schemaBundle:InfoElemento')->find($arrayParametros['elementoClienteId']);
                                                        
                $arrayRequest = array();
                $arrayRequest['msg']             = 'FOUND';
                $arrayRequest['idElemento']      = $objElementoCpe->getId();
                $arrayRequest['nombreElemento']  = $objElementoCpe->getNombreElemento();
                return $arrayRequest; 
            }
            else{
                $arrayRequest = array();
                $arrayRequest['msg'] = 'NOT FOUND';
                return $arrayRequest;
            }
        }
    }
    
    /**
     * Documentación para el método 'getOdfFactTnByInterfaceOutCassette'.
     *
     * Método utilizado para obtener Odf que aprovisiona factibilidad automatica de un servicio TN.
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0  30-06-2016
     *
     * @return Array Respuesta
     * 
     * @since 1.0
     */
    public function getOdfFactTnByInterfaceOutCassette($arrayParametros)
    {
        try
        {
            $strTipoInterface = $arrayParametros['strTipoInterface'];
            $objInterfacefinnn = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                            ->find($arrayParametros['interfaceElementoConectorId']);
            // --------------------------------------------------------------------------------------------------------
            $objEnlace = $this->_em->getRepository('schemaBundle:InfoEnlace')
                                   ->findOneBy( array("interfaceElementoFinId" => $objInterfacefinnn->getId(),
                                                      "estado"                 => 'Activo' ));
            // se verifica si existe enlace conectado al interface 
            if($objEnlace)
            {
                // Se obtiene el interfaceElementoFinal
                $objInterfaceIni = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                             ->find($objEnlace->getInterfaceElementoIniId());
                // Se obtiene el elementoFinal
                $objElementoIni = $objInterfaceIni->getElementoId();
                
                if ($objElementoIni->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento() == 'ODF') 
                {
                    $objDetalleElemento = $this->_em->getRepository('schemaBundle:InfoDetalleElemento')
                                               ->findOneBy(array( "elementoId"    => $objElementoIni->getId(), 
                                                                  "detalleNombre" => "FACTIBILIDAD AUTOMATICA",
                                                                  "estado"        => "Activo"
                                                                )
                                                          );
                    if ($objDetalleElemento)
                    {
                        if ($objDetalleElemento->getDetalleValor() == 'SI')
                        {
                            
                            $strNombreIntIn = str_replace("OUT ", "IN ", $objInterfaceIni->getNombreInterfaceElemento());
                            // Se obtiene el interfaceElementoFinal
                            $objInterfaceFin = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                         ->findOneBy(array("elementoId"              => $objElementoIni->getId(),
                                                                           "nombreInterfaceElemento" => $strNombreIntIn,
                                                                           "estado"                  => "not connect"
                                                                          )
                                                                    );
                            if ($objInterfaceFin)
                            {
                                $arrayParametros = array();
                                $arrayRespuesta  = array();
                                $arrayParametros['idElementoB']      = $objElementoIni->getId();
                                $arrayParametros['strTipoInterface'] = $strTipoInterface;
                                $arrayRespuestaPuertoSw           = $this->getPuertoSwDisponibleByOdf($arrayParametros);
                                if ($arrayRespuestaPuertoSw['strEncontroFactibilidad'] == "SI")
                                {
                                    $arrayRespuesta['status']          = 'OK';
                                    $arrayRespuesta['objInterfaceSw']  = $arrayRespuestaPuertoSw['objInterfaceElementoSw'];
                                    $arrayRespuesta['objInterfaceOdf'] = $objInterfaceFin;
                                    return $arrayRespuesta;
                                }
                                else
                                {
                                    $arrayRespuesta = array();
                                    $arrayRespuesta['status'] = 'ERROR';
                                    return $arrayRespuesta;
                                }
                                
                            }
                            else
                            {
                                $arrayRespuesta = array();
                                $arrayRespuesta['status'] = 'ERROR';
                                return $arrayRespuesta;
                            }
                        }
                    }
                }
                /* Se incova funcion recursivamente recorriendo los enlaces
                   hasta llegar a un ODF que aprovisione factiblidad automatica y hasta
                   que existan enlaces disponibles */
                $arrayRespuesta                                = array();
                $arrayRespuesta['interfaceElementoConectorId'] = $objEnlace->getInterfaceElementoIniId()->getId();
                $arrayRespuesta['strTipoInterface']            = $strTipoInterface;
                return $this->getOdfFactTnByInterfaceOutCassette($arrayRespuesta);
            }
            else
            {
                $arrayRespuesta = array();
                $arrayRespuesta['status'] = 'ERROR';
                return $arrayRespuesta;
            }
        } 
        catch (\Exception $e) {
            error_log($e->getMessage());
            $arrayRespuesta           = array();
            $arrayRespuesta['status'] = 'ERROR';
            return $arrayRespuesta;
        }
    }
    
    /**
     * Documentación para el método 'getNodoContenedorSwByOdf'.
     *
     * Método utilizado para obtener un Puerto de Sw disponible para asignar factibildiad automatica de servicios TN
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0  30-06-2016
     *
     * @author Germán Valenzuela <jbozada@telconet.ec>
     * @version 1.1  08-04-2021 - Al momento de llamar al proceso 'getResultadoElementosContenidosNodo' se modifica
     *                            para que envie el id del elemento y no el objeto.
     *
     * @return Array Respuesta
     * 
     * @since 1.0
     */
    public function getPuertoSwDisponibleByOdf($arrayParametros)
    {
        $arrayRespuestaMetodo                            = array();
        $arrayRespuestaMetodo['strEncontroFactibilidad'] = 'NO';
        $strTipoInterface                                = $arrayParametros['strTipoInterface'];
        try
        {
            $objRelacionElemento = $this->_em->getRepository('schemaBundle:InfoRelacionElemento')
                                             ->findOneBy(array("elementoIdB"             => $arrayParametros['idElementoB'],
                                                               "estado"                  => "Activo"
                                                              )
                                                        );
            if ($objRelacionElemento)
            {
                $objElementoA = $this->_em->getRepository('schemaBundle:InfoElemento')
                                          ->find($objRelacionElemento->getElementoIdA());
                
                if ($objElementoA->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento() == 'NODO')
                {
                    
                    $arrayResultado = $this->getResultadoElementosContenidosNodo($objElementoA->getId(), "SWITCH");
        
                    if($arrayResultado)
                    {   
                        //se recorren todos los SW contenidos dentro del NODO
                        foreach($arrayResultado['resultado'] as $data)
                        {
                            $arrayObjInterfaceElementos = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                               ->getInterfacesLibresByIdElemento($data['id'],'not connect');
                            
                            if($arrayObjInterfaceElementos)
                            {
                                foreach($arrayObjInterfaceElementos as $objInterfaceElemento)
                                {
                                    //se asigna inferface del SW correspondiente segun el tipo de interface que debe aprovisonarse
                                    $booleanValidaInterface = strpos($objInterfaceElemento->getNombreInterfaceElemento(), $strTipoInterface);
                                    if ($booleanValidaInterface !== false)
                                    {
                                        $arrayRespuestaMetodo['objInterfaceElementoSw']  = $objInterfaceElemento;
                                        $arrayRespuestaMetodo['strEncontroFactibilidad'] = 'SI';
                                        return $arrayRespuestaMetodo;
                                    }
                                }
                            }
                        }
                    }
                    return $arrayRespuestaMetodo;
                }
                else
                {
                    /* Se invoca funcion recursivamente hasta llegar al elemento contenedor NODO
                       del ODF y mientras existan relaciones de elementos */
                    $arrayParametros['idElementoB']      = $objElementoA->getId();
                    $arrayParametros['strTipoInterface'] = $strTipoInterface;
                    return $this->getPuertoSwDisponibleByOdf($arrayParametros);
                }
            }
            else
            {
                return $arrayRespuestaMetodo;
            }
        } 
        catch (Exception $e) 
        {
            error_log($e->getMessage());
            return $arrayRespuestaMetodo;
        }
    }

    /**
     * getElementosClienteByInterface
     * 
     * Metodo que devuelve los elementos que posee el cliente dada una interface de elemento inicial
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.1    Se agregan validaciones para solo recuperar elementos que no sean SMART WIFI
     * @since 1.0
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2  12-09-2018  Se agregan validaciones para gesitonar elementos AP WIFI
     * @since 1.1
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 03-12-2018 Se agregan validaciones para sólo recuperar elementos que no sean Extender Dual Band
     * 
     * @param Array $arrayParametros [
     *                                 interfaceElementoConectorId   Identificador de interface elemento utilizada para recuperar enlaces de elementos
     *                                 strTieneSmartWifi             String utilizado para excluir elementos SmartWifi en respuesta final del proceso
     *                                 arrayData                     Array que contiene los elementos recuperados en el proceso recursivo
     *                               ]
     * @return $arrayData            Arreglo con elemento recuperados en la ejecución de este proceso
     */
    public function getElementosClienteByInterface($arrayParametros)
    {
        $booleanFalse = false;
        try
        {
            $interfaceElementoConectorId = $arrayParametros['interfaceElementoConectorId'];
            $strTieneSmartWifi           = $arrayParametros['strTieneSmartWifi'];
            $arrayData                   = $arrayParametros['arrayData'];
            // --------------------------------------------------------------------------------------------------------
            $objEnlace = $this->_em->getRepository('schemaBundle:InfoEnlace')
                                   ->findOneBy( array("interfaceElementoIniId" => $interfaceElementoConectorId,
                                                      "estado"                 => 'Activo' ));
            // se verifica si existe enlace conectado al interface 
            if($objEnlace)
            {
                // Se obtiene el interfaceElementoFinal
                $objInterfaceFin = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                             ->find($objEnlace->getInterfaceElementoFinId());
                // Se obtiene el elementoFinal
                $objElementoFin = $objInterfaceFin->getElementoId();
                
                if (!in_array($objElementoFin, $arrayData)) 
                {
                    //se valida si el proceso excluye elementos SmartWifi
                    if($strTieneSmartWifi == "SI" || 
                       ((strpos($objElementoFin->getNombreElemento(), 'SmartWifi') == $booleanFalse) &&
                        (strpos($objElementoFin->getNombreElemento(), 'ApWifi') == $booleanFalse) &&
                        (strpos($objElementoFin->getNombreElemento(), 'ExtenderDualBand') == $booleanFalse)
                       )
                      )
                    {
                        array_push($arrayData, $objElementoFin);
                    }
                    
                    if($strTieneSmartWifi == "SI" &&
                        (
                         (strpos($objElementoFin->getNombreElemento(), 'RentaSmartWifi') !== $booleanFalse) ||
                         (strpos($objElementoFin->getNombreElemento(), 'RentaApWifi') !== $booleanFalse) ||
                         (strpos($objElementoFin->getNombreElemento(), 'ExtenderDualBand') !== $booleanFalse)
                        )
                      )
                    {
                        return $arrayData;
                    }
                }
                
                //se invoca recursivamente el metodo
                $arrayParams = array();
                $arrayParams['interfaceElementoConectorId'] = $objInterfaceFin->getId();
                $arrayParams['strTieneSmartWifi']           = $strTieneSmartWifi;
                $arrayParams['arrayData']                   = $arrayData;
                return $this->getElementosClienteByInterface($arrayParams);
            }
            else
            { 
                return $arrayData;
            }
        } 
        catch (\Exception $e) 
        {
            error_log($e->getMessage());
            return array();
        }
    }
    
    /**
     * getElementosSmartWifiByInterface
     * 
     * Metodo que devuelve los elementos que posee el cliente dada una interface de elemento inicial
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0
     * @since 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 Se valida que para los productos Extender Dual Band obtenga el detalle del elemento con el nombre MAC
     * 
     * @param Array $arrayParametros [
     *                                objInterfaceFin                  Objeto de interface final recuparado durante el procesamiento de la información
     *                                intInterfaceElementoConectorId   Objeto de interface inicial usado para el proceso de recuperación de elementos
     *                                strTipoSmartWifi                 String que indica el tipo de SmartWifi procesado(SmartWifi ó RentaSmartWifi)
     *                                strRetornaPrimerWifi             String que indica si se debe retornar interface del primer SmartWifi encontrado
     *                                arrayData                        Array que contiene los elementos recuperados en el proceso recursivo
     *                                strBanderaReturn                 Bandera que indica si se debe retornar una interface ó un array de elementos
     *                                strRetornaUltElePlan             String que indica si se debe retornar el ultimo elemento que no sea SmartWifi
     *                                objInterfaceElementoFinPlan      
     *                               ]
     * @return $arrayData ó $objInterfaceElementoFinPlan ó $objInterfaceFin según los parametros enviados en el método
     */
    public function getElementosSmartWifiByInterface($arrayParametros)
    {
        try
        {
            $objInterfaceFin                = isset($arrayParametros['objInterfaceFin'])?$arrayParametros['objInterfaceFin']:null;
            $intInterfaceElementoConectorId = isset($arrayParametros['intInterfaceElementoConectorId'])?
                                              $arrayParametros['intInterfaceElementoConectorId']:null;
            $strTipoSmartWifi               = isset($arrayParametros['strTipoSmartWifi'])?$arrayParametros['strTipoSmartWifi']:null;
            $strRetornaPrimerWifi           = isset($arrayParametros['strRetornaPrimerWifi'])?$arrayParametros['strRetornaPrimerWifi']:null;
            $arrayData                      = isset($arrayParametros['arrayData'])?$arrayParametros['arrayData']:null;
            $strBanderaReturn               = isset($arrayParametros['strBanderaReturn'])?$arrayParametros['strBanderaReturn']:null;
            $strRetornaUltElePlan           = isset($arrayParametros['strRetornaUltElePlan'])?$arrayParametros['strRetornaUltElePlan']:null;
            $objInterfaceElementoFinPlan    = isset($arrayParametros['objInterfaceElementoFinPlan'])?
                                              $arrayParametros['objInterfaceElementoFinPlan']:null;
            // --------------------------------------------------------------------------------------------------------
            $objEnlace = $this->_em->getRepository('schemaBundle:InfoEnlace')
                                   ->findOneBy( array("interfaceElementoIniId" => $intInterfaceElementoConectorId,
                                                      "estado"                 => 'Activo' ));
            // se verifica si existe enlace conectado al interface 
            if(is_object($objEnlace))
            {
                // Se obtiene el interfaceElementoFinal
                $objInterfaceFin = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                             ->find($objEnlace->getInterfaceElementoFinId());
                // Se obtiene el elementoFinal
                $objElementoFin = $objInterfaceFin->getElementoId();
                if (is_object($objElementoFin))
                {
                    if (strpos($objElementoFin->getNombreElemento(), $strTipoSmartWifi) !== false)
                    {
                        //si el elemento recuperado es un SmartWifi y cumple con la condicion se retorna la interface recuperada
                        if($strRetornaPrimerWifi == "SI")
                        {
                            return $objInterfaceFin;
                        }
                        if (!in_array($objElementoFin, $arrayData)) 
                        {
                            if(isset($strTipoSmartWifi) && !empty($strTipoSmartWifi) && $strTipoSmartWifi === "ExtenderDualBand")
                            {
                                $strDetalleNombre = "MAC";
                            }
                            else
                            {
                                $strDetalleNombre = "MAC WIFI";
                            }
                            $objDetEleMacSmartWifi = $this->_em
                                                          ->getRepository('schemaBundle:InfoDetalleElemento')
                                                          ->findOneBy(array('elementoId'    => $objElementoFin->getId(),
                                                                            'detalleNombre' => $strDetalleNombre,
                                                                            'estado'        => 'Activo'
                                                                           )
                                                                     );
                            if(is_object($objDetEleMacSmartWifi))
                            {
                                $objElementoFin->setMacElemento($objDetEleMacSmartWifi->getDetalleValor());
                            }
                            array_push($arrayData, $objElementoFin);
                        }
                    }
                    else
                    {
                        $objInterfaceElementoFinPlan = $objInterfaceFin;
                    }
                    //se invoca recursivamente el metodo
                    $arrayParams = array();
                    $arrayParams['intInterfaceElementoConectorId'] = $objInterfaceFin->getId();
                    $arrayParams['arrayData']                      = $arrayData;
                    $arrayParams['objInterfaceFin']                = $objInterfaceFin;
                    $arrayParams['strTipoSmartWifi']               = $strTipoSmartWifi;
                    $arrayParams['strRetornaPrimerWifi']           = $strRetornaPrimerWifi;
                    $arrayParams['strBanderaReturn']               = $strBanderaReturn;
                    $arrayParams['strRetornaUltElePlan']           = $strRetornaUltElePlan;
                    $arrayParams['objInterfaceElementoFinPlan']    = $objInterfaceElementoFinPlan;
                    return $this->getElementosSmartWifiByInterface($arrayParams);
                }
            }
            else
            { 
                //si cumple esta condicion solo se retornara el valor de una interface de elemento
                if ($strBanderaReturn == "INTERFACE")
                {
                    //si se cumple esta condicion se retornara la interface del ultimo elemento que no sea SmartWifi
                    if($strRetornaUltElePlan == "SI")
                    {
                        return $objInterfaceElementoFinPlan;
                    }
                    else
                    {
                        //se retornara la ultima interface de elemento SmartWifi encontrada mediante enlaces
                        $objInterfaceConector = $this->_em
                                                     ->getRepository('schemaBundle:InfoInterfaceElemento')
                                                     ->find($intInterfaceElementoConectorId);
                        $objInterfaceFin = is_object($objInterfaceFin)?$objInterfaceFin:$objInterfaceConector;
                        return $objInterfaceFin;
                    }
                }
                else
                {
                    return $arrayData;
                }
            }
        } 
        catch (\Exception $e) {
            error_log($e->getMessage());
            return array();
        }
    }
    
    /**
     * getElementosNetHomeFiberByInterface
     * 
     * Metodo que devuelve los elementos que posee el cliente dada una interface de elemento inicial
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 2018-09-21
     * @since 1.0
     * 
     * @param Array $arrayParametros [
     *                                objInterfaceFin                  Objeto de interface final recuparado durante el procesamiento de la información
     *                                intInterfaceElementoConectorId   Objeto de interface inicial usado para el proceso de recuperación de elementos
     *                                arrayData                        Array que contiene los elementos recuperados en el proceso recursivo
     *                                strBanderaReturn                 Bandera que indica si se debe retornar una interface ó un array de elementos
     *                                objInterfaceElementoFinPlan      
     *                               ]
     * @return $arrayData ó $objInterfaceElementoFinPlan ó $objInterfaceFin según los parametros enviados en el método
     */
    public function getElementosNetHomeFiberByInterface($arrayParametros)
    {
        try
        {
            $objInterfaceFin                = isset($arrayParametros['objInterfaceFin'])?$arrayParametros['objInterfaceFin']:null;
            $intInterfaceElementoConectorId = isset($arrayParametros['intInterfaceElementoConectorId'])?
                                              $arrayParametros['intInterfaceElementoConectorId']:null;
            $arrayData                      = isset($arrayParametros['arrayData'])?$arrayParametros['arrayData']:null;
            $strBanderaReturn               = isset($arrayParametros['strBanderaReturn'])?$arrayParametros['strBanderaReturn']:null;
            $objInterfaceElementoFinPlan    = isset($arrayParametros['objInterfaceElementoFinPlan'])?
                                              $arrayParametros['objInterfaceElementoFinPlan']:null;
            
            $objEnlace = $this->_em->getRepository('schemaBundle:InfoEnlace')
                                   ->findOneBy( array("interfaceElementoIniId" => $intInterfaceElementoConectorId,
                                                      "estado"                 => 'Activo' ));
            // se verifica si existe enlace conectado al interface
            if(is_object($objEnlace))
            {
                // Se obtiene el interfaceElementoFinal
                $objInterfaceFin = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                             ->find($objEnlace->getInterfaceElementoFinId());
                // Se obtiene el elementoFinal
                $objElementoFin = $objInterfaceFin->getElementoId();
                if (is_object($objElementoFin))
                {
                    if (!in_array($objElementoFin, $arrayData))
                    {
                        array_push($arrayData, $objElementoFin);
                    }
                    //se invoca recursivamente el metodo
                    $arrayParams = array();
                    $arrayParams['intInterfaceElementoConectorId'] = $objInterfaceFin->getId();
                    $arrayParams['arrayData']                      = $arrayData;
                    $arrayParams['objInterfaceFin']                = $objInterfaceFin;
                    $arrayParams['strBanderaReturn']               = $strBanderaReturn;
                    $arrayParams['objInterfaceElementoFinPlan']    = $objInterfaceElementoFinPlan;
                    return $this->getElementosNetHomeFiberByInterface($arrayParams);
                }
            }
            else
            {
                //si cumple esta condicion solo se retornara el valor de una interface de elemento
                if ($strBanderaReturn == "INTERFACE")
                {
                    //se retornara la ultima interface de elemento NetHome encontrada mediante enlaces
                    $objInterfaceConector = $this->_em
                                                 ->getRepository('schemaBundle:InfoInterfaceElemento')
                                                 ->find($intInterfaceElementoConectorId);
                    $objInterfaceFin = is_object($objInterfaceFin)?$objInterfaceFin:$objInterfaceConector;
                    return $objInterfaceFin;
                }
                else
                {
                    return $arrayData;
                }
            }
        } 
        catch (\Exception $e)
        {
            error_log($e->getMessage());
            return array();
        }
    }
    
    /**
     * getElementosApWifiByInterface
     * 
     * Metodo que devuelve los elementos que posee el cliente dada una interface de elemento inicial
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0    12-09-2018
     * @since 1.0
     * 
     * @param Array $arrayParametros [
     *                                objInterfaceFin                  Objeto de interface final recuparado durante el procesamiento de la información
     *                                intInterfaceElementoConectorId   Objeto de interface inicial usado para el proceso de recuperación de elementos
     *                                strTipoApWifi                    String que indica el tipo de ApWifi procesado(ApWifi ó RentaApWifi)
     *                                strRetornaPrimerWifi             String que indica si se debe retornar interface del primer ApWifi encontrado
     *                                arrayData                        Array que contiene los elementos recuperados en el proceso recursivo
     *                                strBanderaReturn                 Bandera que indica si se debe retornar una interface ó un array de elementos
     *                                strRetornaUltElePlan             String que indica si se debe retornar el ultimo elemento que no sea ApWifi
     *                                objInterfaceElementoFinPlan      
     *                               ]
     * @return $arrayData
     */
    public function getElementosApWifiByInterface($arrayParametros)
    {
        try
        {
            $objInterfaceFin                = isset($arrayParametros['objInterfaceFin'])?$arrayParametros['objInterfaceFin']:null;
            $intInterfaceElementoConectorId = isset($arrayParametros['intInterfaceElementoConectorId'])?
                                              $arrayParametros['intInterfaceElementoConectorId']:null;
            $strTipoApWifi                  = isset($arrayParametros['strTipoApWifi'])?$arrayParametros['strTipoApWifi']:null;
            $strRetornaPrimerWifi           = isset($arrayParametros['strRetornaPrimerWifi'])?$arrayParametros['strRetornaPrimerWifi']:null;
            $arrayData                      = isset($arrayParametros['arrayData'])?$arrayParametros['arrayData']:null;
            $strBanderaReturn               = isset($arrayParametros['strBanderaReturn'])?$arrayParametros['strBanderaReturn']:null;
            $strRetornaUltElePlan           = isset($arrayParametros['strRetornaUltElePlan'])?$arrayParametros['strRetornaUltElePlan']:null;
            $objInterfaceElementoFinPlan    = isset($arrayParametros['objInterfaceElementoFinPlan'])?
                                              $arrayParametros['objInterfaceElementoFinPlan']:null;
            
            $objEnlace = $this->_em->getRepository('schemaBundle:InfoEnlace')
                                   ->findOneBy( array("interfaceElementoIniId" => $intInterfaceElementoConectorId,
                                                      "estado"                 => 'Activo' ));
            // se verifica si existe enlace conectado al interface 
            if(is_object($objEnlace))
            {
                // Se obtiene el interfaceElementoFinal
                $objInterfaceFin = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                             ->find($objEnlace->getInterfaceElementoFinId());
                // Se obtiene el elementoFinal
                $objElementoFin = $objInterfaceFin->getElementoId();
                if (is_object($objElementoFin))
                {
                    if (strpos($objElementoFin->getNombreElemento(), $strTipoApWifi) !== false)
                    {
                        //si el elemento recuperado es un ApWifi y cumple con la condicion se retorna la interface recuperada
                        if($strRetornaPrimerWifi == "SI")
                        {
                            return $objInterfaceFin;
                        }
                        if (!in_array($objElementoFin, $arrayData)) 
                        {
                            $objDetEleMacApWifi = $this->_em
                                                          ->getRepository('schemaBundle:InfoDetalleElemento')
                                                          ->findOneBy(array('elementoId'    => $objElementoFin->getId(),
                                                                            'detalleNombre' => 'MAC WIFI',
                                                                            'estado'        => 'Activo'
                                                                           )
                                                                     );
                            if(is_object($objDetEleMacApWifi))
                            {
                                $objElementoFin->setMacElemento($objDetEleMacApWifi->getDetalleValor());
                            }
                            array_push($arrayData, $objElementoFin);
                        }
                    }
                    else
                    {
                        $objInterfaceElementoFinPlan = $objInterfaceFin;
                    }
                    //se invoca recursivamente el metodo
                    $arrayParams = array();
                    $arrayParams['intInterfaceElementoConectorId'] = $objInterfaceFin->getId();
                    $arrayParams['arrayData']                      = $arrayData;
                    $arrayParams['objInterfaceFin']                = $objInterfaceFin;
                    $arrayParams['strTipoApWifi']                  = $strTipoApWifi;
                    $arrayParams['strRetornaPrimerWifi']           = $strRetornaPrimerWifi;
                    $arrayParams['strBanderaReturn']               = $strBanderaReturn;
                    $arrayParams['strRetornaUltElePlan']           = $strRetornaUltElePlan;
                    $arrayParams['objInterfaceElementoFinPlan']    = $objInterfaceElementoFinPlan;
                    return $this->getElementosApWifiByInterface($arrayParams);
                }
            }
            else
            { 
                //si cumple esta condicion solo se retornara el valor de una interface de elemento
                if ($strBanderaReturn == "INTERFACE")
                {
                    //si se cumple esta condicion se retornara la interface del ultimo elemento que no sea ApWifi
                    if($strRetornaUltElePlan == "SI")
                    {
                        return $objInterfaceElementoFinPlan;
                    }
                    else
                    {
                        //se retornara la ultima interface de elemento ApWifi encontrada mediante enlaces
                        $objInterfaceConector = $this->_em
                                                     ->getRepository('schemaBundle:InfoInterfaceElemento')
                                                     ->find($intInterfaceElementoConectorId);
                        $objInterfaceFin = is_object($objInterfaceFin)?$objInterfaceFin:$objInterfaceConector;
                        return $objInterfaceFin;
                    }
                }
                else
                {
                    return $arrayData;
                }
            }
        } 
        catch (\Exception $e)
        {
            error_log($e->getMessage());
            return array();
        }
    }

    /**
     * Documentación para el método 'getClientePerteneceEquipo'.
     *
     * Método utilizado para obtener el cliente al cual pertene un equipo CPE
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0  28-07-2016
     * 
     * @param $arrayParametros [elementoId (identificador del elemento CPE del telcos)]
     *
     * @return Array Respuesta
     * 
     * @since 1.0
     */
    public function getClientePerteneceEquipo($arrayParametros)
    {
        $strMensajeRespuesta = "";
        try
        {
            $intElementoId              = $arrayParametros['elementoId'];
            $arrayObjInterfaceElementos = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                    ->findBy(array('elementoId' => $intElementoId));
            //se recorren interfaces
            foreach($arrayObjInterfaceElementos as $objInterfaceElemento)
            {
                $arrayParametrosMetodo                        = array();
                $arrayParametrosMetodo['interfaceElementoId'] = $objInterfaceElemento->getId();
                $arrayRespuestaMetodo                         = $this->getInformacionServicio($arrayParametrosMetodo);
                if ($arrayRespuestaMetodo['strEncontroCliente'] == 'SI')
                {
                    $strMensajeRespuesta = $arrayRespuestaMetodo['strMensaje'];
                    break;
                }
            }
                            
            return $strMensajeRespuesta;
        }
        catch (\Exception $e) 
        {
            error_log($e->getMessage());
            $strMensajeRespuesta = "Se presentaron problemas al recuperar informacion";
        }
        return $strMensajeRespuesta;
    }
    
    /**
     * Documentación para el método 'getInformacionServicio'.
     *
     * Método recursivo utilizado para obtener la información de un servicio que utiliza CPE enviado por parametros
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0  28-07-2016
     * 
     * @param array $arrayParametros    Lista de parametros utilizados en metodo
     *
     * @return Array Respuesta
     * 
     * @since 1.0
     */
    public function getInformacionServicio($arrayParametros)
    {
        $arrayRespuestaMetodo = array();
        try
        {   
            //se ejecuta consulta para verificar que algun cliente utilice el elemento analizado
            $intIdInterfaceElemento = $arrayParametros['interfaceElementoId'];
            $rsm                    = new ResultSetMappingBuilder($this->_em);
            $query                  = $this->_em->createNativeQuery(null, $rsm);
            
            $sql = "SELECT LISTAGG('<span class=\"bold\">Login:  </span>'
                    ||LOGIN
                    ||' <span class=\"bold\">&nbsp;&nbsp;Empresa:  </span>'
                    ||EMPRESA_COD,'</br>') WITHIN GROUP (
                  ORDER BY LOGIN) INFORMACION
                  FROM
                    (SELECT *
                    FROM
                      (SELECT INFO_PUNTO.LOGIN LOGIN,
                        INFO_EMPRESA_GRUPO.PREFIJO EMPRESA_COD
                      FROM DB_COMERCIAL.INFO_SERVICIO,
                        DB_COMERCIAL.INFO_PLAN_CAB,
                        DB_COMERCIAL.INFO_SERVICIO_TECNICO,
                        DB_COMERCIAL.INFO_PUNTO,
                        DB_COMERCIAL.INFO_EMPRESA_GRUPO
                      WHERE INFO_SERVICIO_TECNICO.SERVICIO_ID                =INFO_SERVICIO.ID_SERVICIO
                      AND INFO_SERVICIO.PUNTO_ID                             = INFO_PUNTO.ID_PUNTO
                      AND INFO_SERVICIO.PLAN_ID                             IS NOT NULL
                      AND INFO_SERVICIO.PLAN_ID                              =INFO_PLAN_CAB.ID_PLAN
                      AND INFO_SERVICIO.ESTADO                              IN (:estados1)
                      AND INFO_PLAN_CAB.EMPRESA_COD                          = INFO_EMPRESA_GRUPO.COD_EMPRESA
                      AND INFO_SERVICIO_TECNICO.INTERFACE_ELEMENTO_CLIENTE_ID= :idInterface1
                      UNION ALL
                      SELECT INFO_PUNTO.LOGIN,
                        INFO_EMPRESA_GRUPO.PREFIJO EMPRESA_COD
                      FROM INFO_SERVICIO,
                        ADMI_PRODUCTO,
                        INFO_SERVICIO_TECNICO,
                        INFO_PUNTO,
                        DB_COMERCIAL.INFO_EMPRESA_GRUPO
                      WHERE INFO_SERVICIO_TECNICO.SERVICIO_ID                =INFO_SERVICIO.ID_SERVICIO
                      AND INFO_SERVICIO.PUNTO_ID                             = INFO_PUNTO.ID_PUNTO
                      AND INFO_SERVICIO.PRODUCTO_ID                         IS NOT NULL
                      AND INFO_SERVICIO.PRODUCTO_ID                          = ADMI_PRODUCTO.ID_PRODUCTO
                      AND INFO_SERVICIO.ESTADO                              IN (:estados2)
                      AND ADMI_PRODUCTO.EMPRESA_COD                          = INFO_EMPRESA_GRUPO.COD_EMPRESA
                      AND INFO_SERVICIO_TECNICO.INTERFACE_ELEMENTO_CLIENTE_ID= :idInterface2
                      )
                    GROUP BY LOGIN,
                      EMPRESA_COD
                    ) ";

            $rsm->addScalarResult('INFORMACION', 'informacion', 'string');

            $arrEstados = array('Activo','In-Corte');
            $query->setParameter('estados1',$arrEstados);
            $query->setParameter("idInterface1", $intIdInterfaceElemento);
            $query->setParameter('estados2',$arrEstados);
            $query->setParameter("idInterface2", $intIdInterfaceElemento);

            $query->setSQL($sql);


            $resultado = $query->getOneOrNullResult();
            //si recupera información se retorna clientes que utilizan el elemento
            if($resultado)
            {
                $arrayRespuestaMetodo['strEncontroCliente'] = 'SI';
                $arrayRespuestaMetodo['strMensaje']         = $resultado['informacion'];
                return $arrayRespuestaMetodo;
            }
            else
            {
                //recupera enlace
                $objEnlace = $this->_em->getRepository('schemaBundle:InfoEnlace')
                                       ->findOneBy(array("interfaceElementoFinId" => $intIdInterfaceElemento,
                                                         "estado"                 => 'Activo'
                                                        )
                                                  );
                //si aun existen enlaces se invoca nuevamente esta funcion
                if ($objEnlace)
                {
                    $arrayRespuestaMetodo['interfaceElementoId'] = $objEnlace->getInterfaceElementoIniId();;
                    return $this->getInformacionServicio($arrayRespuestaMetodo);
                }
                else // si no existen mas enlaces se devuelve mensaje
                {
                    $arrayRespuestaMetodo['strEncontroCliente'] = 'NO';
                    $arrayRespuestaMetodo['strMensaje']         = 'No Encontro servicio Activo ó InCorte';
                    return $arrayRespuestaMetodo;
                }
            }
            
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());   
            $arrayRespuestaMetodo['strEncontroCliente'] = 'NO';
            $arrayRespuestaMetodo['strMensaje']         = 'Se presentaron problemas al recuperar informacion';
            return $arrayRespuestaMetodo;
        }
    }
    
    
    /**
     * 
     * Metodo que devuelve el json de las interfaces de un elemento dado segun el nombre del interface enviado como parametro
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 04-07-2016
     * 
     * @param Array $arrayParams [ intIdElemento , strNombreInterface]
     * @return json 
     */
    public function getJsonInterfacesElementoPorNombreInterface($arrayParams)
    {
        $arrayResultado = $this->getResultadoInterfacesElementoPorNombreInterface($arrayParams);
        
        if($arrayResultado)
        {            
            foreach($arrayResultado['resultado'] as $data)
            {
                $arrayEncontrados[] = array(
                                            'idInterfaceElemento'     => $data['idInterfaceElemento'],
                                            'nombreInterfaceElemento' => $data['nombreInterfaceElemento'],
                                            'estado'                  => $data['estado'],
                                            'servicioId'              => $data['servicioId'],
                                            'mac'                     => $data['mac'],
                                            'tipoEnlace'              => $data['tipoEnlace']
                                            );
            }
            
            $arrayRespuesta = array('encontrados' => $arrayEncontrados); 
        }
        else
        {
            $arrayRespuesta = array('encontrados' => '[]');
        }
        
        $jsonData       = json_encode($arrayRespuesta);
        return $jsonData;
    }
    
    /**
     * 
     * Metodo que devuelve el Array de las interfaces de un elemento dado segun el nombre del interface enviado como parametro
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 04-07-2016
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 - Se coloca los usuarios de cada tabla dentro de la consulta
     * @since 10-10-2016
     * 
     * @author Walther Joao Gaibor C. <wgaibor@telconet.ec>
     * @version 1.1 - 21-01-2018 - Se envia el tipo de orden del servicio.
     * @param Array $arrayParams [ intIdElemento , strNombreInterface]
     * @return json 
     */
    public function getResultadoInterfacesElementoPorNombreInterface($arrayParams)
    {
        $arrayResultado = array();
        try
        {
            $rsm = new ResultSetMappingBuilder($this->_em);	      
            $query = $this->_em->createNativeQuery(null, $rsm);	
            
            if(isset($arrayParams['consultaEstado']) && $arrayParams['consultaEstado'])
            {                
                $query->setParameter('estado',   array('not connect'));   
            }
            else
            {
                $query->setParameter('estado',   array('connected')); 
            }
            
            if((isset($arrayParams['tipoElemento']) && $arrayParams['tipoElemento'] == 'WIFI') ||
                (isset($arrayParams['strTipoOrden']) && $arrayParams['strTipoOrden'] == 'C'))
            {
                $query->setParameter('estado',   array('connected', 'not connect')); 
            }
                       
            $sql = "  SELECT 
                        ID_INTERFACE_ELEMENTO,
                        NOMBRE_INTERFACE_ELEMENTO,
                        ESTADO,
                        MAC_INTERFACE_ELEMENTO,
                        (SELECT NVL(
                          (SELECT IST.TIPO_ENLACE
                          FROM DB_INFRAESTRUCTURA.INFO_DETALLE_INTERFACE IDI,
                            DB_COMERCIAL.INFO_SERVICIO_TECNICO IST
                          WHERE IDI.DETALLE_VALOR      = IST.SERVICIO_ID
                          AND IDI.ID_DETALLE_INTERFACE =
                            (SELECT MIN(ID_DETALLE_INTERFACE)
                            FROM DB_INFRAESTRUCTURA.INFO_DETALLE_INTERFACE
                            WHERE INTERFACE_ELEMENTO_ID = IDI.INTERFACE_ELEMENTO_ID
                            )
                          AND IDI.INTERFACE_ELEMENTO_ID = ID_INTERFACE_ELEMENTO
                          ),'PUERTO DISPONIBLE')
                        FROM DUAL
                        ) TIPO_ENLACE
                      FROM DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO
                      WHERE ELEMENTO_ID = :elemento                      
                      AND DESCRIPCION_INTERFACE_ELEMENTO = :nombre
                      AND ESTADO in (:estado)
                    ";
                            
            $rsm->addScalarResult(strtoupper('ID_INTERFACE_ELEMENTO'),'idInterfaceElemento','integer');                        
            $rsm->addScalarResult(strtoupper('NOMBRE_INTERFACE_ELEMENTO'),'nombreInterfaceElemento','string');			             
            $rsm->addScalarResult(strtoupper('ESTADO'),'estado','string');			              
            $rsm->addScalarResult(strtoupper('SERVICIO_ID'),'servicioId','string');
            $rsm->addScalarResult(strtoupper('MAC_INTERFACE_ELEMENTO'),'mac','string');
            $rsm->addScalarResult(strtoupper('TIPO_ENLACE'),'tipoEnlace','string');
                        
            $query->setParameter('elemento', $arrayParams['intIdElemento']);        
            $query->setParameter('nombre',   'Wan');            

            $sql .= " ORDER BY NOMBRE_INTERFACE_ELEMENTO DESC ";

            $query->setSQL($sql);                   
            
            $arrayResultado['resultado'] = $query->getResult();           
        } 
        catch (Exception $ex) 
        {
            error_log($ex->getMessage());
        }
        
        return $arrayResultado;
    }
           
    /**
     * 
     * Metodo que devuelve el Array de las interfaces de un elemento dado segun el nombre del interface enviado como parametro
     * 
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0    30-11-2016
     * @since 1.0
     * 
     * @param Array $arrayParametros [strSerieCpe]
     * @return array 
     */
    public function getElementosExistentesPorSerie($arrayParametros)
    {
        $arrayResultado                   = array();
        $arrayResultado['arrayResultado'] = array();
        try
        {
            $objQuery = $this->_em->createQuery(null);

            $strDQL = " SELECT serv.id,
                            st.elementoClienteId,
                            st.interfaceElementoClienteId
                        FROM schemaBundle:InfoServicio serv,
                          schemaBundle:InfoServicioTecnico st,
                          schemaBundle:InfoElemento ele
                        WHERE st.servicioId      = serv.id
                        AND st.elementoClienteId = ele.id
                        AND serv.estado          = :strParamEstadoServicio
                        AND ele.estado           = :strParamEstadoElemento ";
            
            $objQuery->setParameter('strParamEstadoServicio', 'Activo');
            $objQuery->setParameter('strParamEstadoElemento', 'Activo');
            if (isset($arrayParametros['strSerieCpe']) && !empty($arrayParametros['strSerieCpe']))
            {
                $strDQL .= " AND ele.serieFisica      = :strParamSerieCpe";
                $objQuery->setParameter('strParamSerieCpe', $arrayParametros['strSerieCpe']);
            }
            $objQuery->setDQL($strDQL);              
            $arrayResultado['arrayResultado'] = $objQuery->getResult();                        
                           
        } 
        catch (\Exception $ex) 
        {
            error_log($ex->getMessage());
        }
        
        return $arrayResultado;
    }
    
    /**
     * Metodo que devuelve el array con la consulta para obtener la informacion general de Switches y Routers
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 10-10-2016
     * 
     * @param Array $arrayParametros [ 
     *                                 tipo      Tipo de Elemento a Crear
     *                                 empresa   Empresa a la cual pertenece el elemento a ser creado
     *                               ]
     * @return Array $arrayResultado [ total , resultado ] 
     * @throws \telconet\schemaBundle\Repository\Exception
     */
    public function getArrayInformacionSwitchRouter($arrayParametros)
    {                
        try
        {
            $arrayParametros['strTipoBusqueda'] = 'cont';
            $objQueryCont = $this->getInformacionSwitchRouter($arrayParametros);

            $arrayParametros['strTipoBusqueda'] = 'data';
            $objQueryData = $this->getInformacionSwitchRouter($arrayParametros);
            
            $arrayResultado['status']     = "OK";
            $arrayResultado['mensaje']    = "OK";
            $arrayResultado['resultado']  = array('total' => $objQueryCont->getSingleScalarResult(),
                                                  'data'  => $objQueryData->getArrayResult()
                                                 );   
        }
        catch(\Exception $e)
        {           
            $arrayResultado['resultado']  = array();
            $arrayResultado['status']     = "ERROR";
            $arrayResultado['mensaje']    = "No se pudo traer la información del Elemento requerido";           
        }        
        
         return $arrayResultado;
    }
    
    /**
     * Metodo que devuelve el ObjQuery con la consulta para obtener la informacion general de Switches y Routers
     * 
     *  - Dado que se requiere enviar información relacionada a Switches o Routers la informacion de ANILLO para los Switches
     *    y PREFIJO_RED para los Routers  son valores que son requeridos para el consumo de parte de procesos de Networking y es
     *    información que sólo estos dos tipos de elemento poseen siempre en estado Activo
     * 
     *  - COSTO QUERY : 4465
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 21-09-2016
     * 
     * @param Array $arrayParametros [ strTipoBusqueda , tipo , empresa ]
     * @return Object $objQuery
     * @throws \telconet\schemaBundle\Repository\Exception
     */
    public function getInformacionSwitchRouter($arrayParametros)
    {                
        try
        {
            $rsm = new ResultSetMappingBuilder($this->_em);	      
            $objQuery = $this->_em->createNativeQuery(null, $rsm);
            
            $strFrom   = "";
            $strWhere  = "";
            $strSelect = "";
            
            switch($arrayParametros['strTipoBusqueda']):
                case "cont":
                    $strSelect = "SELECT COUNT(*) CONT ";
                    $rsm->addScalarResult('CONT','cont','integer');
                    break;
                case "data":
                    $strSelect = "SELECT 
                                    TIPO.NOMBRE_TIPO_ELEMENTO,
                                    ELEMENTO.NOMBRE_ELEMENTO,
                                    ELEMENTO.ESTADO,
                                    IP.IP,
                                    MODELO.NOMBRE_MODELO_ELEMENTO,
                                    CASE TIPO.NOMBRE_TIPO_ELEMENTO
                                    WHEN 'SWITCH'
                                    THEN
                                      (SELECT X.DETALLE_VALOR
                                      FROM INFO_DETALLE_ELEMENTO X
                                      WHERE X.ELEMENTO_ID  = ELEMENTO.ID_ELEMENTO
                                      AND X.DETALLE_NOMBRE = :anillo
                                      AND X.ESTADO         = :estado
                                      )
                                    ELSE
                                      (SELECT X.DETALLE_VALOR
                                      FROM INFO_DETALLE_ELEMENTO X
                                      WHERE X.ELEMENTO_ID  = ELEMENTO.ID_ELEMENTO
                                      AND X.DETALLE_NOMBRE = :prefijoRed
                                      AND X.ESTADO         = :estado
                                      )
                                  END DETALLE_VALOR ";
                    $rsm->addScalarResult('NOMBRE_TIPO_ELEMENTO','nombreTipoElemento','string');                        
                    $rsm->addScalarResult('NOMBRE_ELEMENTO','nombreElemento','string');			             
                    $rsm->addScalarResult('ESTADO','estado','string');			              
                    $rsm->addScalarResult('IP','ip','string');
                    $rsm->addScalarResult('NOMBRE_MODELO_ELEMENTO','nombreModeloElemento','string');
                    $rsm->addScalarResult('DETALLE_VALOR','detalleValor','string');
                    break;
            endswitch;
            
            if($arrayParametros['tipo'] == 'ROUTER')
            {
                $strFrom = ", INFO_DETALLE_ELEMENTO DETALLE ";
                $strWhere = " AND ELEMENTO.ID_ELEMENTO        = DETALLE.ELEMENTO_ID 
                              AND DETALLE.DETALLE_NOMBRE      = :prefijoRed
                              AND DETALLE.DETALLE_VALOR       IS NOT NULL";
            }
            
            $strSql = "$strSelect
                        FROM 
                          INFO_ELEMENTO ELEMENTO,
                          ADMI_MODELO_ELEMENTO MODELO,
                          ADMI_TIPO_ELEMENTO TIPO,
                          INFO_IP IP,
                          INFO_EMPRESA_ELEMENTO EMPRESA
                          $strFrom
                        WHERE 
                            ELEMENTO.ID_ELEMENTO      = IP.ELEMENTO_ID
                        AND ELEMENTO.MODELO_ELEMENTO_ID = MODELO.ID_MODELO_ELEMENTO
                        AND MODELO.TIPO_ELEMENTO_ID     = TIPO.ID_TIPO_ELEMENTO
                        AND EMPRESA.ELEMENTO_ID         = ELEMENTO.ID_ELEMENTO
                        AND EMPRESA.EMPRESA_COD         = :empresaCod
                        AND TIPO.NOMBRE_TIPO_ELEMENTO   = :tipo
                        $strWhere
                    ";
            
            $objQuery->setParameter('empresaCod', $arrayParametros['empresa']);        
            $objQuery->setParameter('tipo',       $arrayParametros['tipo']);   
            $objQuery->setParameter('estado',     'Activo');        
            $objQuery->setParameter('anillo',     'ANILLO');   
            $objQuery->setParameter('prefijoRed', 'PREFIJO_RED');  
            
            $objQuery->setSQL($strSql);   
            
            return $objQuery;            
        } 
        catch (\Exception $ex) 
        {
            throw $ex;
        }       
    }
    
    /**
     * getResultadoDepartamentosTablets
     *
     * Esta función consulta los departamentos cuyos empleados tienen asignadas tablets
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 31-12-2016
     *
     * 
     * @param array $arrayParametros[
     *                                  "strTipoElemento":          tipo elemento TABLET
     *                                  "strEstadoActivo":          string con el estado Activo
     *                                  "strCodEmpresa":            id de la empresa
     *                                  "strNombreDepartamento":    nombre del departamento
     *                              ]
     *
     * @return json $jsonData
     *
     */
    public function getResultadoDepartamentosTablets($arrayParametros)
    {
        $arrayRespuesta['total']     = 0;
        $arrayRespuesta['resultado'] = array();
        try
        {
            
            
            $objRsm            = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery       = $this->_em->createNativeQuery(null, $objRsm);
            $objRsmCount       = new ResultSetMappingBuilder($this->_em);
            $objNtvQueryCount  = $this->_em->createNativeQuery(null, $objRsmCount);
            
            $strSelectCount = " SELECT COUNT(DISTINCT AD.ID_DEPARTAMENTO) AS TOTAL ";
            
            $strSelect      = " SELECT DISTINCT AD.ID_DEPARTAMENTO, AD.NOMBRE_DEPARTAMENTO ";
            
            $strFrom        = " FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO IE 
                                INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AME 
                                  ON AME.ID_MODELO_ELEMENTO = IE.MODELO_ELEMENTO_ID 
                                INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ATE
                                  ON ATE.ID_TIPO_ELEMENTO = AME.TIPO_ELEMENTO_ID 
                                INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE
                                  ON IDE.ELEMENTO_ID = IE.ID_ELEMENTO 
                                INNER JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL IPER
                                  ON IPER.ID_PERSONA_ROL = IDE.DETALLE_VALOR 
                                INNER JOIN DB_COMERCIAL.ADMI_DEPARTAMENTO AD
                                  ON AD.ID_DEPARTAMENTO = IPER.DEPARTAMENTO_ID ";
            
            $strWhere       = " WHERE IDE.ESTADO = :strEstadoActivo  
                                AND ATE.NOMBRE_TIPO_ELEMENTO = :strTipoElemento 
                                AND AD.EMPRESA_COD = :strCodEmpresa 
                                AND IDE.DETALLE_NOMBRE = :strNombreDetResponsable ";
            
            
            $strOrderBy     = " ORDER BY AD.NOMBRE_DEPARTAMENTO ASC ";
            
            $objRsm->addScalarResult('ID_DEPARTAMENTO', 'idDepartamento', 'integer');
            $objRsm->addScalarResult('NOMBRE_DEPARTAMENTO', 'nombreDepartamento', 'string');
            
            $objRsmCount->addScalarResult('TOTAL', 'total', 'integer');
            
            $objNtvQuery->setParameter('strTipoElemento', $arrayParametros['strTipoElemento']);
            $objNtvQueryCount->setParameter('strTipoElemento', $arrayParametros['strTipoElemento']);
            
            $objNtvQuery->setParameter('strEstadoActivo', $arrayParametros['strEstadoActivo']);
            $objNtvQueryCount->setParameter('strEstadoActivo', $arrayParametros['strEstadoActivo']);
            
            $objNtvQuery->setParameter('strCodEmpresa', $arrayParametros['strCodEmpresa']);
            $objNtvQueryCount->setParameter('strCodEmpresa', $arrayParametros['strCodEmpresa']);
            
            $objNtvQuery->setParameter('strNombreDetResponsable', $arrayParametros['strNombreDetResponsable']);
            $objNtvQueryCount->setParameter('strNombreDetResponsable', $arrayParametros['strNombreDetResponsable']);
            

            if(isset($arrayParametros['strNombreDepartamento']) && !empty($arrayParametros['strNombreDepartamento']))
            {
                $strWhere .= 'AND UPPER(AD.NOMBRE_DEPARTAMENTO) LIKE :strNombreDepartamento ';

                $objNtvQuery->setParameter('strNombreDepartamento', '%'.strtoupper(trim($arrayParametros['strNombreDepartamento'])).'%');
                $objNtvQueryCount->setParameter('strNombreDepartamento', '%'.strtoupper(trim($arrayParametros['strNombreDepartamento'])).'%');
            }
            $strQuerySql        = $strSelect . $strFrom. $strWhere .$strOrderBy;
            
            $objNtvQuery->setSQL($strQuerySql);
            $arrayResultado = $objNtvQuery->getResult();
            
            $strQuerySqlCount   = $strSelectCount . $strFrom .$strWhere .$strOrderBy;
            $objNtvQueryCount->setSQL($strQuerySqlCount);
            $intTotal           = $objNtvQueryCount->getSingleScalarResult();
            
            $arrayRespuesta["total"]        = $intTotal;
            $arrayRespuesta['resultado']    = $arrayResultado;
            
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }

        return $arrayRespuesta;
    }
    
    
    /**
     * getJSONDepartamentosTablets
     *
     * Esta función retorna el json con los departamentos cuyos empleados tienen asignadas tablets
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 31-12-2016
     *
     * 
     * @param array $arrayParametros[
     *                                  "strTipoElemento":          tipo elemento TABLET
     *                                  "strEstadoActivo":          string con el estado Activo
     *                                  "strCodEmpresa":            id de la empresa
     *                                  "strNombreDepartamento":    nombre del departamento
     *                              ]
     *
     * @return json $jsonData
     *
     */
    public function getJSONDepartamentosTablets($arrayParametros)
    {
        $arrayEncontrados = array();
        $arrayResultado     = $this->getResultadoDepartamentosTablets($arrayParametros);
        $arrayRegistros     = $arrayResultado['resultado'];
        $intTotal           = $arrayResultado['total'];
        
        if ($arrayRegistros) 
        {
            foreach ($arrayRegistros as $arrayDepartamento)
            {                   
                $arrayEncontrados[]=array(
                                            'id_departamento'       => $arrayDepartamento["idDepartamento"],
                                            'nombre_departamento'   => $arrayDepartamento["nombreDepartamento"],
                                            
                    
                                    );
            }
        }
        
        $arrayRespuesta = array('total' => $intTotal, 'encontrados' => $arrayEncontrados);
        $jsonData       = json_encode($arrayRespuesta);

        return $jsonData;
    }    
    
    /**
     * Metodo encargado de devolver el json con los elementos edificacion que sean de tipo pseudope
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 30-01-2017
     * 
     * @param Array  $arrayParametros [ strQuery    Nombre del elemento escrito por usuario ]
     * 
     * @return Object $objJsonData {'total' : total , 'resultado' : resultado}
     */
    public function getJsonResultadoEdificiosPseudoPe($arrayParametros)
    {
        $arrayResultado = $this->getArrayResultadoEdificiosPseudoPe($arrayParametros);        
        $objJsonData    = json_encode($arrayResultado);

        return $objJsonData;
    }
    
    /**
     * Metodo encargado de devolver el array con los elementos edificacion que sean de tipo pseudope
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 30-01-2017
     * 
     * Costo 13
     * 
     * @param Array  $arrayParametros [ strQuery    Nombre del elemento escrito por usuario ]
     * 
     * @return Array $arrayRespuesta [ total     Total de registros de la consulta
     *                                 resultado Array con los registros [ idElemento     id del elmento
     *                                                                     nombreElemento nombre del elemento pseudope
     *                                                                   ]
     *                               ]
     */
    public function getArrayResultadoEdificiosPseudoPe($arrayParametros)
    {
        $arrayRespuesta['total']     = 0;
        $arrayRespuesta['resultado'] = array();
        try
        {
            $strWhere          = '';
            $objRsm            = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery       = $this->_em->createNativeQuery(null, $objRsm);
            $objRsmCount       = new ResultSetMappingBuilder($this->_em);
            $objNtvQueryCount  = $this->_em->createNativeQuery(null, $objRsmCount);
            
            $strSelectCount = " SELECT COUNT(DISTINCT ELEMENTO.ID_ELEMENTO) AS TOTAL ";
            
            $strSelect      = " SELECT ELEMENTO.ID_ELEMENTO,
                                       ELEMENTO.NOMBRE_ELEMENTO ";
            
            $strFrom        = " FROM 
                                    DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO,
                                    DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MODELO,
                                    DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIPO,
                                    DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DETALLE_TER,
                                    DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DETALLE_ADM
                                  WHERE 
                                        ELEMENTO.MODELO_ELEMENTO_ID  = MODELO.ID_MODELO_ELEMENTO
                                  AND MODELO.TIPO_ELEMENTO_ID        = TIPO.ID_TIPO_ELEMENTO
                                  AND TIPO.DESCRIPCION_TIPO_ELEMENTO = :edificacion
                                  AND DETALLE_TER.ELEMENTO_ID        = ELEMENTO.ID_ELEMENTO
                                  AND DETALLE_TER.DETALLE_NOMBRE     = :detalleElementoRed
                                  AND DETALLE_TER.DETALLE_VALOR      = :detallePseudoPe
                                  AND DETALLE_ADM.ELEMENTO_ID        = ELEMENTO.ID_ELEMENTO
                                  AND DETALLE_ADM.DETALLE_NOMBRE     = :detalleAdministra
                                  AND DETALLE_ADM.DETALLE_VALOR      = :detalleCliente
                                  AND ELEMENTO.ESTADO                = :estado
                                  AND DETALLE_ADM.ESTADO             = :estado
                                  AND DETALLE_TER.ESTADO             = :estado ";
            
            $strGroupBy      = "GROUP BY ELEMENTO.ID_ELEMENTO, ELEMENTO.NOMBRE_ELEMENTO ";
            
            if(isset($arrayParametros['strQuery']) && $arrayParametros['strQuery']!='')
            {
                $strWhere    = ' AND UPPER(ELEMENTO.NOMBRE_ELEMENTO) like UPPER(:nombreElemento) ';
                $objNtvQuery->setParameter('nombreElemento', '%'.$arrayParametros['strQuery'].'%');
                $objNtvQueryCount->setParameter('nombreElemento', '%'.$arrayParametros['strQuery'].'%');
            }
            
            $objRsm->addScalarResult('ID_ELEMENTO', 'idElemento', 'integer');
            $objRsm->addScalarResult('NOMBRE_ELEMENTO', 'nombreElemento', 'string');
            
            $objRsmCount->addScalarResult('TOTAL', 'total', 'integer');

            $objNtvQuery->setParameter('edificacion', 'EDIFICACION');
            $objNtvQueryCount->setParameter('edificacion', 'EDIFICACION');
            
            $objNtvQuery->setParameter('detalleElementoRed', 'TIPO_ELEMENTO_RED');
            $objNtvQueryCount->setParameter('detalleElementoRed', 'TIPO_ELEMENTO_RED');
            
            $objNtvQuery->setParameter('detallePseudoPe', 'PSEUDO_PE');
            $objNtvQueryCount->setParameter('detallePseudoPe', 'PSEUDO_PE');
            
            $objNtvQuery->setParameter('detalleAdministra', 'ADMINISTRA');
            $objNtvQueryCount->setParameter('detalleAdministra', 'ADMINISTRA');
            
            $objNtvQuery->setParameter('detalleCliente', 'CLIENTE');
            $objNtvQueryCount->setParameter('detalleCliente', 'CLIENTE');
            
            $objNtvQuery->setParameter('estado', 'Activo');
            $objNtvQueryCount->setParameter('estado', 'Activo');
                        
            $strQuerySql        = $strSelect . $strFrom . $strWhere . $strGroupBy;
            
            $objNtvQuery->setSQL($strQuerySql);
            $arrayResultado = $objNtvQuery->getResult();
            
            $strQuerySqlCount   = $strSelectCount . $strFrom . $strWhere;
            
            $objNtvQueryCount->setSQL($strQuerySqlCount);
            $intTotal           = $objNtvQueryCount->getSingleScalarResult();
            
            $arrayRespuesta["total"]        = $intTotal;
            $arrayRespuesta['resultado']    = $arrayResultado;
            
        }
        catch(\Exception $e)
        {
            error_log($e->getMessage());
        }

        return $arrayRespuesta;
    }
      
    /**
    * Metodo encargado de devolver array con los elementos disponibles para asociar algun elemento
    * Costo: 1645
    * 
    * @author Sofía Fernández <sfernandez@telconet.ec>
    * @version 1.0
    * @since 07-03-2017
    * 
    * @param Array  $arrParametros['intTipoElementoid'] 
    *               $arrParametros['strEstado']         
    *               $arrParametros['intCantonId']
    *               $arrParametros['intEmpresaId']
    * 
    * @return Object $objJsonData {'total' : total , 'resultado' : resultado}
     */
    public function getArrayElementosRelacionPorTipoyCanton($arrayParametros)
    {
        $arrayRespuesta['total']     = 0;
        $arrayRespuesta['resultado'] = array();
       
        try
        {
            $strWhere          = '';
            $objRsm            = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery       = $this->_em->createNativeQuery(null, $objRsm);
            $objRsmCount       = new ResultSetMappingBuilder($this->_em);
            $objNtvQueryCount  = $this->_em->createNativeQuery(null, $objRsmCount);
            
            $strSelectCount = " SELECT COUNT(DISTINCT E.ID_ELEMENTO) AS TOTAL ";
            
            $strSelect      = " SELECT E.ID_ELEMENTO,
                                       E.NOMBRE_ELEMENTO,
                                       M.NOMBRE_MODELO_ELEMENTO, 
                                       E.ESTADO ";
            
            $strFrom        = " FROM 
                                    DB_INFRAESTRUCTURA.INFO_ELEMENTO E, 
                                    DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO M, 
                                    DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA EU,
                                    DB_INFRAESTRUCTURA. INFO_UBICACION U,
                                    DB_GENERAL.ADMI_PARROQUIA P,
                                    DB_GENERAL.ADMI_CANTON C";
            $strWhere       = " WHERE 
                                    E.MODELO_ELEMENTO_ID = M.ID_MODELO_ELEMENTO
                                    AND E.ESTADO = :strEstado
                                    AND E.ID_ELEMENTO = EU.ELEMENTO_ID
                                    AND EU.EMPRESA_COD = :intEmpresaId
                                    AND EU.UBICACION_ID = U.ID_UBICACION
                                    AND M.TIPO_ELEMENTO_ID = :intTipoElementoId
                                    AND M.ESTADO = :strEstado
                                    AND NOT EXISTS (SELECT 1 FROM INFO_RELACION_ELEMENTO R 
                                                    WHERE R.ELEMENTO_ID_B = E.ID_ELEMENTO AND R.ESTADO = :strEstado)
                                    AND U.PARROQUIA_ID = P.ID_PARROQUIA
                                    AND P.CANTON_ID = C.ID_CANTON
                                    AND C.ID_CANTON = :intCantonId ";
            
            $objNtvQuery->setParameter('strEstado', $arrayParametros['strEstado']);
            $objNtvQueryCount->setParameter('strEstado', $arrayParametros['strEstado']);
          
            $objNtvQuery->setParameter('intEmpresaId', $arrayParametros['intEmpresaId']);
            $objNtvQueryCount->setParameter('intEmpresaId', $arrayParametros['intEmpresaId']);
            
            $objNtvQuery->setParameter('intTipoElementoId', $arrayParametros['intTipoElementoId']);
            $objNtvQueryCount->setParameter('intTipoElementoId', $arrayParametros['intTipoElementoId']);
            
            $objNtvQuery->setParameter('intCantonId', $arrayParametros['intCantonId']);
            $objNtvQueryCount->setParameter('intCantonId', $arrayParametros['intCantonId']);
            
            $strQuerySql        = $strSelect . $strFrom . $strWhere;

            $objRsm->addScalarResult('ID_ELEMENTO',            'id_elemento',            'integer');
            $objRsm->addScalarResult('NOMBRE_ELEMENTO',        'nombre_elemento',        'string');
            $objRsm->addScalarResult('NOMBRE_MODELO_ELEMENTO', 'nombre_modelo_elemento', 'string');
            $objRsm->addScalarResult('ESTADO',                 'estado',                 'string');

            $objRsmCount->addScalarResult('TOTAL',      'total',           'integer');
            
            $objNtvQuery->setSQL($strQuerySql);
            $arrayResultado = $objNtvQuery->getResult();
                   
            $strQuerySqlCount   = $strSelectCount . $strFrom . $strWhere;
            
            $objNtvQueryCount->setSQL($strQuerySqlCount);
            $intTotal           = $objNtvQueryCount->getSingleScalarResult();
            
            $arrayRespuesta["total"]        = $intTotal;
            $arrayRespuesta['resultado']    = $arrayResultado;
            
        }
        catch(\Exception $ex)
        {
              error_log($ex->getMessage());
        }

        return $arrayRespuesta;
    }

    /**
     * getPuntoPorDetalleHipotesis
     *
     * Obtiene el elemento en base a un servicio donde el tipo_medio sea Fibra Optica.
     *
     * @author Walther Joao Gaibor C <wgaibor@telconet.ec>
     * @version 1.0 22-05-2017
     *
     * costoQuery: 8
     * @param  array $arrayParametros [
     *                                  "intServicioId"        : Id del Servicio,
     *                                  "strTipoMedio"         : Tipo de Medio
     *                                ]
     *
     * @return $arrayInfoElemento
     */
    public function getInfoElementoPorServicioTecnico($arrayParametros)
    {
        $arrayInfoElemento = null;

        try
        {
            if( isset($arrayParametros['intServicioId']) )
            {
                $objQuery  = $this->_em->createQuery();
                $strSelect = "SELECT ELEMENTO ";
                $strFrom   = "FROM schemaBundle:InfoElemento ELEMENTO ";
                $strWhere  = "WHERE ELEMENTO.id IN (SELECT SERVICIOTECNICO.elementoContenedorId ".
                                                   "FROM schemaBundle:InfoServicioTecnico SERVICIOTECNICO, ".
                                                   " schemaBundle:AdmiTipoMedio TIPOMEDIO ".
                                                   "WHERE SERVICIOTECNICO.servicioId = :intServicioId ".
                                                   "AND   SERVICIOTECNICO.ultimaMillaId = TIPOMEDIO.id ".
                                                   "AND   TIPOMEDIO.codigoTipoMedio = :strTipoMedio".
                                                    ")";

                $objQuery->setParameter('intServicioId', $arrayParametros['intServicioId']);
                $objQuery->setParameter('strTipoMedio',  $arrayParametros['strTipoMedio']);

                $strSql = $strSelect.$strFrom.$strWhere;
                $objQuery->setDQL($strSql);

                $arrayInfoElemento = $objQuery->getResult();
            }
        }
        catch(\Exception $e)
        {
            error_log("Problemas al recuperar la información de la función InfoElementoRepository:getInfoElementoPorServicioTecnico ".
                      $e->getMessage());
        }
        return $arrayInfoElemento;
    }
    
    /**
     * Metodo encargado de devolver el json con los elementos segun el tipo y detalle requerido
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 24-05-2017
     * 
     * @param  Array $arrayParametros [
     *                                  strEstado            Estado del detalle
     *                                  strDetalleValor      Valor de detalle del elemento a ser consultado
     *                                  strDetalleNombre     Nombre del detalle del elemento a consultar
     *                                  strTipoElemento      Tipo del elemento
     *                                ]
     * @return $objJsonData
     */
    public function getJsonElementosByDetalleYTipo($arrayParametros)
    {
        $arrayResultado = $this->getArrayElementosByDetalleYTipo($arrayParametros);        
        $objJsonData    = json_encode($arrayResultado);

        return $objJsonData;
    }
    
    /**
     * Metodo encargado de devolver el array con los elementos segun el tipo y detalle requerido, usable en escenarios
     * donde existen elementos virtuales
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 24-05-2017
     * 
     * @param  Array $arrayParametros [
     *                                  strEstado            Estado del detalle
     *                                  strDetalleValor      Valor de detalle del elemento a ser consultado
     *                                  strDetalleNombre     Nombre del detalle del elemento a consultar
     *                                  strTipoElemento      Tipo del elemento
     *                                ]
     * @return Array $arrayRespuesta [ total         total de registros
     *                                 encontrados   Registros resultantes
     *                               ]
     */
    public function getArrayElementosByDetalleYTipo($arrayParametros)
    {
        $arrayRespuesta['total']       = 0;
        $arrayRespuesta['encontrados'] = array();
        
        try
        {
            $objRsm            = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery       = $this->_em->createNativeQuery(null, $objRsm);
            $objRsmCount       = new ResultSetMappingBuilder($this->_em);
            $objNtvQueryCount  = $this->_em->createNativeQuery(null, $objRsmCount);
            
            $strSelectCount = " SELECT COUNT(DISTINCT ELEMENTO.ID_ELEMENTO) AS TOTAL ";
            
            $strSelect      = " SELECT ELEMENTO.ID_ELEMENTO,
                                       ELEMENTO.NOMBRE_ELEMENTO,                                       
                                       ELEMENTO.ESTADO ";
            
            $strFrom        = " FROM 
                                    DB_INFRAESTRUCTURA.INFO_ELEMENTO         ELEMENTO,
                                    DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO  MODELO,
                                    DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO    TIPO,
                                    DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DETALLE";
            $strWhere       = " WHERE 
                                    ELEMENTO.MODELO_ELEMENTO_ID       = MODELO.ID_MODELO_ELEMENTO
                                    AND MODELO.TIPO_ELEMENTO_ID       = TIPO.ID_TIPO_ELEMENTO
                                    AND TIPO.NOMBRE_TIPO_ELEMENTO     = :tipoElemento
                                    AND ELEMENTO.ID_ELEMENTO          = DETALLE.ELEMENTO_ID
                                    AND DETALLE.DETALLE_NOMBRE        = :detalleNombre
                                    AND DETALLE.DETALLE_VALOR         = :detalleValor
                                    AND DETALLE.ESTADO                = :estado
                                    AND ELEMENTO.ESTADO               = :estado ";
            
            $objNtvQuery->setParameter('estado', $arrayParametros['strEstado']);
            $objNtvQueryCount->setParameter('estado', $arrayParametros['strEstado']);
          
            $objNtvQuery->setParameter('detalleValor', $arrayParametros['strDetalleValor']);
            $objNtvQueryCount->setParameter('detalleValor', $arrayParametros['strDetalleValor']);
            
            $objNtvQuery->setParameter('detalleNombre', $arrayParametros['strDetalleNombre']);
            $objNtvQueryCount->setParameter('detalleNombre', $arrayParametros['strDetalleNombre']);
            
            $objNtvQuery->setParameter('tipoElemento', $arrayParametros['strTipoElemento']);
            $objNtvQueryCount->setParameter('tipoElemento', $arrayParametros['strTipoElemento']);
            
            if(!empty($arrayParametros['strNombreElemento']) && isset($arrayParametros['strNombreElemento']))
            {
                $strWhere .= " AND ELEMENTO.NOMBRE_ELEMENTO LIKE (:nombre)";
                $objNtvQuery->setParameter('nombre','%'. $arrayParametros['strNombreElemento'].'%');
                $objNtvQueryCount->setParameter('nombre','%'. $arrayParametros['strNombreElemento'].'%');
            }
            
            $strQuerySql        = $strSelect . $strFrom . $strWhere;

            $objRsm->addScalarResult('ID_ELEMENTO',            'idElemento',            'integer');
            $objRsm->addScalarResult('NOMBRE_ELEMENTO',        'nombreElemento',        'string');           
            $objRsm->addScalarResult('ESTADO',                 'estado',                'string');

            $objRsmCount->addScalarResult('TOTAL',      'total',           'integer');
            
            $objNtvQuery->setSQL($strQuerySql);
            $arrayResultado = $objNtvQuery->getResult();
                   
            $strQuerySqlCount   = $strSelectCount . $strFrom . $strWhere;
            
            $objNtvQueryCount->setSQL($strQuerySqlCount);
            $intTotal           = $objNtvQueryCount->getSingleScalarResult();
            
            $arrayRespuesta["total"]          = $intTotal;
            $arrayRespuesta['encontrados']    = $arrayResultado;
        } 
        catch (\Exception $ex) 
        {
            error_log($ex->getMessage());
        }
        
        return $arrayRespuesta;
    }
    
    /**
     * Metodo encargado de devolver el array con los elementos segun el tipo y detalle requerido, usable en escenarios
     * donde existen elementos virtuales
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 24-05-2017
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 12-09-2017  se valida que el detalle valor contenga informacion
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.1 25-05-2021  Se reemplaza el detalle_valor por el nombre_tipo_elemento
     * 
     * @param  Array $arrayParametros [
     *                                  strEstado            Estado del detalle
     *                                  strDetalleValor      Valor de detalle del elemento a ser consultado
     *                                  strDetalleNombre     Nombre del detalle del elemento a consultar
     *                                  strTipoElemento      Tipo del elemento
     *                                ]
     * @return Array $arrayRespuesta [ total         total de registros
     *                                 encontrados   Registros resultantes
     *                               ]
     */
    public function getArrayElementosByDetalleParam($arrayParametros)
    {
        $arrayRespuesta['total']       = 0;
        $arrayRespuesta['encontrados'] = array();
        
        try
        {
            $objRsm            = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery       = $this->_em->createNativeQuery(null, $objRsm);
            
            $strSelect      = " SELECT ELEMENTO.ID_ELEMENTO,
                                       ELEMENTO.NOMBRE_ELEMENTO,
                                       ELEMENTO.DESCRIPCION_ELEMENTO,
                                       MODELO.ID_MODELO_ELEMENTO,
                                       MODELO.NOMBRE_MODELO_ELEMENTO,
                                       TIPO.NOMBRE_TIPO_ELEMENTO,
                                       TIPO.ID_TIPO_ELEMENTO,
                                       ELEMENTO.ESTADO ";
            
            $strFrom        = " FROM 
                                    DB_INFRAESTRUCTURA.INFO_ELEMENTO         ELEMENTO,
                                    DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO  MODELO,
                                    DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO    TIPO,
                                    DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DETALLE";
            $strWhere       = " WHERE 
                                    ELEMENTO.MODELO_ELEMENTO_ID       = MODELO.ID_MODELO_ELEMENTO
                                    AND MODELO.TIPO_ELEMENTO_ID       = TIPO.ID_TIPO_ELEMENTO
                                    AND TIPO.NOMBRE_TIPO_ELEMENTO     = :tipoElemento
                                    AND ELEMENTO.ID_ELEMENTO          = DETALLE.ELEMENTO_ID
                                    AND DETALLE.DETALLE_NOMBRE        = :detalleNombre                                    
                                     ";
            
            
            $objNtvQuery->setParameter('detalleNombre', $arrayParametros['strDetalleNombre']);            
            $objNtvQuery->setParameter('tipoElemento', $arrayParametros['strTipoElemento']);
            
            if($arrayParametros['strEstado'] != '')
            {          
                $strWhere .= " AND ELEMENTO.ESTADO               = :estado ";     
                $strWhere .= " AND DETALLE.ESTADO                = :estado ";
                $objNtvQuery->setParameter('estado', $arrayParametros['strEstado']);
            }
            /*else
            {
                $strWhere .= " AND ELEMENTO.ESTADO               =  DETALLE.ESTADO  ";     
            }//*/
            
            if($arrayParametros['intElemento'] != '')
            {          
                $strWhere .= " AND ELEMENTO.ID_ELEMENTO         = :idElemento ";                
                $objNtvQuery->setParameter('idElemento', $arrayParametros['intElemento']);
            }            
            
            if($arrayParametros['strDetalleValor'] != '')
            {          
                $strWhere .= " AND DETALLE.DETALLE_VALOR         = :detalleValor ";                
                $objNtvQuery->setParameter('detalleValor', $arrayParametros['strDetalleValor']);
            }
            
            if(!empty($arrayParametros['strNombreElemento']) && isset($arrayParametros['strNombreElemento']))
            {
                $strWhere .= " AND upper(ELEMENTO.NOMBRE_ELEMENTO) LIKE (:nombre)";
                $objNtvQuery->setParameter('nombre','%'. strtoupper($arrayParametros['strNombreElemento']) .'%');
            }
            
            if(!empty($arrayParametros['intModeloElemento']) && isset($arrayParametros['intModeloElemento']))
            {
                $strWhere .= " AND MODELO.ID_MODELO_ELEMENTO = :modelo ";
                $objNtvQuery->setParameter('modelo', $arrayParametros['intModeloElemento']);
            }   
            
            $strQuerySql        = $strSelect . $strFrom . $strWhere;

            $objRsm->addScalarResult('ID_ELEMENTO',             'idElemento',          'integer');
            $objRsm->addScalarResult('NOMBRE_ELEMENTO',         'nombreElemento',      'string');              
            $objRsm->addScalarResult('DESCRIPCION_ELEMENTO',    'descripcionElemento', 'string');   
            $objRsm->addScalarResult('ID_MODELO_ELEMENTO',      'idModelo',            'string');
            $objRsm->addScalarResult('NOMBRE_MODELO_ELEMENTO',  'nombreModelo',        'string');           
            $objRsm->addScalarResult('NOMBRE_TIPO_ELEMENTO',    'detalleValor',        'string'); 
            $objRsm->addScalarResult('ID_TIPO_ELEMENTO',        'idTipoElemento',      'string');
            $objRsm->addScalarResult('ESTADO',                  'estado',              'string');

            $objNtvQuery->setSQL($strQuerySql);
            
            $arrayResultado = $objNtvQuery->getResult();
            $intTotal = count($arrayResultado);
            
            $intLimit = $arrayParametros['START'] + $arrayParametros['LIMIT'];
            
            $arrayResultado = array_slice($arrayResultado, $arrayParametros['START'], $intLimit);
           
            $arrayRespuesta["total"]          = $intTotal;
            $arrayRespuesta['encontrados']    = $arrayResultado;
        } 
        catch (\Exception $ex) 
        {
            error_log($ex->getMessage());
        }
        
        return $arrayRespuesta;
    }    
    
    /**
     * Metodo encargado de devolver el array con los elementos segun el tipo y detalle requerido, usable en escenarios
     * donde existen elementos virtuales
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 24-05-2017
     * 
     * @author Ricardo Coello Quezada <rcoello@telconet.ec>
     * @version 1.1 15-11-2017  Se agrega parametro idCanton al array con el objetivo de llegar al canton del elemento y empresa en sesion
     *                          con el objetivo de retornar la data de acuerdo a la ubicacion del usuario.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 05-04-2018  Se agrega la consulta de elementos a nivel de región del usuario en sesión y si la consulta es de elementos
     *                          se agrega el filtro de intCantonId como id del cantón del elemento de tipo NODO
     * 
     * 
     * @param  Array $arrayParametros [
     *                                  strEstado            Estado del detalle
     *                                  strDetalleValor      Valor de detalle del elemento a ser consultado
     *                                  strDetalleNombre     Nombre del detalle del elemento a consultar
     *                                  strTipoElemento      Tipo del elemento
     *                                  intCantonId          Id del Canton
     *                                ]
     * @return Array $arrayRespuesta [ total         total de registros
     *                                 encontrados   Registros resultantes
     *                               ]
     */
    public function getArrayElementosPorTipo($arrayParametros)
    {
        $arrayRespuesta['encontrados'] = array();
        
        try
        {
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery    = $this->_em->createNativeQuery(null, $objRsm);

            $strSelect      = " SELECT ELEMENTO.NOMBRE_ELEMENTO, MODELO.NOMBRE_MODELO_ELEMENTO, ELEMENTO.ID_ELEMENTO, 
                                CANTON.ID_CANTON ";
            
            $strFrom        = " FROM 
                                    DB_INFRAESTRUCTURA.INFO_ELEMENTO         ELEMENTO,
                                    DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO  MODELO,
                                    DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO    TIPO ,
                                    DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA ELEMENTO_UBICA,
                                    DB_INFRAESTRUCTURA.INFO_UBICACION              UBICACION,
                                    DB_GENERAL.ADMI_PARROQUIA                      PARROQUIA,
                                    DB_GENERAL.ADMI_CANTON                         CANTON ";
            $strWhere       = " WHERE 
                                    ELEMENTO.MODELO_ELEMENTO_ID       = MODELO.ID_MODELO_ELEMENTO
                                    AND MODELO.TIPO_ELEMENTO_ID       = TIPO.ID_TIPO_ELEMENTO
                                    AND ELEMENTO.ID_ELEMENTO          = ELEMENTO_UBICA.ELEMENTO_ID 
                                    AND UBICACION.ID_UBICACION        = ELEMENTO_UBICA.UBICACION_ID
                                    AND PARROQUIA.ID_PARROQUIA        = UBICACION.PARROQUIA_ID 
                                    AND PARROQUIA.CANTON_ID           = CANTON.ID_CANTON 
                                    AND TIPO.NOMBRE_TIPO_ELEMENTO     = :tipoElemento
                                    AND ELEMENTO.ESTADO               = :estado ";
            
            if(!empty($arrayParametros['strEmpresaCod']) && isset($arrayParametros['strEmpresaCod']))
            {
                $strWhere .= "AND ELEMENTO_UBICA.EMPRESA_COD = :strEmpresaCod ";
                $objNtvQuery->setParameter('strEmpresaCod', $arrayParametros['strEmpresaCod']);
            }
            
            if(!empty($arrayParametros['intIdCantonElemento']) && isset($arrayParametros['intIdCantonElemento']))
            {
                $strWhere .= "AND CANTON.ID_CANTON = :intIdCantonElemento ";
                $objNtvQuery->setParameter('intIdCantonElemento', $arrayParametros['intIdCantonElemento']);
            }
            
            if(!empty($arrayParametros['arrayIdsCantonElemento']) && isset($arrayParametros['arrayIdsCantonElemento']))
            {
                $strWhere .= "AND CANTON.ID_CANTON IN (:arrayIdsCantonElemento) ";
                $objNtvQuery->setParameter('arrayIdsCantonElemento', array_values($arrayParametros['arrayIdsCantonElemento']));
            }

            if(!empty($arrayParametros['strRegion']) && isset($arrayParametros['strRegion']))
            {
                $strWhere .= "AND CANTON.REGION = :strRegion ";
                $objNtvQuery->setParameter('strRegion', $arrayParametros['strRegion']);
            }
            
            if($arrayParametros['unicoPorRuta'] == 'OK')
            {
                $strWhere.= "AND NOT EXISTS
                                      (SELECT ID_TRAMO
                                      FROM INFO_TRAMO
                                      WHERE (ELEMENTO_B_ID = ELEMENTO.ID_ELEMENTO
                                      OR ELEMENTO_A_ID    = ELEMENTO.ID_ELEMENTO)
                                      AND estado          = :estado ) ";
            }
            
            $objNtvQuery->setParameter('estado', $arrayParametros['strEstado']);
          
            $objNtvQuery->setParameter('tipoElemento', $arrayParametros['strTipoElemento']);
            
            if(!empty($arrayParametros['strNombreElemento']) && isset($arrayParametros['strNombreElemento']))
            {
                $strWhere .= " AND UPPER(ELEMENTO.NOMBRE_ELEMENTO) LIKE (:nombre) ";
                $objNtvQuery->setParameter('nombre','%'. strtoupper($arrayParametros['strNombreElemento']) .'%');
            }
            
            $strQuerySql        = $strSelect . $strFrom . $strWhere;

            $objRsm->addScalarResult('ID_ELEMENTO',             'id',       'string');
            $objRsm->addScalarResult('NOMBRE_ELEMENTO',         'nombre',   'string');
            $objRsm->addScalarResult('NOMBRE_MODELO_ELEMENTO',  'modelo',   'string');
            $objRsm->addScalarResult('ID_CANTON',               'idCanton', 'string');
            
            $objNtvQuery->setSQL($strQuerySql);
            $arrayResultado = $objNtvQuery->getResult();

            $arrayRespuesta['encontrados']    = $arrayResultado;
        } 
        catch (\Exception $ex) 
        {
            error_log($ex->getMessage());
        }
        
        return $arrayRespuesta;
    }  
    
    
    
    /**
     * 
     * Obtiene los tramos segun la ruta
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 24-05-2017
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 06-04-2018 Se obtiene en la consulta los ids de los cantones de los elementos A y B
     *                         Costo = 18
     * 
     * @param  Array $arrayParametros [
     *                                  strEstado            Estado del detalle
     *                                  strDetalleValor      Valor de detalle del elemento a ser consultado
     *                                  strDetalleNombre     Nombre del detalle del elemento a consultar
     *                                  strTipoElemento      Tipo del elemento
     *                                ]
     * @return Array $arrayRespuesta [ total         total de registros
     *                                 encontrados   Registros resultantes
     *                               ]
     */
    
    public function getTramosPorRutas($arrayParametros)
    {
        $arrayRespuesta['encontrados'] = array();
        
        try
        {
            $objRsm            = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery       = $this->_em->createNativeQuery(null, $objRsm);
           
           $strQuerySql      = "   SELECT RE.ID_TRAMO,
                                    RE.USR_CREACION,
                                    RE.FE_CREACION, 
                                    RE.NOMBRE_TRAMO,
                                    RE.ELEMENTO_A_ID,
                                    RE.ELEMENTO_A_ID,   
                                    (SELECT nombre_clase_tipo_medio
                                       FROM ADMI_CLASE_TIPO_MEDIO
                                      WHERE ID_CLASE_TIPO_MEDIO = (SELECT de.VALOR_DETALLE
                                                                     FROM info_detalle_TRAMO de
                                                                    WHERE de.NOMBRE_DETALLE = :detalleMedio
                                                                      AND de.tramo_id       = RE.id_tramo)) CLASE_TIPO_MEDIO,

                                    (SELECT de.VALOR_DETALLE
                                    FROM info_detalle_TRAMO de
                                    WHERE de.NOMBRE_DETALLE = :detalleMedio
                                    AND de.estado           = :estado                                    
                                    AND de.tramo_id         = RE.id_tramo) ID_CLASE_TIPO_MEDIO,
                                    (SELECT de.VALOR_DETALLE
                                    FROM info_detalle_TRAMO de
                                    WHERE de.NOMBRE_DETALLE = :detalleLugar
                                    AND de.estado           = :estado
                                    AND de.tramo_id         = RE.id_tramo) TIPO_LUGAR,                                    
                                    E1.NOMBRE_ELEMENTO NOMBRE_ELEMENTO_A,
                                    (SELECT CANTON.ID_CANTON 
                                     FROM INFO_EMPRESA_ELEMENTO_UBICA ELEMENTO_UBICA, 
                                          INFO_UBICACION UBICACION,
                                          DB_GENERAL.ADMI_PARROQUIA PARROQUIA,
                                          DB_GENERAL.ADMI_CANTON CANTON
                                     WHERE E1.ID_ELEMENTO = ELEMENTO_UBICA.ELEMENTO_ID 
                                     AND UBICACION.ID_UBICACION = ELEMENTO_UBICA.UBICACION_ID
                                     AND PARROQUIA.ID_PARROQUIA = UBICACION.PARROQUIA_ID 
                                     AND PARROQUIA.CANTON_ID    = CANTON.ID_CANTON 
                                     AND ELEMENTO_UBICA.EMPRESA_COD = :strCodEmpresa
                                     AND ROWNUM < 2
                                    ) ID_CANTON_ELEMENTO_A,
                                    (SELECT TE.NOMBRE_TIPO_ELEMENTO 
                                     FROM ADMI_TIPO_ELEMENTO TE, ADMI_MODELO_ELEMENTO ME 
                                     WHERE ME.ID_MODELO_ELEMENTO = E1.MODELO_ELEMENTO_ID 
                                     AND TE.ID_TIPO_ELEMENTO = ME.TIPO_ELEMENTO_ID ) TIPO_ELEMENTO_A,
                                    RE.ELEMENTO_B_ID,
                                    E2.NOMBRE_ELEMENTO NOMBRE_ELEMENTO_B,
                                    (SELECT CANTON.ID_CANTON 
                                     FROM INFO_EMPRESA_ELEMENTO_UBICA ELEMENTO_UBICA, 
                                          INFO_UBICACION UBICACION,
                                          DB_GENERAL.ADMI_PARROQUIA PARROQUIA,
                                          DB_GENERAL.ADMI_CANTON CANTON
                                     WHERE E2.ID_ELEMENTO = ELEMENTO_UBICA.ELEMENTO_ID 
                                     AND UBICACION.ID_UBICACION = ELEMENTO_UBICA.UBICACION_ID
                                     AND PARROQUIA.ID_PARROQUIA = UBICACION.PARROQUIA_ID 
                                     AND PARROQUIA.CANTON_ID    = CANTON.ID_CANTON 
                                     AND ELEMENTO_UBICA.EMPRESA_COD = :strCodEmpresa 
                                     AND ROWNUM < 2
                                    ) ID_CANTON_ELEMENTO_B,
                                    (SELECT TE.NOMBRE_TIPO_ELEMENTO 
                                     FROM ADMI_TIPO_ELEMENTO TE, ADMI_MODELO_ELEMENTO ME 
                                     WHERE ME.ID_MODELO_ELEMENTO = E2.MODELO_ELEMENTO_ID 
                                     AND TE.ID_TIPO_ELEMENTO = ME.TIPO_ELEMENTO_ID ) TIPO_ELEMENTO_B,
                                    LEVEL
                                  FROM (SELECT * FROM INFO_TRAMO WHERE RUTA_ID = :idElemento AND ESTADO = 'Activo') RE,
                                  INFO_ELEMENTO E1,
                                  INFO_ELEMENTO E2
                                  WHERE RE.ESTADO = :estado   
                                  AND E1.ID_ELEMENTO  = RE.ELEMENTO_A_ID
                                  AND E2.ID_ELEMENTO  = RE.ELEMENTO_B_ID
                                    START WITH RE.ELEMENTO_A_ID = :intElementoInicial
                                    CONNECT BY NOCYCLE RE.ELEMENTO_A_ID = PRIOR RE.ELEMENTO_B_ID                     
                                  ORDER BY LEVEL ";
           
            $objNtvQuery->setParameter('strCodEmpresa', $arrayParametros['strCodEmpresa']);
            $objNtvQuery->setParameter('estado', $arrayParametros['strEstado']);
            $objNtvQuery->setParameter('tipoRelacion', $arrayParametros['strTipoRelacion']);       
            $objNtvQuery->setParameter('idElemento', $arrayParametros['intElemento']);
            $objNtvQuery->setParameter('intElementoInicial', $arrayParametros['intElementoInicial']);
            $objNtvQuery->setParameter('detalleMedio', 'CLASE_TIPO_MEDIO');
            $objNtvQuery->setParameter('detalleLugar', 'TIPO LUGAR');
            
            $objRsm->addScalarResult('ID_TRAMO',             'idRelacion',          'string');
            $objRsm->addScalarResult('USR_CREACION',         'usrCreacion',         'string');
            $objRsm->addScalarResult('FE_CREACION',          'feCreacion',          'string');
            $objRsm->addScalarResult('NOMBRE_TRAMO',         'nombreTramo',         'string');
            $objRsm->addScalarResult('ELEMENTO_A_ID',        'idElementoA',         'string');
            $objRsm->addScalarResult('NOMBRE_ELEMENTO_A',    'nombreElementoA',     'string');
            $objRsm->addScalarResult('ID_CANTON_ELEMENTO_A', 'idCantonElementoA',   'integer');
            $objRsm->addScalarResult('TIPO_ELEMENTO_A',      'tipoElementoA',       'string'); 
            $objRsm->addScalarResult('ELEMENTO_B_ID',        'idElementoB',         'string');
            $objRsm->addScalarResult('NOMBRE_ELEMENTO_B',    'nombreElementoB',     'string'); 
            $objRsm->addScalarResult('ID_CANTON_ELEMENTO_B', 'idCantonElementoB',   'integer');
            $objRsm->addScalarResult('TIPO_ELEMENTO_B',      'tipoElementoB',       'string'); 
            $objRsm->addScalarResult('LEVEL',                'level',               'string'); 
            $objRsm->addScalarResult('CLASE_TIPO_MEDIO',     'claseTipoMedio',      'string');            
            $objRsm->addScalarResult('ID_CLASE_TIPO_MEDIO', 'idClaseTipoMedio',     'string');
            $objRsm->addScalarResult('TIPO_LUGAR',           'tipoLugar',           'string');
            
            $objNtvQuery->setSQL($strQuerySql);
            $arrayResultado = $objNtvQuery->getResult();

            $arrayRespuesta['encontrados'] = $arrayResultado;
            $arrayRespuesta['total']       = count($arrayResultado);            
        } 
        catch (\Exception $ex) 
        {
            error_log($ex->getMessage());
        }
        
        return $arrayRespuesta;
    }    
    
    /**
     * Metodo encargado de devolver la informacion de espacio de un elemento en caso de existir relacionado a Nodo, Rack y Unidad de Rack
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 25-05-2017
     * 
     * @param  Array $arrayParametros [ strNombreElemento , strTipoElemento]
     * @return Array $arrayResultado
     * @throws $ex
     */
    public function getInformacionFisicaElemento($arrayParametros)
    {       
        $arrayResultado = array();
        
        try
        {
            $objRsm            = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery       = $this->_em->createNativeQuery(null, $objRsm);
                        
            $strSql   = " SELECT 
                            E.ID_ELEMENTO,
                            RACK.ID_ELEMENTO        ID_UDRACK,
                            RACK.NOMBRE_ELEMENTO    NOMBRE_UDRACK,
                            RACKERA.ID_ELEMENTO     ID_RACK,
                            RACKERA.NOMBRE_ELEMENTO NOMBRE_RACK,
                            NODO.ID_ELEMENTO        ID_NODO,
                            NODO.NOMBRE_ELEMENTO    NOMBRE_NODO
                          FROM 
                            DB_INFRAESTRUCTURA.INFO_ELEMENTO          E,
                            DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO R,
                            DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO   M,
                            DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO     T,
                            DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO RRACK,
                            DB_INFRAESTRUCTURA.INFO_ELEMENTO          RACK,
                            DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO   MRACK,
                            DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO     TRACK,
                            DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO RNODO,
                            DB_INFRAESTRUCTURA.INFO_ELEMENTO          RACKERA,
                            DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO   MRACKERA,
                            DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO     TRACKERA,
                            DB_INFRAESTRUCTURA.INFO_ELEMENTO          NODO,
                            DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO   MNODO,
                            DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO     TNODO
                          WHERE E.ID_ELEMENTO               = R.ELEMENTO_ID_B
                          AND E.MODELO_ELEMENTO_ID          = M.ID_MODELO_ELEMENTO
                          AND M.TIPO_ELEMENTO_ID            = T.ID_TIPO_ELEMENTO
                          AND T.NOMBRE_TIPO_ELEMENTO        = :tipoElemento
                          AND R.OBSERVACION                 = :observacion
                          AND R.ELEMENTO_ID_A               = RACK.ID_ELEMENTO
                          AND RACK.MODELO_ELEMENTO_ID       = MRACK.ID_MODELO_ELEMENTO
                          AND MRACK.TIPO_ELEMENTO_ID        = TRACK.ID_TIPO_ELEMENTO
                          AND TRACK.NOMBRE_TIPO_ELEMENTO    = :tipoUdRack
                          AND RRACK.ELEMENTO_ID_B           = RACK.ID_ELEMENTO
                          AND RRACK.ELEMENTO_ID_A           = RACKERA.ID_ELEMENTO
                          AND RACKERA.MODELO_ELEMENTO_ID    = MRACKERA.ID_MODELO_ELEMENTO
                          AND MRACKERA.TIPO_ELEMENTO_ID     = TRACKERA.ID_TIPO_ELEMENTO
                          AND TRACKERA.NOMBRE_TIPO_ELEMENTO = :tipoRack
                          AND RNODO.ELEMENTO_ID_B           = RACKERA.ID_ELEMENTO
                          AND RNODO.ELEMENTO_ID_A           = NODO.ID_ELEMENTO
                          AND NODO.MODELO_ELEMENTO_ID       = MNODO.ID_MODELO_ELEMENTO
                          AND MNODO.TIPO_ELEMENTO_ID        = TNODO.ID_TIPO_ELEMENTO
                          AND TNODO.NOMBRE_TIPO_ELEMENTO    = :tipoNodo
                          AND RACK.ESTADO                   = :estado
                          AND RACKERA.ESTADO                = :estado
                          AND TNODO.ESTADO                  = :estado
                          AND R.ESTADO                      = :estado
                          AND RRACK.ESTADO                  = :estado
                          AND RNODO.ESTADO                  = :estado
                          AND E.NOMBRE_ELEMENTO             = :nombreElemento";
                        
            $objNtvQuery->setParameter('estado',       'Activo');           
            $objNtvQuery->setParameter('nombreElemento', $arrayParametros['strNombreElemento']);            
            $objNtvQuery->setParameter('tipoNodo',     'NODO');            
            $objNtvQuery->setParameter('tipoRack',     'RACK');            
            $objNtvQuery->setParameter('tipoUdRack',   'UDRACK');            
            $objNtvQuery->setParameter('tipoElemento', $arrayParametros['strTipoElemento']);            
            $objNtvQuery->setParameter('observacion',  'Rack contiene Router');
                                   
            $objRsm->addScalarResult('ID_UDRACK',        'idUdRack',              'integer');           
            $objRsm->addScalarResult('NOMBRE_UDRACK',    'nombreUdRack',          'string');
            $objRsm->addScalarResult('ID_RACK',          'idRack',                'integer');
            $objRsm->addScalarResult('NOMBRE_RACK',      'nombreRack',            'string');           
            $objRsm->addScalarResult('ID_NODO',          'idNodo',                'integer');
            $objRsm->addScalarResult('NOMBRE_NODO',      'nombreNodo',            'string');
            
            $objNtvQuery->setSQL($strSql);
            $arrayResultado = $objNtvQuery->getOneOrNullResult();
        } 
        catch (\Exception $ex) 
        {
            throw ($ex);
        }
        
        return $arrayResultado;
    }
    
    /**
     * Metodo encargado de devolver la informacion de los elementos HUB SATELITAL que mantengan informacion de interfaces aun
     * disponibles para uso de la factibilidad automatica para VSAT
     * 
     * costo 314
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 08-06-2017
     * 
     * @return Array $arrayResultado     
     */
    public function getArrayElementosHubDisponibles()
    {
        $objRsm            = new ResultSetMappingBuilder($this->_em);
        $objNtvQuery       = $this->_em->createNativeQuery(null, $objRsm);

        $strSql   = " SELECT * FROM (
                        SELECT 
                          E.ID_ELEMENTO,
                          E.NOMBRE_ELEMENTO,
                          (SELECT COUNT(*)
                          FROM DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO
                          WHERE ELEMENTO_ID = E.ID_ELEMENTO
                          AND ESTADO        = :estadoInterface
                          ) DISPONIBLES
                        FROM 
                          DB_INFRAESTRUCTURA.INFO_ELEMENTO E,
                          DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO M,
                          DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO T
                        WHERE  E.MODELO_ELEMENTO_ID   = M.ID_MODELO_ELEMENTO
                        AND M.TIPO_ELEMENTO_ID        = T.ID_TIPO_ELEMENTO
                        AND T.NOMBRE_TIPO_ELEMENTO    = :tipo
                        AND E.ESTADO = :estado 
                        AND M.ESTADO = :estado 
                        AND T.ESTADO = :estado 
                        ORDER BY DISPONIBLES ASC) T WHERE T.DISPONIBLES > 0";

        $objNtvQuery->setParameter('estado',          'Activo');           
        $objNtvQuery->setParameter('tipo',            'HUB SATELITAL');            
        $objNtvQuery->setParameter('estadoInterface', 'not connect');                        

        $objRsm->addScalarResult('ID_ELEMENTO',     'idElemento',              'integer');           
        $objRsm->addScalarResult('NOMBRE_ELEMENTO', 'nombreElemento',          'string');
        $objRsm->addScalarResult('DISPONIBLES',     'disponibles',             'integer');

        $objNtvQuery->setSQL($strSql);
        $arrayResultado = $objNtvQuery->getResult();
        
        return $arrayResultado;
    }
    
    /**
     * 
     * Metodo que devuelve el total de ancho de banda consumido o utilizado por equipo Backbone
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 12-06-2017
     * 
     * @param integer $arrayParametros [
     *                                    strElemento   Nombre del equipo de BB
     *                                    arrayEstados  Estados el cual son discriminados en la consulta
     *                                 ]   
     * @return Array $arrayResultado [ totalCapacidad1 , totalCapacidad2 ] 
     */
    public function getResultadoCapacidadesPorEquipo($arrayParametros)
    {
        $arrayResultado = array();
        
        try
        {
            $rsm = new ResultSetMappingBuilder($this->_em);
            $query = $this->_em->createNativeQuery(null, $rsm);

            $sql = "  SELECT 
                        NVL((SUM(DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(IST.SERVICIO_ID,:capacidad1))),0) TOTAL_CAPACIDAD1,
                        NVL((SUM(DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(IST.SERVICIO_ID,:capacidad2))),0) TOTAL_CAPACIDAD2
                      FROM 
                        DB_INFRAESTRUCTURA.INFO_ELEMENTO E,
                        DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO IE,
                        DB_COMERCIAL.INFO_SERVICIO_TECNICO IST,
                        DB_COMERCIAL.INFO_SERVICIO S
                      WHERE E.ID_ELEMENTO          = IST.ELEMENTO_ID
                      AND IST.SERVICIO_ID          = S.ID_SERVICIO
                      AND IE.ID_INTERFACE_ELEMENTO = IST.INTERFACE_ELEMENTO_ID
                      AND E.NOMBRE_ELEMENTO        = :elemento
                      AND IE.ESTADO                = :estado
                      AND S.ESTADO NOT            IN (:estados)";

            $rsm->addScalarResult('TOTAL_CAPACIDAD1', 'totalCapacidad1', 'integer');
            $rsm->addScalarResult('TOTAL_CAPACIDAD2', 'totalCapacidad2', 'integer');

            $query->setParameter("elemento", $arrayParametros['strElemento']);
            $query->setParameter("estados",  $arrayParametros['arrayEstados']);
            $query->setParameter("capacidad1", 'CAPACIDAD1');
            $query->setParameter("capacidad2", 'CAPACIDAD2'); 
            $query->setParameter("estado", 'connected'); 
            
            $query->setSQL($sql);

            $arrayResultado = $query->getOneOrNullResult();
        } 
        catch (\Exception $ex) 
        {
            error_log($ex->getMessage());
        }
        
        return $arrayResultado;
    }        
    
    /**
     * 
     * Metodo que devuelve elementos VCENTER, CLUSTER o DATASTORE para generacion de factibilidad segun parametros enviados
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 20-11-2017
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 - 08-02-2018 Se agregar filtro para tener un nivel mas en la respuesta de la consulta añadiendo el HyperView
     *
     * Costo 20
     * 
     * @param Array $arrayParametros [ strTipo , strCanton , intIdElementoPadre , intIdEmpresa ]
     * @return Array $arrayResultado
     */
    public function getArrayElementosFactibilidadHosting($arrayParametros)
    {
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $strSelect = "";
        $strFrom   = "";
        $strWhere  = "";
        
        if(!empty($arrayParametros) && isset($arrayParametros['strTipo']))
        {
            if($arrayParametros['strTipo']=='HYPERVIEW')
            {
                $strSelect = "SELECT 
                                ELEMENTO.ID_ELEMENTO,
                                ELEMENTO.NOMBRE_ELEMENTO ";
                $strWhere  = " AND TIPO.NOMBRE_TIPO_ELEMENTO   = :tipoElemento ";
                
                $objQuery->setParameter("tipoElemento",  $arrayParametros['strTipo']);
            }
            else//CLUSTER, DATASTORE, VCENTER
            {
                $strSelect = "SELECT 
                                ELEMENTO_RELACION.ID_ELEMENTO,
                                ELEMENTO_RELACION.NOMBRE_ELEMENTO ";
                
                $strFrom   = " ,DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO RELACION,
                                DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO_RELACION,
                                DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIPO_RELACION,
                                DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MODELO_RELACION";
                
                $strWhere  = "  AND RELACION.ELEMENTO_ID_A               = ELEMENTO.ID_ELEMENTO
                                AND RELACION.ELEMENTO_ID_B               = ELEMENTO_RELACION.ID_ELEMENTO 
                                AND ELEMENTO_RELACION.MODELO_ELEMENTO_ID = MODELO_RELACION.ID_MODELO_ELEMENTO
                                AND MODELO_RELACION.TIPO_ELEMENTO_ID     = TIPO_RELACION.ID_TIPO_ELEMENTO 
                                AND TIPO_RELACION.NOMBRE_TIPO_ELEMENTO   = :tipoHijo
                                AND ELEMENTO.ID_ELEMENTO                 = :elementoPadre";
                
                $objQuery->setParameter("tipoHijo",      $arrayParametros['strTipo']);
                $objQuery->setParameter("elementoPadre", $arrayParametros['intIdElementoPadre']);
            }             
        }
        
        $strSql = $strSelect.
                  "FROM 
                    DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIPO,
                    DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MODELO,
                    DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO,
                    DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA ELEMENTO_UBICA,
                    DB_INFRAESTRUCTURA.INFO_UBICACION UBICACION,
                    DB_GENERAL.ADMI_PARROQUIA PARROQUIA,
                    DB_GENERAL.ADMI_CANTON CANTON,
                    DB_GENERAL.ADMI_PROVINCIA PROV,
                    DB_GENERAL.ADMI_REGION REGION
                    $strFrom
                  WHERE 
                        TIPO.ID_TIPO_ELEMENTO     = MODELO.TIPO_ELEMENTO_ID
                  AND MODELO.ID_MODELO_ELEMENTO   = ELEMENTO.MODELO_ELEMENTO_ID
                  AND ELEMENTO.ID_ELEMENTO        = ELEMENTO_UBICA.ELEMENTO_ID
                  AND ELEMENTO_UBICA.UBICACION_ID = UBICACION.ID_UBICACION
                  AND UBICACION.PARROQUIA_ID      = PARROQUIA.ID_PARROQUIA
                  AND PARROQUIA.CANTON_ID         = CANTON.ID_CANTON
                  AND CANTON.PROVINCIA_ID         = PROV.ID_PROVINCIA
                  AND PROV.REGION_ID              = REGION.ID_REGION
                  AND REGION.NOMBRE_REGION        = :nombreRegion
                  $strWhere
                  AND ELEMENTO_UBICA.EMPRESA_COD  = :intEmpresaCod
                  AND ELEMENTO.ESTADO             = :estado
                  AND TIPO.ESTADO                 = :estado
                  AND MODELO.ESTADO               = :estado
                  AND PARROQUIA.ESTADO            = :estado
                  AND CANTON.ESTADO               = :estado ";
        
        $objQuery->setParameter("intEmpresaCod", $arrayParametros['intEmpresaCod']);        
        $objQuery->setParameter("nombreRegion",  $arrayParametros['strRegion']);
        $objQuery->setParameter("estado",        'Activo');
        
        $objRsm->addScalarResult('ID_ELEMENTO',    'idElemento',     'integer');
        $objRsm->addScalarResult('NOMBRE_ELEMENTO','nombreElemento', 'string');
        
        $objQuery->setSQL($strSql);

        $arrayResultado = $objQuery->getArrayResult();
                
        return $arrayResultado;
    }
    
    /**
     * 
     * Metodo encargado de obtener el array con la informacion de hosting de un servicio:
     *  - Vcenter
     *  - cluster
     *  - Pool de recursos contratados
     * 
     * costo 2
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 21-11-2017
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 08-03-2018 - Se limita la funcion para que solo devuelva informacion macro del pool de recursos para MVs
     * 
     * @param Array $arrayParametros [ intIdServicio ]
     * @return Array
     */
    public function getArrayInformacionGeneralHosting($arrayParametros)
    {
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);

        $strSql = "  SELECT
                        (SELECT ID_ELEMENTO
                        FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO
                        WHERE ID_ELEMENTO = (DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:caractVCenter))
                        ) ID_VCENTER,
                        (SELECT NOMBRE_ELEMENTO
                        FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO
                        WHERE ID_ELEMENTO = (DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:caractVCenter))
                        ) NOMBRE_VCENTER,
                        (SELECT NOMBRE_ELEMENTO
                        FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO
                        WHERE ID_ELEMENTO = (DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:caractCluster))
                        ) NOMBRE_CLUSTER,
                        (SELECT ID_ELEMENTO
                        FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO
                        WHERE ID_ELEMENTO = (DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:caractHyperview))
                        ) ID_HYPERVIEW,
                        (SELECT NOMBRE_ELEMENTO
                        FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO
                        WHERE ID_ELEMENTO = (DB_COMERCIAL.TECNK_SERVICIOS.GET_VALOR_SERVICIO_PROD_CARACT(SERVICIO.ID_SERVICIO,:caractHyperview))
                        ) NOMBRE_HYPERVIEW
                      FROM 
                        DB_COMERCIAL.INFO_SERVICIO SERVICIO
                      WHERE 
                        SERVICIO.ID_SERVICIO = :idServicio ";

        $objRsm->addScalarResult('ID_VCENTER',       'idVcenter',        'integer');
        $objRsm->addScalarResult('ID_HYPERVIEW',     'idHyperview',      'integer');
        $objRsm->addScalarResult('NOMBRE_VCENTER',   'vcenter',          'string');
        $objRsm->addScalarResult('NOMBRE_HYPERVIEW', 'hyperview',        'string');
        $objRsm->addScalarResult('NOMBRE_CLUSTER',   'cluster',          'string');
        
        $objQuery->setParameter("idServicio",       $arrayParametros['intIdServicio']);
        $objQuery->setParameter("caractHyperview",  'HYPERVIEW'); 
        $objQuery->setParameter("caractVCenter",    'VCENTER'); 
        $objQuery->setParameter("caractCluster",    'CLUSTER'); 
        $objQuery->setParameter("caractStorage",    'STORAGE_VALUE'); 
        $objQuery->setParameter("caractMemoria",    'MEMORIA_VALUE'); 
        $objQuery->setParameter("caractProcesador", 'PROCESADOR_VALUE');
        $objQuery->setParameter("caracDs",          'DATASTORE');

        $objQuery->setSQL($strSql);

        $arrayResultado = $objQuery->getArrayResult();
                
        return $arrayResultado;
    }
    
    /**
     * 
     * Metodo encargado de obtener la información de las máquinas virtuales creadas
     * 
     * costo 9
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 21-11-2017
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 07-04-2018 - Se ajusta consulta para solo obtener la informacion basica de la maquina virtual 
     *
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.2 22-05-2019 - Se modifica consulta puesto que ahora las máquinas virutales pueden tener
     *                            más de una licencia y el diseño del query no lo soportaba.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.3 05-29-2020 - Se retorna el id del servicio en la consulta.
     * 
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.4 07-04-2020 - Se actualiza consulta en base a las nuevas estructuras
     *
     * @param Array $arrayParametros [ intIdServicio ]
     * @return Array
     */
    public function getArrayMaquinasVirtuales($arrayParametros)
    {
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);

        $strSql = " SELECT DISTINCT
                        :idServicio ID_SERVICIO,
                        ELEMENTO.ID_ELEMENTO,
                        ELEMENTO.NOMBRE_ELEMENTO,                        
                        (SELECT DETALLE_VALOR
                        FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO
                        WHERE ELEMENTO_ID  = ELEMENTO.ID_ELEMENTO
                        AND DETALLE_NOMBRE = :detalleCarpeta
                        AND ESTADO         = :estado
                ) CARPETA,
                        (SELECT DETALLE_VALOR
                        FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO
                        WHERE ELEMENTO_ID  = ELEMENTO.ID_ELEMENTO
                        AND DETALLE_NOMBRE = :detalleTarjetaRed
                        AND ESTADO         = :estado
                ) TARJETA_RED,
                        null SISTEMA_OPERATIVO,
                        null ID_SISTEMA_OPERATIVO,
                (SELECT DETALLE_VALOR
                        FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO
                        WHERE ELEMENTO_ID  = ELEMENTO.ID_ELEMENTO
                        AND DETALLE_NOMBRE = 'HYPERVIEW'
                        AND ESTADO         = :estado
                        AND ROWNUM        <= 1
                ) HYPERVIEW,
                (SELECT ELEMENTO_C.NOMBRE_ELEMENTO
                        FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE
                        JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO_C
                        ON ELEMENTO_C.ID_ELEMENTO  = IDE.DETALLE_VALOR
                        WHERE IDE.ELEMENTO_ID  = ELEMENTO.ID_ELEMENTO
                        AND IDE.DETALLE_NOMBRE = 'HYPERVIEW'
                        AND IDE.ESTADO         = :estado
                        AND ROWNUM        <= 1
                ) NOMBRE_HYPERVIEW,
                (SELECT DETALLE_VALOR
                        FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO
                        WHERE ELEMENTO_ID  = ELEMENTO.ID_ELEMENTO
                        AND DETALLE_NOMBRE = 'VCENTER'
                        AND ESTADO         = :estado
                        AND ROWNUM        <= 1
                ) VCENTER,
                (SELECT ELEMENTO_C.NOMBRE_ELEMENTO
                        FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE
                        JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO_C
                        ON ELEMENTO_C.ID_ELEMENTO  = IDE.DETALLE_VALOR
                        WHERE IDE.ELEMENTO_ID  = ELEMENTO.ID_ELEMENTO
                        AND IDE.DETALLE_NOMBRE = 'VCENTER'
                        AND IDE.ESTADO         = :estado
                        AND ROWNUM        <= 1
                ) NOMBRE_VCENTER,
                (SELECT DETALLE_VALOR
                        FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO
                        WHERE ELEMENTO_ID  = ELEMENTO.ID_ELEMENTO
                        AND DETALLE_NOMBRE = 'CLUSTER'
                        AND ESTADO         = :estado
                        AND ROWNUM        <= 1
                ) CLUSTER_,
                (SELECT ELEMENTO_C.NOMBRE_ELEMENTO
                        FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE
                        JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO_C
                        ON ELEMENTO_C.ID_ELEMENTO  = IDE.DETALLE_VALOR
                        WHERE IDE.ELEMENTO_ID  = ELEMENTO.ID_ELEMENTO
                        AND IDE.DETALLE_NOMBRE = 'CLUSTER'
                        AND IDE.ESTADO         = :estado
                        AND ROWNUM            <= 1
                ) NOMBRE_CLUSTER
                      FROM 
                        DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO,
                        DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DETALLE
                      WHERE DETALLE.ELEMENTO_ID    = ELEMENTO.ID_ELEMENTO
                      AND   ELEMENTO.ESTADO        = :estado
                      AND  ELEMENTO.ID_ELEMENTO IN
                    ( SELECT DISTINCT SRDELE.ELEMENTO_ID
                    FROM DB_COMERCIAL.INFO_SERVICIO_RECURSO_CAB SRCELE
                    JOIN DB_COMERCIAL.INFO_SERVICIO_RECURSO_DET SRDELE
                    ON SRDELE.SERVICIO_RECURSO_CAB_ID = SRCELE.ID_SERVICIO_RECURSO_CAB
                    WHERE SRCELE.SERVICIO_ID          = :idServicio
                    AND SRCELE.ESTADO                 = :estado
                    AND SRDELE.ESTADO                 = :estado
                    )";

        $objRsm->addScalarResult('ID_SERVICIO',          'idServicio',         'integer');
        $objRsm->addScalarResult('ID_ELEMENTO',          'idElemento',         'integer');
        $objRsm->addScalarResult('NOMBRE_ELEMENTO',      'nombreElemento',     'string');        
        $objRsm->addScalarResult('CARPETA',              'carpeta',            'string');
        $objRsm->addScalarResult('TARJETA_RED',          'tarjetaRed',         'string');
        $objRsm->addScalarResult('ID_SISTEMA_OPERATIVO', 'idSistemaOperativo', 'integer');
        $objRsm->addScalarResult('SISTEMA_OPERATIVO',    'sistemaOperativo',   'string');        
        $objRsm->addScalarResult('HYPERVIEW',    'HYPERVIEW',   'string');
        $objRsm->addScalarResult('NOMBRE_HYPERVIEW',    'NOMBRE_HYPERVIEW',   'string');
        $objRsm->addScalarResult('VCENTER',    'VCENTER',   'string');
        $objRsm->addScalarResult('NOMBRE_VCENTER',    'NOMBRE_VCENTER',   'string');
        $objRsm->addScalarResult('CLUSTER_',    'CLUSTER',   'string');
        $objRsm->addScalarResult('NOMBRE_CLUSTER',    'NOMBRE_CLUSTER',   'string');
        
        $objQuery->setParameter("idServicio",       $arrayParametros['intIdServicio']);
        $objQuery->setParameter("detalleServicio",  'REF_SERVICIO_MV');         
        $objQuery->setParameter("detalleSO",        'SISTEMA_OPERATIVO'); 
        $objQuery->setParameter("detalleCarpeta",   'CARPETA'); 
        $objQuery->setParameter("detalleTarjetaRed",'TARJETA_RED');
        $objQuery->setParameter("estado",           'Activo');

        $objQuery->setSQL($strSql);

        $arrayResultado = $objQuery->getArrayResult();
                
        return $arrayResultado;
    }
    
    /**
     * 
     * Metodo encargado de consultar el detella de recursos configurados en una maquina virtual
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 07-04-2018
     * 
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.1 26-06-2019      Se agrega validación para que al preguntar por la cantidad de 
     *                               recurso asignado busque según el parámetro :caracteristica
     * 
     * Costo 8
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 - 01-06-2020 - Se retorna el id del servicio de las maquinas virtuales.
     *
     * @param Array $arrayParametros
     * @return Array
     */
    public function getArrayDetalleMaquinasVirtuales($arrayParametros)
    {
        $arrayResultado = array();
        
        try
        {
            $objResultSetMap   = new ResultSetMappingBuilder($this->_em);
            $objQuery          = $this->_em->createNativeQuery(null, $objResultSetMap);

            $strSelect = '';

            if($arrayParametros['strTipo'] == 'DISCO')
            {
                $strSelect .= ',(SELECT VALOR
                            FROM INFO_SERVICIO S1,
                              INFO_SERVICIO_PROD_CARACT ISPC1,
                              ADMI_PRODUCTO_CARACTERISTICA APC1,
                              ADMI_CARACTERISTICA C1
                            WHERE S1.ID_SERVICIO                  = :servicio
                            AND S1.ID_SERVICIO                    = ISPC1.SERVICIO_ID
                            AND ISPC1.PRODUCTO_CARACTERISITICA_ID = APC1.ID_PRODUCTO_CARACTERISITICA
                            AND APC1.CARACTERISTICA_ID            = C1.ID_CARACTERISTICA
                            AND C1.DESCRIPCION_CARACTERISTICA     = :caracteristicaAdicional
                            AND ISPC1.ESTADO                      = :estado
                            AND ISPC1.REF_SERVICIO_PROD_CARACT_ID = :servicioReferencial
                            ) VALOR_CARACTERISTICA';

                $objQuery->setParameter("caracteristicaAdicional", $arrayParametros['strCaracteristicaAdicional']);
            }
            else
            {
                $strSelect .= ' , NULL as VALOR_CARACTERISTICA';
            }

            if($arrayParametros['strTipo'] !== 'SISTEMA_OPERATIVO')
            {
                $strSql = " SELECT 
                                ".$arrayParametros['intIdDetalle']." AS ID_DETALLE,
                                '".$arrayParametros['strTipo']."' AS TIPO,
                                ISPC.REF_SERVICIO_PROD_CARACT_ID ID_RECURSO,
                                (SELECT VALOR
                                FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT
                                WHERE ID_SERVICIO_PROD_CARACT = :servicioReferencial
                                AND ESTADO                    = 'Activo'
                                ) RECURSO,
                                ISPC.VALOR AS VALOR_REFERENCIA,
                                (SELECT 
                                    TO_NUMBER(DETALLE_VALOR)
                                FROM 
                                    DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO 
                                WHERE 
                                      ELEMENTO_ID       = :elemento AND
                                REF_DETALLE_ELEMENTO_ID = :idDetalleElemento AND 
                                ESTADO                  = :estado AND
                                DETALLE_NOMBRE          = :caracteristica
                                ) ASIGNADO
                                $strSelect
                              FROM 
                                DB_COMERCIAL.INFO_SERVICIO S,
                                DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISPC,
                                DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA APC,
                                DB_COMERCIAL.ADMI_CARACTERISTICA C
                              WHERE S.ID_SERVICIO                  = :servicio
                              AND S.ID_SERVICIO                    = ISPC.SERVICIO_ID
                              AND ISPC.PRODUCTO_CARACTERISITICA_ID = APC.ID_PRODUCTO_CARACTERISITICA
                              AND APC.CARACTERISTICA_ID            = C.ID_CARACTERISTICA
                              AND C.DESCRIPCION_CARACTERISTICA     = :caracteristica
                              AND ISPC.ESTADO                      = :estado
                              AND ISPC.REF_SERVICIO_PROD_CARACT_ID = :servicioReferencial";
            }
            else
            {
                $strSql =  " SELECT 
                           ".$arrayParametros['intIdDetalle']." AS ID_DETALLE,
                           '".$arrayParametros['strTipo']."' AS TIPO,
                           ISPC.ID_SERVICIO_PROD_CARACT ID_RECURSO,
                           ISPC.SERVICIO_ID,
                           ISPC.VALOR AS RECURSO,
                           1 AS VALOR_REFERENCIA,
                           (SELECT 
                                TO_NUMBER(DETALLE_VALOR)
                            FROM 
                                INFO_DETALLE_ELEMENTO 
                            WHERE 
                                  ELEMENTO_ID       = :elemento AND
                            REF_DETALLE_ELEMENTO_ID = :idDetalleElemento AND 
                            ESTADO                  = :estado
                            ) ASIGNADO
                            $strSelect
                            FROM
                            DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT ISPC
                            WHERE ISPC.ID_SERVICIO_PROD_CARACT = :servicioReferencial";

                $objResultSetMap->addScalarResult('SERVICIO_ID', 'idServicio', 'integer');
            }
            $objResultSetMap->addScalarResult('ID_RECURSO',       'idRecurso',    'integer');
            $objResultSetMap->addScalarResult('RECURSO',          'nombreRecurso','string');
            $objResultSetMap->addScalarResult('VALOR_REFERENCIA', 'valor','string');
            $objResultSetMap->addScalarResult('ID_DETALLE',       'idDetalle','integer');       
            $objResultSetMap->addScalarResult('ASIGNADO',         'usado','integer');       
            $objResultSetMap->addScalarResult('VALOR_CARACTERISTICA', 'valorCaracteristica','string');
            $objResultSetMap->addScalarResult('TIPO',                 'tipo','string');

            $objQuery->setParameter("servicio",              $arrayParametros['intIdServicio']);
            $objQuery->setParameter("caracteristica",        $arrayParametros['strTipo'].'_VALUE');         
            $objQuery->setParameter("servicioReferencial",   $arrayParametros['intIdServicioProdCaract']);       
            $objQuery->setParameter("elemento",              $arrayParametros['intIdElemento']); 
            $objQuery->setParameter("idDetalleElemento",     $arrayParametros['intIdDetalleElemento']); 
            $objQuery->setParameter("estado",                'Activo');

            $objQuery->setSQL($strSql);
            $arrayResultado = $objQuery->getOneOrNullResult();
        
        } 
        catch (\Exception $ex) 
        {
            error_log('ERROR getArrayDetalleMaquinasVirtuales '.$ex->getMessage());
        }
                
        return $arrayResultado;
    }
    /**
     * 
     * Metodo encargado de consultar el detella de recursos configurados en una maquina virtual
     * 
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.0 23-05-2019
     * 
     * @author Karen Rodríguez V.<kyrodriguez@telconet.ec>
     * @version 1.1 12-07-2020 - Los datos que responde se mantiene pero se modifica la consulta
     *                           a las nuevas estructuras.
     * 
     * Costo 12
     * 
     * @param Array $arrayParametros
     * @return Array
     */
    public function getArrayLicenciaSolucion($arrayParametros)
    {
        $arrayResultado = array();
        try
        {
            $objResultSetMap   = new ResultSetMappingBuilder($this->_em);
            $objQuery          = $this->_em->createNativeQuery(null, $objResultSetMap);

            $strSelect = "  SELECT ROWNUM, LICENCIAS.*
                            FROM (
                                    SELECT  
                                            ISRC.TIPO_RECURSO ||'@'|| ISRC.DESCRIPCION_RECURSO NOMBRERECURSO,
                                            SUM(ISRC.CANTIDAD)                                 VALOR,
                                            ''                                                 VALORCARACTERISTICA, 
                                            NULL                                               REFPADRE
                                     FROM DB_COMERCIAL.INFO_SERVICIO_RECURSO_CAB ISRC
                                     WHERE ISRC.SERVICIO_ID IN (
                                                                 SELECT ISD.SERVICIO_ID 
                                                                 FROM DB_COMERCIAL.INFO_SOLUCION_DET ISD
                                                                 WHERE ISD.SOLUCION_CAB_ID = (
                                                                                               SELECT ISD2.SOLUCION_CAB_ID 
                                                                                               FROM DB_COMERCIAL.INFO_SOLUCION_DET ISD2
                                                                                               WHERE ISD2.SERVICIO_ID IN (:arrayIdServicio)
                                                                                             )
                                                                 AND ISD.DESCRIPCION       = 'CLOUD IAAS LICENCIAMIENTO SE'
                                                                 AND ISD.ESTADO            = 'Activo'
                                                               )
                                     AND ISRC.ESTADO            = 'Activo'
                                     GROUP BY ISRC.TIPO_RECURSO, ISRC.DESCRIPCION_RECURSO, '', NULL
                                )LICENCIAS";
            
            $objResultSetMap->addScalarResult('ROWNUM',                 'idRecurso',            'string');
            $objResultSetMap->addScalarResult('NOMBRERECURSO',          'nombreRecurso',        'string');
            $objResultSetMap->addScalarResult('VALOR',                  'valor',                'string');
            $objResultSetMap->addScalarResult('VALORCARACTERISTICA',    'valorCaracteristica',  'string');       
            $objResultSetMap->addScalarResult('REFPADRE',               'refPadre',             'integer');
            
            $objQuery->setParameter('arrayIdServicio', array_values($arrayParametros));
            $objQuery->setSQL($strSelect);
            $arrayResultado = $objQuery->getResult();
        } 
        catch (\Exception $ex) 
        {
            error_log('ERROR getArrayDetalleMaquinasVirtuales '.$ex->getMessage());
        }
        return $arrayResultado;
    }
    /**
     * 
     * Metodo encargado de obtener la información de los servidores de alquiler disponibles de acuerdo al modelo y la region
     * 
     * costo 13
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 29-11-2017
     * 
     * @param Array $arrayParametros [ intIdModelo , intIdCanton , intEmpresaCod ]
     * @return Array
     */
    public function getArrayServidoresAlquilerDisponibles($arrayParametros)
    {
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);

        $strSql = "   SELECT  
                        ELEMENTO.*
                      FROM 
                        DB_INFRAESTRUCTURA.INFO_ELEMENTO               ELEMENTO,
                        DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO        MODELO,
                        DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA EMPRESA_UBICA,
                        DB_INFRAESTRUCTURA.INFO_UBICACION              UBICACION,
                        DB_GENERAL.ADMI_PARROQUIA                      PARROQUIA,
                        DB_GENERAL.ADMI_CANTON                         CANTON
                      WHERE ELEMENTO.MODELO_ELEMENTO_ID = MODELO.ID_MODELO_ELEMENTO
                      AND ELEMENTO.ID_ELEMENTO          = EMPRESA_UBICA.ELEMENTO_ID
                      AND EMPRESA_UBICA.UBICACION_ID    = UBICACION.ID_UBICACION
                      AND UBICACION.PARROQUIA_ID        = PARROQUIA.ID_PARROQUIA
                      AND PARROQUIA.CANTON_ID           = CANTON.ID_CANTON
                      AND MODELO.ID_MODELO_ELEMENTO     = :modelo
                      AND CANTON.ID_CANTON              = :canton
                      AND ELEMENTO.ESTADO               = :estado
                      AND EMPRESA_UBICA.EMPRESA_COD     = :empresaCod ";
        
        $objRsm->addRootEntityFromClassMetadata('\telconet\schemaBundle\Entity\InfoElemento', 'elemento');
        
        $objQuery->setParameter("modelo",       $arrayParametros['intIdModelo']);
        $objQuery->setParameter("canton",       $arrayParametros['intIdCanton']); 
        $objQuery->setParameter("estado",       'Disponible'); 
        $objQuery->setParameter("empresaCod",   $arrayParametros['intEmpresaCod']);

        $objQuery->setSQL($strSql);

        $arrayResultado = $objQuery->getResult();
                
        return $arrayResultado;
    }
    
    /**
     * 
     * Metodo encargado de obtener la información de los datastores de alquiler disponibles de acuerdo a la region o un nombre
     * 
     * costo 13
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 29-11-2017
     * 
     * @param Array $arrayParametros [ intIdModelo , intIdCanton , intEmpresaCod ]
     * @return Array
     */
    public function getArrayDatastoreServidoresAlquiler($arrayParametros)
    {
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $strWhere = '';
        
        if(isset($arrayParametros['strNombre']) && !empty($arrayParametros['strNombre']))
        {
            $strWhere .= ' AND ELEMENTO.NOMBRE_ELEMENTO LIKE :nombre ';
            $objQuery->setParameter("nombre", "%" . $arrayParametros['strNombre']. "%");
        }

        $strSql = "   SELECT 
                          ELEMENTO.*
                      FROM 
                        DB_INFRAESTRUCTURA.INFO_ELEMENTO               ELEMENTO,
                        DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO        MODELO,
                        DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO          TIPO,
                        DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA EMPRESA_UBICA,
                        DB_INFRAESTRUCTURA.INFO_UBICACION              UBICACION,
                        DB_GENERAL.ADMI_PARROQUIA                      PARROQUIA,
                        DB_GENERAL.ADMI_CANTON                         CANTON
                      WHERE ELEMENTO.MODELO_ELEMENTO_ID = MODELO.ID_MODELO_ELEMENTO
                      AND MODELO.TIPO_ELEMENTO_ID       = TIPO.ID_TIPO_ELEMENTO
                      AND ELEMENTO.ID_ELEMENTO          = EMPRESA_UBICA.ELEMENTO_ID
                      AND EMPRESA_UBICA.UBICACION_ID    = UBICACION.ID_UBICACION
                      AND UBICACION.PARROQUIA_ID        = PARROQUIA.ID_PARROQUIA
                      AND PARROQUIA.CANTON_ID           = CANTON.ID_CANTON
                      AND CANTON.NOMBRE_CANTON          = :canton
                      AND ELEMENTO.ESTADO               = :estado
                      AND ELEMENTO.DESCRIPCION_ELEMENTO = :descripcion
                      AND TIPO.NOMBRE_TIPO_ELEMENTO     = :tipo
                      $strWhere ";
                
        $objRsm->addRootEntityFromClassMetadata('\telconet\schemaBundle\Entity\InfoElemento', 'elemento');
        
        $objQuery->setParameter("tipo",         'DATASTORE');
        $objQuery->setParameter("canton",       $arrayParametros['strCanton']); 
        $objQuery->setParameter("estado",       'Activo'); 
        $objQuery->setParameter("descripcion",  'Datastore Servidores de Alquiler');

        $objQuery->setSQL($strSql);

        $arrayResultado = $objQuery->getResult();
                
        return $arrayResultado;
    }
    
    /**
     * 
     * Metodo que devuelve el mapeo de filas y racks existentes mapeados para simular el cuarto de IT DC
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 05-09-2017
     * 
     * Costo 2720
     * 
     * @param Array $arrayParametros [ strNombreCanton ]
     * @return Array $arrayResultado
     */
    public function getArrayInformacionFilaRacks($arrayParametros)
    {
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);

        $strSql = "  SELECT 
                    E.ID_ELEMENTO          ID_FILA,
                    E.NOMBRE_ELEMENTO      NOMBRE_FILA,
                    E.ESTADO               ESTADO_FILA,
                    ER.ID_ELEMENTO         ID_RACK,
                    ER.NOMBRE_ELEMENTO     NOMBRE_RACK,
                    ER.ESTADO              ESTADO_RACK,
                    (SELECT COUNT(*)
                    FROM 
                      DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO RUR,
                      DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO UDRE
                    WHERE RUR.ELEMENTO_ID_A = ER.ID_ELEMENTO
                    AND RUR.ESTADO          = :estado
                    AND RUR.ELEMENTO_ID_B   = UDRE.ELEMENTO_ID_A
                    AND UDRE.ESTADO         = :estado
                    )                      UDR_OCUPADOS,
                    ((SELECT COUNT(*)
                    FROM                       
                      DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO UDRE
                    WHERE                    
                    ER.ID_ELEMENTO  = UDRE.ELEMENTO_ID_A
                    AND UDRE.ESTADO         = :estado
                    ))-(SELECT COUNT(*)
                    FROM 
                      DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO RUR,
                      DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO UDRE
                    WHERE RUR.ELEMENTO_ID_A = ER.ID_ELEMENTO
                    AND RUR.ESTADO          = :estado
                    AND RUR.ELEMENTO_ID_B   = UDRE.ELEMENTO_ID_A
                    AND UDRE.ESTADO         = :estado) UDR_DISPONIBLES
                  FROM 
                    DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO T,
                    DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO M,
                    DB_INFRAESTRUCTURA.INFO_ELEMENTO E
                  LEFT JOIN DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO RE
                  ON E.ID_ELEMENTO = RE.ELEMENTO_ID_A AND RE.ESTADO = :estado
                  LEFT JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ER
                  ON RE.ELEMENTO_ID_B          = ER.ID_ELEMENTO,
                  DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA EU ,
                  DB_INFRAESTRUCTURA.INFO_UBICACION U,
                  DB_GENERAL.ADMI_PARROQUIA P,
                  DB_GENERAL.ADMI_CANTON C
                  WHERE T.NOMBRE_TIPO_ELEMENTO = :tipoElemento
                  AND M.NOMBRE_MODELO_ELEMENTO = :modeloElemento
                  AND T.ESTADO                 = :estado
                  AND M.ESTADO                 = :estado                  
                  AND
                    E.ESTADO              <> 'Eliminado' AND
                    T.ID_TIPO_ELEMENTO     = M.TIPO_ELEMENTO_ID
                  AND E.MODELO_ELEMENTO_ID = M.ID_MODELO_ELEMENTO
                  AND E.ID_ELEMENTO            = EU.ELEMENTO_ID
                  AND EU.UBICACION_ID          = U.ID_UBICACION
                  AND U.PARROQUIA_ID           = P.ID_PARROQUIA
                  AND P.CANTON_ID              = C.ID_CANTON
                  AND C.NOMBRE_CANTON          = :canton
                  ORDER BY E.ID_ELEMENTO ASC ";

        $objRsm->addScalarResult('ID_FILA',         'idFila',              'integer');
        $objRsm->addScalarResult('ID_RACK',         'idRack',              'integer');
        $objRsm->addScalarResult('NOMBRE_FILA',     'nombreFila',          'string');
        $objRsm->addScalarResult('NOMBRE_RACK',     'nombreRack',          'string');
        $objRsm->addScalarResult('ESTADO_FILA',     'estadoFila',          'string');
        $objRsm->addScalarResult('ESTADO_RACK',     'estadoRack',          'string');
        $objRsm->addScalarResult('UDR_OCUPADOS',    'unidadesDisponibles', 'integer');
        $objRsm->addScalarResult('UDR_DISPONIBLES', 'unidadesUsables',     'integer');
        
        $objQuery->setParameter("canton", $arrayParametros['strNombreCanton']);

        $objQuery->setParameter("tipoElemento", 'FILA'); 
        $objQuery->setParameter("modeloElemento", 'MODELO FILA DATA CENTER');
        $objQuery->setParameter("estado", 'Activo'); 

        $objQuery->setSQL($strSql);

        $arrayResultado = $objQuery->getArrayResult();
                
        return $arrayResultado;
    }
    
    /**
     * 
     * Metodo que devuelve el Elemento dependiendo de su detalle
     * 
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0
     * @since 26-03-2018
     * 
     * Costo 4
     * 
     * @param Array $arrayParametros [ 
     *                                strDetalleValor,
     *                                strDetalleNombre
     *                                strEstado
     *                               ]
     * @return Array $arrayResultado
     */
    public function getArrayElementosPorDetalle($arrayParametros)
    {
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);

        $strWhere = "";
        $strSql   = " SELECT 
                        IE.ID_ELEMENTO,                        
                        IE.MODELO_ELEMENTO_ID,
                        IE.NOMBRE_ELEMENTO,
                        IE.DESCRIPCION_ELEMENTO,
                        IE.ESTADO,
                        IDE.DETALLE_NOMBRE,
                        IDE.DETALLE_VALOR
                    FROM 
                        DB_INFRAESTRUCTURA.INFO_ELEMENTO IE
                    JOIN 
                        DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IDE 
                         ON IDE.ELEMENTO_ID = IE.ID_ELEMENTO ";
        
        if(isset($arrayParametros["strEstado"]) && !empty($arrayParametros["strEstado"]))
        {
            $strWhere .= " WHERE IDE.ESTADO = :strEstado ";
            $objQuery->setParameter("strEstado", $arrayParametros["strEstado"]); 
        }
        else
        {
            $strWhere .= " WHERE IDE.ESTADO = :strEstado ";
            $objQuery->setParameter("strEstado", "Activo"); 
        }
        
        if(isset($arrayParametros["strDetalleNombre"]) && !empty($arrayParametros["strDetalleNombre"]))
        {
            $strWhere .= " AND IDE.DETALLE_NOMBRE = :strDetalleNombre ";
            $objQuery->setParameter("strDetalleNombre", $arrayParametros["strDetalleNombre"]); 
        }
               
        if(isset($arrayParametros["strDetalleValor"]) && $arrayParametros["strDetalleValor"] > 0)
        {
            $strWhere .= " AND IDE.DETALLE_VALOR = :strDetalleValor ";
            $objQuery->setParameter("strDetalleValor", $arrayParametros["strDetalleValor"]); 
        }
        
        if(isset($arrayParametros["intIdElemento"]) && $arrayParametros["intIdElemento"] > 0)
        {
            $strWhere .= " AND IDE.ELEMENTO_ID = :intIdElemento ";
            $objQuery->setParameter("intIdElemento", $arrayParametros["intIdElemento"]); 
        }
        
        $strSql .= $strWhere;

        $objRsm->addScalarResult('ID_ELEMENTO', 'idElemento', 'integer');
        $objRsm->addScalarResult('MODELO_ELEMENTO_ID', 'idModeloElemento', 'integer');
        $objRsm->addScalarResult('NOMBRE_ELEMENTO', 'nombreElemento', 'string');
        $objRsm->addScalarResult('DESCIPCION_ELEMENTO', 'descripcionElemento', 'string');
        $objRsm->addScalarResult('ESTADO', 'estado', 'string');
        $objRsm->addScalarResult('DETALLE_NOMBRE', 'detalleNombre', 'string');  
        $objRsm->addScalarResult('DETALLE_VALOR', 'detalleValor', 'string');  

        $objQuery->setSQL($strSql);

        $arrayResultado = $objQuery->getArrayResult();
                
        return $arrayResultado;
    }
    
    /**
     * 
     * Metodo que devuelve el Elemento dependiendo de su detalle
     * 
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0
     * @since 26-03-2018
     * 
     * Costo 4
     * 
     * @param Array $arrayParametros [ 
     *                                intDetalleSolicitudId
     *                               ]
     * @return Array $arrayResultado
     */
    public function getArrayAsignadoSolicitud($arrayParametros)
    {
        $arrayResultado = array();
        
        if($arrayParametros["intDetalleSolicitudId"] > 0)
        {        
            $objRsm   = new ResultSetMappingBuilder($this->_em);
            $objQuery = $this->_em->createNativeQuery(null, $objRsm);

            $strWhere = "";
            $strSql   = " SELECT 
                            IDA.PERSONA_EMPRESA_ROL_ID, 
                            IDA.REF_ASIGNADO_NOMBRE 
                            FROM 
                            DB_SOPORTE.INFO_DETALLE_ASIGNACION IDA
                            JOIN DB_SOPORTE.INFO_DETALLE IDET 
                            ON IDET.ID_DETALLE = IDA.DETALLE_ID
                            WHERE IDET.DETALLE_SOLICITUD_ID = :intDetalleSolicitudId ";

            $objQuery->setParameter("intDetalleSolicitudId", $arrayParametros["intDetalleSolicitudId"]); 

            $strSql .= $strWhere;

            $objRsm->addScalarResult('PERSONA_EMPRESA_ROL_ID', 'idPersonaEmpresaRolId', 'integer');
            $objRsm->addScalarResult('REF_ASIGNADO_NOMBRE', 'refAsignadoNombre', 'string');

            $objQuery->setSQL($strSql);

            $arrayResultado = $objQuery->getArrayResult();
        }
                
        return $arrayResultado;
    }
    
    /**
     * 
     * Metodo que devuelve el Elemento dependiendo de su detalle
     * 
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0
     * @since 26-03-2018
     * 
     * Costo 4
     * 
     * @param Array $arrayParametros [ 
     *                                intIdElemento,
     *                                strTipoElemento,
     *                                strEstado
     *                               ]
     * @return Array $arrayResultado
     */
    public function getArrayElementoTipo($arrayParametros)
    {
        
        $arrayResultado = array();
        
                
            $objRsm   = new ResultSetMappingBuilder($this->_em);
            $objQuery = $this->_em->createNativeQuery(null, $objRsm);

            $strWhere = "";
            $strSql   = " SELECT 
                            IE.ID_ELEMENTO,
                            IE.NOMBRE_ELEMENTO,
                            IE.DESCRIPCION_ELEMENTO,
                            AME.NOMBRE_MODELO_ELEMENTO,
                            ATE.NOMBRE_TIPO_ELEMENTO
                          FROM  
                            DB_INFRAESTRUCTURA.INFO_ELEMENTO IE
                            JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO AME 
                            ON AME.ID_MODELO_ELEMENTO = IE.MODELO_ELEMENTO_ID 
                            JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ATE 
                            ON ATE.ID_TIPO_ELEMENTO = AME.TIPO_ELEMENTO_ID
                          ";

        if(isset($arrayParametros["intIdElemento"]) && $arrayParametros["intIdElemento"] > 0)
        {    
            $strWhere .= " WHERE IE.ID_ELEMENTO = :intIdElemento ";
            $objQuery->setParameter("intIdElemento", $arrayParametros["intIdElemento"]);

        }
        else
        {
                 
            if(isset($arrayParametros["strTipoElemento"]) && !empty($arrayParametros["strTipoElemento"]))
            {
                $strWhere .= " AND ATE.NOMBRE_TIPO_ELEMENTO = :strTipoElemento ";
                $objQuery->setParameter("strTipoElemento", $arrayParametros["strTipoElemento"]); 
            }

            if(isset($arrayParametros["strEstado"]) && !empty($arrayParametros["strEstado"]))
            {
                $strWhere .= " AND ATE.ESTADO = :strEstado ";
                $strWhere .= " AND IE.ESTADO = :strEstado ";
                $strWhere .= " AND AME.ESTADO = :strEstado ";
                $objQuery->setParameter("strEstado", $arrayParametros["strEstado"]); 
            }
        }

        $strSql .= $strWhere;

        $objRsm->addScalarResult('ID_ELEMENTO', 'idElemento', 'integer');
        $objRsm->addScalarResult('NOMBRE_ELEMENTO', 'nombreElemento', 'string');
        $objRsm->addScalarResult('DESCRIPCION_ELEMENTO', 'descripcionElemento', 'string');
        $objRsm->addScalarResult('NOMBRE_MODELO_ELEMENTO', 'nombreModeloElemento', 'string');
        $objRsm->addScalarResult('NOMBRE_TIPO_ELEMENTO', 'nombreTipoElemento', 'string');

        $objQuery->setSQL($strSql);

        $arrayResultado = $objQuery->getArrayResult();       
                
        return $arrayResultado;
    }  

    /**
     *
     * Método que devuelve la posición geografica del técnico en campo
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.0
     * @since 22-08-2018
     *
     * Costo 21
     *
     * @param Array $arrayParametros [
     *                                intIdPersonaRol   integer     id persona rol
     *                                strEstado         string      estado del elemento(tablet).
     *                                strDescripcion    string      patrón de busqueda para identificar la tablet
     *                               ]
     * @return Array $arrayResultado
     */
    public function getInfoCuadrilla($arrayParametros)
    {

        $arrayResultado = array();

        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);

        $strSql   = " SELECT GPS.LATITUD,
                        GPS.LONGITUD
                      FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DETALLE_ELEMENTO,
                        DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL PERSONA_EMPRESA_ROL,
                        DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO,
                        DB_MONITOREO.GPS_ULTIMO_PUNTO GPS
                      WHERE DETALLE_ELEMENTO.ESTADO = :strEstado
                      AND DETALLE_ELEMENTO.DETALLE_NOMBRE LIKE :strDescripcion
                      AND DETALLE_ELEMENTO.DETALLE_VALOR     = TO_CHAR(PERSONA_EMPRESA_ROL.ID_PERSONA_ROL)
                      AND ELEMENTO.ID_ELEMENTO               = DETALLE_ELEMENTO.ELEMENTO_ID
                      AND GPS.IMEI                           = ELEMENTO.NOMBRE_ELEMENTO
                      AND PERSONA_EMPRESA_ROL.ID_PERSONA_ROL = :intIdPersonaRol
                      ORDER BY GPS.FECHA DESC
                      ";

        $objQuery->setParameter("intIdPersonaRol", $arrayParametros["intIdPersonaRol"]);
        $objQuery->setParameter("strEstado", $arrayParametros["strEstado"]);
        $objQuery->setParameter("strDescripcion", "%" . $arrayParametros['strDescripcion']. "%");

        $objRsm->addScalarResult('LATITUD', 'latitud', 'string');
        $objRsm->addScalarResult('LONGITUD', 'longitud', 'string');

        $objQuery->setSQL($strSql);

        $arrayResultado = $objQuery->getArrayResult();
        return $arrayResultado;
    }
        
    /**
     * 
     * Método que trae un array con los elementos para uso del Data Center de acuerdo a filtros enviados para GYE y UIO     
     * 
     * @author Allan Suárez C <arsuarez@telconet.ec>
     * @version 1.0 
     * @since 06-12-2018
     * 
     * @param type $arrayParametros
     * @return type
     */
    public function getArrayElementosDataCenter($arrayParametros)
    {
        $arrayResultado = array();

        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        $strWhere = "";       
        
        try
        {
            if(isset($arrayParametros['strTipo']))
            {
                if($arrayParametros['strTipo'] == 'Todos' || empty($arrayParametros['strTipo']))
                {
                    $strWhere .= " AND (TIPO.NOMBRE_TIPO_ELEMENTO  IN (:array)
                                  OR TIPO.NOMBRE_TIPO_ELEMENTO    = :elementoSwitch
                                  AND MODELO.NOMBRE_MODELO_ELEMENTO LIKE :modeloSwitchDC
                                  AND EXISTS
                                    (SELECT 1
                                    FROM DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO
                                    WHERE ELEMENTO_ID_A = ELEMENTO.ID_ELEMENTO
                                    ))";

                    $objQuery->setParameter("array",          $arrayParametros["arrayTiposDC"]);
                    $objQuery->setParameter("elementoSwitch", 'SWITCH');
                    $objQuery->setParameter("modeloSwitchDC", 'NEXUS%');
                }
                else
                {                
                    if($arrayParametros['strTipo'] == 'NEXUS')
                    {
                        $strWhere .= " AND TIPO.NOMBRE_TIPO_ELEMENTO = :elementoSwitch
                                  AND MODELO.NOMBRE_MODELO_ELEMENTO LIKE :modeloSwitchDC
                                  AND EXISTS
                                    (SELECT 1
                                    FROM DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO
                                    WHERE ELEMENTO_ID_A = ELEMENTO.ID_ELEMENTO
                                    )";

                        $objQuery->setParameter("elementoSwitch", 'SWITCH');
                        $objQuery->setParameter("modeloSwitchDC", $arrayParametros['strTipo'].'%');
                    }    
                    else
                    {
                        $strWhere .= " AND TIPO.NOMBRE_TIPO_ELEMENTO  = :tipoElemento ";
                        $objQuery->setParameter("tipoElemento", $arrayParametros["strTipo"]);
                    }                
                }
            }

            if(isset($arrayParametros['strNombre']) && !empty($arrayParametros['strNombre']))
            {
                $strWhere .= " AND ELEMENTO.NOMBRE_ELEMENTO LIKE :nombre ";
                $objQuery->setParameter("nombre", '%'.$arrayParametros["strNombre"].'%');
            }

            if(isset($arrayParametros['strDataCenter']) && $arrayParametros['strDataCenter']!='Todos')
            {
                $strWhere .= " AND CANTON.NOMBRE_CANTON = UPPER(:datacenter) ";
                $objQuery->setParameter("datacenter", $arrayParametros['strDataCenter']);
            }

            $strSql   = " 
                            SELECT 
                                ELEMENTO.ID_ELEMENTO,
                                ELEMENTO.NOMBRE_ELEMENTO,
                                MODELO.NOMBRE_MODELO_ELEMENTO,
                                TIPO.NOMBRE_TIPO_ELEMENTO,
                                CANTON.NOMBRE_CANTON,
                                NVL(
                                (SELECT T.NOMBRE_TIPO_ELEMENTO
                                FROM 
                                  DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO RE,
                                  DB_INFRAESTRUCTURA.INFO_ELEMENTO E,
                                  DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO M,
                                  DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO T
                                WHERE RE.ELEMENTO_ID_B   = ELEMENTO.ID_ELEMENTO
                                AND RE.ELEMENTO_ID_A     = E.ID_ELEMENTO
                                AND E.MODELO_ELEMENTO_ID = M.ID_MODELO_ELEMENTO
                                AND M.TIPO_ELEMENTO_ID   = T.ID_TIPO_ELEMENTO
                                AND RE.ESTADO            = :estado
                                ),'-') TIPO_ELEMENTO_PADRE,
                                NVL(
                                (SELECT 
                                  E.NOMBRE_ELEMENTO
                                FROM 
                                  DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO RE,
                                  DB_INFRAESTRUCTURA.INFO_ELEMENTO E
                                WHERE RE.ELEMENTO_ID_B = ELEMENTO.ID_ELEMENTO
                                AND RE.ELEMENTO_ID_A   = E.ID_ELEMENTO
                                AND RE.ESTADO          = :estado
                                ),'-') NOMBRE_ELEMENTO_PADRE,
                                
                                (SELECT 
                                    DET.DESCRIPCION
                                  FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB,
                                       DB_GENERAL.ADMI_PARAMETRO_DET DET
                                  WHERE CAB.ID_PARAMETRO   = DET.PARAMETRO_ID
                                  AND CAB.ESTADO           = :estado
                                  AND DET.ESTADO           = :estado
                                  AND (DET.VALOR1           = TIPO.NOMBRE_TIPO_ELEMENTO OR MODELO.NOMBRE_MODELO_ELEMENTO LIKE DET.VALOR1||'%')
                                  AND CAB.NOMBRE_PARAMETRO = 'TIPO ELEMENTOS DE DATACENTER') AS TIPO
                            FROM 
                                DB_INFRAESTRUCTURA.INFO_ELEMENTO               ELEMENTO,
                                DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO        MODELO,
                                DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO          TIPO,
                                DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO       EMPRESA_ELEMENTO,
                                DB_INFRAESTRUCTURA.INFO_EMPRESA_ELEMENTO_UBICA ELEMENTO_UBICA,
                                DB_INFRAESTRUCTURA.INFO_UBICACION              UBICACION,
                                DB_GENERAL.ADMI_PARROQUIA                      PARROQUIA,
                                DB_GENERAL.ADMI_CANTON                         CANTON
                            WHERE ELEMENTO.ESTADO              = :estado
                              AND ELEMENTO_UBICA.EMPRESA_COD   = :codEmpresa
                              AND EMPRESA_ELEMENTO.EMPRESA_COD = :codEmpresa
                              AND ELEMENTO.ID_ELEMENTO         = EMPRESA_ELEMENTO.ELEMENTO_ID
                              AND ELEMENTO_UBICA.ELEMENTO_ID   = ELEMENTO.ID_ELEMENTO
                              AND ELEMENTO_UBICA.UBICACION_ID  = UBICACION.ID_UBICACION
                              AND UBICACION.PARROQUIA_ID       = PARROQUIA.ID_PARROQUIA
                              AND PARROQUIA.CANTON_ID          = CANTON.ID_CANTON                          
                              AND ELEMENTO.MODELO_ELEMENTO_ID  = MODELO.ID_MODELO_ELEMENTO
                              AND MODELO.TIPO_ELEMENTO_ID      = TIPO.ID_TIPO_ELEMENTO
                              $strWhere
                        ";

            $objQuery->setParameter("estado",     'Activo');
            $objQuery->setParameter("codEmpresa", $arrayParametros["strCodEmpresa"]);        

            $objRsm->addScalarResult('ID_ELEMENTO',            'idElemento',          'string');
            $objRsm->addScalarResult('NOMBRE_ELEMENTO',        'nombreElemento',      'string');
            $objRsm->addScalarResult('NOMBRE_MODELO_ELEMENTO', 'modeloElemento',      'string');
            $objRsm->addScalarResult('NOMBRE_TIPO_ELEMENTO',   'tipoElemento',        'string');
            $objRsm->addScalarResult('TIPO_ELEMENTO_PADRE',    'tipoElementoPadre',   'string');
            $objRsm->addScalarResult('NOMBRE_ELEMENTO_PADRE',  'nombreElementoPadre', 'string');
            $objRsm->addScalarResult('NOMBRE_CANTON',          'ubicacion',           'string');
            $objRsm->addScalarResult('TIPO',                   'tipo',                'string');

            $objQuery->setSQL($strSql);

            $arrayResultado = $objQuery->getArrayResult();      
        }
        catch(\Exception $e)
        {
            error_log('Consulta : getArrayElementosDataCenter '.$e->getMessage());
            return array();
        }
        
        return $arrayResultado;
    }
    
    /**
     * 
     * Método que se encarga de devolver la información de Puertos de los Nexus ( 5k, 2k )
     * 
     * @author Allan Suárez C <arsuarez@telconet.ec>
     * @version 1.0 
     * @since 06-12-2018
     * 
     * Costo 200
     * 
     * @param type $intIdInterface
     * @return type
     */
    public function getArrayInformacionPuertosDataCenter($intIdInterface)
    {
        $arrayResultado = array();

        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
       
        try
        {
            $strSql   = " SELECT 
                            ELEMENTO.ID_ELEMENTO,
                            INTERFAZ.ID_INTERFACE_ELEMENTO,
                            INTERFAZ.DESCRIPCION_INTERFACE_ELEMENTO,
                            INTERFAZ.ESTADO,
                            NVL(SERVICIO.ID_SERVICIO,0) AS ID_SERVICIO,
                            CASE 
                             WHEN INTERFAZ.ESTADO = 'not connect'
                             THEN 
                                NVL(SERVICIO.LOGIN_AUX,'-')
                             ELSE 
                              NVL(SERVICIO.LOGIN_AUX,'migrado')
                            END AS LOGIN_AUX,
                            
                            CASE 
                             WHEN INTERFAZ.ESTADO = 'not connect'
                             THEN 
                                NVL(SERVICIO.ESTADO,'-')
                             ELSE 
                              NVL(SERVICIO.ESTADO,'migrado')
                            END AS ESTADO_SERVICIO,
                            
                            CASE 
                             WHEN INTERFAZ.ESTADO = 'not connect'
                             THEN 
                                NVL(PUNTO.LOGIN,'-')
                             ELSE 
                              NVL(PUNTO.LOGIN,'migrado')
                            END AS PUNTO
                          FROM 
                            DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO,                            
                            DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO INTERFAZ
                          LEFT JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO SERVICIO_TECNICO
                          ON DB_COMERCIAL.SERVICIO_TECNICO.INTERFACE_ELEMENTO_ID = INTERFAZ.ID_INTERFACE_ELEMENTO
                          LEFT JOIN DB_COMERCIAL.INFO_SERVICIO SERVICIO
                          ON SERVICIO_TECNICO.SERVICIO_ID = SERVICIO.ID_SERVICIO
                          LEFT JOIN DB_COMERCIAL.INFO_PUNTO PUNTO
                          ON SERVICIO.PUNTO_ID = PUNTO.ID_PUNTO
                          WHERE 
                                ELEMENTO.ID_ELEMENTO      = INTERFAZ.ELEMENTO_ID
                          AND ELEMENTO.ID_ELEMENTO        = :interface
                          ORDER BY INTERFAZ.ID_INTERFACE_ELEMENTO DESC
                        ";
            
            $objQuery->setParameter("interface", $intIdInterface);        

            $objRsm->addScalarResult('ID_ELEMENTO',                    'idElemento',       'integer');
            $objRsm->addScalarResult('ID_INTERFACE_ELEMENTO',          'idInterface',      'integer');
            $objRsm->addScalarResult('DESCRIPCION_INTERFACE_ELEMENTO', 'nombreInterface',  'string');
            $objRsm->addScalarResult('ESTADO',                         'estadoInterface',  'string');
            $objRsm->addScalarResult('LOGIN_AUX',                      'loginAux',         'string');
            $objRsm->addScalarResult('ESTADO_SERVICIO',                'estadoServicio',   'string');
            $objRsm->addScalarResult('PUNTO',                          'login',            'string');
            $objRsm->addScalarResult('ID_SERVICIO',                    'idServicio',       'integer');

            $objQuery->setSQL($strSql);

            $arrayResultado = $objQuery->getArrayResult();
        }
        catch(\Exception $e)
        {
            error_log('Consulta : getArrayInformacionPuertosDataCenter '.$e->getMessage());
            return array();
        }
        
        return $arrayResultado;
    }
    
    /**
     * 
     * Método encargado de devolver los servicios que estan usando un determina espacio dentro del rack
     * 
     * @author Allan Suárez C <arsuarez@telconet.ec>
     * @version 1.0 
     * @since 11-12-2018
     * 
     * Costo 2993
     * 
     * @param type $intIdElementoDC
     * @return type
     */
    public function getArrayServicioPorUnidadDeRack($intIdElementoDC)
    {
        $arrayResultado = array();

        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        
        try
        {
            $strSql   = " SELECT 
                            SERVICIO.ID_SERVICIO,
                            PROD.DESCRIPCION_PRODUCTO,
                            SERVICIO.ESTADO,
                            PUNTO.LOGIN,
                            ELEMENTO.NOMBRE_ELEMENTO
                          FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT SERVICIO_PROD_CARACT,
                            DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA PROD_CARACT,
                            DB_COMERCIAL.ADMI_CARACTERISTICA CARACT,
                            DB_COMERCIAL.INFO_SERVICIO SERVICIO,
                            DB_COMERCIAL.INFO_PUNTO PUNTO,
                            DB_COMERCIAL.ADMI_PRODUCTO PROD,
                            DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEMENTO
                          WHERE SERVICIO_PROD_CARACT.SERVICIO_ID               = SERVICIO.ID_SERVICIO
                          AND SERVICIO.PUNTO_ID                                = PUNTO.ID_PUNTO
                          AND SERVICIO_PROD_CARACT.PRODUCTO_CARACTERISITICA_ID = PROD_CARACT.ID_PRODUCTO_CARACTERISITICA
                          AND PROD_CARACT.CARACTERISTICA_ID                    = CARACT.ID_CARACTERISTICA
                          AND PROD_CARACT.PRODUCTO_ID                          = PROD.ID_PRODUCTO
                          AND CARACT.DESCRIPCION_CARACTERISTICA                = :caracteristica
                          AND SERVICIO_PROD_CARACT.ESTADO                      = :estado
                          AND ELEMENTO.ID_ELEMENTO                             = :idElementoDc
                          AND SERVICIO_PROD_CARACT.VALOR                      LIKE :elementoDc
                        ";
            
            $objQuery->setParameter("elementoDc",     '%'.$intIdElementoDC.'%');        
            $objQuery->setParameter("idElementoDc",   $intIdElementoDC);    
            $objQuery->setParameter("estado",         'Activo');     
            $objQuery->setParameter("caracteristica", 'FACTIBILIDAD_HOUSING');     

            $objRsm->addScalarResult('ID_SERVICIO',            'idServicio',       'integer');
            $objRsm->addScalarResult('DESCRIPCION_PRODUCTO',   'descripcion',      'string');
            $objRsm->addScalarResult('ESTADO',                 'estado',           'string');
            $objRsm->addScalarResult('LOGIN',                  'login',            'string');           
            $objRsm->addScalarResult('NOMBRE_ELEMENTO',        'nombreElemento',   'string'); 

            $objQuery->setSQL($strSql);

            $arrayResultado = $objQuery->getArrayResult();
        }
        catch(\Exception $e)
        {
            error_log('Consulta : getArrayServicioPorUnidadDeRack '.$e->getMessage());
            return array();
        }
        
        return $arrayResultado;
    }
    
    /**
     * getElementosSmallByInterface
     * 
     * Método que devuelve el equipo instalado en activación de producto Small Business.
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.0 2019-08-08
     * @since 1.0
     * 
     * @param Array $arrayParametros [
     *                                intInterfaceElementoClienteId  Identificador de la interface del elemento del cliente
     *                               ]
     * @return $objElementoFin
     */
    public function getElementosSmallByInterface($arrayParametros)
    {
        try
        {
            $intInterfaceElementoClienteId = isset($arrayParametros['intInterfaceElementoClienteId'])?
                                              $arrayParametros['intInterfaceElementoClienteId']:null;
            
            $objEnlace = $this->_em->getRepository('schemaBundle:InfoEnlace')
                                   ->findOneBy( array("interfaceElementoIniId" => $intInterfaceElementoClienteId,
                                                      "estado"                 => 'Activo' ));
            // se verifica si existe enlace conectado al interface
            if(is_object($objEnlace))
            {
                // Se obtiene el interfaceElementoFinal
                $objInterfaceFin = $this->_em->getRepository('schemaBundle:InfoInterfaceElemento')
                                             ->find($objEnlace->getInterfaceElementoFinId());
                // Se obtiene el elementoFinal
                $objElementoFin = $objInterfaceFin->getElementoId();
            }
            return $objElementoFin;
        } 
        catch (\Exception $e)
        {
            error_log('Consulta : getElementosSmallByInterface '.$e->getMessage());
            return array();
        }
    }
    
    /**
     * Obtiene el nombre y el id del elemento contenedor
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 12-07-2019
     * @param type $intId
     * @param type $strValor2
     *
     * @return string $data
     * */
    public function getJsonElementoContenedor($intId, $strValor2)
    {
        $arrayData = '{"total":"0","encontrados":[]}';
        $intNivel = 0;
               
        if($intId && $strValor2)
        {
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
            
            $objRsmNivel    = new ResultSetMappingBuilder($this->_em);
            $objQueryNivel  = $this->_em->createNativeQuery(null, $objRsmNivel);
            
            $objRsmNivel3   = new ResultSetMappingBuilder($this->_em);
            $objQueryNivel3 = $this->_em->createNativeQuery(null, $objRsmNivel3);
            
            $strValorActual = $strValor2;
            //Preguntamos por el nivel del elemento
            while ($strValor2 != null)
            {
                $strValor2Nivel = $strValor2;
                //costo 3
                $objSqlNivel = "SELECT VALOR2
                            FROM DB_GENERAL.ADMI_PARAMETRO_CAB A,
                            DB_GENERAL.ADMI_PARAMETRO_DET B
                            WHERE A.NOMBRE_PARAMETRO = :strNombreParametro
                            and B.PARAMETRO_ID = A.ID_PARAMETRO
                            and B.VALOR1 = :strValor2";
                $objRsm->addScalarResult(strtoupper('VALOR2'), 'valor2', 'string');
                
                $objQuery->setParameter("strNombreParametro", 'ELEMENTOS NODOS');
                $objQuery->setParameter("strValor2", $strValor2);
                $objQuery->setParameter("estado", "Activo");
            
                $objQuery->setSQL($objSqlNivel);
                
                $objElementos = $objQuery->getResult();
                
                if($objElementos)
                {
                    foreach($objElementos as $elemento)
                    {
                        $strValor2 = $elemento['valor2'];
                        $intNivel = $intNivel + 1;
                        if ($intNivel == 2)
                        {
                            $strPadre = $strValor2Nivel;
                        }
                    }
                }
            }
            
            if($intNivel == 2)
            {
                //costo 1
                $objSqlResulta = "SELECT A.ELEMENTO_ID_A, A.ELEMENTO_ID_B, B.ID_ELEMENTO, B.MODELO_ELEMENTO_ID,
                        B.NOMBRE_ELEMENTO,C.MARCA_ELEMENTO_ID,C.TIPO_ELEMENTO_ID, D.NOMBRE_TIPO_ELEMENTO
                    FROM DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO A,
                         DB_INFRAESTRUCTURA.INFO_ELEMENTO B,
                         DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO C,
                         DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO D
                    WHERE A.ELEMENTO_ID_A = :intId AND A.ESTADO = :estado
                    AND A.ELEMENTO_ID_B = B.ID_ELEMENTO
                    AND B.MODELO_ELEMENTO_ID = C.ID_MODELO_ELEMENTO
                    AND C.TIPO_ELEMENTO_ID = D.ID_TIPO_ELEMENTO
                    AND D.NOMBRE_TIPO_ELEMENTO = :strValor2";
                $objRsm->addScalarResult(strtoupper('ID_ELEMENTO'), 'idElemento', 'integer');
                $objRsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');

                $objQuery->setParameter("intId", $intId);
                $objQuery->setParameter("strValor2", $strValor2Nivel);
                $objQuery->setParameter("estado", "Activo");
            
                $objQuery->setSQL($objSqlResulta);
                
                $objElementosResulta = $objQuery->getResult();

                if($objElementosResulta)
                {
                    $arrayElementos = array();
                    foreach($objElementosResulta as $elementoResulta)
                    {
                        $intId = $elementoResulta['idElemento'];
                            
                        //costo 1
                        $objResultaNivel2 = "SELECT A.ELEMENTO_ID_A, A.ELEMENTO_ID_B, B.ID_ELEMENTO, B.MODELO_ELEMENTO_ID,
                                B.NOMBRE_ELEMENTO,C.MARCA_ELEMENTO_ID,C.TIPO_ELEMENTO_ID, D.NOMBRE_TIPO_ELEMENTO
                            FROM DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO A,
                                DB_INFRAESTRUCTURA.INFO_ELEMENTO B,
                                DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO C,
                                DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO D
                            WHERE A.ELEMENTO_ID_A = :intId AND A.ESTADO = :estado
                                AND A.ELEMENTO_ID_B = B.ID_ELEMENTO
                                AND B.MODELO_ELEMENTO_ID = C.ID_MODELO_ELEMENTO
                                AND C.TIPO_ELEMENTO_ID = D.ID_TIPO_ELEMENTO
                                AND D.NOMBRE_TIPO_ELEMENTO = :strValor2";
                        $objRsmNivel->addScalarResult(strtoupper('ID_ELEMENTO'), 'idElemento', 'integer');
                        $objRsmNivel->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');

                        $objQueryNivel->setParameter("intId", $intId);
                        $objQueryNivel->setParameter("strValor2", $strValorActual);
                        $objQueryNivel->setParameter("estado", "Activo");
            
                        $objQueryNivel->setSQL($objResultaNivel2);
                            
                        $objElementosResultaNivel2 = $objQueryNivel->getResult();
                            
                        if($objElementosResultaNivel2)
                        {
                            foreach($objElementosResultaNivel2 as $elementoResultaNivel2)
                            {
                                $arrayElementos[] = array('idPadreElemento'     => $elementoResultaNivel2['idElemento'],
                                                          'nombrePadreElemento' => $elementoResultaNivel2['nombreElemento']);
                            }
                        }
                    }
                        $arrayData = '{"total":"' . count($objElementosResultaNivel2) . '","encontrados":' . json_encode($arrayElementos) . '}';
                }
            }
            else
            {
                if($intNivel == 3)
                {
                    //costo 1
                    $objSqlResulta = "SELECT A.ELEMENTO_ID_A, A.ELEMENTO_ID_B, B.ID_ELEMENTO, B.MODELO_ELEMENTO_ID,
                            B.NOMBRE_ELEMENTO,C.MARCA_ELEMENTO_ID,C.TIPO_ELEMENTO_ID, D.NOMBRE_TIPO_ELEMENTO
                        FROM DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO A,
                            DB_INFRAESTRUCTURA.INFO_ELEMENTO B,
                            DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO C,
                            DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO D
                        WHERE A.ELEMENTO_ID_A = :intId AND A.ESTADO = :estado
                        AND A.ELEMENTO_ID_B = B.ID_ELEMENTO
                        AND B.MODELO_ELEMENTO_ID = C.ID_MODELO_ELEMENTO
                        AND C.TIPO_ELEMENTO_ID = D.ID_TIPO_ELEMENTO
                        AND D.NOMBRE_TIPO_ELEMENTO = :strValor2";
                    $objRsm->addScalarResult(strtoupper('ID_ELEMENTO'), 'idElemento', 'integer');
                    $objRsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');

                    $objQuery->setParameter("intId", $intId);
                    $objQuery->setParameter("strValor2", $strValor2Nivel);
                    $objQuery->setParameter("estado", "Activo");
            
                    $objQuery->setSQL($objSqlResulta);
                
                    $objElementosResulta = $objQuery->getResult();

                    if($objElementosResulta)
                    {
                        $arrayElementos = array();
                        foreach($objElementosResulta as $elementoResulta)
                        {
                            $intId = $elementoResulta['idElemento'];
                            
                            //costo 1
                            $objResultaNivel2 = "SELECT A.ELEMENTO_ID_A, A.ELEMENTO_ID_B, B.ID_ELEMENTO, B.MODELO_ELEMENTO_ID,
                                    B.NOMBRE_ELEMENTO,C.MARCA_ELEMENTO_ID,C.TIPO_ELEMENTO_ID, D.NOMBRE_TIPO_ELEMENTO
                                FROM DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO A,
                                    DB_INFRAESTRUCTURA.INFO_ELEMENTO B,
                                    DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO C,
                                    DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO D
                                WHERE A.ELEMENTO_ID_A = :intId AND A.ESTADO = :estado
                                    AND A.ELEMENTO_ID_B = B.ID_ELEMENTO
                                    AND B.MODELO_ELEMENTO_ID = C.ID_MODELO_ELEMENTO
                                    AND C.TIPO_ELEMENTO_ID = D.ID_TIPO_ELEMENTO
                                    AND D.NOMBRE_TIPO_ELEMENTO = :strValor2";
                            $objRsmNivel->addScalarResult(strtoupper('ID_ELEMENTO'), 'idElemento', 'integer');
                            $objRsmNivel->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');

                            $objQueryNivel->setParameter("intId", $intId);
                            $objQueryNivel->setParameter("strValor2", $strPadre);
                            $objQueryNivel->setParameter("estado", "Activo");
            
                            $objQueryNivel->setSQL($objResultaNivel2);
                            
                            $objElementosResultaNivel2 = $objQueryNivel->getResult();
                            
                            if($objElementosResultaNivel2)
                            {
                                foreach($objElementosResultaNivel2 as $elementoResultaNivel2)
                                {
                                    $intId = $elementoResultaNivel2['idElemento'];
                            
                                    //costo 1
                                    $objResultaNivel3 = "SELECT A.ELEMENTO_ID_A, A.ELEMENTO_ID_B, B.ID_ELEMENTO, B.MODELO_ELEMENTO_ID,
                                            B.NOMBRE_ELEMENTO,C.MARCA_ELEMENTO_ID,C.TIPO_ELEMENTO_ID, D.NOMBRE_TIPO_ELEMENTO
                                        FROM DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO A,
                                            DB_INFRAESTRUCTURA.INFO_ELEMENTO B,
                                            DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO C,
                                            DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO D
                                        WHERE A.ELEMENTO_ID_A = :intId AND A.ESTADO = :estado
                                            AND A.ELEMENTO_ID_B = B.ID_ELEMENTO
                                            AND B.MODELO_ELEMENTO_ID = C.ID_MODELO_ELEMENTO
                                            AND C.TIPO_ELEMENTO_ID = D.ID_TIPO_ELEMENTO
                                            AND D.NOMBRE_TIPO_ELEMENTO = :strValor2";
                                    $objRsmNivel3->addScalarResult(strtoupper('ID_ELEMENTO'), 'idElemento', 'integer');
                                    $objRsmNivel3->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');

                                    $objQueryNivel3->setParameter("intId", $intId);
                                    $objQueryNivel3->setParameter("strValor2", $strValorActual);
                                    $objQueryNivel3->setParameter("estado", "Activo");
            
                                    $objQueryNivel3->setSQL($objResultaNivel3);
                            
                                    $objElementosResultaNivel3 = $objQueryNivel3->getResult();
                            
                                    if($objElementosResultaNivel3)
                                    {
                                        foreach($objElementosResultaNivel3 as $elementoResultaNivel3)
                                        {
                                            $arrayElementos[] = array('idPadreElemento'     => $elementoResultaNivel3['idElemento'],
                                                                      'nombrePadreElemento' => $elementoResultaNivel3['nombreElemento']);
                                        }
                                    }
                                }
                            }
                        }
                            $arrayData = '{"total":"' . count($objElementosResultaNivel2) . '","encontrados":' . json_encode($arrayElementos) . '}';
                    }
                }
                else
                {
                    //costo 1
                    $objSql = "SELECT A.ELEMENTO_ID_A, A.ELEMENTO_ID_B, B.ID_ELEMENTO, B.MODELO_ELEMENTO_ID,
                            B.NOMBRE_ELEMENTO,C.MARCA_ELEMENTO_ID,C.TIPO_ELEMENTO_ID, D.NOMBRE_TIPO_ELEMENTO
                        FROM DB_INFRAESTRUCTURA.INFO_RELACION_ELEMENTO A,
                            DB_INFRAESTRUCTURA.INFO_ELEMENTO B,
                            DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO C,
                            DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO D
                        WHERE A.ELEMENTO_ID_A = :intId AND A.ESTADO = :estado
                            AND A.ELEMENTO_ID_B = B.ID_ELEMENTO
                            AND B.MODELO_ELEMENTO_ID = C.ID_MODELO_ELEMENTO
                            AND C.TIPO_ELEMENTO_ID = D.ID_TIPO_ELEMENTO
                            AND D.NOMBRE_TIPO_ELEMENTO = :strValor2";

                    $objRsm->addScalarResult(strtoupper('ID_ELEMENTO'), 'idElemento', 'integer');
                    $objRsm->addScalarResult(strtoupper('NOMBRE_ELEMENTO'), 'nombreElemento', 'string');

                    $objQuery->setParameter("intId", $intId);
                    $objQuery->setParameter("strValor2", $strValor2Nivel);
                    $objQuery->setParameter("estado", "Activo");
            
                    $objQuery->setSQL($objSql);

                    $objElementos = $objQuery->getResult();

                    if($objElementos)
                    {
                        $arrayElementos = array();

                        foreach($objElementos as $elemento)
                        {
                           $arrayElementos[] = array('idPadreElemento'     => $elemento['idElemento'], 
                                                     'nombrePadreElemento' => $elemento['nombreElemento']);
                        }

                        $arrayData = '{"total":"' . count($objElementos) . '","encontrados":' . json_encode($arrayElementos) . '}';
                    }
                    
                }
            }
            
            return $arrayData;
        }
        return $arrayData;
    }
    
    /** getJsonElementosContenedorNodo
     *
     * Metodo que obtiene el json con los elemento contenidos en un nodo determinado
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0
     * @since 16-07-2019
     *
     * @param integer $intIdNodo
     * @param String  $strTipoElemento
     * @return json
     */
    public function getJsonElementosContenedorNodo($intIdNodo,$strUserSession,$strIpCreacion,$serviceUtil)
    {
        $arrayResultado = $this->getResultadoElementosContenedorNodo($intIdNodo,$strUserSession,$strIpCreacion,$serviceUtil);
        
        $arrayRespuesta = array('encontrados' => $arrayResultado);        
        $objJsonData       = json_encode($arrayRespuesta);
        return $objJsonData;
    }

    /** getResultadoElementosContenedorNodo
     *
     * Metodo que obtiene el resultado con los elemento contenidos en un nodo determinado
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0
     * @since 16-07-2019
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.1
     * @since 06-12-2019 - Se cambió la consulta por el estado de la tabla INFO_RELACION_ELEMENTO
     *
     * @param integer $intIdNodo
     * @return arrayResultado []
     */
    public function getResultadoElementosContenedorNodo($intIdNodo,$strUserSession,$strIpCreacion,$serviceUtil)
    {
        $arrayResultado = array();
        try
        {
            $objQuery            = $this->_em->createQuery(null);
            $objQueryNivel       = $this->_em->createQuery(null);
            $objQueryNivelMenor  = $this->_em->createQuery(null);
            $objQueryNivelMenor3 = $this->_em->createQuery(null);

            $objDql = "SELECT
                    ele.id,
                    ele.nombreElemento,
                    ele.estado,
                    ele.serieFisica,
                    ele.feCreacion,
                    ele.usrCreacion,
                    model.nombreModeloElemento,
                    tipo.nombreTipoElemento
                    FROM
                        schemaBundle:InfoRelacionElemento rel,
                        schemaBundle:InfoElemento ele,
                        schemaBundle:AdmiModeloElemento model,
                        schemaBundle:AdmiTipoElemento tipo
                    where
                        rel.elementoIdA       =  :nodo and
                        ele.id                =  rel.elementoIdB and
                        ele.modeloElementoId  =  model.id and
                        rel.estado            =  :estado and
                        model.tipoElementoId  =  tipo.id ";
        
            $objDql .= " order by tipo.nombreTipoElemento ";
            
            $objQuery->setParameter('nodo', $intIdNodo);
            $objQuery->setParameter('estado', 'Activo');
                        
            $objQuery->setDQL($objDql);
            
            $arrayContenedores = $objQuery->getResult();
            foreach($arrayContenedores as $arrayContenedor)
            {
                $arrayResponseItem = array();
                $arrayResponseItem['idElemento']       = $arrayContenedor['id'];
                $arrayResponseItem['nombreElemento']   = $arrayContenedor['nombreElemento'];
                $arrayResponseItem['estado']           = $arrayContenedor['estado'];
                $arrayResponseItem['tipoElemento']     = $arrayContenedor['nombreTipoElemento'];
                $arrayResponseItem['modeloElemento']   = $arrayContenedor['nombreModeloElemento'];
                $arrayResponseItem['serieFisica']      = $arrayContenedor['serieFisica'];
                $arrayResponseItem['feCreacion']       = $arrayContenedor['feCreacion']->format('Y-m-d H:i:s');
                $arrayResponseItem['usrCreacion']      = $arrayContenedor['usrCreacion'];
                
                $arrayResultado[] = $arrayResponseItem;
                $intContenedor    = $arrayContenedor['id'];
                
                //Preguntamos si estos elementos tienen contenidos
                $objDqlNivel = "SELECT
                    ele.id,
                    ele.nombreElemento,
                    ele.estado,
                    ele.serieFisica,
                    ele.feCreacion,
                    ele.usrCreacion,
                    model.nombreModeloElemento,
                    tipo.nombreTipoElemento
                    FROM
                        schemaBundle:InfoRelacionElemento rel,
                        schemaBundle:InfoElemento ele,
                        schemaBundle:AdmiModeloElemento model,
                        schemaBundle:AdmiTipoElemento tipo
                    where
                        rel.elementoIdA       =  :contenido and
                        ele.id                =  rel.elementoIdB and
                        ele.modeloElementoId  =  model.id and
                        ele.estado            =  :estado and
                        model.tipoElementoId  =  tipo.id ";
                $objQueryNivel->setParameter('contenido', $intContenedor);
                $objQueryNivel->setParameter('estado', 'Activo');
                        
                $objQueryNivel->setDQL($objDqlNivel);  
                
                $arrayContenidos = $objQueryNivel->getResult();
                foreach($arrayContenidos as $arrayContenido)
                {
                    $arrayResponseItem = array();
                    $arrayResponseItem['idElemento']       = $arrayContenido['id'];
                    $arrayResponseItem['nombreElemento']   = $arrayContenido['nombreElemento'];
                    $arrayResponseItem['estado']           = $arrayContenido['estado'];
                    $arrayResponseItem['tipoElemento']     = $arrayContenido['nombreTipoElemento'];
                    $arrayResponseItem['modeloElemento']   = $arrayContenido['nombreModeloElemento'];
                    $arrayResponseItem['serieFisica']      = $arrayContenido['serieFisica'];
                    $arrayResponseItem['feCreacion']       = $arrayContenido['feCreacion']->format('Y-m-d H:i:s');
                    $arrayResponseItem['usrCreacion']      = $arrayContenido['usrCreacion'];
                    
                    $arrayResultado[] = $arrayResponseItem;
                    $intContenido     = $arrayContenido['id'];
                
                    //Preguntamos si estos elementos tienen contenidos
                    $objDqlNivelMenor = "SELECT 
                            ele.id,
                            ele.nombreElemento,
                            ele.estado,
                            ele.serieFisica,
                            ele.feCreacion,
                            ele.usrCreacion,
                            model.nombreModeloElemento,
                            tipo.nombreTipoElemento
                        FROM 
                            schemaBundle:InfoRelacionElemento rel,
                            schemaBundle:InfoElemento ele,
                            schemaBundle:AdmiModeloElemento model,
                            schemaBundle:AdmiTipoElemento tipo
                        where 
                            rel.elementoIdA       =  :contenido and
                            ele.id                =  rel.elementoIdB and
                            ele.modeloElementoId  =  model.id and
                            ele.estado            =  :estado and
                            model.tipoElementoId  =  tipo.id ";
                    $objQueryNivelMenor->setParameter('contenido', $intContenido);
                    $objQueryNivelMenor->setParameter('estado', 'Activo');
                        
                    $objQueryNivelMenor->setDQL($objDqlNivelMenor);  
                
                    $objMasContenidos = $objQueryNivelMenor->getResult();
                    foreach($objMasContenidos as $objMasContenido)
                    {
                        $arrayResponseItem = array();
                        $arrayResponseItem['idElemento']       = $objMasContenido['id'];
                        $arrayResponseItem['nombreElemento']   = $objMasContenido['nombreElemento'];
                        $arrayResponseItem['estado']           = $objMasContenido['estado'];
                        $arrayResponseItem['tipoElemento']     = $objMasContenido['nombreTipoElemento'];
                        $arrayResponseItem['modeloElemento']   = $objMasContenido['nombreModeloElemento'];
                        $arrayResponseItem['serieFisica']      = $objMasContenido['serieFisica'];
                        $arrayResponseItem['feCreacion']       = $objMasContenido['feCreacion']->format('Y-m-d H:i:s');
                        $arrayResponseItem['usrCreacion']      = $objMasContenido['usrCreacion'];
                    
                        $arrayResultado[] = $arrayResponseItem;
                        $intContenido3    = $objMasContenido['id'];
                
                        //Preguntamos si estos elementos tienen contenidos
                        $objDqlNivelMenor3 = "SELECT 
                                ele.id,
                                ele.nombreElemento,
                                ele.estado,
                                ele.serieFisica,
                                ele.feCreacion,
                                ele.usrCreacion,
                                model.nombreModeloElemento,
                                tipo.nombreTipoElemento
                            FROM 
                                schemaBundle:InfoRelacionElemento rel,
                                schemaBundle:InfoElemento ele,
                                schemaBundle:AdmiModeloElemento model,
                                schemaBundle:AdmiTipoElemento tipo
                            where 
                                rel.elementoIdA       =  :contenido and
                                ele.id                =  rel.elementoIdB and
                                ele.modeloElementoId  =  model.id and
                                ele.estado            =  :estado and
                                model.tipoElementoId  =  tipo.id ";
                        $objQueryNivelMenor3->setParameter('contenido', $intContenido3);
                        $objQueryNivelMenor3->setParameter('estado', 'Activo');
                        
                        $objQueryNivelMenor3->setDQL($objDqlNivelMenor3);  
                
                        $objMasContenidos3 = $objQueryNivelMenor3->getResult();
                        foreach($objMasContenidos3 as $objMasContenido3)
                        {
                            $arrayResponseItem = array();
                            $arrayResponseItem['idElemento']       = $objMasContenido3['id'];
                            $arrayResponseItem['nombreElemento']   = $objMasContenido3['nombreElemento'];
                            $arrayResponseItem['estado']           = $objMasContenido3['estado'];
                            $arrayResponseItem['tipoElemento']     = $objMasContenido3['nombreTipoElemento'];
                            $arrayResponseItem['modeloElemento']   = $objMasContenido3['nombreModeloElemento'];
                            $arrayResponseItem['serieFisica']      = $objMasContenido3['serieFisica'];
                            $arrayResponseItem['feCreacion']       = $objMasContenido3['feCreacion']->format('Y-m-d H:i:s');
                            $arrayResponseItem['usrCreacion']      = $objMasContenido3['usrCreacion'];
                    
                            $arrayResultado[] = $arrayResponseItem;
                        }
                    }
                }
            }
        }
        catch (Exception $objEx)
        {
            $serviceUtil->insertError('Telcos+',
                                      'InfoElementoRepository->getResultadoElementosContenedorNodo',
                                      $objEx->getMessage(),
                                      $strUserSession,
                                      $strIpCreacion);
            $arrayResultado["status"]  = 'fail';
            $arrayResultado["mensaje"] = 'Error al consultar contenidos de un nodo. Notificar a Sistemas';
        }
        
        return $arrayResultado;
    }
    
    /**
     * getEquipoClienteTN
     *
     * Metodo encargado de obtener el elemento de un cliente TN
     * 
     * @param $intIdServicio => Servicio Id
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.0 30/03/2020
     * @since 1.0
     * costoQuery: 10
     * 
     */
    public function getEquipoClienteTN($intIdServicio)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        try
        {
        $strQuery       = "SELECT IE.NOMBRE_ELEMENTO NOMBRE, AME.NOMBRE_MODELO_ELEMENTO MODELO, MARCA.NOMBRE_MARCA_ELEMENTO MARCA, 
        TIPO.NOMBRE_TIPO_ELEMENTO TIPO, IE.SERIE_FISICA SERIE,(SELECT MAC_INTERFACE_ELEMENTO MAC 
        FROM DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO 
        WHERE ID_INTERFACE_ELEMENTO IN ( SELECT INTERFACE_ELEMENTO_ID FROM DB_INFRAESTRUCTURA.INFO_detalle_interface 
        WHERE DETALLE_VALOR= :idServicio) AND ESTADO != 'Eliminado') MAC
        FROM INFO_ELEMENTO IE , ADMI_MODELO_ELEMENTO AME, ADMI_MARCA_ELEMENTO MARCA, ADMI_TIPO_ELEMENTO TIPO 
        WHERE ID_ELEMENTO IN (SELECT ELEMENTO_ID FROM DB_INFRAESTRUCTURA.INFO_INTERFACE_ELEMENTO WHERE ID_INTERFACE_ELEMENTO in( 
            SELECT INTERFACE_ELEMENTO_ID FROM DB_INFRAESTRUCTURA.INFO_detalle_interface WHERE DETALLE_VALOR = :idServicio) AND ESTADO != 'Eliminado') 
        AND IE.MODELO_ELEMENTO_ID = AME.ID_MODELO_ELEMENTO
        AND AME.MARCA_ELEMENTO_ID = MARCA.ID_MARCA_ELEMENTO
        AND AME.TIPO_ELEMENTO_ID  = TIPO.ID_TIPO_ELEMENTO ";

            
        $objQuery->setParameter("idServicio", $intIdServicio);
        $objRsm->addScalarResult('NOMBRE', 'nombre','string');
        $objRsm->addScalarResult('MODELO', 'modelo','string');
        $objRsm->addScalarResult('MARCA', 'marca','string');
        $objRsm->addScalarResult('TIPO', 'tipo','string');
        $objRsm->addScalarResult('SERIE', 'serie','string');
        $objRsm->addScalarResult('MAC', 'mac','string');
        $objQuery->setSQL($strQuery);

        $arrayRespuesta["status"]   = 'ok';
        $arrayRespuesta["registros"] = $objQuery->getResult();

        }
        catch (\Exception $objException)
        {
            $arrayRespuesta["status"]  = 'fail';
            $arrayRespuesta["mensaje"] = $objException->getMessage();
        }
        return $arrayRespuesta;
    }

    /**
     * Funcion que sirve para generar json de Olt para Migración
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.1 02-10-2019
     *
     * @param  array $arrayParametros[  
     *                                  "nombreElemento"      => nombre del Olt
     *                                  "intIdElemento"       => id del Olt
     *                                  "intStart"            => comienzo del pagineo
     *                                  "intLimit"            => número de registros del pagineo                
     *                               ]
     * 
     * @return json
     */
    
    public function generarJsonOltsMigracion($arrayParametros, $arrayIndElemento)
    {
        $arrayEncontrados   = array();
        $arrayNum           = count($arrayIndElemento);
        $arrayResponseItem  = array();
        $intNum             = 0;
        for ($intI = 0; $intI < $arrayNum; ++$intI )
        {
            if ($arrayIndElemento[$intI] <> '')
            {
                $arrayParametros['intIdElemento']   = $arrayIndElemento[$intI];
                $objResultado                       = $this->getOltsMigracion($arrayParametros);
                
                $objEncontrados                     = $objResultado['intRegistros'];
                $objEncontradosTotal                = $objResultado['intTotal'];
        
                if($objEncontrados)
                {

                    $intNum = $intNum + $objEncontradosTotal;

                    foreach($objEncontrados as $objData)
                    {
                        $arrayResponseItem['idElemento']       = $objData->getId();
                        $arrayResponseItem['nombreElemento']   = $objData->getNombreElemento();
                        $intIdElemento                         = $arrayResponseItem['idElemento'];
                        $intReintento                          = 0;
                        
                        $strMensajeError      = '';
                        $strMensajeError      = str_pad($strMensajeError, 3000, " ");
                        $intConteo            = '';
                        $intConteo            = str_pad($intConteo, 3000, " ");
                        
                        
                        $objSql = "BEGIN INFRK_TRANSACCIONES.P_CONTEO_SERVICIOS( :intIdElemento, "
                        . "                                           :intReintento,"
                        . "                                           :intConteo,"
                        . "                                           :strMensajeError"
                        . "                                           ); "
                        . "END;";
                            
                        $objStmt = $this->_em->getConnection()->prepare($objSql);
                        
                        $objStmt->bindParam('intIdElemento',        $intIdElemento);
                        $objStmt->bindParam('intReintento',         $intReintento);
                        $objStmt->bindParam('intConteo',            $intConteo);
                        $objStmt->bindParam('strMensajeError',      $strMensajeError);
                        $objStmt->execute();
                
                        $arrayResponseItem['cantidad']   = $intConteo;
                        $arrayResultadoFinal[]           = $arrayResponseItem;
                    }
                }
            }
        }
        
        if ($intNum == 0)
        {
            $objFinal = '{"total":"0","encontrados":[]}';

            return $objFinal;   
        }
        else
        {
            $arrayEncontrados = array('total' => $intNum, 'encontrados' => $arrayResultadoFinal);

            $objData      = json_encode($arrayEncontrados);
            
            return $objData;
            
        }
        
    }
    
    /**
     * Funcion que sirve para consultar los Olts que tienen antivirus McAfee
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.1 02-10-2019
     *
     * @param  array $arrayParametros[  
     *                                  "strTipoElemento"     => Olt
     *                                  "strNombreElemento"   => nombre del Olt
     *                                  "intIdElemento"       => id del Olt
     *                                  "intStart"            => comienzo del pagineo
     *                                  "intLimit"            => número de registros del pagineo                
     *                               ]
     * 
     * @return object $objFinal['intRegistros', 'intTotal']
     */
    public function getOltsMigracion($arrayParametros)
    {
        $objQuery      = $this->_em->createQueryBuilder();
        $objQueryCount = $this->_em->createQueryBuilder();
        $objQuery->select('e');
        $objQuery->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?2')
            ->setParameter(2, $arrayParametros['strTipoElemento']);
        $objQuery->andWhere('e.estadoElemento <> ?3');
        $objQuery->setParameter(3, 'Eliminado');

        $objQueryCount->select('count(e.id)');
        $objQueryCount->from('schemaBundle:VistaElementos', 'e')
            ->where('e.idTipoElemento = ?2')
            ->setParameter(2, $arrayParametros['strTipoElemento']);
        $objQueryCount->andWhere('e.estadoElemento <> ?3');
        $objQueryCount->setParameter(3, 'Eliminado');

        if(isset($arrayParametros['intIdElemento']) && !empty($arrayParametros['intIdElemento']))
        {
            $objQuery->andWhere('e.id = ?1');
            $objQuery->setParameter(1, $arrayParametros['intIdElemento']);

            $objQueryCount->andWhere('e.id = ?1');
            $objQueryCount->setParameter(1, $arrayParametros['intIdElemento']);
        }
        
        //contar cuantos datos trae en total
        $intTotal = $objQueryCount->getQuery()->getSingleScalarResult();

        //datos con limits
        if(isset($arrayParametros['intStart']) && !empty($arrayParametros['intStart']))
        {
            $objQuery->setFirstResult($arrayParametros['intStart']);
        }
            
        if(isset($arrayParametros['intLimit']) && !empty($arrayParametros['intLimit']))    
        {
            $objQuery->setMaxResults($arrayParametros['intLimit']);
        }
            
        $objResultado = $objQuery->getQuery();

        $objDatos = $objResultado->getResult();
        $objFinal['intRegistros'] = $objDatos;
        $objFinal['intTotal']     = $intTotal;

        return $objFinal;
    }
    
    /**
     * getRegionPorElemtoId
     *
     * Método encargado de obtener la Región de un elemento
     * 
     * @param $intElementoId => id del elemento
     * @author David Leon <mdleon@telconet.ec>
     * @version 1.0 11/11/2019
     * @since 1.0
     * costoQuery: 11
     * 
     */
    public function getRegionPorElemtoId($intElementoId)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        try
        {
        $strQuery       = "Select Distinct 
            Ar.Nombre_Region as REGION
        From 
            DB_INFRAESTRUCTURA.Info_Empresa_Elemento_Ubica Eeu,
            DB_INFRAESTRUCTURA.Info_Ubicacion Iu,
            DB_GENERAL.Admi_Parroquia Ap,
            DB_GENERAL.Admi_Canton Ac,
            DB_GENERAL.Admi_Provincia Apr,
            DB_GENERAL.Admi_Region Ar
        Where 
            Eeu.Elemento_Id       = :elementoId
            And Eeu.Ubicacion_Id  = Iu.Id_Ubicacion 
            And Iu.Parroquia_Id   = Ap.Id_Parroquia 
            And Ap.Canton_Id      = Ac.Id_Canton
            And Apr.id_provincia  = Ac.Provincia_id
            And Ar.id_region      = Apr.region_id
            And Ap.Estado         = 'Activo'";

            
        $objQuery->setParameter("elementoId", $intElementoId);
        $objRsm->addScalarResult('REGION', 'region','string');
        $objQuery->setSQL($strQuery);

        $arrayRespuesta["status"]   = 'ok';
        $arrayRespuesta["registro"] = $objQuery->getArrayResult();
        }
        catch (\Exception $objException)
        {
            $arrayRespuesta["status"]  = 'fail';
            $arrayRespuesta["mensaje"] = $objException->getMessage();
        }
        return $arrayRespuesta;
    }
	
	/**
	 * Documentación para la función 'procesarInstalacionNAF'
	 * Función utilizada para procesar la instalación de un elemento o articulo.
	 *
	 * @author  Marlon Plúas <mpluas@telconet.ec>
	 * @version 1.0 11-11-2019
	 *
	 * @param $arrayParametros  [
	 *                          "codigoEmpresaNaf"      => código de empresa
	 *                          "codigoArticulo"        => código de articulo
	 *                          "tipoArticulo"          => tipo de articulo
	 *                          "identificacionCliente" => identificación del cliente
	 *                          "serieCpe"              => serie del CPE
	 *                          "strUsrCreacion"        => usuario de creación
	 *                          "strIpClient"           => ip cliente
	 *                          ]
	 * @param $serviceUtil      servicio para registrar los errores
	 *
	 * @return array $arrayRespuesta
	 */
	public function procesarInstalacionNAF($arrayParametros, $serviceUtil)
	{
		$arrayRespuesta = array();
		$strStatus      = "ERROR";
		$strMensaje     = "";
		try
		{
			$strMsjErrorNAF = str_repeat(' ', 1000);
			
			$strSql  = "BEGIN NAF47_TNET.AFK_PROCESOS.IN_P_PROCESA_INSTALACION(:codigoEmpresaNaf, "
			           .":codigoArticulo, :tipoArticulo, :identificacionCliente, :serieCpe, ".":cantidad, :pv_mensajeerror); END;";
			$objStmt = $this->_em->getConnection()->prepare($strSql);
			$objStmt->bindParam('codigoEmpresaNaf', $arrayParametros['codigoEmpresaNaf']);
			$objStmt->bindParam('codigoArticulo', $arrayParametros['codigoArticulo']);
			$objStmt->bindParam('tipoArticulo', $arrayParametros['tipoArticulo']);
			$objStmt->bindParam('identificacionCliente', $arrayParametros['identificacionCliente']);
			$objStmt->bindParam('serieCpe', $arrayParametros['serieCpe']);
			$objStmt->bindParam('cantidad', intval(1));
			$objStmt->bindParam('pv_mensajeerror', $strMsjErrorNAF);
			$objStmt->execute();
			$strStatus  = "OK";
			$strMensaje = $strMsjErrorNAF;
		}
		catch(\Exception $e)
		{
			$strMensaje = $e->getMessage();
			$serviceUtil->insertError('Telcos+',
			                          'PortalNetlifeCamService->procesarInstalacionCamara',
			                          $e->getMessage(),
			                          $arrayParametros["strUsrCreacion"],
			                          $arrayParametros["strIpClient"]);
		}
		$arrayRespuesta['strStatus'] = $strStatus;
		$arrayRespuesta['strMsj']    = $strMensaje;
		
		return $arrayRespuesta;
	}
    
    /**
     * Funcion que sirve para generar json de Olt para solicitud de agregar equipo
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 11-03-2020
     *
     * @param  array $arrayParametros[  
     *                                  "nombreElemento"      => nombre del Olt
     *                                  "intIdElemento"       => id del Olt
     *                                  "intStart"            => comienzo del pagineo
     *                                  "intLimit"            => número de registros del pagineo                
     *                               ]
     * 
     * @return json
     */
    
    public function generarJsonAgregarSolicitud($arrayParametros)
    {
        $arrayResultado = $this->getAgregarSolicitud($arrayParametros);        
        $objJsonData    = json_encode($arrayResultado);

        return $objJsonData;
    }
    
    /**
     * Funcion que sirve para consultar los Olts que tienen servicios para realizar solicitud de agregar equipo
     *
     * costoQuery: 192
     *  
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 11-03-2020
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.1 20-05-2020  - Se eliminó la validación que estaba por la caracteristica VALOR_EQUIPO_CPM
     * 
     * @param  array $arrayParametros[  
     *                                  "strTipoElemento"     => Olt
     *                                  "strNombreElemento"   => nombre del Olt
     *                                  "intIdElemento"       => id del Olt
     *                                  "intStart"            => comienzo del pagineo
     *                                  "intLimit"            => número de registros del pagineo                
     *                               ]
     * 
     * @return object $objFinal['intRegistros', 'intTotal']
     */
    public function getAgregarSolicitud($arrayParametros)
    {
        $arrayRespuesta['total']       = 0;
        $arrayRespuesta['encontrados'] = array();
        
        try
        {
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery    = $this->_em->createNativeQuery(null, $objRsm);
            
            $objAdmiTipSol  = $this->getEntityManager()->getRepository("schemaBundle:AdmiTipoSolicitud")
                                                                    ->findOneBy(array(  'descripcionSolicitud' => 'SOLICITUD CAMBIO PLAN MASIVO',
                                                                                        'estado'               => 'Activo'));
            $intIdTipSol    = $objAdmiTipSol->getId();
            
            $strSelect      = "SELECT SOL.SERVICIO_ID AS SERVICIO,PUN.LOGIN AS LOGIN,
                                SER.ESTADO AS ESTADO, SER.PLAN_ID AS PLAN_ID, PLN.NOMBRE_PLAN AS NOMBRE_PLAN, TEC.ELEMENTO_ID AS ELEMENTO_ID, 
                                ELEC.NOMBRE_ELEMENTO AS NOMBRE_ELEMENTO, MOD.MARCA_ELEMENTO_ID AS MARCA_ELEMENTO_ID, 
                                MAR.NOMBRE_MARCA_ELEMENTO AS NOMBRE_MARCA_ELEMENTO, 
                                ELE.MODELO_ELEMENTO_ID AS MODELO_ELEMENTO_ID,MOD.NOMBRE_MODELO_ELEMENTO AS NOMBRE_MODELO_ELEMENTO,
                                SOL.ID_DETALLE_SOLICITUD AS ID_SOLICITUD
                                FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOL
                                INNER JOIN DB_COMERCIAL.INFO_SERVICIO SER
                                ON SER.ID_SERVICIO = SOL.SERVICIO_ID
                                AND SER.ESTADO IN (:estadoServicioActivo)
                                INNER JOIN DB_COMERCIAL.INFO_PUNTO PUN
                                ON PUN.ID_PUNTO = SER.PUNTO_ID
                                INNER JOIN DB_COMERCIAL.INFO_PLAN_CAB PLN
                                ON PLN.ID_PLAN = SER.PLAN_ID 
                                INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO TEC 
                                ON TEC.SERVICIO_ID = SER.ID_SERVICIO
                                INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELEC
                                ON ELEC.ID_ELEMENTO = TEC.ELEMENTO_ID
                                INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELE
                                ON ELE.ID_ELEMENTO = TEC.ELEMENTO_CLIENTE_ID
                                INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MOD
                                ON MOD.ID_MODELO_ELEMENTO = ELE.MODELO_ELEMENTO_ID
                                INNER JOIN DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO MAR
                                ON MAR.ID_MARCA_ELEMENTO = MOD.MARCA_ELEMENTO_ID ";
            
            $objNtvQuery->setParameter('estadoServicioActivo', 'Activo');            
                        
            $strWhere       = " WHERE SOL.ESTADO = :estadoSolicitud
                                    AND SOL.TIPO_SOLICITUD_ID = :tipoSolicitud AND SOL.DETALLE_PROCESO_ID IS NULL
                                    AND ROWNUM < 9001 ";
            
            
            $objNtvQuery->setParameter('estadoSolicitud', 'Finalizada');            
            $objNtvQuery->setParameter('tipoSolicitud', $intIdTipSol);
            
            if(isset($arrayParametros['intIdElemento']) && !empty($arrayParametros['intIdElemento']))
            { 
                $strWhere .= " AND ELEC.ID_ELEMENTO = :intIdElemento ";     
                $objNtvQuery->setParameter('intIdElemento', $arrayParametros['intIdElemento']);
            }
            
            if(isset($arrayParametros['intIdModeloElemento']) && !empty($arrayParametros['intIdModeloElemento']))
            { 
                $strWhere .= " AND MOD.ID_MODELO_ELEMENTO = :intIdModeloElemento ";     
                $objNtvQuery->setParameter('intIdModeloElemento', $arrayParametros['intIdModeloElemento']);
            }
                        
            if(isset($arrayParametros['intIdPlan']) && !empty($arrayParametros['intIdPlan']))
            { 
                $strWhere .= " AND SER.PLAN_ID = :intIdPlan ";     
                $objNtvQuery->setParameter('intIdPlan', $arrayParametros['intIdPlan']);
            }
            
            $strQuerySql        = $strSelect . $strWhere;

            $objRsm->addScalarResult('SERVICIO',                    'intIdServicio',        'integer');
            $objRsm->addScalarResult('LOGIN',                       'strLogin',             'string');   
            $objRsm->addScalarResult('ESTADO',                      'strEstado',            'string');
            $objRsm->addScalarResult('PLAN_ID',                     'intIdPlan',            'integer');           
            $objRsm->addScalarResult('NOMBRE_PLAN',                 'strNombrePlan',        'string');  
            $objRsm->addScalarResult('ELEMENTO_ID',                 'intIdElemento',        'integer');
            $objRsm->addScalarResult('NOMBRE_ELEMENTO',             'strNombreElemento',    'string');
            $objRsm->addScalarResult('MARCA_ELEMENTO_ID',           'intIdMarca',           'integer');
            $objRsm->addScalarResult('NOMBRE_MARCA_ELEMENTO',       'strMarcaNombre',       'string');
            $objRsm->addScalarResult('MODELO_ELEMENTO_ID',          'intIdModelo',          'integer');
            $objRsm->addScalarResult('NOMBRE_MODELO_ELEMENTO',      'strModeloNombre',      'string');
            $objRsm->addScalarResult('ID_SOLICITUD',                'intIdSolicitud',       'integer');
            
            $objNtvQuery->setSQL($strQuerySql);
            
            $arrayResultado = $objNtvQuery->getResult();
            $intTotal = count($arrayResultado);
            
            $arrayRespuesta["total"]          = $intTotal;
            $arrayRespuesta['encontrados']    = $arrayResultado;
        } 
        catch (\Exception $objEx) 
        {
            error_log($objEx->getMessage());
            $arrayResultado["mensaje"] = 'Error al consultar contenidos para solicitud de agregar equipo. Notificar a Sistemas';
        }
        
        return $arrayRespuesta;
    }
    
    /**
     * Funcion que sirve para generar json de Olt para solicitud de agregar equipo
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 11-03-2020
     *
     * @param  array $arrayParametros[  
     *                                  "nombreElemento"      => nombre del Olt
     *                                  "intIdElemento"       => id del Olt
     *                               ]
     * 
     * @return json
     */
    
    public function generarJsonListadoOlt($arrayParametros)
    {
        $arrayResultado = $this->getListadoOlt($arrayParametros);        
        return $arrayResultado;
    }
    
    /**
     * Funcion que sirve para consultar los Olts que tienen servicios para realizar solicitud de agregar equipo
     *
     * Costo 13106
     *  
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 11-03-2020
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.1 20-05-2020 - Se eliminó la validación que estaba por la caracteristica "VALOR_EQUIPO_CPM" 
     * 
     * @param  array $arrayParametros[  
     *                                  "strTipoElemento"     => Olt
     *                                  "strNombreElemento"   => nombre del Olt
     *                                  "intIdElemento"       => id del Olt
     *                               ]
     * 
     * @return object $objFinal['intRegistros', 'intTotal']
     */
    public function getListadoOlt($arrayParametros)
    {
        $arrayRespuesta['total']       = 0;
        $arrayRespuesta['encontrados'] = array();
        
        try
        {
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery    = $this->_em->createNativeQuery(null, $objRsm);
            
            $objAdmiTipSol  = $this->getEntityManager()->getRepository("schemaBundle:AdmiTipoSolicitud")
                                                                    ->findOneBy(array(  'descripcionSolicitud' => 'SOLICITUD CAMBIO PLAN MASIVO',
                                                                                        'estado'               => 'Activo'));
            $intIdTipSol    = $objAdmiTipSol->getId();
            
            $strSelect      = "SELECT TEC.ELEMENTO_ID AS ELEMENTO_ID, ELE.NOMBRE_ELEMENTO AS NOMBRE_ELEMENTO
                                FROM DB_COMERCIAL.INFO_DETALLE_SOLICITUD SOL
                                INNER JOIN DB_COMERCIAL.INFO_SERVICIO SER
                                ON SER.ID_SERVICIO = SOL.SERVICIO_ID
                                AND SER.ESTADO IN (:estadoServicioActivo)
                                INNER JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO TEC 
                                ON TEC.SERVICIO_ID = SER.ID_SERVICIO
                                INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELE
                                ON ELE.ID_ELEMENTO = TEC.ELEMENTO_ID ";
            
            $objNtvQuery->setParameter('estadoServicioActivo', 'Activo');            
                        
            $strWhere       = " WHERE SOL.ESTADO = :estadoSolicitud
                                    AND SOL.TIPO_SOLICITUD_ID = :tipoSolicitud AND SOL.DETALLE_PROCESO_ID IS NULL 
                                    GROUP BY TEC.ELEMENTO_ID, ELE.NOMBRE_ELEMENTO ";
            
            
            $objNtvQuery->setParameter('estadoSolicitud', 'Finalizada');            
            $objNtvQuery->setParameter('tipoSolicitud', $intIdTipSol);
            
            $strQuerySql        = $strSelect . $strWhere;

            $objRsm->addScalarResult('ELEMENTO_ID',                 'idElemento',        'integer');
            $objRsm->addScalarResult('NOMBRE_ELEMENTO',             'nombreElemento',    'string');
                        
            $objNtvQuery->setSQL($strQuerySql);
            
            $arrayResultado = $objNtvQuery->getResult();
            $intTotal = count($arrayResultado);
            
            $arrayRespuesta["total"]          = $intTotal;
            $arrayRespuesta['encontrados']    = $arrayResultado;
        } 
        catch (\Exception $objEx) 
        {
            error_log($objEx->getMessage());
            $arrayResultado["mensaje"] = 'Error al consultar contenidos de Olts. Notificar a Sistemas';
        }
        
        return $arrayRespuesta;
    }
    /**
     * 
     * Metodo encargado de obtener el detalle de las máquinas virtuales creadas
     * 
     * costo 9
     * 
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.0 08-07-2020
     * 
     *
     * @param Array $arrayParametros [ intIdServicio ]
     * @return Array
     */
    public function getArrayDetalleMV($arrayParametros)
    {
        $objRsm   = new ResultSetMappingBuilder($this->_em);
        $objQuery = $this->_em->createNativeQuery(null, $objRsm);
        $strSelect         = '';
        $strFromAndWhere   = '';
        $strTipo           = '';
        
        $strSelect      = "  SELECT
                            SRD.ID_SERVICIO_RECURSO_DET ID_DETALLE,
                            CASE
                              WHEN SRC.TIPO_RECURSO NOT IN ('DISCO','MEMORIA RAM', 'PROCESADOR')
                              THEN 'SISTEMA_OPERATIVO'
                              ELSE SRC.TIPO_RECURSO
                            END TIPO,
                            SRC.ID_SERVICIO_RECURSO_CAB ID_RECURSO,
                            SRC.SERVICIO_ID ID_SERVICIO,
                            CASE
                              WHEN SRC.TIPO_RECURSO NOT IN ('DISCO','MEMORIA RAM', 'PROCESADOR')
                              THEN SRC.TIPO_RECURSO
                                ||'@'
                                ||SRC.DESCRIPCION_RECURSO
                              ELSE SRC.DESCRIPCION_RECURSO
                            END NOMBRE_RECURSO,
                            SRD.CANTIDAD USADO,
                            SRC.CANTIDAD VALOR,
                            SRC.SERVICIO_ID ID_SERVICIO";
        $strFromAndWhere = " FROM DB_COMERCIAL.INFO_SERVICIO_RECURSO_DET SRD
                            JOIN DB_COMERCIAL.INFO_SERVICIO_RECURSO_CAB SRC
                            ON SRC.ID_SERVICIO_RECURSO_CAB = SRD.SERVICIO_RECURSO_CAB_ID
                            WHERE SRD.ELEMENTO_ID          = :elementoId
                            AND SRD.ESTADO                 = 'Activo'
                            AND SRC.ESTADO                 = 'Activo'
                          ";

        $objRsm->addScalarResult('ID_DETALLE',    'idDetalle',    'integer');
        $objRsm->addScalarResult('TIPO',          'tipo',         'string');        
        $objRsm->addScalarResult('ID_RECURSO',    'idRecurso',    'integer');
        $objRsm->addScalarResult('ID_SERVICIO',   'idServicio',   'integer');
        $objRsm->addScalarResult('NOMBRE_RECURSO','nombreRecurso','string');
        $objRsm->addScalarResult('USADO',         'usado',        'integer');
        $objRsm->addScalarResult('VALOR',         'valor',         'string');
        $objRsm->addScalarResult('VALOR_CARACTERISTICA','valorCaracteristica','string');
        
        $objQuery->setParameter("elementoId",   $arrayParametros['elementoId']);
        
        for ($intI = 0; $intI < 4; ++$intI )
        {
            switch($intI)
            {
                case 0:
                    $strSelect .= ' , SRD.DESCRIPCION as VALOR_CARACTERISTICA';
                    $strTipo = ' AND   SRC.TIPO_RECURSO         = :tipo';
                    $objQuery->setParameter("tipo",   'DISCO');
                    $strSql     = $strSelect . $strFromAndWhere . $strTipo;
                    $objQuery->setSQL($strSql);
                    $arrayDetalleDisco = $objQuery->getArrayResult();
                    break;
                case 1:
                    $strSelect .= ' , NULL as VALOR_CARACTERISTICA';
                    $strTipo = ' AND   SRC.TIPO_RECURSO         = :tipo';
                    $objQuery->setParameter("tipo",   'MEMORIA RAM');
                    $strSql     = $strSelect . $strFromAndWhere . $strTipo;
                    $objQuery->setSQL($strSql);
                    $arrayDetalleMemoria = $objQuery->getArrayResult();
                    break;
                case 2:
                    $strSelect .= ' , NULL as VALOR_CARACTERISTICA';
                    $strTipo = ' AND   SRC.TIPO_RECURSO         = :tipo';
                    $objQuery->setParameter("tipo",   'PROCESADOR'); 
                    $strSql     = $strSelect . $strFromAndWhere . $strTipo;
                    $objQuery->setSQL($strSql);
                    $arrayDetalleProcesador = $objQuery->getArrayResult();
                    break;
                case 3:
                    $strSelect .= ' , NULL as VALOR_CARACTERISTICA';
                    $strTipo = " AND   SRC.TIPO_RECURSO NOT IN ('DISCO','MEMORIA RAM', 'PROCESADOR')";
                    $strSql     = $strSelect . $strFromAndWhere . $strTipo;
                    $objQuery->setSQL($strSql);
                    $arrayDetalleLicencia = $objQuery->getArrayResult();
                    break;
                default:
                    break;
            }
        }
        
                $arrayResultado[] = array(
                        
                        'arrayDetalleDisco'      => $arrayDetalleDisco,
                        'arrayDetalleProcesador' => $arrayDetalleProcesador,
                        'arrayDetalleMemoria'    => $arrayDetalleMemoria,
                        'arrayDetalleLicencia'   => $arrayDetalleLicencia
                    );
        return $arrayResultado;
    }

    /**
     * Documentación para el método 'getOltsMultiplatafroma'.
     *
     * Obtiene el listado de los olt multiplatafroma
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 25-03-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 27-07-2021 - Se agrega relación del agregador, para obtener el nombre del agregador
     *
     * @param Array $arrayParametros [
     *                                  strNombreOlt          => nombre del olt
     *                                  strNombreNodo         => nombre del nodo
     *                                  strNombreAgregador    => nombre de agregador
     *                                  strNombrePe           => nombre de pe
     *                                  strIpv6               => direccion ip
     *                                  booleanLikeNombre     => boolean para la buscqueda de los nombres por like
     *                                  strEstadoSolicitud    => estado solicitud
     *                               ]
     *
     * @return Array $arrayResultado [
     *                                  'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                  'result'    => arreglo con la información de los olt o mensaje de error
     *                               ]
     *
     * costoQuery: 44
     */
    public function getOltsMultiplatafroma($arrayParametros)
    {
        try
        {
            $booleanLikeName = isset($arrayParametros['booleanLikeNombre']) ? $arrayParametros['booleanLikeNombre'] : true;
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
            $strSql          = "SELECT SOL.ID_DETALLE_SOLICITUD ID_SOLICITUD, OLT.ID_ELEMENTO ID_OLT, NODO.ID_ELEMENTO ID_NODO,
                                OLT.NOMBRE_ELEMENTO NOMBRE_OLT, NODO.NOMBRE_ELEMENTO NOMBRE_NODO, IP.DETALLE_VALOR IPV6,
                                E_AGRE.NOMBRE_ELEMENTO NOMBRE_AGREGADOR, E_PE.NOMBRE_ELEMENTO NOMBRE_PE, SOL.ESTADO ESTADO_SOLICITUD
                            FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO OLT
                            INNER JOIN DB_COMERCIAL.INFO_DETALLE_SOLICITUD      SOL  ON SOL.ELEMENTO_ID       = OLT.ID_ELEMENTO
                            INNER JOIN DB_COMERCIAL.ADMI_TIPO_SOLICITUD         TIP  ON TIP.ID_TIPO_SOLICITUD = SOL.TIPO_SOLICITUD_ID
                            INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO IP   ON IP.ELEMENTO_ID        = OLT.ID_ELEMENTO
                            INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DET  ON DET.ELEMENTO_ID       = OLT.ID_ELEMENTO
                            INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO         NODO ON NODO.ID_ELEMENTO      = DET.DETALLE_VALOR
                            INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO D_AGRE ON D_AGRE.ELEMENTO_ID  = NODO.ID_ELEMENTO
                            INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO         E_AGRE ON E_AGRE.ID_ELEMENTO  = D_AGRE.DETALLE_VALOR
                            INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO D_PE ON D_PE.ELEMENTO_ID      = OLT.ID_ELEMENTO
                            INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO         E_PE ON E_PE.ID_ELEMENTO      = D_PE.DETALLE_VALOR
                            WHERE TIP.DESCRIPCION_SOLICITUD = :TIPO_SOLICITUD
                            AND SOL.ESTADO  != :ESTADO_ANULADO AND SOL.ESTADO != :ESTADO_ELIMINADO
                            AND OLT.ESTADO  != :ESTADO_ELIMINADO
                            AND IP.ESTADO    = :ESTADO AND IP.DETALLE_NOMBRE = :DETALLE_IP
                            AND DET.ESTADO   = :ESTADO AND DET.DETALLE_NOMBRE = :DETALLE_NODO
                            AND NODO.ESTADO != :ESTADO_ELIMINADO
                            AND D_AGRE.ESTADO = :ESTADO AND D_AGRE.DETALLE_NOMBRE = :DETALLE_AGRE
                            AND D_PE.ESTADO  = :ESTADO AND D_PE.DETALLE_NOMBRE = :DETALLE_PE";

            if($booleanLikeName)
            {
                if( isset($arrayParametros['strNombreOlt']) && !empty($arrayParametros['strNombreOlt']) )
                {
                    $strSql = $strSql." AND UPPER(OLT.NOMBRE_ELEMENTO) LIKE :NOMBRE_OLT";
                    $objNativeQuery->setParameter("NOMBRE_OLT",  '%'.strtoupper($arrayParametros['strNombreOlt']).'%');
                }
                if( isset($arrayParametros['strNombrePe']) && !empty($arrayParametros['strNombrePe']) )
                {
                    $strSql = $strSql." AND UPPER(E_PE.NOMBRE_ELEMENTO) LIKE :NOMBRE_PE";
                    $objNativeQuery->setParameter("NOMBRE_PE",   '%'.strtoupper($arrayParametros['strNombrePe']).'%');
                }
            }
            else
            {
                if( isset($arrayParametros['strNombreOlt']) && !empty($arrayParametros['strNombreOlt']) )
                {
                    $strSql = $strSql." AND OLT.NOMBRE_ELEMENTO = :NOMBRE_OLT";
                    $objNativeQuery->setParameter("NOMBRE_OLT",  $arrayParametros['strNombreOlt']);
                }
                if( isset($arrayParametros['strNombrePe']) && !empty($arrayParametros['strNombrePe']) )
                {
                    $strSql = $strSql." AND E_PE.NOMBRE_ELEMENTO = :NOMBRE_PE";
                    $objNativeQuery->setParameter("NOMBRE_PE",   $arrayParametros['strNombrePe']);
                }
            }
            if( isset($arrayParametros['strNombreNodo']) && !empty($arrayParametros['strNombreNodo']) )
            {
                $strSql = $strSql." AND UPPER(NODO.NOMBRE_ELEMENTO) LIKE :NOMBRE_NODO";
                $objNativeQuery->setParameter("NOMBRE_NODO", '%'.strtoupper($arrayParametros['strNombreNodo']).'%');
            }
            if( isset($arrayParametros['strNombreAgregador']) && !empty($arrayParametros['strNombreAgregador']) )
            {
                $strSql = $strSql." AND UPPER(E_AGRE.NOMBRE_ELEMENTO) LIKE :NOMBRE_AGREGADOR";
                $objNativeQuery->setParameter("NOMBRE_AGREGADOR", '%'.strtoupper($arrayParametros['strNombreAgregador']).'%');
            }
            if( isset($arrayParametros['strIpv6']) && !empty($arrayParametros['strIpv6']) )
            {
                $strSql = $strSql." AND UPPER(IP.DETALLE_VALOR) LIKE :DIR_IP";
                $objNativeQuery->setParameter("DIR_IP",      '%'.strtoupper($arrayParametros['strIpv6']).'%');
            }
            if( isset($arrayParametros['strEstadoSolicitud']) && !empty($arrayParametros['strEstadoSolicitud']) )
            {
                $strSql = $strSql." AND SOL.ESTADO = :strEstadoSolicitud";
                $objNativeQuery->setParameter("strEstadoSolicitud", $arrayParametros['strEstadoSolicitud']);
            }

            $strSql = $strSql." ORDER BY OLT.NOMBRE_ELEMENTO ASC";

            $objNativeQuery->setParameter("ESTADO",           'Activo');
            $objNativeQuery->setParameter("ESTADO_ANULADO",   'Anulado');
            $objNativeQuery->setParameter("ESTADO_ELIMINADO", 'Eliminado');
            $objNativeQuery->setParameter("DETALLE_PE",       'PE_ASIGNADO');
            $objNativeQuery->setParameter("DETALLE_AGRE",     'AGREGADOR_ASIGNADO');
            $objNativeQuery->setParameter("DETALLE_NODO",     'NODO_ASIGNADO');
            $objNativeQuery->setParameter("DETALLE_IP",       'IPV6');
            $objNativeQuery->setParameter("TIPO_SOLICITUD",   'SOLICITUD OLT MULTIPLATAFORMA');

            $objResultSetMap->addScalarResult('ID_SOLICITUD',     'idSolicitud',     'integer');
            $objResultSetMap->addScalarResult('ID_OLT',           'idElementoOlt',   'integer');
            $objResultSetMap->addScalarResult('ID_NODO',          'idElementoNodo',  'integer');
            $objResultSetMap->addScalarResult('NOMBRE_OLT',       'nombreOlt',       'string');
            $objResultSetMap->addScalarResult('NOMBRE_NODO',      'nombreNodo',      'string');
            $objResultSetMap->addScalarResult('NOMBRE_AGREGADOR', 'nombreAgregador', 'string');
            $objResultSetMap->addScalarResult('NOMBRE_PE',        'nombrePe',        'string');
            $objResultSetMap->addScalarResult('IPV6',             'dirIpv6',         'string');
            $objResultSetMap->addScalarResult('ESTADO_SOLICITUD', 'estadoSolicitud', 'string');

            $objNativeQuery->setSQL($strSql);
            $arrayData = $objNativeQuery->getScalarResult();

            $arrayResultado = array(
                'status' => 'OK',
                'result' => $arrayData
            );
        }
        catch (\Exception $e)
        {
            $arrayResultado = array(
                'status' => 'ERROR',
                'result' => $e->getMessage()
            );
        }
        return $arrayResultado;
    }

    /**
     *
     * Verfica que el PE exista y este activo
     *
     * @author Josué Valencia <ajvalencia@telconet.ec>
     * @version 1.0 11-11-2022
     * 
     *
     * @return Array $arrayResultado [
     *                                  'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                  'result'    => id del Info Elemento o mensaje de error
     *                               ]
     * 
     */

    public function getValidarPeTelco($strNombreElemento,$strNombreMarcaElemento,$strNombreTipoElemento)
    {
        try
        {
            $strSql = "SELECT ELE.ID_ELEMENTO 
                        FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO ELE,
                             DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MOD,
                             DB_INFRAESTRUCTURA.ADMI_MARCA_ELEMENTO  MAR,
                             DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIP
                        WHERE ELE.NOMBRE_ELEMENTO = :NOMBRE_ELEMENTO_D
                        AND MOD.ID_MODELO_ELEMENTO = ELE.MODELO_ELEMENTO_ID
                        AND MAR.ID_MARCA_ELEMENTO = MOD.MARCA_ELEMENTO_ID
                        AND TIP.ID_TIPO_ELEMENTO  = MOD.TIPO_ELEMENTO_ID
                        AND MAR.NOMBRE_MARCA_ELEMENTO = :MARCA_PARAMETRO
                        AND TIP.NOMBRE_TIPO_ELEMENTO  = :TIPO_PARAMETRO
                        AND ELE.ESTADO = :estadoCaracteristicaParam";

            $objStmt = $this->_em->getConnection()->prepare($strSql);
            $objStmt->bindValue('NOMBRE_ELEMENTO_D',$strNombreElemento);
            $objStmt->bindValue('MARCA_PARAMETRO',$strNombreMarcaElemento);
            $objStmt->bindValue('TIPO_PARAMETRO',$strNombreTipoElemento);
            $objStmt->bindValue('estadoCaracteristicaParam','Activo');
            $objStmt->execute();
            $arrayResult  = $objStmt->fetchAll();
            $strVerificador = '';
            if(count($arrayResult )>0)
            {
                $strVerificador = 'OK';
            }

            $arrayResultado = array(
                'status' => $strVerificador,
                'result' => $arrayResult [0]['ID_ELEMENTO']
            );
            

        }
        catch (\Exception $e)
        {
            $arrayResultado = array(
                'status' => 'ERROR',
                'result' => $e->getMessage()
            );
        }
        return $arrayResultado;  
    }

    /**
     *
     * Obtener valores de la Info Detalle Elemento
     *
     * @author Josué Valencia <ajvalencia@telconet.ec>
     * @version 1.0 11-11-2022
     * 
     *
     * @return Array $arrayResultado [
     *                                  'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                  'result'    => id del Info Elemento o mensaje de error
     *                               ]
     * 
     */

    public function getObtenerInfoDetalleElemento($intIdElemento,$strDetalleNombre)
    {
        try
        {
            $strSql = "SELECT DET.DETALLE_VALOR 
                        FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DET
                    WHERE DET.ELEMENTO_ID = :ID_ELEMENTO
                        AND DET.DETALLE_NOMBRE = :STR_DETALLE_NOMBRE
                        AND DET.ESTADO = :estadoCaracteristicaParam";

            $objStmt = $this->_em->getConnection()->prepare($strSql);
            $objStmt->bindValue('ID_ELEMENTO',$intIdElemento);
            $objStmt->bindValue('STR_DETALLE_NOMBRE',$strDetalleNombre);
            $objStmt->bindValue('estadoCaracteristicaParam','Activo');
            $objStmt->execute();
            $arrayResult  = $objStmt->fetchAll();
            $strVerificador = '';
            if(count($arrayResult )>0)
            {
                $strVerificador = 'OK';
            }

            $arrayResultado = array(
                'status' => $strVerificador,
                'result' => $arrayResult 
            );
            

        }
        catch (\Exception $e)
        {
            $arrayResultado = array(
                'status' => 'ERROR',
                'result' => $e->getMessage()
            );
        }
        return $arrayResultado;  
    }

    /**
     * Documentación para el método 'getEleOltNodoMultiplataforma'.
     *
     * Obtiene el listado de los olt o nodos para asignación multiplataforma
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 25-03-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 27-07-2021 - Se agrega relación del agregador al nodo
     *
     * @param Array $arrayParametros [
     *                                  intIdElemento => id del elemento
     *                                  strTipo       => tipo del elemento
     *                                  strNombre     => nombre del elemento
     *                                  strEstado     => estado del elemento
     *                                  strEstadoNot  => estado no permitido del elemento
     *                                  intLimit      => limite de la consulta
     *                                  arrayIdJurisdiccion => arreglo de id de las jurisdicciones
     *                               ]
     *
     * @return Array $arrayResultado [
     *                                  'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                  'result'    => arreglo con la información de los olt o mensaje de error
     *                               ]
     *
     * costoQuery: 60
     */
    public function getEleOltNodoMultiplataforma($arrayParametros)
    {
        try
        {
            $strDetalleMulti         = "MULTIPLATAFORMA";
            $strDetalleAgregadorAsig = "AGREGADOR_ASIGNADO";
            $arrayParametrosDetMulti = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                            'COMERCIAL',
                                                                                            '',
                                                                                            'NOMBRES PARAMETROS DETALLES MULTIPLATAFORMA',
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            '');
            if(isset($arrayParametrosDetMulti) && !empty($arrayParametrosDetMulti))
            {
                $strDetalleMulti         = isset($arrayParametrosDetMulti['valor1']) && !empty($arrayParametrosDetMulti['valor1'])
                                          ? $arrayParametrosDetMulti['valor1'] : $strDetalleMulti;
                $strDetalleAgregadorAsig = isset($arrayParametrosDetMulti['valor7']) && !empty($arrayParametrosDetMulti['valor7'])
                                          ? $arrayParametrosDetMulti['valor7'] : $strDetalleAgregadorAsig;
            }
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
            $strSelect       = "SELECT ELE.ID_ELEMENTO, ELE.NOMBRE_ELEMENTO";
            $strFrom         = " FROM DB_INFRAESTRUCTURA.VISTA_ELEMENTOS ELE";
            $strWhere        = " WHERE ELE.NOMBRE_TIPO_ELEMENTO = :NOMBRE_TIPO_ELEMENTO";

            if( isset($arrayParametros['intIdElemento']) && !empty($arrayParametros['intIdElemento']) )
            {
                $strWhere = $strWhere." AND ELE.ID_ELEMENTO = :ID_ELEMENTO";
                $objNativeQuery->setParameter("ID_ELEMENTO", $arrayParametros['intIdElemento']);
            }
            if($arrayParametros['strTipo'] == 'NODO')
            {
                $strFrom   = $strFrom." INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DET ON DET.ELEMENTO_ID = ELE.ID_ELEMENTO";
                $strWhere  = $strWhere." AND DET.ESTADO = :ESTADO_ACTIVO AND DET.DETALLE_VALOR = :DETALLE_VALOR
                                         AND DET.DETALLE_NOMBRE = :DETALLE_NOMBRE";
                $objNativeQuery->setParameter("DETALLE_NOMBRE", 'PERMITE_MULTIPLATAFORMA');
                //query para agregador y pe
                $strSelect = $strSelect.", ELE_AGRE.NOMBRE_ELEMENTO NOMBRE_ELEMENTO_AGRE";
                $strFrom   = $strFrom." INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DET_AGRE ON DET_AGRE.ELEMENTO_ID = ELE.ID_ELEMENTO
                                        INNER JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO ELE_AGRE ON ELE_AGRE.ID_ELEMENTO = DET_AGRE.DETALLE_VALOR";
                $strWhere  = $strWhere." AND DET_AGRE.ESTADO = :ESTADO_ACTIVO AND DET_AGRE.DETALLE_NOMBRE = :DETALLE_NOMBRE_AGRE";
                $objNativeQuery->setParameter("DETALLE_NOMBRE_AGRE", $strDetalleAgregadorAsig);
            }
            else if($arrayParametros['strTipo'] == 'OLT')
            {
                $strWhere  = $strWhere." AND NOT EXISTS ( SELECT 1
                                            FROM DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DET
                                            WHERE DET.ELEMENTO_ID    = ELE.ID_ELEMENTO
                                               AND DET.DETALLE_NOMBRE = :DETALLE_NOMBRE
                                               AND DET.DETALLE_VALOR  = :DETALLE_VALOR
                                               AND DET.ESTADO         = :ESTADO_ACTIVO )";
                $strWhere  = $strWhere." AND EXISTS ( SELECT 1
                                            FROM DB_GENERAL.ADMI_PARAMETRO_DET PAR_DET
                                            INNER JOIN DB_GENERAL.ADMI_PARAMETRO_CAB PAR_CAB ON PAR_CAB.ID_PARAMETRO = PAR_DET.PARAMETRO_ID
                                            WHERE PAR_DET.VALOR2            = ELE.NOMBRE_MARCA_ELEMENTO
                                               AND PAR_CAB.NOMBRE_PARAMETRO = :PARAMETRO_TECNOLOGIA
                                               AND PAR_DET.VALOR1           = :DETALLE_TECNOLOGIA
                                               AND ( PAR_DET.VALOR3 IS NULL OR PAR_DET.VALOR3 = ELE.NOMBRE_MODELO_ELEMENTO )
                                               AND PAR_CAB.ESTADO           = :ESTADO_ACTIVO
                                               AND PAR_DET.ESTADO           = :ESTADO_ACTIVO )";
                $objNativeQuery->setParameter("PARAMETRO_TECNOLOGIA", 'NUEVA_RED_GPON_TN');
                $objNativeQuery->setParameter("DETALLE_TECNOLOGIA",   'MARCA_TECNOLOGIA_PERMITIDA_GPON');
                $objNativeQuery->setParameter("DETALLE_NOMBRE", $strDetalleMulti);
            }
            if( isset($arrayParametros['strNombre']) && !empty($arrayParametros['strNombre']) )
            {
                $strWhere = $strWhere." AND ELE.NOMBRE_ELEMENTO LIKE :NOMBRE_ELEMENTO";
                $objNativeQuery->setParameter("NOMBRE_ELEMENTO", '%'.$arrayParametros['strNombre'].'%');
            }
            if( isset($arrayParametros['strEstado']) && !empty($arrayParametros['strEstado']) )
            {
                $strWhere = $strWhere." AND ELE.ESTADO = :ESTADO";
                $objNativeQuery->setParameter("ESTADO", $arrayParametros['strEstado']);
            }
            if( isset($arrayParametros['strEstadoNot']) && !empty($arrayParametros['strEstadoNot']) )
            {
                $strWhere = $strWhere." AND ELE.ESTADO != :ESTADO_NOT";
                $objNativeQuery->setParameter("ESTADO_NOT", $arrayParametros['strEstadoNot']);
            }
            if( isset($arrayParametros['arrayIdJurisdiccion']) && is_array($arrayParametros['arrayIdJurisdiccion'])
                && !empty($arrayParametros['arrayIdJurisdiccion']) )
            {
                $strWhere = $strWhere." AND ELE.ID_JURISDICCION IN (:arrayIdJurisdiccion)";
                $objNativeQuery->setParameter('arrayIdJurisdiccion', array_values($arrayParametros['arrayIdJurisdiccion']));
            }

            $strSql = $strSelect.$strFrom.$strWhere;
            if($arrayParametros['strTipo'] == 'NODO')
            {
                $strSql .= " GROUP BY ELE.ID_ELEMENTO, ELE.NOMBRE_ELEMENTO, ELE_AGRE.NOMBRE_ELEMENTO";
            }
            else
            {
                $strSql .= " GROUP BY ELE.ID_ELEMENTO, ELE.NOMBRE_ELEMENTO";
            }
            $strSql .= " ORDER BY ELE.NOMBRE_ELEMENTO ASC";

            $objNativeQuery->setParameter("NOMBRE_TIPO_ELEMENTO", $arrayParametros['strTipo']);
            $objNativeQuery->setParameter("ESTADO_ACTIVO", 'Activo');
            $objNativeQuery->setParameter("DETALLE_VALOR", 'SI');

            $objResultSetMap->addScalarResult('ID_ELEMENTO',     'id',     'integer');
            $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO', 'nombre', 'string');
            if($arrayParametros['strTipo'] == 'NODO')
            {
                $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO_AGRE', 'nombreAgregador', 'string');
            }

            $objNativeQuery->setSQL($strSql);
            $arrayData = $objNativeQuery->getScalarResult();

            $arrayResultado = array(
                'status' => 'OK',
                'result' => $arrayData
            );
        }
        catch (\Exception $e)
        {
            $arrayResultado = array(
                'status' => 'ERROR',
                'result' => $e->getMessage()
            );
        }
        return $arrayResultado;
    }

    /**
     * Documentación para el método 'generarRecursosSubredes'.
     *
     * Método para liberar los recursos de subred de factibilidad del equipo
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 25-03-2021
     *
     * @param Array $arrayParametros [
     *                                  strIdElemento   => id del elemento
     *                                  strIpSubred     => ip de la subred
     *                                  intMaskSubred   => mascara de la subred
     *                                  strUso          => uso de la subred
     *                                  serviceUtil     => service para guardar los errores
     *                                  usrCreacion     => usuario creación
     *                                  ipCreacion      => ip creación
     *                               ]
     *
     * @return Array $arrayResultado [
     *                                  'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                  'result'    => resultado de la operación
     *                               ]
     *
     * costoQuery: 19
     */
    public function generarRecursosSubredes($arrayParametros)
    {
        $serviceUtil    = $arrayParametros['serviceUtil'];
        $strUsrCreacion = $arrayParametros['usrCreacion'];
        $strIpCreacion  = $arrayParametros['ipCreacion'];
        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
            $strSql          = "DECLARE
                                    PV_MSG_ERROR VARCHAR2(200);
                                BEGIN
                                    DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.INTMPLS_CREAR_SUBREDES(
                                        PN_IDELEMENTO => :PN_IDELEMENTO,
                                        PN_ID_SUBRED_PADRE => NULL,
                                        PN_SUBRED_IP => :PN_SUBRED_IP,
                                        PN_SUBRED_MASCARA => :PN_SUBRED_MASCARA,
                                        PV_TAG => NULL,
                                        PV_USO => :PV_USO,
                                        PV_MSG_ERROR => PV_MSG_ERROR
                                    );
                                END;";

            $objNativeQuery->setParameter("PN_IDELEMENTO", $arrayParametros['strIdElemento']);
            $objNativeQuery->setParameter("PN_SUBRED_IP", $arrayParametros['strIpSubred']);
            $objNativeQuery->setParameter("PN_SUBRED_MASCARA", $arrayParametros['intMaskSubred']);
            $objNativeQuery->setParameter("PV_USO", $arrayParametros['strUso']);

            $objNativeQuery->setSQL($strSql);
            $arrayData = $objNativeQuery->getScalarResult();

            $arrayResultado = array(
                'status' => 'OK',
                'result' => $arrayData
            );
        }
        catch (\Exception $e)
        {
            if(is_object($serviceUtil))
            {
                $serviceUtil->insertError('Telcos+',
                                          'InfoElementoRepository.generarRecursosSubredes',
                                          $e->getMessage(),
                                          $strUsrCreacion,
                                          $strIpCreacion);
            }
            $arrayResultado = array(
                'status' => 'ERROR',
                'result' => $e->getMessage()
            );
        }
        return $arrayResultado;
    }

    /**
     * Documentación para el método 'getEleOltMultiplataforma'.
     *
     * Obtiene el listado de los olt multiplataforma
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.0 26-04-2021
     *
     * @param Array $arrayParametros [
     *                                  strNombre    => nombre del elemento
     *                                  intLimit     => limite de la consulta
     *                               ]
     *
     * @return Array $arrayResultado [
     *                                  'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                  'result'    => arreglo con la información de los olt o mensaje de error
     *                               ]
     *
     * costoQuery: 33
     */
    public function getEleOltMultiplataforma($arrayParametros)
    {
        try
        {
            $strDetalleMulti         = "MULTIPLATAFORMA";
            $arrayParametrosDetMulti = $this->_em->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                            'COMERCIAL',
                                                                                            '',
                                                                                            'NOMBRES PARAMETROS DETALLES MULTIPLATAFORMA',
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            '');
            if(isset($arrayParametrosDetMulti) && !empty($arrayParametrosDetMulti)
               && isset($arrayParametrosDetMulti['valor1']) && !empty($arrayParametrosDetMulti['valor1']))
            {
                $strDetalleMulti = $arrayParametrosDetMulti['valor1'];
            }
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
            $strSql          = "SELECT ELE.ID_ELEMENTO, ELE.NOMBRE_ELEMENTO FROM DB_INFRAESTRUCTURA.VISTA_ELEMENTOS ELE
                                    INNER JOIN DB_INFRAESTRUCTURA.INFO_DETALLE_ELEMENTO DET ON DET.ELEMENTO_ID = ELE.ID_ELEMENTO
                                WHERE ELE.NOMBRE_TIPO_ELEMENTO = :TIPO_ELEMENTO
                                    AND ELE.ESTADO = :ESTADO_ACTIVO
                                    AND DET.ESTADO = :ESTADO_ACTIVO AND DET.DETALLE_VALOR = :DETALLE_VALOR
                                    AND DET.DETALLE_NOMBRE = :DETALLE_NOMBRE";

            if( isset($arrayParametros['strNombre']) && !empty($arrayParametros['strNombre']) )
            {
                $strWhere = $strWhere." AND ELE.NOMBRE_ELEMENTO LIKE :NOMBRE_ELEMENTO";
                $objNativeQuery->setParameter("NOMBRE_ELEMENTO", '%'.$arrayParametros['strNombre'].'%');
            }

            $strSql .= " GROUP BY ELE.ID_ELEMENTO, ELE.NOMBRE_ELEMENTO";
            $strSql .= " ORDER BY ELE.NOMBRE_ELEMENTO ASC";

            $objNativeQuery->setParameter("TIPO_ELEMENTO",  'OLT');
            $objNativeQuery->setParameter("ESTADO_ACTIVO",  'Activo');
            $objNativeQuery->setParameter("DETALLE_VALOR",  'SI');
            $objNativeQuery->setParameter("DETALLE_NOMBRE", $strDetalleMulti);

            $objResultSetMap->addScalarResult('ID_ELEMENTO',     'id_elemento',     'integer');
            $objResultSetMap->addScalarResult('NOMBRE_ELEMENTO', 'nombre_elemento', 'string');

            $objNativeQuery->setSQL($strSql);
            $arrayData = $objNativeQuery->getScalarResult();

            $arrayResultado = array(
                'status' => 'OK',
                'result' => $arrayData
            );
        }
        catch (\Exception $e)
        {
            $arrayResultado = array(
                'status' => 'ERROR',
                'result' => $e->getMessage()
            );
        }
        return $arrayResultado;
    }

        /**
     * Documentación para el método 'getMacDesconfigurarIp'.
     *
     * Obtiene el listado de las IP asociadas a la MAC 
     *
     * @author Alberto Arias <frias@telconet.ec>
     * @version 1.0 08-09-2021
     *
     * @param Array $arrayParametros [
     *                                  strMac          => Mac ingresada por el usuario
     *                               ]
     *
     * @return Array $arrayResultado [
     *                                  'status'    => estado de respuesta de la operación 'OK' o 'ERROR',
     *                                  'result'    => arreglo con la información de las IP o mensaje de error
     *                               ]
     *
     * costoQuery: 227
     */
    public function getMacDesconfigurarIp($arrayParametros)
    {
        try
        {
            $objResultSetMap = new ResultSetMappingBuilder($this->_em);
            $objNativeQuery  = $this->_em->createNativeQuery(null, $objResultSetMap);
            $strSql          = "SELECT ip.ID_IP, CONCAT(CONCAT(pers.NOMBRES, ' '), pers.APELLIDOS) AS NOMBRE_CLIENTE, 
                          pers.IDENTIFICACION_CLIENTE, serv_prod_car.SERVICIO_ID, serv.ESTADO AS ESTADO_SERVICIO, ";

            $strSql          .="serv_prod_car.VALOR AS MAC_ONT, punto.LOGIN, elem_ont.NOMBRE_ELEMENTO AS NOMBRE_ONT, 
            ip.IP AS IP_ONT, ip.ESTADO AS ESTADO_IP, ";

            $strSql          .="serv_prod_car.ESTADO AS ESTADO_SER_PROD_CARAC, ";

            $strSql          .="elem_ont.SERIE_FISICA AS SERIE_ONT,
                          (SELECT VALOR FROM DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT scope ";

            $strSql          .="INNER JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA prod_car ON 
            (prod_car.ID_PRODUCTO_CARACTERISITICA = scope.PRODUCTO_CARACTERISITICA_ID) ";

            $strSql          .="INNER JOIN DB_COMERCIAL.ADMI_CARACTERISTICA car ON (car.ID_CARACTERISTICA = prod_car.CARACTERISTICA_ID) "; 

            $strSql          .="WHERE car.DESCRIPCION_CARACTERISTICA = 'SCOPE' AND scope.SERVICIO_ID = serv.ID_SERVICIO) AS SCOPE ";

            $strSql          .="FROM DB_COMERCIAL.INFO_PERSONA pers 
                          LEFT JOIN DB_COMERCIAL.INFO_PERSONA_EMPRESA_ROL per_emp_rol  ON (per_emp_rol.PERSONA_ID = pers.ID_PERSONA) ";

            $strSql          .="LEFT JOIN DB_COMERCIAL.INFO_EMPRESA_ROL emp_rol ON (emp_rol.ID_EMPRESA_ROL = per_emp_rol.EMPRESA_ROL_ID) ";

            $strSql          .="LEFT JOIN DB_GENERAL.ADMI_ROL rol ON (rol.ID_ROL = emp_rol.ROL_ID) ";

            $strSql          .="LEFT JOIN DB_COMERCIAL.INFO_PUNTO punto ON (punto.PERSONA_EMPRESA_ROL_ID = per_emp_rol.ID_PERSONA_ROL) ";

            $strSql          .="LEFT JOIN DB_COMERCIAL.INFO_SERVICIO serv ON (serv.PUNTO_ID = punto.ID_PUNTO) ";

            $strSql          .="LEFT JOIN DB_COMERCIAL.INFO_SERVICIO_PROD_CARACT serv_prod_car ON (serv_prod_car.SERVICIO_ID = serv.ID_SERVICIO) ";

            $strSql          .="LEFT JOIN DB_COMERCIAL.ADMI_PRODUCTO_CARACTERISTICA  prod_car ";
            
            $strSql          .=" ON (prod_car.ID_PRODUCTO_CARACTERISITICA = serv_prod_car.PRODUCTO_CARACTERISITICA_ID) ";

            $strSql          .= "LEFT JOIN DB_COMERCIAL.ADMI_CARACTERISTICA car ON (car.ID_CARACTERISTICA = prod_car.CARACTERISTICA_ID) ";

            $strSql          .= "LEFT JOIN DB_COMERCIAL.INFO_SERVICIO_TECNICO serv_tec ON (serv_tec.SERVICIO_ID = serv.ID_SERVICIO) ";

            $strSql          .= "LEFT JOIN DB_INFRAESTRUCTURA.INFO_ELEMENTO elem_ont ON (elem_ont.ID_ELEMENTO  = serv_tec.ELEMENTO_CLIENTE_ID) ";

            $strSql          .= "LEFT JOIN DB_INFRAESTRUCTURA.INFO_IP ip ON (ip.SERVICIO_ID  = serv.ID_SERVICIO) 
                          WHERE serv.ESTADO                   IN (:estado_servicio)
                          AND car.DESCRIPCION_CARACTERISTICA  IN (:tipo_mac)
                          AND rol.DESCRIPCION_ROL             = :tipo_rol
                          AND serv_prod_car.VALOR             = :MAC";

            $objNativeQuery->setParameter("MAC",              $arrayParametros['strMac']);
            $objNativeQuery->setParameter("tipo_mac",         array_values($arrayParametros['tipo_mac']));
            $objNativeQuery->setParameter("estado_servicio",  array_values($arrayParametros['estados']));
            $objNativeQuery->setParameter("tipo_rol",         "Cliente");

            $objResultSetMap->addScalarResult('ID_IP',                    'idIp',                 'integer');
            $objResultSetMap->addScalarResult('NOMBRE_CLIENTE',           'nombreCliente',        'string');
            $objResultSetMap->addScalarResult('IDENTIFICACION_CLIENTE',   'identificacionCliente','string');
            $objResultSetMap->addScalarResult('SERVICIO_ID',              'servicioId',           'integer');
            $objResultSetMap->addScalarResult('ESTADO_SERVICIO',          'estadoServicio',       'string');
            $objResultSetMap->addScalarResult('MAC_ONT',                  'macOnt',               'string');
            $objResultSetMap->addScalarResult('LOGIN',                    'login',                'string');
            $objResultSetMap->addScalarResult('NOMBRE_ONT',               'nombreOnt',            'string');
            $objResultSetMap->addScalarResult('IP_ONT',                   'ipOnt',                'string');
            $objResultSetMap->addScalarResult('ESTADO_IP',                'estadoIp',             'string');
            $objResultSetMap->addScalarResult('SERIE_ONT',                'serialOnt',            'string');
            $objResultSetMap->addScalarResult('SCOPE',                    'scope',                'string');
            $objResultSetMap->addScalarResult('ESTADO_SER_PROD_CARAC',    'estadoSPC',            'string');

            $objNativeQuery->setSQL($strSql);
            $arrayData = $objNativeQuery->getScalarResult();

            $arrayResultado = array(
                'status' => 'OK',
                'result' => $arrayData
            );
        }
        catch (\Exception $e)
        {
            $arrayResultado = array(
                'status' => 'ERROR',
                'result' => $e->getMessage()
            );
        }
        return $arrayResultado;
    }

    /**
     * Método encargado de obtener fecha registrada en la base de datos para 
     * concatenar al numero de serie automatica.
     *
     * @author Jose Daniel Giler <jdgiler@telconet.ec>
     * @version 1.0 15-11-2021 
     *
     */ 
    // jdgiler
    public function getElementoSerieAutomatica()
    {
       
        $objRsm    = new ResultSetMappingBuilder($this->_em);
        $objQuery  = $this->_em->createNativeQuery(null, $objRsm);
        $objRespuesta = 0;

        try
        {

            $strSql = "select to_char(sysdate, 'ddmmyyyyhh24miss') fecha from dual ";
            
            $objRsm->addScalarResult('FECHA','fecha','string');
        
            $objQuery->setSQL($strSql);

            $objRespuesta = $objQuery->getSingleScalarResult();

        }
        catch (\Exception $e)
        {
            error_log('InfoElementoRepository->getElementoSerieAutomatica'.$e->getMessage());
        }
        
        return $objRespuesta;
    
    }


    public function getElementoSerieNaf($strSerie)
    {
   
        $objRsm    = new ResultSetMappingBuilder($this->_em);
        $objQuery  = $this->_em->createNativeQuery(null, $objRsm);
        $objRespuesta = 0;

        try
        {

            $strSql = "select id_control, custodio_id, cantidad, tipo_custodio "
                    ." from ARAF_CONTROL_CUSTODIO s "
                    ." where S.TIPO_ARTICULO = 'Equipos' "
                    ."and S.ARTICULO_ID = '". $strSerie ."' "
                    ."and S.ESTADO = 'Asignado' "
                    ."and S.CANTIDAD > 0 ";
            
            $objRsm->addScalarResult('ID_CONTROL','id_control','integer');
            $objRsm->addScalarResult('CUSTODIO_ID','custodio_id','integer');
            $objRsm->addScalarResult('CANTIDAD','cantidad','integer');
            $objRsm->addScalarResult('TIPO_CUSTODIO','tipo_custodio','string');
        
            $objQuery->setSQL($strSql);

            $objRespuesta = $objQuery->getScalarResult();

        }
        catch (\Exception $e)
        {
            error_log('InfoElementoRepository->getElementoSerieNaf'.$e->getMessage());
        }
        
        return $objRespuesta;

    }


    public function getElementoSerieInfoElemento($strSerie)
    {
   
        $objRsm    = new ResultSetMappingBuilder($this->_em);
        $objQuery  = $this->_em->createNativeQuery(null, $objRsm);
        $objRespuesta = 0;

        try
        {

            $strSql = "select count(*) contador "
                    ." from DB_INFRAESTRUCTURA.INFO_ELEMENTO "
                    ." where serie_fisica = '". $strSerie ."' ";
            
            $objRsm->addScalarResult('CONTADOR','contador','integer');
        
            $objQuery->setSQL($strSql);

            $objRespuesta = $objQuery->getSingleScalarResult();

        }
        catch (\Exception $e)
        {
            error_log('InfoElementoRepository->getElementoSerieNaf'.$e->getMessage());
        }
        
        return $objRespuesta;

    }


    public function updateElementoSerieFisica($intIdElemento, $strSerie)
    {

        try 
        {

            $objRsm  = new ResultSetMappingBuilder($this->_em);          
            $strSql  = " UPDATE DB_INFRAESTRUCTURA.INFO_ELEMENTO "
                     . " SET SERIE_FISICA = '" . $strSerie . "' "
                     . " WHERE ID_ELEMENTO = " . $intIdElemento;        
            $objQuery = $this->_em->createNativeQuery(null, $objRsm);

            $objQuery->setSQL($strSql);
            
            $objRespuesta = $objQuery->getResult();

        }
        catch (\Exception $ex)
        {
            error_log('InfoElementoRepository->getElementoSerieNaf'.$e->getMessage());
        }
            
        return $objRespuesta;
    }



    public function getNombreNodo($intIdElemento)
    {
   
        $objRsm    = new ResultSetMappingBuilder($this->_em);
        $objQuery  = $this->_em->createNativeQuery(null, $objRsm);
        $objRespuesta = 0;

        try
        {

            $strSql = "select nombre_elemento nombreelemento "
                    ." from DB_INFRAESTRUCTURA.INFO_ELEMENTO "
                    ." where id_elemento = ". $intIdElemento;
            
            $objRsm->addScalarResult('NOMBREELEMENTO','nombreelemento','string');
        
            $objQuery->setSQL($strSql);

            $objRespuesta = $objQuery->getSingleScalarResult();

        }
        catch (\Exception $e)
        {
            error_log('InfoElementoRepository->getNombreNodo'.$e->getMessage());
        }
        
        return $objRespuesta;

    }
    
    /**
     * 
     * Genera Json de los contenidos para un elemento
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 
     * 
     * @param array $parametros
     * @return json
     */
    public function generarJsonContenido($arrayParametros)
    {
        $arrayEncontrados = array();

        $objResultado  = $this->getRegistros($arrayParametros);
        
        $intTotalRegistros = $objResultado['total'];
        $arrayRegistros    = $objResultado['encontrados'];
        

        if($intTotalRegistros !== 0)
        {
            foreach($arrayRegistros as $objData)
            {                
                $arrayEncontrados[] = array('nombreTipo' => $objData['nombreElemento']);
            }

            $objDataFinal = json_encode($arrayEncontrados);
            $objResultado = '{"total":"' . $intTotalRegistros . '","encontrados":' . $objDataFinal . '}';
            return $objResultado;
        }
        else
        {
            $objResultado = '{"total":"0","encontrados":[]}';
            return $objResultado;
        }
    }

    /**
     * Funcion que sirve para obtener los tipos de contenidos para un elemento
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 09-12-2021
     * 
     */
    public function getRegistros($arrayParametros)
    {
        $arrayRespuesta['total']       = 0;
        $arrayRespuesta['encontrados'] = array();
        
        $strElemento     = $arrayParametros['elemento'];
        $strCabParametro = $arrayParametros['nombre'];
        
        try
        {
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery    = $this->_em->createNativeQuery(null, $objRsm);
            
            $strSelect      = "SELECT VALOR1
                                FROM DB_GENERAL.ADMI_PARAMETRO_CAB CAB
                                INNER JOIN DB_GENERAL.ADMI_PARAMETRO_DET DET
                                ON CAB.ID_PARAMETRO = DET.PARAMETRO_ID
                                AND DET.DESCRIPCION = :elemento ";
            
            $objNtvQuery->setParameter('elemento', $strElemento);            
                        
            $strWhere       = " WHERE CAB.NOMBRE_PARAMETRO = :tipo ";
            
            
            $objNtvQuery->setParameter('tipo', $strCabParametro);            
                      
            $strQuerySql        = $strSelect . $strWhere;

            $objRsm->addScalarResult('VALOR1',  'nombreElemento',   'string');
                                    
            $objNtvQuery->setSQL($strQuerySql);
            
            $arrayResultado = $objNtvQuery->getResult();
            $intTotal = count($arrayResultado);
            
            $arrayRespuesta["total"]          = $intTotal;
            $arrayRespuesta['encontrados']    = $arrayResultado;
        } 
        catch (\Exception $objEx) 
        {
            error_log($objEx->getMessage());
            $arrayResultado["mensaje"] = 'Error al consultar contenidos de tipos de elementos. Notificar a Sistemas';
        }
        
        return $arrayRespuesta;
    }
    
    /**
     * 
     * Genera Json de las tarjetas y puertos relacionados al modelo del OLT
     * 
     * @author Alberto Arias <farias@telconet.ec>
     * @version 1.0 
     * 
     * @param array $parametros
     * @return json
     */
    public function getPuertoTarjetaOlt($arrayParametros)
    {
        $arrayEncontrados = array();
        $intTotalRegistros = 0;
        $strModeloElemento = $arrayParametros['strModeloElemento'];
        $strMarcaElemento  = $arrayParametros['strMarcaElemento'];
        $strTipoConsulta   = $arrayParametros['strTipoConsulta'];

        if(isset($strTipoConsulta))
        {
            $arrayTarjetaPuertoOlt = $this->_em->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->get('ADMINISTRACION_PUERTO_TARJETA_OLT',//nombre parametro cab
                                                              'TECNICO', //modulo cab
                                                              'ADMINISTRACION_PUERTO_TARJETA_OLT',//proceso cab
                                                              '', //descripcion det
                                                              $strModeloElemento,'','','','',
                                                              '18');

            foreach($arrayTarjetaPuertoOlt as $objData)
            {                
                if($strTipoConsulta === "TARJETA" && isset($objData['valor2']))
                {
                    $arrayEncontrados[] = array('tarjetaOlt' => $objData['valor2']);
                }
                else if($strTipoConsulta === "PUERTO" && isset($objData['valor3']))
                {
                    $arrayEncontrados[] = array('puertoOlt' => $objData['valor3']);
                }
            }

            $objDataFinal = json_encode($arrayEncontrados);
            $objResultado = '{"total":"' . $intTotalRegistros . '","encontrados":' . $objDataFinal . '}';
            return $objResultado;
        }
        else
        {
            $objResultado = '{"total":"0","encontrados":[]}';
            return $objResultado;
        }
    }

    /**
     * obtenerElementoNodoxTarea
     *
     * Método encargado de obtener los elementos asociados a un nodo
     * 
     * @param $arrayParams => servicioId
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.0 16/07/2022
     * 
    */
    public function obtenerElementoNodoxTarea($arrayData)
    {
        $intElementoId      = $arrayData['elementoId'];
        $serviceUtil        = $arrayData['serviceUtil'];
        $emInfraestructura  = $arrayData['emInfrastructure'];
        $objElementoxTarea  = null;
                
        try
        {       
            $objElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intElementoId);

            if (is_object($objElemento))
            {
                $strNombreModelo = $objElemento->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();
                if($strNombreModelo == "NODO")
                {
                    $objElementoxTarea = $objElemento;
                }
                else 
                {
                    $objElementoRelB = $emInfraestructura->getRepository('schemaBundle:InfoRelacionElemento')
                                                            ->findOneBy(array("elementoIdB" => $objElemento->getId(),
                                                                                "estado"      => "Activo"));
                    if (is_object($objElementoRelB))
                    {
                        
                        $objElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                            ->find($objElementoRelB->getElementoIdA());
                        
                        $strNombreModelo = $objElemento->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();
                        
                        if($strNombreModelo == "NODO")
                        {
                            $objElementoxTarea = $objElemento;
                        }
                        else
                        {

                            $objRelacionElementoRack = $emInfraestructura->getRepository('schemaBundle:InfoRelacionElemento')
                                                        ->findOneBy(array("elementoIdB" => $objElementoRelB->getElementoIdA(),
                                                                            "estado"      => "Activo"));
                            if(is_object($objRelacionElementoRack))
                            {
                                $objElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                                ->find($objRelacionElementoRack->getElementoIdA());

                                $strNombreModelo = $objElemento->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();
                                if($strNombreModelo == "NODO")
                                {
                                    $objElementoxTarea = $objElemento;
                                }
                                else
                                {
                                    $objRelacionElementoNodo = $emInfraestructura->getRepository('schemaBundle:InfoRelacionElemento')
                                                                ->findOneBy(array("elementoIdB" => $objRelacionElementoRack->getElementoIdA(),
                                                                                    "estado"      => "Activo"));
                                
                                    if(is_object($objRelacionElementoNodo))
                                    {
                                        $objElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                            ->find($objRelacionElementoNodo->getElementoIdA());                     

                                        $strNombreModelo = $objElemento->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();
                                        if($strNombreModelo == "NODO")
                                        {
                                            $objElementoxTarea = $objElemento;
                                        }
                                        else
                                        {
                                        
                                            $objRelacionElementoNodoFinal = $emInfraestructura->getRepository('schemaBundle:InfoRelacionElemento')
                                                                    ->findOneBy(array("elementoIdB" => $objRelacionElementoNodo->getElementoIdA(),
                                                                                            "estado"      => "Activo"));
            
                                            if(is_object($objRelacionElementoNodoFinal))
                                            {
                                                $objElemento = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                                        ->find($objRelacionElementoNodoFinal->getElementoIdA());
            
                                                $strNombreModelo = $objElemento->getModeloElementoId()->getTipoElementoId()->getNombreTipoElemento();
                                                if($strNombreModelo == "NODO")
                                                {
                                                    $objElementoxTarea = $objElemento;
                                                }
                                                
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
           }
        }
        catch(\Exception $e)
        {
            $objElementoxTarea = null;
            $serviceUtil->insertError("Telcos+",
                                      "InfoElementoRepository.obtenerElementoNodoxTarea",
                                      $e->getMessage(),
                                      'Telcos+',
                                      '127.0.0.1'
                                    );
        }
        return $objElementoxTarea;
    }



    /**
    * Funcion busca el numero de la serie en el Telcos y obtiene el elemento con el  
    * nombre del tipo_elemento
    *
    * @param array $arrayParametros[ "strNumeroSerie" => numero de la serie del elemento]
    *
    * @return integer $arrayRespuesta
    * @author Jenniffer Mujica <jmujica@telconet.ec>
    * @version 1.0 08-12-2022
    * 
    */
    public function getTipoElemetoTelcos($arrayParametros)
    {
        $arrayRespuesta['total']       = 0;
        $arrayRespuesta['encontrados'] = array();
        
        $strNumSerie     = $arrayParametros["strNumeroSerie"];
        $strEstado     = $arrayParametros["strEstadoElemento"];
        
        try
        {
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery    = $this->_em->createNativeQuery(null, $objRsm);
            
            $strSelect      = "SELECT ELE.ID_ELEMENTO, ELE.SERIE_FISICA, ELE.ESTADO, 
                                    ADMEL.ID_MODELO_ELEMENTO, ADTEL.NOMBRE_TIPO_ELEMENTO, ADTEL.DESCRIPCION_TIPO_ELEMENTO
                                  FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO ELE 
                                  INNER JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO ADMEL ON ELE.MODELO_ELEMENTO_ID = ADMEL.ID_MODELO_ELEMENTO
                                  INNER JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ADTEL ON ADMEL.TIPO_ELEMENTO_ID = ADTEL.ID_TIPO_ELEMENTO
                                    WHERE UPPER(ELE.SERIE_FISICA) = UPPER( :serieFisica )
                                    AND ELE.ESTADO = :estado";
            
            $objNtvQuery->setParameter('serieFisica', $strNumSerie);       
            $objNtvQuery->setParameter('estado', $strEstado);      

            $objRsm->addScalarResult('ID_ELEMENTO',                'idElemento',    'string');
            $objRsm->addScalarResult('SERIE_FISICA',               'serieFisica',   'string');
            $objRsm->addScalarResult('ESTADO',                     'estadoTelcos',  'string');
            $objRsm->addScalarResult('ID_MODELO_ELEMENTO',         'modeloElem',    'string');
            $objRsm->addScalarResult('NOMBRE_TIPO_ELEMENTO',       'nombreTipoElem','string');
            $objRsm->addScalarResult('DESCRIPCION_TIPO_ELEMENTO',  'descrTipoElem', 'string');
                                    
            $objNtvQuery->setSQL($strSelect);
            
            $arrayResultado = $objNtvQuery->getResult();
            $intTotal = count($arrayResultado);
            
            $arrayRespuesta["total"]          = $intTotal;
            $arrayRespuesta['encontrados']    = $arrayResultado;
        } 
        catch (\Exception $objEx) 
        {
            error_log($objEx->getMessage());
            $arrayResultado["mensaje"] = 'Error al consultar contenidos de tipos de elementos. Notificar a Sistemas';
        }
        
        return $arrayRespuesta;
    }

    /**
    * Funcion que busca el tipo de modelo de una serie 
    *
    * @param array $arrayParametros[ "strNumeroSerie" => numero de la serie del elemento]
    *
    * @return integer $arrayRespuesta
    * @author Jenniffer Mujica <jmujica@telconet.ec>
    * @version 1.0 08-12-2022
    * 
    */
    public function getTipoModeloSerie($arrayParametros)
    {
        $arrayRespuesta['total']       = 0;
        $arrayRespuesta['encontrados'] = array();
        
        $strNumSerie     = $arrayParametros["strNumeroSerie"];
        
        try
        {
            $objRsm         = new ResultSetMappingBuilder($this->_em);
            $objNtvQuery    = $this->_em->createNativeQuery(null, $objRsm);
            
            $strSelect      = "SELECT IAI.NUMERO_SERIE,IAI.MODELO, IAI.ESTADO AS ESTADOIAI, 
                                    ADMIEL.ID_MODELO_ELEMENTO, ADMIEL.NOMBRE_MODELO_ELEMENTO, 
                                    ADMIEL.ESTADO AS ESTADOADMIEL,
                                    ADTIPE.ID_TIPO_ELEMENTO, ADTIPE.NOMBRE_TIPO_ELEMENTO, 
                                    ADTIPE.DESCRIPCION_TIPO_ELEMENTO, ADTIPE.ESTADO AS ESTADOADTIP
                                FROM NAF47_TNET.IN_ARTICULOS_INSTALACION IAI, 
                                    DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO ADMIEL, 
                                    DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO ADTIPE
                                WHERE IAI.MODELO = ADMIEL.NOMBRE_MODELO_ELEMENTO
                                AND ADTIPE.ID_TIPO_ELEMENTO =  ADMIEL.TIPO_ELEMENTO_ID
                                AND IAI.NUMERO_SERIE = :serieFisica
                                AND ROWNUM = 1 
                                ORDER BY FECHA DESC";
            
            $objNtvQuery->setParameter('serieFisica', $strNumSerie);           

            $objRsm->addScalarResult('MODELO    ',                 'modelo',        'string');
            $objRsm->addScalarResult('NUMERO_SERIE',               'numeroSerie',   'string');
            $objRsm->addScalarResult('ESTADOIAI',                  'estadoIai',     'string');
            $objRsm->addScalarResult('ID_MODELO_ELEMENTO',         'modeloElemId',  'string');
            $objRsm->addScalarResult('NOMBRE_MODELO_ELEMENTO',     'modeloElemNom', 'string');
            $objRsm->addScalarResult('ESTADOADMIEL',               'estadoIai',     'string');
            $objRsm->addScalarResult('ID_TIPO_ELEMENTO',           'tipoElemId',    'string');
            $objRsm->addScalarResult('NOMBRE_TIPO_ELEMENTO',       'nombreTipoElem','string');
            $objRsm->addScalarResult('DESCRIPCION_TIPO_ELEMENTO',  'descrTipoElem', 'string');
            $objRsm->addScalarResult('ESTADOADTIP',                'estadoIai',     'string');

            $objNtvQuery->setSQL($strSelect);
            
            $arrayResultado = $objNtvQuery->getResult();
            $intTotal = count($arrayResultado);
            
            $arrayRespuesta["total"]          = $intTotal;
            $arrayRespuesta['encontrados']    = $arrayResultado;
        } 
        catch (\Exception $objEx) 
        {
            error_log($objEx->getMessage());
            $arrayResultado["mensaje"] = 'Error al consultar contenidos de tipos de elementos. Notificar a Sistemas';
        }
        
        return $arrayRespuesta;
    }

    /**
     * Funcion que sirve para obtener los diferentes estados de naf
     * 
     * @author Jenniffer Mujica <jmujica@telconet.ec>
     * @version 1.0 15-11-2022
     * 
     */
    public function getEstadosNaf($strNafEstado)
    {
        if($strNafEstado == "PI")
        {
            $strEstadoNafNuevo = "Pendiente Instalar";
        }
        else if($strNafEstado == "RE")
        {
            $strEstadoNafNuevo = "Retirado";
        }
        else if($strNafEstado == "IN")
        {
            $strEstadoNafNuevo = "Instalado";
        }
        else if($strNafEstado == "PR")
        {
            $strEstadoNafNuevo = "Pendiente de Retirar";
        }
        else if($strNafEstado == "IB")
        {
            $strEstadoNafNuevo = "Ingresado a bodega";
        }
        else if($strNafEstado == "NE")
        {
            $strEstadoNafNuevo = "No Entregado";
        }
        else
        {
            $strEstadoNafNuevo = "Desconocido";
        }

        return $strEstadoNafNuevo;
    }

    /**
    * Funcion que busca el elemento recibido
    *
    * @author Jeampier Carriel <jacarriel@telconet.ec>
    * @version 1.0 16-02-2023
    * 
    */
    public function getElementoBitacora($arrayParametros)
    {
        $objRsm         = new ResultSetMappingBuilder($this->_em);
        $objQuery       = $this->_em->createNativeQuery(null, $objRsm);
        try
        {
            $strQuery = "SELECT ID_ELEMENTO,NOMBRE_ELEMENTO
                        FROM db_infraestructura.info_elemento 
                        WHERE estado = :estado and upper(nombre_elemento) like :nombreNodo";

            $objQuery->setParameter("nombreNodo",strtoupper($arrayParametros['nombreNodo'].'%'));
            $objQuery->setParameter("estado", $arrayParametros['estado']);

            $objRsm->addScalarResult('ID_ELEMENTO', 'elemento_id','string');
            $objRsm->addScalarResult('NOMBRE_ELEMENTO', 'nombre_elemento','string');

            $objQuery->setSQL($strQuery);

            $arrayRespuesta["total"]   = count($objQuery->getArrayResult());
            $arrayRespuesta["registros"] = $objQuery->getArrayResult();
        }
        catch (\Exception $objException)
        {
            $arrayRespuesta["status"]  = 'fail';
            $arrayRespuesta["mensaje"] = $objException->getMessage();
        }
        
        return $arrayRespuesta;
    }

    /**
    * Funcion que retorna los datos del nodo a  usarse enla generación automática del nombre.
    *
    * @author Geovanny Cudco<acudco@telconet.ec>
    * @version 1.0 31-03-2023
    * 
    */
    public function getDatosContenedor($arrayParametros)
    {

        $objRsm                 = new ResultSetMappingBuilder($this->_em);
        $objQuery               = $this->_em->createNativeQuery(null, $objRsm);
        
        $strNombreElemento       = $arrayParametros['strNombreElemento'];                     
       
        $strSql  = "SELECT INF_ELM.ID_ELEMENTO,
                            INF_ELM.NOMBRE_ELEMENTO,
                            INF_ELM.ESTADO,
                            MDL.ID_MODELO_ELEMENTO,
                            MDL.NOMBRE_MODELO_ELEMENTO,
                            MDL.TIPO_ELEMENTO_ID,
                            TIP.ID_TIPO_ELEMENTO,       
                            MDL.DESCRIPCION_MODELO_ELEMENTO,
                            TIP.NOMBRE_TIPO_ELEMENTO
                    FROM DB_INFRAESTRUCTURA.INFO_ELEMENTO INF_ELM
                    JOIN DB_INFRAESTRUCTURA.ADMI_MODELO_ELEMENTO MDL
                        ON INF_ELM.MODELO_ELEMENTO_ID=MDL.ID_MODELO_ELEMENTO
                    JOIN DB_INFRAESTRUCTURA.ADMI_TIPO_ELEMENTO TIP
                        ON MDL.TIPO_ELEMENTO_ID=TIP.ID_TIPO_ELEMENTO    
                    WHERE UPPER(INF_ELM.NOMBRE_ELEMENTO) = UPPER(:strNombreElementoInp)";
                    
        $objQuery->setParameter("strNombreElementoInp", $strNombreElemento);    
        
        $objRsm->addScalarResult('ID_ELEMENTO', 'intIdElemento', 'integer');
        $objRsm->addScalarResult('NOMBRE_ELEMENTO', 'strNombreContenedor', 'string');
        $objRsm->addScalarResult('NOMBRE_TIPO_ELEMENTO', 'strTipoContenedor', 'string');
        $objRsm->addScalarResult('ESTADO', 'strEstado', 'string');

        $objQuery->setSQL($strSql);
        $arrayDatos = $objQuery->getScalarResult();
        
        return $arrayDatos;
    }
}   
