<?php

namespace telconet\soporteBundle\Service;

use Doctrine\ORM\EntityManager;

use Symfony\Component\Security\Acl\Exception\Exception;
use telconet\schemaBundle\Entity\AdmiAlias;
use telconet\schemaBundle\Entity\AdmiPlantilla;
use telconet\schemaBundle\Entity\InfoAliasPlantilla;
use telconet\schemaBundle\Entity\InfoCaso;
use telconet\schemaBundle\Entity\InfoDetalle;
use telconet\schemaBundle\Entity\InfoDetalleHipotesis;
use telconet\schemaBundle\Entity\InfoDetalleTareaElemento;
use telconet\schemaBundle\Entity\InfoDetalleMaterial;
use telconet\schemaBundle\Entity\InfoDetalleHistorial;
use telconet\schemaBundle\Entity\InfoCuadrillaTarea;
use telconet\schemaBundle\Entity\InfoDocumento;
use telconet\schemaBundle\Entity\InfoDocumentoComunicacion;
use telconet\schemaBundle\Entity\InfoDocumentoRelacion;
use telconet\schemaBundle\Entity\AdmiTipoDocumento;
use telconet\schemaBundle\Entity\InfoComunicacion;
use telconet\schemaBundle\Entity\TmpNotifBackbone;
use telconet\schemaBundle\Entity\InfoDetalleAsignacion;
use telconet\schemaBundle\Entity\InfoPersonaFormaContacto;
use telconet\schemaBundle\Entity\InfoDestinatario;
use telconet\schemaBundle\Entity\InfoDetalleTareaTramo;
use telconet\schemaBundle\Entity\InfoParteAfectada;
use telconet\schemaBundle\Entity\InfoParteAfectadaHist;
use telconet\schemaBundle\Entity\InfoCriterioAfectado;
use telconet\schemaBundle\Entity\InfoServicioHistorial;
use telconet\schemaBundle\Entity\InfoCasoAsignacion;
use telconet\schemaBundle\Entity\InfoCasoHistorial;
use telconet\schemaBundle\Entity\InfoCasoTiempoAsignacion;
use telconet\schemaBundle\Entity\InfoTareaTiempo;
use telconet\schemaBundle\Entity\InfoTareaTiempoAsignacion;
use telconet\schemaBundle\Entity\InfoTareaTiempoParcial;
use telconet\schemaBundle\Entity\InfoTareaSeguimiento;
use telconet\schemaBundle\Entity\InfoProgresoTarea;
use telconet\schemaBundle\Entity\AdmiDispositivoApp;
use telconet\schemaBundle\Entity\InfoHistorialIngresoApp;
use telconet\schemaBundle\Entity\InfoCasosMovil;
use telconet\schemaBundle\Form\InfoCasoType;
use telconet\schemaBundle\Entity\InfoEvento;
use telconet\schemaBundle\Entity\InfoDetalleSolHist;
use telconet\soporteBundle\Service\EnvioPlantillaService;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Exception\IOExceptionInterface;
use Symfony\Component\Finder\Finder;
use Symfony\Component\DependencyInjection\ContainerInterface as Container;
use telconet\schemaBundle\Entity\InfoReasignacionCuadrilla;
use telconet\schemaBundle\Entity\InfoTareaCaracteristica;

use telconet\schemaBundle\Entity\InfoAsignacionSolicitud;
use telconet\schemaBundle\Entity\InfoSeguimientoAsignacion;
use telconet\schemaBundle\Entity\InfoAsignacionSolicitudHist;
use telconet\schemaBundle\Entity\InfoPersonaEmpresaRolCarac;
use telconet\schemaBundle\Entity\InfoEncuesta;
use telconet\schemaBundle\Entity\InfoEncuestaPregunta;
use telconet\tecnicoBundle\Service\ProcesarImagenesService;
use telconet\tecnicoBundle\Service\DataTecnicaService;
use telconet\schemaBundle\Entity\InfoServicioProdCaract;
use telconet\schemaBundle\Entity\InfoLog;
use telconet\schemaBundle\Entity\InfoMantenimientoProgramado;

/**
 * Clase SoporteService
 *
 * Clase que maneja las Transacciones realizadas en el módulo de Soporte - Creacion Casos
 *
 * @author Edson Franco Borja. <efranco@telconet.ec>
 * @version 1.1 24-09-2015 - Se le agrega el parámetro de '$router' para poder generar rutas dentro
 *                           de la clase en la cual es invocado el service
 *
 * @author Allan Suárez C. <arsuarez@telconet.ec>
 * @version 1.0 25-06-2014
 *
 * @author Germán Valenzuela Franco. <gvalenzuela@telconet.ec>
 * @version 1.2 26-03-2018 - Se agrega las variable $serviceRestClient,$strUrlMpg,$strUrlNotifBasicHal,$strUrlNotifCambioCuadrilla,
 *                           $strUrlCambioZonaElemento,$strUrlCambioHoraTrabajo,$strUrlCambioElemZona y $strUrlAgregaElemtZona
 *                           que seran de ayuda para la comunicacion con HAL.
 * 
 * @author Carlos Julio Pérez Quizhpe <cjperez@telconet.com>
 * @version 1.3 16-06-2021 - Validación para que al cerrar un caso no se genere el informe ejecutivo automático de las tareas provenientes de Ecucert.
 * 
 */
class SoporteService {

    /**
     * @var EnvioPlantillaService
     */
    private $envioPlantilla;
    /**
     * @var \Doctrine\ORM\EntityManager
     */
    private $emComercial;
    /**
     * @var ProcesarImagenesService
     */
    private $emTecnico;
    /**
     * @var \Doctrine\ORM\EntityManager
     */
    private $emSoporte;
    /**
     * @var \Doctrine\ORM\EntityManager
     */
    private $emInfraestructura;
    /**
     * @var \Doctrine\ORM\EntityManager
     */
    private $emComunicacion;
    /**
     * @var \Doctrine\ORM\EntityManager
     */
    private $emFinanciero;
    /**
     * @var \Doctrine\ORM\EntityManager
     */
    private $emGeneral;

    /**
     * string $host
     */
    private $host;

    /**
     * string $path
     */
    private $path;

    /**
     * @var \Symfony\Component\Routing\Router
     */
    private $router;

    /**
     * service $serviceUtil
     */
    private $serviceUtil;

    /**
     * service $serviceUtil
     */
    private $serviceRestClient;

    /**
     * string $strUrlMpg
     */
    private $strUrlMpg;

    /**
     * string $strUrlNotifBasicHal
     */
    private $strUrlNotifBasicHal;

    /**
     * string $strUrlNotifCambioCuadrilla
     */
    private $strUrlNotifCambioCuadrilla;

    /**
     * string $strUrlNotifCambioCuadrilla
     */
    private $strUrlCambioZonaElemento;

    /**
     * string $strUrlCambioHoraTrabajo
     */
    private $strUrlCambioHoraTrabajo;

    /**
     * string $strUrlCambioElemZona
     */
    private $strUrlCambioElemZona;

    /**
     * string $strUrlAgregaElemtZona
     */
    private $strUrlAgregaElemtZona;

    /**
     * string $strUrlRepLaboresDiariasNoc
     */
    private $strUrlRepLaboresDiariasNoc;

    /**
     * string $strUrsrSoporte
     */
    private $strUrsrSoporte;
    
    /**
     * string $strPassSoporte
     */
    private $strPassSoporte;
    
    /**
     * string $strDnsSoporte
     */
     private $strDnsSoporte;

    /**
     * string $strFcmAccessKey
     */
    private $strFcmAccessKey;

    /**
     * string $strWebPushPathIcon
     */
    private $strWebPushPathIcon;

    /**
     * string $strImageServer
     */
    private $strImageServer;

    /**
     * object $objProcesoService
     */
    private $objProcesoService;

     /**
     * object $objTokenCasService
     */
    private $objTokenCasService;

    /**
     * object $objServiceSoporte
     */
    private $objServiceSoporte;

    /**
     * string $strUrlListaUltimoPuntoPor
     */
    private $strUrlListaUltimoPuntoPor;

    /**
     * string $strUrlNotificacionTraking
     */
    private $strUrlNotificacionTraking;

        /**
     * string $strUrlTokenCas
     */
    private $strUrlTokenCas;
    
        /**
     * string $strUsuarioToken
     */
    private $strUsuarioToken;

        /**
     * string $strPasswordToken
     */
    private $strPasswordToken;

        /**
     * string $strApiKeyToken
     * 
     */
    private $strApiKeyToken;
     /**
     * string $strUrlValidaEnlace
     */
    private $strUrlValidaEnlace;
    /**
     * string $strUrlCalidadInstalacion
     */
    private $strUrlCalidadInstalacion;

    /**
     * string $strPathJava
     */
    private $strPathJava;

    /**
     * string $strScriptPathJava
     */
    private $strScriptPathJava;

    /**
     * string $strApiSmsUrlToken
     */
    private $strApiSmsUrlToken;

    /**
     * string $strApiSmsUrl
     */
    private $strApiSmsUrl;

    /**
     * string $strApiSmsUserNameMd
     */
    private $strApiSmsUserNameMd;

    /**
     * string $strApiSmsPasswordMd
     */
    private $strApiSmsPasswordMd;

    /**
     * string $strApiSmsSourceNameMd
     */
    private $strApiSmsSourceNameMd;

    private $container;

    private $strUrlTokenAutorizacion;

     /**
     * string $strSmsMsUrl
     */
    private $strSmsMsUrl;

     /**
     * string $strCodEnSeguimento
     */
    private $strCodEnSeguimento;


         /**
     * string $strCodMdSeguimento
     */
    private $strCodMdSeguimento;


          /**
     * string $strBanderaSmsComunicacion
     */
    private $strBanderaSmsComunicacion;

    /**
     * Documentación para la función 'setDependencies'
     *
     * Función que agrega dependencias usadas dentro de la clase SoporteService
     *
     * @param ContainerInterface $container
     *
     * @author Edson Franco Borja. <efranco@telconet.ec>
     * @version 1.1 24-09-2015 - Se le inserta como dependencia la variable '$router'
     *
     * @version 1.0 Versión Inicial
     *
     * @author Germán Valenzuela Franco. <gvalenzuela@telconet.ec>
     * @version 1.2 26-03-2018 - Se inserta como dependencia las variables creadas para la comunicacion con hal.
     *                           serviceRestClient,strUrlMpg,strUrlNotifBasicHal,strUrlNotifCambioCuadrilla,strUrlCambioZonaElemento,
     *                           strUrlCambioHoraTrabajo,strUrlCambioElemZona y strUrlAgregaElemtZona.
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 06-07-2018 Se eliminan services por error de referencia circular
     * 
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.4 - Se ingresan como dependencias las variables creadas para el ingreso de incidencias por ECUCERT
     *                  $strUrsrSoporte,$strPassSoporte y $strDnsSoporte
     * @since 1.3
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.3 10-09-2021 Se agragan dos parametros para obtener url de web service
     */
    public function setDependencies(\Symfony\Component\DependencyInjection\ContainerInterface $container)
    {
        $this->envioPlantilla             = $container->get('soporte.EnvioPlantilla');
        $this->emComercial                = $container->get('doctrine.orm.telconet_entity_manager');
        $this->emComunicacion             = $container->get('doctrine.orm.telconet_comunicacion_entity_manager');
        $this->emInfraestructura          = $container->get('doctrine.orm.telconet_infraestructura_entity_manager');
        $this->emSoporte                  = $container->get('doctrine.orm.telconet_soporte_entity_manager');
        $this->emFinanciero               = $container->get('doctrine.orm.telconet_financiero_entity_manager');
        $this->emGeneral                  = $container->get('doctrine.orm.telconet_general_entity_manager');
        $this->emTecnico                  = $container->get('tecnico.ProcesarImagenes');
        $this->serviceUtil                = $container->get('schema.Util');
        $this->host                       = $container->getParameter('host_scripts');
        $this->path                       = $container->getParameter('path_telcos');
        $this->router                     = $container->get('router');
        $this->serviceRestClient          = $container->get('schema.RestClient');
        $this->strUrlMpg                  = $container->getParameter('ws_hal_confirmaAsignacionAutMpg');
        $this->strUrlNotifBasicHal        = $container->getParameter('ws_hal_notificaciones_basicas');
        $this->strUrlNotifCambioCuadrilla = $container->getParameter('ws_hal_notifica_cuadrilla_cambio');
        $this->strUrlCambioZonaElemento   = $container->getParameter('ws_hal_notifica_cambioZona_elemt');
        $this->strUrlCambioHoraTrabajo    = $container->getParameter('ws_hal_notifica_cambio_horas');
        $this->strUrlAgregaElemtZona      = $container->getParameter('ws_hal_notifica_elementos_zona');
        $this->strUrlCambioElemZona       = $container->getParameter('ws_hal_notifica_elem_camb_zona');
        $this->strUrlReprogramarPlanif    = $container->getParameter('ws_hal_reprogramar_planificacion');
        $this->strUrlCambioZonaPlanif     = $container->getParameter('ws_hal_cambio_zona_planificacion');
        $this->strUrlNotifCancelarSug     = $container->getParameter('ws_hal_notifica_cancelar_sugerencia');
        $this->strUrlRepLaboresDiariasNoc = $container->getParameter('ws_reporte_labores_diarias_noc'); 
        $this->strUrsrSoporte             = $container->getParameter('user_soporte');
        $this->strPassSoporte             = $container->getParameter('passwd_soporte');
        $this->strDnsSoporte              = $container->getParameter('database_dsn');
        $this->strFcmAccessKey            = $container->getParameter('fcm_access_key');
        $this->strImageServer             = $container->getParameter('imageServer');
        $this->strWebPushPathIcon         = $container->getParameter('webpush_agente_path_icono');
        $this->strUrlListaUltimoPuntoPor  = $container->getParameter('UrlListaUltimoPuntoPor');
        $this->strUrlNotificacionTraking  = $container->getParameter('UrlwsNotificacionTraking');
        $this->strUrlTokenCas            = $container->getParameter('ws_token_cas_url');
        $this->strUsuarioToken           = $container->getParameter('username_cas');
        $this->strPasswordToken          = $container->getParameter('password_cas');
        $this->strApiKeyToken            = $container->getParameter('apiKey_cas');
        $this->objProcesoService          = $container->get('soporte.ProcesoService');
        $this->objServiceSoporte          = $container->get('soporte.SoporteService');
        $this->objTokenCasService         = $container->get('seguridad.TokenCas');
        $this->strUrlValidaEnlace         = $container->getParameter('ws_hal_validaEnlaceHal');
        $this->strUrlCalidadInstalacion   = $container->getParameter('ws_rda_middleware_url');
        $this->strPathJava                = $container->getParameter('path_java_soporte');
        $this->strScriptPathJava          = $container->getParameter('path_script_java_soporte');
        $this->strApiSmsUrlToken          = $container->getParameter('comunicacion.api_sms_url_token');
        $this->strApiSmsUrl               = $container->getParameter('comunicacion.api_sms_url_envio');
        $this->strApiSmsUserNameMd        = $container->getParameter('comunicacion.api_sms_username_MD');
        $this->strApiSmsPasswordMd        = $container->getParameter('comunicacion.api_sms_password_MD');
        $this->strApiSmsSourceNameMd      = $container->getParameter('comunicacion.api_sms_source_name_MD');
        $this->container                  = $container;
        $this->strUrlTokenAutorizacion    = $container->getParameter('ws_token_autorizacion_url');
        $this->strSmsMsUrl                = $container->getParameter('notification.sms_ms_url_send');
        $this->strCodEnSeguimento         = $container->getParameter('notification.cod_sms_en_seguimiento');
        $this->strCodMdSeguimento         = $container->getParameter('notification.cod_sms_md_seguimiento');
        $this->strBanderaSmsComunicacion  = $container->getParameter('notification.bandera_sms_notificacion');
    }

    /**
     * Documentación para creaTareaPorProducto.
     * Obtiene los productos que generan Tareas al realizar acciones como "CONFIRMACIÓN", "REACTIVACIÓN", "CORTE", "CANCELACIÓN". Según el parámetro.
     * El parámetro obtiene la personaEmpresaRolId según el cantonId al que pertenece el cliente. Por defecto GYE.
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.0
     * @since 24-03-2018
     * 
     */
    public function creaTareaPorProducto($arrayParametros)
    {
        try
        {
            //Obtengo el cantón del login en sesión.
            $arrayCanton = $this->emComercial->getRepository("schemaBundle:AdmiCanton")
                    ->getCantonesByPuntoClienteId(array($arrayParametros["arrayPuntoId"]["id"]));
            //Si es UIO
            if($arrayCanton[0]['id'] != 178)
            {
                $arrayParametros["valor5ParametroDet"] = 75;
            }
            else
            {
                $arrayParametros["valor5ParametroDet"] = 178;
            }
            $objDQL       = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                 ->getDql($arrayParametros["nombreParametroCab"],
                                          $arrayParametros["moduloParametroCab"],
                                          $arrayParametros["procesoParametroCab"],
                                          $arrayParametros["descripcionParametroDet"],
                                          $arrayParametros["valor1ParametroDet"],
                                          null,
                                          null,
                                          null,
                                          $arrayParametros["valor5ParametroDet"],
                                          $arrayParametros["intIdEmpresa"]);
            $arrayParamtroDet  = $objDQL->getOneOrNullResult();

            //Si el producto está parametrizado, casocontrario no ejecuta nada.
            if($arrayParamtroDet)
            {
                $objProducto                            = $this->emComercial->getRepository("schemaBundle:AdmiProducto")
                                                            ->find($arrayParametros["valor1ParametroDet"]);
                $arrayParametros["strObservacionTarea"] = "Se realiza el proceso de " . $arrayParametros["descripcionParametroDet"] . " del servicio "
                                                        . "correspondiente al producto " . $objProducto->getDescripcionProducto()
                                                        . " del punto " . $arrayParametros["arrayPuntoId"]["login"]
                                                        . (is_null($arrayParametros["strObservacionTarea"]) ?
                                                                "" : " | " . $arrayParametros["strObservacionTarea"]);
                //Busco el nombre de la tarea y el proceso
                $intIdTarea     = $arrayParamtroDet['valor4'];
                $objAdmiTarea   = $this->emSoporte->getRepository("schemaBundle:AdmiTarea")->find($intIdTarea);
                $objProcesoId   = $this->emSoporte->getRepository("schemaBundle:AdmiProceso")->find($objAdmiTarea->getProcesoId()->getId());

                //Lleno los parámetros restantes
                $arrayParametros["strNombreTarea"]         = $objAdmiTarea->getNombreTarea();
                $arrayParametros["strNombreProceso"]       = $objProcesoId->getNombreProceso();
                $arrayParametros["intIdCaso"]              = null;
                $arrayParametros["intIdPersonaEmpresaRol"] = $arrayParamtroDet['valor2'];
                $arrayParametros["arrayTo"]                = explode(";", $arrayParamtroDet['valor3']);
                $arrayParametros["strMotivoTarea"]         = $arrayParametros["strObservacionTarea"];
                $arrayParametros["objDetalleHipotesis"]    = null;
                $arrayParametros["strTipoTarea"]           = "T";
                $arrayParametros["strTareaRapida"]         = "N";
                $arrayParametros["boolAsignarTarea"]       = true;

                //Creo la tarea y envío la notificación
                $arrayRespuesta = $this->crearTareaCasoSoporte($arrayParametros);
                if($arrayRespuesta["mensaje"] == 'ok' && is_numeric($arrayRespuesta["numeroTarea"]))
                {
                    $strTarea = $arrayRespuesta["numeroTarea"];
                }
                else
                {
                    $strTarea = "Error al generar la tarea: </br>" . $arrayRespuesta["mensaje"];
                }
            }
            else
            {
                $strTarea = 0;
            }
        }
        catch(\Exception $ex)
        {
            $strTarea = "Error al generar la tarea por el producto";
            error_log($strTarea . $ex->getMessage());
            $this->serviceUtil->insertError('TELCOS+',
                                            'SoporteService->creaTareaPorProducto',
                                            $ex->getMessage(),
                                            $arrayParametros['strUserCreacion'],
                                            $arrayParametros['strIpCreacion']);
        }

        return $strTarea;
    }

    /**
     * crearTarea
     *
     * Metodo encargado de registrar la tarea generada por el Usuario, envia correo.
     *
     * @param AdmiTarea  $objTarea
     * @param InfoCaso   $objCaso
     * @param InfoDetalleSolicitud $objDetalleSolicitud
     * @param array $request es el request
     * @param array $parametros incluye la observacion
     *
     * @return string con respuesta de error
     *
     * @author John Vera  <javera@telconet.ec>
     * @version 1.0 25-08-2014
     *
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 23-06-2016 Se guarda el estado de la tarea en la creación del seguimiento al crear la tarea.
     *
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 17-11-2016 - Todas las tareas, excepto las tareas que se crean de manera automática, luego de crearse deben pasar a estado
     *                           Asignada y no a estado Aceptada, por ende se cambia el estado de las Tareas a Asignada y se modifica la
     *                           respectiva observación del seguimiento de dicha tarea
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 09-08-2017 -  En la tabla INFO_TAREA_SEGUIMIENTO y INFO_DETALLE_HISTORIAL, se regulariza el departamento creador de la accion y
     *                            se adicionan los campos de persona empresa rol id para identificar el responsable actual
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.4 21-12-2017 - En la tabla INFO_DETALLE_ASIGNACION se registra el campo tipo asignado 'EMPLEADO'
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.5 26-12-2017 - En el asunto y cuerpo del correo se agrega el nombre del proceso al que pertenece la tarea asignada
     * 
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.6 08-07-2020 - Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     */
    public function crearTarea($objTarea, $objCaso, $objDetalleSolicitud, $request, $parametros)
    {
        $session           = $request->getSession();
        $intIdDepartamento = $session->get('idDepartamento');
        $user              = $session->get('user');
        $host              = $request->getClientIp();
        $arrayParametrosHist = array();
        $strNombreProceso    = "";

        $arrayParametrosHist["strCodEmpresa"]           = $session->get('idEmpresa');
        $arrayParametrosHist["strUsrCreacion"]          = $user;
        $arrayParametrosHist["intIdDepartamentoOrigen"] = $intIdDepartamento;
        $arrayParametrosHist["strIpCreacion"]           = $host;
        $arrayParametrosHist["strOpcion"]               = "Historial";

        try
        {
            $objDetalleHipotesis = $this->emComercial->getRepository('schemaBundle:InfoDetalleHipotesis')
                ->findOneByCasoId($objCaso->getId());

            if($objDetalleHipotesis)
            {
                $IdDetalleHipotesis = $objDetalleHipotesis->getId();

                $objPersonaEmp = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                    ->findOneBy(array('personaId' => $session->get('id_empleado'),
                    'departamentoId' => $session->get('idDepartamento')));

                $infoDetalle = new InfoDetalle();
                $infoDetalle->setTareaId($objTarea);
                $infoDetalle->setObservacion($parametros['observacion']);
                $infoDetalle->setPesoPresupuestado(0);
                $infoDetalle->setValorPresupuestado(0);
                $infoDetalle->setDetalleHipotesisId($objDetalleHipotesis->getId());
                $infoDetalle->setDetalleSolicitudId($objDetalleSolicitud->getId());
                $infoDetalle->setFeSolicitada(new \DateTime('now'));
                $infoDetalle->setFeCreacion(new \DateTime('now'));
                $infoDetalle->setUsrCreacion($user);
                $infoDetalle->setIpCreacion($host);
                $this->emSoporte->persist($infoDetalle);
                $this->emSoporte->flush();

                $entityDetalleAsignacion = new InfoDetalleAsignacion();
                $entityDetalleAsignacion->setDetalleId($infoDetalle);
                $entityDetalleAsignacion->setMotivo("Tarea asignada por solicitud de cambio de línea Pon");
                $entityDetalleAsignacion->setAsignadoId($session->get('idDepartamento'));
                $entityDetalleAsignacion->setAsignadoNombre($session->get('departamento'));
                $entityDetalleAsignacion->setRefAsignadoId($session->get('id_empleado'));
                $entityDetalleAsignacion->setRefAsignadoNombre($session->get('empleado'));
                $entityDetalleAsignacion->setPersonaEmpresaRolId($objPersonaEmp->getId());
                $entityDetalleAsignacion->setTipoAsignado('EMPLEADO');
                $entityDetalleAsignacion->setIpCreacion($host);
                $entityDetalleAsignacion->setFeCreacion(new \DateTime('now'));
                $entityDetalleAsignacion->setUsrCreacion($user);
                $this->emSoporte->persist($entityDetalleAsignacion);

                //Se ingresa el historial de la tarea
                if(is_object($infoDetalle))
                {
                    $arrayParametrosHist["intDetalleId"] = $infoDetalle->getId();
                }
                $arrayParametrosHist["strObservacion"]  = "Tarea Asignada";
                $arrayParametrosHist["strEstadoActual"] = "Asignada";
                $arrayParametrosHist["strAccion"]       = "Asignada";

                $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

                //Ingresar Seguimiento de la tarea
                $arrayParametrosHist["strObservacion"]  = "Tarea fue Asignada a " . $session->get('empleado');
                $arrayParametrosHist["strOpcion"]       = "Seguimiento";

                $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

                //Envío de notificación

                $empleado = false;

                if($session->get('id_empleado'))
                {
                    $empleado = $this->emComercial
                        ->getRepository('schemaBundle:InfoPersona')
                        ->find($session->get('id_empleado'));
                }

                if($empleado)
                {
                    $infoPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                        ->findOneBy(array('personaId' => $empleado->getId(), 'formaContactoId' => 5, 'estado' => "Activo"));

                    if($infoPersonaFormaContacto)
                        $to[] = $infoPersonaFormaContacto->getValor(); //Correo Persona Asignada
                }


                $empresa = '';

                $departamento = $this->emComercial->getRepository('schemaBundle:AdmiDepartamento')
                    ->find($session->get('idDepartamento'));

                $afectados = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                    ->getRegistrosAfectadosTotalXCaso($objCaso->getId());

                if($departamento)
                {
                    $empresa = $departamento->getEmpresaCod();
                    $departamento = $departamento->getId();
                }
                else
                    $departamento = '';

                if($objPersonaEmp)
                {
                    $oficina = $this->emComercial->getRepository('schemaBundle:InfoOficinaGrupo')
                        ->find($objPersonaEmp->getOficinaId()->getId());
                    $canton = $oficina->getCantonId();
                }
                else
                    $canton = '';

                /******************************************************************

                  USO DE SERVICE ENVIOPLANTILLA PARA GESTION DE ENVIO DE CORREOS

                 ******************************************************************/
                if(is_object($infoDetalle))
                {
                    $objAdmiTarea = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')->find($infoDetalle->getTareaId());
                }

                if(is_object($objAdmiTarea))
                {
                    $strNombreProceso = $objAdmiTarea->getProcesoId()->getNombreProceso();
                    $strNombreTarea   = $objAdmiTarea->getNombreTarea();
                }

                $strAsunto = "Asignacion de Tarea | PROCESO: ".$strNombreProceso;

                $parametrosTarea = array('caso' => $objCaso,
                    'nombreProceso'  => $strNombreProceso,
                    'nombreTarea'    => $strNombreTarea,
                    'afectados' => $afectados,
                    'asignacion' => $entityDetalleAsignacion,
                    'empleadoLogeado' => $session->get('empleado'),
                    'empresa' => $session->get('prefijoEmpresa')
                );

                $this->envioPlantilla->generarEnvioPlantilla($strAsunto, $to, 'TAREA', $parametrosTarea, $empresa, $canton, $departamento);

                //Proceso que graba tarea en INFO_TAREA
                if(is_object($infoDetalle))
                {
                    $arrayParametrosInfoTarea['intDetalleId']   = $infoDetalle->getId();
                    $arrayParametrosInfoTarea['strUsrCreacion'] = $user;
                    $this->crearInfoTarea($arrayParametrosInfoTarea);
                }
            }
        }
        catch(\Exception $e)
        {

            $respuesta = " Error SoporteService.CrearTarea: " . $e . ", <br> Favor Notificar a Sistemas";
            return $respuesta;
        }

        return 'OK';
    }

     /* Metodo encargado de registrar la tarea generada por el Usuario, envia correo.
     *
     * @param AdmiTarea  $objTarea
     * @param InfoCaso   $objCaso
     * @param InfoDetalleSolicitud $objDetalleSolicitud
     * @param array $request es el request
     * @param array $parametros incluye la observacion, departamento,
     *
     * @return string con respuesta de error
     *
     * @author John Vera  <javera@telconet.ec>
     * @version 1.0 14-05-2018
     *
     * @author Modificado - Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 07-06-2018 Se realiza cambios para validar que solo el que solicita el reporte pueda finalizar la tarea
     * 
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.2 08-07-2020 - Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     */
    public function creacionTarea($arrayParametros)
    {

        try
        {
            $arrayParametrosHist = array();
            $strNombreProceso = "";
            $strNombreOficina = "";
            $intEmpresa = $arrayParametros['intEmpresa'];
            $intDepartamentoOrigen = $arrayParametros['intDepartamentoOrigen'];
            $intDepartamento = $arrayParametros['intDepartamento'];
            $intPersona = $arrayParametros['intPersona'];
            $objTarea = $arrayParametros['objTarea'];
            $objCaso = $arrayParametros['objCaso'];
            $strMotivo = $arrayParametros['strMotivo'];
            $strUser = $arrayParametros['strUser'];
            $strHost = $arrayParametros['strHost'];
            $strObservacion = $arrayParametros['strObservacion'];

            $objDepartamento = $this->emComercial->getRepository('schemaBundle:AdmiDepartamento')->find($intDepartamento);
            if(!is_object($objDepartamento))
            {
                throw new \Exception('No existe el departamento.');
            }

            $objPersona = $this->emComercial->getRepository('schemaBundle:InfoPersona')->find($intPersona);
            if(!is_object($objPersona))
            {
                throw new \Exception('No existe la persona.');
            }

            $strNombreEmpleado = $objPersona->getNombres() . ' ' . $objPersona->getApellidos();
            if(!$intEmpresa)
            {
                $intEmpresa = $objDepartamento->getEmpresaCod();
            }

            $objEmpresa = $this->emComercial->getRepository('schemaBundle:InfoEmpresaGrupo')->find($intEmpresa);

            if(!is_object($objEmpresa))
            {
                throw new \Exception('No existe la empresa.');
            }

            $strPrefijoEmpresa = $objEmpresa->getPrefijo();


            $arrayParametrosHist["strCodEmpresa"] = $intEmpresa;
            $arrayParametrosHist["strUsrCreacion"] = $strUser;
            $arrayParametrosHist["intIdDepartamentoOrigen"] = $intDepartamentoOrigen;
            $arrayParametrosHist["strIpCreacion"] = $strHost;
            $arrayParametrosHist["strOpcion"] = "Historial";

            $objDetalleHipotesis = $this->emComercial->getRepository('schemaBundle:InfoDetalleHipotesis')
                ->findOneByCasoId($objCaso->getId());

            if($objDetalleHipotesis)
            {
                $intDetalleHipotesis = $objDetalleHipotesis->getId();

                $objPersonaEmp = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                    ->findOneBy(array('personaId' => $intPersona,
                    'departamentoId' => $intDepartamento,
                    'estado' => 'Activo'));


                if(!is_object($objPersonaEmp))
                {
                    throw new \Exception('No existe Persona Empresa Rol solucion');
                }
            }

            $objDetalle = new InfoDetalle();
            $objDetalle->setTareaId($objTarea);
            $objDetalle->setObservacion($strObservacion);
            $objDetalle->setPesoPresupuestado(0);
            $objDetalle->setValorPresupuestado(0);
            $objDetalle->setDetalleHipotesisId($intDetalleHipotesis);
            $objDetalle->setFeSolicitada(new \DateTime('now'));
            $objDetalle->setFeCreacion(new \DateTime('now'));
            $objDetalle->setUsrCreacion($strUser);
            $objDetalle->setIpCreacion($strHost);
            $this->emSoporte->persist($objDetalle);
            $this->emSoporte->flush();

            $objComunicacion = new InfoComunicacion();
            $objComunicacion->setDetalleId($objDetalle->getId());
            $objComunicacion->setFormaContactoId(5);
            $objComunicacion->setClaseComunicacion("Creado");
            $objComunicacion->setFechaComunicacion(new \DateTime('now'));
            $objComunicacion->setFeCreacion(new \DateTime('now'));
            $objComunicacion->setEstado('Activo');
            $objComunicacion->setUsrCreacion($strUser);
            $objComunicacion->setIpCreacion($strHost);
            $objComunicacion->setEmpresaCod($intEmpresa);
            $this->emComunicacion->persist($objComunicacion);
            $this->emComunicacion->flush();

            $entityDetalleAsignacion = new InfoDetalleAsignacion();
            $entityDetalleAsignacion->setDetalleId($objDetalle);
            $entityDetalleAsignacion->setMotivo($strMotivo);
            $entityDetalleAsignacion->setAsignadoId($intDepartamento);
            $entityDetalleAsignacion->setAsignadoNombre($objDepartamento->getNombreDepartamento());
            $entityDetalleAsignacion->setRefAsignadoId($intPersona);
            $entityDetalleAsignacion->setRefAsignadoNombre($strNombreEmpleado);
            $entityDetalleAsignacion->setPersonaEmpresaRolId($objPersonaEmp->getId());
            $entityDetalleAsignacion->setTipoAsignado('EMPLEADO');
            $entityDetalleAsignacion->setIpCreacion($strHost);
            $entityDetalleAsignacion->setFeCreacion(new \DateTime('now'));
            $entityDetalleAsignacion->setUsrCreacion($strUser);
            $this->emSoporte->persist($entityDetalleAsignacion);

            if($objPersonaEmp->getOficinaId() != "")
            {
                $strNombreOficina = $objPersonaEmp->getOficinaId();
            }

            //Se ingresa el historial de la tarea
            if(is_object($objDetalle))
            {
                $arrayParametrosHist["intDetalleId"] = $objDetalle->getId();
            }
            $arrayParametrosHist["strObservacion"] = "Tarea Asignada";
            $arrayParametrosHist["strEstadoActual"] = "Asignada";
            $arrayParametrosHist["strAccion"] = "Asignada";

            $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            //Ingresar Seguimiento de la tarea
            $arrayParametrosHist["strObservacion"] = "Tarea fue Asignada a " . $strNombreEmpleado;
            $arrayParametrosHist["strOpcion"] = "Seguimiento";

            $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            //Envío de notificación

            if(is_object($objPersona))
            {
                $objPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                    ->findOneBy(array('personaId' => $objPersona->getId(),
                    'formaContactoId' => 5,
                    'estado' => "Activo"));

                if($objPersonaFormaContacto)
                {
                    $arrayTo[] = $objPersonaFormaContacto->getValor(); //Correo Persona Asignada
                }


                $objAfectados = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                    ->getRegistrosAfectadosTotalXCaso($objCaso->getId());

                if(is_object($objDepartamento))
                {
                    $intEmpresaDept = $objDepartamento->getEmpresaCod();
                }

                $intCanton = '';
                if($objPersonaEmp)
                {
                    $objOficina = $this->emComercial->getRepository('schemaBundle:InfoOficinaGrupo')
                        ->find($objPersonaEmp->getOficinaId()->getId());
                    $intCanton = $objOficina->getCantonId();
                }

                /*                 * ****************************************************************

                  USO DE SERVICE ENVIOPLANTILLA PARA GESTION DE ENVIO DE CORREOS

                 * **************************************************************** */

                if(is_object($objTarea))
                {
                    $strNombreProceso = $objTarea->getProcesoId()->getNombreProceso();
                    $strNombreTarea = $objTarea->getNombreTarea();
                }

                $strAsunto = "Asignacion de Tarea | PROCESO: " . $strNombreProceso;

                $arrayParametrosTarea = array('caso' => $objCaso,
                    'nombreProceso' => $strNombreProceso,
                    'nombreTarea' => $strNombreTarea,
                    'afectados' => $objAfectados,
                    'asignacion' => $entityDetalleAsignacion,
                    'empleadoLogeado' => $strNombreEmpleado,
                    'empresa' => $strPrefijoEmpresa
                );

                $this->envioPlantilla->generarEnvioPlantilla($strAsunto, $arrayTo, 'TAREA', $arrayParametrosTarea, $intEmpresaDept, $intCanton,
                                                             $intDepartamento);

                if(is_object($objComunicacion))
                {
                    $arrayResult['status'] = 'OK';
                    $arrayResult['mensaje'] = 'Se solicito al <b>Dpto : ' . $objDepartamento->getNombreDepartamento().' - '.$strNombreOficina
                        . '</b>  el reporte ejecutivo '
                        . '                    de clientes <br> con <b>No. Tarea #'
                        . $objComunicacion->getId() . '</b>';
                    $arrayResult['intDetalle'] = $objDetalle->getId();
                }
            }

            //Proceso que graba tarea en INFO_TAREA
            if(is_object($objDetalle))
            {
                $arrayParametrosInfoTarea['intDetalleId']   = $objDetalle->getId();
                $arrayParametrosInfoTarea['strUsrCreacion'] = $strUser;
                $this->crearInfoTarea($arrayParametrosInfoTarea);
            }
        }
        catch(\Exception $e)
        {
            $arrayResult['status'] = 'ERROR';
            $arrayResult['mensaje'] = " Error SoporteService.CrearTarea: " . $e->getMessage() . ", <br> Favor Notificar a Sistemas";
            return $arrayResult;
        }

        return $arrayResult;
    }

    /**
     * generarReporteCasosArcotel
     *
     * @author Richard Cabrera  <rcabrera@telconet.ec>
     * @version 1.0 20-03-2017
     *
     * Funcion encargada de generar el reporte de casos para la arcotel
     *
     * @param array $arrayParametros [strFechaInicio    => fecha de inicio del reporte de arcotel
     *                                strFechaFin       => fecha fin del reporte de arcotel
     *                                strPrefijoEmpresa => prefijo de la empresa
     *                                strUser           => usuario que ejecuta la funcion
     *                                strIpUser         => ip desde donde se ejecuta la funcion ]
     *
     * @return array $arrayRespuesta
     *
     */
    public function generarReporteCasosArcotel($arrayParametros)
    {
        $arrayRespuesta = array();
        try
        {
            $strMensajeError = str_repeat(' ', 4000);
            $strSql  = "BEGIN
                         DB_SOPORTE.SPKG_REPORTES.P_REPORTE_ARCOTEL_CASOS
                         (
                            :pv_prefijo_empresa,
                            :pv_fecha_inicio,
                            :pv_fecha_fin,
                            :pv_mensaje_error
                          );
                        END;";

            $objStmt = $this->emSoporte->getConnection()->prepare($strSql);

            $objStmt->bindParam('pv_prefijo_empresa', $arrayParametros["strPrefijoEmpresa"]);
            $objStmt->bindParam('pv_fecha_inicio', $arrayParametros["strFechaInicio"]);
            $objStmt->bindParam('pv_fecha_fin', $arrayParametros["strFechaFin"]);
            $objStmt->bindParam('pv_mensaje_error', $strMensajeError);
            $objStmt->execute();

            $arrayRespuesta['respuesta'] = "Reporte Generado Correctamente y Enviado a su Correo Electronico";
            $arrayRespuesta['status']    = 'EXITO';
        }
        catch(\Exception $e)
        {
            $this->serviceUtil->insertError('TELCOS+',
                                            'SoporteService->generarReporteCasosArcotel',
                                            $e->getMessage(),
                                            $arrayParametros['strUser'],
                                            $arrayParametros['strIpUser']);

            $arrayRespuesta['respuesta'] = "Ocurrio un error";
            $arrayRespuesta['status']    = "ERROR";
        }

        return $arrayRespuesta;
    }

    /**
     * generarReporteTareasTrace
     *
     * @author Richard Cabrera  <rcabrera@telconet.ec>
     * @version 1.0 30-10-2017
     *
     * Función que se encarga de generar el reporte de tareas - trace
     *
     * @param array $arrayParametros [strFechaInicio    => fecha de inicio del reporte de arcotel
     *                                strFechaFin       => fecha fin del reporte de arcotel
     *                                st>>rUser         => usuario que ejecuta la funcion
     *                                strIpUser         => ip desde donde se ejecuta la funcion ]
     *
     * @return array $arrayRespuesta
     *
     */
    public function generarReporteTareasTrace($arrayParametros)
    {
        $arrayRespuesta = array();
        try
        {
            $strMensajeError = str_repeat(' ', 4000);
            $strSql  = "BEGIN
                         DB_SOPORTE.SPKG_REPORTES.P_REPORTE_TAREAS_TT
                         (
                            :pv_fecha_inicio,
                            :pv_fecha_fin,
                            :pv_mensaje_error
                          );
                        END;";

            $objStmt = $this->emSoporte->getConnection()->prepare($strSql);

            $objStmt->bindParam('pv_fecha_inicio', $arrayParametros["strFechaInicio"]);
            $objStmt->bindParam('pv_fecha_fin', $arrayParametros["strFechaFin"]);
            $objStmt->bindParam('pv_mensaje_error', $strMensajeError);
            $objStmt->execute();

            $arrayRespuesta['respuesta'] = "Reporte Generado Correctamente y Enviado a su Correo Electronico";
            $arrayRespuesta['status']    = 'EXITO';
        }
        catch(\Exception $e)
        {
            $this->serviceUtil->insertError('TELCOS+',
                                            'SoporteService->generarReporteTareasTrace',
                                            $e->getMessage(),
                                            $arrayParametros['strUser'],
                                            $arrayParametros['strIpUser']);

            $arrayRespuesta['respuesta'] = "Ocurrio un error";
            $arrayRespuesta['status']    = "ERROR";
        }

        return $arrayRespuesta;
    }

    /**
     * ejecutarPausarTareas
     *
     * @author Richard Cabrera  <rcabrera@telconet.ec>
     * @version 1.0 18-04-2017
     *
     * Función encargada de Pausar las tareas que esta ejecutando el usuario
     *
     * @author Nestor Naula  <nnaulal@telconet.ec>
     * @version 1.1 18-07-2018
     * Se valido para que no ejecute la funcion administrarTarea si el idDetalle viene nulo
     *
     * @param array $arrayParametros [ intPersonaEmpresaRolId => prefijo de la empresa
     *                                 strCodigoEmpresa       => codigo de la empresa
     *                                 strUser                => usuario que ejecuta la funcion
     *                                 strIpUser              => ip desde donde se ejecuta la funcion ]
     *
     * @return array $arrayRespuesta
     *
     */
    public function ejecutarPausarTareas($arrayParametros)
    {
        $arrayRespuesta             = array();
        $arrayTareasEnEjecucion     = array();
        $arrayParametrosPausarTarea = array();
        $arrayValoresParametros     = array();
        $arrayMensaje               = array();
        $objInfoDetalle             = null;
        $strObservacion             = "";
        $strComa                    = "";
        $strTareas                  = "";
        $strMensaje                 = "";

        try
        {
            //Se obtiene la observacion para la accion de pausar tarea
            $arrayValoresParametros = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                      ->getOne('PARAMETROS DE TAREAS',
                                                               'SOPORTE',
                                                               'TAREAS',
                                                               'OBSERVACION TAREAS PAUSADAS',
                                                               '',
                                                               '',
                                                               '',
                                                               '',
                                                               '',
                                                               '');

            if(isset($arrayValoresParametros["valor1"]) && !empty($arrayValoresParametros["valor1"]))
            {
                $strObservacion = $arrayValoresParametros["valor1"];
            }

            //Se obtiene la cantidad de tareas que se estan ejecutando
            $arrayParametros["strTipoConsulta"]        = "TareasEjecutando";
            $arrayParametros["arrayEstados"]           = array('Aceptada');
            $arrayParametros["strEstado"]              = "Activo";

            $arrayTareasEnEjecucion = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')
                                                      ->getNumeroTareasAbiertas($arrayParametros);

            //Se realiza la ejecución de pausar todas las tareas que tiene en ejecución el usuario
            foreach($arrayTareasEnEjecucion["arrayTareasEjecutando"] as $arrayTareaEjecutada)
            {
                if($strTareas != "")
                {
                    $strTareas .= "," . $arrayTareaEjecutada["numeroTarea"];
                }
                else
                {
                    $strTareas = $arrayTareaEjecutada["numeroTarea"];
                }

                $objInfoComunicacion = $this->emSoporte->getRepository('schemaBundle:InfoComunicacion')
                                                       ->findOneBy(array('id' => $arrayTareaEjecutada["numeroTarea"]));

                if(is_object($objInfoComunicacion))
                {
                    $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                      ->find($objInfoComunicacion->getDetalleId());

                    if(is_object($objInfoDetalle))
                    {
                        $arrayParametrosPausarTarea["objDetalle"] = $objInfoDetalle;
                        $strObservacion = $strObservacion .' '.$arrayTareaEjecutada["numeroTarea"];

                        $arrayParametrosPausarTarea["strTipo"]              = "pausar";
                        $arrayParametrosPausarTarea["strObservacion"]       = $strObservacion;
                        $arrayParametrosPausarTarea["strCodEmpresa"]        = $arrayParametros['strCodigoEmpresa'];
                        $arrayParametrosPausarTarea["strUser"]              = $arrayParametros['strUser'];
                        $arrayParametrosPausarTarea["strIpUser"]            = $arrayParametros['strIpUser'];
                        $arrayParametrosPausarTarea["intPersonaEmpresaRol"] = $arrayParametros["intPersonaEmpresaRolId"];

                        $arrayMensaje = $this->administrarTarea($arrayParametrosPausarTarea);
                    }
                    else
                    {
                        $arrayRespuestaPorNull["strRespuesta"] = "ERROR";
                        $arrayMensaje=$arrayRespuestaPorNull;
                    }

                    if($arrayMensaje["strRespuesta"] == "OK")
                    {
                        $strEstatus = "EXITO";
                        $strMensaje = "La tarea ".$strTareas." fue pausada correctamente";
                    }
                    else
                    {
                        $strEstatus = "ERROR";
                        $strMensaje = "Ocurrió un error";
                    }
                }
            }

            $arrayRespuesta['mensaje']   = $strMensaje;
            $arrayRespuesta['status']    = $strEstatus;
        }
        catch(\Exception $e)
        {
            $this->serviceUtil->insertError('TELCOS+',
                                            'SoporteService->ejecutarPausarTareas',
                                            $e->getMessage(),
                                            $arrayParametros['strUser'],
                                            $arrayParametros['strIpUser']);

            $arrayRespuesta['mensaje']   = "Ocurrió un error";
            $arrayRespuesta['status']    = "ERROR";
        }

        return $arrayRespuesta;
    }

    /**
     * rechazarTarea
     *
     * Metodo encargado de rechazar la tarea generada por el Usuario.
     *
     * @param InfoDetalle  $objInfoDet
     * @param InfoCaso $objCaso
     * @param string $esSolucion indica si la tarea tuvo solución
     * @param objeto $peticion es el request
     * @param array $parametros incluye la observacion
     *
     * @return string con respuesta de error
     *
     * @author John Vera  <javera@telconet.ec>
     * @version 1.0 25-08-2014
     *
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 23-06-2016 Se guarda el estado de la tarea en la creación del seguimiento al rechazar la tarea.
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 09-08-2017 -  En la tabla INFO_TAREA_SEGUIMIENTO y INFO_DETALLE_HISTORIAL, se regulariza el departamento creador de la accion y
     *                            se adicionan los campos de persona empresa rol id para identificar el responsable actual
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.3 17-04-2019 - Se agrega los métodos genéricos para el cálculo del los tiempos de las tareas.
     * 
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.4 08-07-2020 - Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     */
    public function rechazarTarea($objInfoDet, $objCaso, $esSolucion, $peticion, $parametros)
    {
        $intIdDepartamento   = $peticion->getSession()->get('idDepartamento');
        $arrayParametrosHist = array();

        $arrayParametrosHist["strCodEmpresa"]           = $peticion->getSession()->get('idEmpresa');
        $arrayParametrosHist["strUsrCreacion"]          = $peticion->getSession()->get('user');
        $arrayParametrosHist["intIdDepartamentoOrigen"] = $intIdDepartamento;
        $arrayParametrosHist["strIpCreacion"]           = $peticion->getClientIp();
        $arrayParametrosHist["strOpcion"]               = "Historial";

         try
        {
            //Se coloca tarea con estado de Solucion
            $objInfoDet->setEsSolucion($esSolucion);
            $this->emSoporte->persist($objInfoDet);

            //Se ingresa el historial de la tarea
            if(is_object($objInfoDet))
            {
                $arrayParametrosHist["intDetalleId"] = $objInfoDet->getId();
            }
            $arrayParametrosHist["strObservacion"]  = $parametros['observacion'];
            $arrayParametrosHist["strEstadoActual"] = "Rechazada";
            $arrayParametrosHist["strAccion"]       = "Rechazada";

            $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            //Método encargado de calcular los tiempos de las tareas
            $this->calcularTiempoEstado(array('strEstadoActual'   => 'Rechazada',
                                              'intIdDetalle'      => $objInfoDet->getId(),
                                              'strTipoReprograma' => null,
                                              'strUser'           => $peticion->getSession()->get('user'),
                                              'strIp'             => $peticion->getClientIp()));

            //Función que permite realizar el cálculo del tiempo total de la tarea.
            $this->calcularTareaTiempoAsignacion(array('intIdDetalle'   => $objInfoDet->getId(),
                                                       'intIdCaso'      => $objCaso->getId(),
                                                       'strObservacion' => $parametros['observacion'],
                                                       'strUser'        => $peticion->getSession()->get('user'),
                                                       'strIp'          => $peticion->getClientIp()));

            //Se ingresa el historial de la tarea
            $arrayParametrosHist["strObservacion"] = "Tarea fue Rechazada por el motivo: " . $parametros['observacion'];
            $arrayParametrosHist["strOpcion"]      = "Seguimiento";

            $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            //ACTUALIZA TAREA EN INFO_TAREA
            if ( is_object($objInfoDet) )
            {
                $arrayParametrosInfoTarea['intDetalleId'] = $objInfoDet->getId();
                $arrayParametrosInfoTarea['strUsrUltMod'] = isset($arrayParametrosHist["strUsrCreacion"])?$arrayParametrosHist["strUsrCreacion"]:'';
                $this->actualizarInfoTarea($arrayParametrosInfoTarea);
            }
        }
        catch(\Exception $e)
        {
            $mensaje = $e->getMessage();
            return $mensaje;
        }

        return "OK";
    }//fin de la funcion rechazarTarea

    /**
     * cambiarEstadoTarea
     *
     * Metodo encargado de cambiar el estado de la tarea generada por el Usuario.
     *
     * @param InfoDetalle  $objInfoDet
     * @param InfoCaso $objCaso
     * @param objeto $objPeticion es el request
     * @param array $arrayParametros incluye la observacion
     *
     * @return string con respuesta de error o exito
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.0 03-09-2019
     * 
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.1 01-10-2019 se agrega validación para verificar que el id_detalle tenga una tarea asociada para cambiarle el estado
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.2 21-05-2021 - Si el objeto petición esta vacío, se obtiene los parámetros por el arreglo.
     *
     */
    public function cambiarEstadoTarea($objInfoDet, $objCaso, $objPeticion, $arrayParametros)
    {
        $intIdDepartamento   = is_object($objPeticion) ? $objPeticion->getSession()->get('idDepartamento')
                                                       : $arrayParametros['intIdDepartamento'];
        $arrayParametrosHist = array();
        $intIdCaso           = null;
        $strEstado           = $arrayParametros['estado'];

        $arrayParametrosHist["strCodEmpresa"]           = is_object($objPeticion) ? $objPeticion->getSession()->get('idEmpresa')
                                                                                  : $arrayParametros['strCodEmpresa'];
        $arrayParametrosHist["strUsrCreacion"]          = is_object($objPeticion) ? $objPeticion->getSession()->get('user')
                                                                                  : $arrayParametros['strUsrCreacion'];
        $arrayParametrosHist["intIdDepartamentoOrigen"] = $intIdDepartamento;
        $arrayParametrosHist["strEnviaDepartamento"]    = !empty($intIdDepartamento) ? $intIdDepartamento : "N";
        $arrayParametrosHist["strIpCreacion"]           = is_object($objPeticion) ? $objPeticion->getClientIp()
                                                                                  : $arrayParametros['strIpCreacion'];
        $arrayParametrosHist["strOpcion"]               = "Historial";

        try
        {
            //Validar si existe una tarea ya creada para el idDetalle
            $objInfoComunicacion = $this->emComunicacion->getRepository('schemaBundle:InfoComunicacion')
                                ->findOneBy(array(
                                                    'detalleId' => $objInfoDet->getId(),
                                                    'estado'    => 'Activo'
                                                )
                                            );

            if($objInfoComunicacion != null)
            {
                //Se coloca tarea con estado de Solucion
                $objInfoDet->setEsSolucion($arrayParametros['esSolucion']);
                $this->emSoporte->persist($objInfoDet);
                $this->emSoporte->flush();
                //Se ingresa el historial de la tarea
                if(is_object($objInfoDet))
                {
                    $arrayParametrosHist["intDetalleId"] = $objInfoDet->getId();
                }
                $arrayParametrosHist["strObservacion"]  = $arrayParametros['observacion'];
                $arrayParametrosHist["strEstadoActual"] = $strEstado;
                $arrayParametrosHist["strAccion"]       = $strEstado;

                $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

                if (is_object($objCaso))
                {
                    $intIdCaso = $objCaso->getId();
                }

                //Método encargado de calcular los tiempos de las tareas
                $this->calcularTiempoEstado(array('strEstadoActual'   => $strEstado,
                                                'intIdDetalle'      => $objInfoDet->getId(),
                                                'strTipoReprograma' => null,
                                                'strUser'           => $arrayParametrosHist["strUsrCreacion"],
                                                'strIp'             => $arrayParametrosHist["strIpCreacion"]));

                //Función que permite realizar el cálculo del tiempo total de la tarea.
                $this->calcularTareaTiempoAsignacion(array('intIdDetalle'   => $objInfoDet->getId(),
                                                        'intIdCaso'      => $intIdCaso,
                                                        'strObservacion' => $arrayParametros['observacion'],
                                                        'strUser'        => $arrayParametrosHist["strUsrCreacion"],
                                                        'strIp'          => $arrayParametrosHist["strIpCreacion"]));

                //Se ingresa el historial de la tarea
                $arrayParametrosHist["strObservacion"] = "Tarea fue " . $strEstado . " por el motivo: " . $arrayParametros['observacion'];
                $arrayParametrosHist["strOpcion"]      = "Seguimiento";

                $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

                //ACTUALIZA TAREA EN INFO_TAREA
                if ( is_object($objInfoDet) )
                {
                    $arrayParametrosInfoTarea['intDetalleId'] = $objInfoDet->getId();
                    $arrayParametrosInfoTarea['strUsrUltMod'] = isset($arrayParametrosHist["strUsrCreacion"])? 
                                                                $arrayParametrosHist["strUsrCreacion"] : '';
                    $this->actualizarInfoTarea($arrayParametrosInfoTarea);
                }
            }
        }
        catch(\Exception $e)
        {
            $strMensaje = $e->getMessage();

            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->cambiarEstadoTarea',
                                            $strMensaje,
                                            $arrayParametrosHist["strUsrCreacion"],
                                            $arrayParametrosHist["strIpCreacion"]);

            return $strMensaje;
        }
        return "OK";
    }

    /**
     * Función que permite realizar el cálculo del tiempo total, tiempo empresa y tiempo cliente de la tarea.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 15-04-2019
     *
     * @param  Array $arrayParametros [
     *                                  intIdDetalle    => Id del detalle de la tarea.
     *                                  intIdCaso       => Id del caso.
     *                                  strObservacion  => Observación.
     *                                  strUser         => Usuario de creación.
     *                                  strIp           => Ip de creación.
     *                                ]
     * @return Array $arrayRespuesta
     */
    public function calcularTareaTiempoAsignacion($arrayParametros)
    {
        $intIdDetalle      = $arrayParametros['intIdDetalle'];
        $intIdCaso         = $arrayParametros['intIdCaso'];
        $strObservacion    = $arrayParametros['strObservacion'];
        $strUser           = $arrayParametros['strUser'] ? $arrayParametros['strUser'] : "Telcos+";
        $strIp             = $arrayParametros['strIp'] ? $arrayParametros['strIp'] : '127.0.0.1';
        $arrayTiempos      = null;
        $intMinutos        = 0;
        $strMessage        = "El cálculo de la tarea se realizó correctamente";

        try
        {
            $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                    ->find($intIdDetalle);

            if (!is_object($objInfoDetalle))
            {
                throw new \Exception("Error : La información del detalle ($intIdDetalle) no existe.");
            }

            if ($intIdCaso !== null && $intIdCaso !== '')
            {
                $objInfoCaso = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                        ->find($intIdCaso);

                if (!is_object($objInfoCaso))
                {
                    throw new \Exception("Error : La información del caso ($intIdCaso) no existe.");
                }
            }

            //Obtenemos los tiempo de la tarea.
            $arrayTiemposTarea = $this->emSoporte->getRepository('schemaBundle:InfoTareaTiempoParcial')
                    ->getTiemposTarea(array('intIdDetalle' => $intIdDetalle));

            if ($arrayTiemposTarea['status'] === 'ok' && empty($arrayTiemposTarea['result']))
            {
                throw new \Exception("Error : La consulta de los tiempos, no retornó datos");
            }
            elseif ($arrayTiemposTarea['status'] === 'fail')
            {
                throw new \Exception($arrayTiemposTarea['message']);
            }
            else
            {
                $arrayTiempos     = $arrayTiemposTarea['result'][0];
                $intTiempoCLiente = $arrayTiempos['cliente'];
                $intTiempoEmpresa = $arrayTiempos['empresa'];
            }

            /**
             * Se realiza esta validación, para evitar un cálculo erróneo por motivos
             * que existen tareas abiertas que no cuentan con esta nueva modalidad, que
             * almacena cada uno de los tiempos cuando el estado de la tarea cambia.
             */
            $objFechaCreacionTarea = new \DateTime(date_format($objInfoDetalle->getFeCreacion(), "d-m-Y H:i"));
            $objFechaFinalizaTarea = new \DateTime(date_format($arrayTiempos['feFinaliza']     , "d-m-Y H:i"));

            $objDiferenciaFechas = $objFechaFinalizaTarea->diff($objFechaCreacionTarea);
            $intMinutos         += $objDiferenciaFechas->days * 24 * 60;
            $intMinutos         += $objDiferenciaFechas->h * 60;
            $intMinutos         += $objDiferenciaFechas->i;

            if ($arrayTiempos['total'] <> $intMinutos)
            {
                $intTiempoEmpresa = $intMinutos - $intTiempoCLiente;
            }

            $objInfoTareaTiempoAsignacion = new InfoTareaTiempoAsignacion();
            $objInfoTareaTiempoAsignacion->setDetalleId($intIdDetalle);
            $objInfoTareaTiempoAsignacion->setCasoId($intIdCaso);
            $objInfoTareaTiempoAsignacion->setTiempoCliente($intTiempoCLiente);
            $objInfoTareaTiempoAsignacion->setTiempoEmpresa($intTiempoEmpresa);
            $objInfoTareaTiempoAsignacion->setObservacion($strObservacion);
            $objInfoTareaTiempoAsignacion->setFeCreacion(new \DateTime('now'));
            $objInfoTareaTiempoAsignacion->setUsrCreacion($strUser);
            $objInfoTareaTiempoAsignacion->setFeEjecucion($objInfoDetalle->getFeSolicitada());
            $objInfoTareaTiempoAsignacion->setFeFinalizacion($arrayTiempos['feFinaliza']);
            $this->emSoporte->persist($objInfoTareaTiempoAsignacion);
            $this->emSoporte->flush();
        }
        catch (\Exception $objException)
        {
            $strMessage = 'Error al realizar el cálculo del tiempo asignación de la tarea';

            if (strpos($objException->getMessage(),'Error : ') !== false)
            {
                $strMessage = explode('Error : ', $objException->getMessage())[1];
            }

            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->calcularTareaTiempoAsignacion',
                                             $objException->getMessage(),
                                             $strUser,
                                             $strIp);

            $arrayRespuesta = array('status' => 'fail', 'message' => $strMessage);
        }

        return $arrayRespuesta;
    }

    /**
     * Función que permite calcular el tiempo de los estados de la tarea.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 15-04-2019
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 13-07-2019 - Se agrega los parámetros intMinutosEmpresa, intMinutosCliente para tener
     *                           de referencia los tiempos atribuibles tanto al cliente como a la empresa.
     *
     * @param  Array $arrayParametros [
     *                                  strEstadoActual    => Estado de la tarea.
     *                                  intIdDetalle       => Id de detalle de la tarea.
     *                                  strTipoReprograma  => Tipo de pausa o reprogramación (C = Cliente).
     *                                  intTiempo          => Tiempo que debe durar la pausa.
     *                                  objFechaReprograma => Fecha de reprogramación.
     *                                  strUser            => Usuario de creación.
     *                                  strIp              => Ip de creación.
     *                                ]
     * @return Array $arrayRespuesta
     */
    public function calcularTiempoEstado($arrayParametros)
    {
        $intIdDetalle       = $arrayParametros['intIdDetalle'] ?  $arrayParametros['intIdDetalle'] : $arrayParametros['intDetalleId'];
        $strUser            = $arrayParametros['strUser'] ? $arrayParametros['strUser'] : $arrayParametros['strUsrCreacion'];
        $strIp              = $arrayParametros['strIp'] ? $arrayParametros['strIp'] : $arrayParametros['strIpCreacion'];
        $strEstadoActual    = $arrayParametros['strEstadoActual'];
        $strTipoReprograma  = $arrayParametros['strTipoReprograma'];
        $intTiempo          = $arrayParametros['intTiempo'];
        $objFechaReprograma = $arrayParametros['objFechaReprograma'];
        $boolHisSeg         = $arrayParametros['boolHisSeg'];
        $intMinutosEmpresa  = $arrayParametros['intMinutosEmpresa'];
        $intMinutosCliente  = $arrayParametros['intMinutosCliente'];
        $strMessage         = "El cálculo de la tarea se realizó correctamente";
        $strTipo            = '';
        $intMinutos         = 0;
        $intTiempoAnterior  = null;
        $intTiempoAnterEmp  = null;

        try
        {
            if ($boolHisSeg)
            {
                $arrayIngresoHistorialSeguimiento = $this->ingresaHistorialYSeguimientoPorTarea($arrayParametros);

                if (!is_object($arrayIngresoHistorialSeguimiento['objInfoDetalleHistorial']))
                {
                    throw new \Exception('Error : No se logro actualizar el estado de la tarea');
                }
            }

            $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                    ->find($intIdDetalle);

            if (!is_object($objInfoDetalle))
            {
                throw new \Exception('Error : La información de la tarea no existe.');
            }

            $objInfoTareaTiempoParcial= $this->emSoporte->getRepository('schemaBundle:InfoTareaTiempoParcial')
                    ->findOneBy(array('detalleId'  => $intIdDetalle),
                                array('feCreacion' => 'DESC'));

            if (is_object($objInfoTareaTiempoParcial))
            {
                $strTipo               = $objInfoTareaTiempoParcial->getTipo();
                $intTiempoAnterior     = $objInfoTareaTiempoParcial->getTiempo();
                $intTiempoAnterior     = $intTiempoAnterior < 1 ? null : $intTiempoAnterior;
                $intTiempoAnterEmp     = $objInfoTareaTiempoParcial->getTiempoEmpresa();
                $intTiempoAnterEmp     = $intTiempoAnterEmp < 1 ? null : $intTiempoAnterEmp;
                $strFechaCreacionTarea = strval(date_format($objInfoTareaTiempoParcial->getFeCreacion(), "d-m-Y H:i"));
                $objFechaCreacionTarea = new \DateTime($strFechaCreacionTarea);
            }
            else
            {
                $strFechaCreacionTarea = strval(date_format($objInfoDetalle->getFeCreacion(), "d-m-Y H:i"));
                $objFechaCreacionTarea = new \DateTime($strFechaCreacionTarea);
            }

            //Obtenemos la diferencia de las fechas.
            $objFechaActualReal  = new \DateTime('now');
            $objFechaActual      = new \DateTime(date_format($objFechaActualReal, "d-m-Y H:i"));
            $objDiferenciaFechas = $objFechaActual->diff($objFechaCreacionTarea);
            $intMinutos         += $objDiferenciaFechas->days * 24 * 60;
            $intMinutos         += $objDiferenciaFechas->h * 60;
            $intMinutos         += $objDiferenciaFechas->i;

            //Obtenemos el tiempo en minutos que debe durar la reprogramación.
            if ($strEstadoActual === 'Reprogramada' && strtoupper($strTipoReprograma) === 'C'
                    && is_object($objFechaReprograma) && $objFechaReprograma > $objFechaActual)
            {
                $objDiferenciaFechas = $objFechaReprograma->diff($objFechaActual);
                $intTiempo           = $objDiferenciaFechas->days * 24 * 60;
                $intTiempo          += $objDiferenciaFechas->h * 60;
                $intTiempo          += $objDiferenciaFechas->i;
            }

            if ($intMinutosCliente !== null && $intMinutosCliente !== '' && $intMinutosCliente > 0)
            {
                $intTiempo = $intMinutosCliente;
            }

            //Obtenemos el estado actual de la tarea tiempo parcial.
            $objEstadoActualTarea = $this->emSoporte->getRepository('schemaBundle:InfoTareaTiempoParcial')
                    ->findOneBy(array('detalleId' => $intIdDetalle,
                                      'estado'    => $strEstadoActual));

            if (!is_object($objEstadoActualTarea))
            {
                $objEstadoActualTarea = new InfoTareaTiempoParcial();
                $objEstadoActualTarea->setDetalleId($intIdDetalle);
                $objEstadoActualTarea->setEstado($strEstadoActual);
            }

            $objEstadoActualTarea->setUsrCreacion($strUser);
            $objEstadoActualTarea->setIpCreacion($strIp);
            $objEstadoActualTarea->setFeCreacion($objFechaActualReal);
            $objEstadoActualTarea->setTipo($strTipoReprograma);
            $objEstadoActualTarea->setTiempo($intTiempo);
            $objEstadoActualTarea->setTiempoEmpresa($intMinutosEmpresa);

            //Si el anterior estado tiene tipo C = CLiente, quiere decir que el cliente solicito la pausa o reprogramación.
            if (strtoupper($strTipo) === 'C')
            {
                /*
                 * Si el tiempo de pausa es menor al tiempo real del cambio de estado.
                 * Entonces el tiempo de cambio de estado será igual al tiempo real y
                 * la diferencia se recarga a la empresa.
                 */
                if($intTiempoAnterior !== null && $intTiempoAnterior < $intMinutos)
                {
                    $intDiferencia = $intMinutos - $intTiempoAnterior;
                    $intMinutos    = $intTiempoAnterior;

                    $intDiferencia += ($objEstadoActualTarea->getValorTiempo() == null ? 0
                            : $objEstadoActualTarea->getValorTiempo());

                    $objEstadoActualTarea->setValorTiempo($intDiferencia);
                }

                $intMinutos += ($objEstadoActualTarea->getValorTiempoPausa() == null ? 0
                        : $objEstadoActualTarea->getValorTiempoPausa());

                $objEstadoActualTarea->setValorTiempoPausa($intMinutos);
            }
            else
            {
                if ($intTiempoAnterior !== null && $intTiempoAnterior > 0 &&
                    $intTiempoAnterEmp !== null && $intTiempoAnterEmp > 0)
                {
                    //La variable $intTiempoAnterior es tiempo cliente
                    //La variable $intTiempoAnterEmp es tiempo empresa

                    $intTiempoTotal = $intTiempoAnterior + $intTiempoAnterEmp;

                    if ($intMinutos > $intTiempoTotal)
                    {
                        $intDiferenciaTiempo = $intMinutos - $intTiempoTotal;
                        $intTiempoEmpresa    = $intTiempoAnterEmp + $intDiferenciaTiempo;
                        $intTiempoCliente    = $intTiempoAnterior;
                    }
                    elseif ($intMinutos < $intTiempoAnterEmp)
                    {
                        $intTiempoEmpresa = $intMinutos;
                        $intTiempoCliente = 0;
                    }
                    elseif ($intMinutos < $intTiempoTotal && $intMinutos > $intTiempoAnterEmp)
                    {
                        $intTiempoCliente = $intMinutos - $intTiempoAnterEmp;
                        $intTiempoEmpresa = $intTiempoAnterEmp;
                    }
                    else
                    {
                        $intTiempoEmpresa = $intTiempoAnterEmp;
                        $intTiempoCliente = $intTiempoAnterior;
                    }

                    //Tiempo Empresa
                    $intTiempoEmpresa += ($objEstadoActualTarea->getValorTiempo() == null ? 0
                            : $objEstadoActualTarea->getValorTiempo());

                    //Tiempo Cliente
                    $intTiempoCliente += ($objEstadoActualTarea->getValorTiempoPausa() == null ? 0
                            : $objEstadoActualTarea->getValorTiempoPausa());

                    $objEstadoActualTarea->setValorTiempo($intTiempoEmpresa);
                    $objEstadoActualTarea->setValorTiempoPausa($intTiempoCliente);
                }
                else
                {
                    $intMinutos += ($objEstadoActualTarea->getValorTiempo() == null ? 0
                            : $objEstadoActualTarea->getValorTiempo());

                    $objEstadoActualTarea->setValorTiempo($intMinutos);
                }
            }

            $this->emSoporte->persist($objEstadoActualTarea);
            $this->emSoporte->flush();

            if (strtoupper($strTipoReprograma) === 'C')
            {
                $strObservacion = $strEstadoActual === 'Pausada' ? 'Pausar' : 'Reprogramar';

                $this->ingresaHistorialYSeguimientoPorTarea(array('intDetalleId'    => $intIdDetalle,
                                                                  'strEstadoActual' => $strEstadoActual,
                                                                  'strOpcion'       => 'Seguimiento',
                                                                  'strUsrCreacion'  => $strUser,
                                                                  'strObservacion'  => 'Obs: Cliente Solicita '.$strObservacion));
            }

            $arrayRespuesta = array('status' => 'ok', 'message' => $strMessage);
        }
        catch (\Exception $objException)
        {
            $strMessage = 'Error al realizar el cálculo de la tarea';

            if (strpos($objException->getMessage(),'Error : ') !== false)
            {
                $strMessage = explode('Error : ', $objException->getMessage())[1];
            }

            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->calcularTiempoEstado',
                                             $objException->getMessage(),
                                             $strUser,
                                             $strIp);

            $arrayRespuesta = array('status' => 'fail', 'message' => $strMessage);
        }

        return $arrayRespuesta;
    }

    /**
     * administrarTarea
     *
     * Funcion que permite Iniciar, Pausar y Reanudar una tarea
     *
     * @param array $arrayParametros [strTipo               => parametro para determinar si se esta iniciando,pausando o reanudando una tarea,
     *                                objDetalle            => objeto del detalle relacionado a la tarea,
     *                                intPersonaEmpresaRol  => personaEmpresaRolId del usuario en session
     *                                strObservacion        => oservacion que es ingresada desde la opcion ejecutada,
     *                                strCodEmpresa         => se envia el codigo de la empresa
     *                                strUser               => se envia el usuario de donde se ejecuta la opcion
     *                                strIpUser             => se envia la ip del usuario de donde se ejecuta la opcion]
     *
     * @return string $strMensaje
     *
     * @author Richard Cabrera  <rcabrera@telconet.ec>
     * @version 1.0 07-11-2016
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 09-08-2017 -  En la tabla INFO_TAREA_SEGUIMIENTO y INFO_DETALLE_HISTORIAL, se regulariza el departamento creador de la accion y
     *                            se adicionan los campos de persona empresa rol id para identificar el responsable actual
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 14-09-2017 - Se cambia la accion de Iniciada a Ejecutada
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 11-09-2018 - Se realizan ajustes para obtener el id_punto al momento de enviar la notificación de los casos
     *
     * @author Modificado: Germán Valenzuela <rcabrera@telconet.ec>
     * @version 1.4 17-04-2019 - Se agrega el método genérico para realizar el cálculo de los tiempos de las tareas.
     *                         - Se agrega los parámetros *strTipoReprograma* y *intTiempo*.
     * 
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.5 08-07-2020 - Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.6 10-09-2021 - se agrega llamado a proceso encargado de notificar tracking a megadatos
     * 
     * Se elimina filtro de tareas por dpto Operaciones Urbanas para tracking map
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.7 15-10-2021
     *
     */
    public function administrarTarea($arrayParametros)
    {
        $objUltimaAsignacion   = null;
        $intDepartamentoId     = "";
        $arrayParametrosHist   = array();
        $arrayRespuestaHist    = array();
        $arrayRespuestaSegui   = array();
        $arrayParametrosSMS    = array();
        $arrayParametrosCorreo = array();
        $strAccion             = "";
        $strTipoReprograma     = $arrayParametros['strTipoReprograma'];
        $intTiempo             = $arrayParametros['intTiempo'];
        $strAccionTraking      = "";
        $arrayDepTraking       = array(128);

        //Comienzo de la transacción
        $this->emSoporte->beginTransaction();

        try
        {
            if($arrayParametros['strTipo'] == "iniciar")
            {
                $strEstado                 = "Aceptada";
                $strEstadoParcial          = "Iniciada";
                $strObservacionSeguimiento = "Tarea fue Iniciada";
                $strAccion                 = "Ejecutada";
                $strAccionTraking          = "Tarea Iniciada";
            }
            else if($arrayParametros['strTipo'] == "pausar")
            {
                $strEstado                 = "Pausada";
                $strEstadoParcial          = "Pausada";
                $strObservacionSeguimiento = "Tarea fue Pausada";
                $strAccion                 = "Pausada";
                $strAccionTraking          = "Tarea Pausada";

                if ((empty($strTipoReprograma) || empty($intTiempo))
                        && !empty($arrayParametros['intIdDepartamento']))
                {
                    $arrayParametroDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                            ->getOne('LISTAR_MOTIVOS','SOPORTE','','','',
                                    $arrayParametros['strObservacion'],$arrayParametros['intIdDepartamento'],'','','');

                    if (!empty($arrayParametroDet))
                    {
                        $strTipoReprograma = $arrayParametroDet['valor4'];
                        $intTiempo         = $arrayParametroDet['valor5'];
                    }
                }
            }
            else if($arrayParametros['strTipo'] == "reanudar")
            {
                $strEstado                 = "Aceptada";
                $strEstadoParcial          = "Reanudada";
                $strObservacionSeguimiento = "Tarea fue Reanudada";
                $strAccion                 = "Reanudada";
                $strAccionTraking          = "Tarea Reanudada";
            }

            //Se ingresa el Historial de la tarea
            $arrayParametrosHist["strCodEmpresa"]        = $arrayParametros['strCodEmpresa'];
            $arrayParametrosHist["strUsrCreacion"]       = $arrayParametros['strUser'];
            $arrayParametrosHist["strIpCreacion"]        = $arrayParametros['strIpUser'];
            if(is_object($arrayParametros['objDetalle']))
            {
                $arrayParametrosHist["intDetalleId"]         = $arrayParametros['objDetalle']->getId();

            }
            else
            {
                $arrayParametrosHist["intDetalleId"]         = "";

            }
            $arrayParametrosHist["strOpcion"]            = "Historial";
            $arrayParametrosHist["strEnviaDepartamento"] = "N";
            $arrayParametrosHist["strObservacion"]       = $arrayParametros['strObservacion'];
            $arrayParametrosHist["strEstadoActual"]      = $strEstado;
            $arrayParametrosHist["strAccion"]            = $strAccion;
            $arrayParametrosHist["strMotivo"]            = $strTipoReprograma;

            $arrayRespuestaHist = $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            //Se ingresa el Seguimiento de la tarea
            $arrayParametrosHist["strObservacion"] = $strObservacionSeguimiento .' | Obs: '.$arrayParametros['strObservacion'];
            $arrayParametrosHist["strOpcion"]      = "Seguimiento";

            $arrayRespuestaSegui = $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            //Se calcula los tiempos de los estado de las tareas
            if($arrayParametros['strTipo'] == "iniciar")
            {
                if($arrayParametros["intPersonaEmpresaRol"] != 0)
                {
                    //Se asigna como responsable al usuario que inicia la tarea
                    $objInfoDetalleAsignacion = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')
                                                                ->getUltimaAsignacion($arrayParametros['objDetalle']->getId());

                    $objInfoPersonaEmpresaRol = $this->emSoporte->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                ->findOneBy(array("id" => $arrayParametros["intPersonaEmpresaRol"]));

                    if(is_object($objInfoDetalleAsignacion))
                    {
                        if(is_object($objInfoPersonaEmpresaRol))
                        {
                            $objInfoPersona = $this->emSoporte->getRepository('schemaBundle:InfoPersona')
                                                              ->findOneBy(array("id" => $objInfoPersonaEmpresaRol->getPersonaId()));

                            $objInfoDetalleAsignacion->setPersonaEmpresaRolId($arrayParametros["intPersonaEmpresaRol"]);

                            if(is_object($objInfoPersona))
                            {
                                $objInfoDetalleAsignacion->setRefAsignadoId($objInfoPersona->getId());
                                $objInfoDetalleAsignacion->setRefAsignadoNombre($objInfoPersona->__toString());
                            }
                        }

                        $this->emSoporte->persist($objInfoDetalleAsignacion);
                        $this->emSoporte->flush();
                    }
                }

                $arrayParametrosSMS['tipoEvento']      = "INICIA";
                $arrayParametrosCorreo['codPlantilla'] = "CASOINICIACLI";
                $arrayParametrosCorreo['asunto']       = "Inicio de caso";
            }
            else if ($arrayParametros['strTipo'] == "pausar")
            {
                $arrayParametrosSMS['tipoEvento']      = "PAUSA";
                $arrayParametrosCorreo['codPlantilla'] = "CASOPAUSACLI";
                $arrayParametrosCorreo['asunto']       = "Pausa de caso";
            }
            else if ($arrayParametros['strTipo'] == "reanudar")
            {
                if($arrayParametros["intPersonaEmpresaRol"] != 0)
                {
                    //Se asigna como responsable al usuario que reanuda la tarea
                    $objInfoDetalleAsignacion = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')
                                                                ->getUltimaAsignacion($arrayParametros['objDetalle']->getId());

                    $objInfoPersonaEmpresaRol = $this->emSoporte->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                ->findOneBy(array("id" => $arrayParametros["intPersonaEmpresaRol"]));

                    if(is_object($objInfoDetalleAsignacion))
                    {
                        if(is_object($objInfoPersonaEmpresaRol))
                        {
                            $objInfoPersona = $this->emSoporte->getRepository('schemaBundle:InfoPersona')
                                                              ->findOneBy(array("id" => $objInfoPersonaEmpresaRol->getPersonaId()));

                            $objInfoDetalleAsignacion->setPersonaEmpresaRolId($arrayParametros["intPersonaEmpresaRol"]);

                            if(is_object($objInfoPersona))
                            {
                                $objInfoDetalleAsignacion->setRefAsignadoId($objInfoPersona->getId());
                                $objInfoDetalleAsignacion->setRefAsignadoNombre($objInfoPersona->__toString());
                            }
                        }

                        $this->emSoporte->persist($objInfoDetalleAsignacion);
                        $this->emSoporte->flush();
                    }
                }

                $arrayParametrosSMS['tipoEvento']        = "REANUDA";
                $arrayParametrosCorreo['codPlantilla']   = "CASOREANUDACLI";
                $arrayParametrosCorreo['asunto']         = "Reanudación de caso";
            }

            //Método encargado de calcular los tiempos de las tareas
            $this->calcularTiempoEstado(array('strEstadoActual'   => $strEstadoParcial,
                                              'intIdDetalle'      => $arrayParametros['objDetalle']->getId(),
                                              'strTipoReprograma' => $strTipoReprograma,
                                              'intTiempo'         => $intTiempo,
                                              'strUser'           => $arrayParametros['strUser'],
                                              'strIp'             => $arrayParametros['strIpUser']));

            if($arrayParametros["intPersonaEmpresaRol"] != 0)
            {
                //Se obtiene el departamento en base al usuario en session
                $objPersonaEmpresaRol = $this->emSoporte->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                        ->findOneBy(array("id" => $arrayParametros["intPersonaEmpresaRol"]));

                if(is_object($objPersonaEmpresaRol))
                {
                    $intDepartamentoId = $objPersonaEmpresaRol->getDepartamentoId();
                }
            }

            //Se obtiene el asignado actual de la tarea
            $objUltimaAsignacion = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')
                                                   ->getUltimaAsignacion($arrayParametros['objDetalle']->getId());

            if(is_object($arrayRespuestaHist["objInfoDetalleHistorial"]))
            {
                //Se setea el persona empresa rol del ultimo responsable de la tarea
                $objInfoDetalleHistorial = $this->emSoporte->getRepository('schemaBundle:InfoDetalleHistorial')
                                                           ->find($arrayRespuestaHist["objInfoDetalleHistorial"]->getId());

                if(is_object($objUltimaAsignacion))
                {
                    $objInfoDetalleHistorial->setPersonaEmpresaRolId($objUltimaAsignacion->getPersonaEmpresaRolId());
                    $this->emSoporte->persist($objInfoDetalleHistorial);
                    $this->emSoporte->flush();
                }

            }

            if(is_object($arrayRespuestaSegui["objInfoTareaSeguimiento"]))
            {
                //Se obtiene el departamento en base al usuario en session
                $objInfoTareaSeguimiento = $this->emSoporte->getRepository('schemaBundle:InfoTareaSeguimiento')
                                                           ->find($arrayRespuestaSegui["objInfoTareaSeguimiento"]->getId());

                if(is_object($objUltimaAsignacion))
                {
                    $objInfoTareaSeguimiento->setPersonaEmpresaRolId($objUltimaAsignacion->getPersonaEmpresaRolId());
                }
                if(!empty($intDepartamentoId))
                {
                    $objInfoTareaSeguimiento->setDepartamentoId($intDepartamentoId);
                    $this->emSoporte->persist($objInfoTareaSeguimiento);
                    $this->emSoporte->flush();
                }
            }

            $this->emSoporte->commit();

            /******************************************************/
            /******************Envio de sms y correo***************/
            $arrayPuntoCliente = $arrayParametros['intPtoCliente'];
            $arrayCaso = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                         ->tareaPerteneceACaso($arrayParametros['objDetalle']->getId());
            if ($arrayCaso[0]['caso']!=0)
            {
                $arrayDetalleHip = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                              ->getCasoPadreTarea($arrayParametros['objDetalle']->getId());
                $intIdCaso = $arrayDetalleHip[0]->getCasoId()->getId();
                $objInfoCaso      = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->find($intIdCaso);
                if (($objInfoCaso->getTipoCasoId()->getNombreTipoCaso() == 'Tecnico')||
                   ($objInfoCaso->getTipoCasoId()->getNombreTipoCaso() == 'Arcotel'))
                {
                    $arrayAfectacionPadres = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                                             ->getRegistrosAfectadosTotalXCaso($intIdCaso,'Cliente','Data');
                    $intIdPuntoCliente = "";
                    foreach($arrayAfectacionPadres as $arrayAfectadoPadre)
                    {
                        $intIdPuntoCliente = $arrayAfectadoPadre['afectadoId'];

                        $arrayParametrosSMS['puntoId']      = $intIdPuntoCliente;
                        $arrayParametrosSMS['personaId']    = "";
                        $arrayParametrosSMS['destinatario'] = "CLI";
                        $arrayParametrosSMS['tipoEnvio']    = "OUT";
                        $arrayParametrosSMS['tipoNotifica'] = "SMS";
                        $arrayParametrosSMS['empresa']      = $arrayParametros["strCodEmpresa"];
                        $arrayParametrosSMS['usuario']      = $arrayParametros['strUser'];
                        $arrayParametrosSMS['casoId']       = $objInfoCaso->getId();
                        $arrayParametrosSMS['detalleId']    = "";
                        $arrayParametrosSMS['asignacion']   = "";
                        $this->enviaSMSCasoCliente($arrayParametrosSMS);
                        $arrayParametrosCorreo['puntoId']        = $intIdPuntoCliente;
                        $arrayParametrosCorreo['usuario']        = $arrayParametros['strUser'];
                        $arrayParametrosCorreo['caso']           = $objInfoCaso;
                        $arrayParametrosCorreo['idDepartamento'] = $arrayParametros['idDepartamento'];
                        $arrayParametrosCorreo['empresa']        = $arrayParametros["strCodEmpresa"];
                        $arrayParametrosCorreo['observacion']    =$arrayParametros['strObservacion'];
                        $this->enviaCorreoClientesCasos($arrayParametrosCorreo);
                    }
                }
            }
            $arrayRespuesta["strRespuesta"] = "OK";

            //ACTUALIZA TAREA EN INFO_TAREA
            if ( isset($arrayParametros['objDetalle']) && is_object($arrayParametros['objDetalle']) )
            {
                $arrayParametrosInfoTarea['intDetalleId'] = $arrayParametros['objDetalle']->getId();
                $arrayParametrosInfoTarea['strUsrUltMod'] = isset($arrayParametros['strUser'])? $arrayParametros['strUser']:'';
                $this->actualizarInfoTarea($arrayParametrosInfoTarea);
            }

            //validacion si es tarea de caso y es hal asignado
            if($arrayParametros['strTipo'] == "iniciar" || $arrayParametros['strTipo'] == "pausar" || 
               $arrayParametros['strTipo'] == "reanudar")
            {
                $boolEsHal = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')
                                             ->isAsignadoHal(array( 'intDetalleId' => $arrayParametros['objDetalle']->getId()));
                
                if($boolEsHal)
                { 
                    $strUsrCreacion = $arrayParametros['strUser'];
                    $strIpCreacion = $arrayParametros['strIpUser'];
                    $intIdDetalle = $arrayParametros['objDetalle']->getId();
                    $objOutCommand = array();
                    $strCommand = 'nohup php /home/telcos/app/console Envia:Tracking ';
                    $strCommand = $strCommand . escapeshellarg($strUsrCreacion). ' ';
                    $strCommand = $strCommand . escapeshellarg($strIpCreacion). ' ';
                    $strCommand = $strCommand . '"'.escapeshellarg($strAccionTraking).'" ';
                    $strCommand = $strCommand . escapeshellarg($intIdDetalle). ' ';
                    
                    $strCommand = $strCommand .'>/dev/null 2>/dev/null &';

                    shell_exec($strCommand);                                      

                }
            }
        }
        catch(\Exception $e)
        {
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
                $this->emSoporte->getConnection()->close();
            }
            $this->serviceUtil->insertError('TELCOS+',
                                            'SoporteService->administrarTarea',
                                            $e->getMessage(),
                                            $arrayParametros['strUser'],
                                            $arrayParametros['strIpUser']);
            $arrayRespuesta["strRespuesta"] = "ERROR";
        }
        return $arrayRespuesta;
    }

    /**
     * obtenerDiferenciaFechas
     *
     * Metodo que realiza el calculo de la diferencia entre fechas y retorna el resultado en minutos
     *
     * @param string  $fechaFin
     * @param string $fechaInicio
     *
     * @return string con respuesta de error o diferencia en minutos
     *
     * @author John Vera  <javera@telconet.ec>
     * @version 1.0 25-08-2014
     */
    public function obtenerDiferenciaFechas($fechaFin, $fechaInicio)
    {
        $inicio = date_format($fechaInicio, 'Y-m-d H:i');
        $fin = date_format($fechaFin, 'Y-m-d H:i');

        $fechaInicio = strtotime(date_format($fechaInicio, 'Y-m-d'));
        $fechaFin = strtotime(date_format($fechaFin, 'Y-m-d'));

        $horaInicio = explode(":", explode(" ", $inicio)[1]);
        $horaFin = explode(":", explode(" ", $fin)[1]);

        $dif = $fechaFin - $fechaInicio;

        $numeroDias = $dif / 60 / 60 / 24;

        if($numeroDias > 0)
        {
            $numeroDias = $numeroDias - 1;
            $minutosInicio = (24 * 60) - ( $horaInicio[0] * 60 + $horaInicio[1] );
            $minutosFin = $horaFin[0] * 60 + $horaFin[1];
            $minutosTotales = $minutosInicio + $minutosFin;
            $minutosAsjudicar = abs(($numeroDias * 1440) + $minutosTotales);
        }
        else
        {
            $minutosInicio = $horaInicio[0] * 60 + $horaInicio[1];
            $minutosFin = $horaFin[0] * 60 + $horaFin[1];
            $minutosAsjudicar = $minutosFin - $minutosInicio;
        }

        return $minutosAsjudicar;
    }//fin de la funcion obtenerDiferenciaFechas

     /**
     * crearCaso
     *
     * Metodo encargado de registrar el Caso generado por el Usuario, envia correo y despacha SMS al Cliente
     *
     * @param request  $peticion
     * @param InfoCaso $entity
     * @param form $form
     * @param string $codEmpresa
     * @param string $host
     *
     * @return string con respuesta de error o id del caso
     *
     * @author Modificado: Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 3.0 09-05-2019 - Se realizan ajustes en la programación para enviar la notificación de los casos aperturados de un cliente,
     *                           en caso que el tipo sea *BACKBONE*.
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.9 05-02-2019 -  Se realizan ajustes en la programación para enviar solo las notificaciones de TN a los alias de L1 y L2
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.8 06-11-2018 -  Se realizan ajustes en la programación que enviá la notificación a clientes en casos Backbone, el cambio
     *                            consiste en que solo se considere los afectados que tengan seleccionado un switch y una interfaz
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.6 29-10-2018 -  Se realizan ajustes en la programación para habilitar notificaciones al departamento de NOC, solo para casos
     *                            tipo Backbone
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.5 09-10-2018 -  Se realizan ajustes en la programación para habilitar las notificaciones a clientes, para los casos tipo Backbone
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.4 28-03-2017  Se agrega la dirección,descripción del punto y tipo de caso en la notificación de apertura de caso
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.3 10-03-2017  Se realizan ajustes para enviar SMS a los casos de Tipo Tecnico y Arcotel
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.2 28-10-2016  Se realizan ajustes por mejoras en la funcion getClientesXInterfacesId del infoServicioRepository
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.1 07-07-2016 Se realizan ajustes para ingresar el tipo de caso backbone y no se realiza notificacion a cliente cuando es caso
     *                         sin afectacion
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.0 05-07-2016 Se valida que si ingresan caracteres de apertura y cierre de tags en la observacion, se eliminan
     *
     * @author modificado Allan Suarez <arsuarez@telconet.ec>
     * @version 1.9 23-06-2016 Se realizan ajustes para que los correos que se envien a los clientes sean solo de Contactos Tecnicos
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.8 23-06-2016 - En las notificaciones al cliente se reemplaza el nombre de la razon social por el nombre del login del afectado
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.7 08-06-2016 - Se realizan ajustes para que Arcotel funcione igual que Tecnico
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.6 18-12-2015 - Se realizan ajsutes por motivo del nuevo tipo de caso movilizacion
     *
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.5 29-12-2014 - Mejora en lineas de codigo del metodo
     *
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.0 25-06-2014 - Version Inicial
     * 
     * @author Francisco Cueva <facueva@telconet.ec>
     * @version 1.0 25-05-2021 - Mejora en tiempos de respuesta al crear casos Backbone
     */
    public function crearCaso($peticion, $entity, $form, $codEmpresa)
    {
        $parametros          = $peticion->get('telconet_schemabundle_infocasotype');
        $cliente_sesion      = $peticion->getSession()->get('cliente');
        $ptoCliente_sesion   = $peticion->getSession()->get('ptoCliente');
        $strDireccionPunto   = "";
        $strDescripcionPunto = "";
        $strTipoCaso         = "";
        $versionIni          = "";
        $tituloIni           = "";
        $strCadenaContactos     = "";
        $arrayPuntosBackbone    = array();
        $arrayPuntosBackboneTotal = array();
        $arrayPuntosNotificar     = array();
        $arrayPuntosBackboneElemento = array();
        $arrayPuntosBackboneCliente  = array();
        $arrayEstadosServicio   = array('Activo','In-Corte');
        $arrayRazonesSocial     = array();
        $arrayBackboneTotalElemento = array();
        $arrayBackboneTotalCliente  = array();
        $arrayParamCorreosNoc       = array();
        $arrayParamCorreosCliente   = array();
        $arrayCorreosNoc            = array();
        $arrayCorreos               = array();

        $boolEsSoloClienteSesion = false;

        if($form->isValid())
        {
            $this->emSoporte->getConnection()->beginTransaction();
            $this->emInfraestructura->getConnection()->beginTransaction();
            $this->emComunicacion->getConnection()->beginTransaction();
            $this->emComercial->getConnection()->beginTransaction();

            try
            {
                 //Se obtiene descripcion de los Sintomas y afectados/criterios en casa de ser un caso de tipo masivo
                $json = json_decode($peticion->get('sintomas_escogidos'));
                $array = $json->sintomas;
                //Se obtiene el valor del tipo de backbone seleccionado
                $tipoBackbone = $peticion->get('comboTipoBackbone-inputEl')?$peticion->get('comboTipoBackbone-inputEl'):"";
                //Obtenemos el nombre del tipo de caso para validacion posterior
                $strTipoCaso = $form->get('tipoCasoId')->getData()->getNombreTipoCaso();

                if($ptoCliente_sesion && ($strTipoCaso == 'Tecnico' || $strTipoCaso == 'Arcotel'))
                {
                    $boolEsSoloClienteSesion = true;
                }

                //Se verifica que existan al menos un sintoma creado obligatorio para que el caso sea creado
                if($array && count($array) > 0)
                {
                    $strMantProgramado = $peticion->get('check_mante_programado')?
                                         $peticion->get('check_mante_programado'):"N";                                       

                    $entity->setNumeroCaso($this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                                           ->getNumeroCasoNext($form->get('tipoCasoId')->getData()));
                    $fecha = date_create(date('Y-m-d H:i', strtotime($peticion->get('fecha_apertura') . ' ' . $peticion->get('hora_apertura'))));

                    //Se eliminan simbolos de tags
                    $versionIni = $this->eliminarSimbolosDeTags($form->get('versionIni')->getData());
                    $tituloIni  = $this->eliminarSimbolosDeTags($form->get('tituloIni')->getData());

                    $entity->setVersionIni($versionIni);
                    $entity->setTituloIni($tituloIni);
                    $entity->setFeApertura($fecha);
                    $entity->setTipoNotificacionId($parametros['tipoNotificacionId']);
                    $entity->setFeCreacion(new \DateTime('now'));
                    $entity->setUsrCreacion($peticion->getSession()->get('user'));
                    $entity->setIpCreacion($peticion->getClientIp());
                    $entity->setEmpresaCod($peticion->getSession()->get('idEmpresa'));
                    $entity->setTipoAfectacion($parametros['tipoAfectacion']);
                    $entity->setTipoBackbone($tipoBackbone);
                    $this->emSoporte->persist($entity);
                    $this->emSoporte->flush();

                    $historial = new InfoCasoHistorial();
                    $historial->setCasoId($entity);
                    $historial->setObservacion("Creacion del caso");
                    $historial->setEstado("Creado");
                    $historial->setFeCreacion(new \DateTime('now'));
                    $historial->setUsrCreacion($peticion->getSession()->get('user'));
                    $historial->setIpCreacion($peticion->getClientIp());
                    $this->emSoporte->persist($historial);
                    $this->emSoporte->flush();

                    //Se recorre todos los sintomas que hayan sido escogidos
                    foreach($array as $sintoma)
                    {
                        $idSintoma = $sintoma->id_sintoma;

                        $sintomas  = $this->emSoporte->getRepository('schemaBundle:AdmiSintoma')->find($idSintoma);

                        $caso = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->find($entity->getId());

                        $infoDetalleHipotesis = new InfoDetalleHipotesis();
                        $infoDetalleHipotesis->setCasoId($caso);
                        $infoDetalleHipotesis->setSintomaId($sintomas);
                        $infoDetalleHipotesis->setEstado("Creado");
                        $infoDetalleHipotesis->setObservacion("Creacion del Caso");
                        $infoDetalleHipotesis->setFeCreacion(new \DateTime('now'));
                        $infoDetalleHipotesis->setUsrCreacion($peticion->getSession()->get('user'));
                        $infoDetalleHipotesis->setIpCreacion($peticion->getClientIp());
                        $this->emSoporte->persist($infoDetalleHipotesis);
                        $this->emSoporte->flush();

                        $infoDetalle = new InfoDetalle();
                        $infoDetalle->setDetalleHipotesisId($infoDetalleHipotesis->getId());
                        $infoDetalle->setPesoPresupuestado(0);
                        $infoDetalle->setValorPresupuestado(0);
                        $infoDetalle->setFeCreacion(new \DateTime('now'));
                        $infoDetalle->setUsrCreacion($peticion->getSession()->get('user'));
                        $infoDetalle->setIpCreacion($peticion->getClientIp());
                        $this->emSoporte->persist($infoDetalle);
                        $this->emSoporte->flush();

                        $boolCriterioAfectado = false;
                        $intIdCriterioIGlobal = 0; //Ultimo id de criterios seleccionados

                        //Cuando un cliente se encuentra en sesion cuando
                        //Y no es un caso de Backbone
                        if($boolEsSoloClienteSesion)
                        {
                            $puntoId       = $ptoCliente_sesion['id'];
                            $puntoLogin    = $ptoCliente_sesion['login'];
                            $clienteNombre = ($cliente_sesion['razon_social'] ?
                                    $cliente_sesion['razon_social'] :
                                    $cliente_sesion['nombres'] . " " . $cliente_sesion['apellidos']
                                );

                            $criterio = new InfoCriterioAfectado();
                            $criterio->setId(1);
                            $criterio->setDetalleId($infoDetalle);
                            $criterio->setCriterio("Clientes");
                            $criterio->setOpcion("Cliente: " . $clienteNombre . " | OPCION: Punto Cliente");
                            $criterio->setFeCreacion(new \DateTime('now'));
                            $criterio->setUsrCreacion($peticion->getSession()->get('user'));
                            $criterio->setIpCreacion($peticion->getClientIp());
                            $this->emSoporte->persist($criterio);
                            $this->emSoporte->flush();

                            $afectado = new InfoParteAfectada();
                            $afectado->setTipoAfectado("Cliente");
                            $afectado->setDetalleId($infoDetalle->getId());
                            $afectado->setCriterioAfectadoId($criterio->getId());
                            $afectado->setAfectadoId($puntoId);
                            $afectado->setFeIniIncidencia($caso->getFeApertura());
                            $afectado->setAfectadoNombre($puntoLogin);
                            $afectado->setAfectadoDescripcion($clienteNombre);
                            $afectado->setFeCreacion(new \DateTime('now'));
                            $afectado->setUsrCreacion($peticion->getSession()->get('user'));
                            $afectado->setIpCreacion($peticion->getClientIp());
                            $this->emSoporte->persist($afectado);
                            $this->emSoporte->flush();

                            $boolCriterioAfectado = true;
                        }
                    }
                        //Verifica que existan afectados masivos cada que exista o no un cliente en sesion,
                    //caso de que no haya ni afectados masivos ni cliente en sesion se lanzara un mensaje de error
                    //if(isset($sintoma->criterios_sintoma) || $boolEsSoloClienteSesion )
                    if(isset($sintoma->criterios_sintoma))
                    {
                        $json_criterios = json_decode($sintoma->criterios_sintoma);

                        if(isset($json_criterios->total) && isset($json_criterios->criterios) && $json_criterios->total > 0)
                        {
                            foreach($json_criterios->criterios as $cri)
                            {
                                $intIdCriterioIGlobal = $boolCriterioAfectado ? $cri->id_criterio_afectado + 1 : $cri->id_criterio_afectado;

                                $criterio = new InfoCriterioAfectado();
                                $criterio->setId($intIdCriterioIGlobal);
                                $criterio->setDetalleId($infoDetalle);
                                $criterio->setCriterio($cri->criterio);
                                $criterio->setOpcion($cri->opcion);
                                $criterio->setFeCreacion(new \DateTime('now'));
                                $criterio->setUsrCreacion($peticion->getSession()->get('user'));
                                $criterio->setIpCreacion($peticion->getClientIp());
                                $this->emSoporte->persist($criterio);
                            }
                            $this->emSoporte->flush();

                            //Todos los afectados por cada criterio
                            $ArrayAfectadosElementos = array();

                            $json_afectados = json_decode($sintoma->afectados_sintoma);

                            //Se agregan todos los afectados por criterio seleccionado
                            foreach($json_afectados->afectados as $afec)
                            {
                                $intIdCriterio = $boolCriterioAfectado ? $afec->id_criterio + 1 : $afec->id_criterio;

                                $criterio = $this->emSoporte->getRepository('schemaBundle:InfoCriterioAfectado')
                                                            ->findOneBy(array('id'        => $intIdCriterio,
                                                                              'detalleId' => $infoDetalle->getId()));

                                $afectado = new InfoParteAfectada();

                                if(strpos($criterio->getOpcion(), "Punto Cliente") !== false)
                                {
                                    $afectado->setTipoAfectado("Cliente");
                                }
                                else if(strpos($criterio->getOpcion(), "Servicios") !== false)
                                {
                                    $afectado->setTipoAfectado("Servicio");
                                }
                                else if(strpos($criterio->getOpcion(), "Empleados") !== false)
                                {
                                    $afectado->setTipoAfectado("Empleado");
                                }
                                else if(strpos($criterio->getOpcion(), "Proveedor") !== false)
                                {
                                    $afectado->setTipoAfectado("Proveedor");
                                }
                                else
                                {
                                    $afectado->setTipoAfectado("Elemento");
                                }

                                $afectado->setDetalleId($infoDetalle->getId());
                                $afectado->setCriterioAfectadoId($criterio->getId());
                                $afectado->setAfectadoId($afec->id_afectado);
                                $afectado->setFeIniIncidencia($caso->getFeApertura());
                                $afectado->setAfectadoNombre($afec->nombre_afectado);
                                $afectado->setAfectadoDescripcionId($afec->id_afectado_descripcion);
                                $afectado->setAfectadoDescripcion($afec->descripcion_afectado);
                                $afectado->setFeCreacion(new \DateTime('now'));
                                $afectado->setUsrCreacion($peticion->getSession()->get('user'));
                                $afectado->setIpCreacion($peticion->getClientIp());
                                $this->emSoporte->persist($afectado);

                                if($afectado->getTipoAfectado() == "Elemento")
                                {
                                    $arrayAfecElemento["afectado_id"]             = $afectado->getAfectadoId();
                                    $arrayAfecElemento["afectado_nombre"]         = $afectado->getAfectadoNombre();
                                    $arrayAfecElemento["afectado_descripcion"]    = $afectado->getAfectadoDescripcion();
                                    $arrayAfecElemento["afectado_descripcion_id"] = $afectado->getAfectadoDescripcionId();

                                    $ArrayAfectadosElementos[] = $arrayAfecElemento;
                                }
                            }
                            $this->emSoporte->flush();

                            //Se recorre todos los elementos afectados
                            if($ArrayAfectadosElementos && count($ArrayAfectadosElementos) > 0)
                            {
                                $arrayIdsInterfaces = false;
                                foreach($ArrayAfectadosElementos as $afectadoElem)
                                {
                                    $afectadoElemetoId = $afectadoElem["afectado_id"] ? $afectadoElem["afectado_id"] : "";
                                    $afectadoInterfaceId = $afectadoElem["afectado_descripcion_id"] ?
                                        $afectadoElem["afectado_descripcion_id"] : "";

                                    //Se van agregando todas las interfaces seleccionadas como afectacion del CASO
                                    if($afectadoInterfaceId && $afectadoInterfaceId != '')
                                    {
                                        $arrayIdsInterfaces[] = $afectadoInterfaceId;
                                    }
                                    else //En caso de no haber escogido ninguna interfaz por default se buscan todas las interfaces
                                    //del elemento
                                    {
                                        $Data_Interfaces = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                            ->getIdsInterfacesXElementoId($afectadoElemetoId);

                                        if($Data_Interfaces && count($Data_Interfaces) > 0)
                                        {
                                            foreach($Data_Interfaces as $valueDataInterfaces)
                                            {
                                                if($valueDataInterfaces && $valueDataInterfaces["id"])
                                                {
                                                    $arrayIdsInterfaces[] = $valueDataInterfaces["id"];
                                                }
                                            }
                                        }
                                    }
                                }//fin foreach arrayAfectadosElementos

                                //Se agrega validacion para que no se consulte los clientes por Interface por el tema de
                                //elementos activo fijo
                                //dado que este tipo de elementos no tienen interface
                                if($arrayIdsInterfaces && $arrayIdsInterfaces != "")
                                {
                                    if(count($arrayIdsInterfaces) > 999)
                                    {
                                        $strCadenaInterfaces = "";
                                        foreach($arrayIdsInterfaces as $idInterface)
                                        {
                                            $strCadenaInterfaces .=  $idInterface . ",";
                                        }

                                        $arrayParametros["strCadenaInterfaces"] = $strCadenaInterfaces;

                                        //Se carga la tabla temporal con las interfaces consultadas en el momento
                                        $intProcesoIdTablaTemporal = $this->emComercial->getRepository("schemaBundle:InfoInterfacesAfectadas")
                                                                                       ->cargaTmpInterfacesAfectadas($arrayParametros);

                                        $arrayParametros["intProcesoIdTablaTemporal"] = $intProcesoIdTablaTemporal;

                                        $Data_ClientesInterfaces = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                                                                     ->getClientesXInterfacesTmp($arrayParametros);

                                        $arrayParametros["intProcesoId"] = $intProcesoIdTablaTemporal;
                                        //Se elimina la tabla temporal
                                        $strMensajeError = $this->emComercial->getRepository("schemaBundle:InfoInterfacesAfectadas")
                                                                             ->borraTmpInterfacesAfectadas($arrayParametros);
                                    }
                                    else
                                    {
                                        $Data_ClientesInterfaces = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                                                                     ->getClientesXInterfacesId($arrayIdsInterfaces);
                                    }

                                    if($Data_ClientesInterfaces && count($Data_ClientesInterfaces) > 0)
                                    {
                                        $strUsrCreacion = $peticion->getSession()->get('user');
                                        $strIp = $peticion->getClientIp();
                                        $arrayCriterios = [];
                                        $boolIngresaCriterios = false;

                                        foreach($Data_ClientesInterfaces as $valueClienteInterface)
                                        {
                                            $data_puntoId = $valueClienteInterface['idPunto'];
                                            $data_puntoLogin = $valueClienteInterface['login'];

                                            $data_clienteNombre = ($valueClienteInterface['razonSocial'] ?
                                                    $valueClienteInterface['razonSocial'] :
                                                    $valueClienteInterface['nombres'] . " " . $valueClienteInterface['apellidos']);


                                            $data_existeCriterio = false;
                                            $data_existeCriterioAfectado = false;

                                            if(isset($sintoma->criterios_sintoma) && $sintoma->criterios_sintoma != "")
                                            {
                                                $json_criterios = json_decode($sintoma->criterios_sintoma);
                                                if($json_criterios->total > 0)
                                                {
                                                    if(isset($json_criterios->criterios) && $json_criterios->criterios != "")
                                                    {
                                                        $array_criterios = $json_criterios->criterios;
                                                        foreach($array_criterios as $cri)
                                                        {
                                                            if($cri->criterio == "Clientes" &&
                                                                $cri->opcion == "Cliente: " . $data_clienteNombre .
                                                                " | OPCION: Punto Cliente")
                                                            {
                                                                $data_existeCriterio = true;
                                                            }
                                                        }

                                                        $json_afectados = json_decode($sintoma->afectados_sintoma);
                                                        $array_afectados = $json_afectados->afectados;
                                                        foreach($array_afectados as $afec)
                                                        {
                                                            if($afec->id_afectado == $data_puntoId &&
                                                                $afec->nombre_afectado == $data_puntoLogin &&
                                                                $afec->descripcion_afectado == $data_clienteNombre)
                                                            {
                                                                $data_existeCriterioAfectado = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }//fin isset criterios sintoma

                                            if(!$data_existeCriterio && !$data_existeCriterioAfectado)
                                            {
                                                $boolIngresaCriterios = true;
                                                $intIdCriterioIGlobal = $intIdCriterioIGlobal + 500;

                                                $criterio = new InfoCriterioAfectado();
                                                $criterio->setId($intIdCriterioIGlobal);
                                                $criterio->setDetalleId($infoDetalle);
                                                $criterio->setCriterio("Clientes");
                                                $criterio->setOpcion("Cliente: " . $data_clienteNombre . " | OPCION: Punto Cliente");
                                                $criterio->setFeCreacion(new \DateTime('now'));
                                                $criterio->setUsrCreacion($strUsrCreacion);
                                                $criterio->setIpCreacion($strIp);
                                                $this->emSoporte->persist($criterio);

                                                $arrayCriterios[$intIdCriterioIGlobal] = array(
                                                    "boolRegistro" => true,
                                                    "data_puntoId" => $data_puntoId,
                                                    "data_puntoLogin" => $data_puntoLogin,
                                                    "data_clienteNombre" => $data_clienteNombre
                                                );

                                            }//fin if data existe
                                        }
                                        $this->emSoporte->flush();
                                        if($boolIngresaCriterios)
                                        {
                                            foreach ($arrayCriterios as $keyCriterio => $valCriterio)
                                            {
                                                if($arrayCriterios[$keyCriterio]["boolRegistro"])
                                                {
                                                    $afectado = new InfoParteAfectada();
                                                    $afectado->setTipoAfectado("Cliente");
                                                    $afectado->setDetalleId($infoDetalle->getId());
                                                    $afectado->setCriterioAfectadoId($keyCriterio);
                                                    $afectado->setAfectadoId($arrayCriterios[$keyCriterio]["data_puntoId"]);
                                                    $afectado->setFeIniIncidencia($caso->getFeApertura());
                                                    $afectado->setAfectadoNombre($arrayCriterios[$keyCriterio]["data_puntoLogin"]);
                                                    $afectado->setAfectadoDescripcion($arrayCriterios[$keyCriterio]["data_clienteNombre"]);
                                                    $afectado->setFeCreacion(new \DateTime('now'));
                                                    $afectado->setUsrCreacion($strUsrCreacion);
                                                    $afectado->setIpCreacion($strIp);
                                                    $this->emSoporte->persist($afectado);
                                                }
                                            }
                                            $this->emSoporte->flush();
                                        }
                                    }
                                }//Fin validacion existen interfaces
                            }//FIn validacion existen elementos afectados
                        }
                        else
                        {
                            //Devuelve error cuando por alguna razon se esta creando el caso sin nunguna afectacion
                            //No realiza demás procesos
                            return "AFECTADO-ERROR";
                        }
                    }//if array SINTOMAS ESCOGIDOS

                    $departamento = $this->emComercial->getRepository('schemaBundle:AdmiDepartamento')
                                                      ->find($peticion->getSession()->get('idDepartamento'));

                    $empleado = false;
                    if($peticion->getSession()->get('id_empleado'))
                    {
                        $empleado = $this->emComercial
                            ->getRepository('schemaBundle:InfoPersona')
                            ->find($peticion->getSession()->get('id_empleado'));
                    }

                    //************************************************************************************
                    //************************ ENVIO MAILS Y COMUNICACION ********************************
                    //************************************************************************************

                    if($peticion->getSession()->get('id_empleado'))
                    {
                        $infoPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                            ->findOneBy(array('personaId' => $empleado->getId(), 'formaContactoId' => 5, 'estado' => "Activo"));

                        if($infoPersonaFormaContacto)
                        {
                            $to[] = $infoPersonaFormaContacto->getValor(); //Correo Persona Asignada
                        }
                    }

                    $this->emSoporte->getConnection()->commit();
                    $this->emComercial->getConnection()->commit();
                    $this->emInfraestructura->getConnection()->commit();

                    $caso = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->find($entity->getId());

                    if($caso)
                    {
                        $clase = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                                                      ->findOneByNombreClaseDocumento("Notificacion Interna Correo");
                        $asunto = "Creacion de Caso " . $caso->getNumeroCaso();
                        //Se guarda la comunicacion a realizar

                        $infoDocumento = new InfoDocumento();
                        $infoDocumento->setClaseDocumentoId($clase);
                        $infoDocumento->setMensaje("Apertura Caso ".$caso->getNumeroCaso()." por parte de ".
                                                    $peticion->getSession()->get('empleado'));
                        $infoDocumento->setEstado('Activo');
                        $infoDocumento->setNombreDocumento($asunto);
                        $infoDocumento->setFeCreacion(new \DateTime('now'));
                        $infoDocumento->setUsrCreacion($peticion->getSession()->get('user'));
                        $infoDocumento->setIpCreacion($peticion->getClientIp());
                        $infoDocumento->setEmpresaCod($codEmpresa);
                        $this->emComunicacion->persist($infoDocumento);
                        $this->emComunicacion->flush();

                        $infoComunicacion = new InfoComunicacion();
                        $infoComunicacion->setCasoId($caso->getId());
                        $infoComunicacion->setFormaContactoId(5);
                        $infoComunicacion->setClaseComunicacion("Enviado");
                        $infoComunicacion->setFechaComunicacion(new \DateTime('now'));
                        $infoComunicacion->setFeCreacion(new \DateTime('now'));
                        $infoComunicacion->setEstado('Activo');
                        $infoComunicacion->setUsrCreacion($peticion->getSession()->get('user'));
                        $infoComunicacion->setIpCreacion($peticion->getClientIp());
                        $infoComunicacion->setEmpresaCod($codEmpresa);
                        $this->emComunicacion->persist($infoComunicacion);
                        $this->emComunicacion->flush();

                        $infoDocumentoComunicacion = new InfoDocumentoComunicacion();
                        $infoDocumentoComunicacion->setComunicacionId($infoComunicacion);
                        $infoDocumentoComunicacion->setDocumentoId($infoDocumento);
                        $infoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
                        $infoDocumentoComunicacion->setEstado('Activo');
                        $infoDocumentoComunicacion->setUsrCreacion($peticion->getSession()->get('user'));
                        $infoDocumentoComunicacion->setIpCreacion($peticion->getClientIp());
                        $this->emComunicacion->persist($infoDocumentoComunicacion);
                        $this->emComunicacion->flush();

                        $this->emComunicacion->getConnection()->commit();

                        $empresa      = '';
                        $canton       = '';
                        $departamentoId = '';
                        /*
                          OBTENCION DEL CANTON DEL ENCARGADO DE LA TAREA
                         */
                        if($departamento)
                        {
                            $empresa = $departamento->getEmpresaCod();
                            $departamentoId = $departamento->getId();
                        }

                        $oficina = $this->emComercial->getRepository('schemaBundle:InfoOficinaGrupo')->find($peticion->getSession()->get('idOficina'));

                        if($oficina)
                        {
                            $canton = $oficina->getCantonId();
                        }

                        /********************************************************************

                            USO DE SERVICE ENVIOPLANTILLA PARA GESTION DE ENVIO DE CORREOS

                         ***********************************************************************/

                        $arrayAfectados = $this->getAfectacionDetalladaPorCaso($caso->getId());

                        $parametros = array('caso' => $caso,
                                            'afectadoPadre'   => $arrayAfectados['afectadosPadre'],
                                            'afectadoDetalle' => $arrayAfectados['afectadosDetalle'],
                                            'tieneDetalle'    => $arrayAfectados['tieneDetalle'],
                                            'empleadoLogeado' => $peticion->getSession()->get('empleado'),
                                            'empresa' => $peticion->getSession()->get('prefijoEmpresa')
                        );

                        $anadirCC = false;

                        //Se verifica que no sea masivo
                        if($boolEsSoloClienteSesion)
                        {
                            $anadirCC = $this->verificarEsClienteCanalTN($ptoCliente_sesion['id']);
                        }

                        //Plantilla de correo enviado a las areas de asignacion ( empresas )
                        $this->envioPlantilla->generarEnvioPlantilla($asunto,
                                                                     $to,
                                                                     'CASO',
                                                                     $parametros,
                                                                     $empresa,
                                                                     $canton,
                                                                     $departamentoId,
                                                                     null,
                                                                     $anadirCC
                            );

                        /****************************************************************************
                                 GENERACION DE ENVIO DE SMS Y CORREOS A CLIENTE APERTURA CASO
                         ****************************************************************************/

                        if($boolEsSoloClienteSesion || $caso->getTipoCasoId()->getNombreTipoCaso() == 'Backbone')
                        {
                            try
                            {
                                //Si el cliente se encuentra en session y es cliente MD se envia sms de apertura de CASO
                                if($peticion->getSession()->get('prefijoEmpresa') == 'MD' || 
                                   $peticion->getSession()->get('prefijoEmpresa') == 'EN' ||
                                    ($peticion->getSession()->get('prefijoEmpresa') == 'TN' && 
                                    $caso->getTipoAfectacion() != 'SINAFECTACION' &&
                                    ($caso->getTipoCasoId()->getNombreTipoCaso() == 'Tecnico' ||
                                    $caso->getTipoCasoId()->getNombreTipoCaso() == 'Arcotel')))
                                {
                                    $puntoId      = $ptoCliente_sesion['id'];
                                    $personaId    = "";
                                    $destinatario = "CLI";
                                    $tipoEnvio    = "OUT";
                                    $tipoNotifica = "SMS";
                                    $tipoEvento   = "OPEN";
                                    $empresa      = $peticion->getSession()->get('idEmpresa');
                                    $usuario      = $peticion->getSession()->get('user');
                                    $casoId       = $caso->getId();
                                    $detalleId    = "";
                                    $asignacion   = "";

                                    $strScript = '/home/scripts-telcos/md/soporte/sources/telcos-comunicaciones/dist/TelcosComunicaciones.jar';

                                    $strParametros = $puntoId . "|" . $personaId . "|" . $destinatario . "|" . $tipoEnvio . "|" .
                                                     $tipoNotifica . "|" . $tipoEvento . "|" .$empresa . "|" . $this->host . "|" .
                                                     $usuario . "|" . $casoId . "|" . $detalleId . "|" . $asignacion . "|" . $this->path;

                                    $strEsperaRespuesta = 'NO';

                                    $strComando = "nohup ".$this->strPathJava." -jar -Djava.security.egd=file:/dev/./urandom ".$this->path.
                                               "telcos/app/Resources/scripts/TelcosComunicacionScripts.jar '" .
                                                $strScript . "' '" . $strParametros . "' '" . $strEsperaRespuesta . "' '" . $this->host . "' '".
                                                $this->strScriptPathJava."' >> /home/telcos/app/Resources/scripts/log/log.txt &";

                                    shell_exec($strComando);
                                }

                                if ($entity->getTipoAfectacion() != 'SINAFECTACION' && $caso->getTipoCasoId()->getNombreTipoCaso() != 'Backbone' )
                                {
                                    //Se genera correo de notificacion a clientes
                                    $to = array();

                                    foreach($arrayContactosPunto as $contacto)
                                    {
                                        $to[] = $contacto['valor'];
                                    }


                                    $parametros = array();
                                    if ($peticion->getSession()->get('prefijoEmpresa') == 'TN')
                                    {

                                        //Se obtienen los correos relacionados al punto en la que se genero la incidencia
                                        $arrayContactosPunto = $this->emComercial->getRepository("schemaBundle:InfoPuntoContacto")
                                                                                 ->getArrayContactosPorPuntoYTipo($ptoCliente_sesion['id'],"Contacto Tecnico");


                                        foreach($arrayContactosPunto as $contacto)
                                        {
                                            $to[] = $contacto['valor'];
                                        }
                                        $parametros['strEmpresa'] = "TELCONET S.A.";
                                    }

                                    if ($peticion->getSession()->get('prefijoEmpresa') == 'MD' || 
                                        $peticion->getSession()->get('prefijoEmpresa') == 'EN')
                                    {
                                        $arrayContactosPunto = $this->emComercial->getRepository('schemaBundle:InfoPuntoFormaContacto')
                                                                                 ->getArrayFormaContactosPorPunto($ptoCliente_sesion['id']);

                                        foreach ($arrayContactosPunto as $contacto)
                                        {
                                           $to[] = $contacto['valor'];
                                        }
                                     
                                        if ($peticion->getSession()->get('prefijoEmpresa') == 'MD')
                                        {
                                         $parametros['strEmpresa'] = "NETLIFE";
                                        }

                                        if ($peticion->getSession()->get('prefijoEmpresa') == 'EN')
                                        {
                                         $parametros['strEmpresa'] = "ECUANET";
                                        }
                                    }

                                    //**************Se consulta los alias del departamento de L1 Y L2******************//
                                    if($peticion->getSession()->get('prefijoEmpresa') == 'TN')
                                    {
                                        $arrayParamCorreosCliente  = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                                                     ->get('PARAMETROS PROYECTO NOTIFICACIONES CASOS CLIENTE',
                                                                                           '',
                                                                                           '',
                                                                                           'ALIAS_CREAR_CASO_CLIENTE',
                                                                                           '',
                                                                                           '',
                                                                                           '',
                                                                                           '',
                                                                                           '',
                                                                                           $peticion->getSession()->get('idEmpresa'));

                                        foreach($arrayParamCorreosCliente as $idxParamCorreo)
                                        {
                                            $arrayCorreos = explode("|", $idxParamCorreo["valor1"]);
                                        }

                                        foreach ($arrayCorreos as $correos)
                                        {
                                            $to[] = $correos;
                                        }
                                    }
                                    //**************Se consulta los alias del departamento de L1 Y L2******************//

                                    //Se obtiene la persona asignada/afectada en la creacion del CASO para efecto de correos
                                    $obPersonaAfectada = $this->emComercial->getRepository("schemaBundle:InfoPersona")
                                                                           ->findOneByLogin($peticion->getSession()->get('user'));

                                    //Se obtienen los sintomas por CASO
                                    $jsonSintomas  = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")
                                                                     ->generarJsonSintomasXCaso($caso->getId());
                                    $arraySintomas = json_decode($jsonSintomas);

                                    //Se obtiene la direccion y descripcion del punto
                                    $objInfoPunto  = $this->emComercial->getRepository("schemaBundle:InfoPunto")
                                                          ->findOneBy(array("login"  => $arrayAfectados['afectadosPadre'][0]['afectadoNombre'],
                                                                            "estado" => "Activo"));

                                    if(is_object($objInfoPunto))
                                    {
                                        $strDireccionPunto   = $objInfoPunto->getDireccion();
                                        $strDescripcionPunto = $objInfoPunto->getDescripcionPunto();
                                    }

                                    $parametros['caso']                 = $caso;
                                    $parametros['usrCreacion']          = ucwords(strtolower($obPersonaAfectada->__toString()));
                                    $parametros['departamentoAsignado'] = $departamento->getNombreDepartamento();
                                    $parametros['personaAsignada']      = ucwords(strtolower($obPersonaAfectada->__toString()));
                                    $parametros['cliente']              = $arrayAfectados['afectadosPadre'][0]['afectadoNombre'];
                                    $parametros['direccion']            = $strDireccionPunto;
                                    $parametros['descripcion']          = $strDescripcionPunto;
                                    $parametros['tipoCaso']             = $strTipoCaso;
                                    $parametros['sintomas']             = $arraySintomas->encontrados;


                                    $this->envioPlantilla->generarEnvioPlantilla('Apertura de Caso',
                                                                                 $to,
                                                                                 'CASO_CLIENTE',
                                                                                 $parametros,
                                                                                 $peticion->getSession()->get('idEmpresa'),
                                                                                 $canton,
                                                                                 $departamento->getId(),
                                                                                 null,
                                                                                 false
                                    );
                                }

                                if($caso->getTipoCasoId()->getNombreTipoCaso() == 'Backbone' &&
                                    $peticion->getSession()->get('prefijoEmpresa')  == "TN" && $entity->getTipoAfectacion() != 'SINAFECTACION')
                                {
                                    //Se obtiene el user de creación
                                    $obPersona = $this->emComercial->getRepository("schemaBundle:InfoPersona")
                                                                   ->findOneByLogin($peticion->getSession()->get('user'));

                                    //Se obtienen los sintomas por CASO
                                    $jsonSintomas  = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")
                                                                      ->generarJsonSintomasXCaso($caso->getId());
                                    $arraySintomas = json_decode($jsonSintomas);

                                    $parametros['caso']                 = $caso;
                                    $parametros['usrCreacion']          = ucwords(strtolower($obPersona->__toString()));
                                    $parametros['departamentoAsignado'] = $departamento->getNombreDepartamento();
                                    $parametros['personaAsignada']      = ucwords(strtolower($obPersona->__toString()));
                                    $parametros['cliente']              = "";
                                    $parametros['direccion']            = "N/A";
                                    $parametros['descripcion']          = "N/A";
                                    $parametros['tipoCaso']             = $strTipoCaso;
                                    $parametros['sintomas']             = $arraySintomas->encontrados;

                                    //Se consultan los afectados del caso
                                    $afectados = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                                                 ->getRegistrosAfectadosTotalXCaso($caso->getId());

                                    //Se consulta las razones sociales configuradas
                                    $arrayRazonSocial  = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                                         ->get('PARAMETROS PROYECTO NORIFICACIONES BACKBONE',
                                                                               '',
                                                                               '',
                                                                               'RAZON SOCIAL BANCO BOLIVARIANO',
                                                                               '',
                                                                               '',
                                                                               '',
                                                                               '');

                                    foreach($arrayRazonSocial as $idxRazonSocial)
                                    {
                                        $arrayRazonesSocial[] = $idxRazonSocial["valor1"];
                                    }

                                    //**************Se consulta los alias del departamento de NOC******************//
                                    $arrayParamCorreosNoc  = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                                             ->get('PARAMETROS PROYECTO NORIFICACIONES BACKBONE',
                                                                                   '',
                                                                                   '',
                                                                                   'ALIAS_NOC_CREAR_CASO',
                                                                                   '',
                                                                                   '',
                                                                                   '',
                                                                                   '');

                                    foreach($arrayParamCorreosNoc as $idxParamCorreoNoc)
                                    {
                                        $arrayCorreosNoc = explode("|", $idxParamCorreoNoc["valor1"]);
                                    }

                                    foreach ($arrayCorreosNoc as $correoNoc)
                                    {
                                        $to[] = $correoNoc;
                                    }
                                    //**************Se consulta los alias del departamento de NOC******************//

                                    //**************Se consulta los alias del departamento de L1 Y L2******************//
                                    if($peticion->getSession()->get('prefijoEmpresa') == 'TN')
                                    {
                                        $arrayParamCorreosCliente  = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                                                     ->get('PARAMETROS PROYECTO NOTIFICACIONES CASOS CLIENTE',
                                                                                           '',
                                                                                           '',
                                                                                           'ALIAS_CREAR_CASO_CLIENTE',
                                                                                           '',
                                                                                           '',
                                                                                           '',
                                                                                           '',
                                                                                           '',
                                                                                           $peticion->getSession()->get('idEmpresa'));

                                        foreach($arrayParamCorreosCliente as $idxParamCorreo)
                                        {
                                            $arrayCorreos = explode("|", $idxParamCorreo["valor1"]);
                                        }

                                        foreach ($arrayCorreos as $correos)
                                        {
                                            $to[] = $correos;
                                        }
                                    }
                                    //**************Se consulta los alias del departamento de L1 Y L2******************//

                                    foreach($afectados as $arrayAfectado)
                                    {
                                        if($arrayAfectado["tipoAfectado"] == "Elemento" && !empty($arrayAfectado['afectadoNombre'])
                                            && !empty($arrayAfectado['afectadoDescripcion']))
                                        {
                                            $arrayParametrosPuntos["strNombreElemento"]       = $arrayAfectado['afectadoNombre'];
                                            $arrayParametrosPuntos["strDescripcionInterface"] = $arrayAfectado['afectadoDescripcion'];
                                            $arrayParametrosPuntos["arrayEstadosServicio"]    = $arrayEstadosServicio;
                                            $arrayParametrosPuntos["arrayRazonSocial"]        = $arrayRazonesSocial;

                                            $arrayPuntosBackboneElemento = $this->emComercial
                                                                                ->getRepository('schemaBundle:InfoPunto')
                                                                                ->getPuntosPorElementoYPuerto($arrayParametrosPuntos);

                                            $arrayBackboneTotalElemento = array_merge($arrayPuntosBackboneElemento,
                                                                                      $arrayBackboneTotalElemento);
                                        }

                                        if($arrayAfectado["tipoAfectado"] == "Cliente")
                                        {
                                            $arrayParametrosPuntos["strLogin"]          = $arrayAfectado['afectadoNombre'];
                                            $arrayParametrosPuntos["arrayRazonSocial"]  = $arrayRazonesSocial;

                                            $arrayPuntosBackboneCliente = $this->emComercial->getRepository('schemaBundle:InfoPunto')
                                                                                            ->getPuntosPorLogin($arrayParametrosPuntos);

                                            $arrayBackboneTotalCliente = array_merge($arrayPuntosBackboneCliente,$arrayBackboneTotalCliente);
                                        }
                                    }

                                    $arrayPuntosBackbone = array_merge($arrayBackboneTotalElemento,$arrayBackboneTotalCliente);

                                    foreach($arrayPuntosBackbone as $idxPunto)
                                    {
                                            $arrayPuntosBackboneTotal[] = $idxPunto["idPunto"];
                                    }

                                    $arrayPuntosNotificar = array_unique($arrayPuntosBackboneTotal);

                                    //Se recorren los puntos backbone que deben ser notificados
                                    foreach($arrayPuntosNotificar as $idPuntoBackbone)
                                    {
                                        $arrayContactosPunto = $this->emComercial->getRepository("schemaBundle:InfoPuntoContacto")
                                                                                 ->getArrayContactosPorPuntoYTipo($idPuntoBackbone,
                                                                                                                  "Contacto Tecnico");

                                        $objInfoPunto = $this->emComercial->getRepository("schemaBundle:InfoPunto")
                                                                          ->find($idPuntoBackbone);

                                        if(is_object($objInfoPunto) && !empty($arrayContactosPunto))
                                        {
                                            $parametros['strEmpresa'] = "TELCONET S.A.";
                                            //Recorrer las formas de contacto
                                            foreach($arrayContactosPunto as $idxContactoPunto)
                                            {
                                                $strCadenaContactos .= $idxContactoPunto["valor"] . '|';
                                            }

                                            $strCadenaContactos = substr($strCadenaContactos, 0, strlen($strCadenaContactos)-1);

                                            //Se llena la tabla temporal con los puntos a notificar
                                            $objTmpNotifBackbone = new TmpNotifBackbone();
                                            $objTmpNotifBackbone->setCasoId($caso->getId());
                                            $objTmpNotifBackbone->setNumeroCaso($caso->getNumeroCaso());
                                            $objTmpNotifBackbone->setCadenaLogin($objInfoPunto->getLogin());
                                            $objTmpNotifBackbone->setCadenaCorreo($strCadenaContactos);
                                            $this->emSoporte->persist($objTmpNotifBackbone);
                                            $this->emSoporte->flush();

                                            $strCadenaContactos = "";
                                        }
                                    }

                                    $arrayParametrosBack["intCasoId"] = $caso->getId();

                                    //Se recoxrren los registros a notificar, se consulta la tabla temporal
                                    $arrayContactosPunto = $this->emSoporte->getRepository("schemaBundle:InfoPunto")
                                                                           ->getNotifacionCasosBack($arrayParametrosBack);

                                    //**********************************SE ENVIA LA NOTIFICACION***************************************
                                    foreach($arrayContactosPunto as $idxContactosPunto)
                                    {
                                        $parametros['cliente'] = $idxContactosPunto["listadoLogines"];

                                        $arrayContantos = explode("|", $idxContactosPunto["correo"]);

                                        foreach ($arrayContantos as $correo)
                                        {
                                            $to[] = $correo;
                                        }

                                        $this->envioPlantilla->generarEnvioPlantilla('Apertura de Caso',
                                                                                     $to,
                                                                                     'CASO_CLIENTE',
                                                                                     $parametros,
                                                                                     $peticion->getSession()->get('idEmpresa'),
                                                                                     $canton,
                                                                                     $departamento->getId(),
                                                                                     null,
                                                                                     false
                                        );
                                    }
                                    //**********************************SE ENVIA LA NOTIFICACION***************************************/

                                    //Se elimina los registros de la tabla temporal
                                    $this->emSoporte->getRepository("schemaBundle:InfoPunto")->eliminaRegistrosTemporales($arrayParametrosBack);
                                }
                            }
                            catch(\Exception $e)
                            {
                                error_log($e->getMessage());
                            }
                        }
                    }

                    /**
                     * A este nivel se manda a ejecutar el job con auto-drop, para enviar el correo a los
                     * departamentos interesados, notificando los clientes que ya cuentan con un caso aperturado
                     * previo al masivo creado.
                     */
                    if (strtoupper($strTipoCaso) === 'BACKBONE' && $peticion->getSession()->get('idEmpresa') == '10')
                    {
                        $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                ->ejecutarCasosAperturados(array('intIdCaso' => $caso->getId()));
                        
                    }

                    if (strtoupper($strTipoCaso) === 'BACKBONE' && 
                        ($peticion->getSession()->get('idEmpresa') == '18' ||
                         $peticion->getSession()->get('idEmpresa') == '33') 
                          && $strMantProgramado == "S")
                    {                        
                            $arrayMantProgramado = array();
                            $arrayMantProgramado["datos"]  = (array) json_decode($peticion->get('mantProgramado'));
                            $arrayMantProgramado["casoId"] = $caso->getId();
                            $arrayMantProgramado["codEmpresa"] = $peticion->getSession()->get('idEmpresa');
                            $arrayMantProgramado["strUsrCreacion"] = $peticion->getSession()->get('user');
                            $arrayMantProgramado["strIpCreacion"] = $peticion->getClientIp();

                            $this->guardaMantenimientoProgramado($arrayMantProgramado);
                        
                    }

                    return $caso->getId();

                }
                else
                {
                    //Si no llegase a existir un sintoma devuelve mensaje al usuario ya que es
                    //obligatorio su existencia
                    return "SINTOMA-ERROR";
                }
            }
            catch(\Exception $e)
            {
                error_log($e->getMessage());
                /*
                 * Se setea variable con mensaje de error generico que será devuelto al controlador
                 */
                $MSG = "GENERAL-ERROR";

                switch(get_class($e))
                {
                    case 'Doctrine\DBAL\DBALException':
                        if(stripos($e, 'NUMERO_CASO_UNIQUE') !== FALSE) // Se determina error de violacion de PK
                        {
                            $MSG = "ORA-ERROR";
                        }
                        break;
                    case 'Doctrine\DBA\DBAException':
                        if(stripos($e, 'NUMERO_CASO_UNIQUE') !== FALSE) // Se determina error de violacion de PK
                        {
                            $MSG = "ORA-ERROR";
                        }
                        break;
                    default: // Error general en la creacion del Caso
                        $MSG = "GENERAL-ERROR : ".$e->getMessage();
                        break;
                }

                $this->rollbackTransaction();
                return $MSG;
            }
        }
        else
        {
            //En caso que haya error en el formulario de entrada
            return "GENERAL-ERROR";
        }
    }


    /**
     * Función para envío de peticiones hacia una url
     *
     * @author Christian Jaramillo <cjaramilloe@telconet.ec>
     * @version 1.0
     * @since 09-09-2018
     *
     * @param type $strURL
     * @param type $strQueryString
     * @return type
     */
    public function curl_request($strURL,$strQueryString=null)
    {
        $objURL      = curl_init();
        curl_setopt($objURL,CURLOPT_URL,$strURL.'?'.$strQueryString);
        curl_setopt($objURL,CURLOPT_RETURNTRANSFER, true);
        $objResponse = trim(curl_exec($objURL));
        curl_close($objURL);
        return $objResponse;
    }

    /**
     * Método que crea caso desde la app cliente
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.0
     * @since 18-06-2018
     *
     * 
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.1 
     * @since 08-08-2018 Modificación: Se envía notificación cuando se crea un caso por medio de un bot a grupos de telegram
     * 
     * @param type $arrayParametros
     */
    public function crearCasoAPPCliente($arrayParametros)
    {
        try
        {
            $this->emSoporte->getConnection()->beginTransaction();

            $objInfoCaso = new InfoCaso();
            $objInfoCaso->setNumeroCaso($this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                                        ->getNumeroCasoNext($arrayParametros['objTipoCaso']));
            $objInfoCaso->setTipoCasoId($arrayParametros['objTipoCaso']);
            $objInfoCaso->setNivelCriticidadId($arrayParametros['nivelCriticidadId']);
            $strFecha = date_create(date('Y-m-d H:i', strtotime($arrayParametros['feApertura'] . ' ' . $arrayParametros['horaApertura'])));

            $objInfoCaso->setVersionIni($arrayParametros['versionIni']);
            $objInfoCaso->setTituloIni($arrayParametros['tituloIni']);
            $objInfoCaso->setFeApertura($strFecha);
            $objInfoCaso->setTipoNotificacionId($arrayParametros['tipoNotificacionId']);
            $objInfoCaso->setFeCreacion(new \DateTime('now'));
            $objInfoCaso->setUsrCreacion($arrayParametros['usrCreacion']);
            $objInfoCaso->setIpCreacion($arrayParametros['ipCreacion']);
            $objInfoCaso->setEmpresaCod($arrayParametros['idEmpresa']);
            $objInfoCaso->setTipoAfectacion($arrayParametros['tipoAfectacion']);
            $objInfoCaso->setOrigen($arrayParametros['origen']);
            $this->emSoporte->persist($objInfoCaso);
            $this->emSoporte->flush();

            $objInfoCasoMovil = new InfoCasosMovil();
            $objInfoCasoMovil->setCasoId($objInfoCaso->getId());
            $objInfoCasoMovil->setUsrCreacion($arrayParametros['usrCreacion']);
            $objInfoCasoMovil->setFeCreacion(new \DateTime('now'));
            $this->emSoporte->persist($objInfoCasoMovil);
            $this->emSoporte->flush();

            $objHistorial = new InfoCasoHistorial();
            $objHistorial->setCasoId($objInfoCaso);
            $objHistorial->setObservacion("Creacion del caso");
            $objHistorial->setEstado("Creado");
            $objHistorial->setFeCreacion(new \DateTime('now'));
            $objHistorial->setUsrCreacion($arrayParametros['usrCreacion']);
            $objHistorial->setIpCreacion($arrayParametros['ipCreacion']);
            $this->emSoporte->persist($objHistorial);
            $this->emSoporte->flush();

            $objSintoma = $this->emSoporte->getRepository('schemaBundle:AdmiSintoma')->find($arrayParametros['idSintoma']);
            if(is_object($objSintoma))
            {
                $objInfoDetalleHipotesis = new InfoDetalleHipotesis();
                $objInfoDetalleHipotesis->setCasoId($objInfoCaso);
                $objInfoDetalleHipotesis->setSintomaId($objSintoma);
                $objInfoDetalleHipotesis->setEstado("Creado");
                $objInfoDetalleHipotesis->setObservacion("Creacion del Caso desde la app");
                $objInfoDetalleHipotesis->setFeCreacion(new \DateTime('now'));
                $objInfoDetalleHipotesis->setUsrCreacion($arrayParametros['usrCreacion']);
                $objInfoDetalleHipotesis->setIpCreacion($arrayParametros['ipCreacion']);
                $this->emSoporte->persist($objInfoDetalleHipotesis);
                $this->emSoporte->flush();

                $objInfoDetalle = new InfoDetalle();
                $objInfoDetalle->setDetalleHipotesisId($objInfoDetalleHipotesis->getId());
                $objInfoDetalle->setPesoPresupuestado(0);
                $objInfoDetalle->setValorPresupuestado(0);
                $objInfoDetalle->setFeCreacion(new \DateTime('now'));
                $objInfoDetalle->setUsrCreacion($arrayParametros['usrCreacion']);
                $objInfoDetalle->setIpCreacion($arrayParametros['ipCreacion']);
                $this->emSoporte->persist($objInfoDetalle);
                $this->emSoporte->flush();

                $objCriterio = new InfoCriterioAfectado();
                $objCriterio->setId(1);
                $objCriterio->setDetalleId($objInfoDetalle);
                $objCriterio->setCriterio("Clientes");
                $objCriterio->setOpcion("Cliente: " . $arrayParametros['razonSocial'] . " | OPCION: Punto Cliente");
                $objCriterio->setFeCreacion(new \DateTime('now'));
                $objCriterio->setUsrCreacion($arrayParametros['usrCreacion']);
                $objCriterio->setIpCreacion($arrayParametros['ipCreacion']);
                $this->emSoporte->persist($objCriterio);
                $this->emSoporte->flush();

                $objAfectado = new InfoParteAfectada();
                $objAfectado->setTipoAfectado("Cliente");
                $objAfectado->setDetalleId($objInfoDetalle->getId());
                $objAfectado->setCriterioAfectadoId($objCriterio->getId());
                $objAfectado->setAfectadoId($arrayParametros['idPunto']);
                $objAfectado->setFeIniIncidencia($objInfoCaso->getFeApertura());
                $objAfectado->setAfectadoNombre($arrayParametros['login']);
                $objAfectado->setAfectadoDescripcion($arrayParametros['razonSocial']);
                $objAfectado->setFeCreacion(new \DateTime('now'));
                $objAfectado->setUsrCreacion($arrayParametros['usrCreacion']);
                $objAfectado->setIpCreacion($arrayParametros['ipCreacion']);
                $this->emSoporte->persist($objAfectado);
                $this->emSoporte->flush();
            }
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->commit();
            }

            //NOTIFICACION PUSH
            $arrayParametrosFCM = array('idPersona'             => $arrayParametros['idPersona'],
                                        'boolTodosDispositivo'  => true);
            
            $arrayTokens = $this->getFCMTokens($arrayParametrosFCM);
            
            $arrayNotificacion = array('NumeroCaso'             => $objInfoCaso->getNumeroCaso(),
                                       'loginCaso'              => $arrayParametros['login'],
                                       'idCantonCaso'           => $arrayParametros['idCanton'],
                                       'fechaCreacionCaso'      => (new \DateTime('now'))->format('d/m/Y'),
                                       'arrayTokens'            => $arrayTokens,
                                       'strTipoNotificacion'    => 'CASO_CREACION'); //PUNTO_SATURACION

            $this->despacharNotificacionesPush($arrayNotificacion);
        }
        catch(\Exception $e)
        {
            /**
             * Se setea variable con mensaje de error genérico que será devuelto al controlador
             */
            $strMsg = "GENERAL-ERROR";

            switch(get_class($e))
            {
                case 'Doctrine\DBAL\DBALException':
                case 'Doctrine\DBA\DBAException':
                    if(stripos($e, 'NUMERO_CASO_UNIQUE') !== false) // Se determina error de violacion de PK
                    {
                        $strMsg = "ORA-ERROR";
                    }
                    break;
                default: // Error general en la creacion del Caso
                    $strMsg = "GENERAL-ERROR : ".$e->getMessage();
                    break;
            }

           if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
                $this->emSoporte->getConnection()->close();
            }
           $arrayRespuesta['status'] = 500;
           $arrayRespuesta['mensaje'] = 'No se puede crear el caso en estos momentos   '.$strMsg;
           return $arrayRespuesta;
        }
        $this->emSoporte->getConnection()->close();
        $arrayRespuesta['status'] = 200;
        $arrayRespuesta['mensaje'] = 'Se crea el caso '.$objInfoCaso->getNumeroCaso().' exitosamente';
        return $arrayRespuesta;   
    }

    /*
     * Funcion que me permite afectar un servicio a un caso creado desde la app cliente.
     *
     * @author Walther Joao Gaibor C <mailto:wgaibor@telconet.ec>
     * @version 1.0
     * @since 18-07-2018
     *
     * @param array $arrayParametros
     * @return array $arrayRespuesta
     */
    public function putServicioAfectado($arrayParametros)
    {
        try
        {
            $this->emSoporte->getConnection()->beginTransaction();
            $intIdDetalle   = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                              ->getDetalleInicialCaso($arrayParametros['idCaso']);
            $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                              ->findOneById($intIdDetalle[0]['detalleInicial']);

            $objCaso        = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                              ->findOneById($arrayParametros['idCaso']);

            $objCriterio = new InfoCriterioAfectado();
            $objCriterio->setId(2);
            $objCriterio->setDetalleId($objInfoDetalle);
            $objCriterio->setCriterio("Servicio");
            $objCriterio->setOpcion('Servicio: ' + $arrayParametros['afectarServicio'][0]['nombre_afectado'] + ' | OPCION: Servicios');
            $objCriterio->setFeCreacion(new \DateTime('now'));
            $objCriterio->setUsrCreacion($arrayParametros['peticion']->getSession()->get('user'));
            $objCriterio->setIpCreacion($arrayParametros['peticion']->getClientIp());
            $this->emSoporte->persist($objCriterio);
            $this->emSoporte->flush();

            $objAfectado    = new InfoParteAfectada();
            $objAfectado->setTipoAfectado("Servicio");
            $objAfectado->setDetalleId($intIdDetalle[0]['detalleInicial']);
            $objAfectado->setCriterioAfectadoId(2);
            $objAfectado->setAfectadoId($arrayParametros['afectarServicio'][0]['id_afectado']);
            $objAfectado->setFeIniIncidencia($objCaso->getFeApertura());
            $objAfectado->setAfectadoNombre($arrayParametros['afectarServicio'][0]['nombre_afectado']);
            $objAfectado->setAfectadoDescripcion($arrayParametros['afectarServicio'][0]['descripcion_afectado']);
            $objAfectado->setFeCreacion(new \DateTime('now'));
            $objAfectado->setUsrCreacion($arrayParametros['peticion']->getSession()->get('user'));
            $objAfectado->setIpCreacion($arrayParametros['peticion']->getClientIp());

            $this->emSoporte->persist($objAfectado);
            $this->emSoporte->flush();

            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->commit();
            }
        }
        catch (\Exception $exc)
        {
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
                $this->emSoporte->getConnection()->close();
            }
            $arrayRespuesta['status']  = 500;
            $arrayRespuesta['mensaje'] = 'No se puede afectar el caso en estos momentos   '.$exc->getMessage();
            return $arrayRespuesta;
        }
        $this->emSoporte->getConnection()->close();
        $arrayRespuesta['status']  = 200;
        $arrayRespuesta['mensaje'] = 'Se afectó el servicio del caso exitosamente';
        return $arrayRespuesta;
    }

    /**
     * Método desde donde obtenemos el senderId de los dispositivos para el envio de push notification.
     *
     * @author Christian Jaramillo <cjaramilloe@telconet.ec>
     * @version 1.0
     * @since 09-09-2018
     *
     * @param array $arrayParametros
     * @return array
     */
    public function getFCMTokens($arrayParametros)
    {

        $intIdPersona = $arrayParametros['idPersona'];
        $strImei      = $arrayParametros['imei'];
        $arrayTokens  = array();
        try
        {
            if($arrayParametros['boolTodosDispositivo'] === true)
            {
                $arrayRegistros  = $this->emSoporte->getRepository("schemaBundle:AdmiDispositivoApp")
                                                   ->findBy(array('personaId' => $intIdPersona));
            }
            else
            {
                $arrayRegistros  = $this->emSoporte->getRepository("schemaBundle:AdmiDispositivoApp")
                                                   ->findBy(array('personaId'         => $intIdPersona,
                                                                  'codigoDispositivo' => $strImei));
            }
            
            if($arrayRegistros)
            {
                foreach($arrayRegistros as $objRegistro)
                {
                    $objHistorialIngresoApp = $this->emSoporte->getRepository("schemaBundle:InfoHistorialIngresoApp")
                                                              ->findOneByCodigoDispositivo($objRegistro->getCodigoDispositivo());
                    if(is_object($objHistorialIngresoApp) && $objHistorialIngresoApp->getEstado() != 'Finalizado')
                    {
                        array_push($arrayTokens, $objRegistro->getTokenFCM());
                    }
                }
            }

        }
        catch(\Exception $e)
        {
            error_log('Problemas al obtener el senderId - SoporteService:getFCMTokens ' . $e->getMessage() );
        }
        
        return $arrayTokens;   
    }
    
    /**
     * Método que se encarga del envio de los push notification a los dispositivos.
     *
     * @author Christian Jaramillo <cjaramilloe@telconet.ec>
     * @version 1.0
     * @since 09-09-2018
     *
     * @param array $arrayParametros
     */
    public function despacharNotificacionesPush($arrayParametros)
    {
        $arrayResultado = array();
        try
        {

            //// START TEST FIREBASE NOTIFICATION
            $strTitulo         = 'Telconet LATAM';
            $strMensaje        = '';
            $strDate           = '';
            $strFragmentTarget = '';
            $strTag            = '';
            $strLogin          = $arrayParametros['loginCaso'];
            $strCanton         = $arrayParametros['idCantonCaso'];

            define( 'API_FCM_ACCESS_KEY', 'AAAAMDOZomw:APA91bFIjxzDFzOjS12hmpmzKIcRUg3XKhbMV-ysN0HmplPyE3yAtnODtvRfEqfoYFJ2umNfgL6-9R2DlxueXKfTSBKLZTjdaPLbV8S62DlBzWavgDfbpfi0qiDU8L8lV04YIinXn4N7');

            if($arrayParametros['strTipoNotificacion'] === 'CASO_CREACION')
            {
                $strTag            = $arrayParametros['NumeroCaso'];
                $strMensaje        = 'Caso ' . $strTag . ' creado con éxito' . ' (' . $strLogin . ')';
                $strDate           = $arrayParametros['fechaCreacionCaso'];
                $strFragmentTarget = 'MisCasosFragment';
            }
            else if($arrayParametros['strTipoNotificacion'] === 'CASO_CIERRE')
            {
                $strTag            = $arrayParametros['NumeroCaso'];
                $strMensaje        = 'Caso ' . $strTag . ' cerrado con éxito'. ' (' . $strLogin . ')';
                $strDate           = $arrayParametros['fechaCierreCaso'];
                $strFragmentTarget = 'MisCasosFragment';
            }
            else if($arrayParametros['strTipoNotificacion'] === 'PUNTO_SATURACION')
            {
                $strMensaje        = 'Punto saturado ('. $strLogin . ')';
                $strDate           = $arrayParametros['fechaCreacionCaso'];
                $strFragmentTarget = 'MapaFragment';
            }

            $objFields =
            [
                'registration_ids'  =>  $arrayParametros['arrayTokens'],
                'data'              =>  [
                                            'title'          =>   $strTitulo,
                                            'body'           =>   $strMensaje,
                                            'tag'            =>   $strTag,
                                            'fragmentTarget' =>   $strFragmentTarget,
                                            'date'           =>   $strDate,
                                            'login'          =>   $strLogin,
                                            'canton'         =>   $strCanton
                                        ]
            ];

            $objHeaders =
            [
              'Authorization: key=' . API_FCM_ACCESS_KEY,
              'Content-Type: application/json'
            ];

            $objReq = curl_init();
            curl_setopt( $objReq, CURLOPT_URL, 'https://fcm.googleapis.com/fcm/send' );
            curl_setopt( $objReq, CURLOPT_POST, true );
            curl_setopt( $objReq, CURLOPT_HTTPHEADER, $objHeaders );
            curl_setopt( $objReq, CURLOPT_RETURNTRANSFER, true );
            curl_setopt( $objReq, CURLOPT_SSL_VERIFYPEER, false );
            curl_setopt( $objReq, CURLOPT_POSTFIELDS, json_encode( $objFields ) );

            $arrayResultado = curl_exec($objReq );
            curl_close( $objReq );
        }
        catch(\Exception $e)
        {
            error_log('Error al enviar la notificación - SoporteService:despacharNotificacionesPush  '.$e->getMessage());
        }
        return $arrayResultado;
    }

    /**
     *
     * Metodo que permite agregar afectados a un CASO
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 25-05-2016
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 19-07-2016  Se realizan ajustes para que se permita agregar afectados por ciudad,pe,anillo
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 28-10-2016  Se realizan ajustes por mejoras en la funcion getClientesXInterfacesId del infoServicioRepository
     *
     * @param Aray $arrayParametros [ json , idCaso , esNuevo , request ]
     * @return json '{
     *                  'status'  =>'',
     *                  'mensaje' =>''
     *              }'
     */
    public function agregarAfectadosCaso($arrayParametros)
    {
        $arrayRespuesta = array();

        try
        {
            $this->emSoporte->getConnection()->beginTransaction();

            $objJson = json_decode($arrayParametros['jsonAfectados']);
            $intTotal  = $objJson->total;
            $arrayJson = $objJson->resultado;

            if($intTotal>0)
            {
                //Obtenemos el sintoma que tenga agregado los afectados iniciales en caso de que sea ingreso de afectaciones post creacion caso
                if(!$arrayParametros['esNuevo'])
                {
                    //Obteniendo detalle con sintoma relacionado a afectado
                    $arrayDetalle = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->obtenerDetalleAfectadoCaso($arrayParametros['idCaso']);
                    $objDetalle   = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->find($arrayDetalle['idDetalle']);

                    //Se obtienen todos los afectados previos ingresados para validar que no exista
                    $arrayPartesAfectadas = $this->getArrayParteAfectada($objDetalle->getId());

                    $intIdUltimoCriterio = $arrayDetalle['criterio'];

                    foreach($arrayJson as $jsonCriteriosAfectados)
                    {
                        $arrayCriterio = $this->emSoporte->getRepository('schemaBundle:InfoCriterioAfectado')
                                                       ->findBy(array('opcion'   => $jsonCriteriosAfectados->opcion,
                                                                      'detalleId'=> $objDetalle->getId()));
                        if(!$arrayCriterio)
                        {
                            //Se calcula el siguiente secuencial de acuerdo al ultimi criterio guardado en creacion del caso
                            $intIdCriterio = intval($intIdUltimoCriterio) + intval($jsonCriteriosAfectados->id_criterio);

                            $criterio = new InfoCriterioAfectado();
                            $criterio->setId($intIdCriterio);
                            $criterio->setDetalleId($objDetalle);
                            $criterio->setCriterio($jsonCriteriosAfectados->criterio);
                            $criterio->setOpcion($jsonCriteriosAfectados->opcion);
                            $criterio->setFeCreacion(new \DateTime('now'));
                            $criterio->setUsrCreacion($arrayParametros['request']->getSession()->get('user'));
                            $criterio->setIpCreacion($arrayParametros['request']->getClientIp());
                            $this->emSoporte->persist($criterio);
                            $this->emSoporte->flush();
                        }
                        else
                        {
                            //Si el criterio existe se toma la referencia id del registro
                            $intIdCriterio = $arrayCriterio[0]->getId();
                        }
                        //Variable que me indica si el criterio afectado ya fue agregado previamente
                        $boolCriterioExiste      = false;

                        $arrayElementosAfectados = array();
                        //Recorremos todos los afectados por criterio seleccionado
                        foreach($jsonCriteriosAfectados->afectados as $afectados)
                        {
                            //Si el afectado ya fue agregado continuar
                            if(!in_array(($jsonCriteriosAfectados->criterio === 'Clientes' ||
                                strpos($jsonCriteriosAfectados->opcion, "Punto Cliente") !== false ||
                                strpos($jsonCriteriosAfectados->opcion, "Elemento: SWITCH") !== false) ?
                               $afectados->id:$afectados->idDescripcion,$arrayPartesAfectadas))
                            {
                                $afectado = new InfoParteAfectada();

                                if($jsonCriteriosAfectados->criterio === 'Clientes' ||
                                   strpos($jsonCriteriosAfectados->opcion, "Punto Cliente") !== false)
                                {
                                    $afectado->setTipoAfectado("Cliente");
                                }
                                else //Elementos
                                {
                                    $afectado->setTipoAfectado("Elemento");
                                }

                                $afectado->setDetalleId($objDetalle->getId());
                                $afectado->setCriterioAfectadoId($intIdCriterio);
                                $afectado->setAfectadoId($afectados->id);
                                $afectado->setFeIniIncidencia($arrayDetalle['feApertura']);
                                $afectado->setAfectadoNombre($afectados->afectado);
                                $afectado->setAfectadoDescripcion($afectados->descripcion);
                                $afectado->setAfectadoDescripcionId($afectados->idDescripcion);
                                $afectado->setFeCreacion(new \DateTime('now'));
                                $afectado->setUsrCreacion($arrayParametros['request']->getSession()->get('user'));
                                $afectado->setIpCreacion($arrayParametros['request']->getClientIp());
                                $this->emSoporte->persist($afectado);
                                $this->emSoporte->flush();

                                if($afectado->getTipoAfectado() == "Elemento")
                                {
                                    $arrayAfecElemento["afectado_id"]             = $afectado->getAfectadoId();
                                    $arrayAfecElemento["afectado_nombre"]         = $afectado->getAfectadoNombre();
                                    $arrayAfecElemento["afectado_descripcion"]    = $afectado->getAfectadoDescripcion();
                                    $arrayAfecElemento["afectado_descripcion_id"] = $afectado->getAfectadoDescripcionId();

                                    $arrayElementosAfectados[] = $arrayAfecElemento;
                                }

                                $boolCriterioExiste = true;
                            }
                        }

                        //Si el tipo de afectado es Elemento y se escogio interfaces se realiza la busqueda de las interfaces
                        //involucradas en la afectacion
                        if($jsonCriteriosAfectados->criterio === 'Elementos')
                        {
                            if($arrayElementosAfectados && count($arrayElementosAfectados) > 0)
                            {
                                //Variable que alamacena todas las interfaces seleccionadas y si no se seleccionan todas del elemento para
                                //obtener los clientes que resulten afectados
                                $arrayIdsInterfaces = array();

                                foreach($arrayElementosAfectados as $afectadoElem)
                                {
                                    //Id del Elemento afectado
                                    $afectadoElemetoId   = $afectadoElem["afectado_id"] ? $afectadoElem["afectado_id"] : "";
                                    //Id de la Interface afectada
                                    $afectadoInterfaceId = $afectadoElem["afectado_descripcion_id"] ? $afectadoElem["afectado_descripcion_id"] : "";

                                    //Se van agregando todas las interfaces seleccionadas como afectacion del CASO
                                    if($afectadoInterfaceId && $afectadoInterfaceId != '')
                                    {
                                        $arrayIdsInterfaces[] = $afectadoInterfaceId;
                                    }
                                    else //En caso de no haber escogido ninguna interfaz por default se buscan todas las interfaces
                                    //del elemento
                                    {
                                        $arrayInterfacesPorElemento = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                           ->getIdsInterfacesXElementoId($afectadoElemetoId);

                                        foreach($arrayInterfacesPorElemento as $valueDataInterfaces)
                                        {
                                            if($valueDataInterfaces && $valueDataInterfaces["id"])
                                            {
                                                $arrayIdsInterfaces[] = $valueDataInterfaces["id"];
                                            }
                                        }
                                    }
                                }//fin foreach arrayAfectadosElementos

                                //Se obtiene todos los clientes afectados relacionados a los puertos afectados
                                if(count($arrayIdsInterfaces)>0)
                                {
                                    if(count($arrayIdsInterfaces) > 999)
                                    {
                                        $strCadenaInterfaces = "";
                                        foreach($arrayIdsInterfaces as $idInterface)
                                        {
                                            $strCadenaInterfaces .=  $idInterface . ",";
                                        }

                                        $arrayParametros["strCadenaInterfaces"] = $strCadenaInterfaces;

                                        //Se carga la tabla temporal con las interfaces consultadas en el momento
                                        $intProcesoIdTablaTemporal = $this->emComercial->getRepository("schemaBundle:InfoInterfacesAfectadas")
                                                                                       ->cargaTmpInterfacesAfectadas($arrayParametros);

                                        $arrayParametros["intProcesoIdTablaTemporal"] = $intProcesoIdTablaTemporal;
                                        $arrayClientes = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                                                           ->getClientesXInterfacesTmp($arrayParametros);

                                        $arrayParametros["intProcesoId"] = $intProcesoIdTablaTemporal;
                                        //Se elimina la tabla temporal
                                        $strMensajeError = $this->emComercial->getRepository("schemaBundle:InfoInterfacesAfectadas")
                                                                             ->borraTmpInterfacesAfectadas($arrayParametros);
                                    }
                                    else
                                    {
                                        $arrayClientes = $this->emComercial->getRepository("schemaBundle:InfoServicio")
                                                                           ->getClientesXInterfacesId($arrayIdsInterfaces);
                                    }

                                    if($arrayClientes && count($arrayClientes) > 0)
                                    {
                                        foreach($arrayClientes as $valueClienteInterface)
                                        {
                                            $data_puntoId       = $valueClienteInterface['idPunto'];
                                            $data_puntoLogin    = $valueClienteInterface['login'];
                                            $data_clienteNombre = ($valueClienteInterface['razonSocial'] ?
                                                                  $valueClienteInterface['razonSocial'] :
                                                                  $valueClienteInterface['nombres'] . " " . $valueClienteInterface['apellidos']);

                                            //si no existe cliente perteneciente a uno de los puertos ingresados como afectados se lo ingresa
                                            if(!in_array($data_puntoId,$arrayPartesAfectadas))
                                            {
                                                $afectado = new InfoParteAfectada();
                                                $afectado->setTipoAfectado("Cliente");
                                                $afectado->setDetalleId($objDetalle->getId());
                                                $afectado->setCriterioAfectadoId($intIdCriterio);
                                                $afectado->setAfectadoId($data_puntoId);
                                                $afectado->setFeIniIncidencia($arrayDetalle['feApertura']);
                                                $afectado->setAfectadoNombre($data_puntoLogin);
                                                $afectado->setAfectadoDescripcion($data_clienteNombre);
                                                $afectado->setFeCreacion(new \DateTime('now'));
                                                $afectado->setUsrCreacion($arrayParametros['request']->getSession()->get('user'));
                                                $afectado->setIpCreacion($arrayParametros['request']->getClientIp());
                                                $this->emSoporte->persist($afectado);
                                                $this->emSoporte->flush();
                                            }
                                        }
                                    }
                                }//Fin validacion existen interfaces
                            }//Fin validacion existen elementos afectados
                        }//Fin validacion si tipo afectacion es a Elementos
                    }//Fin bucle de afectados
                }

                $arrayRespuesta = array('status'=>'OK','mensaje'=>'Afectados agregados Correctamente');
            }
            else
            {
                $arrayRespuesta = array('status'=>'ERROR','mensaje'=>'No existen Afectados para agregar');
            }
        }
        catch (\Exception $ex)
        {
            error_log($ex->getMessage());

            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }

            $arrayRespuesta = array('status'=>'ERROR','mensaje'=>$ex->getMessage());
        }

        if ($this->emSoporte->getConnection()->isTransactionActive())
        {
            $this->emSoporte->getConnection()->commit();
        }

        $this->emSoporte->getConnection()->close();

        return json_encode($arrayRespuesta);
    }

    /**
     *
     * Metodo que genera un array con todos los afectados pertenecientes a un detalle de un CASO
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 25-05-2016
     *
     * @param integer $detalleId
     * @return array $arrayResultado [ id ]
     */
    public function getArrayParteAfectada($detalleId)
    {
        $arrayPartesAfectadas = $this->emSoporte->getRepository('schemaBundle:InfoParteAfectada')->findByDetalleId($detalleId);

        $arrayResultado = array();

        if($arrayPartesAfectadas)
        {
            foreach($arrayPartesAfectadas as $afectados)
            {
                $arrayResultado[] = $afectados->getTipoAfectado()=='Cliente'?$afectados->getAfectadoId():$afectados->getAfectadoDescripcionId();
            }
        }

        return $arrayResultado;
    }

    public function isAfectadoExistente($array , $afectado)
    {
        foreach($array as $value)
        {
            if($afectado == $value['id'])
            {
                return true;
            }
        }

        return false;
    }

    /**
     * obtenerDocumentos
     *
     * Metodo encargado de obtener los documentos generados en los diferentes modulos
     *
     * @param array  $parametros
     * @param integer $start
     * @param integer $limit
     *
     * @return json con resultado
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 24-09-2015 - Se le añade a la función 'generarJsonDocumentoRelacion' la dependencia
     *                           '$router'
     *
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.0 11-07-2014
     *
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 1.1 15-09-2021 - Se agrega filtros de estado al número de contrato.
     *
     */
    public function obtenerDocumentos($parametros , $start , $limit)
    {
	  $entityManager = array();

	  $entityManager['emComercial']       = $this->emComercial;
	  $entityManager['emFinanciero']      = $this->emFinanciero;
	  $entityManager['emGeneral']         = $this->emGeneral;
	  $entityManager['emInfraestructura'] = $this->emInfraestructura;
	  $entityManager['emSoporte']         = $this->emSoporte;

	  //COMERCIAL/FINACIERO
	  if($parametros["numeroDocumento"] && $parametros["numeroDocumento"]!='')
	  {
		if($parametros["modulo"] == 'COMERCIAL')
		{
		      $arrayContrato = $this->emComercial->getRepository('schemaBundle:InfoContrato')
		                                    ->findBy(array("numeroContrato" => $parametros["numeroDocumento"],
                                                           "estado"         => array("Activo","Pendiente","PorAutorizar")));
            $parametros["contrato"] = (is_array($arrayContrato) && !empty($arrayContrato)) ? $arrayContrato[0]->getId():"";

		}

		if($parametros["modulo"] == 'FINANCIERO')
		{
		      $docFinan = $this->emFinanciero->getRepository('schemaBundle:InfoDocumentoFinancieroCab')
		                                     ->findOneByNumeroFacturaSri($parametros["numeroDocumento"]);
		      if($docFinan)$parametros["documentoFinanciero"] = $docFinan->getId();

		}
	  }

	  //SOPORTE
	  if($parametros["numeroTareaCaso"] && $parametros["numeroTareaCaso"]!='')
	  {
		$caso = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
					->findOneByNumeroCaso($parametros["numeroTareaCaso"]);

		if($caso)
		{
		      $parametros["caso"] = $caso->getId();
		}
		else
		{
		      $actividad = $this->emComunicacion->getRepository('schemaBundle:InfoComunicacion')
		                                   ->find($parametros["numeroTareaCaso"]);
		      if($actividad)$parametros["actividad"] = $actividad->getId();
		}
	  }


        return $this->emComunicacion->getRepository('schemaBundle:InfoDocumento')
                    ->generarJsonDocumentoRelacion($parametros, $start, $limit, $this->router);


    }

     /**
      * obtenerPreguntasEncuesta
      *
      * Metodo encargado de obtener las preguntas con sus tipo de respuestas de la encuesta enviada a generar
      *
      * @param array $arrayParametros[
      *                              objServicio   => objeto del servicio del cliente
      *                              strCodEmpresa => codigo de la empresa
      *                             ]
      *
      * @return json con resultado
      *
      * @author Allan Suárez <arsuarez@telconet.ec>
      * @version 1.0 26-07-2014
      *
      * @author Walther Joao Gaibor C <wgaibor@telconet.ec>
      * @version 1.1 13-06-2017 - Se convierte parametros recibidos de la funcion a arreglo, se codifican los caracteres con tildes
      *                           para que en el movil se visualice correctamente.
     */
    public function obtenerPreguntasEncuesta($arrayParametros)
    {
        $objServicio        = $arrayParametros['objServicio'];
        $strCodigoPlantilla = $arrayParametros['strCodigoPlantilla'];

        $plantilla          = $this->emComunicacion->getRepository('schemaBundle:AdmiPlantilla')->findOneByCodigo($strCodigoPlantilla);
        $plantillaPregunta  = $this->emComunicacion->getRepository('schemaBundle:InfoPlantillaPregunta')
                                                   ->getPreguntasPorPlantilla($plantilla->getId());
        $preguntasIds       = '';
        foreach( $plantillaPregunta as $plantilla )
        {
            $pregunta           = $this->emComunicacion->getRepository('schemaBundle:AdmiPregunta')
                                                       ->find($plantilla->getPreguntaId());
            
            $preguntaRespuestas = $this->emComunicacion->getRepository('schemaBundle:AdmiPreguntaRespuesta')
                                                       ->findByPreguntaId($pregunta->getId());   
            $arrayRespuestas    = null;
            foreach($preguntaRespuestas as $preguntaRespuesta)
            {
                  $respuesta         = $this->emComunicacion->getRepository('schemaBundle:AdmiRespuesta')
                                                            ->find($preguntaRespuesta->getRespuestaId());
                  $arrayRespuestas[] = array(
                                             'idRespuesta' => $respuesta->getId(),
                                             'respuesta'   => html_entity_decode($respuesta->getRespuesta())
                                            );
            }
            $preguntasIds .= $pregunta->getId().'-';
            
            $arrayPreguntaEncuesta[] =  array(
                                              'idPregunta'    => $pregunta->getId(),
                                              'pregunta'      => html_entity_decode($pregunta->getPregunta()),
                                              'tipoRespuesta' => $pregunta->getTipoRespuesta(),
                                              'respuestas'    => $arrayRespuestas
                                             );
        }

        $array = array(
                       'servicio'  => $objServicio,
                       'preguntas' => $arrayPreguntaEncuesta,
                       'ids'       => $preguntasIds
                      );

        return $array;
    }

     /**
     * obtenerMotivosPorOpcion
     *
     * Metodo encargado de obtener los motivos configurados para la opcion de Pausar Tarea
     *
     * @param array $arrayParametros[ 'strOpcion' => se envia el nombre de la opcion ]
     *
     * @return json $arrayMotivos
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 17-11-2016
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 08-05-2019 - Se modifica el método, para obtener los motivos parametrizados de acuerdo al departamento y,
     *                           en caso que no retorne data, se obtendra la información de manera normal.
     *
     */
    public function obtenerMotivosPorOpcion($arrayParametros)
    {
        $arrayResultado = null;
        $arrayMotivos   = null;
        $strUsuario     = $arrayParametros['strUsuario'] ? $arrayParametros['strUsuario'] : 'Telcos+';
        $strIp          = $arrayParametros['strIp']      ? $arrayParametros['strIp']      : '127.0.0.1';

        //Verificamos si el departamento se encuentra configurado.
        if (isset($arrayParametros['strIdDepartamento']) && $arrayParametros['strIdDepartamento'] !== '')
        {
            $arrayParametros['strNombreParametro'] = 'LISTAR_MOTIVOS';
            $arrayParametros['strModulo']          = 'SOPORTE';
            $arrayParametros['strEstado']          = 'Activo';

            $arrayMotivos = $this->emGeneral->getRepository("schemaBundle:AdmiMotivo")
                    ->getMotivosParametros($arrayParametros);

            if ($arrayMotivos['status'] === 'fail')
            {
                $this->serviceUtil->insertError('Telcos+',
                                                'SoporteService.obtenerMotivosPorOpcion',
                                                 $arrayMotivos['message'],$strUsuario,$strIp);
                $arrayMotivos = null;
            }
            else
            {
                $intTotalMotivos  = count($arrayMotivos['result']);
                $arrayJsonMotivos = json_encode($arrayMotivos['result']);
                $arrayResultado   = '{"total":"'.$intTotalMotivos.'","encontrados":'.$arrayJsonMotivos.'}';
            }
        }

        if ($arrayMotivos === null)
        {
            $arrayParametro = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                              ->getOne('MOTIVOS POR OPCION','SOPORTE','TAREAS',$arrayParametros["strOpcion"],
                                                       '','','','','','');

            if(!is_null($arrayParametro))
            {
                $arrayResultado = $this->emGeneral->getRepository("schemaBundle:AdmiMotivo")->generarJsonMotivos($arrayParametro["valor1"]);
            }
        }

        return $arrayResultado;
    }

    /**
     * cancelarTarea
     *
     * Metodo encargado de cancelar la tarea generada por el Usuario.
     *
     * @param InfoDetalle  $objInfoDet
     * @param InfoCaso $objCaso
     * @param string $esSolucion indica si la tarea tuvo solución
     * @param objeto $peticion es el request
     * @param array $parametros incluye la observacion
     *
     * @return string con respuesta de error
     *
     * @author Jesus Bozada  <jbozada@telconet.ec>
     * @version 1.0 01-10-2014
     *
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 23-06-2016 Se guarda el estado de la tarea en la creación del seguimiento al cancelar la tarea.
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 09-08-2017 -  En la tabla INFO_TAREA_SEGUIMIENTO y INFO_DETALLE_HISTORIAL, se regulariza el departamento creador de la accion y
     *                            se adicionan los campos de persona empresa rol id para identificar el responsable actual
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.3 29-10-2018 - Se modifica el método para obtener la información del empleado por parámetro y por sesión.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.4 17-04-2019 - Se agrega los métodos genéricos para el cálculo del los tiempos de las tareas.
     * 
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.5 08-07-2020 - Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     *
     */
    public function cancelarTarea($objInfoDet, $objCaso, $esSolucion, $peticion, $parametros)
    {
        $arrayParametrosHist = array();
        $intIdCaso           = null;

        if (!empty($parametros['esRequest']) && $parametros['esRequest'] === 'N')
        {
            $intIdDepartamento = $peticion['intIdDepartamentoOrigen'];
            $strUserCreacion   = $peticion['strUserCreacion'];
            $strIpCreacion     = $peticion['strIpCreacion'];
            $intIdEmpresa      = $peticion['intIdEmpresa'];
        }
        else
        {
            $intIdDepartamento = $peticion->getSession()->get('idDepartamento');
            $strUserCreacion   = $peticion->getSession()->get('user');
            $strIpCreacion     = $peticion->getClientIp();
            $intIdEmpresa      = $peticion->getSession()->get('idEmpresa');
        }

        $arrayParametrosHist["strCodEmpresa"]           = $intIdEmpresa;
        $arrayParametrosHist["strUsrCreacion"]          = $strUserCreacion;
        $arrayParametrosHist["strIpCreacion"]           = $strIpCreacion;
        $arrayParametrosHist["intIdDepartamentoOrigen"] = $intIdDepartamento;
        $arrayParametrosHist["intDetalleId"]            = $objInfoDet->getId();
        $arrayParametrosHist["strOpcion"]               = "Historial";

        try
        {
            //Se coloca tarea con estado de Solucion
            $objInfoDet->setEsSolucion($esSolucion);
            $this->emSoporte->persist($objInfoDet);

            //Se ingresa el historial de la tarea
            $arrayParametrosHist["strObservacion"]  = $parametros['observacion'];
            $arrayParametrosHist["strEstadoActual"] = "Cancelada";
            $arrayParametrosHist["strAccion"]       = "Cancelada";

            $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            if (is_object($objCaso))
            {
                $intIdCaso = $objCaso->getId();
            }

            //Función encargada de calcular los tiempos de las tareas
            $this->calcularTiempoEstado(array('strEstadoActual'   => 'Cancelada',
                                              'intIdDetalle'      => $objInfoDet->getId(),
                                              'strTipoReprograma' => null,
                                              'strUser'           => $strUserCreacion,
                                              'strIp'             => $strIpCreacion));

            //Función que permite realizar el cálculo del tiempo total de la tarea.
            $this->calcularTareaTiempoAsignacion(array('intIdDetalle'   => $objInfoDet->getId(),
                                                       'intIdCaso'      => $intIdCaso,
                                                       'strObservacion' => $parametros['observacion'],
                                                       'strUser'        => $strUserCreacion,
                                                       'strIp'          => $strIpCreacion));

            //Se ingresa el seguimiento de la tarea
            $arrayParametrosHist["strOpcion"]      = "Seguimiento";
            $arrayParametrosHist["strObservacion"] = "Tarea fue Cancelada por el motivo: " . $parametros['observacion'];

            $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            //ACTUALIZA TAREA EN INFO_TAREA
            if ( is_object($objInfoDet) )
            {
                $arrayParametrosInfoTarea['intDetalleId'] = $objInfoDet->getId();
                $arrayParametrosInfoTarea['strUsrUltMod'] = isset($strUserCreacion) ? $strUserCreacion : '';
                $this->actualizarInfoTarea($arrayParametrosInfoTarea);
            }
        }
        catch(\Exception $e)
        {
            $mensaje = $e->getMessage();
            return $mensaje;
        }

        return "OK";
    }

    /**
     * verificarEsClienteCanalTN
     *
     * Metodo encargado determinar si un login es Cliente Canal con padre como TELCONET S.A. para de acuerdo
     * a eso enviar un correo adicional a:
     * ventas@on.net.ec
     * cobranzas@on.net.ec
     *
     * @param integer  $intPuntoId
     *
     * @return boolean con la verificacion
     *
     * @author Allan Suarez  <arsuarez@telconet.ec>
     * @version 1.0 14-11-2014
     */
    public function verificarEsClienteCanalTN($intPuntoId)
    {
        $arrayRolCliente = $this->emComercial->getRepository('schemaBundle:InfoPunto')
                                             ->getRolClientePorPunto($intPuntoId);

        $boolEsCanalTN = false;

        if($arrayRolCliente)
        {
            if($arrayRolCliente[0]['descripcionRol'] == 'Cliente Canal' &&
               trim($arrayRolCliente[0]['razonSocial']) == 'TELCONET S.A.')
            {
                $boolEsCanalTN = true;
            }
        }

        return $boolEsCanalTN;
    }

    /**
     * eliminarSimbolosDeTags
     *
     * Metodo encargado de eliminar los caracteres de apertura y cierre de tags, si es que existieran.
     *
     * @author Richard Cabrera  <rcabrera@telconet.ec>
     * @version 1.0 05-07-2016
     *
     * @param string  $contenido
     *
     * @return boolean $respuesta
     *
     */
    public function eliminarSimbolosDeTags($contenido)
    {
        $nuevoContenido = "";
        $patron = "/[<>]+/";
        if(preg_match($patron, $contenido))
        {
            $nuevoContenido = str_replace('<', '', $contenido);
            $nuevoContenido = str_replace('>', '', $nuevoContenido);

            return $nuevoContenido;
        }
        else
        {
           return $contenido;
        }
    }

    /**
     * rollbackTransaction
     *
     * Metodo encargado de hacer rollback a las transaction activas cada que salte alguna excepcion o condicional que lo amerite
     *
     * @author Allan Suarez  <arsuarez@telconet.ec>
     * @version 1.0 29-12-2014
     */
    public function rollbackTransaction()
    {
        if($this->emSoporte->getConnection()->isTransactionActive())
        {
            $this->emSoporte->getConnection()->rollback();
            $this->emSoporte->getConnection()->close();
        }
        if($this->emComercial->getConnection()->isTransactionActive())
        {
            $this->emComercial->getConnection()->rollback();
            $this->emComercial->getConnection()->close();
        }
        if($this->emComunicacion->getConnection()->isTransactionActive())
        {
            $this->emComunicacion->getConnection()->rollback();
            $this->emComunicacion->getConnection()->close();
        }
        if($this->emInfraestructura->getConnection()->isTransactionActive())
        {
            $this->emInfraestructura->getConnection()->rollback();
            $this->emInfraestructura->getConnection()->close();
        }
    }

    /**
     * Función que actualiza las coordenadas de un punto.
     *
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.1 08-07-2020 - Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     * 
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.0 26-02-2018.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 22-02-2021 - Se registra el afectado en la Info_Parte_Afectada.
     *
     * @param array $arrayParametros
     * @return array $arrayRespuesta
     */
    public function crearTareaActualizaCoordenada($arrayParametros)
    {
        $objTarea           = $arrayParametros['objTarea'];
        $strLongitud        = $arrayParametros['longitud'];
        $strLatitud         = $arrayParametros['latitud'];
        $strObservaciones   = $arrayParametros['observaciones'];
        $strEmpresaCod      = $arrayParametros['empresaCod'];
        $strIpCreacion      = $arrayParametros['ipCreacion'];
        $strUsrCreacion     = $arrayParametros['usrCreacion'];
        $intPuntoId         = $arrayParametros['intPuntoId'];
        $strTipoAsignado    = !empty($arrayParametros['tipoAsignado']) ? $arrayParametros['tipoAsignado'] : "EMPLEADO";
        $strTipo            = "";
        $strMensaje         = "";
        $strStatus          = "ERROR";
        $arrayParametrosHist= array();

        $arrayParametrosHist["strCodEmpresa"]           = $strEmpresaCod;
        $arrayParametrosHist["strUsrCreacion"]          = $strUsrCreacion;
        $arrayParametrosHist["strIpCreacion"]           = $strIpCreacion;
        $arrayParametrosHist["strOpcion"]               = "Historial";
        $arrayParametrosHist["strEnviaDepartamento"]    = "N";

        //*DECLARACION DE TRANSACCIONES------------------------------------------*/
        $this->emSoporte->getConnection()->beginTransaction();
        //*----------------------------------------------------------------------*/
        try
        {
            //InfoDetalle
            $entityDetalle = new InfoDetalle();
            $entityDetalle->setTareaId($objTarea);
            $entityDetalle->setLongitud($strLongitud);
            $entityDetalle->setLatitud($strLatitud);
            $entityDetalle->setPesoPresupuestado(0);
            $entityDetalle->setValorPresupuestado(0);
            $entityDetalle->setObservacion($strObservaciones);
            $entityDetalle->setIpCreacion($strIpCreacion);
            $entityDetalle->setFeCreacion(new \DateTime('now'));
            $entityDetalle->setFeSolicitada(new \DateTime('now'));
            $entityDetalle->setUsrCreacion($strUsrCreacion);
            $this->emSoporte->persist($entityDetalle);
            $this->emSoporte->flush();

            //se obtienen los datos del usuario que crea la incidencia
            $datosUsuario = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                              ->getPersonaDepartamentoPorUserEmpresa($strUsrCreacion, "10");
            $usuarioNombreCanton = $datosUsuario['NOMBRE_CANTON'];

            //se busca el usuario a quien asignar la tarea, dependiendo del canton
            if($usuarioNombreCanton == "QUITO")
            {
                //christian aldaz, jefe de operativos
                $datosJefe = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                               ->getPersonaDepartamentoPorUserEmpresa('ecabrera', "10");
            }
            else if($usuarioNombreCanton == "GUAYAQUIL")
            {
                //christian alcivar, jefe de operativos
                $datosJefe = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                               ->getPersonaDepartamentoPorUserEmpresa('mvargas', "10");
            }
            else
            {
                //si no es de gye o uio, que la tarea se le asigna la tarea al jefe técnico sucursal.
                $arrayAdmiParametroDet              = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne(   'COORDINADORES_SUCURSAL',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $usuarioNombreCanton,
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '');
                if( isset($arrayAdmiParametroDet['valor2']) && !empty($arrayAdmiParametroDet['valor2']) )
                {
                    //jefe tecnica sucursal
                    $datosJefe = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                                   ->getPersonaDepartamentoPorUserEmpresa($arrayAdmiParametroDet['valor2'], "10");
                }
                if($datosJefe == null)
                {
                    $datosJefe = $datosUsuario;
                }
            }
            //InfoDetalleAsignacion
            $detalleAsignacion = new InfoDetalleAsignacion();
            $detalleAsignacion->setDetalleId($entityDetalle);
            $detalleAsignacion->setAsignadoId($datosJefe['ID_DEPARTAMENTO']);
            $detalleAsignacion->setAsignadoNombre($datosJefe['NOMBRE_DEPARTAMENTO']);
            $detalleAsignacion->setRefAsignadoId($datosJefe['ID_PERSONA']);
            $detalleAsignacion->setTipoAsignado($strTipoAsignado);
            $detalleAsignacion->setRefAsignadoNombre($datosJefe['NOMBRES']." ".$datosJefe['APELLIDOS']);
            $detalleAsignacion->setPersonaEmpresaRolId($datosJefe['ID_PERSONA_EMPRESA_ROL']);
            $detalleAsignacion->setUsrCreacion($strUsrCreacion);
            $detalleAsignacion->setFeCreacion(new \DateTime('now'));
            $detalleAsignacion->setIpCreacion($strIpCreacion);
            $detalleAsignacion->setDepartamentoId($datosUsuario['ID_DEPARTAMENTO']);
            $detalleAsignacion->setCantonId($datosUsuario['ID_CANTON']);
            $this->emSoporte->persist($detalleAsignacion);
            $this->emSoporte->flush();

            //Se ingresa el historial de la tarea
            $arrayParametrosHist["strObservacion"]  = "Tarea de actualización de coordenadas del punto";
            $arrayParametrosHist["strEstadoActual"] = "Asignada";
            $arrayParametrosHist["strAccion"]       = "Asignada";

            if(is_object($entityDetalle))
            {
                $arrayParametrosHist["intDetalleId"] = $entityDetalle->getId();
            }

            $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            $objAdmiClaseDocumento  = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                                                           ->findOneByNombreClaseDocumento("Notificacion Interna Correo");

            $objFormaContacto       = $this->emComunicacion->getRepository("schemaBundle:AdmiFormaContacto")
                                                           ->findPorDescripcionFormaContacto("Correo Electronico");

            if(is_object($objAdmiClaseDocumento) && is_object($objFormaContacto))
            {
                $objInfoDocumento = new InfoDocumento();
                $objInfoDocumento->setMensaje("Registro de ".$strTipo);
                $objInfoDocumento->setNombreDocumento("Registro de ".$strTipo);
                $objInfoDocumento->setClaseDocumentoId($objAdmiClaseDocumento);
                $objInfoDocumento->setFeCreacion(new \DateTime('now'));
                $objInfoDocumento->setEstado("Activo");
                $objInfoDocumento->setUsrCreacion($strUsrCreacion);
                $objInfoDocumento->setIpCreacion($strIpCreacion);
                $objInfoDocumento->setEmpresaCod($strEmpresaCod);
                $this->emComunicacion->persist($objInfoDocumento);
                $this->emComunicacion->flush();

                $objInfoComunicacion = new InfoComunicacion();
                $objInfoComunicacion->setFormaContactoId($objFormaContacto->getId());
                $objInfoComunicacion->setRemitenteId($datosJefe['ID_PERSONA']);
                $objInfoComunicacion->setRemitenteNombre($datosJefe['NOMBRES']." ".$datosJefe['APELLIDOS']);
                $objInfoComunicacion->setClaseComunicacion("Recibido");
                $objInfoComunicacion->setDetalleId($entityDetalle->getId());
                $objInfoComunicacion->setFechaComunicacion(new \DateTime('now'));
                $objInfoComunicacion->setEstado("Activo");
                $objInfoComunicacion->setFeCreacion(new \DateTime('now'));
                $objInfoComunicacion->setUsrCreacion($strUsrCreacion);
                $objInfoComunicacion->setIpCreacion($strIpCreacion);
                $objInfoComunicacion->setEmpresaCod($strEmpresaCod);

                if (!empty($intPuntoId))
                {
                    $objInfoPunto = $this->emComercial->getRepository("schemaBundle:InfoPunto")->find($intPuntoId);
                    if (is_object($objInfoPunto))
                    {
                        $objInfoComunicacion->setPuntoId($objInfoPunto->getId());
                        $objInfoComunicacion->setRemitenteId($objInfoPunto->getId());
                        $objInfoComunicacion->setRemitenteNombre($objInfoPunto->getLogin());

                        $strOpcion = 'Cliente: ' . $objInfoPunto->getNombrePunto() . ' | OPCION: Punto Cliente';
                        $objInfoCriterioAfectado = new InfoCriterioAfectado();
                        $objInfoCriterioAfectado->setId(1);
                        $objInfoCriterioAfectado->setDetalleId($entityDetalle);
                        $objInfoCriterioAfectado->setCriterio("Clientes");
                        $objInfoCriterioAfectado->setOpcion($strOpcion);
                        $objInfoCriterioAfectado->setFeCreacion(new \DateTime('now'));
                        $objInfoCriterioAfectado->setUsrCreacion($strUsrCreacion);
                        $objInfoCriterioAfectado->setIpCreacion($strIpCreacion);
                        $this->emSoporte->persist($objInfoCriterioAfectado);
                        $this->emSoporte->flush();

                        $objInfoParteAfectada = new InfoParteAfectada();
                        $objInfoParteAfectada->setCriterioAfectadoId($objInfoCriterioAfectado->getId());
                        $objInfoParteAfectada->setDetalleId($entityDetalle->getId());
                        $objInfoParteAfectada->setFeIniIncidencia($entityDetalle->getFeCreacion());
                        $objInfoParteAfectada->setTipoAfectado("Cliente");
                        $objInfoParteAfectada->setAfectadoId($objInfoPunto->getId());
                        $objInfoParteAfectada->setAfectadoNombre($objInfoPunto->getLogin());
                        $objInfoParteAfectada->setAfectadoDescripcion($objInfoPunto->getNombrePunto());
                        $objInfoParteAfectada->setFeCreacion(new \DateTime('now'));
                        $objInfoParteAfectada->setUsrCreacion($strUsrCreacion);
                        $objInfoParteAfectada->setIpCreacion($strIpCreacion);
                        $this->emSoporte->persist($objInfoParteAfectada);
                        $this->emSoporte->flush();
                    }
                }

                $this->emComunicacion->persist($objInfoComunicacion);
                $this->emComunicacion->flush();

                $objInfoDocumentoComunicacion = new InfoDocumentoComunicacion();
                $objInfoDocumentoComunicacion->setComunicacionId($objInfoComunicacion);
                $objInfoDocumentoComunicacion->setDocumentoId($objInfoDocumento);
                $objInfoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
                $objInfoDocumentoComunicacion->setEstado('Activo');
                $objInfoDocumentoComunicacion->setUsrCreacion($strUsrCreacion);
                $objInfoDocumentoComunicacion->setIpCreacion($strIpCreacion);
                $this->emComunicacion->persist($objInfoDocumentoComunicacion);
                $this->emComunicacion->flush();

            }

            $strStatus     = "OK";
            $strMensaje    = "Se creó tarea exitósamente.";

            //Proceso que graba tarea en INFO_TAREA
            if (isset($arrayParametrosHist["intDetalleId"]))
            {
                $arrayParametrosInfoTarea['intDetalleId']   = $arrayParametrosHist["intDetalleId"];
                $arrayParametrosInfoTarea['strUsrCreacion'] = $strUsrCreacion;
                $this->crearInfoTarea($arrayParametrosInfoTarea);
            }

        }
        catch(\Exception $e)
        {
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }
            $strStatus             = "ERROR";
            $strMensaje            = "No se pudo crear la tarea para la actualización de las coordenadas! Mensaje: ".$e->getMessage();
            $respuestaFinal[]   = array('status' => $strStatus, 'tipo' => '', 'mensaje' => $strMensaje, 'idDetalle' => '');
            return $respuestaFinal;
        }

        if ($this->emSoporte->getConnection()->isTransactionActive())
        {
            $this->emSoporte->getConnection()->commit();
        }

        $this->emSoporte->getConnection()->close();

        //*RESPUESTA-------------------------------------------------------------*/
        $respuestaFinal = array('status'=>$strStatus, 'tipo' => $strTipo, 'mensaje' => $strMensaje, 'idDetalle' => $entityDetalle->getId());
        return $respuestaFinal;
        //*----------------------------------------------------------------------*/
    }
    /**
     * Funcion que sirve para crear una tarea por una incidencia de elementos,
     * tambien se puede crear casos en caso que el usuario lo amerite.
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 9-06-2015
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 09-02-2017 Se agrega la cración de los registros para crear el número de tarea
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 05-07-2017 Se registra la fecha solicitada en la creación de incidencias
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 09-08-2017 -  En la tabla INFO_TAREA_SEGUIMIENTO y INFO_DETALLE_HISTORIAL, se regulariza el departamento creador de la accion y
     *                            se adicionan los campos de persona empresa rol id para identificar el responsable actual.
     *
     * author Modificado: Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.4 20-09-2017 - Se adiciona el tipo asignado a la tabla INFO_DETALLE_ASIGNACION, se modifica el mensaje de respuesta.
	 *
	 * author Modificado: Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.5 09-01-2018 - se cambia al login para el envio de correo al jefe actual de OPU Gye
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.6 09-11-2019 - Se agrega lógica para no insertar registros en la InfoDetalleTareaElemento
     * si no se tiene elementos.
     * 
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.7 08-07-2020 - Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     * 
     * @param array $arrayParametros
     * @return array $respuestaFinal
     */
    public function crearTareaIncidenciaElemento($arrayParametros)
    {
        $tarea              = $arrayParametros['tarea'];
        $elemento           = $arrayParametros['elemento'];
        $longitud           = $arrayParametros['longitud'];
        $latitud            = $arrayParametros['latitud'];
        $observaciones      = $arrayParametros['observaciones'];
        $flagTarea          = $arrayParametros['flagTarea'];
        $empresaCod         = $arrayParametros['empresaCod'];
        $ipCreacion         = $arrayParametros['ipCreacion'];
        $usrCreacion        = $arrayParametros['usrCreacion'];
        $feCreacion         = $arrayParametros['feCreacion'];
        $strTipoAsignado    = !empty($arrayParametros['tipoAsignado']) ? $arrayParametros['tipoAsignado'] : "EMPLEADO";
        $tipo               = "";
        $mensaje            = "";
        $status             = "ERROR";
        $arrayParametrosHist = array();

        $arrayParametrosHist["strCodEmpresa"]           = $empresaCod;
        $arrayParametrosHist["strUsrCreacion"]          = $usrCreacion;
        $arrayParametrosHist["strIpCreacion"]           = $ipCreacion;
        $arrayParametrosHist["strOpcion"]               = "Historial";
        $arrayParametrosHist["strEnviaDepartamento"]    = "N";

        //*DECLARACION DE TRANSACCIONES------------------------------------------*/
        $this->emSoporte->getConnection()->beginTransaction();
        //*----------------------------------------------------------------------*/

        try
        {
            //InfoDetalle
            $entityDetalle = new InfoDetalle();
            $entityDetalle->setTareaId($tarea);
            $entityDetalle->setLongitud($longitud);
            $entityDetalle->setLatitud($latitud);
            $entityDetalle->setPesoPresupuestado(0);
            $entityDetalle->setValorPresupuestado(0);
            $entityDetalle->setObservacion($observaciones);
            $entityDetalle->setIpCreacion($ipCreacion);
            $entityDetalle->setFeCreacion(new \DateTime('now'));
            $entityDetalle->setFeSolicitada(new \DateTime('now'));
            $entityDetalle->setUsrCreacion($usrCreacion);
            $this->emSoporte->persist($entityDetalle);
            $this->emSoporte->flush();

            //se obtienen los datos del usuario que crea la incidencia
            $datosUsuario = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                              ->getPersonaDepartamentoPorUserEmpresa($usrCreacion, $empresaCod);
            $usuarioNombreCanton = $datosUsuario['NOMBRE_CANTON'];

            //se busca el usuario a quien asignar la tarea, dependiendo del canton
            if($usuarioNombreCanton == "QUITO")
            {
                //christian aldaz, jefe de operativos
                $datosJefe = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                               ->getPersonaDepartamentoPorUserEmpresa('caldaz', $empresaCod);
            }
            else if($usuarioNombreCanton == "GUAYAQUIL")
            {
                //juan carlos franco, jefe de operativos
                $datosJefe = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                               ->getPersonaDepartamentoPorUserEmpresa('jfranco', $empresaCod);
            }
            else
            {
                //si no es de gye o uio, que la tarea sea asignada al mismo operativo que crea la incidencia
                $datosJefe = $datosUsuario;
            }

            //InfoDetalleAsignacion
            $detalleAsignacion = new InfoDetalleAsignacion();
            $detalleAsignacion->setDetalleId($entityDetalle);
            $detalleAsignacion->setAsignadoId($datosJefe['ID_DEPARTAMENTO']);
            $detalleAsignacion->setAsignadoNombre($datosJefe['NOMBRE_DEPARTAMENTO']);
            $detalleAsignacion->setRefAsignadoId($datosJefe['ID_PERSONA']);
            $detalleAsignacion->setTipoAsignado($strTipoAsignado);
            $detalleAsignacion->setRefAsignadoNombre($datosJefe['NOMBRES']." ".$datosJefe['APELLIDOS']);
            $detalleAsignacion->setPersonaEmpresaRolId($datosJefe['ID_PERSONA_EMPRESA_ROL']);
            $detalleAsignacion->setUsrCreacion($usrCreacion);
            $detalleAsignacion->setFeCreacion(new \DateTime('now'));
            $detalleAsignacion->setIpCreacion($ipCreacion);
            $this->emSoporte->persist($detalleAsignacion);
            $this->emSoporte->flush();

            if($flagTarea=="S")
            {
                $estadoDetalle = "Asignada";
            }
            else
            {
                $estadoDetalle = "Finalizada";
            }

            //Se ingresa el historial de la tarea
            $arrayParametrosHist["strObservacion"]  = "Tarea de incidencia de elemento";
            $arrayParametrosHist["strEstadoActual"] = $estadoDetalle;
            $arrayParametrosHist["strAccion"]       = $estadoDetalle;

            if(is_object($entityDetalle))
            {
                $arrayParametrosHist["intDetalleId"] = $entityDetalle->getId();
            }

            $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            if(is_object($elemento))
            {
                //InfoDetalleTareaElemento
                $detalleTareaElemento = new InfoDetalleTareaElemento();
                $detalleTareaElemento->setDetalleId($entityDetalle);
                $detalleTareaElemento->setElementoId($elemento->getId());
                $detalleTareaElemento->setFeCreacion($feCreacion);
                $detalleTareaElemento->setUsrCreacion($usrCreacion);
                $detalleTareaElemento->setIpCreacion($ipCreacion);
                $this->emSoporte->persist($detalleTareaElemento);
                $this->emSoporte->flush();
            }

            $objAdmiClaseDocumento  = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                                                           ->findOneByNombreClaseDocumento("Notificacion Interna Correo");

            $objFormaContacto       = $this->emComunicacion->getRepository("schemaBundle:AdmiFormaContacto")
                                                           ->findPorDescripcionFormaContacto("Correo Electronico");

            if(is_object($objAdmiClaseDocumento) && is_object($objFormaContacto))
            {
                $objInfoDocumento = new InfoDocumento();
                $objInfoDocumento->setMensaje("Registro de ".$tipo);
                $objInfoDocumento->setNombreDocumento("Registro de ".$tipo);
                $objInfoDocumento->setClaseDocumentoId($objAdmiClaseDocumento);
                $objInfoDocumento->setFeCreacion(new \DateTime('now'));
                $objInfoDocumento->setEstado("Activo");
                $objInfoDocumento->setUsrCreacion($usrCreacion);
                $objInfoDocumento->setIpCreacion($ipCreacion);
                $objInfoDocumento->setEmpresaCod($empresaCod);
                $this->emComunicacion->persist($objInfoDocumento);
                $this->emComunicacion->flush();

                $objInfoComunicacion = new InfoComunicacion();
                $objInfoComunicacion->setFormaContactoId($objFormaContacto->getId());
                $objInfoComunicacion->setRemitenteId($datosJefe['ID_PERSONA']);
                $objInfoComunicacion->setRemitenteNombre($datosJefe['NOMBRES']." ".$datosJefe['APELLIDOS']);
                $objInfoComunicacion->setClaseComunicacion("Recibido");
                $objInfoComunicacion->setDetalleId($entityDetalle->getId());
                $objInfoComunicacion->setFechaComunicacion(new \DateTime('now'));
                $objInfoComunicacion->setEstado("Activo");
                $objInfoComunicacion->setFeCreacion(new \DateTime('now'));
                $objInfoComunicacion->setUsrCreacion($usrCreacion);
                $objInfoComunicacion->setIpCreacion($ipCreacion);
                $objInfoComunicacion->setEmpresaCod($empresaCod);
                $this->emComunicacion->persist($objInfoComunicacion);
                $this->emComunicacion->flush();

                $objInfoDocumentoComunicacion = new InfoDocumentoComunicacion();
                $objInfoDocumentoComunicacion->setComunicacionId($objInfoComunicacion);
                $objInfoDocumentoComunicacion->setDocumentoId($objInfoDocumento);
                $objInfoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
                $objInfoDocumentoComunicacion->setEstado('Activo');
                $objInfoDocumentoComunicacion->setUsrCreacion($usrCreacion);
                $objInfoDocumentoComunicacion->setIpCreacion($ipCreacion);
                $this->emComunicacion->persist($objInfoDocumentoComunicacion);
                $this->emComunicacion->flush();

            }

            $status     = "OK";
            $mensaje    = "Se creó tarea exitósamente.";
        }
        catch(\Exception $e)
        {
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }
            $status             = "ERROR";
            $mensaje            = "No se pudo crear la tarea para la incidencia! Mensaje: ".$e->getMessage();
            $respuestaFinal[]   = array('status' => $status, 'tipo' => '', 'mensaje' => $mensaje, 'idDetalle' => '');
            return $respuestaFinal;
        }

        if ($this->emSoporte->getConnection()->isTransactionActive())
        {
            $this->emSoporte->getConnection()->commit();
        }

        //Proceso que graba tarea en INFO_TAREA
        if (isset($arrayParametrosHist["intDetalleId"]))
        {
            $arrayParametrosInfoTarea['intDetalleId']   = $arrayParametrosHist["intDetalleId"];
            $arrayParametrosInfoTarea['strUsrCreacion'] = $arrayParametrosHist["strUsrCreacion"];
            $this->crearInfoTarea($arrayParametrosInfoTarea);
        }
        $this->emSoporte->getConnection()->close();

        //*RESPUESTA-------------------------------------------------------------*/
        $respuestaFinal = array('status'=>$status, 'tipo' => $tipo, 'mensaje' => $mensaje, 'idDetalle' => $entityDetalle->getId());
        return $respuestaFinal;
        //*----------------------------------------------------------------------*/
    }

    /**
     * Funcion que sirve para crear una tarea por una incidencia de monitoreo.
     *
     * @author Juan Lafuente <jlafuente@telconet.ec>
     * @version 1.0 09-11-2015
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 17-11-2016 - Todas las tareas, excepto las tareas que se crean de manera automática, luego de crearse deben pasar a estado
     *                           Asignada y no a estado Aceptada, por ende se cambia el estado de las Tareas a Asignada y se modifica la
     *                           respectiva observación del seguimiento de dicha tarea
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 09-08-2017 -  En la tabla INFO_TAREA_SEGUIMIENTO y INFO_DETALLE_HISTORIAL, se regulariza el departamento creador de la accion y
     *                            se adicionan los campos de persona empresa rol id para identificar el responsable actual
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 21-12-2017 - En la tabla INFO_DETALLE_ASIGNACION se registra el campo tipo asignado 'EMPLEADO'
     *
     * @param array $arrayParametros
     * @return array $respuestaFinal
     */
    public function crearTareaIncidenciaMonitoreo($arrayParametros)
    {
        //tarea asociada
        $tarea              = $arrayParametros['tarea'];
        //latitud del punto geografico donde se ejecutó la incidencia
        $latitud            = $arrayParametros['latitud'];
        //longitud del punto geografico donde se ejecutó la incidencia
        $longitud           = $arrayParametros['longitud'];
        //observaciones de la incidencia
        $observaciones      = $arrayParametros['observaciones'];
        //login del usuario al cual esta asignada la incidencia
        $userAsignacion     = $arrayParametros['userAsignacion'];
        //codigo de la empresa
        $empresaCod         = $arrayParametros['empresaCod'];
        $ipCreacion         = $arrayParametros['ipCreacion'];
        //usuario de creación de la incidencia
        $usrCreacion        = $arrayParametros['usrCreacion'];

        $mensaje            = "";
        $status             = "ERROR";
        $arrayParametrosHist = array();

        $arrayParametrosHist["strCodEmpresa"]           = $empresaCod;
        $arrayParametrosHist["strUsrCreacion"]          = $usrCreacion;
        $arrayParametrosHist["strIpCreacion"]           = $ipCreacion;
        $arrayParametrosHist["strOpcion"]               = "Historial";
        $arrayParametrosHist["strEnviaDepartamento"]    = "N";

        //*DECLARACION DE TRANSACCIONES------------------------------------------*/
        $this->emSoporte->getConnection()->beginTransaction();
        //*----------------------------------------------------------------------*/

        try
        {
            //InfoDetalle
            $entityDetalle = new InfoDetalle();
            $entityDetalle->setTareaId($tarea);
            $entityDetalle->setLongitud($longitud);
            $entityDetalle->setLatitud($latitud);
            $entityDetalle->setPesoPresupuestado(0);
            $entityDetalle->setValorPresupuestado(0);
            $entityDetalle->setObservacion($observaciones);
            $entityDetalle->setIpCreacion($ipCreacion);
            $entityDetalle->setFeCreacion(new \DateTime('now'));
            $entityDetalle->setFeSolicitada(new \DateTime('now'));
            $entityDetalle->setUsrCreacion($usrCreacion);
            $this->emSoporte->persist($entityDetalle);
            $this->emSoporte->flush();

            $datosJefe = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                           ->getPersonaDepartamentoPorUserEmpresa($userAsignacion, $empresaCod);

            if($datosJefe)
            {
                // InfoDetalleAsignacion
                $detalleAsignacion = new InfoDetalleAsignacion();
                $detalleAsignacion->setDetalleId($entityDetalle);
                $detalleAsignacion->setAsignadoId($datosJefe['ID_DEPARTAMENTO']);
                $detalleAsignacion->setAsignadoNombre($datosJefe['NOMBRE_DEPARTAMENTO']);
                $detalleAsignacion->setRefAsignadoId($datosJefe['ID_PERSONA']);
                $detalleAsignacion->setRefAsignadoNombre($datosJefe['NOMBRES']." ".$datosJefe['APELLIDOS']);
                $detalleAsignacion->setPersonaEmpresaRolId($datosJefe['ID_PERSONA_EMPRESA_ROL']);
                $detalleAsignacion->setTipoAsignado('EMPLEADO');
                $detalleAsignacion->setUsrCreacion($usrCreacion);
                $detalleAsignacion->setFeCreacion(new \DateTime('now'));
                $detalleAsignacion->setIpCreacion($ipCreacion);
                $this->emSoporte->persist($detalleAsignacion);
                $this->emSoporte->flush();
            }else{
                $mensaje = "No se encuentra usuario para generar la asignación";
                throw new \Exception($mensaje);
            }

            //Se ingresa el historial de la tarea
            $arrayParametrosHist["strObservacion"]  = "Tarea de incidencia de monitoreo";
            $arrayParametrosHist["strEstadoActual"] = "Asignada";
            $arrayParametrosHist["strAccion"]       = "Asignada";
            if(is_object($entityDetalle))
            {
                $arrayParametrosHist["intDetalleId"] = $entityDetalle->getId();
            }

            $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);



            $arrayIds = array();
            // se añade el id de la tarea de monitoreo
            $arrayIds[] = array('idDetalleMonitoreo' => $entityDetalle->getId());

            //se obtienen los datos del usuario que crea la incidencia
            $datosUsuario = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                              ->getPersonaDepartamentoPorUserEmpresa($usrCreacion, $empresaCod);

            // se creara una tarea para que se reasigne el monitoreo porque el usuario no se encuentra activo
            if(!$datosUsuario){
                //InfoDetalle
                $entityDetalle = new InfoDetalle();
                $entityDetalle->setTareaId($tarea);
                $entityDetalle->setLongitud($longitud);
                $entityDetalle->setLatitud($latitud);
                $entityDetalle->setPesoPresupuestado(0);
                $entityDetalle->setValorPresupuestado(0);
                $entityDetalle->setObservacion('Favor revisar la reasignación, ya que el usuario >>>'.$usrCreacion.'<<< no se encuentra activo');
                $entityDetalle->setIpCreacion($ipCreacion);
                $entityDetalle->setFeCreacion(new \DateTime('now'));
                $entityDetalle->setFeSolicitada(new \DateTime('now'));
                $entityDetalle->setUsrCreacion($userAsignacion);
                $this->emSoporte->persist($entityDetalle);
                $this->emSoporte->flush();

                //Se ingresa el historial de la tarea
                $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

                 //InfoDetalleAsignacion
                $detalleAsignacion = new InfoDetalleAsignacion();
                $detalleAsignacion->setDetalleId($entityDetalle);
                $detalleAsignacion->setAsignadoId($datosJefe['ID_DEPARTAMENTO']);
                $detalleAsignacion->setAsignadoNombre($datosJefe['NOMBRE_DEPARTAMENTO']);
                $detalleAsignacion->setRefAsignadoId($datosJefe['ID_PERSONA']);
                $detalleAsignacion->setRefAsignadoNombre($datosJefe['NOMBRES']." ".$datosJefe['APELLIDOS']);
                $detalleAsignacion->setPersonaEmpresaRolId($datosJefe['ID_PERSONA_EMPRESA_ROL']);
                $detalleAsignacion->setTipoAsignado('EMPLEADO');
                $detalleAsignacion->setUsrCreacion($userAsignacion);
                $detalleAsignacion->setFeCreacion(new \DateTime('now'));
                $detalleAsignacion->setIpCreacion($ipCreacion);
                $this->emSoporte->persist($detalleAsignacion);
                $this->emSoporte->flush();

                $arrayIds[] = array('idDetalleReasignacion' => $entityDetalle->getId());
            }

            $status     = "OK";
            $mensaje    = "Se creo la incidencia de monitoreo";
        }
        catch(\Exception $e)
        {
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }
            $status             = "ERROR";
            $mensaje            = "No se pudo crear la tarea para la incidencia! Mensaje: ".$e->getMessage();
            $respuestaFinal   = array(
                                        'status'     => $status,
                                        'mensaje'    => $mensaje);
            return $respuestaFinal;
        }

        if ($this->emSoporte->getConnection()->isTransactionActive())
        {
            $this->emSoporte->getConnection()->commit();
        }
        //Proceso que graba tarea en INFO_TAREA
        if(isset($arrayParametrosHist["intDetalleId"]))
        {
            $arrayParametrosInfoTarea['intDetalleId']   = $arrayParametrosHist["intDetalleId"];
            $arrayParametrosInfoTarea['strUsrCreacion'] = $arrayParametrosHist["strUsrCreacion"];
            $this->crearInfoTarea($arrayParametrosInfoTarea);
        }
        $this->emSoporte->getConnection()->close();

        //*RESPUESTA-------------------------------------------------------------*/
        $respuestaFinal = array(
                                'status'      => $status,
                                'mensaje'     => $mensaje,
                                //corresponde al arreglo de  ids de los monitoreos y reasignaciones que se hayan creado.
                                'arrayTareas' => $arrayIds);
        return $respuestaFinal;
        //*----------------------------------------------------------------------*/
    }

    /**
     * ingresarSeguimientoTarea - Funcion que sirve para ingresar el seguimiento de una tarea
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 17-07-2015
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 22-10-2015 - Se agregan validaciones a la logica, a razon
     *                           de incluir el nuevo concepto de asignacion
     *                           de tareas a cuadrillas
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 15-04-2016 - Se realizan ajustes a razon de enviar un SMS al cliente, cuando se ingresen seguimientos en las tareas
     *
     * @author Modificado: Allan Suarez <arsuarez@telconet.ec>
     * @version 1.3 30-05-2016 - Se actualice para que se pueda enviar correos de seguimientos a clientes corporativos en TN cuando estos
     *                           pertenezcan a un CASO
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.4 23-06-2016 - En las notificaciones al cliente se reemplaza el nombre de la razon social por el nombre del login del afectado
     *
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.5 23-06-2016 Se guarda el último estado de la tarea en la creación del seguimiento.
     *
     * @author modificado Allan Suarez <arsuarez@telconet.ec>
     * @version 1.6 23-06-2016 Se realizan ajustes para que los correos que se envien a los clientes sean solo de Contactos Tecnicos
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.7 05-07-2016 Se valida que si ingresan caracteres de apertura y cierre de tags en la observacion, se eliminan
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.8 07-07-2016 Se realizan ajustes para que no se notifique al cliente cuando es caso sin afectacion
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.9 15-08-2016 - Se realizan ajustes por cambios en la funcion getMinimaComunicacionPorDetalleId
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.0 12-09-2016 Se valida que la tarea se encuentre abierta para poder ejecutar la herramienta
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.1 19-09-2016 Se realizan ajustes para incluir el concepto de ingresar seguimientos internos
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.2 13-01-2017 - Se realizan ajustes para determinar si se esta iniciando la ejecución de la tarea
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.3 10-03-2017 - Se realizan ajustes para enviar SMS a los casos de Tipo Tecnico y Arcotel
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.4 28-03-2017  Se agrega la dirección,descripción del punto y tipo de caso en la notificación de ingresar seguimiento
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.5 09-08-2017 -  En la tabla INFO_TAREA_SEGUIMIENTO y INFO_DETALLE_HISTORIAL, se regulariza el departamento creador de la accion y
     *                            se adicionan los campos de persona empresa rol id para identificar el responsable actual
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.6 09-10-2018 -  Se realizan ajustes en la programación para habilitar las notificaciones a clientes, para los casos tipo Backbone
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.7 29-10-2018 -  Se realizan ajustes en la programación para habilitar notificaciones al departamento de NOC, solo para casos
     *                            tipo Backbone
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.8 06-11-2018 -  Se realizan ajustes en la programación que enviá la notificación a clientes en casos Backbone, el cambio
     *                            consiste en que solo se considere los afectados que tengan seleccionado un switch y una interfaz
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.9 05-02-2019 -  Se realizan ajustes en la programación para enviar solo las notificaciones de TN a los alias de L1 y L2
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 3.0 07-02-2019 -  Para poder obtener los alias configurados en las notificaciones se valida que la empresa de creación
     *                            del caso sea Telconet
     *
     * @author Modificado: Andrés Montero <amontero@telconet.ec>
     * @version 3.1 28-04-2020 -  Se agrega programación para enviar notificaciones push de ingreso de seguimientos en las tareas que esten ligadas a
     *                            asignaciones del módulo agente
     * 
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 3.2 30-11-2020 - Se envía parámetro tipoAsignado al llamar a generarEnvioPlantilla
     * 
     * @author Modificado: Diego Guamán <deguaman@telconet.ec>
     * @version 3.3 31/03/2023 -  Se agrega parámetro strContactoCliente y strSeguimientoConTags para no eliminar tags y guardar 
     * registro de contacto del cliente 
     *   
     * @param array $arrayParametros
     * @return array $respuestaFinal
     */
    public function ingresarSeguimientoTarea($arrayParametros)
    {
        $idEmpresa              = $arrayParametros['idEmpresa'];
        $prefijoEmpresa         = $arrayParametros['prefijoEmpresa'];
        $idCaso                 = $arrayParametros['idCaso'];
        $idDetalle              = $arrayParametros['idDetalle'];
        $seguimiento            = $arrayParametros['seguimiento'];
        $strDepartamentoSession = $arrayParametros['departamento'];
        $strInterno             = $arrayParametros['regInterno'];
        $empleado               = $arrayParametros['empleado'];
        $usrCreacion            = $arrayParametros['usrCreacion'];
        $ipCreacion             = $arrayParametros['ipCreacion'];
        $strEjecucionTarea      = $arrayParametros['strEjecucionTarea']?$arrayParametros['strEjecucionTarea'] : "N";
        $strEnviaDepartamento   = $arrayParametros['strEnviaDepartamento']?$arrayParametros['strEnviaDepartamento'] : "";
        $strContactoCliente     = $arrayParametros['strContactoCliente']?$arrayParametros['strContactoCliente'] : "N";
        $strSeguimientoConTags  = "";
        $strDireccionPunto      = "";
        $strDescripcionPunto    = "";
        $strTipoCaso            = "";
        $departamento           = '';
        $infoPersonaEmpresaRol  = '';
        $empresa                = '';
        $arrayParametrosHist    = array();
        $strCadenaContactos     = "";
        $arrayPuntosBackbone    = array();
        $arrayPuntosBackboneTotal = array();
        $arrayPuntosNotificar     = array();
        $arrayPuntosBackboneElemento = array();
        $arrayPuntosBackboneCliente  = array();
        $arrayEstadosServicio   = array('Activo','In-Corte');
        $arrayRazonesSocial     = array();
        $arrayBackboneTotalElemento = array();
        $arrayBackboneTotalCliente  = array();
        $arrayParamCorreosNoc       = array();
        $arrayCorreosNoc            = array();
        $arrayParamCorreosCliente   = array();
        $arrayCorreos               = array();

        $arrayParametrosHist["strCodEmpresa"]           = $idEmpresa;
        $arrayParametrosHist["strUsrCreacion"]          = $usrCreacion;
        $arrayParametrosHist["strIpCreacion"]           = $ipCreacion;
        $arrayParametrosHist["intIdDepartamentoOrigen"] = $strDepartamentoSession;
        $arrayParametrosHist["strOpcion"]               = "Seguimiento";

        //Inicio de Transacciones
        $this->emComunicacion->getConnection()->beginTransaction();
        $this->emSoporte->getConnection()->beginTransaction();

        try
        {
            $strEstadoActualTarea = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->getUltimoEstado($idDetalle);

            if($strEstadoActualTarea  != "Cancelada" && $strEstadoActualTarea  != "Rechazada" && $strEstadoActualTarea  != "Finalizada")
            {

                if($strContactoCliente == "S")
                {
                    $strSeguimientoConTags =  $seguimiento;
                    $seguimiento = "Registro de contacto del cliente ingresado";
                }
                //Se eliminan simbolos de tags
                $seguimiento = $this->eliminarSimbolosDeTags($seguimiento);

                //Si es desde el mobil no debe ejecutarse esta logica
                if($strEjecucionTarea != "S")
                {
                    //************************************************************************************
                    //************************ ENVIO MAILS Y COMUNICACION ********************************
                    //************************************************************************************
                    //*************************** SEGUIMIENTO CASO O TAREA *******************************

                    $infoDetalleAsignacion = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')->getUltimaAsignacion($idDetalle);
                    if (!is_object($infoDetalleAsignacion))
                    {
                     throw new \Exception("No se encontró información del Detalle de la Asignación");
                    }
                    if($infoDetalleAsignacion->getTipoAsignado() == "CUADRILLA")
                    {
                        if($infoDetalleAsignacion->getRefAsignadoId())
                        {
                            $datosLider         = $this->emComercial->getRepository('schemaBundle:InfoCuadrilla')
                                                                    ->getDatosLiderCuadrilla($infoDetalleAsignacion->getRefAsignadoId());

                            if($datosLider)
                            {
                                $area         = $this->emGeneral->getRepository('schemaBundle:AdmiArea')
                                                                ->find($datosLider['idArea']);


                                $empresa      = $area->getEmpresaCod();
                                $departamento = $datosLider['idDepartamento'];
                            }
                            else
                            {
                                $departamento = '';
                            }

                        }
                    }
                    else
                    {
                        $departamento = $this->emGeneral->getRepository('schemaBundle:AdmiDepartamento')
                                                        ->find($infoDetalleAsignacion->getAsignadoId());

                        //OBTENCION DEL CANTON DEL ENCARGADO DE LA TAREA
                        if($departamento)
                        {
                            $empresa     = $departamento->getEmpresaCod();
                            $departamento= $departamento->getId();
                        }
                        else
                        {
                            $departamento = '';
                        }
                    }

                    if($infoDetalleAsignacion->getPersonaEmpresaRolId())
                    {
                        $infoPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                      ->find($infoDetalleAsignacion->getPersonaEmpresaRolId());
                    }
                    if($infoPersonaEmpresaRol)
                    {
                        $oficina    = $this->emComercial->getRepository('schemaBundle:InfoOficinaGrupo')
                                                        ->find($infoPersonaEmpresaRol->getOficinaId()->getId());
                        $canton     = $oficina->getCantonId();
                    }
                    else
                    {
                        $canton = '';
                    }

                    if($infoDetalleAsignacion->getRefAsignadoId())
                    {
                        $infoPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                                                         ->findOneBy(
                                                                     array(
                                                                            'personaId'         => $infoDetalleAsignacion->getRefAsignadoId(),
                                                                            'formaContactoId'   => 5,
                                                                            'estado'            => "Activo"
                                                                          )
                                                                    );

                        if($infoPersonaFormaContacto)
                        {
                            $to[] = $infoPersonaFormaContacto->getValor(); //Correo Persona Asignada
                        }
                    }

                    $caso = null;

                    $estadoTareaSeguimiento=$this->emSoporte->getRepository('schemaBundle:InfoDetalle')->getUltimoEstado($idDetalle);
                    if($idCaso!=0)
                    {
                        //Significa que es una tarea desligada a un caso
                        $caso        = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->find($idCaso);
                        $afectados   = $objJson = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->getRegistrosAfectadosTotalXCaso($idCaso);
                        $asunto      = "Nuevo Seguimiento Caso ".$caso->getNumeroCaso();
                        $strTipoCaso = $caso->getTipoCasoId()->getNombreTipoCaso();
                        /*********************************************************************
                        USO DE SERVICE ENVIOPLANTILLA PARA GESTION DE ENVIO DE CORREOS
                        ***********************************************************************/
                        $parametros = array('caso'              => $caso,
                                            'afectados'         => $afectados,
                                            'asignacion'        => $infoDetalleAsignacion,
                                            'seguimiento'       => $seguimiento,
                                            'empleadoLogeado'   => $empleado, //nombre completo del empleado
                                            'empresa'           => $prefijoEmpresa
                                );

                        $this->envioPlantilla->generarEnvioPlantilla($asunto, $to , 'CASOSEGU', $parametros , $empresa ,$canton,$departamento);
                    }
                    else
                    {
                        //Tareas individuales
                        $idCaso         = null;
                        //Se obtiene el numero de la tarea en base al id_detalle
                        $intNumeroTarea = $this->emComunicacion->getRepository('schemaBundle:InfoComunicacion')
                                                               ->getMinimaComunicacionPorDetalleId($idDetalle);

                        $detalle        = $objJson = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->find($idDetalle);
                        $tarea          = $objJson = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')->find($detalle->getTareaId());

                        if($intNumeroTarea)
                        {
                            $asunto = "Nuevo Seguimiento Tarea, Actividad #".$intNumeroTarea;
                        }
                        else
                        {
                            $asunto = "Nuevo Seguimiento de Tarea";
                        }

                         /*********************************************************************
                        USO DE SERVICE ENVIOPLANTILLA PARA GESTION DE ENVIO DE CORREOS
                        ***********************************************************************/
                        $parametros = array('actividad'         => $intNumeroTarea,
                                            'asignacion'        => $infoDetalleAsignacion,
                                            'seguimiento'       => $seguimiento,
                                            'nombreTarea'       => $tarea->getNombreTarea(),
                                            'empleadoLogeado'   => $empleado,
                                            'empresa'           => $prefijoEmpresa);

                        $strTipoAsignado = $infoDetalleAsignacion->getTipoAsignado();
                        $this->envioPlantilla->generarEnvioPlantilla($asunto, $to , 'TAREASEGU', $parametros , $empresa 
                              ,$canton,$departamento, null, null, 'notificaciones_telcos@telconet.ec', $strTipoAsignado);
                    }

                    $clase = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")->findOneByNombreClaseDocumento("Notificacion");

                    $infoDocumento = new InfoDocumento();
                    $infoDocumento->setClaseDocumentoId($clase);
                    $infoDocumento->setMensaje($seguimiento); //Observacion de seguimento
                    $infoDocumento->setEstado('Activo');
                    $infoDocumento->setNombreDocumento($asunto);
                    $infoDocumento->setFeCreacion(new \DateTime('now'));
                    $infoDocumento->setUsrCreacion($usrCreacion);
                    $infoDocumento->setIpCreacion($ipCreacion);
                    $infoDocumento->setEmpresaCod($idEmpresa);
                    $this->emComunicacion->persist($infoDocumento);
                    $this->emComunicacion->flush();

                    $infoComunicacion = new InfoComunicacion();
                    $infoComunicacion->setCasoId($idCaso);
                    $infoComunicacion->setDetalleId($idDetalle);
                    $infoComunicacion->setFormaContactoId(5);
                    $infoComunicacion->setClaseComunicacion("Enviado");
                    $infoComunicacion->setFechaComunicacion(new \DateTime('now'));
                    $infoComunicacion->setFeCreacion(new \DateTime('now'));
                    $infoComunicacion->setEstado('Activo');
                    $infoComunicacion->setUsrCreacion($usrCreacion);
                    $infoComunicacion->setIpCreacion($ipCreacion);
                    $infoComunicacion->setEmpresaCod($idEmpresa);
                    $this->emComunicacion->persist($infoComunicacion);
                    $this->emComunicacion->flush();

                    $infoDocumentoComunicacion = new InfoDocumentoComunicacion();
                    $infoDocumentoComunicacion->setComunicacionId($infoComunicacion);
                    $infoDocumentoComunicacion->setDocumentoId($infoDocumento);
                    $infoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
                    $infoDocumentoComunicacion->setEstado('Activo');
                    $infoDocumentoComunicacion->setUsrCreacion($usrCreacion);
                    $infoDocumentoComunicacion->setIpCreacion($ipCreacion);
                    $this->emComunicacion->persist($infoDocumentoComunicacion);
                    $this->emComunicacion->flush();
                }

                /*********************************************************/
                //		SE INGRESA SEGUIMIENTO DE TAREA
                /*********************************************************/
                $arrayParametrosHist["strObservacion"]        = $strContactoCliente == "N"? $seguimiento : $strSeguimientoConTags;
                $arrayParametrosHist["strEstadoActual"]       = $strEstadoActualTarea;
                $arrayParametrosHist["intDetalleId"]          = $idDetalle;
                $arrayParametrosHist["strSeguimientoInterno"] = $strInterno?$strInterno:"N";
                $arrayParametrosHist["strEnviaDepartamento"]  = $strEnviaDepartamento;

                $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

              
                    /******************************** ************************************************************
                                 ENVIO DE SMS AL CLIENTE CUANDO SE INGRESA UN SEGUIMIENTO
                     * ******************************************************************************************* */

                    if($strEjecucionTarea != "S" && ( 
                        count($afectados) == 1 || 
                       ($prefijoEmpresa == 'TN' && 
                       count($afectados) >= 1)) && 
                       ($prefijoEmpresa == "MD" || 
                       $prefijoEmpresa == "EN" || 
                      ($prefijoEmpresa == 'TN' && $caso->getTipoAfectacion() != 'SINAFECTACION' &&
                      ($caso->getTipoCasoId()->getNombreTipoCaso() == 'Tecnico' ||
                       $caso->getTipoCasoId()->getNombreTipoCaso() == 'Arcotel'))))
                    {

                            $host = $this->host;
                            $path = $this->path;

                            $puntoId        = $afectados[0]['afectadoId'];//Se envia el punto del cliente al Java
                            $personaId      = "";                         //Se envia el id persona en caso de ser Usuario
                            $destinatario   = "CLI";                      //Tipo CLI = clinete o TEC = tecnico
                            $tipoEnvio      = "OUT";                      // OUT o IN según el envío/entrada del mensaje
                            $tipoNotifica   = "SMS";                      // SMS o CORREO
                            $tipoEvento     = "SEGUI";                    // OPEN/CLOSE/SEGUI dependiendo de la accion del Caso
                            $empresa        = $idEmpresa;                 //id Empresa
                            $usuario        = $usrCreacion;               //Se obtiene el login del user en sesion
                            $casoId         = $caso->getId();             //Se envia el id del caso a gestionar comunicacion
                            $detalleId      = "";                         //Se envia el detalle id de la TAREA 
                            $asignacion     = "";

                            $strScript = '/home/scripts-telcos/md/soporte/sources/telcos-comunicaciones/dist/TelcosComunicaciones.jar';

                            $strParametros = $puntoId . "|" . $personaId . "|" . $destinatario . "|" . $tipoEnvio . "|" . $tipoNotifica . "|" .
                                             $tipoEvento. "|" .
                                             $empresa . "|" . $host . "|" . $usuario . "|" . $casoId . "|" . $detalleId . "|" . $asignacion . "|" . $path
                                             . "|" . $seguimiento;

                            $strEsperaRespuesta = 'NO';

                            $strComando = "nohup ".$this->strPathJava." -jar -Djava.security.egd=file:/dev/./urandom " . $path .
                                       "telcos/app/Resources/scripts/TelcosComunicacionScripts.jar '" . $strScript . "' ".
                                       " '" . $strParametros . "' '" . $strEsperaRespuesta . "' '" . $host . "' '".
                                       $this->strScriptPathJava."' >> /home/telcos/app/Resources/scripts/log/log.txt &";
                            shell_exec($strComando);

                        
                    }

                    //Cliente corporativo recibe notificacion de seguimientos ingresados sobre su incidencia ( solo se ejecuta en seguimiento de
                    //tareas relacionadas a un CASO )
                    if (($prefijoEmpresa == "TN" || 
                         $prefijoEmpresa == "MD" || 
                         $prefijoEmpresa == "EN" ) 
                         && $caso && $caso->getTipoAfectacion() != 'SINAFECTACION')
                    {

                        if($caso->getTipoCasoId()->getNombreTipoCaso() == 'Tecnico' || $caso->getTipoCasoId()->getNombreTipoCaso() == 'Arcotel')
                        {
                            //Se genera correo de notificacion a clientes con seguimientos generados

                            $objDetalle        = $objJson = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->find($idDetalle);
                            $objTarea          = $objJson = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')->find($objDetalle->getTareaId());


                            //Se obtienen los correos relacionados al punto en la que se genero la incidencia
                            $arrayContactosPunto = $this->emComercial->getRepository("schemaBundle:InfoPuntoContacto")
                                                        ->getArrayContactosPorPuntoYTipo($afectados[0]['afectadoId'],"Contacto Tecnico");


                            //Se genera correo de notificacion a clientes
                            $to = array();
                            $parametros = array();
                            if ($prefijoEmpresa == 'TN')
                            {
                                $to[] = $contacto['valor'];

                                //Se obtienen los correos relacionados al punto en la que se genero la incidencia
                                $arrayContactosPunto = $this->emComercial->getRepository("schemaBundle:InfoPuntoContacto")
                                                                         ->getArrayContactosPorPuntoYTipo($afectados[0]['afectadoId'],"Contacto Tecnico");

                                foreach($arrayContactosPunto as $contacto)
                                {
                                    $to[] = $contacto['valor'];
                                }
                                $parametros['strEmpresa'] = "TELCONET S.A.";
                            }

                            if ($prefijoEmpresa == 'MD' || $prefijoEmpresa == 'EN' )
                            {
                                $arrayContactosPunto = $this->emComercial->getRepository('schemaBundle:InfoPuntoFormaContacto')
                                                      ->getArrayFormaContactosPorPunto($afectados[0]['afectadoId']);

                                foreach ($arrayContactosPunto as $contacto)
                                {
                                  $to[] = $contacto['valor'];
                                }
                              


                                if ($prefijoEmpresa == 'MD')
                                {
                                         $parametros['strEmpresa'] = "NETLIFE";
                                }

                                if ($prefijoEmpresa == 'EN')
                                {
                                         $parametros['strEmpresa'] = "ECUANET";
                                }

                            }

                            //**************Se consulta los alias del departamento de L1 Y L2******************//
                            if($caso->getEmpresaCod() == '10')
                            {
                                $arrayParamCorreosCliente  = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                                             ->get('PARAMETROS PROYECTO NOTIFICACIONES CASOS CLIENTE',
                                                                                   '',
                                                                                   '',
                                                                                   'ALIAS_SEGUI_CASO_CLIENTE',
                                                                                   '',
                                                                                   '',
                                                                                   '',
                                                                                   '',
                                                                                   '',
                                                                                   $idEmpresa);

                                foreach($arrayParamCorreosCliente as $idxParamCorreo)
                                {
                                    $arrayCorreos = explode("|", $idxParamCorreo["valor1"]);
                                }

                                foreach ($arrayCorreos as $correos)
                                {
                                    $to[] = $correos;
                                }
                            }
                            //**************Se consulta los alias del departamento de L1 Y L2******************//

                            //Se obtiene la direccion y descripcion del punto
                            $objInfoPunto  = $this->emComercial->getRepository("schemaBundle:InfoPunto")
                                                  ->findOneBy(array("login"  => $afectados[0]['afectadoNombre'],
                                                                    "estado" => "Activo"));

                            if(is_object($objInfoPunto))
                            {
                                $strDireccionPunto   = $objInfoPunto->getDireccion();
                                $strDescripcionPunto = $objInfoPunto->getDescripcionPunto();
                            }

                            //Se obtiene la persona asignada/afectada en la creacion del CASO para efecto de correos
                            $obPersonaAfectada = $this->emComercial->getRepository("schemaBundle:InfoPersona")->findOneByLogin($usrCreacion);

                            $parametros['caso']                 = $caso;
                            $parametros['tarea']                = $objTarea->getNombreTarea();
                            $parametros['usrCreacion']          = ucwords(strtolower($obPersonaAfectada->__toString()));
                            $parametros['cliente']              = $afectados[0]['afectadoNombre'];
                            $parametros['direccion']            = $strDireccionPunto;
                            $parametros['descripcion']          = $strDescripcionPunto;
                            $parametros['tipoCaso']             = $strTipoCaso;
                            $parametros['seguimiento']          = $seguimiento;
                            $parametros['fecha']                = new \DateTime('now');

                            $this->envioPlantilla->generarEnvioPlantilla('Nuevo Seguimiento de Caso # '.$caso->getNumeroCaso(),
                                                                         $to,
                                                                         'CASOSEGUI_CLIE',
                                                                         $parametros,
                                                                         $idEmpresa,
                                                                         $canton,
                                                                         $departamento,
                                                                         null,
                                                                         false
                            );
                        }
                        else if($caso->getTipoCasoId()->getNombreTipoCaso() == 'Backbone' && $prefijoEmpresa == "TN")
                        {
                            $objDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->find($idDetalle);
                            $objTarea   = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')->find($objDetalle->getTareaId());

                            //Se obtiene el user de creacion
                            $obPersona = $this->emComercial->getRepository("schemaBundle:InfoPersona")->findOneByLogin($usrCreacion);

                            $parametros['caso']                 = $caso;
                            $parametros['tarea']                = $objTarea->getNombreTarea();
                            $parametros['usrCreacion']          = ucwords(strtolower($obPersona->__toString()));
                            $parametros['direccion']            = "N/A";
                            $parametros['descripcion']          = "N/A";
                            $parametros['tipoCaso']             = $strTipoCaso;
                            $parametros['seguimiento']          = $seguimiento;
                            $parametros['fecha']                = new \DateTime('now');

                            //Se consulta las razones sociales configuradas
                            $arrayRazonSocial  = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                                 ->get('PARAMETROS PROYECTO NORIFICACIONES BACKBONE',
                                                                       '',
                                                                       '',
                                                                       'RAZON SOCIAL BANCO BOLIVARIANO',
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       '');

                            foreach($arrayRazonSocial as $idxRazonSocial)
                            {
                                $arrayRazonesSocial[] = $idxRazonSocial["valor1"];
                            }

                            foreach($afectados as $arrayAfectado)
                            {
                                if($arrayAfectado["tipoAfectado"] == "Elemento" && !empty($arrayAfectado['afectadoNombre'])
                                    && !empty($arrayAfectado['afectadoDescripcion']))
                                {
                                    $arrayParametrosPuntos["strNombreElemento"]       = $arrayAfectado['afectadoNombre'];
                                    $arrayParametrosPuntos["strDescripcionInterface"] = $arrayAfectado['afectadoDescripcion'];
                                    $arrayParametrosPuntos["arrayEstadosServicio"]    = $arrayEstadosServicio;
                                    $arrayParametrosPuntos["arrayRazonSocial"]        = $arrayRazonesSocial;

                                    $arrayPuntosBackboneElemento = $this->emComercial->getRepository('schemaBundle:InfoPunto')
                                                                                     ->getPuntosPorElementoYPuerto($arrayParametrosPuntos);

                                    $arrayBackboneTotalElemento = array_merge($arrayPuntosBackboneElemento,$arrayBackboneTotalElemento);
                                }

                                if($arrayAfectado["tipoAfectado"] == "Cliente")
                                {
                                    $arrayParametrosPuntos["strLogin"]          = $arrayAfectado['afectadoNombre'];
                                    $arrayParametrosPuntos["arrayRazonSocial"]  = $arrayRazonesSocial;

                                    $arrayPuntosBackboneCliente = $this->emComercial->getRepository('schemaBundle:InfoPunto')
                                                                                    ->getPuntosPorLogin($arrayParametrosPuntos);

                                    $arrayBackboneTotalCliente = array_merge($arrayPuntosBackboneCliente,$arrayBackboneTotalCliente);
                                }
                            }

                            $arrayPuntosBackbone = array_merge($arrayBackboneTotalElemento,$arrayBackboneTotalCliente);

                            foreach($arrayPuntosBackbone as $idxPunto)
                            {
                                    $arrayPuntosBackboneTotal[] = $idxPunto["idPunto"];
                            }

                            $arrayPuntosNotificar = array_unique($arrayPuntosBackboneTotal);

                            //Se recorren los puntos backbone que deben ser notificados
                            foreach($arrayPuntosNotificar as $idPuntoBackbone)
                            {
                                $arrayContactosPunto = $this->emComercial->getRepository("schemaBundle:InfoPuntoContacto")
                                                                         ->getArrayContactosPorPuntoYTipo($idPuntoBackbone,
                                                                                                          "Contacto Tecnico");

                                $objInfoPunto = $this->emComercial->getRepository("schemaBundle:InfoPunto")->find($idPuntoBackbone);

                                if(is_object($objInfoPunto) && !empty($arrayContactosPunto))
                                {
                                    $parametros['strEmpresa'] = "TELCONET S.A.";
                                    //Recorrer las formas de contacto
                                    foreach($arrayContactosPunto as $idxContactoPunto)
                                    {
                                        $strCadenaContactos .= $idxContactoPunto["valor"] . '|';
                                    }

                                    $strCadenaContactos = substr($strCadenaContactos, 0, strlen($strCadenaContactos)-1);

                                    //Se llena la tabla temporal con los puntos a notificar
                                    $objTmpNotifBackbone = new TmpNotifBackbone();
                                    $objTmpNotifBackbone->setCasoId($caso->getId());
                                    $objTmpNotifBackbone->setNumeroCaso($caso->getNumeroCaso());
                                    $objTmpNotifBackbone->setCadenaLogin($objInfoPunto->getLogin());
                                    $objTmpNotifBackbone->setCadenaCorreo($strCadenaContactos);
                                    $this->emSoporte->persist($objTmpNotifBackbone);
                                    $this->emSoporte->flush();

                                    $strCadenaContactos = "";
                                }
                            }

                            //**************Se consulta los alias del departamento de NOC******************//
                            $arrayParamCorreosNoc  = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                                     ->get('PARAMETROS PROYECTO NORIFICACIONES BACKBONE',
                                                                           '',
                                                                           '',
                                                                           'ALIAS_NOC_SEGUI_CASO',
                                                                           '',
                                                                           '',
                                                                           '',
                                                                           '');

                            foreach($arrayParamCorreosNoc as $idxParamCorreoNoc)
                            {
                                $arrayCorreosNoc = explode("|", $idxParamCorreoNoc["valor1"]);
                            }

                            foreach ($arrayCorreosNoc as $correoNoc)
                            {
                                $to[] = $correoNoc;
                            }
                            //**************Se consulta los alias del departamento de NOC******************//

                            //**************Se consulta los alias del departamento de L1 Y L2******************//
                             if($caso->getEmpresaCod() == '10')
                             {
                                 $arrayParamCorreosCliente  = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                                              ->get('PARAMETROS PROYECTO NOTIFICACIONES CASOS CLIENTE',
                                                                                    '',
                                                                                    '',
                                                                                    'ALIAS_SEGUI_CASO_CLIENTE',
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    $idEmpresa);

                                 foreach($arrayParamCorreosCliente as $idxParamCorreo)
                                 {
                                     $arrayCorreos = explode("|", $idxParamCorreo["valor1"]);
                                 }

                                 foreach ($arrayCorreos as $correos)
                                 {
                                     $to[] = $correos;
                                 }
                             }
                             //**************Se consulta los alias del departamento de L1 Y L2******************//

                            $arrayParametrosBack["intCasoId"] = $caso->getId();

                            //Se recorren los registros a notificar, se consulta la tabla temporal
                            $arrayContactosPunto = $this->emSoporte->getRepository("schemaBundle:InfoPunto")
                                                                     ->getNotifacionCasosBack($arrayParametrosBack);

                            //**********************************SE ENVIA LA NOTIFICACION***************************************
                            foreach($arrayContactosPunto as $idxContactosPunto)
                            {
                                $parametros['cliente'] = $idxContactosPunto["listadoLogines"];

                                $arrayContantos = explode("|", $idxContactosPunto["correo"]);

                                foreach ($arrayContantos as $correo)
                                {
                                    $to[] = $correo;
                                }

                                $this->envioPlantilla->generarEnvioPlantilla('Nuevo Seguimiento de Caso # '.$caso->getNumeroCaso(),
                                                                             $to,
                                                                             'CASOSEGUI_CLIE',
                                                                             $parametros,
                                                                             $idEmpresa,
                                                                             $canton,
                                                                             $departamento,
                                                                             null,
                                                                             false);
                            }
                            //**********************************SE ENVIA LA NOTIFICACION***************************************/
                        }
                    }
                

                if ($idCaso != 0)
                {
                    $intReferenciaIdAsignacion = $idCaso;
                    $intNumeroTareaParaAsig    =  $this->emComunicacion->getRepository('schemaBundle:InfoComunicacion')
                                                       ->getMinimaComunicacionPorDetalleId($idDetalle);
                }
                else
                {
                    $intReferenciaIdAsignacion = $intNumeroTarea;
                    $intNumeroTareaParaAsig    = $intNumeroTarea;
                }
                $arrayInfoAsignacionSolicitud = $this->emSoporte->getRepository('schemaBundle:InfoAsignacionSolicitud')
                                                                ->findBy(array('referenciaId'=>$intReferenciaIdAsignacion));
                $objInfoAsignacionSolicitud = $arrayInfoAsignacionSolicitud[0];

                if(is_object($objInfoAsignacionSolicitud) && 
                  (intval($strDepartamentoSession) !== intval($objInfoAsignacionSolicitud->getDepartamentoId())))
                {
                    $arrayAgente = $this->emComercial->getRepository("schemaBundle:InfoPersona")
                                                        ->getPersonaDepartamentoPorUserEmpresa($objInfoAsignacionSolicitud->getUsrAsignado(),
                                                                                               $objInfoAsignacionSolicitud->getEmpresaCod());
                    if (isset($arrayAgente))
                    {
                        $objAdmiCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                    ->findOneByDescripcionCaracteristica('SUBSCRIPCION_NOTIFICA_AGENTE');
                        if (is_object($objAdmiCaracteristica))
                        {
                            $arrayDatosNotificacion = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                        ->findBy(array(
                                                                            'personaEmpresaRolId'=> $arrayAgente['ID_PERSONA_EMPRESA_ROL'],
                                                                            'caracteristicaId'   => $objAdmiCaracteristica->getId()));
                            if (isset($arrayDatosNotificacion) && count($arrayDatosNotificacion)>0)
                            {
                                for($intIndPerCarac=0;$intIndPerCarac<count($arrayDatosNotificacion);$intIndPerCarac++)
                                {
                                    $objInfoPerCarac = $arrayDatosNotificacion[$intIndPerCarac];
                                    $arrayTokens[]   = $objInfoPerCarac->getValor();

                                }
                                $arrayParametrosNotif['arrayTokens']    = $arrayTokens;
                                $arrayParametrosNotif['strTitulo']      = 'Nuevo seguimiento';
                                $arrayParametrosNotif['strCuerpo']      = 'Se ha ingresado un nuevo seguimiento para la tarea #'.
                                                                          $intNumeroTareaParaAsig;

                                $this->enviaNotificacionPush($arrayParametrosNotif);
                            }
                        }
                    }
                }

                $status     = "OK";
                $mensaje    = "Se ingreso el seguimiento!";
            }
            else
            {
                $status     = "OK";
                $mensaje    = "cerrada";
            }
        }
        catch(\Exception $e)
        {
            if ($this->emComunicacion->getConnection()->isTransactionActive())
            {
                $this->emComunicacion->getConnection()->rollback();
            }

            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }

            $status             = "ERROR";
            $mensaje            = $e->getMessage();
            $respuestaFinal     = array('status' => $status, 'mensaje' => $mensaje, 'success' => false);
            return $respuestaFinal;
        }

        //*DECLARACION DE COMMITS*/
        if ($this->emComunicacion->getConnection()->isTransactionActive())
        {
            $this->emComunicacion->getConnection()->commit();
        }

        $this->emComunicacion->getConnection()->close();

        if ($this->emSoporte->getConnection()->isTransactionActive())
        {
            $this->emSoporte->getConnection()->commit();
        }

        //Se elimina los registros de la tabla temporal
        $this->emSoporte->getRepository("schemaBundle:InfoPunto")->eliminaRegistrosTemporales($arrayParametrosBack);

        $this->emSoporte->getConnection()->close();
        //*----------------------------------------------------------------------*/

        //*RESPUESTA-------------------------------------------------------------*/
        $respuestaFinal = array('status' => $status, 'mensaje' => $mensaje, 'success' => true);
        return $respuestaFinal;
        //*----------------------------------------------------------------------*/
    }

     /**
     * generarNumeroTareaPorDetalleId
     *
     * Función que genera un número de tarea por detalle id
     *
     * @param array $arrayParametros [objInfoDetalle    => objeto del detalle
     *                                strMensaje        => es un mensaje relacionado a la tarea que se está creando
     *                                strObservacion    => es una observación relacionada a la tarea que se está creando
     *                                strCodigoEmpresa  => código de la empresa que crea la tarea
     *                                strUser           => se envía el usuario de donde se ejecuta la opción
     *                                strIpCreacion     => ip del usuario que llama a la función ]
     *
     * @author Richard Cabrera  <rcabrera@telconet.ec>
     * @version 1.0 20-05-2019
     *
     * @return array $arrayRespuesta [ 'strMensaje'     => mensaje de exito/error
     *                                 'strStatus'      => OK/ERROR
     *                                 'intNumeroTarea' => número de la tarea ]
     */
    public function generarNumeroTareaPorDetalleId($arrayParametros)
    {
        $arrayRespuesta = array();
        $strMensaje     = "";
        $strStatus      = "";

        $this->emComunicacion->beginTransaction();

        try
        {
            $objClase = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")->findOneByNombreClaseDocumento("Notificacion");

            $objInfoDocumento = new InfoDocumento();
            $objInfoDocumento->setMensaje($arrayParametros["strMensaje"]);
            $objInfoDocumento->setClaseDocumentoId($objClase);
            $objInfoDocumento->setEstado('Activo');
            $objInfoDocumento->setNombreDocumento("Generacion de numero de tarea");
            $objInfoDocumento->setFeCreacion(new \DateTime('now'));
            $objInfoDocumento->setUsrCreacion($arrayParametros["strUser"]);
            $objInfoDocumento->setIpCreacion($arrayParametros['strIpCreacion']);
            $objInfoDocumento->setEmpresaCod($arrayParametros["strCodigoEmpresa"]);
            $this->emComunicacion->persist($objInfoDocumento);
            $this->emComunicacion->flush();

            $objInfoComunicacion = new InfoComunicacion();
            $objInfoComunicacion->setDetalleId($arrayParametros["objInfoDetalle"]->getId());
            $objInfoComunicacion->setFormaContactoId(5);
            $objInfoComunicacion->setClaseComunicacion("Enviado");
            $objInfoComunicacion->setFechaComunicacion(new \DateTime('now'));
            $objInfoComunicacion->setFeCreacion(new \DateTime('now'));
            $objInfoComunicacion->setEstado('Activo');
            $objInfoComunicacion->setUsrCreacion($arrayParametros["strUser"]);
            $objInfoComunicacion->setIpCreacion($arrayParametros['strIpCreacion']);
            $objInfoComunicacion->setEmpresaCod($arrayParametros["strCodigoEmpresa"]);
            $this->emComunicacion->persist($objInfoComunicacion);
            $this->emComunicacion->flush();

            $objInfoDocumentoComunicacion = new InfoDocumentoComunicacion();
            $objInfoDocumentoComunicacion->setComunicacionId($objInfoComunicacion);
            $objInfoDocumentoComunicacion->setDocumentoId($objInfoDocumento);
            $objInfoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
            $objInfoDocumentoComunicacion->setEstado('Activo');
            $objInfoDocumentoComunicacion->setUsrCreacion($arrayParametros["strUser"]);
            $objInfoDocumentoComunicacion->setIpCreacion($arrayParametros['strIpCreacion']);
            $this->emComunicacion->persist($objInfoDocumentoComunicacion);
            $this->emComunicacion->flush();

            $this->emComunicacion->commit();

            $strMensaje     = "Transacción realizada con éxito";
            $strStatus      = "OK";
            $intNumeroTarea = $objInfoComunicacion->getId();
        }
        catch(\Exception $e)
        {
            if($this->emComunicacion->isTransactionActive())
            {
                $this->emComunicacion->rollback();
            }

            $strMensaje     = "Se presento un error al momento de generar el número de la tarea, favor notificar a Sistemas";
            $strStatus      = "ERROR";
            $intNumeroTarea = 0;

            $this->serviceUtil->insertError('TELCOS+',
                                            'SoporteService->generarNumeroTareaPorDetalleId()',
                                            $e->getMessage(),
                                            $arrayParametros['strUser'],
                                            $arrayParametros['strIpCreacion']);

            $this->emComunicacion->close();
        }

        $arrayRespuesta["strMensaje"]     = $strMensaje;
        $arrayRespuesta["strStatus"]      = $strStatus;
        $arrayRespuesta["intNumeroTarea"] = $intNumeroTarea;

        return $arrayRespuesta;
    }


     /**
     * ingresaHistorialYSeguimientoPorTarea - Funcion que ingresa el seguimiento y el historial de la tarea
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 25-08-2017
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 20-03-2018 - Validacion e inicializacion de variables para evitar generacion de logs innecesarios
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 09-05-2019 - Se agrega el parámetro *boolHisSeg* que sirve para agregar seguimiento
     *                           y insertar el historial en una sola llamada.
     * 
     * @author Jose Bedon <jobedon@telconet.ec>
     * @version 1.3 15-01-2021 - Se agrega idTarea para control y seguimiendo del historico de la tarea
     *                           principal
     * 
     * @author Jose Bedon <jobedon@telconet.ec>
     * @version 1.4 10-05-2021 - Se agrega campo de solucion en caso de venir marcado en al finalización
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.4 10-05-2021 - Se agrega valor en parametro de entrada para poder validar si es creacion de tarea syscloud 
     *                           y poder registrar el departamento origen en tabla de historial
     *
     * @param array $arrayParametros [ strOpcion                opción que indica si se inserta un seguimiento o un historial de tarea
     *                                 strFeCreacion            fecha de creacion del registro
     *                                 intDetalleId             id detalle de la tarea
     *                                 strObservacion           observacion a ingresar
     *                                 intAsignadoId            id del asignado
     *                                 strMotivo                motivo del historial de la tarea
     *                                 strCodEmpresa            codigo de la empresa
     *                                 strUsrCreacion           usuario de creacion
     *                                 strEstadoActual          estado actual de la tarea
     *                                 strSeguimientoInterno    se registra si es un seguimiento interno
     *                                 intIdDepartamentoOrigen  departamento origen que creo el registro
     *                                 strIpCreacion            ip de creacion del registro
     *                                 strAccion                accion a realizar
     *                                 strEnviaDepartamento     parametro que indica si se envia o no el departamento origen 
     *                                 intTareaId               parametro del idTarea actual]
     *
     * @return array $arrayRespuesta [ objInfoDetalleHistorial  entidad de la tabla INFO_DETALLE_HISTORIAL
     *                                 objInfoTareaSeguimiento  entidad de la tabla INFO_TAREA_SEGUIMIENTO ]
     *
     */
    public function ingresaHistorialYSeguimientoPorTarea($arrayParametros)
    {
        $arrayRespuesta = array();
        $strMensajeError            = "Ocurrio un error en ingresaHistorialYSeguimientoPorTarea: ";
        $strOpcion                  = isset($arrayParametros["strOpcion"]) ? $arrayParametros["strOpcion"] : "";
        $strEnviaDepartamento       = isset($arrayParametros["strEnviaDepartamento"]) ? $arrayParametros["strEnviaDepartamento"] : "";
        $strFeCreacion              = isset($arrayParametros["strFeCreacion"]) ? $arrayParametros["strFeCreacion"] : "";
        $intDetalleId               = $arrayParametros["intDetalleId"];
        $strObservacion             = isset($arrayParametros["strObservacion"]) ? $arrayParametros["strObservacion"] : "";
        $intAsignadoId              = isset($arrayParametros["intAsignadoId"]) ? $arrayParametros["intAsignadoId"] : "";
        $strMotivo                  = isset($arrayParametros["strMotivo"]) ? $arrayParametros["strMotivo"] : "";
        $strAccion                  = $arrayParametros["strAccion"];
        $strCodEmpresa              = isset($arrayParametros["strCodEmpresa"]) ? $arrayParametros["strCodEmpresa"] : "";
        $strUsrCreacion             = isset($arrayParametros["strUsrCreacion"]) ? $arrayParametros["strUsrCreacion"] : "";
        $strEstadoActual            = $arrayParametros["strEstadoActual"];
        $strSeguimientoInterno      = isset($arrayParametros["strSeguimientoInterno"]) ? $arrayParametros["strSeguimientoInterno"] : "N";
        $intIdDepartamentoOrigen    = isset($arrayParametros["intIdDepartamentoOrigen"]) ? $arrayParametros["intIdDepartamentoOrigen"] : "";
        $strIpCreacion              = $arrayParametros["strIpCreacion"] ? $arrayParametros["strIpCreacion"] : "";
        $intTareaId                 = isset($arrayParametros["intTareaId"]) ? $arrayParametros["intTareaId"] : "";
        $strMotivoFinTarea          = isset($arrayParametros["strMotivoFinTarea"]) ? $arrayParametros["strMotivoFinTarea"] : "";
        $intIdMotivo                = isset($arrayParametros["intIdMotivo"]) ? $arrayParametros["intIdMotivo"] : "";
        $strEsSolucion              = isset($arrayParametros["esSolucion"]) ? $arrayParametros["esSolucion"] : "N";
        $strCodEmpresaUser          = isset($arrayParametros["strCodEmpresaUser"]) && !empty($arrayParametros["strCodEmpresaUser"])
                                      ? $arrayParametros["strCodEmpresaUser"] : $strCodEmpresa;
        $strCreaTareaSys            = isset($arrayParametros["strCreaTareaSys"]) ? $arrayParametros["strCreaTareaSys"] : "N";
        $intIdPersonaEmpresaRol     = "";
        $objInfoDetalleHistorial    = null;
        $objInfoTareaSeguimiento    = null;
        $boolHisSeg                 = $arrayParametros['boolHisSeg'];

        if($strCreaTareaSys == "S")
        {
            $strEnviaDepartamento = isset($arrayParametros["strEnviaDepartamento"]) ? $arrayParametros["strEnviaDepartamento"] : "N";
        }

        if(empty($arrayParametros["strEstadoActual"]) || empty($arrayParametros["intDetalleId"]))
        {
            throw new \Exception($strMensajeError."Campo ESTADO y ID_DETALLE son obligatorios");
        }

        //Se obtiene el asignado actual de la tarea
        $objUltimaAsignacion = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')->getUltimaAsignacion($intDetalleId);

        //Se obtiene el departamento origen, cuando no sea enviado
        if($strEnviaDepartamento == "N")
        {
            if(empty($arrayParametros["strCodEmpresa"]) || empty($arrayParametros["strUsrCreacion"]))
            {
                throw new \Exception($strMensajeError."Campo COD_EMPRESA y USR_CREACION son obligatorios");
            }

            $objInfoPersona = $this->emSoporte->getRepository('schemaBundle:InfoPersona')->findOneBy(array('login' => $strUsrCreacion));

            if(is_object($objInfoPersona))
            {
                $arrayDepartamento = $this->emSoporte->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                     ->getDepartamentoPersonaLogueada($objInfoPersona->getId(),$strCodEmpresaUser);
                if(empty($arrayDepartamento))
                {
                    throw new \Exception($strMensajeError."DEPARTAMENTO_ORIGEN no encontrado");
                }
                else
                {
                    $intIdDepartamentoOrigen = $arrayDepartamento[0]["departamento"];
                }
            }
            else
            {
                throw new \Exception($strMensajeError."USR_CREACION no encontrado");
            }
        }

        if($strOpcion == "Seguimiento" || $boolHisSeg)
        {
            $objInfoTareaSeguimiento = new InfoTareaSeguimiento();
            $objInfoTareaSeguimiento->setDetalleId($intDetalleId);
            $objInfoTareaSeguimiento->setObservacion($strObservacion);
            $objInfoTareaSeguimiento->setEmpresaCod($strCodEmpresa);
            $objInfoTareaSeguimiento->setUsrCreacion($strUsrCreacion);
            $objInfoTareaSeguimiento->setEstadoTarea($strEstadoActual);
            $objInfoTareaSeguimiento->setFeCreacion(new \DateTime('now'));
            $objInfoTareaSeguimiento->setInterno($strSeguimientoInterno);
            $objInfoTareaSeguimiento->setDepartamentoId($intIdDepartamentoOrigen);
            if(is_object($objUltimaAsignacion))
            {
                $objInfoTareaSeguimiento->setPersonaEmpresaRolId($objUltimaAsignacion->getPersonaEmpresaRolId());
            }
            $this->emSoporte->persist($objInfoTareaSeguimiento);
            $this->emSoporte->flush();
        }

        if($strOpcion == "Historial" || $boolHisSeg)
        {

            if(empty($arrayParametros["strAccion"]))
            {
                throw new \Exception($strMensajeError."Campo ACCION es obligatorio");
            }

            $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->find($intDetalleId);
            $objInfoDetalleHistorial = new InfoDetalleHistorial();
            $objInfoDetalleHistorial->setDetalleId($objInfoDetalle);
            $objInfoDetalleHistorial->setObservacion($strObservacion);
            $objInfoDetalleHistorial->setUsrCreacion($strUsrCreacion);
            $objInfoDetalleHistorial->setAsignadoId($intAsignadoId);
            $objInfoDetalleHistorial->setAccion($strAccion);
            $objInfoDetalleHistorial->setDepartamentoOrigenId($intIdDepartamentoOrigen);
            if($strMotivo != "")
            {
                $objInfoDetalleHistorial->setMotivo($strMotivo);
            }
            $objInfoDetalleHistorial->setEstado($strEstadoActual);
            $objInfoDetalleHistorial->setFeCreacion(new \DateTime('now'));
            $objInfoDetalleHistorial->setIpCreacion($strIpCreacion);
            if(is_object($objUltimaAsignacion))
            { 
                $intIdPersonaEmpresaRol = $objUltimaAsignacion->getPersonaEmpresaRolId();
                if(isset($intIdPersonaEmpresaRol) && !empty($intIdPersonaEmpresaRol)){
                    $objInfoDetalleHistorial->setPersonaEmpresaRolId($intIdPersonaEmpresaRol);
                    $objInfoPersonaEmpresaRol = $this->emSoporte->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                ->find($intIdPersonaEmpresaRol);

                    if(is_object($objInfoPersonaEmpresaRol))
                    {
                        $objInfoDetalleHistorial->setDepartamentoDestinoId($objInfoPersonaEmpresaRol->getDepartamentoId());
                    }
                }
                
            }
            if ($strAccion == 'Reasignada' || $strAccion == 'Finalizada') 
            {
                $objAdmiTarea = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')
                                                                ->find($intTareaId);
                if (is_object($objAdmiTarea))
                {
                    $objInfoDetalleHistorial->setTareaId($objAdmiTarea);
                }
                $objInfoDetalleHistorial->setMotivoFinTarea($strMotivoFinTarea);
                $objAdmiMotivo = $this->emGeneral->getRepository('schemaBundle:AdmiMotivo')
                                                                ->find($intIdMotivo);
                if (is_object($objAdmiMotivo))
                {
                    $objInfoDetalleHistorial->setMotivoId($objAdmiMotivo->getId());
                }
                $objInfoDetalleHistorial->setEsSolucion($strEsSolucion);

            }
            $this->emSoporte->persist($objInfoDetalleHistorial);
            $this->emSoporte->flush();
        }

        $arrayRespuesta["objInfoDetalleHistorial"] = $objInfoDetalleHistorial;
        $arrayRespuesta["objInfoTareaSeguimiento"] = $objInfoTareaSeguimiento;

        return $arrayRespuesta;
    }

    /**
     * ingresarTareaInterna - Funcion que sirve para crear una tarea interna
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 12-02-2016
     *
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 23-06-2016 Se guarda el estado de la tarea en la creación del seguimiento al crear una tarea interna.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 08-07-2016 Se valida que si ingresan caracteres de apertura y cierre de tags en la observacion, se eliminan
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 17-11-2016 - Todas las tareas, excepto las tareas que se crean de manera automática, luego de crearse deben pasar a estado
     *                           Asignada y no a estado Aceptada, por ende se cambia el estado de las Tareas a Asignada y se modifica la
     *                           respectiva observación del seguimiento de dicha tarea
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.4 31-01-2017   Se agregan validaciones para reutilizar método de creación de tareas internas en
     *                           proceso de cancelación de servicios mediante proceso masivo
     * @since 1.3
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.5 09-08-2017 -  En la tabla INFO_TAREA_SEGUIMIENTO y INFO_DETALLE_HISTORIAL, se regulariza el departamento creador de la accion y
     *                            se adicionan los campos de persona empresa rol id para identificar el responsable actual
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.6 26-12-2017 - En el asunto y cuerpo del correo se agrega el nombre del proceso al que pertenece la tarea asignada
     *
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 04-05-2018 - Se modifica la función para crear tarea y notificación para las IPs Small Business
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.7 10-05-2018 - Se realizan ajustes para setear por default la empresa TN como ejecutante del metodo
     *
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.8 09-05-2018 - Se agrega el envío del parámetro arrayDestinatarios con los destinatarios de la notificación 
     *                           con la tarea que se creará
     *
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.9 05-07-2018 - Se agrega parámetro para verificar si se valida o no el reemplazo de caracteres html 
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.9 27-06-2018 - Se agrega parametro al metodo: getResultadoJefeDepartamentoEmpresa
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 2.0 25-10-2018 - Se agrega una nueva validación cuando el origen es WS para considerar el login del Cliente.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.1 07-02-2019 - Se agrega funcionalidad para poder asignar la tarea por ciudad/región
     *
     * @author Modificado: Andrés Montero <amontero@telconet.ec>
     * @version 2.2 01-08-2019 - Se agrega parámetro de empresa origen para obtener datos del usuario que crea la tarea
     * 
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 2.3 07-10-2019 Se registra el id del punto en el campo infoComunicacion.remitenteId y 
     *                         el nombre del punto en infoComunicacion.remitenteNombre
     *                         para que la tarea se muestre en el listado de actividades de Telcos
     * 
     * @author Macjhony Vargas <mmvargas@telconet.ec>
     * @version 2.4 28-10-2019 Se le agrega el idDetalle al response, para facilitar acciones a los usuarios a la hora de
     *                         ingresarSeguimiento tareas y finalizar tareas.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 2.5 18-02-2020 - Se obtiene directamente el nombre del departamento de la base, para evitar el envío incorrecto
     *                           del nombre por parámetro.
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 2.6 07-07-2020 - Se quita el filtro de origen al agregar el remitente en la info comunicación.
     *
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 2.7 08-07-2020 - Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     * 
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 2.8 19-01-2021 - Se agrega el llamado al proceso que crea la tarea en el sistema de Sys Cloud-Center.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 2.9 22-02-2021 - Se registra el afectado en la Info_Parte_Afectada.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.0 27-04-2021 - Se valida si se recibe el punto id por WEB-TN para ingresar la Info_Parte_Afectada.
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 3.1 20-07-2021 - Se graba en la tabla Info_tarea cuando es producto SECURE CPE.
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 3.2 04-02-2022 - Se agrega parametro $boolEsIPSB para ingresar registros en tabla info_tarea.
     * 
     * @author Leonardo Mero  <lemero@telconet.ec>
     * @version 3.3 16-02-2023 - Se agrega $boolCrearInfoTarea para ingresar la tarea al esquema Info_Tarea
     *
     * @param  array $arrayParametros [ strIdEmpresa           Cadena de caracteres que indica el identificador de la empresa
     *                                  strPrefijoEmpresa      Cadena de caracteres que indica el prefijo de la empresa
     *                                  strNombreTarea         Cadena de caracteres que indica el nombre de la tarea
     *                                  strObservacion         Cadena de caracteres que indica la observacion a registrar
     *                                  strNombreDepartamento  Cadena de caracteres que indica el nombre del departamento
     *                                  strCiudad              Cadena de caracteres que indica el nombre de la ciudad
     *                                  strEmpleado            Cadena de caracteres que indica el nombre el empleado
     *                                  strUsrCreacion         Cadena de caracteres que indica el usuario de creación
     *                                  strIp                  Cadena de caracteres que indica la ip de creación
     *                                  strOrigen              Cadena de caracteres que indica el origen del consumo del método ["WS","WEB-TN"]
     *                                  strLogin               Cadena de caracteres que indica el login a afectado
     *                                  intPuntoId             Identificador del punto afectado
     *                                  strNombreCliente       Cadena de caracteres que indica el nombre del cliente
     *                                  strCodEmpresaOrig      Cadena de caracteres que indica el identificador de la empresa origen
     *                                  boolEsIPSB             Variable que identifica si el nombre tecnico es IPSB
     *                                ]
     *
     * @return array $arrayRespuestaFinal
     */
    public function ingresarTareaInterna($arrayParametros)
    {
        $strIdEmpresa               = $arrayParametros['strIdEmpresa'];
        $strPrefijoEmpresa          = $arrayParametros['strPrefijoEmpresa'];
        $strNombreTarea             = $arrayParametros['strNombreTarea'];
        $strObservacion             = $arrayParametros['strObservacion'];
        $strValidacionTags          = $arrayParametros['strValidacionTags'] ? $arrayParametros['strValidacionTags'] : "SI";
        $strNombreDepartamento      = $arrayParametros['strNombreDepartamento'];
        $strCiudad                  = $arrayParametros['strCiudad'];
        $strEmpleado                = $arrayParametros['strEmpleado'];
        $strUsrCreacion             = $arrayParametros['strUsrCreacion'];
        $strIp                      = $arrayParametros['strIp'];
        $strOrigen                  = $arrayParametros['strOrigen'];
        $strLogin                   = $arrayParametros['strLogin'];
        $intPuntoId                 = $arrayParametros['intPuntoId'];
        $strNombreCliente           = $arrayParametros['strNombreCliente'];
        $arrayJefeResponsable       = $arrayParametros['arrayJefeResponsable'];
        $objDetalleSolicitud        = $arrayParametros['objDetalleSolicitud'];
        $arrayDestinatarios         = $arrayParametros['arrayDestinatarios'];
        $strOrigenComunicacion      = $arrayParametros['strOrigenComunicacion'];
        $strClase                   = $arrayParametros['strClase'];
        $boolEsIPSB                 = (isset($arrayParametros["boolEsIPSB"]) && 
                                       !empty($arrayParametros['boolEsIPSB']) ? true : false );
        $strIdEmpresaUser           = isset($arrayParametros['strIdEmpresaUser']) && !empty($arrayParametros['strIdEmpresaUser'])
                                      ? $arrayParametros['strIdEmpresaUser'] : '';
        $boolParametroNombreTecnico = $arrayParametros['boolParametroNombreTecnico'];
        $strStatus                  = "ERROR";
        $strMensaje                 = "No se pudo crear la tarea!";
        $strNumeroTarea             = "";
        $intIdDetalle               = "";
        $intDepartamentoId          = "";
        $parametroTarea             = "";
        $strNombreDepartamentoParam = "";
        $strNombreTareaParam        = "";
        $arrayTo                    = array();
        $arrayParametrosHist        = array();
        $strNombreProceso           = "";
        $strCodEmpresaOrigen        = (isset($arrayParametros['strCodEmpresaOrig']) 
                                       && $arrayParametros['strCodEmpresaOrig']!="") ? $arrayParametros['strCodEmpresaOrig'] : "10";
        $strRegion                  = isset($arrayParametros['strRegion']) ? $arrayParametros['strRegion'] : '';

        $arrayParametrosHist["strCodEmpresa"]           = $strCodEmpresaOrigen;
        $arrayParametrosHist["strUsrCreacion"]          = $strUsrCreacion;
        $arrayParametrosHist["strIpCreacion"]           = $strIp;
        $arrayParametrosHist["strOpcion"]               = "Historial";
        $arrayParametrosHist["strEnviaDepartamento"]    = "N";
        $boolCrearInfoTarea              = (isset($arrayParametros["boolCrearInfoTarea"]) && 
                                       !empty($arrayParametros['boolCrearInfoTarea']) ? true : false );

        if ($strOrigen == "WS")
        {
            //Inicio de Transacciones
            $this->emComunicacion->getConnection()->beginTransaction();
            $this->emSoporte->getConnection()->beginTransaction();
            $this->emGeneral->getConnection()->beginTransaction();
            $this->emComercial->getConnection()->beginTransaction();
        }

        try
        {
            if($strValidacionTags === "SI")
            {
                $strObservacion  = $this->eliminarSimbolosDeTags($strObservacion);
            }
            $objEmpresaGrupo = $this->emComercial->getRepository("schemaBundle:InfoEmpresaGrupo")
                                                 ->findOneBy(array('id'         => $strIdEmpresa,
                                                                   'prefijo'    => $strPrefijoEmpresa,
                                                                   'estado'     => 'Activo'));
            if($objEmpresaGrupo)
            {
                if ($strOrigen == "WS")
                {
                    //Se busca los departamentos mapeados del LDAP vs los de NAF
                    $parametroDepartamento = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                             ->getOne('WEB SERVICE TAREAS',
                                                                      'SOPORTE',
                                                                      'TAREAS',
                                                                      $strNombreDepartamento,
                                                                      $strIdEmpresa,
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      '');

                    $strNombreDepartamentoParam = $parametroDepartamento["valor2"];
                }
                else if ($strOrigen == "WEB-TN")
                {
                    $strNombreDepartamentoParam = $strNombreDepartamento;
                }

                $objDepartamento = $this->emGeneral->getRepository("schemaBundle:AdmiDepartamento")
                                                   ->findOneBy(array('nombreDepartamento' => $strNombreDepartamentoParam,
                                                                     'empresaCod'         => $strIdEmpresa,
                                                                     'estado'             => 'Activo'));

                if($objDepartamento)
                {
                    $intDepartamentoId     = $objDepartamento->getId();
                    $strNombreDepartamento = $objDepartamento->getNombreDepartamento();

                    if ($strOrigen == "WS")
                    {
                        $parametroTarea = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                          ->getOne('WEB SERVICE TAREAS',
                                                                   'SOPORTE',
                                                                   'TAREAS',
                                                                   'Tarea de app de Cert',
                                                                   $strNombreTarea,
                                                                   '',
                                                                   '',
                                                                   '',
                                                                   '',
                                                                   '');
                        $strNombreTareaParam = $parametroTarea["valor2"];
                    }
                    else if ($strOrigen == "WEB-TN")
                    {
                        $strNombreTareaParam = $strNombreTarea;
                    }

                    $objTarea = $this->emSoporte->getRepository("schemaBundle:AdmiTarea")
                                                ->findOneBy(array('nombreTarea' => $strNombreTareaParam,'estado' => 'Activo'));

                    if($objTarea)
                    {
                        $infoDetalle = new InfoDetalle();
                        $infoDetalle->setTareaId($objTarea);
                        if(is_object($objDetalleSolicitud))
                        {
                            $infoDetalle->setDetalleSolicitudId($objDetalleSolicitud->getId());
                        }
                        $infoDetalle->setObservacion($strObservacion);
                        $infoDetalle->setPesoPresupuestado(0);
                        $infoDetalle->setValorPresupuestado(0);
                        $infoDetalle->setFeSolicitada(new \DateTime('now'));
                        $infoDetalle->setFeCreacion(new \DateTime('now'));
                        $infoDetalle->setUsrCreacion($strUsrCreacion);
                        $infoDetalle->setIpCreacion($strIp);
                        $this->emSoporte->persist($infoDetalle);
                        $this->emSoporte->flush();

                        if ($strOrigen == "WEB-TN" && !empty($intPuntoId) && !empty($strLogin))
                        {
                            $objInfoCriterioAfectado = new InfoCriterioAfectado();
                            $objInfoCriterioAfectado->setId("1");
                            $objInfoCriterioAfectado->setDetalleId($infoDetalle);
                            $objInfoCriterioAfectado->setCriterio("Clientes");
                            $objInfoCriterioAfectado->setOpcion("Cliente: " . $strNombreCliente . " | OPCION: Punto Cliente");
                            $objInfoCriterioAfectado->setFeCreacion(new \DateTime('now'));
                            $objInfoCriterioAfectado->setUsrCreacion($strUsrCreacion);
                            $objInfoCriterioAfectado->setIpCreacion($strIp);
                            $this->emSoporte->persist($objInfoCriterioAfectado);
                            $this->emSoporte->flush();

                            $objParteAfectada = new InfoParteAfectada();
                            $objParteAfectada->setTipoAfectado ("Cliente");
                            $objParteAfectada->setDetalleId($infoDetalle->getId());
                            $objParteAfectada->setCriterioAfectadoId($objInfoCriterioAfectado->getId());
                            $objParteAfectada->setAfectadoId($intPuntoId);
                            $objParteAfectada->setFeIniIncidencia(new \DateTime('now'));
                            $objParteAfectada->setAfectadoNombre($strLogin);
                            $objParteAfectada->setAfectadoDescripcion($strNombreCliente);
                            $objParteAfectada->setFeCreacion(new \DateTime('now'));
                            $objParteAfectada->setUsrCreacion($strUsrCreacion);
                            $objParteAfectada->setIpCreacion($strUsrCreacion);
                            $this->emSoporte->persist($objParteAfectada);
                            $this->emSoporte->flush();
                        }

                        //Se obtiene la región acorde a la ciudad enviada por el WS
                        if($strOrigen == "WS" && !empty($strCiudad))
                        {
                            $objAdmiCanton = $this->emGeneral->getRepository("schemaBundle:AdmiCanton")
                                                             ->findOneBy(array('nombreCanton' => $strCiudad,
                                                                               'estado'       => 'Activo'));
                            if(is_object($objAdmiCanton))
                            {
                                $strRegion = $objAdmiCanton->getRegion();
                            }
                        }

                        $entityDetalleAsignacion = new InfoDetalleAsignacion();
                        $entityDetalleAsignacion->setDetalleId($infoDetalle);
                        $entityDetalleAsignacion->setMotivo($strObservacion);
                        $entityDetalleAsignacion->setAsignadoNombre($strNombreDepartamento);
                        $entityDetalleAsignacion->setAsignadoId($intDepartamentoId);
                        
                        if(!empty($arrayJefeResponsable))
                        {
                            $arrayEmpleadoJefe                          = $arrayJefeResponsable;
                            $arrayEmpleadoJefe["personaEmpresaRolId"]   = $arrayJefeResponsable["idPersonaEmpresaRol"];
                        }
                        else
                        {
                            $arrayEmpleadoJefe = $this->emComercial->getRepository("schemaBundle:InfoPersonaEmpresaRol")
                                                                   ->getResultadoJefeDepartamentoEmpresa($intDepartamentoId,
                                                                                                         $strIdEmpresa,
                                                                                                         $strRegion);

                            if(empty($arrayEmpleadoJefe))
                            {
                                $arrayEmpleadoJefe = $this->emComercial->getRepository("schemaBundle:InfoPersonaEmpresaRol")
                                                                       ->getResultadoJefeDepartamentoEmpresa($intDepartamentoId,
                                                                                                             $strIdEmpresa,
                                                                                                             "");
                            }
                        }
                        $entityDetalleAsignacion->setRefAsignadoId($arrayEmpleadoJefe["idPersona"]);
                        $entityDetalleAsignacion->setRefAsignadoNombre($arrayEmpleadoJefe["nombreCompleto"]);
                        $entityDetalleAsignacion->setPersonaEmpresaRolId($arrayEmpleadoJefe["personaEmpresaRolId"]);
                        $entityDetalleAsignacion->setTipoAsignado("EMPLEADO");
                        $entityDetalleAsignacion->setIpCreacion($strIp);
                        $entityDetalleAsignacion->setFeCreacion(new \DateTime('now'));
                        $entityDetalleAsignacion->setUsrCreacion($strUsrCreacion);
                        $this->emSoporte->persist($entityDetalleAsignacion);
                        $this->emSoporte->flush();

                        //Se ingresa el historial de la tarea
                        if(is_object($infoDetalle))
                        {
                            $arrayParametrosHist["intDetalleId"] = $infoDetalle->getId();
                        }
                        $arrayParametrosHist["strObservacion"]  = "Tarea Asignada";
                        $arrayParametrosHist["strEstadoActual"] = "Asignada";
                        $arrayParametrosHist["strAccion"]       = "Asignada";
                        $arrayParametrosHist["strCodEmpresaUser"] = $strIdEmpresaUser;

                        $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

                        //Se ingresa el seguimiento de la tarea
                        $arrayParametrosHist["strObservacion"] = "Tarea fue Asignada a ".$strNombreDepartamento;
                        $arrayParametrosHist["strOpcion"]      = "Seguimiento";

                        $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);
                        //************************************************************************************
                        //************************ ENVIO MAILS Y COMUNICACION ********************************
                        //************************************************************************************

                        
                        if(!empty($strOrigenComunicacion))
                        {
                            $intIdClase = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                                                          ->findOneBy(array('nombreClaseDocumento' => 'Registro Interno'));
                        }
                        else
                        {
                            $intIdClase = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                                                          ->findOneBy(array('nombreClaseDocumento' => 'REQUERIMIENTO INTERNO'));
                        }
                        
                        $infoDocumento = new InfoDocumento();
                        $infoDocumento->setMensaje($strObservacion);
                        $infoDocumento->setNombreDocumento("Registro de tarea");
                        $infoDocumento->setClaseDocumentoId($intIdClase);
                        $infoDocumento->setFeCreacion(new \DateTime('now'));
                        $infoDocumento->setEstado("Activo");
                        $infoDocumento->setUsrCreacion($strUsrCreacion);
                        $infoDocumento->setIpCreacion($strIp);
                        $infoDocumento->setEmpresaCod($strIdEmpresa);
                        $this->emComunicacion->persist($infoDocumento);
                        $this->emComunicacion->flush();

                        
                        if(!empty($strOrigenComunicacion))
                        {
                            $entityFormaContacto = $this->emComercial->getRepository("schemaBundle:AdmiFormaContacto")
                                                           ->findOneBy(array('descripcionFormaContacto' => $strOrigenComunicacion,
                                                                             'estado'                   => 'Activo'));
                        }  
                        else
                        {
                         
                            $entityFormaContacto = $this->emComercial->getRepository("schemaBundle:AdmiFormaContacto")
                                                           ->findOneBy(array('descripcionFormaContacto' => 'Correo Electronico',
                                                                             'estado'                   => 'Activo'));
                            
                            
                        }
                          
                        
                        
                        $infoComunicacion = new InfoComunicacion();

                        if($entityFormaContacto)
                        {
                            $infoComunicacion->setFormaContactoId($entityFormaContacto->getId());
                        }

                        $infoComunicacion->setClaseComunicacion("Recibido");
                        $infoComunicacion->setDetalleId($infoDetalle->getId());
                        $infoComunicacion->setFechaComunicacion(new \DateTime('now'));
                        $infoComunicacion->setEstado("Activo");
                        $infoComunicacion->setFeCreacion(new \DateTime('now'));
                        $infoComunicacion->setUsrCreacion($strUsrCreacion);
                        $infoComunicacion->setIpCreacion($strIp);
                        $infoComunicacion->setEmpresaCod($strIdEmpresa);

                        if (!empty($strLogin))
                        {
                            $objInfoPuntoWS = $this->emComercial->getRepository('schemaBundle:InfoPunto')
                                ->findOneBy(array('login'  => $strLogin,
                                                  'estado' => array('Activo','Pendiente')));

                            
                            if (is_object($objInfoPuntoWS))
                            {
                                $infoComunicacion->setRemitenteId($objInfoPuntoWS->getId());
                                $infoComunicacion->setRemitenteNombre($objInfoPuntoWS->getLogin());
                                $infoComunicacion->setPuntoId($objInfoPuntoWS->getId());

                                if ($strOrigen != "WEB-TN")
                                {
                                    $strOpcion = 'Cliente: ' . $objInfoPuntoWS->getNombrePunto() . ' | OPCION: Punto Cliente';
                                    $objInfoCriterioAfectado = new InfoCriterioAfectado();
                                    $objInfoCriterioAfectado->setId(1);
                                    $objInfoCriterioAfectado->setDetalleId($infoDetalle);
                                    $objInfoCriterioAfectado->setCriterio("Clientes");
                                    $objInfoCriterioAfectado->setOpcion($strOpcion);
                                    $objInfoCriterioAfectado->setFeCreacion(new \DateTime('now'));
                                    $objInfoCriterioAfectado->setUsrCreacion($strUsrCreacion);
                                    $objInfoCriterioAfectado->setIpCreacion($strIp);
                                    $this->emSoporte->persist($objInfoCriterioAfectado);
                                    $this->emSoporte->flush();

                                    $objInfoParteAfectada = new InfoParteAfectada();
                                    $objInfoParteAfectada->setCriterioAfectadoId($objInfoCriterioAfectado->getId());
                                    $objInfoParteAfectada->setDetalleId($infoDetalle->getId());
                                    $objInfoParteAfectada->setFeIniIncidencia($infoDetalle->getFeCreacion());
                                    $objInfoParteAfectada->setTipoAfectado("Cliente");
                                    $objInfoParteAfectada->setAfectadoId($objInfoPuntoWS->getId());
                                    $objInfoParteAfectada->setAfectadoNombre($objInfoPuntoWS->getLogin());
                                    $objInfoParteAfectada->setAfectadoDescripcion($objInfoPuntoWS->getNombrePunto());
                                    $objInfoParteAfectada->setFeCreacion(new \DateTime('now'));
                                    $objInfoParteAfectada->setUsrCreacion($strUsrCreacion);
                                    $objInfoParteAfectada->setIpCreacion($strIp);
                                    $this->emSoporte->persist($objInfoParteAfectada);
                                    $this->emSoporte->flush();
                                }
                            }
                        }

                        $this->emComunicacion->persist($infoComunicacion);
                        $this->emComunicacion->flush();


                        $infoDocumentoComunicacion = new InfoDocumentoComunicacion();
                        $infoDocumentoComunicacion->setComunicacionId($infoComunicacion);
                        $infoDocumentoComunicacion->setDocumentoId($infoDocumento);
                        $infoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
                        $infoDocumentoComunicacion->setEstado('Activo');
                        $infoDocumentoComunicacion->setUsrCreacion($strUsrCreacion);
                        $infoDocumentoComunicacion->setIpCreacion($strIp);
                        $this->emComunicacion->persist($infoDocumentoComunicacion);
                        $this->emComunicacion->flush();

                        if ($strOrigen == "WS")
                        {
                            $arrayDetalle = $this->emGeneral
                                                 ->getRepository('schemaBundle:AdmiParametroDet')
                                                 ->getOne('WEB SERVICE TAREAS','SOPORTE','TAREAS','Id_Departamento_Cert','','','','','','');

                            //se obtiene el correo de Cert
                            $correo    = $this->emComunicacion
                                              ->getRepository("schemaBundle:AdmiAlias")
                                              ->findOneBy(array('departamentoId' => $arrayDetalle["valor1"],
                                                                'estado'         => 'Activo'));
                            $arrayTo[] = $correo->getValor();
                        }

                        if(isset($arrayDestinatarios) && !empty($arrayDestinatarios))
                        {
                            $arrayTo = $arrayDestinatarios;
                        }

                        if(isset($arrayJefeResponsable["idCanton"]) && !empty($arrayJefeResponsable["idCanton"]))
                        {
                            $cantonId = $arrayJefeResponsable["idCanton"];
                        }
                        else
                        {
                            $cantonId = "";
                            $canton   = $this->emGeneral->getRepository("schemaBundle:AdmiCanton")
                                                        ->findOneBy(array('nombreCanton' => $strCiudad,
                                                                          'estado'       => 'Activo'));

                            if($canton && $strOrigen == "WS")
                            {
                                $cantonId = $canton->getId();
                            }
                        }
                        if(is_object($objTarea))
                        {
                            $strNombreProceso = $objTarea->getProcesoId()->getNombreProceso();
                        }

                        $strAsunto = "Asignacion de Tarea | PROCESO: ".$strNombreProceso;

                        $parametros = array('detalle'               => $infoDetalle,
                                            'numeroTarea'           => $infoComunicacion->getId(),
                                            'nombreProceso'         => $strNombreProceso,
                                            'nombreTarea'           => $strNombreTareaParam,
                                            'nombreDepartamento'    => $strNombreDepartamento." - ".$arrayEmpleadoJefe["nombreCompleto"],
                                            'observacion'           => $strObservacion,
                                            'empleadoLogeado'       => $strUsrCreacion." - ".$strEmpleado,
                                            'empresa'               => $strPrefijoEmpresa,
                                            'loginProcesado'        => $strLogin);

                        /* === Proceso para crear la tarea en el sistema de DC - Sys Cloud Center. === */
                        $arrayEstadoPersona = array('Activo','Modificado');
                        $arrayDatosAsigna   = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                ->getInfoDatosPersona(array('strRol'                     => 'Empleado',
                                                            'strCodEmpresa'              =>  $strCodEmpresaOrigen,
                                                            'strLogin'                   =>  $strUsrCreacion,
                                                            'strEstadoPersona'           =>  $arrayEstadoPersona,
                                                            'strEstadoPersonaEmpresaRol' => 'Activo'));

                        if (empty($arrayDatosAsigna) || $arrayDatosAsigna['status'] !== 'ok')
                        {
                            $arrayDatosAsigna['result'][0]['nombres']   = 'Proceso';
                            $arrayDatosAsigna['result'][0]['apellidos'] = 'Masivo';
                            $arrayDatosAsigna['result'][0]['nombreDepartamento'] = 'SISTEMAS';
                        }

                        //Datos persona asigna.
                        $strUserAsigna  = $arrayDatosAsigna['result'][0]['nombres'].' '.$arrayDatosAsigna['result'][0]['apellidos'];
                        $strDeparAsigna = $arrayDatosAsigna['result'][0]['nombreDepartamento'];

                        //Datos persona asignado.
                        $strUserAsignado  = $entityDetalleAsignacion->getRefAsignadoNombre();
                        $strDeparAsignado = $entityDetalleAsignacion->getAsignadoNombre();

                        $strFechaSolicitada = date_format($infoDetalle->getFeSolicitada(), 'Y-m-d');
                        $strHoraSolicitada  = date_format($infoDetalle->getFeSolicitada(), 'H:i:s');
                        $strNombreTarea     = is_object($objTarea) ? $objTarea->getNombreTarea() :
                                              !empty($strNombreTareaParam) ? $strNombreTareaParam : $strNombreTarea;

                        $this->objProcesoService->putTareasSysCluod(array('strNombreTarea'      => $strNombreTarea,
                                                                          'strNombreProceso'    => $strNombreProceso,
                                                                          'strObservacion'      => $strObservacion,
                                                                          'strFechaApertura'    => $strFechaSolicitada,
                                                                          'strHoraApertura'     => $strHoraSolicitada,
                                                                          'strUser'             => $strUsrCreacion,
                                                                          'strIpAsigna'         => $strIp,
                                                                          'strUserAsigna'       => $strUserAsigna,
                                                                          'strDeparAsigna'      => $strDeparAsigna,
                                                                          'strUserAsignado'     => $strUserAsignado,
                                                                          'strDeparAsignado'    => $strDeparAsignado,
                                                                          'objInfoComunicacion' => $infoComunicacion));

                        $this->envioPlantilla->generarEnvioPlantilla($strAsunto,
                                                                     $arrayTo,
                                                                     'TAREACERT',
                                                                     $parametros,
                                                                     $strIdEmpresa,
                                                                     $cantonId,
                                                                     $intDepartamentoId);
                        $strStatus      = "OK";
                        $strMensaje     = "Se creo la tarea!";
                        $strNumeroTarea = $infoComunicacion->getId();
                        $intIdDetalle   = $infoComunicacion->getDetalleId();
                    }
                    else
                    {
                        $strStatus      = "ERROR";
                        $strMensaje     = "Tarea no Existe";
                        $strNumeroTarea = "";
                        $intIdDetalle   = "";
                    }
                }
                else
                {
                    $strStatus      = "ERROR";
                    $strMensaje     = "Departamento no existe para la empresa ingresada";
                    $strNumeroTarea = "";
                    $intIdDetalle   = "";
                }
            }
            else
            {
                $strStatus      = "ERROR";
                $strMensaje     = "codEmpresa y prefijoEmpresa incorrectos";
                $strNumeroTarea = "";
                $intIdDetalle   = "";
            }
        }
        catch(\Exception $e)
        {
            if ($strOrigen == "WS")
            {
                if ($this->emComunicacion->getConnection()->isTransactionActive())
                {
                    $this->emComunicacion->getConnection()->rollback();
                }

                if ($this->emSoporte->getConnection()->isTransactionActive())
                {
                    $this->emSoporte->getConnection()->rollback();
                }

                if ($this->emGeneral->getConnection()->isTransactionActive())
                {
                    $this->emGeneral->getConnection()->rollback();
                }

                if ($this->emComercial->getConnection()->isTransactionActive())
                {
                    $this->emComercial->getConnection()->rollback();
                }
            }

            $strStatus             = "ERROR";
            $strMensaje            = $e->getMessage();
            $arrayRespuestaFinal   = array('status' => $strStatus, 'mensaje' => $strMensaje, 'id' => '', 'idDetalle' => '', 'success' => false);
            return $arrayRespuestaFinal;
        }

        if ($strOrigen == "WS")
        {
            if ($this->emComunicacion->getConnection()->isTransactionActive())
            {
                $this->emComunicacion->getConnection()->commit();
            }
            $this->emComunicacion->getConnection()->close();

            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->commit();
            }
            $this->emSoporte->getConnection()->close();

            if ($this->emGeneral->getConnection()->isTransactionActive())
            {
                $this->emGeneral->getConnection()->commit();
            }
            $this->emGeneral->getConnection()->close();

            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->commit();
            }
            $this->emComercial->getConnection()->close();

            //Proceso que graba tarea en INFO_TAREA
            if(isset($arrayParametrosHist["intDetalleId"]))
            {
                $arrayParametrosInfoTarea['intDetalleId']   = $arrayParametrosHist["intDetalleId"];
                $arrayParametrosInfoTarea['strUsrCreacion'] = $arrayParametrosHist["strUsrCreacion"];
                $this->crearInfoTarea($arrayParametrosInfoTarea);
            }
        }
        
        if ($strOrigen == "WEB-TN" && ($boolParametroNombreTecnico || $boolEsIPSB || $boolCrearInfoTarea))
        {
            if ($this->emComunicacion->getConnection()->isTransactionActive())
            {
                $this->emComunicacion->getConnection()->commit();
            }
            $this->emComunicacion->getConnection()->close();

            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->commit();
            }
            $this->emSoporte->getConnection()->close();

            //Proceso que graba tarea en INFO_TAREA
            if(isset($arrayParametrosHist["intDetalleId"]))
            {
                $arrayParametrosInfoTarea['intDetalleId']   = $arrayParametrosHist["intDetalleId"];
                $arrayParametrosInfoTarea['strUsrCreacion'] = $arrayParametrosHist["strUsrCreacion"];
                $this->crearInfoTarea($arrayParametrosInfoTarea);
            }
        }
        
        $arrayRespuestaFinal = array('status'=>$strStatus,'mensaje'=>$strMensaje,'id'=>$strNumeroTarea,'idDetalle'=>$intIdDetalle,'success'=>true);
        return $arrayRespuestaFinal;
    }

    /**
     * Funcion que sirve para obtener la hora del servidor y el tiempo
     * transcurrido para el caso y para la tarea
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 21-07-2015
     * @param array $arrayParametros
     * @return array $arrayRespuesta
     */
    public function obtenerHoraTiempoTranscurrido($arrayParametros)
    {
        $fechaInicio    = $arrayParametros['fechaInicio'];
        $horaInicio     = $arrayParametros['horaInicio'];

        $fechaActual    =  new \DateTime('now');
        $fechaFin       =  $fechaActual->format('Y-m-d');
        $horaFin        =  $fechaActual->format('H:i');

        //fecha inicio
        $arrayFechaInicio = explode("-", $fechaInicio);
        $fechaInicioFormato = $arrayFechaInicio[0] . "/" . $arrayFechaInicio[1] . "/" . $arrayFechaInicio[2] ;

        //fecha fin
        $arrayFechaActual = explode("-", $fechaFin);
        $fechaActualFormato = $arrayFechaActual[2] . "/" . $arrayFechaActual[1] . "/" . $arrayFechaActual[0] ;

        //fechas en formato Date
        $dateFechaInicio = date($fechaInicioFormato);
        $dateFechaFin = date($fechaActualFormato);

        //hora inicio
        $arrayHoraInicio = explode(":", $horaInicio);

        //hora fin
        $arrayHoraFin = explode(":", $horaFin);

        //resta de fechas
        $restaFechas = $dateFechaFin - $dateFechaInicio;

        $diasTotales = ceil( (((($restaFechas / 1000) / 60) / 60) / 24) );

        $minutosAdjudicar = "";

        if($diasTotales > 0)
        {
            $diasTotales = $diasTotales - 1;
            $minutosInicio = (24 * 60) - ($arrayHoraInicio[0] * 60 + $arrayHoraInicio[1]);
            $minutosFin = $arrayHoraFin[0] * 60 + $arrayHoraFin[1];

            $minutosTotales = $minutosInicio + $minutosFin;

            $minutosAdjudicar = ($diasTotales * 1440) + $minutosTotales;
        }
        else
        {
            $minutosInicio = $arrayHoraInicio[0] * 60 + $arrayHoraInicio[1];
            $minutosFin = $arrayHoraFin[0] * 60 + $arrayHoraFin[1];

            $minutosAdjudicar = $minutosFin - $minutosInicio;
        }

        $tiempoTotal = $minutosAdjudicar < 0 ? $minutosAdjudicar * -1 : $minutosAdjudicar;

        $arrayRespuesta = array (
                                    'fechaInicio'   => $fechaInicio,
                                    'horaInicio'    => $horaInicio,
                                    'fechaFin'      => $fechaFin,
                                    'horaFin'       => $horaFin,
                                    'tiempoTotal'   => $tiempoTotal
                                );

        return $arrayRespuesta;
    }

    /**
     * Funcion que sirve para verificar si una tarea tiene asociada una solicitud de Facturación por Requerimiento de Clientes y si fuese el caso
     * le actualiza el estado dependiendo de la acción que están realizando
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 11-12-2015
     * @param array $arrayParametros [ 'accionTarea', 'caracteristicaSolicitud', 'detalleId', 'estadoActivo', 'feCreacion', 'ipCreacion',
     *                                 'usrCreacion' ]
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 19-11-2016 Se agrega la validación cuando una tarea es anulada, es decir se agrega un motivo y se lo guarda en el historial
     *                         del detalle con el respectivo estado Anulada de la tarea
     *
     * @return boolean $boolRespuesta
     */
    public function verificarSolicitudFacturacion($arrayParametros)
    {
        $boolRespuesta  = true;
        $strAccionTarea = $arrayParametros['accionTarea'];

        $objAdmiCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                   ->findOneByDescripcionCaracteristica( $arrayParametros['caracteristicaSolicitud'] );
        $objDetalleSolCarac    = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                   ->findOneBy( array( 'valor'            => $arrayParametros['detalleId'],
                                                                       'caracteristicaId' => $objAdmiCaracteristica,
                                                                       'estado'           => $arrayParametros['estadoActivo'] ) );

        $this->emComercial->getConnection()->beginTransaction();

        try
        {
            if( $objDetalleSolCarac )
            {
                if( $strAccionTarea == 'rechazada' )
                {
                    $strTmpMotivo      = 'Se rechaza tarea';
                    $strEstadoACambiar = $arrayParametros['estadoEliminado'];
                }
                elseif( $strAccionTarea == 'cancelada')
                {
                    $strTmpMotivo = 'Se cancela tarea';
                    $strEstadoACambiar = $arrayParametros['estadoEliminado'];
                }
                elseif( $strAccionTarea  == 'finalizada' )
                {
                    $strTmpMotivo = 'Se finaliza tarea';
                    $strEstadoACambiar = $arrayParametros['estadoAprobado'];
                }
                elseif( $strAccionTarea  == 'anulada' )
                {
                    $strTmpMotivo = 'Se anula tarea';
                    $strEstadoACambiar = $arrayParametros['estadoEliminado'];
                }

                $objMotivo   = $this->emGeneral->getRepository('schemaBundle:AdmiMotivo')->findOneByNombreMotivo($strTmpMotivo);
                $intIdMotivo = 0;
                if( $objMotivo )
                {
                    $intIdMotivo = $objMotivo->getId();
                }

                $objDetalleSolicitud = $objDetalleSolCarac->getDetalleSolicitudId() ? $objDetalleSolCarac->getDetalleSolicitudId() : null;

                if( $objDetalleSolicitud )
                {
                    $objDetalleSolicitud->setEstado($strEstadoACambiar);
                    $this->emComercial->persist($objDetalleSolicitud);
                    $this->emComercial->flush();

                    $objDetalleSolHist = new InfoDetalleSolHist();
                    $objDetalleSolHist->setDetalleSolicitudId($objDetalleSolicitud);
                    $objDetalleSolHist->setEstado($strEstadoACambiar);
                    $objDetalleSolHist->setFeCreacion($arrayParametros['feCreacion']);
                    $objDetalleSolHist->setIpCreacion($arrayParametros['ipCreacion']);
                    $objDetalleSolHist->setUsrCreacion($arrayParametros['usrCreacion']);
                    $objDetalleSolHist->setMotivoId($intIdMotivo);
                    $objDetalleSolHist->setObservacion($strTmpMotivo);
                    $this->emComercial->persist($objDetalleSolHist);
                    $this->emComercial->flush();
                }//( $objDetalleSolicitud )

                $objDetalleSolCarac->setEstado($strEstadoACambiar);
                $this->emComercial->persist($objDetalleSolCarac);
                $this->emComercial->flush();
            }//( $objDetalleSolCarac )

            $this->emComercial->getConnection()->commit();
        }
        catch (Exception $ex)
        {
            $boolRespuesta = false;
            error_log($ex->getMessage());
            $this->emComercial->getConnection()->rollback();
        }//try

        $this->emComercial->getConnection()->close();

        return $boolRespuesta;
    }

    /**
     * Funcion que me retorna el ultimo estado de una tarea
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.0 11/11/2016
     *
     * @param int arrayParametros["intIdTarea"]      int   : id tarea
     * @return String $objEstadoTarea["estadoTarea"] String: Estado de la tarea
     */
    public function obtenerUltimoEstadoTarea($arrayParametros)
    {
        $objEstadoTarea = $this->emSoporte->getRepository('schemaBundle:InfoDetalleHistorial')->getUltimoDetHist($arrayParametros);
        return $objEstadoTarea["estadoTarea"];
    }

    /**
     * Funcion que sirve para obtener el ultimo estado y fecha de las tareas creda
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 13-02-2016
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 11-05-2018 - Se agregan 2 valores al momento de retornar la informacion: el idDetalle y el estado actual de la tarea
     *
     * @param  int   $idTarea
     * @return array $arrayRespuesta
     */
    public function obtenerEstadoTarea($idTarea)
    {
        $asignacion   = $this->emComunicacion->getRepository('schemaBundle:InfoComunicacion')->find($idTarea);
        $fechaA       = "";
        $fechaC       = "";
        $estado       = "";
        $strIdDetalle = "";
        $strEstadoActualTarea = "";

        if(count($asignacion) > 0 )
        {
            $tareaAperturada  = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')->getResultadoTareaAperturada($idTarea);

            if(count($tareaAperturada) > 0)
            {
                $fechaA = ($tareaAperturada['feCreacion'] ? strval(date_format($tareaAperturada['feCreacion'], "d-m-Y H:i")) : "");
                $estado = "Abierta";
            }

            $tareaCierre  = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')->getResultadoTareaFinalizada($idTarea);

            if(count($tareaCierre) > 0)
            {
                $fechaC = ($tareaCierre['feCreacion'] ? strval(date_format($tareaCierre['feCreacion'], "d-m-Y H:i")) : "");
                $estado = "Cerrada";
            }

            //Se obtiene el idDetalle de la tarea
            $strIdDetalle  = $asignacion->getDetalleId();

            //Se consulta el estado actual de la tarea
            if(!empty($strIdDetalle))
            {
                $strEstadoActualTarea = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->getUltimoEstado($strIdDetalle);
            }

            $arrayRespuesta = array ('estado'        => $estado,
                                     'fechaApertura' => $fechaA,
                                     'fechaCierre'   => $fechaC,
                                     'idDetalle'     => $strIdDetalle,
                                     'estadoActual'  => $strEstadoActualTarea,
                                     'status'        => 'OK',
                                     'mensaje'       => 'Consulta Exitosa!');
        }
        else
        {
            $arrayRespuesta = array ('estado'        => '',
                                     'fechaApertura' => '',
                                     'fechaCierre'   => '',
                                     'idDetalle'     => '',
                                     'estadoActual'  => '',
                                     'status'        => 'ERROR',
                                     'mensaje'       => 'Tarea no Existe!');
        }

        return $arrayRespuesta;
    }

    /**
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 3.1 04-08-2020 - Actualización: Se agrega bloque de código para guardar el motivo de finalizar tarea
     * 
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 3.0 08-07-2020 - Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     * 
     * @author Modificado: Karen Rodríguez. <kyrodriguez@telconet.ec>
     * @version 2.9 21-06-2019 - Se agrega validación para que no se actualice el tarea_id cuando
     *                            el nombre de Tarea Final es el mismo que se asignó al crear la tarea.
     * 
     * @author Modificado: Miguel Angulo S. <jmangulos@telconet.ec>
     * @version 2.8 21-05-2019 - Se retira programación que cambia a estado “Cerrado” las asignaciones que 
     *                           tienen sus tareas relacionadas en estado “Finalizada”
     * 
     * Funcion que sirve para finalizar la tarea (casos, tarea, mobil, cambio linea pon),
     * y notificar a los implicados de la tarea por mail.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 2.8 17-04-2019 - Se agrega los métodos genéricos para el cálculo de los tiempos de las tareas, y así obtener
     *                           los tiempos totales de las pausas y reprogramación tanto del cliente como de la empresa.
     *
     * @author Modificado: Andrés Montero <amontero@telconet.ec>
     * @version 2.7 01-02-2019 - Se agrega programación que cambia a estado “Cerrado” las asignaciones que 
     *                           tienen sus tareas relacionadas en estado “Finalizada”
     * 
     * @author Modificado: Jesús Bozada <jbozada@telconet.ec>
     * @version 2.6 22-01-2018 - Se agrega programación para procesar tareas asociadas a solicitudes de reubicación de servicios de Tn
     * @since 2.5
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.6 26-12-2017 - En el asunto y cuerpo del correo se agrega el nombre del proceso al que pertenece la tarea asignada
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.5 09-08-2017 -  En la tabla INFO_TAREA_SEGUIMIENTO y INFO_DETALLE_HISTORIAL, se regulariza el departamento creador de la accion y
     *                            se adicionan los campos de persona empresa rol id para identificar el responsable actual
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.4 04-04-2017 - Se realiza ajuste por Bug reportado al momento de finalizar tareas automáticas, generadas por el proceso
     *                           de cancelación masiva
     *
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.3 23-11-2016 Se valida si existe el id de la persona empresa rol de la asignación. En caso de no existir se lanzará una excepción.
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.3 08-11-2016 Se registra el tiempo total de la tarea al ser finalizada
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.2 15-09-2016 Se aplica la funcion getMinimaComunicacionPorDetalleId para obtener el numero de la tarea
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.1 12-09-2016 Se valida que la tarea se encuentre abierta para poder ejecutar la herramienta
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.0 08-07-2016 Se realiza ajustes para enviar la longitud y latitud cuando se finaliza una tarea de corte de fibra de un tipo de
     *                         caso Backbone
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.9 05-07-2016 Se valida que si ingresan caracteres de apertura y cierre de tags en la observacion, se eliminan
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.8 30-06-2016 Se valida que exista departamento al momento de enviar la notificacion (solo para TN)
     *
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 23-06-2016 Se guarda el estado de la tarea en la creación del seguimiento al finalizar la tarea.
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.6 22-06-2016 Se agregan los estados de las tareas en los seguimientos
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.5 21-06-2016 Se realiza un ajuste, se envia correctamente el Departamento para las asignacion de tareas que son tipo Cuadrilla
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.4 30-05-2016 Se agrega el Login Afectado como parametro en la plantilla
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 25-05-2016 Se realizan ajustes para enviar notificacion a todos los departamentos involucrados al finalizar tarea
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.2 29-12-2015 Se realizan ajustes para que al momento de finalizar las tareas no permita cerrar el caso,solo para los
     *                         casos de movilizacion
     *
     * @author Modificado Edson Franco <efranco@telconet.ec>
     * @version 1.1 11-12-2015 - Se realiza el ajuste para que enviar parámetros necesarios para verificar si la tarea a finalizar tiene una
     *                           solicitud de facturación
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 21-07-2015
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.7 08-10-2019 - Se agrega funcionalidad para agregar el progreso de regularización en la tarea.
     *
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.8 31-03-2020 - Se agrega validación para autocompletado del 100% en tarea interdepartamental
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.9 12-08-2020 - Se agrega validación para no notificar sino existe departamento para tareas Megadatos 
     * @since 1.8
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 2.0 04-01-2020 - Se agrega el método encargado de notificar la finalización de la tarea al
     *                           sistema de syscloud.
     *
     * @author Jose Bedon <jobedon@telconet.ec>
     * @version 2.0 04-01-2020 - Se envia parametro de solucion a registrar en el historico de la tarea
     * 
     * @author Francisco Cueva <facueva@telconet.ec>
     * @version 2.1 25-06-2021 - Se agrega validación para tareas parametrizadas, cambiando el asunto y proceso de notificación
     * 
     * @author Pedro Velez <psvelez@telconet.ec>

     * @version 2.2 10-09-2021 - Se agrega llamado a proceso encargado de enviar tracking a megadatos
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 2.3 15-10-2021 - Se elimina filtro de tareas por dpto Operaciones Urbanas para tracking map
     * 
     * @author Pedro Velez <psvelez@telconet.ec> 
     * @version 2.4 01-10-2021 - Se agrega validación para finalizar con tarea anterior
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 2.5 08-11-2021 -  Se agrega validacion del origen de la transaccion movil
     *                            para finlizar con tarea correcta.
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 2.6 28-07-2021 - Se agrega codigo para la validacion de cierre de casos Hal
     * 
     * @author David De La Cruz <ddelacruz@telconet.ec>
     * @version 2.7 02-03-2022 - Se valida que el objeto detalle sea un dato correcto para evitar error al obtener id de tarea
     * 
     * @author Anthony Santillan <asantillany@telconet.ec>
     * @version 2.8 13-09-2022 - Se valida el estado del servicio asociado a una tarea de Ng-Firewall
     * 
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 2.9 03-10-2022 - Se verifica cuando strCaracteristica es null
     * 
     * @author Manuel Carpio <mcarpio@telconet.ec>
     * @version 1.6 15-11-2021 - Se modifica la función para manejo de error al obtener la categorias de las tareas.
     * 
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 3.1 18-11-2022 - SE REALIZA LA LLAMADA AL PROCEDIMENTO PARA LA CREACIÒN DE UN SOPORTE
     * 
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 3.2 26-06-2023 - Se valida que tenga valores las variables: intComunicacionId, $this->emSoporte y codEmpresa
     * 
     * @param array $arrayParametros
     */
    public function finalizarTarea($arrayParametros)
    { 
        //variable idCaso viene definida por casos y mobil
        $idCaso             = $arrayParametros['idCaso'];
        $codEmpresa         = $arrayParametros['idEmpresa'];
        $prefijoEmpresa     = $arrayParametros['prefijoEmpresa'];
        $idDetalle          = $arrayParametros['idDetalle'];
        $intIdDepartamento  = $arrayParametros['intIdDepartamento'] ? $arrayParametros['intIdDepartamento'] : "";
        $fechaEjecucion     = $arrayParametros['fechaEjecucion'];
        $horaEjecucion      = $arrayParametros['horaEjecucion'];
        $tareaFinal         = $arrayParametros['tareaFinal'] ? $arrayParametros['tareaFinal'] : "";
        $esSolucion         = $arrayParametros['esSolucion'];
        $idTarea            = $arrayParametros['tarea'];
        $observacion        = $arrayParametros['observacion'] ? $arrayParametros['observacion'] : "Tarea finalizada";
        $jsonMateriales     = $arrayParametros['jsonMateriales'];
        $usrCreacion        = $arrayParametros['usrCreacion'];
        $ipCreacion         = $arrayParametros['ipCreacion'];
        $empleado           = $arrayParametros['empleado'];
        $idAsignado         = $arrayParametros['idAsignado'];
        $fechaApertura      = $arrayParametros['fechaApertura'];
        $horaApertura       = $arrayParametros['horaApertura'];
        $observacionManga   = $arrayParametros['observacionManga'] ? $arrayParametros['observacionManga'] : "";
        $longitud           = $arrayParametros['longitud'] ? $arrayParametros['longitud'] : "";
        $latitud            = $arrayParametros['latitud'] ? $arrayParametros['latitud'] : "";
        $longitudM1         = $arrayParametros['longitudManga1'] ? $arrayParametros['longitudManga1'] : "";
        $latitudM1          = $arrayParametros['latitudManga1'] ? $arrayParametros['latitudManga1'] : "";
        $longitudM2         = $arrayParametros['longitudManga2'] ? $arrayParametros['longitudManga2'] : "";
        $latitudM2          = $arrayParametros['latitudManga2'] ? $arrayParametros['latitudManga2'] : "";
        $clientes           = $arrayParametros['clientes'] ? $arrayParametros['clientes'] : "";
        $boolEsAppSyscloud  = $arrayParametros['boolEsAppSyscloud'];
        $strTareaInicial    = "";
        $perteneceCaso      = "";
        $bandCoordenadas    = "N";
        $observacionCoordenadas = "";
        $parametroCorreo        = "";
        $parametroTarea         = "";
        $arrayParametrosHist    = array();
        $strEnviaDepartamento   = $arrayParametros['strEnviaDepartamento'] ? $arrayParametros['strEnviaDepartamento'] : "";
        $strNombreProceso       = "";
        $objTarea               = null;
        $intIdMotivoFinaliza    = $arrayParametros['idMotivoFinaliza'];
        $intIdFinTarea          = $arrayParametros['idFinTarea'];
        $strOrigenComunicacion  = $arrayParametros['strOrigenComunicacion'];
        $strClase               = $arrayParametros['strClase'];
        $boolFinalTareaAnterior  = $arrayParametros['boolFinalTareaAnterior'] ? $arrayParametros['boolFinalTareaAnterior'] : false;
        $intIdMotiCierreCaso    = isset($arrayParametros['idMotivoFinCaso']) ? $arrayParametros['idMotivoFinCaso'] : 0;
        $strEsHal               = ($arrayParametros['esHal'] ? 'S' : 'N');


        $arrayParametrosHist["strCodEmpresa"]           = $codEmpresa;
        $arrayParametrosHist["strUsrCreacion"]          = $usrCreacion;
        $arrayParametrosHist["strIpCreacion"]           = $ipCreacion;
        $arrayParametrosHist["strOpcion"]               = "Historial";
        $arrayParametrosHist["intIdDepartamentoOrigen"] = $intIdDepartamento;
        $arrayParametrosHist["strEnviaDepartamento"]    = $strEnviaDepartamento;
        $arrayStatus                                    = array("FAIL");
        $booleanRegistroActivos = $arrayParametros['permiteRegistroActivos'];
        
        $boolEsInterdep                                 = $arrayParametros['esInterdepartamental'];
        $intComunicacionId                              = $arrayParametros['numeroTarea'];
        $arrayDepTraking  = array(128);
        $boolEsHal        = false;       
        $strNombreMotivo  = "";

        $strGuardar            = $arrayParametros['strGuardar'];
    	$strIndisponibilidadI  = $arrayParametros['strIndisponibilidadI'];
        $strTipoI              = $arrayParametros['strTipoI'];
        $intTiempoAfectacionI  = $arrayParametros['intTiempoAfectacionI'];
        $strMasivoI            = $arrayParametros['strMasivoI'];
        $intComboResponsableI  = $arrayParametros['intComboResponsableI'];
        $intClientesAfectadosI = $arrayParametros['intClientesAfectadosI'];
        $strObservacionesI     = $arrayParametros['strObservacionesI'];
        $strOltI               = $arrayParametros['strOltI'];
        $strPuertoI            = $arrayParametros['strPuertoI'];
        $strCajaI              = $arrayParametros['strCajaI'];
        $strSplitterI          = $arrayParametros['strSplitterI'];

        $strMovil         = $arrayParametros["strMovil"] ? $arrayParametros["strMovil"]:"N";

        if($jsonMateriales!="")
        {
            $arrayMateriales = $jsonMateriales->materiales;
        }

        $date       = date_create(date('Y-m-d H:i', strtotime($fechaEjecucion . ' ' . $horaEjecucion)));//Fecha Inicio de Tarea

        $stringEsSolucion = ($esSolucion == "true" ? 'S' : 'N');

        $numeracionReferencia  = '';

        //Inicio de Transacciones
        $this->emComunicacion->getConnection()->beginTransaction();
        $this->emComercial->getConnection()->beginTransaction();
        $this->emSoporte->getConnection()->beginTransaction();
        $this->emGeneral->getConnection()->beginTransaction();

        try
        {
            $strEstadoActualTarea = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->getUltimoEstado($idDetalle);

            if($strEstadoActualTarea  != "Cancelada" && $strEstadoActualTarea  != "Rechazada" && $strEstadoActualTarea  != "Finalizada")
            {
                if($prefijoEmpresa  == 'TN')
                {
                    $arrayAdmiParametro = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne(
                            'VALIDACION DE PRODUCTOS NG FIREWALL', 
                            'SOPORTE', 
                            '', 
                            'NOMBRE DE LA CARACTERISTICA EN LA CUAL SE ASOCIAN LOS SERVICIOS A LAS TAREAS DE NG-FIREWALL',
                            '', 
                            '', 
                            '', 
                            '',
                            '',
                            'TN');
            
                    $arrayParametrosCaracteristicas['caracteristica']   = $arrayAdmiParametro['valor1'];
                    $arrayParametrosNumeroTarea['numeroTarea']          = $arrayParametros['numeroTarea'];
        
                    $arrayDatos     = array ('arrayIdComunicacion'      => $arrayParametrosNumeroTarea,
                                            'arrayCaracteristica'      => $arrayParametrosCaracteristicas,
                                            'strEstado'                => 'Activo');
        
                    $arrayRespuesta = $this->emSoporte->getRepository("schemaBundle:InfoTareaCaracteristica")
                    ->getTareasCaracteristicas($arrayDatos);
        
                    $strCaracteristica  = $arrayRespuesta['result'][0]['descripcionCaracteristica'];
                    $intIdServicio      = $arrayRespuesta['result'][0]['valor'];
        
                    /*
                    * Se verifica si la tarea tiene una caracteristica de ORQUESTADOR_SERVICIO_ID
                    * y el servicio asociado tengo un estado de Activo
                    */
                    
                    if($strCaracteristica == $arrayAdmiParametro['valor1'] && !is_null($strCaracteristica) )
                    {  
                        if(!empty($intIdServicio))
                        {
                            $objServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);    
                        }
        
                        $strEstadoServicio = '';
        
                        if(is_object($objServicio))
                        {
                            $strEstadoServicio  = $objServicio->getEstado();
                        }
                        
                        if($strEstadoServicio != 'Activo')
                        {
                            throw new \Exception('No se ha podido finalizar la tarea, porque cuenta con servicios Ng-Firewall por activar. '
                            . 'Por favor notifique a Sistemas!.');
                        }
                    }
                }
               

                //Se eliminan simbolos de tags
                $observacion      = $this->eliminarSimbolosDeTags($observacion);
                $observacionManga = $this->eliminarSimbolosDeTags($observacionManga);

                $detalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->find($idDetalle);

                if (!is_object($detalle))
                {
                    throw new \Exception('Debe ingresar un detalle válido para finalizar la tarea');
                }

                /*
                 * Se verifica si una tarea tiene asociada una solicitud de facturación, si la tiene le cambia el estado dependiendo de la acción
                 * a realizar
                 */
                $boolRespuesta = $this->verificarSolicitudFacturacion($arrayParametros);
                /*
                 * Fin Se verifica si una tarea tiene asociada una solicitud de facturación, si la tiene le cambia el estado dependiendo de la acción
                 * a realizar
                 */  
                
                $strTareaInicial        = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')->find($detalle->getTareaId());

                //existe tarea
                if($idTarea && $idTarea != "")
                {
                    if($tareaFinal == "S" && $intIdFinTarea && $intIdFinTarea != "")
                    {
                        $objTarea = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')->findOneById($intIdFinTarea);
                    }
                    elseif($strMovil == "S")
                    {
                        $objTarea = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')->findOneById($idTarea);
                    }
 
                    //Setea la Tarea final si el nombre de la Tarea de Creacion es diferente al de la Tarea de Cierre
                   if($objTarea !== null && ($strTareaInicial->getId() !== $objTarea->getId()))
                   {
                       $detalle->setTareaId($objTarea);
                   }
                   else
                   {
                       $objTarea = $strTareaInicial;
                   }
                }
                else
                {
                    $objTarea = $strTareaInicial;
                }

                if($idCaso != "" && $strEsHal === "S" && $intIdMotiCierreCaso != 0)
                {
                    $objInfoCaso = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                                   ->find($idCaso);

                    if(is_object($objInfoCaso))
                    {
                        $arrayDataHal = array(
                                            'idCaso'         => $idCaso,
                                            'numCaso'        => $objInfoCaso->getNumeroCaso(),
                                            'idDetalle'      => $idDetalle,
                                            'idComunicacion' => $intComunicacionId,
                                            'usrCreacion'    => $usrCreacion
                                            );

                        $arrayValidaEnlace = $this->getValidaEnlaceHal($arrayDataHal);

                        if(in_array(strtoupper($arrayValidaEnlace['status']),$arrayStatus))
                        {
                            $arrayEnlaceSeguimiento['intDetalleId']    = $idDetalle;
                            $arrayEnlaceSeguimiento['strObservacion']  = "No se pudo cerrar la tarea, ". $arrayValidaEnlace['message'].
                                                                         "<br/><b>Fin de tarea seleccionado:</b> ".$objTarea->getNombreTarea();
                            $arrayEnlaceSeguimiento['strCodEmpresa']   = $codEmpresa;
                            $arrayEnlaceSeguimiento['strUsrCreacion']  = $usrCreacion;
                            $arrayEnlaceSeguimiento['strEstadoActual'] = $strEstadoActualTarea;
                            $arrayEnlaceSeguimiento["strOpcion"]       = "Seguimiento";

                            $this->ingresaHistorialYSeguimientoPorTarea($arrayEnlaceSeguimiento);
                            $this->emSoporte->getConnection()->commit();
                            throw new \Exception($arrayValidaEnlace['message'] . ', seguir revisando');
                        }
                        if(strtoupper($arrayValidaEnlace['status'])=== "OK")
                        {
                            $stringEsSolucion = 'S';
                        }
                    }
                }

                /* Se agrega bloque de codigo para finalizar solicitudes de reubicacion Tn y poder realizar la facturación del servicio*/
                if($prefijoEmpresa=="TN")
                {
                    $intDetalleSolicitudId = $detalle->getDetalleSolicitudId();
                    if (!empty($intDetalleSolicitudId))
                    {
                        $objDetalleSolicitud = $this->emComercial
                                                   ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                   ->find($intDetalleSolicitudId);
                        if(is_object($objDetalleSolicitud))
                        {
                            $objTipoSolicitud = $objDetalleSolicitud->getTipoSolicitudId();
                            if (is_object($objTipoSolicitud))
                            {
                                if ($objTipoSolicitud->getDescripcionSolicitud() == "SOLICITUD REUBICACION")
                                {
                                    $objServicioSolicitud = $objDetalleSolicitud->getServicioId();
                                    if (is_object($objServicioSolicitud))
                                    {
                                        $objDetalleSolicitud->setEstado("PendienteFact");
                                        $this->emComercial->persist($objDetalleSolicitud);
                                        $this->emComercial->flush();

                                        $objDetalleSolHist = new InfoDetalleSolHist();
                                        $objDetalleSolHist->setDetalleSolicitudId($objDetalleSolicitud);
                                        $objDetalleSolHist->setEstado($objDetalleSolicitud->getEstado());
                                        $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                        $objDetalleSolHist->setIpCreacion($ipCreacion);
                                        $objDetalleSolHist->setUsrCreacion($usrCreacion);
                                        $objDetalleSolHist->setObservacion("Se finaliza tarea, se procede a cambiar ".
                                                                           "estado de solicitud para su facturación");
                                        $this->emComercial->persist($objDetalleSolHist);
                                        $this->emComercial->flush();
                                        
                                        //actualizar las solicitudes caract
                                        $arraySolCaract = $this->emComercial
                                                               ->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                               ->findBy(array("detalleSolicitudId"  => $objDetalleSolicitud->getId(), 
                                                                              "estado"              => "Asignada"));
                                        foreach($arraySolCaract as $objDetalleSolCarac)
                                        {
                                            $objDetalleSolCarac->setEstado($objDetalleSolicitud->getEstado());
                                            $this->emComercial->persist($objDetalleSolCarac);
                                            $this->emComercial->flush();
                                        }
                                        
                                        //historial del servicio
                                        $objServicioHistorialNuevo = new InfoServicioHistorial();
                                        $objServicioHistorialNuevo->setServicioId($objServicioSolicitud);
                                        $objServicioHistorialNuevo->setObservacion("Se Activo el Servicio Reubicado");
                                        $objServicioHistorialNuevo->setEstado($objServicioSolicitud->getEstado());
                                        $objServicioHistorialNuevo->setUsrCreacion($usrCreacion);
                                        $objServicioHistorialNuevo->setFeCreacion(new \DateTime('now'));
                                        $objServicioHistorialNuevo->setIpCreacion($ipCreacion);
                                        $this->emComercial->persist($objServicioHistorialNuevo);
                                        $this->emComercial->flush();
                                    }
                                }
                            }
                        }
                    }
                }
                /* Fin Se agrega bloque de codigo para finalizar solicitudes de reubicacion Tn y poder realizar la facturación del servicio*/

                //Verificar si el id caso viene vacio por modulo de tareas y cambio linea pon
                if($idCaso == "")
                {
                    //Determina si una tarea pertenece a un caso o no
                    $arrayNumCasos = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->tareaPerteneceACaso($idDetalle);

                    //obtener el id caso por idDetalle
                    if($arrayNumCasos[0]['caso'] != 0)
                    {
                        $hipotesis  = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->getCasoPadreTarea($idDetalle);
                        $idCaso     = $hipotesis[0]->getCasoId()->getId();
                    }
                }

                //tareas por casos
                if($idCaso != "")
                {
                    $caso                   = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->find($idCaso);
                    $numeracion             = $caso->getNumeroCaso();
                    $numeracionReferencia   = ' al Caso #' . $numeracion;

                    //materiales
                    if($arrayMateriales && count($arrayMateriales) > 0)
                    {
                        foreach($arrayMateriales as $material)
                        {
                            $admiMaterial = $em->getRepository('schemaBundle:AdmiTareaMaterial')
                                               ->findOneBy(array('materialCod' => $material->cod_material,
                                                                 'empresaCod'  => $codEmpresa));

                            if($admiMaterial)
                            {
                                $infoDetalleMaterial = new InfoDetalleMaterial();
                                $infoDetalleMaterial->setDetalleId($detalle);
                                $infoDetalleMaterial->setMaterialCod($admiMaterial->getMaterialCod());
                                $infoDetalleMaterial->setCostoMaterial($admiMaterial->getCostoMaterial());
                                $infoDetalleMaterial->setCantidadNoFacturada($material->cant_nf);
                                $infoDetalleMaterial->setCantidadFacturada($material->cant_f);
                                $infoDetalleMaterial->setValorCobrado($material->valor);
                                $infoDetalleMaterial->setFeCreacion(new \DateTime('now'));

                                $infoDetalleMaterial->setUsrCreacion($usrCreacion);
                                $infoDetalleMaterial->setIpCreacion($ipCreacion);
                                $em->persist($infoDetalleMaterial);
                                $em->flush();
                            }//if($admiMaterial)
                        }//foreach($arrayMateriales as $material)
                    }//if($arrayMateriales && count($arrayMateriales) > 0)

                    if(is_object($objTarea) && $objTarea->getNombreTarea() == 'Realizar Informe Ejecutivo de Incidente')
                    {
                        $objDocumentoRelacion = $this->emComunicacion->getRepository('schemaBundle:InfoDocumentoRelacion')
                                                               ->findOneBy(array('detalleId' => $detalle->getId(),
                                                                                    'casoId' => $caso->getId(),
                                                                                    'estado' => 'Activo',
                                                                                    'modulo' => 'SOPORTE'));
                        if(is_object($objDocumentoRelacion))
                        {
                            //consulto la encuesta para actualizar su estado
                            $objEncuesta = $this->emComunicacion->getRepository('schemaBundle:InfoEncuesta')
                                                                ->find($objDocumentoRelacion->getEncuestaId());

                            if(is_object($objEncuesta))
                            {
                                $objEncuesta->setEstado('Finalizado');
                                $this->emComunicacion->persist($objEncuesta);
                                $this->emComunicacion->flush();
                            }
                        }
                    }

                }
                else //Tareas Individuales
                {
                    if($fechaEjecucion == "" || $horaEjecucion == "")
                    {
                        $fechaEjecucion = null;
                    }
                    else
                    {
                        $fechaEjecucion = $date;
                    }

                    //Se obtiene el numero de la tarea en base al id_detalle
                    $intNumeroTarea = $this->emComunicacion->getRepository('schemaBundle:InfoComunicacion')
                                                           ->getMinimaComunicacionPorDetalleId($idDetalle);

                    $stringEsSolucion = 'S';

                    //Se consulta si es tarea automatica creada por el WS
                    if($strTareaInicial->getAutomaticaWs() == "SI")
                    {
                        $parametro = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                     ->getOne('WEB SERVICE TAREAS','SOPORTE','TAREAS','Tarea de app de Cert',
                                                              '',$strTareaInicial->getNombreTarea(),'','','','');

                        if ($strTareaInicial == $parametro["valor2"])
                        {
                            $numeracionReferencia = ' a la Tarea # '.$intNumeroTarea;
                            $perteneceCaso        = "NO";
                        }
                        else
                        {
                            $numeracionReferencia = ' a la Tarea';
                            $perteneceCaso        = "NO";
                        }
                    }
                    else
                    {
                        if($intNumeroTarea)
                        {
                            $numeracion             = $intNumeroTarea;
                            $numeracionReferencia   = ' a la Actividad #' . $numeracion;
                        }
                        else
                        {
                            $numeracionReferencia = ' a Actividad';
                        }
                    }

                }

                //info detalle
                $detalle->setEsSolucion($stringEsSolucion);
                if($longitud != "" && $latitud != "" && is_float($longitud+0) && is_float($latitud+0))
                {
                    $detalle->setLongitud($longitud);
                    $detalle->setLatitud($latitud);
                }
                $this->emSoporte->persist($detalle);
                $this->emSoporte->flush();

                //Se obtiene el asignado actual de la tarea
                $objUltimaAsignacion = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')
                                                       ->getUltimaAsignacion($detalle->getId());

                //Se ingresa el historial de la tarea
                if(is_object($detalle))
                {
                    $arrayParametrosHist["intDetalleId"] = $detalle->getId();
                }
                               
                $arrayParametrosHist["intTareaId"]        = (empty($intIdFinTarea)) ? $idTarea : $intIdFinTarea;

                if($boolFinalTareaAnterior)
                {
                    $arrayMotivo =  $this->emSoporte->getRepository('schemaBundle:InfoDetalleHistorial')
                                                    ->getMotivoPorTarea(array('idDetalle' => $idDetalle));
                    if (count($arrayMotivo)>0)
                    {
                        $arrayParametrosHist["intIdMotivo"]       = $arrayMotivo[0]["motivoId"];
                        $arrayParametrosHist["strMotivoFinTarea"] = $observacion;
                        $intIdMotivoFinaliza = $arrayMotivo[0]["motivoId"];
                    }
                    else
                    {
                        $arrayParametrosHist["intIdMotivo"]       = $intIdMotivoFinaliza;
                        $arrayParametrosHist["strMotivoFinTarea"] = $observacion; 
                    }
                }
                else
                {
                    $arrayParametrosHist["intIdMotivo"]       = $intIdMotivoFinaliza;
                    $arrayParametrosHist["strMotivoFinTarea"] = $observacion;                    
                }
                $arrayParametrosHist["esSolucion"]        = $esSolucion;

                $arrayParametrosHist["strObservacion"]  = $observacion;
                $arrayParametrosHist["strEstadoActual"] = "Finalizada";
                $arrayParametrosHist["strAccion"]       = "Finalizada";

                $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

                //Función encargada de calcular los tiempos de las tareas.
                $this->calcularTiempoEstado(array('strEstadoActual'   => 'Finalizada',
                                                  'intIdDetalle'      => $idDetalle,
                                                  'strTipoReprograma' => null,
                                                  'strUser'           => $usrCreacion,
                                                  'strIp'             => $ipCreacion));

                //Función que permite realizar el cálculo del tiempo total de la tarea.
                $this->calcularTareaTiempoAsignacion(array('intIdDetalle'    => $idDetalle,
                                                           'intIdCaso'       => $idCaso ? $idCaso : null,
                                                           'strObservacion'  => $observacion,
                                                           'strUser'         => $usrCreacion,
                                                           'strIp'           => $ipCreacion));

                if($idCaso != "")
                {
                    if($esSolucion == 'true')
                    {
                        $solucion = '( SOLUCIONA CASO )';
                    }
                    else
                    {
                        $solucion = '( NO SOLUCIONA CASO )';
                    }
                }
                else
                {
                    $solucion = '';
                }

                if($prefijoEmpresa=="TN" && $longitudM1 != "" && $latitudM1 != "" && $longitudM2 != "" && $latitudM2 != "")
                {
                    $bandCoordenadas = "S";
                    $observacionCoordenadas = "COORD INCIDENTE => Longitud ". $longitud . " Latitud: " . $latitud . " | COORD MANGA1 => "
                                                            ." Longitud ". $longitudM1 . " Latitud: " . $latitudM1 . " | COORD MANGA2 => "
                                                            ." Longitud ". $longitudM2 . " Latitud: " . $latitudM2;

                    $arrayParametrosHist["strObservacion"] = "Tarea fue Finalizada. Obs : " . $observacion .
                                                             " | COORD INCIDENTE => Longitud ". $longitud . " Latitud: " . $latitud .
                                                             " | COORD MANGA1 => ".
                                                             " Longitud ". $longitudM1 . " Latitud: " . $latitudM1 . " | COORD MANGA2 => ".
                                                             " Longitud ". $longitudM2 . " Latitud: " . $latitudM2;
                }
                else if($prefijoEmpresa=="TN" && $longitud != "" && $latitud != "")
                {
                    $bandCoordenadas = "S";
                    $observacionCoordenadas = "COORD INCIDENTE => Longitud ". $longitud . " Latitud: " . $latitud;
                    $arrayParametrosHist["strObservacion"] = "Tarea fue Finalizada. Obs : " . $observacion .
                                                             " | COORD INCIDENTE => Longitud ". $longitud . " Latitud: " . $latitud ;
                }
                elseif($prefijoEmpresa=="TN")
                {
                    $arrayParametrosHist["strObservacion"] = "Tarea fue Finalizada. Obs : " . $observacion;
                }
                else
                {
                    $arrayParametrosHist["strObservacion"] = "Tarea fue Finalizada " . $solucion . " Obs : " . $observacion;
                }

                if ($intIdMotivoFinaliza != "")
                {
                    $objAdmiMotivo = $this->emGeneral->getRepository('schemaBundle:AdmiMotivo')->find($intIdMotivoFinaliza);
                    $strNombreMotivo = $objAdmiMotivo->getNombreMotivo();
                }

                $strNombreMotivo = !empty($strNombreMotivo) ? $strNombreMotivo:"Sin Motivo";

                //Se ingresa el seguimiento de la tarea
                $arrayParametrosHist["strOpcion"] = "Seguimiento";
                
                //seguimiento para registrar motivo y fin de la tarea 
                $arrayParametrosHist["strObservacion"] = $arrayParametrosHist["strObservacion"]."<br/><b>Fin de tarea seleccionado:</b> " .
                                                         $objTarea->getNombreTarea()."<br/><b>Motivo: </b>".$strNombreMotivo;

                $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

                $arrayParametros["intDetalleId"] = $detalle->getId();


                
                // guardarIndisponibilidad
                if($strGuardar == 'SI')
                {

                    $arrayIndisponibilidad = array(
                        'intIdDetalle'                  => $idDetalle,
                        'strIndisponibilidadI'       => $strIndisponibilidadI,
                        'strTipoI'                   => $strTipoI,
                        'intTiempoAfectacionI'       => $intTiempoAfectacionI,
                        'strMasivoI'                 => $strMasivoI,
                        'intComboResponsableI'       => $intComboResponsableI,
                        'intClientesAfectadosI'      => $intClientesAfectadosI,
                        'strOltI'                    => $strOltI,
                        'strPuertoI'                 => $strPuertoI,
                        'strCajaI'                   => $strCajaI,
                        'strSplitterI'               => $strSplitterI,
                        'strUsrCreacion'                => $usrCreacion,
                        'strIpCreacion'                 => $ipCreacion,
                        'strObservacionesI'          => $strObservacionesI
                    );
                    
                    $this->guardarIndisponibilidad($arrayIndisponibilidad);

                }
                


                //NOTIFICACION DE FINALIZACION DE TAREA
                $infoDetalleAsignacion = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')->findByDetalleId($idDetalle);

                if($infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]->getTipoAsignado() == "CUADRILLA")
                {
                    if($infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]->getPersonaEmpresaRolId())
                    {
                        $personaEmpresaRol  = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                ->findOneBy(array("id" =>$infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]
                                                                ->getPersonaEmpresaRolId()));

                        if(is_object($personaEmpresaRol))
                        {
                            if($personaEmpresaRol->getDepartamentoId())
                            {
                                $departamento   = $this->emGeneral->getRepository('schemaBundle:AdmiDepartamento')
                                                       ->find($personaEmpresaRol->getDepartamentoId());
                            }
                        }
                        else
                        {
                            throw new \Exception('No se ha podido finalizar la tarea porque no se puede obtener la Persona Empresa Rol en esta '
                                                . 'asignación. Por favor notifique a Sistemas!.');
                        }
                    }
                    else
                    {
                        throw new \Exception('No se ha podido finalizar la tarea porque falta la información de la Persona Empresa Rol en esta '
                                            . 'asignación. Por favor notifique a Sistemas!.');
                    }
                }
                else
                {
                    $departamento   = $this->emGeneral->getRepository('schemaBundle:AdmiDepartamento')
                                           ->find($infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]->getAsignadoId());
                }

                $persona        = null;

                if($infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]->getRefAsignadoId())
                {
                    $infoPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                                                     ->findOneBy(array(
                                                                        'personaId'          => $infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]
                                                                                                                            ->getRefAsignadoId(),
                                                                        'formaContactoId'   => 5,
                                                                        'estado'            => "Activo"
                                                                       )
                                                                );

                    //OBTENGO EL CONTACTO DE LA PERSONA ASIGNADA
                    if($infoPersonaFormaContacto)
                    {
                        $to[] = $infoPersonaFormaContacto->getValor(); //Correo Persona Asignada
                    }

                    $formaContactoAlias = $this->emComercial->getRepository('schemaBundle:AdmiFormaContacto')
                                                            ->findOneBy(array('descripcionFormaContacto'  => "Alias",
                                                                              'estado'                    => "Activo"));

                    $infoPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                                                     ->findOneBy(array('personaId'         => $infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]
                                                                                                                            ->getRefAsignadoId(),
                                                                        'formaContactoId'   => $formaContactoAlias->getId(),
                                                                        'estado'            => "Activo"
                                                                       )
                                                                );

                    //OBTENGO LA FORMA DE CONTACTO ALIAS
                    if($infoPersonaFormaContacto)
                    {
                        $to[] = $infoPersonaFormaContacto->getValor(); //Correo Persona Asignada
                    }

                    $persona = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                    ->findOneByLogin($infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]->getUsrCreacion());

                    //Se escoje el asignado inicial en caso de que la persona que ejecuta la tarea es diferente al quien la creo
                    if(is_object($persona))
                    {
                        if($persona->getId() != $infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]->getRefAsignadoId())
                        {

                            $infoPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                                                             ->findOneBy(array('personaId'       => $persona->getId(),
                                                                               'formaContactoId' => 5,
                                                                               'estado'          => "Activo"));

                            //OBTENGO EL CONTACTO DE LA PERSONA QUE ASIGNO EL CASO
                            if($infoPersonaFormaContacto)
                            {
                                $to[] = $infoPersonaFormaContacto->getValor(); //Correo Persona Asignada
                            }

                            $formaContactoAlias = $this->emComercial->getRepository('schemaBundle:AdmiFormaContacto')
                                                                    ->findOneBy(array('descripcionFormaContacto'  => "Alias",
                                                                                      'estado'                    => "Activo"));

                            $infoPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                                                             ->findOneBy(array( 'personaId'       => $persona->getId(),
                                                                                'formaContactoId' => $formaContactoAlias->getId(),
                                                                                'estado'          => "Activo"));

                            //OBTENGO LA FORMA DE CONTACTO ALIAS
                            if($infoPersonaFormaContacto)
                            {
                                $to[] = $infoPersonaFormaContacto->getValor(); //Correo Persona Asignada
                            }
                        }//if($persona->getId() != $infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]->getRefAsignadoId())
                    }
                }//if($infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]->getRefAsignadoId())

                $asunto = "Finalizacion de Tarea";

                //OBTENCION DEL CANTON DEL ENCARGADO DE LA TAREA
                $empresa = '';

                if($departamento)
                {
                    $empresa        = $departamento->getEmpresaCod();
                    $departamento   = $departamento->getId();
                }
                else
                {
                    $departamento = '';
                }

                if($infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]->getPersonaEmpresaRolId())
                {
                    $infoPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                  ->find($infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]->getPersonaEmpresaRolId());
                }

                if($infoPersonaEmpresaRol)
                {
                    $oficina = $this->emComercial->getRepository('schemaBundle:InfoOficinaGrupo')
                                    ->find($infoPersonaEmpresaRol->getOficinaId()->getId());
                    $canton  = $oficina->getCantonId();
                }
                else
                {
                    $canton = '';
                }

                if($perteneceCaso == "NO")
                {
                   $perteneceCaso = "NO";
                }
                else
                {
                   $perteneceCaso = $idCaso != "" ? 'true' : 'false';
                }

                //Se valida si debe mostrar las coordenadas en la notificacion de finalizar tarea que sera enviada a GIS
                if($bandCoordenadas == "S")
                {
                    if($canton)
                    {
                        $parametroCorreo = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('DESTINATARIOS PERMITIDOS COORDENADAS MANGAS','SOPORTE','CASO','CORREO PERMITIDO NOTIFICACION',
                                                         '',$canton,'','','','');

                        if($idTarea)
                        {
                            $tareaId = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')->findOneByNombreTarea($idTarea);

                            $parametroTarea = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                   ->getOne('TAREAS_PERMITIDAS_INGRESAR_COORDENADAS','SOPORTE','CASO','TAREA SELECCIONAR COORDENADA',
                                                            $tareaId->getId(),'','','','','');

                            if($parametroTarea)
                            {
                                if ($parametroTarea["valor3"] == "S")
                                {
                                    if($parametroCorreo)
                                    {
                                        $to[]= $parametroCorreo["valor1"];
                                    }
                                }
                            }
                        }
                    }
                }

                $intIdTareaParam  =  $intIdFinTarea;
                if($intIdFinTarea === null)
                {
                    $intIdTareaParam = $idTarea;
                }
                try
                {
                    $arrayParametrizado = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get(
                                                                        'CATEGORIA_TAREA',
                                                                        '','','CATEGORIAS DE LAS TAREAS','','',
                                                                        $intIdTareaParam,'',
                                                                        $intIdDepartamento,
                                                                        '',''
                                                                    );
                }
                catch(\Exception $e)
                {
                    throw new \Exception("No se ha podido obtener las categorias de las tareas.");
                }

                /***********************************************************************
                     USO DE SERVICE ENVIOPLANTILLA PARA GESTION DE ENVIO DE CORREOS
                 ***********************************************************************/
                if(is_object($objTarea))
                {
                    $strNombreProceso = $objTarea->getProcesoId()->getNombreProceso();
                }

                $asunto = $asunto . " | PROCESO: ".$strNombreProceso;

                if(!empty($arrayParametrizado))
                {
                    $asunto           = "Finalizacion de Tarea";
                    $strValor1        = !empty($arrayParametrizado[0]['valor1']) ? $arrayParametrizado[0]['valor1'] : "";
                    $strValor2        = !empty($arrayParametrizado[0]['valor2']) ? $arrayParametrizado[0]['valor2'] : "";
                    $strNombreProceso = $strValor1. " - ".$strValor2;
                    $asunto           = $asunto . " | PROCESO: ".$strNombreProceso;
                }

                $parametros = array(
                                    'idCaso'            => $idCaso,
                                    'idDetalle'         => $idDetalle,
                                    'perteneceACaso'    => $perteneceCaso,
                                    'numeracion'        => $numeracion,
                                    'referencia'        => $numeracionReferencia,
                                    'asignacion'        => $infoDetalleAsignacion[count($infoDetalleAsignacion) - 1],
                                    'persona'           => $persona ? $persona : false,
                                    'nombreProceso'     => $strNombreProceso,
                                    'nombreTarea'       => $objTarea->getNombreTarea() ? $objTarea->getNombreTarea() : '',
                                    'estado'            => 'Finalizada',
                                    'empleadoLogeado'   => $empleado,
                                    'empresa'           => $prefijoEmpresa,
                                    'clientes'          => $clientes,
                                    'observacion'       => $observacion,
                                    'bandCoordenadas'   => $bandCoordenadas,
                                    'obsCoordenadas'    => $observacionCoordenadas
                                   );
                $enviaNotificacion = true;
                //Se agrega validacion para TN Y MD, para que se envie la notificacion es necesario que llegue un departamento
                if($prefijoEmpresa == "TN" || $prefijoEmpresa == "MD" || $prefijoEmpresa == "EN")
                {
                    if($departamento)
                    {
                        $enviaNotificacion = true;
                    }
                    else
                    {
                        $enviaNotificacion = false;
                    }
                }

                if($enviaNotificacion)
                {
                    $this->envioPlantilla->generarEnvioPlantilla($asunto, $to, 'TAREAFINALIZA', $parametros, $empresa, $canton, $departamento);
                }

                if(!empty($strOrigenComunicacion))
                {
                    $intIdClase = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                                                       ->findOneBy(array('nombreClaseDocumento' => 'Registro Interno'));
                }
                else
                {
                    $intIdClase = $this->emComunicacion->getRepository('schemaBundle:AdmiClaseDocumento')->find(5);
                }
                
                

                $infoDocumento = new InfoDocumento();
                $infoDocumento->setMensaje('Finalizacion de Tarea perteneciente ' . $numeracionReferencia);
                $infoDocumento->setNombreDocumento("Finalizacion de Tarea");
                $infoDocumento->setClaseDocumentoId($intIdClase);
                $infoDocumento->setFeCreacion(new \DateTime('now'));
                $infoDocumento->setEstado("Activo");
                $infoDocumento->setUsrCreacion($usrCreacion);
                $infoDocumento->setIpCreacion($ipCreacion);
                $infoDocumento->setEmpresaCod($codEmpresa);
                $this->emComunicacion->persist($infoDocumento);
                $this->emComunicacion->flush();


                $asignadoId    = $infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]->getAsignadoId();
                $refAsignadoId = $infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]->getRefAsignadoId();

                //existe asignado, obtener fecha de apertura
                //obtener fecha ultima asignacion
                $fechaUltimaAsignacion = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                         ->getUltimaFechaAsignacion($idDetalle, $refAsignadoId , $asignadoId);

                if(isset($fechaUltimaAsignacion[0]['fecha']) && $fechaUltimaAsignacion[0]['fecha']!="")
                {
                    $fechaEjecucion = $fechaUltimaAsignacion[0]['fecha'];

                    $fecha          = explode(" ", $fechaEjecucion);
                    $fech           = explode("-", $fecha[0]);
                    $hora           = explode(":", $fecha[1]);
                    $fechaApertura  = $fech[2] . "-" . $fech[1] . "-" . $fech[0];
                    $horaApertura   = $hora[0] . ":" . $hora[1];
                }
                
                if(!empty($strOrigenComunicacion))
                {
                      $entityFormaContacto = $this->emComercial->getRepository("schemaBundle:AdmiFormaContacto")
                                                         ->findOneBy(array('descripcionFormaContacto' => $strOrigenComunicacion,
                                                                           'estado'                   => 'Activo'));
                }  
                else
                {
                         
                      $entityFormaContacto = $this->emComercial->getRepository("schemaBundle:AdmiFormaContacto")
                                                         ->findOneBy(array('descripcionFormaContacto' => 'Correo Electronico',
                                                                           'estado'                   => 'Activo'));
                            
                }
                

                //info comunicacion
                $infoComunicacion = new InfoComunicacion();
                $infoComunicacion->setFormaContactoId($entityFormaContacto->getId());
                $infoComunicacion->setRemitenteId($infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]->getRefAsignadoId());
                $infoComunicacion->setRemitenteNombre($infoDetalleAsignacion[count($infoDetalleAsignacion) - 1]->getRefAsignadoNombre());
                $infoComunicacion->setClaseComunicacion("Enviado");
                $infoComunicacion->setCasoId($idCaso);
                $infoComunicacion->setDetalleId($idDetalle);
                $fecha = date_create(date('Y-m-d H:i', strtotime($fechaApertura . ' ' . $horaApertura)));
                $infoComunicacion->setFechaComunicacion($fecha);
                $infoComunicacion->setEstado("Activo");
                $infoComunicacion->setFeCreacion(new \DateTime('now'));
                $infoComunicacion->setUsrCreacion($usrCreacion);
                $infoComunicacion->setIpCreacion($ipCreacion);
                $infoComunicacion->setEmpresaCod($codEmpresa);
                $this->emComunicacion->persist($infoComunicacion);
                $this->emComunicacion->flush();

                $infoDocumentoComunicacion = new InfoDocumentoComunicacion();
                $infoDocumentoComunicacion->setComunicacionId($infoComunicacion);
                $infoDocumentoComunicacion->setDocumentoId($infoDocumento);
                $infoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
                $infoDocumentoComunicacion->setEstado('Activo');
                $infoDocumentoComunicacion->setUsrCreacion($usrCreacion);
                $infoDocumentoComunicacion->setIpCreacion($ipCreacion);
                $this->emComunicacion->persist($infoDocumentoComunicacion);
                $this->emComunicacion->flush();

                //Se verifica si quedan tareas abiertas y tareas que dieron solucion
                //que permitira poder cerrar el caso.
                $tareasAbiertas = $this->emSoporte->getRepository("schemaBundle:InfoCaso")->getCountTareasAbiertas($idCaso, 'Abiertas');

                $tareasSolucionadas = $this->emSoporte->getRepository("schemaBundle:InfoCaso")->getCountTareasAbiertas($idCaso, 'FinalizadasSolucion');

                $status = "OK";
                $mensaje = "se cerró la tarea!";

                if($idCaso)
                    $infoCaso      = $this->emSoporte->getRepository("schemaBundle:InfoCaso")->find($idCaso);
                //Se obtiene parametro para verificar si se puede o no presentar la ventana para cerrar el caso
                $paramTipoCaso = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                 ->getOne('TIPO CASO FINALIZAR TAREA','','','','','','','');

                $presentar = "1";
                if($infoCaso)
                {
                    if($infoCaso->getTipoCasoId() == $paramTipoCaso['valor1'])
                    {
                        $presentar = "0";
                    }
                    else
                    {
                        $presentar = "1";
                    }
                }
                $arrayResultado = array (
                                            'status'                => $status,
                                            'mensaje'               => $mensaje,
                                            'success'               => true,
                                            'esSolucion'            => $stringEsSolucion,
                                            'tareasAbiertas'        => $tareasAbiertas,
                                            'tareasSolucionadas'    => $tareasSolucionadas ,
                                            'presentar'             => $presentar
                                        );
                
                //Inicio del ingreso del progreso   
                if($booleanRegistroActivos && ($idCaso || $boolEsInterdep))
                {           
                    $strParametroRegularizar    = "";
                    $strParametroOrigenWeb      = "";
                    //---------------------------------------------------------------------*/
                    $arrayParametroRegularizar = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne('PROGRESO_REGULARIZACION', 
                                '', 
                                '', 
                                '', 
                                '', 
                                '', 
                                '', 
                                ''
                            );
        
                    if (is_array($arrayParametroRegularizar))
                    {
                        $strParametroRegularizar = !empty($arrayParametroRegularizar['valor1']) ? $arrayParametroRegularizar['valor1'] : "";
                    }
        
                    $arrayParametroOrigenWeb = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne('ORIGEN_WEB', 
                                '', 
                                '', 
                                '', 
                                '', 
                                '', 
                                '', 
                                ''
                            );
        
                    if (is_array($arrayParametroOrigenWeb))
                    {
                        $strParametroOrigenWeb = !empty($arrayParametroOrigenWeb['valor1']) ? $arrayParametroOrigenWeb['valor1'] : "";
                    }
        
                    $arrayParametrosTarea = array(
                                                    'strCodEmpresa'        => $codEmpresa,
                                                    'intIdTarea'           => $intComunicacionId,
                                                    'intIdDetalle'         => $idDetalle,
                                                    'strCodigoTipoProgreso'=> $strParametroRegularizar,
                                                    'strOrigen'            => $strParametroOrigenWeb,
                                                    'strUsrCreacion'       => $usrCreacion,
                                                    'strIpCreacion'        => $ipCreacion);
        
                    //COMUNICACION CON LA CAPA DE NEGOCIO (SERVICE)-------------------------*/
                    $arrayRespuestaProg = $this->ingresarProgresoTarea($arrayParametrosTarea);
                    $strStatus      = $arrayRespuestaProg['status'];
        
                    if($strStatus != "OK")
                    {
                        $strMensaje = "No se pudo ingresar el progreso de la tarea, favor notificar a Soporte Sistemas.";
                        $arrayResultado = array('status' => $strStatus, 'mensaje' => $strMensaje, 'success' => false);
                    }
                } 

                if(!empty($intIdMotivoFinaliza) && $intIdMotivoFinaliza != 0)
                {
                    $objAdmiCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                    ->findOneByDescripcionCaracteristica('MOTIVO_FINALIZA_TAREA');
                    if (is_object($objAdmiCaracteristica))
                    {
                        $objInfoTareaCaracteristica = new InfoTareaCaracteristica();
                        $objInfoTareaCaracteristica->setTareaId($intComunicacionId);
                        $objInfoTareaCaracteristica->setDetalleId($idDetalle);
                        $objInfoTareaCaracteristica->setCaracteristicaId($objAdmiCaracteristica->getId());
                        $objInfoTareaCaracteristica->setFeCreacion(new \DateTime('now'));
                        $objInfoTareaCaracteristica->setUsrCreacion($usrCreacion);
                        $objInfoTareaCaracteristica->setIpCreacion($ipCreacion);
                        $objInfoTareaCaracteristica->setValor($intIdMotivoFinaliza);
                        $objInfoTareaCaracteristica->setEstado('Activo');
                        $this->emSoporte->persist($objInfoTareaCaracteristica);
                        $this->emSoporte->flush();
                    }
                }

                if( $idCaso != ""  && $strEsHal === "S" && $intIdMotiCierreCaso != 0 )
                {
                    $objAdmiCaracteCasoHal = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                    ->findOneByDescripcionCaracteristica('HIPOTESIS_CIERRE_CASO_HAL');
                    if (is_object($objAdmiCaracteCasoHal))
                    {
                        $objInfoTareaCaracteristicaHal = new InfoTareaCaracteristica();
                        $objInfoTareaCaracteristicaHal->setTareaId($intComunicacionId);
                        $objInfoTareaCaracteristicaHal->setDetalleId($idDetalle);
                        $objInfoTareaCaracteristicaHal->setCaracteristicaId($objAdmiCaracteCasoHal->getId());
                        $objInfoTareaCaracteristicaHal->setFeCreacion(new \DateTime('now'));
                        $objInfoTareaCaracteristicaHal->setUsrCreacion($usrCreacion);
                        $objInfoTareaCaracteristicaHal->setIpCreacion($ipCreacion);
                        $objInfoTareaCaracteristicaHal->setValor($intIdMotiCierreCaso);
                        $objInfoTareaCaracteristicaHal->setEstado('Activo');
                        $this->emSoporte->persist($objInfoTareaCaracteristicaHal);
                        $this->emSoporte->flush();
                    }
                }

                $boolEsHal = $this->emSoporte->getRepository('schemaBundle:InfoPersona')
                                             ->isHalTraking(array( 'strLoginUsuario' => $usrCreacion));
                
                if($boolEsHal)
                {
                    
                    $strCommand = 'nohup php /home/telcos/app/console Envia:Tracking ';
                    $strCommand = $strCommand . escapeshellarg($usrCreacion). ' ';
                    $strCommand = $strCommand . escapeshellarg($ipCreacion). ' ';
                    $strCommand = $strCommand . '"Tarea Finalizada" ';
                    $strCommand = $strCommand . escapeshellarg($idDetalle). ' ';

                    $strCommand = $strCommand .'>/dev/null 2>/dev/null &';
                    shell_exec($strCommand);
                }

            }
            else
            {
                $arrayResultado = array('status'=>"OK",'success'=>true,'mensaje'=>"cerrada");
            }          
        }
        catch(\Exception $e)
        {
            if ($this->emComunicacion->getConnection()->isTransactionActive())
            {
                $this->emComunicacion->getConnection()->rollback();
            }

            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }

            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
            }

            $this->serviceUtil->insertLog(array(
                'enterpriseCode'   => $codEmpresa,
                'logType'          =>  1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => 'SoporteService',
                'appMethod'        => 'finalizarTarea',
                'descriptionError' => $e->getMessage(),
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayParametros),
                'creationUser'     =>  $usrCreacion));


            $status             = "ERROR";
            $mensaje            = $e->getMessage();
            $respuestaFinal     = array('status' => $status, 'mensaje' => $mensaje, 'success' => false);
            return $respuestaFinal;
        }

        //*DECLARACION DE COMMITS*/
        if ($this->emComunicacion->getConnection()->isTransactionActive())
        {
            $this->emComunicacion->getConnection()->commit();
        }

        $this->emComunicacion->getConnection()->close();

        if ($this->emSoporte->getConnection()->isTransactionActive())
        {
            $this->emSoporte->getConnection()->commit();
        }

        $this->emSoporte->getConnection()->close();
        
        if ($this->emComercial->getConnection()->isTransactionActive())
        {
            $this->emComercial->getConnection()->commit();
        }
        
        $this->emComercial->getConnection()->close();

        $this->emGeneral->getConnection()->close();
        //*----------------------------------------------------------------------*/

        //ACTUALIZA TAREA EN INFO_TAREA
        $arrayParametrosInfoTarea['intDetalleId'] = $arrayParametros['idDetalle'];
        $arrayParametrosInfoTarea['strUsrUltMod'] = $arrayParametros['usrCreacion'];
        $this->actualizarInfoTarea($arrayParametrosInfoTarea);

        if (!$boolEsAppSyscloud)
        {
            //Proceso para indicar la finalización de la tarea en Sys Cloud-Center.
            $this->objProcesoService->notificarCambioEstadoSysCloud(array('intIdComunicacion' => $intComunicacionId,
                                                                          'strObservacion'    => $observacion,
                                                                          'strCodEmpresa'     => $codEmpresa,
                                                                          'strUser'           => $usrCreacion,
                                                                          'strIp'             => $ipCreacion));
        }

        //SE REALIZA LA CONSULTA SI ESTA TAREA ES DE UN PAQUETE DE HORAS SOPORTE.
        if( isset($intComunicacionId) && !empty($intComunicacionId) && is_object($this->emSoporte) && isset($this->emSoporte)
            && !empty($codEmpresa) )
        {
            $strInformacionTarea = $this->emSoporte->getRepository('schemaBundle:GestionPaqueteSoporte')
                                        ->findTipoTareaByNumeroTarea($intComunicacionId);

            //SI ES ASÌ, SE REALIZA LA LLAMADA AL PROCEDIMENTO PARA LA CREACIÒN DE UN SOPORTE.
            if(($codEmpresa =='10') && ($strInformacionTarea))
            {
                // En este mismo PR: Recalcular los tiempos del paquete de horas
                // En este mismo PR: Envio de notificacion al cliente con el reporte del paquete de horas
                $arrayTmpParametros = array( 'tarea_id' => $intComunicacionId
                                        ,'detalle_id' => $idDetalle
                                                );
                $this->emSoporte->getRepository('schemaBundle:GestionPaqueteSoporte')
                                            ->ingresaSoportePaqueteSoporte( $arrayTmpParametros );
            }
        }

        return $arrayResultado;
    }

    /**
     * Funcion que sirve para guardar y actualizar el evento de tareaTiempo
     *
     * @author Wilmer Vera <wvera@telconet.ec>
     *
     * @version 1.0 12-18-2017
     */
    public function saveInfoTareaTiempo($arrayParametros){
        try{
            $objInfoTareaTiempo = null ;
            if(!is_null($arrayParametros['intId'])){
                $objInfoTareaTiempo = $this->emSoporte->getRepository('schemaBundle:InfoTareaTiempo')
                    ->find($arrayParametros['intId']);
            }
            if(is_null($objInfoTareaTiempo)){
                $objInfoTareaTiempo = new InfoTareaTiempo();
                $objInfoTareaTiempo->setUsrCreacion($arrayParametros['strUserId']);
                $objInfoTareaTiempo->setFeCreacion(new \DateTime('now'));
                $objInfoTareaTiempo->getIpCreacion($arrayParametros['strImei']);
            }

            //FK observacion
            $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                ->find($arrayParametros['intDetalleId']);
            $objInfoTareaTiempo->setDetalleId($objInfoDetalle);


            $objInfoTareaTiempo->setTotalTiempoAsignada($arrayParametros['intTotalTiempoAsignada']);
            $objInfoTareaTiempo->setTotalTiempoAceptada($arrayParametros['intTotalTiempoAceptada']);
            $objInfoTareaTiempo->setTotalTiempoPausada($arrayParametros['intTotalTiempoPausada']);
            $objInfoTareaTiempo->setTotalTiempoReprogramada($arrayParametros['intTotalTiempoReprogramada']);

            $objInfoTareaTiempo->setDetHistorialIdUltAsignadda($arrayParametros['intDetHistIdUltAsignada']);
            $objInfoTareaTiempo->setDetHistorialIdUltAceptada($arrayParametros['intDetHistIdUltAceptada']);
            $objInfoTareaTiempo->setDetHistorialIdUltPausada($arrayParametros['intDetHistIdUltPausada']);
            $objInfoTareaTiempo->setDetHistorialIdUltReprogramada($arrayParametros['intDetHistIdUltReprogramada']);

            $objInfoTareaTiempo->setEstado($arrayParametros['strEstado']);
            $objInfoTareaTiempo->setIpCreacion($arrayParametros['strIpCreacion']);
            $objInfoTareaTiempo->setUsrUltMod($arrayParametros['strUsrUltMod']);

            $objInfoTareaTiempo->setFeUltMod(new \DateTime('now'));
            $objInfoTareaTiempo->getIpUltMod($arrayParametros['strImei']);

            $this->emSoporte->persist($objInfoTareaTiempo);
            $this->emSoporte->flush();

        }catch (Exception $e ){
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }
            $status             = "ERROR";
            $mensaje            = $e->getMessage();
            $respuestaFinal     = array('status' => $status, 'mensaje' => $mensaje, 'success' => false);
            return $respuestaFinal;
        }
        $arrayResultado = array('success' => true, 'mensaje' => 'Ok');
        return  $arrayResultado;
    }


     /**
     * Función que sirve para cerrar el caso
     * 
     * @author Modificado: Jose Bedon <jobedon@ŧelconet.ec>
     * @version 3.8 15-07-2021 - Se valida que el caso no se encuentre ya cerrado
     *
     * @author Modificado: Andrés Montero Holguin. <amontero@telconet.ec>
     * @version 3.7 18-03-2021 - Se agrega validación que si el departamento en sesión esta parametrizado como DEPARTAMENTOS_REPLICAR_CASOS_TAREAS
     *                           no cierre las asignaciones que se encuentren asociados al caso.
     * 
     * @author Modificado: Jose Bedon <jobedon@ŧelconet.ec>
     * @version 3.6 15-01-2021 - Se agrega detalle del historico de tareas en los
     *                           correos de cierre de caso
     *
     * @author Modificado: Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 3.5 11-01-2021 - En los parámetros que se envían a controlarInformeEjecutivo se 
     *                           sustituye el tiempo de incidencia por tiempo de empresa.
     * @author Modificado: Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 3.4 29-12-2020 - Se agrega código para validar solicitud automática de
     *                           informe ejecutivo
     * 
     * @author Modificado: Néstor Naula <nnaulal@telconet.ec>
     * @version 3.3 02-09-2019 - Se cambia el mensaje de respuesta cuando se procesa correctamente el cierre del caso
     *                           de 'Se Cerro el Caso' a 'Se cerró el caso'
     * @since 3.2
     * 
     * @author Modificado: Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 3.2 10-06-2019 - Se modifica la validación que obtiene la ultima tarea marcada como solución
     *                           para controlar el escenario de las tareas canceladas o anuladas y poder seguir
     *                           con el flujo del cierre del caso.
     *
     * @author Modificado: Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 3.1 22-04-2019 - Se realiza la modificación en el cálculo de los tiempos para el cierre del caso, y de esta manera
     *                           obtener los tiempos reales solo tomando la ultima tarea que dio solución al caso.
     *
     * @author Modificado: Andrés Montero <amontero@telconet.ec>
     * @version 2.7 01-02-2019 - Se agrega programación que cambia a estado “Cerrado” las asignaciones que 
     *                           tienen sus casos relacionados en estado “Cerrado”
     * 
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 3.0 07-02-2019 -  Para poder obtener los alias configurados en las notificaciones se valida que la empresa de creación
     *                            del caso sea TN
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.9 05-02-2019 -  Se realizan ajustes en la programación para enviar solo las notificaciones de TN a los alias de L1 y L2
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.8 06-11-2018 -  Se realizan ajustes en la programación que enviá la notificación a clientes en casos Backbone, el cambio
     *                            consiste en que solo se considere los afectados que tengan seleccionado un switch y una interfaz
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.1 29-10-2018 -  Se realizan ajustes en la programación para habilitar notificaciones al departamento de NOC, solo para casos
     *                            tipo Backbone
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.0 09-10-2018 -  Se realizan ajustes en la programación para habilitar las notificaciones a clientes, para los casos tipo Backbone
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.9 28-03-2017  Se agrega la dirección,descripción del punto y tipo de caso en la notificación de cerrar caso
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.8 10-03-2017  Se realizan ajustes para enviar SMS a los casos de Tipo Tecnico y Arcotel
     *
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 18-01-2017 Se agrega como parámetro el login del afectado para que sea mostrada en la plantilla con código CASOCERRAR_CLIE
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.6 11-11-2016 Se realizan en el calculo de tiempo de casos, por implementacion de botones de iniciar,pausar
     *                         y reanudar tareas
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.5 25-08-2016 Se realizan ajustes para agregar el login afectado en la notificacion que se envia al cliente
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.4 07-07-2016 Se realizan ajustes para que no se notifique al cliente cuando es caso sin afectacion
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 05-07-2016 Se valida que si ingresan caracteres de apertura y cierre de tags en la observacion, se eliminan
     *
     * @author modificado Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 23-06-2016 Se realizan ajustes para que los correos que se envien a los clientes sean solo de Contactos Tecnicos
     *
     * @author modificado Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 25-05-2016 Se realizan ajustes para poder actualizar el tipo de afectacion al cerrar del caso
     *
     * @author Francisco Adum <fadum@telconet.ec>
     * @version 1.0 22-07-2015
     * @param array $arrayParametros
     * @return array $arrayResultado
     */
    public function cerrarCaso($arrayParametros)
    {
        $codEmpresa             = $arrayParametros['idEmpresa'];
        $prefijoEmpresa         = $arrayParametros['prefijoEmpresa'];
        $idCaso                 = $arrayParametros['idCaso'];
        $fechaCierre            = $arrayParametros['fechaCierre'];
        $horaCierre             = $arrayParametros['horaCierre'];
        $tituloFinalHipotesis   = $arrayParametros['tituloFinalHipotesis'];
        $versionFinalHipotesis  = $arrayParametros['versionFinalHipotesis'];
        $usrCreacion            = $arrayParametros['usrCreacion'];
        $ipCreacion             = $arrayParametros['ipCreacion'];
        $idDepartamento         = $arrayParametros['idDepartamento'];
        $idEmpleado             = $arrayParametros['idEmpleado'];
        $empleado               = $arrayParametros['empleado'];
        $tipo_afectacion        = $arrayParametros['tipo_afectacion'];
        $intPersonaEmpresaRol   = $arrayParametros['intPersonaEmpresaRol'];
        $strDireccionPunto      = "";
        $strDescripcionPunto    = "";
        $strTipoCaso            = "";
        $strCadenaContactos     = "";
        $arrayPuntosBackbone    = array();
        $arrayPuntosBackboneTotal = array();
        $arrayPuntosNotificar     = array();
        $arrayPuntosBackboneElemento = array();
        $arrayPuntosBackboneCliente  = array();
        $arrayEstadosServicio   = array('Activo','In-Corte');
        $arrayRazonesSocial     = array();
        $arrayBackboneTotalElemento = array();
        $arrayBackboneTotalCliente  = array();
        $arrayParamCorreosNoc       = array();
        $arrayCorreosNoc            = array();
        $arrayParamCorreosCliente   = array();
        $arrayCorreos               = array();
        $strLoginBackAfectado       = "";
        $intMinutosTotalCaso        = 0;
        $strMensajeError            = "";

        $strGuardar            = $arrayParametros['strGuardar'];
        $strIndisponibilidadI  = $arrayParametros['strIndisponibilidadI'];
        $strTipoI              = $arrayParametros['strTipoI'];
        $intTiempoAfectacionI  = $arrayParametros['intTiempoAfectacionI'];
        $strMasivoI            = $arrayParametros['strMasivoI'];
        $intComboResponsableI  = $arrayParametros['intComboResponsableI'];
        $intClientesAfectadosI = $arrayParametros['intClientesAfectadosI'];
        $strObservacionesI     = $arrayParametros['strObservacionesI'];
        $strOltI               = $arrayParametros['strOltI'];
        $strPuertoI            = $arrayParametros['strPuertoI'];
        $strCajaI              = $arrayParametros['strCajaI'];
        $strSplitterI          = $arrayParametros['strSplitterI'];
        $intIdHipotesisInicialI = $arrayParametros['intIdHipotesisInicialI'];   
        
        $arrayNotificaPush  = array();
        $strTipoProcesoNotif = "CierreCaso";


        if($prefijoEmpresa == 'TTCO')
        {
            $fecha  = explode("T", $fechaCierre);
            $hora   = explode("T", $horaCierre);
            $date   = date_create(date('Y-m-d H:i', strtotime($fecha[0] . ' ' . $hora[1])));
        }
        else
        {
            $date = new \DateTime('now'); //Fecha de finalización del caso.
        }

        //Inicio de Transacciones
        $this->emComunicacion->getConnection()->beginTransaction();
        $this->emSoporte->getConnection()->beginTransaction();

        try
        {
            $caso = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->find($idCaso);

            //Se valida que el caso no se encuentre cerrado
            $arrayInfoCasoHistorial = $this->emSoporte->getRepository('schemaBundle:InfoCasoHistorial')
                                    ->findBy(array('casoId' => $caso),
                                             array ("id"    => "DESC"));
            
            if (!empty($arrayInfoCasoHistorial) && count($arrayInfoCasoHistorial) > 0 &&
                strtolower($arrayInfoCasoHistorial[0]->getEstado()) === 'cerrado')
            {
                throw new \Exception("Error : El caso " . $caso->getNumeroCaso() . " ya se encuentra cerrado");
            }

            //Cierre del caso.
            $caso->setTituloFinHip($this->eliminarSimbolosDeTags($tituloFinalHipotesis));
            $caso->setVersionFin($this->eliminarSimbolosDeTags($versionFinalHipotesis));
            $caso->setFeCierre($date);
            $caso->setTipoAfectacion($tipo_afectacion ? $tipo_afectacion : 'CAIDA');
            $this->emSoporte->persist($caso);
            $this->emSoporte->flush();

            //OBTIENE PARAMETROS DE LOS DEPARTAMENTOS HABILITADOS PARA REPLICAR CASOS AL MODULO DE GESTION DE PENDIENTES
            $arrayParamReplicarAgestionPend = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->get(
                                                                    'DEPARTAMENTOS_REPLICAR_CASOS_TAREAS',
                                                                    'SOPORTE','','','','','','','',
                                                                    $codEmpresa,''
                                                                );
            $boolReplicarAgestionPend = false;

            foreach($arrayParamReplicarAgestionPend as $arrayDptos)
            {   
                if($idDepartamento == intval($arrayDptos['valor1']))
                {
                    $boolReplicarAgestionPend = true;
                    break;
                }
            }

            //Verifica si el caso esta ligado a asignaciones del módulo agente.
            //Si encuentra asignaciones las cambia a estado Cerrado.
            $arrayAsignacionesModuloAgente = $this->emSoporte->getRepository('schemaBundle:InfoAsignacionSolicitud')
                                                             ->findBy(array('referenciaId'=>strval($caso->getId()),'estado'=>'EnGestion'));
            if( isset($arrayAsignacionesModuloAgente) && !$boolReplicarAgestionPend)
            {
                foreach($arrayAsignacionesModuloAgente as $objAsignacionModuloAgente)
                {
                    $arrayParametrosAsigModAgente['intIdAsignacion']  = $objAsignacionModuloAgente->getId();
                    $arrayParametrosAsigModAgente['strEstado']        = 'Cerrado';
                    $arrayParametrosAsigModAgente['strNombreReporta'] = null;
                    $arrayParametrosAsigModAgente['strNombreSitio']   = null;
                    $arrayParametrosAsigModAgente['strDatoAdicional'] = null;
                    $arrayParametrosAsigModAgente['strUsrAsignado']   = null;
                    $arrayParametrosAsigModAgente['strUsrUltMod']     = $usrCreacion;
                    $arrayParametrosAsigModAgente['dateFeUltMod']     = new \DateTime('now');
                    $arrayParametrosAsigModAgente['strIpUltMod']      = $ipCreacion;
                    $this->modificarAsignacionSolicitud($arrayParametrosAsigModAgente);
                }
            }

            /*
             * Cálculamos el tiempo total del caso que es:
             * La fecha de finalización menos la fecha de apertura.
             */
            $objDiferenciaFechasCC = $date->diff($caso->getFeApertura());
            $intMinutosTotalCaso  += $objDiferenciaFechasCC->days * 24 * 60;
            $intMinutosTotalCaso  += $objDiferenciaFechasCC->h * 60;
            $intMinutosTotalCaso  += $objDiferenciaFechasCC->i;

            //Obtenemos la cantidad de tareas abiertas.
            $intNumeroTareas = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                    ->getCountTareasAbiertas($idCaso, 'Todas');

            //Obtenemos la ultima tarea que da solución al caso.
            $arrayDatosTarea = $this->emSoporte->getRepository('schemaBundle:InfoTareaTiempoParcial')
                    ->getUltimaTareaSolucion(array ('intIdCaso' => $idCaso));

            //Almacenamos el error en caso que exista.
            if ($arrayDatosTarea['status'] === 'fail' && !empty($arrayDatosTarea['message']))
            {
                $this->serviceUtil->insertError('Telcos+',
                                                'SoporteService->cerrarCaso',
                                                 $arrayDatosTarea['message'].
                                                    ' - Numero de Caso: '.$caso->getNumeroCaso(),
                                                 $usrCreacion,
                                                 $ipCreacion);

                $strMensajeError = "Error : No se pudo obtener los datos para el cálculo de los tiempos del caso. ".
                                   "Número de caso: ".$caso->getNumeroCaso();

                throw new \Exception($strMensajeError);
            }

            if ($intNumeroTareas > 0 && $arrayDatosTarea['status'] === 'ok' && !empty($arrayDatosTarea['result']))
            {
                //Resultado de la ultima tarea marcada como solución
                $arrayDatosUltimaTarea = $arrayDatosTarea['result'][0];

                /*
                 * Cálculamos el tiempo de incidencia del caso que es:
                 * La fecha de finalización de la ultma tarea que dio solución menos
                 * la fecha de apertura del caso
                 */
                $objDiferenciaTi = $arrayDatosUltimaTarea['feFinaliza']->diff($caso->getFeApertura());
                $intMinutosTi    = $objDiferenciaTi->days * 24 * 60;
                $intMinutosTi   += $objDiferenciaTi->h * 60;
                $intMinutosTi   += $objDiferenciaTi->i;

                if ($tipo_afectacion == 'SINAFECTACION')
                {
                    /*
                     * Si el tipo de afectación es *SINAFECTACION* y el número de tareas es mayor a cero,
                     * se le recarga todo el tiempo al cliente.
                     */
                    $intTiempoCliente  = $intMinutosTi;
                    $intTiempoEmpresa  = 0;
                    $intTiempoSolucion = $intTiempoCliente;
                }
                else
                {
                    $objInfoTareaTiempoAsignacion = $this->emSoporte->getRepository('schemaBundle:InfoTareaTiempoAsignacion')
                            ->findOneBy(array('detalleId'  => $arrayDatosUltimaTarea['idDetalle']),
                                        array('feCreacion' => 'DESC'));

                    if (is_object($objInfoTareaTiempoAsignacion))
                    {
                        $intTiempoCliente = $objInfoTareaTiempoAsignacion->getTiempoCliente();

                        if ($intTiempoCliente === null || $intTiempoCliente === '')
                        {
                            $intTiempoCliente = 0;
                        }
                    }
                    else
                    {
                        //Obtenemos los tiempos de la tarea.
                        $arrayTiemposTarea = $this->emSoporte->getRepository('schemaBundle:InfoTareaTiempoParcial')
                                ->getTiemposTarea(array('intIdDetalle' => $arrayDatosUltimaTarea['idDetalle']));

                        if (($arrayTiemposTarea['status'] === 'ok' && empty($arrayTiemposTarea['result'])) ||
                             $arrayTiemposTarea['status'] === 'fail')
                        {
                            $strMensajeError = "Error : No se puedo obtener los tiempos de la última tarea marcada como solución. ".
                                               "Número de caso: ".$caso->getNumeroCaso();

                            throw new \Exception($strMensajeError);
                        }

                        $arrayTiempos     = $arrayTiemposTarea['result'][0];
                        $intTiempoCliente = $arrayTiempos['cliente'];
                    }

                    /*
                     * Cálculamos el tiempo de empresa que es:
                     * El tiempo de incidencia menos el tiempo del cliente.
                     */
                    $intTiempoEmpresa  = $intMinutosTi - $intTiempoCliente;
                    $intTiempoSolucion = $intTiempoEmpresa;
                }
            }
            elseif ($tipo_afectacion == 'SINAFECTACION')
            {
                /*
                * En caso que el tipo de afectación sea *SINAFECTACION* y el número de tareas sea cero.
                * El tiempo de incidencia será igual al tiempo total del caso y todo el recargo
                * lo tendra el cliente
                */
               $intMinutosTi      = $intMinutosTotalCaso;
               $intTiempoCliente  = $intMinutosTi;
               $intTiempoEmpresa  = 0;
               $intTiempoSolucion = $intMinutosTi;
            }
            else
            {
                /*
                * En caso que el tipo de afectación sea diferente de *SINAFECTACION* y el número de tareas sea cero.
                * El tiempo de incidencia será igual al tiempo total del caso y todo el recargo
                * lo tendra la empresa.
                */
               $intMinutosTi      = $intMinutosTotalCaso;
               $intTiempoCliente  = 0;
               $intTiempoEmpresa  = $intMinutosTi;
               $intTiempoSolucion = $intMinutosTi;
            }

            //Almacenamos los tiempo del caso.
            $tiempoCasos = new InfoCasoTiempoAsignacion();
            $tiempoCasos->setCasoId($idCaso);
            $tiempoCasos->setTiempoTotalCaso($intMinutosTi);
            $tiempoCasos->setTiempoClienteAsignado($intTiempoCliente);
            $tiempoCasos->setTiempoEmpresaAsignado($intTiempoEmpresa);
            $tiempoCasos->setTiempoTotalCasoSolucion($intTiempoSolucion);
            $tiempoCasos->setTiempoTotal($intMinutosTotalCaso);
            $tiempoCasos->setUsrCreacion($usrCreacion);
            $tiempoCasos->setFeCreacion(new \DateTime('now'));
            $this->emSoporte->persist($tiempoCasos);
            $this->emSoporte->flush();

            //Ingresamos en el Historial el cierre del caso.
            $historial = new InfoCasoHistorial();
            $historial->setCasoId($caso);
            $historial->setObservacion("Cierre del caso");
            $historial->setEstado("Cerrado");
            $historial->setFeCreacion(new \DateTime('now'));
            $historial->setUsrCreacion($usrCreacion);
            $historial->setIpCreacion($ipCreacion);
            $this->emSoporte->persist($historial);
            $this->emSoporte->flush();

            $titulo_fin = "N/A";

            if($caso->getTituloFinHip())
            {
                $hipotesis  = $this->emSoporte->getRepository('schemaBundle:AdmiHipotesis')->findOneById($caso->getTituloFinHip());
                $titulo_fin = ($hipotesis ? ($hipotesis->getNombreHipotesis() ? $hipotesis->getNombreHipotesis() : "N/A") : "N/A");
            }
            else
            {
                $titulo_fin = ($caso->getTituloFin() ? $caso->getTituloFin() : "N/A");
            }
            $strTipoCaso = $caso->getTipoCasoId()->getNombreTipoCaso();


            // guardarIndisponibilidad
            if($strGuardar == 'SI')
            {

                $arrayIndisponibilidad = array(
                    'intIdCaso'                  => $idCaso,
                    'strIndisponibilidadI'       => $strIndisponibilidadI,
                    'strTipoI'                   => $strTipoI,
                    'intTiempoAfectacionI'       => $intTiempoAfectacionI,
                    'strMasivoI'                 => $strMasivoI,
                    'intComboResponsableI'       => $intComboResponsableI,
                    'intClientesAfectadosI'      => $intClientesAfectadosI,
                    'strOltI'                    => $strOltI,
                    'strPuertoI'                 => $strPuertoI,
                    'strCajaI'                   => $strCajaI,
                    'strSplitterI'               => $strSplitterI,
                    'strUsrCreacion'                => $usrCreacion,
                    'strIpCreacion'                 => $ipCreacion,
                    'strObservacionesI'          => $strObservacionesI,
                    'intIdHipotesisInicialI'     => $intIdHipotesisInicialI
                );
                
                $this->guardarIndisponibilidad($arrayIndisponibilidad);
                
                if($arrayIndisponibilidad['intIdHipotesisInicialI'] != '')
                {
                    $this->updateHipotesisByCasoId($arrayIndisponibilidad);
                }

            }



            //*************"**********************************************************************
            //************************ ENVIO MAILS Y COMUNICACION ********************************
            //************************************************************************************
            //****************************** CERRAR CASO *****************************************

            $afectados = $objJson = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                    ->getRegistrosAfectadosTotalXCaso($idCaso);

            $ultimo_asignado = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->getUltimaAsignacion($idCaso);

            if($ultimo_asignado && count($ultimo_asignado))
            {
                $departamento = $this->emGeneral->getRepository('schemaBundle:AdmiDepartamento')
                                     ->find($ultimo_asignado->getAsignadoId());

                $empleado = '';
                if($ultimo_asignado->getRefAsignadoId())
                {
                    $empleado = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                    ->find($ultimo_asignado->getRefAsignadoId());
                }
            }
            else
            {
                $departamento = $this->emGeneral->getRepository('schemaBundle:AdmiDepartamento')->find($idDepartamento);

                $empleado = false;
                if($idEmpleado)
                {
                    $empleado = $this->emComercial->getRepository('schemaBundle:InfoPersona')->find($idEmpleado);
                }
            }

            $clase = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")->findOneByNombreClaseDocumento("Notificacion");
            $asunto = "Cierre de Caso " . $caso->getNumeroCaso();

            $infoDocumento = new InfoDocumento();
            $infoDocumento->setClaseDocumentoId($clase);
            $infoDocumento->setMensaje("Se cierra el Caso " . $caso->getNumeroCaso() . ' por ' . $usrCreacion);
            $infoDocumento->setEstado('Activo');
            $infoDocumento->setNombreDocumento($asunto);
            $infoDocumento->setFeCreacion(new \DateTime('now'));
            $infoDocumento->setUsrCreacion($usrCreacion);
            $infoDocumento->setIpCreacion($ipCreacion);
            $infoDocumento->setEmpresaCod($codEmpresa);
            $this->emComunicacion->persist($infoDocumento);
            $this->emComunicacion->flush();

            $infoComunicacion = new InfoComunicacion();
            $infoComunicacion->setCasoId($idCaso);
            $infoComunicacion->setFormaContactoId(5);
            $infoComunicacion->setClaseComunicacion("Enviado");
            $infoComunicacion->setFechaComunicacion(new \DateTime('now'));
            $infoComunicacion->setFeCreacion(new \DateTime('now'));
            $infoComunicacion->setEstado('Activo');
            $infoComunicacion->setUsrCreacion($usrCreacion);
            $infoComunicacion->setIpCreacion($ipCreacion);
            $infoComunicacion->setEmpresaCod($codEmpresa);
            $this->emComunicacion->persist($infoComunicacion);
            $this->emComunicacion->flush();

            $infoDocumentoComunicacion = new InfoDocumentoComunicacion();
            $infoDocumentoComunicacion->setComunicacionId($infoComunicacion);
            $infoDocumentoComunicacion->setDocumentoId($infoDocumento);
            $infoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
            $infoDocumentoComunicacion->setEstado('Activo');
            $infoDocumentoComunicacion->setUsrCreacion($usrCreacion);
            $infoDocumentoComunicacion->setIpCreacion($ipCreacion);
            $this->emComunicacion->persist($infoDocumentoComunicacion);
            $this->emComunicacion->flush();

            if($empleado->getId())
            {
                $infoPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                                                        ->findOneBy(array('personaId'       => $empleado->getId(),
                                                                          'formaContactoId' => 5,
                                                                          'estado'          => "Activo"));

                if($infoPersonaFormaContacto)
                {
                    $to[] = $infoPersonaFormaContacto->getValor(); //Correo Persona Asignada
                }
            }

            /*OBTENCION DEL CANTON DEL ENCARGADO DE LA TAREA*/
            $empresa            = '';
            $nombreDepartamento = '';

            if($departamento)
            {
                $nombreDepartamento = $departamento->getNombreDepartamento();
                $empresa            = $departamento->getEmpresaCod();
                $departamento       = $departamento->getId();
            }
            else
            {
                $departamento = '';
            }

            if($ultimo_asignado)
            {

                $infoPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                              ->find($ultimo_asignado->getPersonaEmpresaRolId());

                if($infoPersonaEmpresaRol->getOficinaId())
                {
                    $oficina = $this->emComercial->getRepository('schemaBundle:InfoOficinaGrupo')
                                    ->find($infoPersonaEmpresaRol->getOficinaId()->getId());
                    $canton  = $oficina->getCantonId();
                }
                else
                {
                    $canton = '';
                }
            }

            //Array de afectados segmentados por afectacion padre y sus detalles
            $arrayAfectados = $this->getAfectacionDetalladaPorCaso($caso->getId());

            //Array de historico de tareas
            $arraySoluciones = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->getTareasSolucionPorCaso([
                                    'idCaso' => $caso->getId()
                                ]);

            /********************************************************************
            USO DE SERVICE ENVIOPLANTILLA PARA GESTION DE ENVIO DE CORREOS
            * ********************************************************************* */
            $parametros = array('caso'            => $caso,
                                'tituloFin'       => $titulo_fin,
                                'afectadoPadre'   => $arrayAfectados['afectadosPadre'],
                                'afectadoDetalle' => $arrayAfectados['afectadosDetalle'],
                                'tieneDetalle'    => $arrayAfectados['tieneDetalle'],
                                'asignacion'      => $ultimo_asignado,
                                'totalMinutos'    => $intTiempoSolucion,
                                'empleadoLogeado' => $empleado,
                                'empresa'         => $prefijoEmpresa,
                                'soluciones'      => $arraySoluciones
                               );

            /*SE BUSCA SI EL CLIENTE ES CANAL TN*/

           $anadirCC = false;
           //Se verifica que no sea masivo
           if(count($afectados) == 1)
           {
               $anadirCC = $this->verificarEsClienteCanalTN($afectados[0]['afectadoId']);
           }

           $this->envioPlantilla->generarEnvioPlantilla($asunto,
                                                        $to,
                                                        'CASOCERRAR',
                                                        $parametros,
                                                        $empresa,
                                                        $canton,
                                                        $departamento,
                                                        null,
                                                        $anadirCC
                                                       );

           /********************************************************************************************
                        ENVIO DE SMS AL CLIENTE CUANDO SE CIERRA EL CASO ABIERTO
            * ******************************************************************************************* */
           if(count($afectados) == 1 || ($prefijoEmpresa == 'TN' && count($afectados) >= 1)
             &&(
                   $prefijoEmpresa =='MD' || 
                   $prefijoEmpresa =='EN' || 
                   ($prefijoEmpresa == 'TN' && 
                   $caso->getTipoAfectacion() != 'SINAFECTACION' &&
                  ($caso->getTipoCasoId()->getNombreTipoCaso() == 'Tecnico' ||
                   $caso->getTipoCasoId()->getNombreTipoCaso() == 'Arcotel'))
             ))
           {
                
                    $host = $this->host;
                    $path = $this->path;

                    $puntoId        = $afectados[0]['afectadoId']; //Se envia el punto del cliente al Java
                    $personaId      = "";            //Se envia el id persona en caso de ser Usuario
                    $destinatario   = "CLI";    //Tipo CLI = clinete o TEC = tecnico
                    $tipoEnvio      = "OUT";    // OUT o IN según el envío/entrada del mensaje
                    $tipoNotifica   = "SMS";    // SMS o CORREO
                    $tipoEvento     = "CLOSE";    // OPEN/CLOSE dependiendo de la accion del Caso
                    $empresa        = $codEmpresa; //id Empresa
                    $usuario        = $usrCreacion;     //Se obtiene el login del user en sesion
                    $casoId         = $caso->getId();    //Se envia el id del caso a gestionar comunicacion
                    $detalleId      = "";     //Se envia el detalle id de la TAREA
                    $asignacion     = "";

                    $strScript = '/home/scripts-telcos/md/soporte/sources/telcos-comunicaciones/dist/TelcosComunicaciones.jar';

                    $strParametros = $puntoId . "|" . $personaId . "|" . $destinatario . "|" . $tipoEnvio . "|" . $tipoNotifica . "|" . $tipoEvento . "|" .
                                     $empresa . "|" . $host . "|" . $usuario . "|" . $casoId . "|" . $detalleId . "|" . $asignacion . "|" . $path;

                    $strEsperaRespuesta = 'NO';

                    $strComando = "nohup ".$this->strPathJava." -jar -Djava.security.egd=file:/dev/./urandom " . $path .
                               "telcos/app/Resources/scripts/TelcosComunicacionScripts.jar '" . $strScript . "' ".
                               " '" . $strParametros . "' '" . $strEsperaRespuesta . "' '" . $host . "' '".
                               $this->strScriptPathJava."' >> /home/telcos/app/Resources/scripts/log/log.txt &";
                    shell_exec($strComando);
               
            }


            if (($prefijoEmpresa=='TN' || 
                 $prefijoEmpresa=='MD' || 
                 $prefijoEmpresa=='EN' ) && 
                 $caso && 
                 ($caso->getTipoCasoId()->getNombreTipoCaso() == 'Tecnico' ||
                 $caso->getTipoCasoId()->getNombreTipoCaso() == 'Arcotel') && 
                 $caso->getTipoAfectacion() != 'SINAFECTACION')
            {
                $intIdPuntoAfectado     = $afectados[0]['afectadoId'];
                //Se obtienen los correos relacionados al punto en la que se genero la incidencia
                $arrayContactosPunto    = $this->emComercial->getRepository("schemaBundle:InfoPuntoContacto")
                                                            ->getArrayContactosPorPuntoYTipo($intIdPuntoAfectado,"Contacto Tecnico");


                $to = array();
                $parametros = array();
                if ($prefijoEmpresa=='TN')
                {
                    //Se obtienen los correos relacionados al punto en la que se genero la incidencia
                    $arrayContactosPunto    = $this->emComercial->getRepository("schemaBundle:InfoPuntoContacto")
                                                   ->getArrayContactosPorPuntoYTipo($intIdPuntoAfectado,"Contacto Tecnico");
                    foreach ($arrayContactosPunto as $contacto)
                    {
                        $to[] = $contacto['valor'];
                    }
                    $parametros['strEmpresa'] = "TELCONET S.A.";
                }

                if ($prefijoEmpresa == 'MD' || $prefijoEmpresa == 'EN')
                {
                    $arrayContactosPunto = $this->emComercial->getRepository('schemaBundle:InfoPuntoFormaContacto')
                                                ->getArrayFormaContactosPorPunto($intIdPuntoAfectado);

                     foreach ($arrayContactosPunto as $contacto)
                     {
                         $to[] = $contacto['valor'];
                     }


                     if ($prefijoEmpresa == 'MD')
                     {
                              $parametros['strEmpresa'] = "NETLIFE";
                     }

                     if ($prefijoEmpresa == 'EN')
                     {
                              $parametros['strEmpresa'] = "ECUANET";
                     }

                }

                $objPuntoAfectado       = $this->emComercial->getRepository("schemaBundle:InfoPunto")->find($intIdPuntoAfectado);
                $strLoginAfectado       = "";

                if(is_object($objPuntoAfectado))
                {
                    $strLoginAfectado = $objPuntoAfectado->getLogin();
                }

                $to = array();

                foreach($arrayContactosPunto as $contacto)
                {
                    $to[] = $contacto['valor'];
                }

                //**************Se consulta los alias del departamento de L1 Y L2******************//
                if($caso->getEmpresaCod() == '10')
                {
                    $arrayParamCorreosCliente  = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                                 ->get('PARAMETROS PROYECTO NOTIFICACIONES CASOS CLIENTE',
                                                                       '',
                                                                       '',
                                                                       'ALIAS_CERRAR_CASO_CLIENTE',
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       $codEmpresa);

                    foreach($arrayParamCorreosCliente as $idxParamCorreo)
                    {
                        $arrayCorreos = explode("|", $idxParamCorreo["valor1"]);
                    }

                    foreach ($arrayCorreos as $correos)
                    {
                        $to[] = $correos;
                    }
                }
                //**************Se consulta los alias del departamento de L1 Y L2******************//

                //$parametros = array();

                //Se obtiene la persona asignada/afectada en la creacion del CASO para efecto de correos
                $obPersonaAfectada   = $this->emComercial->getRepository("schemaBundle:InfoPersona")->findOneByLogin($usrCreacion);

                //Se obtiene la persona asignada/afectada en la creacion del CASO para efecto de correos
                $arrayTiempoSolucion = $this->emSoporte->getRepository("schemaBundle:InfoCaso")->getTiempoCaso($caso->getId());

                //Se obtienen los sintomas por CASO
                $jsonSintomas  = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")->generarJsonSintomasXCaso($caso->getId());
                $arraySintomas = json_decode($jsonSintomas);

                //Se obtiene los afectados del caso
                $arrayAfectados = $this->getAfectacionDetalladaPorCaso($caso->getId());

                //Se obtiene la direccion y descripcion del punto
                $objInfoPunto  = $this->emComercial->getRepository("schemaBundle:InfoPunto")
                                      ->findOneBy(array("login"  => $strLoginAfectado,
                                                        "estado" => "Activo"));

                if(is_object($objInfoPunto))
                {
                    $strDireccionPunto   = $objInfoPunto->getDireccion();
                    $strDescripcionPunto = $objInfoPunto->getDescripcionPunto();
                }

                $parametros['caso']                 = $caso;
                $parametros['usrCierre']            = ucwords(strtolower($obPersonaAfectada->__toString()));
                $parametros['departamentoAsignado'] = $nombreDepartamento;
                $parametros['sintomas']             = $arraySintomas->encontrados;
                $parametros['cliente']              = $arrayAfectados['afectadosPadre'][0]['afectadoNombre'];
                $parametros['tiempoCaso']           = $arrayTiempoSolucion[0];
                $parametros['strLoginAfectado']     = $strLoginAfectado;
                $parametros['direccion']            = $strDireccionPunto;
                $parametros['descripcion']          = $strDescripcionPunto;
                $parametros['tipoCaso']             = $strTipoCaso;
                $parametros['soluciones']           = $arraySoluciones;

                $this->envioPlantilla->generarEnvioPlantilla('Cierre de Caso # '.$caso->getNumeroCaso(),
                                                             $to,
                                                             'CASOCERRAR_CLIE',
                                                             $parametros,
                                                             $codEmpresa,
                                                             $canton,
                                                             $departamento,
                                                             null,
                                                             false
                );
            }
            else if($caso->getTipoCasoId()->getNombreTipoCaso() == 'Backbone' && $prefijoEmpresa == "TN"
                && $caso->getTipoAfectacion() != 'SINAFECTACION')
            {
                //Se obtiene el user de creación
                $obPersona = $this->emComercial->getRepository("schemaBundle:InfoPersona")->findOneByLogin($usrCreacion);

                //Se obtienen los sintomas por CASO
                $jsonSintomas  = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")->generarJsonSintomasXCaso($caso->getId());
                $arraySintomas = json_decode($jsonSintomas);

                $arrayTiempoSolucion = $this->emSoporte->getRepository("schemaBundle:InfoCaso")->getTiempoCaso($caso->getId());

                $parametros['caso']                 = $caso;
                $parametros['usrCierre']            = ucwords(strtolower($obPersona->__toString()));
                $parametros['departamentoAsignado'] = $nombreDepartamento;
                $parametros['sintomas']             = $arraySintomas->encontrados;
                $parametros['cliente']              = "";
                $parametros['tiempoCaso']           = $arrayTiempoSolucion[0];
                $parametros['strLoginAfectado']     = "";
                $parametros['direccion']            = "N/A";
                $parametros['descripcion']          = "N/A";
                $parametros['tipoCaso']             = $strTipoCaso;

                //Se consulta las razones sociales configuradas
                $arrayRazonSocial  = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                     ->get('PARAMETROS PROYECTO NORIFICACIONES BACKBONE',
                                                           '',
                                                           '',
                                                           'RAZON SOCIAL BANCO BOLIVARIANO',
                                                           '',
                                                           '',
                                                           '',
                                                           '');

                $strLoginBackAfectado = $arrayRazonSocial[0]["valor1"];

                foreach($arrayRazonSocial as $idxRazonSocial)
                {
                    $arrayRazonesSocial[] = $idxRazonSocial["valor1"];
                }

                foreach($afectados as $arrayAfectado)
                {
                    if($arrayAfectado["tipoAfectado"] == "Elemento" && !empty($arrayAfectado['afectadoNombre'])
                        && !empty($arrayAfectado['afectadoDescripcion']))
                    {
                        $arrayParametrosPuntos["strNombreElemento"]       = $arrayAfectado['afectadoNombre'];
                        $arrayParametrosPuntos["strDescripcionInterface"] = $arrayAfectado['afectadoDescripcion'];
                        $arrayParametrosPuntos["arrayEstadosServicio"]    = $arrayEstadosServicio;
                        $arrayParametrosPuntos["arrayRazonSocial"]        = $arrayRazonesSocial;

                        $arrayPuntosBackboneElemento = $this->emComercial->getRepository('schemaBundle:InfoPunto')
                                                                         ->getPuntosPorElementoYPuerto($arrayParametrosPuntos);

                        $arrayBackboneTotalElemento = array_merge($arrayPuntosBackboneElemento,$arrayBackboneTotalElemento);
                    }

                    if($arrayAfectado["tipoAfectado"] == "Cliente")
                    {
                        $arrayParametrosPuntos["strLogin"]          = $arrayAfectado['afectadoNombre'];
                        $arrayParametrosPuntos["arrayRazonSocial"]  = $arrayRazonesSocial;

                        $arrayPuntosBackboneCliente = $this->emComercial->getRepository('schemaBundle:InfoPunto')
                                                                        ->getPuntosPorLogin($arrayParametrosPuntos);

                        $arrayBackboneTotalCliente = array_merge($arrayPuntosBackboneCliente,$arrayBackboneTotalCliente);
                    }
                }

                $arrayPuntosBackbone = array_merge($arrayBackboneTotalElemento,$arrayBackboneTotalCliente);

                foreach($arrayPuntosBackbone as $idxPunto)
                {
                        $arrayPuntosBackboneTotal[] = $idxPunto["idPunto"];
                }

                $arrayPuntosNotificar = array_unique($arrayPuntosBackboneTotal);

                //Se recorren los puntos backbone que deben ser notificados
                foreach($arrayPuntosNotificar as $idPuntoBackbone)
                {
                    $arrayContactosPunto = $this->emComercial->getRepository("schemaBundle:InfoPuntoContacto")
                                                             ->getArrayContactosPorPuntoYTipo($idPuntoBackbone,
                                                                                              "Contacto Tecnico");

                    $objInfoPunto = $this->emComercial->getRepository("schemaBundle:InfoPunto")->find($idPuntoBackbone);

                    if(is_object($objInfoPunto) && !empty($arrayContactosPunto))
                    {
                        $parametros['strEmpresa'] = "TELCONET S.A.";

                        //Recorrer las formas de contacto
                        foreach($arrayContactosPunto as $idxContactoPunto)
                        {
                            $strCadenaContactos .= $idxContactoPunto["valor"] . '|';
                        }

                        $strCadenaContactos = substr($strCadenaContactos, 0, strlen($strCadenaContactos)-1);

                        //Se llena la tabla temporal con los puntos a notificar
                        $objTmpNotifBackbone = new TmpNotifBackbone();
                        $objTmpNotifBackbone->setCasoId($caso->getId());
                        $objTmpNotifBackbone->setNumeroCaso($caso->getNumeroCaso());
                        $objTmpNotifBackbone->setCadenaLogin($objInfoPunto->getLogin());
                        $objTmpNotifBackbone->setCadenaCorreo($strCadenaContactos);
                        $this->emSoporte->persist($objTmpNotifBackbone);
                        $this->emSoporte->flush();

                        $strCadenaContactos = "";
                    }
                }

                //**************Se consulta los alias del departamento de NOC******************//
                $arrayParamCorreosNoc  = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                         ->get('PARAMETROS PROYECTO NORIFICACIONES BACKBONE',
                                                               '',
                                                               '',
                                                               'ALIAS_NOC_CERRAR_CASO',
                                                               '',
                                                               '',
                                                               '',
                                                               '');

                foreach($arrayParamCorreosNoc as $idxParamCorreoNoc)
                {
                    $arrayCorreosNoc = explode("|", $idxParamCorreoNoc["valor1"]);
                }

                foreach ($arrayCorreosNoc as $correoNoc)
                {
                    $to[] = $correoNoc;
                }
                //**************Se consulta los alias del departamento de NOC******************//

                //**************Se consulta los alias del departamento de L1 Y L2******************//
                if($caso->getEmpresaCod() == '10')
                {
                    $arrayParamCorreosCliente  = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                                 ->get('PARAMETROS PROYECTO NOTIFICACIONES CASOS CLIENTE',
                                                                       '',
                                                                       '',
                                                                       'ALIAS_CERRAR_CASO_CLIENTE',
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       $codEmpresa);

                    foreach($arrayParamCorreosCliente as $idxParamCorreo)
                    {
                        $arrayCorreos = explode("|", $idxParamCorreo["valor1"]);
                    }

                    foreach ($arrayCorreos as $correos)
                    {
                        $to[] = $correos;
                    }
                }
                //**************Se consulta los alias del departamento de L1 Y L2******************//

                $arrayParametrosBack["intCasoId"] = $caso->getId();

                //Se recorren los registros a notificar, se consulta la tabla temporal
                $arrayContactosPunto = $this->emSoporte->getRepository("schemaBundle:InfoPunto")
                                                         ->getNotifacionCasosBack($arrayParametrosBack);

                //**********************************SE ENVIA LA NOTIFICACION***************************************
                foreach($arrayContactosPunto as $idxContactosPunto)
                {
                    $parametros['cliente']          = $strLoginBackAfectado;
                    $parametros['strLoginAfectado'] = $idxContactosPunto["listadoLogines"];

                    $arrayContantos = explode("|", $idxContactosPunto["correo"]);

                    foreach ($arrayContantos as $correo)
                    {
                        $to[] = $correo;
                    }

                    $this->envioPlantilla->generarEnvioPlantilla('Cierre de Caso # '.$caso->getNumeroCaso(),
                                             $to,
                                             'CASOCERRAR_CLIE',
                                             $parametros,
                                             $codEmpresa,
                                             $canton,
                                             $departamento,
                                             null,
                                             false
                    );
                }
                //**********************************SE ENVIA LA NOTIFICACION***************************************/
            }
            
             /***************************Validación para informe ejecutivo automático********************************/
            $objIncidenciaDet = $this->emSoporte->getRepository('schemaBundle:InfoIncidenciaDet')
                                         ->findOneByCasoId($idCaso);

            if($caso->getEmpresaCod() == 10 && !is_object($objIncidenciaDet))
            {
                $arrayParametrosVal = array('intTiempoIncidencia'              => $intTiempoEmpresa,
                                             'arrayServicioAfectado'           => $arrayAfectados['afectadosDetalle'],
                                             'arrayTieneDetalleAfectado'       => $arrayAfectados['tieneDetalle'],
                                             'intCodEmpresa'                   => $caso->getEmpresaCod(),
                                             'idDepartamento'                  => $idDepartamento,
                                             'usrCreacion'                     => $usrCreacion,
                                             'idEmpleado'                      => $intPersonaEmpresaRol,
                                             'ipCreacion'                      => $ipCreacion,
                                             'tipo_afectacion'                 => $tipo_afectacion,
                                             'intCasoId'                       => $caso->getId()
                                             );
                $arrayResultadoCon = $this->controlarInformeEjecutivo($arrayParametrosVal);
                 
                if(isset($arrayResultadoCon) && $arrayResultadoCon != ''
                   &&  $arrayResultadoCon['status'] == 'ERROR')
                {
                    $arrayResultadoCon['mensaje'] = '. <br> Sin embargo ocurrió un error al validar informe ejecutivo. '
                                                    . $arrayResultadoCon['mensaje'] ;
                }
                if(isset($arrayResultadoCon) && $arrayResultadoCon != ''
                   &&  $arrayResultadoCon['status'] == 'OK'
                   &&  $arrayResultadoCon['mensaje'] !== '')
                {
                    $arrayResultadoCon['mensaje'] = '. <br> Automáticamente se solicita informe ejecutivo. <br> '
                                                    . $arrayResultadoCon['mensaje'] ;
                }
            }

            $strStatus      = "OK";
            $strMensaje     = "Se cerró el caso".$arrayResultadoCon['mensaje'];
            $arrayResultado = array('success' => true, 'status' => $strStatus, 'mensaje' => $strMensaje);

            //NOTIFICACION PUSH
            $arrayParametroClienteCaso = array('intIdCaso'  => $caso->getId());
            $arrayClienteBot           = $this->emComercial->getRepository('schemaBundle:InfoParteAfectada')
                                                           ->getInfoClienteCaso($arrayParametroClienteCaso);

            //hallar idPersona del cliente
            $arrayParametrosFCM = array('idPersona'             => $arrayClienteBot[0]['idPersona'],
                                        'boolTodosDispositivo'  => true);
            $arrayTokens = $this->getFCMTokens($arrayParametrosFCM);
            $arrayNotificacion = array('NumeroCaso'             => $caso->getNumeroCaso(),
                                       'loginCaso'              => $arrayClienteBot[0]['login'],
                                       'idCantonCaso'           => $arrayClienteBot[0]['idCanton'],
                                       'fechaCierreCaso'        => (new \DateTime('now'))->format('d/m/Y'),
                                       'arrayTokens'            => $arrayTokens,
                                       'strTipoNotificacion'    => 'CASO_CIERRE');
            $this->despacharNotificacionesPush($arrayNotificacion);
            ///////////////////
            
            $objInfoCaso = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->find($idCaso);
            //valida casos backbone y empresa MD
            if($objInfoCaso->getTipoCasoId()->getId() == 124 && ($caso->getEmpresaCod() == 18 || $caso->getEmpresaCod() == 33 ))
            {
                $objInfoMantProgramado = $this->emSoporte->getRepository('schemaBundle:InfoMantenimientoProgramado')
                                         ->findBy(array('casoId'=>$idCaso)); 
                if(!empty($objInfoMantProgramado) && count($objInfoMantProgramado)>0)
                {
                    $strTipoProcesoNotif = "CierreCasoMantProgra";
                }                         

                $arrayNotificaPush["intCasoId"]      = $idCaso;
                $arrayNotificaPush["strCodEmpresa"]  = $caso->getEmpresaCod();
                $arrayNotificaPush["strTipoProceso"] = $strTipoProcesoNotif;
                $arrayNotificaPush["strUserSession"] = $usrCreacion;
                $arrayNotificaPush["strIpCreacion"]  = $ipCreacion;

                $this->guardaNotificacionPush($arrayNotificaPush);

            }
           
        }
        catch(\Exception $e)
        {
            if ($this->emComunicacion->getConnection()->isTransactionActive())
            {
                $this->emComunicacion->getConnection()->rollback();
            }

            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }

            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->cerrarCaso',
                                             $e->getMessage(),
                                             $usrCreacion,
                                             $ipCreacion);

            $strStatus              = "ERROR";
            $strMensaje             = $e->getMessage();
            $arrayRespuestaFinal    = array('status' => $strStatus, 'mensaje' => $strMensaje, 'success' => false);
            return $arrayRespuestaFinal;
        }

        //*DECLARACION DE COMMITS*/
        if ($this->emComunicacion->getConnection()->isTransactionActive())
        {
            $this->emComunicacion->getConnection()->commit();
        }

        $this->emComunicacion->getConnection()->close();

        if ($this->emSoporte->getConnection()->isTransactionActive())
        {
            $this->emSoporte->getConnection()->commit();
        }

        //Se elimina los registros de la tabla temporal
        $this->emSoporte->getRepository("schemaBundle:InfoPunto")->eliminaRegistrosTemporales($arrayParametrosBack);

        $this->emSoporte->getConnection()->close();
        //*----------------------------------------------------------------------*/

        return $arrayResultado;
    }

    /**
     *
     *  Metodo que devuelve los afectados en un caso segementados en la afectacion padre o contenedora y en las afectaciones dependientes
     *  en caso de existir
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @since 09-01-2016
     * @version 1.0
     *
     * @param type $intIdCaso
     * @return $arrayResultado [ arrayAfectacionPadre , arrayAfectacionDetalle ]
     */
    public function getAfectacionDetalladaPorCaso($intIdCaso)
    {
        $arrayAfectacionPadre   = Array();
        $arrayAfectacionDetalle = Array();

        $boolTieneDetalle = false;
        //Se obtiene todos los tipos de afectados de un Caso
        $objContAfectaciones = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->getTotalAfectadosPorTipo($intIdCaso);

        if($objContAfectaciones['numElemento']>0)
        {
            $arrayAfectacionPadre   = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                                      ->getRegistrosAfectadosTotalXCaso($intIdCaso,'Elemento','Data');

            //Si existen Clientes deriva de un caso de afectacion masiva, caso contrario es un caso con afectacion
            //puntual sobre elementos ( Activos Fijos, Servidores)
            if($objContAfectaciones['numCliente']>0)
            {
                $arrayAfectacionDetalle = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                                          ->getRegistrosAfectadosTotalXCaso($intIdCaso,'Cliente','Data');
                $boolTieneDetalle = true;
            }
        }
        else if($objContAfectaciones['numCliente']>0)
        {
            $arrayAfectacionPadre   = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                                      ->getRegistrosAfectadosTotalXCaso($intIdCaso,'Cliente','Data');

            //Si existen Servicios, el caso fue creado con afectacion a nivel de servicios por cliente
            if($objContAfectaciones['numServicio']>0)
            {
                $arrayAfectacionDetalle = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                                          ->getRegistrosAfectadosTotalXCaso($intIdCaso,'Servicio','Data');
                $boolTieneDetalle= true;
            }
        }
        else if($objContAfectaciones['numEmpleado']>0)
        {
            $arrayAfectacionPadre   = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                                      ->getRegistrosAfectadosTotalXCaso($intIdCaso,'Empleado','Data');
        }

        $arrayResultado['afectadosPadre']   = $arrayAfectacionPadre;
        $arrayResultado['tieneDetalle']     = $boolTieneDetalle;
        $arrayResultado['afectadosDetalle'] = $arrayAfectacionDetalle;

        return $arrayResultado;
    }

    /**
     * Funcion que sirve para SMS individuales a clientes o personal
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 10-09-2015
     * @param string $strNumeros
     * @param string $strMensaje
     * @param string $empresa
     * @return array $arrayResultado
     *
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.1 Se cambian los parámetros por un array. Se parametriza el tipoEvento.
     * @since 20-06-2018
     * 
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 1.2 Se modifica parametro $strElementoId si no esta definido por motivo de error al enviar SMS
     * @since 12-10-2020
     */
    public function enviarSMS($arrayParametros)
    {
        $strNumeros    = $arrayParametros["strNumeros"];
        $strMensaje    = $arrayParametros["strMensaje"];
        $strEmpresaCod = $arrayParametros["strEmpresaCod"];
        $strTipoEvento = $arrayParametros["strTipoEvento"];
        $strElementoId = isset($arrayParams['strElementoId']) ? $arrayParams['strElementoId'] : '';

        $strHost = $this->host;
        $strPath = $this->path;

        if (!$strTipoEvento)
        {
            $strTipoEvento = 'enviar';
        }

        $strScript = '/home/scripts-telcos/md/soporte/sources/sms-server/dist/SMSServer.jar';

        $strParametros = $strTipoEvento .'|'. $strPath . '|' . $strHost . '|' . $strEmpresaCod . '|'
                        .$strElementoId . '|' . $strNumeros . '|' . $strMensaje;

        $strEsperaRespuesta = 'NO';

        $strComando = "nohup ".$this->strPathJava." -jar -Djava.security.egd=file:/dev/./urandom " . $strPath
                    . "telcos/app/Resources/scripts/TelcosComunicacionScripts.jar '"
                    . $strScript . "' '" . $strParametros . "' '" . $strEsperaRespuesta . "' '" . $strHost . "' '"
                    . $this->strScriptPathJava."' >> ".$strPath."telcos/app/Resources/scripts/log/log.txt &";

        shell_exec($strComando);
    }

     /**
     *
     * Metodo que permite completar los 0s a 2 decimales en los valores de porcentajes a mostrar en la aplicacion
     *
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 17-12-2014
     *
     *
     * @param type $valor
     * @return string
     */
    public function completarDecimalesPorcentajes($valor)
    {
        $decimales = explode(".", $valor);

        if(count($decimales) == 1)
        {
            if($decimales[0]==0 || $decimales[0]==100)
            {
                return $valor;
            }
            else
            {
                $valor = $valor . ".00";
            }
        }
        else
        {
            if(strlen($decimales[1]) == 1)
            {
                $valor = $valor . "0";
            }
        }

        return $valor;
    }

     /**
     * generarDirectorioFechaActualAction
     * Metodo encargado de verificar y generar el directorio de carpetas por fecha en el directorio enviado como parametro.
     * @param  string $srtDirectorio
     * @return string $strDirectorioGenerado
     * @author Edgar Holguin <eholguin@telconet.ec>
     * @version 1.0 11-04-2016
     *
     */
    public function generarDirectorioFechaActual($srtDirectorio)
    {
        $strAnioActual   = date("Y");
        $strMesActual    = date("m");
        $strDiaActual    = date("d");

        $strDirAnioActual      = $srtDirectorio.$strAnioActual."/";
        $strDirMesActual       = $strDirAnioActual.$strMesActual."/";
        $strDirDiaActual       = $strDirMesActual.$strDiaActual."/";
        $strDirectorioGenerado ="";

        $boolGeneraDirectorio = true;

        if(file_exists($srtDirectorio) && is_dir($srtDirectorio))
        {
            do
            {
                if(file_exists($strDirAnioActual) && is_dir($strDirAnioActual))
                {
                    if(file_exists($strDirMesActual) && is_dir($strDirMesActual))
                    {
                        if(file_exists($strDirDiaActual) && is_dir($strDirDiaActual))
                        {
                            $boolGeneraDirectorio = false;
                        }
                        else
                        {
                            mkdir($strDirDiaActual, 0777, true);
                        }
                    }
                    else
                    {
                        mkdir($strDirMesActual, 0777, true);
                    }

                }
                else
                {
                    mkdir($strDirAnioActual, 0777, true);
                }
            }while($boolGeneraDirectorio);

            $strDirectorioGenerado = $strAnioActual."/".$strMesActual."/".$strDiaActual."/";

            return $strDirectorioGenerado;
        }
        else
        {
            return $strDirectorioGenerado;
        }
    }

    /**
     * guardarMultiplesAdjuntosCasosTareas
     *
     * Metodo encargado de guardar en base y en el directorio los archivos que el usuario desee subir.
     *
     * @param array $arrayParametros [ "idCaso","idTarea","servicio","origenCaso","origenTarea","strCodigoDocumento","strPrefijoEmpresa","strUser",
     *                                  "strIdEmpresa"]
     *
     * @return bool
     *
     * @author Lizbeth Cruz  <mlcruz@telconet.ec>
     * @version 1.0 30-06-2016
     *
     * @author Modificado: Lizbeth Cruz  <mlcruz@telconet.ec>
     * @version 1.1 14-07-2016  Se renombran los archivos subidos en casos, tareas y actividades cuando los nombres de dichos archivos contengan
     *                          caracteres especiales
     *
     * @author Modificado: Lizbeth Cruz  <mlcruz@telconet.ec>
     * @version 1.2 22-07-2016  Se modifica la obtención de la extensión del archivo, permitiendo que el nombre contenga el caracter .
     *
     * @author Modificado: Lizbeth Cruz  <mlcruz@telconet.ec>
     * @version 1.2 20-07-2017  Se obtienen las coordenadas de la metada de las imágenes que se suben a un caso o a una tarea
     *
     * @author Modificado: Andrés Montero H.  <amontero@telconet.ec>
     * @version 1.3 22-09-2020  Se agrega validación de extensiones de archivos.
     *
     */
    public function guardarMultiplesAdjuntosCasosTareas($arrayParametros)
    {
        $fecha_creacion     = new \DateTime('now');
        $serverRoot         = $this->path."telcos/web";

        $servicio           = $arrayParametros['servicio'];
        $idCaso             = $arrayParametros['idCaso'];
        $idTarea            = $arrayParametros['idTarea'];
        $origenCaso         = $arrayParametros['origenCaso'];
        $origenTarea        = $arrayParametros['origenTarea'];
        $strCodigoDocumento = $arrayParametros['strCodigoDocumento'];
        $strPrefijoEmpresa  = $arrayParametros['strPrefijoEmpresa'];
        $strUser            = $arrayParametros['strUser'];
        $strIdEmpresa       = $arrayParametros['strIdEmpresa'];
        $arrayArchivos      = $arrayParametros['arrayArchivos'];

        $arrayRespuesta     = array();
        $arrayRutasArchivosSubidos = array();
        $this->emComunicacion->getConnection()->beginTransaction();

        try
        {
            $arrayRespuestaExtensionesRes = $this->getExtensionesDeArchivosRestringidas();
            if ($arrayRespuestaExtensionesRes['success'] == 'false' )
            {
                throw new \Exception($arrayRespuesta['mensaje']);
            }

            foreach($arrayArchivos as $objArchivo)
            {
                if (is_object($objArchivo))
                {
                    $strNameFile                        = $objArchivo->getClientOriginalName();
                    $arrayPartsNombreArchivo            = explode('.', $strNameFile);
                    $strLast                            = array_pop($arrayPartsNombreArchivo);
                    $arrayPartsNombreArchivo            = array(implode('_', $arrayPartsNombreArchivo), $strLast);

                    $strNombreArchivo                   = $arrayPartsNombreArchivo[0];
                    $strExtArchivo                      = $arrayPartsNombreArchivo[1];
                    $strTipo                            = $strExtArchivo;
                    $prefijo                            = substr(md5(uniqid(rand())),0,6);
                    $strNuevoNombre                     = $strNombreArchivo . "_" . $prefijo . "." . $strExtArchivo;
                    $tofind                             = "#ÀÁÂÃÄÅàáâãäåÒÓÔÕÖØòóôõöøÈÉÊËèéêëÇçÌÍÎÏìíîïÙÚÛÜùúûüÿÑñ·";
                    $replac                             = "_AAAAAAaaaaaaOOOOOOooooooEEEEeeeeCcIIIIiiiiUUUUuuuuyNn-";
                    $strNuevoNombre                     = strtr($strNuevoNombre,$tofind,$replac);
                    $destino                            = $serverRoot."/public/uploads/".$strPrefijoEmpresa."/";
                    $strPath                            = "public/uploads/".$strPrefijoEmpresa."/";
                    $modulo                             = "";
                    $funcion                            = "";
                    $directorioFechaActual              = "";

                    /* Se validan extensiones restringidas */ 
                    if (!(strpos($arrayRespuestaExtensionesRes['extensiones'], strtolower($strExtArchivo)) === false)) 
                    {
                        throw new \Exception('Archivo con extensión (' . $strExtArchivo . ') no permitida');
                    }

                    //Si proviene de subida a partir del servicio del cliente o de la creacion de un caso
                    if($servicio || $origenCaso == 'S' || $origenTarea == 'S')
                    {
                        $modulo ="soporte/";

                        $band   = "";
                        if($origenCaso == 'S')
                        {
                            $funcion    = "casos/";
                            $band       = "C";
                        }
                        else if($origenTarea == 'S')
                        {
                            $funcion    = "tareas/";
                            $band       = "T";
                        }

                        if($strPrefijoEmpresa=="TN" && $servicio && trim($strCodigoDocumento)=="ACT")
                        {
                            // Se verifica si existe directorio creado por fecha actual
                            $modulo                 = "tecnico/";
                            $funcion                = "servicios/actas_entrega/";
                            $directorioFechaActual  = $this->generarDirectorioFechaActual($destino);

                        }

                        $destino.=$modulo.$funcion;
                        $strPath.=$modulo.$funcion;
                        if($directorioFechaActual!="")
                        {
                            $destino.=$directorioFechaActual;
                            $strPath.=$directorioFechaActual;
                        }

                        $strFicheroSubido=$destino.$strNuevoNombre;

                        //Guardar en base
                        if($band == "C")
                        {
                            $caso = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->find($idCaso);
                        }
                        else if($band == "T")
                        {
                            $tarea = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->find($idTarea);
                        }
                        if($caso || $tarea)
                        {
                            $entity = new InfoDocumento();

                            if($band == "C")
                            {
                                $entity->setNombreDocumento('Adjunto Caso');
                                $entity->setMensaje('Documento que se adjunta en la creacion de un Caso');
                            }
                            else if($band == "T")
                            {
                                $entity->setNombreDocumento('Adjunto Tarea');
                                $entity->setMensaje('Documento que se adjunta a una tarea');
                            }
                            $entity->setUbicacionFisicaDocumento($strFicheroSubido);
                            $entity->setUbicacionLogicaDocumento($strNuevoNombre);

                            $entity->setEstado('Activo');
                            $entity->setFeCreacion($fecha_creacion);
                            $entity->setFechaDocumento($fecha_creacion);
                            $entity->setIpCreacion('127.0.0.1');
                            $entity->setUsrCreacion($strUser);
                            $entity->setEmpresaCod($strIdEmpresa);

                            $strTipoDoc=  strtoupper($strTipo);
                            if($strTipoDoc=='JPG' || $strTipo=='JPEG')
                            {
                               $strTipoDoc = "JPG" ;
                            }

                            $objTipoDocumento = $this->emComunicacion->getRepository('schemaBundle:AdmiTipoDocumento')
                                                                     ->findOneByExtensionTipoDocumento(array('extensionTipoDocumento'=> $strTipoDoc));

                            if( $objTipoDocumento != null)
                            {
                                $entity->setTipoDocumentoId($objTipoDocumento);
                            }
                            else
                            {

                                //Inserto registro con la extension del archivo a subirse
                                $objAdmiTipoDocumento = new AdmiTipoDocumento();
                                $objAdmiTipoDocumento->setExtensionTipoDocumento(strtoupper($strTipoDoc));
                                $objAdmiTipoDocumento->setTipoMime(strtoupper($strTipoDoc));
                                $objAdmiTipoDocumento->setDescripcionTipoDocumento('ARCHIVO FORMATO '.$strTipoDoc);
                                $objAdmiTipoDocumento->setEstado('Activo');
                                $objAdmiTipoDocumento->setUsrCreacion( $strUser );
                                $objAdmiTipoDocumento->setFeCreacion( $fecha_creacion );
                                $this->emComunicacion->persist( $objAdmiTipoDocumento );
                                $this->emComunicacion->flush();
                                $entity->setTipoDocumentoId($objAdmiTipoDocumento);
                            }

                            move_uploaded_file($objArchivo->getPathName(), $strFicheroSubido);
                            $arrayRutasArchivosSubidos[]=$strFicheroSubido;

                            if($strTipoDoc === "JPG" || $strTipo==='JPEG' || $strTipo==='PNG')
                            {
                                $arrayCoordenadas   = $this->obtenerCoordenadasImg(array(   "strRutaFisicaArchivo"  => $strPath,
                                                                                            "strNombreArchivo"      => $strNuevoNombre));

                                if(isset($arrayCoordenadas["floatLatitud"]) && !empty($arrayCoordenadas["floatLatitud"]))
                                {
                                    $floatLatitud   = $arrayCoordenadas["floatLatitud"];
                                    $entity->setLatitud($floatLatitud);
                                }

                                if(isset($arrayCoordenadas["floatLongitud"]) && !empty($arrayCoordenadas["floatLongitud"]))
                                {
                                    $floatLongitud  = $arrayCoordenadas["floatLongitud"];
                                    $entity->setLongitud($floatLongitud);
                                }
                            }
                            $this->emComunicacion->persist($entity);
                            $this->emComunicacion->flush();

                            //Entidad de la tabla INFO_DOCUMENTO_RELACION donde se relaciona el documento cargado con el IdCaso
                            $entityRelacion = new InfoDocumentoRelacion();
                            $entityRelacion->setModulo('SOPORTE');
                            $entityRelacion->setEstado('Activo');
                            $entityRelacion->setFeCreacion(new \DateTime('now'));
                            $entityRelacion->setUsrCreacion($strUser);

                            if($band == "C")
                            {
                                $entityRelacion->setCasoId($idCaso);
                            }
                            else if($band == "T")
                            {
                                $entityRelacion->setDetalleId($idTarea);
                            }
                            $entityRelacion->setDocumentoId($entity->getId());

                            $this->emComunicacion->persist($entityRelacion);
                            $this->emComunicacion->flush();
                        }
                    }
                }
            }
            if ($this->emComunicacion->getConnection()->isTransactionActive()){
                $this->emComunicacion->getConnection()->commit();
            }
            $this->emComunicacion->getConnection()->close();
            $arrayRespuesta     = array('status' => 'Ok', 'mensaje' => 'Los archivos se subieron exitosamente', 'success' => true);
            return $arrayRespuesta;
       }
       catch(\Exception $e)
       {
           $strMensajeError  = 'Ha ocurrido un error, por favor reporte a Sistemas';

           //Eliminar Archivos subidos
           foreach($arrayRutasArchivosSubidos as $rutaEliminar)
           {
               unlink($rutaEliminar);
           }

           if ($this->emComunicacion->getConnection()->isTransactionActive())
           {
               $this->emComunicacion->getConnection()->rollback();
           }
           $this->emComunicacion->getConnection()->close();

           if (strpos(strtolower($e->getMessage()), strtolower("Archivo con extensión")) >= 0)
           {
               $strMensajeError =  $e->getMessage();
           }
           $arrayRespuesta     = array('status' => 'Error', 'mensaje' => $strMensajeError, 'success' => 'false');
           return $arrayRespuesta;
       }
    }

    /**
     * Obtiene las coordenadas que se encuentra en la metadata de una imagen
     *
     * @param array $arrayParametros["strNombreArchivo", "strRutaFisicaArchivo", "strExtensionArchivo"]
     * @return array $arrayCoordenadas["strLatitud", "strLongitud"]
     * 
     * @author Modificado: David De La Cruz  <ddelacruz@telconet.ec>
     * @version 1.1 30-07-2021  Se agrega validacion para que se obtengan las coordenadas de una imagen
     *          segun la ruta de telcos o url de NFS en donde fue alojada
     * 
     */
    public function obtenerCoordenadasImg($arrayParametros)
    {
        $strRutaFisicaArchivo   = $arrayParametros["strRutaFisicaArchivo"];
        $strNombreArchivo       = $arrayParametros["strNombreArchivo"];
        $boolExitoNfs           = (isset($arrayParametros["boolExitoNfs"]) ? true : false );

        if ($boolExitoNfs)
        {
            $strPathFilename = $strRutaFisicaArchivo;
        }
        else
        {
            $strPathFilename = $strRutaFisicaArchivo.''.$strNombreArchivo;
        }        

        $arrayExif              = exif_read_data($strPathFilename);

        if(isset($arrayExif["GPSLatitude"]) && !empty($arrayExif["GPSLatitude"])
            && isset($arrayExif["GPSLatitudeRef"]) && !empty($arrayExif["GPSLatitudeRef"]))
        {
            $floatLatitud   = $this->getCoordenadaGps($arrayExif["GPSLatitude"], $arrayExif['GPSLatitudeRef']);
        }
        else
        {
            $floatLatitud   = 0;
        }

        if(isset($arrayExif["GPSLongitude"]) && !empty($arrayExif["GPSLongitude"])
            && isset($arrayExif["GPSLongitudeRef"]) && !empty($arrayExif["GPSLongitudeRef"]))
        {
            $floatLongitud  = $this->getCoordenadaGps($arrayExif["GPSLongitude"], $arrayExif['GPSLongitudeRef']);
        }
        else
        {
            $floatLongitud  = 0;
        }

        $arrayCoordenadas["floatLatitud"]     = $floatLatitud;
        $arrayCoordenadas["floatLongitud"]    = $floatLongitud;

        return $arrayCoordenadas;
    }


    /**
     * Obtiene las coordenadas que se encuentra en la metadata de una imagen
     *
     * @param array $arrayExif["GPSLatitude", "GPSLatitudeRef", "GPSLongitude", "GPSLongitudeRef"]
     * @return array $arrayCoordenadas["strLatitud", "strLongitud"]
     *
     * @author John Vera R. <javera@telconet.ec>
     * @version 1.0 02-04-2018
     * 
     * Correccion de Coordenadas
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.1 19-05-2018
     *
     */
    public function getCoordenadasImg($arrayExif)
    {

        if(isset($arrayExif["GPSLatitude"]) && !empty($arrayExif["GPSLatitude"])
            && isset($arrayExif["GPSLatitudeRef"]) && !empty($arrayExif["GPSLatitudeRef"]))
        {
            $floatLatitud = $arrayExif["GPSLatitude"];
        }
        else
        {
            $floatLatitud = 0;
        }

        if(isset($arrayExif["GPSLongitude"]) && !empty($arrayExif["GPSLongitude"])
            && isset($arrayExif["GPSLongitudeRef"]) && !empty($arrayExif["GPSLongitudeRef"]))
        {
            $floatLongitud = $arrayExif["GPSLongitude"];
        }
        else
        {
            $floatLongitud = 0;
        }

        $arrayCoordenadas["floatLatitud"]   = $floatLatitud;
        $arrayCoordenadas["floatLongitud"]  = $floatLongitud;

        return $arrayCoordenadas;
    }

    /**
     * reasignarTarea
     *
     * Metodo encargado realizar una reasignación de tarea que sera consumido desde un ws
     *
     * @param array $arrayParametros [ "idEmpresa","prefijoEmpresa","id_detalle","id_tarea","motivo","departamento_asignado","empleado_asignado",
     *                                 "cuadrilla_asignada","contratista_asignada","tipo_asignado","fecha_ejecucion","hora_ejecucion",
     *                                 "clientIp","user","persona_empresa_rol","id_departamento"]
     *
     * @return array
     *
     * @author Edgar Pin Villavicencio <epin@telconet.ec>
     * @version 1.0 16-08-2017
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 14-09-2017 - Se Setea como Asignada el estado inicial de las tareas, al ser reasignadas
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 14-07-2017 - Se elimina inicializacion incorrecta de varible $objDepartamento previo a obtener sus valores
     *                           causando que se genere envios de notificaciones a todos los alias configuradas en una region
     *
     * @author Modificado: Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.3 26-12-2017 - En el asunto y cuerpo del correo se agrega el nombre del proceso al que pertenece la tarea asignada
     *
     * @author Germán Valenzuela Franco <gvalenzuela@telconet.ec>
     * @version 1.4 26-03-2018 - Se modifica el retorno del metodo para obtener el asignado de la tarea
     *                           y si no se encuentra un lider en la cuadrilla se asigna la tarea a cualquiera de los integrantes
     *                           que conforman a la cuadrilla.
     *
     * @author Germán Valenzuela Franco <gvalenzuela@telconet.ec>
     * @version 1.5 15-08-2018 - Se modifica el método agregando el id de la persona empresa rol al momento de buscar un integrante
     *                           para asignar la tarea cuando no se encuentra un lider de cuadrilla.
     *
     * @author Germán Valenzuela Franco <gvalenzuela@telconet.ec>
     * @version 1.6 26-09-2018 - Se baja la validación $boolEsAsignadaReprogramada para actualizar siempre la fecha solicitada
     *                           si el origen de la tarea es Hal.
     *
     * @author Germán Valenzuela Franco <gvalenzuela@telconet.ec>
     * @version 1.7 17-04-2019 - Se agrega el método genérico para el cálculo del los tiempos de las tareas, y
     *                           se agrega el nuevo parámetro *strClienteReprograma* que identifica si el cliente solicitó la
     *                           reprogramación.
     *
     * @author Germán Valenzuela Franco <gvalenzuela@telconet.ec>
     * @version 1.7 17-04-2019 - En caso que el origen sea Hal no se realiza el cálculo para obtener los tiempos de la tarea.
     * 
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.8 08-07-2020 - Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     *
     * @author Germán Valenzuela Franco <gvalenzuela@telconet.ec>
     * @version 1.8 13-07-2020 - En caso que la fecha de ejecución sea menor a la actual o el formato de fecha sea erróneo,
     *                           se asignará la fecha actual del servidor.
     *
     * @author Germán Valenzuela Franco <gvalenzuela@telconet.ec>
     * @version 1.9 20-07-2020 - Cuando la reasignación es por reprogramación, se registra en el historial la fecha de creación
     *                           y no la fecha de reprogramación.
     * 
     * @author Jose Bedon <jobedon@telconet.ec>
     * @version 1.10 17-05-2021 - Se agrega logica para actualizar la tarea para el departamento de DataCenter
     *                           y se registra en el historico la tarea seleccionada desde Syscloud
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.11 10-09-2021 - Se agrega llamado a proceso q se encarga de enviar tracking a megadatos
     *  
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.12 15-10-2021 - Se elimina filtro de tareas por dpto Operaciones Urbanas para tracking map
     * 
     */
    public function reasignarTarea($arrayParametros)
    {
        $strCodEmpresa            = ($arrayParametros['idEmpresa'] ? $arrayParametros['idEmpresa'] : "");
        $strPrefijoEmpresa        = ($arrayParametros['prefijoEmpresa'] ? $arrayParametros['prefijoEmpresa'] : "");
        $intIdDetalle             = $arrayParametros['id_detalle'];
        $strMotivo                = $arrayParametros['motivo'];
        $intDepartamentoAsignado  = $arrayParametros['departamento_asignado'] ? $arrayParametros['departamento_asignado'] : '';
        $intEmpleadoAsignado      = ($arrayParametros['empleado_asignado'] ? $arrayParametros['empleado_asignado'] : "0");
        $intIdCuadrillaAsignada   = $arrayParametros['cuadrilla_asignada'];
        $intIdContratistaAsignado = $arrayParametros['contratista_asignada'];
        $strTipoAsignado          = $arrayParametros['tipo_asignado'];
        $strObservacionCorreo     = $arrayParametros['observacionCorreo']?$arrayParametros['observacionCorreo']:"";
        $strBanderaSafeCity       = $arrayParametros['banderaSafeCity']?$arrayParametros['banderaSafeCity']:"N";
        $strNumeracion            = "";
        $strFechaE                = $arrayParametros['fecha_ejecucion'];
        $strClientIp              = $arrayParametros['clientIp'];
        $strUsrCreacion           = $arrayParametros['user'];
        $intPersonaEmpresaRol     = "";
        $strNombreProceso         = "";
        $intIdDepartamento        = ($arrayParametros['id_departamento'] ? $arrayParametros['id_departamento'] : "");
        $strObersacionAsignado    = "";
        $strOrigenHal             = $arrayParametros['strOrigenHal'];
        $strClienteReprograma     = $arrayParametros['strClienteReprograma'];
        $intIdFinTarea               = $arrayParametros['idFinTarea'];
        $strValidacionTags        = isset($arrayParametros['strValidacionTags']) ? $arrayParametros['strValidacionTags'] : "SI";
        $objTarea                 = null;
        $strEnviaDepartamento     = "";
        $strFinTareaMotivo        = "";
        $arrayDepTraking          = array(128);
        $strAccionTracking        = "Tarea Reasignada";
        $boolEsHal                = false;

        if (($strUsrCreacion == null) || ($strUsrCreacion == ''))
        {
            throw new \Exception ('El usuario en sesión no puede estar vacío, por favor autenticarse nuevamente');
        }

        $strTipoAsignado = "contratista";
        if ($intIdCuadrillaAsignada)
        {
            $strTipoAsignado = "cuadrilla";
        }
        if ($intEmpleadoAsignado)
        {
            $strTipoAsignado = "empleado";
        }

        $strObservacionAsignacion   = "";
        $strEstadoReAsignacion      = "";

        //Fecha de Reprogramacion
        $objDate        = new \DateTime(date('Y-m-d H:i',strtotime($strFechaE)));
        $objFechaActual = new \DateTime((new \DateTime('now'))->format('Y-m-d H:i'));

        $boolEsReprogramadaAtras = false;
        if ($objDate < $objFechaActual)
        {
            $objDate = $objFechaActual;
        }

        $boolEsAsignadaReprogramada = false;
        if ($objDate > $objFechaActual)
        {
            $boolEsAsignadaReprogramada = true;
        }

        if($strValidacionTags === "SI")
        {
            $strMotivo = $this->eliminarSimbolosDeTags($strMotivo);
        }
        $strNombreDepartamento = "";

        if (isset($intDepartamentoAsignado) && $intDepartamentoAsignado != '')
        {
            $objDepartamento = $this->emComercial->getRepository('schemaBundle:AdmiDepartamento')->find($intDepartamentoAsignado);
            $strNombreDepartamento = $objDepartamento->getNombreDepartamento();
        }

        if (isset($intIdFinTarea) && !empty($intIdFinTarea))
        {
            $objTarea = $this->emComercial->getRepository('schemaBundle:AdmiTarea')->find($intIdFinTarea);
        }

        $this->emSoporte->getConnection()->beginTransaction();
        $this->emComunicacion->getConnection()->beginTransaction();

        try
        {
            $strEstadoActualTarea = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->getUltimoEstado($intIdDetalle);
            $arrayValidaEstado = array("Cancelada","Rechazada","Finalizada");
            if (!in_array($strEstadoActualTarea, $arrayValidaEstado))
            {
                $objDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->find($intIdDetalle);

                if ($boolEsAsignadaReprogramada || strtoupper($strOrigenHal) === 'SI'
                        || $objDate < $objDetalle->getFeSolicitada())
                {
                    $objDetalle->setFeSolicitada($objDate);
                }               

                $this->emSoporte->persist($objDetalle);
                $this->emSoporte->flush();

                switch ($strTipoAsignado)
                {
                    case "empleado":
                        $intEmpleadoAsignado = explode("@@", $intEmpleadoAsignado);
                        $intPersonaEmpresaRol = $intEmpleadoAsignado[1];
                        $objPersona = $this->emComercial->getRepository('schemaBundle:InfoPersona')->find($intEmpleadoAsignado[0]);

                        $strNombrePersona = "";
                        if (isset($objPersona) && $objPersona != null)
                        {
                            $strNombrePersona = $objPersona->__toString();
                        }
                        break;
                    case "cuadrilla":
                        $objCuadrilla  = $this->emComercial->getRepository('schemaBundle:AdmiCuadrilla')->find($intIdCuadrillaAsignada);
                        $objCuadrilla2 = $objCuadrilla;
                        break;
                    case "contratista":
                        $objContratista = $this->emComercial->getRepository('schemaBundle:InfoPersona')->find($intIdContratistaAsignado);
                        break;
                    default:
                        $strNombrePersona = "";
                }
                $objInfoDetalleAsignacion = new InfoDetalleAsignacion();
                $objInfoDetalleAsignacion->setDetalleId($objDetalle);

                switch($strTipoAsignado)
                {
                    case "empleado":
                        $objInfoDetalleAsignacion->setAsignadoId($intDepartamentoAsignado);
                        $objInfoDetalleAsignacion->setAsignadoNombre($strNombreDepartamento);
                        $objInfoDetalleAsignacion->setRefAsignadoId($intEmpleadoAsignado[0]);
                        $objInfoDetalleAsignacion->setRefAsignadoNombre($strNombrePersona);
                        $objInfoDetalleAsignacion->setTipoAsignado("EMPLEADO");
                        $objInfoPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                            ->findOneBy(array('personaId' => $objPersona->getId(),
                            'departamentoId' => $intDepartamentoAsignado,
                            'estado' => "Activo"));

                        if(!is_object($objInfoPersonaEmpresaRol))
                        {
                            throw new \Exception ('El usuario no tiene rol asignado.');
                        }

                        break;
                    case "contratista":
                        $objInfoDetalleAsignacion->setAsignadoId($intIdContratistaAsignado);
                        $objInfoDetalleAsignacion->setTipoAsignado("EMPRESAEXTERNA");
                        if ($objContratista && $objContratista != null)
                        {
                            $objInfoDetalleAsignacion->setAsignadoNombre($objContratista->__toString());
                        }
                        break;
                    case "cuadrilla":
                        $objInfoDetalleAsignacion->setTipoAsignado("CUADRILLA");
                        $objInfoDetalleAsignacion->setAsignadoId($intIdCuadrillaAsignada);
                        $objInfoDetalleAsignacion->setAsignadoNombre($objCuadrilla->getNombreCuadrilla());
                        $objCuadrilla = $this->emComercial->getRepository('schemaBundle:InfoCuadrillaTarea')
                            ->getIntegrantesCuadrilla($intIdCuadrillaAsignada);
                        $intBandera = 0;
                        if (count($objCuadrilla) > 0)
                        {
                            foreach ($objCuadrilla as $arrayDato)
                            {
                                $objInfoCuadrilla = $this->emComercial->getRepository('schemaBundle:InfoCuadrilla')
                                    ->getLiderCuadrilla($arrayDato['idPersona']);
                                if ($objInfoCuadrilla)
                                {
                                    $intBandera = 1;
                                    $objLider = $this->emComercial->getRepository('schemaBundle:InfoPersona')->find($arrayDato['idPersona']);
                                    $objPersonaEmpresaRol = $objInfoCuadrilla[0]['personaEmpresaRolId'];
                                    $objInfoDetalleAsignacion->setRefAsignadoId(($objLider->getId()) ? $objLider->getId() : "");
                                    $objInfoDetalleAsignacion->setRefAsignadoNombre(($objLider->__toString()) ? $objLider->__toString() : "");
                                    break;
                                }
                            }
                            if ($intBandera == 0)
                            {
                                foreach ($objCuadrilla as $arrayDatos)
                                {
                                    $intRol = $this->emComercial->getRepository('schemaBundle:AdmiCuadrilla')->getRolJefeCuadrilla();
                                    $objInfoPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                        ->findOneBy(array('empresaRolId'=>$intRol,'personaId'=>$arrayDatos['idPersona'],'estado'=>"Activo"));
                                    if ($objInfoPersonaEmpresaRol)
                                    {
                                        $intBandera = 1;
                                        $objPersonaEmpresaRol = $objInfoPersonaEmpresaRol->getId();
                                        $objLider = $this->emComercial->getRepository('schemaBundle:InfoPersona')->find($arrayDatos['idPersona']);
                                        $objInfoDetalleAsignacion->setRefAsignadoId(($objLider->getId()) ? $objLider->getId() : "");
                                        $objInfoDetalleAsignacion->setRefAsignadoNombre(($objLider->__toString()) ? $objLider->__toString() : "");
                                        break;
                                    }
                                }
                            }
                            if ($intBandera == 0)
                            {
                                foreach ($objCuadrilla as $arrayDatos)
                                {
                                    $objInfoPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                        ->findOneBy( array('personaId' => $arrayDatos['idPersona'],
                                                           'estado'    => "Activo",
                                                           'id'        => $arrayDatos['empresaRolId']));

                                    if (is_object($objInfoPersonaEmpresaRol))
                                    {
                                        $intBandera           = 1;
                                        $objPersonaEmpresaRol = $objInfoPersonaEmpresaRol->getId();
                                        $objLider             = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                            ->find($arrayDatos['idPersona']);
                                        $objInfoDetalleAsignacion->setRefAsignadoId(($objLider->getId()) ? $objLider->getId() : "");
                                        $objInfoDetalleAsignacion->setRefAsignadoNombre(($objLider->__toString()) ? $objLider->__toString() : "");
                                        break;
                                    }
                                }
                            }
                            if ($intBandera == 0)
                            {
                                $objInfoDetalleAsignacion->setRefAsignadoId($objCuadrilla['idPersona']);
                                $objInfoDetalleAsignacion->setRefAsignadoNombre($objCuadrilla['nombres'] . " " . $objCuadrilla['apellidos']);
                                $objInfoDetalleAsignacion->setPersonaEmpresaRolId($objCuadrilla['empresaRolId']);
                                $objPersonaEmpresaRol = $objCuadrilla['empresaRolId'];
                            }
                        }
                        break;
                    default:
                        $strNombrePersona = "";
                        break;
                }

                if (isset($strMotivo) && $strMotivo != '')
                {
                    $objInfoDetalleAsignacion->setMotivo($strMotivo);
                }

                $objInfoDetalleAsignacion->setUsrCreacion($strUsrCreacion);
                $objInfoDetalleAsignacion->setFeCreacion(new \DateTime('now'));
                $objInfoDetalleAsignacion->setIpCreacion($strClientIp);
                $objInfoDetalleAsignacion->setDepartamentoId($intIdDepartamento);

                if ($intPersonaEmpresaRol)
                {
                    $objPersonaEmpresaRol = $this->emComercial->getRepository("schemaBundle:InfoPersonaEmpresaRol")
                                                           ->find($intPersonaEmpresaRol);

                    if ($objPersonaEmpresaRol->getOficinaId())
                    {
                        $objInfoOficinaGrupo = $this->emComercial->getRepository("schemaBundle:InfoOficinaGrupo")
                            ->find($objPersonaEmpresaRol->getOficinaId());
                        if ($objInfoOficinaGrupo->getCantonId())
                        {
                            $objInfoDetalleAsignacion->setCantonId($objInfoOficinaGrupo->getCantonId());
                        }
                    }
                }

                switch($strTipoAsignado)
                {
                    case "empleado":
                        if ($objInfoPersonaEmpresaRol->getId())
                        {
                            $objInfoDetalleAsignacion->setPersonaEmpresaRolId($objInfoPersonaEmpresaRol->getId());
                        }
                        break;
                    case  "cuadrilla":
                        if ($intBandera == 1)
                        {
                            $objInfoDetalleAsignacion->setPersonaEmpresaRolId($objPersonaEmpresaRol);
                        }
                        break;
                    default:
                        $strNombrePersona = "";
                }

                $this->emSoporte->persist($objInfoDetalleAsignacion);
                $this->emSoporte->flush();

                if ($strTipoAsignado == "cuadrilla")
                {
                    $objAfectadosInfoCuadrillaTarea = $this->emSoporte->getRepository('schemaBundle:InfoCuadrillaTarea')
                        ->findByDetalleId($objDetalle);

                    if ($objAfectadosInfoCuadrillaTarea && count($objAfectadosInfoCuadrillaTarea) > 0)
                    {
                        foreach($objAfectadosInfoCuadrillaTarea as $objAfectado)
                        {
                            $this->emSoporte->remove($objAfectado);
                            $this->emSoporte->flush();
                        }
                    }

                    //*********************ACTUALIZO INTEGRANTES DE CUADRILLA**********************
                    $objCuadrillaTarea = $this->emComercial->getRepository('schemaBundle:InfoCuadrillaTarea')
                        ->getIntegrantesCuadrilla($intIdCuadrillaAsignada);

                    foreach($objCuadrillaTarea as $arrayCuadrilla)
                    {
                        $objInfoCuadrillaTarea = new InfoCuadrillaTarea();
                        $objInfoCuadrillaTarea->setDetalleId($objDetalle);
                        $objInfoCuadrillaTarea->setCuadrillaId($intIdCuadrillaAsignada);
                        $objInfoCuadrillaTarea->setPersonaId($arrayCuadrilla['idPersona']);
                        $objInfoCuadrillaTarea->setUsrCreacion($strUsrCreacion);
                        $objInfoCuadrillaTarea->setFeCreacion(new \DateTime('now'));
                        $objInfoCuadrillaTarea->setIpCreacion($strClientIp);
                        $this->emSoporte->persist($objInfoCuadrillaTarea);
                        $this->emSoporte->flush();
                    }
                    //*********************INGRESO DE INTEGRANTES DE CUADRILLA**********************
                }

                if ($strTipoAsignado == "cuadrilla" && $objPersonaEmpresaRol != "")
                {
                    $objPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')->find($objPersonaEmpresaRol);

                    if (is_object($objPersonaEmpresaRol))
                    {
                        $intDepartamentoAsignado = $objPersonaEmpresaRol->getDepartamentoId();
                    }
                }


                $strDptoReasignacion = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('ACTUALIZA_TAREA_REASIGNACION', 
                                                                '', 
                                                                '', 
                                                                '', 
                                                                'DEPARTAMENTOS', 
                                                                '', 
                                                                '', 
                                                                ''
                                                                );
                // Cambio de tarea en los departamentos configurados DATACENTER
                if (!empty($intIdDepartamento) && 
                    (in_array($intIdDepartamento, explode(",", $strDptoReasignacion['valor2'])) || 
                        $strDptoReasignacion['valor3'] == 'S'))
                {
                    $strEnviaDepartamento = 'N';
                }

                $arrayParametrosHist = array();
                $arrayParametrosHist["strCodEmpresa"]           = $strCodEmpresa;
                $arrayParametrosHist["strUsrCreacion"]          = $strUsrCreacion;
                $arrayParametrosHist["intIdDepartamentoOrigen"] = $intIdDepartamento;
                $arrayParametrosHist["strIpCreacion"]           = $strClientIp;
                $arrayParametrosHist["intDetalleId"]            = $objDetalle->getId();
                $arrayParametrosHist["strObservacion"]          = "Tarea Re-asignada - Modulo tareas";
                $arrayParametrosHist["strEstadoActual"]         = "Asignada";
                $arrayParametrosHist["strOpcion"]               = "Historial";
                $arrayParametrosHist["strAccion"]               = "Reasignada";
                $arrayParametrosHist["strFeCreacion"]           = new \DateTime('now');
                $arrayParametrosHist["intAsignadoId"]           = $intDepartamentoAsignado;
                if ($strTipoAsignado == "contratista")
                {
                    $arrayParametrosHist["intAsignadoId"] = $intIdContratistaAsignado;
                }

                $arrayParametrosHist["strEnviaDepartamento"]    = $strEnviaDepartamento;
                $arrayParametrosHist["intTareaId"]              = $intIdFinTarea;
                $arrayParametrosHist["strMotivoFinTarea"]       = $strMotivo;

                $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

                $strObservacionAsignacion   = "Tarea fue Reasignada a ";
                $strEstadoReAsignacion      = "Asignada";

                if ($boolEsAsignadaReprogramada)
                {
                    $strObservacionAsignacion   = "Tarea fue Reasignada a ";
                    $strEstadoReAsignacion      = "Asignada";
                    $arrayParametrosHist["strObservacion"]  = "Tarea Asignada - Modulo tareas";
                    $arrayParametrosHist["strEstadoActual"] = "Asignada";
                    $arrayParametrosHist["strOpcion"]       = "Historial";
                    $arrayParametrosHist["strAccion"]       = "Reasignada";
                    $arrayParametrosHist["strFeCreacion"]   =  new \DateTime('now');
                    $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);
                }

                if (!$boolEsAsignadaReprogramada && !$boolEsReprogramadaAtras)
                {
                    $objDate = new \DateTime('now');
                }

                $arrayParametrosSeg = array();
                $arrayParametrosSeg["strCodEmpresa"]           = $strCodEmpresa;
                $arrayParametrosSeg["strUsrCreacion"]          = $strUsrCreacion;
                $arrayParametrosSeg["intIdDepartamentoOrigen"] = $intIdDepartamento;
                $arrayParametrosSeg["strIpCreacion"]           = $strClientIp;
                $arrayParametrosSeg["intDetalleId"]            = $objDetalle->getId();
                $arrayParametrosSeg["strEstadoActual"]         = $strEstadoReAsignacion;
                $arrayParametrosSeg["strOpcion"]               = "Seguimiento";
                $arrayParametrosSeg["strAccion"]               = "Reasignada";
                $arrayParametrosSeg["strFeCreacion"]           = new \DateTime('now');
                $arrayParametrosSeg["intAsignadoId"]           = $intDepartamentoAsignado;
                if ($strTipoAsignado == "contratista")
                {
                    $arrayParametrosSeg["intAsignadoId"] = $intIdContratistaAsignado;
                }

                switch ($strTipoAsignado)
                {
                    case "empleado":
                        $arrayParametrosSeg["strObservacion"] = $strObservacionAsignacion . $strNombrePersona;
                        break;
                    case "cuadrilla":
                        $arrayParametrosSeg["strObservacion"] = $strObservacionAsignacion . "la cuadrilla " . $objCuadrilla2->getNombreCuadrilla();
                        break;
                    case "contratista":
                        $arrayParametrosSeg["strObservacion"] = $strObservacionAsignacion . $objContratista->__toString();
                        break;
                    default:
                        $arrayParametrosSeg["strObservacion"] = "";
                        break;
                }
                $strObersacionAsignado = $arrayParametrosSeg["strObservacion"];
                $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosSeg);
                //Se crea como seguimiento el motivo ingresado

                if(isset($objTarea) && !empty($objTarea) && $objTarea->getNombreTarea() != '')
                {
                    $strFinTareaMotivo = "<br/><b>Fin de tarea seleccionado:</b> " . $objTarea->getNombreTarea();
                }

                if ($strMotivo)
                {
                    $arrayParametrosSeg["strObservacion"] = $strMotivo . $strFinTareaMotivo;
                    $arrayParametrosSeg["strFeCreacion"]  = new \DateTime('now');
                    $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosSeg);
                }

                if ($boolEsAsignadaReprogramada)
                {
                    $arrayParametrosHist["strObservacion"]  = "Tarea Reprogramada - Modulo tareas";
                    $arrayParametrosHist["strEstadoActual"] = "Reprogramada";
                    $arrayParametrosHist["strOpcion"]       = "Historial";
                    $arrayParametrosHist["strAccion"]       = "Reprogramada";
                    $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

                    $arrayParametrosSeg["strObservacion"]  = "Tarea fue Reprogramada para el " . date_format($objDate, 'Y-m-d H:i');
                    $arrayParametrosSeg["strFeCreacion"]   = new \DateTime('now');
                    $arrayParametrosSeg["strEstadoActual"] = "Reprogramada";
                    $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosSeg);

                    $strAccionTracking        = "Tarea Reprogramada";
                }

                //Método encargado de calcular los tiempos de las tareas
                if (strtoupper($strOrigenHal) !== 'SI')
                {
                    $this->calcularTiempoEstado(array('strEstadoActual'   => $arrayParametrosHist["strEstadoActual"],
                                                      'intIdDetalle'      => $objDetalle->getId(),
                                                      'strTipoReprograma' => $strClienteReprograma,
                                                      'strUser'           => $strUsrCreacion,
                                                      'strIp'             => $strClientIp));

                }

                /*
                  ENVIO DE NOTIFICACION DE CORREO EN REASIGNACION DE TAREAS
                 */
                $boolPerteneceACaso = false;
                $intIdCaso = null;

                $objCaso = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->tareaPerteneceACaso($objDetalle->getId());

                $strNumeracionReferencia = null;

                if ($objCaso[0]['caso'] != 0)
                {
                    $boolPerteneceACaso          = true;
                    $objHipotesis               = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                        ->getCasoPadreTarea($objDetalle->getId());
                    $objCaso                    = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                        ->find($objHipotesis[0]->getCasoId()->getId());
                    $intIdCaso                  = $objCaso->getId();
                    $strNumeracion           = $objCaso->getNumeroCaso();
                    $strNumeracionReferencia = ' al Caso #' . $strNumeracion;
                }
                else
                {
                    if ($objDetalle)
                    {
                        //Se obtiene el numero de la tarea en base al id_detalle
                        $intNumeroTarea = $this->emComunicacion->getRepository('schemaBundle:InfoComunicacion')
                            ->getMinimaComunicacionPorDetalleId($objDetalle->getId());

                        $strNumeracion = $intNumeroTarea ? $intNumeroTarea : "";
                        $strNumeracionReferencia = ' a la Actividad #' . $strNumeracion;
                    }
                }

                if ($strTipoAsignado == "cuadrilla")
                {
                    if ($objInfoDetalleAsignacion->getPersonaEmpresaRolId())
                    {
                        $objInfoPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                            ->find($objInfoDetalleAsignacion->getPersonaEmpresaRolId());

                        $objDepartamento = $this->emGeneral->getRepository('schemaBundle:AdmiDepartamento')
                            ->find($objInfoPersonaEmpresaRol->getDepartamentoId());
                    }
                }
                else
                {
                    $objDepartamento = $this->emGeneral->getRepository('schemaBundle:AdmiDepartamento')
                            ->find($objInfoDetalleAsignacion->getAsignadoId());
                }
                $objPersona = null;
                $intIdReceptor = 0;
                if ($objInfoDetalleAsignacion->getRefAsignadoId() || $strTipoAsignado == "contratista")
                {
                    $intIdReceptor = $objInfoDetalleAsignacion->getRefAsignadoId();
                    if ($strTipoAsignado == "contratista")
                    {
                        $intIdReceptor = $objContratista->getId();
                    }
                    $objInfoPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                        ->findOneBy(array('personaId' => $intIdReceptor,
                        'formaContactoId' => 5,
                        'estado' => "Activo"));

                    if ($objInfoPersonaFormaContacto)
                    {
                        $arrayTo[] = $objInfoPersonaFormaContacto->getValor(); //Correo Persona Asignada
                    }

                    $objFormaContactoAlias = $this->emComercial->getRepository('schemaBundle:AdmiFormaContacto')
                        ->findOneBy(array('descripcionFormaContacto' => "Alias",
                        'estado' => "Activo"));

                    $objInfoPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                        ->findOneBy(array('personaId' => $intIdReceptor,
                        'formaContactoId' => $objFormaContactoAlias->getId(),
                        'estado' => "Activo"));

                    if ($objInfoPersonaFormaContacto)
                    {
                        $arrayTo[] = $objInfoPersonaFormaContacto->getValor(); //Correo de forma de contacto Alias
                    }

                    $objPersona = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                        ->findOneByLogin($strUsrCreacion);
                }
                $objTarea = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')
                        ->find($objDetalle->getTareaId());
                $strAsunto = "Asignacion de Tarea";

                /*
                  OBTENCION DEL CANTON DEL ENCARGADO DE LA TAREA
                 */
                $strEmpresa = '';
                if ($objDepartamento)
                {
                    $strEmpresa = $objDepartamento->getEmpresaCod();
                    $objDepartamento = $objDepartamento->getId();
                }
                if ($objInfoDetalleAsignacion && ( $strTipoAsignado == "empleado" || $strTipoAsignado == "cuadrilla"))
                {
                    $objInfoPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                        ->find($objInfoDetalleAsignacion->getPersonaEmpresaRolId());
                }
                if ($objInfoPersonaEmpresaRol && ( $strTipoAsignado == "empleado" || $strTipoAsignado == "cuadrilla"))
                {
                    $objOficina = $this->emComercial->getRepository('schemaBundle:InfoOficinaGrupo')
                        ->find($objInfoPersonaEmpresaRol->getOficinaId()->getId());
                    $intIdCanton = $objOficina->getCantonId();
                }
                else
                {
                    $intIdCanton = '';
                }
                /**********************************************************************
                  USO DE SERVICE ENVIOPLANTILLA PARA GESTION DE ENVIO DE CORREOS
                 **********************************************************************/
                //aumentar notificacion al cliente correo y sms ojo
                if(is_object($objTarea))
                {
                    $strNombreProceso = $objTarea->getProcesoId()->getNombreProceso();
                }

                //Esto para casos cuando la tarea sea reasignada por tareas de instalacion de SAFE VIDEO ANALYTICS CAM
                if($strBanderaSafeCity == "S")
                {
                    $strMotivo = $strObservacionCorreo;
                }

                $strAsunto = $strAsunto . " | PROCESO: ".$strNombreProceso;

                $arrayParametros = array('idCaso' => $intIdCaso,
                    'nombreProceso'   => $strNombreProceso,
                    'perteneceACaso'  => $boolPerteneceACaso,
                    'numeracion'      => $strNumeracion,
                    'referencia'      => $strNumeracionReferencia,
                    'asignacion'      => $objInfoDetalleAsignacion,
                    'persona'         => $objPersona ? $objPersona : 'false',
                    'nombreTarea'     => $objTarea->getNombreTarea() ? $objTarea->getNombreTarea() : '',
                    'estado'          => $objTarea->getEstado() ? $objTarea->getEstado() : '',
                    'empleadoLogeado' => $strUsrCreacion,
                    'empresa'         => $strCodEmpresa,
                    'detalle'         => $objDetalle,
                    'observacion'     => $strMotivo ? $strMotivo : "");

                $boolEnviaNotificacion = true;
                //Se agrega validacion solo para TN, para que se envie la notificacion es necesario que llegue un departamento
                if ($strPrefijoEmpresa == "TN")
                {
                    $boolEnviaNotificacion = false;
                    if ($objDepartamento)
                    {
                        $boolEnviaNotificacion = true;
                    }
                }

                if ($boolEnviaNotificacion)
                {
                    $this->envioPlantilla->generarEnvioPlantilla($strAsunto,
                                                                 $arrayTo,
                                                                 'TAREAASIG',
                                                                 $arrayParametros,
                                                                 $strEmpresa,
                                                                 $intIdCanton,
                                                                 $objDepartamento);
                }

                if ($idCaso)
                {
                    $objInfoCaso = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                                   ->find($idCaso);
                    $objDetalle  = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                   ->find($intIdDetalle);
                    $objSolicitud = $this->_em->getRepository('schemaBundle:InfoDetalleSolicitud')
                                              ->find($objSolicitud->getDetalleSolicitudId()->getId());
                    if (is_object($objSolicitud))
                    {
                        $intPtoCliente = $objSolicitud->getServicioId()->getPuntoId()->getId();
                    }

                    if ($intPtoCliente && ($objInfoCaso->getTipoCasoId()->getNombreTipoCaso() == 'Tecnico'||
                                           $objInfoCaso->getTipoCasoId()->getNombreTipoCaso() == 'Arcotel'))
                    {

                        $arrayParametrosSMS = array();
                        $arrayParametrosSMS['puntoId']      = $intPtoCliente;
                        $arrayParametrosSMS['personaId']    = "";
                        $arrayParametrosSMS['destinatario'] = "CLI";
                        $arrayParametrosSMS['tipoEnvio']    = "OUT";
                        $arrayParametrosSMS['tipoNotifica'] = "SMS";
                        $arrayParametrosSMS['empresa']      = $strCodEmpresa;
                        $arrayParametrosSMS['tipoEvento']   = "REASIGNAR";
                        $arrayParametrosSMS['usuario']      = $strUsrCreacion;
                        $arrayParametrosSMS['casoId']       = $objInfoCaso->getId();
                        $arrayParametrosSMS['detalleId']    = "";
                        $arrayParametrosSMS['asignacion']   = "";
                        $this->enviaSMSCasoCliente($arrayParametrosSMS);
                        $arrayParametrosCorreo['puntoId']        = $intPtoCliente;
                        $arrayParametrosCorreo['usuario']        = $strUsrCreacion;
                        $arrayParametrosCorreo['caso']           = $objInfoCaso;
                        $arrayParametrosCorreo['idDepartamento'] = $intIdDepartamento;
                        $arrayParametrosCorreo['empresa']        = $strCodEmpresa;
                        $arrayParametrosCorreo['codPlantilla']  = "CASOREASIGNCLI";
                        $arrayParametrosCorreo['asunto']        = "Reasignacion de caso";
                        $arrayParametrosCorreo['observacion']    =$strMotivo;
                        $this->enviaCorreoClientesCasos($arrayParametrosCorreo);
                    }
                }

                $this->emSoporte->getConnection()->commit();

                $boolEsHal = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')
                                             ->isAsignadoHal(array( 'intDetalleId' => $intIdDetalle));
                
                if($boolEsHal)
                { 
                       
                        $strCommand = 'nohup php /home/telcos/app/console Envia:Tracking ';
                        $strCommand = $strCommand . escapeshellarg($strUsrCreacion). ' ';
                        $strCommand = $strCommand . escapeshellarg($strClientIp). ' ';
                        $strCommand = $strCommand . '"'.escapeshellarg($strAccionTracking).'" ';
                        $strCommand = $strCommand . escapeshellarg($intIdDetalle). ' ';
    
                        $strCommand = $strCommand .'>/dev/null 2>/dev/null &';
                        shell_exec($strCommand);   
                } 
                $arrayResultado = array('success' => true, 'asignado' => $strObersacionAsignado);
            }
            else
            {
                $arrayResultado = array('success' => true, 'mensaje' => "cerrada");
            }

            //ACTUALIZA TAREA EN INFO_TAREA
            if ( is_object($objDetalle) )
            {
                $arrayParametrosInfoTarea['intDetalleId'] = $objDetalle->getId();
                $arrayParametrosInfoTarea['strUsrUltMod'] = isset($strUsrCreacion)? $strUsrCreacion : '';
                $this->actualizarInfoTarea($arrayParametrosInfoTarea);
            }
        }
        catch(\Exception $e)
        {
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }
            $this->emSoporte->getConnection()->close();
            $this->emComunicacion->getConnection()->close();
            $this->emGeneral->getConnection()->close();

            $this->serviceUtil->insertError('TELCOS+',
                                            'SoporteService->reasignarTarea',
                                            $e->getMessage(),
                                            $strUsrCreacion,
                                            $strClientIp  );

            $arrayResultado = array('success' => false, 'mensaje' => $e->getMessage());
        }
        return $arrayResultado;
    }

    /**
     * reasignarTareaCambioLider
     *
     * Metodo encargado realizar una reasignación de tarea por cambio de lider en la misma cuadrilla
     *
     * @param array $arrayParametros [ "idEmpresa","prefijoEmpresa","id_detalle","id_tarea","motivo","departamento_asignado","empleado_asignado",
     *                                 "cuadrilla_asignada","contratista_asignada","tipo_asignado","fecha_ejecucion","hora_ejecucion",
     *                                 "clientIp","user","persona_empresa_rol","id_departamento"]
     *
     * @return array
     *
     * @author Jean Pierre Nazareno Martinez <jnazareno@telconet.ec>
     * @version 1.0 18-11-2020
     */
    public function reasignarTareaCambioLider($arrayParametros)
    { 
        $strCodEmpresa            = ($arrayParametros['idEmpresa'] ? $arrayParametros['idEmpresa'] : "");
        $strPrefijoEmpresa        = ($arrayParametros['prefijoEmpresa'] ? $arrayParametros['prefijoEmpresa'] : "");
        $intIdDetalle             = $arrayParametros['id_detalle'];
        $strMotivo                = $arrayParametros['motivo'];
        $intIdCuadrillaAsignada   = $arrayParametros['cuadrilla_asignada'];
        $strClientIp              = $arrayParametros['clientIp'];
        $strUsrCreacion           = $arrayParametros['user'];
        $intIdDepartamento        = ($arrayParametros['id_departamento'] ? $arrayParametros['id_departamento'] : "");
        $strObersacionAsignado    = "";

        $strTipoAsignado = "cuadrilla";

        $strObservacionAsignacion   = "Tarea fue Reasignada a ";
        $strEstadoReAsignacion      = "Asignada";

        $arrayInfoEmpresaRolCarac = array();

        try
        {
            $strEstadoActualTarea = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->getUltimoEstado($intIdDetalle);
            $arrayValidaEstado = array('Cancelada','Rechazada','Anulada','Finalizada','Replanificada');
            
            if (!in_array($strEstadoActualTarea, $arrayValidaEstado))
            {
                $objDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->find($intIdDetalle);

                $objCuadrilla  = $this->emComercial->getRepository('schemaBundle:AdmiCuadrilla')->find($intIdCuadrillaAsignada);
                $objCuadrilla2 = $objCuadrilla;

                $objInfoDetalleAsignacion = new InfoDetalleAsignacion();
                
                $objInfoDetalleAsignacion->setDetalleId($objDetalle);
              
                $objInfoDetalleAsignacion->setTipoAsignado("CUADRILLA");
                $objInfoDetalleAsignacion->setAsignadoId($intIdCuadrillaAsignada);
                $objInfoDetalleAsignacion->setAsignadoNombre($objCuadrilla->getNombreCuadrilla());

                $objCuadrilla = $this->emComercial->getRepository('schemaBundle:InfoCuadrillaTarea')
                    ->getIntegrantesCuadrilla($intIdCuadrillaAsignada);
                
                $intBandera = 0;

                if (count($objCuadrilla) > 0)
                {

                    foreach ($objCuadrilla as $arrayDato)
                    {

                        $arrayRequestGetLider = array('personaEmpresaRolId' => $arrayDato['empresaRolId']);

                        $arrayInfoEmpresaRolCarac = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                        ->getLiderCuadrillaByPersonaEmpresaRol($arrayRequestGetLider);
        
                        if (!empty($arrayInfoEmpresaRolCarac) && $arrayInfoEmpresaRolCarac['status'] === 'OK')
                        {

                            $objPersonaEMpresaRolACambiar = $this->emSoporte->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                            ->find($arrayInfoEmpresaRolCarac['result'][0]['personaEmpresaRolId']);

                            $objInfoDetalleAsignacion->setRefAsignadoId($objPersonaEMpresaRolACambiar->getPersonaId()->getId());
                            $objInfoDetalleAsignacion->setRefAsignadoNombre($objPersonaEMpresaRolACambiar->getPersonaId()->getNombres() .' '
                            .$objPersonaEMpresaRolACambiar->getPersonaId()->getApellidos());
        
                        }
                    }
                }

                if (isset($strMotivo) && $strMotivo != '')
                {
                    $objInfoDetalleAsignacion->setMotivo($strMotivo);
                }

                $objInfoDetalleAsignacion->setUsrCreacion($strUsrCreacion);
                $objInfoDetalleAsignacion->setFeCreacion(new \DateTime('now'));
                $objInfoDetalleAsignacion->setIpCreacion($strClientIp);
                $objInfoDetalleAsignacion->setDepartamentoId($intIdDepartamento);

                $objInfoDetalleAsignacion->setPersonaEmpresaRolId($arrayInfoEmpresaRolCarac['result'][0]['personaEmpresaRolId']);

                $this->emSoporte->persist($objInfoDetalleAsignacion);
                $this->emSoporte->flush();

                if ($strTipoAsignado == "cuadrilla")
                {
                    $objAfectadosInfoCuadrillaTarea = $this->emSoporte->getRepository('schemaBundle:InfoCuadrillaTarea')
                        ->findByDetalleId($objDetalle);

                    if ($objAfectadosInfoCuadrillaTarea && count($objAfectadosInfoCuadrillaTarea) > 0)
                    {
                        foreach($objAfectadosInfoCuadrillaTarea as $objAfectado)
                        {
                            $this->emSoporte->remove($objAfectado);
                            $this->emSoporte->flush();
                        }
                    }

                    //*********************ACTUALIZO INTEGRANTES DE CUADRILLA**********************
                    $objCuadrillaTarea = $this->emComercial->getRepository('schemaBundle:InfoCuadrillaTarea')
                        ->getIntegrantesCuadrilla($intIdCuadrillaAsignada);

                    foreach($objCuadrillaTarea as $arrayCuadrilla)
                    {
                        $objInfoCuadrillaTarea = new InfoCuadrillaTarea();
                        $objInfoCuadrillaTarea->setDetalleId($objDetalle);
                        $objInfoCuadrillaTarea->setCuadrillaId($intIdCuadrillaAsignada);
                        $objInfoCuadrillaTarea->setPersonaId($arrayCuadrilla['idPersona']);
                        $objInfoCuadrillaTarea->setUsrCreacion($strUsrCreacion);
                        $objInfoCuadrillaTarea->setFeCreacion(new \DateTime('now'));
                        $objInfoCuadrillaTarea->setIpCreacion($strClientIp);
                        $this->emSoporte->persist($objInfoCuadrillaTarea);
                        $this->emSoporte->flush();
                    }
                    //*********************INGRESO DE INTEGRANTES DE CUADRILLA**********************
                }

                if ($strTipoAsignado == "cuadrilla" && $objPersonaEmpresaRol != "")
                {
                    $objPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')->find($objPersonaEmpresaRol);

                    if (is_object($objPersonaEmpresaRol))
                    {
                        $intDepartamentoAsignado = $objPersonaEmpresaRol->getDepartamentoId();
                    }
                }

                $arrayParametrosHist = array();
                $arrayParametrosHist["strCodEmpresa"]           = $strCodEmpresa;
                $arrayParametrosHist["strUsrCreacion"]          = $strUsrCreacion;
                $arrayParametrosHist["intIdDepartamentoOrigen"] = $intIdDepartamento;
                $arrayParametrosHist["strIpCreacion"]           = $strClientIp;
                $arrayParametrosHist["intDetalleId"]            = $objDetalle->getId();
                $arrayParametrosHist["strObservacion"]          = "Tarea Re-asignada - Modulo tareas";
                $arrayParametrosHist["strEstadoActual"]         = "Asignada";
                $arrayParametrosHist["strOpcion"]               = "Historial";
                $arrayParametrosHist["strAccion"]               = "Reasignada";
                $arrayParametrosHist["strFeCreacion"]           = new \DateTime('now');
                $arrayParametrosHist["intAsignadoId"]           = $intDepartamentoAsignado;

                $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

                $arrayParametrosSeg = array();
                $arrayParametrosSeg["strCodEmpresa"]           = $strCodEmpresa;
                $arrayParametrosSeg["strUsrCreacion"]          = $strUsrCreacion;
                $arrayParametrosSeg["intIdDepartamentoOrigen"] = $intIdDepartamento;
                $arrayParametrosSeg["strIpCreacion"]           = $strClientIp;
                $arrayParametrosSeg["intDetalleId"]            = $objDetalle->getId();
                $arrayParametrosSeg["strEstadoActual"]         = $strEstadoReAsignacion;
                $arrayParametrosSeg["strOpcion"]               = "Seguimiento";
                $arrayParametrosSeg["strAccion"]               = "Reasignada";
                $arrayParametrosSeg["strFeCreacion"]           = new \DateTime('now');
                $arrayParametrosSeg["intAsignadoId"]           = $intDepartamentoAsignado;
                $arrayParametrosSeg["strObservacion"] = $strObservacionAsignacion . "la cuadrilla " . $objCuadrilla2->getNombreCuadrilla();

                $strObersacionAsignado = $arrayParametrosSeg["strObservacion"];
                $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosSeg);

                //Se crea como seguimiento el motivo ingresado
                if ($strMotivo)
                {
                    $arrayParametrosSeg["strObservacion"] = $strMotivo;
                    $arrayParametrosSeg["strFeCreacion"]  = new \DateTime('now');
                    $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosSeg);
                }

                $arrayResultado = array('success' => true, 'asignado' => $strObersacionAsignado);
            }
            else
            {
                $arrayResultado = array('success' => true, 'mensaje' => "cerrada");
            }
        }
        catch(\Exception $e)
        {
            $this->serviceUtil->insertLog(array(
                'enterpriseCode'   => "10",
                'logType'          => 0,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => 'SoporteService',
                'appMethod'        => 'reasignarTareaCambioLider',
                'descriptionError' => $ex->getMessage(),
                'status'           => 'Fallido',
                'inParameters'     => json_encode($arrayParametros),
                'creationUser'     => 'TELCOS'));

            $arrayResultado = array('success' => false, 'mensaje' => $e->getMessage());
        }
        return $arrayResultado;
    }

    /**
     * Obtiene el float de la coordenada que se encuentra en la metadata de una imagen
     *
     * @param array $arrayCoordinate
     * @param string $strHemisferio
     *
     * @return float $floatCoordenada
     */
    public function getCoordenadaGps($arrayCoordinate, $strHemisferio)
    {
        for($intContador = 0; $intContador < 3; $intContador++)
        {
            $arrayPartes = explode('/', $arrayCoordinate[$intContador]);
            if(count($arrayPartes) == 1)
            {
                $arrayCoordinate[$intContador] = $arrayPartes[0];
            }
            else if(count($arrayPartes) == 2)
            {
                $arrayCoordinate[$intContador] = floatval($arrayPartes[0]) / floatval($arrayPartes[1]);
            }
            else
            {
                $arrayCoordinate[$intContador] = 0;
            }
        }
        list($intGrados, $intMinutos, $intSegundos) = $arrayCoordinate;
        $intSigno           = ($strHemisferio == 'W' || $strHemisferio == 'S') ? -1 : 1;
        $floatCoordenada    = $intSigno * ($intGrados + $intMinutos / 60 + $intSegundos / 3600);
        return $floatCoordenada;
    }

    /**
     * Inserta el evento
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 24-03-2018
     *
     * se añade que retorne el mensaje de la excepcion
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.1 03-04-2018
     *
     * @param array $arrayParametros
     * @return array $arrayResultado
     */
    public function getTipoEvento($arrayParametros)
    {
        try
        {
            $objEvento = new InfoEvento();
            $objEvento->setCuadrillaId($arrayParametros['intCuadrillaId']);
            $objEvento->setTipoEventoId($arrayParametros['intTipoEvento']);
            $objEvento->setDetalleId($arrayParametros['intDetalleId']);
            $objEvento->setFechaInicio(new \DateTime('now'));
            $objEvento->setPersonaEmpresaRolId($arrayParametros['intPersonaEmpresaRolId']);
            $objEvento->setAccion($arrayParametros['strAccion']);
            $objEvento->setEstado($arrayParametros['strEstado']);
            $objEvento->setUsrCreacion($arrayParametros['strUsrCreacion']);
            $objEvento->setFeCreacion(new \DateTime('now'));
            $objEvento->setIpCreacion($arrayParametros['strIp']);
            $this->emSoporte->persist($objEvento);
            $this->emSoporte->flush();

            $arrayResultado['id']      = $objEvento->getId();
            $arrayResultado['status']  = 'OK' ;
            $arrayResultado['mensaje'] = 'Transacción exitosa.';

        }
        catch(Exception $ex)
        {
            $arrayResultado['status']  = 'ERROR';
            $arrayResultado['mensaje'] = $ex->getMessage();

            $this->serviceUtil->insertError('TELCOS+',
                                            'SoporteService->insertEvento',
                                            $ex->getMessage(),
                                            $arrayParametros['strUser'],
                                            $arrayParametros['strIpUser']);
        }

        return $arrayResultado;
    }

    /**
     * Insertar el evento
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 24-03-2018
     *
     * se valido el id evento y el tipo de evento Jornada
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.1 24-03-2018
     *
     * se valido que el inicio de jornada sea por dia
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.2 03-04-2018
     *
     * * se agrega nuevo campo para reporteria strVersion
     * @author Wilmer Vera<wvera@telconet.ec>
     * @version 1.2 04-07-2018
     * se agrega nuevos campos de coordenadas para reporteria strLatitud strLongitud
     * @author Wilmer Vera<wvera@telconet.ec>
     * @version 1.2 04-11-2020
     *
     * Se agrega validación para cierre de eventos día anterior
     * @author Carlos Caguana <ccaguana@telconet.ec>
     * @version 1.3 02-02-2021
     * 
     * Se agrega llamado a proceso encargado de enviar tracking a megadatos
     * solo para eventos de movilizacion
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.4 10-09-2021
     * 
     * Se agrega validacion en el  llamado a proceso encargado de enviar tracking a megadatos
     * solo para eventos de movilizacion
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.5 14-10-2021
     * 
     * Se elimina filtro de tareas por dpto Operaciones Urbanas para tracking map 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.6 15-10-2021
     * 
     * @return array $arrayResultado
     */
   
    public function insertEvento($arrayParametros)
    {
        $strCodigoTipoEvento = $arrayParametros['strCodigoTipoEvento'];
        $intTipoEvento       = $arrayParametros['intTipoEvento'];
        $intCuadrillaId      = $arrayParametros['intCuadrillaId'];
        $strVersion          = $arrayParametros['strVersion'];
        $strSerieLogica      = $arrayParametros['strSerieLogica'];
        $strLatitud          = $arrayParametros['strLatitud'];
        $strLongitud         = $arrayParametros['strLongitud'];
        $objAdmiTipoEvento   = null;
        $arrayDepTraking     = array(128);
        $intDetalleId        = 0;
        $strAccion           = "";

        //*DECLARACION DE TRANSACCIONES------------------------------------------*/
        $this->emSoporte->getConnection()->beginTransaction();
        //*----------------------------------------------------------------------*/
        try
        {
            if(isset($strCodigoTipoEvento) && !empty($strCodigoTipoEvento))
            {
                $objAdmiTipoEvento  = $this->emSoporte->getRepository("schemaBundle:AdmiTipoEvento")
                                                      ->findOneByCodigo($strCodigoTipoEvento);
            }
            else if(isset($intTipoEvento) && $intTipoEvento > 0)
            {
                $objAdmiTipoEvento  = $this->emSoporte->getRepository("schemaBundle:AdmiTipoEvento")
                                                      ->find($intTipoEvento);
            }

            if(!is_object($objAdmiTipoEvento))
            {
                throw  new Exception("No se encontró el objeto AdmiTipoEvento");
            }
            
            //*-------------------validacion jornada-----------------------*/
            $boolJornada = false;
            $objAdmiTipoEventoJornada  = $this->emSoporte->getRepository("schemaBundle:AdmiTipoEvento")
                                                         ->findOneByCodigo('JORNADA');
              
                                                            
                if(is_object($objAdmiTipoEventoJornada) && $objAdmiTipoEvento->getId() == $objAdmiTipoEventoJornada->getId() )
                 {

                            //Parametros que traen el evento de jornada de las ultimas 12 horas 
                            $arrayParam = [
                                'intCuadrillaId'   => $intCuadrillaId,
                                'intTipoEventoId'  => $objAdmiTipoEventoJornada->getId(),
                                'strVersion'       => $strVersion,
                                'strEstado'        => 'Activo',
                                'boolToday'        => true,
                                'objUtilService'   => $this->serviceUtil
                            ];
                            
   
                            if($intCuadrillaId == 0)
                            {
                                $arrayParam['strUsrCreacion'] = $arrayParametros['strUsrCreacion'];
                            }
    
                            $arrayEventoJornada = $this->emSoporte->getRepository('schemaBundle:InfoEvento')
                                                                                     ->getArrayEventos($arrayParam);
                                       

                            $boolTipoFecha = false;
                            $strFechaInicioJornada="SYSDATE";  
                            if(count($arrayEventoJornada)>0)
                              {
                                $arrayResultado['id'] = $arrayEventoJornada[0]['id'];
                                       if(!empty($arrayEventoJornada[0]["fechaFin"]))
                                          {
                                             $boolJornada = false;
                                             $boolTipoFecha = false;
                                                              //aqui esta cerrado para crear una nueva jornada  
                                                             //Cerre mi jornada en el transcurso de las 12 horas
                                         }
                                         else 
                                         {
                                          $strFechaInicioJornada=$arrayEventoJornada[0]["fechaInicio"];
                                          $boolJornada = true;
                                          $boolTipoFecha = true;

                                            //tengo un evento de jornada en curso
                                         } 
                                  
                                                       
                            }


                            $arrayParam['boolRevision']=true;
                            $arrayParam['intTipoEventoId']=null;
                            $arrayParam['fechaInicio']=$strFechaInicioJornada;
                            if($boolTipoFecha)
                              {
                                   $arrayParam['tipoFecha']= $boolTipoFecha;
                              }
                               else
                              {
                                $arrayParam['tipoFecha']= null;
                       
                              }
                              $arrayEventos =  $this->emSoporte->getRepository('schemaBundle:InfoEvento')
                                               ->getArrayEventos($arrayParam);
                                               
                                                
                                foreach ($arrayEventos as $eventos)
                                {
                                  if(empty($eventos["fechaFin"]) )
                                  {
                                    $arrayParametros['intId']=$eventos["id"];
                                    $arrayParametros['sistema']=true;
                                    $arrayModificacion=$arrayParametros;
                                    $arrayModificacion['strUsrCreacion']="TELCOS";
                                    $this->updateEvento($arrayModificacion);
                                 }
                               }    


                 }    
                          

            //*-------------------FIN validacion jornada-----------------------*/
            if(!$boolJornada)
            {

                $objEvento = new InfoEvento();
                $objEvento->setCuadrillaId($intCuadrillaId);
                $objEvento->setTipoEventoId($objAdmiTipoEvento);
                $objEvento->setPublishId($strSerieLogica);
                $objEvento->setDetalleId($arrayParametros['intDetalleId']);
                $objEvento->setFechaInicio(new \DateTime('now'));
                $objEvento->setPersonaEmpresaRolId($arrayParametros['intPersonaEmpresaRolId']);
                //*-------------------Version Movil-----------------------*/
                $objEvento->setVersion($strVersion );
                //*-------------------Version Movil-----------------------*/
                $objEvento->setObservacion($arrayParametros['strObservacion']);
                $objEvento->setEstado($arrayParametros['strEstado']);
                $objEvento->setUsrCreacion($arrayParametros['strUsrCreacion']);
                $objEvento->setFeCreacion(new \DateTime('now'));
                $objEvento->setIpCreacion($arrayParametros['strIp']);
                $objEvento->setLatitud($strLatitud);
                $objEvento->setLongitud($strLongitud);
                $this->emSoporte->persist($objEvento);
                $this->emSoporte->flush();
                $arrayResultado['id'] = $objEvento->getId();
            }

            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->commit();
            }

            if($intTipoEvento == 1 && strpos($arrayParametros['strObservacion'], 'CLIENTE') > 0)
            {
                $strCadenaAux = substr($arrayParametros['strObservacion'],
                                       strpos($arrayParametros['strObservacion'],"#")+1);
                $intIdComunicacion = substr($strCadenaAux,0,strpos($strCadenaAux,"|"));

                $objInfoComunicacion = $this->emComunicacion->getRepository('schemaBundle:InfoComunicacion')
                                                            ->findOneById($intIdComunicacion);
                if(is_object($objInfoComunicacion))
                {
                    $intDetalleId = $objInfoComunicacion->getDetalleId();
                    if(empty($intDetalleId))
                    {
                        $intDetalleId = 0;
                    }
                }
                $strAccion    = "Inicio Movilizacion";
            }         
              
            if ($intTipoEvento == 1 && $intDetalleId != 0)
            {               
                $boolEsHal = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')
                                        ->isAsignadoHal(array( 'intDetalleId' => $intDetalleId));                             
               
                if($boolEsHal)
                {
                    $strIpUsrTracking = !empty($arrayParametros['strIp']) ? $arrayParametros['strIp'] : "127.0.0.1";
                    $strCommand = 'nohup php /home/telcos/app/console Envia:Tracking ';
                    $strCommand = $strCommand . escapeshellarg($arrayParametros['strUsrCreacion']). ' ';
                    $strCommand = $strCommand . escapeshellarg($strIpUsrTracking). ' ';
                    $strCommand = $strCommand . '"'.escapeshellarg($strAccion).'" ';
                    $strCommand = $strCommand . escapeshellarg($intDetalleId). ' ';
                    $strCommand = $strCommand . escapeshellarg($strSerieLogica). ' ';

                    $strCommand = $strCommand .'>/dev/null 2>/dev/null &';
                    shell_exec($strCommand);
                }
            }

            $arrayResultado['status']  = 'OK' ;
            $arrayResultado['mensaje'] = 'Transacción exitosa.';

        }
        catch(Exception $ex)
        {
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }

            $arrayResultado['status']  = 'ERROR' ;
            $arrayResultado['mensaje'] = $ex->getMessage();

            $this->serviceUtil->insertError('TELCOS+',
                                            'SoporteService->insertEvento',
                                            $ex->getMessage(),
                                            $arrayParametros['strUser'],
                                            $arrayParametros['strIpUser']);
        }

        return $arrayResultado;
    }


    /**
     * Actualiza el evento
     *
     * author John Vera <javera@telconet.ec>
     * @version 1.0 24-03-2018
     *
     * se valido el id evento
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.1 24-03-2018
     *
     * @author Wilmer Vera <wveratelconet.ec>
     * @version 1.2 05-07-2018
     *
     * Se agrega validación para observación cierre de eventos día anterior
     * @author Carlos Caguana <ccaguana@telconet.ec>
     * @version 1.1 02-02-2021
     * @param array $arrayParametros
     *
     * @return array $arrayResultado
     */
    public function updateEvento($arrayParametros)
    {
        $objDateActual = new \DateTime('now');
        $intId         = $arrayParametros['intId'];

        try
        {
            if(!isset($intId) || empty($intId))
            {
                throw  new Exception("El identificador del Evento a actualizar no es válido");
            }

            $objEvento = $this->emSoporte->getRepository('schemaBundle:InfoEvento')->find($intId);

            if(is_object($objEvento))
            {
                $objFechaInicio =$objEvento->getFechaInicio();
                $intValor = $objDateActual->getTimestamp() - $objFechaInicio->getTimestamp();

                if(!empty($arrayParametros['sistema']) && $arrayParametros['sistema'])
                {
                    $objEvento->setObservacion( $objEvento->getObservacion()."- FINALIZADO POR EL SISTEMA");
                }
                
                $objEvento->setFechaFin($objDateActual);
                $objEvento->setValorTiempo($intValor);
                $objEvento->setUsrUltMod($arrayParametros['strUsrCreacion']);
                $objEvento->setFeUltMod($objDateActual);
                $objEvento->setIpUltMod($arrayParametros['strIp']);
                if(isset($arrayParametros['strVersion']))
                {
                 $objEvento->setVersion($arrayParametros['strVersion']);
                }
                $this->emSoporte->persist($objEvento);
                $this->emSoporte->flush();
            }

            $arrayResultado['status']  = 'OK' ;
            $arrayResultado['mensaje'] = 'Transacción exitosa.';

        }
        catch(Exception $ex)
        {
            $arrayResultado['status']  = 'ERROR' ;
            $arrayResultado['mensaje'] = $ex->getMessage();
            
            $this->serviceUtil->insertError('TELCOS+',
                                            'SoporteService->updateEvento',
                                            $ex->getMessage(),
                                            $arrayParametros['strUser'],
                                            $arrayParametros['strIpUser']);
        }

        return $arrayResultado;
    }

    public function enviaSMSCasoCliente($arrayParametrosSMS)
    {
        $intPuntoId      = $arrayParametrosSMS['puntoId'];
        $intPersonaId    = $arrayParametrosSMS['personaId'];
        $strDestinatario = $arrayParametrosSMS['destinatario'];
        $strTipoEnvio    = $arrayParametrosSMS['tipoEnvio'];
        $strTipoNotifica = $arrayParametrosSMS['tipoNotifica'];
        $strTipoEvento   = $arrayParametrosSMS['tipoEvento'];
        $strEmpresa      = $arrayParametrosSMS['empresa'];
        $strUsuario      = $arrayParametrosSMS['usuario'];
        $intCasoId       = $arrayParametrosSMS['casoId'];
        $intDetalleId    = $arrayParametrosSMS['detalleId'];
        $strAsignacion   = $arrayParametrosSMS['asignacion'];

        $strScript = '/home/scripts-telcos/md/soporte/sources/telcos-comunicaciones/dist/TelcosComunicaciones.jar';

        $strParametros = $intPuntoId . "|" . $intPersonaId . "|" . $strDestinatario . "|" . $strTipoEnvio . "|" .
                         $strTipoNotifica . "|" . $strTipoEvento . "|" .$strEmpresa . "|" . $this->host . "|" .
                         $strUsuario . "|" . $intCasoId . "|" . $intDetalleId . "|" . $strAsignacion . "|" . $this->path;

        $strEsperaRespuesta = 'NO';

        $strComando = "nohup ".$this->strPathJava." -jar -Djava.security.egd=file:/dev/./urandom ".$this->path.
                   "telcos/app/Resources/scripts/TelcosComunicacionScripts.jar '" .
                    $strScript . "' '" . $strParametros . "' '" . $strEsperaRespuesta . "' '" . $this->host . "' '".
                    $this->strScriptPathJava."' >> /home/telcos/app/Resources/scripts/log/log.txt &";
        shell_exec($strComando);
    }

    public function enviaCorreoClientesCasos($arrayParametrosCorreo)
    {
        $objCaso           = $arrayParametrosCorreo['caso'];
        $intPuntoId        = $arrayParametrosCorreo['puntoId'];
        $strUser           = $arrayParametrosCorreo['usuario'];
        $intIdDepartamento = $arrayParametrosCorreo['idDepartamento'];
        $strCodPlantilla   = $arrayParametrosCorreo['codPlantilla'];
        $strAsunto         = $arrayParametrosCorreo['asunto'];
        $strCodEmpresa     = $arrayParametrosCorreo['empresa'];

        if ($objCaso->getTipoAfectacion()!='SINAFECTACION')
        {
            $arrayTo = array();
            $arrayParametros = array();
            if ($strCodEmpresa == "18" || $strCodEmpresa == "33")
            {
               $arrayContactosPunto = $this->emComercial->getRepository('schemaBundle:InfoPuntoFormaContacto')
                                                        ->getArrayFormaContactosPorPunto($intPuntoId);
               foreach ($arrayContactosPunto as $contacto)
               {
                   $arrayTo[] = $contacto['valor'];
               }
               
               if ($strCodEmpresa == "18")
               {
                   $arrayParametros['strEmpresa'] = "NETLIFE";
               }

               if ($strCodEmpresa == "33")
               {
                $arrayParametros['strEmpresa'] = "ECUANET";
               }


            }
            if ($strCodEmpresa == "10")
            {
               $arrayContactosPunto = $this->emComercial->getRepository("schemaBundle:InfoPuntoContacto")
                                                        ->getArrayContactosPorPuntoYTipo($intPuntoId , "Contacto Tecnico");
               foreach ($arrayContactosPunto as $contacto)
               {
                   $arrayTo[] = $contacto['valor'];
               }
               $arrayParametros['strEmpresa'] = "TELCONET S.A.";
            }
            //Se obtiene la persona asignada/afectada en la creacion del CASO para efecto de correos
            $objPersonaAfectada = $this->emComercial->getRepository("schemaBundle:InfoPersona")
                                                    ->findOneByLogin($strUser);
            //Se obtienen los sintomas por CASO
            $objJsonSintomas  = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")
                                                ->generarJsonSintomasXCaso($objCaso->getId());
            $arraySintomas = json_decode($objJsonSintomas);
            $arrayAfectados = $this->getAfectacionDetalladaPorCaso($objCaso->getId());
            //Se obtiene la direccion y descripcion del punto
            $objInfoPunto  = $this->emComercial->getRepository("schemaBundle:InfoPunto")
                                  ->findOneBy(array("login"  => $arrayAfectados['afectadosPadre'][0]['afectadoNombre'],
                                                    "estado" => "Activo"));
            $strNombreDepartamento = "";
            if ($intIdDepartamento)
            {
                $objDepartamento = $this->emGeneral->getRepository('schemaBundle:AdmiDepartamento')
                                                   ->find($intIdDepartamento);
                if (is_object($objDepartamento))
                {
                    $strNombreDepartamento = $objDepartamento->getNombreDepartamento();
                }
            }
            if (is_object($objInfoPunto))
            {
                $strDireccionPunto   = $objInfoPunto->getDireccion();
                $strDescripcionPunto = $objInfoPunto->getDescripcionPunto();
            }
            $strTipoCaso = $objCaso->getTipoCasoId()->getNombreTipoCaso();
            $arrayParametros['caso']                 = $objCaso;
            $arrayParametros['usrCreacion']          = ucwords(strtolower($objPersonaAfectada->__toString()));
            $arrayParametros['departamentoAsignado'] = $strNombreDepartamento;
            $arrayParametros['personaAsignada']      = ucwords(strtolower($objPersonaAfectada->__toString()));
            $arrayParametros['cliente']              = $arrayAfectados['afectadosPadre'][0]['afectadoNombre'];
            $arrayParametros['direccion']            = $strDireccionPunto;
            $arrayParametros['descripcion']          = $strDescripcionPunto;
            $arrayParametros['tipoCaso']             = $strTipoCaso;
            $arrayParametros['sintomas']             = $arraySintomas->encontrados;
            $arrayParametros['observacion']          = $arrayParametrosCorreo['observacion'];

            $this->envioPlantilla->generarEnvioPlantilla($strAsunto,
                                                         $arrayTo,
                                                         $strCodPlantilla,
                                                         $arrayParametros,
                                                         $arrayParametrosCorreo['empresa'],
                                                         null,
                                                         null,
                                                         null,
                                                         false
                                                         );
        }
    }
    
     /**
     * Inserta el Progreso de la tarea
     * 
     * @author Ronny Morán Ch. <rmoranc@telconet.ec>
     * @version 1.0 12-02-2018
     * 
     * Logica para los progresos de los distintos tipos de tareas
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.1 03-04-2018
     * 
     * Escenario no contemplado para tareas interdepartamentales
     * @author Robinson Salgado <rsalgado@telconet.ec>
     * @version 1.0 15-06-2018
     * 
     * Se ingresa un nuevo campo el idComunicacion en el progreso de la tarea y se quito un error log que se encontro
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.3 18-01-2018
     *
     * Se ingresa tipo de tarea Netvoice 
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.4 10-01-2019
     * 
     * Se obtiene parametrizada el nombre de la tarea de instalación Netvoice
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.5 10-06-2019
     *
     *
     * Se modifica validación para ingreso de progreso de tareas de última milla FTTx. 
     * @author Ronny Morán Chancay <rmoranc@telconet.ec>
     * @version 1.5 08-08-2019
     * 
     * Se agrega lógica para ingresar nuevo progreso de regularización y el origen de la acción. 
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.6 04-10-2019
     *
     *      
     * Se agrega validación en el ingreso del progreso de regularización. 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.7 21-04-2020
     *
     * 
     *
     * 
     * Se ingresa tipo de tarea INSTALACION CABLEADO 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.8 06-07-2020
     * 
     * 
     * Se agrega validación para flujo de progresos en tareas con última milla Fttx de TN
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.9 30-09-2020
     * 
     *
     * Se modifica para obtener el id del progreso de las tareas de la tabla DB_SOPORTE.ADMI_PROGRESOS_TAREA
     * y se agrega flujo para tareas de productos Md de cableado y Wifi+Ap 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.10 01-12-2020
     *
     * Se valida objeto $objServicio antes de llamar a sus métodos. 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.11 01-02-2021
     *     
     * Se quita validación de producto cableado empaquetado Md. 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.12 03-05-2021 
     * 
     * Se modifica para obtener el id del progreso de las tareas de la tabla DB_SOPORTE.ADMI_PROGRESOS_TAREA
     * y se agrega flujo para tareas de producto Extender
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 2.0 10-05-2021
     * 
     * 
     * Se agrega ingreso de progresos para tareas de INSTALACION_NETLIFECAM Md. 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 2.1 25-07-2021 
     *
     * Se reemplaza logica para extraer dato del producto, haciendo uso del ORM de SF.
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 2.2 28-01-2022 
     * 
     * Se agrega flujo para tareas de producto Fttx
     * @author Jean Pierre Nazareno Martinez <jnazareno@telconet.ec>
     * @version 2.3 29-11-2021
     * 
     * Se agrega flujo para tareas de producto MobileBus
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.4 29-09-2022
     * 
     * @param array $arrayParametros
     * @return array $arrayResultado
     */
    public function ingresarProgresoTarea($arrayParametros) 
    {
        $strCodEmpresa                  = $arrayParametros['strCodEmpresa'];
        $intIdTarea                     = $arrayParametros['intIdTarea'];
        $intIdComunicacion              = $intIdTarea;
        $intIdDetalle                   = $arrayParametros['intIdDetalle'];
        $strCodigoTipoProgreso          = $arrayParametros['strCodigoTipoProgreso'];
        $strUser                        = $arrayParametros['strUsrCreacion'];
        $intIdServicio                  = isset($arrayParametros['intIdServicio']) ? $arrayParametros['intIdServicio'] : 0;
        $arrayVariables['id_servicio']  = $intIdServicio;
        $strIpCreacion                  = '127.0.0.1';
        $strDescTarea                   = '';
        $strCodigo                      =  "TAREA_NETVOICE";
        $strEstado                      =  "Activo";
        $strOrigen                      = $arrayParametros['strOrigen'] ? $arrayParametros['strOrigen'] : 'MOVIL';
        $strParametroRegularizar        = "";
        $intPorcentajeRegulariza        = 0;
        $arrayTipoTarea                 = [];
        $intIdProductoWifi              = "";
        $intIdProductoCabMd             = "";
        $intIdProductoExtender          = "";
        $intIdProductoNetlifeCam        = "";

        if (!$this->emSoporte->isOpen()) 
        {
            $this->emSoporte = $this->emSoporte->create(
            $this->emSoporte->getConnection(),
            $this->emSoporte->getConfiguration()
            );
        }
        
        //*DECLARACION DE TRANSACCIONES------------------------------------------*/
        $this->emSoporte->getConnection()->beginTransaction();
        //*----------------------------------------------------------------------*/
        
        $arrayProgresPorcentaje         = $this->emSoporte->getRepository('schemaBundle:AdmiProgresosTarea')
                                                          ->findAll();
        
        
        $arrayIdProductoWifi            = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                          ->getOne('PARAMETROS_GENERALES_MOVIL', 
                                                                   '', 
                                                                   '', 
                                                                   '', 
                                                                   'ID_PRODUCTO_WIFI+AP', 
                                                                   '', 
                                                                   '', 
                                                                   ''
                                                                  );
        

        if(is_array($arrayIdProductoWifi))
        {
            $intIdProductoWifi = !empty($arrayIdProductoWifi['valor2']) ? $arrayIdProductoWifi['valor2'] : "";
        }
        
        $arrayIdProductoCableadoMd            = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                          ->getOne('PARAMETROS_GENERALES_MOVIL', 
                                                                   '', 
                                                                   '', 
                                                                   '', 
                                                                   'ID_PRODUCTO_CABLEADO_MD', 
                                                                   '', 
                                                                   '', 
                                                                   ''
                                                                  );

        if(is_array($arrayIdProductoCableadoMd))
        {
            $intIdProductoCabMd = !empty($arrayIdProductoCableadoMd['valor2']) ? $arrayIdProductoCableadoMd['valor2'] : "";
        }
        
        $arrayIdProductoExtender    = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                             ->getOne('PARAMETROS_GENERALES_MOVIL', 
                                                                      '', 
                                                                      '', 
                                                                      '', 
                                                                      'ID_PRODUCTO_EXTENDER_DUAL_BAND', 
                                                                      '', 
                                                                      '', 
                                                                      ''
                                                                     );

        if(is_array($arrayIdProductoExtender))
        {
            $intIdProductoExtender = !empty($arrayIdProductoExtender['valor2']) ? $arrayIdProductoExtender['valor2'] : "";
        }
        
        
        
        $arrayIdProductoNetlifeCam      = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                          ->getOne('PARAMETROS_GENERALES_MOVIL', 
                                                                   '', 
                                                                   '', 
                                                                   '', 
                                                                   'ID_PRODUCTO_NETLIFECAM_MD', 
                                                                   '', 
                                                                   '', 
                                                                   ''
                                                                  );
        
        if(is_array($arrayIdProductoNetlifeCam))
        {
            $intIdProductoNetlifeCam = !empty($arrayIdProductoNetlifeCam['valor2']) ? $arrayIdProductoNetlifeCam['valor2'] : "";
        }

        $arrayIdProductoSafeCityDatos   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
        ->getOne('PARAMETROS_GENERALES_MOVIL', 
                 '', 
                 '', 
                 '', 
                 'ID_PRODUCTO_SAFECITYDATOS', 
                 '', 
                 '', 
                 ''
                );

        if(is_array($arrayIdProductoSafeCityDatos))
        {
            $intIdProductoSafeCityDatos = !empty($arrayIdProductoSafeCityDatos['valor2']) ? $arrayIdProductoSafeCityDatos['valor2'] : "";
        }
        
        $arrayIdProductoSafeCitySwPoe   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
        ->getOne('PARAMETROS_GENERALES_MOVIL', 
                 '', 
                 '', 
                 '', 
                 'ID_PRODUCTO_SAFECITYSWPOE', 
                 '', 
                 '', 
                 ''
                );

        if(is_array($arrayIdProductoSafeCitySwPoe))
        {
            $intIdProductoSafeCitySwPoe = !empty($arrayIdProductoSafeCitySwPoe['valor2']) ? $arrayIdProductoSafeCitySwPoe['valor2'] : "";
        }

        $arrayIdProductoSafeCityWifi   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
        ->getOne('PARAMETROS_GENERALES_MOVIL', 
                 '', 
                 '', 
                 '', 
                 'ID_PRODUCTO_SAFECITYWIFI', 
                 '', 
                 '', 
                 ''
                );

        if(is_array($arrayIdProductoSafeCityWifi))
        {
            $intIdProductoSafeCityWifi = !empty($arrayIdProductoSafeCityWifi['valor2']) ? $arrayIdProductoSafeCityWifi['valor2'] : "";
        }
        
        foreach($arrayProgresPorcentaje as $datos)
        {
            $arrayTipoTarea[$datos->getNombreTarea()] = $datos->getCodigoTarea();
        }
     
        try
        {            
            $objAdmiTipoProgreso  = $this->emSoporte->getRepository("schemaBundle:AdmiTipoProgreso")
                                                            ->findOneByCodigo($strCodigoTipoProgreso);

            if(!is_object($objAdmiTipoProgreso))
            {
                throw  new Exception("No se encontró el objeto AdmiTipoProgreso con código: ".$strCodigoTipoProgreso);
            }

            $objDetalle = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")
                                               ->findOneById($intIdDetalle);
            
            $intIdTarea      = $arrayTipoTarea['INTERDEPARTAMENTAL'];  
             
            if(is_object($objDetalle))
            {
                $intIdTarea             = $objDetalle->getTareaId()->getId();
                $intIdDetSol            = $objDetalle->getDetalleSolicitudId();
                if(!empty($intIdServicio) && $intIdServicio != 0 )                    
                {
                       $objServicio    = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);  
                        if(is_object($objServicio) && is_object($objServicio->getProductoId()))
                        {
                            $strDescTarea = $objServicio->getProductoId()->getDescripcionProducto();
                        }
                }      
                if(isset($intIdDetSol) && !empty($intIdDetSol))
                {
                    
                    $arrayParametros    = array("intIdDetalleSol"       => $intIdDetSol,
                                                "strDescripcionCaract"  =>"TIPO_FACTIBILIDAD");

                    $objProducto        = $this->emSoporte->getRepository("schemaBundle:AdmiProducto")
                                                          ->getProductoPorDetalleSol($arrayParametros);

                    if($strCodEmpresa== "10")
                    {
                        ////Tipo Medio
                        $objTipoMedio       = $this->emSoporte->getRepository("schemaBundle:AdmiTipoMedio")
                                                          ->getTipoMedioPorDetalleSol($arrayParametros);

                        ////Caracteristica
                        $objSerProCar       = $this->emComercial->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                                ->getCaracteristicaPorDetalleSol($arrayParametros);

                    }
                }  
            }
            else
            {
                throw  new Exception("No se encontró el detalle con Id: ".$intIdDetalle);
            }
            if($intIdTarea != $arrayTipoTarea['INSTALACION'] 
                && $intIdTarea != $arrayTipoTarea['INSTALACION_RADIO'] 
                && $intIdTarea != $arrayTipoTarea['RETIRO_EQUIPO']
                && $intIdTarea != $arrayTipoTarea['INSTALACION_MOBILE_BUS'])
            {
                if($intIdServicio > 0)
                {

                    $objComunicacion = $this->emComunicacion->getRepository("schemaBundle:InfoComunicacion")
                                                            ->findOneByDetalleId($intIdDetalle);
                    if(is_object($objComunicacion))
                    {
                        $intIdCaso = $objComunicacion->getCasoId();
                        if(!empty($intIdCaso) && $intIdCaso > 0)
                        {
                            $intIdTarea = $arrayTipoTarea['CASO_ACTA'];
                        }
                        else
                        {
                            if($intIdTarea == $arrayTipoTarea['INSTALACION_FTTX'])
                            {
                                $intIdTarea     = $arrayTipoTarea['INSTALACION_FTTX'];
                            }
                            else
                            {
                                if($intIdTarea == $arrayTipoTarea['INSTALACION_CABLEADO'])
                                {
                                    $intIdTarea     = $arrayTipoTarea['INSTALACION_CABLEADO'];
                                }
                                else
                                {
                                    $intIdTarea     = $arrayTipoTarea['INTERDEPARTAMENTAL'];
                                }
                            }
                        }
                    }
                    else
                    {
                        $intIdTarea = $arrayTipoTarea['CASO_ACTA'];
                    }
                }
                else
                {
                    $intIdTarea = $arrayTipoTarea['CASO'];
                }
            }
            
            if( ($intIdTarea == $arrayTipoTarea['INSTALACION'] 
                || $intIdTarea == $arrayTipoTarea['INSTALACION_RADIO'])
                && isset($objProducto) 
                && !empty($objProducto))
            {
                $strEsEnlace        = $objProducto['esEnlace'];
                $strCodTipoMedio    = $objTipoMedio['codTipoMedio'];
                $strValorCaract     = $objSerProCar['valor'];

                if($strEsEnlace == "NO" || $strCodTipoMedio != "FO" || $strValorCaract == "DIRECTA")
                {
                    $intIdTarea     = $arrayTipoTarea['INSTALACION_OTROS']; 
                }
            }
            $this->emGeneral->getConnection()->beginTransaction();

            $objAdmiParametroCab    = $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                ->findOneBy(array(
                                                                    'nombreParametro'   => $strCodigo,
                                                                    'estado'            => $strEstado
                                                                  )
                                                            );

            $objAdmiParametroDet    = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->findOneBy(array(
                                                                    'parametroId'   => $objAdmiParametroCab->getId()
                                                                  )
                                                            );
            $strNombreNetvoice      = $objAdmiParametroDet->getValor1();
            
            if($strDescTarea === $strNombreNetvoice)
            {
                $intIdTarea      = $arrayTipoTarea['NETVOICE'];      
            }
            $objServicio  = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                      ->findOneById(array("id"       => $intIdServicio));

            $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                      ->findOneById(array("id"       => $intIdDetalle));
            
            if(is_object($objServicio) && !is_null($objServicio->getProductoId()))
            {
                if($objServicio->getProductoId()->getId() == $intIdProductoWifi)
                {
                    $intIdTarea      = $arrayTipoTarea['INSTALACION_WIFI_AP'];      
                }
                else if($objServicio->getProductoId()->getId() == $intIdProductoExtender)
                {
                    $intIdTarea      = $arrayTipoTarea['INSTALACION_EXTENDER_DUAL_BAND_V5'];    
                }
                else if($objServicio->getProductoId()->getId() == $intIdProductoCabMd)
                {
                    $intIdTarea      = $arrayTipoTarea['INSTALACION_MD_CABLEADO_ETHERNET'];    
                }
                else if($objServicio->getEstado() == 'Activo' && $objServicio->getPlanId() != null)
                {
                    $intIdTarea      = $arrayTipoTarea['INSTALACION_MD_CABLEADO_ETHERNET'];  
                }
                else if($objServicio->getProductoId()->getId() == $intIdProductoNetlifeCam)
                {
                    $intIdTarea      = $arrayTipoTarea['INSTALACION_NETLIFECAM'];    
                }
                else if ($objServicio->getProductoId()->getId() == $intIdProductoSafeCityDatos
                    || $objServicio->getProductoId()->getId() == $intIdProductoSafeCitySwPoe
                    || $objServicio->getProductoId()->getId() == $intIdProductoSafeCityWifi)
                {
                    $intIdTarea      = $arrayTipoTarea['INSTALACION_PRODUCTOS_FTTX'];    
                }
            }
                    
            $arrayParametroRegularizar = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('PROGRESO_REGULARIZACION', 
                                                                    '', 
                                                                    '', 
                                                                    '', 
                                                                    '', 
                                                                    '', 
                                                                    '', 
                                                                    ''
                                                                );

            if (is_array($arrayParametroRegularizar))
            {
                $strParametroRegularizar = !empty($arrayParametroRegularizar['valor1']) ? $arrayParametroRegularizar['valor1'] : "";
            }

            if($strCodigoTipoProgreso == $strParametroRegularizar)
            {
                $objInfoProgresoPorcentaje  = $this->emSoporte->getRepository("schemaBundle:InfoProgresoPorcentaje")
                                                                ->findOneBy([
                                                                    "tipoProgresoId" =>$objAdmiTipoProgreso,
                                                                    "estado"         =>"Activo"
                                                                ]);

                $arrayCalculoProgreso  = array(
                                            'intPorcentajeBase'     => $objInfoProgresoPorcentaje->getPorcentaje(),
                                            'intIdDetalle'          => $objDetalle,
                                            'intIdComunicacion'     => $intIdComunicacion
                                        );
                                     
                $intPorcentajeRegulariza = $this->calcularProgresoFaltante($arrayCalculoProgreso);
            }
            else
            {
                $objInfoProgresoPorcentaje  = $this->emSoporte->getRepository("schemaBundle:InfoProgresoPorcentaje")
                                                                ->findOneBy([
                                                                    "tipoProgresoId" =>$objAdmiTipoProgreso,
                                                                    "tareaId"        => $intIdTarea,
                                                                    "empresaId"      => $strCodEmpresa,
                                                                    "estado"         =>"Activo"
                                                                ]);
            }
            
            if(!is_object($objInfoProgresoPorcentaje))
            {
                throw  new Exception("No se encontró el objeto progreso porcentaje");
            }
           
            $objProgresoTarea  = $this->emSoporte->getRepository("schemaBundle:InfoProgresoTarea")
                                                           ->findOneBy([
                                                               "progresoPorcentajeId" =>$objInfoProgresoPorcentaje,
                                                               "detalleId"            => $objDetalle,
                                                               "comunicacionId"       => $intIdComunicacion,
                                                               "estado"               =>"Activo"
                                                           ]);
            
            if(is_object($objProgresoTarea))
            {
                throw  new Exception("Ya existe un registro del progreso de la tarea de 
                tipo: ".$objAdmiTipoProgreso->getNombreTipoProgreso()." para el Id detalle: ".$intIdDetalle);
            }
           
            $objProgresoTarea = new InfoProgresoTarea();
            $objProgresoTarea->setProgresoPorcentaje($objInfoProgresoPorcentaje);
            $objProgresoTarea->setDetalleId($objDetalle);
            $objProgresoTarea->setComunicacionId($intIdComunicacion);
            $objProgresoTarea->setHoraTransaccion(new \DateTime('now'));
            $objProgresoTarea->setEstado("Activo");
            $objProgresoTarea->setUsrCreacion($strUser);
            $objProgresoTarea->setFeCreacion(new \DateTime('now'));
            $objProgresoTarea->setIpCreacion($strIpCreacion);
            $objProgresoTarea->setOrigen($strOrigen);
            if($strCodigoTipoProgreso == $strParametroRegularizar)
            {
                
                if($intPorcentajeRegulariza > 0)
                {
                    $objProgresoTarea->setValorProgreso($intPorcentajeRegulariza);

                    $this->emSoporte->persist($objProgresoTarea);
                    $this->emSoporte->flush(); 

                    $objDetalle->setProgresoTareaId($objProgresoTarea);
                    $this->emSoporte->persist($objDetalle);
                    $this->emSoporte->flush();
                    $arrayResultado['id']      = $objProgresoTarea->getId();   
                }    
                
            }
            else
            {
                $objProgresoTarea->setValorProgreso($objInfoProgresoPorcentaje->getPorcentaje());
                $this->emSoporte->persist($objProgresoTarea);
                $this->emSoporte->flush(); 
           
                $objDetalle->setProgresoTareaId($objProgresoTarea);
                $this->emSoporte->persist($objDetalle);
                $this->emSoporte->flush();
                $arrayResultado['id']      = $objProgresoTarea->getId() ;
            }
            
            $arrayResultado['status']  = 'OK' ;
            $arrayResultado['mensaje'] = 'Transacción exitosa.';
        }
        catch(Exception $ex)
        {
            
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }
            $arrayResultado['status']  = 'ERROR' ;
            $arrayResultado['mensaje'] = $ex->getMessage() ;
            
            $this->serviceUtil->insertError('TELCOS+',
                                            'SoporteService->ingresarProgresoTarea',
                                            $ex->getMessage(),
                                            $strUser,
                                            $strIpCreacion);            
        }
        
        if ($this->emSoporte->getConnection()->isTransactionActive())
        {
            $this->emSoporte->getConnection()->commit();
        }
        return $arrayResultado;
    }

  
    /**
    * Método que registra información del dispositivo e historial  y verifica el acceso a una aplicación móvil.
    *
    * @author Ronny Moran Chancay. <rmoranc@telconet.ec>
    * @version 1.0 12-06-2018
    *
    * @param array $arrayData[
    *                             "idPersona"               :integer: Id de detalle,
                                  "codigoDispositivo"       :string: codigo unico del dispositivo,
                                  "ipAcceso"                :string: ip del dispositivo,
                                  "descripcion"             :string: descripcion del dispositivo,
                                  "correo"                  :string: correo del dispositivo asociado,
                                  "estado"                  :string: estado del dispositivo,
                                  "nombreAppMovil"          :string: Nombre de app movil de donde accede,
                                  "latitud"                 :string: Latitud de dispositivo movil,
                                  "longitud"                :string: Longitud de dispositivo movil,
                                  "bloqueado"               :integer: Indica si el dispositivo se encuestra bloqueado,
                                  "sistemaOperativo"        :string: Sistema Operativo del dispositivo movil,
                                  "TipoDispositivo"         :string: Tipo de dispositivo movil,
                                  "opSesion"                :string: Opcion al imiciar la app.
     *                         ]
     * @return array $arrayRespuestaFinal['status'   : string :  Codigo de respuesta del servidor,
     *                               'mensaje'  : string :  Mensaje de respuesta,
     *                               'success'  : bool   :  Indicador de exito en la funcion]
     */
    public function verificaDispositivoApp($arrayData)
    {
        $arrayRespuestaFinal   = array();
        $strIpCreacion         = '127.0.0.1';
        $boolDispositivoExiste = false;
        try
        {
            $this->emSoporte->getConnection()->beginTransaction();
            $strEstadoSession ="Iniciado";

            $arraySesionesPermitidas = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                      ->getOne( 'NUMERO_SESSION_TNCLIENTE',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                '');
            $objPersona              = $this->emSoporte->getRepository("schemaBundle:InfoPersona")
                                                       ->find($arrayData['data']['idPersona']);
            if($arrayData['data']['opSesion'] == 'sesion_noiniciada')
            {
                $objDispositivo = $this->emSoporte->getRepository("schemaBundle:AdmiDispositivoApp")
                                                  ->findOneBy(array('personaId'         => $arrayData['data']['idPersona'],
                                                                    'codigoDispositivo' => $arrayData['data']['codigoDispositivo']));
                if(is_object($objDispositivo))
                {
                    $boolDispositivoExiste = true;
                    if($arrayData['data']['tokenFCM'] != $objDispositivo->getTokenFCM())
                    {
                        //actualizar tokenFCM
                        $objDispositivo->setTokenFCM($arrayData['data']['tokenFCM']);
                        $this->emSoporte->persist($objDispositivo);
                        $this->emSoporte->flush();
                    }
                    if($objDispositivo->getBloqueado() == '1')
                    {
                        if(is_object($objPersona))
                        {
                            $objHistorial = $this->emSoporte->getRepository("schemaBundle:InfoHistorialIngresoApp")
                                                            ->findOneBy(['codigoDispositivo' => $arrayData['data']['codigoDispositivo']],
                                                                         ['id'                => 'DESC']);
                            if(is_object($objHistorial))
                            {
                                if($objHistorial->getEstado() == $strEstadoSession)
                                {
                                    $strStatus   = "OK";
                                    $strMensaje  = "Historial activo";
                                }
                                else
                                {
                                    $strMensaje  = "Historial activo";

                                    //guardarhistorial
                                    $objHistorial = new InfoHistorialIngresoApp;
                                    $objHistorial->setPersonaId($objPersona);
                                    $objHistorial->setIpAcceso($arrayData['data']['ipAcceso']);
                                    $objHistorial->setCodigoDispositivo($arrayData['data']['codigoDispositivo']);
                                    $objHistorial->setEstado($strEstadoSession);
                                    $objHistorial->setLatitud($arrayData['data']['latitud']);
                                    $objHistorial->setLongitud($arrayData['data']['longitud']);
                                    $objHistorial->setUsrCreacion($arrayData['user']);
                                    $objHistorial->setFeCreacion(new \DateTime('now'));
                                    $objHistorial->setIpCreacion($strIpCreacion);
                                    $objHistorial->setUsrUltMod($arrayData['user']);
                                    $objHistorial->setFeUltMod(new \DateTime('now'));
                                    $this->emSoporte->persist($objHistorial);
                                    $this->emSoporte->flush();
                                    if ($this->emSoporte->getConnection()->isTransactionActive())
                                    {
                                        $this->emSoporte->getConnection()->commit();
                                    }
                                    $strStatus  = "OK";
                                    $strMensaje = "Historial guardado";
                                }
                            }
                        }
                    }
                    else if($objDispositivo->getBloqueado() == '2')
                    {
                        //Cerrar sesion en historial
                        $objHistorialSesion = $this->emSoporte->getRepository("schemaBundle:InfoHistorialIngresoApp")
                                                              ->findOneBy(['codigoDispositivo' => $arrayData['data']['codigoDispositivo']],
                                                                          ['id'                => 'DESC']);
                        $strEstadoSesionFinalizada="Finalizado";
                        if(is_object($objHistorialSesion))
                        {
                            $objHistorialSesion->setEstado($strEstadoSesionFinalizada);
                            $this->emSoporte->persist($objHistorialSesion);
                            $this->emSoporte->flush();                
                            if ($this->emSoporte->getConnection()->isTransactionActive())
                            {
                                $this->emSoporte->getConnection()->commit();
                            }
                        }
                        $strStatus  = "OK";
                        $strMensaje = "Dispositivo bloqueado";
                    }
                }
                $objHistorialcount = $this->emSoporte->getRepository("schemaBundle:AdmiDispositivoApp")
                                                     ->findBy(array('personaId' => $arrayData['data']['idPersona'],
                                                                    'estado'    => 'Activo'));
                // Si es nuevo el dispositivo lo registro solo si el número de dispositivo es menor al limite de dispositivo maximo permitido
                // por razon social.
                if(!$boolDispositivoExiste)
                {
                    if(count($objHistorialcount) < $arraySesionesPermitidas['valor1'])
                    {
                        //Dispositivo no registrado
                        if(is_object($objPersona))
                        {
                            $objDispositivo = new AdmiDispositivoApp;
                            $objDispositivo->setPersonaId($objPersona);
                            $objDispositivo->setCodigoDispositivo($arrayData['data']['codigoDispositivo']);
                            $objDispositivo->setIpAcceso($arrayData['data']['ipAcceso']);
                            $objDispositivo->setDescripcion($arrayData['data']['descripcion']);
                            $objDispositivo->setCorreo($arrayData['data']['correo']);
                            $objDispositivo->setEstado($arrayData['data']['estado']);
                            $objDispositivo->setNombreAppMovil($arrayData['data']['nombreAppMovil']);
                            $objDispositivo->setLatitud($arrayData['data']['latitud']);
                            $objDispositivo->setLongitud($arrayData['data']['longitud']);
                            $objDispositivo->setBloqueado($arrayData['data']['bloqueado']);
                            $objDispositivo->setSistemaOperativo($arrayData['data']['sistemaOperativo']);
                            $objDispositivo->setTipoDispositivo($arrayData['data']['TipoDispositivo']);
                            $objDispositivo->setTokenFCM($arrayData['data']['tokenFCM']);
                            $objDispositivo->setUsrCreacion($arrayData['user']);
                            $objDispositivo->setFeCreacion(new \DateTime('now'));
                            $objDispositivo->setIpCreacion($strIpCreacion);
                            $objDispositivo->setUsrUltMod($arrayData['user']);
                            $objDispositivo->setFeUltMod(new \DateTime('now'));
                            $this->emSoporte->persist($objDispositivo);
                            $this->emSoporte->flush();

                            //guardarhistorial
                            $strEstadoSession ="Iniciado";
                            $objHistorial = new InfoHistorialIngresoApp;
                            $objHistorial->setPersonaId($objPersona);
                            $objHistorial->setIpAcceso($arrayData['data']['ipAcceso']);
                            $objHistorial->setCodigoDispositivo($arrayData['data']['codigoDispositivo']);
                            $objHistorial->setEstado($strEstadoSession);
                            $objHistorial->setLatitud($arrayData['data']['latitud']);
                            $objHistorial->setLongitud($arrayData['data']['longitud']);
                            $objHistorial->setUsrCreacion($arrayData['user']);
                            $objHistorial->setFeCreacion(new \DateTime('now'));
                            $objHistorial->setIpCreacion($strIpCreacion);
                            $objHistorial->setUsrUltMod($arrayData['user']);
                            $objHistorial->setFeUltMod(new \DateTime('now'));
                            $this->emSoporte->persist($objHistorial);
                            $this->emSoporte->flush();

                            if ($this->emSoporte->getConnection()->isTransactionActive())
                            {
                                $this->emSoporte->getConnection()->commit();
                            }

                            $strStatus   = "OK";
                            $strMensaje  = "Historial guardado";
                        }
                    }
                    else
                    {
                        $strStatus   = "ERROR";
                        $strMensaje  = "Máximo de sesiones alcanzado";
                    }
                }
            }
            else if($arrayData['data']['opSesion'] == 'sesion_iniciada')
            {
                
                $objDispositivo = $this->emSoporte->getRepository("schemaBundle:AdmiDispositivoApp")
                                                  ->findOneBycodigoDispositivo($arrayData['data']['codigoDispositivo']);

                if(is_object($objDispositivo))
                {
                    if($objDispositivo->getBloqueado() == '1')
                    {
                        $strStatus   = "OK";
                        $strMensaje  = "Dispositivo no bloqueado";
                    }
                    else if($objDispositivo->getBloqueado() == '2')
                    {
                        //Cerrar sesion en historial
                        $objHistorialSesion = $this->emSoporte->getRepository("schemaBundle:InfoHistorialIngresoApp")
                                                              ->findOneBy(['codigoDispositivo' => $arrayData['data']['codigoDispositivo']],
                                                                          ['id'                => 'DESC']);
                        $strEstadoSesionFinalizada="Finalizado";
                        if(is_object($objHistorialSesion))
                        {
                         $objHistorialSesion->setEstado($strEstadoSesionFinalizada);
                         $this->emSoporte->persist($objHistorialSesion);
                         $this->emSoporte->flush();
                            
                            if ($this->emSoporte->getConnection()->isTransactionActive())
                            {
                                $this->emSoporte->getConnection()->commit();
                            }   
                        }
                        
                        $strStatus   = "OK";
                        $strMensaje  = "Dispositivo bloqueado";
                    }
                }
            }
            $arrayRespuestaFinal = array('status'  => $strStatus,
                                         'mensaje' => $strMensaje,
                                         'success' => true);
        }
        catch(\Exception $ex)
        {
            $strStatus              = "ERROR";
            $strMensaje             = $ex->getMessage();
            $arrayRespuestaFinal    = array('status'  => $strStatus,
                                            'mensaje' => $strMensaje,
                                            'success' => false);
        }
        return $arrayRespuestaFinal;
    }   

    /**
     * Función que sirve para crear una tarea y la respectiva notificación a IPCCL2 al agregar un servicio IP Small Business
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 Se agrega como destinatarios de la notificación al vendedor y al usuario de creación del servicio
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 25-06-2018 Se agrega creación de tarea y envío de notificación de cambio de cpe wifi asignado a IPCCL2 al agregar la primera 
     *                         Ip adicional para un servicio Internet Small Business que tiene factibilidad con un olt Tellion
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 06-07-2018 Se elimina código por referencia circular de services y se repite lógica de programación de función invocada
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 31-07-2018 Se modifica validación para envío de notificaciones y creación de tareas sólo cuando el servicio 
     *                         Internet Small Business ya se encuentre Activo.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.5 01-10-2018 Se corrige la ruta en la creación del log de errores a SoporteService->crearTareaYNotificacionIPSB
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.6 28-11-2018 Se agregan validaciones para gestionar productos de la empresa TNP
     * @since 1.5
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 10-02-2019 Se agregan validaciones para que los servicios TelcoHome sigan el mismo flujo que los servicios
     *                          Small Business
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.8 06-08-2019 Al existir nueva descripción en el cargo del departamento L2 se parametrizo la descripción de los
     *                         nuevos cargos Sub-Jefe y Jefe nacional.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.9 28-04-2020 Se obtiene el parámetro objProducto usada en la función obtenerParametrosProductosTnGpon que es invocada en 
     *                          reemplazo de la función obtenerInfoMapeoProdPrefYProdsAsociados, debido a los cambios realizados por la 
     *                          reestructuración de servicios Small Business. Además se elimina programación para productos TelcoHome e Ip TelcoHome
     *                          puesto que son productos que no deben invocar a esta función
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 2.0 29-09-2020 Se valida por las marcas HUAWEI Y ZTE para agregar el servicio adicional.
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 2.1 04-02-2022 Se agrega validacion si el nombre tecncio es IPSB para crear en la info_tarea.
     *                         
     */
    public function crearTareaYNotificacionIPSB($arrayParametros)
    {
        $strCliente                 = '';
        $objPunto                   = $arrayParametros["objPunto"];
        $strPrefijoEmpresa          = $arrayParametros["strPrefijoEmpresa"];
        $strCodEmpresa              = $arrayParametros["strCodEmpresa"];
        $strIpClient                = $arrayParametros["strIpClient"];
        $strEstadoSolServicio       = $arrayParametros["strEstadoSolServicio"];
        $strOpcion                  = $arrayParametros["strOpcion"] ? $arrayParametros["strOpcion"] : "";
        $strUsrSession              = $arrayParametros["strUsrSession"];
        $strNombreTecnicoProd       = $arrayParametros["strNombreTecnicoProd"];
        $objProducto                = $arrayParametros["objProducto"];
        $intIdProdInternet          = "";
        $strNombreTecnicoIp         = "";
        $strNombreTareaCambioEquipo = "";
        $strDescripcionRol          = 'Jefe Departamental';
        $boolEsIPSB                 = false;
        
        if(!is_object($objProducto))
        {
            throw new \Exception("No se ha enviado el objeto del producto de Internet o Ip");
        }
        
        $arrayParamsInfoProds   = array(
                                        "strValor1ParamsProdsTnGpon"    => "PRODUCTOS_RELACIONADOS_INTERNET_IP",
                                        "strCodEmpresa"                 => $strCodEmpresa);
        if($strNombreTecnicoProd === "INTERNET SMALL BUSINESS")
        {
            $arrayParamsInfoProds["intIdProductoInternet"] = $objProducto->getId();
        }
        else if($strNombreTecnicoProd === "IPSB")
        {
            $arrayParamsInfoProds["intIdProductoIp"] = $objProducto->getId();
        }
        else
        {
            throw new \Exception("No existe un flujo definido para el producto con nombre técnico ".$strNombreTecnicoProd);
        }
        $arrayInfoMapeoProds        = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                        ->obtenerParametrosProductosTnGpon($arrayParamsInfoProds);
        if(isset($arrayInfoMapeoProds) && !empty($arrayInfoMapeoProds))
        {
            $intIdProdInternet          = $arrayInfoMapeoProds[0]["intIdProdInternet"];
            $strNombreInternetProd      = $arrayInfoMapeoProds[0]["strDescripcionProdInternet"];
            $strNombreTecnicoIp         = $arrayInfoMapeoProds[0]["strNombreTecnicoProdIp"];
        }
        else
        {
            throw new \Exception("No se ha podido obtener el correcto mapeo del servicio con la ip respectiva");
        }
        
        if($strOpcion === "ACTIVACION_INTERNET SMALL BUSINESS" || $strOpcion === "CREAR_IPSB")
        {
            $strNombreTareaCambioEquipo = "CAMBIO DE EQUIPO SMALL BUSINESS";
        }
        else
        {
            throw new \Exception("No existe flujo para la opción enviada como parámetro ".$strOpcion);
        }
        $strParamIpNotificacion = "INFO_NOTIF_".$strNombreTecnicoIp;
        if($strOpcion === "ACTIVACION_INTERNET SMALL BUSINESS")
        {
            $this->emSoporte->beginTransaction();
            $this->emComunicacion->beginTransaction();
        }
        try
        {
            if(!is_object($objPunto))
            {
                throw new \Exception("No se enviaron los parámetros necesarios para la creación y envío de notificación");
            }
            $intIdServicioSBActivo  = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                        ->getServicioByPuntoId(array("intIdPunto"           => $objPunto->getId(),
                                                                                     "intIdProdInternet"    => $intIdProdInternet));
            if($intIdServicioSBActivo > 0)
            {
                $objServicioTecnicoSBActivo = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                ->findOneByServicioId($intIdServicioSBActivo);
                if (is_object($objServicioTecnicoSBActivo))
                {
                    $boolExisteSBActivo = true;
                }
            }
            if($boolExisteSBActivo)
            {
                $arrayServiciosPuntoIPSBPreAsig = array();
                $arrayServiciosPuntoIPSB        = array();
                foreach($arrayInfoMapeoProds as $arrayInfoProdIp)
                {
                    $intIdProdIp            = $arrayInfoProdIp["intIdProdIp"];
                    $strDescripcionProdIp   = $arrayInfoProdIp["strDescripcionProdIp"];
                    $objProdIPSB        = $this->emComercial->getRepository('schemaBundle:AdmiProducto')->find($intIdProdIp);
                    if(!is_object($objProdIPSB))
                    {
                        throw new \Exception("No existe el producto ".$strDescripcionProdIp);
                    }
                    
                    $arrayServiciosPuntoForIPSBPreAsig  = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                            ->findBy(array("puntoId"       => $objPunto,
                                                                                           "productoId"    => $objProdIPSB,
                                                                                           "estado"        => array("PreAsignacionInfoTecnica")
                                                                                    ));
                    $arrayServiciosPuntoIPSBPreAsig     = array_merge($arrayServiciosPuntoIPSBPreAsig, $arrayServiciosPuntoForIPSBPreAsig);
                    
                    $arrayServiciosPuntoForIPSB         = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                            ->findBy(array( "puntoId"       => $objPunto,
                                                                                            "productoId"    => $objProdIPSB,
                                                                                            "estado"        => array("Asignada", "Activo" )
                                                                                    ));
                    $arrayServiciosPuntoIPSB            = array_merge($arrayServiciosPuntoIPSB, $arrayServiciosPuntoForIPSB);
                }
                
                if($strOpcion === "ACTIVACION_INTERNET SMALL BUSINESS")
                {
                    $arrayServiciosIpsFor   = $arrayServiciosPuntoIPSBPreAsig;
                }
                else if($strOpcion === "CREAR_IPSB")
                {
                    $boolEsIPSB = true;
                    if(!is_object($arrayParametros["objServicio"]))
                    {
                        throw new \Exception("No se envió el servicio Ip para la creación y envío de notificación");
                    }
                    $arrayServiciosIpsFor[] = $arrayParametros["objServicio"];
                }
                else
                {
                    throw new \Exception("No existe flujo para la opción enviada");
                }
                
                $objPersonaEmpresaRol       = $objPunto->getPersonaEmpresaRolId();
                if(is_object($objPersonaEmpresaRol))
                {
                    $objPersona = $objPersonaEmpresaRol->getPersonaId();
                    $strCliente = sprintf("%s",$objPersona);
                }
                
                $arrayInfoNotifIPSB = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                      ->getOne( $strParamIpNotificacion, 
                                                                '', 
                                                                '', 
                                                                '', 
                                                                $strEstadoSolServicio,
                                                                '', 
                                                                '', 
                                                                '', 
                                                                '', 
                                                                $strCodEmpresa);
                if(empty($arrayInfoNotifIPSB))
                {
                    throw new \Exception("No se ha podido obtener la información para el envío de notificación");
                }

                $strNombreDepartamento  = $arrayInfoNotifIPSB['valor2'];
                $strNombreTarea         = $arrayInfoNotifIPSB['valor3'];
                $strObservacionTarea    = $arrayInfoNotifIPSB['valor4'];

                $intIdOficinaServicio   = $objPunto->getPuntoCoberturaId()->getOficinaId();
                $objOficinaServicio     = $this->emComercial->getRepository("schemaBundle:InfoOficinaGrupo")->find($intIdOficinaServicio);
                $strRegionServicio      = "";
                if(is_object($objOficinaServicio))
                {
                    $objCantonServicio = $this->emComercial->getRepository("schemaBundle:AdmiCanton")->find($objOficinaServicio->getCantonId());
                    if(is_object($objCantonServicio))
                    {
                        $strRegionServicio = $objCantonServicio->getRegion();
                    }
                }
                //Obtengo el rol del jefe del departamento.
                $arrayDescripcionRol   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                         ->getOne('ASIGNAR_TAREA_JEFES',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  $strRegionServicio,
                                                                  $strNombreDepartamento,
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  '');
                if(!empty($arrayDescripcionRol) && !empty($arrayDescripcionRol["valor2"])
                        && $arrayDescripcionRol["valor2"] === $strNombreDepartamento)
                {
                    $strDescripcionRol = (!empty($arrayDescripcionRol["valor3"])) ? $arrayDescripcionRol["valor3"] : $strDescripcionRol;
                }
                $arrayParametrosResponsable = array(
                                                    'idEmpresa'                     => $strCodEmpresa == '26'?'10':$strCodEmpresa,
                                                    'estado'                        => 'Activo',
                                                    'strDescripcionRol'             => $strDescripcionRol,
                                                    'strDescripcionTipoRol'         => 'Empleado',
                                                    'strNombreDepartamento'         => $strNombreDepartamento,
                                                    'strRegionEmpleado'             => $strRegionServicio,
                                                    'esJefe'                        => 'S',
                                                    'strDescripcionFormaContacto'   => 'Correo Electronico'
                                            );
                $arrayRespuestaResponsables = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                ->getResultadoPersonaEmpresaRolPorCriterios($arrayParametrosResponsable);
                $arrayResultadoResponsables  = $arrayRespuestaResponsables['resultado'];
                if(empty($arrayResultadoResponsables[0]))
                {
                    throw new \Exception("No se ha podido encontrar el Jefe para la asignación de tarea");
                }
                else
                {
                    $arrayJefeResponsable = $arrayResultadoResponsables[0];
                }
                $arrayDestinatariosJefes    = array();
                if(isset($arrayJefeResponsable["contactos"]) && !empty($arrayJefeResponsable["contactos"]))
                {
                    $arrayDestinatariosJefes    = explode(',', $arrayJefeResponsable["contactos"]);
                }
                
                foreach($arrayServiciosIpsFor as $objServicioIp)
                {
                    $arrayDestinatarios         = array();
                    $objSolicitudInfoTecnica    = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                    ->findOneBy(array("servicioId"  => $objServicioIp->getId(), 
                                                                                      "estado"      => $strEstadoSolServicio));
                    if(!is_object($objSolicitudInfoTecnica))
                    {
                        throw new \Exception("No existe solicitud de info tecnica asociada al servicio");
                    }
                    $strUsrVendedorServicio = $objServicioIp->getUsrVendedor();
                    $strUsrCreacionServicio = $objServicioIp->getUsrCreacion();
                    if(empty($strUsrVendedorServicio))
                    {
                        $strUsrVendedorServicio = $objPunto->getUsrVendedor();
                    }
                    
                    $arrayCorreosVendedorServicio  =  $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                                                        ->getContactosByLoginPersonaAndFormaContacto($strUsrVendedorServicio,
                                                                                                                     'Correo Electronico');
                    if(!empty($arrayCorreosVendedorServicio))
                    {
                        foreach($arrayCorreosVendedorServicio as $arrayCorreoVendedorServicio)
                        {
                            if($arrayCorreoVendedorServicio && !empty($arrayCorreoVendedorServicio['valor']))
                            {
                                $arrayDestinatarios[] = $arrayCorreoVendedorServicio['valor'];
                            }
                        }
                    }
                    
                    $arrayCorreosUsrCreacionServicio    =  $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                                                            ->getContactosByLoginPersonaAndFormaContacto($strUsrCreacionServicio,
                                                                                                                         'Correo Electronico');
                    if(!empty($arrayCorreosUsrCreacionServicio))
                    {
                        foreach($arrayCorreosUsrCreacionServicio as $arrayCorreoUsrCreacionServicio)
                        {
                            if($arrayCorreoUsrCreacionServicio && !empty($arrayCorreoUsrCreacionServicio['valor']))
                            {
                                $arrayDestinatarios[] = $arrayCorreoUsrCreacionServicio['valor'];
                            }
                        }
                    }
                    
                    $objEmpleadoUsrCreacion = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                                                ->getPersonaPorLogin($strUsrCreacionServicio);
                    if(is_object($objEmpleadoUsrCreacion))
                    {
                        $strEmpleadoUsrCreacion = $objEmpleadoUsrCreacion->getNombres().' '.$objEmpleadoUsrCreacion->getApellidos();
                    }
                    else
                    {
                        $strEmpleadoUsrCreacion = "";
                    }
                    $arrayParametrosTareaNotif  = array('strIdEmpresa'          => $strCodEmpresa == '26'?'10':$strCodEmpresa,
                                                        'strPrefijoEmpresa'     => $strPrefijoEmpresa == 'TNP'?'TN':$strPrefijoEmpresa,
                                                        'strNombreTarea'        => $strNombreTarea,
                                                        'strObservacion'        => $strObservacionTarea,
                                                        'strNombreDepartamento' => $strNombreDepartamento,
                                                        'strEmpleado'           => $strEmpleadoUsrCreacion,
                                                        'strUsrCreacion'        => $strUsrCreacionServicio,
                                                        'strIp'                 => $strIpClient,
                                                        'strOrigen'             => 'WEB-TN',
                                                        'strLogin'              => $objPunto->getLogin(),
                                                        'intPuntoId'            => $objPunto->getId(),
                                                        'strNombreCliente'      => $strCliente,
                                                        'arrayJefeResponsable'  => $arrayJefeResponsable,
                                                        'objDetalleSolicitud'	=> $objSolicitudInfoTecnica,
                                                        'arrayDestinatarios'    => array_merge($arrayDestinatarios,$arrayDestinatariosJefes),
                                                        'boolEsIPSB'            => $boolEsIPSB
                                                       );
                    $arrayRespuestaCreacion     = $this->ingresarTareaInterna($arrayParametrosTareaNotif);
                    $strStatus                  = $arrayRespuestaCreacion['status'];
                    $strMensaje                 = $arrayRespuestaCreacion['mensaje'];
                    
                    if(($strOpcion === "CREAR_IPSB") 
                        && count($arrayServiciosPuntoIPSBPreAsig) === 1 && count($arrayServiciosPuntoIPSB) === 0)
                    {
                        $intIdOlt               = $objServicioTecnicoSBActivo->getElementoId();
                        $objElementoOlt         = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdOlt);
                        $strMarcaOlt            = $objElementoOlt->getModeloElementoId()->getMarcaElementoId()->getNombreMarcaElemento();
                        if (empty($strMarcaOlt))
                        {
                            throw new \Exception("No existe un flujo definido para la IP con un ".$strNombreInternetProd." sin marca del OLT");
                        }
                        
                        //Consultamos si las marcas son iguales a las que estan parametrizadas
                        $objParametroCabMarcaOlt = $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                         ->findOneBy( array( 'nombreParametro' => 'MARCA_OLT_AGREGAR_SERVICIO_ADICIONAL',
                                                             'estado'          => 'Activo' ) );
                
                        if (is_object($objParametroCabMarcaOlt))
                        {
                            $arrayParDetMarcaOlt = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                           ->findBy( array( 'parametroId' => $objParametroCabMarcaOlt->getId(),
                                                                            'estado'      => 'Activo' ) );
                    
                            if (is_array($arrayParDetMarcaOlt) && !empty($arrayParDetMarcaOlt))
                            {
                                $arrayMarcaOlt = explode(",",$arrayParDetMarcaOlt[0]->getValor1());
                            }    
                        }
                                        
                        if(!in_array($strMarcaOlt, $arrayMarcaOlt))    
                        {   
                            $objEnlaceCliente   = $this->emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                                          ->findOneBy(array
                                                                                        ("interfaceElementoIniId" => 
                                                                                         $objServicioTecnicoSBActivo->getInterfaceElementoClienteId(),
                                                                                         "estado"                 => 'Activo'));
                            if(!is_object($objEnlaceCliente))
                            {
                                throw new \Exception("No existe el enlace con el cpe wifi!");
                            }
                            $objInterfaceElementoClienteWifi   = $objEnlaceCliente->getInterfaceElementoFinId();
                            if(!is_object($objInterfaceElementoClienteWifi))
                            {
                                throw new \Exception("No existe la interface del cpe wifi!");
                            }
                            $objElementoClienteWifi = $objInterfaceElementoClienteWifi->getElementoId();
                            if(!is_object($objElementoClienteWifi))
                            {
                                throw new \Exception("No existe el cpe wifi!");
                            }
                            $strTipoBusqueda                    = "CON_IP";
                            $strModeloCpeWifi                   = $objElementoClienteWifi->getModeloElementoId()->getNombreModeloElemento();
                            $arrayVerifModeloCpeWifiPermitido   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                  ->get('MODELOS_CPE_WIFI_ACTIVACION_SB_TELLION', 
                                                                                        '', 
                                                                                        '', 
                                                                                        '', 
                                                                                        $strTipoBusqueda, 
                                                                                        $strModeloCpeWifi, 
                                                                                        '', 
                                                                                        '', 
                                                                                        '', 
                                                                                        $strCodEmpresa);
                            $strModelosPermitidos   = "";
                            if(empty($arrayVerifModeloCpeWifiPermitido))
                            {
                                $arrayModelosCpeWifiPermitidos  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                  ->get('MODELOS_CPE_WIFI_ACTIVACION_SB_TELLION', 
                                                                                        '', 
                                                                                        '', 
                                                                                        '', 
                                                                                        $strTipoBusqueda, 
                                                                                        '', 
                                                                                        '', 
                                                                                        '', 
                                                                                        '', 
                                                                                        $strCodEmpresa,
                                                                                        'valor2');
                                $intContadorModelosWifi = 0;
                                foreach($arrayModelosCpeWifiPermitidos as $arrayModeloCpeWifiPermitido)
                                {
                                    $intContadorModelosWifi++;
                                    if(empty($strModelosPermitidos))
                                    {
                                        $strModelosPermitidos = $arrayModeloCpeWifiPermitido["valor2"];
                                    }
                                    else
                                    {
                                        $strModelosPermitidos = $strModelosPermitidos.", ".$arrayModeloCpeWifiPermitido["valor2"];
                                    }
                                }

                                $strObservacionModeloWifi = "Se informa que para la activación de ips adicionales es necesario tener instalado"
                                                            ." un servicio ".$strNombreInternetProd." con alguno de los siguientes modelos "
                                                            ."de CPE WIFI: ".$strModelosPermitidos." <br>El modelo actual del servicio "
                                                            .$strNombreInternetProd." es ".$strModeloCpeWifi." <br>";

                                $boolSolCambioEquipoCreada      = false;
                                $objServicioIsb                 = $objServicioTecnicoSBActivo->getServicioId();
                                $strSolCambioModem              = "SOLICITUD CAMBIO DE MODEM INMEDIATO";
                                $objTipoSolicitudCambioEquipo   = $this->emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                                    ->findOneByDescripcionSolicitud($strSolCambioModem);
                                $arrayDetalleSolicitudCambioEquipo  = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                                        ->findBy(array( "servicioId"      => $objServicioIsb->getId(),
                                                                                                        "tipoSolicitudId" => 
                                                                                                        $objTipoSolicitudCambioEquipo->getId(),
                                                                                                        "estado"          => 'AsignadoTarea'));
                                foreach($arrayDetalleSolicitudCambioEquipo as $objDetalleSolicitudCambioEquipo)
                                {
                                    $objCaracteristicaElementoCliente   = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                                            ->findOneByDescripcionCaracteristica("ELEMENTO CLIENTE");
                                    $objDetalleSolCaractElementoCliente = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                                            ->findOneBy(array(
                                                                                                                "detalleSolicitudId"    => 
                                                                                                                $objDetalleSolicitudCambioEquipo,
                                                                                                                "caracteristicaId"      => 
                                                                                                                $objCaracteristicaElementoCliente,
                                                                                                                "valor"                 =>
                                                                                                                $objElementoClienteWifi->getId(),
                                                                                                                "estado"                => 
                                                                                                                'AsignadoTarea'
                                                                                                                )
                                                                                                        );
                                    if(is_object($objDetalleSolCaractElementoCliente))
                                    {
                                        $boolSolCambioEquipoCreada = true;
                                        break;
                                    }
                                }

                                if($boolSolCambioEquipoCreada)
                                {
                                    $strObservacionModeloWifi .= "La solicitud de cambio de equipo ya está creada, favor realice el cambio de equipo";
                                }
                                else
                                {
                                    $strObservacionModeloWifi .= "Por favor crear una solicitud de cambio de equipo en el servicio "
                                                                 .$strNombreInternetProd;
                                }
                                $strObservacionModeloWifi = "Servicio ".$strNombreInternetProd
                                                            ."<b>".strtolower(str_replace("_", " ", $strTipoBusqueda))." adicional</b>,"
                                                            ."<br>favor ingresar "
                                                            . ($intContadorModelosWifi === 1  ? "el siguiente modelo" 
                                                                : "alguno de los siguientes modelos")
                                                            ." de CPE WIFI: ".$strModelosPermitidos."<br>";
                                $arrayParametrosTareaNotif  = array(
                                                                    'strIdEmpresa'          => $strCodEmpresa,
                                                                    'strPrefijoEmpresa'     => $strPrefijoEmpresa,
                                                                    'strNombreTarea'        => $strNombreTareaCambioEquipo,
                                                                    'strObservacion'        => $strObservacionModeloWifi,
                                                                    'strNombreDepartamento' => $strNombreDepartamento,
                                                                    'strEmpleado'           => $strEmpleadoUsrCreacion,
                                                                    'strUsrCreacion'        => $strUsrCreacionServicio,
                                                                    'strIp'                 => $strIpClient,
                                                                    'strOrigen'             => 'WEB-TN',
                                                                    'strValidacionTags'     => 'NO',
                                                                    'strLogin'              => $objPunto->getLogin(),
                                                                    'intPuntoId'            => $objPunto->getId(),
                                                                    'strNombreCliente'      => $strCliente,
                                                                    'arrayJefeResponsable'  => $arrayJefeResponsable,
                                                                    'objDetalleSolicitud'	=> $objSolicitudInfoTecnica,
                                                                    'arrayDestinatarios'    => $arrayDestinatariosJefes
                                                                   );
                                $arrayRespuestaTareaCpeWifi = $this->ingresarTareaInterna($arrayParametrosTareaNotif);
                                $strStatus                  = $arrayRespuestaTareaCpeWifi['status'];
                                $strMensaje                 = $arrayRespuestaTareaCpeWifi['mensaje'];
                            }
                        }
                    }
                }
            }
            else
            {
                $strStatus  = "OK";
                $strMensaje = "No existe servicio ".$strNombreInternetProd." Activo";
            }
            if ($strOpcion === "ACTIVACION_INTERNET SMALL BUSINESS")
            {
                $this->emSoporte->commit();
                $this->emComunicacion->commit();
            }
        }
        catch (\Exception $ex) 
        {
            if ($strOpcion === "ACTIVACION_INTERNET SMALL BUSINESS")
            {
                if ($this->emSoporte->getConnection()->isTransactionActive())
                {
                    $this->emSoporte->getConnection()->rollback();
                }
                $this->emSoporte->close();
                if ($this->emComunicacion->getConnection()->isTransactionActive())
                {
                    $this->emComunicacion->getConnection()->rollback();
                }
                $this->emComunicacion->close();
            }
            $this->serviceUtil->insertError("Telcos+",
                                            "SoporteService->crearTareaYNotificacionIPSB",
                                            $ex->getMessage(),
                                            $strUsrSession,
                                            $strIpClient
                                           );
            $strStatus  = "ERROR";
            $strMensaje = $ex->getMessage(); 
        }
        $arrayRespuesta = array("strStatus" => $strStatus, "strMensaje" => $strMensaje ); 
        return $arrayRespuesta;
    }
    
    /**
     * crearTareaReintentoPromo
     * 
     * Función que sirve para crear una tarea de reintento de promoción de servicios que presentaron problemas al ejecutar este proceso
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 09-09-2019
     * @since 1.0
     */
    public function crearTareaReintentoPromo($arrayParametros)
    {
        $strCliente           = '';
        $objPunto             = $arrayParametros["objPunto"];
        $strPrefijoEmpresa    = $arrayParametros["strPrefijoEmpresa"];
        $strCodEmpresa        = $arrayParametros["strCodEmpresa"];
        $strIpClient          = $arrayParametros["strIpClient"];
        $strUsrCreacion       = $arrayParametros["strUsrCreacion"];
        $strObservacionTarea  = $arrayParametros["strObservacionTarea"];
        $strEstadoSolServicio = "Activo";
        $strDescripcionRol    = 'Jefe Departamental';
        $strParamNotifPromo   = "NOTIF_PROMO_BW";
        try
        {
            if(!is_object($objPunto))
            {
                throw new \Exception("No se enviaron los parámetros necesarios para la creación y envío de notificación");
            }
            
            $objPersonaEmpresaRol = $objPunto->getPersonaEmpresaRolId();
            if(is_object($objPersonaEmpresaRol))
            {
                $objPersona = $objPersonaEmpresaRol->getPersonaId();
                $strCliente = sprintf("%s",$objPersona);
            }

            $arrayNotifPromo = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                               ->getOne( $strParamNotifPromo, 
                                                         '', 
                                                         '', 
                                                         '', 
                                                         $strEstadoSolServicio,
                                                         '', 
                                                         '', 
                                                         '', 
                                                         '', 
                                                         $strCodEmpresa);
            if(empty($arrayNotifPromo))
            {
                throw new \Exception("No se ha podido obtener la información para la creación de tareas de reintento de promoción");
            }

            $strNombreDepartamento  = $arrayNotifPromo['valor2'];
            $strNombreTarea         = $arrayNotifPromo['valor3'];
            
            $intIdOficinaServicio   = $objPunto->getPuntoCoberturaId()->getOficinaId();
            $objOficinaServicio     = $this->emComercial
                                           ->getRepository("schemaBundle:InfoOficinaGrupo")
                                           ->find($intIdOficinaServicio);
            $strRegionServicio      = "";
            if(is_object($objOficinaServicio))
            {
                $objCantonServicio = $this->emComercial
                                          ->getRepository("schemaBundle:AdmiCanton")
                                          ->find($objOficinaServicio->getCantonId());
                if(is_object($objCantonServicio))
                {
                    $strRegionServicio = $objCantonServicio->getRegion();
                }
            }
            //Obtengo el rol del jefe del departamento.
            $arrayDescripcionRol = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                   ->getOne('ASIGNAR_TAREA_JEFES_IPCC_MD',
                                                            '',
                                                            '',
                                                            '',
                                                            $strRegionServicio,
                                                            $strNombreDepartamento,
                                                            '',
                                                            '',
                                                            '',
                                                            '');
            if(!empty($arrayDescripcionRol) && !empty($arrayDescripcionRol["valor2"])
                    && $arrayDescripcionRol["valor2"] === $strNombreDepartamento)
            {
                $strDescripcionRol = (!empty($arrayDescripcionRol["valor3"])) ? $arrayDescripcionRol["valor3"] : $strDescripcionRol;
            }
            $arrayParametrosResponsable = array(
                                                'idEmpresa'                     => $strCodEmpresa,
                                                'estado'                        => 'Activo',
                                                'strDescripcionRol'             => $strDescripcionRol,
                                                'strDescripcionTipoRol'         => 'Empleado',
                                                'strNombreDepartamento'         => $strNombreDepartamento,
                                                'strRegionEmpleado'             => $strRegionServicio,
                                                'esJefe'                        => 'S',
                                                'strDescripcionFormaContacto'   => 'Correo Electronico'
                                               );
            
            $arrayRespuestaResponsables = $this->emComercial
                                               ->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                               ->getResultadoPersonaEmpresaRolPorCriterios($arrayParametrosResponsable);
            $arrayResultadoResponsables  = $arrayRespuestaResponsables['resultado'];
            if(empty($arrayResultadoResponsables[0]))
            {
                throw new \Exception("No se ha podido encontrar el Jefe para la asignación de tarea");
            }
            else
            {
                $arrayJefeResponsable = $arrayResultadoResponsables[0];
            }
            $arrayDestinatariosJefes = array();
            if(isset($arrayJefeResponsable["contactos"]) && !empty($arrayJefeResponsable["contactos"]))
            {
                $arrayDestinatariosJefes    = explode(',', $arrayJefeResponsable["contactos"]);
            }

            $arrayDestinatarios = array();
            $objEmpleadoUsrCreacion = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                                        ->getPersonaPorLogin($strUsrCreacion);
            if(is_object($objEmpleadoUsrCreacion))
            {
                $strEmpleadoUsrCreacion = $objEmpleadoUsrCreacion->getNombres().' '.$objEmpleadoUsrCreacion->getApellidos();
            }
            else
            {
                $strEmpleadoUsrCreacion = "";
            }
            $arrayParametrosTareaNotif  = array('strIdEmpresa'          => $strCodEmpresa,
                                                'strPrefijoEmpresa'     => $strPrefijoEmpresa,
                                                'strNombreTarea'        => $strNombreTarea,
                                                'strObservacion'        => $strObservacionTarea,
                                                'strNombreDepartamento' => $strNombreDepartamento,
                                                'strEmpleado'           => $strEmpleadoUsrCreacion,
                                                'strUsrCreacion'        => $strUsrCreacion,
                                                'strIp'                 => $strIpClient,
                                                'strOrigen'             => 'WEB-TN',
                                                'strLogin'              => $objPunto->getLogin(),
                                                'intPuntoId'            => $objPunto->getId(),
                                                'strNombreCliente'      => $strCliente,
                                                'arrayJefeResponsable'  => $arrayJefeResponsable,
                                                'arrayDestinatarios'    => array_merge($arrayDestinatarios,$arrayDestinatariosJefes)
                                               );
            $arrayRespuestaCreacion     = $this->ingresarTareaInterna($arrayParametrosTareaNotif);
            $strStatus                  = $arrayRespuestaCreacion['status'];
            $strMensaje                 = $arrayRespuestaCreacion['mensaje'];
        }
        catch (\Exception $ex)
        {
            $this->serviceUtil->insertError("Telcos+",
                                            "SoporteService->crearTareaReintentoPromo",
                                            $ex->getMessage(),
                                            $strUsrCreacion,
                                            $strIpClient
                                           );
            $strStatus  = "ERROR";
            $strMensaje = $ex->getMessage(); 
        }
        $arrayRespuesta = array("strStatus" => $strStatus, "strMensaje" => $strMensaje ); 
        return $arrayRespuesta;
    }

    /**
     * Función que sirve para crear una tarea y la respectiva notificación a Comercial al agregar un servicio FWA.
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 1.0 06-08-2019
     */
    public function crearTareaYNotificacionFWA($arrayParametros)
    {
        $objServicio                = $arrayParametros["objServicio"];
        $objPunto                   = $arrayParametros["objPunto"];
        $strPrefijoEmpresa          = $arrayParametros["strPrefijoEmpresa"];
        $strCodEmpresa              = $arrayParametros["strCodEmpresa"];
        $strIpClient                = $arrayParametros["strIpClient"];
        $strEstadoSolServicio       = $arrayParametros["strEstadoSolServicio"];
        $strUsrSession              = $arrayParametros["strUsrSession"];
        $strNombreParametro         = $arrayParametros["strNombreParametro"];
        $strValor2                  = $arrayParametros["strValor2"];
        $arrayRespTarea             = array();
        try
        {
            if(!is_object($objPunto))
            {
                throw new \Exception("No se enviaron los parámetros necesarios para la creación y envío de notificación");
            }

            $arrayParametrosFWA = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                  ->getOne( $strNombreParametro,
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            (!empty($strValor2)) ? $strValor2 : '',
                                                            '',
                                                            '',
                                                            '',
                                                            '');
            if(empty($arrayParametrosFWA))
            {
                throw new \Exception("No se ha podido obtener la información para el envío de notificación del producto.");
            }

            $intIdPersonaEmprRol    = $arrayParametrosFWA['valor3'];
            $strNombreTarea         = $arrayParametrosFWA['valor4'];
            $strObservacionTarea    = $arrayParametrosFWA['valor5'];
            $strNombreDepartamento  = $arrayParametrosFWA['valor6'];

            $objSolicitudInfoTecnica    = $this->emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                            ->findOneBy(array("servicioId"  => $objServicio->getId(),
                                                                              "estado"      => $strEstadoSolServicio));
            if(!is_object($objSolicitudInfoTecnica))
            {
                throw new \Exception("No existe solicitud de info técnica asociada al servicio");
            }

            $arrayParametrosResponsable = array(
                                                'idEmpresa'                     => $strCodEmpresa == '26'?'10':$strCodEmpresa,
                                                'intIdPerEmpresaRol'            => $intIdPersonaEmprRol,
                                                'estado'                        => 'Activo',
                                                'strDescripcionTipoRol'         => 'Empleado',
                                                'strDescripcionFormaContacto'   => 'Correo Electronico'
                                        );
            $arrayRespuestaResponsables = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                            ->getResultadoPersonaEmpresaRolPorCriterios($arrayParametrosResponsable);
            $arrayResultadoResponsables  = $arrayRespuestaResponsables['resultado'];
            if(empty($arrayResultadoResponsables[0]))
            {
                throw new \Exception("No se ha podido encontrar el Jefe para la asignación de tarea");
            }
            else
            {
                $arrayJefeResponsable = $arrayResultadoResponsables[0];
            }
            $arrayDestinatariosJefes    = array();
            if(isset($arrayJefeResponsable["contactos"]) && !empty($arrayJefeResponsable["contactos"]))
            {
                $arrayDestinatariosJefes    = explode(',', $arrayJefeResponsable["contactos"]);
            }

            $objPersonaEmpresaRol       = $objPunto->getPersonaEmpresaRolId();
            if(is_object($objPersonaEmpresaRol))
            {
                $objPersona = $objPersonaEmpresaRol->getPersonaId();
                $strCliente = sprintf("%s",$objPersona);
            }

            $objEmpleadoUsrCreacion = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                                        ->getPersonaPorLogin($strUsrSession);
            if(is_object($objEmpleadoUsrCreacion))
            {
                $strEmpleadoUsrCreacion = $objEmpleadoUsrCreacion->__toString();
            }
            else
            {
                $strEmpleadoUsrCreacion = "";
            }
            $arrayParametrosTareaNotif  = array('strIdEmpresa'          => $strCodEmpresa == '26'?'10':$strCodEmpresa,
                                                'strPrefijoEmpresa'     => $strPrefijoEmpresa == 'TNP'?'TN':$strPrefijoEmpresa,
                                                'strNombreTarea'        => $strNombreTarea,
                                                'strObservacion'        => $strObservacionTarea,
                                                'strEmpleado'           => $strEmpleadoUsrCreacion,
                                                'strNombreDepartamento' => $strNombreDepartamento,
                                                'strUsrCreacion'        => $strUsrSession,
                                                'strIp'                 => $strIpClient,
                                                'strOrigen'             => 'WEB-TN',
                                                'strLogin'              => $objPunto->getLogin(),
                                                'intPuntoId'            => $objPunto->getId(),
                                                'strNombreCliente'      => $strCliente,
                                                'arrayJefeResponsable'  => $arrayJefeResponsable,
                                                'objDetalleSolicitud'   => $objSolicitudInfoTecnica,
                                                'arrayDestinatarios'    => array_merge($arrayDestinatarios,$arrayDestinatariosJefes)
                                               );
            $arrayRespuestaCreacion     = $this->ingresarTareaInterna($arrayParametrosTareaNotif);
            $strStatus                  = $arrayRespuestaCreacion['status'];
            $strMensaje                 = $arrayRespuestaCreacion['mensaje'];
            $arrayRespTarea             = array('intIdTarea' => $arrayRespuestaCreacion['id']);
        }
        catch (\Exception $ex)
        {
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }
            $this->emSoporte->close();
            if ($this->emComunicacion->getConnection()->isTransactionActive())
            {
                $this->emComunicacion->getConnection()->rollback();
            }
            $this->emComunicacion->close();
            $this->serviceUtil->insertError("Telcos+",
                                            "SoporteService->crearTareaYNotificacionFWA",
                                            $ex->getMessage(),
                                            $strUsrSession,
                                            $strIpClient
                                           );
            $strStatus  = "ERROR";
            $strMensaje = $ex->getMessage();
        }
        $arrayRespuesta = array("strStatus" => $strStatus, "strMensaje" => $strMensaje, "arrayData" => $arrayRespTarea );
        return $arrayRespuesta;
    }
    /**
     * Método encargado de registrar un caso
     *
     * @param $arrayParametros [strPrefijoEmpresa    = Prefijo de la empresa,
     *                          strTipoCaso          = Tipo de caso,
     *                          strFormaContacto     = Forma de contacto,
     *                          strNivelCriticidad   = NIvel de criticidad,
     *                          strTipoAfectacion    = Tipo de afectacion,
     *                          strFechaHoraApertura = Fecha y hora de apertura del caso,
     *                          strTipoBackbone      = TIpo de backbone,
     *                          strTituloInicial     = Titulo inicial del caso,
     *                          strVersionInicial    = Descripcion del caso,
     *                          arraySintomas        = Array de sintomas,
     *                          arrayHipotesis       = Array de hipotesis,
     *                          strEmpleadoAsignado  = Id de la persona empresa rol encargado del caso,
     *                          arrayTareas          = Array de tareas,
     *                          strEstadoActual      = Estado de la tarea
     *                          strTipoReprograma    = Tipo de reprograma para el SLA (C = 'Cliente')
     *                          intTiempo            = Tiempo transcurrido desde la creación
     *                          strUserCreacion      = Usuarcion de creacion,
     *                          strIpCreacion        = Ip de creacion]
     *
     * @return $arrayRespuesta con respuesta de error o confirmacion de la creacion del caso y tarea
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 02-03-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 01-10-2018 - Se modifica la respuesta del método para seguir un standar, por motivos que se tenían multiples respuestas
     *                           de diferentes maneras. Adicional se añade validaciones en el flujo para detectar si existen los síntomas,
     *                           Hipótesis y persona Asignada.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 13-07-2019 - Se agrega el parámetro 'strSolicitante' para identificar
     *                           quien solicita las sugerencias de hal.
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.3 24-07-2019 - Se agrega los parámetros 'strEstadoActual','strEcucert'
     *                            '$strTipoReprograma' y 'intTiempo' para identificar
     *                            los casos creados por ECUCERT y ponerlos como tiempo
     *                            del cliente.
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.3 04-03-2019 - Se realiza la validación en la cual si el caso existe no se genera número de caso.
     * @since 1.2
     * 
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.4 08-07-2020 - Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     * 
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.5 09-12-2020 - Actualización: Se agrega validación que si el caso desde webservice de noc entonces busca los productos de los
     *                                          servicios afectados en la tabla de productos.
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.6 16-10-2021 - Se agrega llamado a proceso para envio de evento de asignacion 
     *                           de tareas Hal hacia megadatos para tracking map
     * 
     *
     */
   public function crearCasoSoporte($arrayParametros)
    {
        $strPrefijoEmpresa    = $arrayParametros["strPrefijoEmpresa"];
        $strTipoCaso          = $arrayParametros["strTipoCaso"];
        $strFormaContacto     = $arrayParametros["strFormaContacto"];
        $strNivelCriticidad   = $arrayParametros['strNivelCriticidad'];
        $strTipoAfectacion    = $arrayParametros['strTipoAfectacion'];
        $strFechaHoraApertura = $arrayParametros['strFechaHoraApertura'];
        $strTipoBackbone      = $arrayParametros['strTipoBackbone'];
        $strTituloInicial     = $arrayParametros['strTituloInicial'];
        $strVersionInicial    = $arrayParametros['strVersionInicial'];
        $arraySintomas        = $arrayParametros['arraySintomas'];
        $arrayHipotesis       = $arrayParametros['arrayHipotesis'];
        $strEmpleadoAsignado  = $arrayParametros['strEmpleadoAsignado'];
        $arrayTareas          = $arrayParametros['arrayTareas'];
        $strUserCreacion      = $arrayParametros['strUserCreacion'];
        $strIpCreacion        = $arrayParametros['strIpCreacion'];
        $strEstadoActual      = $arrayParametros['strEstadoActual'];
        $strTipoReprograma    = $arrayParametros['strTipoReprograma'];
        $intTiempo            = $arrayParametros['intTiempo'];
        $intIdCaso            = $arrayParametros['intIdCaso'];
        $intIdCasoHistorial   = $arrayParametros['intIdCasoHistorial'];
        $intIdComunicacion    = $arrayParametros['intIdComunicacion'];
        $intIdDocumento       = $arrayParametros['intIdDocumento'];
        $intIdDocComunicacion = $arrayParametros['intIdDocComunicacion'];
        $boolOrigenWsCasoNoc  = $arrayParametros['boolOrigenWsCasoNoc'];
        $arrayTareasCreadas   = array();
        $arrayTareasCreadas2  = array();
        $strCodigo            = '';

        $this->emSoporte->getConnection()->beginTransaction();
        $this->emComunicacion->getConnection()->beginTransaction();

        try
        {
            // Validamos los valores nulos.
            if (!$strPrefijoEmpresa || !$strTipoCaso || !$strFormaContacto || !$strNivelCriticidad || !$strTipoAfectacion
                || !$strFechaHoraApertura || !$strTituloInicial || !$strVersionInicial || empty($arraySintomas)
                || !$strUserCreacion || !$strIpCreacion)
            {
                throw new \Exception("Error : Los siguientes valores no pueden ser nulos: ("
                    . "prefijoEmpresa,tipoCaso,formaContacto,nivelCriticidad,tipoAfectacion,"
                    . "fechaHoraApertura,tituloInicial,versionInicial,sintomas,user,ip)");
            }

            // Validamos el tamaño de caracteres en el título inicial.
            if (strlen($strTituloInicial) > 1500)
            {
                throw new \Exception("Error : Tamaño de caracteres no permitidos en el título inicial (1500 max)");
            }

            // Validamos el tamaño de caracteres en la versión u/o descripción del caso.
            if (strlen($strVersionInicial) > 1500)
            {
                throw new \Exception("Error : Tamaño de caracteres no permitidos en la versión inicial (1500 max)");
            }

            // Obtenemos el objeto empresa.
            $objInfoEmpresaGrupo = $this->emComercial->getRepository('schemaBundle:InfoEmpresaGrupo')
                ->findOneBy(array ('prefijo' => $strPrefijoEmpresa,
                                   'estado'  => "Activo"));

            if (!is_object($objInfoEmpresaGrupo))
            {
                throw new \Exception("Error : El prefijo $strPrefijoEmpresa no existe");
            }

            // Obtenemos el objeto empresa forma de contacto.
            $objAdmiFormaContacto = $this->emComercial->getRepository('schemaBundle:AdmiFormaContacto')
                ->findOneBy(array ('codigo' => $strFormaContacto,
                                   'estado' => "Activo"));

            if (!is_object($objAdmiFormaContacto))
            {
                throw new \Exception("Error : La forma de contacto $strFormaContacto no existe");
            }

            // Obtenemos el objeto de tipo caso.
            $objAdmiTipoCaso = $this->emSoporte->getRepository('schemaBundle:AdmiTipoCaso')
                ->findOneBy(array ('nombreTipoCaso' => $strTipoCaso,
                                   'estado'         => "Activo"));

            if (!is_object($objAdmiTipoCaso))
            {
                throw new \Exception("Error : El tipo de caso $strTipoCaso no existe");
            }

            // Obtenemos el objeto nivel de criticidad.
            $objAdmiNivelCriticidad = $this->emSoporte->getRepository('schemaBundle:AdmiNivelCriticidad')
                ->findOneBy(array ('nombreNivelCriticidad' => $strNivelCriticidad,
                                   'estado'                => "Activo"));

            if (!is_object($objAdmiNivelCriticidad))
            {
                throw new \Exception("Error : El nivel de criticidad $strNivelCriticidad no existe");
            }

            // Se realiza el parseo de la fecha de apertura.
            $strFormato            = "Y/m/d H:i:s";
            $arrayFechaHoraExplode = explode(" ", $strFechaHoraApertura);
            $arrayFecha            = explode("-", $arrayFechaHoraExplode[0]);
            $arrayFechaApertura    = date($strFormato, strtotime($arrayFecha[2]."-".$arrayFecha[1]."-".$arrayFecha[0] . " "
                . $arrayFechaHoraExplode[1]));
            $objDateFechaApertura  = new \DateTime($arrayFechaApertura);
            
            // Guardamos el caso.
            if(!empty($intIdCaso))
            {
                $objInfoCaso = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                               ->findOneById($intIdCaso);
            }
            else
            {
                $objInfoCaso = new InfoCaso();
                $objInfoCaso->setNumeroCaso($this->emSoporte->getRepository('schemaBundle:InfoCaso')->getNumeroCasoNext($objAdmiTipoCaso));
            }
            $objInfoCaso->setEmpresaCod($objInfoEmpresaGrupo->getId());
            $objInfoCaso->setTipoCasoId($objAdmiTipoCaso);
            $objInfoCaso->setTipoNotificacionId($objAdmiFormaContacto->getId());
            $objInfoCaso->setNivelCriticidadId($objAdmiNivelCriticidad);
            $objInfoCaso->setTituloIni($strTituloInicial);
            $objInfoCaso->setVersionIni($strVersionInicial);
            $objInfoCaso->setFeApertura($objDateFechaApertura);
            $objInfoCaso->setUsrCreacion($strUserCreacion);
            $objInfoCaso->setFeCreacion(new \DateTime('now'));
            $objInfoCaso->setIpCreacion($strIpCreacion);
            $objInfoCaso->setTipoAfectacion($strTipoAfectacion);
            $objInfoCaso->setTipoBackbone(($strTipoCaso=="Tecnico")?null:$strTipoBackbone);
            $this->emSoporte->persist($objInfoCaso);
            $this->emSoporte->flush();
            
            // Guardamos el historial del caso.
            if(!empty($intIdCasoHistorial))
            {
                $objInfoCasoHistorial = $this->emSoporte->getRepository('schemaBundle:InfoCasoHistorial')
                                                        ->findOneById($intIdCasoHistorial);
            }
            else
            {
                $objInfoCasoHistorial = new InfoCasoHistorial();
            }
            $objInfoCasoHistorial->setCasoId($objInfoCaso);
            $objInfoCasoHistorial->setObservacion("Creacion del caso");
            $objInfoCasoHistorial->setEstado("Creado");
            $objInfoCasoHistorial->setFeCreacion(new \DateTime('now'));
            $objInfoCasoHistorial->setUsrCreacion($strUserCreacion);
            $objInfoCasoHistorial->setIpCreacion($strIpCreacion);
            $this->emSoporte->persist($objInfoCasoHistorial);
            $this->emSoporte->flush();

            // Proceso para guardar los sintomas del caso.
            foreach ($arraySintomas as $arraySintoma)
            {
                // Obtenemos el objeto sistoma.
                $objAdmiSintoma = $this->emSoporte->getRepository('schemaBundle:AdmiSintoma')
                    ->findOneBy(array ('nombreSintoma' => $arraySintoma["nombre"],
                                       'estado'        => "Activo"));

                if (!is_object($objAdmiSintoma))
                {
                    throw new \Exception("Error : El síntoma (".$arraySintoma['nombre'].") no existe");
                }

                // Guardamos el sintoma.
                if(!empty($arraySintoma["idDetalleHipotesis"]))
                {
                    $objInfoDetalleHipotesis = $this->emSoporte->getRepository('schemaBundle:InfoDetalleHipotesis')
                                                               ->findOneById($arraySintoma["idDetalleHipotesis"]);
                }
                else
                {
                    $objInfoDetalleHipotesis = new InfoDetalleHipotesis();
                }
                $objInfoDetalleHipotesis->setCasoId($objInfoCaso);
                $objInfoDetalleHipotesis->setSintomaId($objAdmiSintoma);
                $objInfoDetalleHipotesis->setEstado("Creado");
                $objInfoDetalleHipotesis->setObservacion("Creacion del Caso");
                $objInfoDetalleHipotesis->setFeCreacion(new \DateTime('now'));
                $objInfoDetalleHipotesis->setUsrCreacion($strUserCreacion);
                $objInfoDetalleHipotesis->setIpCreacion($strIpCreacion);
                $this->emSoporte->persist($objInfoDetalleHipotesis);
                $this->emSoporte->flush();

                // Guardamos el detalle.
                if(!empty($arraySintoma["idDetalle"]))
                {
                    $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                      ->findOneById($arraySintoma["idDetalle"]);
                }
                else
                {
                    $objInfoDetalle = new InfoDetalle();
                }
                $objInfoDetalle->setPesoPresupuestado(0);
                $objInfoDetalle->setValorPresupuestado(0);
                $objInfoDetalle->setUsrCreacion($strUserCreacion);
                $objInfoDetalle->setFeCreacion(new \DateTime('now'));
                $objInfoDetalle->setIpCreacion($strIpCreacion);
                $objInfoDetalle->setDetalleHipotesisId($objInfoDetalleHipotesis->getId());
                $this->emSoporte->persist($objInfoDetalle);
                $this->emSoporte->flush();

                // Verificamos el tipo de caso
                if ($strTipoCaso === 'Tecnico')
                {
                    $arrayPuntoCliente = $this->emComercial->getRepository('schemaBundle:InfoPunto')
                        ->getPuntoParaSession($arraySintoma["afectados"]["puntoId"][0]);

                    if (empty($arrayPuntoCliente) || count($arrayPuntoCliente) < 1)
                    {
                        throw new \Exception("Error : No existe información del punto (".$arraySintoma["afectados"]["puntoId"][0].")");
                    }

                    $objInfoPersona = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                        ->find($arrayPuntoCliente['id_persona']);

                    if (!is_object($objInfoPersona))
                    {
                       throw new \Exception("Error : El cliente no existe");
                    }

                    // Obtenemos la razón social del cliente.
                    $strRazonSocial = ($objInfoPersona->getRazonSocial() != null ? $objInfoPersona->getRazonSocial() :
                        $objInfoPersona->getNombres()." ".$objInfoPersona->getApellidos());

                    $intContador = 1;

                    if(!empty($arraySintoma["idDetalle"]))
                    {
                        $objInfoCriterioAfectado = $this->emSoporte->getRepository('schemaBundle:InfoCriterioAfectado')
                                                                   ->findOneByDetalleId($arraySintoma["idDetalle"]);
                    }
                    else
                    {
                        $objInfoCriterioAfectado = new InfoCriterioAfectado();
                        $objInfoCriterioAfectado->setId($intContador);
                        $objInfoCriterioAfectado->setDetalleId($objInfoDetalle);
                        $objInfoCriterioAfectado->setCriterio("Clientes");
                        $objInfoCriterioAfectado->setFeCreacion(new \DateTime('now'));
                        $objInfoCriterioAfectado->setUsrCreacion($strUserCreacion);
                        $objInfoCriterioAfectado->setIpCreacion($strIpCreacion);
                        $objInfoCriterioAfectado->setOpcion("Cliente: " . $strRazonSocial . " | OPCION: Punto Cliente");
                   
                        $this->emSoporte->persist($objInfoCriterioAfectado);
                        $this->emSoporte->flush();
                    }
                    
                    
                    if(!empty($arraySintoma["idParteAfectada"]))
                    {
                        $objInfoParteAfectada = $this->emSoporte->getRepository('schemaBundle:InfoParteAfectada')
                                                                ->findOneById($arraySintoma["idParteAfectada"]);
                    }
                    else
                    {
                        $objInfoParteAfectada = new InfoParteAfectada();
                    }
                    $objInfoParteAfectada->setTipoAfectado("Cliente");
                    $objInfoParteAfectada->setDetalleId($objInfoDetalle->getId());
                    $objInfoParteAfectada->setCriterioAfectadoId($objInfoCriterioAfectado->getId());
                    $objInfoParteAfectada->setAfectadoId($arrayPuntoCliente['id']);
                    $objInfoParteAfectada->setFeIniIncidencia($objInfoCaso->getFeApertura());
                    $objInfoParteAfectada->setAfectadoNombre($arrayPuntoCliente['login']);
                    $objInfoParteAfectada->setAfectadoDescripcion($strRazonSocial);
                    $objInfoParteAfectada->setFeCreacion(new \DateTime('now'));
                    $objInfoParteAfectada->setUsrCreacion($strUserCreacion);
                    $objInfoParteAfectada->setIpCreacion($strIpCreacion);
                    $this->emSoporte->persist($objInfoParteAfectada);
                    $this->emSoporte->flush();

                    if ($boolOrigenWsCasoNoc)
                    {
                        $arraySintoma["afectados"]["serviciosId"] = array($arraySintoma["afectados"]["servicioId"]);
                    }

                    if (!empty($arraySintoma["afectados"]["serviciosId"]) && count($arraySintoma["afectados"]["serviciosId"]) > 0 )
                    {
                        $arrayServiProduct = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                            ->getServicioProducto(array ('intIdEmpresa'     => $objInfoEmpresaGrupo->getId(),
                                                         'strNombreTecnico' => "INTERNET",
                                                         'strEstadoProd'    => 'Activo',
                                                         'arrayServicios'   => $arraySintoma["afectados"]["serviciosId"]));
    
                        if($boolOrigenWsCasoNoc && empty($arrayServiProduct))
                        {
                            $arrayServiProduct = array();
                            $objInfoServicio     = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                                     ->find($arraySintoma["afectados"]["serviciosId"][0]);
                            $arrayServiProduct[] = array("descripcionProducto" => $objInfoServicio->getProductoId()->getDescripcionProducto(),
                                                         "idServicio"          => $arraySintoma["afectados"]["serviciosId"][0]);
                        }

                        if (!empty($arrayServiProduct) && count($arrayServiProduct) > 0 )
                        {
                            foreach ($arrayServiProduct as $arrayData)
                            {
                                $intContador = $intContador + 1;
                                $objInfoCriterioAfectado = new InfoCriterioAfectado();
                                $objInfoCriterioAfectado->setId($intContador);
                                $objInfoCriterioAfectado->setDetalleId($objInfoDetalle);
                                $objInfoCriterioAfectado->setCriterio("Servicio");
                                $strOpcion = "Servicio: " . $arrayData["descripcionProducto"] . " | OPCION: Servicios";
                                $objInfoCriterioAfectado->setOpcion($strOpcion);
                                $objInfoCriterioAfectado->setFeCreacion(new \DateTime('now'));
                                $objInfoCriterioAfectado->setUsrCreacion($strUserCreacion);
                                $objInfoCriterioAfectado->setIpCreacion($strIpCreacion);
                                $this->emSoporte->persist($objInfoCriterioAfectado);
                                $this->emSoporte->flush();

                                $objInfoParteAfectada = new InfoParteAfectada();
                                $objInfoParteAfectada->setTipoAfectado("Servicio");
                                $objInfoParteAfectada->setDetalleId($objInfoDetalle->getId());
                                $objInfoParteAfectada->setCriterioAfectadoId($objInfoCriterioAfectado->getId());
                                $objInfoParteAfectada->setAfectadoId($arrayData["idServicio"]);
                                $objInfoParteAfectada->setFeIniIncidencia($objInfoCaso->getFeApertura());
                                $objInfoParteAfectada->setAfectadoNombre($arrayData["descripcionProducto"]);
                                $objInfoParteAfectada->setAfectadoDescripcion($arrayData["descripcionProducto"]);
                                $objInfoParteAfectada->setFeCreacion(new \DateTime('now'));
                                $objInfoParteAfectada->setUsrCreacion($strUserCreacion);
                                $objInfoParteAfectada->setIpCreacion($strIpCreacion);
                                $this->emSoporte->persist($objInfoParteAfectada);
                                $this->emSoporte->flush();
                            }
                        }
                    }
                }
                elseif ($strTipoCaso == 'Backbone')
                {
                    $strTipoElemento = $arraySintoma["tipoElemento"];

                    if ($strTipoElemento == "CAJA DISPERSION")
                    {
                        if (empty($arraySintoma["afectados"]["elementosId"]) || count($arraySintoma["afectados"]["elementosId"]) < 1 )
                        {
                            throw new \Exception("Error : Sin afectados para el tipo de elemento $strTipoElemento");
                        }

                        $intContador = 0;

                        foreach ($arraySintoma["afectados"]["elementosId"] as $strElemento)
                        {
                            $objInfoElemento = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                ->find($strElemento);

                            if (is_object($objInfoElemento))
                            {
                                $objAdmiModeloElemento = $this->emInfraestructura->getRepository("schemaBundle:AdmiModeloElemento")
                                    ->find($objInfoElemento->getModeloElementoId()->getId());

                                if (is_object($objAdmiModeloElemento))
                                {
                                    $intContador = $intContador + 1;
                                    $objInfoCriterioAfectado = new InfoCriterioAfectado();
                                    $objInfoCriterioAfectado->setId($intContador);
                                    $objInfoCriterioAfectado->setDetalleId($objInfoDetalle);
                                    $objInfoCriterioAfectado->setCriterio("Elementos");
                                    $strOpcion = "Elementos: " . $objInfoElemento->getNombreElemento() . " | OPCION: Ninguna";
                                    $objInfoCriterioAfectado->setOpcion($strOpcion);
                                    $objInfoCriterioAfectado->setFeCreacion(new \DateTime('now'));
                                    $objInfoCriterioAfectado->setUsrCreacion($strUserCreacion);
                                    $objInfoCriterioAfectado->setIpCreacion($strIpCreacion);
                                    $this->emSoporte->persist($objInfoCriterioAfectado);
                                    $this->emSoporte->flush();

                                    $objInfoParteAfectada = new InfoParteAfectada();
                                    $objInfoParteAfectada->setCriterioAfectadoId($objInfoCriterioAfectado->getId());
                                    $objInfoParteAfectada->setDetalleId($objInfoDetalle->getId());
                                    $objInfoParteAfectada->setAfectadoId($objInfoElemento->getId());
                                    $objInfoParteAfectada->setTipoAfectado("Elemento");
                                    $objInfoParteAfectada->setAfectadoNombre($objInfoElemento->getNombreElemento());
                                    $objInfoParteAfectada->setAfectadoDescripcion($objAdmiModeloElemento->getNombreModeloElemento());
                                    $objInfoParteAfectada->setFeIniIncidencia($objInfoCaso->getFeApertura());
                                    $objInfoParteAfectada->setFeCreacion(new \DateTime('now'));
                                    $objInfoParteAfectada->setUsrCreacion($strUserCreacion);
                                    $objInfoParteAfectada->setIpCreacion($strIpCreacion);
                                    $this->emSoporte->persist($objInfoParteAfectada);
                                    $this->emSoporte->flush();
                                }
                            }
                        }
                    }
                    elseif ($strTipoElemento == "OLT")
                    {
                        if (empty($arraySintoma["afectados"]["puntoId"]) || count($arraySintoma["afectados"]["puntoId"]) < 1 )
                        {
                            throw new \Exception("Error : Sin afectados para el tipo de elemento $strTipoElemento");
                        }

                        $arrayElementos = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                ->getElementosPuntos(array ('arrayPuntos'       => $arraySintoma["afectados"]["puntoId"],
                                                            'intIdElemento'     => null,
                                                            'strCriterio'       => "elemento",
                                                            'strEstadoServicio' => "Activo",
                                                            'strEstadoElemento' => "Activo"));

                        if (!empty($arrayElementos) && count($arrayElementos) > 0)
                        {
                            $intContador = 0;
                            foreach ($arrayElementos as $arrayData)
                            {
                                $intContador = $intContador + 1;
                                $objInfoCriterioAfectado = new InfoCriterioAfectado();
                                $objInfoCriterioAfectado->setId($intContador);
                                $objInfoCriterioAfectado->setDetalleId($objInfoDetalle);
                                $objInfoCriterioAfectado->setCriterio("Elementos");
                                $strOpcion = "Elementos: " . $arrayData["nombreElemento"] . " | OPCION: Punto Cliente";
                                $objInfoCriterioAfectado->setOpcion($strOpcion);
                                $objInfoCriterioAfectado->setFeCreacion(new \DateTime('now'));
                                $objInfoCriterioAfectado->setUsrCreacion($strUserCreacion);
                                $objInfoCriterioAfectado->setIpCreacion($strIpCreacion);
                                $this->emSoporte->persist($objInfoCriterioAfectado);
                                $this->emSoporte->flush();

                                $arrayPuntos = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                    ->getElementosPuntos(array ('arrayPuntos'       => $arraySintoma["afectados"]["puntoId"],
                                                                'intIdElemento'     => $arrayData["idElemento"],
                                                                'strCriterio'       => "punto",
                                                                'strEstadoServicio' => "Activo",
                                                                'strEstadoElemento' => "Activo"));

                                foreach ($arrayPuntos as $arrayPuntoCliente)
                                {
                                    $arrayPtoCliente = $this->emComercial->getRepository('schemaBundle:InfoPunto')
                                        ->getPuntoParaSession($arrayPuntoCliente["idPunto"]);

                                    $objInfoPersona    = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                        ->find($arrayPtoCliente['id_persona']);

                                    /* Obtenemos la razon social del cliente */
                                    $strRazonSocial = ($objInfoPersona->getRazonSocial() != null ? $objInfoPersona->getRazonSocial() :
                                        $objInfoPersona->getNombres()." ".$objInfoPersona->getApellidos());

                                    $objInfoParteAfectada = new InfoParteAfectada();
                                    $objInfoParteAfectada->setCriterioAfectadoId($objInfoCriterioAfectado->getId());
                                    $objInfoParteAfectada->setDetalleId($objInfoDetalle->getId());
                                    $objInfoParteAfectada->setAfectadoId($arrayPtoCliente['id']);
                                    $objInfoParteAfectada->setTipoAfectado("Cliente");
                                    $objInfoParteAfectada->setAfectadoNombre($arrayPtoCliente['login']);
                                    $objInfoParteAfectada->setAfectadoDescripcion($strRazonSocial);
                                    $objInfoParteAfectada->setFeIniIncidencia($objInfoCaso->getFeApertura());
                                    $objInfoParteAfectada->setFeCreacion(new \DateTime('now'));
                                    $objInfoParteAfectada->setUsrCreacion($strUserCreacion);
                                    $objInfoParteAfectada->setIpCreacion($strIpCreacion);
                                    $objInfoParteAfectada->setAfectadoDescripcionId($arrayPtoCliente['id_persona']);
                                    $this->emSoporte->persist($objInfoParteAfectada);
                                    $this->emSoporte->flush();
                                }
                            }
                        }
                    }
                    else
                    {
                        throw new \Exception("Error : Tipo de elemento incorrecto ".$strTipoElemento);
                    }
                }
                else
                {
                    throw new \Exception("Error : Tipo de caso incorrecto");
                }
            }
            
            $objClaseDocumento = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                ->findOneByNombreClaseDocumento("Notificacion Interna Correo");

            $strAsunto  = "Creacion de Caso " . $objInfoCaso->getNumeroCaso();
            $strMensaje = "Apertura Caso ".$objInfoCaso->getNumeroCaso()." por parte de ".$strUserCreacion;

            if(!empty($intIdDocumento))
            {
                $objInfoDocumento = $this->emComunicacion->getRepository('schemaBundle:InfoDocumento')
                                                         ->findOneById($intIdDocumento);
            }
            else
            {
                $objInfoDocumento = new InfoDocumento();
            }
            $objInfoDocumento->setClaseDocumentoId($objClaseDocumento);
            $objInfoDocumento->setMensaje($strMensaje);
            $objInfoDocumento->setEstado('Activo');
            $objInfoDocumento->setNombreDocumento($strAsunto);
            $objInfoDocumento->setFeCreacion(new \DateTime('now'));
            $objInfoDocumento->setUsrCreacion($strUserCreacion);
            $objInfoDocumento->setIpCreacion($strIpCreacion);
            $objInfoDocumento->setEmpresaCod($objInfoEmpresaGrupo->getId());
            $this->emComunicacion->persist($objInfoDocumento);
            $this->emComunicacion->flush();

            if(!empty($intIdComunicacion))
            {
                $objInfoComunicacion = $this->emComunicacion->getRepository('schemaBundle:InfoComunicacion')
                                                            ->findOneById($intIdComunicacion);
            }
            else
            {
                $objInfoComunicacion = new InfoComunicacion();
            }
            $objInfoComunicacion->setCasoId($objInfoCaso->getId());
            $objInfoComunicacion->setFormaContactoId($objAdmiFormaContacto->getId());
            $objInfoComunicacion->setClaseComunicacion("Enviado");
            $objInfoComunicacion->setFechaComunicacion(new \DateTime('now'));
            $objInfoComunicacion->setFeCreacion(new \DateTime('now'));
            $objInfoComunicacion->setEstado('Activo');
            $objInfoComunicacion->setUsrCreacion($strUserCreacion);
            $objInfoComunicacion->setIpCreacion($strIpCreacion);
            $objInfoComunicacion->setEmpresaCod($objInfoEmpresaGrupo->getId());
            $this->emComunicacion->persist($objInfoComunicacion);
            $this->emComunicacion->flush();

            if(!empty($intIdDocComunicacion))
            {
                $objInfoDocumentoComunicacion = $this->emComunicacion->getRepository('schemaBundle:InfoDocumentoComunicacion')
                                                                     ->findOneById($intIdDocComunicacion);
            }
            else
            {
                $objInfoDocumentoComunicacion = new InfoDocumentoComunicacion();
            }
            $objInfoDocumentoComunicacion->setComunicacionId($objInfoComunicacion);
            $objInfoDocumentoComunicacion->setDocumentoId($objInfoDocumento);
            $objInfoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
            $objInfoDocumentoComunicacion->setEstado('Activo');
            $objInfoDocumentoComunicacion->setUsrCreacion($strUserCreacion);
            $objInfoDocumentoComunicacion->setIpCreacion($strIpCreacion);
            $this->emComunicacion->persist($objInfoDocumentoComunicacion);
            $this->emComunicacion->flush();

            // Ingresamos la hipótesis y asignamos el caso.
            if (!empty($arrayHipotesis) && count($arrayHipotesis) > 0 && $strEmpleadoAsignado)
            {
                // Bandera para la creación de las nuevas hipótesis.
                $booleanExiste = true;

                foreach ($arrayHipotesis as $strHipotesis)
                {
                    // Obtenemos la hipótesis.
                    $objAdmiHipotesis = $this->emSoporte->getRepository('schemaBundle:AdmiHipotesis')
                        ->findOneBy(array ('nombreHipotesis' => $strHipotesis,
                                           'estado'          => "Activo"));

                    if (!is_object($objAdmiHipotesis))
                    {
                        throw new \Exception("Error : La hipótesis ($strHipotesis) no existe");
                    }

                    $arrayInfoDetalleHipotesis = $this->emSoporte->getRepository("schemaBundle:InfoDetalleHipotesis")
                        ->findBy(array ('casoId' => $objInfoCaso));

                    if ($booleanExiste)
                    {
                        foreach($arrayInfoDetalleHipotesis as $objInfoDetalleHipotesis)
                        {
                            // Actualizamos la hipotesis.
                            $objInfoDetalleHipotesis->setEstado("Modificado");
                            $objInfoDetalleHipotesis->setObservacion("Actualización de Hipótesis");
                            $objInfoDetalleHipotesis->setHipotesisId($objAdmiHipotesis);
                            $this->emSoporte->persist($objInfoDetalleHipotesis);
                            $this->emSoporte->flush();

                            $this->setAsignacioCasoDetalle(array ("objInfoDetalleHipotesis" => $objInfoDetalleHipotesis,
                                                                  "strUserCreacion"         => $strUserCreacion,
                                                                  "strIpCreacion"           => $strIpCreacion,
                                                                  "objInfoCaso"             => $objInfoCaso,
                                                                  "objAdmiFormaContacto"    => $objAdmiFormaContacto,
                                                                  "objInfoEmpresaGrupo"     => $objInfoEmpresaGrupo,
                                                                  "strEmpleadoAsignado"     => $strEmpleadoAsignado));
                        }

                        $booleanExiste = false;
                    }
                    else
                    {
                        foreach($arrayInfoDetalleHipotesis as $objInfoDetalleHipotesis)
                        {
                            $objInfoDetalleHipotesis2 = new InfoDetalleHipotesis();
                            $objInfoDetalleHipotesis2->setCasoId($objInfoCaso);
                            $objInfoDetalleHipotesis2->setSintomaId($objInfoDetalleHipotesis->getSintomaId());
                            $objInfoDetalleHipotesis2->setHipotesisId($objAdmiHipotesis);
                            $objInfoDetalleHipotesis2->setEstado("Creado");
                            $objInfoDetalleHipotesis2->setObservacion("Actualización de Hipótesis");
                            $objInfoDetalleHipotesis2->setFeCreacion(new \DateTime('now'));
                            $objInfoDetalleHipotesis2->setUsrCreacion($strUserCreacion);
                            $objInfoDetalleHipotesis2->setIpCreacion($strIpCreacion);
                            $this->emSoporte->persist($objInfoDetalleHipotesis2);
                            $this->emSoporte->flush();

                            $this->setAsignacioCasoDetalle(array ("objInfoDetalleHipotesis" => $objInfoDetalleHipotesis2,
                                                                  "strUserCreacion"         => $strUserCreacion,
                                                                  "strIpCreacion"           => $strIpCreacion,
                                                                  "objInfoCaso"             => $objInfoCaso,
                                                                  "objAdmiFormaContacto"    => $objAdmiFormaContacto,
                                                                  "objInfoEmpresaGrupo"     => $objInfoEmpresaGrupo,
                                                                  "strEmpleadoAsignado"     => $strEmpleadoAsignado));
                        }
                    }
                }
            }

            // Confirmamos la transacción.
            $this->emSoporte->getConnection()->commit();
            $this->emComunicacion->getConnection()->commit();

            // Creación de las tareas
            if (!empty($arrayTareas) && count($arrayTareas) > 0)
            {
                foreach ($arrayTareas as $arrayData)
                {
                    $strNombreProceso    =  $arrayData["nombreProceso"];
                    $strNombreTarea      =  $arrayData["nombreTarea"];
                    $strSintoma          =  $arrayData["sintoma"];
                    $arrayAfectados      =  $arrayData["afectados"];
                    $intEmpleadoTarea    =  $arrayData["empleado"];
                    $intCuadrillaId      =  $arrayData["cuadrilla"];
                    $strTipoAsignacion   =  $arrayData["tipoAsignacion"];
                    $strMotivoTarea      =  $arrayData["motivoTarea"];
                    $strObservacionTarea =  $arrayData["observacion"];
                    $strAsignacionAut    = ($arrayData["asignacionAut"] != null ? strtoupper($arrayData["asignacionAut"]) : null);
                    $intIdDetalleTa            = $arrayData["idDetalle"];
                    $intIdComunicacionTa       = $arrayData["idComunicacion"];
                    $intIdDocumentoTa          = $arrayData['idDocumento'];
                    $intIdDocuComunicaTa       = $arrayData['idDocuComunica'];
                    $intIdDetalleAsigTa        = $arrayData['idDetalleAsig'];
                    $intIdDetalleHistoTa       = $arrayData['idDetalleHisto'];
                    $intIdTareaSeguimientoTa   = $arrayData['idTareaSeguimiento'];
                    $intIdTarea                = $arrayData['idTarea'];
                    $intIdProceso              = $arrayData['idProceso'];

                    if(isset($intIdTarea) && !empty($intIdTarea))
                    {
                        $objAdmiTarea          = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')
                                                            ->findOneById($intIdTarea);
                        if(is_object($objAdmiTarea))
                        {
                            $strNombreTarea    = $objAdmiTarea->getNombreTarea();
                        }
                    }
                    if(isset($intIdProceso) && !empty($intIdProceso))
                    {
                        $objAdmiProceso        = $this->emSoporte->getRepository('schemaBundle:AdmiProceso')
                                                            ->findOneById($intIdProceso);
                        if(is_object($objAdmiProceso))
                        {
                            $strNombreProceso  = $objAdmiProceso->getNombreProceso();
                        }
                    }

                    if ($strNombreTarea && $strSintoma && $strHipotesis && !empty($arrayAfectados)
                        && ($intEmpleadoTarea || $intCuadrillaId || strtoupper($strAsignacionAut) == "SI"))
                    {
                        $arrayDetalleHipotesis = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                            ->getDetalleHipotesisAfectadosCaso(array ('arrayAfectados' => $arrayAfectados,
                                                                      'sintoma'        => $strSintoma,
                                                                      'caso'           => $objInfoCaso->getId()));

                        foreach($arrayDetalleHipotesis as $arrayValue)
                        {
                            $objDetalleHipotesis = $this->emSoporte->getRepository("schemaBundle:InfoDetalleHipotesis")
                                ->find($arrayValue["idDetalleHipotesis"]);

                            if (strtoupper($strAsignacionAut) != "SI")
                            {
                                 $objInfoPersona = $this->emComercial->getRepository("schemaBundle:InfoPersona")
                                     ->findOneBy(array ('login' => $strUserCreacion, 'estado' => 'Activo'));

                                 if (is_object($objInfoPersona))
                                 {
                                     $strUsuarioAsigna  = $objInfoPersona->getNombres()." ".$objInfoPersona->getApellidos();
                                 }
                                 else
                                 {
                                     $strUsuarioAsigna = 'telcos';
                                 }

                                 $boolAsignarTarea = true;
                            }
                            else
                            {
                                $boolAsignarTarea  = false;
                            }

                            // Ingreso de la tarea
                            $arrayRespuestaCrearTarea = $this->crearTareaCasoSoporte(array (
                                           "objInfoCaso"            => $objInfoCaso,
                                           "objDetalleHipotesis"    => $objDetalleHipotesis,
                                           "intIdPersonaEmpresaRol" => $intEmpleadoTarea,
                                           "intIdCuadrilla"         => $intCuadrillaId,
                                           "intIdEmpresa"           => $objInfoEmpresaGrupo->getId(),
                                           "strPrefijoEmpresa"      => $strPrefijoEmpresa,
                                           "strNombreTarea"         => $strNombreTarea,
                                           "strNombreProceso"       => $strNombreProceso,
                                           "strUserCreacion"        => $strUserCreacion,
                                           "strIpCreacion"          => $strIpCreacion,
                                           "intFormaContacto"       => $objAdmiFormaContacto->getId(),
                                           "strMotivoTarea"         => $strMotivoTarea,
                                           "strObservacionTarea"    => $strObservacionTarea,
                                           "strUsuarioAsigna"       => $strUsuarioAsigna,
                                           "strTipoAsignacion"      => $strTipoAsignacion,
                                           "strTipoTarea"           => 'C',
                                           "strTareaRapida"         => 'N',
                                           "boolAsignarTarea"       => $boolAsignarTarea,
                                           "strTipoReprograma"      => $strTipoReprograma,
                                           "strEstadoActual"        => $strEstadoActual,
                                           "intTiempo"              => $intTiempo,
                                           "intIdDetalle"           => $intIdDetalleTa,
                                           "intIdComunicacion"      => $intIdComunicacionTa,
                                           "intIdDocumento"         => $intIdDocumentoTa,
                                           "intIdDocuComunica"      => $intIdDocuComunicaTa,
                                           "intIdDetalleAsig"       => $intIdDetalleAsigTa,
                                           "intIdDetalleHisto"      => $intIdDetalleHistoTa,
                                           "intIdTareaSeguimiento"  => $intIdTareaSeguimientoTa

                                ));
                                              
                            $arrayTareasCreadas[] = array ('strSintoma'       => $strSintoma,
                                                           'arrayAfectados'   => $arrayAfectados,
                                                           'strNombreProceso' => $strNombreProceso,
                                                           'strNombreTarea'   => $strNombreTarea,
                                                           'status'           => $arrayRespuestaCrearTarea['mensaje'],
                                                           'message'          => $arrayRespuestaCrearTarea['descripcion'],
                                                           'numeroTarea'      => $arrayRespuestaCrearTarea["numeroTarea"],
                                                           'numeroDetalle'    => $arrayRespuestaCrearTarea["numeroDetalle"],
                                                           'esReprogramada'   => $arrayRespuestaCrearTarea["esReprogramada"],
                                                           'strAsignacionAut' => $strAsignacionAut,
                                                           'intIdAdmiTarea'   => $arrayRespuestaCrearTarea["intIdAdmiTarea"]);
                        }
                    }
                }
            }

            // Llamada al proceso hal para la asignación de la tareas automáticas.
            if (!empty($arrayTareasCreadas) && count($arrayTareasCreadas) > 0)
            {
                foreach ($arrayTareasCreadas as $arrayValue)
                {
                    if (strtoupper($arrayValue['status']) === 'OK')
                    {
                        if (strtoupper($arrayValue["strAsignacionAut"]) === "SI")
                        {
                            // Se establece la comunicación con hal para la asignación de la tarea creada
                            $arrayRespuestaHal = $this->procesoAutomaticoHalAsigna(array (
                                    'intIdDetalle'      => $arrayValue['numeroDetalle'],
                                    'intIdComunicacion' => $arrayValue['numeroTarea'],
                                    'intIdCaso'         => $objInfoCaso->getId(),
                                    'intIdHipotesis'    => $objAdmiHipotesis->getId(),
                                    'intIdAdmiTarea'    => $arrayValue['intIdAdmiTarea'],
                                    'boolEresHal'       => false,
                                    'strSolicitante'    => 'NA',
                                    'strUrl'            => $this->strUrlMpg
                            ));

                            if (strtoupper($arrayRespuestaHal['mensaje']) != 'OK'
                                || strtoupper($arrayRespuestaHal['result']['respuesta']) != 'OK')
                            {
                                // Eliminar la tarea
                                $objInfoComunicacionHal = $this->emComunicacion->getRepository('schemaBundle:InfoComunicacion')
                                    ->find($arrayValue['numeroTarea']);

                                $objInfoDetalleHal = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                    ->find($arrayValue['numeroDetalle']);

                                $this->emComunicacion->remove($objInfoComunicacionHal);
                                $this->emComunicacion->flush();
                                $this->emSoporte->remove($objInfoDetalleHal);
                                $this->emSoporte->flush();

                                if (strtoupper($arrayRespuestaHal['mensaje']) != 'OK' )
                                {
                                    $strMensaje     = $arrayRespuestaHal['mensaje'];
                                    $strDescripcion = $arrayRespuestaHal['descripcion'];
                                }
                                else
                                {
                                    $strMensaje     = $arrayRespuestaHal['result']['respuesta'];
                                    $strDescripcion = $arrayRespuestaHal['result']['mensaje'];
                                }

                                $arrayTareasCreadas2[] = array ('status'    => $strMensaje,
                                                                'message'   => $strDescripcion,
                                                                'sintoma'   => $arrayValue['strSintoma'],
                                                                'afectados' => $arrayValue['arrayAfectados']);
                            }
                            else
                            {
                                $arrayResult = $arrayRespuestaHal['result'];

                                $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                    ->find($arrayValue['numeroDetalle']);

                                $objInfoComunicacion = $this->emComunicacion->getRepository('schemaBundle:InfoComunicacion')
                                    ->find($arrayValue['numeroTarea']);

                                $strFechaSolicitada     = $arrayResult['fecha'].' '.$arrayResult['horaIni'];
                                $objDateFechaSolicitada = date_create(date('Y-m-d H:i',strtotime($strFechaSolicitada)));

                                if ($objDateFechaSolicitada > new \DateTime('now'))
                                {
                                    $boolReprogramada = true;
                                }
                                else
                                {
                                    $boolReprogramada = false;
                                }

                                $objInfoDetalle->setFeSolicitada($objDateFechaSolicitada);
                                $this->emSoporte->persist($objInfoDetalle);
                                $this->emSoporte->flush();

                                $arrayRespuestaAsignarTarea = $this->setAsginarResponsableTarea(array (
                                        'strTipoAsignacion'       => $arrayResult['tipoAsignado'],
                                        'intIdAsignadoTarea'      => $arrayResult['idAsignado'],
                                        'objInfoDetalle'          => $objInfoDetalle,
                                        'strMotivoTarea'          => 'Asignación Automática Hal',
                                        'strUserCreacion'         => $strUserCreacion,
                                        'strIpCreacion'           => $strIpCreacion,
                                        'intIdEmpresa'            => $objInfoEmpresaGrupo->getId(),
                                        'strNombreProceso'        => $arrayValue['strNombreProceso'],
                                        'strNombreTarea'          => $arrayValue['strNombreTarea'],
                                        'strUsuarioAsigna'        => "Proceso Automático Hal",
                                        'strPrefijoEmpresa'       => $strPrefijoEmpresa,
                                        'objInfoComunicacion'     => $objInfoComunicacion,
                                        'strTareaRapida'          => 'N',
                                        'strTipoTarea'            => 'C',
                                        'objInfoCaso'             => $objInfoCaso,
                                        'intIdDepartamentoOrigen' => null,
                                        'dateFechaSolicitada'     => $objDateFechaSolicitada,
                                        'boolReprogramada'        => $boolReprogramada
                                    ));

                                if (strtoupper($arrayRespuestaAsignarTarea['mensaje']) != 'OK')
                                {
                                    // Eliminar la tarea
                                    $objInfoComunicacionHal = $this->emComunicacion->getRepository('schemaBundle:InfoComunicacion')
                                        ->find($arrayValue['numeroTarea']);

                                    $objInfoDetalleHal = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                        ->find($arrayValue['numeroDetalle']);

                                    $this->emComunicacion->remove($objInfoComunicacionHal);
                                    $this->emComunicacion->flush();
                                    $this->emSoporte->remove($objInfoDetalleHal);
                                    $this->emSoporte->flush();

                                    $arrayTareasCreadas2[] = array ('status'  => $arrayRespuestaAsignarTarea['mensaje'],
                                                                    'message' => $arrayRespuestaAsignarTarea['descripcion']);
                                }
                                else
                                {
                                    $arrayTareasCreadas2[] = array ('status'      => $arrayRespuestaAsignarTarea['mensaje'],
                                                                    'message'     => $arrayRespuestaAsignarTarea['asignacion'],
                                                                    'numeroTarea' => $arrayValue['numeroTarea']);
                                }
                            }
                        }
                        else
                        {
                            $arrayTareasCreadas2[] = array ('status'      => $arrayValue['status'],
                                                            'numeroTarea' => $arrayValue['numeroTarea']);
                        }
                    }
                    else
                    {
                        $arrayTareasCreadas2[] = array ('status'  => $arrayValue['status'],
                                                        'message' => $arrayValue['message']);
                    }
                    //ACTUALIZA TAREA EN INFO_TAREA
                    $arrayParametrosInfoTarea['intDetalleId'] = isset($arrayValue['numeroDetalle']) ? $arrayValue['numeroDetalle'] : null;
                    $arrayParametrosInfoTarea['strUsrUltMod'] = 'telcos';
                    $this->actualizarInfoTarea($arrayParametrosInfoTarea);

                    //REPLICAMOS EL INGRESO DEL CASO EN EL MODULO DE GESTION DE PENDIENTES
                    $objInfoPersonaEmpresaRolAsignado = $this->emComercial->getRepository("schemaBundle:InfoPersonaEmpresaRol")
                                                                          ->find($strEmpleadoAsignado);
                    $intIdOficinaAsignado      = null;
                    $intIdDepartamentoAsignado = null;
                    if (is_object($objInfoPersonaEmpresaRolAsignado))
                    {
                        $objAdmiDepartamentoAsignado = $this->emGeneral->getRepository("schemaBundle:AdmiDepartamento")
                                                                       ->find($objInfoPersonaEmpresaRolAsignado->getDepartamentoId());
                        $intIdDepartamentoAsignado   = $objAdmiDepartamentoAsignado->getId();
                        $intIdOficinaAsignado        = $objInfoPersonaEmpresaRolAsignado->getOficinaId();
                    }
                    $arrayAfectadosCaso = $this->getAfectacionDetalladaPorCaso($objInfoCaso->getId());

                    $arrayParametrosAsig['intDepartamentoId']  = $intIdDepartamentoAsignado;
                    $arrayParametrosAsig['strTipoAtencion']    = 'CASO';
                    $arrayParametrosAsig['strLogin']           = "";
                    $arrayParametrosAsig['strTipoProblema']    = $objInfoCaso->getTipoCasoId()->getNombreTipoCaso();
                    $arrayParametrosAsig['strNombreReporta']   = "";
                    $arrayParametrosAsig['strNombreSitio']     = "";
                    $arrayParametrosAsig['strCriticidad']      = "Alta";
                    $arrayParametrosAsig['strAgente']          = $strEmpleadoAsignado;
                    $arrayParametrosAsig['strDetalle']         = $objInfoCaso->getVersionIni();
                    $arrayParametrosAsig['strNumero']          = $objInfoCaso->getNumeroCaso();
                    $arrayParametrosAsig['idEmpresa']          = $objInfoEmpresaGrupo->getId();
                    $arrayParametrosAsig['strUsrCreacion']     = $strUserCreacion;
                    $arrayParametrosAsig['intOficinaId']       = $intIdOficinaAsignado->getId();
                    $arrayParametrosAsig['strIpCreacion']      = $strIpCreacion;
                    $arrayParametrosAsig['arrayAsigProact']    = "";
                    $arrayParametrosAsig['intTipoCasoId']      = $objInfoCaso->getTipoCasoId()->getId();
                    $arrayParametrosAsig['intFormaContactoId'] = $objInfoCaso->getTipoNotificacionId();
                    $arrayParametrosAsig['intReferenciaId']    = $objInfoCaso->getId();
                    $arrayParametrosAsig['arrayAfectados']     = $arrayAfectadosCaso;
                    $this->replicarTareaAGestionPendientes($arrayParametrosAsig);
                }
            }

            if (!$this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->beginTransaction();
            }

            if (!$this->emComunicacion->getConnection()->isTransactionActive())
            {
                $this->emComunicacion->getConnection()->beginTransaction();
            }

            /* Confirmamos la transaccion */
            $this->emSoporte->getConnection()->commit();
            $this->emComunicacion->getConnection()->commit();

            $arrayRespuesta = array ('status' => 'ok',
                                     'result' => array('numeroCaso' => $objInfoCaso->getNumeroCaso(),
                                                       'tareas'     => empty($arrayTareasCreadas2) ? null : $arrayTareasCreadas2));

            /*****************************************************************************
                     ******************** ENVIO MAILS ********************
             *****************************************************************************/

            $arrayAfectados = $this->getAfectacionDetalladaPorCaso($objInfoCaso->getId());

            $arrayDatos = array('caso'            => $objInfoCaso,
                                'afectadoPadre'   => $arrayAfectados['afectadosPadre'],
                                'afectadoDetalle' => $arrayAfectados['afectadosDetalle'],
                                'tieneDetalle'    => $arrayAfectados['tieneDetalle'],
                                'empleadoLogeado' => null,
                                'empresa'         => $strPrefijoEmpresa
            );

            $objInfoPersonaEmpresaRol = $this->emComercial->getRepository("schemaBundle:InfoPersonaEmpresaRol")
                ->find($strEmpleadoAsignado);

            if (is_object($objInfoPersonaEmpresaRol))
            {
                $objInfoOficinaGrupo = $this->emComercial->getRepository("schemaBundle:InfoOficinaGrupo")
                    ->find($objInfoPersonaEmpresaRol->getOficinaId()->getId());

                $objAdmiDepartamento = $this->emGeneral->getRepository("schemaBundle:AdmiDepartamento")
                    ->find($objInfoPersonaEmpresaRol->getDepartamentoId());

                $objInfoPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                    ->findOneBy(array('personaId'       => $objInfoPersonaEmpresaRol->getPersonaId(),
                                      'formaContactoId' => 5,
                                      'estado'          => "Activo"));

                if(is_object($objInfoPersonaFormaContacto))
                {
                    $arrayTo[] = $objInfoPersonaFormaContacto->getValor();
                }

                $this->envioPlantilla->generarEnvioPlantilla($strAsunto,
                                                             $arrayTo,
                                                             'CASO',
                                                             $arrayDatos,
                                                             $objInfoEmpresaGrupo->getId(),
                                                             $objInfoOficinaGrupo->getCantonId(),
                                                             $objAdmiDepartamento->getId(),
                                                             null,
                                                             false);
            }
            
            if (!empty($arrayTareasCreadas) && count($arrayTareasCreadas) > 0)
            {
                foreach ($arrayTareasCreadas as $arrayValueTarea)
                {
                    $intDetaId = 0;
                    $boolEsHal = false;
                    if (strtoupper($arrayValue['status']) === 'OK')
                    {
                        $intDetaId = $arrayValueTarea['numeroDetalle'];
                        $boolEsHal = $this->emSoporte->getRepository('schemaBundle:InfoDetalleAsignacion')
                                                      ->isAsignadoHal(array( 'intDetalleId' => $intDetaId));
                                                      
                        if ($boolEsHal)
                        {
                            $strIpUsrTracking = !empty($strIpCreacion) ? $strIpCreacion : "127.0.0.1";

                            $strRespuesta= $this->guardarTareaCaracteristica(array (
                                'strDescripcionCaracteristica' => 'CODIGO_TRABAJO',
                                'intComunicacionId'            => $arrayValueTarea['numeroTarea'],
                                'idDetalle'                    => $intDetaId,
                                'strUsrCreacion'               => $strUserCreacion,
                                'strIpCreacion'                => $strIpUsrTracking,
                                'strCodigoTrabajo'             => substr(str_shuffle("123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10)
                                ));
                            
                            $strCommand = 'nohup php /home/telcos/app/console Envia:Tracking ';
                            $strCommand = $strCommand . escapeshellarg($strUserCreacion). ' ';
                            $strCommand = $strCommand . escapeshellarg($strIpUsrTracking). ' ';
                            $strCommand = $strCommand . '"Tarea Asignada" ';
                            $strCommand = $strCommand . escapeshellarg($intDetaId). ' ';
        
                            $strCommand = $strCommand .'>/dev/null 2>/dev/null &';
                            shell_exec($strCommand);
                        }                           
                    }                    
                }
            }
        }
        catch(\Exception $objException)
        {
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->rollback();
                $this->emSoporte->close();
            }

            if ($this->emComunicacion->getConnection()->isTransactionActive())
            {
                $this->emComunicacion->rollback();
                $this->emComunicacion->close();
            }

            $strMessage = 'Error al crear el caso';

            if (strpos($objException->getMessage(),'Error : ') !== false)
            {
                $strMessage = explode('Error : ', $objException->getMessage())[1];
            }

            $arrayRespuesta['status']  = "fail";
            $arrayRespuesta['message'] = $strMessage;

            $strCodigo = (new \DateTime('now'))->format('YmdHis').substr(md5(uniqid(rand())),0,6);

            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->crearCasoSoporte',
                                             $strCodigo.'|'.$objException->getMessage(),
                                             $strUserCreacion ? $strUserCreacion : 'Telcos+',
                                             $strIpCreacion ? $strIpCreacion : '127.0.0.1');

            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->crearCasoSoporte',
                                             $strCodigo.'|'.json_encode($arrayParametros),
                                             $strUserCreacion ? $strUserCreacion : 'Telcos+',
                                             $strIpCreacion ? $strIpCreacion : '127.0.0.1');
        }
        return $arrayRespuesta;
    }

    /**
     * Metodo encargado de la asignacion del caso
     *
     * @param $arrayParametros (objInfoDetalleHipotesis = Objeto de tipo infoDetalleHipotesis
     *                          objInfoCaso             = Objeto de tipo InfoCaso
     *                          objAdmiFormaContacto    = Objeto de tipo AdmiFormaContacto
                                objInfoEmpresaGrupo     = Objeto de tipo InfoEmpresaGrupo
                                strUserCreacion         = Usuario de creacion
                                strIpCreacion           = Ip de creacion
                                strEmpleadoAsignado     = id de la persona empresa rol, encargada del caso)
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 02-03-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 01-10-2018 - Se añade la validación para detectar si el asignado existe.
     */
    public function setAsignacioCasoDetalle($arrayParametros)
    {
        $objInfoDetalleHipotesis = $arrayParametros["objInfoDetalleHipotesis"];
        $strUserCreacion         = $arrayParametros["strUserCreacion"];
        $strIpCreacion           = $arrayParametros["strIpCreacion"];
        $objInfoCaso             = $arrayParametros["objInfoCaso"];
        $objAdmiFormaContacto    = $arrayParametros["objAdmiFormaContacto"];
        $objInfoEmpresaGrupo     = $arrayParametros["objInfoEmpresaGrupo"];
        $strEmpleadoAsignado     = $arrayParametros["strEmpleadoAsignado"];
        $intIdDetalle            = $arrayParametros["intIdDetalle"];
        $objDateFechaAsignacion  = new \DateTime('now');

        /* Se suma un segundo para que no exista concurrencia con la fecha de creacion del caso */
        $objDateFechaAsignacion->modify('+1 second');

        try
        {
            /* Ingresamos un nuevo detalle */
            if(!empty($intIdDetalle))
            {
                $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                    ->findOneById($intIdDetalle);
            }
            else
            {
                $objInfoDetalle = new InfoDetalle();
            }
            $objInfoDetalle->setDetalleHipotesisId($objInfoDetalleHipotesis->getId());
            $objInfoDetalle->setPesoPresupuestado(0);
            $objInfoDetalle->setValorPresupuestado(0);
            $objInfoDetalle->setFeCreacion(new \DateTime('now'));
            $objInfoDetalle->setUsrCreacion($strUserCreacion);
            $objInfoDetalle->setIpCreacion($strIpCreacion);
            $this->emSoporte->persist($objInfoDetalle);
            $this->emSoporte->flush();

            /* Ingresamos un registro nuevo en la infoComunicacion */
            $objInfoComunicacion = new InfoComunicacion();
            $objInfoComunicacion->setCasoId($objInfoCaso->getId());
            $objInfoComunicacion->setDetalleId($objInfoDetalle->getId());
            $objInfoComunicacion->setFormaContactoId($objAdmiFormaContacto->getId());
            $objInfoComunicacion->setClaseComunicacion("Enviado");
            $objInfoComunicacion->setFechaComunicacion(new \DateTime('now'));
            $objInfoComunicacion->setFeCreacion(new \DateTime('now'));
            $objInfoComunicacion->setEstado('Activo');
            $objInfoComunicacion->setUsrCreacion($strUserCreacion);
            $objInfoComunicacion->setIpCreacion($strIpCreacion);
            $objInfoComunicacion->setEmpresaCod($objInfoEmpresaGrupo->getId());
            $this->emComunicacion->persist($objInfoComunicacion);
            $this->emComunicacion->flush();

            /* Ingresamos un nuevo historial del caso */
            $objInfoCasoHistorial = new InfoCasoHistorial();
            $objInfoCasoHistorial->setCasoId($objInfoCaso);
            $objInfoCasoHistorial->setObservacion("Asignacion del caso");
            $objInfoCasoHistorial->setEstado("Asignado");
            $objInfoCasoHistorial->setUsrCreacion($strUserCreacion);
            $objInfoCasoHistorial->setFeCreacion($objDateFechaAsignacion);
            $objInfoCasoHistorial->setIpCreacion($strIpCreacion);
            $this->emSoporte->persist($objInfoCasoHistorial);
            $this->emSoporte->flush();

            /* Obtenemos toda la informacion referencial al empleado que estara asignado al caso */
            $objInfoPersonaEmpresaRol = $this->emComercial->getRepository("schemaBundle:InfoPersonaEmpresaRol")
                ->find($strEmpleadoAsignado);

            if (!is_object($objInfoPersonaEmpresaRol))
            {
                return;
            }

            $objAdmiDepartamento      = $this->emGeneral->getRepository("schemaBundle:AdmiDepartamento")
                ->find($objInfoPersonaEmpresaRol->getDepartamentoId());

            $objInfoPersona           = $this->emComercial->getRepository("schemaBundle:InfoPersona")
                ->find($objInfoPersonaEmpresaRol->getPersonaId()->getId());

            $strNombreEmpleado        = $objInfoPersona->getNombres()." ".$objInfoPersona->getApellidos();

            $objInfoCasoAsignacion = new InfoCasoAsignacion();
            $objInfoCasoAsignacion->setDetalleHipotesisId($objInfoDetalleHipotesis);
            $objInfoCasoAsignacion->setAsignadoId($objAdmiDepartamento->getId());
            $objInfoCasoAsignacion->setAsignadoNombre($objAdmiDepartamento->getNombreDepartamento());
            $objInfoCasoAsignacion->setRefAsignadoId($objInfoPersona->getId());
            $objInfoCasoAsignacion->setRefAsignadoNombre($strNombreEmpleado);
            $objInfoCasoAsignacion->setUsrCreacion($strUserCreacion);
            $objInfoCasoAsignacion->setFeCreacion(new \DateTime('now'));
            $objInfoCasoAsignacion->setIpCreacion($strIpCreacion);
            $objInfoCasoAsignacion->setPersonaEmpresaRolId($objInfoPersonaEmpresaRol->getId());
            $this->emSoporte->persist($objInfoCasoAsignacion);
            $this->emSoporte->flush();

            $objClaseDocumento = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                              ->findOneByNombreClaseDocumento("Notificacion");

            $objInfoDocumento = new InfoDocumento();
            $objInfoDocumento->setClaseDocumentoId($objClaseDocumento);
            $objInfoDocumento->setNombreDocumento("Autoasignacion del Caso");
            $objInfoDocumento->setMensaje("Autoasignacion del Caso");
            $objInfoDocumento->setEstado('Activo');
            $objInfoDocumento->setFeCreacion(new \DateTime('now'));
            $objInfoDocumento->setUsrCreacion($strUserCreacion);
            $objInfoDocumento->setIpCreacion($strIpCreacion);
            $objInfoDocumento->setEmpresaCod($objInfoEmpresaGrupo->getId());
            $this->emComunicacion->persist($objInfoDocumento);
            $this->emComunicacion->flush();

            $objInfoDocumentoComunicacion = new InfoDocumentoComunicacion();
            $objInfoDocumentoComunicacion->setComunicacionId($objInfoComunicacion);
            $objInfoDocumentoComunicacion->setDocumentoId($objInfoDocumento);
            $objInfoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
            $objInfoDocumentoComunicacion->setEstado('Activo');
            $objInfoDocumentoComunicacion->setUsrCreacion($strUserCreacion);
            $objInfoDocumentoComunicacion->setIpCreacion($strIpCreacion);
            $this->emComunicacion->persist($objInfoDocumentoComunicacion);
            $this->emComunicacion->flush();
        }
        catch(\Exception $objException)
        {
            error_log("Error: SoporteService.setAsignacioCasoDetalle -> ".$objException->getMessage());
        }
    }

    /**
     * Función encargada de registrar la tarea.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 02-03-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 30-11-2018 - Se agrega un nuevo parámetro para identificar si la tarea proviene de Sys Cloud-Center.
     *                           Se adiciona un nuevo parámetro para identificar si la tarea debe ser iniciada de forma automática.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 12-02-2019 - Se agrega en el return el parámetro intIdAdmiTarea para el monitoreo MPG.
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.3 24-07-2019 - Se agrega los parámetros 'strEstadoActual','strEcucert'
     *                            '$strTipoReprograma' y 'intTiempo' para identificar
     *                            los casos creados por ECUCERT y ponerlos como tiempo
     *                            del cliente.
     * @since 1.2
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.4 03-02-2020 - Se añade los parámetros intIdDetalle, intIdDocumento, intIdDocuComunica,
     *                           intIdDetalleAsig intIdDetalleHisto,intIdTareaSeguimiento, intIdComunicacion
     *                           para actualizar la tarea de ECUCERT.
     * @since 1.3
     * 
     * @author Edgar Pin Villavicencio <epin@telconet.ec>
     * @version 1.5 04-09-2019 - Se agrega el cierre de tarea automático cuando se envían los siguientes parámetros
     *                           strTareaRapida = 'S' y strTipoTarea = 'T'
     * 
     * Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.6 08-07-2020
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.7 29-12-2020 - Se agrega el llamado al proceso que crea la tarea en el sistema de Sys Cloud-Center.
     * 
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.8 22-02-2021 - Se registra el afectado en la Info_Parte_Afectada.
     * 
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.9 19-02-2020 - Se agrega parámetro de entrada intSolicitudId que hace referencia ala tabla
     *                           InfoDetalleSolicitud
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 2.0 14-05-2021 - Se modifica el proceso, para validar si se debe crear el registro en la info_comunicacion.
     *                         - Se modifica el proceso para crear las características de la tarea.
     *
     * @author José Candelario <jcandelario@telconet.ec>
     * @version 2.1 06-10-2022 - Se agrega log de errores para identificar si el id_punto tuvo problemas con la creación de tarea
     *                           para precancelación y cancelación de servicio MD.
     * 
     * @author José Candelario <jcandelario@telconet.ec>
     * @version 2.2 02-11-2022 - Se cambia el log de error antes del remove para identificar si el id_punto tuvo problemas con la asignación de tarea
     *                           para precancelación y cancelación de servicio MD.
     * 
     * @author Daniel Males <dsmales@telconet.ec>
     * @version 2.3 08-06-2023 - Se agrega parametro strAgregaAsunto como bandera para la tarea Cancelar Contrato
     * 
     * @author Jose Cruz <jfcruzc@telconet.ec>
     * @version 2.3 15/12/2022 - Se incluye un proceso para distinguir el origen de la tarea comparado con casos especificos
     * 
     * @author Jonathan Burgos <jsburgos@telconet.ec>
     * @version 2.4 28/04/2023 - Se incluye lectura de forma de contacto para crear tarea por cambio de plan y autorizacion de descuento.
     * 
     * @param $arrayParametros [
     *                           objInfoCaso              = Objeto de infoCaso,
     *                           objInfoDetalleHipotesis  = Objeto de InfoDetalleHipotesis,
     *                           intIdPersonaEmpresaRol   = Id persona empresa rol de la persona encargada de la tarea,
     *                           intIdCuadrilla           = Id de la cudrilla encarga de la tarea,
     *                           intIdEmpresa             = Id de la empresa,
     *                           strPrefijoEmpresa        = Prefijo de la empresa,
     *                           strNombreTarea           = Nombre de la tarea,
     *                           strNombreProceso         = Nombre del proceso,
     *                           strUserCreacion          = Usuario quien crea la tarea,
     *                           strIpCreacion            = Ip de creacion,
     *                           intFormaContacto         = Forma de contacto,
     *                           strMotivoTarea           = Motivo de la tarea,
     *                           strObservacionTarea      = Observacion de la tarea a crear,
     *                           strUsuarioAsigna         = Nombre de la persona que asigna la tarea,
     *                           strTipoAsignacion        = Tipo de asignacion (empleado, cuadrilla, etc),
     *                           arrayTo                  = array de correo para el envio de notificacion,
     *                           strTipoTarea             = Tipo de tarea - Caso u/o Actividad (C/T),
     *                           strTareaRapida           = Tarea Rapida S/N,
     *                           strFechaHoraSolicitada   = Fecha solicitada para la ejecucion de la tarea - YYYY-MM-DD H:I,
     *                           boolAsignarTarea         = Valor booleano para la asignacion de la tarea,
     *                                                      Nota: Por defecto el valor es true en el codigo,
     *                           intPuntoId               = Id del punto,
     *                           strAplicacion            = Valor para idefentificar si la tarea proviene de Sys Cloud-Center,
     *                           strIniciarTarea          = Valor para inicializar una tarea de forma automática,
     *                           strDescripcionClase      = Valor de la descripcion de la Clase.
     *                           strAgregaAsunto          = Bandera para la tarea Cancelar Contrato
     *                          ]
     *
     * @return Array $arrayRespuesta
     *
     */
    public function crearTareaCasoSoporte($arrayParametros)
    {   
        // Parametros Principales
        $objInfoCaso               = $arrayParametros["objInfoCaso"];
        $objInfoDetalleHipotesis   = $arrayParametros["objDetalleHipotesis"];
        $intAsignarTareaPersona    = $arrayParametros["intIdPersonaEmpresaRol"];
        $intAsignarTareaCuadrilla  = $arrayParametros["intIdCuadrilla"];
        $intIdEmpresa              = $arrayParametros["intIdEmpresa"];
        $strPrefijoEmpresa         = $arrayParametros["strPrefijoEmpresa"];
        $strNombreTarea            = $arrayParametros["strNombreTarea"];
        $strNombreProceso          = $arrayParametros["strNombreProceso"];
        $strUserCreacion           = $arrayParametros["strUserCreacion"];
        $strAplicacion             = $arrayParametros["strAplicacion"];
        $strIpCreacion             = $arrayParametros["strIpCreacion"];
        $intFormaContacto          = $arrayParametros["intFormaContacto"];
        $strMotivoTarea            = $arrayParametros["strMotivoTarea"];
        $strObservacionTarea       = $arrayParametros["strObservacionTarea"];
        $strUsuarioAsigna          = $arrayParametros["strUsuarioAsigna"];
        $strTipoAsignacion         = $arrayParametros["strTipoAsignacion"];
        $arrayTo                   = $arrayParametros["arrayTo"];
        $strTipoTarea              = $arrayParametros["strTipoTarea"];
        $strTareaRapida            = $arrayParametros["strTareaRapida"];
        $strFechaHoraSolicitada    = $arrayParametros["strFechaHoraSolicitada"];
        $intPuntoId                = $arrayParametros["intPuntoId"];
        $strIniciarTarea           = $arrayParametros["strIniciarTarea"];
        $strTipoReprograma         = $arrayParametros["strTipoReprograma"];
        $strEstadoActual           = $arrayParametros["strEstadoActual"];
        $strRegistroInte           = $arrayParametros["strRegistroInte"];
        $intTiempo                 = $arrayParametros["intTiempo"];
        $intIdDetalle              = $arrayParametros["intIdDetalle"];
        $intIdComunicacion         = $arrayParametros["intIdComunicacion"];
        $intIdDocumento            = $arrayParametros['intIdDocumento'];
        $intIdDocuComunica         = $arrayParametros['intIdDocuComunica'];
        $intIdDetalleAsig          = $arrayParametros['intIdDetalleAsig'];
        $intIdDetalleHisto         = $arrayParametros['intIdDetalleHisto'];
        $intIdTareaSeguimiento     = $arrayParametros['intIdTareaSeguimiento'];
        $intIdDetalleSolicitud     = $arrayParametros['intSolicitudId'];
        $intIdDepartamentoOrigen   = $arrayParametros['intIdDepartamentoOrigen'];
        $arrayDatosCaracteriticas  = $arrayParametros['arrayDatosCaracteriticas'];
        $arrayElementosAfectados   = $arrayParametros['arrayElementosAfectados'];
        $strNombreClaseDocParam    = ( isset($arrayParametros['strNombreClaseDocParam']) 
                                       && !empty($arrayParametros['strNombreClaseDocParam']) ) 
                                       ? $arrayParametros['strNombreClaseDocParam'] : '';
        $strConfirmarCommit        = ( isset($arrayParametros['strConfirmarCommit']) 
                                        && !empty($arrayParametros['strConfirmarCommit']) ) 
                                        ? $arrayParametros['strConfirmarCommit'] : '';
        $boolCrearComunicacion     = true;
        $boolAsignarTarea          = true;
        $strDescripcionClase       = $arrayParametros['strDescripcionClase'];
        $strAgregaAsunto           = ( isset($arrayParametros['strAgregaAsunto']) 
                                        && !empty($arrayParametros['strAgregaAsunto']) ) 
                                        ? $arrayParametros['strAgregaAsunto'] : 'N';

        //obtener parametros empresa para regularizacion cambio de plan.
        $boolRegCambioPlan = false;
        $objParametroCambioPlanCab   = $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')->findOneBy(
            array('nombreParametro' => 'REGULARIZACION_CAMBIO_DE_PLAN',
                'estado'          => 'Activo'));
        if(is_object($objParametroCambioPlanCab))
        {
            $objEjecutaCambioDePlanDet     = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->findOneBy(
                array("parametroId" => $objParametroCambioPlanCab->getId(),
                    "valor1"      => "EMPRESA_CAMBIO_PLAN",
                    "valor2"      => $strPrefijoEmpresa,
                    "estado"      => "Activo"));
            if(is_object($objEjecutaCambioDePlanDet) && $objEjecutaCambioDePlanDet->getValor3() == "SI" )
            {
                $boolRegCambioPlan = true;
            }
        }

        if ($boolRegCambioPlan)
        {
            error_log("Ejecutando tarea por regularizacion cambio de plan y aut descuento");
            $arrayUsuarioCreacion = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne(
                                                                "USR_CAMBIO_PLAN_TAREA_AUTO",
                                                                "",
                                                                '',
                                                                'USR_CAMBIO_PLAN_TAREA_AUTO',
                                                                $strUserCreacion ,
                                                                '',
                                                                '',
                                                                ''
                                                            );
            $strOrigen = '';
            if (isset($arrayUsuarioCreacion) && !empty($arrayUsuarioCreacion)) 
            {
                $strOrigen = $arrayUsuarioCreacion['valor2'];
            }
            else
            {
                $arrayOrigenDefault = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne(
                                                                    "USR_CAMBIO_PLAN_TAREA_AUTO",
                                                                    "",
                                                                    '',
                                                                    'ORIGEN_DEFAULT_CAMBIO_PLAN',
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    ''
                                                                );
                                                                
                if (isset($arrayOrigenDefault) && !empty($arrayOrigenDefault))
                {
                    $strOrigen = $arrayOrigenDefault['valor1'];
                }
            }
            if ($strOrigen && $strOrigen != '') 
            {
                $arrayOrigenOrigen = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->findPorDescripcionFormaContacto($strOrigen);
                if (isset($arrayOrigenOrigen) && !empty($arrayOrigenOrigen))
                {
                    $intFormaContacto = $arrayOrigenOrigen['id_forma_contacto'];
                }
                else
                {
                    $intFormaContacto = $arrayParametros['intFormaContacto'];
                }                             
            }
        }

        if (isset($arrayParametros['boolCrearComunicacion']) && is_bool($arrayParametros['boolCrearComunicacion']))
        {
            $boolCrearComunicacion = $arrayParametros['boolCrearComunicacion'];
        }

        if (isset($arrayParametros['boolAsignarTarea']) && is_bool($arrayParametros['boolAsignarTarea']))
        {
            $boolAsignarTarea = $arrayParametros['boolAsignarTarea'];
        }

        //Variables de ayuda
        $intIdInfoDetalleHipotesis = (is_object($objInfoDetalleHipotesis) ? $objInfoDetalleHipotesis->getId() : null);
        $intIdCaso                 = (is_object($objInfoCaso) ? $objInfoCaso->getId() : null);

        $this->emSoporte->getConnection()->beginTransaction();
        $this->emComunicacion->getConnection()->beginTransaction();

        try
        {
            $arrayAdmiProceso = $this->emSoporte->getRepository("schemaBundle:AdmiProceso")
                    ->findBy(array('nombreProceso' => $strNombreProceso,'estado' => 'Activo'));

            if (empty($arrayAdmiProceso) || count($arrayAdmiProceso) < 1)
            {
                $arrayRespuesta["mensaje"]     = "fail";
                $arrayRespuesta["descripcion"] = "Error - El nombre del proceso $strNombreProceso no existe";
                return $arrayRespuesta;
            }

            foreach ($arrayAdmiProceso as $objAdmiProceso)
            {
                $objAdmiTarea = $this->emSoporte->getRepository("schemaBundle:AdmiTarea")
                        ->findOneBy(array('procesoId'   =>  $objAdmiProceso->getId(),
                                          'nombreTarea' =>  $strNombreTarea,
                                          'estado'      => 'Activo'));

                if (is_object($objAdmiTarea))
                {
                    break;
                }
            }

            if (!is_object($objAdmiTarea))
            {
                $arrayRespuesta["mensaje"]     = "fail";
                $arrayRespuesta["descripcion"] = "Error - El nombre de la tarea $strNombreTarea no existe";
                return $arrayRespuesta;
            }

            if (is_null($strFechaHoraSolicitada))
            {
                $objDateFechaSolicitada = new \DateTime('now');
                $boolReprogramada       = false;
            }
            else
            {
                $objDateFechaSolicitada = date_create(date('Y-m-d H:i', strtotime($strFechaHoraSolicitada)));

                if ($objDateFechaSolicitada > new \DateTime('now'))
                {
                    $boolReprogramada = true;
                }
                else
                {
                    $boolReprogramada = false;
                }
            }

            //Ingresamos un registro nuevo en la InfoDetalle.
            if (!empty($intIdDetalle))
            {
                $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                        ->findOneById($intIdDetalle);
            }
            else
            {
                $objInfoDetalle = new InfoDetalle();
            }

            $objInfoDetalle->setDetalleHipotesisId($intIdInfoDetalleHipotesis);
            $objInfoDetalle->setPesoPresupuestado(0);
            $objInfoDetalle->setValorPresupuestado(0);
            $objInfoDetalle->setFeSolicitada($objDateFechaSolicitada);
            $objInfoDetalle->setTareaId($objAdmiTarea);
            $objInfoDetalle->setFeCreacion(new \DateTime('now'));
            $objInfoDetalle->setUsrCreacion($strAplicacion ? $strAplicacion : $strUserCreacion);
            $objInfoDetalle->setIpCreacion($strIpCreacion);
            $objInfoDetalle->setObservacion($strObservacionTarea);
            $objInfoDetalle->setDetalleSolicitudId($intIdDetalleSolicitud);
            $this->emSoporte->persist($objInfoDetalle);
            $this->emSoporte->flush();

            if ($boolCrearComunicacion)
            {
                //Ingresamos un registro nuevo en la infoComunicacion
                if (!empty($intIdComunicacion))
                {
                    $objInfoComunicacion = $this->emComunicacion->getRepository('schemaBundle:InfoComunicacion')
                            ->findOneById($intIdComunicacion);
                }
                else
                {
                    $objInfoComunicacion = new InfoComunicacion();
                }

                $objInfoComunicacion->setFormaContactoId($intFormaContacto);
                $objInfoComunicacion->setCasoId($intIdCaso);
                $objInfoComunicacion->setDetalleId($objInfoDetalle->getId());
                $objInfoComunicacion->setClaseComunicacion("Enviado");
                $objInfoComunicacion->setFechaComunicacion(new \DateTime('now'));
                $objInfoComunicacion->setEstado('Activo');
                $objInfoComunicacion->setUsrCreacion($strUserCreacion);
                $objInfoComunicacion->setFeCreacion(new \DateTime('now'));
                $objInfoComunicacion->setIpCreacion($strIpCreacion);
                $objInfoComunicacion->setEmpresaCod($intIdEmpresa);

                if (!empty($intPuntoId))
                {
                    $objInfoPunto = $this->emComercial->getRepository("schemaBundle:InfoPunto")->find($intPuntoId);
                    if (is_object($objInfoPunto))
                    {
                        $objInfoComunicacion->setPuntoId($objInfoPunto->getId());
                        $objInfoComunicacion->setRemitenteId($objInfoPunto->getId());
                        $objInfoComunicacion->setRemitenteNombre($objInfoPunto->getLogin());

                        $strOpcion = 'Cliente: ' . $objInfoPunto->getNombrePunto() . ' | OPCION: Punto Cliente';
                        $objInfoCriterioAfectado = new InfoCriterioAfectado();
                        $objInfoCriterioAfectado->setId(1);
                        $objInfoCriterioAfectado->setDetalleId($objInfoDetalle);
                        $objInfoCriterioAfectado->setCriterio("Clientes");
                        $objInfoCriterioAfectado->setOpcion($strOpcion);
                        $objInfoCriterioAfectado->setFeCreacion(new \DateTime('now'));
                        $objInfoCriterioAfectado->setUsrCreacion($strUserCreacion);
                        $objInfoCriterioAfectado->setIpCreacion($strIpCreacion);
                        $this->emSoporte->persist($objInfoCriterioAfectado);
                        $this->emSoporte->flush();

                        $objInfoParteAfectada = new InfoParteAfectada();
                        $objInfoParteAfectada->setCriterioAfectadoId($objInfoCriterioAfectado->getId());
                        $objInfoParteAfectada->setDetalleId($objInfoDetalle->getId());
                        $objInfoParteAfectada->setFeIniIncidencia($objInfoDetalle->getFeCreacion());
                        $objInfoParteAfectada->setTipoAfectado("Cliente");
                        $objInfoParteAfectada->setAfectadoId($objInfoPunto->getId());
                        $objInfoParteAfectada->setAfectadoNombre($objInfoPunto->getLogin());
                        $objInfoParteAfectada->setAfectadoDescripcion($objInfoPunto->getNombrePunto());
                        $objInfoParteAfectada->setFeCreacion(new \DateTime('now'));
                        $objInfoParteAfectada->setUsrCreacion($strUserCreacion);
                        $objInfoParteAfectada->setIpCreacion($strIpCreacion);
                        $this->emSoporte->persist($objInfoParteAfectada);
                        $this->emSoporte->flush();
                    }
                }

                $this->emComunicacion->persist($objInfoComunicacion);
                $this->emComunicacion->flush();

                //Creamos las características de la tarea.
                if (!empty($arrayDatosCaracteriticas) && count($arrayDatosCaracteriticas) > 0)
                {
                    foreach ($arrayDatosCaracteriticas as $arrayDatos)
                    {
                        $objInfoTareaCaracteristica = new InfoTareaCaracteristica();
                        $objInfoTareaCaracteristica->setTareaId($objInfoComunicacion->getId());
                        $objInfoTareaCaracteristica->setDetalleId($objInfoDetalle->getId());
                        $objInfoTareaCaracteristica->setCaracteristicaId($arrayDatos['intCaracteristicaId']);
                        $objInfoTareaCaracteristica->setValor($arrayDatos['strValor']);
                        $objInfoTareaCaracteristica->setEstado('Activo');
                        $objInfoTareaCaracteristica->setFeCreacion(new \DateTime('now'));
                        $objInfoTareaCaracteristica->setUsrCreacion($strUserCreacion);
                        $objInfoTareaCaracteristica->setIpCreacion($strIpCreacion);
                        $this->emSoporte->persist($objInfoTareaCaracteristica);
                        $this->emSoporte->flush();
                    }
                }
            }
            
            //Creamos los elementos afectados.
            if (!empty($arrayElementosAfectados) && count($arrayElementosAfectados) > 0)
            {
                foreach ($arrayElementosAfectados as $intIdx => $intIdElemento)
                {
                    $objInfoElemento = $this->emInfraestructura->getRepository("schemaBundle:InfoElemento")
                            ->find($intIdElemento);

                    if (!is_object($objInfoElemento))
                    {
                        continue;
                    }

                    $intIdx ++;
                    $strOpcion = 'Elemento: '.$objInfoElemento->getNombreElemento();
                    $objInfoCriterioAfectado = new InfoCriterioAfectado();
                    $objInfoCriterioAfectado->setId($intIdx);
                    $objInfoCriterioAfectado->setDetalleId($objInfoDetalle);
                    $objInfoCriterioAfectado->setCriterio("Elementos");
                    $objInfoCriterioAfectado->setOpcion($strOpcion);
                    $objInfoCriterioAfectado->setFeCreacion(new \DateTime('now'));
                    $objInfoCriterioAfectado->setUsrCreacion($strUserCreacion);
                    $objInfoCriterioAfectado->setIpCreacion($strIpCreacion);
                    $this->emSoporte->persist($objInfoCriterioAfectado);
                    $this->emSoporte->flush();

                    // Si descripcion de elemento tiene mas de 200 caracteres se guarda log
                    if(strlen($objInfoElemento->getDescripcionElemento()) > 200)
                    {

                        $this->serviceUtil->insertLog(array(
                            'enterpriseCode'   => $intIdEmpresa,
                            'logType'          => 1,
                            'logOrigin'        => 'TELCOS',
                            'application'      => 'TELCOS',
                            'appClass'         => 'SoporteService',
                            'appMethod'        => 'crearTareaCasoSoporte',
                            'descriptionError' => 'Descripcion de elemento mayor a 200 caracteres, ' . 
                                                  'se trunca para que permita registro en INFO_PARTE_AFECTADA',
                            'status'           => 'Exitoso',
                            'inParameters'     => 'Elemento: ' . $intIdElemento . 
                                                  ' - Longuitud: ' . strlen($objInfoElemento->getDescripcionElemento()) . 
                                                  ' - String: ' . $objInfoElemento->getDescripcionElemento(),
                            'creationUser'     => $strUserCreacion));

                    }

                    $objInfoParteAfectada = new InfoParteAfectada();
                    $objInfoParteAfectada->setCriterioAfectadoId($objInfoCriterioAfectado->getId());
                    $objInfoParteAfectada->setDetalleId($objInfoDetalle->getId());
                    $objInfoParteAfectada->setFeIniIncidencia($objInfoDetalle->getFeCreacion());
                    $objInfoParteAfectada->setTipoAfectado("Elemento");
                    $objInfoParteAfectada->setAfectadoId($objInfoElemento->getId());
                    $objInfoParteAfectada->setAfectadoNombre($objInfoElemento->getNombreElemento());
                    $objInfoParteAfectada->setAfectadoDescripcion(mb_substr($objInfoElemento->getDescripcionElemento(),0,200));
                    $objInfoParteAfectada->setFeCreacion(new \DateTime('now'));
                    $objInfoParteAfectada->setUsrCreacion($strUserCreacion);
                    $objInfoParteAfectada->setIpCreacion($strIpCreacion);
                    $this->emSoporte->persist($objInfoParteAfectada);
                    $this->emSoporte->flush();
                }
            }

            if(empty($strConfirmarCommit))
            {
                $this->emComunicacion->getConnection()->commit();
                $this->emSoporte->getConnection()->commit();
            }
            

            if ($boolAsignarTarea)
            {
                if ($intAsignarTareaPersona != null && $strTipoAsignacion === "empleado")
                {
                    $intIdAsignadoTarea = $intAsignarTareaPersona;
                }
                elseif ($intAsignarTareaCuadrilla != null && $strTipoAsignacion === "cuadrilla")
                {
                    $intIdAsignadoTarea = $intAsignarTareaCuadrilla;
                }
                else
                {
                    $arrayRespuesta["mensaje"]     = "fail";
                    $arrayRespuesta["descripcion"] = "Error - No se tiene informacion de asignacion de tarea";

                    return $arrayRespuesta;
                }
                
                if ($strTareaRapida === 'S')
                {   
                    $arrayRespuestaAsignarTarea = $this->setAsginarResponsableTarea(array (
                        'strTipoAsignacion'       => $strTipoAsignacion,
                        'intIdAsignadoTarea'      => $intIdAsignadoTarea,
                        'objInfoDetalle'          => $objInfoDetalle,
                        'strMotivoTarea'          => $strMotivoTarea,
                        'strUserCreacion'         => $strUserCreacion,
                        'strIpCreacion'           => $strIpCreacion,
                        'intIdEmpresa'            => $intIdEmpresa,
                        'intIdDepartamentoOrigen' => $intIdDepartamentoOrigen,
                        'strNombreProceso'        => $strNombreProceso,
                        'strNombreTarea'          => $strNombreTarea,
                        'strUsuarioAsigna'        => $strUsuarioAsigna,
                        'strPrefijoEmpresa'       => $strPrefijoEmpresa,
                        'objInfoComunicacion'     => $objInfoComunicacion,
                        'strTareaRapida'          => $strTareaRapida,
                        'strTipoTarea'            => $strTipoTarea,
                        'strRegistroInte'         => $strRegistroInte,
                        'objInfoCaso'             => $objInfoCaso,
                        'arrayTo'                 => $arrayTo,
                        'dateFechaSolicitada'     => $objDateFechaSolicitada,
                        'boolReprogramada'        => $boolReprogramada,
                        'strIniciarTarea'         => $strIniciarTarea,
                        'intIdDocumento'          => $intIdDocumento,
                        'intIdDocuComunica'       => $intIdDocuComunica,
                        'intIdDetalleAsig'        => $intIdDetalleAsig,
                        'intIdDetalleHisto'       => $intIdDetalleHisto,
                        'intIdTareaSeguimiento'   => $intIdTareaSeguimiento,
                        'strObsAsignaTarea'       => $arrayParametros['strObsAsignaTarea'],
                        'strObsHistorial'         => $arrayParametros['strObsHistorial'],
                        'strObsSeguimiento'       => $arrayParametros['strObsSeguimiento'],
                        'strObservacionTarea'     => $arrayParametros['strObservacionTarea'],
                        'strNombreClaseDocParam'  => $strNombreClaseDocParam,
                        'strConfirmarCommit'      => $strConfirmarCommit,
                        'strAgregaAsunto'         => $strAgregaAsunto 
                    ));

                }
                else
                {
                    $arrayRespuestaAsignarTarea = $this->setAsginarResponsableTarea(array (
                        'strTipoAsignacion'       => $strTipoAsignacion,
                        'intIdAsignadoTarea'      => $intIdAsignadoTarea,
                        'objInfoDetalle'          => $objInfoDetalle,
                        'strMotivoTarea'          => $strMotivoTarea,
                        'strUserCreacion'         => $strUserCreacion,
                        'strIpCreacion'           => $strIpCreacion,
                        'intIdEmpresa'            => $intIdEmpresa,
                        'intIdDepartamentoOrigen' => $intIdDepartamentoOrigen,
                        'strNombreProceso'        => $strNombreProceso,
                        'strNombreTarea'          => $strNombreTarea,
                        'strUsuarioAsigna'        => $strUsuarioAsigna,
                        'strPrefijoEmpresa'       => $strPrefijoEmpresa,
                        'objInfoComunicacion'     => $objInfoComunicacion,
                        'strTareaRapida'          => $strTareaRapida,
                        'strTipoTarea'            => $strTipoTarea,
                        'objInfoCaso'             => $objInfoCaso,
                        'arrayTo'                 => $arrayTo,
                        'dateFechaSolicitada'     => $objDateFechaSolicitada,
                        'boolReprogramada'        => $boolReprogramada,
                        'strIniciarTarea'         => $strIniciarTarea,
                        'intIdDocumento'          => $intIdDocumento,
                        'intIdDocuComunica'       => $intIdDocuComunica,
                        'intIdDetalleAsig'        => $intIdDetalleAsig,
                        'intIdDetalleHisto'       => $intIdDetalleHisto,
                        'intIdTareaSeguimiento'   => $intIdTareaSeguimiento,
                        'strDescripcionClase'     => $strDescripcionClase,
                        'strAgregaAsunto'         => $strAgregaAsunto 
                    ));
                }
            
                if (strtoupper($arrayRespuestaAsignarTarea['mensaje']) != 'OK')
                {
                    if (!empty($intPuntoId))
                    {
                        $this->serviceUtil->insertError('Telcos+',
                                                        'SoporteService.crearTareaCasoSoporte',
                                                        'ERROR en asignación para el punto: '.$intPuntoId.
                                                        ' - '.$arrayRespuestaAsignarTarea['descripcion'],
                                                        'crearTareaCasoSoporte',
                                                        $strIpCreacion);
                    }
                    //Eliminamos la tarea creada por motivos que fallo la asignación
                    if ($boolCrearComunicacion)
                    {
                        $this->emComunicacion->remove($objInfoComunicacion);
                        $this->emComunicacion->flush();
                    }

                    $this->emSoporte->remove($objInfoDetalle);
                    $this->emSoporte->flush();
                    if(empty($strConfirmarCommit))
                    {       
                        $this->emComunicacion->getConnection()->commit();
                        $this->emSoporte->getConnection()->commit();
                    }
                    return $arrayRespuestaAsignarTarea;
                }

                $arrayRespuesta["asignacion"] = $arrayRespuestaAsignarTarea['asignacion'];

                //Validamos si existe la informacion adicional.
                if (!empty($arrayRespuestaAsignarTarea['infomacionAdicional']))
                {
                    $arrayRespuesta["infomacionAdicional"] = $arrayRespuestaAsignarTarea['infomacionAdicional'];
                }
            }

            //A este punto el proceso fue un exito.
            $arrayRespuesta["mensaje"]        = "ok";
            $arrayRespuesta["numeroTarea"]    = $objInfoComunicacion->getId();
            $arrayRespuesta["numeroDetalle"]  = $objInfoDetalle->getId();
            $arrayRespuesta["esReprogramada"] = $boolReprogramada;
            $arrayRespuesta["intIdAdmiTarea"] = $objAdmiTarea->getId();
            if(isset($strConfirmarCommit) && !empty($strConfirmarCommit))
            {       
                $arrayRespuesta["objConexionSoporte"]      = $this->emSoporte->getConnection();
                $arrayRespuesta["objConexionComuni"]       = $this->emComunicacion->getConnection();
                $arrayRespuesta["objConSoporteAsigna"]     =  $arrayRespuestaAsignarTarea['objConSoporteAsigna'];
                $arrayRespuesta["objConComunicaAsigna"]    =  $arrayRespuestaAsignarTarea['objConComunicaAsigna'];
            }
            
          


            if (isset($strTipoReprograma) && !empty($strTipoReprograma) &&
                isset($arrayRespuesta["numeroDetalle"]) && !empty($arrayRespuesta["numeroDetalle"]) &&
                isset($strEstadoActual) && !empty($strEstadoActual))
            {
                //Calcular el tiempo del SLA del lado del cliente
                $this->calcularTiempoEstado(array('strEstadoActual'   => $strEstadoActual,
                                                  'intIdDetalle'      => $arrayRespuesta["numeroDetalle"],
                                                  'strTipoReprograma' => $strTipoReprograma,
                                                  'intTiempo'         => $intTiempo,
                                                  'strUser'           => $strUserCreacion,
                                                  'strIp'             => $strIpCreacion));
            }

            //Proceso que graba tarea en INFO_TAREA
            if(empty($strConfirmarCommit))
            {
                $arrayParametrosInfoTarea['intDetalleId']   = is_object($objInfoDetalle)? $objInfoDetalle->getId():null;
                $arrayParametrosInfoTarea['strUsrCreacion'] = isset($strUserCreacion)? $strUserCreacion:null;
                $this->crearInfoTarea($arrayParametrosInfoTarea);
            }
            //Proceso para crear la tarea en el sistema de DC - Sys Cloud Center.
            if ($strTipoAsignacion === "empleado" && $boolAsignarTarea)
            {
                $strFechaSolicitada = date_format($objInfoDetalle->getFeSolicitada(), 'Y-m-d');
                $strHoraSolicitada  = date_format($objInfoDetalle->getFeSolicitada(), 'H:i:s');

                //Datos persona asigna.
                $arrayEstadoPersona = $strUserCreacion == 'telcos' ? array('Activo','Modificado','Cancelado') : array('Activo','Modificado');
                $arrayDatosAsigna   = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                        ->getInfoDatosPersona(array('strRol'                     => 'Empleado',
                                                    'strCodEmpresa'              =>  $intIdEmpresa,
                                                    'strLogin'                   =>  $strUserCreacion,
                                                    'strEstadoPersona'           =>  $arrayEstadoPersona,
                                                    'strEstadoPersonaEmpresaRol' => 'Activo'));

                $strUserAsigna  = $arrayDatosAsigna['result'][0]['nombres'].' '.$arrayDatosAsigna['result'][0]['apellidos'];
                $strDeparAsigna = $arrayDatosAsigna['result'][0]['nombreDepartamento'];

                //Datos persona asignado.
                $arrayDatosAsignado = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                        ->getInfoDatosPersona(array('intIdPersonaEmpresaRol' => $intIdAsignadoTarea));

                $strUserAsignado  = $arrayDatosAsignado['result'][0]['nombres'].' '.$arrayDatosAsignado['result'][0]['apellidos'];
                $strDeparAsignado = $arrayDatosAsignado['result'][0]['nombreDepartamento'];

                $this->objProcesoService->putTareasSysCluod(array('strNombreTarea'      => $strNombreTarea,
                                                                  'strNombreProceso'    => $strNombreProceso,
                                                                  'strObservacion'      => $strObservacionTarea,
                                                                  'strFechaApertura'    => $strFechaSolicitada,
                                                                  'strHoraApertura'     => $strHoraSolicitada,
                                                                  'strUser'             => $strUserCreacion,
                                                                  'strIpAsigna'         => $strIpCreacion,
                                                                  'strUserAsigna'       => $strUserAsigna,
                                                                  'strDeparAsigna'      => $strDeparAsigna,
                                                                  'strUserAsignado'     => $strUserAsignado,
                                                                  'strDeparAsignado'    => $strDeparAsignado,
                                                                  'objInfoComunicacion' => $objInfoComunicacion));

            }
        }
        catch(\Exception $objException)
        {
            error_log("Error: SoporteService.crearTareaCasoSoporte -> ".$objException->getMessage());

            $arrayRespuesta["mensaje"]     = "fail";
            $arrayRespuesta["descripcion"] = $objException->getMessage();

            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }

            if ($this->emComunicacion->getConnection()->isTransactionActive())
            {
                $this->emComunicacion->rollback();
            }
            if (!empty($intPuntoId))
            {
                $this->serviceUtil->insertError('Telcos+',
                                                'SoporteService.crearTareaCasoSoporte',
                                                'ERROR en el punto: '.$intPuntoId.' - '.$objException->getMessage(),
                                                'crearTareaCasoSoporte',
                                                $strIpCreacion);
            }
        }
        return $arrayRespuesta;
    }

    /**
     * Función encarga de la asignacion del responsable a una tarea creada
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 01-04-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 24-01-2019 - Se adiciona un nuevo parámetro para identificar si la tarea debe ser iniciada de forma automática.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 01-10-2018 - Se añade la validación para detectar si el asignado existe.
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.3 03-02-2020 - Se añade los parámetros intIdDocumento, intIdDocuComunica, intIdDetalleAsig
     *                           intIdDetalleHisto,intIdTareaSeguimiento para actualizar la tarea de asignación
     *                           de ECUCERT.
     * 
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.4 25-10-2019 - Se agrega funcionalidad para cierre de tarea automática cuando es por proceso de cambio de forma de pago.
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.4 19-09-2021 - Se agrega parametro al array de respeusta para devolver el id departamento.
     *
     * @author José Candelario <jcandelario@telconet.ec>
     * @version 1.5 02-11-2022 - Se agrega insert a la estructura info_error por exception.
     * 
     * @param  $arrayParametros [
     *                              strTipoAsignacion       = Tipo de asignacion (empleado u/o cuadrilla),
     *                              intIdAsignadoTarea      = Id de la persona empresa rol encargada de la tarea o id de la cuadrilla,
     *                              objInfoDetalle          = Objeto de la info detalle,
     *                              strMotivoTarea          = Motivo de la tarea,
     *                              strUserCreacion         = Usuario de creacion,
     *                              strIpCreacion           = Ip de creacion,
     *                              intIdEmpresa            = Id de la empresa,
     *                              strNombreProceso        = Nombre del proceso,
     *                              strNombreTarea          = Nombre de la tarea,
     *                              strUsuarioAsigna        = Nombre compleado del usuario quien asigna la tarea,
     *                              strPrefijoEmpresa       = Prefijo de la empresa MD,TN,Etc,
     *                              objInfoComunicacion     = Objeto de la info comunicacion,
     *                              strTareaRapida          = Tarea Rapida (S = SI , N = NO)
     *                              strTipoTarea            = Tipo de tarea (C = CASO , T = TAREA)
     *                              objInfoCaso             = Objeto de la info caso.
     *                                                        Nota: Es opcional en caso de que la tarea no provenga de un caso,
     *                              intIdDepartamentoOrigen = Id del departamento quien crea la tarea,
     *                              arrayTo                 = Array que contiene los correos del destinatario,
     *                              dateFechaSolicitada     = Fecha Solicitada u/o Fecha de ejecucion de la tarea,
     *                              boolReprogramada        = Valor booleano en caso de que la tarea sea reprogramada,
     *                              strIniciarTarea         = Valor para inicializar una tarea de forma automática,
     *                              strDescripcionClase     = Valor de la descripcion de la clase
     *                          ]
     *
     * @return $arrayRespuesta
     */
    public function setAsginarResponsableTarea($arrayParametros)
    {   
        $strTipoAsignacion      = $arrayParametros['strTipoAsignacion'];
        $intIdAsignadoTarea     = $arrayParametros['intIdAsignadoTarea'];
        $objInfoDetalle         = $arrayParametros['objInfoDetalle'];
        $strMotivoTarea         = $arrayParametros['strMotivoTarea'];
        $strUserCreacion        = $arrayParametros['strUserCreacion'];
        $strIpCreacion          = $arrayParametros['strIpCreacion'];
        $intIdEmpresa           = $arrayParametros['intIdEmpresa'];
        $strNombreProceso       = $arrayParametros['strNombreProceso'];
        $strNombreTarea         = $arrayParametros['strNombreTarea'];
        $strUsuarioAsigna       = $arrayParametros['strUsuarioAsigna'];
        $strPrefijoEmpresa      = $arrayParametros['strPrefijoEmpresa'];
        $objInfoComunicacion    = $arrayParametros['objInfoComunicacion'];
        $strTareaRapida         = $arrayParametros['strTareaRapida'];
        $strTipoTarea           = $arrayParametros['strTipoTarea'];
        $strRegistroInte        = $arrayParametros["strRegistroInte"];
        $objInfoCaso            = $arrayParametros['objInfoCaso'];
        $intIdDepartOrigen      = $arrayParametros['intIdDepartamentoOrigen'];
        $arrayTo                = $arrayParametros['arrayTo'];
        $objDateFechaSolicitada = $arrayParametros['dateFechaSolicitada'];
        $boolReprogramada       = $arrayParametros['boolReprogramada'];
        $boolCuadrilla          = false;
        $strAsunto              = "Asignacion de Tarea | PROCESO: ".$strNombreProceso;
        $strIniciarTarea        = $arrayParametros['strIniciarTarea'];
        $intIdDocumento         = $arrayParametros['intIdDocumento'];
        $intIdDocuComunica      = $arrayParametros['intIdDocuComunica'];
        $intIdDetalleAsig       = $arrayParametros['intIdDetalleAsig'];
        $intIdDetalleHisto      = $arrayParametros['intIdDetalleHisto'];
        $intIdTareaSeguimiento  = $arrayParametros['intIdTareaSeguimiento'];
        $strNombreClaseDocParam = $arrayParametros['strNombreClaseDocParam']; 
        $strConfirmarCommit     = $arrayParametros['strConfirmarCommit']; 
        $strAgregaAsunto        = $arrayParametros['strAgregaAsunto']; 

        $this->emSoporte->getConnection()->beginTransaction();
        $this->emComunicacion->getConnection()->beginTransaction();

        try
        { 
            if ($strTipoAsignacion === "empleado")
            {
                $objInfoPersonaEmpresaRol = $this->emComercial->getRepository("schemaBundle:InfoPersonaEmpresaRol")
                    ->find($intIdAsignadoTarea);

                if (!is_object($objInfoPersonaEmpresaRol))
                {
                    $arrayRespuesta["mensaje"]     = "fail";
                    $arrayRespuesta["descripcion"] = "No existe el asignado $intIdAsignadoTarea";
                    return $arrayRespuesta;
                }

                $objAdmiDepartamento      = $this->emGeneral->getRepository("schemaBundle:AdmiDepartamento")
                    ->find($objInfoPersonaEmpresaRol->getDepartamentoId());

                $objInfoPersona           = $this->emComercial->getRepository("schemaBundle:InfoPersona")
                    ->find($objInfoPersonaEmpresaRol->getPersonaId()->getId());

                $objInfoOficinaGrupo      = $this->emComercial->getRepository("schemaBundle:InfoOficinaGrupo")
                    ->find($objInfoPersonaEmpresaRol->getOficinaId()->getId());

                $intAsignadoId          = $objAdmiDepartamento->getId();
                $strAsignadoNombre      = $objAdmiDepartamento->getNombreDepartamento();
                $strRefAsignadoId       = $objInfoPersona->getId();
                $strRefAsignadoNombre   = $objInfoPersona->getNombres()." ".$objInfoPersona->getApellidos();
                $intPersonaEmpresaRolId = $intIdAsignadoTarea;
                $strTipoAsignado        = "EMPLEADO";
                $intDepartamentoId      = $intAsignadoId;
                $intCantonId            = $objInfoOficinaGrupo->getCantonId();
            }
            elseif ($strTipoAsignacion === "cuadrilla")
            {
                $objAdmiCuadrilla = $this->emComercial->getRepository('schemaBundle:AdmiCuadrilla')->find($intIdAsignadoTarea);

                if (!is_object($objAdmiCuadrilla))
                {
                    $arrayRespuesta["mensaje"]     = "fail";
                    $arrayRespuesta["descripcion"] = "La cuadrilla ".$intIdAsignadoTarea." no existe.";
                    return $arrayRespuesta;
                }

                $arrayIntegrantesCuadrilla = $this->emComercial->getRepository('schemaBundle:InfoCuadrillaTarea')
                    ->getIntegrantesCuadrilla($objAdmiCuadrilla->getId());

                if (empty($arrayIntegrantesCuadrilla) || count($arrayIntegrantesCuadrilla) < 1)
                {
                    $arrayRespuesta["mensaje"]     = "fail";
                    $arrayRespuesta["descripcion"] = "La cuadrilla ".$objAdmiCuadrilla->getId()." no tiene integrantes.";
                    return $arrayRespuesta;
                }

                $strTipoAsignado   = "CUADRILLA";
                $intAsignadoId     = $objAdmiCuadrilla->getId();
                $strAsignadoNombre = $objAdmiCuadrilla->getNombreCuadrilla();
                $strObservacion    = "Tarea fue Asignada a la Cuadrilla ".$strAsignadoNombre;

                foreach($arrayIntegrantesCuadrilla as $arrayDatos)
                {
                    $arrayInfoCuadrilla = $this->emComercial->getRepository('schemaBundle:InfoCuadrilla')
                        ->getLiderCuadrilla($arrayDatos['idPersona']);

                    if (!empty($arrayInfoCuadrilla) && count($arrayInfoCuadrilla) > 0)
                    {
                        $boolCuadrilla          = true;
                        $objInfoPersona         = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                            ->find($arrayDatos['idPersona']);
                        $strRefAsignadoId       = ($objInfoPersona->getId()) ? $objInfoPersona->getId() : "";
                        $strRefAsignadoNombre   = ($objInfoPersona->__toString())  ? $objInfoPersona->__toString()  : "";
                        $intPersonaEmpresaRolId = $arrayInfoCuadrilla[0]['personaEmpresaRolId'];
                        break;
                    }
                }

                if (!$boolCuadrilla)
                {
                    foreach ($arrayIntegrantesCuadrilla as $arrayDatos)
                    {
                        $intRol = $this->emComercial->getRepository('schemaBundle:AdmiCuadrilla')
                            ->getRolJefeCuadrilla();

                        $objInfoPersonaEmpresaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                            ->findOneBy(array('empresaRolId' => $intRol,
                                              'personaId'    => $arrayDatos['idPersona'],
                                              'estado'       => "Activo"));

                        if (is_object($objInfoPersonaEmpresaRol))
                        {
                            $boolCuadrilla          = true;
                            $objInfoPersona         = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                ->find($arrayDatos['idPersona']);
                            $strRefAsignadoId       = ($objInfoPersona->getId()) ? $objInfoPersona->getId() : "";
                            $strRefAsignadoNombre   = ($objInfoPersona->__toString())  ? $objInfoPersona->__toString()  : "";
                            $intPersonaEmpresaRolId = $objInfoPersonaEmpresaRol->getId();
                            break;
                        }
                    }
                }

                //Se setea como responsable de la tarea al primer integrante de la cuadrilla que se encuentre.
                if (!$boolCuadrilla)
                {
                    $boolCuadrilla          = true;
                    $strRefAsignadoId       = $arrayIntegrantesCuadrilla[0]['idPersona'];
                    $strRefAsignadoNombre   = $arrayIntegrantesCuadrilla[0]['nombres']." ".$arrayIntegrantesCuadrilla[0]['apellidos'];
                    $intPersonaEmpresaRolId = $arrayIntegrantesCuadrilla[0]['empresaRolId'];
                }

                $objInfoPersonaEmpresaRol = $this->emComercial->getRepository("schemaBundle:InfoPersonaEmpresaRol")
                    ->find($intPersonaEmpresaRolId);

                if (is_object($objInfoPersonaEmpresaRol))
                {
                    $intDepartamentoId    = $objInfoPersonaEmpresaRol->getDepartamentoId();
                    $objInfoOficinaGrupo  = $this->emComercial->getRepository("schemaBundle:InfoOficinaGrupo")
                        ->find($objInfoPersonaEmpresaRol->getOficinaId()->getId());
                    if (is_object($objInfoOficinaGrupo))
                    {
                        $intCantonId = $objInfoOficinaGrupo->getCantonId();
                    }
                }
            }
            else
            {
                $arrayRespuesta["mensaje"]     = "fail";
                $arrayRespuesta["descripcion"] = "No se tiene informacion de asignacion de tarea";
                return $arrayRespuesta;
            }

            if($boolReprogramada)
            {
                if($strTipoAsignacion == "cuadrilla")
                {
                    $strObservacion = "Tarea fue Asignada a la cuadrilla ".$strAsignadoNombre.
                        " y Reprogramada para el ".date_format($objDateFechaSolicitada, 'Y-m-d H:i');
                }
                else
                {
                    $strObservacion = "Tarea fue Asignada a ".$strRefAsignadoNombre.
                        " y Reprogramada para el ".date_format($objDateFechaSolicitada, 'Y-m-d H:i');
                }
            }
            else
            {
                if($strTipoAsignacion == "cuadrilla")
                {
                    $strObservacion = "Tarea fue Asignada a la Cuadrilla ".$strAsignadoNombre;
                }
                else
                {
                    $strObservacion = "Tarea fue Asignada a ".$strRefAsignadoNombre;
                }
            }
            if( isset($strNombreClaseDocParam) && !empty($strNombreClaseDocParam ) )
            {
                $objClase = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                ->findOneByNombreClaseDocumento($strNombreClaseDocParam);
            }else
            {
                $objClase = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                ->findOneByNombreClaseDocumento("Notificacion");
            }
            if(!empty($strRegistroInte))
            {
                $objClase = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                ->findOneByNombreClaseDocumento("Registro Interno");
            }
            if(!empty($intIdDocumento))
            {
                $objInfoDocumento = $this->emComunicacion->getRepository('schemaBundle:InfoDocumento')
                                                         ->findOneById($intIdDocumento);
            }
            else
            {
                $objInfoDocumento = new InfoDocumento();
            }
            
            $objInfoDocumento->setClaseDocumentoId($objClase);
            
            if (isset($strTareaRapida) && $strTareaRapida === 'S')
            {
                $objInfoDocumento->setMensaje($arrayParametros['strObservacionTarea']);
            }
            else
            {            
                if($strTipoAsignacion == "cuadrilla")
                {
                    $objInfoDocumento->setMensaje("Asignacion de Tarea a la Cuadrilla ".$strAsignadoNombre);
                }
                else
                {
                    $objInfoDocumento->setMensaje("Asignacion de Tarea a ".$strRefAsignadoNombre);
                }
            }

            $objInfoDocumento->setEstado('Activo');
            if($strTareaRapida === 'S')
            {
                $objInfoDocumento->setNombreDocumento('Registro de tarea');
            }
            else
            {
                if($strAgregaAsunto === 'S')
                {
                    $objInfoDocumento->setNombreDocumento('Registro de tarea');
                }
                else
                {
                    $objInfoDocumento->setNombreDocumento($strAsunto);
                }
            }

            $objInfoDocumento->setFeCreacion(new \DateTime('now'));
            $objInfoDocumento->setUsrCreacion($strUserCreacion);
            $objInfoDocumento->setIpCreacion($strIpCreacion);
            $objInfoDocumento->setEmpresaCod($intIdEmpresa);
            $this->emComunicacion->persist($objInfoDocumento);
            $this->emComunicacion->flush();

            if(!empty($intIdDocuComunica))
            {
                $objInfoDocumentoComunicacion = $this->emComunicacion
                                                    ->getRepository('schemaBundle:InfoDocumentoComunicacion')
                                                    ->findOneById($intIdDocuComunica);
            }
            else
            {
                $objInfoDocumentoComunicacion = new InfoDocumentoComunicacion();
            }

            $objInfoDocumentoComunicacion->setComunicacionId($objInfoComunicacion);
            $objInfoDocumentoComunicacion->setDocumentoId($objInfoDocumento);
            $objInfoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
            $objInfoDocumentoComunicacion->setEstado('Activo');
            $objInfoDocumentoComunicacion->setUsrCreacion($strUserCreacion);
            $objInfoDocumentoComunicacion->setIpCreacion($strIpCreacion);
            $this->emComunicacion->persist($objInfoDocumentoComunicacion);
            $this->emComunicacion->flush();

            /* Ingresamos el detalle de asignacion */
            if(!empty($intIdDetalleAsig))
            {
                $objInfoDetalleAsignacion = $this->emSoporte
                                                    ->getRepository('schemaBundle:InfoDetalleAsignacion')
                                                    ->findOneById($intIdDetalleAsig);
            }
            else
            {
                $objInfoDetalleAsignacion = new InfoDetalleAsignacion();
            }

            $objInfoDetalleAsignacion->setDetalleId($objInfoDetalle);
            $objInfoDetalleAsignacion->setAsignadoId($intAsignadoId);
            $objInfoDetalleAsignacion->setAsignadoNombre($strAsignadoNombre);
            $objInfoDetalleAsignacion->setRefAsignadoId($strRefAsignadoId);
            $objInfoDetalleAsignacion->setRefAsignadoNombre($strRefAsignadoNombre);
            $objInfoDetalleAsignacion->setMotivo($strMotivoTarea);
            $objInfoDetalleAsignacion->setUsrCreacion($strUserCreacion);
            $objInfoDetalleAsignacion->setFeCreacion(new \DateTime('now'));
            $objInfoDetalleAsignacion->setIpCreacion($strIpCreacion);
            $objInfoDetalleAsignacion->setPersonaEmpresaRolId($intPersonaEmpresaRolId);
            $objInfoDetalleAsignacion->setTipoAsignado($strTipoAsignado);
            $objInfoDetalleAsignacion->setDepartamentoId($intDepartamentoId);
            $objInfoDetalleAsignacion->setCantonId($intCantonId);
            $this->emSoporte->persist($objInfoDetalleAsignacion);
            $this->emSoporte->flush();

            /* Ingreso el detalle de historial */
            if(!empty($intIdDetalleHisto))
            {
                $objInfoDetalleHistorial = $this->emSoporte
                                                    ->getRepository('schemaBundle:InfoDetalleHistorial')
                                                    ->findOneById($intIdDetalleHisto);
            }
            else
            {
                $objInfoDetalleHistorial = new InfoDetalleHistorial();
            }
            $objInfoDetalleHistorial->setDetalleId($objInfoDetalle);
            $objInfoDetalleHistorial->setObservacion("Tarea Asignada");
            $objInfoDetalleHistorial->setEstado("Asignada");
            $objInfoDetalleHistorial->setUsrCreacion($strUserCreacion);
            $objInfoDetalleHistorial->setFeCreacion(new \DateTime('now'));
            $objInfoDetalleHistorial->setIpCreacion($strIpCreacion);
            $objInfoDetalleHistorial->setAsignadoId($intAsignadoId);
            $objInfoDetalleHistorial->setPersonaEmpresaRolId($intPersonaEmpresaRolId);
            $objInfoDetalleHistorial->setDepartamentoOrigenId(($intIdDepartOrigen) ? $intIdDepartOrigen : $intDepartamentoId);
            $objInfoDetalleHistorial->setDepartamentoDestinoId($intDepartamentoId);
            $objInfoDetalleHistorial->setAccion("Asignada");
            $this->emSoporte->persist($objInfoDetalleHistorial);
            $this->emSoporte->flush();

            /* Ingresamos el seguimiento */
            if(!empty($intIdTareaSeguimiento))
            {
                $objInfoTareaSeguimiento = $this->emSoporte
                                                    ->getRepository('schemaBundle:InfoTareaSeguimiento')
                                                    ->findOneById($intIdTareaSeguimiento);
            }
            else
            {
                $objInfoTareaSeguimiento = new InfoTareaSeguimiento();
            }
            $objInfoTareaSeguimiento->setDetalleId($objInfoDetalle->getId());
            $objInfoTareaSeguimiento->setObservacion($strObservacion);
            $objInfoTareaSeguimiento->setUsrCreacion($strUserCreacion);
            $objInfoTareaSeguimiento->setFeCreacion(new \DateTime('now'));
            $objInfoTareaSeguimiento->setEmpresaCod($intIdEmpresa);
            $objInfoTareaSeguimiento->setEstadoTarea("Asignada");
            $objInfoTareaSeguimiento->setInterno("N");
            $objInfoTareaSeguimiento->setDepartamentoId($intDepartamentoId);
            $objInfoTareaSeguimiento->setPersonaEmpresaRolId($intPersonaEmpresaRolId);
            $this->emSoporte->persist($objInfoTareaSeguimiento);
            $this->emSoporte->flush();

            if($boolCuadrilla)
            {
                $arrayCuadrillaTarea = $this->emComercial->getRepository('schemaBundle:InfoCuadrillaTarea')
                    ->getIntegrantesCuadrilla($intIdAsignadoTarea);

                foreach ($arrayCuadrillaTarea as $arrayDatoCuadrilla)
                {
                    $objInfoCuadrillaTarea = new InfoCuadrillaTarea();
                    $objInfoCuadrillaTarea->setDetalleId($objInfoDetalle);
                    $objInfoCuadrillaTarea->setCuadrillaId($intIdAsignadoTarea);
                    $objInfoCuadrillaTarea->setPersonaId($arrayDatoCuadrilla['idPersona']);
                    $objInfoCuadrillaTarea->setUsrCreacion($strUserCreacion);
                    $objInfoCuadrillaTarea->setFeCreacion(new \DateTime('now'));
                    $objInfoCuadrillaTarea->setIpCreacion($strIpCreacion);
                    $this->emSoporte->persist($objInfoCuadrillaTarea);
                    $this->emSoporte->flush();
                }
            }
            if(empty($strConfirmarCommit))
            {
                $this->emSoporte->getConnection()->commit();
                $this->emComunicacion->getConnection()->commit();
            }

            //Se inicia la tarea de manera automática.
            if (strtoupper($strIniciarTarea) === 'S')
            {
                $arrayParametrosHist["strTipo"]        = 'iniciar';
                $arrayParametrosHist["strCodEmpresa"]  = $intIdEmpresa;
                $arrayParametrosHist["strUser"]        = $strUserCreacion;
                $arrayParametrosHist["strIpUser"]      = $strIpCreacion;
                $arrayParametrosHist["objDetalle"]     = $objInfoDetalle;

                $arrayResultado = $this->administrarTarea($arrayParametrosHist);

                $strInfomacionAdicional = 'La tarea no se pudo inciar de forma automática';

                if (strtoupper($arrayResultado['strRespuesta']) === 'OK')
                {
                    $strInfomacionAdicional = 'La tarea se inicia de forma automática';
                }

                $arrayRespuesta['infomacionAdicional'] = $strInfomacionAdicional;
            }

            /******************************************************************

                 USO DE SERVICE ENVIOPLANTILLA PARA GESTION DE ENVIO DE CORREOS

            ******************************************************************/

            $objInfoPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                ->findOneBy(array('personaId'       => $strRefAsignadoId,
                                  'formaContactoId' => 5,
                                  'estado'          => "Activo"));

            if($objInfoPersonaFormaContacto)
            {
                $arrayTo[] = $objInfoPersonaFormaContacto->getValor();
            }

            /* Parametros para el envio de correo */
            $arrayParametrosTarea['nombreProceso']   =  $strNombreProceso;
            $arrayParametrosTarea['nombreTarea']     =  $strNombreTarea;
            $arrayParametrosTarea['asignacion']      =  $objInfoDetalleAsignacion;
            $arrayParametrosTarea['empleadoLogeado'] =  $strUsuarioAsigna;
            $arrayParametrosTarea['empresa']         =  $strPrefijoEmpresa;
            $arrayParametrosTarea['detalle']         =  $objInfoDetalle;

            if($strTipoTarea == "T")
            {
                $strCodPlantilla                     = "TAREAACT";
                $arrayParametrosTarea['actividad']   = $objInfoComunicacion;
                $arrayParametrosTarea['tareaRapida'] = $strTareaRapida;
                if($strTareaRapida == "S")
                {        
                    //cierro la tarea automática
                    $objInfoTareaTiempoAsignacion = new InfoTareaTiempoAsignacion();
                    $objInfoTareaTiempoAsignacion->setDetalleId($objInfoDetalle->getId());
                    $objInfoTareaTiempoAsignacion->setTiempoCliente(0);
                    $objInfoTareaTiempoAsignacion->setTiempoEmpresa(1);
                    $objInfoTareaTiempoAsignacion->setObservacion($arrayParametros['strObsAsignaTarea']);
                    $objInfoTareaTiempoAsignacion->setFeCreacion(new \DateTime('now'));
                    $objInfoTareaTiempoAsignacion->setUsrCreacion($strUserCreacion);
                    $objInfoTareaTiempoAsignacion->setFeEjecucion(new \DateTime('now'));
                    $objInfoTareaTiempoAsignacion->setFeFinalizacion(new \DateTime('now'));
                    $this->emSoporte->persist($objInfoTareaTiempoAsignacion);
                    $this->emSoporte->flush();

                    
                    //Se ingresa el historial de la tarea
                    $arrayParametrosHist["strCodEmpresa"]           = $intIdEmpresa;
                    $arrayParametrosHist["strUsrCreacion"]          = $strUserCreacion;
                    $arrayParametrosHist["intIdDepartamentoOrigen"] = $intDepartamentoId;
                    $arrayParametrosHist["strOpcion"]               = "Historial";
                    $arrayParametrosHist["strIpCreacion"]           = $strIpCreacion;                                
                    $arrayParametrosHist["strObservacion"]          = $arrayParametros['strObsHistorial'];
                    $arrayParametrosHist["strEstadoActual"]         = "Finalizada";
                    $arrayParametrosHist["strOpcion"]               = "Historial";
                    $arrayParametrosHist["strAccion"]               = "Finalizada";
                    $arrayParametrosHist["intDetalleId"]            = $objInfoDetalle->getId();

                    $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);


                    //Se ingresa el historial de la tarea
                    $arrayParametrosHist["strObservacion"]  = $arrayParametros['strObsSeguimiento'];
                    $arrayParametrosHist["strOpcion"]       = "Seguimiento";

                    $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);
                }

            }

            else
            {
                $arrayAfectados = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                    ->getRegistrosAfectadosTotalXCaso($objInfoCaso->getId());

                $strCodPlantilla                   = 'TAREA';
                $arrayParametrosTarea['caso']      = $objInfoCaso;
                $arrayParametrosTarea['afectados'] = $arrayAfectados;
            }

           $this->envioPlantilla->generarEnvioPlantilla($strAsunto,
                                                         $arrayTo,
                                                         $strCodPlantilla,
                                                         $arrayParametrosTarea,
                                                         $intIdEmpresa,
                                                         $intCantonId,
                                                         $intDepartamentoId); 

            $arrayRespuesta['mensaje']    = 'ok';
            $arrayRespuesta['asignacion'] = $strObservacion;
            $arrayRespuesta['intDepartamentoId'] = $intDepartamentoId;
            if(isset($strConfirmarCommit) && !empty($strConfirmarCommit))
            { 
                $arrayRespuesta['objConSoporteAsigna'] = $this->emSoporte->getConnection();
                $arrayRespuesta['objConComunicaAsigna'] = $this->emComunicacion->getConnection();
            }
        }
        catch (\Exception $objException)
        {
            error_log("Error SoporteService.setAsginarResponsableTarea -> Error: ".$objException->getMessage());
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.setAsginarResponsableTarea',
                                            'ERROR : '.$objException->getMessage(),
                                            'AsginarRespTarea',
                                            $strIpCreacion);
            
            $arrayRespuesta["mensaje"]     = 'fail';
            $arrayRespuesta["descripcion"] = $objException->getMessage();

            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }

            if ($this->emComunicacion->getConnection()->isTransactionActive())
            {
                $this->emComunicacion->rollback();
            }
        }
        return $arrayRespuesta;
    }

    /**
     * Función encargada para el consumo de WebService
     *
     * @param $arrayParametros [
     *                           strUrl       = Url
     *                           arrayData    = Array de datos
     *                           arrayOptions = Array de opciones
     *                         ]
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 01-04-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 03-09-2018 - Se modifica el método para almacenar el json de respuesta en la INFO_ERROR
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 26-06-2019 - Se valida el estado de respuesta con código 201.
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.3 06-02-2020 - Se agrega la codificación para envío del request al realizar el encode.
     * @version 1.2
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.4 18-02-2020 - En la validación de *Fallo en la comunicación*, se obtiene el result con el status y message
     *                           en caso de existir, para registrar el error que envía el proveedor.
     *
     * @return $arrayRespuesta
     */
    public function comunicacionWsRestClient($arrayParametros)
    {
        set_time_limit(180); //Tres minutos de espera

        $strUser      = 'Telcos+';
        $strUrl       = $arrayParametros['strUrl'];
        $arrayData    = $arrayParametros['arrayData'];
        $arrayOptions = $arrayParametros['arrayOptions'];
        $objJson      = json_encode($arrayData, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);

        error_log("\n");
        error_log("========= Inicio - comunicacionWsRestClient ===========");
        error_log('===============    Request    ===================');
        error_log('Url: '.$strUrl);
        error_log('Json Request: '.$objJson);
        error_log("\n");

        $this->serviceUtil->insertError('Telcos+',
                                        'SoporteService->comunicacionWsRestClient',
                                        'Envio: '.substr($objJson, 0, 3800),
                                         $strUser,
                                        '127.0.0.1');

        try
        {
            //Se establece la comunicación.
            $arrayResponse = $this->serviceRestClient->postJSON($strUrl,$objJson,$arrayOptions);

            error_log('===============    Response    ===================');
            error_log('Json Response: '.json_encode($arrayResponse,true));
            error_log("\n");
            error_log("======== Fin - comunicacionWsRestClient ===========");
            error_log("\n");

            $strRespuestaJson = substr(json_encode($arrayResponse,true), 0, 3800);
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->comunicacionWsRestClient',
                                            'Respuesta: '.$strRespuestaJson,
                                             $strUser,
                                            '127.0.0.1');

            // Preguntamos si la comunicación no fue válida.
            if ($arrayResponse['status'] != 200 && $arrayResponse['status'] != 201)
            {
                $strStatus  = "fail";
                $strMessage = "Fallo en la comunicación";

                if (isset($arrayResponse['result']) && !empty($arrayResponse['result']))
                {
                    $arrayResult = is_array($arrayResponse['result']) ? $arrayResponse['result']
                            : json_decode($arrayResponse['result'],true);

                    $strStatus  = $arrayResult['status'] ? $arrayResult['status'] : $strStatus;
                    $strMessage = $arrayResult['message'] ? 'Response: '.$arrayResult['message'] : 'Response sin mensaje';
                }

                $arrayRespuesta["mensaje"]     = $strStatus;
                $arrayRespuesta["descripcion"] = $strMessage;

                return $arrayRespuesta;
            }

            //Preguntamos si no se obtuvo información.
            if (empty($arrayResponse['result']) || count($arrayResponse['result']) < 1)
            {
                $arrayRespuesta["mensaje"]     = "fail";
                $arrayRespuesta["descripcion"] = "No se obtuvo resultado";

                return $arrayRespuesta;
            }

            //A este punto la comunicación es un éxito.
            $arrayRespuesta["mensaje"] = "ok";
            $arrayRespuesta["result"]  = json_decode($arrayResponse['result'],true);
        }
        catch (\Exception $objException)
        {
            error_log("Error: SoporteService.comunicacionWsRestClient -> ".$objException->getMessage());
            $arrayRespuesta["mensaje"]     = "fail";
            $arrayRespuesta["descripcion"] = $objException->getMessage();
        }

        return $arrayRespuesta;
    }

    /**
     * Función encargada de establecer comunicacion con hal y obtener la persona o cuadrilla encargada
     * de la tarea que haya sido creada por otro proceso
     *
     * @param $arrayParametros [
     *                           intIdDetalle            = Id de la info detalle,
     *                           intIdComunicacion       = Id de comunicacion,
     *                           intIdPersonaEmpresaRol  = Id de la persona empresa rol,
     *                           intIdSugerencia         = Id desugerencia,
     *                           boolEresHal             = Variable booleana que identifica si eres Hal,
     *                           strUrl                  = Url para el consumo del WS
     *                         ]
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 26-03-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 27-08-2018 - Se agrega el nuevo parámetro strAtenderAntes, para el envío al WS de confirmación Hal.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 12-02-2019 - Se agrega el nuevo parámetro intIdCaso,intIdHipotesis y intIdAdmiTarea para el monitoreo del MPG.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.3 13-07-2019 - Se agrega el parámetro strSolicitante para identificar
     *                           quien solicita las sugerencias de hal.
     *
     */
    public function procesoAutomaticoHalAsigna($arrayParametros)
    {
        $intIdDetalle            = $arrayParametros['intIdDetalle'];
        $intIdComunicacion       = $arrayParametros['intIdComunicacion'];
        $intIdPersonaEmpresaRol  = $arrayParametros['intIdPersonaEmpresaRol'];
        $intIdSugerencia         = $arrayParametros['intIdSugerencia'];
        $boolEresHal             = $arrayParametros['boolEresHal'];
        $strUrlHal               = $arrayParametros['strUrl'];
        $strAtenderAntes         = $arrayParametros['strAtenderAntes'];

        try
        {
            $arrayParametrosHal['idDetalle']      = $intIdDetalle;
            $arrayParametrosHal['idComunicacion'] = $intIdComunicacion;

            $arrayParametrosHal['solicitante']  = empty($arrayParametros['strSolicitante'])   ||
                                                  $arrayParametros['strSolicitante'] === null ||
                                                  $arrayParametros['strSolicitante'] === '' ? 'NA' :
                                                  $arrayParametros['strSolicitante'] ;

            // Preguntamos si el proceso a consumir es por Hal u otro proceso como puede ser MPG
            if ($boolEresHal)
            {
                $arrayParametrosHal['idPersona']         = $intIdPersonaEmpresaRol;
                $arrayParametrosHal['idSugerencia']      = $intIdSugerencia;
                $arrayParametrosHal['atenderAntes']      = $strAtenderAntes;
            }
            else
            {
                $arrayParametrosHal['idCaso']      = $arrayParametros['intIdCaso'];
                $arrayParametrosHal['idHipotesis'] = $arrayParametros['intIdHipotesis'];
                $arrayParametrosHal['idAdmiTarea'] = $arrayParametros['intIdAdmiTarea'];
            }

            // Parametros para el consumo del WS
            $arrayParametrosWs = array ('strUrl'       => $strUrlHal,
                                        'arrayData'    => $arrayParametrosHal,
                                        'arrayOptions' => array(CURLOPT_SSL_VERIFYPEER => false));

            // Se establece la comunicación
            $arrayResponseHal = $this->comunicacionWsRestClient($arrayParametrosWs);
            $arrayRespuesta   = $arrayResponseHal;
        }
        catch (\Exception $objException)
        {
            error_log("Error: SoporteService.procesoAutomaticoHalAsigna -> ".$objException->getMessage());
            $arrayRespuesta["mensaje"]     = "fail";
            $arrayRespuesta["descripcion"] = $objException->getMessage();
        }
        return $arrayRespuesta;
    }

    /**
     * Función encargada de solicitar las fechas sugeridas por hal o
     * confirma la fecha que el cliente escogio en el aplicativo web
     *
     * @param $arrayParametros [
     *                           intIdDetalle           = Id del detalle
     *                           intIdCaso              = Id del caso,
     *                           intIdHipotesis         = Id de la hipotesis,
     *                           intIdAdmiTarea         = Id de la tarea,
     *                           intIdPersonaEmpresaRol = Id de la persona empresa rol en session
     *                           intNOpciones           = Numero de arreglos a obtener,
     *                           intNIntentos           = Numer de intentos,
     *                           strFechaSugerida       = Fecha sugerida por el cliente,
     *                           strHoraSugerida        = Hora sugerida por el cliente,
     *                           intIdSugerencia        = Id de sugerencia
     *                           boolConfirmar          = Identifica si es para confirmar o solicitar
     *                           strUrl                 = Url para el consumo del WS
     *                         ]
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 01-04-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 12-07-2019 - Se agrega el parámetro strSolicitante para identificar
     *                           quien solicita las sugerencias de hal.
     * 
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.2 29-11-2019 - Se agrega los parametros intIdDetalleSolicitud, strEsInstalacion intIdComunicacion para 
     * poder solicitar confirmar sugerencias HAL en las acciones de planificación: programar y replanificar.
     * 
     */
    public function getSolicitarConfirmarSugerenciasHal($arrayParametros)
    {
        $intIdDetalleSolicitud     = $arrayParametros['intIdDetalleSolicitud'];
        $strEsInstalacion          = $arrayParametros['strEsInstalacion'];
        $intIdDetalle              = $arrayParametros['intIdDetalle'];
        $intIdComunicacion         = $arrayParametros['intIdComunicacion'];
        $intIdCaso                 = $arrayParametros['intIdCaso'];
        $intIdHipotesis            = $arrayParametros['intIdHipotesis'];
        $intIdAdmiTarea            = $arrayParametros['intIdAdmiTarea'];
        $arrayJsonHal['idPersona'] = $arrayParametros['intIdPersonaEmpresaRol'];
        $intNOpciones              = $arrayParametros['intNOpciones'];
        $intNIntentos              = $arrayParametros['intNIntentos'];
        $strFechaSugerida          = $arrayParametros['strFechaSugerida'];
        $strHoraSugerida           = $arrayParametros['strHoraSugerida'];
        $intIdSugerencia           = $arrayParametros['intIdSugerencia'];
        $boolConfirmar             = $arrayParametros['boolConfirmar'];
        $strUrl                    = $arrayParametros['strUrl'];

        $strSolicitante            = empty($arrayParametros['strSolicitante'])   ||
                                     $arrayParametros['strSolicitante'] === null ||
                                     $arrayParametros['strSolicitante'] === '' ? 'NA' :
                                     $arrayParametros['strSolicitante'];

        try
        {
            if ($strEsInstalacion === 'S')
            {
                $arrayJsonHal['idDetalleSolicitud']   = intval($intIdDetalleSolicitud);
                if (isset($intIdDetalle) && $intIdDetalle != null)
                {
                    $arrayJsonHal['idDetalle']            = intval($intIdDetalle);
                }
                if (isset($intIdComunicacion) && $intIdComunicacion != null)
                {
                    $arrayJsonHal['idComunicacion']       = intval($intIdComunicacion);
                }
            }
            else
            {
                // Si el id del detalle es nulo, se obtiene los parámetros principales para la sugerencia o confirmación
                // caso contrario con el detalle es mas que suficiente
                if (is_null($intIdDetalle))
                {
                    $arrayJsonHal['idCaso']      = $intIdCaso;
                    $arrayJsonHal['idHipotesis'] = $intIdHipotesis;
                    $arrayJsonHal['idAdmiTarea'] = $intIdAdmiTarea;
                }
                else
                {
                    $arrayJsonHal['idDetalle']   = $intIdDetalle;
                }
            }
            // Verificamos si la peticion es por sugerencia o confirmacion
            if ($boolConfirmar)
            {
                $arrayJsonHal['idSugerencia'] = $intIdSugerencia;
            }
            else
            {
                $arrayJsonHal['solicitante'] = $strSolicitante;
                $arrayJsonHal['nOpciones']   = $intNOpciones;
                $arrayJsonHal['nIntentos']   = $intNIntentos;

                if ($strFechaSugerida)
                {
                    $arrayJsonHal['fechaSugerida'] = $strFechaSugerida;
                }

                if ($strHoraSugerida)
                {
                    $arrayJsonHal['horaSugerida']  = $strHoraSugerida;
                }
            }
            
            $arrayTokenCas= $this->objTokenCasService->generarTokenCas();
            $arrayParametros['token'] = $arrayTokenCas['strToken'];
    
            /* Parametros para el envio al Ws de hal */
            $arrayParametrosWs = array ('strUrl'       => $strUrl,
                                        'arrayData'    => $arrayJsonHal,
                                        'arrayOptions' => array(CURLOPT_SSL_VERIFYPEER => false,
                                                                CURLOPT_HTTPHEADER     => array('Content-Type: application/json',
                                                                'tokencas: '.$arrayParametros['token'])));

            /* Establecemos la comunicación */
            $arrayResponseHal = $this->comunicacionWsRestClient($arrayParametrosWs);
            $arrayRespuesta   = $arrayResponseHal;
        }
        catch (\Exception $objException)
        {
            error_log("Error SoporteService.getSolicitarConfirmarSugerenciasHal -> Error: ".$objException->getMessage());
            $arrayRespuesta["mensaje"]     = "fail";
            $arrayRespuesta["descripcion"] = $objException->getMessage();
        }
        return $arrayRespuesta;
    }

    /**
     * Función encarga de la llamda al método que devuelve el detalle de planificación de las cuadrillas
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 01-04-2018
     *
     * @param  $arrayParametros
     * @return $arrayRespuesta
     */
    public function getSolicitarDetallePlanificacion($arrayParametros)
    {
        try
        {
            $arrayRespuesta = $this->emSoporte->getRepository('schemaBundle:InfoCuadrillaPlanifCab')
                ->getSolicitarDetallePlanificacion($arrayParametros);
        }
        catch (\Exception $objException)
        {
            error_log("Error SoporteService.getSolicitarDetallePlanificacion -> Error: ".$objException->getMessage());
            $arrayRespuesta["mensaje"]     = 'fail';
            $arrayRespuesta["descripcion"] = $objException->getMessage();
        }
        return $arrayRespuesta;
    }

    /**
     * Función encarga de la llamda al método que devuelve el detalle de trabajo de las cuadrillas
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 01-04-2018
     *
     * @param  $arrayParametros
     * @return $arrayRespuesta
     */
    public function getSolicitarTrabajoCuadrilla($arrayParametros)
    {
        try
        {
            $arrayRespuesta = $this->emSoporte->getRepository('schemaBundle:InfoCuadrillaPlanifCab')
                ->getSolicitarTrabajoCuadrilla($arrayParametros);
        }
        catch (\Exception $objException)
        {
            error_log("Error SoporteService.getSolicitarTrabajoCuadrilla -> Error: ".$objException->getMessage());
            $arrayRespuesta["mensaje"]     = 'fail';
            $arrayRespuesta["descripcion"] = $objException->getMessage();
        }
        return $arrayRespuesta;
    }

    /**
     * Función que agrega un estado del servicio de instalacion
     *
     * @author Nestor Naula Lopez. <nnaulal@telconet.ec>
     * @version 1.1 22-06-2018
     *
     */
    public function ingresarEstadoInstalacion($arrayParametrosEstados){
        
        $servicioId        = $arrayParametrosEstados["servicioId"];
        $userLogin         = $arrayParametrosEstados["user"];
        $estado            = $arrayParametrosEstados["estado"];
    
        //*DECLARACION DE TRANSACCIONES------------------------------------------*/
         if (!$this->emSoporte->isOpen()) {
                        $this->emSoporte = $this->emSoporte->create(
                        $this->emSoporte->getConnection(),
                         $this->emSoporte->getConfiguration()
            );
        }
                    
        $this->emSoporte->beginTransaction();
        try{
                $infoEstadoInstalacion = new \telconet\schemaBundle\Entity\InfoEstadoInstalacion();
                $infoEstadoInstalacion->setServicioId($servicioId);
                $infoEstadoInstalacion->setEstado($estado);
                $infoEstadoInstalacion->setUsrCreacion($userLogin);
                $infoEstadoInstalacion->setUsrUltMod($userLogin);
                $infoEstadoInstalacion->setFeCreacion(new \DateTime('now'));
                $infoEstadoInstalacion->setFeUltMod(new \DateTime('now'));
                $infoEstadoInstalacion->setIpCreacion('127.0.0.1');
                $infoEstadoInstalacion->setIpUltMod('127.0.0.1');
                $this->emSoporte->persist($infoEstadoInstalacion);
                $this->emSoporte->flush();
                
            
                    $this->emSoporte->commit();
                    $this->emSoporte->close();
                          
                   return true;
                
        }catch(\Exception $objException)
        {
             if($this->emSoporte->isTransactionActive())
            {
                $this->emSoporte->rollback();
                $this->emSoporte->close();
            }
            $this->serviceUtil->insertError('TELCOS+',
                                            'SoporteService->ingresarEstadoInstalacion',
                                            $objException->getMessage(),
                                            $arrayParametrosEstados["user"],
                                            "127.0.0.1");
            return false;
        }
    }
    
    /**
     * Función encargada de la llamda al método que devuelve las horas de trabajo o jornadas de trabajo
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 02-05-2018
     *
     * @param  $arrayParametros
     * @return $arrayRespuesta
     */
    public function getSolicitarIntervalosTrabajo($arrayParametros)
    {
        try
        {
            $arrayRespuesta = $this->emSoporte->getRepository('schemaBundle:InfoCuadrillaPlanifCab')
                ->getSolicitarIntervalosTrabajo($arrayParametros);
        }
        catch (\Exception $objException)
        {
            error_log("Error SoporteService.getSolicitarIntervalosTrabajo -> Error: ".$objException->getMessage());
            $arrayRespuesta["mensaje"]     = 'fail';
            $arrayRespuesta["descripcion"] = $objException->getMessage();
        }
        return $arrayRespuesta;
    }

    /**
     * Método que procesa la asignación de la solicitud de planificación y tareas de soporte
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 01-04-2018
     *
     * @param  $arrayParametros
     * @return $arrayRespuesta
     */
    public function setAsignacionPlanifCuadrilla($arrayParametros)
    {
        try
        {
            $arrayRespuesta = $this->emSoporte->getRepository('schemaBundle:InfoCuadrillaPlanifCab')
                ->setAsignacionPlanifCuadrilla($arrayParametros);
        }
        catch (\Exception $objException)
        {
            error_log("Error SoporteService.setAsignacionPlanifCuadrilla -> Error: ".$objException->getMessage());
            $arrayRespuesta["mensaje"]     = 'fail';
            $arrayRespuesta["descripcion"] = $objException->getMessage();
        }
        return $arrayRespuesta;
    }

    /**
     * 
     * Actualización: Se agrega llamada a procesos de 
     * NOTIFICARCANCELARSUGERENCIA, REPROGRAMARPLANIFICACION y CAMBIARZONAPLANIFICACION
     * 
     * @author Andrés Montero H. <amontero@telconet.ec>
     * @version 1.1 27-10-2020
     * 
     * Funcion encargada de notificar a hal
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 01-04-2018
     *
     * @param  $arrayParametros [
     *                              strModulo : Modulo u/o Opcion para obtener la url de hal,
     *                              strUser   : Usuario quien realiza la peticion,
     *                              strIp     : Ip quien realiza la peticion,
     *                              arrayJson : Json a enviar a hal
     *                          ]
     * @return $arrayRespuesta
     */
    public function notificacionesHal($arrayParametros)
    {
        $strModulo  = $arrayParametros['strModulo'];
        $strUser    = $arrayParametros['strUser'];
        $strIp      = $arrayParametros['strIp'];
        $arrayJson  = $arrayParametros['arrayJson'];

        try
        {
            if (strtoupper($strModulo) === 'ZONA')
            {
                $strUrl = str_replace("{REPLACE_MODULO}","zona",$this->strUrlNotifBasicHal);
            }
            elseif (strtoupper($strModulo) === 'CUADRILLA')
            {
                $strUrl = str_replace("{REPLACE_MODULO}","cuadrilla",$this->strUrlNotifBasicHal);
            }
            elseif (strtoupper($strModulo) === 'INTERVALOADMI')
            {
                $strUrl = str_replace("{REPLACE_MODULO}","intervaloAdmi",$this->strUrlNotifBasicHal);
            }
            elseif (strtoupper($strModulo) === 'INTERVALOCAB')
            {
                $strUrl = str_replace("{REPLACE_MODULO}","intervaloCab",$this->strUrlNotifBasicHal);
            }
            elseif (strtoupper($strModulo) === 'INTERVALODETALLE')
            {
                $strUrl = str_replace("{REPLACE_MODULO}","intervaloDetalle",$this->strUrlNotifBasicHal);
            }
            elseif (strtoupper($strModulo) === 'CAMBIOZONACUADRILLA')
            {
                $strUrl = str_replace("{REPLACE_METODO}","cambioZona",$this->strUrlNotifCambioCuadrilla);
            }
            elseif (strtoupper($strModulo) === 'CAMBIOTABLETCUADRILLA')
            {
                $strUrl = str_replace("{REPLACE_METODO}","cambioTablet",$this->strUrlNotifCambioCuadrilla);
            }
            elseif (strtoupper($strModulo) === 'CAMBIOZONAELEMENTO')
            {
                $strUrl = $this->strUrlCambioZonaElemento;
            }
            elseif (strtoupper($strModulo) === 'ACTUALIZADETALLEHORAS')
            {
                $strUrl = $this->strUrlCambioHoraTrabajo;
            }
            elseif (strtoupper($strModulo) === 'ELEMENTOSZONA')
            {
                $strUrl = $this->strUrlAgregaElemtZona;
            }
            elseif (strtoupper($strModulo) === 'ELEMENTOSZONACAMBIO')
            {
                $strUrl = $this->strUrlCambioElemZona;
            }
            elseif(strtoupper($strModulo) === 'NOTIFICARCANCELARSUGERENCIA')
            {
                $strUrl = $this->strUrlNotifCancelarSug;
            }
            elseif(strtoupper($strModulo) === 'REPROGRAMARPLANIFICACION')
            {
                $strUrl = $this->strUrlReprogramarPlanif;
            }
            elseif(strtoupper($strModulo) === 'CAMBIARZONAPLANIFICACION')
            {
                $strUrl = $this->strUrlCambioZonaPlanif;
            }
            else
            {
                $this->serviceUtil->insertError('Telcos+',
                                                'SoporteService->notificacionesHal',
                                                'Opcion de notificacion a hal no existente: ('.$strModulo.')',
                                                 $strUser,
                                                 $strIp);
                
                return;
            }

            // Parametros para el envio al Ws de hal
            $arrayParametrosWs = array ('strUrl'       => $strUrl,
                                        'arrayData'    => $arrayJson,
                                        'arrayOptions' => array(CURLOPT_SSL_VERIFYPEER => false));

            // Establecemos la comunicación
            $arrayResponseHal = $this->comunicacionWsRestClient($arrayParametrosWs);

            if ($arrayResponseHal['mensaje'] != 'ok' || $arrayResponseHal["result"]['respuesta']  != 'ok')
            {
                $strError = ($arrayResponseHal['descripcion'] 
                    ? $arrayResponseHal['descripcion'] : $arrayResponseHal["result"]['mensaje']);

                $this->serviceUtil->insertError('Telcos+',
                                                'SoporteService->notificacionesHal',
                                                 $strError,
                                                 $strUser,
                                                 $strIp);
            }
        }
        catch(\Exception $objException)
        {
            error_log("Error SoporteService.notificacionesHal -> Error: ".$objException->getMessage());
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->notificacionesHal',
                                             $objException->getMessage(),
                                             $strUser,
                                             $strIp);
        }
        return $arrayResponseHal;
    }
    
     /**
     * Funcion que sirve para guardar y actualizar el evento de tareaTiempo
     *
     * @author Wilmer Vera <wvera@telconet.ec>
     *
     * @version 1.0 12-18-2017
     */
    
    public function GuardarReasignacionCuadrilla($arrayParametrosReasignacionCuadrilla){
        
        $idDetalle                = $arrayParametrosReasignacionCuadrilla["idDetalle"];
        $idEmpresaRol             = $arrayParametrosReasignacionCuadrilla["idEmpresaRol"];
        $userLogin                = $arrayParametrosReasignacionCuadrilla["userLogin"];
        $idDepartamentoDestino    = $arrayParametrosReasignacionCuadrilla["idDepartamentoDestino"];
        $idPersona                = $arrayParametrosReasignacionCuadrilla["idPersona"];
        $nombreCompleto           = $arrayParametrosReasignacionCuadrilla["nombreCompleto"];


        //*DECLARACION DE TRANSACCIONES------------------------------------------*/
        $this->emSoporte->beginTransaction();
        try{
                $infoReasignacionCuadrilla = new InfoReasignacionCuadrilla();
                $infoReasignacionCuadrilla->setIdDetalle($idDetalle);
                $infoReasignacionCuadrilla->setIdEmpresaRol($idEmpresaRol);
                $infoReasignacionCuadrilla->setUserLogin($userLogin);
                $infoReasignacionCuadrilla->setIdDepartamentoDestino($idDepartamentoDestino);
                $infoReasignacionCuadrilla->setUsrCreacion($userLogin);
                $infoReasignacionCuadrilla->setUsrUltMod($userLogin);
                $infoReasignacionCuadrilla->setFeCreacion(new \DateTime('now'));
                $infoReasignacionCuadrilla->setFeUltMod(new \DateTime('now'));
                $infoReasignacionCuadrilla->setIpCreacion('127.0.0.1');
                $infoReasignacionCuadrilla->setIpUltMod('127.0.0.1');
                $infoReasignacionCuadrilla->setIdDPersona($idPersona);
                $infoReasignacionCuadrilla->setNombreCompleto($nombreCompleto);
                $this->emSoporte->persist($infoReasignacionCuadrilla);
                $this->emSoporte->flush();
                
            
                    $this->emSoporte->commit();
                    $this->emSoporte->close();
                
                   return true;
                
        }catch(\Exception $objException)
        {
             if($this->emSoporte->isTransactionActive())
            {
                $this->emSoporte->rollback();
                $this->emSoporte->close();
            }
            $this->serviceUtil->insertError('TELCOS+',
                                            'SoporteService->administrarTarea',
                                            $e->getMessage(),
                                            $arrayParametros['strUser'],
                                            $arrayParametros['strIpUser']);
            $arrayRespuesta["strRespuesta"] = "ERROR";
            return false;
        }
    }

    /**
     * Función encargada de obtener las Zonas.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 20-06-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 10-09-2018 - Se modifica el método cambiando la función getZonas que se encarga de retornar las zonas
     *                           por getZonasNativeQuery que se encarga de obtener las zonas y el responsable.
     *
     * @param  $arrayParametros
     * @return $arrayRespuesta
     */
    public function getSolicitarZonas($arrayParametros)
    {
        $arrayZonas = $this->emGeneral->getRepository('schemaBundle:AdmiZona')
            ->getZonasNativeQuery($arrayParametros);

        if (empty($arrayZonas) || count($arrayZonas) < 1)
        {
            $arrayRespuesta["status"]  = 'fail';
            $arrayRespuesta["mensaje"] = 'FALLO EN EL METODO getSolicitarZonas';
            return $arrayRespuesta;
        }

        if ($arrayZonas['status'] == 'fail')
        {
            $arrayRespuesta["status"]  = $arrayZonas['status'];
            $arrayRespuesta["mensaje"] = $arrayZonas['message'];
            return $arrayRespuesta;
        }

        if ($arrayZonas['status'] == 'ok' && (empty($arrayZonas['result']) || count($arrayZonas['result']) <  1))
        {
            $arrayRespuesta["status"]  = 'fail';
            $arrayRespuesta["mensaje"] = 'LA CONSULTA NO DEVOLVIO RESULTADO';
            return $arrayRespuesta;
        }

        foreach ($arrayZonas['result'] as $arrayDatosZonas)
        {
            $arrayDatos[] = array("idZona"          => $arrayDatosZonas['id_zona'],
                                  "nombreZona"      => $arrayDatosZonas['nombre_zona'],
                                  "estado"          => $arrayDatosZonas['estado'],
                                  "responsableZona" => (
                                                         $arrayDatosZonas['responsableZona']
                                                         ? intval(explode("@@",$arrayDatosZonas['responsableZona'])[2])
                                                         : $arrayDatosZonas['responsableZona']
                                                        )
                                  );
        }

        $arrayRespuesta["status"]   = 'ok';
        $arrayRespuesta["cantidad"] = count($arrayDatos);
        $arrayRespuesta["zonas"]    = $arrayDatos;
        return $arrayRespuesta;
    }

    /**
     * Método encargado de generar las horas de trabajo dentro del detalle de planificacion.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 01-04-2018
     *
     * @param  $arrayParametros
     * @return $arrayRespuesta
     */
    public function setActualizarHorasTrabajoHAL($arrayParametros)
    {
        try
        {
            $strRespuesta = $this->emSoporte->getRepository('schemaBundle:InfoCuadrillaPlanifCab')
                ->actualizarHorasTrabajoHAL($arrayParametros);

            if (empty($strRespuesta))
            {
                $arrayRespuesta["status"]  = 'ok';
                $arrayRespuesta["mensaje"] = 'Los datos se registraron correctamente';
            }
            else
            {
                $arrayRespuesta["status"]  = 'fail';
                $arrayRespuesta["mensaje"] = $strRespuesta;
            }
        }
        catch (\Exception $objException)
        {
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.setActualizarHorasTrabajoHAL',
                                             $objException->getMessage(),
                                             $arrayParametros['strUser'],
                                             $arrayParametros['strIp']);

            $arrayRespuesta["status"]  = 'fail';
            $arrayRespuesta["mensaje"] = $objException->getMessage();
        }
        return $arrayRespuesta;
    }

    /**
     * Método encargado de obtener las partes afectadas de las tareas internas.
     * 
     * @author David De La Cruz. <ddelacruz@telconet.ec>
     * @version 1.4 30-06-2021 Se actualiza para corregir bug reportado por HAL, agregando el indice "0" del array obtenido al 
     * consultar la información de la tarea con el punto afectado, debido a que cuando la tarea no está asociada a un elemento
     * devolvia null en idPunto, por la corrección realizada el 23-06-2021
     * 
     * @author David De La Cruz. <ddelacruz@telconet.ec>
     * @version 1.3 23-06-2021 Se actualiza para que al obtener el mínimo idComunicacion ya no devuelva remitenteId, y en lugar 
     * de este campo obtenga el puntoId del mismo registro. El cambio fue solicitado por afectación en HAL, debido a que el 
     * remitenteId en este caso era el idPersona de quien comunicó la tarea y se estaba representando como idPunto, ubicando 
     * en otra zona geográfica a la actividad reportada
     * 
     * Actualización: Si no encuentra data en getPartesAfectadasTareas se busca el id del punto afectado en InfoComunicacion, 
     *                se corrige que obtenga la minima idComunicacion para obtener el afectado con el campo remitenteId
     * @author Andrés Montero H. <amontero@telconet.ec>
     * @version 1.2 03-12-2020
     * 
     * Actualización: Si no encuentra data en getPartesAfectadasTareas se busca el id del punto afectado en InfoComunicacion
     * @author Andrés Montero H. <amontero@telconet.ec>
     * @version 1.1 02-12-2020
     * 
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 16-07-2018
     *
     * @param  $arrayParametros
     * @return $arrayRespuesta
     */
    public function getPartesAfectadasTareas($arrayParametros)
    {
        try
        {
            $arrayRespuesta = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                ->getPartesAfectadasTareas($arrayParametros);

            //Si no encuentra data en getPartesAfectadasTareas se busca el id del punto afectado en InfoComunicacion
            if ( count($arrayRespuesta['result']) == 1 && !isset($arrayRespuesta['result'][0]['idPunto']))
            {
                $intMinComunicacion = $this->emSoporte->getRepository('schemaBundle:InfoComunicacion')
                                                       ->getMinimaComunicacionPorDetalleId($arrayParametros['intDetalleId']);

                if (isset($intMinComunicacion) && !empty($intMinComunicacion))
                {
                    $objInfoComunicacion = $this->emSoporte->getRepository('schemaBundle:InfoComunicacion')
                                                           ->find($intMinComunicacion);
                }
                
                if(is_object($objInfoComunicacion))
                {
                    $arrayRespuesta['status']               = 'ok';
                    $arrayRespuesta['result'][0]['idPunto'] =  $objInfoComunicacion->getPuntoId();
                }
                else
                {
                
                    throw new \Exception('No existe registro en la InfoComunicación');

                }
            }
        }
        catch (\Exception $objException)
        {
            error_log("Error SoporteService.getPartesAfectadasTareas -> Error: ".$objException->getMessage());
            $arrayRespuesta = array();
            $arrayRespuesta["status"]  = 'fail';
            $arrayRespuesta["mensaje"] = "Fallo en el metodo SoporteService.getPartesAfectadasTareas";
        }
        return $arrayRespuesta;
    }

    /**
     * Método encargado de actualizar el campo VISUALIZAR_MOVIL para la visualización de las tareas en el telcos móvil
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 - 17-07-2018
     *
     * @param Array $arrayParametros [
     *                                 arrayIdComunicacion = lista de id de la tabla info_comunicacion,
     *                                 strVisualizarMovil  = Valor para visualizar en el movil S o N,
     *                                 strUsuario          = Usuario quien realiza la modificación,
     *                                 strIp               = Ip del usuario quien realiza la mofidicación
     *                               ]
     *
     * @return Array $arrayRespuesta;
     */
    public function setVisualizarMovil($arrayParametros)
    {
        try
        {
            foreach ($arrayParametros["arrayIdComunicacion"] as $intIdComunicacion)
            {
                if (!is_null($intIdComunicacion) && is_int($intIdComunicacion))
                {
                    $arrayParametros['intIdComunicacion'] = $intIdComunicacion;
                    $strRespuesta = $this->emSoporte->getRepository('schemaBundle:InfoCuadrillaPlanifCab')
                        ->setVisualizarMovil($arrayParametros);

                    if (strtoupper($strRespuesta) != 'OK')
                    {
                        $arrayRespuesta["result"][] = array('idComunicacion' => $intIdComunicacion,
                                                            'mensaje'        => $strRespuesta);
                    }
                }
                else
                {
                    $arrayRespuesta["result"][] = array('idComunicacion' => $intIdComunicacion,
                                                        'mensaje'        => 'idComunicacion Invalido');
                }
            }
            $arrayRespuesta["status"]  = 'ok';
        }
        catch (\Exception $objException)
        {
            $arrayRespuesta = array();
            $arrayRespuesta["status"] = 'fail';
            $arrayRespuesta["mensaje"] = "Error SoporteService.setVisualizarMovil -> Error: ".$objException->getMessage();
        }
        return $arrayRespuesta;
    }

     /**
     * Método encargado de ingresar la característica en la INFO_TAREA_CARACTERISTICA.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 - 27-08-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 - 24-01-2019 - Se modifica el array de respuesta para manejar un estandar de status y message en el resultado.
     *
     * @param Array $arrayParametros [
     *                                 intIdComunicacion          = Número de tarea
     *                                 intIdDetalle               = Id de detalle de la tarea
     *                                 intCaracteristicaId        = Id de la característica
     *                                 strValor                   = Valor de la característica
     *                                 strUsrCreacion             = Usuario de Creación,
     *                                 strIpCreacion              = Ip de Creación,
     *                                 strEstado                  = Estado,
     *                                 strOpcion                  = edit/new,
     *                                 ojbInfoTareaCaracteristica = Objeto de la tabla INFO_TAREA_CARACTERISTICA
     *                               ]
     *
     * @return Array $arrayRespuesta;
     */
    public function setTareaCaracteristica($arrayParametros)
    {
        $intIdComunicacion          = $arrayParametros['intIdComunicacion'];
        $intIdDetalle               = $arrayParametros['intIdDetalle'];
        $intIdCaracteristica        = $arrayParametros['intCaracteristicaId'];
        $strValor                   = $arrayParametros['strValor'];
        $strUsrCreacion             = $arrayParametros['strUsrCreacion'];
        $strIpCreacion              = $arrayParametros['strIpCreacion'];
        $strEstado                  = $arrayParametros['strEstado'];
        $strOpcion                  = $arrayParametros['strOpcion'];
        $ojbInfoTareaCaracteristica = $arrayParametros['ojbInfoTareaCaracteristica'];
        $arrayRespuesta             = array();

        $this->emSoporte->getConnection()->beginTransaction();

        try
        {
            if ($strOpcion === 'edit' && is_object($ojbInfoTareaCaracteristica))
            {
                $ojbInfoTareaCaracteristica->setFeModificacion(new \DateTime('now'));
                $ojbInfoTareaCaracteristica->setUsrModificacion($strUsrCreacion);
                $ojbInfoTareaCaracteristica->setIpModificacion($strIpCreacion);
            }
            else
            {
                $ojbInfoTareaCaracteristica = new InfoTareaCaracteristica();
                $ojbInfoTareaCaracteristica->setTareaId(intval($intIdComunicacion));
                $ojbInfoTareaCaracteristica->setDetalleId(intval($intIdDetalle));
                $ojbInfoTareaCaracteristica->setCaracteristicaId($intIdCaracteristica);
                $ojbInfoTareaCaracteristica->setFeCreacion(new \DateTime('now'));
                $ojbInfoTareaCaracteristica->setUsrCreacion($strUsrCreacion);
                $ojbInfoTareaCaracteristica->setIpCreacion($strIpCreacion);
            }

            $ojbInfoTareaCaracteristica->setValor(strtoupper($strValor));
            $ojbInfoTareaCaracteristica->setEstado($strEstado);
            $this->emSoporte->persist($ojbInfoTareaCaracteristica);
            $this->emSoporte->flush();
            $this->emSoporte->getConnection()->commit();

            $arrayRespuesta['mensaje']     = 'ok';
            $arrayRespuesta['descripcion'] = 'Se ingresó la tarea con la característica';
        }
        catch(\Exception $objException)
        {
            if($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
                $this->emSoporte->getConnection()->close();
            }

            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->setTareaCaracteristica',
                                            $objException->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion);

            $arrayRespuesta['mensaje']     = 'fail';
            $arrayRespuesta['descripcion'] = 'Error al ingresar la característica';
        }
        return $arrayRespuesta;
    }

    /**
     * Método que se encarga de validar si la fecha a crear ya se encuentra planificada.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 - 28-08-2018
     *
     * @param Array $arrayParametros [
     *                                 intIdCuadrilla = Id de la cuadrilla,
     *                                 intIdIntervalo = Id del intervalo,
     *                                 strFechaInicio = Fecha de inicio de la planificación,
     *                                 strFechaFin    = Fecha fin de la planificación,
     *                                 strHoraInicio  = Hora inicio de la planificación,
     *                                 strHoraFin     = Hora fin de la planificación,
     *                                 strUsuario     = Usuario en sessión,
     *                                 strIp          = ip del usuario en sessión
     *                               ]
     *
     * @return $arrayResultado
     */
    public function validarFechasPlanificadasHal($arrayParametros)
    {
        $intIdCuadrilla     = intval($arrayParametros['intIdCuadrilla']);
        $intIdIntervalo     = intval($arrayParametros['intIdIntervalo']);
        $strFechaInicio     = $arrayParametros['strFechaInicio'];
        $strFechaFin        = $arrayParametros['strFechaFin'];
        $strHoraInicio      = $arrayParametros['strHoraInicio'];
        $strHoraFin         = $arrayParametros['strHoraFin'];
        $strUsuario         = $arrayParametros['strUsuario'];
        $strIp              = $arrayParametros['strIp'];
        $boolCrear          = true;
        $arrayResultado     = array();
        $objDateFechaInicio = new \DateTime($strFechaInicio);
        $objDateFechaFin    = new \DateTime($strFechaFin);
        $objhoraInicio      = new \DateTime('2018-01-01 '.$strHoraInicio);
        $objhoraFin         = new \DateTime('2018-01-01 '.$strHoraFin);

        try
        {
            while($objDateFechaInicio <= $objDateFechaFin)
            {
                $objInfoCuadrillaPlanifCab = $this->emSoporte->getRepository("schemaBundle:InfoCuadrillaPlanifCab")
                    ->findOneBy(array ('cuadrillaId' => $intIdCuadrilla,
                                       'intervaloId' => $intIdIntervalo,
                                       'feTrabajo'   => $objDateFechaInicio,
                                       'estado'      => 'Activo'));

                if (is_object($objInfoCuadrillaPlanifCab))
                {
                    $boolCrear = false;
                    break;
                }
                else
                {
                    $arrayInfoCuadrillaPlanifCab = $this->emSoporte->getRepository("schemaBundle:InfoCuadrillaPlanifCab")
                        ->findBy(array ('cuadrillaId' => $intIdCuadrilla,
                                        'feTrabajo'   => $objDateFechaInicio,
                                        'estado'      => 'Activo'));

                    if (!empty($arrayInfoCuadrillaPlanifCab) && count($arrayInfoCuadrillaPlanifCab) > 0)
                    {
                        foreach($arrayInfoCuadrillaPlanifCab as $objInfoCuadrillaPlanifCab)
                        {
                            if (is_object($objInfoCuadrillaPlanifCab))
                            {
                                $objAdmiIntervalo = $this->emSoporte->getRepository("schemaBundle:AdmiIntervalo")
                                    ->find($objInfoCuadrillaPlanifCab->getIntervaloId());

                                $objHoraIniPlanif = $objAdmiIntervalo->getHoraIni();
                                $objHoraFinPlanif = $objAdmiIntervalo->getHoraFin();

                                if (($objhoraInicio >= $objHoraIniPlanif && $objhoraInicio <= $objHoraFinPlanif) ||
                                    ($objhoraFin    <= $objHoraFinPlanif && $objhoraFin    >= $objHoraIniPlanif) ||
                                    ($objhoraInicio <= $objHoraIniPlanif && $objhoraFin    >= $objHoraIniPlanif) ||
                                    ($objhoraInicio >= $objHoraIniPlanif && $objhoraFin    <= $objHoraFinPlanif))
                                {
                                    $boolCrear = false;
                                    break;
                                }
                            }
                        }
                    }
                }

                $objDateFechaInicio->modify('+1 day');
            }

            $arrayResultado['status'] = 'ok';
        }
        catch (\Exception $objEx)
        {
            $boolCrear = false;
            $arrayResultado['status'] = 'fail';
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->validarFechasPlanificadasHal',
                                             $objEx->getMessage(),
                                             $strUsuario,
                                             $strIp);
        }

        $arrayResultado['success'] = $boolCrear;

        return $arrayResultado;
    }

    /**
     * Método encargado de obtener las tareas con la característica ATENDER_ANTES.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 31-08-2018
     *
     * @param  $arrayParametros
     * @return $arrayRespuesta
     */
    public function getTareasCaractAtenderAntes($arrayParametros)
    {
        $arrayRespuesta = $this->emSoporte->getRepository('schemaBundle:InfoTareaCaracteristica')
            ->getTareasCaractAtenderAntes($arrayParametros);
        return $arrayRespuesta;
    }
    

     /**
     * Función que crea una tarea automática de forma genérica
     * La tarea creada consta con los siguiente atributos :
     *   > la tarea creada puede estar ligada a un cliente por medio de su login. 
     *   > La tarea creada puede tener un documento adjunto, siempre y cuando sea enviado en forma de Bytes. 
     *   > Esta función crea una tarea dependiendo la región, departamento y rol que le indiquen.
     *       -> con los parámetros enviados hace una búsqueda para encontrar al responsable y se la asigna.
     *          Ejemplo: Si enviamos departamento "121"/Rol "SubJefe Departamental"/ Región "R1", buscará a la persona
     *                   encargada de ese cargo en el departamento 121, y es a quien se le cargará la tarea.
     *
     * @author Wilmer Vera González <wvera@telconet.ec>
     * @version 1.0 11-03-2019.
     * 
     * Se valida según el campo de empresaCod se inserte el prefijo de la empresa.
     * Se realiza validación con coordenadas extraidas, para que ellas sean ingresadas en la base.
     * 
     * @author Wilmer Vera González <wvera@telconet.ec>
     * @version 1.1 04-07-2019.
     * @since 1.0
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.2 02-06-2020 - Se modifica código para crear nueva estructura de archivos.
     * @since 1.1
     * 
     * @param array $arrayParametros[
     *                               objTarea           = Entidad tarea,
     *                               latitud            = Latitud de donde se está creando la tarea,
     *                               longitud           = Longitud de donde se está creando la tarea,
     *                               observaciones      = Observaciones de la tarea,
     *                               empresaCod         = Código de la empresa,
     *                               ipCreacion         = Ip de donde se está creando la tarea,
     *                               usrCreacion        = Usuario que crea la tarea,
     *                               intPuntoId         = Id del punto,
     *                               intIdDepartamento  = idDepartamento,
     *                               intDescripcionRol  = rol a quien queremos buscar para añadir la tarea     
     *                               intIdEmpresa       = empresa Id, 
     *                               strJurisdiccion    = Jurisdiccion de donde esta siendo llamada la función
     *                               strDepartamento    = Nombre Departamento 
     *                               intFormaContacto   = Forma de contacto casi siempre es 5.
     *                               strLoginCliente    = login del cliente
     *                               objDocumento       = documento tipo byte
     *                               strNombreCliente   = nombre del cliente
     *                               extDocAdjunto      = .ext del documento enviado, este puede ser imagen o documento.
     *                              ]
     * @return array $arrayRespuesta
     */
    public function crearTareaPorJurisdiccion($arrayParametros)
    {
        $objTarea           = $arrayParametros['objTarea'];
        $strLongitud        = $arrayParametros['longitud'];
        $strLatitud         = $arrayParametros['latitud'];
        $strObservaciones   = $arrayParametros['observaciones'];
        $strEmpresaCod      = $arrayParametros['empresaCod'];
        $strIpCreacion      = $arrayParametros['ipCreacion'];
        $strUsrCreacion     = $arrayParametros['usrCreacion'];
        $intPuntoId         = $arrayParametros['intPuntoId'];
        
        $intIdDepartamento  = $arrayParametros['idDepartamento'];
        $intDescripcionRol  = $arrayParametros['rolDepartamental'];
        $intIdEmpresa       = $arrayParametros['idEmpresa'];
        $strJurisdiccion    = $arrayParametros['jurisdiccion'];
        $intFormaContacto   = $arrayParametros['formaContacto']; 
        $strLoginCliente    = $arrayParametros['loginCliente']; 
        $objDocumento       = $arrayParametros['docAdjunto']; 
        $strNombreCliente   = $arrayParametros['nombreCliente']; 
        $strExtensionDoc    = $arrayParametros['extDocAdjunto']; 
        $strTipoAsignado    = !empty($arrayParametros['tipoAsignado']) ? $arrayParametros['tipoAsignado'] : "EMPLEADO";
        $strTipo            = "";
        $strMensaje         = "";
        $strStatus          = "ERROR";
        $arrayParametrosHist= array();
        $strNombreProceso   = "";
        $strNombreParametro = "PROCESO_TAREA_SUBJEFEDEPARTAMENTAL_GIS";
        $strOrigenAccion    = isset($arrayParametros['strOrigenAccion']) ? $arrayParametros['strOrigenAccion'] : '';
        $strPrefijoEmpresa  = isset($arrayParametros['prefijoEmpresa']) ? $arrayParametros['prefijoEmpresa'] : '';
        $boolBandNfs        = isset($arrayParametros['bandNfs']) ? $arrayParametros['bandNfs'] : '';
        $strApp             = isset($arrayParametros['strAplicacion']) ? $arrayParametros['strAplicacion'] : '';

        $arrayParametrosHist["strCodEmpresa"]           = $strEmpresaCod;
        $arrayParametrosHist["strUsrCreacion"]          = $strUsrCreacion;
        $arrayParametrosHist["strIpCreacion"]           = $strIpCreacion;
        $arrayParametrosHist["strOpcion"]               = "Historial";
        $arrayParametrosHist["strEnviaDepartamento"]    = "N";

        $strRutaFisicaCompleta = $arrayParametros['strRutaFisicaCompleta'];

        //*DECLARACION DE TRANSACCIONES------------------------------------------*/
        $this->emSoporte->getConnection()->beginTransaction();
        //*----------------------------------------------------------------------*/

        $this->emGeneral->getConnection()->beginTransaction();

        $objAdmiParametroCab    = $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                            ->findOneBy(array(
                                                              'nombreParametro'   => $strNombreParametro,
                                                              'estado'            => 'Activo'
                                                                )
                                                        );

        $objAdmiParametroDet    = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->findOneBy(array(
                                                                'parametroId'   => $objAdmiParametroCab->getId()
                                                                )
                                                        );
        //NOMBRE DEL PROCESO 
        $strNombreProceso = $objAdmiParametroDet->getValor1();

        try
        {
            //InfoDetalle
            $entityDetalle = new InfoDetalle();
            $entityDetalle->setTareaId($objTarea);
            $entityDetalle->setLongitud($strLongitud);
            $entityDetalle->setLatitud($strLatitud);
            $entityDetalle->setPesoPresupuestado(0);
            $entityDetalle->setValorPresupuestado(0);
            $entityDetalle->setObservacion($strObservaciones);
            $entityDetalle->setIpCreacion($strIpCreacion);
            $entityDetalle->setFeCreacion(new \DateTime('now'));
            $entityDetalle->setFeSolicitada(new \DateTime('now'));
            $entityDetalle->setUsrCreacion($strUsrCreacion);
            $this->emSoporte->persist($entityDetalle);
            $this->emSoporte->flush();

            //se obtienen los datos del usuario que crea la incidencia

            $arrayDatosUsuario  = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                             ->getCoordinadorPorUsuario($arrayParametros);
            $arrayParametrosResponsable = array(
                                            'intDepartamentoId' =>  $intIdDepartamento,
                                            'strDescripcionRol' =>  $intDescripcionRol,
                                            'intCodEmpresa'     =>  $intIdEmpresa,
                                            'strJurisdiccion'   =>  $strJurisdiccion,
                                            'intFormaContacto'  =>  $intFormaContacto
                                            );

            $arrayResponsable   = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                ->getResponsablePorCargo($arrayParametrosResponsable);  
                                                              
            $objPersona         = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                            ->findOneBy(array('login' => $strUsrCreacion));
        
            //InfoDetalleAsignacion
            $entityDetalleAsignacion = new InfoDetalleAsignacion();
            $entityDetalleAsignacion->setDetalleId($entityDetalle);
            $entityDetalleAsignacion->setAsignadoId($arrayResponsable['departamentoId']);
            $entityDetalleAsignacion->setAsignadoNombre($arrayResponsable['nombreCompleto']);
            $entityDetalleAsignacion->setRefAsignadoId($arrayResponsable['personaId']);
            $entityDetalleAsignacion->setTipoAsignado($strTipoAsignado);
            $entityDetalleAsignacion->setRefAsignadoNombre($arrayResponsable['nombreCompleto']);
            $entityDetalleAsignacion->setPersonaEmpresaRolId($arrayResponsable['personaEmpresaRolId']);
            $entityDetalleAsignacion->setUsrCreacion($strUsrCreacion);
            $entityDetalleAsignacion->setFeCreacion(new \DateTime('now'));
            $entityDetalleAsignacion->setIpCreacion($strIpCreacion);
            $entityDetalleAsignacion->setDepartamentoId($arrayDatosUsuario['departamentoId']);
            $entityDetalleAsignacion->setCantonId($arrayDatosUsuario['cantonId']);
            $this->emSoporte->persist($entityDetalleAsignacion);
            $this->emSoporte->flush();

            //Se ingresa el historial de la tarea
            $arrayParametrosHist["strObservacion"]   = $strObservaciones;
            $arrayParametrosHist["strEstadoActual"]  = "Asignada";
            $arrayParametrosHist["strAccion"]        = "Asignada";

            if(is_object($entityDetalle))
            {
                $arrayParametrosHist["intDetalleId"] = $entityDetalle->getId();
            }
            $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);
            $objAdmiClaseDocumento  = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                                                           ->findOneByNombreClaseDocumento("Notificacion Interna Correo");

            $objFormaContacto       = $this->emComunicacion->getRepository("schemaBundle:AdmiFormaContacto")
                                                           ->findPorDescripcionFormaContacto("Correo Electronico");

            if(is_object($objAdmiClaseDocumento) && is_object($objFormaContacto))
            {
                $objInfoDocumento = new InfoDocumento();
                $objInfoDocumento->setMensaje($strObservaciones);
                $objInfoDocumento->setNombreDocumento($strExtensionDoc);
                $objInfoDocumento->setClaseDocumentoId($objAdmiClaseDocumento);
                $objInfoDocumento->setFeCreacion(new \DateTime('now'));
                $objInfoDocumento->setEstado("Activo");
                $objInfoDocumento->setUsrCreacion($strUsrCreacion);
                $objInfoDocumento->setIpCreacion($strIpCreacion);
                $objInfoDocumento->setEmpresaCod($strEmpresaCod);
                $this->emComunicacion->persist($objInfoDocumento);
                $this->emComunicacion->flush();

                $objInfoComunicacion = new InfoComunicacion();
                $objInfoComunicacion->setFormaContactoId($objFormaContacto->getId());
                $objInfoComunicacion->setRemitenteId($arrayResponsable['personaId']);
                $objInfoComunicacion->setRemitenteNombre($arrayResponsable['nombreCompleto']);
                $objInfoComunicacion->setClaseComunicacion("Recibido");
                $objInfoComunicacion->setDetalleId($entityDetalle->getId());
                $objInfoComunicacion->setFechaComunicacion(new \DateTime('now'));
                $objInfoComunicacion->setEstado("Activo");
                $objInfoComunicacion->setFeCreacion(new \DateTime('now'));
                $objInfoComunicacion->setUsrCreacion($strUsrCreacion);
                $objInfoComunicacion->setIpCreacion($strIpCreacion);
                $objInfoComunicacion->setPuntoId($intPuntoId);
                $objInfoComunicacion->setEmpresaCod($strEmpresaCod);
                $this->emComunicacion->persist($objInfoComunicacion);
                $this->emComunicacion->flush();

                $objInfoDocumentoComunicacion = new InfoDocumentoComunicacion();
                $objInfoDocumentoComunicacion->setComunicacionId($objInfoComunicacion);
                $objInfoDocumentoComunicacion->setDocumentoId($objInfoDocumento);
                $objInfoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
                $objInfoDocumentoComunicacion->setEstado('Activo');
                $objInfoDocumentoComunicacion->setUsrCreacion($strUsrCreacion);
                $objInfoDocumentoComunicacion->setIpCreacion($strIpCreacion);
                $this->emComunicacion->persist($objInfoDocumentoComunicacion);
                $this->emComunicacion->flush();
                
                $objInfoCriterioAfectado = new InfoCriterioAfectado();
                $objInfoCriterioAfectado->setId(1);
                $objInfoCriterioAfectado->setDetalleId($entityDetalle);
                $objInfoCriterioAfectado->setCriterio("Clientes");
                $objInfoCriterioAfectado->setOpcion("Cliente:".$strLoginCliente."|OPCION: Punto Cliente");
                $objInfoCriterioAfectado->setFeCreacion(new \DateTime('now'));
                $objInfoCriterioAfectado->setUsrCreacion($strUsrCreacion);
                $objInfoCriterioAfectado->setIpCreacion("192.128.65.1");
                $this->emSoporte->persist($objInfoCriterioAfectado);
                $this->emSoporte->flush();

                $objInfoParteAfectada = new InfoParteAfectada();
                $objInfoParteAfectada->setTipoAfectado("Cliente");
                $objInfoParteAfectada->setDetalleId($entityDetalle->getId());
                $objInfoParteAfectada->setCriterioAfectadoId($objInfoCriterioAfectado->getId());
                $objInfoParteAfectada->setAfectadoId($intPuntoId);
                $objInfoParteAfectada->setFeIniIncidencia(new \DateTime('now'));
                $objInfoParteAfectada->setAfectadoNombre($strLoginCliente);
                $objInfoParteAfectada->setAfectadoDescripcion($strNombreCliente);
                $objInfoParteAfectada->setFeCreacion(new \DateTime('now'));
                $objInfoParteAfectada->setUsrCreacion($strUsrCreacion);
                $objInfoParteAfectada->setIpCreacion('192.168.200.59');
               
                $this->emSoporte->persist($objInfoParteAfectada);
                $this->emSoporte->flush();

                $strPrefijoEmpresa = "MD";
                if($strEmpresaCod == "10")
                {
                    $strPrefijoEmpresa = "TN";
                }

                if($strEmpresaCod == "33")
                {
                    $strPrefijoEmpresa = "EN";
                }

                $arrayParametros    = array(
                    'idCaso'            => '',
                    'perteneceACaso'    => false,
                    'numeracion'        => '',
                    'referencia'        => '',
                    'asignacion'        => $entityDetalleAsignacion,
                    'persona'           => $objPersona ? $objPersona : 'false',
                    'nombreProceso'     => $strNombreProceso,
                    'nombreTarea'       => $objTarea->getNombreTarea() ? $objTarea->getNombreTarea() : '',
                    'estado'            => $objTarea->getEstado() ? $objTarea->getEstado() : '',
                    'empleadoLogeado'   => $strUsrCreacion,
                    'empresa'           => $strPrefijoEmpresa,
                    'detalle'           => $entityDetalle,
                    'observacion'       => $strObservaciones ? $strObservaciones : "");


            }
            if($objDocumento!=null)
            {
                $arrayParametros = array(
                    'idDetalle'             => $entityDetalle->getId(),
                    'documento'             => $objDocumento,
                    'nombreDocumento'       => $strExtensionDoc."-".$strUsrCreacion."-".$strLoginCliente,
                    'usrCreacion'           => $strUsrCreacion,
                    'ipCreacion'            => "192.168.200.59",
                    'feCreacion'            => new \DateTime('now'),
                    'idEmpresa'             => $strEmpresaCod,
                    'accion'                => 'Tarea',
                    'strExt'                => $strExtensionDoc,
                    'strLongitud'           => $strLongitud,
                    'strLatitud'            => $strLatitud,
                    'strRutaFisicaCompleta' => $strRutaFisicaCompleta,
                    'strApp'                => $strApp,
                    'bandNfs'               => $boolBandNfs,
                    'prefijoEmpresa'        => $strPrefijoEmpresa,
                    'strSubModulo'          => $strOrigenAccion
                );
                $arrayResultado         = $this->emTecnico->guardarDetalleDocumentoTarea($arrayParametros);

                if($arrayResultado['status']!="OK")
                {
                    $strStatus  = $arrayResultado['status'];
                    $strMensaje = "No se pudo guardar el detalle del documento tarea.";

                    $this->serviceUtil->insertError( 'TELCOS+', 
                                             'SoporteService
                                             ->crearTareaPorJurisdiccion
                                             ->guardarDetalleDocumentoTarea', 
                                             $arrayResultado['mensaje'], 
                                             'telcos', 
                                             '127.0.0.1' );
                }
                else
                {
                    $strStatus  = $arrayResultado['status'];
                    $strMensaje = $arrayResultado['mensaje'];
                }
            }
            else
            {
                $strStatus     = "OK";
                $strMensaje    = "Se creó tarea exitósamente.";
            }
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->commit();
            }
            //Proceso que graba tarea en INFO_TAREA
            if ( isset($arrayParametrosHist["intDetalleId"]) )
            {
                $arrayParametrosInfoTarea['intDetalleId']   = $arrayParametrosHist["intDetalleId"];
                $arrayParametrosInfoTarea['strUsrCreacion'] = $arrayParametrosHist["strUsrCreacion"];
                $this->crearInfoTarea($arrayParametrosInfoTarea);
            }
           
        }
        catch(\Exception $error)
        {
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }

            $this->serviceUtil->insertError( 'TELCOS+', 
                                             'SoporteService->crearTareaPorJurisdiccion', 
                                             $error->getMessage(), 
                                             'telcos', 
                                             '127.0.0.1' );
                    
            $strStatus                  = "ERROR";
            $strMensaje                 = "No se pudo crear la tarea Motivo: ".$error->getMessage();
            $arrayRespuestaFinal[]      = array('status' => $strStatus,
                                                'tipo' => '', 
                                                'mensaje' => $strMensaje, 
                                                'idDetalle' => '');
            return $arrayRespuestaFinal;
        }
        
        $this->emSoporte->getConnection()->close();

        //*RESPUESTA-------------------------------------------------------------*/
        $arrayRespuestaFinal = array(
            'status'    => $strStatus, 
            'tipo'      => $strTipo,
            'mensaje'   => $strMensaje,
            'idDetalle' => $entityDetalle->getId(),
            'idTarea'   => $objInfoComunicacion->getId());
        return $arrayRespuestaFinal;
        //*----------------------------------------------------------------------*/
    }
    
    /**
     * Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.1 08-07-2020
     * 
     * Función que crea una tarea automática para el control de Fibra al coordinador.
     *
     * @author Néstor Naula López <nnaulal@telconet.ec>
     * @version 1.0 31-08-2018.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 22-02-2021 - Se registra el afectado en la Info_Parte_Afectada.
     *
     * @param array $arrayParametros[
     *                               objTarea      = Entidad tarea,
     *                               latitud       = Latitud de donde se está creando la tarea,
     *                               longitud      = Longitud de donde se está creando la tarea,
     *                               observaciones = Observaciones de la tarea,
     *                               empresaCod    = Código de la empresa,
     *                               ipCreacion    = Ip de donde se está creando la tarea,
     *                               usrCreacion   = Usuario que crea la tarea,
     *                               intPuntoId    = Id del punto
     *                              ]
     * @return array $arrayRespuesta
     */
    public function crearTareaAlCoordinador($arrayParametros)
    {
        $objTarea           = $arrayParametros['objTarea'];
        $strLongitud        = $arrayParametros['longitud'];
        $strLatitud         = $arrayParametros['latitud'];
        $strObservaciones   = $arrayParametros['observaciones'];
        $strEmpresaCod      = $arrayParametros['empresaCod'];
        $strIpCreacion      = $arrayParametros['ipCreacion'];
        $strUsrCreacion     = $arrayParametros['usrCreacion'];
        $intPuntoId         = $arrayParametros['intPuntoId'];
        $strTipoAsignado    = !empty($arrayParametros['tipoAsignado']) ? $arrayParametros['tipoAsignado'] : "EMPLEADO";
        $strTipo            = "";
        $strMensaje         = "";
        $strStatus          = "ERROR";
        $arrayParametrosHist= array();
        $arrayEnvioCorreo   = array();
        $strAsunto          = "";
        $strNombreProceso   = "TAREAS DE AUTOMATIZACION";

        $arrayParametrosHist["strCodEmpresa"]           = $strEmpresaCod;
        $arrayParametrosHist["strUsrCreacion"]          = $strUsrCreacion;
        $arrayParametrosHist["strIpCreacion"]           = $strIpCreacion;
        $arrayParametrosHist["strOpcion"]               = "Historial";
        $arrayParametrosHist["strEnviaDepartamento"]    = "N";

        //*DECLARACION DE TRANSACCIONES------------------------------------------*/
        $this->emSoporte->getConnection()->beginTransaction();
        //*----------------------------------------------------------------------*/
        try
        {
            //InfoDetalle
            $entityDetalle = new InfoDetalle();
            $entityDetalle->setTareaId($objTarea);
            $entityDetalle->setLongitud($strLongitud);
            $entityDetalle->setLatitud($strLatitud);
            $entityDetalle->setPesoPresupuestado(0);
            $entityDetalle->setValorPresupuestado(0);
            $entityDetalle->setObservacion($strObservaciones);
            $entityDetalle->setIpCreacion($strIpCreacion);
            $entityDetalle->setFeCreacion(new \DateTime('now'));
            $entityDetalle->setFeSolicitada(new \DateTime('now'));
            $entityDetalle->setUsrCreacion($strUsrCreacion);
            $this->emSoporte->persist($entityDetalle);
            $this->emSoporte->flush();

            //se obtienen los datos del usuario que crea la incidencia

            $arrayDatosUsuario           = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                             ->getCoordinadorPorUsuario($arrayParametros);
                                                       
            if( isset($arrayDatosUsuario['jefePersonaEmpresaRolId']) && !empty($arrayDatosUsuario['jefePersonaEmpresaRolId']) )
            {
                $arrayDatosJefe = $arrayDatosUsuario;
            }
            else{
                if($arrayDatosUsuario['nombreDepartamento'] == 'Tecnica Sucursal'){
                    $arrayParametrosJefes   = array(
                                                        'strCargo'          => "Subgerente Téc. Regional",
                                                        'strDepartamento'   => "GERENCIA TECNICA NACIONAL"
                                                    );
                       
                    $arrayDatosJefe         = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                ->getJefesSucursalPorRegion($arrayParametrosJefes);
                    
                }
                else if($arrayDatosUsuario['nombreDepartamento'] == 'Operaciones Urbanas')
                {
                    $arrayParametrosJefes   = array(
                                                    'strCargo'          => "Jefe Departamental",
                                                    'strDepartamento'   => $arrayDatosUsuario['nombreDepartamento'],
                                                    'strRegion'         => $arrayDatosUsuario['region']
                                                );
                    $arrayDatosJefe         = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                    ->getJefesSucursalPorRegion($arrayParametrosJefes);
                }
            }
  
            $persona    = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                            ->findOneBy(array('login' => $strUsrCreacion));
            //InfoDetalleAsignacion
            $entityDetalleAsignacion = new InfoDetalleAsignacion();
            $entityDetalleAsignacion->setDetalleId($entityDetalle);
            $entityDetalleAsignacion->setAsignadoId($arrayDatosJefe['departamentoId']);
            $entityDetalleAsignacion->setAsignadoNombre($arrayDatosJefe['nombreDepartamento']);
            $entityDetalleAsignacion->setRefAsignadoId($arrayDatosJefe['personaIdJefe']);
            $entityDetalleAsignacion->setTipoAsignado($strTipoAsignado);
            $entityDetalleAsignacion->setRefAsignadoNombre($arrayDatosJefe['nombresJefe']." ".$arrayDatosJefe['apellidosJefe']);
            $entityDetalleAsignacion->setPersonaEmpresaRolId($arrayDatosJefe['jefePersonaEmpresaRolId']);
            $entityDetalleAsignacion->setUsrCreacion($strUsrCreacion);
            $entityDetalleAsignacion->setFeCreacion(new \DateTime('now'));
            $entityDetalleAsignacion->setIpCreacion($strIpCreacion);
            $entityDetalleAsignacion->setDepartamentoId($arrayDatosUsuario['departamentoId']);
            $entityDetalleAsignacion->setCantonId($arrayDatosUsuario['cantonId']);
            $this->emSoporte->persist($entityDetalleAsignacion);
            $this->emSoporte->flush();

            //Se ingresa el historial de la tarea
            $arrayParametrosHist["strObservacion"]  = $strObservaciones;
            $arrayParametrosHist["strEstadoActual"] = "Asignada";
            $arrayParametrosHist["strAccion"]       = "Asignada";

            if(is_object($entityDetalle))
            {
                $arrayParametrosHist["intDetalleId"] = $entityDetalle->getId();
            }
            $this->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);
            $objAdmiClaseDocumento  = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                                                           ->findOneByNombreClaseDocumento("Notificacion Interna Correo");

            $objFormaContacto       = $this->emComunicacion->getRepository("schemaBundle:AdmiFormaContacto")
                                                           ->findPorDescripcionFormaContacto("Correo Electronico");

            if(is_object($objAdmiClaseDocumento) && is_object($objFormaContacto))
            {
                $objInfoDocumento = new InfoDocumento();
                $objInfoDocumento->setMensaje($strObservaciones);
                $objInfoDocumento->setNombreDocumento("Registro de control de Fibra");
                $objInfoDocumento->setClaseDocumentoId($objAdmiClaseDocumento);
                $objInfoDocumento->setFeCreacion(new \DateTime('now'));
                $objInfoDocumento->setEstado("Activo");
                $objInfoDocumento->setUsrCreacion($strUsrCreacion);
                $objInfoDocumento->setIpCreacion($strIpCreacion);
                $objInfoDocumento->setEmpresaCod($strEmpresaCod);
                $this->emComunicacion->persist($objInfoDocumento);
                $this->emComunicacion->flush();

                $objInfoComunicacion = new InfoComunicacion();
                $objInfoComunicacion->setFormaContactoId($objFormaContacto->getId());
                $objInfoComunicacion->setRemitenteId($arrayDatosJefe['personaIdJefe']);
                $objInfoComunicacion->setRemitenteNombre($arrayDatosJefe['nombresJefe']." ".$arrayDatosJefe['apellidosJefe']);
                $objInfoComunicacion->setClaseComunicacion("Recibido");
                $objInfoComunicacion->setDetalleId($entityDetalle->getId());
                $objInfoComunicacion->setFechaComunicacion(new \DateTime('now'));
                $objInfoComunicacion->setEstado("Activo");
                $objInfoComunicacion->setFeCreacion(new \DateTime('now'));
                $objInfoComunicacion->setUsrCreacion($strUsrCreacion);
                $objInfoComunicacion->setIpCreacion($strIpCreacion);
                $objInfoComunicacion->setEmpresaCod($strEmpresaCod);

                if (!empty($intPuntoId))
                {
                    $objInfoPunto = $this->emComercial->getRepository("schemaBundle:InfoPunto")->find($intPuntoId);
                    if (is_object($objInfoPunto))
                    {
                        $objInfoComunicacion->setPuntoId($objInfoPunto->getId());
                        $objInfoComunicacion->setRemitenteId($objInfoPunto->getId());
                        $objInfoComunicacion->setRemitenteNombre($objInfoPunto->getLogin());

                        $strOpcion = 'Cliente: ' . $objInfoPunto->getNombrePunto() . ' | OPCION: Punto Cliente';
                        $objInfoCriterioAfectado = new InfoCriterioAfectado();
                        $objInfoCriterioAfectado->setId(1);
                        $objInfoCriterioAfectado->setDetalleId($entityDetalle);
                        $objInfoCriterioAfectado->setCriterio("Clientes");
                        $objInfoCriterioAfectado->setOpcion($strOpcion);
                        $objInfoCriterioAfectado->setFeCreacion(new \DateTime('now'));
                        $objInfoCriterioAfectado->setUsrCreacion($strUsrCreacion);
                        $objInfoCriterioAfectado->setIpCreacion($strIpCreacion);
                        $this->emSoporte->persist($objInfoCriterioAfectado);
                        $this->emSoporte->flush();

                        $objInfoParteAfectada = new InfoParteAfectada();
                        $objInfoParteAfectada->setCriterioAfectadoId($objInfoCriterioAfectado->getId());
                        $objInfoParteAfectada->setDetalleId($entityDetalle->getId());
                        $objInfoParteAfectada->setFeIniIncidencia($entityDetalle->getFeCreacion());
                        $objInfoParteAfectada->setTipoAfectado("Cliente");
                        $objInfoParteAfectada->setAfectadoId($objInfoPunto->getId());
                        $objInfoParteAfectada->setAfectadoNombre($objInfoPunto->getLogin());
                        $objInfoParteAfectada->setAfectadoDescripcion($objInfoPunto->getNombrePunto());
                        $objInfoParteAfectada->setFeCreacion(new \DateTime('now'));
                        $objInfoParteAfectada->setUsrCreacion($strUsrCreacion);
                        $objInfoParteAfectada->setIpCreacion($strIpCreacion);
                        $this->emSoporte->persist($objInfoParteAfectada);
                        $this->emSoporte->flush();
                    }
                }

                $this->emComunicacion->persist($objInfoComunicacion);
                $this->emComunicacion->flush();

                $objInfoDocumentoComunicacion = new InfoDocumentoComunicacion();
                $objInfoDocumentoComunicacion->setComunicacionId($objInfoComunicacion);
                $objInfoDocumentoComunicacion->setDocumentoId($objInfoDocumento);
                $objInfoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
                $objInfoDocumentoComunicacion->setEstado('Activo');
                $objInfoDocumentoComunicacion->setUsrCreacion($strUsrCreacion);
                $objInfoDocumentoComunicacion->setIpCreacion($strIpCreacion);
                $this->emComunicacion->persist($objInfoDocumentoComunicacion);
                $this->emComunicacion->flush();

                $arrayEnvioCorreo   = array($arrayDatosJefe['correo']);
                $arrayParametros    = array(
                                                    'idCaso'            => '',
                                                    'perteneceACaso'    => false,
                                                    'numeracion'        => '',
                                                    'referencia'        => '',
                                                    'asignacion'        => $entityDetalleAsignacion,
                                                    'persona'           => $persona ? $persona : false,
                                                    'nombreProceso'     => $strNombreProceso,
                                                    'nombreTarea'       => $objTarea->getNombreTarea() ? $objTarea->getNombreTarea() : '',
                                                    'estado'            => $objTarea->getEstado() ? $objTarea->getEstado() : '',
                                                    'empleadoLogeado'   => $strUsrCreacion,
                                                    'empresa'           => 'TN',
                                                    'detalle'           => $entityDetalle,
                                                    'observacion'       => $strObservaciones ? $strObservaciones : "");
                
                $strAsunto = $strAsunto . " Nueva Tarea, Actividad #".$objInfoComunicacion->getId()." | PROCESO: ".$strNombreProceso." - MOVIL";
                $this->envioPlantilla->generarEnvioPlantilla(
                                                            $strAsunto, 
                                                            $arrayEnvioCorreo, 
                                                            'TAREFIB', 
                                                            $arrayParametros, 
                                                            '10', 
                                                            null, 
                                                            null
                                                         );
                
         
            }

            $strStatus     = "OK";
            $strMensaje    = "Se creó tarea exitósamente.";
        }
        catch(\Exception $e)
        {
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }
            $strStatus             = "ERROR";
            $strMensaje            = "No se pudo crear la tarea para la actualización de las coordenadas! Mensaje: ".$e->getMessage();
            $respuestaFinal[]   = array('status' => $strStatus, 'tipo' => '', 'mensaje' => $strMensaje, 'idDetalle' => '');
            return $respuestaFinal;
        }

        if ($this->emSoporte->getConnection()->isTransactionActive())
        {
            $this->emSoporte->getConnection()->commit();
        }

        $this->emSoporte->getConnection()->close();

        //Proceso que graba tarea en INFO_TAREA
        if ( isset($arrayParametrosHist["intDetalleId"]) )
        {
            $arrayParametrosInfoTarea['intDetalleId']   = $arrayParametrosHist["intDetalleId"];
            $arrayParametrosInfoTarea['strUsrCreacion'] = $arrayParametrosHist["strUsrCreacion"];
            $this->crearInfoTarea($arrayParametrosInfoTarea);
        }
        //*RESPUESTA-------------------------------------------------------------*/
        $respuestaFinal = array('status'=>$strStatus, 'tipo' => $strTipo, 'mensaje' => $strMensaje, 'idDetalle' => $entityDetalle->getId());
        return $respuestaFinal;
        //*----------------------------------------------------------------------*/
    }

    /**
     * Actualización: Se agrega validación para actualzar asignación solicitud cuando ya existe
     * @author Fernando López <filopez@telconet.ec>
     * @version 1.7 19-11-2021
     * 
     * Actualización: Se agrega programación para permitir que se pueda 
     *                crear la asignación con el tabVisible recibido por parámetro.
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.6 04-05-2021
     * 
     * Actualización: Se agrega recepción de parametro array Asignaciones Proactiva 
     *                  arrayAsigProact  => array de asignaciones Proactiva.
     *Se retira porción de codigo que sensaba el estado de la tarea/caso 
     *                  y seteaba una variable para el cierre de la asignación.
     * @author Miguel Angulo <jmangulos@telconet.ec>
     * @version 1.5 12-06-2019
     * 
     * Actualización: Se agrega programación para crear la asignación con estado 
     * cerrado si el caso o la tarea ligada esta Cerrado o Finalizada respectivamente.
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.4 03-04-2019
     * 
     * Actualización: Se ingresa el id de la oficina en la asignacion
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.3 15-01-2019
     * 
     * Actualización: Se corrige validación cuando el número de tarea o caso es incorrecto
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.2 06-12-2018
     * 
     * Actualización: Se permite agregar el numero de tarea o caso directamente al momento
     * de crear una asignación y lo crea en estado EnGestion
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.1 03-10-2018
     * 
     * Crea una asignación de solicitud de soporte
     * @param $arrParametros
     * [
     *     strOrigen        => Origen de la asignación
     *     strTipoAtencion  => tipo de atención de la solicitud CASO o TAREA
     *     strLogin         => login del cliente
     *     strTipoProblema  => tipo de problema del cliente
     *     strNombreReporta => nombre de la persona que reporta el problema
     *     strNombreSitio   => nombre del sitio donde se reporta el problema
     *     strCriticidad    => criticidad ALTA, MEDIA o BAJA
     *     strAgente        => usuario del empleado a quien se asigna el problema
     *     strDetalle       => detalle del problema
     *     strNumero        => número de tarea o caso
     *     idEmpresa        => id de la empresa
     *     intDepartamentoId=> id del departamento
     *     intOficinaId     => id de la oficina
     *     strUsrCreacion   => usuario del empleado quien asigna el problema
     *     strIpCreacion    => ip del empleado quien asigna el problema
     * ]
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.0 31-07-2018
     * @since 1.0
     * @return JsonResponse
     */
    public function crearAsignacionSolicitud($arrParametros)
    {
        $intDepartamentoId    = $arrParametros['intDepartamentoId'];
        $intOficinaId         = $arrParametros['intOficinaId'];
        $strOrigen            = $arrParametros['strOrigen'];
        $strTipoAtencion      = $arrParametros['strTipoAtencion'];
        $strLogin             = $arrParametros['strLogin'];
        $strTipoProblema      = $arrParametros['strTipoProblema'];
        $strNombreReporta     = $arrParametros['strNombreReporta'];
        $strNombreSitio       = $arrParametros['strNombreSitio'];
        $strCriticidad        = $arrParametros['strCriticidad'];
        $strAgente            = $arrParametros['strAgente'];
        $strDetalle           = $arrParametros['strDetalle'];
        $strCodEmpresa        = $arrParametros['idEmpresa'];
        $strUsrCreacion       = $arrParametros['strUsrCreacion'];
        $strIpCreacion        = $arrParametros['strIpCreacion'];
        $strNumero            = $arrParametros['strNumero'];
        $strTabVisible        = $arrParametros['strTabVisible'];
        $arrayAsigProactivas  = json_decode($arrParametros['arrayAsigProact']);
        $strRespuesta         = "OK";
        $strUpdateAsignacion  = !empty($arrParametros['strUpdateAsignacion'])?$arrParametros['strUpdateAsignacion']:'N';
        $strLoginReasigna     = !empty($arrParametros['strLoginReasigna'])?$arrParametros['strLoginReasigna']:'';
        $this->emSoporte->beginTransaction();
        try
        {    
            /*fix para la accion creación de nueva asiganción desde el modulo agente=>asignaciones,
            se debe actualizar la asignación  siempre que tenga el rol de permiteVerNuevosCamposTareas */
            $entityUpdateInfoAsignacionSolicitud = null;
            if($strUpdateAsignacion === 'S')
            {
                $objInfoAsignacionSolicitud = $this->emSoporte->getRepository("schemaBundle:InfoAsignacionSolicitud")
                                                                ->findOneBy(array('referenciaId' => $strNumero),
                                                                                array('id'        => 'DESC'));
                if($objInfoAsignacionSolicitud)
                {
                    $entityUpdateInfoAsignacionSolicitud = $objInfoAsignacionSolicitud;
                }                                                  
            }
            
            if($strUpdateAsignacion === 'S' && is_object($entityUpdateInfoAsignacionSolicitud))
            {
                $entityInfoAsignacionSolicitud = $entityUpdateInfoAsignacionSolicitud;
                //Info para actualizar una asignación que se actualiza cuando se realiza una reasignación desde agente->asignación
                if($strLoginReasigna === 'S')
                {
                    $strNombreReporta = $entityInfoAsignacionSolicitud->getNombreReporta();
                    $strNombreSitio = $entityInfoAsignacionSolicitud->getNombreSitio();
                }
            }else
            {
                $entityInfoAsignacionSolicitud = new InfoAsignacionSolicitud();
            }

            $entityInfoAsignacionSolicitud->setDepartamentoId($intDepartamentoId);
            $entityInfoAsignacionSolicitud->setOficinaId($intOficinaId);
            $entityInfoAsignacionSolicitud->setOrigen($strOrigen);
            $entityInfoAsignacionSolicitud->setEmpresaCod($strCodEmpresa);
            $entityInfoAsignacionSolicitud->setTipoAtencion($strTipoAtencion);
            $entityInfoAsignacionSolicitud->setReferenciaCliente($strLogin);
            $entityInfoAsignacionSolicitud->setTipoProblema($strTipoProblema);
            $entityInfoAsignacionSolicitud->setNombreReporta($strNombreReporta);
            $entityInfoAsignacionSolicitud->setNombreSitio($strNombreSitio);
            $entityInfoAsignacionSolicitud->setCriticidad($strCriticidad);
            $entityInfoAsignacionSolicitud->setUsrAsignado($strAgente);
            $entityInfoAsignacionSolicitud->setDetalle($strDetalle); 
            $entityInfoAsignacionSolicitud->setFeCreacion(new \DateTime('now'));
            $entityInfoAsignacionSolicitud->setUsrCreacion($strUsrCreacion);
            $entityInfoAsignacionSolicitud->setIpCreacion($strIpCreacion);
            $entityInfoAsignacionSolicitud->setCambioTurno('N');

            if (($strTipoAtencion === "TAREA") && !empty($strNumero))
            {
                $entityInfoComunicacion = $this->emSoporte->getRepository("schemaBundle:InfoComunicacion")->findOneById($strNumero);
                if (is_object($entityInfoComunicacion))
                {
                    $entityInfoAsignacionSolicitud->setReferenciaId(intval($strNumero));
                    $entityInfoAsignacionSolicitud->setEstado('EnGestion');
                    $arrayParametrosEstadoTarea                    = array();
                    $arrayParametrosEstadoTarea['intNumeroTarea']  = intval($strNumero);
                    $arrayParametrosEstadoTarea["strTipoAtencion"] = $strTipoAtencion;
                }
                else
                {
                    $strRespuesta = "No existe número de Tarea";
                    return $strRespuesta;
                }
            }
            elseif (($strTipoAtencion === "CASO") && !empty($strNumero))
            {
                $entityInfoCaso = $this->emSoporte->getRepository("schemaBundle:InfoCaso")->findOneByNumeroCaso($strNumero);
                if (is_object($entityInfoCaso))
                {
                    $entityInfoAsignacionSolicitud->setReferenciaId(intval($entityInfoCaso->getId()));
                    $entityInfoAsignacionSolicitud->setEstado('EnGestion');
                    $arrayParametrosEstadoCaso                    = array();
                    $arrayParametrosEstadoCaso["intIdCaso"]       = intval($entityInfoCaso->getId());
                    $arrayParametrosEstadoCaso["strTipoAtencion"] = $strTipoAtencion;

                }
                else
                {
                    $strRespuesta = "No existe número de Caso";
                    return $strRespuesta;
                }
            }
            else
            {
                $entityInfoAsignacionSolicitud->setEstado('Pendiente');
            }
            if (!empty($strTabVisible) && isset($strTabVisible))
            {
                $entityInfoAsignacionSolicitud->setTabVisible($strTabVisible);
            }
            $this->emSoporte->persist($entityInfoAsignacionSolicitud);
            
            //Crea un seguimiento por crear nueva asignación
            $arrayParametrosSeguimiento['intIdAsignacion']            = $entityInfoAsignacionSolicitud->getId();
            $arrayParametrosSeguimiento['strDetalle']                 = "Se creó nueva asignación";
            $arrayParametrosSeguimiento['strUsuarioCreacion']         = $strUsrCreacion;
            $arrayParametrosSeguimiento['strIpCreacion']              = $strIpCreacion;
            $arrayParametrosSeguimiento['strUsuarioGestion']          = "";
            $arrayParametrosSeguimiento['strGestionado']              = "S";
            $arrayParametrosSeguimiento['intSeguimientoAsignacionId'] = null;
            $arrayParametrosSeguimiento['strProcedencia']             = 'Interno';
             
            //Se verifica que el array no este vacio y se procede a hacer la relacion de asignaciones padres e hijas
            if(count($arrayAsigProactivas) > 0)
            {                                  
                $arreglo = array(
                    "inIdAsigPadre"   => $arrayParametrosSeguimiento['intIdAsignacion'],
                    "arrayIdAsigHija" => $arrayAsigProactivas
                );
                $this->agregaAsignacionesHija($arreglo);
            }
            
            $this->emSoporte->flush();
            $this->emSoporte->commit();
            $this->crearSeguimientoAsignacionSolicitud($arrayParametrosSeguimiento);
                
            //Crea seguimiento por cierre de asignación por tener tarea finalizada o caso cerrado
            if ($entityInfoAsignacionSolicitud->getEstado() === 'Cerrado' && $entityInfoAsignacionSolicitud->getTipoAtencion() === "TAREA")
            {
                $arrayParametrosSeguimiento['strDetalle'] = "Se cierra asignación en forma automática porque la tarea ligada esta finalizada";
                $this->crearSeguimientoAsignacionSolicitud($arrayParametrosSeguimiento);
            }
            elseif ($entityInfoAsignacionSolicitud->getEstado() === 'Cerrado' && $entityInfoAsignacionSolicitud->getTipoAtencion() === "CASO")
            {
                $arrayParametrosSeguimiento['strDetalle'] = "Se cierra asignación en forma automática porque el caso ligado esta cerrado";
                $this->crearSeguimientoAsignacionSolicitud($arrayParametrosSeguimiento);
            }
          
            //Crea un Historial por crear nueva asignación
            $arrParametrosHist['intIdAsignacion'] = $entityInfoAsignacionSolicitud->getId();
            $arrParametrosHist['strTipo']         = 'ASIGNACION';
            $arrParametrosHist['strUsrAsignado']  = $strAgente;
            $arrParametrosHist['strUsrCreacion']  = $strUsrCreacion;
            $arrParametrosHist['strIpCreacion']   = $strIpCreacion;
            $this->crearHistorialAsignacionSolicitud($arrParametrosHist);

        }
        catch(\Exception $e)
        {
            if($this->emSoporte->isTransactionActive())
            {
                $this->emSoporte->rollback();
                $this->emSoporte->close();
            }
            $strRespuesta = " Error SoporteService.crearAsignacionSolicitud: " . $e . ", <br> Favor Notificar a Sistemas";
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.crearAsignacionSolicitud',
                                             'Error SoporteService.crearAsignacionSolicitud:'.$e->getMessage(),
                                             $usrCreacion,
                                             $ipCreacion);
            return $strRespuesta;
        }

        if(array_key_exists('boolFlagRespuesta', $arrParametros))
        {
            if($arrParametros['boolFlagRespuesta'])
            {
                return 'OK|'.$arrayParametrosSeguimiento['intIdAsignacion'];
            }
        }else
        {
            return 'OK';
        }

    }
    
    /*
     * Actualización: Proceso para agrega Asignacion Proactiva como dependiente (Hija).
     * @param $arrParametros 
     * [
     *      idAsignacionPadre => id de la asignación Padre
     *      arrayAsignaciHija => id asignación(es) hija(s)
     * ]
     * @author Miguel Angulo <jmangulos@telconet.ec>
     * @version 1.1 20-06-2019
     * 
     * 
    */
    public function agregaAsignacionesHija($arrayParametros)
    {
        $strUsrCreacion       = $arrayParametros['strUsrCreacion'];
        $strIpCreacion        = $arrayParametros['strIpCreacion'];
        $strRespuesta = "Ninguna relación fue efectuada.";
        try
        {
            $contadorAsignaciones    = 0;
            $intIdAsignacionPadre    = $arrayParametros['inIdAsigPadre'];
            $arrayIdAsignacionesHija = $arrayParametros['arrayIdAsigHija'];
            foreach ($arrayIdAsignacionesHija as $asignaciones)
            {
                $objAsignacionProactiva = $this->emSoporte->getRepository('schemaBundle:InfoAsignacionSolicitud')->find($asignaciones->id );
                $objAsignacionProactiva->setAsignacionPadreId($intIdAsignacionPadre);
                $this->emSoporte->persist($objAsignacionProactiva);
                $this->emSoporte->flush();   
                $contadorAsignaciones++;
            }
            
            if( $contadorAsignaciones > 0)
            {
                $strRespuesta = "Se relacionó ". $contadorAsignaciones ." Asnignacion(es).";
            }
        }
        catch(\Exception $e)
        {
            if($this->emSoporte->isTransactionActive())
            {
                $this->emSoporte->rollback();
                $this->emSoporte->close();
            }
            $strRespuesta = " Error SoporteService.agregaAsignacionesHija: " . $e . ", <br> Favor Notificar a Sistemas";
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.agregaAsignacionesHija',
                                             'Error SoporteService.agregaAsignacionesHija:'.$e->getMessage(),
                                             $strUsrCreacion,
                                             $strIpCreacion
                                            );
            return $strRespuesta;
        }

        return $strRespuesta;
    }


    
    
    /**
     * 
     * Actualización: Se agrega el campo comunicacionId para que lo ingrese en el seguimiento si fue enviado como parámetro. 
     * @author Andrés Montero Holguin. <amontero@telconet.ec>
     * @version 1.2 10-02-2021 
     * 
     * Actualización: Se elimina hacer commit ya que en el controller AgenteController se realiza el commit.
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.1 01-03-2019
     * 
     * Crea un seguimiento de asignación de solicitud de soporte
     * @param $arrParametros
     * [
     *     intIdAsignacion  => id de la asignación
     *     strDetalle       => detalle del seguimiento de la asignación
     *     strUsrCreacion   => usuario del empleado quien crea seguimiento
     *     strIpCreacion    => ip del empleado quien crea seguimiento
     * ]
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.0 31-07-2018
     * @since 1.0
     * @return JsonResponse
     */
    public function crearSeguimientoAsignacionSolicitud($arrParametros)
    {
        $intAsignacionSolId         = $arrParametros['intIdAsignacion'];
        $strDetalle                 = $arrParametros['strDetalle'];
        $usrCreacion                = $arrParametros['strUsuarioCreacion'];
        $ipCreacion                 = $arrParametros['strIpCreacion'];
        $strUsrGestion              = $arrParametros['strUsuarioGestion'];
        $strGestionado              = $arrParametros['strGestionado'];
        $strProcedencia             = $arrParametros['strProcedencia'];
        $intSeguimientoAsignacionId = $arrParametros['intSeguimientoAsignacionId'];
        $intComunicacionId          = $arrParametros['intComunicacionId'];
        try
        {
            $strDetalle = $this->eliminarSimbolosDeTags($strDetalle);

            $entityInfoAsignacionSolicitud = $this->emSoporte->getRepository("schemaBundle:InfoAsignacionSolicitud")
                                                             ->findOneById($intAsignacionSolId);

            if (is_object($entityInfoAsignacionSolicitud))
            {
                $entityInfoSeguimientoAsignacion = new InfoSeguimientoAsignacion();
                $entityInfoSeguimientoAsignacion->setAsignacionSolicitudId($entityInfoAsignacionSolicitud);
                $entityInfoSeguimientoAsignacion->setDetalle($strDetalle); 
                $entityInfoSeguimientoAsignacion->setFeCreacion(new \DateTime('now'));
                $entityInfoSeguimientoAsignacion->setUsrCreacion($usrCreacion);
                $entityInfoSeguimientoAsignacion->setIpCreacion($ipCreacion);
                $entityInfoSeguimientoAsignacion->setProcedencia($strProcedencia);
                $entityInfoSeguimientoAsignacion->setEstado('Activo');
                $entityInfoSeguimientoAsignacion->setGestionado($strGestionado);
                if (!empty($strUsrGestion))
                {
                    $entityInfoSeguimientoAsignacion->setUsrGestion($strUsrGestion);
                }
                if (!empty($intSeguimientoAsignacionId))
                {
                    $entityInfoSeguimientoAsignacion->setSeguimientoAsignacionId($intSeguimientoAsignacionId);
                }
                if (!empty($intComunicacionId))
                {
                    $entityInfoSeguimientoAsignacion->setComunicacionId($intComunicacionId);
                }
                $this->emSoporte->persist($entityInfoSeguimientoAsignacion);
                
                $this->emSoporte->flush();
            }
            else
            {
                throw new \Exception('No se encontro id de asignación para crear seguimiento');
            }

        }
        catch(\Exception $e)
        {
            if($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->rollback();
                $this->emSoporte->close();
            }

            $respuesta = " Error SoporteService.crearSeguimientoAsignacionSolicitud: " . $e . ", <br> Favor Notificar a Sistemas";
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.crearAsignacionSolicitud',
                                             'Error SoporteService.crearSeguimientoAsignacionSolicitud:'.$e->getMessage(),
                                             $usrCreacion,
                                             $ipCreacion);
            return $respuesta;
        }
        return 'OK';
    }

    /**
     * 
     * Actualización: Se agrega programación para permitir modificar el tipo de problema
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.3 20-02-2019
     * 
     * Actualización: Se agrega programación para ingresar un seguimiento si se cambia de estado a la asignación
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.2 01-02-2019
     * 
     * Actualización: Se agrega opción de modificar el nombre reporta, nombre sitio y dato adicional
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.1 28-11-2018
     * 
     * Modifica asignación de solicitud de soporte
     * @param $arrParametros
     * [
     *     intIdAsignacion  => id de la asignación
     *     strEstado        => estado de la asignación
     *     strNombreReporta => nombre de quien reporta
     *     strNombreSitio   => nombre del sitio
     *     strDatoAdicional => dato adicional
     *     strTipoProblema  => tipo de problema
     *     strUsrAsignado   => usuario asignado de la asignación
     *     strUsrUltMod     => usuario de última modificación
     *     strFeUltMod      => fecha de última modificación
     * ]
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.0 16-08-2018
     * @since 1.0
     * @return JsonResponse
     */
    public function modificarAsignacionSolicitud($arrayParametros)
    {
        $intAsignacionSolId = $arrayParametros['intIdAsignacion'];
        $strEstado          = $arrayParametros['strEstado'];
        $strNombreReporta   = $arrayParametros['strNombreReporta'];
        $strNombreSitio     = $arrayParametros['strNombreSitio'];
        $strDatoAdicional   = $arrayParametros['strDatoAdicional'];
        $strTipoProblema    = $arrayParametros['strTipoProblema'];
        $strTabVisible      = $arrayParametros['strTabVisible'];
        $strTramo           = $arrayParametros['strTramo'];
        $strHiloTelefonica  = $arrayParametros['strHiloTelefonica'];
        $strDatoAdicional   = $arrayParametros['strDatoAdicional'];
        $strCircuito        = $arrayParametros['strCircuito'];
        $strNotificacion    = $arrayParametros['strNotificacion'];
        $strUsrAsignado     = $arrayParametros['strUsrAsignado'];
        $strUsrUltMod       = $arrayParametros['strUsrUltMod'];
        $objFeUltMod        = $arrayParametros['dateFeUltMod'];
        $strIpUltMod        = $arrayParametros['strIpUltMod'];

        try
        {

            $entityInfoAsignacionSolicitud = $this->emSoporte->getRepository("schemaBundle:InfoAsignacionSolicitud")
                                                             ->findOneById($intAsignacionSolId);
            if (is_object($entityInfoAsignacionSolicitud))
            {
                if ($strNombreReporta !== null)
                {
                    $entityInfoAsignacionSolicitud->setNombreReporta($strNombreReporta);
                }
                if ($strNombreSitio !== null)
                {
                    $entityInfoAsignacionSolicitud->setNombreSitio($strNombreSitio);
                }
                if ($strDatoAdicional !== null)
                {
                    $entityInfoAsignacionSolicitud->setDatoAdicional($strDatoAdicional);
                }
                if ($strTipoProblema !== null)
                {
                    $entityInfoAsignacionSolicitud->setTipoProblema($strTipoProblema);
                }
                if ($strTabVisible !== null)
                {
                    $entityInfoAsignacionSolicitud->setTabVisible($strTabVisible);
                }
                if ($strTramo !== null)
                {
                    $entityInfoAsignacionSolicitud->setTramo($strTramo);
                }
                if ($strHiloTelefonica !== null)
                {
                    $entityInfoAsignacionSolicitud->setHiloTelefonica($strHiloTelefonica);
                }
                if ($strCircuito !== null)
                {
                    $entityInfoAsignacionSolicitud->setCircuito($strCircuito);
                }
                if ($strNotificacion !== null)
                {
                    $entityInfoAsignacionSolicitud->setNotificacion($strNotificacion);
                }
                if (!empty($strEstado))
                {
                    $entityInfoAsignacionSolicitud->setEstado($strEstado);
                }
                if (!empty($strUsrAsignado))
                {
                    $entityInfoAsignacionSolicitud->setUsrAsignado($strUsrAsignado);
                }
                if (!empty($strUsrUltMod))
                {
                    $entityInfoAsignacionSolicitud->setUsrUltMod($strUsrUltMod);
                }
                if (!empty($objFeUltMod))
                {
                    $entityInfoAsignacionSolicitud->setFeUltMod($objFeUltMod);
                }

                $this->emSoporte->persist($entityInfoAsignacionSolicitud);

                //Si se cambia el estado de la asignación se ingresa un seguimiento
                if (!empty($strEstado) && ($strEstado === 'Cerrado' || $strEstado === 'Eliminado'))
                {
                    $arrayParametrosSeguimiento['intIdAsignacion']            = $intAsignacionSolId;
                    $arrayParametrosSeguimiento['strDetalle']                 = "Se cambia estado de asignación a ".$strEstado;
                    $arrayParametrosSeguimiento['strUsuarioCreacion']         = $strUsrUltMod;
                    $arrayParametrosSeguimiento['strUsuarioGestion']          = "";
                    $arrayParametrosSeguimiento['strIpCreacion']              = $strIpUltMod;
                    $arrayParametrosSeguimiento['strGestionado']              = "S";
                    $arrayParametrosSeguimiento['strProcedencia']             = "Interno";
                    $arrayParametrosSeguimiento['intSeguimientoAsignacionId'] = null;

                    $this->crearSeguimientoAsignacionSolicitud($arrayParametrosSeguimiento);
                }

                $this->emSoporte->flush();
            }
            else
            {
                throw new \Exception('No se encontro id de asignación para modificar una asignación');
            }
        }
        catch(\Exception $e)
        {
            if($this->emSoporte->isTransactionActive())
            {
                $this->emSoporte->rollback();
            }

            $respuesta = " Error SoporteService.modificarAsignacionSolicitud: " . $e . ", <br> Favor Notificar a Sistemas";
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.modificarAsignacionSolicitud',
                                             'Error SoporteService.modificarAsignacionSolicitud:'.$e->getMessage(),
                                             $strUsrUltMod,
                                             $strIpUltMod);
            return $respuesta;
        }

        return 'OK';
    }

    /**
     * Actualización: Retira porción de codigo que sensaba el estado de la tarea/caso y seteaba
     * una variable para el cierre de la asignación.
     * @author Miguel Angulo <jmangulos@telconet.ec>
     * @version 1.4 12-06-2019
     * 
     * Actualización: Se agrega programación para cambiar estado de la asignación a 
     * cerrado si el caso o la tarea ligada esta Cerrado o Finalizada respectivamente.
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.3 03-04-2019
     * 
     * Actualización: Se corrige validación de que exista el número de tarea o caso
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.2 11-01-2019
     * 
     * Actualización: Se corrige que al modificar tipo de atención de CASO a TAREA
     * que se actualice correctamente
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.1 29-11-2018
     * 
     * Agrega el número de tarea o caso a la asignación
     * @param $arrParametros
     * [
     *     intIdAsignacion  => id de la asignación
     *     strEstado        => estado de la asignación
     *     strUsrAsignado   => usuario asignado de la asignación
     *     strUsrUltMod     => usuario de última modificación
     *     strFeUltMod      => fecha de última modificación
     * ]
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.0 16-08-2018
     * @since 1.0
     * @return JsonResponse
     */
    public function agregarNumeroEnAsignacionSolicitud($arrayParametros)
    {
        $intAsignacionSolId = $arrayParametros['intIdAsignacion'];
        $strNumero          = $arrayParametros['strNumeroTarea'];
        $strTipoAtencion    = $arrayParametros['strTipoAtencion'];
        $strTipoProblema    = $arrayParametros['strTipoProblema'];
        $strUsuario         = $arrayParametros['strUsuario'];
        $strIp              = $arrayParametros['strIpCreacion'];
        $this->emSoporte->beginTransaction();
        try
        {
            $entityInfoAsignacionSolicitud = $this->emSoporte->getRepository("schemaBundle:InfoAsignacionSolicitud")
                                                             ->findOneById($intAsignacionSolId);
            if (is_object($entityInfoAsignacionSolicitud))
            {
                if ($strTipoAtencion === "TAREA")
                {
                    $entityInfoComunicacion = $this->emComunicacion->getRepository("schemaBundle:InfoComunicacion")->findOneById($strNumero);
                    if (is_object($entityInfoComunicacion))
                    {
                        $entityInfoAsignacionSolicitud->setReferenciaId(intval($strNumero));
                        $entityInfoAsignacionSolicitud->setEstado("EnGestion");
                        $arrayParametrosEstadoTarea                    = array();
                        $arrayParametrosEstadoTarea['intNumeroTarea']  = intval($strNumero);
                        $arrayParametrosEstadoTarea["strTipoAtencion"] = $strTipoAtencion;

                        if(!empty($strTipoAtencion))
                        {
                            $entityInfoAsignacionSolicitud->setTipoAtencion($strTipoAtencion);
                        }
                        if(!empty($strTipoProblema))
                        {
                            $entityInfoAsignacionSolicitud->setTipoProblema($strTipoProblema);
                        }
                        $this->emSoporte->persist($entityInfoAsignacionSolicitud);
                        $this->emSoporte->flush();
                    }
                    else
                    {
                        $strRespuesta = "No existe número de Tarea";
                        return $strRespuesta;
                    }
                }
                elseif ($strTipoAtencion === "CASO")
                {
                    $entityInfoCaso = $this->emSoporte->getRepository("schemaBundle:InfoCaso")->findOneByNumeroCaso($strNumero);
                    if (is_object($entityInfoCaso))
                    {
                        $entityInfoAsignacionSolicitud->setReferenciaId(intval($entityInfoCaso->getId()));
                        $entityInfoAsignacionSolicitud->setEstado("EnGestion");
                        $arrayParametrosEstadoCaso                    = array();
                        $arrayParametrosEstadoCaso["intIdCaso"]       = intval($entityInfoCaso->getId());
                        $arrayParametrosEstadoCaso["strTipoAtencion"] = $strTipoAtencion;

                        if(!empty($strTipoAtencion))
                        {
                            $entityInfoAsignacionSolicitud->setTipoAtencion($strTipoAtencion);
                        }
                        if(!empty($strTipoProblema))
                        {
                            $entityInfoAsignacionSolicitud->setTipoProblema($strTipoProblema);
                        }
                        $this->emSoporte->persist($entityInfoAsignacionSolicitud);
                        $this->emSoporte->flush();
                    }
                    else
                    {
                        $strRespuesta = "No existe número de Caso";
                        return $strRespuesta;
                    }
                }

                $arrayParametrosSeguimiento['intIdAsignacion']            = $entityInfoAsignacionSolicitud->getId();
                $arrayParametrosSeguimiento['strDetalle']                 = "Se agregó número de ".$strTipoAtencion." #".$strNumero;
                $arrayParametrosSeguimiento['strUsuarioCreacion']         = $strUsuario;
                $arrayParametrosSeguimiento['strUsuarioGestion']          = "";
                $arrayParametrosSeguimiento['strIpCreacion']              = $strIp;
                $arrayParametrosSeguimiento['strGestionado']              = "S";
                $arrayParametrosSeguimiento['strProcedencia']             = "Interno";
                $arrayParametrosSeguimiento['intSeguimientoAsignacionId'] = null;
                $this->crearSeguimientoAsignacionSolicitud($arrayParametrosSeguimiento);
                $this->emSoporte->commit();
                //Crea seguimiento por cierre de asignación por tener tarea finalizada o caso cerrado 
                if ($entityInfoAsignacionSolicitud->getEstado() === 'Cerrado' && $entityInfoAsignacionSolicitud->getTipoAtencion() === "TAREA")
                {
                    $arrayParametrosSeguimiento['strDetalle'] = "Se cierra asignación en forma automática porque la tarea ligada esta finalizada";
                    $this->crearSeguimientoAsignacionSolicitud($arrayParametrosSeguimiento);
                }
                elseif ($entityInfoAsignacionSolicitud->getEstado() === 'Cerrado' && $entityInfoAsignacionSolicitud->getTipoAtencion() === "CASO")
                {
                    $arrayParametrosSeguimiento['strDetalle'] = "Se cierra asignación en forma automática porque el caso ligado esta cerrado";
                    $this->crearSeguimientoAsignacionSolicitud($arrayParametrosSeguimiento);
                }

            }
            else
            {
                $strRespuesta = 'No se encontró id de asignación para agregar número de tarea o caso';
                return $strRespuesta;
            }
        }
        catch(\Exception $e)
        {
            if($this->emSoporte->isTransactionActive())
            {
                $this->emSoporte->rollback();
                $this->emSoporte->close();
            }

            $strRespuesta = " Error SoporteService.agregarNumeroEnAsignacionSolicitud: " . $e . ", <br> Favor Notificar a Sistemas";
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.agregarNumeroEnAsignacionSolicitud',
                                             'Error SoporteService.agregarNumeroEnAsignacionSolicitud:'.$e->getMessage(),
                                             $strUsuario,
                                             $strIp);
            return $strRespuesta;
        }
        return 'OK';
    }

    /**
     * Modifica seguimiento de asignación
     * @param $arrParametros
     * [
     *     intIdSeguimiento => id del seguimiento de asignación
     *     strEstado        => estado de la asignación
     *     strUsrUltMod     => usuario de última modificación
     *     strFeUltMod      => fecha de última modificación
     * ]
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.0 16-08-2018
     * @since 1.0
     * @return JsonResponse
     */
    public function modificarSeguimientoAsignacion($arrParametros)
    {
        $intIdSeguimiento = $arrParametros['intIdSeguimiento'];
        $strEstado        = $arrParametros['strEstado'];
        $strUsrUltMod     = $arrParametros['strUsrUltMod'];
        $dateFeUltMod     = $arrParametros['dateFeUltMod'];
        $strIpUltMod      = $arrParametros['strIpUltMod'];
        $this->emSoporte->beginTransaction();
        try
        {
            $entityInfoSeguimientoAsignacion = $this->emSoporte->getRepository("schemaBundle:InfoSeguimientoAsignacion")
                                                               ->findOneById($intIdSeguimiento);
            if (is_object($entityInfoSeguimientoAsignacion))
            {
                if (!empty($strEstado))
                {
                    $entityInfoSeguimientoAsignacion->setEstado($strEstado);
                }
                if (!empty($strUsrUltMod))
                {
                    $entityInfoSeguimientoAsignacion->setUsrUltMod($strUsrUltMod);
                }                
                if (!empty($dateFeUltMod))
                {
                    $entityInfoSeguimientoAsignacion->setFeUltMod($dateFeUltMod);
                }                

                $this->emSoporte->persist($entityInfoSeguimientoAsignacion);

                $this->emSoporte->flush();
                $this->emSoporte->commit();
                $this->emSoporte->close();
            }
            else
            {
                throw new \Exception('No se encontro id de seguimiento para eliminar');
            }
        }
        catch(\Exception $e)
        {
            if($this->emSoporte->isTransactionActive())
            {
                $this->emSoporte->rollback();
                $this->emSoporte->close();
            }

            $respuesta = " Error SoporteService.modificarSeguimientoAsignacion: " . $e . ", <br> Favor Notificar a Sistemas";
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.modificarSeguimientoAsignacion',
                                             'Error SoporteService.modificarSeguimientoAsignacion:'.$e->getMessage(),
                                             $strUsrUltMod,
                                             $strIpUltMod);
            return $respuesta;
        }
        return 'OK';
    }

    /**
     * 
     * Actualización: Se agrega programación para registrar la fecha y hora de cambio de turno en el historial de la asignación
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.5 28-05-2020
     * 
     * Crea un seguimiento de asignación de solicitud de soporte
     * @param $arrParametros
     * [
     *     intIdAsignacion     => id de la asignación
     *     strDetalle          => detalle del seguimiento de la asignación
     *     strUsrCreacion      => usuario del empleado quien crea seguimiento
     *     strIpCreacion       => ip del empleado quien crea seguimiento
     *     objFechaHoraCambioT => fecha y hora de cambio de turno
     * ]
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.0 31-07-2018
     * @since 1.0
     * @return JsonResponse
     */
    public function crearHistorialAsignacionSolicitud($arrParametros)
    {
        $intAsignacionSolId = $arrParametros['intIdAsignacion'];
        $strTipo            = $arrParametros['strTipo'];
        $strUsrAsignado     = $arrParametros['strUsrAsignado'];
        $strUsrCreacion     = $arrParametros['strUsrCreacion'];
        $strIpCreacion      = $arrParametros['strIpCreacion'];
        $objFeCambioTurno   = $arrParametros['objFechaHoraCambioT'];

        $this->emSoporte->beginTransaction();
        try
        {

            $entityInfoAsignacionSolicitud = $this->emSoporte->getRepository("schemaBundle:InfoAsignacionSolicitud")
                                                             ->findOneById($intAsignacionSolId);

            if (is_object($entityInfoAsignacionSolicitud))
            {
                $entityInfoAsignacionSolHist = new InfoAsignacionSolicitudHist();
                $entityInfoAsignacionSolHist->setAsignacionSolicitudId($entityInfoAsignacionSolicitud);
                $entityInfoAsignacionSolHist->setTipo($strTipo);
                $entityInfoAsignacionSolHist->setFeCreacion(new \DateTime('now'));
                $entityInfoAsignacionSolHist->setUsrCreacion($strUsrCreacion);
                $entityInfoAsignacionSolHist->setIpCreacion($strIpCreacion);
                $entityInfoAsignacionSolHist->setUsrAsignado($strUsrAsignado);
                $entityInfoAsignacionSolHist->setEstado('Activo');
                if (is_object($objFeCambioTurno) && $objFeCambioTurno != "" && $objFeCambioTurno != null)
                {
                    $entityInfoAsignacionSolHist->setFeCambioTurno($objFeCambioTurno);
                }
                $this->emSoporte->persist($entityInfoAsignacionSolHist);
                

                $this->emSoporte->flush();
                $this->emSoporte->commit();
                //$this->emSoporte->close();
            }
            else
            {
                throw new \Exception('No se encontro id de asignación para crear seguimiento');
            }

        }
        catch(\Exception $e)
        {
            if($this->emSoporte->isTransactionActive())
            {
                $this->emSoporte->rollback();
                $this->emSoporte->close();
            }

            $respuesta = " Error SoporteService.crearHistorialAsignacionSolicitud: " . $e . ", <br> Favor Notificar a Sistemas";
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.crearHistorialAsignacionSolicitud',
                                             'Error SoporteService.crearHistorialAsignacionSolicitud:'.$e->getMessage(),
                                             $strUsrCreacion,
                                             $strIpCreacion);
            return $respuesta;
        }

        return 'OK';
    }


    
    /**
     * Función que sirve para enviar una notificación al dar factibilidad a un servicio Small Business con tipo de orden traslado dependiendo 
     * si el olt del punto origen es diferente del olt del punto destino.
     * Los destinatarios de ésta notificación serán el asesor comercial y el usuario que se encuentre en sesión 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 07-02-2019 Se modifica el asunto para que sea de acuerdo al producto del servicio(Internet Small Business o TelcoHome)
     *  
     */
    public function crearNotifFactibTrasladoSb($arrayParametros)
    {
        $strCliente             = "";
        $objServicio            = $arrayParametros["objServicio"];
        $intIdOltOrigen         = $arrayParametros["intIdOltOrigen"];
        $intIdOltDestino        = $arrayParametros["intIdOltDestino"];
        $strCodEmpresa          = $arrayParametros["strCodEmpresa"];
        $strIpClient            = $arrayParametros["strIpClient"];
        $strUsrSession          = $arrayParametros["strUsrSession"];
        $strObservacionNotif    = "";
        $strNombreJurisdiccion  = "";
        $this->emComercial->beginTransaction();
        try
        {
            if(is_object($objServicio) && $intIdOltDestino > 0 && !empty($strCodEmpresa)  && !empty($strIpClient) && !empty($strUsrSession))
            {
                if(intval($intIdOltOrigen) !== intval($intIdOltDestino))
                {
                    $strOltsDiferentes = "SI";
                }
                else
                {
                    $strOltsDiferentes = "NO";
                }
                $objPunto = $objServicio->getPuntoId();
                if(!is_object($objPunto))
                {
                    throw new \Exception("No se ha podido obtener el punto");
                }
                $objPersonaEmpresaRol   = $objPunto->getPersonaEmpresaRolId();
                if(!is_object($objPersonaEmpresaRol))
                {
                    throw new \Exception("No se ha podido obtener el cliente");
                }
                $objPersona                 = $objPersonaEmpresaRol->getPersonaId();
                $strCliente                 = sprintf("%s",$objPersona);
                $strLoginPuntoCliente       = $objPunto->getLogin();
                $strDireccionPuntoCliente   = $objPunto->getDireccion();
                $objJurisdiccion            = $objPunto->getPuntoCoberturaId();
                
                if(is_object($objJurisdiccion))
                {
                    $strNombreJurisdiccion = $objJurisdiccion->getNombreJurisdiccion();
                }
                $arrayInfoNotifFactTSb  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                          ->getOne( 'INFO_NOTIF_FACTIB_T_SB', 
                                                                    '', 
                                                                    '', 
                                                                    '', 
                                                                    $strOltsDiferentes,
                                                                    '', 
                                                                    '', 
                                                                    '', 
                                                                    '', 
                                                                    $strCodEmpresa);
                if(!empty($arrayInfoNotifFactTSb))
                {
                    $strObservacionNotif    = $arrayInfoNotifFactTSb['valor2'];
                    $objServicioHistorial   = new InfoServicioHistorial();
                    $objServicioHistorial->setServicioId($objServicio);
                    $objServicioHistorial->setIpCreacion($strIpClient);
                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $objServicioHistorial->setUsrCreacion($strUsrSession);
                    $objServicioHistorial->setObservacion($strObservacionNotif);
                    $objServicioHistorial->setEstado($objServicio->getEstado());
                    $this->emComercial->persist($objServicioHistorial);
                    $this->emComercial->flush();
                    $this->emComercial->commit();
                    
                    
                    $strUsrVendedorServicio = $objServicio->getUsrVendedor();
                    $strUsrCreacionServicio = $objServicio->getUsrCreacion();
                    if(empty($strUsrVendedorServicio))
                    {
                        $strUsrVendedorServicio = $objPunto->getUsrVendedor();
                    }
                    
                    $arrayCorreosVendedorServicio  =  $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                                                        ->getContactosByLoginPersonaAndFormaContacto($strUsrVendedorServicio,
                                                                                                                     'Correo Electronico');
                    if(!empty($arrayCorreosVendedorServicio))
                    {
                        foreach($arrayCorreosVendedorServicio as $arrayCorreoVendedorServicio)
                        {
                            if($arrayCorreoVendedorServicio && !empty($arrayCorreoVendedorServicio['valor']))
                            {
                                $arrayDestinatarios[] = $arrayCorreoVendedorServicio['valor'];
                            }
                        }
                    }
                    
                    $arrayCorreosUsrCreacionServicio    = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                                                            ->getContactosByLoginPersonaAndFormaContacto($strUsrCreacionServicio,
                                                                                                                         'Correo Electronico');
                    if(!empty($arrayCorreosUsrCreacionServicio))
                    {
                        foreach($arrayCorreosUsrCreacionServicio as $arrayCorreoUsrCreacionServicio)
                        {
                            if($arrayCorreoUsrCreacionServicio && !empty($arrayCorreoUsrCreacionServicio['valor']))
                            {
                                $arrayDestinatarios[] = $arrayCorreoUsrCreacionServicio['valor'];
                            }
                        }
                    }
                    
                    $strAsunto = "Factibilidad por traslado de servicio ".$objServicio->getProductoId()->getDescripcionProducto()
                                 ." - login ".$strLoginPuntoCliente;
                    $arrayParametrosNotif   = array('cliente'               => $strCliente,
                                                    'loginPuntoCliente'     => $strLoginPuntoCliente,
                                                    'nombreJurisdiccion'    => $strNombreJurisdiccion,
                                                    'direccionPuntoCliente' => $strDireccionPuntoCliente,
                                                    'nombreProducto'        => $objServicio->getProductoId()->getDescripcionProducto(),
                                                    'tipoOrden'             => 'Traslado',
                                                    'fechaCreacionServicio' => strval(date_format($objServicio->getFeCreacion(), "d-m-Y")),
                                                    'observacion'           => $strObservacionNotif,
                                                    'estadoServicio'        => $objServicio->getEstado());
                    
                    $this->envioPlantilla->generarEnvioPlantilla($strAsunto,
                                                                 $arrayDestinatarios,
                                                                 'FACTIB_T_SB',
                                                                 $arrayParametrosNotif,
                                                                 $strCodEmpresa,
                                                                 '',
                                                                 '');
                }
            }
            else
            {
                throw new \Exception("No se enviaron los parámetros necesarios para el envío de notificación");
            }
            $strStatus  = "OK";
            $strMensaje = $strObservacionNotif;
        }
        catch (\Exception $e) 
        {
            if ($this->emComercial->getConnection()->isTransactionActive())
            {
                $this->emComercial->getConnection()->rollback();
            }
            $this->emComercial->close();
            $this->serviceUtil->insertError("Telcos+",
                                            "SoporteService->crearNotifFactibTrasladoSb",
                                            $e->getMessage(),
                                            $strUsrSession,
                                            $strIpClient
                                           );
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage(); 
        }
        $arrayRespuesta = array("strStatus" => $strStatus, "strMensaje" => $strMensaje ); 
        return $arrayRespuesta;
    }

    /**
     * Modifica el valor de la caracteristica del usuario enviado por parametro
     * @param $arrParametros
     * [
     *     intIdPersonaEmpresaRol => id de la persona empresa rol
     *     strEstadoConexion      => estado de conexión
     *     strUsrUltMod           => usuario de última modificación
     *     strFeUltMod            => fecha de última modificación
     *     strIpUltMod            => ip de última modificación
     * ]
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.0 -10-2018
     * @since 1.0
     * @return JsonResponse
     */
    public function modificarCaracteristicaConexionyExtension($arrayParametros)
    {
        $intIdPersonaEmpresaRol = $arrayParametros['intIdPersonaEmpresaRol'];
        $strValor               = $arrayParametros['strValor'];
        $strUsrUltMod           = $arrayParametros['strUsrUltMod'];
        $objFeUltMod            = $arrayParametros['dateFeUltMod'];
        $strIpUltMod            = $arrayParametros['strIpUltMod'];
        $strCaracteristica      = $arrayParametros['strCaracteristica'];
        $this->emComercial->beginTransaction();
        try
        {
            //consultamos característica de estado de conexión
            $objAdmiCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                       ->getCaracteristicaPorDescripcionPorEstado($strCaracteristica, 'Activo');
            if (is_object($objAdmiCaracteristica))
            {
                $objInfoPersonaEmpresaRolCarac = $this->emComercial->getRepository("schemaBundle:InfoPersonaEmpresaRolCarac")
                                                                   ->findOneBy(array('personaEmpresaRolId'=> $intIdPersonaEmpresaRol,
                                                                                     'caracteristicaId'   => $objAdmiCaracteristica->getId()
                                                                                    ));
                if (is_object($objInfoPersonaEmpresaRolCarac))
                {
                    if ( ($strValor === 'Almuerzo' && $objInfoPersonaEmpresaRolCarac->getValor() === 'Almuerzo') ||
                         ($strValor === 'Almuerzo' && $objInfoPersonaEmpresaRolCarac->getValor() === 'Disponible') || 
                         ($strValor === 'Disponible' && $objInfoPersonaEmpresaRolCarac->getValor() === 'Almuerzo') )
                    {
                        $objInfoPersonaEmpresaRolCarac->setValor($strValor);
                    }
                    else
                    {
                        $objInfoPersonaEmpresaRolCarac->setValor($strValor);
                        $objInfoPersonaEmpresaRolCarac->setUsrUltMod($strUsrUltMod);
                        $objInfoPersonaEmpresaRolCarac->setFeUltMod($objFeUltMod);
                    }
                    $this->emComercial->persist($objInfoPersonaEmpresaRolCarac);
                    $this->emComercial->flush();
                    $strRespuesta = 'OK';
                }
                else
                {
                    $objInfoPersonaEmpresaRolCarac = new InfoPersonaEmpresaRolCarac();
                    $objInfoPersonaEmpresaRol      = $this->emComercial->getRepository("schemaBundle:InfoPersonaEmpresaRol")
                                                                       ->findOneById($intIdPersonaEmpresaRol);
                    if (is_object($objInfoPersonaEmpresaRol) && is_object($objAdmiCaracteristica))
                    {
                        $objInfoPersonaEmpresaRolCarac->setPersonaEmpresaRolId($objInfoPersonaEmpresaRol);
                        $objInfoPersonaEmpresaRolCarac->setCaracteristicaId($objAdmiCaracteristica);
                        $objInfoPersonaEmpresaRolCarac->setValor($strValor);
                        $objInfoPersonaEmpresaRolCarac->setFeCreacion($objFeUltMod);
                        $objInfoPersonaEmpresaRolCarac->setUsrCreacion($strUsrUltMod);
                        $objInfoPersonaEmpresaRolCarac->setIpCreacion($strIpUltMod);
                        $objInfoPersonaEmpresaRolCarac->setEstado('Activo');
                        $this->emComercial->persist($objInfoPersonaEmpresaRolCarac);
                        $this->emComercial->flush();
                        $strRespuesta = 'OK';
                    }
                }
            }
            $this->emComercial->getConnection()->commit();
        }
        catch(\Exception $e)
        {
            if($this->emComercial->isTransactionActive())
            {
                $this->emComercial->rollback();
                $this->emComercial->close();
            }

            $strRespuesta = " Error SoporteService.modificarCaracteristica: " . $e . ", <br> Favor Notificar a Sistemas";
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.modificarCaracteristica',
                                             'Error SoporteService.modificarCaracteristica:'.$e->getMessage(),
                                             $strUsrUltMod,
                                             $strIpUltMod);
            return $strRespuesta;
        }
        return $strRespuesta;
    }

    /**
     * reenvioTicketEcucert
     * Función que guarda la información del ticket enviada por ECUCERT
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 19-03-2020
     * 
     * @param array $arrayParametros
     * [
     *     strNoTicket          => Número de Ticket
     *     strUsrCreacion       => Usuario de creación
     *     strIpCreacion        => Ip de creación 
     * ]
     * 
     * @return array $arrayRespuesta
     * [
     *     strRespuesta     => Retorna si esta procesando o falló el proceso,
     *      strStatus        => Estado del proceso,
     *      strMensaje       => Retorna si realizó o no el proceso
     * ]
     * 
     */
    public function reenvioTicketEcucert($arrayParametros)
    {
        $strNoTicket        = $arrayParametros['strNoTicket'];
        $strUsrCreacion     = $arrayParametros['strUsrCreacion'];
        $strIpCreacion      = $arrayParametros['strIpCreacion'];
        $strMsjError        = str_repeat('a',  30*1024);
        $strRespuesta       = str_repeat('a',  30*1024);

        try
        {
            $strSql = "BEGIN SPKG_INCIDENCIA_ECUCERT.P_REENVIO_CORREO_ECUCERT(
                                                :Pv_NumeroTicket,
                                                :Pv_ipCreacion,
                                                :Pv_user,
                                                :Pv_MensajeError,
                                                :Pv_Respuesta); 
                                            END;";
           
            $objConn = oci_connect($this->strUrsrSoporte,
                                $this->strPassSoporte,
                                $this->strDnsSoporte);
            $objStmt = oci_parse($objConn, $strSql);
            $strJsonClob = oci_new_descriptor($objConn);
            $strJsonClob->writetemporary($strJsonEcucert);
            
            oci_bind_by_name($objStmt, ':Pv_NumeroTicket', $strNoTicket);
            oci_bind_by_name($objStmt, ':Pv_ipCreacion', $strIpCreacion);
            oci_bind_by_name($objStmt, ':Pv_user', $strUsrCreacion);
            oci_bind_by_name($objStmt, ':Pv_MensajeError', $strMsjError);
            oci_bind_by_name($objStmt, ':Pv_Respuesta', $strRespuesta);
            
            oci_execute($objStmt);
            $strErrorOci = oci_error($objStmt);
           
            if (strpos($strMsjError, 'ERROR') === false && $strErrorOci==null)
            {
                $arrayRespuesta = array ('strRespuesta'     =>'TICKET ENVIADO',
                                         'strStatus'        =>'200',
                                         'strMensaje'       =>'PROCESO EXITOSO');
            }
            else
            {
                if (strpos($strMsjError, str_repeat('a',4)) === false)
                {
                    $arrayRespuesta = array ('strRespuesta'     =>$strMsjError,
                                             'strStatus'        =>'500',
                                             'strMensaje'       =>'PROCESO FALLIDO');
                }
                else
                {
                    $arrayRespuesta = array ('strRespuesta'     =>$strErrorOci['message'],
                                             'strStatus'        =>'500',
                                             'strMensaje'       =>'PROCESO FALLIDO');
                }                
            }
        }
        catch(\Exception $e)
        {
            $strRespuesta   = " Error al procesar la incidencia. Favor Notificar a Sistemas";
            $arrayRespuesta = array ('strMensaje'     =>$strRespuesta);
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.reenvioTicketEcucert',
                                            'Error SoporteService.reenvioTicketEcucert:'.$e->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion);
            return $arrayRespuesta;
        }
        return $arrayRespuesta;
    }

    /**
     * cerrarCasoTareaEcucert
     * Función que cierra el caso o la tarea en base 
     * a número de Ticket a ECUCERT
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 30-03-2020
     * 
     * @param array $arrayParametros
     * [
     *     strNoTicket          => Número de Ticket
     *     strUsrCreacion       => Usuario de creación
     *     strIpCreacion        => Ip de creación 
     * ]
     * 
     * @return array $arrayRespuesta
     * [
     *     strRespuesta     => Retorna si esta procesando o falló el proceso,
     *      strStatus        => Estado del proceso,
     *      strMensaje       => Retorna si realizó o no el proceso
     * ]
     * 
     */
    public function cerrarCasoTareaEcucert($arrayParametros)
    {
        $strNoTicket        = $arrayParametros['strNoTicket'];
        $strUsrCreacion     = $arrayParametros['strUsrCreacion'];
        $strIpCreacion      = $arrayParametros['strIpCreacion'];
        $strMsjError        = str_repeat('a',  30*1024);
        $strRespuesta       = str_repeat('a',  30*1024);
        $strTipoProceso     = "C";

        try
        {
            $strSql = "BEGIN SPKG_INCIDENCIA_ECUCERT.P_NOTIFICACION_CIERRE_CASO(
                                                :Pv_TipoProceso,
                                                :Pv_NumeroTicket,
                                                :Pv_ipCreacion,
                                                :Pv_user,
                                                :Pv_MensajeError,
                                                :Pv_Respuesta); 
                                            END;";
           
            $objConn = oci_connect($this->strUrsrSoporte,
                                $this->strPassSoporte,
                                $this->strDnsSoporte);
            $objStmt = oci_parse($objConn, $strSql);
            
            oci_bind_by_name($objStmt, ':Pv_TipoProceso', $strTipoProceso);
            oci_bind_by_name($objStmt, ':Pv_NumeroTicket', $strNoTicket);
            oci_bind_by_name($objStmt, ':Pv_ipCreacion', $strIpCreacion);
            oci_bind_by_name($objStmt, ':Pv_user', $strUsrCreacion);
            oci_bind_by_name($objStmt, ':Pv_MensajeError', $strMsjError);
            oci_bind_by_name($objStmt, ':Pv_Respuesta', $strRespuesta);
            
            oci_execute($objStmt);
            $strErrorOci = oci_error($objStmt);
           
            if (strpos($strMsjError, 'ERROR') === false && $strErrorOci==null)
            {
                $arrayRespuesta = array ('strRespuesta'     =>'CASOS/TAREAS CERRADOS',
                                         'strStatus'        =>'200',
                                         'strMensaje'       =>'PROCESO EXITOSO');
            }
            else
            {
                if (strpos($strMsjError, str_repeat('a',4)) === false)
                {
                    $arrayRespuesta = array ('strRespuesta'     =>$strMsjError,
                                             'strStatus'        =>'500',
                                             'strMensaje'       =>'PROCESO FALLIDO');
                }
                else
                {
                    $arrayRespuesta = array ('strRespuesta'     =>$strErrorOci['message'],
                                             'strStatus'        =>'500',
                                             'strMensaje'       =>'PROCESO FALLIDO');
                }                
            }
        }
        catch(\Exception $e)
        {
            $strRespuesta   = " Error al procesar la incidencia. Favor Notificar a Sistemas";
            $arrayRespuesta = array ('strMensaje'     =>$strRespuesta);
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.cerrarCasoTareaEcucert',
                                            'Error SoporteService.cerrarCasoTareaEcucert:'.$e->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion);
            return $arrayRespuesta;
        }
        return $arrayRespuesta;
    }

    /**
     * guardarJsonIncidenciaEcucert
     * Función que guarda la información del ticket enviada por ECUCERT
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 19-02-2018
     * 
     * @param array $arrayParametros
     * [
     *     arrayJsonEcucert     => Json que envia CERT para guardar la incidencia
     *     strUsrCreacion       => Usuario de creación
     *     strIpCreacion        => Ip de creación 
     *     strNumeroRegis       => Número de registros totales enviados por Ticket
     * ]
     * 
     * @return array $arrayRespuesta
     * [
     *     strRespuesta     => Retorna si esta procesando o falló el proceso,
     *      strStatus        => Estado del proceso,
     *      strMensaje       => Retorna si realizó o no el proceso
     * ]
     * 
     */
    public function guardarJsonIncidenciaEcucert($arrayParametros)
    {
        $strJsonEcucert     = json_encode($arrayParametros['arrayJsonEcucert']);
        $strUsrCreacion     = $arrayParametros['strUsrCreacion'];
        $strIpCreacion      = $arrayParametros['strIpCreacion'];
        $strNumeroRegis     = $arrayParametros['strNumeroRegis'];
        $strMsjError        = str_repeat('a',  30*1024);
        $strRespuesta       = str_repeat('a',  30*1024);
        $strNombreJob       = "JOB_ECUCERT_CREAR_INCI";

        try
        {
            $strSql = "BEGIN SPKG_INCIDENCIA_ECUCERT.P_JOB_GUARDAR_INCIDENCIA(
                                                :Pv_JsonEcucert,
                                                :Pv_NombreJob,
                                                :Pv_NumeroRegistro,
                                                :Pv_MensajeError,
                                                :Pv_Respuesta); 
                                            END;";
           
            $objConn = oci_connect($this->strUrsrSoporte,
                                $this->strPassSoporte,
                                $this->strDnsSoporte);
            $objStmt = oci_parse($objConn, $strSql);
            $strJsonClob = oci_new_descriptor($objConn);
            $strJsonClob->writetemporary($strJsonEcucert);
            
            oci_bind_by_name($objStmt, ':Pv_NombreJob', $strNombreJob);
            oci_bind_by_name($objStmt, ':Pv_JsonEcucert', $strJsonClob, -1, OCI_B_CLOB);
            oci_bind_by_name($objStmt, ':Pv_NumeroRegistro', $strNumeroRegis);
            oci_bind_by_name($objStmt, ':Pv_MensajeError', $strMsjError);
            oci_bind_by_name($objStmt, ':Pv_Respuesta', $strRespuesta);
            
            oci_execute($objStmt);
            $strErrorOci = oci_error($objStmt);
        
            error_log(">>> " . $strMsjError);
           
            if (strpos($strMsjError, 'ERROR') === false && $strErrorOci==null)
            {
                $arrayRespuesta = array ('strRespuesta'     =>'Procesando..',
                                         'strStatus'        =>'200',
                                         'strMensaje'       =>'PROCESO EXITOSO');
            }
            else
            {
                if (strpos($strMsjError, str_repeat('a',4)) === false)
                {
                    $arrayRespuesta = array ('strRespuesta'     =>$strMsjError,
                                             'strStatus'        =>'500',
                                             'strMensaje'       =>'PROCESO FALLIDO');
                }
                else
                {
                    $arrayRespuesta = array ('strRespuesta'     =>$strErrorOci['message'],
                                             'strStatus'        =>'500',
                                             'strMensaje'       =>'PROCESO FALLIDO');
                }                
            }
        }
        catch(\Exception $e)
        {
            $strRespuesta   = " Error al procesar la incidencia. Favor Notificar a Sistemas";
            $arrayRespuesta = array ('strMensaje'     =>$strRespuesta);
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.guardarJsonIncidenciaEcucert',
                                            'Error SoporteService.guardarJsonIncidenciaEcucert:'.$e->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion);
            return $arrayRespuesta;
        }
        return $arrayRespuesta;
    }
      
    /**
     * guardarNotificacionIncidenciaEcucert
     * Función que guarda el correo de la persona notificada en la incidencia enviada por ECUCERT
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 19-03-2018
     * 
     * @param array $arrayParametros
     * [
     *     intIncidenciaDetId   => Id del detalle de la incidencia
     *     strCorreo            => Correo que se le va a enviar la incidencia
     *     strTipoContacto      => Tipo de contacto de la persona
     *     strEstado            => Estado de la persona
     *     strUsrCreacion       => Usuario de creación
     *     strIpCreacion        => Ip de creación 
     * ]
     * 
     * @return array $arrayResultado
     * [
     *     strMensaje     => Mensaje si envío el correo o no
     * ]
     */
    public function guardarNotificacionIncidenciaEcucert($arrayParametros)
    {
        $intDetIncidenciaId = $arrayParametros['intIncidenciaDetId'];
        $strCorreo          = $arrayParametros['strCorreo'];
        $strTipoContacto    = $arrayParametros['strTipoContacto'];
        $strEstado          = $arrayParametros['strEstado'];
        $strUsrCreacion     = $arrayParametros['strUsrCreacion'];
        $strIpCreacion      = $arrayParametros['strIpCreacion'];

        $strMsjError        = str_repeat('a',  30*1024);

        try
        {
            $strSql = "BEGIN SPKG_INCIDENCIA_ECUCERT.P_CREAR_INCIDENCIA_NOTIF(
                                                                        :Pv_Correo,
                                                                        :Pv_TipoContacto,
                                                                        :Pv_IncidenciaDetId,
                                                                        :Pv_Estado,
                                                                        :Pv_UsrCreacion,
                                                                        :Pv_IpCreacion,
                                                                        :Pv_MensajeError); END;";
            
            $objStmt = $this->emSoporte->getConnection()->prepare($strSql);
            
            $objStmt->bindParam('Pv_Correo'            , $strCorreo);
            $objStmt->bindParam('Pv_TipoContacto'      , $strTipoContacto);
            $objStmt->bindParam('Pv_IncidenciaDetId'   , $intDetIncidenciaId);
            $objStmt->bindParam('Pv_Estado'            , $strEstado);
            $objStmt->bindParam('Pv_UsrCreacion'       , $strUsrCreacion);
            $objStmt->bindParam('Pv_IpCreacion'        , $strIpCreacion);
            $objStmt->bindParam('Pv_MensajeError'      , $strMsjError);
            
            $objStmt->execute();
            
            if (strpos($strMsjError, 'ERROR') !== false)
            {
                $arrayRespuesta = array ('strMensaje'           =>$strMsjError);
            }
            else
            {
                $arrayRespuesta = array ('strMensaje'           =>'Enviado');
            }
           
        }
        catch(\Exception $e)
        {
            $strRespuesta   = " Error al enviar correo. Favor Notificar a Sistemas";
            $arrayRespuesta = array ('strMensaje'           =>$strRespuesta);
            
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.guardarNotificacionIncidenciaEcucert',
                                            'Error SoporteService.guardarNotificacionIncidenciaEcucert:'.$e->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion);
            return $arrayRespuesta;
        }
        return $arrayRespuesta;
    }
       
    /**
     * modificarEstadoDetalleIncEcucert
     * Función que modifica el estado del detalle de la incidencia enviada por ECUCERT 
     * para modificar el estado
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 11-03-2018
     * 
     * @param array $arrayParametros
     * [
     *     strIncidenciaDetId   => Id del detalle de la incidencia
     *     strEstado            => Estado del detalle de la incidencia
     *     strUsrMod            => usuario de modificación
     *     strIpMod             => ip de modificación 
     * ]
     * 
     * @return array $arrayResultado
     * [
     *     strMensaje   => Mensaje de respuesta si proceso o no
     *     strStatus    => Estado del proceso
     * ]
     */
    public function modificarEstadoDetalleIncEcucert($arrayParametros)
    {
        $intIncidenciaDetId = $arrayParametros['intIncidenciaDetId'];
        $strEstado          = $arrayParametros['strEstado'];
        $strUsrMod          = $arrayParametros['strUsrMod'];
        $strIpMod           = $arrayParametros['strIpMod'];
        
        $strMsjError        = str_repeat('a',  30*1024);
        $strEstadoRecibido  = "OK";
        
        try
        {
            $strSql = "BEGIN SPKG_INCIDENCIA_ECUCERT.P_ACT_ESTADO_DET_INC(
                                                                      :Pv_IncidenciaDetId,
                                                                      :Pv_Estado,
                                                                      :Pv_UsrModi,
                                                                      :Pv_IpModi,
                                                                      :Pv_MensajeError); END;";
            
            $objStmt = $this->emSoporte->getConnection()->prepare($strSql);
            
            $objStmt->bindParam('Pv_IncidenciaDetId'   , $intIncidenciaDetId);
            $objStmt->bindParam('Pv_Estado'            , $strEstado);
            $objStmt->bindParam('Pv_UsrModi'           , $strUsrMod);
            $objStmt->bindParam('Pv_IpModi'            , $strIpMod);
            $objStmt->bindParam('Pv_MensajeError'      , $strMsjError);
            
            $objStmt->execute();
            
            if (strpos($strMsjError, 'ERROR') !== false)
            {
                $arrayRespuesta = array ('strMensaje'           =>$strMsjError,
                                         'strStatus'            =>"ERROR");
            }
            else
            {
                $arrayRespuesta = array ('strMensaje'           =>"Realizado",
                                         'strStatus'            =>$strEstadoRecibido);
            }
           
        }
        catch(\Exception $e)
        {
            $strRespuesta   =  " Error al modificar el estado del detalle de la incidencia. Favor Notificar a Sistemas";
            $arrayRespuesta = array ('strMensaje'           =>$strRespuesta,
                                     'strStatus'            =>"ERROR");
            
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.modificarEstadoDetalleIncEcucert',
                                            'Error SoporteService.modificarEstadoDetalleIncEcucert:'.$e->getMessage(),
                                            $strUsrMod,
                                            $strIpMod);
            return $arrayRespuesta;
        }
        return $arrayRespuesta;
    }
    
    /**
     * generarReporteEcucert
     * Función que genera y envía al correo el reporte de incidencia de ECUCERT 
     *
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 11-03-2018
     * 
     * @param array $arrayParametros
     * [
     *     strFechaInicio   => Fecha inicio a filtrar
     *     strFechaFin      => Fecha fin a filtrar
     *     strUsrCreacion   => Usuario de creación
     *     strIpCreacion    => Ip de creación 
     *     strNoTicket      => Número de ticket de la incidencia
     * ]
     * 
     * @return array $arrayResultado[
     *     strMensaje   => Mensaje de respuesta si proceso o no
     *     strStatus    => Estado del proceso
     * ]
     */
    public function generarReporteEcucert($arrayParametros)
    {
        $strFechaInicio     = $arrayParametros['strFechaInicio'];
        $strFechaFin        = $arrayParametros['strFechaFin']; 
        $strUsrCreacion     = $arrayParametros['strUsrCreacion'];
        $strIpCreacion      = $arrayParametros['strIpCreacion'];
        $strNoTicket        = $arrayParametros['strNoTicket'];
        $strMsjError        = str_repeat('a',  30*1024);
        $strEstadoRecibido  = "OK";

        try
        {
            $strSql = "BEGIN SPKG_INCIDENCIA_ECUCERT.P_REPORTE_INCIDENCIAS(
                                                                      :Pv_FechaInicio,
                                                                      :Pv_FechaFin,
                                                                      :Pv_NoTicket,
                                                                      :Pv_MensajeError); END;";
            
            $objStmt = $this->emSoporte->getConnection()->prepare($strSql);
            
            $objStmt->bindParam('Pv_FechaInicio'   , $strFechaInicio);
            $objStmt->bindParam('Pv_FechaFin'      , $strFechaFin);
            $objStmt->bindParam('Pv_NoTicket'      , $strNoTicket);
            $objStmt->bindParam('Pv_MensajeError'  , $strMsjError);
            $objStmt->execute();

            if (strpos($strMsjError, 'ERROR') !== false)
            {
                $arrayRespuesta = array ('strMensaje'           =>$strMsjError,
                                         'strStatus'            =>"ERROR");
            }
            else
            {
                $arrayRespuesta = array ('strMensaje'           =>"Realizado y enviado",
                                         'strStatus'            =>$strEstadoRecibido);
            }
           
        }
        catch(\Exception $e)
        {
            $strRespuesta   = " Error al generar Reporte de incidencia. Favor Notificar a Sistemas";
            $arrayRespuesta = array ('strMensaje'           =>$strRespuesta,
                                     'strStatus'            =>"ERROR");
            
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.generarReporteEcucert',
                                            'Error SoporteService.generarReporteEcucert:'.$e->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion);
            return $arrayRespuesta;
        }
        return $arrayRespuesta;
    }
    
    /**
     * modificarEstadoGestIncEcucert
     * Función que modifica el estado de gestión de la incidencia enviada por ECUCERT 
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 11-03-2019
     * 
     * @param array $arrayParametros
     * [
     *     strIncidenciaCabId   => Id del detalle de la incidencia
     *     strEstado            => Estado del detalle de la incidencia
     *     strUsrMod            => usuario de modificación
     *     strIpMod             => ip de modificación 
     * ]
     * 
     * @return array $arrayResultado
     * [
     *     strMensaje   => Mensaje de respuesta si proceso o no
     *     strStatus    => Estado del proceso
     * ]
     */
    public function modificarEstadoGestIncEcucert($arrayParametros)
    {
        $intIncidenciaDetId = $arrayParametros['intIncidenciaDetId'];
        $strEstado          = $arrayParametros['strEstado'];
        $strUsrMod          = $arrayParametros['strUsrMod'];
        $strIpMod           = $arrayParametros['strIpMod'];
        
        $strMsjError        = "";
        $strEstadoRecibido  = "OK";
        
        try
        {
            $strSql = "BEGIN SPKG_INCIDENCIA_ECUCERT.P_ACT_ESTADO_GES_INC(
                                                                        :Pv_IncidenciaDetId,
                                                                        :Pv_Estado,
                                                                        :Pv_UsrModi,
                                                                        :Pv_IpModi,
                                                                        :Pv_MensajeError); END;";
            
            $objStmt = $this->emSoporte->getConnection()->prepare($strSql);
            
            $objStmt->bindParam('Pv_IncidenciaDetId'   , $intIncidenciaDetId);
            $objStmt->bindParam('Pv_Estado'            , $strEstado);
            $objStmt->bindParam('Pv_UsrModi'           , $strUsrMod);
            $objStmt->bindParam('Pv_IpModi'            , $strIpMod);
            $objStmt->bindParam('Pv_MensajeError'      , $strMsjError);
            
            $objStmt->execute();
            
            if (strpos($strMsjError, 'ERROR') !== false)
            {
                $arrayRespuesta = array ('strMensaje'           =>$strMsjError,
                                         'strStatus'            =>"ERROR");
            }
            else
            {
                $arrayRespuesta = array ('strMensaje'           =>"Realizado",
                                         'strStatus'            =>$strEstadoRecibido);
            }
           
        }
        catch(\Exception $e)
        {
            $strRespuesta   = " Error al modificar el estado de gestión de la incidencia. Favor Notificar a Sistemas";
            $arrayRespuesta = array ('strMensaje'           =>$strRespuesta,
                                     'strStatus'            =>"ERROR");
            
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.modificarEstadoGestIncEcucert',
                                            'Error SoporteService.modificarEstadoGestIncEcucert:'.$e->getMessage(),
                                            $strUsrMod,
                                            $strIpMod);
            return $arrayRespuesta;
        }
        return $arrayRespuesta;
    }

     /**
     * enviarPlantillaExtranet
     * Función que sirve para enviar notificación por mail del incidente reportado por Exranet
     * 
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.0 08-03-2021
     * 
     * @param array $arrayParametros
     * [
     *     idEmpresa                => Id de la empresa
     *     strUsrCreacion           => usuario de creación
     *     strIpCreacion            => ip de creación 
     *     strCorreoCliente         => bandera 'S' o 'N'
     *     intIdServicio            => idServicio
     * ]
     * 
     * @return array $arrayResultado
     * [
     *     strMensaje   => Mensaje de respuesta si proceso o no
     *     strStatus    => Estado del proceso
     * ]
     * 
     */
    public function enviarPlantillaExtranet($arrayParametros)
    {
        $arrayResultadosContactos   = array();
        $arrayCorreoContactos       = array();
        $intIdOficinaCliente        = "";
        $strCodigoPlantilla         = "";

        $intIdEmpresa               = $arrayParametros['idEmpresa'];
        $strUsrCreacion             = $arrayParametros['strUsrCreacion']; 
        $strIpCreacion              = $arrayParametros['strIpCreacion'];
        $strCorreoCliente           = $arrayParametros['strCorreoCliente'];//'S','N'
        $intIdServicio              = $arrayParametros['intIdServicio'];
        $strAsuntoCorreo            = $arrayParametros['strAsuntoCorreo'];

        $strNombrePlantilla         = "PARAMS_PLANTILLA_EXTRANET";
        $strDescripcionPlantilla    = "PLANTILLA_ERROR_EXTRANET";
        $strDescripcionEmpleado     = "Empleado";
        $strEstadoActivo            = "Activo";
        $strDescFormContact         = "Correo Electronico"; 

        try
        {
            $objParametroCab      = $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                    ->findOneBy( array('nombreParametro' => $strNombrePlantilla, 
                                                                       'estado'          => $strEstadoActivo) );

            if(is_object($objParametroCab))
            {
                $objAdmiParametroDet  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->findOneBy( array( 'estado'      => $strEstadoActivo,
                                                                            'parametroId' => $objParametroCab,
                                                                            'descripcion' => $strDescripcionPlantilla ) );
            }

            if($strCorreoCliente == 'S')
            {
                $entityServicio = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                    ->findOneById($intIdServicio);

                if(is_object($entityServicio))
                {
                    $entityPunto = $this->emComercial->getRepository('schemaBundle:InfoPunto')
                                                     ->findOneById($entityServicio->getPuntoId());

                }
                else
                {
                    throw new \Exception("No se encontró el servicio enviado");
                }

                $entityPersonaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                      ->findOneById($entityPunto->getPersonaEmpresaRolId());
            }
            else
            {
                $entityPersona = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                               ->findOneByLogin($strUsrCreacion);

                if(is_object($entityPersona))
                {
                    $entityPersonaRol = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                    ->getPersonaEmpresaRolPorPersonaPorTipoRolActivosPendientes(
                                                        $entityPersona->getId(),
                                                        $strDescripcionEmpleado,
                                                        $intIdEmpresa); 
                }
            }

            if(is_object($entityPersonaRol))
            {
                $entityInfoPersonaEmpRol  = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                              ->findOneById($entityPersonaRol->getId());

                if(is_object($entityInfoPersonaEmpRol))
                {                                                         
                    $entityInfoOficina        = $this->emComercial->getRepository('schemaBundle:InfoOficinaGrupo')
                                                                ->findOneById($entityInfoPersonaEmpRol->getOficinaId());
                    $intIdOficinaCliente      = $entityInfoOficina->getCantonId();
                }
            }
            else
            {
                if($strCorreoCliente == 'S')
                {
                    throw new Exception('No se encontró la persona rol en base al usuario de creación');
            
                }
            }

            if(empty($intIdOficinaCliente) && $strCorreoCliente == 'S')
            {
                throw new Exception('No se encontró la oficina del usuario de creación');
            }

            if($strCorreoCliente == 'S')
            {
                $arrayParamFormaCont =  array(  'intIdPersonaEmpresaRol'     => $entityPersonaRol->getId(),
                                                'strEstado'                  => $strEstadoActivo,
                                                'strDescFormaContacto'       => $strDescFormContact);
                
                $arrayResultadosContact     = $this->emComercial
                                                ->getRepository('schemaBundle:InfoPersonaContacto')
                                                ->getEmailCliente($arrayParamFormaCont);

                if(isset($arrayResultadosContact) && !empty($arrayResultadosContact))
                {
                    $arrayResultadosContactos   = array_values($arrayResultadosContact);
                }
            }

            if(is_object($objAdmiParametroDet))
            {
                if($strCorreoCliente == 'N')
                {
                    $strCodigoPlantilla = $objAdmiParametroDet->getValor1();
                }
                else
                {
                    $strCodigoPlantilla = $objAdmiParametroDet->getValor5();
                }
                
                if(empty($strAsuntoCorreo))
                {
                    $strAsuntoCorreo    = $objAdmiParametroDet->getValor2();
                }
                $strCorreoRemitente = $objAdmiParametroDet->getValor3();
                if($strCorreoCliente == 'N')
                {
                    array_push($arrayResultadosContactos,array('strFormaContacto' => $objAdmiParametroDet->getValor4()));
                }
            }
            else
            {
                throw new Exception('No se encontró la plantilla');
            }
                                            
            if(isset($arrayResultadosContactos) && !empty($arrayResultadosContactos))
            {
                foreach($arrayResultadosContactos as $arrayListContactos)
                {
                    array_push($arrayCorreoContactos,$arrayListContactos['strFormaContacto']);  
                }
                
                $objAdmiPlantilla = $this->emComunicacion->getRepository('schemaBundle:AdmiPlantilla')
                                                         ->findOneByCodigo($strCodigoPlantilla);

                if(isset($objAdmiPlantilla) && !empty($objAdmiPlantilla))
                {
                    $this->envioPlantilla->generarEnvioPlantilla($strAsuntoCorreo, 
                                                                $arrayCorreoContactos, 
                                                                $strCodigoPlantilla, 
                                                                $arrayParametros, 
                                                                $intIdEmpresa, 
                                                                $intIdOficinaCliente, 
                                                                '', 
                                                                null,
                                                                false,
                                                                $strCorreoRemitente);

                    $arrayRespuesta = array ('strMensaje'   =>  "Se realizo correctamente",
                                             'strStatus'    =>  "200");
                }
                else
                {
                    $arrayRespuesta = array ('strMensaje'   =>  "No se notificó debido a que no se encontró la plantilla. Notificar a Sistemas",
                                             'strStatus'    =>  "205");
                }
            }
            else
            {
                $arrayRespuesta = array ('strMensaje'   =>  "No se encontró correo para enviar",
                                         'strStatus'    =>  "205");
            }
        }       
        catch(\Exception $ex)
        {
            $strRespuesta   = " Error al enviar la plantilla de notificación al cliente. Favor Notificar a Sistemas";
            $arrayRespuesta = array ('strMensaje'           => $strRespuesta,
                                    'strStatus'             =>  "500");
                                   
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.enviarPlantillaExtranet',
                                            'Error SoporteService.enviarPlantillaExtranet:'.$ex->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion);
            return $arrayRespuesta;
        }
        return $arrayRespuesta;

    }
    
    /**
     * enviarPlantillaECUCERT
     * Función que sirve para enviar notificación por mail del incidente reportado por ECUCERT al cliente
     * 
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.0 08-03-2019
     * 
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.1 11-08-2019 - Cambio de remitente a soporte@telconet para empresa Telconet y envío de ciudad 
     * @since 1.0
     * 
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.2 16-08-2019 - Cambio de prioridad de búsqueda del correo del cliente, primero por los puntos. 
     * @since 1.1
     * 
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.3 24-09-2019 - Cambio de correo remitente para netlife. 
     * @since 1.2
     * 
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 1.4 16-04-2020 - Se agrega el parámetro de correos adicionales para enviar la notificación
     *                           e indicando la información enviada en los seguimientos.
     * @since 1.3
     * 
     * @param array $arrayParametros
     * [
     *     idEmpresa                => Id de la empresa
     *     asunto                   => Asunto del correo
     *     codPlantilla             => codigo de la plantilla
     *     strDescFormContact       => Forma de contacto (Correo Electronico)
     *     strContacto              => Tipo de contacto (Contacto Tecnico)
     *     strEstadoNotificacionIn  => Estado de la notificación (No Notificado)
     *     strEstadoNotificacionEn  => Estado de la notificación (Notificado)
     *     strUsrCreacion           => usuario de creación
     *     strIpCreacion            => ip de creación 
     *     idPersonaEmpresaRol      => id empresa Rol de la persona
     *     estado                   => Estado de la persona empresa rol
     *     intIdPunto               => Id del punto
     *     intIncidenciaDetId       => Id del detalle de la incidencia de ECUCERT
     *     empresa                  => Prefijo de la empresa
     *     estado                   => Estado de la persona
     *     strLoginAfectado         => Login del cliente
     *     intIncidenciaDetId       => Id del detalle de la incidencia
     *     ip                       => Ip de la incidencia
     *     puerto                   => puerto de incidencia
     *     ipDestino                => Ip de destino de la incidencia
     *     ticket                   => Número del ticket de la incidencia
     *     jsonCorreos              => Correos adicionales
     *     idDetalle                => Id Detalle de la tarea
     * ]
     * 
     * @return array $arrayResultado
     * [
     *     strMensaje   => Mensaje de respuesta si proceso o no
     *     strStatus    => Estado del proceso
     * ]
     * 
     */
    public function enviarPlantillaECUCERT($arrayParametros)
    {
        $arrayResultadosContactos   = array();
        $arrayCorreoContactos       = array();
        $arrayCorreoyTipoContactos  = array();
        $intIdEmpresa               = $arrayParametros['idEmpresa'];
        $strAsuntoCorreo            = $arrayParametros['asunto'];
        $strCodigoPlantilla         = $arrayParametros['codPlantilla'];
        $strDescFormContact         = $arrayParametros['strDescFormContact'];
        $strContacto                = $arrayParametros['strContacto'];
        $strEstadoNotificacionIn    = $arrayParametros['strEstadoNotificacionIn'];
        $strEstadoNotificacionEn    = $arrayParametros['strEstadoNotificacionEn'];
        $strUsrCreacion             = $arrayParametros['strUsrCreacion']; 
        $strIpCreacion              = $arrayParametros['strIpCreacion']; 
        $intIdPerEmpRol             = $arrayParametros['idPersonaEmpresaRol'];
        $strEstado                  = $arrayParametros['estado']; 
        $intIdPunto                 = $arrayParametros['intIdPunto']; 
        $intIncidenciaDetId         = $arrayParametros['intIncidenciaDetId']; 
        $strPrefijoEmp              = $arrayParametros['empresa'];
        $arrayCorreos               = $arrayParametros['arrayCorreos'];
        $intIdDetalle               = $arrayParametros['intIdDetalle'];
        $intIdOficinaCliente        = 178;
        
        try
        {
            if(isset($intIdPerEmpRol) && !empty($intIdPerEmpRol))
            {
                $entityInfoPersonaEmpRol  = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                            ->findOneById($intIdPerEmpRol);

                if(is_object($entityInfoPersonaEmpRol))
                {                                                         
                    $entityInfoOficina        = $this->emComercial->getRepository('schemaBundle:InfoOficinaGrupo')
                                                                ->findOneById($entityInfoPersonaEmpRol->getOficinaId());
                    $intIdOficinaCliente      = $entityInfoOficina->getCantonId();
                }
            }

            $arrayParamFormaCont =  array(  'intIdPersonaEmpresaRol'     => $intIdPerEmpRol,
                                            'strEstado'                  => $strEstado,
                                            'strDescFormaContacto'       => $strDescFormContact,
                                            'strContactoTecnico'         => $strContacto,
                                            'intIdEmpresa'               => $intIdEmpresa,
                                            'intIdPunto'                 => $intIdPunto);
            
            $arrayResultadosContact     = $this->emComercial
                                                ->getRepository('schemaBundle:InfoPersonaContacto')
                                                ->getEmailClientePorPunto($arrayParamFormaCont);

            if(isset($arrayResultadosContact) && !empty($arrayResultadosContact))
            {
                $arrayResultadosContactos   = array_values($arrayResultadosContact);
            }
            else
            {    
                $arrayResultadosContact     = $this->emComercial
                                                    ->getRepository('schemaBundle:InfoPersonaContacto')
                                                    ->getEmailContactoCliente($arrayParamFormaCont);        
                
                if(isset($arrayResultadosContact) && !empty($arrayResultadosContact))
                {
                    $arrayResultadosContactos   = array_values($arrayResultadosContact);
                }
                else
                {
                    $arrayResultadosContact     = $this->emComercial
                                                    ->getRepository('schemaBundle:InfoPersonaContacto')
                                                    ->getEmailCliente($arrayParamFormaCont);

                    if(isset($arrayResultadosContact) && !empty($arrayResultadosContact))
                    {
                        $arrayResultadosContactos   = array_values($arrayResultadosContact);
                    }
                }
            }
            
            if(isset($arrayCorreos) && !empty($arrayCorreos))
            {
                foreach($arrayCorreos as $arrayContacto)
                {  
                    $arrayContactoPersona                       = array(); 
                    $arrayContactoPersona['strFormaContacto']   = $arrayContacto['correo'];
                    $arrayContactoPersona['strDescripcion']     = $arrayContacto['tipoUsuario'];
                    
                    array_push($arrayResultadosContactos,$arrayContactoPersona);
                }
            }

            $arrayParametrosNotificacion = array(
                                                'intIncidenciaDetId'   => $intIncidenciaDetId,
                                                'strCorreo'            => null,
                                                'strEstado'            => $strEstadoNotificacionIn,
                                                'strUsrCreacion'       => $strUsrCreacion,
                                                'strIpCreacion'        => $strIpCreacion) ;
                                            
            if(isset($arrayResultadosContactos) && !empty($arrayResultadosContactos))
            {
                foreach($arrayResultadosContactos as $arrayListContactos)
                {
                    array_push($arrayCorreoyTipoContactos,$arrayListContactos);
                    array_push($arrayCorreoContactos,$arrayListContactos['strFormaContacto']);  
                }
                //Envio de correo               
                if($strPrefijoEmp == '10')
                {
                    $strCorreoRemitente        = 'soporte@telconet.ec';
                }
                else if($strPrefijoEmp == '18')
                {
                    $strCorreoRemitente        = 'notificaciones_seguridad@netlife.net.ec';
                }

                $objAdmiPlantilla = $this->emComunicacion->getRepository('schemaBundle:AdmiPlantilla')->findOneByCodigo($strCodigoPlantilla);

                if(isset($objAdmiPlantilla) && !empty($objAdmiPlantilla))
                {
                    $this->envioPlantilla->generarEnvioPlantilla($strAsuntoCorreo, 
                                                                $arrayCorreoContactos, 
                                                                $strCodigoPlantilla, 
                                                                $arrayParametros, 
                                                                $intIdEmpresa, 
                                                                $intIdOficinaCliente, 
                                                                '', 
                                                                null,
                                                                false,
                                                                $strCorreoRemitente);

                    foreach($arrayCorreoyTipoContactos as $arrayContacto)
                    {   
                        $arrayParametrosNotificacion['strCorreo']       = $arrayContacto['strFormaContacto'];
                        $arrayParametrosNotificacion['strEstado']       = $strEstadoNotificacionEn;
                        $arrayParametrosNotificacion['strTipoContacto'] = $arrayContacto['strDescripcion'];
                        
                        $arrayRespuestaNotif  = $this->guardarNotificacionIncidenciaEcucert($arrayParametrosNotificacion);
                        
                        if(isset($intIdDetalle) && !empty($intIdDetalle))
                        {
                            $objInfoTareaSeguimiento = new InfoTareaSeguimiento();
                            $objInfoTareaSeguimiento->setDetalleId($intIdDetalle);
                            $objInfoTareaSeguimiento->setObservacion('Se notificó por correo electrónico 
                                               a la siguiente cuenta: '.$arrayContacto['strFormaContacto']);
                            $objInfoTareaSeguimiento->setUsrCreacion($strUsrCreacion);
                            $objInfoTareaSeguimiento->setFeCreacion(new \DateTime('now'));
                            $objInfoTareaSeguimiento->setEmpresaCod($intIdEmpresa);
                            $objInfoTareaSeguimiento->setEstadoTarea("");
                            $objInfoTareaSeguimiento->setInterno("");
                            $objInfoTareaSeguimiento->setDepartamentoId("");
                            $objInfoTareaSeguimiento->setPersonaEmpresaRolId("");
                            $this->emSoporte->persist($objInfoTareaSeguimiento);
                            $this->emSoporte->flush();
                        }
                    }
                    $arrayRespuesta = array ('strMensaje'   =>  $arrayRespuestaNotif["strMensaje"],
                                            'strStatus'    =>  "200");
                }
                else
                {
                    $arrayRespuestaNotif  = $this->guardarNotificacionIncidenciaEcucert($arrayParametrosNotificacion);
                    $arrayRespuesta = array ('strMensaje'   =>  "No se notificó debido a que no se encontró la plantilla. Notificar a Sistemas",
                                             'strStatus'    =>  "205");
                }
            }
            else
            {
                $arrayRespuestaNotif  = $this->guardarNotificacionIncidenciaEcucert($arrayParametrosNotificacion);
                $arrayRespuesta = array ('strMensaje'   =>  $arrayRespuestaNotif["strMensaje"],
                                        'strStatus'    =>  "205");
            }
        }       
        catch(\Exception $ex)
        {
            $strRespuesta   = " Error al enviar la plantilla de notificación al cliente. Favor Notificar a Sistemas";
            $arrayRespuesta = array ('strMensaje'           =>$strRespuesta,
                                    'strStatus'             =>  "500");
            
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.enviarPlantillaECUCERT',
                                            'Error SoporteService.enviarPlantillaECUCERT:'.$arrayParametros.$ex->getMessage(),
                                            $strUsrCreacion,
                                            $strIpCreacion);
            return $arrayRespuesta;
        }
        return $arrayRespuesta;

    }
    
	/**
     * Función que obtiene el resumen de tareas por persona
     * @param array $arrayParametros
     * @return array
     * 
     * @author Robinson Salgado <rsalgado85@gmail.com>
     * @version 1.0 05-12-2018
     */
    public function getResumenTareasPersona($arrayParametros)
    {
		$objInfoDetalle            	= $this->emSoporte->getRepository('schemaBundle:InfoDetalle');
		$arrayRespuesta				= [];
		$arrayRespuesta['Tareas']   = [];
		
		$arrayRespuestaInstalacion			= ['tipo'=>'Instalacion', 			'total' => 0, 'registros' => []];
		$arrayRespuestaSoporte				= ['tipo'=>'Soporte', 				'total' => 0, 'registros' => []];
		$arrayRespuestaRetiroEquipos		= ['tipo'=>'RetiroEquipos', 		'total' => 0, 'registros' => []];
		$arrayRespuestaInterdepartamentales = ['tipo'=>'Interdepartamentales', 	'total' => 0, 'registros' => []];
			
		$arrayResult = $objInfoDetalle->getResumenTareasPersona($arrayParametros);

		if(isset($arrayResult) && is_array($arrayResult['registros']))
		{
			for($i = 0; $i < count($arrayResult['registros']); $i++)
			{
				$strTipo        = 'INTERDEPARTAMENTAL';
				$strNombreTarea = $arrayResult['registros'][$i]['strNombreTarea'];
				$intIdCaso      = $arrayResult['registros'][$i]['intIdCaso'];
				$intNoFinalizada= intval($arrayResult['registros'][$i]['intCantidadNoFinalizadas']);
				$intFinalizadas = intval($arrayResult['registros'][$i]['intCantidadFinalizadas']);
				if(strpos($strNombreTarea, 'INSTALACION') !== false)
				{
					$strTipo 										= 'INSTALACION';
					$arrayResult['registros'][$i]['strTipo'] 		= $strTipo;
					$arrayRespuestaInstalacion['registros'][] 		= $arrayResult['registros'][$i];
					$arrayRespuestaInstalacion['total'] 		   += $intNoFinalizada + $intFinalizadas;
				} 
				else if(strpos($strNombreTarea, 'RETIRAR EQUIPO') !== false)
				{
					$strTipo 										= 'RETIRO DE EQUIPO';
					$arrayResult['registros'][$i]['strTipo'] 		= $strTipo;
					$arrayRespuestaRetiroEquipos['registros'][]		= $arrayResult['registros'][$i];
					$arrayRespuestaRetiroEquipos['total'] 		   += $intNoFinalizada + $intFinalizadas;
				}
				else if($intIdCaso > 0)
				{
					$strTipo 									= 'SOPORTE';
					$arrayResult['registros'][$i]['strTipo'] 	= $strTipo;
					$arrayRespuestaSoporte['registros'][] 		= $arrayResult['registros'][$i];
					$arrayRespuestaSoporte['total'] 		   += $intNoFinalizada + $intFinalizadas;
				}
				else
				{
					$arrayResult['registros'][$i]['strTipo'] 			= $strTipo;
					$arrayRespuestaInterdepartamentales['registros'][] 	= $arrayResult['registros'][$i];
					$arrayRespuestaInterdepartamentales['total'] 	   += $intNoFinalizada + $intFinalizadas;
				}				
			}
		}
		
		$arrayRespuesta['Tareas']   = [
			$arrayRespuestaInstalacion,
			$arrayRespuestaSoporte,
			$arrayRespuestaRetiroEquipos,
			$arrayRespuestaInterdepartamentales
		];
        return $arrayRespuesta;
    }
	
	/**
     * Función que obtiene el resumen de tareas por persona
     * @param array $arrayParametros
     * @return array
     * 
     * @author Robinson Salgado <rsalgado85@gmail.com>
     * @version 1.0 12-12-2018
     */
    public function getResumenTipoTareasTiempo($arrayParametros)
    {		
		$objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle');
		$arrayRespuesta = ['total' => 0, 'registros' => []];
		$arrayRegistros = [];
		
		$arrayResult = $objInfoDetalle->getResumenTipoTareasTiempo($arrayParametros);

		if(isset($arrayResult) && is_array($arrayResult['registros']))
		{
			$intTotal = count($arrayResult['registros']);
			for($i = 0; $i < $intTotal; $i++)
			{
				$strFecha 			= $arrayResult['registros'][$i]['strFecha'];
				$strFechaSiguiente	= ($intTotal == $i+1)? '' : $arrayResult['registros'][$i+1]['strFecha'];
				$strTipoTarea 		= $arrayResult['registros'][$i]['strTipoTarea'];
				
				if(!isset($arrayRegistros[$strFecha]))
				{
					$arrayTipoTarea   			= [];
					$arrayRegistros[$strFecha] 	= ['fecha' => $strFecha, 'data' => $arrayTipoTarea];
					$arrayTipoBool  = [
						'Instalacion' 			=> false, 
						'RetiroEquipos' 		=> false, 
						'Soporte' 				=> false, 
						'Interdepartamentales'	=> false
					];
				}		
				
				if($strTipoTarea === 'INSTALACION')
				{
					$arrayTipoBool['Instalacion'] 			= true;
					$arrayRegistros[$strFecha]['data'][] 	= [
						'tipo'				=> 'Instalacion',
						'total' 			=> $arrayResult['registros'][$i]['intTotal'], 
						'finalizados' 		=> $arrayResult['registros'][$i]['intCantidadFinalizadas'], 
						'noFinalizados' 	=> $arrayResult['registros'][$i]['intCantidadNoFinalizadas']
					];
				}
				else if($strTipoTarea === 'RETIRO DE EQUIPO')
				{
					$arrayTipoBool['RetiroEquipos'] 		= true;
					$arrayRegistros[$strFecha]['data'][] 	= [
						'tipo'				=> 'RetiroEquipos',
						'total' 			=> $arrayResult['registros'][$i]['intTotal'], 
						'finalizados' 		=> $arrayResult['registros'][$i]['intCantidadFinalizadas'], 
						'noFinalizados' 	=> $arrayResult['registros'][$i]['intCantidadNoFinalizadas']
					];
				}
				else if($strTipoTarea === 'SOPORTE')
				{
					$arrayTipoBool['Soporte'] 				= true;
					$arrayRegistros[$strFecha]['data'][] 	= [
						'tipo'				=> 'Soporte',
						'total' 			=> $arrayResult['registros'][$i]['intTotal'], 
						'finalizados' 		=> $arrayResult['registros'][$i]['intCantidadFinalizadas'], 
						'noFinalizados' 	=> $arrayResult['registros'][$i]['intCantidadNoFinalizadas']
					];
				}
				else if($strTipoTarea === 'INTERDEPARTAMENTAL')
				{
					$arrayTipoBool['Interdepartamentales'] 	= true;
					$arrayRegistros[$strFecha]['data'][] 	= [
						'tipo'				=> 'Interdepartamentales',
						'total' 			=> $arrayResult['registros'][$i]['intTotal'], 
						'finalizados' 		=> $arrayResult['registros'][$i]['intCantidadFinalizadas'], 
						'noFinalizados' 	=> $arrayResult['registros'][$i]['intCantidadNoFinalizadas']
					];
				}		
			
				if($strFecha !== $strFechaSiguiente)
				{
					foreach($arrayTipoBool as $key => $value): 
						if(!$value)
						{
							$arrayRegistros[$strFecha]['data'][] = ['tipo' => $key, 'total' => 0, 'finalizados' => 0, 'noFinalizados' => 0];
						}
					endforeach;
				}
			}
			
			foreach($arrayRegistros as $objRegistro): 
				$arrayRespuesta['registros'][] = $objRegistro;
			endforeach;
			
			$arrayRespuesta['total'] = count($arrayRegistros);
		}
		
        return $arrayRespuesta;
    }
	
	/**
     * Función que obtiene el resumen de tareas por persona
     * @param array $arrayParametros
     * @return array
     * 
     * @author Robinson Salgado <rsalgado85@gmail.com>
     * @version 1.0 19-12-2018
	 *
	 * Se separó la JORNADA del resto de eventos
     * @author Robinson Salgado <rsalgado85@gmail.com>
     * @version 1.0 19-12-2018	 
	 *
     *
     * Se devuelve la jornada como un objeto.
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.1 28-10-2020
     * 	   
     */
    public function getResumenEventosPersona($arrayParametros)
    {
		$objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoEvento');
		$arrayRespuesta	= ['total' => 0, 'jornada' => (object)[], 'registros' => []];
		$arrayResult = $objInfoDetalle->getResumenEventosPersona($arrayParametros);
		if(isset($arrayResult) && is_array($arrayResult['registros']))
		{			
			$intTotal = count($arrayResult['registros']);
			for($i = 0; $i < $intTotal; $i++)
			{
				if($arrayResult['registros'][$i]['strCodigoEvento'] == 'JORNADA')
				{
					continue;
				}
				$arrayRegistro              = $arrayResult['registros'][$i]['intTiempo'];
				$arrayRespuesta['horas']   += $arrayRegistro;
			}			
			for($i = 0; $i < $intTotal; $i++)
			{
				$arrayRegistro = $arrayResult['registros'][$i];
				if($arrayRegistro['strCodigoEvento'] == 'JORNADA')
				{
					$arrayRespuesta['jornada'] = $arrayRegistro;
					continue;
				}
				$arrayRegistro['fltPorcentaje']  	= round($arrayRegistro['intTiempo'] * 100 / $arrayRespuesta['horas'], 2);
				$arrayRespuesta['registros'][] 		= $arrayRegistro;
			}			
			$arrayRespuesta['total'] = $intTotal;
		}
                return $arrayRespuesta;
    }
    
    /**
     * Método encargado de enviar al Repository los parámetros necesarios para 
     * obtener el SLA de acuerdo a la razón social/nombre y apellido y el rango de fecha
     * @param $arrParametros  [
     *                                  strRazonSocial     : Razon Social del cliente,
     *                                  strNombres         : Nombres del cliente,
     *                                  strApellidos       : Apellidos del cliente,
     *                                  strFechaInicio     : Fecha de inicio a consultar SLA,
     *                                  strFechaFin        : Fecha de fin a consultar SLA
     *                           ]
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.0 01-08-2019
     * @return JsonResponse
     */
    public function consultarSLATelcograf ($arrayParametros)
    {
        $arrayRespuesta = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                               ->getSLATelcograf($arrayParametros);

        $arrayRespuesta = (array) json_decode($arrayRespuesta);

        if (!empty($arrayRespuesta) && !isset($arrayRespuesta['status']))
        {
            $arrayRespuesta['status'] = 'ok';
        }

        return $arrayRespuesta;
    
    }

    /**
     * Método encargado de calcular el progreso faltante para regularizar las tareas 
     * 
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.0 07-10-2019
     * @return int
     */
    public function calcularProgresoFaltante ($arrayParametros)
    {
        $intPorcentajeRegulariza    = 0;
        $intPorcentajeBase          = $arrayParametros['intPorcentajeBase'];
        $objInfoProgresoTarea       = $this->emSoporte->getRepository('schemaBundle:InfoProgresoTarea')
                                                      ->findBy(
                                                               array(  
                                                                     'detalleId'        => $arrayParametros['intIdDetalle'],
                                                                     'comunicacionId'   => $arrayParametros['intIdComunicacion']
                                                                    )
                                                               );
        foreach($objInfoProgresoTarea as $objProgreso)
        {
            $objProgresoPorcentaje      = $objProgreso->getProgresoPorcentaje();
            $intPorcentaje              = $objProgresoPorcentaje->getPorcentaje();
            $intPorcentajeRegulariza    = $intPorcentajeRegulariza + $intPorcentaje;
            
        }

        $intPorcentajeRegulariza        = $intPorcentajeBase - $intPorcentajeRegulariza;

        return $intPorcentajeRegulariza;
    }

    /**
     * Método encargado de validar si la acción a realizar en la tarea es válida.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 26-12-2019
     *
     * Actualización: Se agrega bloque de código para actualizar datos de tareas en nueva tabla DB_SOPORTE.INFO_TAREA
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.1 08-07-2020
     * 
     * @param Array $arrayParametros [
     *                                 strUsuario       : Usuario solicitante.
     *                                 strIp            : Ip del usuario solicitante.
     *                                 intIdDetalle     : Id detalle de la tarea.
     *                                 intIdDetalleHist : Id detalle historial de la tarea.
     *                               ]
     * @return Array $arrayRespuesta
     */
    public function validarAccionTarea($arrayParametros)
    {
        $strUsuario       = $arrayParametros['strUsuario'] ? $arrayParametros['strUsuario'] : 'Telcos+';
        $strIp            = $arrayParametros['strIp']      ? $arrayParametros['strIp']      : '127.0.0.1';
        $intIdDetalle     = $arrayParametros['intIdDetalle'];
        $intIdDetalleHist = $arrayParametros['intIdDetalleHist'];
        $boolRespuesta    = true;
        $strMensaje       = '<b>Estimado Usuario</b>.<br/>'.
                            'Se procederá a refrescar el grid de tareas para poder visualizar<br>'.
                            'el último estado, por motivos que ya se ha realizado una acción.';

        try
        {
            $objInfoProgresoTarea = $this->emSoporte->getRepository('schemaBundle:InfoDetalleHistorial')
                    ->findOneBy(array('detalleId' => $intIdDetalle),
                                array('id'        => 'DESC'));

            if (is_object($objInfoProgresoTarea))
            {
                $boolRespuesta = $objInfoProgresoTarea->getId() == $intIdDetalleHist;
            }
            if(!$boolRespuesta)
            {
                //ACTUALIZA TAREA EN INFO_TAREA
                $arrayParametrosInfoTarea['intDetalleId'] = $intIdDetalle;
                $arrayParametrosInfoTarea['strUsrUltMod'] = 'telcos';
                $this->actualizarInfoTarea($arrayParametrosInfoTarea);
            }
            $arrayRespuesta = array('boolRespuesta' => $boolRespuesta,
                                    'strMensaje'    => $strMensaje);
        }
        catch(\Exception $objException)
        {
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.validarAccionTarea',
                                            'intIdDetalle: '.$intIdDetalle.', intIdDetalleHist: '.$intIdDetalleHist
                                                .'Error: '.$objException->getMessage(),
                                             $strUsuario,
                                             $strIp);

            $arrayRespuesta = array('boolRespuesta' => $boolRespuesta,
                                    'strMensaje'    => "");
        }
        return $arrayRespuesta;
    }

    /**
     * Método que se encarga del envio de los push notification a los dispositivos.
     *
     * @param $arrParametros
     * [
     *     strTitulo => Título de la notificación
     *     strCuerpo => Cuerpo de la notificación
     *     strIcono  => icono de la notificación (debe estar subido en el servidor de imagenes)
     * ]
     * @author Andres Montero <amontero@telconet.ec>
     * @version 1.0
     * @since 20-04-2020
     *
     * @param array $arrayParametros
     */
    public function enviaNotificacionPush($arrayParametros)
    {
        $arrayTokens   = $arrayParametros['arrayTokens'];
        $strRespuesta  = "";
        try
        {
            //// START TEST FIREBASE NOTIFICATION
            $strTitulo  = $arrayParametros['strTitulo'];
            $strMensaje = $arrayParametros['strCuerpo'];

            define('API_FCM_ACCESS_KEY',$this->strFcmAccessKey);
            define('ICONO',$this->strImageServer.$this->strWebPushPathIcon);
            $objFields =
            [
                'registration_ids'  =>  $arrayTokens,
                'content_available' => true,
                'notification'      =>  [
                                            'title'          =>   $strTitulo,
                                            'body'           =>   $strMensaje,
                                            'icon'           =>   ICONO
                                        ]
            ];

            $objHeaders =
            [
              'Authorization: key=' . API_FCM_ACCESS_KEY,
              'Content-Type: application/json'
            ];

            $objReq = curl_init();
            curl_setopt( $objReq, CURLOPT_URL, 'https://fcm.googleapis.com/fcm/send' );
            curl_setopt( $objReq, CURLOPT_POST, true );
            curl_setopt( $objReq, CURLOPT_HTTPHEADER, $objHeaders );
            curl_setopt( $objReq, CURLOPT_RETURNTRANSFER, true );
            curl_setopt( $objReq, CURLOPT_SSL_VERIFYPEER, false );
            curl_setopt( $objReq, CURLOPT_POSTFIELDS, json_encode( $objFields) );
            $strResultado = curl_exec($objReq);
            curl_close( $objReq );
            $objResultado = json_decode($strResultado);

            if (is_object($objResultado) && $objResultado->success==1)
            {
                $strRespuesta = "OK";
            }
            else
            {
                throw new Exception($strResultado);
            }
        }
        catch(\Exception $objException)
        {
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.enviaNotificacionPush',
                                            'Error: '.$objException->getMessage(),
                                            'Telcos',
                                            '127.0.0.1');
            error_log("fallo al crear notificación en SoporteService.enviaNotificacionPush. [Error]: ".$objException->getMessage());
            $strRespuesta = "Error";
        }
        return $strRespuesta;
    }

/**
     * * Cambia una a asignación a estado Standby
     * @param $arrParametros
     * [
     *     intIdAsignacion     => Id de la asignación
     *     strObservacion      => Detalle de observación para el seguimiento
     *     strFechaCambioTurno => Fecha de cambio de turno
     *     strHoraCambioTurno  => Hora de cambio de turno
     *     strUsrCreacion      => Usuario del empleado quien asigna el problema
     *     strIpCreacion       => Ip del empleado quien asigna el problema
     * ]
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 1.0 12-05-2020
     * @since 1.0
     * @return JsonResponse
     */
    public function ponerQuitarAsignacionStandby($arrayParametros)
    {
        $intIdAsignacion  = $arrayParametros['intIdAsignacion'];
        $strObservacion   = $arrayParametros['strObservacion'];
        $objFeCambioTurno = $arrayParametros['objFechaHoraCambioT'];
        $strUsrCreacion   = $arrayParametros['strUsrCreacion'];
        $strIpCreacion    = $arrayParametros['strIpCreacion'];
        $strTipoHistorial = $arrayParametros['strTipoHistorial'];
        $strAgente        = $arrayParametros['strAgente'];
        $strRespuesta     = "OK";
        $this->emSoporte->beginTransaction();
        try
        {
            $entityInfoAsignacionSolicitud = $this->emSoporte->getRepository("schemaBundle:InfoAsignacionSolicitud")->findOneById($intIdAsignacion);
            if ($strTipoHistorial == 'REASIGNACION')
            {
                $entityInfoAsignacionSolicitud->setUsrAsignado($strAgente);
                $entityInfoAsignacionSolicitud->setEstado('EnGestion');
                $entityInfoAsignacionSolicitud->setFeUltMod(new \DateTime('now'));
                $entityInfoAsignacionSolicitud->setUsrUltMod($user);
            }
            elseif ($strTipoHistorial == 'STANDBY')
            {
                $entityInfoAsignacionSolicitud->setUsrAsignado(null);
                $entityInfoAsignacionSolicitud->setEstado('Standby');
                $entityInfoAsignacionSolicitud->setFeUltMod(new \DateTime('now'));
                $entityInfoAsignacionSolicitud->setUsrUltMod($user);
            }
            $this->emSoporte->persist($entityInfoAsignacionSolicitud);
            //Crea un seguimiento por crear nueva asignación
            $arrayParametrosSeguimiento['intIdAsignacion']            = $entityInfoAsignacionSolicitud->getId();
            $arrayParametrosSeguimiento['strDetalle']                 = $strObservacion;
            $arrayParametrosSeguimiento['strUsuarioCreacion']         = $strUsrCreacion;
            $arrayParametrosSeguimiento['strIpCreacion']              = $strIpCreacion;
            $arrayParametrosSeguimiento['strUsuarioGestion']          = "";
            $arrayParametrosSeguimiento['strGestionado']              = "S";
            $arrayParametrosSeguimiento['intSeguimientoAsignacionId'] = null;
            $arrayParametrosSeguimiento['strProcedencia']             = 'Interno';

            $this->emSoporte->commit();
            $this->emSoporte->flush();

            $this->crearSeguimientoAsignacionSolicitud($arrayParametrosSeguimiento);

            //Crea un Historial por crear nueva asignación
            $arrayParametrosHist['intIdAsignacion']     = $entityInfoAsignacionSolicitud->getId();
            $arrayParametrosHist['strTipo']             = $strTipoHistorial;
            $arrayParametrosHist['strUsrAsignado']      = $strAgente;
            $arrayParametrosHist['strUsrCreacion']      = $strUsrCreacion;
            $arrayParametrosHist['strIpCreacion']       = $strIpCreacion;
            $arrayParametrosHist['objFechaHoraCambioT'] = $objFeCambioTurno;
            $this->crearHistorialAsignacionSolicitud($arrayParametrosHist);

            $this->emSoporte->close();
        }
        catch(\Exception $e)
        {
            if($this->emSoporte->isTransactionActive())
            {
                $this->emSoporte->rollback();
                $this->emSoporte->close();
            }
            $strRespuesta = " Error SoporteService.cambiarAsignacionAStandby: " . $e . ", <br> Favor Notificar a Sistemas";
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.cambiarAsignacionAStandby',
                                             'Error SoporteService.cambiarAsignacionAStandby:'.$e->getMessage(),
                                             $usrCreacion,
                                             $ipCreacion);
            error_log(" Error SoporteService.cambiarAsignacionAStandby: " . $e );
            return $strRespuesta;
        }

        return 'OK';
    }

    /**
     * Método encargado de crear tarea en tabla DB_SOPORTE.INFO_TAREA.
     *
     * @author Andrés Montero H. <amontero@telconet.ec>
     * @version 1.0 - 08-07-2020
     *
     * @param  Array $arrayParametros:
     *                                intDetalleId   => id detalle de la tarea
     *                                strUsrCreacion => usuario de creación
     * @return Array $arrayRespuesta
     */
    public function crearInfoTarea($arrayParametros)
    {
        $intDetalleId     = $arrayParametros['intDetalleId'];
        $strUsrCreacion   = $arrayParametros['strUsrCreacion'];
        $objOciCon        = array('userSoporte' => $this->strUrsrSoporte ,
                                  'passSoporte' => $this->strPassSoporte,
                                  'databaseDsn' => $this->strDnsSoporte);
        $arrayRespuesta   = array ('status'       => '',
                                   'message'      => '');

        $arrayParametrosInfoTarea['intDetalleId']   = $intDetalleId;
        $arrayParametrosInfoTarea['strUsrCreacion'] = $strUsrCreacion;
        $arrayParametrosInfoTarea['objOciCon']      = $objOciCon;
        $arrayRespuesta = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")->creaInfoTarea($arrayParametrosInfoTarea);
        
        return $arrayRespuesta;
    }

    /**
     * Método encargado de actualizar tarea en tabla DB_SOPORTE.INFO_TAREA.
     *
     * @author Andrés Montero H. <amontero@telconet.ec>
     * @version 1.0 - 08-07-2020
     *
     * @param  Array $arrayParametros:
     *                                intDetalleId   => id detalle de la tarea
     *                                strUsrCreacion => usuario de creación
     * @return Array $arrayRespuesta
     */
    public function actualizarInfoTarea($arrayParametros)
    {
        $intDetalleId   = $arrayParametros['intDetalleId'];
        $strUsrUltMod   = $arrayParametros['strUsrUltMod'];
        $objOciCon      = array('userSoporte' => $this->strUrsrSoporte ,
                                'passSoporte' => $this->strPassSoporte,
                                'databaseDsn' => $this->strDnsSoporte);
        $arrayRespuesta = array ('status'       => '',
                                 'message'      => '');

        $arrayParametrosInfoTarea['intDetalleId'] = $intDetalleId;
        $arrayParametrosInfoTarea['strUsrUltMod'] = $strUsrUltMod;
        $arrayParametrosInfoTarea['objOciCon']    = $objOciCon;
        $arrayRespuesta = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")->actualizaInfoTarea($arrayParametrosInfoTarea);

        return $arrayRespuesta;
    }

   /*
    * Descripción: Retorna los motivos que se encuentran parametrizados en INFO_PARAMETRO_DET según las categorias de tareas
    * @author Andrés Montero H. <amontero@telconet.ec>
    * @version 1.0 31-07-2020
    *  
    * @param array $arrayParametros
    */
   public function getMotivosCategoriaTareas($arrayParametros)
   {
       $strValor1  = $arrayParametros['strValor1'];
       $strValor2  = $arrayParametros['strValor2'];
       $strValor3  = $arrayParametros['strValor3'];

       $arrayData      = array();
       $arrayRespuesta = array();

       $arrayResultadosDetalles = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')->get( 'MOTIVOS_CATEGORIA_DE_TAREA', 
                                                                                                   "SOPORTE", 
                                                                                                   "", 
                                                                                                   "", 
                                                                                                   $strValor1, 
                                                                                                   $strValor2,
                                                                                                   $strValor3, 
                                                                                                   "",
                                                                                                   "",
                                                                                                   "",
                                                                                                   "");
        if( count($arrayResultadosDetalles)>0 )
        {
            $intIndice = 0;
            foreach($arrayResultadosDetalles as $arrayDetalle)
            {

                $objAdmiMotivo = $this->emGeneral->getRepository('schemaBundle:AdmiMotivo')->find(intval($arrayDetalle['valor4']));

                if (is_object($objAdmiMotivo))
                {
                    $arrayData[$intIndice]['idMotivo']      = $objAdmiMotivo->getId();
                    $arrayData[$intIndice]['nombreMotivo']  = ucfirst(strtolower($objAdmiMotivo->getNombreMotivo()));
                    $intIndice++;
                }
            }
        }
        $arrayRespuesta['data']    = $arrayData;
        $arrayRespuesta['status']  = 'ok';
        $arrayRespuesta['mensaje'] = 'Se ejecuto proceso exitosamente ';
       $objRespuesta = json_encode($arrayRespuesta);
       return $objRespuesta;
   }


    /**
     * Método encargado de consultar las extensiones de archivos restringidas
     *
     * @author Andrés Montero H. <amontero@telconet.ec>
     * @version 1.0 - 22-09-2020
     *
     * @return Array $arrayRespuesta
     */
    public function getExtensionesDeArchivosRestringidas()
    {
        try
        {
            $objAdmiParametroCab = $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')
            ->findOneBy(array(
                            'nombreParametro' => 'MODULOS_APP',
                            'estado'          => 'Activo'
            ));

            if (!is_object($objAdmiParametroCab))
            {
            throw new \Exception('No existe la configuración de los módulos y extensiones en la base de datos, '.
            'por favor reportar a sistemas.');
            }

            $objExtensionesRestringidas = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                ->findOneBy(array(
                                'parametroId' => $objAdmiParametroCab,
                                'descripcion' => 'EXTENSIONES_RESTRINGIDAS',
                                'estado'      => 'Activo'
                ));

            if (!is_object($objExtensionesRestringidas))
            {
                throw new \Exception('No existe la configuración de extensiones restringidas, '.
                'por favor reportar a sistemas.');
            }
            $arrayRespuesta = array(
                                    'status'      => 'Ok', 
                                    'mensaje'     => 'Ok', 
                                    'success'     => 'true', 
                                    'extensiones' => $objExtensionesRestringidas->getValor1()
                                   );
        }
        catch(\Exception $e)
        {
            $arrayRespuesta = array('status' => 'Error', 'mensaje' => $e->getMessage(), 'success' => 'false', 'extensiones' => '');
            
        }
        return $arrayRespuesta;
    }

   
    /**
     * Documentación para el método 'obtieneSolFcSinSolNcReub'.
     *
     * Función que obtiene una solicitud de Factura sin solicitud de Nota de Crédito enlazada a la tarea de reubicación.
     * 
     * @param  Array $arrayParametros: intIdTarea   => id de la tarea
     *
     * @return Array $arrayRespuesta.
     *
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0 25-10-2020
     */
    public function obtieneSolFcSinSolNcReub($arrayParametros)
    {
        $arrayRespuesta = $this->emComercial->getRepository("schemaBundle:InfoDetalle")->obtieneSolFcSinSolNcReub($arrayParametros);

        return $arrayRespuesta;
    }
    
    /**
     * Documentación para el método 'obtienePersonalAutNc'.
     *
     * Función que obtiene el personal autorizado parametrizado para la Nota de Crédito en el proceso de reubicación.
     * 
     * @param  Array $arrayParametros: strSqlPerAutNc   => Query para obtener al personal Autorizado
     *
     * @return Array $arrayRespuesta.
     *
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0 25-10-2020
     */
    public function obtienePersonalAutNc($arrayParametros)
    {
        $arrayRespuesta = $this->emComercial->getRepository("schemaBundle:InfoDetalle")->obtienePersonalAutNc($arrayParametros);

        return $arrayRespuesta;
    }
    
    /**
     * Documentación para el método 'obtieneSolCaractFactReub'.
     *
     * Función que obtiene las características de la solicitud de factura enlazada a la tarea de reubicación.
     *
     * @param  Array $arrayParametros:
     *                                'strDescCaracteristica' => Descripción de la Característica,
     *                                'strEstado'             => estado Activo,
     *                                'intIdTarea'            => id de la tarea
     * 
     * @return Array $arrayRespuesta.
     *
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0 25-10-2020
     */
    public function obtieneSolCaractFactReub($arrayParametros)
    {
        $arrayRespuesta = $this->emComercial->getRepository("schemaBundle:InfoDetalle")->obtieneSolCaractFactReub($arrayParametros);

        return $arrayRespuesta;
    }
    
    /**
     * Documentación para el método 'obtieneFactConNcReub'.
     *
     * Función que obtiene una factura con Nota de Crédito enlazada a la tarea de reubicación.
     * 
     * @param  Array $arrayParametros: 'intIdTarea'  => id de la tarea
     *
     * @return Array $arrayRespuesta.
     *
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0 26-10-2020
     */
    public function obtieneFactConNcReub($arrayParametros)
    {
        $arrayRespuesta = $this->emComercial->getRepository("schemaBundle:InfoDetalle")->obtieneFactConNcReub($arrayParametros);

        return $arrayRespuesta;
    }
        
    /**
     * Documentación para el método 'obtieneFactSinNcReub'.
     *
     * Función que obtiene una factura sin Nota de Crédito enlazada a la tarea de reubicación.
     * 
     * @param  Array $arrayParametros: 'intIdTarea'  => id de la tarea
     *
     * @return Array $arrayRespuesta.
     *
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.0 26-10-2020
     */
    public function obtieneFactSinNcReub($arrayParametros)
    {
        $arrayRespuesta = $this->emComercial->getRepository("schemaBundle:InfoDetalle")->obtieneFactSinNcReub($arrayParametros);

        return $arrayRespuesta;
    }

    /**
     * Función que sirve para la enviar notificación al cliente de una creación de nuevo caso
     *
     * @author Andrés Montero H. <amontero@telconet.ec>
     * @version 1.0 07-12-2020
     *
     * @param type $arrayData
     * @return $arrayRespuesta
     */
    public function notificaCreacionCaso($arrayParametros)
    {
        $strPrefijoEmpresa     = $arrayParametros['prefijoEmpresa'];
        $strCodEmpresa         = $arrayParametros['codEmpresa'];
        $intIdPunto            = $arrayParametros['idPunto'];
        $strLogin              = $arrayParametros['login'];
        $strNombreDepartamento = $arrayParametros['nombreDepartamento'];
        $intIdDepartamento     = $arrayParametros['idDepartamento'];
        $strUsrAsignado        = $arrayParametros['usrAsignado'];
        $intIdCantonAsignado   = $arrayParametros['idCantonAsignado'];
        $objInfoCaso           = $arrayParametros['objInfoCaso'];
        $arrayTo               = array();
        $arrayParametrosCorreo = array();

        if ($strPrefijoEmpresa == 'TN')
        {
            //Se obtienen los correos relacionados al punto en la que se genero la incidencia
            $arrayContactosPunto = $this->emComercial->getRepository("schemaBundle:InfoPuntoContacto")
                                                     ->getArrayContactosPorPuntoYTipo($intIdPunto,"Contacto Tecnico");

            foreach($arrayContactosPunto as $arrayContacto)
            {
                $arrayTo[] = $arrayContacto['valor'];
            }
            $arrayParametrosCorreo['strEmpresa'] = "TELCONET S.A.";
        }

        if ($strPrefijoEmpresa == 'MD' || $strPrefijoEmpresa == 'EN')
        {
            $arrayContactosPunto = $this->emComercial->getRepository('schemaBundle:InfoPuntoFormaContacto')
                                                     ->getArrayFormaContactosPorPunto($intIdPunto);

            foreach ($arrayContactosPunto as $contacto)
            {
                $arrayTo[] = $contacto['valor'];
            }

            if ($peticion->getSession()->get('prefijoEmpresa') == 'MD')
            {
                $arrayParametrosCorreo['strEmpresa'] = "NETLIFE";
            }

            if ($peticion->getSession()->get('prefijoEmpresa') == 'EN')
            {
                $arrayParametrosCorreo['strEmpresa'] = "ECUANET";
            }

        }

        //**************Se consulta los alias del departamento de L1 Y L2******************//
        if($strPrefijoEmpresa == 'TN')
        {
            $arrayParamCorreosCliente  = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                         ->get('PARAMETROS PROYECTO NOTIFICACIONES CASOS CLIENTE',
                                                               '',
                                                               '',
                                                               'ALIAS_CREAR_CASO_CLIENTE',
                                                               '',
                                                               '',
                                                               '',
                                                               '',
                                                               '',
                                                               $strCodEmpresa);

            foreach($arrayParamCorreosCliente as $strIdxParamCorreo)
            {
                $arrayCorreos = explode("|", $strIdxParamCorreo["valor1"]);
            }

            foreach ($arrayCorreos as $correos)
            {
                $arrayTo[] = $correos;
            }
        }
        //**************Se consulta los alias del departamento de L1 Y L2******************//

        //Se obtiene la persona asignada/afectada en la creacion del CASO para efecto de correos
        $objPersonaAfectada = $this->emComercial->getRepository("schemaBundle:InfoPersona")
                                                ->findOneByLogin($strUsrAsignado);

        //Se obtienen los sintomas por CASO
        $objJsonSintomas  = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")
                                            ->generarJsonSintomasXCaso($objInfoCaso->getId());
        $arraySintomas = json_decode($objJsonSintomas);

        //Se obtiene la direccion y descripcion del punto
        $objInfoPunto  = $this->emComercial->getRepository("schemaBundle:InfoPunto")
                                ->findOneBy(array("login"  => $strLogin,
                                                "estado" => "Activo"));

        if(is_object($objInfoPunto))
        {
            $strDireccionPunto   = $objInfoPunto->getDireccion();
            $strDescripcionPunto = $objInfoPunto->getDescripcionPunto();
        }

        $arrayParametrosCorreo['caso']                 = $objInfoCaso;
        $arrayParametrosCorreo['usrCreacion']          = ucwords(strtolower($objPersonaAfectada->__toString()));
        $arrayParametrosCorreo['departamentoAsignado'] = $strNombreDepartamento;
        $arrayParametrosCorreo['personaAsignada']      = ucwords(strtolower($objPersonaAfectada->__toString()));
        $arrayParametrosCorreo['cliente']              = $strLogin;
        $arrayParametrosCorreo['direccion']            = $strDireccionPunto;
        $arrayParametrosCorreo['descripcion']          = $strDescripcionPunto;
        $arrayParametrosCorreo['tipoCaso']             = $objInfoCaso->getTipoCasoId()->getNombreTipoCaso();
        $arrayParametrosCorreo['sintomas']             = $arraySintomas->encontrados;

        $this->envioPlantilla->generarEnvioPlantilla('Apertura de Caso',
                                                     $arrayTo,
                                                     'CASO_CLIENTE',
                                                     $arrayParametrosCorreo,
                                                     $strCodEmpresa,
                                                     $intIdCantonAsignado,
                                                     $intIdDepartamento,
                                                     null,
                                                     false
                                                    );
    }
    
    /**
     * ingresarPreguntaRespuesta
     *
     * Ingresar las preguntas con sus respuestas al sistema
     * 
     * @return jsonResponse $respuest
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.0 23-12-2020
     *
     */    

    public function ingresarPreguntaRespuesta($arrayParametro)
    {
        $strPregunta    = $arrayParametro['strPregunta'];
        $intEncuesta    = $arrayParametro['intEncuesta'];
        $strRespuesta   = $arrayParametro['strRespuesta'];       
        $strUser        = $arrayParametro['strUser'];        
        $strHost        = $arrayParametro['strHost'];
                
        try
        {            
            $objPregunta = $this->emComunicacion->getRepository('schemaBundle:AdmiPregunta')->findOneBy(array(  'pregunta' => $strPregunta, 
                                                                                                            'estado' => 'Activo' ));

            if(is_object($objPregunta))
            {
                $objEncuestaPregunta = new InfoEncuestaPregunta();
                $objEncuestaPregunta->setPreguntaId($objPregunta->getId());
                $objEncuestaPregunta->setEncuestaId($intEncuesta);
                $objEncuestaPregunta->setValor($strRespuesta);
                $objEncuestaPregunta->setEstado('Activo');
                $objEncuestaPregunta->setFeCreacion(new \DateTime('now'));
                $objEncuestaPregunta->setUsrCreacion($strUser);
                $objEncuestaPregunta->setIpCreacion($strHost);
                $this->emComunicacion->persist($objEncuestaPregunta);
                $this->emComunicacion->flush();
            }

            return 'OK';
        
        } 
        catch (Exception $ex) 
        {
            return $ex->getMessage();
        }
    }

    /**
     * solicitarInformeEjecutivo
     * Solicitar la generacion de informe ejecutivo
     *
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.0 23-12-2020
     *
     * Se actualiza la etiqueta de hipotesis inicial del caso
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.1 28-09-2021
     * 
     * @param type $arrayData
     * @return $array
     */
    public function solicitarInformeEjecutivo($arrayParametros)
    {
        $arrayDetalles = array();
        try
        {
            $intIdCaso  = $arrayParametros['idCaso'];
            $intIdComunicacion = "";
            $intPersonaEmpresaRol  = $arrayParametros['idPersonaEmpresaRol'];
            $intDepartamentoOrigen = $arrayParametros['idDepartamento'];
            $strUsuario            = $arrayParametros['user'];
            $strClientIp           = $arrayParametros['clientIp'];
                        
            $objCaso  = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->find($intIdCaso);
            $objTarea = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')
                                  ->findOneBy(array('nombreTarea' => 'Realizar Informe Ejecutivo de Incidente',
                                                                     'estado' => 'Activo'));
            
            $arrayParametrosTarea['intCaso'] = $intIdCaso;
            //obtengo los datos del jefe de la persona que resolvio ese caso
            $arrayResultadoSolucion = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->getPersonaCasoSolucion($arrayParametrosTarea);
            $arrayResultadoSolucion = $arrayResultadoSolucion[0];
            $strLogin = '';
            if (count($arrayResultadoSolucion) > 0) 
            {
                $objDepartamento = $this->emSoporte->getRepository('schemaBundle:AdmiDepartamento')->find($arrayResultadoSolucion['idDepartamento']);
                
                if (!is_object($objDepartamento)) 
                {
                    throw new \Exception('No existe departamento.');
                }
                
                 if($objCaso->getTipoCasoId()->getNombreTipoCaso() == 'Backbone')
                {
                    $arrayCriterios = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                      ->getRegistrosCriteriosTotalXCaso($intIdCaso, "Data" ,'','');            
                    
                    foreach ($arrayCriterios as $objCriterio)
                    {
                        $strAfectados .= $objCriterio['opcion'].' <br>';
                    }
                }
                else
                {
                    $arrayAfectados = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->getRegistrosAfectadosTotalXCaso($objCaso->getId());
                    
                    foreach ($arrayAfectados as $objAfectado)
                    {
                        if($objAfectado['tipoAfectado'] == 'Cliente')
                        {
                            $strLogin = $objAfectado['afectadoDescripcion'];                        
                            $strAfectados .= $objAfectado['afectadoNombre'].' ';
                        }
                        else if ($objAfectado['tipoAfectado'] == 'Servicio')
                        {
                            $objServicio = $this->emSoporte->getRepository('schemaBundle:InfoServicio')->find($objAfectado['afectadoId']);
                            if(is_object($objServicio))
                            {
                                $strAfectados .= $objServicio->getLoginAux().' ';
                            }
                        }
                        else
                        {
                            $strAfectados .= $objParteAfectada['afectadoNombre'].' ';
                        }                        
                    }
                    
                }
                if ($arrayResultadoSolucion['esJefe'] != 'S') 
                {

                    $intPersona    = $arrayResultadoSolucion['idPersonaJefe'];
                    $objPersonaEmp = $this->emSoporte->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                       ->findOneBy(array(  'personaId'      => $intPersona,
                                                                           'departamentoId' => $objDepartamento->getId()));
                    if(!is_object($objPersonaEmp))
                    {
                        $intPersona = $arrayResultadoSolucion['idPersona'];
                    }
                    
                }
                else 
                {
                    $intPersona = $arrayResultadoSolucion['idPersona'];
                }
                
                $arrayParametrosTarea = array(
                    'intDepartamentoOrigen' => $intDepartamentoOrigen,
                    'intDepartamento' => $objDepartamento->getId(),
                    'intPersona' => $intPersona,
                    'objTarea' => $objTarea,
                    'objCaso' => $objCaso,
                    'strMotivo' => 'Generacion de informe ejecutivo',
                    'strUser' => $strUsuario,
                    'strHost' => $strClientIp,
                    'strObservacion' => 'Generacion de informe ejecutivo');
                
                $arrayResultado = $this->creacionTarea($arrayParametrosTarea);
                
                if ($arrayResultado['status'] == 'OK') 
                {
                    //ingreso los datos en las tablas de preguntas
                    $objEncuesta = new InfoEncuesta();
                    $objEncuesta->setCodigo($intIdCaso);
                    $objEncuesta->setNombreEncuesta('Informe Ejecutivo Tecnico #' . $intIdCaso);
                    $objEncuesta->setDescripcionEncuesta('CASO');
                    $objEncuesta->setEstado('Pendiente');
                    $objEncuesta->setFeCreacion(new \DateTime('now'));
                    $objEncuesta->setUsrCreacion($strUsuario);
                    $objEncuesta->setIpCreacion($strClientIp);
                    $this->emComunicacion->persist($objEncuesta);
                    $this->emComunicacion->flush();
                    
                    $objInfoDocRelacion = new InfoDocumentoRelacion(); 
                    $objInfoDocRelacion->setEncuestaId($objEncuesta->getId()); 
                    $objInfoDocRelacion->setCasoId($intIdCaso);
                    $objInfoDocRelacion->setDetalleId($arrayResultado['intDetalle']);
                    $objInfoDocRelacion->setPersonaEmpresaRolId($intPersonaEmpresaRol);
                    $objInfoDocRelacion->setModulo('SOPORTE');
                    $objInfoDocRelacion->setEstado('Activo');                                                                                   
                    $objInfoDocRelacion->setFeCreacion(new \DateTime('now'));  
                    $objInfoDocRelacion->setUsrCreacion($strUsuario);
                    $this->emComunicacion->persist($objInfoDocRelacion);                        
                    $this->emComunicacion->flush();
                    
                    if (is_object($objEncuesta)) 
                    {
                        $arrayResultadoCaso = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                              ->getResultadoSeguimientoTareasXCaso($intIdCaso);
                        $arrayRegistros = $arrayResultadoCaso['resultado'];
                        
                        if ($arrayRegistros) 
                        {
                            foreach ($arrayRegistros as $data) 
                            {
                                $strAnalisis .= ' •  Fecha: ' . date_format($data["feCreacion"], 'Y-m-d H:i')."<br>".' Tarea: ' . $data["tarea"] . 
                                                ' Obs: ' . $data["observacion"] . ' Dept Asig.: ' . $data["asignadoNombre"] .
                                                ' User.: ' . $data["usrCreacion"]."<br>" ;
                            }
                        }
                        //Se calculan las tareas por caso
                        $arrayParametrosCaso["intIdCaso"] = $intIdCaso;
                        $arrayDetalles = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->getDetallesPorIdCaso($arrayParametrosCaso);
                        
                        foreach ($arrayDetalles as $arrayIdxDetalle)
                        {
                            $intIdComunicacion = "";
                            $intIdComunicacion = $this->emComunicacion->getRepository('schemaBundle:InfoComunicacion')
                                                                ->getMinimaComunicacionPorDetalleId($arrayIdxDetalle["idDetalle"]);

                            $strTareas .= ' #' . $intIdComunicacion;
                        }
                        
                        $arrayParametro['strPregunta'] = 'CLIENTE AFECTADO';
                        $arrayParametro['intEncuesta'] = $objEncuesta->getId();
                        $arrayParametro['strRespuesta'] = $strLogin;
                        $arrayParametro['strUser'] = $strUsuario;
                        $arrayParametro['strHost'] = $strClientIp;
                        
                        //inserto
                        $this->ingresarPreguntaRespuesta($arrayParametro);
                        
                        $arrayParametro['strPregunta'] = 'SERVICIOS AFECTADOS';
                        $arrayParametro['strRespuesta'] = $strAfectados;
                        $this->ingresarPreguntaRespuesta($arrayParametro);
                        
                        $arrayParametro['strPregunta'] = 'PROBLEMA PRESENTADO'; //Hipótesis inicial del caso
                        $arrayParametro['strRespuesta'] = $arrayResultadoSolucion['versionIni'];
                        $this->ingresarPreguntaRespuesta($arrayParametro);
                        
                        $arrayParametro['strPregunta'] = 'FECHA Y  HORA DE INICIO';
                        $arrayParametro['strRespuesta'] = $arrayResultadoSolucion['feApertura'];
                        $this->ingresarPreguntaRespuesta($arrayParametro);
                        
                        $arrayParametro['strPregunta'] = 'FECHA Y  HORA DE FINALIZACIÓN';
                        $arrayParametro['strRespuesta'] = $arrayResultadoSolucion['feCierre'];
                        $this->ingresarPreguntaRespuesta($arrayParametro);
                        
                        $arrayParametro['strPregunta'] = 'NO. DE CASO/TAREAS';
                        $arrayParametro['strRespuesta'] = 'Caso: #' . $arrayResultadoSolucion['numeroCaso'] . '/ Tareas: ' . $strTareas;
                        $this->ingresarPreguntaRespuesta($arrayParametro);
                        
                        $arrayParametro['strPregunta'] = 'DEPARTAMENTO ASIGNADO';
                        $arrayParametro['strRespuesta'] = $objDepartamento->getNombreDepartamento();
                        $this->ingresarPreguntaRespuesta($arrayParametro);
                        
                        $arrayParametro['strPregunta'] = 'ANÁLISIS DE PROBLEMA'; //historial de la tarea
                        $arrayParametro['strRespuesta'] = $strAnalisis;
                        $this->ingresarPreguntaRespuesta($arrayParametro);

                        $arrayParametro['strPregunta'] = 'ACCIONES CORRECTIVAS'; //solucion del caso
                        $arrayParametro['strRespuesta'] = $arrayResultadoSolucion['versionFin'];
                        $this->ingresarPreguntaRespuesta($arrayParametro);

                        $arrayParametro['strPregunta'] = 'PLAN DE MEJORAMIENTO';
                        $arrayParametro['strRespuesta'] = 'NA';
                        $this->ingresarPreguntaRespuesta($arrayParametro);

                        $arrayParametro['strPregunta'] = 'STATUS ACTUAL';
                        $arrayParametro['strRespuesta'] = 'NA';
                        $this->ingresarPreguntaRespuesta($arrayParametro);                        
                    }
                }
  
            }
            else
            {
                $arrayResultado['status'] = 'ERROR';
                $arrayResultado['mensaje'] = 'Caso no ha sido resuelto.';
            }

            return array('status' => $arrayResultado['status'], 'mensaje' => $arrayResultado['mensaje']);            
        } 
        catch (Exception $ex)
        {
            error_log($ex->getMessage());
            return array('status' => 'ERROR', 'mensaje' => $ex->getMessage());
        }
        
    }
    
    /**
     * controlarInformeEjecutivo
     *
     * Controles para solicitar automáticamente informe ejecutivo
     * 
     * @return jsonResponse $respuest
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.0 24-12-2020
     * 
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.1 11-01-2021   En los controles de exceso de tiempo de empresa y
     *                           clientes parametrizados se considera que el tipo de
     *                           afectación sea diferente de 'SINAFECTACION'
     *
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.1 14-01-2021   Se agrega control para excluir clientes a los 
     *                           que no se debe generar automáticamente los
     *                           informes ejecutivos.
     *                           Se parametriza los concentradores que se consideran
     *                           para el control de pérdida total de concentrador.
     *
     */    

    public function controlarInformeEjecutivo($arrayParametros)
    {
        $intMinutosTi               = $arrayParametros['intTiempoIncidencia'];
        $arrayServicioAfectado      = $arrayParametros['arrayServicioAfectado'];
        $arrayTieneDetalleAfectado  = $arrayParametros['arrayTieneDetalleAfectado'];
        $intCasoId                  = $arrayParametros['intCasoId'];
        $strTipoAfectacion          = $arrayParametros['tipo_afectacion'];
        
        $boolExisteCliente          = false;
        $boolExcedeTi               = false;
        $boolEsConcentrador         = false;
        $intCodEmpresa              = $arrayParametros['intCodEmpresa'];
        
        $intPersonaEmpresaRol  = $arrayParametros['idEmpleado'];
        $intDepartamentoOrigen = $arrayParametros['idDepartamento'];
        $strUsuario            = $arrayParametros['usrCreacion'];
        $strClientIp           = $arrayParametros['ipCreacion'];
                
        try
        {
            $arrayParametroClienteCaso = array('intIdCaso'  => $intCasoId);
            
            /**  Bloque que valida a los clientes parametrizados
            *    para NO solicitar automáticamente el IE   **/
            $arrayClientes  = $this->emComercial->getRepository('schemaBundle:InfoParteAfectada')
                                                             ->getInfoClienteCaso($arrayParametroClienteCaso);

            foreach($arrayClientes as $arrayCliente)
            {
                $objPersona = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                    ->findOneBy(array('id' => $arrayCliente['idPersona']));
                if(is_object($objPersona))
                {
                    $strRazonSocial         = $objPersona->getRazonSocial().' '
                                              .$objPersona->getNombres().' '.$objPersona->getApellidos();
                    $arrayParamClienteNOIE  = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                   ->get('Razón social para NO solicitar automáticamente el IE',
                                                         '',
                                                         '',
                                                         'Razones sociales a las que NO se solicitará automáticamente los IE',
                                                         $strRazonSocial,
                                                         $objPersona->getIdentificacionCliente(),
                                                         '',
                                                         '',
                                                         '',
                                                         $intCodEmpresa);
                    if ($arrayParamClienteNOIE)
                    {
                        //Si el array se llena con razón social a la que no se debe
                        // enviár informe ejecutivo entonces se termina la validación y retorna OK
                        return array('status' => 'OK', 'mensaje' => '');
                    }
                }
            }
            /**   FIN Bloque que valida a los clientes parametrizados
            *   para NO solicitar automáticamente el IE            **/
             
            /***  Bloque que valida si el servicio afectado es Concentrador  ***/
             
            foreach($arrayServicioAfectado as $arrayServicio)
            {
                if($arrayServicio['tipoAfectado'] == 'Servicio'
                   && $arrayServicio['afectadoNombre'])
                {
                   //El siguiente código valida si el producto afectado está parametrizado
                   $arrayParamProducto     = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                  ->get('Concentradores para solicitar automáticamente los IE',
                                                        '',
                                                        '',
                                                        'Concentradores para solicitar automáticamente los IE',
                                                        $arrayServicio['afectadoNombre'],
                                                        null,
                                                        '',
                                                        '',
                                                        '',
                                                        $intCodEmpresa);
                   if (!empty($arrayParamProducto) && isset($arrayParamProducto) && $strTipoAfectacion == 'CAIDA')
                   {
                       //Si el array se llena con concentrador al que se debe solicitar
                       //informe ejecutivo y la afectación es caída entonces se actualiza la variable
                       $boolEsConcentrador = true;
                   }// caso contrario va al siguiente control
                    
                }
            }            
            /** FIN Bloque que valida si el servicio afectado es Concentrador **/
             
            /****** Bloque que valida a los clientes parametrizados ********/
            if(!$boolEsConcentrador)
            {
                $arrayClientes  = $this->emComercial->getRepository('schemaBundle:InfoParteAfectada')
                                                               ->getInfoClienteCaso($arrayParametroClienteCaso);

                foreach($arrayClientes as $arrayCliente)
                {
                    $objPersona = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                        ->findOneBy(array('id' => $arrayCliente['idPersona']));
                    if(is_object($objPersona))
                    {
                        $strRazonSocial = $objPersona->getRazonSocial().' '.$objPersona->getNombres().' '.$objPersona->getApellidos();
                        $arrayParamClienteIE  = $this->emSoporte->getRepository('schemaBundle:AdmiParametroDet')
                                                       ->get('Razón social para envío de Informe Ejecutivo',
                                                             '',
                                                             '',
                                                             'Razones sociales a las que se enviará automáticamente los IE',
                                                             $strRazonSocial,
                                                             $objPersona->getIdentificacionCliente(),
                                                             '',
                                                             '',
                                                             '',
                                                             $intCodEmpresa);
                        if ($arrayParamClienteIE && $strTipoAfectacion !== 'SINAFECTACION')
                        {
                            $boolExisteCliente = true;
                        }
                    }
                }
            }
            /***** FIN Bloque que valida a los clientes parametrizados *****/
            
            /**** Bloque que valida si el tiempo de EMPRESA excede el tiempo parametrizado ****/
            if(!$boolExisteCliente && !$boolEsConcentrador)
            {
                $objAdmiParametroCab = $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                    ->findOneBy(array(
                                                    'nombreParametro' => 'Tiempo mínimo de cierre de caso',
                                                    'estado'          => 'Activo'
                                    ));

                if (!is_object($objAdmiParametroCab))
                {
                    return array('status' => 'ERROR', 'mensaje' => 'No existe cabecera '.
                    ' de Tiempo mínimo de cierre de caso, por favor reportar a sistemas.');
                }

                $objAdmiParametroDet = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                    ->findOneBy(array(
                                    'parametroId' => $objAdmiParametroCab,
                                    'descripcion' => 'Tiempo mínimo (minutos) considerado para generar IE automáticamente',
                                    'estado'      => 'Activo'
                    ));

                if (!is_object($objAdmiParametroDet))
                {
                    return array('status' => 'ERROR', 'mensaje' => 'No existe detalle de '.
                    'Tiempo mínimo de cierre de caso en la base de datos, por favor reportar a sistemas.');
                }
                if ($intMinutosTi > intval($objAdmiParametroDet->getValor1())
                    && $strTipoAfectacion !== 'SINAFECTACION')
                {
                    $boolExcedeTi = true;
                }
            }
            /** FIN Bloque que valida si el tiempo de incidencia excede el tiempo parametrizado **/
            
            // Si el caso cae en alguna de las validaciones se solicita generar el informe ejecutivo
             if($boolExcedeTi || $boolExisteCliente || $boolEsConcentrador)
             {
                $arrayParametrosSolicitud['idPersonaEmpresaRol'] = $intPersonaEmpresaRol;
                $arrayParametrosSolicitud['idDepartamento']      = $intDepartamentoOrigen;
                $arrayParametrosSolicitud['user']                = $strUsuario;
                $arrayParametrosSolicitud['clientIp']            = $strClientIp;
                $arrayParametrosSolicitud['idCaso']              = $intCasoId;

                $arrayResultadoIE = $this->solicitarInformeEjecutivo($arrayParametrosSolicitud);
                
                if($arrayResultadoIE['status']== 'ERROR')
                {
                    return array('status' => $arrayResultadoIE['status'], 'mensaje' => $arrayResultadoIE['mensaje'].
                    ' por favor reportar a sistemas.');
                }
                else
                {
                    return array('status' => $arrayResultadoIE['status'], 'mensaje' => $arrayResultadoIE['mensaje']);   
                }
             }
             return array('status' => 'OK', 'mensaje' => '');
        } 
        catch (Exception $ex) 
        {
            return array('status' => 'ERROR', 'mensaje' => $ex->getMessage());
        }
    }
    
    

    
    /**
     * Función para solicitar los permisos de alimentación y finalización de jornada
     * de una cuadrilla.
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.0 14/10/2020
     *
     * @param type $arrayData
     * @return type $arrayRespuesta
     */
    public function getSolicitarPermisoEvento($arrayData)
    {
        $intStatusResponse          = 500;
        $boolPermisoResponse        = false;
        $strMensajeResponse         = '';
        $strUrlHal                  = '';
        $strMsgError                = 'Permiso no habilitado';
        $strMsgErrorComunicacionHal = 'Fallo en la comunicación con Hal, por favor intente de nuevo si el problema persiste comunique a sistemas.';
        $strClass                   = "SoporteService";
        $strAppMethod               = "getSolicitarPermisoEvento";

        try
        {
            $arrayUrlHal    = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
            ->getOne('PARAMETROS_GENERALES_MOVIL', 
                     '', 
                     '', 
                     '', 
                     'URL_HALL_SOLICITAR_PERMISO_EVENTO', 
                     '', 
                     '', 
                     ''
                     );
    
            if(is_array($arrayUrlHal))
            {
                $strUrlHal = !empty($arrayUrlHal['valor2']) ? $arrayUrlHal['valor2'] : "No se pudo setear el valor del permiso";
            }
            $strTiempoAlimentacion = 0;
            $arrayTiempoAlimentacion = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
            ->getOne('PARAMETROS_GENERALES_MOVIL', 
                     '', 
                     '', 
                     '', 
                     'TIEMPO_ALIMENTACION', 
                     '', 
                     '', 
                     ''
                     );
            if(is_array($arrayTiempoAlimentacion))
            {
                $strTiempoAlimentacion = !empty($arrayTiempoAlimentacion['valor2']) ? $arrayTiempoAlimentacion['valor2'] : 60;
            }
            $arrayData["minutosParaAlimentacion"] = intval($strTiempoAlimentacion);

            /* Parametros para el envio al Ws de hal */
            $arrayParametrosWs = array ('strUrl'        => $strUrlHal,
                                        'arrayData'     => $arrayData,
                                        'arrayOptions'  => array(CURLOPT_SSL_VERIFYPEER => false));

            /* Establecemos la comunicación */
            $arrayRespuestaHal = $this->comunicacionWsRestClient($arrayParametrosWs);
            
            // Validaciones de la respuesta de hal
            if (strtoupper($arrayRespuestaHal['mensaje']) == 'FAIL')
            {
                $strMensajeResponse = $strMsgErrorComunicacionHal;

                $this->serviceUtil->insertLog(array(
                    'enterpriseCode'   => "10",
                    'logType'          => 1,
                    'logOrigin'        => 'TELCOS',
                    'application'      => 'TELCOS',
                    'appClass'         => $strClass,
                    'appMethod'        => $strAppMethod,
                    'descriptionError' => $strMsgErrorComunicacionHal,
                    'status'           => 'Fallido',
                    'inParameters'     => json_encode($arrayData),
                    'creationUser'     => 'TELCOS'));
            }
            else
            {
                // A este punto se obtuvo una respuesta positiva de hal
                $intStatusResponse      = $arrayRespuestaHal['result']['status'];
                $boolPermisoResponse    = $arrayRespuestaHal['result']['permiso'];
                $strMensajeResponse     = $arrayRespuestaHal['result']['explicacion'];
            }

            $arrayRespuesta['status']       = $intStatusResponse;
            $arrayRespuesta['permiso']      = $boolPermisoResponse;
            $arrayRespuesta['mensaje']      = $strMensajeResponse;
        }
        catch (\Exception $ex)
        {
            $arrayRespuesta['status']   = $intStatusResponse;
            $arrayRespuesta['permiso']  = $boolPermisoResponse;
            $arrayRespuesta['mensaje']  = $strMsgError;
            
            $this->serviceUtil->insertLog(array(
                                                    'enterpriseCode'   => "10",
                                                    'logType'          => 1,
                                                    'logOrigin'        => 'TELCOS',
                                                    'application'      => 'TELCOS',
                                                    'appClass'         => $strClass,
                                                    'appMethod'        => $strAppMethod,
                                                    'descriptionError' => $ex->getMessage(),
                                                    'status'           => 'Fallido',
                                                    'inParameters'     => json_encode($arrayData),
                                                    'creationUser'     => 'TELCOS'));

        }
        return $arrayRespuesta;
    }


    /**
     * Función para subir uno o varios archivos al microservicio nfs.
     *
     * @author Andrés Montero H. <amontero@telconet.ec>
     * @version 1.0 08/03/2021
     * 
     * @author David De La Cruz <ddelacruz@telconet.ec>
     * @version 1.1 22-06-2021 Se realizan ajustes para renombrar archivos que tienen caracteres especiales y espacios, antes de ser subidos al NFS
     *
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.2 04-03-2022 Ajuste y validacion de extensiones de los archivos
     *
     * @param type $arrayParametros
     * @return type $arrayRespuesta
     *  
     */
    public function guardarMultiplesAdjuntosCasosTareasEnNfs($arrayParametros)
    {
        $strFeCreacion      = new \DateTime('now');
        $objServicio        = $arrayParametros['servicio'];
        $intIdCaso          = $arrayParametros['idCaso'];
        $intIdTarea         = $arrayParametros['idTarea'];
        $strOrigenCaso      = $arrayParametros['origenCaso'];
        $strOrigenTarea     = $arrayParametros['origenTarea'];
        $strCodigoDocumento = $arrayParametros['strCodigoDocumento'];
        $strPrefijoEmpresa  = $arrayParametros['strPrefijoEmpresa'];
        $strUser            = $arrayParametros['strUser'];
        $strIdEmpresa       = $arrayParametros['strIdEmpresa'];
        $arrayArchivos      = $arrayParametros['arrayArchivos'];
        $strApp             = "";
        $arrayPathAdicional = [];
        $strSubModulo       = "";

        $arrayRespuesta     = array();
        $arrayRutasArchivosSubidos = array();
        $this->emComunicacion->getConnection()->beginTransaction();

        try
        {
            $arrayRespuestaExtensionesRes = $this->getExtensionesDeArchivosRestringidas();
            if ($arrayRespuestaExtensionesRes['success'] == 'false' )
            {
                throw new \Exception($arrayRespuesta['mensaje']);
            }

            foreach($arrayArchivos as $objArchivo)
            {
                if (is_object($objArchivo))
                {
                    $strNameFile                        = $objArchivo->getClientOriginalName();
                    $arrayPartsNombreArchivo            = explode('.', $strNameFile);
                    $strLast                            = array_pop($arrayPartsNombreArchivo);
                    $arrayPartsNombreArchivo            = array(implode('_', $arrayPartsNombreArchivo), $strLast);

                    $strNombreArchivo                   = $arrayPartsNombreArchivo[0];
                    $strExtArchivo                      = $strLast;
                    $strTipo                            = $strExtArchivo;
                    $strPrefijo                         = substr(md5(uniqid(rand())),0,6);
                    $strNuevoNombre                     = $strNombreArchivo . "_" . $strPrefijo . "." . $strExtArchivo;
                    
                    if (strlen($strLast) > 5)
                    {
                        throw new \Exception('El archivo (' . $strNameFile . ') tiene una extensión con una longitud no permitida');
                    }

                    // Se reemplazan caracteres que no cumplen con el patron definido para el nombre del archivo
                    $strPatronABuscar = '/[^a-zA-Z0-9._-]/';
                    $strCaracterReemplazo = '_';
                    $strNuevoNombre = preg_replace($strPatronABuscar,$strCaracterReemplazo,$strNuevoNombre);
                    
                    /* Se validan extensiones restringidas */ 
                    if (!(strpos($arrayRespuestaExtensionesRes['extensiones'], strtolower($strExtArchivo)) === false)) 
                    {
                        throw new \Exception('Archivo con extensión (' . $strExtArchivo . ') no permitida');
                    }

                    //Si proviene de subida a partir del servicio del cliente o de la creacion de un caso
                    if($objServicio || $strOrigenCaso == 'S' || $strOrigenTarea == 'S')
                    {
                        $strApp       = "TelcosWeb";

                        $strBand      = "";
                        if($strOrigenCaso == 'S')
                        {
                            $strSubModulo = "Casos";
                            $strBand      = "C";
                        }
                        else if($strOrigenTarea == 'S')
                        {
                            $strSubModulo = "Tareas";
                            $strBand      = "T";
                        }

                        //Guardar en base
                        if($strBand == "C")
                        {
                            $strCaso = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->find($intIdCaso);
                        }
                        else if($strBand == "T")
                        {
                            $strTarea = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->find($intIdTarea);
                        }
                        if($strCaso || $strTarea)
                        {
                            //####################################
                            //INICIO DE SUBIR ARCHIVO AL NFS >>>>>
                            //####################################

                            $strFile         = base64_encode(file_get_contents($objArchivo->getPathName()));
                            $arrayParamNfs   = array(
                                                    'prefijoEmpresa'       => $strPrefijoEmpresa,
                                                    'strApp'               => $strApp,
                                                    'arrayPathAdicional'   => $arrayPathAdicional,
                                                    'strBase64'            => $strFile,
                                                    'strNombreArchivo'     => $strNuevoNombre,
                                                    'strUsrCreacion'       => $strUser,
                                                    'strSubModulo'         => $strSubModulo);

                            $arrayRespNfs = $this->serviceUtil->guardarArchivosNfs($arrayParamNfs);

                            if ($arrayRespNfs['intStatus'] == 200 )
                            {
                                $strFicheroSubido = $arrayRespNfs['strUrlArchivo'];
                            }
                            else
                            {
                                throw new \Exception('Ocurrio un error al subir archivo al servidor Nfs : '.$arrayRespNfs['strMensaje']);
                            }

                            //##################################
                            //<<<<< FIN DE SUBIR ARCHIVO AL NFS
                            //##################################

                            $objInfoDocumento = new InfoDocumento();

                            if($strBand == "C")
                            {
                                $objInfoDocumento->setNombreDocumento('Adjunto Caso');
                                $objInfoDocumento->setMensaje('Documento que se adjunta en la creacion de un Caso');
                            }
                            else if($strBand == "T")
                            {
                                $objInfoDocumento->setNombreDocumento('Adjunto Tarea');
                                $objInfoDocumento->setMensaje('Documento que se adjunta a una tarea');
                            }
                            $objInfoDocumento->setUbicacionFisicaDocumento($strFicheroSubido);
                            $objInfoDocumento->setUbicacionLogicaDocumento($strNuevoNombre);

                            $objInfoDocumento->setEstado('Activo');
                            $objInfoDocumento->setFeCreacion($strFeCreacion);
                            $objInfoDocumento->setFechaDocumento($strFeCreacion);
                            $objInfoDocumento->setIpCreacion('127.0.0.1');
                            $objInfoDocumento->setUsrCreacion($strUser);
                            $objInfoDocumento->setEmpresaCod($strIdEmpresa);

                            $strTipoDoc=  strtoupper($strTipo);
                            if($strTipoDoc=='JPG' || $strTipo=='JPEG')
                            {
                               $strTipoDoc = "JPG" ;
                            }

                            $objTipoDocumento = $this->emComunicacion->getRepository('schemaBundle:AdmiTipoDocumento')
                                                                     ->findOneByExtensionTipoDocumento(array('extensionTipoDocumento'=> $strTipoDoc));

                            if( $objTipoDocumento != null)
                            {
                                $objInfoDocumento->setTipoDocumentoId($objTipoDocumento);
                            }
                            else
                            {
                                //Inserto registro con la extension del archivo a subirse
                                $objAdmiTipoDocumento = new AdmiTipoDocumento();
                                $objAdmiTipoDocumento->setExtensionTipoDocumento(strtoupper($strTipoDoc));
                                $objAdmiTipoDocumento->setTipoMime(strtoupper($strTipoDoc));
                                $objAdmiTipoDocumento->setDescripcionTipoDocumento('ARCHIVO FORMATO '.$strTipoDoc);
                                $objAdmiTipoDocumento->setEstado('Activo');
                                $objAdmiTipoDocumento->setUsrCreacion( $strUser );
                                $objAdmiTipoDocumento->setFeCreacion( $strFeCreacion );
                                $this->emComunicacion->persist( $objAdmiTipoDocumento );
                                $this->emComunicacion->flush();
                                $objInfoDocumento->setTipoDocumentoId($objAdmiTipoDocumento);
                            }

                            if($strTipoDoc === "JPG" || $strTipo==='JPEG' || $strTipo==='PNG')
                            {

                                $arrayExif      = exif_read_data($objArchivo->getPathName());                                    
                                $floatLatitud   = 0;
                                $floatLongitud  = 0;
                                if(isset($arrayExif["GPSLatitude"]) && !empty($arrayExif["GPSLatitude"])
                                    && isset($arrayExif["GPSLatitudeRef"]) && !empty($arrayExif["GPSLatitudeRef"]))
                                {
                                    $floatLatitud   = $this->getCoordenadaGps($arrayExif["GPSLatitude"], $arrayExif['GPSLatitudeRef']);
                                }
                        
                                if(isset($arrayExif["GPSLongitude"]) && !empty($arrayExif["GPSLongitude"])
                                    && isset($arrayExif["GPSLongitudeRef"]) && !empty($arrayExif["GPSLongitudeRef"]))
                                {
                                    $floatLongitud  = $this->getCoordenadaGps($arrayExif["GPSLongitude"], $arrayExif['GPSLongitudeRef']);
                                }
                        
                                $arrayCoordenadas["floatLatitud"]     = $floatLatitud;
                                $arrayCoordenadas["floatLongitud"]    = $floatLongitud;

                                if(isset($arrayCoordenadas["floatLatitud"]) && !empty($arrayCoordenadas["floatLatitud"]))
                                {
                                    $floatLatitud   = $arrayCoordenadas["floatLatitud"];
                                    $objInfoDocumento->setLatitud($floatLatitud);
                                }

                                if(isset($arrayCoordenadas["floatLongitud"]) && !empty($arrayCoordenadas["floatLongitud"]))
                                {
                                    $floatLongitud  = $arrayCoordenadas["floatLongitud"];
                                    $objInfoDocumento->setLongitud($floatLongitud);
                                }
                            }
                            
                            unlink($objArchivo->getPathName());

                            $this->emComunicacion->persist($objInfoDocumento);
                            $this->emComunicacion->flush();

                            //Entidad de la tabla INFO_DOCUMENTO_RELACION donde se relaciona el documento cargado con el IdCaso
                            $objInfoDocumentoRelacion = new InfoDocumentoRelacion();
                            $objInfoDocumentoRelacion->setModulo('SOPORTE');
                            $objInfoDocumentoRelacion->setEstado('Activo');
                            $objInfoDocumentoRelacion->setFeCreacion(new \DateTime('now'));
                            $objInfoDocumentoRelacion->setUsrCreacion($strUser);

                            if($strBand == "C")
                            {
                                $objInfoDocumentoRelacion->setCasoId($intIdCaso);
                            }
                            else if($strBand == "T")
                            {
                                $objInfoDocumentoRelacion->setDetalleId($intIdTarea);
                            }
                            $objInfoDocumentoRelacion->setDocumentoId($objInfoDocumento->getId());

                            $this->emComunicacion->persist($objInfoDocumentoRelacion);
                            $this->emComunicacion->flush();
                        }
                    }
                }
            }
            if ($this->emComunicacion->getConnection()->isTransactionActive())
            {
                $this->emComunicacion->getConnection()->commit();
            }
            $this->emComunicacion->getConnection()->close();
            $arrayRespuesta     = array('status' => 'Ok', 'mensaje' => 'Los archivos se subieron exitosamente', 'success' => true);

            //REGISTRAMOS EN LOG
            $arrayParametrosLog['enterpriseCode']   = $strIdEmpresa; 
            $arrayParametrosLog['logType']          = "1";
            $arrayParametrosLog['logOrigin']        = "TELCOS";
            $arrayParametrosLog['application']      = "TELCOS";
            $arrayParametrosLog['appClass']         = "SoporteService";
            $arrayParametrosLog['appMethod']        = "guardarMultiplesAdjuntosCasosTareasEnNfs";
            $arrayParametrosLog['messageUser']      = "No aplica.";
            $arrayParametrosLog['status']           = "Fallido";
            $arrayParametrosLog['descriptionError'] = "Se guarda archivo correctamente atravez de microservicio de Nfs (".$strFicheroSubido.")";
            $arrayParametrosLog['inParameters']     = json_encode($arrayParametros);
            $arrayParametrosLog['creationUser']     = "TELCOS";

            $this->serviceUtil->insertLog($arrayParametrosLog);
            return $arrayRespuesta;
       }
       catch(\Exception $objE)
       {
           $strMensajeError  = 'Ha ocurrido un error, por favor reporte a Sistemas';

           if ($this->emComunicacion->getConnection()->isTransactionActive())
           {
               $this->emComunicacion->getConnection()->rollback();
           }
           $this->emComunicacion->getConnection()->close();

           if (strpos(strtolower($objE->getMessage()), strtolower("Archivo con extensión")) >= 0)
           {
               $strMensajeError =  $objE->getMessage();
           }
           $this->serviceUtil->insertError('Telcos+',
                                           'SoporteService.guardarMultiplesAdjuntosCasosTareasEnNfs',
                                           'Error SoporteService.guardarMultiplesAdjuntosCasosTareasEnNfs:'.$objE->getMessage(),
                                           $strUser,
                                           '127.0.0.1');
            error_log($objE->getMessage());
           $arrayRespuesta     = array('status' => 'Error', 'mensaje' => $strMensajeError, 'success' => 'false');
           return $arrayRespuesta;
       }
    }

/**
     * Actualización: se añade validación para eliminar caracteres especiales en la observación y versión inicial
     *
     * @author Fernando López <filopez@telconet.ec>
     * @version 1.1 18/01/2022 
     * 
     * Función que permite crear tarea de informe ejecutivo para el módulo de gestión de pendientes
     *
     * @author Andrés Montero Holguin <amontero@telconet.ec>
     * @version 1.0 29/07/2021
     *
     * @param type $arrayParametros
     * @return type $arrayRespuesta
     */
    public function getListadoGestionPendientes($arrayParametros)
    {
        $arrayResult = array();
        try
        {
            $objCursor = $this->emSoporte->getRepository('schemaBundle:InfoAsignacionSolicitud')->getTareasCasosPendientesPorDep($arrayParametros);
            if( !empty($objCursor) )
            {
                $strPattern = '[\n|\r|\n\r|\t|\0|\x0B|,|;]';
                $intI = 0;
                while( ($arrayResultC = oci_fetch_array($objCursor, OCI_ASSOC + OCI_RETURN_NULLS)) )
                {
                    $arrayResult[$intI]['numero']           = $intI+1;

                    $arrayResult[$intI]['id_asignacion']    = ( isset($arrayResultC['ID_ASIGNACION']) && !empty($arrayResultC['ID_ASIGNACION']) )
                                                            ? $arrayResultC['ID_ASIGNACION'] : '';
                    $arrayResult[$intI]['tipo']             = ( isset($arrayResultC['TIPO']) && !empty($arrayResultC['TIPO']) )
                                                            ? $arrayResultC['TIPO'] : '';
                    $arrayResult[$intI]['tipo_problema']    = ( isset($arrayResultC['TIPO_PROBLEMA']) &&  !empty($arrayResultC['TIPO_PROBLEMA']) )
                                                            ? $arrayResultC['TIPO_PROBLEMA'] : '';
                    $arrayResult[$intI]['ticket']           = ( isset($arrayResultC['NUMERO']) && !empty($arrayResultC['NUMERO']) )
                                                            ? $arrayResultC['NUMERO'] : '';
                    $arrayResult[$intI]['estado']           = ( isset($arrayResultC['ESTADO']) && !empty($arrayResultC['ESTADO']) )
                                                            ? $arrayResultC['ESTADO'] : '';
                    $arrayResult[$intI]['estado_pendiente'] = ( isset($arrayResultC['ESTADO_PENDIENTE']) && !empty($arrayResultC['ESTADO_PENDIENTE']))
                                                            ? $arrayResultC['ESTADO_PENDIENTE'] : '';
                    $arrayResult[$intI]['fecha']            = (isset($arrayResultC['FECHA']) && !empty($arrayResultC['FECHA']))
                                                            ? $arrayResultC['FECHA'] : '';
                    $arrayResult[$intI]['fechaFin']         = (isset($arrayResultC['FECHA_FIN']) &&  !empty($arrayResultC['FECHA_FIN']))
                                                            ? $arrayResultC['FECHA_FIN'] : '';
                    $arrayResult[$intI]['detalle_id']       = (isset($arrayResultC['DETALLE_ID']) &&  !empty($arrayResultC['DETALLE_ID']))
                                                            ? $arrayResultC['DETALLE_ID'] : '';
                    $arrayResult[$intI]['referencia_id']    = (isset($arrayResultC['REFERENCIA_ID']) && !empty($arrayResultC['REFERENCIA_ID']))
                                                            ? $arrayResultC['REFERENCIA_ID'] : '';
                    $arrayResult[$intI]['versionInicial']   = ( isset($arrayResultC['VERSION_INICIAL']) && !empty($arrayResultC['VERSION_INICIAL']) )
                                ? str_replace('#',' Nro. ',(preg_replace($strPattern,' ',$arrayResultC['VERSION_INICIAL']))) : '';
                    $arrayResult[$intI]['observacion']      = ( isset($arrayResultC['OBSERVACION']) && !empty($arrayResultC['OBSERVACION']) )
                                ? str_replace('#',' Nro. ',(preg_replace($strPattern,' ',$arrayResultC['OBSERVACION']))):'';
                    $arrayResult[$intI]['tareas']           = ( isset($arrayResultC['TAREAS']) && !empty($arrayResultC['TAREAS']) )
                                                            ? $arrayResultC['TAREAS'] : '';
                    $arrayResult[$intI]['tramo']            = ( isset($arrayResultC['TRAMO']) && !empty($arrayResultC['TRAMO']) )
                                                            ? str_replace('#',' Nro. ',($arrayResultC['TRAMO'])) : '';
                    $arrayResult[$intI]['hilo_telefonica']  = ( isset($arrayResultC['HILO_TELEFONICA']) && !empty($arrayResultC['HILO_TELEFONICA']) )
                                                            ? $arrayResultC['HILO_TELEFONICA'] : '';
                    $arrayResult[$intI]['tarea_informe_id'] = ( isset($arrayResultC['TAREA_INFORME_ID']) && !empty($arrayResultC['TAREA_INFORME_ID']))
                                                            ? $arrayResultC['TAREA_INFORME_ID'] : '';
                    $arrayResult[$intI]['fecha_ini_tarea']  = ( isset($arrayResultC['FECHA_INI_TAREA']) && !empty($arrayResultC['FECHA_INI_TAREA']) )
                                                            ? $arrayResultC['FECHA_INI_TAREA'] : '';
                    $arrayResult[$intI]['fecha_fin_tarea']  = ( isset($arrayResultC['FECHA_FIN_TAREA']) && !empty($arrayResultC['FECHA_FIN_TAREA']) )
                                                            ? $arrayResultC['FECHA_FIN_TAREA'] : '';
                    $arrayResult[$intI]['asig_tarea']       = ( isset($arrayResultC['ASIGNADO_TAREA']) && !empty($arrayResultC['ASIGNADO_TAREA']) )
                                                            ? $arrayResultC['ASIGNADO_TAREA'] : '';
                    $arrayResult[$intI]['telf_asig_tarea']  = ( isset($arrayResultC['TELEFONO_ASIGNADO_TAREA']) && 
                                                                        !empty($arrayResultC['TELEFONO_ASIGNADO_TAREA']) )
                                                            ? $arrayResultC['TELEFONO_ASIGNADO_TAREA'] : '';
                    $arrayResult[$intI]['estado_tarea_inf'] = ( isset($arrayResultC['ESTADO_TAREA_INFORME']) && 
                                                            !empty($arrayResultC['ESTADO_TAREA_INFORME']) )
                                                            ? $arrayResultC['ESTADO_TAREA_INFORME'] : '';
                    $arrayResult[$intI]['notificacion']     = ( isset($arrayResultC['NOTIFICACION']) && !empty($arrayResultC['NOTIFICACION']) )
                                                            ? $arrayResultC['NOTIFICACION'] : 
                                                            (($arrayResult[$intI]['tipo']=='CASO' && empty($arrayResultC['NOTIFICACION']))
                                                            ? 'SIN NOTIFICAR' : '');
                    $arrayResult[$intI]['circuito']         = ( isset($arrayResultC['CIRCUITO']) && !empty($arrayResultC['CIRCUITO']))
                                                            ? str_replace('#',' Nro. ',($arrayResultC['CIRCUITO'])) : '';
                    $arrayResult[$intI]['ult_seguimiento']  = (isset($arrayResultC['ULTIMO_SEGUIMIENTO']) && 
                                                            !empty($arrayResultC['ULTIMO_SEGUIMIENTO']))? 
                                                str_replace('#',' Nro. ',(preg_replace($strPattern,' ',$arrayResultC['ULTIMO_SEGUIMIENTO']))):'';
                    $arrayResult[$intI]['login_afectado']   = ( isset($arrayResultC['LOGIN']) && !empty($arrayResultC['LOGIN']))
                                                            ? str_replace('#',' Nro. ',($arrayResultC['LOGIN'])) : '';
                    $intI++;
                }
            }
            return $arrayResult;
        }
        catch(\Exception $objE)
        {
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.getListadoGestionPendientes',
                                            'Error SoporteService.getListadoGestionPendientes:'.$objE->getMessage(),
                                            $arrayParametros['strUsrSesion'],
                                            '127.0.0.1');
            return $arrayResult;
        }
    }

    /**
     * Función que permite enviar listado de pendientes para el módulo de gestión de pendientes
     *
     * @author Andrés Montero Holguin <amontero@telconet.ec>
     * @version 1.0 04/10/2021
     *
     * @param type $arrayParametros
     * @return type $arrayRespuesta
     */
    public function enviarListadoDePendientes($arrayParametros)
    {
        $strRespuesta = "Ok";
        $strCodigoPlantilla = "";
        try
        {
            $arrayResultado = $this->getListadoGestionPendientes($arrayParametros);

            $strAsunto = "REPORTE DE LABORES Y PENDIENTES";
            if ($arrayParametros['strTabVisible'] == 'GestionPendientesBackbone')
            {
                $strCodigoPlantilla = "NOTIF_LISPENBK";
                $strAsunto = "REPORTE DE LABORES Y PENDIENTES DE BACKBONE";
            }
            elseif ($arrayParametros['strTabVisible'] == 'GestionPendientesTelefonica')
            {
                $strCodigoPlantilla = "NOTIF_LISPENTE";
                $strAsunto = "REPORTE DE LABORES Y PENDIENTES DE TELEFÓNICA";
            }
            else
            {
                throw new \Exception('módulo no configurado');
            }
            $arrayCorreos = array();
            $arrayAliasesDestino = $this->emSoporte->getRepository("schemaBundle:AdmiParametroDet")
                                                   ->get('CORREOS_DESTINO_ENVIAR_LISTADO_PENDIENTES',"SOPORTE","","","",
                                                         $arrayParametros['strTabVisible'],"","","",$arrayParametros['strCodEmpresa']);

            for($intIndice = 0; $intIndice < count($arrayAliasesDestino); $intIndice++ )
            {
                $arrayCorreos[] = $arrayAliasesDestino[$intIndice]['valor1'];
            }

            if(count($arrayCorreos)<=0)
            {
                throw new \Exception('No se encontró correos destinatarios');
            }

            $arrayParametrosCorreo = array(
                'pendientes'            => $arrayResultado
            );

            $this->envioPlantilla->generarEnvioPlantilla($strAsunto,$arrayCorreos,$strCodigoPlantilla,
                                                             $arrayParametrosCorreo,$arrayParametros['strCodEmpresa'],'','');
        }
        catch(\Exception $objE)
        {
            $strRespuesta = $objE->getMessage();
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.enviarListadoDePendientes',
                                            'Error SoporteService.enviarListadoDePendientes:'.$objE->getMessage(),
                                            $arrayParametros['strUsrSesion'],
                                            '127.0.0.1');
        }
        return$strRespuesta;
    }

    /**
     * Función que permite enviar el reporte de labores para el módulo de gestión de pendientes.
     * La función ejecuta webservice del Noc que se encarga de enviar correo con el reporte.
     *
     * @author Andrés Montero Holguin <amontero@telconet.ec>
     * @version 1.0 13/08/2021
     *
     * @param type $arrayParametros
     * @return type $arrayRespuesta
     */
    public function enviarReporteLabores($arrayParametros)
    {
        $arrayResponse = array('status'=>500,'mensaje'=>'Ocurrio un error, no se pudo enviar reporte de labores diarias');
        try
        {
            //Ejecuta ws de App TelcoGraph
            $arrayParametrosWs = array(
                                "value"    => $arrayParametros['strTurno'], 
                                "user"  => $arrayParametros['strUser']
            );

            $strJsonPeticion  = json_encode($arrayParametrosWs);

            $arrayOptions      = array(CURLOPT_SSL_VERIFYPEER => false);
            $arrayResponseJson = $this->serviceRestClient->postJSON($this->strUrlRepLaboresDiariasNoc, $strJsonPeticion , $arrayOptions);
            if($arrayResponseJson['status'] == 200)
            {
                $arrayResponse = json_decode($arrayResponseJson['result'],true);
            }
            else
            {
                throw new \Exception('Error al ejecutar Webservice de reporte de labores diarias del Noc');
            }
        }
        catch(\Exception $objE)
        {
            $strRespuesta = $objE->getMessage();
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService.enviarReporteLabores',
                                            'Error SoporteService.enviarReporteLabores:'.$objE->getMessage(),
                                            $arrayParametros['strUsrSesion'],
                                            '127.0.0.1');
        }
        return $arrayResponse;
    }

    /**
     * Actualización: Se añade lógica para asignar la tarea de informe al encargado ingresado desde la vista de pendientes.
     *
     * @author Fernando López <filopez@telconet.ec>
     * @version 1.1 07/03/2022
     * 
     * Función que permite obtener datos de tarea de informe de recorrido para el módulo de gestión de pendientes
     *
     * @author Andrés Montero Holguin <amontero@telconet.ec>
     * @version 1.0 29/07/2021
     *
     * @param type $arrayParametros
     * @return type $arrayRespuesta
     */
    public function getDatosTareaInformeRecorrido($arrayParametros)
    {
        $intIdFormaContacto   = $arrayParametros['intIdFormaContacto'];
        $intIdClaseDocumento  = $arrayParametros['intIdClaseDocumento'];
        $intIdTarea           = $arrayParametros['intIdTarea'];
        $intIdComunicacion    = $arrayParametros['intIdComunicacion'];
        $strObservacion       = $arrayParametros['strObservacion'];
        $strUsuario           = $arrayParametros['strUsuario'];
        $strCodEmpresa        = $arrayParametros['strCodEmpresa'];
        $strPrefijoEmpresa    = $arrayParametros['strPrefijoEmpresa'];
        $strIpCreacion        = $arrayParametros['strIpCreacion'];
        $objEmSoporte         = $arrayParametros['objEmSoporte'];
        $objEmComunicacion    = $arrayParametros['objEmComunicacion'];
        $objEmComercial       = $arrayParametros['objEmComercial'];
        $strEncargadoTarea       = $arrayParametros['strEncargadoTarea'];
        $intIdDepartamento      = "";
        $intIdPersona           = "";
        $intIdPersonaEmpresaRol = "";
        $strNombrePerAsigna     = "";
        $intIdCanton            = "";
        $intIdCantonJefe        = "";
        $objInfoPersonaJefe     = "";
        $arrayEmpleado          = array();
        $arrayCorreos           = array();
    
        try
        {
            //Obtenemos asignado de la tarea de recorrido
            $objInfoComunicacion = $objEmComunicacion->getRepository("schemaBundle:InfoComunicacion")->find($intIdComunicacion);
            if (is_object($objInfoComunicacion))
            {
                $objInfoDetalleAsignacion = $objEmSoporte->getRepository("schemaBundle:InfoDetalleAsignacion")
                                                        ->getUltimaAsignacion($objInfoComunicacion->getDetalleId());
                if (is_object($objInfoDetalleAsignacion))
                {
                    $objInfoPersona = $objEmComercial->getRepository("schemaBundle:InfoPersona")
                                                    ->find($objInfoDetalleAsignacion->getRefAsignadoId());
                    if (is_object($objInfoPersona))
                    {
                        $arrayEmpleado = $objEmComercial->getRepository("schemaBundle:InfoPersona")
                                                        ->getPersonaDepartamentoPorUserEmpresa($objInfoPersona->getLogin(), $strCodEmpresa);
                    }
                }
            }
            if (!empty($arrayEmpleado))
            {
                $intIdDepartamento = $arrayEmpleado['ID_DEPARTAMENTO'];
                $intIdPersona = $arrayEmpleado['ID_PERSONA'];
                $intIdPersonaEmpresaRol = $arrayEmpleado['ID_PERSONA_EMPRESA_ROL'];
                $strNombrePerAsigna = $arrayEmpleado['NOMBRES']." ".$arrayEmpleado['APELLIDOS'];
                $intIdCanton        = $arrayEmpleado['ID_CANTON'];
            }
            $objAdmiDepartamento = $objEmComercial->getRepository("schemaBundle:AdmiDepartamento")
                                                    ->findOneById($intIdDepartamento);
            if (!is_object($objAdmiDepartamento))
            {
                throw new \Exception('No se encontro departamento para asignar a la tarea de informe de recorrido');
            }
            $objAdmiClaseDocumento = $objEmComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")->findOneById($intIdClaseDocumento);
            if (!is_object($objAdmiClaseDocumento))
            {
                throw new \Exception('No se encontro clase para crear la tarea de informe de recorrido');
            }
            $objAdmiFormaContacto = $objEmComercial->getRepository("schemaBundle:AdmiFormaContacto")->findOneById($intIdFormaContacto);
            if (!is_object($objAdmiFormaContacto))
            {
                throw new \Exception('No se encontro forma de contacto para crear la tarea de informe de recorrido');
            }
            $arrayItems = $objEmSoporte->getRepository( "schemaBundle:AdmiParametroDet")->get(
                            "VALORES_ASIGNACION_TAREA_INFORME_MODULO_GESTION_PENDIENTES","SOPORTE",
                            "","","","",$intIdDepartamento,"","",$strCodEmpresa);
        
            //Se obtiene el jefe del departamento segun el canton y el departamento del asignado en la tarea de recorrido
            $arrayParametrosResponsable["intCantonId"]      = $intIdCanton;
            $arrayParametrosResponsable["strEstado"]        = "Activo";
            $arrayParametrosResponsable["intDepartamento"]  = $intIdDepartamento;
            $arrayParametrosResponsable["strRol"]           = $arrayItems[0]['valor4'];
            $arrayParametrosResponsable["strTipoRol"]       = "Empleado";
            $arrayParametrosResponsable["strEmpresaCod"]    = $strCodEmpresa;

            if(isset($strEncargadoTarea) && strpos($strEncargadoTarea,'@@') !== false)
            {
                $arrayInfoJefe = explode( '@@', $strEncargadoTarea);
                $intPersonaIdJefe = $arrayInfoJefe[0];
                $intPersonaJefeEmpresaRolId = isset($arrayInfoJefe[1])?intval($arrayInfoJefe[1]):''; 
                $objInfoPersonaEmpresaRol = $objEmComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                            ->find($intPersonaJefeEmpresaRolId);

                if(!is_object($objInfoPersonaEmpresaRol))
                {
                    throw new \Exception('No se encontro información del encargado '.$intPersonaIdJefe.'-'.$intPersonaJefeEmpresaRolId);
                }                                            
                $objInfoPersonaJefe       = $objInfoPersonaEmpresaRol->getPersonaId();

                $intIdPersona = $intPersonaIdJefe;
                $strNombrePerAsigna = $objInfoPersonaEmpresaRol->getPersonaId()->getInformacionPersona();
                $intIdPersonaEmpresaRol = $objInfoPersonaEmpresaRol->getId();

            }else
            {

                $arrayEmpleadoJefe                              = $objEmComercial->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                                                    ->getJefePorDepartamento($arrayParametrosResponsable);
                if (count($arrayEmpleadoJefe)>0)
                {
                    $objInfoPersonaEmpresaRol = $objEmComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                ->find($arrayEmpleadoJefe["personaEmpresaRolId"]);
                    $objInfoPersonaJefe       = $objInfoPersonaEmpresaRol->getPersonaId();
                }
                //Si no encuentra el jefe busca si tiene un jefe principal por departamento, parametrizados en valor5 y valor6
                if (!is_object($objInfoPersonaJefe) && isset($arrayItems[0]['valor5']) && isset($arrayItems[0]['valor6']))
                {
                    $arrayParametrosResponsable["intCantonId"] = $arrayItems[0]['valor6'];
                    $arrayParametrosResponsable["strRol"]      = $arrayItems[0]['valor5'];
                    $arrayEmpleadoJefe                         = $objEmComercial->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                                                ->getJefePorDepartamento($arrayParametrosResponsable);
                    if (count($arrayEmpleadoJefe)>0)
                    {
                        $objInfoPersonaEmpresaRol = $objEmComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                    ->find($arrayEmpleadoJefe["personaEmpresaRolId"]);
                        $objInfoPersonaJefe       = $objInfoPersonaEmpresaRol->getPersonaId();
                    }
                }
            
                //Se obtiene el asignado de tarea de informe segun el departamento 
                //(Si el departamento es fibra el asignado es el asignado de tarea de recorrido)
                if ($arrayItems[0]['valor2'] == 'JEFE_TECNICA_SUCURSAL')
                {
                    if (count($arrayEmpleadoJefe)>0)
                    {
                        $objInfoPersonaEmpresaRol = $objEmComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                ->find($arrayEmpleadoJefe["personaEmpresaRolId"]);
                        $intIdPersona           = $arrayEmpleadoJefe["idPersona"];
                        $strNombrePerAsigna     = $arrayEmpleadoJefe["nombreCompleto"];
                        $intIdPersonaEmpresaRol = $objInfoPersonaEmpresaRol->getId();
                    }
                }
                elseif ($arrayItems[0]['valor2'] == 'COORDINADOR_CUADRILLA')
                {
                    $objInfoPersonaEmpresaRol  = $objEmComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')->find($intIdPersonaEmpresaRol);
                    $intIdReportaPersonaEmpRid = $objInfoPersonaEmpresaRol->getReportaPersonaEmpresaRolId();
                    if (is_object($objInfoPersonaEmpresaRol) && isset($intIdReportaPersonaEmpRid))
                    {
                        $objInfoPersonaEmpresaRolCoordinador = $objEmComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                                ->find($objInfoPersonaEmpresaRol->getReportaPersonaEmpresaRolId());
                        if(is_object($objInfoPersonaEmpresaRolCoordinador))
                        {
                            $intIdPersona           = $objInfoPersonaEmpresaRolCoordinador->getPersonaId()->getId();
                            $strNombrePerAsigna     = $objInfoPersonaEmpresaRolCoordinador->getPersonaId()->getInformacionPersona();
                            $intIdPersonaEmpresaRol = $intIdReportaPersonaEmpRid;
                        }
                    }
                }
            }
            //Obtener el canton del jefe del departamento
            $arrayEmpleadoJefe = array();
            if (is_object($objInfoPersonaJefe))
            {
                $arrayEmpleadoJefe = $objEmComercial->getRepository("schemaBundle:InfoPersona")
                                                    ->getPersonaDepartamentoPorUserEmpresa($objInfoPersonaJefe->getLogin(), $strCodEmpresa);
            }
            if (!empty($arrayEmpleadoJefe))
            {
                $intIdCantonJefe = $arrayEmpleadoJefe['ID_CANTON'];
            }
        
            //Obtiene correos de departamento responsable de informe
            $arrayAliasesDepResponsableInforme = explode(",",$arrayItems[0]['valor1']);
            for($intIndice = 0; $intIndice < count($arrayAliasesDepResponsableInforme); $intIndice++ )
            {
                $arrayAliasesDepResp = explode("|",$arrayAliasesDepResponsableInforme[$intIndice]);
                if (intval($arrayAliasesDepResp[0]) == $intIdCantonJefe)
                {
                    $arrayCorreos[] = $arrayAliasesDepResp[1];
                }
            }
        
            //Crea la tarea de informe
            $arrayDatosTarea["strObservacion"]           = $strObservacion;
            $arrayDatosTarea["intTarea"]                 = $intIdTarea;
            $arrayDatosTarea["strTipoAfectado"]          = "";
            $arrayDatosTarea["objPunto"]                 = null;
            $arrayDatosTarea["strEmpresaCod"]            = $strCodEmpresa;
            $arrayDatosTarea["strPrefijoEmpresa"]        = $strPrefijoEmpresa;
            $arrayDatosTarea["strUsrCreacion"]           = $strUsuario;
            $arrayDatosTarea["strIpCreacion"]            = $strIpCreacion;
            $arrayDatosTarea["intDetalleSolId"]          = null;
            $arrayDatosTarea["intDepartamentoOrigen"]    = $intIdDepartamentoOrigen;
            $arrayDatosTarea["strBanderaTraslado"]       = "N";
            $arrayDatosTarea["strRegion"]                = "";
            $arrayDatosTarea["strCantonId"]              = $intIdCanton;
            $arrayDatosTarea["strIdPersonaAsig"]         = $intIdPersona;
            $arrayDatosTarea["strNombrePersonaAsig"]     = $strNombrePerAsigna;
            $arrayDatosTarea["strIdPerRolAsig"]          = $intIdPersonaEmpresaRol;
            $arrayDatosTarea["objDepartamento"]          = $objAdmiDepartamento;
            $arrayDatosTarea["nombreClaseDocumento"]     = $objAdmiClaseDocumento->getNombreClaseDocumento();
            $arrayDatosTarea["nombreFormaContacto"]      = $objAdmiFormaContacto->getDescripcionFormaContacto();
            $arrayDatosTarea["asignadoEnDetSeguimiento"] = 'Empleado';

            $arrayRespuesta = array('mensaje'=> 'Los datos para tarea de informe  fue obtenida con exito!',
                                    'status' => 200,
                                    'data'=>array("intNumeroTarea"=>$intNumeroTarea,
                                                    "intIdPersona"=>$intIdPersona,
                                                    "arrayCorreos"=>$arrayCorreos,
                                                    "objAdmiDepartamento"=>$objAdmiDepartamento,
                                                    "arrayDatosTarea"=>$arrayDatosTarea
                                                )
                                    );
        }
        catch(\Exception $e)
        {
            $arrayRespuesta = array('mensaje'=>'Ocurrio un error, no se pudo obtener data para la tarea de informe!','status' => 500,'data'=>array());
            $objServiceUtil->insertError($strUsuario,'SoporteBundle.SoporteService.getDatosTareaInformeEjecutivo',
                                        'Error al obtener datos para tarea de informe ==>> '.$e->getMessage(),$strUsuario,$strIpCreacion);
            error_log($e->getMessage());
        }
        return $arrayRespuesta;
    }

    /**
     * Actualización: Se agrega validaciones para replicar tareas y casos aperturadas por la razon social TELCONET.SA. y 
     *                Gobierno Autonomo Descentralizado Municipal de Guayaquil en el sub-módulo Municipio
     * @author Fernando López <filopez@telconet.ec>
     * @version 1.2 06/01/2022
     * 
     * Actualización: Se agrega validaciones para replicar tareas y casos para los sub-módulos Telefónica y Municipio
     * @author Andrés Montero Holguin <amontero@telconet.ec>
     * @version 1.1 13/08/2021
     * 
     * Función que permite replicar las tareas o casos que se creen por telcos hacia el módulo de gestión de pendientes.
     *
     * @author Andrés Montero Holguin <amontero@telconet.ec>
     * @version 1.0 10/02/2021
     *
     * @param type $arrayParametros
     * @return type $arrayRespuesta
     */
    public function replicarTareaAGestionPendientes($arrayParametros)
    {
        $boolProcesosGestionPend  = false;
        $boolReplicarAgestionPend = false;
        $boolTipoCasoGestionPend  = false;
        $strTabVisible            = "";
        $intIdDepartamentoNuevo   = "";
        $intIdDepartamentoOrig    = "";
        try
        {
            $objInfoAsignacionSolicitud = $this->emSoporte->getRepository('schemaBundle:InfoAsignacionSolicitud')
                                                          ->findOneBy(array('referenciaId'=>$arrayParametros['intReferenciaId']));
            $intIdDepartamentoNuevo     = $arrayParametros['intDepartamentoId'];

            if (is_object($objInfoAsignacionSolicitud) )
            {
                $intIdDepartamentoOrig = $objInfoAsignacionSolicitud->getDepartamentoId();
                $strTabVisible         = $objInfoAsignacionSolicitud->getTabVisible();
            }

            //SI ES TAREA OBTIENE PARAMETROS DE LOS PROCESOS HABILITADOS PARA REPLICAR CASOS AL MODULO DE GESTION DE PENDIENTES
            if ($arrayParametros['strTipoAtencion']=='TAREA')
            {

                //Se obtiene departamento del usuario que creo la tarea
                $arrayEmpleado = $this->emComercial->getRepository("schemaBundle:InfoPersona")
                ->getPersonaDepartamentoPorUserEmpresa($arrayParametros['strUsrCreacion'], $arrayParametros['idEmpresa']);

                if (!empty($arrayEmpleado))
                {
                    $intIdDepartamentoCreaTarea = $arrayEmpleado['ID_DEPARTAMENTO'];
                }


                $arrayParamProcesosReplicarGestionPend = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get(
                                                                        'PROCESOS_REPLICAR_CASOS_TAREAS',
                                                                        'SOPORTE','','',$arrayParametros['intProcesoId'],
                                                                        '','','','',$arrayParametros['idEmpresa'],''
                                                                     );
                
                foreach($arrayParamProcesosReplicarGestionPend as $arrayProcesos)
                {
                    $arrayDepartamentosAsignadosA   = explode(",",$arrayProcesos['valor2']);
                    $arrayDepartamentosAsignadosPor = explode(",",$arrayProcesos['valor6']);

                    if ( ( (  $arrayProcesos['valor5'] == 'ASIGNADO_A' 
                          && in_array($intIdDepartamentoNuevo, $arrayDepartamentosAsignadosA) ) ||
                          (  $arrayProcesos['valor5'] == 'ASIGNADO_POR' 
                          && in_array($intIdDepartamentoCreaTarea, $arrayDepartamentosAsignadosPor) )  )
                          && ( $arrayParametros['intTareaId'] == intval($arrayProcesos['valor4']) || $arrayProcesos['valor4']==null ) )
                    {
                        $strTabVisible          = $arrayProcesos['valor3'];
                        $boolProcesoGestionPend = true;
                        break;
                    }
                    
                }

                //Se añade validación para tareas de Backbone aperturada por cliente Municipio o TELCONET.SA para que se listen en Municipio 
                if($boolProcesoGestionPend && isset($arrayParametros['strLogin']) && $arrayParametros['strLogin'] !== '' &&
                    $strTabVisible == 'GestionPendientesBackbone')
                {
                    $intIdPersonaEmpresaRol = "";
                    $arrayInfoPunto = $this->emComercial->getRepository("schemaBundle:InfoPunto")->findByLogin($arrayParametros['strLogin']);
                    if(count($arrayInfoPunto)>0)
                    {
                        $intIdPersonaEmpresaRol = $arrayInfoPunto[0]->getPersonaEmpresaRolId()->getId();
                    }
                    $arrayParamLoginReplicarGestionPend = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->get(
                                                                            'CLIENTE_AFECTADO_REPLICAR_A_GESTION_PENDIENTES',
                                                                            'SOPORTE','','','','','','ID_PERSONA_EMPRESA_ROL','',
                                                                            $arrayParametros['idEmpresa'],''
                                                                         );
                    foreach($arrayParamLoginReplicarGestionPend as $arrayProcesos)
                    {
                        if ($arrayProcesos['valor1'] == $intIdPersonaEmpresaRol && $arrayProcesos['valor2'] == $intIdDepartamentoNuevo 
                            && $arrayProcesos['valor6'] == $intIdDepartamentoCreaTarea && ($arrayProcesos['descripcion'] == 'Cliente afectado'
                            || $arrayProcesos['descripcion'] == 'Cliente afectado TN'))
                        {
                            $strTabVisible          = $arrayProcesos['valor3'];
                            $boolProcesoGestionPend = true;
                            break;  
                        }
                    } 
                }

                ////SI NO ENCONTRO, BUSCA SI COINCIDE CON LOGIN O ID_PERSONA_EMPRESA_ROL DE CLIENTE PARAMETRIZADOS
                if (!$boolProcesoGestionPend && isset($arrayParametros['strLogin']))
                {
                    $intIdPersonaEmpresaRol = "";
                    $arrayInfoPunto = $this->emComercial->getRepository("schemaBundle:InfoPunto")->findByLogin($arrayParametros['strLogin']);
                    if(count($arrayInfoPunto)>0)
                    {
                        $intIdPersonaEmpresaRol = $arrayInfoPunto[0]->getPersonaEmpresaRolId()->getId();
                    }
                    $arrayParamLoginReplicarGestionPend = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->get(
                                                                            'CLIENTE_AFECTADO_REPLICAR_A_GESTION_PENDIENTES',
                                                                            'SOPORTE','','','','','','','',$arrayParametros['idEmpresa'],''
                                                                         );
                    foreach($arrayParamLoginReplicarGestionPend as $arrayProcesos)
                    {
                        $arrayDepartamentosAsignadosA   = explode(",",$arrayProcesos['valor2']);
                        $arrayDepartamentosAsignadosPor = explode(",",$arrayProcesos['valor6']);
    
                        if ((($arrayProcesos['valor5'] == 'ASIGNADO_A' && in_array($intIdDepartamentoNuevo, $arrayDepartamentosAsignadosA)) ||
                           ($arrayProcesos['valor5'] == 'ASIGNADO_POR' && in_array($intIdDepartamentoCreaTarea, $arrayDepartamentosAsignadosPor))) &&
                           (
                               ($arrayProcesos['valor4'] == 'LOGIN' && $arrayProcesos['valor1'] == $arrayParametros['strLogin'])  ||
                               ($arrayProcesos['valor4'] == 'ID_PERSONA_EMPRESA_ROL' && $arrayProcesos['valor1'] == $intIdPersonaEmpresaRol)
                           ) && (($arrayProcesos['descripcion'] == 'Cliente afectado TN' && $arrayProcesos['valor6'] == $intIdDepartamentoCreaTarea)
                                    || ($arrayProcesos['descripcion'] !== 'Cliente afectado TN')))
                        {
                            $strTabVisible          = $arrayProcesos['valor3'];
                            $boolProcesoGestionPend = true;
                            break;
                        }
                    }
                }
            }
            //SI ES CASO OBTIENE PARAMETROS DE TIPOS DE CASO HABILITADOS PARA REPLICAR CASOS AL MODULO DE GESTION DE PENDIENTES
            if ($arrayParametros['strTipoAtencion']=='CASO')
            {
                $objInfoCaso = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->find($arrayParametros['intReferenciaId']);

                $arrayEmpleado = $this->emComercial->getRepository("schemaBundle:InfoPersona")
                ->getPersonaDepartamentoPorUserEmpresa($objInfoCaso->getUsrCreacion(), $arrayParametros['idEmpresa']);

                if (!empty($arrayEmpleado))
                {
                    $intIdDepartamentoCreaCaso = $arrayEmpleado['ID_DEPARTAMENTO'];
                }

                $strLoginCliente = ($arrayParametros['strLogin'] && $arrayParametros['strLogin'] !== '')?$arrayParametros['strLogin']:'';

                //BUSCA SI COINCIDE CON LOGIN DEL ARREGLO DE AFECTADOS DE UN CASO (CASOS BACKBONE)
                if (isset($arrayParametros['arrayAfectados']['afectadosDetalle']) && count($arrayParametros['arrayAfectados']['afectadosDetalle'])>0 )
                {
                    error_log(print_r($arrayParametros['arrayAfectados']['afectadosDetalle'],1));

                    $arrayDetalleAfectados = $arrayParametros['arrayAfectados']['afectadosDetalle'];

                    for($intIAfect=0;$intIAfect<count($arrayDetalleAfectados);$intIAfect++)
                    {
                        $strLoginAfectadDet = $arrayDetalleAfectados[$intIAfect]['afectadoNombre'];
                        $intIdPersonaEmpresaRolAfecDet = "";
                        $arrayInfoPuntoAfecDet = $this->emComercial->getRepository("schemaBundle:InfoPunto")->findByLogin($strLoginAfectadDet);
                        if(count($arrayInfoPuntoAfecDet)>0)
                        {
                            $intIdPersonaEmpresaRolAfecDet = $arrayInfoPuntoAfecDet[0]->getPersonaEmpresaRolId()->getId();
                            $arrayParamLoginCasoReplicarGestionPend = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                      ->get(
                                                                                            'CLIENTE_AFECTADO_REPLICAR_A_GESTION_PENDIENTES',
                                                                                            'SOPORTE','','',$intIdPersonaEmpresaRolAfecDet,
                                                                                            '','','','',$arrayParametros['idEmpresa'],''
                                                                                        );
                            foreach($arrayParamLoginCasoReplicarGestionPend as $arrayProcesos)
                            {
                                $arrayDepartamentosAsignadosA   = explode(",",$arrayProcesos['valor2']);
                                $arrayDepartamentosAsignadosPor = explode(",",$arrayProcesos['valor6']);                        
                                
                                if ((($arrayProcesos['valor5'] == 'ASIGNADO_A' && 
                                      in_array($intIdDepartamentoNuevo, $arrayDepartamentosAsignadosA)) ||
                                ($arrayProcesos['valor5'] == 'ASIGNADO_POR' && 
                                 in_array($intIdDepartamentoCreaCaso, $arrayDepartamentosAsignadosPor))) 
                                 && $arrayProcesos['descripcion'] !== 'Cliente afectado TN' )
                                {
                                    $strTabVisible           = $arrayProcesos['valor3'];
                                    $boolTipoCasoGestionPend = true;
                                    break;
                                }
                            }
                        }
                        if ($boolTipoCasoGestionPend)
                        {
                            break;
                        }
                    }
                }


                //BUSCA SI COINCIDE CON LOGIN O ID_PERSONA_EMPRESA_ROL DE CLIENTE PARAMETRIZADOS
                if (!$boolTipoCasoGestionPend && (isset($arrayParametros['arrayAfectados']['afectadosPadre']) && 
                    count($arrayParametros['arrayAfectados']['afectadosPadre'])>0) )
                {
                    $strLoginAfectado = $arrayParametros['arrayAfectados']['afectadosPadre'][0]['afectadoNombre'];
                    $arrayParametros['strLogin'] = $strLoginAfectado;
                    if (isset($strLoginAfectado))
                    {
                        $intIdPersonaEmpresaRol = "";
                        $arrayInfoPunto = $this->emComercial->getRepository("schemaBundle:InfoPunto")->findByLogin($strLoginAfectado);
                        if(count($arrayInfoPunto)>0)
                        {
                            $intIdPersonaEmpresaRol = $arrayInfoPunto[0]->getPersonaEmpresaRolId()->getId();
                        }

                        $arrayParamLoginCasoReplicarGestionPend = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->get(
                                                                                'CLIENTE_AFECTADO_REPLICAR_A_GESTION_PENDIENTES',
                                                                                'SOPORTE','','','','','','','',$arrayParametros['idEmpresa'],''
                                                                                );
                        foreach($arrayParamLoginCasoReplicarGestionPend as $arrayProcesos)
                        {
                            $arrayDepartamentosAsignadosA   = explode(",",$arrayProcesos['valor2']);
                            $arrayDepartamentosAsignadosPor = explode(",",$arrayProcesos['valor6']);                        
                            
                            if ((($arrayProcesos['valor5'] == 'ASIGNADO_A' && in_array($intIdDepartamentoNuevo, $arrayDepartamentosAsignadosA)) ||
                            ($arrayProcesos['valor5'] == 'ASIGNADO_POR' && in_array($intIdDepartamentoCreaCaso, $arrayDepartamentosAsignadosPor))) &&
                                (
                                    ($arrayProcesos['valor4'] == 'LOGIN' && $arrayProcesos['valor1'] == $strLoginAfectado)  ||
                                    ($arrayProcesos['valor4'] == 'ID_PERSONA_EMPRESA_ROL' && $arrayProcesos['valor1'] == $intIdPersonaEmpresaRol) 
                                ) && $arrayProcesos['descripcion'] !== 'Cliente afectado TN')
                            {
                                $strTabVisible           = $arrayProcesos['valor3'];
                                $boolTipoCasoGestionPend = true;
                                break;
                            }

                            //Validación de casos aperturados por razon social TELCONET.SA.
                            if($arrayProcesos['descripcion'] == 'Cliente afectado TN' && 
                                $arrayProcesos['valor1'] == $intIdPersonaEmpresaRol && 
                                $arrayProcesos['valor2'] == $intIdDepartamentoNuevo && 
                                $arrayProcesos['valor6'] == $intIdDepartamentoCreaCaso)
                            {
                                if(is_object($objInfoCaso))
                                {
                                    if($arrayProcesos['valor7'] !== '' && isset($arrayParametros['arrayAfectados']['afectadosDetalle']) 
                                        && count($arrayParametros['arrayAfectados']['afectadosDetalle'])>0)
                                    {
                                        $arrayParteAfectadas = $arrayParametros['arrayAfectados']['afectadosDetalle'];
                                        $arrayIdProductos = explode(",",$arrayProcesos['valor7']);
                                        $objProductos = $this->emComercial->getRepository("schemaBundle:AdmiProducto")
                                                                ->findBy(array('id' => $arrayIdProductos));
                                        $arrayProductos=array();
                                        foreach($objProductos as $objProducto)
                                        {
                                            $arrayProductos[]= $objProducto->getDescripcionProducto();
                                        }                                         
                                        foreach($arrayParteAfectadas as $arrayParteAfectada)
                                        {
                                            $strOpcion = $arrayParteAfectada['tipoAfectado'];
                                            $strProducto = $arrayParteAfectada['afectadoDescripcion'];
                                            if($strOpcion == 'Servicio' && in_array($strProducto,$arrayProductos))
                                            {
                                                $strTabVisible          = $arrayProcesos['valor3'];
                                                $boolTipoCasoGestionPend = true;
                                                break;
                                            }                                           
                                        }                        
                                    }else 
                                    {
                                        $arrayParteAfectadas = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                                                    ->getRegistrosCriteriosTotalXCaso($objInfoCaso->getId(), "Data" ,'','');
                                        if($arrayProcesos['valor7'] !== '' && count($arrayParteAfectadas)>0)
                                        {
                                            $arrayIdProductos = explode(",",$arrayProcesos['valor7']);
                                            $objProductos = $this->emComercial->getRepository("schemaBundle:AdmiProducto")
                                                                    ->findBy(array('id' => $arrayIdProductos));
                                            $arrayProductos=array();
                                            foreach($objProductos as $objProducto)
                                            {
                                                $arrayProductos[]= $objProducto->getDescripcionProducto();
                                            }                                         
                                            foreach($arrayParteAfectadas as $arrayParteAfectada)
                                            {
                                                $strOpcion = $arrayParteAfectada['opcion']; 
                                                if(strpos($strOpcion,"|") !== false && strpos($strOpcion,"Producto:") !== false)
                                                {
                                                    $strProductoServicio =  explode("|", $strOpcion);
                                                    $strProducto =trim( substr($strProductoServicio[0],strpos($strProductoServicio[0],":")+1));
                                                    if(in_array($strProducto,$arrayProductos))
                                                    {
                                                        $strTabVisible          = $arrayProcesos['valor3'];
                                                        $boolTipoCasoGestionPend = true;
                                                        break;
                                                    }
                                                }                                           
                                            }                        
                                        }
                                    }
                                    
                                }
                                if($boolTipoCasoGestionPend)
                                {
                                    break;
                                }
                                
                            }
                        }
                    }
                }
                //SI AUN NO ENCUENTRA BUSCA CON EL TIPO DEL CASO SI ES IGUAL AL TIPO DE CASO PARAMETRIZADO
                if(!$boolTipoCasoGestionPend)
                {
                    $arrayParamTipoCasoReplicarGestionPend = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->get(
                                                                            'TIPO_CASO_REPLICAR_CASOS',
                                                                            'SOPORTE','','',
                                                                            '',$intIdDepartamentoNuevo,'','','',
                                                                            $arrayParametros['idEmpresa'],''
                                                                            );
                    foreach($arrayParamTipoCasoReplicarGestionPend as $arrayTiposCaso)
                    {
                        if($arrayParametros['intTipoCasoId']  == intval($arrayTiposCaso['valor1']))
                        {
                            $strTabVisible           = $arrayTiposCaso['valor3'];
                            $boolTipoCasoGestionPend = true;
                            break;
                        }
                    }
                }

                //Se añade validación para tareas de Backbone aperturada por cliente Municipio o TELCONET.SA. para que se listen en Municipio 
                if($boolTipoCasoGestionPend && isset($strLoginCliente) && $strLoginCliente !== '' &&
                    $strTabVisible == 'GestionPendientesBackbone')
                {
                    $intIdPersonaEmpresaRol = "";
                    $arrayInfoPunto = $this->emComercial->getRepository("schemaBundle:InfoPunto")->findByLogin($strLoginCliente);
                    if(count($arrayInfoPunto)>0)
                    {
                        $intIdPersonaEmpresaRol = $arrayInfoPunto[0]->getPersonaEmpresaRolId()->getId();
                    }
                    $arrayParamLoginReplicarGestionPend = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->get(
                                                                            'CLIENTE_AFECTADO_REPLICAR_A_GESTION_PENDIENTES',
                                                                            'SOPORTE','','','','','','ID_PERSONA_EMPRESA_ROL','',
                                                                            $arrayParametros['idEmpresa'],''
                                                                         );
                    foreach($arrayParamLoginReplicarGestionPend as $arrayProcesos)
                    {
                        if ($arrayProcesos['valor1'] == $intIdPersonaEmpresaRol && $arrayProcesos['valor2'] == $intIdDepartamentoNuevo 
                            && $arrayProcesos['valor6'] == $intIdDepartamentoCreaCaso )
                        {
                            if($arrayProcesos['descripcion'] == 'Cliente afectado')
                            {
                                $strTabVisible          = $arrayProcesos['valor3'];
                                $boolProcesoGestionPend = true;
                                break;
                            }
                            if($arrayProcesos['descripcion'] == 'Cliente afectado TN')
                            {
                                if(is_object($objInfoCaso))
                                {
                                    $arrayMessageLog = array('idcaso'=>$objInfoCaso->getId(),
                                                                'clienteLogin'=>$strLoginCliente,
                                                            'pendiente'=>'Municipio');
                                    error_log(print_r($arrayMessageLog,1));

                                    $arrayTipoCriterios = array("Productos");
                                    $arrayParteAfectadas = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                                                ->getRegistrosCriteriosTotalXCaso($objInfoCaso->getId(), "Data" ,'','');
                                    if($arrayProcesos['valor7'] !== '' && count($arrayParteAfectadas)>0)
                                    {
                                        $arrayIdProductos = explode(",",$arrayProcesos['valor7']);
                                        $objProductos = $this->emComercial->getRepository("schemaBundle:AdmiProducto")
                                                                ->findBy(array('id' => $arrayIdProductos));
                                        $arrayProductos=array();
                                        foreach($objProductos as $objProducto)
                                        {
                                            $arrayProductos[]= $objProducto->getDescripcionProducto();
                                        }                                         
                                        foreach($arrayParteAfectadas as $arrayParteAfectada)
                                        {
                                            $strOpcion = $arrayParteAfectada['opcion']; 
                                            if(strpos($strOpcion,"|") !== false && strpos($strOpcion,"Producto:") !== false)
                                            {
                                                $strProductoServicio =  explode("|", $strOpcion);
                                                $strProducto =trim( substr($strProductoServicio[0],strpos($strProductoServicio[0],":")+1));
                                                if(in_array($strProducto,$arrayProductos))
                                                {
                                                    $strTabVisible          = $arrayProcesos['valor3'];
                                                    $boolTipoCasoGestionPend = true;
                                                    break;
                                                }
                                            }                                           
                                        }                        
                                    }
                                    
                                }
                                if($boolTipoCasoGestionPend)
                                {
                                    break;
                                }                                
                            }
                              
                        }
                    } 
                }
            }

            if (!is_object($objInfoAsignacionSolicitud) && ($boolProcesoGestionPend || $boolTipoCasoGestionPend) )
            {
                    if ( isset($arrayParametros['intFormaContactoId']) && !empty($arrayParametros['intFormaContactoId']))
                    {
                        $objAdmiFormaContacto = $this->emComercial->getRepository('schemaBundle:AdmiFormaContacto')
                                                                ->find($arrayParametros['intFormaContactoId']);
                    }
                    if (is_object($objAdmiFormaContacto))
                    {
                        $arrayParametros['strOrigen'] = $objAdmiFormaContacto->getDescripcionFormaContacto();
                    }
                    $arrayParametros['strTabVisible'] = $strTabVisible;
                    $strResponseAsignacionSolicitud   = $this->crearAsignacionSolicitud($arrayParametros);

            }
            else if (is_object($objInfoAsignacionSolicitud) && 
                     $strTabVisible == "GestionPendientesBackbone" || $strTabVisible == "GestionPendientesTelefonica" || 
                     $strTabVisible == "GestionPendientesMunicipio")
            {
                if ($strTabVisible == "GestionPendientesBackbone" || $strTabVisible == "GestionPendientesTelefonica")
                {
                    //ACTUALIZA ESTADO ASIGNACION A STANDBY
                    $arrayParametrosActAsignacion['strEstado'] = 'Standby';
                    if ( $intIdDepartamentoNuevo == $intIdDepartamentoOrig)
                    {
                        //ACTUALIZA ESTADO ASIGNACION A ENGESTION
                        $arrayParametrosActAsignacion['strEstado'] = 'EnGestion';
                    }
                }
                if ($strTabVisible == "GestionPendientesMunicipio")
                {
                    $arrayParametrosActAsignacion['strEstado'] = 'Standby';
                    $arrayParamClienteReplicarGestionPend = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                    ->get(
                            'CLIENTE_AFECTADO_REPLICAR_A_GESTION_PENDIENTES',
                            'SOPORTE','','',
                            '','','','','',
                            $arrayParametros['idEmpresa'],''
                        );
                    foreach($arrayParamClienteReplicarGestionPend as $arrayCliente)
                    {
                        if($intIdDepartamentoNuevo == $arrayCliente['valor2'])
                        {
                            $arrayParametrosActAsignacion['strEstado'] = 'EnGestion';
                        }
                    }
                }

                $arrayParametrosActAsignacion['intIdAsignacion'] = $objInfoAsignacionSolicitud->getId();
                $arrayParametrosActAsignacion['strUsrUltMod']    = $arrayParametros['strUsrCreacion'];
                $arrayParametrosActAsignacion['dateFeUltMod']    = new \DateTime('now');
                $arrayParametrosActAsignacion['strIpUltMod']     = $arrayParametrosActAsignacion['strIpCreacion'];
                $arrayParametrosActAsignacion['strTabVisible']   = $strTabVisible;
                $this->modificarAsignacionSolicitud($arrayParametrosActAsignacion);

                $arrayParametrosSeguimiento['intIdAsignacion']            = $objInfoAsignacionSolicitud->getId();
                $arrayParametrosSeguimiento['strDetalle']                 = "Se cambia estado del pendiente a ".
                                                                            $arrayParametrosActAsignacion['strEstado']. " por reasignación";
                $arrayParametrosSeguimiento['strUsuarioCreacion']         = $arrayParametros['strUsrCreacion'];
                $arrayParametrosSeguimiento['strIpCreacion']              = $arrayParametrosActAsignacion['strIpCreacion'];
                $arrayParametrosSeguimiento['strGestionado']              = "S";
                $arrayParametrosSeguimiento['strProcedencia']             = "Interno";
                $this->crearSeguimientoAsignacionSolicitud($arrayParametrosSeguimiento);
            }
        }
        catch(\Exception $objException)
        {
            $this->serviceUtil->insertError(
                                            'Telcos+',
                                            'SoporteService.replicarTareaAGestionPendientes',
                                            $objException->getMessage(),
                                            $arrayParametros['strUsrCreacion'],
                                            $arrayParametros['strIpCreacion']
                                        );
        }
    }
    
    /*
     * Función que crea tarea para autorización de excedente
     * 
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.0 07-04-2021
     * 
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */
    public function crearTareaAutoExcedenteMaAction($arrayData)
    {
        $intIdServicio          = $arrayData['idServicio'];
        $strCodEmpresa          = $arrayData['codEmpresa'];
        $strObservacion         = $arrayData['observacion'];
        $intSolicitudId         = $arrayData['solicitudId'];
        $arrayParametrosTarea   = null;
        $arrayRespuestaTarea    = null;
                
        try
        {
            if(!empty($intIdServicio))
            {
                $objServicio            =  $this->emComercial->getRepository("schemaBundle:InfoServicio")->find($intIdServicio);
                if(is_object($objServicio))
                {
                    $objPunto           =  $this->emComercial->getRepository("schemaBundle:InfoPunto")->find($objServicio->getPuntoId());

                    $objCanton          = $objPunto->getSectorId()->getParroquiaId()->getCantonId();
                    $strRegion          = $objCanton->getRegion();

                    $objParametroCab    = $this->emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                          ->findOneBy(array('nombreParametro'=>'TAREA EXCESO DE MATERIAL'));
                    if(!$objParametroCab)
                    {
                        throw new \Exception('Error al crear tarea de excedente de material,'
                                           . ' No se encontró detalle de TAREA A FACTURACIÓN');
                    }
                    $objParametroDet    = $this->emGeneral->getRepository("schemaBundle:AdmiParametroDet")
                                          ->findOneBy(array('descripcion'=>'TAREA A FACTURACIÓN',
                                                            'parametroId'=>$objParametroCab->getId(),
                                                            ));
                    if(!$objParametroDet)
                    {
                        throw new \Exception('Error al crear tarea de excedente de material,'
                                           . ' No se encontró detalle de TAREA A FACTURACIÓN');
                    }
                    $objDepartamento    = $this->emGeneral->getRepository('schemaBundle:AdmiDepartamento')
                                          ->findOneBy(array('nombreDepartamento'=>$objParametroDet->getValor3()));
                    if(!$objDepartamento)
                    {
                            throw new \Exception('Error No se encuentra departamento para asignar tarea,'
                                               . ' de TAREA A FACTURACIÓN');
                    }
                    $objRol             = $this->emGeneral->getRepository('schemaBundle:AdmiRol')
                                          ->findOneBy(array("descripcionRol"=>$objParametroDet->getValor4()));
                    if(!$objRol)
                    {
                            throw new \Exception('Error No se encuentra rol para asignar tarea,'
                                               . ' de TAREA A FACTURACIÓN');
                    }
                    $objEmpresaRol   = $this->emGeneral->getRepository('schemaBundle:InfoEmpresaRol')
                              ->findOneBy(array("rolId"       => $objRol->getId(),
                                                "empresaCod"  => $strCodEmpresa));
                    if(!$objEmpresaRol)
                    {
                            throw new \Exception('Error No se encuentra EmpresaRol para asignar tarea,'
                                               . ' de TAREA A FACTURACIÓN');
                    }
                    $objPersonaEmpresaRol   = $this->emGeneral->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                ->findOneBy(array("empresaRolId"   => $objEmpresaRol->getId(),
                                                                  "departamentoId" => $objDepartamento->getId(),
                                                                  "estado"         => 'Activo'));
                    if(!$objPersonaEmpresaRol)
                    {
                            throw new \Exception('Error No se encuentra EmpresaRol para asignar tarea,'
                                               . ' de TAREA A FACTURACIÓN');
                    }
                    
                    if($objPersonaEmpresaRol)
                    {
                        $arrayParametrosTarea                              = array();
                        $arrayParametrosTarea['intIdPersonaEmpresaRol']    = $objPersonaEmpresaRol->getId();
                        $arrayParametrosTarea['intIdEmpresa']              = $arrayData['idEmpresa'];
                        $arrayParametrosTarea['strPrefijoEmpresa']         = $arrayData['prefijoEmpresa'];
                        $arrayParametrosTarea['strNombreTarea']            = $objParametroDet->getValor2();
                        $arrayParametrosTarea['strNombreProceso']          = $objParametroDet->getValor1();
                        $arrayParametrosTarea['strUserCreacion']           = $arrayData['user'];
                        $arrayParametrosTarea['strIpCreacion']             = $arrayData['clientIp'];
                        $arrayParametrosTarea['intFormaContacto']          = 5;
                        $arrayParametrosTarea['strMotivoTarea']            = $strObservacion;
                        $arrayParametrosTarea['intPuntoId']                = $objPunto->getId();
                        $arrayParametrosTarea['intSolicitudId']            = $intSolicitudId;
                        $arrayParametrosTarea['strObservacionTarea']       = $strObservacion;
                        $arrayParametrosTarea['boolAsignarTarea']          = true;
                        $arrayParametrosTarea['strTipoTarea']              = 'T';
                        $arrayParametrosTarea['strUsuarioAsigna']          = $arrayData['user'];
                        $arrayParametrosTarea['strTipoAsignacion']         = 'empleado';

                        $arrayRespuestaTarea  =  $this->crearTareaCasoSoporte($arrayParametrosTarea);
                        if($arrayRespuestaTarea['mensaje'] === 'fail')
                        {
                            throw new \Exception('Error al crear la tarea, por favor comunicar a Sistemas.');
                        }
                        if(!empty($arrayRespuestaTarea['numeroTarea']) && isset($arrayRespuestaTarea['numeroTarea']))
                        {
                            return $arrayRespuestaTarea;
                        }
                    }
                    else
                    {
                        throw new \Exception('Error no existe jefe asignado, por favor comunicar a Sistemas.');
                    }
                }
            }     
            else
            {
                throw new \Exception('Error no se recibió id_Servicio, por favor comunicar a Sistemas.');
            }
            return $arrayRespuestaTarea;
        }
        catch (\Exception $ex)
        {
            $arrayRespuestaTarea['status']   = 'fail';
            $arrayRespuestaTarea['mensaje']  = $ex->getMessage();
            
            $this->serviceUtil->insertLog(array(
                                                    'enterpriseCode'   => "10",
                                                    'logType'          => 1,
                                                    'logOrigin'        => 'TELCOS',
                                                    'application'      => 'TELCOS',
                                                    'appClass'         => 'SoporteService',
                                                    'appMethod'        => 'crearTareaAutoExcedenteMaAction',
                                                    'descriptionError' => $ex->getMessage(),
                                                    'status'           => 'Fallido',
                                                    'inParameters'     => json_encode($arrayData),
                                                    'creationUser'     => 'TELCOS'));

        }    
        return $arrayRespuestaTarea;
    }

    /**
     * crearTareaExterna
     * 
     * Función que crea una tarea automática.
     * 
     * @param $arrayParametros [ intSolicitudId         => id de la solicitud a relacionar a la tarea
     *                           intTarea               => id de la tarea
     *                           strTipoAfectado        => tipo de afectado: 'Cliente', 'Elemento', 'Servicio'
     *                           objPunto               => objeto Punto del cliente
     *                           objDepartamento        => objeto del departamento
     *                           strCantonId            => canton id
     *                           strEmpresaCod          => codigo de la empresa
     *                           strPrefijoEmpresa      => prefijo de la empresa
     *                           strObservacion         => observación de la tarea
     *                           strUsrCreacion         => usuario de creacion
     *                           strIpCreacion          => ip de creacion
     *                           intDetalleSolId        => id detalle solitud,
     *                           intDepartamentoOrigen  => id del departamento que crea la tarea,
     *                           strBanderaTraslado     => bandera que indica si se necesita buscar el jefe por departamento y 
     *                                                     region,
     *                           strRegion              => R1 o R2 ]
     *
     * @author Francisco Cueva <facueva@telconet.ec>
     * @version 1.0 26-03-2021
     */
    public function crearTareaExterna($arrayParametros)
    {
        $this->emSoporte->getConnection()->beginTransaction();
        $this->emComunicacion->getConnection()->beginTransaction();
        $strLogin               = "";
        $intPuntoId             = "";
        $strOpcion              = "";
        $strNombreDepartamento  = "";
        $intDepartamentoId      = "";
        $strNombreTarea         = "";
        $strUsuarioAsigna       = "Telcos+";
        $arrayTo                = array();
        $strCriterio            = "Clientes";
        $arrayParametrosHist    = array();
        $strNombreProceso       = "";
        $boolEnviarCorreo       = true;
        $strOrigen              = 'web';
        $strUsrCreacionDetalle  = $arrayParametros["strUsrCreacion"];
        $strDescripcionRol      = 'Jefe';
        $strFechaSolicitada     = $arrayParametros["strFechaSolicitada"] ? $arrayParametros["strFechaSolicitada"] : new \DateTime('now');
        $strIdPersonaAsig       = $arrayParametros["strIdPersonaAsig"] ? $arrayParametros["strIdPersonaAsig"] : "";
        $strNombrePersonaAsig   = $arrayParametros["strNombrePersonaAsig"] ? $arrayParametros["strNombrePersonaAsig"] : "";
        $strIdPerRolAsig        = $arrayParametros["strIdPerRolAsig"] ? $arrayParametros["strIdPerRolAsig"] : "";
        $strIniciarTarea        = $arrayParametros["esAutomatico"] ? $arrayParametros["esAutomatico"] : "";

        //Se define por default que siempre true para envío de correo
        if(isset($arrayParametros['boolEnviaCorreo']))
        {
            $boolEnviarCorreo = $arrayParametros['boolEnviaCorreo'];
        }

        if(isset($arrayParametros['origen']) && !empty($arrayParametros['origen']))
        {
            $strOrigen = $arrayParametros['origen'];
        }

        if(isset($arrayParametros['strAplicacion']) && !empty($arrayParametros['strAplicacion']))
        {
            $strUsrCreacionDetalle = $arrayParametros['strAplicacion'];
        }

        $arrayParametrosHist["strCodEmpresa"]           = $arrayParametros["strEmpresaCod"];
        $arrayParametrosHist["strUsrCreacion"]          = $arrayParametros["strUsrCreacion"];
        $arrayParametrosHist["strOpcion"]               = "Historial";
        $arrayParametrosHist["strIpCreacion"]           = $arrayParametros["strIpCreacion"];
        $arrayParametrosHist["intIdDepartamentoOrigen"] = isset($arrayParametros["intDepartamentoOrigen"])?
                                                                $arrayParametros["intDepartamentoOrigen"]:0;
        try
        {
            //Se obtiene la tarea
            $objAdmiTarea = $this->emSoporte->getRepository("schemaBundle:AdmiTarea")->find($arrayParametros["intTarea"]);
            //Se crea INFO_DETALLE
            $objInfoDetalle = new InfoDetalle();

            if(is_object($objAdmiTarea))
            {
                $strNombreTarea = $objAdmiTarea->getNombreTarea();
                $objInfoDetalle->setTareaId($objAdmiTarea);
            }
            $objInfoDetalle->setObservacion($arrayParametros["strObservacion"]);
            $objInfoDetalle->setPesoPresupuestado(0);
            $objInfoDetalle->setValorPresupuestado(0);
            $objInfoDetalle->setFeSolicitada($strFechaSolicitada);
            $objInfoDetalle->setFeCreacion(new \DateTime('now'));
            $objInfoDetalle->setUsrCreacion($arrayParametros["strUsrCreacion"]);
            $objInfoDetalle->setIpCreacion($arrayParametros["strIpCreacion"]);
            $objInfoDetalle->setDetalleSolicitudId($arrayParametros["intDetalleSolId"]);
            $this->emSoporte->persist($objInfoDetalle);
            $this->emSoporte->flush();
            //Se obtiene el login y el id punto
            if(is_object($arrayParametros["objPunto"]))
            {
                $strLogin    = $arrayParametros["objPunto"]->getLogin();
                $intPuntoId  = $arrayParametros["objPunto"]->getId();
            }

            $strOpcion = "Cliente: " . $strLogin . " | OPCION: Punto Cliente";

            if(isset($strLogin) && !empty($strLogin))
            {
                //Se crea el INFO_CRITERIO_AFECTADO
                $objInfoCriterioAfectado = new InfoCriterioAfectado();
                $objInfoCriterioAfectado->setId("1");
                $objInfoCriterioAfectado->setDetalleId($objInfoDetalle);
                $objInfoCriterioAfectado->setCriterio($strCriterio);
                $objInfoCriterioAfectado->setOpcion($strOpcion);
                $objInfoCriterioAfectado->setFeCreacion(new \DateTime('now'));
                $objInfoCriterioAfectado->setUsrCreacion($arrayParametros["strUsrCreacion"]);
                $objInfoCriterioAfectado->setIpCreacion($arrayParametros["strIpCreacion"]);
                $this->emSoporte->persist($objInfoCriterioAfectado);
                $this->emSoporte->flush();

                //Se crea el INFO_PARTE_AFECTADA
                $objParteAfectada = new InfoParteAfectada();
                $objParteAfectada->setTipoAfectado ("Cliente");
                $objParteAfectada->setDetalleId($objInfoDetalle->getId());
                $objParteAfectada->setCriterioAfectadoId($objInfoCriterioAfectado->getId());
                $objParteAfectada->setAfectadoId($intPuntoId);
                $objParteAfectada->setFeIniIncidencia(new \DateTime('now'));
                $objParteAfectada->setAfectadoNombre($strLogin);
                $objParteAfectada->setAfectadoDescripcion($strLogin);
                $objParteAfectada->setFeCreacion(new \DateTime('now'));
                $objParteAfectada->setUsrCreacion($arrayParametros["strUsrCreacion"]);
                $objParteAfectada->setIpCreacion($arrayParametros["strIpCreacion"]);
                $this->emSoporte->persist($objParteAfectada);
                $this->emSoporte->flush();
            }

            if(is_object($arrayParametros["objDepartamento"]))
            {
                $strNombreDepartamento  = $arrayParametros["objDepartamento"]->getNombreDepartamento();
                $intDepartamentoId      = $arrayParametros["objDepartamento"]->getId();
            }

            //Se crea el INFO_DETALLE_ASIGNACION
            $objDetalleAsignacion = new InfoDetalleAsignacion();
            $objDetalleAsignacion->setDetalleId($objInfoDetalle);
            $objDetalleAsignacion->setMotivo($arrayParametros["strObservacion"]);
            $objDetalleAsignacion->setAsignadoNombre($strNombreDepartamento);
            $objDetalleAsignacion->setAsignadoId($intDepartamentoId);

            //Se crea bandera para validar si se necesita obtener el jefe por departamento y region
            if($arrayParametros["strBanderaTraslado"] == "S")
            {
                $arrayEmpleadoJefe = $this->emComercial->getRepository("schemaBundle:InfoPersonaEmpresaRol")
                                                       ->getResultadoJefeDepartamentoEmpresa($intDepartamentoId,
                                                                                             $arrayParametros["strEmpresaCod"],
                                                                                             $arrayParametros["strRegion"]);
            }
            else
            {
                $arrayParametrosResponsable["intCantonId"]      = $arrayParametros["strCantonId"];
                $arrayParametrosResponsable["strEstado"]        = "Activo";
                $arrayParametrosResponsable["intDepartamento"]  = $intDepartamentoId;
                $arrayParametrosResponsable["strRol"]           = $strDescripcionRol;
                $arrayParametrosResponsable["strTipoRol"]       = "Empleado";
                $arrayParametrosResponsable["strEmpresaCod"]    = $arrayParametros["strEmpresaCod"];

                $arrayEmpleadoJefe = $this->emComercial->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                       ->getJefePorDepartamento($arrayParametrosResponsable);
                if (empty($arrayEmpleadoJefe))
                {
                    $arrayDepartametoRol  = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne(
                                                    'ROL_JEFE_DEPARTAMENTO',
                                                    '',
                                                    '',
                                                    '',
                                                    $strNombreDepartamento,
                                                    '',
                                                    $arrayParametros["strCantonId"],
                                                    '',
                                                    '',
                                                    $arrayParametros["strEmpresaCod"]
                                                );

                    if (!empty($arrayDepartametoRol)) 
                    {
                        $arrayParametrosResponsable["strRol"]  = $arrayDepartametoRol['valor2'];
                        $arrayEmpleadoJefe = $this->emComercial->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                    ->getJefePorDepartamento($arrayParametrosResponsable);
                    }
                }
            }

            if (!empty($strIdPersonaAsig) && !empty($strNombrePersonaAsig) && !empty($strIdPerRolAsig))
            {
                $intIdPersonaAsignada = $strIdPersonaAsig;
                $strNombresAsignado   = $strNombrePersonaAsig;
                $objDetalleAsignacion->setRefAsignadoId($intIdPersonaAsignada);
                $objDetalleAsignacion->setRefAsignadoNombre($strNombresAsignado);
                $objDetalleAsignacion->setPersonaEmpresaRolId($strIdPerRolAsig);
            }
            else
            {
                $intIdPersonaAsignada = $arrayEmpleadoJefe["idPersona"];
                $strNombresAsignado   = $arrayEmpleadoJefe["nombreCompleto"];
                $objDetalleAsignacion->setRefAsignadoId($intIdPersonaAsignada);
                $objDetalleAsignacion->setRefAsignadoNombre($strNombresAsignado);
                $objDetalleAsignacion->setPersonaEmpresaRolId($arrayEmpleadoJefe["personaEmpresaRolId"]);
            }

            $objDetalleAsignacion->setTipoAsignado("EMPLEADO");
            $objDetalleAsignacion->setFeCreacion(new \DateTime('now'));
            $objDetalleAsignacion->setUsrCreacion($arrayParametros["strUsrCreacion"]);
            $objDetalleAsignacion->setIpCreacion($arrayParametros["strIpCreacion"]);
            $this->emSoporte->persist($objDetalleAsignacion);
            $this->emSoporte->flush();

            //Se ingresa el historial de la tarea
            if(is_object($objInfoDetalle))
            {
                $arrayParametrosHist["intDetalleId"] = $objInfoDetalle->getId();
            }

            if($arrayParametros["cierreInmediato"] == "S")
            {
                $arrayParametrosHist["strObservacion"]  = "Tarea fue Finalizada Obs: Tarea Rapida";
                $arrayParametrosHist["strEstadoActual"] = "Finalizada";
                $arrayParametrosHist["strAccion"]       = "Finalizada";
            }else if($arrayParametros["cierreInmediato"] == "N")
            {
                $arrayParametrosHist["strObservacion"]  = "Tarea fue Asignada a ". $arrayParametros['strNombrePersonaAsig'];
                $arrayParametrosHist["strEstadoActual"] = "Asignada";
                $arrayParametrosHist["strAccion"]       = "Asignada";
            }

            $this->objServiceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            //Se ingresa el seguimiento de la tarea
            $arrayParametrosHist["strOpcion"] = "Seguimiento";

            $this->objServiceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);

            if($strOrigen == 'ws')
            {
                $boolSeguimiento = false;

                //Verificar estado para iniciar la tarea automática
                if(isset($arrayParametros['esAutomatico']) && !empty($arrayParametros['esAutomatico']) && $arrayParametros['esAutomatico'] == 'S')
                {
                    $arrayParametrosHist["strEstadoActual"] = "Aceptada";
                    $arrayParametrosHist["strAccion"]       = "Aceptada";
                    $boolSeguimiento                        = true;
                }

                //Si se ingresa seguimiento adicional por parte del Ws
                if(isset($arrayParametros['seguimiento']) && !empty($arrayParametros['seguimiento']) && $arrayParametros['asignarTarea'] == 'N')
                {
                    $arrayParametrosHist["strObservacion"] = $arrayParametros['seguimiento'];
                    $this->objServiceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);
                }

                if($arrayParametros["cierreInmediato"] == "S")
                {
                    $arrayParametrosHist["strObservacion"]  = "Tarea fue Asignada a ".$arrayParametros['strNombrePersonaAsig'];
                    $this->objServiceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);
                }
            }

            //**************************Se envia notificación**************************//
            $objAdmiClaseDocumento = $this->emComunicacion->getRepository("schemaBundle:AdmiClaseDocumento")
                                                          ->findOneBy(array('descripcionClaseDocumento' => $arrayParametros["nombreClase"]));
            //Se crea el INFO_DOCUMENTO
            $objInfoDocumento = new InfoDocumento();
            $objInfoDocumento->setMensaje($arrayParametros["strObservacion"]);
            $objInfoDocumento->setNombreDocumento("Registro de tarea");

            if(is_object($objAdmiClaseDocumento))
            {
                $objInfoDocumento->setClaseDocumentoId($objAdmiClaseDocumento);
            }

            $objInfoDocumento->setFeCreacion(new \DateTime('now'));
            $objInfoDocumento->setEstado("Activo");
            $objInfoDocumento->setUsrCreacion($arrayParametros["strUsrCreacion"]);
            $objInfoDocumento->setIpCreacion($arrayParametros["strIpCreacion"]);
            $objInfoDocumento->setEmpresaCod($arrayParametros["strEmpresaCod"]);
            $this->emComunicacion->persist($objInfoDocumento);
            $this->emComunicacion->flush();

            $objFormaContacto = $this->emComercial->getRepository("schemaBundle:AdmiFormaContacto")
                                                  ->findOneBy(array('descripcionFormaContacto' => $arrayParametros["formaContacto"],
                                                                    'estado'                   => 'Activo'));
            //Se crea el INFO_COMUNICACION
            $objInfoComunicacion = new InfoComunicacion();

            if(is_object($objFormaContacto))
            {
                $objInfoComunicacion->setFormaContactoId($objFormaContacto->getId());
            }

            $objInfoComunicacion->setClaseComunicacion("Recibido");
            $objInfoComunicacion->setDetalleId($objInfoDetalle->getId());
            $objInfoComunicacion->setFechaComunicacion(new \DateTime('now'));
            $objInfoComunicacion->setEstado("Activo");
            $objInfoComunicacion->setFeCreacion(new \DateTime('now'));
            $objInfoComunicacion->setUsrCreacion($arrayParametros["strUsrCreacion"]);
            $objInfoComunicacion->setIpCreacion($arrayParametros["strIpCreacion"]);
            $objInfoComunicacion->setEmpresaCod($arrayParametros["strEmpresaCod"]);
            $objInfoComunicacion->setRemitenteId($intPuntoId);
            $objInfoComunicacion->setRemitenteNombre($strLogin);
            $this->emComunicacion->persist($objInfoComunicacion);
            $this->emComunicacion->flush();

            if($arrayParametros["strUrlAdjunto"] !== "" && $arrayParametros["strExtensionAdjunto"] !== "")
            {
                $objInfoDocumentoAdj = new InfoDocumento();
                $objInfoDocumentoAdj->setNombreDocumento('Adjunto Tarea');
                $objInfoDocumentoAdj->setMensaje('Documento que se adjunta a una tarea');
                if(is_object($objAdmiClaseDocumento))
                {
                    $objInfoDocumentoAdj->setClaseDocumentoId($objAdmiClaseDocumento);
                }
                $objInfoDocumentoAdj->setFeCreacion(new \DateTime('now'));
                $objInfoDocumentoAdj->setEstado("Activo");
                $objInfoDocumentoAdj->setUsrCreacion($arrayParametros["strUsrCreacion"]);
                $objInfoDocumentoAdj->setIpCreacion($arrayParametros["strIpCreacion"]);
                $objInfoDocumentoAdj->setEmpresaCod($arrayParametros["strEmpresaCod"]);

                $objInfoDocumentoAdj->setUbicacionFisicaDocumento($arrayParametros["strUrlAdjunto"]);
                $objInfoDocumentoAdj->setUbicacionLogicaDocumento($arrayParametros["strNombreAdjunto"]);

                if($arrayParametros["strExtensionAdjunto"]=='JPG' || $arrayParametros["strExtensionAdjunto"]=='JPEG')
                {
                    $strTipoDoc = "JPG" ;
                }

                $objTipoDocumento = $this->emComunicacion->getRepository('schemaBundle:AdmiTipoDocumento')
                                        ->findOneByExtensionTipoDocumento(array('extensionTipoDocumento'=> $strTipoDoc));

                $objInfoDocumentoAdj->setTipoDocumentoId($objTipoDocumento);
                $objInfoDocumentoAdj->setFechaDocumento(new \DateTime('now'));
                $this->emComunicacion->persist($objInfoDocumentoAdj);
                $this->emComunicacion->flush();

                $objInfoDocumentoRelacion = new InfoDocumentoRelacion();
                $objInfoDocumentoRelacion->setModulo('SOPORTE');
                $objInfoDocumentoRelacion->setEstado('Activo');
                $objInfoDocumentoRelacion->setFeCreacion(new \DateTime('now'));
                $objInfoDocumentoRelacion->setUsrCreacion($arrayParametros["strUsrCreacion"]);
                $objInfoDocumentoRelacion->setDetalleId($objInfoDetalle->getId());
                $objInfoDocumentoRelacion->setDocumentoId($objInfoDocumentoAdj->getId());
                $this->emComunicacion->persist($objInfoDocumentoRelacion);
                $this->emComunicacion->flush();
            }

            //Se crea el INFO_DOCUMENTO_COMUNICACION
            $objInfoDocumentoComunicacion = new InfoDocumentoComunicacion();
            $objInfoDocumentoComunicacion->setComunicacionId($objInfoComunicacion);
            $objInfoDocumentoComunicacion->setDocumentoId($objInfoDocumento);
            $objInfoDocumentoComunicacion->setFeCreacion(new \DateTime('now'));
            $objInfoDocumentoComunicacion->setEstado('Activo');
            $objInfoDocumentoComunicacion->setUsrCreacion($arrayParametros["strUsrCreacion"]);
            $objInfoDocumentoComunicacion->setIpCreacion($arrayParametros["strIpCreacion"]);
            $this->emComunicacion->persist($objInfoDocumentoComunicacion);
            $this->emComunicacion->flush();

            if($boolEnviarCorreo)
            {
                $objFormaContactoCorreo = $this->emComercial->getRepository("schemaBundle:AdmiFormaContacto")
                                                  ->findOneBy(array('descripcionFormaContacto' => "Correo Electronico",
                                                                    'estado'                   => 'Activo'));

                //Se obtiene el correo de la persona asignada
                $objInfoPersonaFormaContacto = $this->emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                                                                 ->findOneBy(array('personaId'       => $intIdPersonaAsignada,
                                                                                   'formaContactoId' => $objFormaContactoCorreo->getId(),
                                                                                   'estado'          => "Activo"));

                //OBTENGO EL CONTACTO DE LA PERSONA QUE ASIGNADA A LA TAREA
                if($objInfoPersonaFormaContacto)
                {
                    //Correo Persona Asignada
                    $strCorreoPersonaAsignada = $objInfoPersonaFormaContacto->getValor();
                    $arrayTo[]                = $strCorreoPersonaAsignada;
                }

                if(is_object($objAdmiTarea))
                {
                    $strNombreProceso = $objAdmiTarea->getProcesoId()->getNombreProceso();
                }

                $strAsunto = " Nueva Tarea, Actividad #".$objInfoComunicacion->getId()." | PROCESO: ".$strNombreProceso." ";

                //En el caso de existir correos externos adicionales
                if(isset($arrayParametros['arrayCorreos']) && !empty($arrayParametros['arrayCorreos']))
                {
                    $arrayTo = array_merge($arrayTo,$arrayParametros['arrayCorreos']);
                }

                //Se obtiene el id_persona del usuario
                $objInfoPersona = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                                    ->findOneBy(array("login" => $arrayParametros["strUsrCreacion"]));

                if(is_object($objInfoPersona))
                {
                    $strUsuarioAsigna = $objInfoPersona->__toString();
                }
                else
                {
                    $strUsuarioAsigna = "Telcos+";
                }

                $arrayParametrosCorreo = array('detalle'            => $objInfoDetalle,
                                               'numeroTarea'        => $objInfoComunicacion->getId(),
                                               'nombreTarea'        => $strNombreTarea,
                                               'nombreProceso'      => $strNombreProceso,
                                               'nombreDepartamento' => $strNombreDepartamento." - ".$strNombresAsignado,
                                               'observacion'        => $arrayParametros["strObservacion"],
                                               'empleadoLogeado'    => $strUsuarioAsigna,
                                               'empresa'            => $arrayParametros["strPrefijoEmpresa"],
                                               'loginProcesado'     => $strLogin);

                $this->envioPlantilla->generarEnvioPlantilla($strAsunto,
                                                                    $arrayTo,
                                                                    'TAREACERT',
                                                                    $arrayParametrosCorreo,
                                                                    $arrayParametros["strEmpresaCod"],
                                                                    $arrayParametros["strCantonId"],
                                                                    $intDepartamentoId);
            }

            //Se inicia la tarea de manera automática.
            if (strtoupper($strIniciarTarea) === 'S')
            {
                $arrayParametrosHist["strTipo"]        = 'iniciar';
                $arrayParametrosHist["strCodEmpresa"]  = $arrayParametros["strEmpresaCod"];
                $arrayParametrosHist["strUser"]        = $arrayParametros["strUsrCreacion"];
                $arrayParametrosHist["strIpUser"]      = $arrayParametros["strIpCreacion"];
                $arrayParametrosHist["objDetalle"]     = $objInfoDetalle;

                $arrayResultado = $this->objServiceSoporte->administrarTarea($arrayParametrosHist);
            }

            //**************************Se envia notificación**************************//

            $this->emComunicacion->getConnection()->commit();
            $this->emSoporte->getConnection()->commit();

            //Proceso que graba tarea en INFO_TAREA
            $arrayParametrosInfoTarea['intDetalleId']   = is_object($objInfoDetalle)?$objInfoDetalle->getId():null;
            $arrayParametrosInfoTarea['strUsrCreacion'] = $arrayParametros["strUsrCreacion"];
            $this->objServiceSoporte->crearInfoTarea($arrayParametrosInfoTarea);

            //Proceso para crear la tarea en Sys Cloud-Center
            if (is_object($objInfoComunicacion) && is_object($objAdmiTarea) && $strOrigen !== 'ws')
            {
                $strFechaSolicitada = date_format($objInfoDetalle->getFeSolicitada(), 'Y-m-d');
                $strHoraSolicitada  = date_format($objInfoDetalle->getFeSolicitada(), 'H:i:s');

                $arrayDatosPersonas = $this->emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                        ->getInfoDatosPersona(array ('strRol'                     => 'Empleado',
                                                     'strCodEmpresa'              => $arrayParametros['strEmpresaCod'],
                                                     'strLogin'                   => $arrayParametros['strUsrCreacion'],
                                                     'strEstadoPersona'           => 'Activo',
                                                     'strEstadoPersonaEmpresaRol' => 'Activo'));

                if (!empty($arrayDatosPersonas) && $arrayDatosPersonas['status'] === 'ok')
                {
                    $strUserAsigna  = $arrayDatosPersonas['result'][0]['nombres'].' '.
                                      $arrayDatosPersonas['result'][0]['apellidos'];
                    $strDeparAsigna = $arrayDatosPersonas['result'][0]['nombreDepartamento'];
                    $this->objProcesoService->putTareasSysCluod(array ('strNombreTarea'      => $strNombreTarea,
                                                                    'strNombreProceso'    => $objAdmiTarea
                                                                                                ->getProcesoId()
                                                                                                ->getNombreProceso(),
                                                                    'strObservacion'      => $arrayParametros["strObservacion"],
                                                                    'strFechaApertura'    => $strFechaSolicitada,
                                                                    'strHoraApertura'     => $strHoraSolicitada,
                                                                    'strUser'             => $arrayParametros["strUsrCreacion"],
                                                                    'strIpAsigna'         => $arrayParametros["strIpCreacion"],
                                                                    'strUserAsigna'       => $strUserAsigna,
                                                                    'strDeparAsigna'      => $strDeparAsigna,
                                                                    'strUserAsignado'     => $strNombresAsignado,
                                                                    'strDeparAsignado'    => $strNombreDepartamento,
                                                                    'objInfoComunicacion' => $objInfoComunicacion));
                }
            }
            if (isset($arrayParametros['strObtenerArray']) && !empty($arrayParametros['strObtenerArray'])
                    && $arrayParametros['strObtenerArray'] === 'SI')
            {
                return array('status'                   => true,
                             'intIdComunicacion'        => $objInfoComunicacion->getId(),
                             'strCorreoPersonaAsignada' => $strCorreoPersonaAsignada);
            }
            else
            {
                return $objInfoComunicacion->getId();
            }
        }
        catch(Exception $objException)
        {
            if ($this->emComunicacion->getConnection()->isTransactionActive())
            {
                $this->emComunicacion->getConnection()->rollback();
            }

            $this->emComunicacion->getConnection()->close();

            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }

            $this->emSoporte->getConnection()->close();

            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->crearTareaExterna',
                                             $objException->getMessage(),
                                             $arrayParametros["strUsrCreacion"],
                                             $arrayParametros["strIpCreacion"]);

            return "";
        }
    }

    /**
     * Función encargada de realizar el proceso de envio de seguimientos hacia 
     * ws ACTUALIZAR_TRACKING.
     *
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.0 06-09-2021
     *
     * Se agrega validacion por caso
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.1 14-10-2021
     * 
     * Se elimina filtro de tareas por dpto Operaciones Urbanas para tracking map
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.2 15-10-2021
     * 
     * Mejoras en metodo para fase dos de envio de coordenadas del tecnico
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.3 07-01-2022
     * 
     * Mejoras en escritura de log para mejor seguimiento
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.4 23-02-2023
     * 
     * @param  Array $arrayParametros
     */
    public function actualizaSeguimientoCaso($arrayParametros)
    {
        $strUsrCreacion    = $arrayParametros["strUsrCreacion"];
        $strIpCreacion     = $arrayParametros["strIpCreacion"];
        $strAccion         = str_replace("'","",$arrayParametros["strAccion"]);
        $intIdDetalle      = $arrayParametros["intIdDetalle"];
        $strMsgErrorGps    = "Fallo en la comunicación con GPS Monitor";
        $strFechaEvento    = date("Y-m-d H:i:s");
        $strClass          = "SoporteService";
        $strAppMethod      = "listaUltimoPuntoPor";
        $arrayDatosResp    = array();
        $arrayRequestMiddle = array();
        $arrayDatosMiddle  = array();
        $arrayDatos        = array();
        $floatLongitudDisp   = 0;
        $floatLatitudDisp    = 0;
        $floatLatitudClient  = 0;
        $floatLongitudClient = 0;
        $strNumeroCaso     = "";
        $intNumeroTarea    = 0;
        $strTituloInicial  = "";
        $strTituloFinal    = "";
        $strLogin          = "";
        $strDireccion      = "";
        $strIdentificacion = "";
        $strPrefijoEmpCli  = "";
        $strNombreTecnico  = "";
        $strLiderCuadrilla = "";
        $strDispositivoId  = "";
        $floatDistancia    = 0;
        $intIntento        = 1;
        $strFechaAgenda    = "";
        $strHoraAgenda     = "";
        $strUrlFototecnico = "";
        $strCedulaTecnico  = "";
        $strCodigoTrabajo  = "";
        $boolCasoTec       = false;
        $arrayAccionCoordenadas = array('Inicio Movilizacion','Tarea Iniciada');
        $strMensajeSms = "Tu seguridad es importante, NETLIFE te comparte los datos de tu visita tecnica ". 
                         "<numCaso>, Codigo:<codigoTrabajo>, Tecnico:<nombreTecnico>, CI:<identificacionTecnico>";

        try 
        {
            if(!empty($intIdDetalle) || $intIdDetalle != null || $intIdDetalle != "") 
            {
                $this->serviceUtil->insertError('Telcos+',
                                                'SoporteService->actualizaSeguimientoCaso',
                                                'Inicio proceso para Id_Detalle: '.$intIdDetalle,
                                                $arrayParametros["strUsrCreacion"],
                                                $arrayParametros["strIpCreacion"]);

                $boolCasoTec = $this->emSoporte->getRepository("schemaBundle:InfoCaso")
                                               ->isCasoTecnico(array( 'intDetalleId' => $intIdDetalle));
                if($boolCasoTec)
                {
                    $arrayDatosConsulta['intIdDetalle']   = $intIdDetalle;
                    $arrayDatosConsulta['strUsrCreacion'] = $strUsrCreacion;
                                    
                    $arrayRespuesta = $this->emSoporte->getRepository('schemaBundle:InfoCaso')
                                                    ->getDatosActualizarTracking($arrayDatosConsulta); 
                                                   
                    if ($arrayRespuesta['status'] == 'ok')
                    {
                        $arrayDatosResp = (array) json_decode($arrayRespuesta['result']);

                        if (!empty($arrayDatosResp))
                        {
                            if ( $strAccion == "Inicio Movilizacion" && !empty($arrayParametros["strDispositivoId"]))
                            {
                                $strDispositivoId  = $arrayParametros["strDispositivoId"];
                            }
                            else
                            {
                                $strDispositivoId  = $arrayDatosResp['dispositivoId'];  
                            }                            
                            $floatLatitudClient  = $arrayDatosResp['latitud'];
                            $floatLongitudClient = $arrayDatosResp['longitud'];
                            $strNumeroCaso     = $arrayDatosResp['caso'];
                            $intNumeroTarea    = $arrayDatosResp['tarea'];
                            $strTituloInicial  = $arrayDatosResp['tituloInicial'];
                            $strTituloFinal    = $arrayDatosResp['tituloFinal'];
                            $strLogin          = $arrayDatosResp['login'];
                            $strDireccion      = $arrayDatosResp['direccion'];
                            $strIdentificacion = $arrayDatosResp['identificacion'];
                            $strPrefijoEmpCli  = $arrayDatosResp['empresa'];
                            $strNombreTecnico  = $arrayDatosResp['nombreTecnico'];
                            $strLiderCuadrilla = $arrayDatosResp['liderCuadrilla'];  
                            $strFechaAgenda    = $arrayDatosResp['fechaAgendamiento']; 
                            $strHoraAgenda     = $arrayDatosResp['horarioAgendamiento']; 
                            $strCedulaTecnico  = $arrayDatosResp['cedulaTecnico'];
                            $strCodigoTrabajo  = $arrayDatosResp['codigoTrabajo'];
                            $strUrlFototecnico = $arrayDatosResp['urlFotoTecnico'];
                            
                            if(!empty($strDispositivoId) || $strDispositivoId != "" )
                            {
                                $arrayDataGps["dispositivoId"] = $strDispositivoId;
                                
                                $arrayTokenCas = $this->generarTokenCas();
                                
                                if (!empty($arrayTokenCas['result']['data'])) 
                                {                           
                                    $strUrlGps = $this->strUrlListaUltimoPuntoPor;

                                    /* Parametros para el envio al Ws  */
                                    $arrayParametrosWs = array (
                                                            'strUrl'        => $strUrlGps,
                                                            'arrayData'     => $arrayDataGps,
                                                            'arrayOptions'  => array(CURLOPT_SSL_VERIFYPEER => false,
                                                                                CURLOPT_HTTPHEADER => array('Content-Type: application/json',
                                                                                            'tokenCas: '.$arrayTokenCas['result']['data']
                                                                                                        )
                                                                                )
                                                                );                                                      
                        
                                    /* Establecemos la comunicación */
                                    $arrayRespuestaGps = $this->comunicacionWsRestClient($arrayParametrosWs);
                                    
                                    // Validaciones de la respuesta 
                                    if (strtoupper($arrayRespuestaGps['mensaje']) == 'FAIL')
                                    {   
                                        $this->serviceUtil->insertError('Telcos+',
                                                        'SoporteService->actualizaSeguimientoCaso ultima coordenada',
                                                        'Id_Detalle: '.$intIdDetalle.'-'.json_encode($arrayRespuestaGps),
                                                        $arrayParametros["strUsrCreacion"],
                                                        $arrayParametros["strIpCreacion"]);
                                    }
                                    else
                                    {    // A este punto se obtuvo una respuesta positiva 
                                        if($arrayRespuestaGps['result']['status'] == "OK" && !empty($arrayRespuestaGps['result']['data']))
                                        {
                                            $floatLatitudDisp  = $arrayRespuestaGps['result']['data'][0]['lat'];
                                            $floatLongitudDisp = $arrayRespuestaGps['result']['data'][0]['lng'];

                                            if($floatLatitudDisp != 0 && $floatLatitudDisp != null && 
                                            $floatLongitudDisp != 0 && $floatLongitudDisp != null && 
                                            $floatLatitudClient != 0 && $floatLatitudClient != null && 
                                            $floatLongitudClient != 0 && $floatLongitudClient != null)
                                            {                             
                                                    $arrayCoordenadas = array();
                                                    $arrayCoordenadas['floatLatitud1'] = $floatLatitudDisp;
                                                    $arrayCoordenadas['floatLatitud2'] = $floatLatitudClient;
                                                    $arrayCoordenadas['floatLongitud1'] = $floatLongitudDisp;
                                                    $arrayCoordenadas['floatLongitud2'] = $floatLongitudClient;
                                                   
                                                    $floatDistancia = $this->distanciaEntreDosPuntos($arrayCoordenadas);
                                                    
                                                
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    $this->serviceUtil->insertError('Telcos+',
                                                                'SoporteService->actualizaSeguimientoCaso',
                                                                'Id_Detalle:'.$intIdDetalle.'- No se pudo obtener tokenCas: '.substr(json_encode($arrayTokenCas,true), 0, 2000),
                                                                $arrayParametros["strUsrCreacion"],
                                                                $arrayParametros["strIpCreacion"]);
                                }
                            }
                            else
                            {
                                $this->serviceUtil->insertError('Telcos+',
                                                                'SoporteService->actualizaSeguimientoCaso',
                                                                'Id_Detalle:'.$intIdDetalle.'- No se pudo obtener dispositivoId del jefe de cuadrilla',
                                                                $arrayParametros["strUsrCreacion"],
                                                                $arrayParametros["strIpCreacion"]);
                            }
                            $arrayDatosMiddle["accion"] = $strAccion; 
                            $arrayDatosMiddle["identificacion"] = $strIdentificacion;
                            $arrayDatosMiddle["tituloInicial"] = $strTituloInicial;
                            $arrayDatosMiddle["tituloFinal"]   = $strTituloFinal;
                            $arrayDatosMiddle["login"] = $strLogin;
                            $arrayDatosMiddle["caso"] =  $strNumeroCaso;
                            $arrayDatosMiddle["tarea"] =  $intNumeroTarea;
                            $arrayDatosMiddle["direccion"] = $strDireccion;
                            $arrayDatosMiddle["coordenadas"]["latitud"] =  $floatLatitudClient;
                            $arrayDatosMiddle["coordenadas"]["longitud"] = $floatLongitudClient;
                            if(!in_array($strAccion,$arrayAccionCoordenadas))
                            {
                                $floatLatitudDisp = null;
                                $floatLongitudDisp = null;
                            }
                            $arrayDatosMiddle["coordenadasTecnico"]["latitud"] = $floatLatitudDisp;
                            $arrayDatosMiddle["coordenadasTecnico"]["longitud"] = $floatLongitudDisp;
                            $arrayDatosMiddle["fecha"] = $strFechaEvento;
                            $arrayDatosMiddle["liderCuadrilla"] = $strLiderCuadrilla;
                            $arrayDatosMiddle["nombreTecnico"] = $strNombreTecnico;
                            $arrayDatosMiddle["distancia"] = $floatDistancia;
                            $arrayDatosMiddle["fechaAgendamiento"] = $strFechaAgenda;
                            $arrayDatosMiddle["horarioAgendamiento"] = $strHoraAgenda;
                            $arrayDatosMiddle["dispositivoId"] = $strDispositivoId;
                            $arrayDatosMiddle["datosTecnico"]["cedula"] = $strCedulaTecnico;
                            $arrayDatosMiddle["datosTecnico"]["codigoTrabajo"] = $strCodigoTrabajo;
                            $arrayDatosMiddle["datosTecnico"]["foto"]     = $strUrlFototecnico ;

                            $arrayParamError = $this->emSoporte->getRepository("schemaBundle:InfoCaso")
                                                            ->obtenerDatosErrorTracking(array( "intIdDetalle" => $intIdDetalle));          
                            if (count($arrayParamError) > 0)
                            {
                                $arrayDatos = $arrayParamError; 
                                $arrayDatos[] = $arrayDatosMiddle;                                                                            
                                $arrayRequestMiddle["datos"] = $arrayDatos;
                            }
                            else
                            {
                                $arrayRequestMiddle["datos"] = $arrayDatosMiddle;
                            }

                            $arrayRequestMiddle["empresa"] = $strPrefijoEmpCli;
                            $arrayRequestMiddle["opcion"] = "ACTUALIZAR_TRACKING";
                            $arrayRequestMiddle["ejecutaComando"] = "NO";
                            $arrayRequestMiddle["comandoConfiguracion"] = "NO";
                            $arrayRequestMiddle["usrCreacion"] = $strUsrCreacion;
                            $arrayRequestMiddle["ipCreacion"] = $strIpCreacion;

                            $strUrlNotifiTraking = $this->strUrlNotificacionTraking;

                            /* Parametros para el envio al Ws  */
                            $arrayWsTraking = array ('strUrl'        => $strUrlNotifiTraking,
                                                    'arrayData'     => $arrayRequestMiddle,
                                                    'arrayOptions'  => array(
                                                                CURLOPT_SSL_VERIFYPEER => false,
                                                                CURLOPT_HTTPHEADER => array('Content-Type: application/json')));        
                            while($intIntento <= 3) 
                            {
                                /* Establecemos la comunicación */
                                $arrayRespTraking = $this->comunicacionWsRestClient($arrayWsTraking);
                                $arrayRespTraking['result']['status'] = !empty($arrayRespTraking['result']['status']) ?
                                                                        $arrayRespTraking['result']['status'] : "ERROR";


                                if (strtoupper($arrayRespTraking['result']['status']) == 'ERROR')
                                {         
                                    $strMensajeWsTraking = isset($arrayRespTraking['descripcion']) ? $arrayRespTraking['descripcion'] :
                                                            $arrayRespTraking['result']['mensaje'];
                                    
                                    $this->serviceUtil->insertError('Telcos+',
                                        'SoporteService->actualizaSeguimientoCaso-arrayRequestMiddle',
                                        'Id_Detalle: '.$intIdDetalle.'-'.$strUrlNotifiTraking.'--'.$strMensajeWsTraking,
                                        $arrayParametros["strUsrCreacion"],
                                        $arrayParametros["strIpCreacion"]);

                                    $this->serviceUtil->insertError('Telcos+',
                                        'SoporteService->actualizaSeguimientoCaso-arrayRequestMiddle',
                                        'Id_Detalle: '.$intIdDetalle.'-'.substr(json_encode($arrayRequestMiddle),0,200),
                                        $arrayParametros["strUsrCreacion"],
                                        $arrayParametros["strIpCreacion"]);             
                                }
                                elseif (strtoupper($arrayRespTraking['result']['status']) == 'OK')
                                {
                                    $intIntento = 4;
                                }
                                $intIntento ++;
                            }
                            if(strtoupper($arrayRespTraking['result']['status']) == 'ERROR')
                            {                     
                                $arrayInsertaError = array( 'intIdDetalle'      => $intIdDetalle,
                                                            'strNumeroCaso'     => $strNumeroCaso,
                                                            'intNumeroTarea'    => $intNumeroTarea,
                                                            'strTipoEvento'     => $strAccion,
                                                            'strIdentificacion' => $strIdentificacion,
                                                            'strLogin'          => $strLogin,
                                                            'strDireccion'      => $strDireccion,
                                                            'strTituloInicial'  => $strTituloInicial,
                                                            'strTituloFinal'    => $strTituloFinal,
                                                            'floatLatitud'      => $floatLatitudClient,
                                                            'floatLongitud'     => $floatLongitudClient,
                                                            'strFechaEvento'    => $strFechaEvento,
                                                            'strLiderCuadrilla' => $strLiderCuadrilla,
                                                            'strNombreTecnico'  => $strNombreTecnico,
                                                            'floatDistancia'    => $floatDistancia,
                                                            'strEmpresa'        => $strPrefijoEmpCli,
                                                            'strOpcion'         => "ACTUALIZAR_TRACKING",
                                                            'strObservacion'    => $strMensajeWsTraking,
                                                            'strUsrCreacion'    => $arrayParametros["strUsrCreacion"],
                                                            'strIpCreacion'     => $arrayParametros["strIpCreacion"],
                                                            'floatLatitudTec'   => $floatLatitudDisp,
                                                            'floatLongitudTec'  => $floatLongitudDisp,
                                                            'strFechaAgenda'    => $strFechaAgenda,
                                                            'strHoraAgenda'     => $strHoraAgenda,
                                                            'strDispositivoId' => $strDispositivoId,
                                                            'strCedulaTecnico'  => $strCedulaTecnico,
                                                            'strCodigoTrabajo'  => $strCodigoTrabajo
                                                        );   
                    
                                $strMensajeInsert = $this->emSoporte->getRepository("schemaBundle:InfoCaso")
                                                                    ->ingresaDatosTracking($arrayInsertaError);
                                
                                if($strMensajeInsert != 'ok')
                                {
                                    $this->serviceUtil->insertError('Telcos+',
                                                                    'SoporteService->actualizaSeguimientoCaso',
                                                                    'Id_Detalle:'.$intIdDetalle.'- No se pudo insertar el error',
                                                                    $arrayParametros["strUsrCreacion"],
                                                                    $arrayParametros["strIpCreacion"]);  
                                }
                            }
                            elseif (strtoupper($arrayRespTraking['result']['status']) == 'OK' 
                                    && count($arrayParamError) >0)
                            {
                                $strMensajeActuliza = $this->emSoporte->getRepository("schemaBundle:InfoCaso")
                                                                    ->actualizaDatosTracking(array( "intIdDetalle" => $intIdDetalle));

                                if($strMensajeActuliza != 'ok')
                                {
                                    $this->serviceUtil->insertError('Telcos+',
                                                                    'SoporteService->actualizaSeguimientoCaso',
                                                                    'Id_Detalle:'.$intIdDetalle.'- No se pudo actualizar el error',
                                                                    $arrayParametros["strUsrCreacion"],
                                                                    $arrayParametros["strIpCreacion"]);  
                                }                       
                                
                            } 
                            if ( $strAccion == "Tarea Asignada" || $strAccion == "Tarea Reasignada"  || $strAccion == "Tarea Reprogramada")
                            {
                                if (empty($arrayDatosResp['codigoTrabajo']))
                                {
                                    $this->serviceUtil->insertError('Telcos+',
                                    'SoporteService->actualizaSeguimientoCaso-sms',
                                    'No existe codigo de trabajo para el caso '.$arrayDatosResp['caso'],
                                    $arrayParametros["strUsrCreacion"],
                                    $arrayParametros["strIpCreacion"]);

                                    }
                                    elseif(empty($arrayDatosResp['liderCuadrilla']))
                                    {
                                        $this->serviceUtil->insertError('Telcos+',
                                        'SoporteService->actualizaSeguimientoCaso-sms',
                                        'No existe nombre del tecnico para el caso '.$arrayDatosResp['caso'],
                                        $arrayParametros["strUsrCreacion"],
                                        $arrayParametros["strIpCreacion"]);
                                    }
                                    elseif(empty($arrayDatosResp['cedulaTecnico']))
                                    {
                                        $this->serviceUtil->insertError('Telcos+',
                                        'SoporteService->actualizaSeguimientoCaso-sms',
                                        'No existe identificacion del tecnico para el caso '.$arrayDatosResp['caso'],
                                        $arrayParametros["strUsrCreacion"],
                                        $arrayParametros["strIpCreacion"]);
                                    }
                                    elseif(empty($arrayDatosResp['numeroCelular']))
                                    {
                                        $this->serviceUtil->insertError('Telcos+',
                                        'SoporteService->actualizaSeguimientoCaso-sms',
                                        'No existe numero de contacto del cliente para el caso '.$arrayDatosResp['caso'],
                                        $arrayParametros["strUsrCreacion"],
                                        $arrayParametros["strIpCreacion"]);
                                    }
                                    else
                                    {

                                        if($this->strBanderaSmsComunicacion == 'S')
                                        {    

                                                $strPrefijoEmp = $arrayDatosResp['empresa'];
                                                $strIdentificacionCli = $arrayDatosResp['identificacion'];
                                                $strCelular = $arrayDatosResp['numeroCelular'] ;
                                                $strMessageId = 0 ; 
                                                $strCelularCli = "";


                                                if ($strCelular[0] == '0')
                                                {
                                                    $strCelularCli = "593" . substr($strCelular,1,10 - 1);
                                                }
                                                else
                                                {
                                                    $strCelularCli = $strCelular;
                                            }

                                            

                                            if ( $strPrefijoEmp == 'EN')
                                            {
                                                $strMessageId = $this->strCodEnSeguimento;
                                            }
                                            else if ( $strPrefijoEmp == 'MD')
                                            {
                                                $strMessageId = $this->strCodMdSeguimento;
                                            }


                                            $strData = array (
                                                array('name'=>'NUMERO_CASO','value'=>$arrayDatosResp['caso']),
                                                array('name'=>'CODIGO_TRABAJO','value'=>$arrayDatosResp['codigoTrabajo']),
                                                array('name'=>'NOMBRE_TECNICO','value'=>$arrayDatosResp['liderCuadrilla']),
                                                array('name'=>'IDENTIFICACION_TECNICO','value'=>$arrayDatosResp['cedulaTecnico'])
                                            );


                                            $arrayUpData = array(
                                                'messageId'              => $strMessageId,
                                                'data'  => $strData
                                                );



                                                $strParametrosSms = array(
                                                                            'companyCod'       => $strPrefijoEmp,
                                                                            'clientCod'          => $strIdentificacionCli,
                                                                            'serviceType'   => 'COMPOSE_MESSAGE',
                                                                            'serviceProviderCod'   => 'MASSEND',
                                                                            'cellPhoneNumber'       => $strCelularCli,
                                                                            'mobileProvider'   => 'CLARO',
                                                                            'processCod'   => 'CONDIG-PIN',
                                                                            'creationUser' => 'Telcos',
                                                                            'data' => $arrayUpData 
                                                                        );                      

                                                $arrayRespuestaSms = $this->enviaSmsPorMS($strParametrosSms);
                                            
                                        }
                                        else
                                        {
                                            $strMensajeSms = str_replace('<numCaso>',$arrayDatosResp['caso'],$strMensajeSms);
                                            $strMensajeSms = str_replace('<codigoTrabajo>',$arrayDatosResp['codigoTrabajo'],$strMensajeSms);
                                            $strMensajeSms = str_replace('<nombreTecnico>',$arrayDatosResp['liderCuadrilla'],$strMensajeSms);
                                            $strMensajeSms = str_replace('<identificacionTecnico>',$arrayDatosResp['cedulaTecnico'],$strMensajeSms);
        
                                            $arrayParametrosSms = array(
                                                                        'strProceso'       => $this->strApiSmsUserNameMd.'-NOTIFICACION',
                                                                        'mensaje'          => $strMensajeSms,
                                                                        'numeroTelefono'   => $arrayDatosResp['numeroCelular'],
                                                                        'user'             => $this->strApiSmsUserNameMd.'-notificacion',
                                                                        'codEmpresa'       => '18',
                                                                        'strUserNameApi'   => $this->strApiSmsUserNameMd,
                                                                        'strPassWordApi'   => $this->strApiSmsPasswordMd,
                                                                        'strSourceNameApi' => $this->strApiSmsSourceNameMd
                                                                    );
        
                                            $arrayRespuestaSms = $this->enviaSmsPorApis($arrayParametrosSms);
                                        }
                                }
                            }           
                        }
                        else
                        {
                            $this->serviceUtil->insertError('Telcos+',
                                                            'SoporteService->actualizaSeguimientoCaso',
                                                            'Id_Detalle:'.$intIdDetalle.'- Erro al obtener informacion del evento',
                                                            $arrayParametros["strUsrCreacion"],
                                                            $arrayParametros["strIpCreacion"]);
                        }
                    } 
                    else
                    {
                        $this->serviceUtil->insertError('Telcos+',
                                                        'SoporteService->actualizaSeguimientoCaso',
                                                        'Id_Detalle:'.$intIdDetalle.'- Error al llamar metodo getDatosActualizarTracking: '
                                                        .substr($arrayRespuesta['message'],0,200),
                                                        $arrayParametros["strUsrCreacion"],
                                                        $arrayParametros["strIpCreacion"]);
                    }
                    
                }  
            } 
            else
            {
                $this->serviceUtil->insertError('Telcos+',
                                                'SoporteService->actualizaSeguimientoCaso',
                                                'Id_Detalle:'.$intIdDetalle.' - No se pudo obtener el detalle id de la tarea',
                                                $arrayParametros["strUsrCreacion"],
                                                $arrayParametros["strIpCreacion"]);
            }
        } 
        catch (\Exception $ex) 
        {
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->actualizaSeguimientoCaso',
                                            'Id_Detalle:'.$intIdDetalle.' - Error general: '.substr($ex->getMessage(),0,200),
                                            $arrayParametros["strUsrCreacion"],
                                            $arrayParametros["strIpCreacion"]);
        }
    }


    /**
     * Función encargada de devolver la distancia entre dos coordenadas
     *
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.0 06-09-2021
     *
     * @param  Array $arrayParametros
     * @param  float $floatgDistancia
     */
    public function distanciaEntreDosPuntos($arrayParametros)
    {
        $floatLatitud1  = $arrayParametros['floatLatitud1'];
        $floatLatitud2  = $arrayParametros['floatLatitud2'];
        $floatLongitud1 = $arrayParametros['floatLongitud1'];
        $floatLongitud2 = $arrayParametros['floatLongitud2'];
        $floatDistancia = 0;
        
        try 
        {
            $floatDisLat  = $floatLatitud2 - $floatLatitud1;
            $floatDisLong =  $floatLongitud2 - $floatLongitud1;
    
            $floatResul1 = pow(sin((pi()/180 * $floatDisLat) / 2),2)+(cos(pi()/180 * $floatLatitud1) * 
                         cos(pi()/180 * $floatLatitud2)) * pow(sin((pi()/180 * $floatDisLong) / 2),2);
    
            $floatDistancia = (2 * 6372.795477598 * asin(sqrt($floatResul1)))*1000;
        } 
        catch (\Exception $ex) 
        {
            $floatDistancia = 0;
        }
        return $floatDistancia;
    }    
    
    public function generarTokenCas()
    {
        $arrayTokenCas = array();

        try
        {
            $arrayDatosToken = array(
                "username" => $this->strUsuarioToken,
                "password" => $this->strPasswordToken,
                "apiKey"   => $this->strApiKeyToken
            );

            $arrayParametrosWs = array(
                'strUrl'        => $this->strUrlTokenCas,
                'arrayData'     => $arrayDatosToken,
                'arrayOptions'  => array(
                    CURLOPT_SSL_VERIFYPEER => false,
                    CURLOPT_HTTPHEADER => array('Content-Type: application/json')
                )
            );

            $arrayTokenCas = $this->comunicacionWsRestClient($arrayParametrosWs);
        }
        catch (\Exception $e) 
        {
            $this->serviceUtil->insertError(
                'Telcos+',
                'soporteService->generarTokenCas',
                'Error en obtener Token Cas: '.$e->getTraceAsString(),
                'root',
                '127.0.0.1'
            );
            $arrayTokenCas["mensaje"] = "fail";
            $arrayTokenCas["descripcion"] = $e->getMessage();
        }
        return $arrayTokenCas;
    }

    /**
     * Función para validar enlace Hal para cierre de casos motivos configurados
     *
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.0 21/07/2021
     *
     * @param type $arrayData
     * @return type $arrayRespuesta
     */
    public function getValidaEnlaceHal($arrayData)
    {
        $strClass                   = "SoporteService";
        $strAppMethod               = "getValidaEnlaceHal";
        $arrayRespuestaHal          = array();
        $arrayRespuesta             = array();
        $intIntentosmaximos         = 0;
        $intIntentos                = 1;
                     
        try
        {
            $arrayTiempoReintento = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
            ->getOne('PARAMETROS_GENERALES_MOVIL', 
                     '', 
                     '', 
                     '', 
                     'TIEMPO_ESPERA_REINTENTO', 
                     '', 
                     '', 
                     ''
                     );

            if(is_array($arrayTiempoReintento))
            {
                $intIntentosmaximos = !empty($arrayTiempoReintento['valor2']) ? $arrayTiempoReintento['valor2'] : 45;
            }
            else
            {
                $intIntentosmaximos = 45;
            }

            $strUrlHal          =  $this->strUrlValidaEnlace;
            $intFechaEjecucion  = (int)date('YmjHis');
            $strFechaAuxiliar   = strtotime ( "$intIntentosmaximos seconds" , strtotime ( $intFechaEjecucion ) ) ;	
            $intFechaSalida     = (int)date ( 'YmdHis' , $strFechaAuxiliar );

            $arrayDataWs = array(
                                'caso_id'              => $arrayData['idCaso'],
                                'num_caso'             => $arrayData['numCaso'],
                                'tarea_idDetalle'      => $arrayData['idDetalle'],
                                'tarea_idComunicacion' => $arrayData['idComunicacion']
                                );

            /* Parametros para el envio al Ws de hal */
            $arrayParametrosWs = array ('strUrl'        => $strUrlHal,
                                        'arrayData'     => $arrayDataWs,
                                        'arrayOptions'  => array(CURLOPT_SSL_VERIFYPEER => false));

            $this->serviceUtil->insertLog(array(
                                            'enterpriseCode'   => "10",
                                            'logType'          => 1,
                                            'logOrigin'        => 'TELCOS',
                                            'application'      => 'TELCOS',
                                            'appClass'         => $strClass,
                                            'appMethod'        => $strAppMethod,
                                            'descriptionError' => 'Request-ValidaEnlace',
                                            'status'           => 'Seguimiento',
                                            'inParameters'     => json_encode($arrayDataWs),
                                            'creationUser'     => $arrayData['usuario']));

            /* Establecemos la comunicación */
            while($intIntentos <= 3)
            {
                $arrayRespuestaHal = $this->comunicacionWsRestClient($arrayParametrosWs);                      
                $arrayRespuestaHal['result']['status'] = !empty($arrayRespuestaHal['result']['status']) ?
                                                                $arrayRespuestaHal['result']['status'] : "ERROR";

                if (strtoupper($arrayRespuestaHal['result']['status'])==="ERROR")
                {
                    while($intFechaEjecucion <= $intFechaSalida)
                    {
                        $intFechaEjecucion = (int)date('YmjHis');
                    }

                    $strFechaAuxiliar	= strtotime ( "$intIntentosmaximos seconds" , strtotime ( $intFechaEjecucion ) ) ;	
                    $intFechaSalida 	= (int)date ( 'YmdHis' , $strFechaAuxiliar );
                                         
                    if($intIntentos === 3) 
                    {
                        $arrayRespuesta['status']  = "SKIP";
                        $arrayRespuesta['message'] = "Error general en consumo de Web Service";
                    }
                    
                    $intIntentos += 1;      
                }
                else
                {
                    $arrayRespuesta['status']  = $arrayRespuestaHal['result']['status'];
                    $arrayRespuesta['message'] = isset($arrayRespuestaHal['result']['message']) ? 
                                                 $arrayRespuestaHal['result']['message'] : $arrayRespuestaHal['result']['mensaje'];
                    
                    $intIntentos = 4;    
                }
            }  
            
            $this->serviceUtil->insertLog(array(
                'enterpriseCode'   => "10",
                'logType'          => 1,
                'logOrigin'        => 'TELCOS',
                'application'      => 'TELCOS',
                'appClass'         => $strClass,
                'appMethod'        => $strAppMethod,
                'descriptionError' => 'Response-ValidaEnlace',
                'status'           => 'Seguimiento',
                'inParameters'     => json_encode($arrayRespuestaHal),
                'creationUser'     => $arrayData['usuario']));
        }
        catch(\Exception $ex)
        {
            $arrayRespuesta['status']   = "ERROR";
            $arrayRespuesta['message']  = $ex->getMessage();
            
            $this->serviceUtil->insertLog(array(
                                                    'enterpriseCode'   => "10",
                                                    'logType'          => 1,
                                                    'logOrigin'        => 'TELCOS',
                                                    'application'      => 'TELCOS',
                                                    'appClass'         => $strClass,
                                                    'appMethod'        => $strAppMethod,
                                                    'descriptionError' => $ex->getMessage(),
                                                    'status'           => 'Fallido',
                                                    'inParameters'     => json_encode($arrayData),
                                                    'creationUser'     => $arrayData['usuario']));
        }
        return $arrayRespuesta;
    }

    /**
     * Función para validar la calidad de instalacion que se realiza.
     * Esta función consume un servicio de MD y depende de la respuesta
     * guarda la información en telcos. 
     *
     * @author Wilmer Vera <wvera@telconet.ec>
     * @version 1.0 31/03/2022
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 26/08/2022 - Se agrega al método el llamado del service técnico
     *                           por validación de error en circular referencias
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.2 25/10/2022 - Se agrega validacion para traslado con serieOnt null
     *
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.3 16/11/2022 Se agrega llamado de WS Calidad Instalacion en Producto Adicional Extender
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.4 22/11/2022 Se envian errores al Exception para verlos en el log
     * 
     * @author Jeampier Carriel <jacarriel@telconet.ec>
     * @version 1.5 23/11/2022 Se agrega TimeOut para espera de respuesta
     * 
     * @param type $arrayData
     * @return type $arrayRespuesta
     */
    public function getCalidadInstalacion($arrayData)
    {
        $strClass                           = "SoporteService";
        $strAppMethod                       = "getCalidadInstalacion";
        $arrayRespuestaMD                   = array();
        $arrayRespuesta                     = array();
        $floatRangoSOMayor                  = 0;
        $floatRangoSOMenor                  = 0;
        $floatRangoHECFECBIP                = 0;
        $floatRangoSpeed                    = 0;
        $floatRangoBandaDispMayor           = 0;
        $floatRangoBandaDispMenor           = 0;
        $intNumeroIntentos                  = 0;
        $serviceTecnico                     = $this->container->get('tecnico.InfoServicioTecnico');

        try
        {
            if (isset($arrayData['data']['servicioId'])) 
            {
                $arrayData['data']['empresaCod'] = $arrayData['data']['empresaId'];
                $intPuntoId = $arrayData['data']['puntoId'];

                $objInfoPunto = $this->emComercial->getRepository('schemaBundle:InfoPunto')
                                        ->find($intPuntoId);

                if(is_object($objInfoPunto))
                {
                    $arrayData['data']['login'] = $objInfoPunto->getLogin();
                }

                $objServicioPunto = $this->emComercial->getRepository('schemaBundle:InfoServicio')
                                                ->obtieneProductoInternetxPunto($intPuntoId); 
                                                error_log($intPuntoId);
                if (!is_object($objServicioPunto))
                {
                    throw new \Exception("No se encontró información del servicio de Internet");
                }
                $arrayData['data']['idServicio'] = $objServicioPunto->getId();
                $objServicioTecnicoInternet = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                      ->findOneBy(array( "servicioId" => $objServicioPunto->getId()));
                if (!is_object($objServicioTecnicoInternet))
                {
                    throw new \Exception("No se encontró información técnica del servicio");
                }

                $objElementoOntOlt = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                            ->find($objServicioTecnicoInternet->getElementoClienteId());

                if (is_object($objElementoOntOlt)) 
                {
                    $arrayData['data']['serialOnt'] = $objElementoOntOlt->getSerieFisica();
                }
                $intIdOlt               = $objServicioTecnicoInternet->getElementoId();
                $objElementoOlt         = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')->find($intIdOlt);
                if(is_object($objElementoOlt))
                {
                    $arrayData['data']['nombre_olt'] = $objElementoOlt->getNombreElemento();
                    $arrayData['data']['modelo_olt'] = $objElementoOlt->getModeloElementoId()->getNombreModeloElemento();
                    $objIpElemento = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                    ->findOneBy(array("elementoId" => $objElementoOlt->getId(),
                                                                        "estado"     => "Activo"));
                    if(is_object($objIpElemento))
                    {
                        $arrayData['data']['ip_olt'] = $objIpElemento->getIp();
                    }
                }
            }

            $strLogin          = $arrayData['data']['login'];
            $intIdServicio     = $arrayData['data']['idServicio'];
            $strSerieOnt       = $arrayData['data']['serialOnt'];
            $intCodEmpresa     = $arrayData['data']['empresaCod'];
            
            if (empty($strLogin))
            {
                throw new \Exception("El login del usuario es obligatorio para realizar la consulta.");
            }
            
            $arrayCliente  = $this->emComercial->getRepository("schemaBundle:InfoPersona")->getDatosClientePorLogin($strLogin);
            $arrayData['identificacionCliente'] = $arrayCliente[0]['identificacionCliente'];

            $arrayDatosEmpleado = $this->emComercial->getRepository('schemaBundle:InfoPersona')
                                      ->getPersonaDepartamentoPorUserEmpresa($arrayData['user'],
                                                                             $intCodEmpresa);

            $arrayData['identificacionTecnico'] = $arrayDatosEmpleado['IDENTIFICACION_CLIENTE'];
            $arrayData['nombres'] = $arrayDatosEmpleado['NOMBRES'].' '.$arrayDatosEmpleado['APELLIDOS'];

            $objProductoInternet = $this->emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                ->findOneBy(array('nombreTecnico'     => 'INTERNET',
                                                                                'empresaCod'          => $intCodEmpresa,
                                                                                'estado'              => 'Activo'
                                                                                ));
                                                                                
            $objServicioInternet = $this->emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if(is_object($objServicioInternet))
            {
                $objSpcServiceProfile   = $serviceTecnico->getServicioProductoCaracteristica(
                                                  $objServicioInternet, "SERVICE-PROFILE", $objProductoInternet);
            }

            if (empty($strSerieOnt)) 
            {
                $objServicioTecnico = $this->emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findOneBy(array("servicioId" => $intIdServicio));
                if (is_object($objServicioTecnico)) 
                {
                    $objElementoOnt = $this->emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                          ->find($objServicioTecnico->getElementoClienteId()); 
                    if (is_object($objElementoOnt)) 
                    {
                        $strSerieOnt  = $objElementoOnt->getSerieFisica();
                    }
                }
            }

            if(is_object($objSpcServiceProfile))
            {
                $arrayData['data']['service_profile'] = $objSpcServiceProfile->getValor();
            }else
            {
                throw new \Exception("No se ha obtenido el SERVICE-PROFILE, favor revisar la data");
            }

            $objSpcIndiceCliente    = $serviceTecnico->getServicioProductoCaracteristica($objServicioInternet, 
                                                                                                "INDICE CLIENTE", 
                                                                                                $objProductoInternet);
            if(is_object($objSpcIndiceCliente))
            {
                $strIndiceCliente   = $objSpcIndiceCliente->getValor();
            }
            else
            {
                throw new \Exception("No existe el indice del cliente, Favor Revisar");
            }

            $arrayPuertoService = $this->emComercial->getRepository('schemaBundle:InfoServicio')->getPuertoLogicoPorServicio($intIdServicio);
            
            if ($arrayPuertoService['strNombreInterfaceElemento']=="") 
            {
                throw new \Exception("No se obtuvo el puerto, Favor Revisar!");
            }

            //OBTENER TRAFFIC-TABLE
            $objSpcTraffic = $serviceTecnico->getServicioProductoCaracteristica($objServicioInternet,
                                                                              "TRAFFIC-TABLE",
                                                                              $objProductoInternet);
            if(is_object($objSpcTraffic))
            {
                $strTrafficTable = $objSpcTraffic->getValor();
            }
            else 
            {
                $objSpcTraffic = $serviceTecnico->getServicioProductoCaracteristica($objServicioInternet,
                                                                              "CAPACIDAD1",
                                                                              $objProductoInternet);

                if($objSpcTraffic)
                {
                    $strTrafficTable = $objSpcTraffic->getValor();
                }
                else
                {
                    throw new \Exception("El servicio no tiene valor de velocidad, Favor Revisar!");
                }
                
            }

            $arrayParamRangoSO = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('RANGOS CALIDAD DE INSTALACION',
                                                    'SOPORTE',
                                                    '',
                                                    'PARAMETROS_DE_CALIDAD_INSTALACION_SO',
                                                    '',
                                                    '',
                                                    '',
                                                    '',
                                                    '',
                                                    $intCodEmpresa);

            if (is_array($arrayParamRangoSO)) 
            {
                $floatRangoSOMayor = !empty($arrayParamRangoSO['valor1']) ? $arrayParamRangoSO['valor1'] : 0;
                $floatRangoSOMenor = !empty($arrayParamRangoSO['valor2']) ? $arrayParamRangoSO['valor2'] : 0;
            }

            $arrayParamRangoHECFECBIP = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne('RANGOS CALIDAD DE INSTALACION',
                                                                'SOPORTE',
                                                                '',
                                                                'PARAMETROS_DE_CALIDAD_INSTALACION_HEC_FEC_BIP',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                $intCodEmpresa);

            if (is_array($arrayParamRangoHECFECBIP)) 
            {
                $floatRangoHECFECBIP = !empty($arrayParamRangoHECFECBIP['valor1']) ? $arrayParamRangoHECFECBIP['valor1'] : 0;
            }

            $arrayParamRangoSpeed = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('RANGOS CALIDAD DE INSTALACION',
                                                        'SOPORTE',
                                                        '',
                                                        'PARAMETROS_DE_CALIDAD_INSTALACION_SPEED',
                                                        '',
                                                        '',
                                                        '',
                                                        '',
                                                        '',
                                                        $intCodEmpresa);

            if (is_array($arrayParamRangoSpeed)) 
            {
                $floatRangoSpeed = !empty($arrayParamRangoSpeed['valor1']) ? $strTrafficTable*$arrayParamRangoSpeed['valor1'] : 0;
            }

            $arrayParamRangoBandDispo = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne('RANGOS CALIDAD DE INSTALACION',
                                                                'SOPORTE',
                                                                '',
                                                                'PARAMETROS_DE_CALIDAD_INSTALACION_BANDA_DISPOSITIVOS',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                $intCodEmpresa);

            if (is_array($arrayParamRangoBandDispo)) 
            {
                $floatRangoBandaDispMayor = !empty($arrayParamRangoBandDispo['valor1']) ? $arrayParamRangoBandDispo['valor1'] : 0;
                $floatRangoBandaDispMenor = !empty($arrayParamRangoBandDispo['valor2']) ? $arrayParamRangoBandDispo['valor2'] : 0;
            }

            $arrayRangos  =   array(
                                'doubleRangoSOMayor'           => floatval($floatRangoSOMayor),
                                'doubleRangoSOMenor'           => floatval($floatRangoSOMenor),
                                'doubleRangoHEC_FEC_BIP'       => floatval($floatRangoHECFECBIP),
                                'doubleRangoSpeed'             => floatval($floatRangoSpeed),
                                'doubleRangoBanda_DispMayor'   => floatval($floatRangoBandaDispMayor),
                                'doubleRangoBanda_DispMenor'   => floatval($floatRangoBandaDispMenor)
                            );

            $arrayParamNumIntentos = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('RANGOS CALIDAD DE INSTALACION',
                                                                'SOPORTE',
                                                                '',
                                                                'PARAMETROS_DE_CALIDAD_INSTALACION_INTENTOS',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                '',
                                                                $intCodEmpresa);
                                                                

            if (is_array($arrayParamNumIntentos)) 
            {
                $intNumeroIntentos = !empty($arrayParamNumIntentos['valor1']) ? $arrayParamNumIntentos['valor1'] : 3;
            }

            $arrayDataCliente  = array(
                'puerto'              =>     $arrayPuertoService['strNombreInterfaceElemento'],
                'ont_id'              =>     $strIndiceCliente,
                'empresaCod'          =>     $arrayData['data']['empresaCod'],
                'login'               =>     $arrayData['data']['login'],
                'identificacion'      =>     $arrayData['identificacionCliente'],
                'serialOnt'           =>     $strSerieOnt,
                'service_profile'     =>     $arrayData['data']['service_profile'],
                'requiereAp'          =>     $arrayData['data']['requiereAp'],
                'cedulaTecnico'       =>     $arrayData['identificacionTecnico'],
                'nombreTecnico'       =>     $arrayData['nombres']);

            $arrayDataElemento  = array(
                'nombreElemento'        =>     $arrayData['data']['nombre_olt'],
                'ipElemento'            =>     $arrayData['data']['ip_olt'],
                'modeloOlt'             =>     $arrayData['data']['modelo_olt'],
                'datosCliente'          =>     array($arrayDataCliente));


            $arrayDataWs =  array(
                                'opcion'               => 'obtenerParametrosCalidadInstalacion',
                                'empresa'              => $arrayData['empresa'],
                                'tipoProceso'          => 'obtencion',
                                'usrCreacion'          => $arrayData['user'],
                                'ipCreacion'           => $arrayData['ipCreacion'],
                                'comandoConfiguracion' => 'NO',
                                'ejecutaComando'       => 'SI',
                                'datosElemento'        => array($arrayDataElemento)
                            );

            $this->emGeneral->getConnection()->beginTransaction();
            try
            {
                $entityLog = new InfoLog();
                $entityLog->setEmpresaCod("18");
                $entityLog->setTipoLog(1);
                $entityLog->setOrigenLog("TELCOS");
                $entityLog->setLatitud("");
                $entityLog->setLongitud("");
                $entityLog->setAplicacion("TELCOS");
                $entityLog->setClase($strClass);
                $entityLog->setMetodo($strAppMethod);
                $entityLog->setAccion("");
                $entityLog->setMensaje("");
                $entityLog->setEstado("Seguimiento");
                $entityLog->setDescripcion("Request-getCalidadInstalacion");
                $entityLog->setImei("");
                $entityLog->setModelo("");
                $entityLog->setVersionApk("");
                $entityLog->setVersionSo("");
                $entityLog->setTipoConexion("");
                $entityLog->setIntensidadSenal("");
                $entityLog->setParametroEntrada(json_encode($arrayDataWs));
                $entityLog->setUsrCreacion($arrayData['user']);
                $entityLog->setFeCreacion(new \DateTime('now'));
                $this->emGeneral->persist($entityLog);
                $this->emGeneral->flush(); 
                $this->emGeneral->commit(); 
            }catch(\Exception $ex)
            {
                $this->emGeneral->getConnection()->rollback();
            }
            $this->emGeneral->getConnection()->close();

            $strJsonPeticion   = json_encode($arrayDataWs);
            $arrayOptions      = array(CURLOPT_SSL_VERIFYPEER => true,
                                       CURLOPT_TIMEOUT => 700000);                                            
            for ($intI = 1; $intI <= $intNumeroIntentos; $intI++) 
            {
                $arrayResponseJson = $this->serviceRestClient->postJSON($this->strUrlCalidadInstalacion, $strJsonPeticion , $arrayOptions);
                $arrayResponseJson = json_decode($arrayResponseJson['result'],true);
                if($arrayResponseJson['status']!="OK")
                {
                    if($intI == $intNumeroIntentos)
                    {
                        break;
                    }
                }
                else
                {
                    $this->emGeneral->getConnection()->beginTransaction();
                    try
                    {
                        $entityLog = new InfoLog();
                        $entityLog->setEmpresaCod("18");
                        $entityLog->setTipoLog(1);
                        $entityLog->setOrigenLog("TELCOS");
                        $entityLog->setLatitud("");
                        $entityLog->setLongitud("");
                        $entityLog->setAplicacion("TELCOS");
                        $entityLog->setClase($strClass);
                        $entityLog->setMetodo($strAppMethod);
                        $entityLog->setAccion("");
                        $entityLog->setMensaje("");
                        $entityLog->setEstado("Seguimiento");
                        $entityLog->setDescripcion("Response-getCalidadInstalacion");
                        $entityLog->setImei("");
                        $entityLog->setModelo("");
                        $entityLog->setVersionApk("");
                        $entityLog->setVersionSo("");
                        $entityLog->setTipoConexion("");
                        $entityLog->setIntensidadSenal("");
                        $entityLog->setParametroEntrada(json_encode($arrayResponseJson));
                        $entityLog->setUsrCreacion($arrayData['user']);
                        $entityLog->setFeCreacion(new \DateTime('now'));
                        $this->emGeneral->persist($entityLog);
                        $this->emGeneral->flush(); 
                        $this->emGeneral->commit(); 
                    }catch(\Exception $ex)
                    {
                        $this->emGeneral->getConnection()->rollback();
                    }
                    $this->emGeneral->getConnection()->close();

                    break;
                }
            }
            
            if($arrayResponseJson['status'] == "OK")
            {
                $strStatus  = str_repeat(' ', 1000);
                $strMsjError  = str_repeat(' ', 1000);
                $strSql       = "BEGIN SPKG_CALIDAD_INSTALACION.GUARDAR_CALIDAD_INSTALACION(
                                                                                            :Pcl_JsonRespuesta,
                                                                                            :Pv_idServicio,
                                                                                            :Pv_usuarioCreacion,
                                                                                            :Pv_Status,
                                                                                            :strMensajeError); 
                                                                                        END;";
                $objStmt = $this->emComercial->getConnection()->prepare($strSql);

                $objStmt->bindParam('Pcl_JsonRespuesta', json_encode($arrayResponseJson));
                $objStmt->bindParam('Pv_idServicio', $intIdServicio);
                $objStmt->bindParam('Pv_usuarioCreacion', $arrayData['user']);
                $objStmt->bindParam('Pv_Status', $strStatus);
                $objStmt->bindParam('strMensajeError', $strMsjError);
                $objStmt->execute();
                if ($strStatus  == 'ERROR')
                {
                    throw new \Exception($strMsjError);
                }
                else
                {
                    $arrayRespuesta['status']   = "200";
                    $arrayRespuesta['message']  = "OK";
                    $arrayRespuesta['rangos'] = $arrayRangos;
                    $arrayRespuesta['datosElemento']  = $arrayResponseJson['respuesta']['datosElemento'];
                }
            }
            else
            {
                $objCaractCalidadInst = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                        ->findOneBy(array("descripcionCaracteristica" => 'CalidadInstalacion',
                                                                          "estado"                    => "Activo"));

                $objProdCaractCalidad = $this->emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                               ->findOneBy(array( 
                                                                 "productoId"       => $objProductoInternet->getId(),
                                                                 "caracteristicaId" => $objCaractCalidadInst->getId(),
                                                                 "estado"           => "Activo"
                                                                ));
                if(is_object($objProdCaractCalidad))
                {
                    //Guardar informacion de la característica del producto
                    $objServicioProdCaract = new InfoServicioProdCaract();
                    $objServicioProdCaract->setServicioId($intIdServicio);
                    $objServicioProdCaract->setProductoCaracterisiticaId($objProdCaractCalidad->getId());
                    $objServicioProdCaract->setValor('ERROR');
                    $objServicioProdCaract->setEstado('Pendiente');
                    $objServicioProdCaract->setUsrCreacion($arrayData['user']);
                    $objServicioProdCaract->setFeCreacion(new \DateTime('now'));
                    $this->emComercial->persist($objServicioProdCaract);
                    $this->emComercial->flush();
                }

                throw new \Exception('Se presento error de visualización, los valores de calidad de instalación quedarán registrados en Telcos');
            }
        }
        catch(\Exception $ex)
        {
            $arrayRespuesta['status']   = "501";
            $arrayRespuesta['message']  = $ex->getMessage();
            $arrayRespuesta['datosElemento']  = null;
            $arrayRespuesta['rangos'] = null;

            $this->serviceUtil->insertLog(array(
                                                    'enterpriseCode'   => "10",
                                                    'logType'          => 1,
                                                    'logOrigin'        => 'TELCOS',
                                                    'application'      => 'TELCOS',
                                                    'appClass'         => $strClass,
                                                    'appMethod'        => $strAppMethod,
                                                    'descriptionError' => $ex->getMessage(),
                                                    'status'           => 'Fallido',
                                                    'inParameters'     => json_encode($arrayData),
                                                    'creationUser'     => $arrayData['user']));
        }
        return $arrayRespuesta;
    }
    /**
     * Función que devuelve el id y nombre de la hipotesis de cierre de caso Hal
     *
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.0 28/07/2021
     *
     * @param type $intIdTarea
     * @return type $arrayRespuesta
     */
    public function obtenerHipotesisCierreCasoHal($intIdTarea)
    { 
        $arrayRespuesta     = array();
        try 
        {
            $objAdmiCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
            ->findOneByDescripcionCaracteristica('HIPOTESIS_CIERRE_CASO_HAL');
            
            $arrayData =  array (
                                 'idTarea'             => $intIdTarea,
                                 'idAmiCaracteristica' => $objAdmiCaracteristica->getId()
                                );

            $intIdHipotesis =  $this->emSoporte->getRepository('schemaBundle:InfoTareaCaracteristica')
            ->getIdHipotesisCierreCasoHal($arrayData);

            if(isset($intIdHipotesis))
            {
                $objAdmiHipotesis = $this->emSoporte->getRepository('schemaBundle:AdmiHipotesis')
                ->find($intIdHipotesis);

                $arrayRespuesta = array(
                                        'idHipotesis'     => $intIdHipotesis,
                                        'nombreHipotesis' => $objAdmiHipotesis->getNombreHipotesis(),
                                        'mensaje'      => "Consulta exitosa",
                                        'status'       => "OK"
                                    );  
            }
            else
            {
                $arrayRespuesta = array(
                                        'mensaje' => "No se pudo obtener el idHipotesis",
                                        'status' => "ERROR"
                                    );
            }   
        } 
        catch (\Exception $ex)
        {
            $arrayRespuesta = array(
                'mensaje' => $ex->getMessage(),
                'status' => "ERROR"
            );
        }
        return $arrayRespuesta;
    }
  

    // registra tareas indisponibilidad
    public function guardarIndisponibilidad($arrayIndisponibilidad)
    {
        
        try 
        {

            $strMensajeRespuesta = '';
            $strMensajeRespuesta  = str_repeat(' ', 1000);

            $strSql = "BEGIN DB_SOPORTE.SPKG_INFO_TAREA.P_INFO_TAREA_INDISPONIBILIDAD("
            .":pn_detalle_id_pn_caso_id, :pv_tipo_pv_INDISPONIBILIDAD, :pn_TIEMPO_AFECTACION, "
            .":pv_masivo, :pv_OLT_pv_PUERTO, :pv_CAJA_pv_SPLITTER, "
            .":pn_CLIENTES_pn_RESPONSABLE, :pv_OBSERVACION, :pv_USR_CREACION_pv_IP_CREACION, "
            .":pv_mensaje_respuesta"
            ."); END;";
            
            $objStmt = $this->emSoporte->getConnection()->prepare($strSql);

            $strDetalleCaso = $arrayIndisponibilidad['intIdDetalle'] . ',' .  $arrayIndisponibilidad['intIdCaso'];
            $strTipo = $arrayIndisponibilidad['strTipoI'] . ',' .  $arrayIndisponibilidad['strIndisponibilidadI'];
            $intTiempoAfectacionI = $arrayIndisponibilidad['intTiempoAfectacionI'];
            $strMasivoI = $arrayIndisponibilidad['strMasivoI'];
            $strOltPuerto = $arrayIndisponibilidad['strOltI']. ';' .  $arrayIndisponibilidad['strPuertoI'];
            $strCajaSplitter = $arrayIndisponibilidad['strCajaI']. ';' .  $arrayIndisponibilidad['strSplitterI'];
            $strClientesResponsable = $arrayIndisponibilidad['intClientesAfectadosI']. ',' .  $arrayIndisponibilidad['intComboResponsableI'];
            $strObservacionesI = $arrayIndisponibilidad['strObservacionesI'];
            $strUsuarioIp = $arrayIndisponibilidad['strUsrCreacion']. ',' .  $arrayIndisponibilidad['strIpCreacion'];

            $objStmt->bindParam('pn_detalle_id_pn_caso_id', $strDetalleCaso);
            $objStmt->bindParam('pv_tipo_pv_INDISPONIBILIDAD', $strTipo);
            $objStmt->bindParam('pn_TIEMPO_AFECTACION', $intTiempoAfectacionI);
            $objStmt->bindParam('pv_masivo', $strMasivoI);
            $objStmt->bindParam('pv_OLT_pv_PUERTO', $strOltPuerto);
            $objStmt->bindParam('pv_CAJA_pv_SPLITTER', $strCajaSplitter);
            $objStmt->bindParam('pn_CLIENTES_pn_RESPONSABLE', $strClientesResponsable);
            $objStmt->bindParam('pv_OBSERVACION', $strObservacionesI);
            $objStmt->bindParam('pv_USR_CREACION_pv_IP_CREACION', $strUsuarioIp);
            
            $objStmt->bindParam('pv_mensaje_respuesta', $strMensajeRespuesta);
            $objStmt->execute();

        }
        catch (\Exception $ex)
        {
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->guardarIndisponibilidad',
                                            $ex->getMessage(),
                                            $arrayParametros["strUsrCreacion"],
                                            $arrayParametros["strIpCreacion"]);
        }

    }


    public function updateHipotesisByCasoId($arrayIndisponibilidad)
    {

        try 
        {

            $arrayInfoDetalleHipotesis = $this->emSoporte->getRepository("schemaBundle:InfoDetalleHipotesis");
            $arrayInfoDetalleHipotesis = $arrayInfoDetalleHipotesis ->findBy(array ('casoId' => $arrayIndisponibilidad['intIdCaso']));

            $objAdmiHipotesis = $this->emSoporte->getRepository('schemaBundle:AdmiHipotesis');
            $objAdmiHipotesis = $objAdmiHipotesis->findOneBy(array ('id' => $arrayIndisponibilidad['intIdHipotesisInicialI']));
                    
            foreach($arrayInfoDetalleHipotesis as $objInfoDetalleHipotesis)
            {
                // Actualizamos la hipotesis.
                $objInfoDetalleHipotesis->setHipotesisId($objAdmiHipotesis);
                $this->emSoporte->persist($objInfoDetalleHipotesis);
                $this->emSoporte->flush();
            }

        }
        catch (\Exception $ex)
        {
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->updateHipotesisByCasoId',
                                            $ex->getMessage(),
                                            $arrayParametros["strUsrCreacion"],
                                            $arrayParametros["strIpCreacion"]);
        }
            
    }

    /*
     *
     * Documentación para el método 'ejecutarCreacionHETareaFinalizada'.
     * 
     * Función que invoca al proceso de creacion solicitud horas extras al finalizar una tarea.
     *
     * @author Katherine Portugal <kportugal@telconet.ec>
     * @version 1.0, 13-09-2021
     * 
     */
    public function crearCreacionHETareaFinalizada($arrayParametros)
    {
        try
        {
            $strMensajeGeneraHE = $this->emSoporte->getRepository("schemaBundle:AdmiTarea")->ejecutarCreacionHETareaFinalizada($arrayParametros);
        }
        catch(\Exception $ex)
        {
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->crearCreacionHETareaFinalizada',
                                            $ex->getMessage(),
                                            $arrayParametros["strUsrCreacion"],
                                            $arrayParametros["strIpCreacion"]);
        }
        return 'OK';
    }

    /*
     *
     * Documentación para el método 'guardarTareaCaracteristica'.
     * 
     * Función que guarda el codigo de trabajo de una tarea de caso tecnico de soporte.
     *
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.0, 09-09-2021
     * 
     */
    public function guardarTareaCaracteristica($arrayParametros)
    {
        $this->emSoporte->getConnection()->beginTransaction();
        try
        {
            $objAdmiCaracteristica = $this->emComercial->getRepository('schemaBundle:AdmiCaracteristica')
            ->findOneByDescripcionCaracteristica($arrayParametros['strDescripcionCaracteristica']);
            if (is_object($objAdmiCaracteristica))
            {
                $objInfoTareaCaracteristica = new InfoTareaCaracteristica();
                $objInfoTareaCaracteristica->setTareaId($arrayParametros['intComunicacionId']);
                $objInfoTareaCaracteristica->setDetalleId($arrayParametros['idDetalle']);
                $objInfoTareaCaracteristica->setCaracteristicaId($objAdmiCaracteristica->getId());
                $objInfoTareaCaracteristica->setFeCreacion(new \DateTime('now'));
                $objInfoTareaCaracteristica->setUsrCreacion($arrayParametros['strUsrCreacion']);
                $objInfoTareaCaracteristica->setIpCreacion($arrayParametros['strIpCreacion']);
                $objInfoTareaCaracteristica->setValor($arrayParametros['strCodigoTrabajo']);
                $objInfoTareaCaracteristica->setEstado('Activo');
                $this->emSoporte->persist($objInfoTareaCaracteristica);
                $this->emSoporte->flush();
            }
        }
        catch(\Exception $ex)
        {
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->guardarTareaCaracteristica',
                                            $ex->getMessage(),
                                            $arrayParametros['strUsrCreacion'],
                                            $arrayParametros['strIpCreacion']);

            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }
            return 'Error';
        }
        $this->emSoporte->getConnection()->commit();

        return 'Ok';
    }

    /*
     *
     * Documentación para el método 'consumoApiWSPost'.
     * 
     * Función que consume apis mediante metodo post.
     *
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.0, 06-09-2022
     * 
     */
    public function consumoApiWSPost($strUrl, $arrayParametros)
    {
        $arrayOptions = array(CURLOPT_SSL_VERIFYPEER => false,
                              CURLOPT_HTTPHEADER => array('Content-Type: application/json'));
        
        $this->serviceUtil->insertError( 'Telcos+', 
                              'SoporteService.consumoApiWSPost-url', 
                              $strUrl, 
                              'telcos', 
                              '127.0.0.1' );                                                        
        $arrayResponse   = $this->serviceRestClient->postJSON($strUrl, $arrayParametros, $arrayOptions);

        $this->serviceUtil->insertError( 'Telcos+', 
                                        'SoporteService.consumoApiWSPost-arrayResponse', 
                                        json_encode($arrayResponse), 
                                        'telcos', 
                                        '127.0.0.1' );

        if($arrayResponse['status'] == 200)
        {   // HTTP Status 200 OK - comunicacion correcta con el ws 
            $arrayResult = json_decode($arrayResponse['result'], true);
            return $arrayResult;
        }
        else
        {   // error de comunicacion con el ws de SMS
            return array(
                        'detail' => 'Ha fallado la comunicacion con el ws', 
                        'code' => 500
                    );
        }
    }

    /*
     *
     * Documentación para el método 'generaTokenAuthenticationAPI'.
     * 
     * Función que genera token de autenticacion de apis.
     *
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.0, 06-09-2022
     * 
     */
    public function generaTokenAuthenticationAPI($arrayParametros)
    {
        try
        {
            $arrayTokenParametros = json_encode(array(
                                            'username' => $arrayParametros['strUserNameApi'],
                                            'password' => $arrayParametros['strPassWordApi'],
                                            'source'   => array('name' => $arrayParametros['strSourceNameApi'])));

            $arrayResponse = $this->consumoApiWSPost($this->strApiSmsUrlToken, $arrayTokenParametros);
            $strToken = $arrayResponse['token'];           
        } 
        catch (Exception $ex) 
        {
            $this->serviceUtil->insertError( 'Telcos+', 
                                 'SoporteService.generaTokenAuthenticationAPI', 
                                 $ex->getMessage(), 
                                 'telcos', 
                                 '127.0.0.1' );
        }        
        return $strToken;
    }

    /*
     *
     * Documentación para el método 'enviaSmsPorApis'.
     * 
     * Función que genera token de autenticacion de apis.
     *
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.0, 06-09-2022
     * 
     */
    public function enviaSmsPorApis($arrayParametros)
    { 
        $strProceso      = 'SMS_MD-NOTIFICACION';
        $strMensaje      = $arrayParametros['mensaje'];
        $strNumeroTlf    = $arrayParametros['numeroTelefono'];
        $strUser         = $arrayParametros['user'];
        $strCodEmpresa   = $arrayParametros['codEmpresa'];
        try
        {                 
            $arrayTokenAutentication = array(
                                            'strUserNameApi'   => $arrayParametros['strUserNameApi'],
                                            'strPassWordApi'   => $arrayParametros['strPassWordApi'],
                                            'strSourceNameApi' => $arrayParametros['strSourceNameApi']
                                        );  

            $strToken        = $this->generaTokenAuthenticationAPI($arrayTokenAutentication);   

            if (!$strToken)
            {
                $this->serviceUtil->insertError( 'Telcos+', 
                                    'SoporteService.enviaSmsPorApis', 
                                    "Error en generación de token", 
                                    'telcos', 
                                    '127.0.0.1' );
                
                $arrayResponse['salida']  = 500;
                $arrayResponse['mensaje'] = "Error en generación de Token";

                return $arrayResponse;            
            }

            $strNumeroTlfAux = substr($strNumeroTlf, 0, 1);
            if($strNumeroTlfAux === "0")
            {
                $strNumeroTlf = '593'.substr($strNumeroTlf, 1, 9);
            }
            if(isset($arrayParametros['strProceso']))
            {
                $strProceso  = $arrayParametros['strProceso'];
            }
            $objFechaEnvio = new \DateTime('now'); 

            $arrayParametrosEnvio = json_encode(array('token' => $strToken,
                                                    'user'  => $arrayParametros['strUserNameApi'],
                                                    'accion'=> 'enviarIndividual',
                                                    'source'=> array('name'         => $arrayParametros['strSourceNameApi'],
                                                                    'originID'     => '127.0.0.1',
                                                                    'tipoOriginID' => 'IP'),
                                                    'data'  => array('proceso'         => $strProceso,
                                                                    'noCia'           => $strCodEmpresa,
                                                                    'usuarioCreacion' => $strUser,
                                                                    'noSalida'        => '',
                                                                    'mensajeSalida'   => '',
                                                                    'bulkId'          => $objFechaEnvio->format('Ymd-').$strToken,
                                                                    'jsonMensaje'     => "",
                                                                    'messages'=> [array('from'               => 'InfoSMS',
                                                                                        'destinations'       => [array ('to'=> $strNumeroTlf,
                                                                                                                        'messageId' => '1'
                                                                                                                       )
                                                                                                                ],
                                                                                        'text'               => $strMensaje,
                                                                                        'sendAt'             => $objFechaEnvio->format('Y-m-d'),
                                                                                        'flash'              => true,
                                                                                        'intermediateReport' => true,
    'notifyUrl'=>'https://extranet.netlife.ec/rs/sms/ws/rest/notificar',
                                                                                            'notifyContentType'  => 'application/json',
                                                                                            'callbackData'       => 'DLR callback data',
                                                                                            'validityPeriod'     => 720
                                                                                        )
                                                                                    ]
                                                                    )
                                                    )
                                                );

            $arrayResponse = $this->consumoApiWSPost($this->strApiSmsUrl, $arrayParametrosEnvio);              
  
        } 
        catch (Exception $ex) 
        {
            $this->serviceUtil->insertError( 'Telcos+', 
                                 'SoporteService.enviaSmsPorApis', 
                                 $ex->getMessage(), 
                                 'telcos', 
                                 '127.0.0.1' );            
            $arrayResponse['salida']  = 500;
            $arrayResponse['mensaje'] = $ex->getMessage();
        }
        
        return $arrayResponse;
    }


 /*
     *
     * Documentación para el método 'enviaSmsPorMS'.
     * 
     * Función que realiza envio de sms por microservicio.
     *
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.0, 21-03-2023
     * 
     */
    public function enviaSmsPorMS($strParametros)
    { 
        try
        {
        $arrayTokenCas       = $this->objTokenCasService->generarTokenCas();


        $arrayOptions       = array(
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_HTTPHEADER     => array(
                'Content-Type: application/json',
                'tokencas: ' . $arrayTokenCas['strToken']
            )
        );

        $strParameter        = json_encode( $strParametros);



        $this->serviceUtil->insertError('Telcos+',
        'SoporteService->enviaSmsPorMS',
        'Request invocacion SMS: '
        .substr($strParameter,0,2000),
        'Telcos',
        '127.0.0.1');


        $arrayResponse      = $this->serviceRestClient->postJSON($this->strSmsMsUrl, $strParameter, $arrayOptions);

            if(!empty($arrayResponse))
            {

                $this->serviceUtil->insertError('Telcos+',
                'SoporteService->enviaSmsPorMS',
                'Resultado invocacion SMS: '
                .substr(json_encode($arrayResponse),0,2000),
                'Telcos',
                '127.0.0.1');
                
            }
            else
            {
                throw new \Exception($arrayResponse['message']);
            }


  
        } 
        catch (Exception $ex) 
        {
            $this->serviceUtil->insertError( 'Telcos+', 
                                 'SoporteService.enviaSmsPorMS', 
                                 $ex->getMessage(), 
                                 'telcos', 
                                 '127.0.0.1' );            
            $arrayResponse['salida']  = 500;
            $arrayResponse['mensaje'] = $ex->getMessage();
        }
        
        return $arrayResponse;
    }




    
    /**
     * Función que obtiene autorización para usuario telcos de SSO-Gateway
     *
     * @author David De La Cruz <ddelacruz@telconet.ec>
     * @version 1.0 23/09/2022
     *
     * @return type $arrayAutorizacion
     */
    public function generarAutorizacion($arrayParametros)
    {
        $arrayAutorizacion = array();

        try
        {
            $arrayDatosToken = array(
                "username" => $this->strUsuarioToken,
                "password" => $this->strPasswordToken,
                "apiKey"   => $this->strApiKeyToken,
                "serviceTarget" => $arrayParametros['serviceTarget']
            );

            $arrayParametrosWs = array(
                'strUrl'        => $this->strUrlTokenAutorizacion,
                'arrayData'     => $arrayDatosToken,
                'arrayOptions'  => array(
                    CURLOPT_SSL_VERIFYPEER => false,
                    CURLOPT_HTTPHEADER => array('Content-Type: application/json')
                )
            );

            $arrayAutorizacion = $this->comunicacionWsRestClient($arrayParametrosWs);
        }
        catch (\Exception $e) 
        {
            $this->serviceUtil->insertError(
                'Telcos+',
                'soporteService->generarTokenCas',
                'Error en obtener Token Cas: '.$e->getTraceAsString(),
                'root',
                '127.0.0.1'
            );
            $arrayAutorizacion["mensaje"] = "fail";
            $arrayAutorizacion["descripcion"] = $e->getMessage();
        }
        return $arrayAutorizacion;
    }
    
    /**
     * Función que obtiene la lista de Niveles de Criticidad
     *
     * @author David De La Cruz <ddelacruz@telconet.ec>
     * @version 1.0 04/02/2022
     *
     * @return type $arrayNivelesCriticidad
     */
    public function getNivelesCriticidad()
    {
        $arrayObjNivelesCriticidad = $this->emSoporte->getRepository('schemaBundle:AdmiNivelCriticidad')->findBy(array("estado"=>"Activo"));

        if(count($arrayObjNivelesCriticidad)<1)
        {
            throw new \Exception("Niveles de criticidad no encontrados");
        }

        foreach($arrayObjNivelesCriticidad as $objNivelCriticidad)
        {
            $arrayNivelesCriticidad[] = array('nombreCriticidad' => $objNivelCriticidad->getNombreNivelCriticidad(),
                                              'idCriticidad'  => $objNivelCriticidad->getId());
        }

        return $arrayNivelesCriticidad;
    }

    /**
     * Función que actualiza un Caso según los parámetros permitidos
     *
     * @author David De La Cruz <ddelacruz@telconet.ec>
     * @version 1.0 04/02/2022
     *
     * @param type $$arrayData
     * @return type $arrayRespuesta
     */
    public function actualizaCaso($arrayData)
    {
        $objRequest = $arrayData['request'];
        $arrayRespuesta = array(
            'status' => 'OK',
            'mensaje' => 'El caso se actualizó correctamente',            
        );
        $this->emSoporte->beginTransaction();
        try
        {
            $arrayAfectados = json_decode($objRequest->get('afectados'),true);
            $objCaso = $this->emSoporte->getRepository('schemaBundle:InfoCaso')->find($arrayData['idCaso']);
            $objNivelCriticidad = $this->emSoporte->getRepository('schemaBundle:AdmiNivelCriticidad')->find($objRequest->get('nivelCriticidad'));
            $objCaso->setNivelCriticidadId($objNivelCriticidad);
            $objCaso->setTipoAfectacion($objRequest->get('tipoAfectacion'));
            $objCaso->setTituloIni($objRequest->get('tituloInicial'));
            $objCaso->setVersionIni($objRequest->get('versionInicial'));
            
            $arrayInfoDetalleHipotesis = $this->emSoporte->getRepository("schemaBundle:InfoDetalleHipotesis")
                                                            ->findBy(array('casoId' => $arrayData['idCaso']));
            
            foreach($arrayInfoDetalleHipotesis as $objInfoDetalleHipotesis)
            {
                $arrayInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                                ->findBy(array('detalleHipotesisId' => $objInfoDetalleHipotesis->getId()));
                
                foreach($arrayInfoDetalle as $objInfoDetalle)
                {
                    $arrayCriterios = $this->emSoporte->getRepository('schemaBundle:InfoCriterioAfectado')
                                                            ->findBy(array('detalleId' => $objInfoDetalle->getId()),
                                                                    array('id' => 'ASC'));
                    
                    if($arrayCriterios)
                    {
                        unset($arrayCriterios[0]);

                        foreach($arrayCriterios as $objInfoCriterioAfectado)
                        {
                            $objInfoParteAfectada = $this->emSoporte->getRepository('schemaBundle:InfoParteAfectada')
                                                                    ->findOneBy(
                                                                                array(
                                                                                    'criterioAfectadoId' => $objInfoCriterioAfectado->getId(),
                                                                                    'detalleId' => $objInfoDetalle->getId()
                                                                                )
                                                                            );
                                                                            
                            $objInfoParteAfectadaHist = new InfoParteAfectadaHist();
                            $objInfoParteAfectadaHist->setTipoAfectado($objInfoParteAfectada->getTipoAfectado());
                            $objInfoParteAfectadaHist->setDetalleId($objInfoDetalle->getId());
                            $objInfoParteAfectadaHist->setCriterioAfectadoId($objInfoParteAfectada->getCriterioAfectadoId());
                            $objInfoParteAfectadaHist->setAfectadoId($objInfoParteAfectada->getAfectadoId());
                            $objInfoParteAfectadaHist->setFeIniIncidencia($objInfoParteAfectada->getFeIniIncidencia());
                            $objInfoParteAfectadaHist->setAfectadoNombre($objInfoParteAfectada->getAfectadoNombre());
                            $objInfoParteAfectadaHist->setAfectadoDescripcion($objInfoParteAfectada->getAfectadoDescripcion());
                            $objInfoParteAfectadaHist->setFeCreacion($objInfoParteAfectada->getFeCreacion());
                            $objInfoParteAfectadaHist->setUsrCreacion($objInfoParteAfectada->getUsrCreacion());
                            $objInfoParteAfectadaHist->setIpCreacion($objInfoParteAfectada->getIpCreacion());
                            $objInfoParteAfectadaHist->setAfectadoDescripcionId($objInfoParteAfectada->getAfectadoDescripcionId());
                            $objInfoParteAfectadaHist->setEstado('Eliminado');
                            $objInfoParteAfectadaHist->setFeUltMod(new \DateTime('now'));
                            $objInfoParteAfectadaHist->setUsrUltMod($objRequest->getSession()->get('user'));
                            $objInfoParteAfectadaHist->setIpUltMod($objRequest->getClientIp());
                            $this->emSoporte->persist($objInfoParteAfectadaHist);
                            $this->emSoporte->flush();
                            
                            $this->emSoporte->remove($objInfoParteAfectada);
                            $this->emSoporte->flush();

                            $this->emSoporte->remove($objInfoCriterioAfectado);
                            $this->emSoporte->flush();
                            
                        }
                        
                        $intIndex = 1;

                        while($arrayAfectados[$intIndex])
                        {
                            $objInfoCriterioAfectado = new InfoCriterioAfectado();
                            $objInfoCriterioAfectado->setId($intIndex+1);
                            $objInfoCriterioAfectado->setDetalleId($objInfoDetalle);
                            $objInfoCriterioAfectado->setCriterio('Servicio');
                            $objInfoCriterioAfectado->setOpcion('Servicio: '.$arrayAfectados[$intIndex]['nombre_afectado'].' | OPCION: Servicios');
                            $objInfoCriterioAfectado->setFeCreacion(new \DateTime('now'));
                            $objInfoCriterioAfectado->setUsrCreacion($objRequest->getSession()->get('user'));
                            $objInfoCriterioAfectado->setIpCreacion($objRequest->getClientIp());
                            $this->emSoporte->persist($objInfoCriterioAfectado);
                            $this->emSoporte->flush();

                            $objInfoParteAfectada = new InfoParteAfectada();
                            $objInfoParteAfectada->setTipoAfectado('Servicio');
                            $objInfoParteAfectada->setDetalleId($objInfoDetalle->getId());
                            $objInfoParteAfectada->setCriterioAfectadoId($objInfoCriterioAfectado->getId());
                            $objInfoParteAfectada->setAfectadoId($arrayAfectados[$intIndex]['id_afectado']);
                            $objInfoParteAfectada->setFeIniIncidencia(new \DateTime('now'));
                            $objInfoParteAfectada->setAfectadoNombre($arrayAfectados[$intIndex]['nombre_afectado']);
                            $objInfoParteAfectada->setAfectadoDescripcion($arrayAfectados[$intIndex]['descripcion_afectado']);
                            $objInfoParteAfectada->setFeCreacion(new \DateTime('now'));
                            $objInfoParteAfectada->setUsrCreacion($objRequest->getSession()->get('user'));
                            $objInfoParteAfectada->setIpCreacion($objRequest->getClientIp());
                            $this->emSoporte->persist($objInfoParteAfectada);
                            $this->emSoporte->flush();
                            $intIndex ++;
                        }
                    }
                }
            }

            $this->emSoporte->persist($objCaso);
            $this->emSoporte->flush();
            $this->emSoporte->commit();
        } 
        catch(\Exception $ex)
        {
            if($this->emSoporte->isTransactionActive())
            {
                $this->emSoporte->rollback();
                $this->emSoporte->close();
            }

            $arrayRespuesta = array(
                'status' => 'ERROR',
                'mensaje' => 'Error al actualizar el caso',            
            );
        }       

        return $arrayRespuesta;
    }

     /**
     * Función que devuelve los datos de la cuenta del usuario de Extranet
     *
     * @author David De La Cruz <ddelacruz@telconet.ec>
     * @version 1.0 04/02/2022
     *
     * @param type $$arrayData
     * @return type $arrayRespuesta
     */
    public function getConsultaCuentaExtranet($arrayData)
    {
        $arrayRespuesta = array();
        $strServiceTarget = $this->container->getParameter('service_target_extranet_tn');
        $strUrlConsultarCuentaExt = $this->container->getParameter('ws_ms_consultarCuenta_url');        
        $arrayAutorizacion = $this->generarAutorizacion(array('serviceTarget' => $strServiceTarget));
        
                                
        if (!empty($arrayAutorizacion['result']['data'])) 
        {                           

            /* Parametros para el envio al Ws  */
            $arrayParametrosWs = array (
                'strUrl'        => $strUrlConsultarCuentaExt,
                'arrayData'     => $arrayData,
                'arrayOptions'  => array(
                    CURLOPT_SSL_VERIFYPEER => false,
                    CURLOPT_HTTPHEADER     => array(
                                                    'Content-Type: application/json',
                                                    'tokenCas: '.$arrayAutorizacion['result']['data']['casSesionId'],
                                                    'token-autorizacion: '. $arrayAutorizacion['result']['data']['tokenAutorizacion'],
                                                    'contexto: '. $arrayData['contexto'],
                                                    'user: '.$this->strUsuarioToken
                                                    )
                                    )
                    );                                                      

            /* Establecemos la comunicación */
            $arrayRespuestaCuentaExt = $this->comunicacionWsRestClient($arrayParametrosWs);
            
            // Validaciones de la respuesta 

            if($arrayRespuestaCuentaExt['result']['status'] == "OK" && !empty($arrayRespuestaCuentaExt['result']['data']))
            {
                $arrayRespuesta = $arrayRespuestaCuentaExt['result']['data'];
            }
            else
            {               
                $strDescripcionError = $arrayRespuestaCuentaExt['mensaje'].': '.$arrayRespuestaCuentaExt['descripcion'];
                $this->serviceUtil
                        ->insertLog(
                                    array(
                                        'enterpriseCode'   => '10',
                                        'logType'          => 1,
                                        'logOrigin'        => 'TELCOS',
                                        'application'      => 'TELCOS',
                                        'appClass'         => 'SoporteService',
                                        'appMethod'        => 'getConsultaCuentaExtranet',
                                        'descriptionError' => $strUrlConsultarCuentaExt." - ".$strDescripcionError,
                                        'status'           => 'Fallido',
                                        'inParameters'     => json_encode($arrayData),
                                        'creationUser'     => 'TELCOS'
                                    )
                                );
            }
        }
        return $arrayRespuesta;
    }

    /**
     * Función que obtiene la cantidad de casos según tareas
     *
     * @author David De La Cruz <ddelacruz@telconet.ec>
     * @version 1.0 11/03/2022
     *
     * @return type $arrayResponse
     */
    public function getCantidadCasosSegunTareas($arrayParametros)
    {
        return $this->emSoporte->getRepository('schemaBundle:InfoCaso')->getCantidadCasosSegunTareas($arrayParametros);
    }

     /**
     * funcion que devuelve los tipos de parametros para los combo box en los casos backbone 
     * marcados como mantenimiento programado
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.0 - 29/03/2022
     */
    public function getTipoParametrosCasos($arrayParametro)
    {
        $arrayData      = array();
        $arrayRespuesta = array();
        $arrayResultadosParametro = $this->emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                    ->get( "PARAMETRO_GENERAL_CASOS", 
                                            "", 
                                            "", 
                                            "", 
                                            $arrayParametro["tipo_busqueda"], 
                                            "",
                                            "",
                                            "",
                                            "");
        if( count($arrayResultadosParametro)>0 )
        {
            foreach($arrayResultadosParametro as $arrayResultado)
            {               
                $arrayRespuesta[]=array('nombreParametro' => $arrayResultado['valor2'],
                                        'idParametro'     => $arrayResultado['valor2']
                                  );                
            }
        }
        return $arrayRespuesta;       

    }

    /**
     * funcion que guarda los datos de los casos backbone 
     * marcados como mantenimiento programado
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.0 - 29/03/2022
     */
    public function guardaMantenimientoProgramado($arrayParametro)
    {
        $this->emSoporte->getConnection()->beginTransaction();
   
         try 
        {
            $strFechaInicio = date_create(date('Y-m-d H:i', strtotime($arrayParametro["datos"]["fechaInicio"] . 
                               ' ' . $arrayParametro["datos"]["horaInicio"])));
            $strFechaFin    = date_create(date('Y-m-d H:i', strtotime($arrayParametro["datos"]["fechaFin"] . 
                               ' ' . $arrayParametro["datos"]["horaFin"])));
            
            $objInfoMantProgramado = new InfoMantenimientoProgramado();
            $objInfoMantProgramado->setCasoId($arrayParametro["casoId"]);
            $objInfoMantProgramado->setCodEmpresa($arrayParametro["codEmpresa"]);
            $objInfoMantProgramado->setFechaInicio($strFechaInicio);
            $objInfoMantProgramado->setFechaFin($strFechaFin);
            $objInfoMantProgramado->setFeCreacion(new \DateTime('now'));
            $objInfoMantProgramado->setTiempoAfectacion($arrayParametro["datos"]["tiempoAfectacion"]);
            $objInfoMantProgramado->settipoAfectacion($arrayParametro["datos"]["tipoAfectacion"]);
            $objInfoMantProgramado->setTipoNotificacion($arrayParametro["datos"]["tipoNotificacion"]);
            $objInfoMantProgramado->setUsrCreacion($arrayParametro["strUsrCreacion"]);
            $objInfoMantProgramado->setIpCreacion($arrayParametro["strIpCreacion"]);
            $this->emSoporte->persist($objInfoMantProgramado);
            $this->emSoporte->flush();

        } 
        catch (\Exception $ex) 
        {
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->guardarMantenimientoProgramado',
                                            $ex->getMessage(),
                                            $arrayParametro["strUsrCreacion"],
                                            $arrayParametro["strIpCreacion"]);
            
        }
        $this->emSoporte->getConnection()->commit();

    }

    /**
     * funcion que llama a repositorio para grabar afectados 
     * de casos backbone en fallas masivas 
     * 
     * @author Pedro Velez <psvelez@telconet.ec>
     * @version 1.0 - 20/04/2022
     */
    public function guardaNotificacionPush($arrayParametros)
    {
        $arrayNotifriccion = array();
        try 
        {
            $arrayNotifriccion["intCasoId"]      = $arrayParametros["intCasoId"];
            $arrayNotifriccion["strCodEmpresa"]  = $arrayParametros["strCodEmpresa"];
            $arrayNotifriccion["strTipoProceso"] = $arrayParametros["strTipoProceso"];
            $arrayNotifriccion["strUserSession"] = $arrayParametros["strUserSession"];
            $arrayNotifriccion["strIpCreacion"]  = $arrayParametros["strIpCreacion"];

            $arrayRespuesta = $this->emInfraestructura->getRepository('schemaBundle:InfoProcesoMasivoCab')
                              ->grabarAfectadosNotificaPush($arrayParametros);
            
            if($arrayRespuesta["status"]=="Error")
            {
                $this->serviceUtil->insertError('Telcos+',
                                                'SoporteService->guardaNotificacionPush',
                                                $arrayRespuesta["message"],
                                                $arrayParametros["strUserSession"],
                                                $arrayParametros["strIpCreacion"]);
            }
            
        } 
        catch (\Exception $ex) 
        {
            $this->serviceUtil->insertError('Telcos+',
                                            'SoporteService->guardaNotificacionPush',
                                            $ex->getMessage(),
                                            $arrayParametros["strUserSession"],
                                            $arrayParametros["strIpCreacion"]);            
        }

    }
}
