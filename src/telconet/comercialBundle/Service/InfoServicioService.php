<?php

namespace telconet\comercialBundle\Service;

use Doctrine\ORM\OptimisticLockException;
use Symfony\Component\Config\Definition\Exception\Exception;
use Symfony\Component\HttpFoundation\JsonResponse;
use telconet\schemaBundle\Entity\AdmiTipoSolicitud;
use telconet\schemaBundle\Entity\AdmiProducto;
use telconet\schemaBundle\Entity\AdmiProductoCaracteristica;
use telconet\schemaBundle\Entity\AdmiSector;
use telconet\schemaBundle\Entity\InfoServicioTecnico;
use telconet\schemaBundle\Entity\InfoServicioHistorial;
use telconet\schemaBundle\Entity\InfoDetalle;
use telconet\schemaBundle\Entity\InfoDetalleAsignacion;
use telconet\schemaBundle\Entity\InfoDetalleSolHist;
use telconet\schemaBundle\Entity\InfoDetalleSolicitud;
use telconet\schemaBundle\Entity\InfoDetalleHistorial;
use telconet\schemaBundle\Entity\InfoTareaSeguimiento;
use telconet\schemaBundle\Entity\InfoOrdenTrabajo;
use telconet\schemaBundle\Entity\InfoPunto;
use telconet\schemaBundle\Entity\InfoIp;
use telconet\schemaBundle\Entity\InfoServicio;
use telconet\schemaBundle\Entity\InfoServicioComision;
use telconet\schemaBundle\Entity\InfoServicioProdCaract;
use telconet\schemaBundle\Entity\InfoServicioPlanCaract;
use telconet\schemaBundle\Entity\InfoEnlace;
use telconet\schemaBundle\Entity\InfoServicioCaracteristica;
use telconet\schemaBundle\Entity\InfoDetalleSolCaract;
use telconet\tecnicoBundle\Service\InfoActivarPuertoService;
use telconet\tecnicoBundle\Service\InfoServicioTecnicoService;
use telconet\tecnicoBundle\Service\InfoConfirmarServicioService;
use telconet\schemaBundle\Entity\InfoElemento;
use telconet\schemaBundle\Entity\InfoDetalleElemento;
use telconet\tecnicoBundle\Service\InfoElementoService;
use telconet\planificacionBundle\Service\PlanificarService;
use telconet\schemaBundle\Entity\InfoPersonaEmpresaRolCarac;
use telconet\schemaBundle\Entity\InfoPuntoCaracteristica;
use Symfony\Component\HttpFoundation\Session\Session;
use Symfony\Component\HttpFoundation\Request;

use telconet\soporteBundle\Service\GestionPaqueteSoporteService;

use telconet\schemaBundle\Entity\InfoAdendum;
use telconet\schemaBundle\Entity\InfoSeguimientoServicio;

use telconet\schemaBundle\Entity\InfoPuntoFormaContacto;
use telconet\schemaBundle\Entity\InfoUbicacion;
use telconet\schemaBundle\Entity\InfoEmpresaElementoUbica;
use telconet\schemaBundle\Entity\InfoEmpresaElemento;
use telconet\schemaBundle\Entity\InfoHistorialElemento;

use telconet\schemaBundle\Entity\InfoCriterioAfectado;
use telconet\schemaBundle\Entity\InfoParteAfectada;

use telconet\schemaBundle\Entity\InfoDocumento;
use telconet\schemaBundle\Entity\InfoComunicacion;
use telconet\schemaBundle\Entity\InfoDocumentoComunicacion;

use \PHPExcel;
use \PHPExcel_Worksheet_PageSetup;
use \PHPExcel_CachedObjectStorageFactory;
use \PHPExcel_Settings;
use \PHPExcel_Cell_DataType;

use Symfony\Component\HttpFoundation\Response;

class InfoServicioService {
    
    const STR_TOTAL                 = 'total';
    const STR_ENCONTRADOS           = 'encontrados';
    const STR_ID_ELEMENTO_CONECTOR  = 'idElementoConector';

    /**
     * @var \Doctrine\ORM\EntityManager
     */
    private $emcom;
    /**
     * @var \Doctrine\ORM\EntityManager
     */
    private $eminf;
    /**
     * @var \Doctrine\ORM\EntityManager
     */
    private $emgen;
    /**
     * @var \Doctrine\ORM\EntityManager
     */
    private $emfinan;
    /**
     * @var \Symfony\Bundle\TwigBundle\TwigEngine
     */
    private $templating;
    /**
     * @var \telconet\schemaBundle\Service\ValidatorService
     */
    private $mailer;
    
    private $mailerSend;
    
    private $validator;
    
    private $activarService;
    
    private $servicioTecnico;
    
    private $servicioConfirmar;
    
    private $utilServicio;
    
    private $serviceInfoServicio;
    
    /**
     * @var \telconet\administracionBundle\Service\UtilidadesService
     */
    private $serviceUtilidades;
    /**
     * @var \telconet\comercialBundle\Service\ComercialService
     */
    private $serviceComercial;    
    /**
     * @var \telconet\soporteBundle\Service\EnvioPlantillaService
     */
    private $serviceEnvioPlantilla;
    
    /**
     * @var \telconet\tecnicoBundle\Service\InfoServicioTecnicoService
     */
    private $serviceGeneral;
    
    /**
     * @var \telconet\soporteBundle\Service\SoporteService
     */
    private $serviceSoporte;

    /**
     * @var \telconet\planificacionBundle\Service\PlanificarService
     */
    private $planificarService;

    /**
     * @var \telconet\soporteBundle\Service\GestionPaqueteSoporteService
     */    
    private $serviceGestionPaqueteSoporte;

    /**
     * @var \telconet\tecnicoBundle\Service\InfoElementoService
     */
    private $infoElementoService;

    private $intLongitudMaximaDescrFactura;
    
    private $serviceInfoCambiarPlan;
    /**
     * @var \Doctrine\ORM\EntityManager
     */
    private $emSoporte;
    /**
     * @var \Doctrine\ORM\EntityManager
     */
    private $emComunicacion;
    
    private $serviceCrypt;
    
    private $serviceFoxPremium;

    private $serviceSecurity;

    private $serviceSolicitudes;
        
    //Repository
    private $emCome;
    
    private $serviceInfoServicioHistorial;
    // Constantes
    const ESTADO_APROBADO  = 'Aprobado';
    const ESTADO_ACTIVO    = 'Activo';
    const FOXPREMIUM       = 'FOXPREMIUN';
    const PARAMOUNT        = 'PARAMOUNT';
    const NOGGIN           = 'NOGGIN';
    
    private $serviceLicenciasKaspersky;

    private $serviceTelcoCrm;

    /**
     * @var \Symfony\Component\DependencyInjection\ContainerInterface
     */
    private $container;
    
    /**
     * @var \telconet\comercial\Service\InfoPersonaFormaContacto
     */
    private $servicePersFormCont;

    /**
     * @var \telconet\comercial\Service\InfoPunto
     */
    private $serviceInfoPunto;
    
    /**
     * @var \telconet\comercial\Service\ConvertirOrdenTrabajo
     */    
    private $serviceCovertirOt;

    private $servicePromociones;
    
    private $serviceRestClient;

    private $strUrlValidaProdAdicionalMs;

    /**
     * @var \telconet\comercial\Service\InfoContrato
     */  
    private $serviceInfoContrato;

    /**
     * Documentación para el método 'setDependencies'
     *
     * Método inicial que inyecta las dependencias usadas en el service 'InfoServicioService'
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 03-05-2018 - Se obtiene el service de soporte para realizar la creación de tarea y envío de notificación 
     *                           para un servicio IP Small Business 
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.2 05-12-2017 - Se agrega el parámetro comercial.longitud_maxima_descripcion_factura para validar y truncar de ser necesaria
     *                           la descripcion de la factura cuando excede del limite permitid por SRI
     * 
     * @author Edgar Holguin <eholguin@telconet.ec>
     * @version 1.1 04-05-2017 - Se agrega el parámetro '$this->serviceComercial' el cual obtiene el service 'comercial.Comercial'
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 15-02-2017 - Se agrega el parámetro '$this->serviceUtilidades' el cual obtiene el service 'administracion.Utilidades'
     * 
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.2 22-06-2018 - Se agrega el parámetro '$this->serviceCrypt' el cual se encargara de encriptar el Password para servicios FOX_PREMIUM
     *  y $this->serviceFoxPremium para obtener Usuario y Pawword para Fox Premium
     * @since 1.0
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.3 28-02-2019 - Se agrega service InfoServicioTecnico por proyecto Traslado nuevos planes MD
     * @since 1.2
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.4 29-07-2019 - Se agrega serviceLicenciasKaspersky para transición de McAfee a Kaspersky
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.5 13-12-2019 - Se agrega serviceInfoServicioHistorial para registro de historial de servicio.
     * 
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 1.6 12-10-2020 - Se agrega emComercial para acceder al Repository de infoServicio.
     * 
     * @author José Candelario <jcandelario@telconet.ec>
     * @version 1.7 19-03-2021 - Se agrega serviceSecurity que será utilizado para lógica de promociones.
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.8 26-04-2022 - Se agrega servicePromociones que será utilizado para validar si tiene promociones.
     *
     * @author Emmanuel Fernando <emartillo@telconet.ec>
     * @version 1.9 25-08-2022 Se modifica la función para validar correctamente la existencia de un servicio 
     *                de Internet en los estados permitidos para ingresar el Producto PARAMOUNT+
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.9 21-07-2022 - Se agrega la variable strUrlObtenerFactibilidadMs para llamar al
     *                           microservicio donde se va a obtener la factibilidad de un servicio. 
     *                           Se agrega variable serviceTokenCas para generar token
     * 
     * @author Alex Arreaga <atarreaga@telconet.ec>
     * @version 2.0 08-12-2022 - Se agrega la variable strUrlValidaProdAdicionalMs para llamar al
     *                           microservicio donde se va a validar al momento de agregar un producto.
     * @author Alex Gómez <algomez@telconet.ec>
     * @version 2.1 03-09-2022 - Se agrega serviceInfoContrato que será utilizado para lógica de reingreso para servicios adicionales.
     * 
     * @author Andre Lazo <alazo@telconet.ec>
     * @version 2.1  04-05-2023 - Se agregan variables para el llamado de los microservicios servicePlantilla, serviceProceso
     */
    public function setDependencies(\Symfony\Component\DependencyInjection\ContainerInterface $container, 
                                    InfoActivarPuertoService $activarService,
                                    InfoServicioTecnicoService $servicioTecnico,
                                    InfoConfirmarServicioService $servicioConfirmar) 
    {
        $this->serviceCrypt            = $container->get('seguridad.Crypt');
        $this->serviceFoxPremium       = $container->get('tecnico.FoxPremium');            
        $this->emcom                   = $container->get('doctrine.orm.telconet_entity_manager');
        $this->emCome                  = $container->get('doctrine')->getManager('telconet');
        $this->emfinan                 = $container->get('doctrine.orm.telconet_financiero_entity_manager');
        $this->eminf                   = $container->get('doctrine.orm.telconet_infraestructura_entity_manager');
        $this->emgen                   = $container->get('doctrine')->getManager('telconet_general');
        $this->emInfraestructura       = $container->get('doctrine.orm.telconet_infraestructura_entity_manager');
        $this->templating              = $container->get('templating');       
        $this->mailer                  = $container->get('mailer');
        $this->mailerSend              = $container->getParameter('mailer_send');
        $this->validator               = $container->get('schema.Validator');
        $this->activarService          = $activarService;
        $this->servicioTecnico         = $servicioTecnico;
        $this->servicioConfirmar       = $servicioConfirmar;
        $this->utilServicio            = $container->get('schema.Util');
        $this->serviceUtilidades       = $container->get('administracion.Utilidades');
        $this->serviceComercial        = $container->get('comercial.Comercial');
        $this->serviceEnvioPlantilla   = $container->get('soporte.EnvioPlantilla');
        $this->serviceInfoCambiarPlan  = $container->get('tecnico.InfoCambiarPlan');
        $this->serviceSoporte          = $container->get('soporte.SoporteService');
        $this->serviceGeneral          = $container->get('tecnico.InfoServicioTecnico');
        $this->serviceInfoServicio     = $container->get('comercial.infoservicio');
        $this->planificarService       = $container->get('planificacion.planificar');
        $this->infoElementoService     = $container->get('tecnico.infoelemento');
        $this->emSoporte               = $container->get('doctrine')->getManager('telconet_soporte');
        $this->emComunicacion          = $container->get('doctrine')->getManager('telconet_comunicacion');
        $this->servicePersFormCont     = $container->get('comercial.InfoPersonaFormaContacto');
        $this->serviceInfoPunto        = $container->get('comercial.InfoPunto');
        $this->serviceCliente             = $container->get('comercial.Cliente');
        $this->intLongitudMaximaDescrFactura = $container->getParameter('comercial.longitud_maxima_descripcion_factura');
        $this->serviceLicenciasKaspersky     = $container->get('tecnico.LicenciasKaspersky');
        $this->container                     = $container;
        $this->serviceInfoServicioHistorial  = $container->get('comercial.InfoServicioHistorial');
        $this->serviceTelcoCrm                = $container->get('comercial.ComercialCrm');        
        $this->serviceCovertirOt        = $container->get('comercial.ConvertirOrdenTrabajo');
        $this->serviceSolicitudes      = $container->get('comercial.Solicitudes');
        $this->serviceSecurity                 = $container->get('security.context');
        $this->emNaf                   = $container->get('doctrine.orm.telconet_naf_entity_manager');
        $this->servicePromociones      = $container->get('tecnico.Promociones');
        $this->serviceRestClient            = $container->get('schema.RestClient');
        $this->strUrlObtenerFactibilidadMs  = $container->getParameter('ws_ms_obtenerFactibilidad_url');
        $this->serviceTokenCas              = $container->get('seguridad.TokenCas');
        $this->strUrlValidaProdAdicionalMs = $container->getParameter('ws_ms_validacionesProdAdicional_url');
        $this->serviceInfoContrato     = $container->get('comercial.InfoContrato');
        $this->serviceProceso                = $container->get('soporte.ProcesoService');
        $this->servicePlantilla              = $container->get('administracion.Plantilla'); 
        $this->serviceGestionPaqueteSoporte = $container->get('soporte.GestionPaqueteSoporte');
    }

    /**
     * Documentación para el método 'validarServicioPorEstadoServUm'.
     *
     * Método utilizado para validar:
     * - En el ingreso de un servicio nuevo valida que el punto posea servicio de internet en los estados definidos por parametro
     *   y con ultima milla definida a nivel de parametro
     *   Se parametrizan estado del servicio de internet y la UM permitida en la validación
     * @param array $arrayParametros [ 'strEmpresaCod'                => 'Código de la empresa en session',
     *                                 'strPrefijoEmpresa'            => 'Prefijo de la empresa en session',
     *                                 'intIdPtoCliente'              => 'Id del punto cliente en sessión',
     *                                 'strNombreEstadosInternet'     => 'Nombre del detalle que contiene los estados a buscar en los servicios',
     *                                 'strParametroValorUltimaMilla' => 'Nombre del detalle que contiene las UM a buscar en los servicios',
     *                                 'strParametroEstadosInternet'  => 'Nombre del parámetro a buscar en los servicios' ]
     *
     * @return array $arrayResultado[
     *                                'strExisteServicioInternet'     => 'Parámetro que indicará si existe algún servicio de internet contratado'
     *                              ]
     *
     * @throws \Exception
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0 11-09-2018
     */
    public function validarServicioPorEstadoServUm($arrayParametros)
	{
        $strEmpresaCod               = ( isset($arrayParametros['strEmpresaCod']) && !empty($arrayParametros['strEmpresaCod']) ) 
                                        ? $arrayParametros['strEmpresaCod'] : '';
        $strPrefijoEmpresa           = ( isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) ) 
                                        ? $arrayParametros['strPrefijoEmpresa'] : '';
        $intIdPtoCliente             = ( isset($arrayParametros['intIdPtoCliente']) && !empty($arrayParametros['intIdPtoCliente']) )
                                        ? $arrayParametros['intIdPtoCliente'] : 0;
        $strNombreEstadosInternet    = (isset($arrayParametros['strNombreEstadosInternet']) && !empty($arrayParametros['strNombreEstadosInternet']))
                                        ? $arrayParametros['strNombreEstadosInternet'] : 'ESTADOS_INTERNET';
        $strParametroEstadosInternet = ( isset($arrayParametros['strParametroEstadosInternet']) 
                                         && !empty($arrayParametros['strParametroEstadosInternet']) )
                                        ? $arrayParametros['strParametroEstadosInternet'] : 'estadosServicios';
        $strParametroValorUltimaMilla = ( isset($arrayParametros['strParametroValorUltimaMilla']) 
                                         && !empty($arrayParametros['strParametroValorUltimaMilla']) )
                                        ? $arrayParametros['strParametroValorUltimaMilla'] : '';        
        $arrayResultado              = array('strExisteServicioInternet' => 'S');

        try
        {
            if( !empty($strEmpresaCod) && !empty($strPrefijoEmpresa) && !empty($intIdPtoCliente) 
                && !empty($strNombreEstadosInternet) && !empty($strParametroEstadosInternet) && !empty($strParametroValorUltimaMilla))
            {
                //Obtengo los estados de INTERNET válidos para la generación de la orden de trabajo de servicios
                $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')->get('INFO_SERVICIO', 
                                                                                                        'COMERCIAL', 
                                                                                                        'ACTIVACION_SERVICIO', 
                                                                                                        '', 
                                                                                                        $strNombreEstadosInternet, 
                                                                                                        '', 
                                                                                                        '', 
                                                                                                        '', 
                                                                                                        '', 
                                                                                                        $strEmpresaCod);

                if( !empty($arrayParametrosDet) )
                {
                    $arrayEstadosInternet = array();
                    foreach( $arrayParametrosDet as $arrayParametro )
                    {
                        $arrayEstadosInternet[] = ( isset($arrayParametro['valor2']) && !empty($arrayParametro['valor2']) )
                                                  ? trim($arrayParametro['valor2']) : '';
                    }
                    if( !empty($arrayEstadosInternet) )
                    {
                        $arrayNombreTecnicoParametrizable = array();
                        $arrayClasificacionParametrizable = array();
                        $arrayParametrizacionInicial      = array('strNombreParametroCab' => 'INFO_SERVICIO',
                                                                  'strModulo'             => 'COMERCIAL',
                                                                  'strProceso'            => 'ACTIVACION_SERVICIO');

                        if( !empty($strPrefijoEmpresa) && $strPrefijoEmpresa == "MD" )
                        {
                            $arrayNombreTecnicoParametrizable                        = $arrayParametrizacionInicial;
                            $arrayNombreTecnicoParametrizable['strValor1']           = 'NOMBRE_TECNICO';
                            $arrayNombreTecnicoParametrizable['strValorUltimaMilla'] = $strParametroValorUltimaMilla;
                        }
                        else
                        {
                            if( !empty($strPrefijoEmpresa) && $strPrefijoEmpresa == "TN" )
                            {
                                $arrayClasificacionParametrizable              = $arrayParametrizacionInicial;
                                $arrayClasificacionParametrizable['strValor1'] = 'CLASIFICACION';
                            }
                        }

                        $arrayPametrosServicios         = array($strParametroEstadosInternet       => $arrayEstadosInternet, 
                                                                'productoInternetPorLogin'         => 'S',
                                                                'estadoActivo'                     => 'Activo',
                                                                'empresaCod'                       => $strEmpresaCod,
                                                                'intIdPuntoCliente'                => $intIdPtoCliente,
                                                                'arrayNombreTecnicoParametrizable' => $arrayNombreTecnicoParametrizable,
                                                                'arrayClasificacionParametrizable' => $arrayClasificacionParametrizable);
                        
                        $arrayConsultaServiciosInternet = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                                      ->getServiciosByCriterios($arrayPametrosServicios);

                        $arrayResultado['strExisteServicioInternet'] = ( isset($arrayConsultaServiciosInternet['total']) 
                                                                         && !empty($arrayConsultaServiciosInternet['total']) 
                                                                         && $arrayConsultaServiciosInternet['total'] > 0 ) ? 'S' : 'N';
                    }//( !empty($arrayEstadosInternet) )
                }//( !empty($arrayParametrosDet) )                                               
            }
            else
            {
                throw new \Exception('No se enviaron los parámetros adecuados para validar el ingreso del servicio');
            }//( !empty($strEmpresaCod) && !empty($strPrefijoEmpresa) && !empty($intIdPtoCliente) 
             //   && !empty($strNombreEstadosInternet) && !empty($strParametroEstadosInternet) && !empty($strParametroValorUltimaMilla))
        }
        catch( \Exception $e )
        {
            throw ($e);
        }
    
        return $arrayResultado;
    }
    
    /**
     * Documentación para el método 'validarServiciosVentaExterna'.
     *
     * Método utilizado para validar los siguiente:
     * - Si existen servicios de venta externa (ES_VENTA: 'E') en estado 'Pre-servicio'.
     * - Si existe al menos un servicio de Internet en estado diferente de los ingresados en el parámetro 'INFO_SERVICIO'
     *
     * @param array $arrayParametros [ 'strEmpresaCod'               => 'Código de la empresa en session',
     *                                 'strPrefijoEmpresa'           => 'Prefijo de la empresa en session',
     *                                 'intIdPtoCliente'             => 'Id del punto cliente en sessión',
     *                                 'strNombreEstadosInternet'    => 'Nombre del detalle que contiene los estados a buscar en los servicios',
     *                                 'strParametroEstadosInternet' => 'Nombre del parámetro a buscar en los servicios' ]
     * 
     * @return array $arrayResultado[ 'strExistenServiciosVentaExterna' => 'Parámetro que indicará si existen servicios de venta externa en estado 
     *                                                                      Pre-servicio'
     *                                'strExisteServicioInternet'       => 'Parámetro que indicará si existe algún servicio de internet contratado' ]
     
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 17-02-2017
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 27-02-2017 - Se agregan los parámetros 'strNombreEstadosInternet' y 'strParametroEstadosInternet' para poder buscar los servicios
     *                           en los estados respectivos de acuerdo a los parámetros enviados a la función
     */
	public function validarServiciosVentaExterna($arrayParametros)
	{
        $strEmpresaCod               = ( isset($arrayParametros['strEmpresaCod']) && !empty($arrayParametros['strEmpresaCod']) ) 
                                        ? $arrayParametros['strEmpresaCod'] : '';
        $strPrefijoEmpresa           = ( isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) ) 
                                        ? $arrayParametros['strPrefijoEmpresa'] : '';
        $intIdPtoCliente             = ( isset($arrayParametros['intIdPtoCliente']) && !empty($arrayParametros['intIdPtoCliente']) )
                                        ? $arrayParametros['intIdPtoCliente'] : 0;
        $strNombreEstadosInternet    = (isset($arrayParametros['strNombreEstadosInternet']) && !empty($arrayParametros['strNombreEstadosInternet']))
                                        ? $arrayParametros['strNombreEstadosInternet'] : 'ESTADOS_INTERNET';
        $strParametroEstadosInternet = ( isset($arrayParametros['strParametroEstadosInternet']) 
                                         && !empty($arrayParametros['strParametroEstadosInternet']) )
                                        ? $arrayParametros['strParametroEstadosInternet'] : 'estadosServicios';
        $arrayResultado              = array('strExisteServicioInternet' => 'N', 'strExistenServiciosVentaExterna' => 'N');

        try
        {
            if( !empty($strEmpresaCod) && !empty($strPrefijoEmpresa) && !empty($intIdPtoCliente) && !empty($strNombreEstadosInternet)
                && !empty($strParametroEstadosInternet) )
            {
                //Obtengo los estados de INTERNET válidos para la generación de la orden de trabajo 
                $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')->get('INFO_SERVICIO', 
                                                                                                        'COMERCIAL', 
                                                                                                        'ACTIVACION_SERVICIO', 
                                                                                                        '', 
                                                                                                        $strNombreEstadosInternet, 
                                                                                                        '', 
                                                                                                        '', 
                                                                                                        '', 
                                                                                                        '', 
                                                                                                        $strEmpresaCod);

                if( !empty($arrayParametrosDet) )
                {
                    $arrayEstadosInternet = array();

                    foreach( $arrayParametrosDet as $arrayParametro )
                    {
                        $arrayEstadosInternet[] = ( isset($arrayParametro['valor2']) && !empty($arrayParametro['valor2']) )
                                                  ? trim($arrayParametro['valor2']) : '';
                    }//foreach( $arrayParametrosDet as $arrayParametro )

                    if( !empty($arrayEstadosInternet) )
                    {
                        $arrayNombreTecnicoParametrizable = array();
                        $arrayClasificacionParametrizable = array();
                        $arrayParametrizacionInicial      = array('strNombreParametroCab' => 'INFO_SERVICIO',
                                                                  'strModulo'             => 'COMERCIAL',
                                                                  'strProceso'            => 'ACTIVACION_SERVICIO');

                        if( !empty($strPrefijoEmpresa) && $strPrefijoEmpresa == "MD" )
                        {
                            $arrayNombreTecnicoParametrizable              = $arrayParametrizacionInicial;
                            $arrayNombreTecnicoParametrizable['strValor1'] = 'NOMBRE_TECNICO';
                        }//( !empty($strPrefijoEmpresa) && $strPrefijoEmpresa == "MD" )
                        elseif( !empty($strPrefijoEmpresa) && $strPrefijoEmpresa == "TN" )
                        {
                            $arrayClasificacionParametrizable              = $arrayParametrizacionInicial;
                            $arrayClasificacionParametrizable['strValor1'] = 'CLASIFICACION';
                        }//( !empty($strPrefijoEmpresa) && $strPrefijoEmpresa == "TN" )

                        $arrayPametrosServicios         = array($strParametroEstadosInternet       => $arrayEstadosInternet, 
                                                                'productoInternetPorLogin'         => 'S',
                                                                'estadoActivo'                     => 'Activo',
                                                                'empresaCod'                       => $strEmpresaCod,
                                                                'intIdPuntoCliente'                => $intIdPtoCliente,
                                                                'arrayNombreTecnicoParametrizable' => $arrayNombreTecnicoParametrizable,
                                                                'arrayClasificacionParametrizable' => $arrayClasificacionParametrizable);
                        $arrayConsultaServiciosInternet = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                                      ->getServiciosByCriterios($arrayPametrosServicios);

                        $arrayResultado['strExisteServicioInternet'] = ( isset($arrayConsultaServiciosInternet['total']) 
                                                                         && !empty($arrayConsultaServiciosInternet['total']) 
                                                                         && $arrayConsultaServiciosInternet['total'] > 0 ) ? 'S' : 'N';
                    }//( !empty($arrayEstadosInternet) )
                }//( !empty($arrayParametrosDet) )
                
                
                $objInfoPuntoCliente = $this->emcom->getRepository('schemaBundle:InfoPunto')->findOneById($intIdPtoCliente);
                
                if( !is_object($objInfoPuntoCliente) )
                {
                    throw new \Exception('No se encontró el punto para buscar los servicios de venta externa en estado Pre-servicio');
                }//( is_object($objInfoPuntoCliente) )

                $arrayServiciosVentaExterna = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                          ->findBy( array('esVenta' => 'E', 
                                                                          'estado'  => 'Pre-servicio', 
                                                                          'puntoId' => $objInfoPuntoCliente) );

                $arrayResultado['strExistenServiciosVentaExterna'] = !empty($arrayServiciosVentaExterna) ? 'S' : 'N';
            }
            else
            {
                throw new \Exception('No se enviaron los parámetros adecuados para validar los servicios de venta externa');
            }//( !empty($strEmpresaCod) && !empty($strPrefijoEmpresa) && !empty($intIdPtoCliente) && !empty($strNombreEstadosInternet)...
        }
        catch( \Exception $e )
        {
            throw ($e);
        }
    
        return $arrayResultado;
    }
     
    /**
     * Devuelve todos los Tipos de Medio (Ultima Milla)
     * @param string $idKey key a usar en el array para el id del tipo de medio
     * @param string $nombreKey key a usar en el array para el nombre del tipo de medio
     * @return array de arrays id/nombre
     * @see \telconet\schemaBundle\Entity\AdmiTipoMedio
     */
    public function obtenerTiposMedio($idKey = 'id', $nombreKey = 'nombre') {
        $list = $this->emcom->getRepository('schemaBundle:AdmiTipoMedio')->findAll();
        $arreglo = array();
        /* @var $value \telconet\schemaBundle\Entity\AdmiTipoMedio */
        foreach ($list as $value):
        $arreglo[] = array($idKey => $value->getId(), $nombreKey => $value->getNombreTipoMedio());
        endforeach;
        return $arreglo;
    }

    /**
     * Devuelve una lista de InfoPlanCab en estado Activo, de la empresa dada,
     * aplicables al punto dado
     * @param string $codEmpresa codigo de la empresa
     * @param integer $idPunto id del punto
     * @return array
     */
    public function obtenerPlanesAplicablesPunto($codEmpresa, $idPunto)
    {
        // obtener punto
        /* @var $entityPunto \telconet\schemaBundle\Entity\InfoPunto */
        $entityPunto = $this->emcom->getRepository('schemaBundle:InfoPunto')->find($idPunto);
        // buscar contrato, se encontrara si es Cliente
        /* @var $entityContrato \telconet\schemaBundle\Entity\InfoContrato */
        $entityContrato = $this->emcom->getRepository('schemaBundle:InfoContrato')->findContratoActivoPorPersonaEmpresaRol($entityPunto->getPersonaEmpresaRolId()->getId());
        if (!empty($entityContrato))
        {
            // buscar forma pago del contrato, se encontrara si es cuenta bancaria
            /* @var $entityContratoFormaPago \telconet\schemaBundle\Entity\InfoContratoFormaPago */
            $entityContratoFormaPago = $this->emcom->getRepository('schemaBundle:InfoContratoFormaPago')->findPorContratoIdYEstado($entityContrato->getId(), 'Activo');
            if (!empty($entityContratoFormaPago))
            {
                return $this->obtenerPlanesAplicables($codEmpresa,
                        $entityPunto->getTipoNegocioId()->getId(),
                        $entityContrato->getFormaPagoId()->getId(),
                        ($entityContratoFormaPago->getTipoCuentaId() ? $entityContratoFormaPago->getTipoCuentaId()->getId() : null),
                        ($entityContratoFormaPago->getBancoTipoCuentaId() ? $entityContratoFormaPago->getBancoTipoCuentaId()->getId() : null)
                );
            }
            else
            {
                return $this->obtenerPlanesAplicables($codEmpresa,
                        $entityPunto->getTipoNegocioId()->getId(),
                        $entityContrato->getFormaPagoId()->getId(), null, null
                );
            }
        }
        else
        {
            // buscar forma pago de la persona, se encontrara si es Pre-cliente de una empresa que lo requiera (prospecto)
            /* @var $entityPersonaEmpFormaPago \telconet\schemaBundle\Entity\InfoPersonaEmpFormaPago */
            $entityPersonaEmpFormaPago = $this->emcom->getRepository('schemaBundle:InfoPersonaEmpFormaPago')->findOneBy(
                    array('personaEmpresaRolId' => $entityPunto->getPersonaEmpresaRolId()->getId(), 'estado' => 'Activo'));
            if (!empty($entityPersonaEmpFormaPago))
            {
                return $this->obtenerPlanesAplicables($codEmpresa,
                        $entityPunto->getTipoNegocioId()->getId(),
                        $entityPersonaEmpFormaPago->getFormaPagoId()->getId(),
                        ($entityPersonaEmpFormaPago->getTipoCuentaId() ? $entityPersonaEmpFormaPago->getTipoCuentaId()->getId() : null),
                        ($entityPersonaEmpFormaPago->getBancoTipoCuentaId() ? $entityPersonaEmpFormaPago->getBancoTipoCuentaId()->getId() : null)
                );
            }
            else
            {
                return $this->obtenerPlanesAplicables($codEmpresa,
                        $entityPunto->getTipoNegocioId()->getId(),
                        null, null, null);
            }
        }
    }
    
    /**
     * Devuelve una lista de InfoPlanCab en estado Activo, de la empresa dada,
     * aplicables a las condiciones dadas
     * @param string $codEmpresa codigo de la empresa
     * @param integer $idTipoNegocio id del tipo negocio
     * @param integer $idFormaPago id de la forma pago
     * @param integer $idTipoCuenta id del tipo cuenta
     * @param integer $idBancoTipoCuenta id del banco tipo cuenta
     * @return array
     */
    public function obtenerPlanesAplicables($codEmpresa, $idTipoNegocio, $idFormaPago, $idTipoCuenta, $idBancoTipoCuenta)
    {
        if (empty($codEmpresa) || (is_null($idTipoNegocio) && is_null($idFormaPago) && is_null($idTipoCuenta) && is_null($idBancoTipoCuenta)))
        {
            return array();
        }
        $estado = 'Activo';
    
        //informacion del pto cliente
        //$nombre_tipo_negocio=$request->request->get('nombre');
        //$nombre_tipo_negocio_no=$request->request->get('nombre_no');
//         $tipo_negocio=$this->emcom->getRepository('schemaBundle:AdmiTipoNegocio')->find($idTipoNegocio);
//         if(strtoupper(trim($tipo_negocio->getNombreTipoNegocio()))=='HOME')
//         {
//             $nombre_tipo_negocio=$tipo_negocio->getNombreTipoNegocio();
//             $nombre_tipo_negocio_no='HOME';
//         }elseif(strtoupper(trim($tipo_negocio->getNombreTipoNegocio()))=='PYME')
//         {
//             $nombre_tipo_negocio=$tipo_negocio->getNombreTipoNegocio();
//             $nombre_tipo_negocio_no='PYME';
//         }elseif(strtoupper(trim($tipo_negocio->getNombreTipoNegocio()))=='ISP')
//         {
//             $nombre_tipo_negocio=$tipo_negocio->getNombreTipoNegocio();
//             $nombre_tipo_negocio_no='UM';
//         }else{
//             $nombre_tipo_negocio=$tipo_negocio->getNombreTipoNegocio();
//             $nombre_tipo_negocio_no='';
//         }
        
        /* @var $repoInfoPlanCab \telconet\schemaBundle\Repository\InfoPlanCabRepository */
        $repoInfoPlanCab = $this->emcom->getRepository('schemaBundle:InfoPlanCab');
        //$listado_planes = $this->emcom->getRepository('schemaBundle:InfoPlanCab')->findListarPlanesPorEmpresaYEstado($estado,$empresa);
        //$listado_planes = $repoInfoPlanCab->findListarPlanesPorNombreNegocio($estado,$nombre_tipo_negocio,$nombre_tipo_negocio_no,$codEmpresa);
        
        $listado_planes = $repoInfoPlanCab->findByCondiciones($codEmpresa, $estado, $idTipoNegocio, $idFormaPago, $idTipoCuenta, $idBancoTipoCuenta, null);
        
        return $listado_planes;
    }
    
    
    /**
     * Metodo obtenerPlanInformacionDetalles
     * 
     * Obtiene el impuesto 'Activo' de los productos
     * 
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.1 23-05-2016 - Se cambia para verificar el impuesto activo del plan
     * @since 1.0
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.2 18-07-2017
     * Se obtiene si es enlace o no cuando el tipo de respuesta es "Información"
     * Se eliminan líneas duplicadas y variables no utilizadas.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.3 04-08-2017
     * Se corrige la verificación de que el plan contenga productos de tipo es_enlace = 'SI'/'NO'
     * 
     * @author Robinson Salgado <adominguez@telconet.ec>
     * @version 1.4 10-08-2017
     * Parametro strNombreTecnico para obtener nombre tecnico del producto
     * 
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 2.0 26-12-2018 - Se realizan cambios para que se considere el impuesto ITBMS para Panama.
     */
    public function obtenerPlanInformacionDetalles( $idPlan, 
                                                    $isInformacion = FALSE, 
                                                    $isDetalles = FALSE, 
                                                    $keyIdProd = 'productoid',
                                                    $keyNombreProd = 'nombreProducto', 
                                                    $keyCantidad = 'cantidad',
                                                    $strNombreTecnico = 'nombreTecnico')
    {
		$prorratea = "S";

        // Obtener el descuento a nivel de cabecera que es el existente
        if ($isInformacion)
        {
            $cabecera_plan = $this->emcom->getRepository('schemaBundle:InfoPlanCab')->find($idPlan);
            if($cabecera_plan->getIva()=="S")
			{
                $objInfoEmpresaGrupo= $this->emcom->getRepository('schemaBundle:InfoEmpresaGrupo')->find($cabecera_plan->getEmpresaCod());
                if(!is_object($objInfoEmpresaGrupo))
                {
                     throw new \Exception("No se pudo encontrar la Empresa en sesion");
                }
                if($objInfoEmpresaGrupo->getPrefijo()=='TNP')
                {                    
                    $objAdmiImpuesto = $this->emgen->getRepository('schemaBundle:AdmiImpuesto')
                                                   ->findOneBy( array('tipoImpuesto' => 'ITBMS', 'estado' => 'Activo') );
                
				    $intTieneImpuesto = $objAdmiImpuesto->getPorcentajeImpuesto();  
                }
                else
                {
				    //Obtengo el porcentaje asociado al IVA
                    $entityAdmiImpuesto = $this->emgen->getRepository('schemaBundle:AdmiImpuesto')
                                                      ->findOneBy( array('tipoImpuesto' => 'IVA', 'estado' => 'Activo') );
                
				    $intTieneImpuesto = $entityAdmiImpuesto->getPorcentajeImpuesto();
                }
			}
			else
            {
				$intTieneImpuesto = 0;
            }
        }
        
        $detalle_planes = $this->emcom->getRepository('schemaBundle:InfoPlanDet')->findByPlanIdYEstado($idPlan, 'Activo');
        if ($detalle_planes)
        {
            $acum_total  = 0;
            $listado     = array();
            $boolEnlace  = false;
            
            /* @var $detalle \telconet\schemaBundle\Entity\InfoPlanDet */
            foreach ($detalle_planes as $detalle)
            {
                $info_producto = $this->emcom->getRepository('schemaBundle:AdmiProducto')->find($detalle->getProductoId());
                if(!$info_producto)
                {
                    throw new \Exception("Entidad AdmiProducto no pudo ser encontrada");
                }
                
                if(!$boolEnlace)
                {
                    $boolEnlace  = $info_producto->getEsEnlace() == 'SI' ? true : false;
                }

                if ($isInformacion)
                {
                    $acum_total += ($detalle->getPrecioItem() * $detalle->getCantidadDetalle());

                    if($info_producto->getDescripcionProducto() == "OTROS")
                    {
                        $prorratea = "N";
                    }
                }
                
                if ($isDetalles)
                {
                    $listado[] = array($keyIdProd        => $info_producto->getId(),
                                       $keyNombreProd    => $info_producto->getDescripcionProducto(),
                                       $keyCantidad      => $detalle->getCantidadDetalle(),
                                       $strNombreTecnico => $info_producto->getNombreTecnico());
                }
            }
            
            $strEsEnlace = $boolEnlace ? 'SI' : 'NO';
            
            if ($isInformacion && $isDetalles)
            {
                return array('precio'        => $acum_total,
                             'descuento'     => $cabecera_plan->getDescuentoPlan(),
                             'tipoOrden'     => 'MAN',
                             'tieneImpuesto' =>$intTieneImpuesto,
                             'listado'       => $listado,
                             'prorratea'     => $prorratea,
                             'tipo'          => 'PL',
                             'esEnlace'      => $strEsEnlace);
            }
            else if ($isInformacion)
            {
                return array('precio'        => $acum_total,
                             'tieneImpuesto' =>$intTieneImpuesto,
                             'descuento'     => $cabecera_plan->getDescuentoPlan(),
                             'tipoOrden'     => 'MAN',
                             'prorratea'     => $prorratea,
                             'tipo'          => 'PL',
                             'esEnlace'      => $strEsEnlace);
            }
            else if ($isDetalles)
            {
                return $listado;
            }
        }
        return array();
    }
    
    /**
     * Devuelve los productos activos de la empresa dada
     * 
     * Actualizacion: Se recibe parametro modulo 
     * se envia dicho parametro a 
     * funcion emcom->getRepository('schemaBundle:AdmiProducto')->findPorEmpresaYEstado,
     *  esto es para poder cargar los productos segun el modulo Comercial/Otros o Financiero.
     * Si no recibe modulo por parametro el default sera 'Comercial'
     * @author Andres Montero <amontero@telconet.ec>
     * @version 1.1 21-06-2016
     *
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 1.2 17-09-2019 - Se agrega un nuevo parámetro para obtener los productos de acuerdo al tipo de red(MPLS/GPON).
     *                           Adicional se modifica la función con los estandares, manteniendo la lógica anterior.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 20-05-2021 - Se utiliza un arreglo de parámetros la llamada del método de la consulta de productos
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.4 19-07-2021 - Se valida tipo red por deafult MPLS
     *
     * @param array $arrayParametro [
     *                                  strCodEmpresa,
     *                                  strModulo,
     *                                  strTipoRed
     *                              ]
     *
     * @return array
     * @see \telconet\schemaBundle\Entity\AdmiProducto
     */
    public function obtenerProductos($arrayParametro)
    {
        $strCodEmpresa = isset($arrayParametro['strCodEmpresa']) && !empty($arrayParametro['strCodEmpresa'])
                         ? $arrayParametro['strCodEmpresa'] : "";
        $strModulo     = isset($arrayParametro['strModulo']) && !empty($arrayParametro['strModulo'])
                         ? $arrayParametro['strModulo'] : "Comercial";
        $strTipoRed    = isset($arrayParametro['strTipoRed']) && !empty($arrayParametro['strTipoRed'])
                         ? $arrayParametro['strTipoRed'] : "MPLS";
        if(empty($strCodEmpresa))
        {
            return array();
        }
        $strEstado             = 'Activo';
        $arrayListadoProductos = $this->emcom->getRepository('schemaBundle:AdmiProducto')->findPorEmpresaYEstado($strCodEmpresa, 
                                                                                                                 $strEstado,
                                                                                                                 $strModulo,
                                                                                                                 $strTipoRed);
        return $arrayListadoProductos;
    }

    /**
     * Devuelve las caracteristicas comerciales activas del producto dado
     * @param integer $idProducto
     * @param string $idKey key a usar en el array para el id del producto caracteristica
     * @param string $descripcionKey key a usar en el array para la descripcion del producto caracteristica
     * @return array de arrays id/descripcion
     * @see \telconet\schemaBundle\Entity\AdmiProductoCaracteristica
     */
    public function obtenerProductoCaracteristicasComerciales($idProducto, $idKey = 'id', $descripcionKey = 'descripcion')
    {
        if (!$idProducto)
        {
            return array();
        }
        $estado = 'Activo';
        /* @var $repoAdmiProductoCaracteristica \telconet\schemaBundle\Repository\AdmiProductoCaracteristicaRepository */
        $repoAdmiProductoCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica');
        $list = $repoAdmiProductoCaracteristica->findByProductoIdyEstado($idProducto, $estado);
        $arreglo = array();
        /* @var $value \telconet\schemaBundle\Entity\AdmiProductoCaracteristica */
        foreach ($list as $value):
        $arreglo[] = array($idKey => $value->getId(), $descripcionKey => $value->getCaracteristicaId()->getDescripcionCaracteristica());
        endforeach;
        return $arreglo;
    }

    /**
     * Devuelve las caracteristicas tecnicas activas del producto dado
     * @param integer $idProducto
     * @param string $idKey key a usar en el array para el id del producto caracteristica
     * @param string $descripcionKey key a usar en el array para la descripcion del producto caracteristica
     * @return array de arrays id/descripcion
     * @see \telconet\schemaBundle\Entity\AdmiProductoCaracteristica
     */
    public function obtenerProductoCaracteristicasTecnicas($idProducto, $idKey = 'id', $descripcionKey = 'descripcion')
    {
        if (!$idProducto)
        {
            return array();
        }
        $estado = 'Activo';
        /* @var $repoAdmiProductoCaracteristica \telconet\schemaBundle\Repository\AdmiProductoCaracteristicaRepository */
        $repoAdmiProductoCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica');
        $list = $repoAdmiProductoCaracteristica->findByProductoIdyEstadoTecnico($idProducto, $estado);
        $arreglo = array();
        /* @var $value \telconet\schemaBundle\Entity\AdmiProductoCaracteristica */
        foreach ($list as $value):
        $arreglo[] = array($idKey => $value->getId(), $descripcionKey => $value->getCaracteristicaId()->getDescripcionCaracteristica());
        endforeach;
        return $arreglo;
    }

    /**
     * Crea uno o mas servicios para el punto dado
     *
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.1 20-05-2015 Se valida que la frecuencia sea obligatoria para evitar valores NULL
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 27-10-2015 Se agrega activación de servicios McAfee
     *
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.3 29-04-2016
     * Se permite insertar NULL en campo tipo_medio(Última Milla)
     *
     * @author Edgar Holguin <eholguin@telconet.ec>
     * @version 1.4 22-05-2016
     * Ingreso de servicio con nuevos campos para TN
     *
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.5 29-04-2016
     * Corrección de validación de frecuencias de Facturación.
     * Corrección de validación de Última Milla.
     *
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.6 28-06-2016
     * Para TN: Se define el Servicio y el Servicio_Historial como 'Activo' si el 'Estado_Inicial' del producto es 'Activo'.
     *
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.6 28-06-2016
     * Cambio de descripciones 'Principal' => 'PRINCIPAL', y 'Backup' => 'BACKUP'.
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.7 04-07-2016 - Se cambia la forma de guardar el precio de instalación para los servicios de TN. El cambio consiste en si el valor
     *                           de instalación pactado es mayor o igual que el valor de instalación del producto se guarda directamente el valor de
     *                           instalación pactado en el servicio, caso contrario se crea una SOLICITUD DE INSTALACION GRATIS con el valor a
     *                           descontar cuando la solicitud sea aprobada.
     *
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.8 14-07-2016
     * Se valida recibir el parámetro $ultimaMillaId para guardado de servicios únicos, cuando no se tiene se guarda la UM de cada servicio.
     * El campo "Meses Restantes" será igual a la "Frecuencia de Facturación".
     * Se obtiene el padre del facturación por defecto al que estará relacionado el servicio.
     *
     * @author Anabelle Penaherrera <apenaherrera@telconet.ec>
     * @version 1.9 01-08-2016
     * Se agrega ingreso de Vendedor por Servicio, opcion precargara el vendedor asignado al punto y permite escoger o cambiar
     * vendedor asignado al servicio, sera permitido para todas las empresa.
     *
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 2.0 15-08-2016
     * Se valida la inserción de un valor numérico(float) en el campo PRECIO_INSTALACION para evitar ingreso de valor VACÍO.
     *
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 2.1 07-09-2016
     * Solo para TN y si producto a agregar posee definido el estado inicial Activo, se verifica si Posee o no Contrato
     * Si Posee Contrato Activo es Cliente y se Procede realizar Activacion automatica del servicio y se genera historial
     * Si no Posee Contrato Activo es Prospecto y se procede a crear el servicio Pendiente para que se active en la
     * aprobacion del contrato y se genera historial
     *
     * @author Modificado: Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.2 03-10-2016 Se envía notificación de confirmación de servicio, cuando el servicio no requiere flujo
     *                         y la activación se realiza de manera automática
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 2.3 17-10-2016 - Se adiciona lógica para activar producto Office 365
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 2.4 01-12-2016 - Se crea producto NetlifeCloud en reemplazo del Office 365, se procede a cambiar el producto
     *
     * @author Anabelle Penaherrera <apenaherrera@telconet.ec>
     * @version 2.5 28-12-2016 - Se corrige Bug reportado por generación innecesaria de registros en característica Backup
     *
     * @author Edson Franco <efranco@telconet.ec>
     * @version 2.6 15-02-2016 - Se valida para los productos que si existe la característica 'VENTA_EXTERNA' asociada al producto se guarde en el
     *                           campo 'ES_VENTA' el valor de 'E'.
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 2.7 09-05-2017 - Se agrega informacion referente a la tercerizadora en caso que la ultima milla del Servicio nuevo sea TERCERIZADA
     * @author Edson Franco <efranco@telconet.ec>
     * @version 2.8 18-05-2017 - Para TN se almacena la plantilla de comisionistas a nivel del servicio.
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 2.8 25-05-2017 - Se valida que si es un enlace backup el que será creado, tomara de existir el padre de facturacion
     *                           relacionado con su enlace principal
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.9 09-06-2017 - Se elimina la validación por empresa para guardar el login del vendedor en la variable enviada, ya que no afecta
     *                           al crear servicios cuando se tiene plantilla de comisionistas, ya que el valor se sobreescribiría en caso de que el producto si tenga
     *                           asociada una plantilla.
     *
     * @author Andrés Montero <amontero@telconet.ec>
     * @version 3.0 11-07-2017 - Se agrega validación para la empresa Telconet Panamá al crear servicio si el producto
     *                           es enlace y tiene contrato Activo se crea servicio con estado Activo por lo contrario estado Factible.
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 3.1 13-09-2017 - Se agrega logica que soporte creacion de servicios en esquema de grupo/solucion agregando un secuencial
     *                           que ayude a identificar la agrupacion generada
     *
     * @author Ricardo Coello Quezada <rcoello@telconet.ec>
     * @version 3.2 24-01-2018 - Se agrega validacion para el producto 'INTERNET SMALL BUSINESS'. No debe generar solicitud de descuento automatica.
     *
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 3.3 21-01-2018 - Se implementa lógica para soportar el tipo orden CAMBIO TIPO MEDIO, se retorna el id_servicio creado recientemente.
     *
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 3.4 06-04-2018 - Se habilita campo precio de negociaciación y creación de solicitud de dcto para empresa Telconet Panamá.
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 3.5 19-04-2018 - Se implementa lógica para soportar soluciones multiples CORE y PREFERENCIALES y Edicion de Soluciones
     *
     * @param string $strCodEmpresa
     * @param integer $idOficina
     * @param integer|InfoPunto $entityPunto
     * @param \telconet\schemaBundle\Entity\AdmiRol $entityRol (nullable)
     * @param string $usrCreacion
     * @param string $clientIp
     * @param string $tipoOrden
     * @param integer $ultimaMillaId
     * @param array $servicios
     * @param array $session
     *
     * @version 3.0 04-04-2017 - Se valida si el plan tiene como característica FLUJO_PREPLANIFICACION_PLANIFICACION='SI'.
     *                           En caso de ser verdadera ésta condición, se crea la orden de trabajo y la solicitud de acuerdo al estado del
     *                           servicio de internet contratado.
     *                           Si el servicio de internet contratado se encuentra en estado 'Activo' o 'En Pruebas' se continúa con el flujo de
     *                           planificación.
     *                           Si el servicio de internet contratado se encuentra en estado 'In-Corte' se continúa con el flujo de preplanificación
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 3.5 03-05-2018 - Se agrega la creación de tarea y envío de notificación para un servicio IP Small Business
     *
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 3.6 21-06-2018 - Se agrega el ingreso de Caracteristricas para el servicio Fox Premium
     *
     * @author Allan Suárez <arsuarez@telconet.ec>
     * @version 3.7 24-07-2018 - Se valida ingreso de Servicios de Concentrador DC dentro de una solución
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 3.8 01-08-2018 - Se modifican los parámetros enviados a la función crearTareaYNotificacionIPSB
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 3.9 23-10-2018 - Se crea un solicitud de servicio y se envía una notificación a los subgerentes asociados a los vendedores y
     *                           al gerente, cuando se desee crear un servicio Small Business que necesite aprobación
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 4.0 09-11-2018 - Se agrega validación del objeto producto relacionado al servicio para poder obtener el nombre técnico del
     *                           producto Small Business que necesita aprobación
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 4.1 21-08-2018 - Se agrega el ingreso de Caracteristricas y validaciones para los servicio NETFIBER , APWIFI, NETHOME
     *
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 4.2 06-11-2018 - Se realizan cambios para el correcto funcionamiento de la opción para la empresa Telconet Panama, se habilita
     *                           ingreso de servicios por Paquete.
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 4.3 29-11-2018 Se crea solicitud de agregar equipo al crear un servicio Wifi Dual Band o Extender Dual Band
     *                         cuando el servicio con el plan de Internet ya se encuentra Activo
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 4.4 05-02-2019 Se modifica flujo de aprobación de Small Business y se lo agrega para producto TelcoHome
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 4.5 21-04-2019 - Se habilita campo precio de negociaciación y creación de solicitud de dcto para empresa Telconet Guatemala.
     *
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 4.6 08-05-2019 - Se habilita Flujo de Activación Automática de FOX Premium
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 4.7 09-05-2019 - Se consulta la cantidad de servicios factibles que sean del mismo tipo al enviado como parámetro, este cambio se
     *                           realiza por unos ajustes implementados en la herramienta de cambio tipo medio, la cual va permitir reutilizar la
     *                           misma UM de un servicio que ya se encuentre factible.
     *
     * @author José Álava <jialava@telconet.ec>
     * @version 4.8 06-06-2019 - Se envia parámetro con máquinas virtuales para agregar al pool de recursos en caso de existir
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 4.9 01-06-2019 - Se agrega el ingreso de Caracteristicas y tipo de enlace para los servicios SDWAN
     *                           (los enlaces Sdwan tendran un secuencial)
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 4.10 31-07-2019 - Se modifica el mensaje de activación exitosa o errónea del servicio I. PROTEGIDO MULTIPAID, ya que
     *                             se cambiarán de McAfee a Kaspersky.
     *  
     * @author Edgar Holgunín <eholguin@telconet.ec>
     * @version 4.11 20-07-2019 - Se agrega registro de log para TMC .
     *
     * @author Walther Joao Gaibor <wgaibor@telconet.ec>
     * @version 4.12 23-09-2019 - Se añade lógica para la instalación del producto TERCERIZADO FWA.
     * 
     * @author Edgar Pin Villavicencio <epin@telconet.ec>
     * @version 4.13
     * @since 25-09-2019 se agrega información del punto en la tabla InfoAdendum, para puntos y servicios adicionales MD
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 4.14 13-03-2020 - Se añade lógica para agregar marca activación simultánea con producto 
     *                            COU LINEAS TELEFONIA FIJA.
     * 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 4.15 02-05-2020 - Se agrega el envío del parámetro objProducto a la función crearTareaYNotificacionIPSB por reestructuración de
     *                             servicios Small Business. Además se elimina programación para IP TELCOHOME, puesto que es un producto erróneo
     *                             y que no tiene flujo definido
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 4.15 03-05-2020 - Se descarta al producto REEMBOLSO DE GASTOS de confirmación por correo.
     * 
     * @author Jose Bedon <jobedon@telconet.ec>
     * @version 4.16 09-05-2020 - Se confirma Servicio para activaciones de servicios KONIBIT para poder facturas parciales
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 4.17 13-04-2020 - Se añade validación para insertar caracteristica de cotización.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 5.0 19-06-2020 - Se agrega el llamado al micro-servicio de crear solución DC.
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 5.1 25-07-2020 - Se añade validación para insertar tarea para servicios de Seguridad Sdwan.
     * 
     * @author Kevin Baque <kbaque@telconet.ec>
     * @version 5.2 17-08-2020 - Se añade validación para insertar caracteristica de tipo de proyecto y 
     *                              se omite el cierre de cotización en TelcoCRM siendo reemplazado por una solicitud.
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 5.3 18-08-2020 - Se crea orden de trabajo si el producto es Cableado Estructurado. Se agrega en la tabla INFO_SERVICIO_PROD_CARACT
     *                           los departamentos que requieran trabajo
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 5.4 23-09-2020 - Se añade el proceso para obtener las referencias cuando el servicio
     *                           es preferencial(COMUNICACION) y es parte de una solucion DC
     * 
     * @author Kevin Baque <kbaque@telconet.ec>
     * @version 5.5 29-09-2020 - Se añade validación para insertar caracteristica de propuesta.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 5.6 23-09-2020 Se agrega validaciones para flujo de nuevo producto W + AP
     * 
     * @author Jonathan Mazón Sánchez <jmazon@telconet.ec>
     * @version 5.7 12-10-2020 - 
     * Se Realiza la creacion de los servicios de Paramount y Noggin
     * Se habilita Flujo de Activación Automática de Paramount y Noggin
     * Se habilita Flujo de PLAN para Paramount , Noggin, Foxpremium
     * Se Habilita el ingreso de producto adicional Paramount y Noggin como estado Pendiente cuando el Internet tiene estado diferente a Activo 
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 5.5 24-09-2020 - Se agrega el Producto FastCloud si el servicio a crear es DIRECTLINK MPLS
     * 
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 5.8 11-11-2020 - Se agrega un if al obtener la referencia del servicio preferencial(COMUNICACION)
     *                           por motivos que no esta validando cuando los datos llegan nulos.
     * 
     * @author Jonathan Mazón Sánchez <jmazon@telconet.ec>
     * @version 5.9 7-12-2020 - 
     * Se obtiene el valor de la caracteristica 'correo Electronico' para los productos Paramount y Noggin, para notificar.
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 6.0 10-02-2021 - Se agrega consulta para ingresar como característica Ip Privada si el producto que se esta creando
     *                           pertenece a red GPON.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 6.1 05-04-2021 Se agregan validaciones para permitir crear servicios Extenders para equipos V5
     * 
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 6.1 18-05-2021 - Se elimina restricción de solicitud de descuento para 'INTERNET SMALL BUSINESS'
     *                           por requerimiento de Erika Intriago.
     *                           Se elimina variable $boolEsIsbIpSb por quedar sin uso.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 6.2 26-04-2021 - Se agrega validación para crear los servicios adicionales del producto Datos SafeCity.
     *
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 6.0 - 30-10-2020 se agrega información del punto en la tabla InfoAdendum, para puntos y servicios adicionales MD WEB
     * @since 5.9
     *
     * @author José Candelario <jcandelario@telconet.ec>
     * @version 6.1 04-12-2020 - Se agrega inserción de códigos promocionales para los servicios nuevos de la empresa MD.
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 6.2 01-04-2021 | Se agrega funcionalidad para agregar caracteristicas sobre el flujo ZeroTouch a los productos
     *                       correspondientes de acuerdo a parametro en base.
     *
     *
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 6.2 09-05-2021 - Se agrega lógica para guardar razón social e identificación,
     *                           en caso de que el cliente en sesión es de tipo distribuidor.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 6.3 25-06-2021 Se agrega las siguientes validaciones:
     *                          - En caso de ser tipo de Red MPLS se envía una solicitud de aprobación 
     *                            y se guarda en estado Pendiente. Caso contrario sigue el flujo normal.
     *                          - En caso de ser tipo de Red GPON se registra un historial al servicio
     *                            para poder saber el tipo de red y esquema.
     *                          - Se agrega la variable: 'tipoRed', la cual va permitir identificar con que tipo de red se va crear el servicio:
     *                            MPLS o GPON
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 6.4 20-07-2021 Se agrega validaciones para los tipos de red
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 6.5 06-08-2021 - Se quita validacion que repetia el tipo de solicitud y se lo inicializa
     *                           para que siempre busque el tipo de solicitud correcto para el servicio.
     * 
     * @author Daniel Reyes Peñafiel <djreyes@telconet.ec>
     * @version 6.6 10-08-2021 - Se anexa validacion para que al crear un servicio adicional parametrizado, si el servicio de internet
     *                           ya esta acivo se cree en activo tambien y se mande a notificar a Konibit
     *
     *
     * @author Jonathan Mazón Sánchez <jmazon@telconet.ec>
     * @version 6.5 09-08-2021 - Se agrega validación parametrizada para Productos de tv, Paramount,Noggin y ECDF.
     *
     * @author Antonio Ayala Torres <afayala@telconet.ec>
     * @version 6.6 18-10-2021 - Se agrega validación para productos housing alquiler de espacio físico. Tipo de Recurso
     *                           HS ESPACIO
     * @author Jonathan Mazón Sánchez <jmazon@telconet.ec>
     * @version 6.7 28-09-2021 - Se agrega flush para guardado del historial al crear el servicio ECDF.
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 6.7 18-10-2021 - Se valida si el ingreso del producto Secure Cpe es por migración
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 6.8 30-11-2021 Se modifica la obtención del servicio de Internet al crear un servicio El canal del Fútbol
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 6.9 06-12-2021 - Se agrega validaciones para las ordenes de servicios para los servicios SafeCity, y la validación
     *                           para generar la orden de servicio de Switch PoE automática por disponibilidad de puerto del Ont
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 6.9 04-02-2022 - Se valida si el nombre tecnico es IPSB para grabar en tabla info_tarea
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 6.9 01-02-2022 Se modifican validaciones para servicios que incluyen equipo wifi dual band puesto que no debe permitirse para ZTE  
     * 
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 7.0 25-03-2022 - Se crea validación, para identificar si el servicio a crearse correspode a un Punto Adicional, 
     *                           para posteriormente crear la característica PROM_INSTALACION,               
     *                           la cual es para la facturación de Instalación de servicios de Puntos Adicionales.                                  
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 7.1 21-03-2022 - Se valida la cantidad para los servicios SafeCity en la red GPON_MPLS
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 7.2 10-05-2022 - Se valida cantidad de vrf del elemento olt para los servicios Cámara Safecity para la red GPON_MPLS.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 7.3 15-06-2022 - Se valida el máximo caracteres del login para el servicio DATOS SAFECITY para la red GPON_MPLS.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 7.4 08-07-2022 - Se guarda la característica del id del servicio del INTERNET VPNoGPON
     *                           para los productos IP INTERNET VPNoGPON.
     *
     * @author Jessenia Piloso <jpiloso@telconet.ec>
     * @version 7.5 27-07-2022 - Se modifica el ingreso y la actualizacion de las caracteristicas para productos konibit, es decir,
     *                           si el producto konibit se activa y ya existe la caracteristica se actualiza, si no existe se ingresa.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 7.6 01-08-2022 - Se agrega validación si esta vacío el tipo de red para los
     *                           servicios adicionales safecity.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 7.7 22-08-2022 - Se agrega validación para permitir el ingreso de múltiples servicios adicionales.
     * 
     * @author David Leon <mdleon@telconet.ec>
     * @version 7.6 10-06-2022 - Se modifica para que el service no pida variables de session.
     *        
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 7.9 23-09-2022 - Se agrega validación para validar las caracteristicas unicas del producto MobileBus.
     *
     * @author Emmanuel Martillo <emartillo@telconet.ec>
     * @version 8.0 23-09-2022 - Se refactorizan dos variables (intTotalServicios, boolParametroNombreTecnico) 
     *                           para correcta ejecution de contrab NetlifeCam.
     *
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 8.1 17-10-2022 - Se envía notificación al momento de crear la solicitud de instalación. a la asistente, vendedor y subgerente.
     *
     * @author Josue Valencia <ajvalencia@telconet.ec>
     * @version 8.2 29-12-2022 - Se agrega parametro conmutador optico y modelo de BackUp para productos
     *                           productos CLEAR CHANNEL PUNTO A PUNTO.
     * @author Victor Peña <vpena@telconet.ec>
     * @version 9.0 10-04-2023 - Se agrega condiciones para la generación de logines auxiliares en productos que apliquen para
     *                           paquete de horas de soporte
     *  
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 8.2 20-01-2023 - Se envía valores nuevos desde el arrayParametros (strTipoPaquete, strUuidPaquete) los cuales son del producto
     *                            Paquete_horas_soporte.
     * 
     *  
     * @author Jonathan Quintana <jiquintana@telconet.ec>
     * @version 8.2 20-01-2023 - Se agregan condiciones para identificar tipo de paquete de horas y se pasan parámetros para el llamado al 
     *                           procedimiento que crea el paquete de horas de soporte.
     * 
     *
     * 
     * @author Leonardo Mero <lemero@telconet.ec> 
     * @version 8.3 09-12-2022 - Se agrega la validacion para el producto SAFE ENTRY
     * 
     * @author Alex Gómez <algomez@telconet.ec>
     * @version 8.3 24-09-2022 - Se agrega validación para no preplanificar productos CIH cuando el servicio de internet
     *                           se encuentra en estado Factible. Estos productos se preplanificaran en la autorización
     *                           del contrato físico o digital (Megadatos)
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 8.4 25-01-2023 - Se crea caracteristica de proyecto_crm para el flujo de login por pedidos.
     * 
     * @param array $arrayParametros[
     *                                  "codEmpresa"        => id de la empresa
     *                                  "idOficina"         => id de la oficina,
     *                                  "entityPunto"       => id u objeto punto,
     *                                  "entityRol"         => objeto rol,
     *                                  "usrCreacion"       => usuario de creación,
     *                                  "clientIp"          => ip del cliente,
     *                                  "tipoOrden"         => tipo de orden,
     *                                  "ultimaMillaId"     => id de la última milla,
     *                                  "servicios"         => arreglo de los servicios,
     *                                  "strPrefijoEmpresa" => prefijo de la empresa,
     *                                  "session"           => session del usuario,
     *                                  "origen"            => origen del servicio 
     *                              ]
     *
     * @return array $arrayRespuestaServicio[
     *                                          "intIdServicio"     => id del servicio.
     *                                      ]
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 8.5 26-06-2023 - Se elimina la asignación de valores a strCodEmpresa en la linea 2767 
     *                            
     */
    public function crearServicio($arrayParametros)
    {
        $emGeneral              = $this->emgen;
        $arrayServicios         = array();
        $serviceTecnico         = $this->serviceGeneral;
        $objProducto            = null;
        $entityPlan             = null;
        $strCodEmpresa          = $arrayParametros["codEmpresa"];
        $idOficina              = $arrayParametros["idOficina"];
        $entityPunto            = $arrayParametros["entityPunto"];
        $entityRol              = $arrayParametros["entityRol"];
        $usrCreacion            = $arrayParametros["usrCreacion"];
        $clientIp               = $arrayParametros["clientIp"];
        $tipoOrden              = $arrayParametros["tipoOrden"];
        $ultimaMillaId          = $arrayParametros["ultimaMillaId"];
        $servicios              = $arrayParametros["servicios"];
        $strPrefijoEmpresa      = $arrayParametros["strPrefijoEmpresa"];
        $session                = $arrayParametros["session"];
        $strOrigen              = $arrayParametros["strOrigen"] ? $arrayParametros["strOrigen"] : "WEB" ;
        $strTipoPaquete         = $arrayParametros["strTipoPaquete"];
        $strUuidPaquete         = $arrayParametros["strUuidPaquete"];
        $strTipoRed             = "MPLS";
        $strNombreTecnico       = "";
        $strDescripServicio     = "";
        

        $arrayDetalleSolucion   = array();
        $arrayRespuestaServicio = array("intIdServicio" => 0,"intTotalServiciosPunto" => 0);
        $intIdSolFlujoPP        = $arrayParametros["intIdSolFlujoPP"] ? $arrayParametros["intIdSolFlujoPP"] : 0 ;
        $arrayMaquinasVirtuales = $arrayParametros["arrayMaquinasVirtuales"];
        $strObservacionHistorial= 'Se creo el servicio';
        $arrayRecursos          = array();
        $arrayServicioMV        = [];
        $boolEsTipoSolucion     = false;
        $boolEsEdicionSolucion  = false;

        //parámetro para indicar si es categoria SMB
        $boolFijaSmb            = false;
        $boolServicioCanales    = false;

        $arrayServiciosNetHome  = array();
        $boolExisteServNetHome  = false;
        
        $arrayInstalSimultanea  = array();
        $boolInstalSimultanea   = false;
        
        $arrayInfoWyAp              = array();
        $arrayInfoExtender          = array();
        $strAplicaFlujoExtenderConW = "NO";
        $boolAsignaTarea            = false;
        $arrayServKonibit           = array();

        $strBanderaInfoTecnicaAddDatosGpon   = "N";
        $objInfoServicioTecnicoDatosSafecity = null;

        $intTotalServicios       = 0;
        $boolParametroNombreTecnico = false;
        $arrayArchivos = $arrayParametros['arrayArchivos'];
        //Verifico si existen Productos que corresponden al nombre tecnico 'NETHOME', si existen los retiro del array de servicios => ($servicios)
        //y los agrego al array => ($arrayServiciosNetHome)  
        //Llamo a la funcion que insertara el detalle de los productos que corresponden a NETHOME que fueron agregados al ($arrayServiciosNetHome)
        //y los inserto a nivel de INFO_SERVICIO_PROD_CARACT asociados al servicio generico NETHOME que se obtendra por parametro y que tendra
        //el valor total de los servicios NETHOME.

        foreach($servicios as $intClave => $arrayValor)
        {
            if($arrayValor['info'] == 'C')
            {
                $objProducto = $this->emcom->getRepository('schemaBundle:AdmiProducto')->findOneById($arrayValor['codigo']);
                if(is_object($objProducto) && $objProducto->getNombreTecnico() == 'NETHOME')
                {
                    $arrayServiciosNetHome[] = $arrayValor;
                    unset($servicios[$intClave]);
                    $boolExisteServNetHome   = true;
                }
            }
        }

        if(isset($arrayParametros["boolEsTipoSolucion"]))
        {
            $boolEsTipoSolucion = $arrayParametros["boolEsTipoSolucion"];
        }

        if(isset($arrayParametros["boolEdicionSolucion"]))
        {
            $boolEsEdicionSolucion = $arrayParametros["boolEdicionSolucion"];
        }

        $strNombreSolucion  = '';
        $intNumeroSecuencia = 0;
        if($boolEsTipoSolucion)
        {
            $strNombreSolucion = isset($arrayParametros["strNombreSolucion"])?$arrayParametros["strNombreSolucion"]:'';
            
            //Si se requiere editar toma el numero de secuencia enviado como parametros
            if($boolEsEdicionSolucion)
            {
                $intNumeroSecuencia = $arrayParametros["numeroSolucion"];
            }
            
            $boolEsSolucionHousing = false;
            $boolEsSolucionHosting = false;
            $intCantidadHousing    = 0;
            $intCantidadHosting    = 0;
            
            //Verificar si es HOUSING contenga el producto complentario obligatorio ENERGIA y en el caso de HOSTING el de Licensamiento SE
            foreach($servicios as $valor)
            {
                $objProducto = $this->emcom->getRepository('schemaBundle:AdmiProducto')->findOneById($valor['codigo']);
                 
                if($objProducto->getNombreTecnico() == 'HOUSING')
                {
                    $boolEsHousing         = $this->servicioTecnico->isContieneCaracteristica($objProducto,'ES_HOUSING');
                    $boolEsSolucionHousing = true;
                    
                    if($boolEsHousing)
                    {
                        $intCantidadHousing    ++;
                    }
                }
                 
                if($objProducto->getNombreTecnico() == 'HOSTING')
                {
                    $boolEsPool            = $this->servicioTecnico->isContieneCaracteristica($objProducto,'ES_POOL_RECURSOS');
                    $boolEsSolucionHosting = true;
                    
                    if($boolEsPool)
                    {
                        $intCantidadHosting    ++;
                    }                    
                }
            }
            
            //Verificar que para cada housing o hosting configurado comercialmente tenga su par producto necesario para levantar servicio
            //Licenciamiento o Potencia KVA
            if($boolEsSolucionHousing || $boolEsSolucionHosting)
            {
                $intCantidadRefHousingConfigurado = 0;
                $intCantidadRefHostingConfigurado = 0;
                
                foreach($servicios as $valor)
                {
                    $objProducto          = $this->emcom->getRepository('schemaBundle:AdmiProducto')->findOneById($valor['codigo']);
                    $boolRequeridoHousing = $this->servicioTecnico->isContieneCaracteristica($objProducto,'REQUERIDO_HOUSING');
                                        
                    if($boolRequeridoHousing)
                    {
                        $intCantidadRefHousingConfigurado++;
                    }
                    else
                    {
                        $boolRequeridoHosting = $this->servicioTecnico->isContieneCaracteristica($objProducto,'ES_LICENCIAMIENTO_SO');
                        
                        if($boolRequeridoHosting)
                        {
                            $intCantidadRefHostingConfigurado++;
                        }
                    }
                }

                //Si es edicion verificar a que subgrupo es ingresado el nuevo producto, si es Licenciamiento se
                //sensara que exista un POOL si es potencis KVA se sensara que exista un HOUSING
                if ($boolEsEdicionSolucion)
                {
                    $strTipoSolucion = $valor['tipoSubSolucion']; 
                    $arrayServicios  = $this->emcom->getRepository("schemaBundle:InfoServicio")
                            ->getArrayServiciosPorSolucionYTipoSolucion($intNumeroSecuencia,$strTipoSolucion);

                    foreach ($arrayServicios as $objServicioSubSolucion)
                    {
                        $objProductoSubSolucion = $objServicioSubSolucion->getProductoId();
                        
                        if($boolRequeridoHosting)
                        {
                            $boolEsPool  = $this->servicioTecnico->isContieneCaracteristica($objProductoSubSolucion,'ES_POOL_RECURSOS');
                            
                            if($boolEsPool)
                            {
                                $intCantidadHosting++;
                            }
                        }
                        
                        if($boolRequeridoHousing)
                        {
                            $boolEsHousing  = $this->servicioTecnico->isContieneCaracteristica($objProductoSubSolucion,'ES_HOUSING');
                            
                            if($boolEsHousing)
                            {
                                $intCantidadHousing++;
                            }
                        }
                        
                        $boolRequeridoHousing = $this->servicioTecnico->isContieneCaracteristica($objProductoSubSolucion,'REQUERIDO_HOUSING');
                                        
                        if($boolRequeridoHousing)
                        {
                            $intCantidadRefHousingConfigurado++;
                        }
                        else
                        {
                            $boolRequeridoHosting = $this->servicioTecnico->isContieneCaracteristica($objProductoSubSolucion,'ES_LICENCIAMIENTO_SO');

                            if($boolRequeridoHosting)
                            {
                                $intCantidadRefHostingConfigurado++;
                            }
                        }
                    }
                }

                if($intCantidadRefHostingConfigurado < $intCantidadHosting)
                {
                    throw new \Exception('HOSTING : CLOUD IAAS licenciamiento SE');
                }         

                if($intCantidadRefHousingConfigurado < $intCantidadHousing)
                {
                    throw new \Exception('HOUSING: Potencia en KVA');
                }
            }
        }

        if (is_integer($entityPunto))
        {
            $entityPunto = $this->emcom->getRepository('schemaBundle:InfoPunto')->find($entityPunto);
        }
        
        if (empty($entityRol))
        {
            $entityRol = $this->emcom->getRepository('schemaBundle:AdmiRol')->find($entityPunto->getPersonaEmpresaRolId()
                                                                                               ->getEmpresaRolId()
                                                                                               ->getRolId());
        }
        //Se obtiene bandera para determinar si Cliente posee contrato Activo
        $objInfoContrato = $this->emcom->getRepository('schemaBundle:InfoContrato')
                                ->findContratoActivoPorPersonaEmpresaRol($entityPunto->getPersonaEmpresaRolId()->getId());
        if (!empty($objInfoContrato))
        {
            $boolTieneContratoActivo = true;
        }
        else
        {
            $boolTieneContratoActivo = false;
        }
        $this->emcom->beginTransaction();
        $this->emSoporte->beginTransaction();    
        $this->emComunicacion->getConnection()->beginTransaction();
        try
        {       
            //verificar cantidad para servicios safecity en la red GPON_MPLS
            $arrayDatosServicios = $servicios;
            foreach($arrayDatosServicios as $intKeyItemSer => $arrayItemServicio)
            {
                $arrayParValidarProGpon = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                             'INFRAESTRUCTURA',
                                                             'PARAMETROS',
                                                             'VALIDAR RELACION SERVICIO ADICIONAL CON DATOS SAFECITY',
                                                             $arrayItemServicio['codigo'],
                                                             '',
                                                             '',
                                                             '',
                                                             '',
                                                             $strCodEmpresa);
                if(!empty($arrayParValidarProGpon) && isset($arrayParValidarProGpon['valor1']))
                {
                    $intCantidadSer = $arrayItemServicio['cantidad'] - 1;
                    $arrayItemServicio['cantidad'] = 1;
                    $servicios[$intKeyItemSer] = $arrayItemServicio;
                    while($intCantidadSer>0)
                    {
                        $servicios[] = $arrayItemServicio;
                        $intCantidadSer--;
                    }
                }
            }
            $arrayEstado= $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                            ->getOne('ESTADO_CLEAR_CHANNEL','COMERCIAL','','ESTADO_CLEAR_CHANNEL','','','','','',$strCodEmpresa);
            $strDescripcionClearChannel = $arrayEstado["valor1"];

            //Consulta parámetros para validación de productos CIH
            $strAplicaEstadoInternet = "NO";
            if($strPrefijoEmpresa == "MD")
            {
                //Parámetro para verificación del origen
                $arrayParamOrigen = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne(
                                                    'VALIDACIONES_CAMBIOS_PRODUCTOS_CIH',
                                                    'COMERCIAL',
                                                    'COMERCIAL',
                                                    'ORIGEN INVOCACION SERVICE ADDSERVICIO',
                                                    '','','','','',
                                                    $strCodEmpresa);
                
                if(isset($arrayParamOrigen) && !empty($arrayParamOrigen))
                {
                    $arrayParamOrigen = explode('|',$arrayParamOrigen['valor1']);
                }
                else
                {
                    throw new \Exception('No se encontró el parámetro ORIGEN INVOCACION SERVICE ADDSERVICIO');
                }

                if(in_array($strOrigen,$arrayParamOrigen))
                {
                    //Consulta estados permitidos para nuevo flujo por productos CIH
                    $arrayEstadosServiciosInt = array();
                    $arrayParamEstadoServInt = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne(
                                                                'VALIDACIONES_CAMBIOS_PRODUCTOS_CIH',
                                                                'COMERCIAL',
                                                                'COMERCIAL',
                                                                'ESTADO SERVICIO INTERNET PERMITIDO',
                                                                '','','','','',
                                                                $strCodEmpresa);

                    if(isset($arrayParamEstadoServInt) && !empty($arrayParamEstadoServInt))
                    {
                        $arrayEstadosServiciosInt = explode('|',$arrayParamEstadoServInt['valor1']);
                    }
                    else
                    {
                        throw new \Exception('No se encontró el parámetro ESTADO SERVICIO INTERNET PERMITIDO');
                    }
                    
                    $arrayParamsServiceTec = array ("intIdPunto" => $entityPunto->getId(),
                                                    "strCodEmpresa" => $strCodEmpresa,
                                                    "arrayEstadosInternetIn" => $arrayEstadosServiciosInt);
                    //Validación del estado del Servicio de Internet
                    $arrayResponseValidaInternet  = $this->servicioTecnico->obtieneServicioInternetValido($arrayParamsServiceTec);
                    $strStatusServInternetAplica  = $arrayResponseValidaInternet["status"];
                    $objServicioInternetAplica    = $arrayResponseValidaInternet["objServicioInternet"];
                    if($strStatusServInternetAplica === "OK" && is_object($objServicioInternetAplica))
                    {
                        $strAplicaEstadoInternet = "SI";
                    }
                }
            }

            //seteo variable para verificar disponibilidad de puerto y el nombre tecnico para servicios GPON-MPLS
            $booleanVerDispPuertoGpon = false;
            $strNombreTecnicoServGpon = "";
            //ingresar servicios
            foreach($servicios as $valor)
            {
                $strNombreTecnicoProd           = "";
                $strNompreOpcionIpSb            = "";
                $boolEnvioNotifIPSB             = false;
                $boolEnvioNotifAgregarEquipo    = false;
                $strObservacionAgregarEquipo    = "";
                $id                             = $valor['codigo'];
                $boolGeneraSolicitudDcto        = false;
                $intPrecioSolicitado            = 0;
                $floatValorDescuentoInstalacion = 0;
                $strPlantillaComisionista       = ( isset($valor['strPlantillaComisionista']) && !empty($valor['strPlantillaComisionista']) )
                                                  ? $valor['strPlantillaComisionista'] : '';
                $strTipoRed                     = isset($valor["strTipoRed"]) ? $valor["strTipoRed"] : 'MPLS';
                $strTipoBackUp                  = $valor['modeloBackUp'];

                //Verifica si es producto CIH
                $strAplicaServicioCIH           = "NO";
                if($strPrefijoEmpresa == "MD" && $strAplicaEstadoInternet == "SI")
                {
                    //Parámetro para verificación del origen
                    $arrayParamProductoCIH = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne(
                                                        'PRODUCTOS_TIPO_CIH',
                                                        'COMERCIAL',
                                                        'COMERCIAL',
                                                        'CODIGO DE PRODUCTO CIH',
                                                        $id,
                                                        '','','','',
                                                        $strCodEmpresa);
                    
                    if(isset($arrayParamProductoCIH) && !empty($arrayParamProductoCIH))
                    {
                        $strAplicaServicioCIH = "SI";
                    }
                }

                if (!is_numeric($id))
                {
                    throw new \Exception('Seleccione un producto o plan');
                }
                if(!$valor['precio'])
                {                        
                    throw new \Exception('No se permite el ingreso del servicio por no poseer un precio valido para su Facturacion');
                }                                                
                $cantidad   = $valor['cantidad'];
                $frecuencia = $valor['frecuencia'];
            
                //Error se debe tomar el precio_unitario
                //$precio = $valor['precio_total'];
                $precio = $valor['precio'];
                $info   = $valor['info'];
                $hijo   = isset($valor['hijo'])?$valor['hijo']:'';
                
                // Si se Tiene Relación backup con un servicio Principal, el nuevo servicio será de Tipo Enlace Backup
                $intIdServicioPrincipal = $valor['servicio'];
                
                $boolEsBackup = false;
                
                //Servicios BACKUPS heredan el padre de facturación del enlace PRINCIPAL y el tipo Orden sea diferente de C('Cambio Tipo Medio')
                if($intIdServicioPrincipal && $tipoOrden != 'C')
                {
                    $boolEsBackup = true;
                }
                if (empty($hijo))
                {
                    $strEsVenta = "S";
                    
                    if( $info == 'C' )//Verificación de característica 'VENTA_EXTERNA' sólo para productos
                    {
                        /**
                         * BLOQUE VERIFICAR CARACTERISTICA
                         * 
                         * Bloque que verifica si existe la característica 'VENTA_EXTERNA' asociada al producto
                         */
                        $arrayParametrosCaracteristicas = array( 'intIdProducto'         => $id, 
                                                                 'strDescCaracteristica' => 'VENTA_EXTERNA', 
                                                                 'strEstado'             => 'Activo' );
                        $strEsVentaExterna              = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaracteristicas);
                        
                        //Si existe la característica asociada al producto se marca como 'ES_VENTA' => 'E' (Venta Externa)
                        $strEsVenta = ( !empty($strEsVentaExterna) && $strEsVentaExterna == "S" ) ? "E" : "S";
                        /**
                         * FIN BLOQUE VERIFICAR CARACTERISTICA
                         */
                                                 
                    }//( $info == 'C' )
                    
                    $entityServicio = new InfoServicio();
                    $entityServicio->setPuntoId($entityPunto);
                    $entityServicio->setOrigen($strOrigen);
                    //Si se esta creando un Backup, el tipo de Orden corresponde a un servicio N -> Nuevo
                    $entityServicio->setTipoOrden(($boolEsBackup == true)?'N':$tipoOrden);
                    $entityServicio->setEsVenta($strEsVenta);
                    $entityServicio->setCantidad($cantidad);
                    
                    $objServicioRepository           = $this->emcom->getRepository('schemaBundle:InfoServicio');
                    $entityInfoPuntoPadreFacturacion = $objServicioRepository->getResultadoPadreFacturacionDefault($entityPunto->getId());
                        
                    //Servicios BACKUPS heredan el padre de facturación del enlace PRINCIPAL
                    if($boolEsBackup)
                    {
                        if(isset($valor['idPadreFacturacion']) && !empty($valor['idPadreFacturacion']))
                        {
                            $objPuntoFact = $this->emcom->getRepository('schemaBundle:InfoPunto')->find($valor['idPadreFacturacion']);

                            //Si existe un punto de facturacion ligado el enlace principal valido, se ingresa la informacion como padre
                            //de facturacion
                            if(is_object($objPuntoFact))
                            {
                                $entityInfoPuntoPadreFacturacion = $objPuntoFact;
                            }
                        }
                    }
                    
                    // Compara la clase perteneciente a la variable, por excepción será el string del error.
                    if(is_object($entityInfoPuntoPadreFacturacion))
                    {
                        $entityServicio->setPuntoFacturacionId($entityInfoPuntoPadreFacturacion);
                    }
                    else
                    {
                        throw new \Exception("Cliente no posee padre de facturación, por favor verificar la información");
                    }
                    
                    // Si existe definido el vendedor a nivel de Servicio se guarda
                    if($valor['login_vendedor'])
                    {
                        $entityServicio->setUsrVendedor($valor['login_vendedor']);   
                    }
                    else
                    {
                        if($strPrefijoEmpresa == 'MD' || $strPrefijoEmpresa == 'EN' )
                        {
                            //Si no existe definido el vendedor a nivel de Servicio se asigna el vendedor definido en el Punto                        
                            $entityServicio->setUsrVendedor($entityPunto->getUsrVendedor());
                        }
                    }

                    
                    if($strPrefijoEmpresa === 'TN' ||  $strPrefijoEmpresa === 'TNP' ||  $strPrefijoEmpresa === 'TNG')
                    {
                        $strDescripcionProducto = $valor['producto'];
                        if($info == 'C') // Opcion "Por Producto"
                        {
                            if($valor['precio_venta'] < $valor['precio'])
                            {
                                $intPrecioSolicitado = $valor['precio'] - $valor['precio_venta'];
                                $entityServicio->setPrecioVenta($valor['precio']);
                                $boolGeneraSolicitudDcto = true;
                            }
                            else
                            {
                                $entityServicio->setPrecioVenta($valor['precio_venta']);
                            }

                            $entityServicio->setPrecioFormula($valor['precio']);
                        }
                        else
                        {
                            $entityServicio->setPrecioVenta($precio);
                            $entityServicio->setPrecioFormula($precio);     
                        }
                        //Validar e evitar que la descripcion sobrepase los 300 caracteres permitidos por el XML enviado a SRI
                        if(strlen($strDescripcionProducto) >= $this->intLongitudMaximaDescrFactura)
                        {
                            $strDescripcionProducto = mb_strimwidth($strDescripcionProducto, 0, $this->intLongitudMaximaDescrFactura-1);
                        }
                        
                        $entityServicio->setDescripcionPresentaFactura($strDescripcionProducto);
                        
                        if( floatval($valor['precio_instalacion']) > floatval($valor['precio_instalacion_pactado']) )
                        {
                            $floatValorDescuentoInstalacion = floatval($valor['precio_instalacion']) - floatval($valor['precio_instalacion_pactado']);
                            $entityServicio->setPrecioInstalacion(floatval($valor['precio_instalacion'])); // Convertir contenido a float
                        }
                        else
                        {
                            $entityServicio->setPrecioInstalacion(floatval($valor['precio_instalacion_pactado'])); // Convertir contenido a float
                        }
                    }
                    else
                    {
                        // Para MD precio venta = precio formula (precio unitario)
                       $entityServicio->setPrecioVenta($precio);
                       $entityServicio->setPrecioFormula($precio);                   
                    }
                    
                    if ($info == 'C')
                    {
                        // catalogo de productos
                        if($frecuencia == '' || !is_numeric($frecuencia))
                        {
                            throw new \Exception('No se permite el ingreso del servicio por no poseer una Frecuencia válida para su Facturación');
                        }
                        
                        $objProducto = $this->emcom->getRepository('schemaBundle:AdmiProducto')->findOneById($id);
                        if(!$objProducto)
                        {
                            throw new \Exception("Producto No Encontrado");
                        }
                        
                        $entityServicio->setProductoId($objProducto);
                        
                        // Si el producto tiene estado_inicial 'Activo',en el caso de prospectos el servicio se activa en la aprobacion del contrato 
                        // Para el caso de de clientes con contrato Activo se activaran automaticamente al agregar el servicio.
                        if(($strPrefijoEmpresa == 'TN' || $strPrefijoEmpresa == 'TNP') && $objProducto->getEstadoInicial() === 'Activo' ||
                            $strPrefijoEmpresa == 'TNG')
                        {   
                            if ($boolTieneContratoActivo)
                            {
                                $entityServicio->setEstado('Activo'); 
                            }
                            else
                            {
                                $entityServicio->setEstado('Pendiente');
                            }
                        }                       
                        else
                        {
                            //Consultamos si el producto requiere flujo ya que antes no lo tenia
                            $arrayParametrosRequiereFlujo =   $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                   ->getOne("REQUIERE_FLUJO", 
                                                                            "TECNICO", 
                                                                            "", 
                                                                            "", 
                                                                            $objProducto->getDescripcionProducto(), 
                                                                            "", 
                                                                            "",
                                                                            "",
                                                                            "",
                                                                            10
                                                                        );
                            if(!is_array($arrayParametrosRequiereFlujo) && empty($arrayParametrosRequiereFlujo))
                            {
                                $boolRequiereFlujo = false;
                            }
                            else
                            {
                                $boolRequiereFlujo = true;
                            }
                            //Buscar si es enlace S, estado Pre-servicio | N, Pendiente                            
                            if ($objProducto->getEsEnlace() == 'SI' && !$boolRequiereFlujo)
                            {
                                
                                $entityServicio->setEstado('Pre-servicio');
                            }
                            else
                            {
                                if($objProducto->getNombreTecnico() === "WIFI_DUAL_BAND"
                                    || $objProducto->getNombreTecnico() === "EXTENDER_DUAL_BAND"
                                    || $objProducto->getNombreTecnico() === "WDB_Y_EDB")
                                {
                                    $strMarcaOltTecnologiaDualBand      = "";
                                    $strModeloOltTecnologiaDualBand     = "";
                                    $strEsPermitidoWYExtenderEnPlanes   = "";
                                    $intIdServicioInternetValido        = null;
                                    $strInfoEquipoWdbEnlazado           = "";
                                    $strInfoEquipoEdbEnlazado           = "";
                                    $arrayRespuestaServInternetValido   = $this->servicioTecnico
                                                                               ->obtieneServicioInternetValido(array(   "intIdPunto"    => 
                                                                                                                        $entityPunto->getId(),
                                                                                                                        "strCodEmpresa" => 
                                                                                                                        $strCodEmpresa
                                                                                                                  ));
                                    $strStatusServInternetValido    = $arrayRespuestaServInternetValido["status"];
                                    $objServicioInternetValido      = $arrayRespuestaServInternetValido["objServicioInternet"];
                                    if($strStatusServInternetValido === "OK")
                                    {
                                        if(!is_object($objServicioInternetValido))
                                        {
                                            throw new \Exception('No se puede crear el servicio debido a que el punto '.
                                                                 'no tiene un Servicio de Internet contratado');
                                        }
                                        $intIdServicioInternetValido        = $objServicioInternetValido->getId();
                                        $objPlanServicioInternet            = $objServicioInternetValido->getPlanId();
                                        if(!is_object($objPlanServicioInternet))
                                        {
                                            throw new \Exception('No se puede crear el servicio debido a que no existe un '.
                                                                 'flujo definido para el Servicio de Internet contratado');
                                        }
                                        
                                        $arrayVerifTecnologiaDualBand           = $this->servicioTecnico
                                                                                   ->verificaTecnologiaDualBand(array("intIdServicioInternet" => 
                                                                                                                      $intIdServicioInternetValido));
                                        $strStatusVerifTecnologiaDualBand       = $arrayVerifTecnologiaDualBand["status"];
                                        $strMensajeVerifTecnologiaDualBand      = $arrayVerifTecnologiaDualBand["mensaje"];
                                        $strModelosEquiposWdbTecnologiaDualBand = $arrayVerifTecnologiaDualBand["modelosEquiposWdb"];
                                        if($strStatusVerifTecnologiaDualBand === "OK")
                                        {
                                            $arrayInfoVerifVerifTecnologiaDualBand  = explode('|', $strMensajeVerifTecnologiaDualBand);
                                            $strMarcaOltTecnologiaDualBand          = $arrayInfoVerifVerifTecnologiaDualBand[0];
                                            $strModeloOltTecnologiaDualBand         = $arrayInfoVerifVerifTecnologiaDualBand[1];
                                            $strEsPermitidoWYExtenderEnPlanes       = $arrayInfoVerifVerifTecnologiaDualBand[2];
                                            if($objProducto->getNombreTecnico() === "WIFI_DUAL_BAND" 
                                                || $objProducto->getNombreTecnico() === "WDB_Y_EDB")
                                            {
                                                if(!isset($strModelosEquiposWdbTecnologiaDualBand) || empty($strModelosEquiposWdbTecnologiaDualBand))
                                                {
                                                    throw new \Exception('No se puede crear el servicio '.$objProducto->getDescripcionProducto().
                                                                         'puesto que no está permitido '.'para la tecnología '.
                                                                         $strMarcaOltTecnologiaDualBand.' con modelo de olt '.
                                                                         $strModeloOltTecnologiaDualBand.' del servicio de Internet contratado');
                                                }
                                                
                                                $arrayRespuestaWdbEnlazado  = $this->servicioTecnico
                                                                                    ->verificaEquipoEnlazado(
                                                                                                            array(  "intIdServicioInternet" => 
                                                                                                                    $intIdServicioInternetValido,
                                                                                                                    "strTipoEquipoABuscar"  => 
                                                                                                                    "WIFI DUAL BAND"));
                                                $strStatusWdbEnlazado       = $arrayRespuestaWdbEnlazado["status"];
                                                $strMensajeWdbEnlazado      = $arrayRespuestaWdbEnlazado["mensaje"];
                                                $strInfoEquipoWdbEnlazado   = $arrayRespuestaWdbEnlazado["infoEquipoEnlazado"];
                                                if($strStatusWdbEnlazado === "OK")
                                                {
                                                    if($objProducto->getNombreTecnico() === "WIFI_DUAL_BAND")
                                                    {
                                                        if(!empty($strInfoEquipoWdbEnlazado))
                                                        {
                                                            throw new \Exception('No se puede crear el servicio debido a que el punto ya posee '.
                                                                                 'el equipo asociado a este servicio');
                                                        }
                                                        
                                                        if($strEsPermitidoWYExtenderEnPlanes === "SI")
                                                        {
                                                            $arrayRespuestaProdWdbEnPlan    = $this->servicioTecnico->obtieneProductoEnPlan(
                                                                                                            array(  "intIdPlan"                 => 
                                                                                                                    $objPlanServicioInternet->getId(),
                                                                                                                    "strNombreTecnicoProducto"  => 
                                                                                                                    $objProducto->getNombreTecnico()
                                                                                                                  ));
                                                            $strProductoWdbEnPlan           = $arrayRespuestaProdWdbEnPlan["strProductoEnPlan"];
                                                            if($strProductoWdbEnPlan === "SI")
                                                            {
                                                                throw new \Exception('No se puede crear el servicio debido a que el punto ya '.
                                                                                     'posee dicho producto incluido en el plan');
                                                            }
                                                        }
                                                        
                                                        $arrayRespuestaServiciosWdb = $this->servicioTecnico
                                                                                           ->obtenerServiciosPorProducto(
                                                                                                    array(  "intIdPunto"                    => 
                                                                                                            $entityPunto->getId(),
                                                                                                            "arrayNombresTecnicoProducto"   => 
                                                                                                            array("WIFI_DUAL_BAND", "WDB_Y_EDB"),
                                                                                                            "strCodEmpresa"                 => 
                                                                                                            $strCodEmpresa));
                                                        $intContadorServiciosWdb = $arrayRespuestaServiciosWdb["intContadorServiciosPorProducto"];
                                                        if(intval($intContadorServiciosWdb) > 0)
                                                        {
                                                            throw new \Exception('No se puede crear el servicio debido a que el punto ya '.
                                                                                 'posee dicho servicio');
                                                        }
                                                        $strAplicaFlujoExtenderConW = "SI";
                                                    }
                                                    else
                                                    {
                                                        /*
                                                         * Validaciones para servicios W+AP
                                                         */
                                                        $arrayRespuestaEdbEnlazado  = $this->servicioTecnico->verificaEquipoEnlazado(array(
                                                                                                                    "intIdServicioInternet" => 
                                                                                                                    $intIdServicioInternetValido,
                                                                                                                    "strTipoEquipoABuscar"  => 
                                                                                                                    "EXTENDER DUAL BAND"));
                                                        $strStatusEdbEnlazado       = $arrayRespuestaEdbEnlazado["status"];
                                                        $strMensajeEdbEnlazado      = $arrayRespuestaEdbEnlazado["mensaje"];
                                                        $strInfoEquipoEdbEnlazado   = $arrayRespuestaEdbEnlazado["infoEquipoEnlazado"];
                                                        if($strStatusEdbEnlazado === "OK")
                                                        {
                                                            if(!empty($strInfoEquipoWdbEnlazado) && !empty($strInfoEquipoEdbEnlazado))
                                                            {
                                                                throw new \Exception('No se puede crear el servicio debido a que el cliente ya tiene'
                                                                                     .' dichos equipos');
                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new \Exception('No se puede crear el servicio debido a que '
                                                                                 .$strMensajeEdbEnlazado);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    throw new \Exception('No se puede crear el servicio debido a que '.$strMensajeWdbEnlazado);
                                                }
                                                $strAplicaFlujoExtenderConW = "SI";
                                            }
                                            else
                                            {
                                                /*
                                                 * Validaciones para servicios Extenders Dual Band
                                                 */
                                                $arrayRespuestaServiciosEdb = $this->servicioTecnico->obtenerServiciosPorProducto(
                                                                                        array(  "intIdPunto"                    => 
                                                                                                $entityPunto->getId(),
                                                                                                "arrayNombresTecnicoProducto"   => 
                                                                                                array($objProducto->getNombreTecnico()),
                                                                                                "strCodEmpresa"             => $strCodEmpresa));
                                                $intContadorServiciosEdb    = $arrayRespuestaServiciosEdb["intContadorServiciosPorProducto"];
                                                if(intval($intContadorServiciosEdb) > 0)
                                                {
                                                    $arrayNumMaxServAdicsEdb    = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                        ->getOne(   'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    'NUM_MAX_SERVICIOS_ADICIONALES_X_PUNTO',
                                                                                                    $objProducto->getNombreTecnico(),
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    $strCodEmpresa);
                                                    if(isset($arrayNumMaxServAdicsEdb) && !empty($arrayNumMaxServAdicsEdb)
                                                        && intval($intContadorServiciosEdb) >= intval($arrayNumMaxServAdicsEdb['valor3']))
                                                    {
                                                        throw new \Exception('No se puede crear el servicio debido a que el punto ya '.
                                                                             'posee '. intval($intContadorServiciosEdb) .
                                                                             ' servicios de este tipo y la cantidad máxima permitida es '.
                                                                             intval($arrayNumMaxServAdicsEdb['valor3']));
                                                    }
                                                }
                                                
                                            }
                                        }
                                        else
                                        {
                                            throw new \Exception('No se puede crear el servicio puesto que '.$strMensajeVerifTecnologiaDualBand);
                                        }
                                    }
                                    else
                                    {
                                        throw new \Exception('No se puede crear el servicio ya que no se ha podido obtener el Servicio de Internet '
                                                             .'contratado para el punto');
                                    }
                                    $intIdSolAgregarEquipo              = null;
                                    $boolCrearSolAgregarEquipo          = false;
                                    $strEliminaServiciosAdiWdb          = "NO";
                                    $strEliminaSolsDualBand             = "NO";
                                    $strEliminaSolsGestionOnt           = "NO";
                                    $intIdSolAgregarEquipoCambioOntExt      = null;
                                    $strCrearSolAgregarEquipoCambioOntExt   = "NO";
                                    if($objProducto->getNombreTecnico() === "EXTENDER_DUAL_BAND")
                                    {
                                        $boolCrearSolAgregarEquipo      = true;
                                        $boolEnvioNotifAgregarEquipo    = true;
                                        $strObservacionAgregarEquipo    = '<br>Incluye agregar equipo Extender Dual Band.';
                                        
                                        if($strAplicaFlujoExtenderConW === "NO" && 
                                            isset($strModelosEquiposWdbTecnologiaDualBand) && !empty($strModelosEquiposWdbTecnologiaDualBand))
                                        {
                                            $arrayVerificaWdbPorPunto   = $this->servicioTecnico
                                                                               ->verificaProductoPorPunto(array( 
                                                                                    "intIdServicioInternet"         => 
                                                                                    $intIdServicioInternetValido,
                                                                                    "arrayNombresTecnicoProducto"   => 
                                                                                    array("WIFI_DUAL_BAND", "WDB_Y_EDB"),
                                                                                    "strCodEmpresa"                 => $strCodEmpresa,
                                                                                    "strVerificaEquipo"             => "SI",
                                                                                    "strTipoEquipoABuscar"          => "WIFI DUAL BAND",
                                                                                    "strVerificaProdEnPlan"         => 
                                                                                    $strEsPermitidoWYExtenderEnPlanes));

                                            $strWdbEncontradoPorPunto       = $arrayVerificaWdbPorPunto["strProductoEncontrado"];
                                            $strServiciosWdbAdicProducto    = $arrayVerificaWdbPorPunto["strServiciosAdicProducto"];
                                            $arrayServiciosWdbAdicProducto  = $arrayVerificaWdbPorPunto["arrayServiciosAdicProducto"];
                                            $strEquipoWdbEnlazado           = $arrayVerificaWdbPorPunto["strEquipoEnlazado"];
                                            $strInfoEquipoWdbEnlazado       = $arrayVerificaWdbPorPunto["strInfoEquipoEnlazado"];
                                            if($strWdbEncontradoPorPunto === "SI" 
                                                && (($strServiciosWdbAdicProducto === "SI" && !empty($arrayServiciosWdbAdicProducto))
                                                    || ($strEquipoWdbEnlazado === "SI" && !empty($strInfoEquipoWdbEnlazado))))
                                            {
                                                $strAplicaFlujoExtenderConW = "SI";
                                            }
                                        }
                                        
                                        if($strAplicaFlujoExtenderConW === "NO")
                                        {
                                            $strEliminaSolsDualBand = "SI";
                                            
                                            /*
                                             * Flujo a nivel de extender por ont
                                             * 1. Se verifica si el servicio tiene un equipo ont parametrizado para extenders. 
                                             * En caso de tenerlo, el flujo se mantiene como está actualmente, caso contrario se continúa 
                                             * con los siguientes puntos.
                                             * 2. Se debe verificar si el servicio de Internet tiene una solicitud de agregar equipo con
                                             * las características para un cambio por un ont para extender creado anteriormente por la agregación 
                                             * de otro extender.
                                             * Si no existe dicha solicitud se debe crear esa solicitud, caso contrario se mantiene el flujo como
                                             * está actualmente. 
                                             * 
                                             */
                                            $arrayTiposEquiposOntParaExt    = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                          ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                                '',
                                                                                                '',
                                                                                                '',
                                                                                                'TIPOS_EQUIPOS',
                                                                                                $strMarcaOltTecnologiaDualBand,
                                                                                                $strModeloOltTecnologiaDualBand,
                                                                                                '',
                                                                                                'TIPOS_EQUIPOS_ONT_PARA_EXTENDER',
                                                                                                $strCodEmpresa);
                                            if(is_array($arrayTiposEquiposOntParaExt) && count($arrayTiposEquiposOntParaExt) > 0)
                                            {
                                                $boolTieneEquipoOntParaExt = false;
                                                foreach($arrayTiposEquiposOntParaExt as $arrayTipoEquipoOntParaExt)
                                                {   
                                                    $strValorCaractTipoOntNuevo     = $arrayTipoEquipoOntParaExt['valor4'];
                                                    $arrayRespuestaOntExtEnlazado   = $this->servicioTecnico
                                                                                           ->verificaEquipoEnlazado(
                                                                                                array(  "intIdServicioInternet" =>
                                                                                                        $intIdServicioInternetValido,
                                                                                                        "strTipoEquipoABuscar"  => 
                                                                                                        $strValorCaractTipoOntNuevo));
                                                    $strStatusOntExtEnlazado        = $arrayRespuestaOntExtEnlazado["status"];
                                                    $strMensajeOntExtEnlazado       = $arrayRespuestaOntExtEnlazado["mensaje"];
                                                    $strTieneAlgunEquipoEnlazado    = $arrayRespuestaOntExtEnlazado["tieneAlgunEquipoEnlazado"];
                                                    $strInfoEquipoOntExtEnlazado    = $arrayRespuestaOntExtEnlazado["infoEquipoEnlazado"];
                                                    if($strStatusOntExtEnlazado === "ERROR")
                                                    {
                                                        throw new \Exception('No se puede crear el servicio debido a que '.$strMensajeOntExtEnlazado);
                                                    }
                                                    
                                                    if(!empty($strInfoEquipoOntExtEnlazado) && $strTieneAlgunEquipoEnlazado === "SI")
                                                    {
                                                        $boolTieneEquipoOntParaExt = true;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                throw new \Exception('No existe la parametrización de tipos de onts para extender para '
                                                                     .'el modelo de olt '.$strModeloOltTecnologiaDualBand);
                                            }
                                            
                                            /*
                                             * Se procede a verificar si es necesario la creación de una solicitud agregar equipo 
                                             * por cambio a un ont para extender dependiendo de la tecnología.
                                             * Si el servicio no tiene un equipo para extender y además no es un servicio que aún no ha sido activado
                                             * 
                                             */
                                            if(!$boolTieneEquipoOntParaExt && $strTieneAlgunEquipoEnlazado === "SI")
                                            {
                                                $strValorCaractMotivoCambioOnt  = "CAMBIO ONT POR AGREGAR EXTENDER";
                                                
                                                /*
                                                 * El servicio de Internet no tiene un equipo para extender, se verificará si tiene asociada 
                                                 * una solicitud agregar equipo que permita gestionar el cambio a un ont para extender
                                                 */
                                                $arrayRespVerifSolCambioDeOntXExtender  = $this->servicioTecnico
                                                                                               ->verificaSolCambioDeOntPorServicioExtender(
                                                                                                    array(
                                                                                                        "intIdServicioInternet" => 
                                                                                                        $objServicioInternetValido->getId(),
                                                                                                        "strCodEmpresa"         => 
                                                                                                        $strCodEmpresa,
                                                                                                        "strMotivoCambioOnt"    => 
                                                                                                        $strValorCaractMotivoCambioOnt,
                                                                                                        "strTipoOntNuevo"       =>
                                                                                                        $strValorCaractTipoOntNuevo));
                                                $strStatusVerifSolCambioDeOntXExtender  = $arrayRespVerifSolCambioDeOntXExtender["status"];
                                                $strMensajeVerifSolCambioDeOntXExtender = $arrayRespVerifSolCambioDeOntXExtender["mensaje"];
                                                if($strStatusVerifSolCambioDeOntXExtender === "ERROR")
                                                {
                                                    throw new \Exception($strMensajeVerifSolCambioDeOntXExtender);
                                                }
                                                $strCrearSolAgregarEquipoCambioOntExt   = 
                                                    $arrayRespVerifSolCambioDeOntXExtender["strCrearSolAgregarEquipoCambioOnt"];
                                                $strObtieneSolAgregarEquipoCambioOntExt = 
                                                    $arrayRespVerifSolCambioDeOntXExtender["strObtieneSolAgregarEquipoCambioOnt"];
                                                $objSolAgregarEquipoAbiertaCambioOntExt = 
                                                    $arrayRespVerifSolCambioDeOntXExtender["objSolAgregarEquipoCambioOnt"];
                                                if($strObtieneSolAgregarEquipoCambioOntExt === "SI" 
                                                    && is_object($objSolAgregarEquipoAbiertaCambioOntExt))
                                                {
                                                    $intIdSolAgregarEquipoCambioOntExt = $objSolAgregarEquipoAbiertaCambioOntExt->getId();
                                                }
                                                $strEliminaSolsGestionOnt = $arrayRespVerifSolCambioDeOntXExtender["strEliminaSolsGestionOnt"];
                                                
                                                /*
                                                 * Se migra lógica para su ejecución post autorización del contrato.
                                                 * Aplica cuando el servicio de internet se encuentre en estado Factible
                                                 */
                                                if($strCrearSolAgregarEquipoCambioOntExt === "SI" && $strAplicaServicioCIH == "NO")
                                                {
                                                    $objServicioTecnicoInternet = $this->emcom->getRepository('schemaBundle:InfoServicioTecnico')
                                                                                       ->findOneByServicioId($objServicioInternetValido->getId());
                                                    if(!is_object($objServicioTecnicoInternet))
                                                    {
                                                        throw new \Exception('No se pudo obtener la información técnica del '
                                                                             .'servicio de Internet contratado.');
                                                    }
                                                    $intIdElementoCliente = $objServicioTecnicoInternet->getElementoClienteId();
                                                    $arrayRespuestaCrearSolCambioOntExt = $this->servicioTecnico
                                                                                            ->crearSolAutomaticaAgregarEquipoDualBand(
                                                                                                array(  "objServicio"           => 
                                                                                                        $objServicioInternetValido,
                                                                                                        "strCambioOnt"          => "SI",
                                                                                                        "strMotivoCambioOnt"    =>
                                                                                                        $strValorCaractMotivoCambioOnt,
                                                                                                        "strTipoOntNuevo"       =>
                                                                                                        $strValorCaractTipoOntNuevo,
                                                                                                        "intIdElementoCliente"  =>
                                                                                                        $intIdElementoCliente,
                                                                                                        "strEstadoSolicitud"    => 
                                                                                                        "PrePlanificada",
                                                                                                        "strUsrCreacion"        => $usrCreacion,
                                                                                                        "strIpCreacion"         => $clientIp));

                                                    if($arrayRespuestaCrearSolCambioOntExt['status'] === "ERROR")
                                                    {
                                                        throw new \Exception($arrayRespuestaCrearSolCambioOntExt["mensaje"]);
                                                    }

                                                    $objSolicitudAgregarEquipoCambioOntExt = 
                                                        $arrayRespuestaCrearSolCambioOntExt['objSolicitudAgregarEquipo'];
                                                    if(!is_object($objSolicitudAgregarEquipoCambioOntExt))
                                                    {
                                                        throw new \Exception("No se ha podido crear la solicitud para cambiar el ont ");
                                                    }
                                                    $intIdSolAgregarEquipoCambioOntExt = $objSolicitudAgregarEquipoCambioOntExt->getId();
                                                }
                                            }
                                        }
                                    }
                                    else if($objProducto->getNombreTecnico() === "WDB_Y_EDB")
                                    {
                                        $strEliminaServiciosAdiWdb = "SI";
                                        /**
                                         * Si el punto no tiene el equipo Wifi Dual Band, se creará la solicitud de agregar equipo 
                                         * únicamente si el servicio se encuentra en estado Activo, para poder generar por debajo
                                         * el cambio de módem inmediato
                                         * Si el punto si tiene el equipo Wifi Dual Band y se encuentre en estado Activo, 
                                         * se creará la solicitud de agregar equipo para el Extender Dual Band
                                         * 
                                         */
                                        if(is_object($objServicioInternetValido) && $objServicioInternetValido->getEstado() === "Activo" 
                                            && (empty($strInfoEquipoWdbEnlazado) 
                                                || (!empty($strInfoEquipoWdbEnlazado) && empty($strInfoEquipoEdbEnlazado))))
                                        {
                                            $boolCrearSolAgregarEquipo  = true;
                                            $strEliminaSolsDualBand     = "SI";
                                            /**
                                             * Si no se tiene el equipo Wifi Dual Band, se eliminarán todas las solicitudes que gestionan el CPE ONT,
                                             * ya que será gestionada a través de la solicitud de agregar equipo del W+AP
                                             */
                                            if(empty($strInfoEquipoWdbEnlazado))
                                            {
                                                $strEliminaSolsGestionOnt = "SI";
                                                $strObservacionAgregarEquipo    = $strObservacionAgregarEquipo.
                                                                                  '<br>Incluye cambio de CPE ONT de un Wifi Estándar a un '.
                                                                                  'Wifi Dual Band.';
                                                
                                            }
                                            if(!empty($strInfoEquipoWdbEnlazado) && empty($strInfoEquipoEdbEnlazado))
                                            {
                                                $boolEnvioNotifAgregarEquipo    = true;
                                                $strObservacionAgregarEquipo    = $strObservacionAgregarEquipo.
                                                                                  '<br>Incluye agregar equipo Extender Dual Band.';
                                            }
                                        }
                                    }
                                    else
                                    {
                                        /**
                                         * Si el producto es Wifi Dual Band, se debe verificar si el servicio de internet
                                         * tiene asociado un cpe ont, para proceder a realizar la solicitud de agregar equipo, 
                                         * que internamente deberá realizar el cambio de modem inmediato al confirmar el servicio.
                                         * En caso de que el servicio de internet aún no se encuentre Activo, se procederá a dejar 
                                         * el servicio en el estado inicial del producto, y solo se validará al activar el servicio 
                                         * de Internet si existe un producto de estos en dicho estado
                                         */
                                        if(is_object($objServicioInternetValido) && $objServicioInternetValido->getEstado() === "Activo")
                                        {
                                            $boolCrearSolAgregarEquipo = true;
                                        }
                                    }

                                    /*
                                     * Si el internet se encuentra con estado Factible, los servicios 
                                     * adicionales se preplanificarán al autorizar el contrato
                                    */
                                    if($boolCrearSolAgregarEquipo && $strAplicaServicioCIH == "NO")
                                    {
                                        $objSolicitudAgregarEquipo  = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                                  ->findOneByDescripcionSolicitud('SOLICITUD AGREGAR EQUIPO');
                                        $this->crearOrdenTrabajoServicio(   $strCodEmpresa, $idOficina, $entityPunto, 
                                                                            $usrCreacion, $clientIp, $entityServicio, 
                                                                            $tipoOrden, 'PrePlanificada', $objSolicitudAgregarEquipo);
                                        if(is_object($objSolicitudAgregarEquipo))
                                        {
                                            $intIdSolAgregarEquipo  = $objSolicitudAgregarEquipo->getId();
                                        }
                                    }
                                    else
                                    {
                                        $strEstadoInicial = $objProducto->getEstadoInicial();
                                        if($strEstadoInicial)
                                        {
                                            $entityServicio->setEstado($strEstadoInicial);
                                        }
                                        else
                                        {
                                            $entityServicio->setEstado('Pendiente');
                                        }
                                    }
                                    
                                    
                                    if($objProducto->getNombreTecnico() === "WDB_Y_EDB")
                                    {
                                        $arrayInfoWyAp[]    = array("intIdServicioInternet"     => $intIdServicioInternetValido,
                                                                    "strDescripcionProducto"    => $objProducto->getDescripcionProducto(),
                                                                    "intIdSolAgregarEquipo"     => $intIdSolAgregarEquipo,
                                                                    "strEliminaServiciosAdiWdb" => $strEliminaServiciosAdiWdb,
                                                                    "strEliminaSolsDualBand"    => $strEliminaSolsDualBand,
                                                                    "strEliminaSolsGestionOnt"  => $strEliminaSolsGestionOnt);
                                        if(count($arrayInfoWyAp) > 1)
                                        {
                                            throw new \Exception('No se puede crear el servicio ya que no se puede tener más de un servicio  '
                                                                 .'de este tipo por punto');
                                        }
                                    }
                                    
                                    if($objProducto->getNombreTecnico() === "EXTENDER_DUAL_BAND" && $strAplicaServicioCIH == "NO")
                                    {
                                        $arrayInfoExtender[]    = array("intIdServicioInternet"     => $intIdServicioInternetValido,
                                                                        "strDescripcionProducto"    => $objProducto->getDescripcionProducto(),
                                                                        "intIdSolAgregarEquipo"     => $intIdSolAgregarEquipoCambioOntExt,
                                                                        "strEliminaSolsDualBand"    => $strEliminaSolsDualBand,
                                                                        "strEliminaSolsGestionOnt"  => $strEliminaSolsGestionOnt);
                                    }
                                }
                                else if ($objProducto->getRequierePlanificacion() == 'SI')
                                {
                                    // Validamos el tipo de solicitud
                                    $entityTipoSolicitudPlanificacion = null;
                                    $strTipoSolicitud = "SOLICITUD PLANIFICACION";
                                    $arrayParametroTipos = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->get('VALIDA_PROD_ADICIONAL', 
                                                                            'COMERCIAL', '',
                                                                            'Solicitud cableado ethernet',
                                                                            '','','','','',$codEmpresa);
                                    if (is_array($arrayParametroTipos) && !empty($arrayParametroTipos))
                                    {
                                        $objCableParametro = $arrayParametroTipos[0];
                                    }
                                    if ($objCableParametro['valor1'] == $objProducto->getId())
                                    {
                                        $strTipoSolicitud = $objCableParametro['valor2'];
                                    }
                                    $entityTipoSolicitudPlanificacion = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                                ->findOneByDescripcionSolicitud($strTipoSolicitud);

                                    /*
                                     * Si es producto CIH y el internet se encuentra con estado
                                     * Factible, los servicios adicionales se preplanificarán al
                                     * autorizar el contrato
                                    */
                                    if($strAplicaServicioCIH == 'SI')
                                    {
                                        $entityServicio->setEstado('Pendiente');
                                    }
                                    else
                                    {
                                        // Creamos la solicitud del servicio
                                        $this->crearOrdenTrabajoServicio($strCodEmpresa, $idOficina, $entityPunto, $usrCreacion, $clientIp, 
                                        $entityServicio, $tipoOrden, 'PrePlanificada', $entityTipoSolicitudPlanificacion);
                                    }
                                }
                                else if ($objProducto->getRequiereInfoTecnica() == 'SI')
                                {
                                    if (!isset($entityTipoSolicitudInfoTecnica))
                                    {
                                        $entityTipoSolicitudInfoTecnica = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                               ->findOneByDescripcionSolicitud('SOLICITUD INFO TECNICA');
                                    }
                                    $strEstadoBackUp = 'PreAsignacionInfoTecnica';
                                    if($strPrefijoEmpresa == 'TN')
                                    {
                                        $objProducto->getDescripcionProducto();
                                        $arrayHabilitarClearChannel= $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->getOne('HABILITAR_APROVISIO_CLEAR_CHANNEL',
                                                                            'COMERCIAL',
                                                                            '',
                                                                            $objProducto->getDescripcionProducto(),
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            $strCodEmpresa);
                                        
                                        $strHabilitarClearChannel = $arrayHabilitarClearChannel["valor1"];
                                        if($objProducto->getDescripcionProducto() == $strDescripcionClearChannel 
                                          && $strHabilitarClearChannel == 'SI')
                                        {
                                            if($strTipoBackUp == 'BGP')
                                            {
                                                $strEstadoBackUp = 'BGP';
                                            }
                                            elseif ($strTipoBackUp == 'Última Milla') 
                                            {
                                                $strEstadoBackUp = 'Última Milla';
                                            }
                                            else
                                            {
                                                $strEstadoBackUp = 'Pendiente';
                                            }
                                        }
                                    }
                                    
                                    $this->crearOrdenTrabajoServicio($strCodEmpresa, $idOficina, $entityPunto, $usrCreacion, $clientIp, 
                                    $entityServicio, $tipoOrden, $strEstadoBackUp, $entityTipoSolicitudInfoTecnica);
                                                  
                                    if($objProducto->getNombreTecnico() === "IPSB")
                                    {
                                        $strNombreTecnicoProd   = $objProducto->getNombreTecnico();
                                        $strNompreOpcionIpSb    = "CREAR_".$objProducto->getNombreTecnico();
                                        $boolEnvioNotifIPSB     = true;
                                    }
                                }
                                else
                                {
                                    $boolParametroNombreTecnico = false;
                                    $arrayParamsNombreTecnico  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                            ->getOne('NOMBRE_TECNICO_PRODUCTOS','','',
                                                                                                     '',
                                                                                                     $objProducto->getDescripcionProducto(),
                                                                                                     '',
                                                                                                     '',
                                                                                                     '',
                                                                                                     '',$strCodEmpresa); 

                                    if(isset($arrayParamsNombreTecnico) && !empty($arrayParamsNombreTecnico))
                                    {
                                        $boolParametroNombreTecnico = true;
                                    }
                                    
                                    $strEstadoInicial = $objProducto->getEstadoInicial();
                                    //se pregunta por el producto?
                                    if($objProducto->getNombreTecnico() == 'SECSALES' && !$boolParametroNombreTecnico)
                                    {
                                        $objProductoInterSdwan    = $this->emcom->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                                'descripcionProducto' => 'INTERNET SDWAN',
                                                                                                'empresaCod'          => $strCodEmpresa));

                                        $objProductoDatoSdwan    = $this->emcom->getRepository('schemaBundle:AdmiProducto')->findOneBy(array(
                                                                                                'descripcionProducto' => 'L3MPLS SDWAN',
                                                                                                'empresaCod'          => $strCodEmpresa));
                                        if((is_object($objProductoInterSdwan) && !empty($objProductoInterSdwan)) || 
                                            (is_object($objProductoDatoSdwan) && !empty($objProductoDatoSdwan)))
                                        {
                                            if(is_object($objProductoInterSdwan) && !empty($objProductoInterSdwan))
                                            {
                                                $objServicioInternetSdwan = $this->emcom->getRepository('schemaBundle:InfoServicio')->findOneBy(
                                                                                            array('puntoId' => $entityPunto->getId(),
                                                                                                  'productoId' => $objProductoInterSdwan->getId()));
                                            }

                                            if(is_object($objProductoDatoSdwan) && !empty($objProductoDatoSdwan))
                                            {
                                                $objServicioDatosSdwan = $this->emcom->getRepository('schemaBundle:InfoServicio')->findOneBy(
                                                                                            array('puntoId' => $entityPunto->getId(),
                                                                                                  'productoId' => $objProductoDatoSdwan->getId()));
                                            }
                                            if((!is_object($objServicioInternetSdwan) && empty($objServicioInternetSdwan)) &&
                                                (!is_object($objServicioDatosSdwan) && empty($objServicioDatosSdwan)))
                                            {
                                                $strEstadoInicial = 'Pendiente';
                                            }
                                        }
                                    }
                                    //fin
                                    if($strEstadoInicial)
                                    {
                                        // Obtengo el estado permitido para el servicio
                                        $objParamEstado = null;
                                        $arrayValoresParametros = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->get('PRODUCTOS ADICIONALES AUTOMATICOS','COMERCIAL','',
                                                                            'Estados permitidos para los productos adicionales',
                                                                            '','','','','',$strCodEmpresa);
                                        if(is_array($arrayValoresParametros) && !empty($arrayValoresParametros))
                                        {
                                            $objParamEstado = $arrayValoresParametros[0];
                                        }
                                        // Verificamos si es un servicio adicional parametrizado
                                        $arrayListadoServicios = array();
                                        $arrayListadoServicios = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->get('PRODUCTOS ADICIONALES AUTOMATICOS','COMERCIAL','',
                                                                        'Lista de productos adicionales automaticos',
                                                                        '','','','','',$strCodEmpresa);
                                        // Obtenemos el estado actual del servicio de internet
                                        $arrayServiciosActuales = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                                    ->findServiciosByPuntoAndEstado($entityPunto->getId(), null, null);
                                        $objServicioActual = null;
                                        if(is_array($arrayServiciosActuales) && !empty($arrayServiciosActuales))
                                        {
                                            foreach($arrayServiciosActuales['registros'] as $objActual)
                                            {
                                                if ($objActual->getPlanId()!=null)
                                                {
                                                    $objServicioActual = $objActual;
                                                }
                                            }
                                        }
                                        if (!empty($objServicioActual) &&
                                            $objServicioActual->getEstado() == $objParamEstado['valor2'])
                                        {
                                            foreach($arrayListadoServicios as $objListado)
                                            {
                                                if ($objProducto->getId() == $objListado['valor1'] &&
                                                    $objListado['valor3'] == "NO")
                                                {
                                                    $strEstadoInicial = $objParamEstado['valor2'];
                                                    $strObservacionHistorial = "Se activa automaticamente por servicio de internet activo";
                                                }
                                            }
                                        }
                                        $entityServicio->setEstado($strEstadoInicial);
                                    }
                                    else
                                    {
                                        $entityServicio->setEstado('Pendiente');
                                    } 
                                    
                                    //Consultamos si el producto requiere flujo ya que antes no lo tenia
                                    $arrayParametrosRequiereFlujo =   $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                           ->getOne("REQUIERE_FLUJO", 
                                                                                    "TECNICO", 
                                                                                    "", 
                                                                                    "", 
                                                                                    $objProducto->getDescripcionProducto(), 
                                                                                    "", 
                                                                                    "",
                                                                                    "",
                                                                                    "",
                                                                                    10
                                                                                );
                                    if(!is_array($arrayParametrosRequiereFlujo) && empty($arrayParametrosRequiereFlujo))
                                    {
                                        $boolRequiereFlujo = false;
                                    }
                                    else
                                    {
                                        $boolRequiereFlujo = true;
                                    }

                                    // Consultamos si el producto requiere flujo
                                    if ($boolRequiereFlujo)
                                    {
                                        $entityTipoSolicitudPlanificacion = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                             ->findOneByDescripcionSolicitud('SOLICITUD PLANIFICACION');
                                        $this->crearOrdenTrabajoServicio($strCodEmpresa, $idOficina, $entityPunto, $usrCreacion, $clientIp, 
                                                                         $entityServicio, $tipoOrden, $strEstadoInicial, 
                                                                         $entityTipoSolicitudPlanificacion);
                                    }
                                    
                                }
                            }
                        }
                    }
                    else if ($info == 'P')
                    {
                        // portafolio de planes 
                        if(!$frecuencia || !is_numeric($frecuencia))
                        {
                            $frecuencia = $objServicioRepository->obtenerFrecuencia($id);

                            if(!$frecuencia || $frecuencia < 0 || !is_numeric($frecuencia))
                            {                                         
                                throw new \Exception('No se permite el ingreso del servicio por no poseer una Frecuencia válida para su Facturación');
                            }
                        }
                        
                        $entityPlan = $this->emcom->getRepository('schemaBundle:InfoPlanCab')->findOneById($id);
                        $entityServicio->setPlanId($entityPlan);
                        
                        $boolSigueFlujoPP       = false;
                        
                        
                        $arrayParamSigueFlujoPP = array(
                                                            "intIdPlan"                         => $id,
                                                            "strDescripcionCaracteristicaPlan"  => 'FLUJO_PREPLANIFICACION_PLANIFICACION',
                                                            "strEstado"                         => "Activo"
                                                      );
                        $arrayRespuestaSigueFlujoPP          = $this->emcom->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                                             ->getCaracteristicasPlanByCriterios($arrayParamSigueFlujoPP);
                        $intTotalCaractSigueFlujoPP          = $arrayRespuestaSigueFlujoPP['intTotal'];
                        $arrayResultadoCaractSigueFlujoPP    = $arrayRespuestaSigueFlujoPP['arrayResultado'];

                        if($intTotalCaractSigueFlujoPP>0 && $arrayResultadoCaractSigueFlujoPP[0] 
                            && $arrayResultadoCaractSigueFlujoPP[0]['strValor'] =="SI" )
                        {
                            $boolSigueFlujoPP = true; 
                        }

                        if($boolSigueFlujoPP)
                        {
                            if($intIdSolFlujoPP)
                            {
                                $objTipoSolicitudPP =$this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')->find($intIdSolFlujoPP);
                                if(is_object($objTipoSolicitudPP))
                                {
                                    $strDescripcionSolicitudPP  = $objTipoSolicitudPP->getDescripcionSolicitud();
                                    $strEstadoOrdenTrabajo      = "";
                                    if($strDescripcionSolicitudPP=="SOLICITUD PREPLANIFICACION")
                                    {
                                        /*
                                         * El servicio del plan de internet se encuentra en estado In-Corte, por ende 
                                         * se permite el ingreso del servicio pero se lo deja en estado Pendiente
                                         */
                                        $entityServicio->setEstado('Pendiente');
                                        $strEstadoOrdenTrabajo = "Pendiente";
                                    }
                                    else if($strDescripcionSolicitudPP=="SOLICITUD PLANIFICACION")
                                    {
                                        $entityServicio->setEstado('PrePlanificada');
                                        $strEstadoOrdenTrabajo = "PrePlanificada";
                                    }
                                    else
                                    {
                                        throw new \Exception("No se ha podido obtener el la descripción del tipo de solicitud con id "
                                                            .$intIdSolFlujoPP);
                                    }
                                    $this->crearOrdenTrabajoServicio($strCodEmpresa,$idOficina,$entityPunto,$usrCreacion,$clientIp, $entityServicio, 
                                                                     $tipoOrden, $strEstadoOrdenTrabajo, $objTipoSolicitudPP);
                                }
                                else
                                {
                                    throw new \Exception("No se ha podido obtener el objeto tipo solicitud con el id ".$intIdSolFlujoPP);
                                }
                            }
                            else
                            {
                                throw new \Exception("No se ha enviado el parámetro intIdSolFlujoPP con el id del tipo de solicitud");
                            }
                        }
                        else
                        {
                            $datosPlan  = $this->emcom->getRepository('schemaBundle:InfoPlanCab')->getPlanRequiereInternet($entityPlan->getId());
                            if (count($datosPlan) <= 0)
                            {
                                $entityServicio->setEstado('Pendiente');
                            }
                            else
                            {
                                $entityServicio->setEstado('Pre-servicio');
                            }
                        }
                    }

                    $objParametroDetValProd =   $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne("VALIDA_PRODUCTO_PAQUETE_HORAS_SOPORTE", //nombre parametro cab
                            "SOPORTE", "", 
                            "VALORES QUE AYUDAN A IDENTIFICAR QUE PRODUCTO ES PARA LA MUESTRA DE OPCIONES EN LA VISTA", //descripcion det
                            "", "", "", "", "", $strCodEmpresa
                        );

                    $strValorProductoPaqHoras = $objParametroDetValProd['valor1'];
                    $strValorProductoPaqHorasRec = $objParametroDetValProd['valor2'];
                    
                              

                    $entityServicio->setFrecuenciaProducto($frecuencia);
                    $entityServicio->setMesesRestantes($frecuencia); // Meses restantes será igual a la frecuencia de facturación.
                    $this->emcom->flush();
                    if (!$entityServicio->getId())
                    {
                        // si aun no se ha persistido el servicio, guardarlo
                        $entityServicio->setUsrCreacion($usrCreacion);
                        $entityServicio->setIpCreacion($clientIp);

                        
                        if(!is_null($objProducto))
                        {
                            $arrayClienteCamara = $emGeneral->getRepository("schemaBundle:AdmiParametroDet")->get(
                                "CLIENTES SOPORTE LOGICO CAMARA",
                                "COMERCIAL",
                                "",
                                "",
                                $entityPunto->getPersonaEmpresaRolId()->getId(),
                                $objProducto->getId(),
                                "",
                                "",
                                "",
                                $strCodEmpresa
                            );

                            if(is_array($arrayClienteCamara) && !empty($arrayClienteCamara))
                            {
                                                          
                              $entityServicio->setFeCreacion(new \DateTime($arrayClienteCamara[0]["valor4"]));
                              
                            }else
                            {
                             $entityServicio->setFeCreacion(new \DateTime('now'));
                            }
                        }else
                        {
                            $entityServicio->setFeCreacion(new \DateTime('now'));
                        }

                        
                        $this->validator->validateAndThrowException($entityServicio);
                        $this->emcom->persist($entityServicio);
                        $this->emcom->flush();
                    }

                    if ($strCodEmpresa == '10' && $strPrefijoEmpresa == 'TN')
                    {

                        $strTipoProducto = $entityServicio->getProductoId()->getDescripcionProducto();

                        if ($strTipoProducto == $strValorProductoPaqHoras || $strTipoProducto == $strValorProductoPaqHorasRec)
                        {
                                $arrayPaqueteHorasSop = array();
                                $this->servicioTecnico->generarLoginAuxiliar($entityServicio->getId());
                                $arrayPaqueteHorasSop['tipoProducto'] = $strTipoProducto == 
                                $strValorProductoPaqHoras ? $strValorProductoPaqHoras:$strValorProductoPaqHorasRec;  
                                $arrayPaqueteHorasSop['tipo'] = $strTipoPaquete ? : "nuevo";
                                $arrayPaqueteHorasSop['strUuidPaquete'] = $strUuidPaquete;
                                $arrayPaqueteHorasSop['personaEmpresaRolId'] = $entityServicio
                                ->getPuntoFacturacionId()->getPersonaEmpresaRolId()->getId();
                                $arrayPaqueteHorasSop['puntoPaqueteId'] = $entityServicio->getPuntoId()->getId();
                                $arrayPaqueteHorasSop['servicioPaqueteId'] = $entityServicio->getId();
                                $arrayPaqueteHorasSop['usuario'] = $usrCreacion;
                                $arrayPaqueteHorasSop['servicios'] = array(array('punto_soporte_id' => $arrayPaqueteHorasSop['puntoPaqueteId'],
                                'servicio_soporte_id' => $arrayPaqueteHorasSop['servicioPaqueteId'],
                                'permite_activar_paquete' => 'S'));

                        }
                        
                    }
                    

                    /*Obtenemos el parametro desde la base.*/
                    $arrayAdmiParametroCar  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                        ->getOne('CARACTERISTICAS_ZERO_TOUCH',
                            'TECNICO',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '10');

                    /*Obtenemos el parametro desde la base.*/
                    $arrayAdmiParametroProd  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                        ->getOne('PRODUCTOS_ZERO_TOUCH',
                            'TECNICO',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '10');

                    /*Obtenemos el parametro desde la base.*/
                    $arrayAdmiParametroUm  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                        ->getOne('UM_ZERO_TOUCH',
                            'TECNICO',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '10');

                    /*Obtenemos el parametro desde la base.*/
                    $arrayAdmiParametroCiudades  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                        ->getOne('CIUDADES_ZERO_TOUCH',
                            'TECNICO',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '',
                            '10');

                    /*Validamos que haya llegado el parametro mediante un ternario.*/
                    $arrayProductosZeroTouch = !empty($arrayAdmiParametroProd) ?
                        json_decode($arrayAdmiParametroProd['valor1'], true) :
                        null;

                    /*Validamos que haya llegado el parametro mediante un ternario.*/
                    $arrayCaracteristicasZeroTouch = !empty($arrayAdmiParametroCar) ?
                        json_decode($arrayAdmiParametroCar['valor1'], true) :
                        null;

                    /*Validamos que haya llegado el parametro mediante un ternario.*/
                    $arrayUmPermitidas = !empty($arrayAdmiParametroUm) ?
                        json_decode($arrayAdmiParametroUm['valor1'], true) :
                        null;

                    /*Validamos que haya llegado el parámetro mediante un ternario.*/
                    $arrayCiudadesPermitidas = !empty($arrayAdmiParametroCiudades) ?
                        json_decode($arrayAdmiParametroCiudades['valor1'], true) :
                        null;

                    /*Obtenemos un valor para los login permitidos como parte de un piloto.*/
                    $arrayLoginPermitidos = !empty($arrayAdmiParametroCiudades) ?
                        json_decode($arrayAdmiParametroCiudades['valor3'], true) :
                        null;

                    /*Obtenemos el id del canton en base al punto del servicio.*/
                    $intCantonId = $entityPunto->getSectorId()->getParroquiaId()->getCantonId()->getId();

                    /*Definimos variable para que identifique que es una ciudad permitida.*/
                    $boolCiudadPermitida = false;
                    /*Validamos que existan las variables estén definidas.*/
                    if ($arrayCiudadesPermitidas && $intCantonId)
                    {
                        /*Validamos que el contenido de la variable sea un array.*/
                        if (is_array($arrayCiudadesPermitidas))
                        {
                            /*Validamos que el canton id este dentro del arreglo de ciudades/cantones permitidos.*/
                            $boolCiudadPermitida = in_array($intCantonId, $arrayCiudadesPermitidas);
                        }
                        /*Validamos que la variable sea un string y sea igual a TODAS.*/
                        elseif (is_string($arrayCiudadesPermitidas) && $arrayCiudadesPermitidas == "TODAS")
                        {
                            /*Si la variable cumple con lo anterior cambia el valor del bool.*/
                            $boolCiudadPermitida = true;
                        }
                    }

                    /*TODO: Eliminar esta sección, solo fue habilitada para realizar un piloto cerrado.*/
                    /*Definimos variable para que identifique que es un login permitido.*/
                    $boolLoginPermitidos = false;
                    /*Validamos que exista el punto en la entidad del servicio.*/
                    if (is_object($entityServicio->getPuntoId()) && is_array($arrayLoginPermitidos))
                    {
                        $boolLoginPermitidos = in_array($entityServicio->getPuntoId()->getLogin(), $arrayLoginPermitidos);
                    }elseif (is_object($entityServicio->getPuntoId()) && is_string($arrayLoginPermitidos))
                    {
                        $boolLoginPermitidos = $arrayLoginPermitidos == 'TODOS';
                    }

                    /*Definimos variable para que identifique que es un producto permitido zerotouch.*/
                    $boolProductoZeroTouch = false;
                    /*Validamos que exista un producto en la entidad del servicio.*/
                    if (is_object($entityServicio->getProductoId()))
                    {
                        $boolProductoZeroTouch = in_array($entityServicio->getProductoId()->getId(), $arrayProductosZeroTouch);
                    }

                    $intUltimaMillaZero = !empty($ultimaMillaId) ? $ultimaMillaId : intval($valor['ultimaMilla']);

                    if (($arrayCaracteristicasZeroTouch && $arrayProductosZeroTouch && $arrayUmPermitidas) &&
                        in_array($intUltimaMillaZero, $arrayUmPermitidas)
                        && $boolProductoZeroTouch && $boolCiudadPermitida && $boolLoginPermitidos)
                    {
                        /*Por cada registro en el arreglo vamos a crear una característica.*/
                        foreach ($arrayCaracteristicasZeroTouch as $key=>$arrayCaract)
                        {
                            $this->servicioTecnico->ingresarServicioProductoCaracteristica(
                                $entityServicio,
                                $objProducto,
                                $arrayCaract['nombre'],
                                $arrayCaract['valorInicial'],
                                $usrCreacion);
                        }

                        /*Insertamos en el historial del servicio los elementos.*/
                        $this->servicioTecnico->insertarHistorialServicio(
                            array(
                                'intIdServicio' => $entityServicio->getid(),
                                'strObservacion' => 'Producto habilitado para ZeroTouch: OK.' ,
                                'strUsuarioCreacion' => $usrCreacion
                            ));

                    }

                    if( $info == 'C' )
                    {
                        //Verificación de característica 'FOX_PREMIUM, PARAMOUNT y NOGGIN' sólo para productos
                        $arrayProducto = $this->serviceFoxPremium->determinarProducto(array('intIdProducto'=>$id));
                        if ($arrayProducto['Status'] == 'OK')
                        {
                            $arrayParametrosCaract = array(  'intIdProducto'         => $id, 
                                                             'strDescCaracteristica' => $arrayProducto['strDescCaracteristica'], 
                                                             'strEstado'             => 'Activo' );
                            $strEsProdCarac  = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaract);
                            if( !empty($strEsProdCarac) && $strEsProdCarac == "S" )
                            {                            
                                $objInfoPersona = $this->emcom->getRepository('schemaBundle:InfoPersona')
                                                                  ->find($entityPunto->getPersonaEmpresaRolId()
                                                                                     ->getPersonaId()
                                                                                     ->getId());
                                if(!is_object($objInfoPersona))
                                {
                                    throw new \Exception("No se pudo guardar el Servicio - No se encontro Persona para generar "
                                           ."Usuario para el servicio ".  $arrayProducto['strMensaje']);
                                }
                                //para servicios nuevos se realiza el flujo de guardar correo electronico
                                if (isset($valor['caracteristicasProducto']))
                                {
                                    if (!is_array($valor['caracteristicasProducto']))
                                    {
                                        $arrayCaractProd = json_decode($valor['caracteristicasProducto'], true);
                                    }
                                    else
                                    {
                                        $arrayCaractProd = $valor['caracteristicasProducto'];
                                    }
                                }
                                // CONSULTAR PRODUCTOS QUE NO REQUIEREN CREAR CREDENCIALES
                                $objProdGenCred = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('PRODUCTOS_STREAMING_SIN_CREDENCIALES',//nombre parametro cab
                                                              'COMERCIAL', //modulo cab
                                                              'OBTENER_NOMBRE_TECNICO',//proceso cab
                                                              'PRODUCTOS_STREAMING_SIN_CREDENCIALES', //descripcion det
                                                              $arrayProducto['strNombreTecnico'],'','','','',
                                                              $strCodEmpresa); //empresa

                                $arrayParametrosServProdCarac = array('intIdPersona'   => $objInfoPersona->getId(), 
                                                                    'intIdPersonaRol'   => $entityPunto->getPersonaEmpresaRolId()->getId(),
                                                                    'intIdServicio'     => $entityServicio->getId(),
                                                                    'intIdProducto'     => $id,
                                                                    'strUsrCreacion'    => $usrCreacion,
                                                                    'intIdPuntoCliente' => $entityPunto->getId()
                                                                    );
                                if(is_array($objProdGenCred) && !empty($objProdGenCred))
                                {
                                    $this->serviceFoxPremium->guardaServProdCaracSinCredenciales($arrayParametrosServProdCarac);
                                    $arrayParametrosUrlToken = array('strUsrCreacion'         => $usrCreacion,
                                                                     'arrayCaracteristicas'   => $arrayCaractProd,
                                                                     'strNombreTecnico'       => $arrayProducto['strNombreTecnico'],
                                                                     'strCrearPassword'       => "SI",
                                                                     'strEmpresaCod'          => $strCodEmpresa);
                                }
                                else 
                                {
                                    $this->serviceFoxPremium->guardaServProdCarac($arrayParametrosServProdCarac);
                                }
                                //valida si el plan esta en un estado diferente de Activo 
                                //para que permita ingresar el producto PAramoun o Noggin en estado pendiente
                                
                                //Producto de tv permitidos para agregar en estado pendiente.
                                $arrayParametrosDetProdTV = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('FLUJO_INGRESO_POR_ESTADO_INTERNET',//nombre parametro cab
                                                              'COMERCIAL', //modulo cab
                                                              'OBTENER_NOMBRE_TECNICO',//proceso cab
                                                              'FLUJO_ESTADO_PENDIENTE', //descripcion det
                                                              $arrayProducto['strNombreTecnico'],'','','','',
                                                              $strCodEmpresa); //empresa
                                
                                if(is_array($arrayParametrosDetProdTV) && !empty($arrayParametrosDetProdTV))
                                {
                                    $objServicioInternet = null;
                                    $arrayEstadosProdTV  = array();
                                    $arrayProdTVyEstados = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                       ->get( 'VALIDA_ESTADOS_INTERNET',//nombre parametro cab
                                                                              'COMERCIAL', //modulo cab
                                                                              'OBTENER_PROD_TV_Y_ESTADOS_PERMITIDOS',//proceso cab
                                                                              'PRODUCTO', //descripcion det
                                                                              $arrayProducto['strNombreTecnico'],'','','','',
                                                                              $strCodEmpresa); //empresa
                                    if(!empty($arrayProdTVyEstados))
                                    {
                                        foreach($arrayProdTVyEstados as $arrayProdTv)
                                        {
                                            $arrayEstadosProdTV[]   = $arrayProdTv['valor2'];
                                        }
                                        $arrayParamsServicioInternet    = array('estadosServicios'          => $arrayEstadosProdTV,
                                                                                'productoInternetPorLogin'  => 'S',
                                                                                'estadoActivo'              => 'Activo',
                                                                                'empresaCod'                => $strCodEmpresa,
                                                                                'intIdPuntoCliente'         => $entityPunto->getId(),
                                                                                'nombreTecnicoProducto'     => 'INTERNET',
                                                                                'omiteEstadoPunto'          => "SI");
                                        $arrayConsultaServiciosInternet = $this->emCome->getRepository('schemaBundle:InfoServicio')
                                                                                       ->getServiciosByCriterios($arrayParamsServicioInternet);
                                        //Se verifica que exista un servicio de Internet en un estado permitido
                                        if(isset($arrayConsultaServiciosInternet['total']) && !empty($arrayConsultaServiciosInternet['total'])
                                            && $arrayConsultaServiciosInternet['total'] > 0 )
                                        {
                                            $objServicioInternet = $arrayConsultaServiciosInternet['registros'][0];
                                        }
                                        else
                                        {
                                            
                                            $arrayRespuestaServInternetValido   = $this->servicioTecnico
                                                                                   ->obtieneServicioInternetValido(array(
                                                                                        "intIdPunto"    => $entityPunto->getId(),
                                                                                        "strCodEmpresa" => $strCodEmpresa
                                                                                                                  ));
                                            $objServicioInternet                = $arrayRespuestaServInternetValido["objServicioInternet"];

                                        }
                                    }
                                    else
                                    {
                                        $arrayRespuestaServInternetValido   = $this->servicioTecnico
                                                                                   ->obtieneServicioInternetValido(array(
                                                                                        "intIdPunto"    => $entityPunto->getId(),
                                                                                        "strCodEmpresa" => $strCodEmpresa
                                                                                                                  ));
                                        $objServicioInternet                = $arrayRespuestaServInternetValido["objServicioInternet"];

                                    }
                                    
                                    if($objServicioInternet == null)
                                    {
                                        throw new \Exception("El punto no tiene un servicio de Internet agregado");
                                    }
                                    if ($objServicioInternet->getEstado()=='Activo' && is_array($objProdGenCred) 
                                        && !empty($objProdGenCred)) 
                                    {
                                        $arrayUrlToken = $this->serviceFoxPremium->obtenerUrlActivarServicio($arrayParametrosUrlToken);
                                    }
                                    if ($objServicioInternet->getEstado()!='Activo')
                                    {
                                        $entityServicio->setEstado("Pendiente");
                                        $this->emcom->persist($entityServicio);

                                        //Historial del servicio por Activación del Servicio PARAMOUNT O NOGGIN
                                        $objInfoServicioHistorialFox = new InfoServicioHistorial();
                                        $objInfoServicioHistorialFox->setServicioId($entityServicio);
                                        $objInfoServicioHistorialFox->setObservacion($arrayParametrosDetProdTV['valor7']);
                                        $objInfoServicioHistorialFox->setEstado("Pendiente");
                                        $objInfoServicioHistorialFox->setUsrCreacion($usrCreacion);
                                        $objInfoServicioHistorialFox->setFeCreacion(new \DateTime('now'));
                                        $objInfoServicioHistorialFox->setIpCreacion($clientIp);
                                        $this->emcom->persist($objInfoServicioHistorialFox);
                                    }
                                    else
                                    {
                                        if (is_array($objProdGenCred) && !empty($objProdGenCred) 
                                            && $arrayUrlToken["status"] !== "OK") 
                                        {
                                            $entityServicio->setEstado("Pendiente");
                                            $this->emcom->persist($entityServicio);
                                            $strObservacionToken = "Servicio pendiente por falla en comunicación con WS Security";
                                            //Historial del servicio por Activación del Servicio PARAMOUNT O NOGGIN
                                            $objInfoServicioHistorialFox = new InfoServicioHistorial();
                                            $objInfoServicioHistorialFox->setServicioId($entityServicio);
                                            $objInfoServicioHistorialFox->setObservacion($strObservacionToken);
                                            $objInfoServicioHistorialFox->setEstado("Pendiente");
                                            $objInfoServicioHistorialFox->setUsrCreacion($usrCreacion);
                                            $objInfoServicioHistorialFox->setFeCreacion(new \DateTime('now'));
                                            $objInfoServicioHistorialFox->setIpCreacion($clientIp);
                                            $this->emcom->persist($objInfoServicioHistorialFox);
                                        }
                                        else 
                                        {
                                            $entityServicio->setEstado("Activo");
                                            $this->emcom->persist($entityServicio);

                                            //Historial del servicio por Activación del Servicio PARAMOUNT O NOGGIN
                                            $objInfoServicioHistorialFox = new InfoServicioHistorial();
                                            $objInfoServicioHistorialFox->setServicioId($entityServicio);
                                            $objInfoServicioHistorialFox->setObservacion("Otros: Se confirmo el servicio");
                                            $objInfoServicioHistorialFox->setEstado("Activo");
                                            $objInfoServicioHistorialFox->setUsrCreacion($usrCreacion);
                                            $objInfoServicioHistorialFox->setFeCreacion(new \DateTime('now'));
                                            $objInfoServicioHistorialFox->setIpCreacion($clientIp);
                                            $objInfoServicioHistorialFox->setAccion('confirmarServicio');
                                            $this->emcom->persist($objInfoServicioHistorialFox);
                                            $this->emcom->flush();
                                            $strNombreCliente = $objInfoPersona->getNombres()." ".$objInfoPersona->getApellidos();
                                            $this->serviceFoxPremium->activarServicio(array("strUsrCreacion" => $usrCreacion,
                                                                                        "strClientIp"    => $clientIp,
                                                                                        "intIdProducto"  => $id,
                                                                                        "strEmpresaCod"  => $strCodEmpresa,
                                                                                        "intIdServicio"  => $entityServicio->getId(),
                                                                                        'arrayCaracteristicas' => $arrayCaractProd,
                                                                                        'strCliente'     => $strNombreCliente,
                                                                                        'strUrlProducto' => $arrayUrlToken["url"]));
                                        }
                                    }
                                }
                                else
                                {
                                    //Flujo de Activación Automatica de FOX Premium
                                    $entityServicio->setEstado("Activo");
                                    $this->emcom->persist($entityServicio);
        
                                    //Historial del servicio por Activación del Servicio FOX
                                    $objInfoServicioHistorialFox = new InfoServicioHistorial();
                                    $objInfoServicioHistorialFox->setServicioId($entityServicio);
                                    $objInfoServicioHistorialFox->setObservacion("Otros: Se confirmó el servicio");
                                    $objInfoServicioHistorialFox->setEstado("Activo");
                                    $objInfoServicioHistorialFox->setUsrCreacion($usrCreacion);
                                    $objInfoServicioHistorialFox->setFeCreacion(new \DateTime('now'));
                                    $objInfoServicioHistorialFox->setIpCreacion($clientIp);
                                    $objInfoServicioHistorialFox->setAccion('confirmarServicio');
                                    $this->emcom->persist($objInfoServicioHistorialFox);
                                    
                                    $this->serviceFoxPremium->activarServicio(array("strUsrCreacion" => $usrCreacion,
                                                                                    "strClientIp"    => $clientIp,
                                                                                    "strEmpresaCod"  => $strCodEmpresa,
                                                                                    "intIdServicio"  => $entityServicio->getId()));
                                }
                            }
                        }
                        $objProducto = $entityServicio->getProductoId();
                        
                        //Verificación de característica 'NETFIBER' sólo para productos
                        $arrayParametrosCaractNetFiber= array( 'intIdProducto'         => $id, 
                                                               'strDescCaracteristica' => 'NETFIBER', 
                                                               'strEstado'             => 'Activo' );
                        $strEsNetFiber                = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaractNetFiber);                                        
                        
                        if(!empty($strEsNetFiber) && $strEsNetFiber == "S")
                        {                            
                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                          $objProducto, 
                                                                                          'NETFIBER',
                                                                                          'S',
                                                                                          $usrCreacion); 
                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                          $objProducto, 
                                                                                          'FACTURABLE_ADICIONAL',
                                                                                          'S',
                                                                                          $usrCreacion);   
                            
                            $objCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                             ->findOneBy(array('descripcionCaracteristica' => 'CANTIDAD_TRANSCEIVER', 
                                                                               'tipo'                      => 'COMERCIAL'
                                                                        ));
                            if(is_object($objCaracteristica))
                            {
                                $objProdCaractCantTransceiver = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                            ->findOneBy(array(
                                                                                              "productoId"       => $objProducto->getId(),
                                                                                              "caracteristicaId" => $objCaracteristica->getId(),
                                                                                              "estado"           => "Activo"                               
                                                                                             ));
                                if(is_object($objProdCaractCantTransceiver))
                                {
                                    //Obtengo para el producto NETFIBER la cantidad de transceiver que se registrara y que esta incluido en el KIT
                                    //del producto NETFIBER.
                                    $arrayParametroDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                              ->getOne('FACTURABLES_FACTURACION_UNICA',
                                                                       'FACTURACION',
                                                                       'FACTURACION_UNICA', 
                                                                       '', 
                                                                       $objProdCaractCantTransceiver->getId(),
                                                                       'CANTIDAD_TRANSCEIVER',
                                                                       '', 
                                                                       '',
                                                                       '',
                                                                       $strCodEmpresa);
                                    //Obtengo la cantidad de transceiver que se registrara y que esta incluido en el KIT.
                                    $strValorCaracteristica     = ( isset($arrayParametroDet["valor4"]) && !empty($arrayParametroDet["valor4"]) )
                                                                   ? $arrayParametroDet["valor4"] : "";
                                         
                                    if($strValorCaracteristica != '')
                                    {
                                        $objServProdCaractCantTransceiver = new InfoServicioProdCaract();
                                        $objServProdCaractCantTransceiver->setServicioId($entityServicio->getId());
                                        $objServProdCaractCantTransceiver->setProductoCaracterisiticaId($objProdCaractCantTransceiver->getId());
                                        $objServProdCaractCantTransceiver->setValor($strValorCaracteristica);
                                        $objServProdCaractCantTransceiver->setEstado('Activo');
                                        $objServProdCaractCantTransceiver->setUsrCreacion($usrCreacion);
                                        $objServProdCaractCantTransceiver->setFeCreacion(new \DateTime('now'));
                                        $this->emcom->persist($objServProdCaractCantTransceiver);
                                        $this->emcom->flush();
                                        $objServicioHist = new InfoServicioHistorial();
                                        $objServicioHist->setServicioId($entityServicio);
                                        $objServicioHist->setObservacion('Se ingresó valor de [CANTIDAD_TRANSCEIVER] : '.$strValorCaracteristica);
                                        $objServicioHist->setIpCreacion($entityServicio->getIpCreacion());
                                        $objServicioHist->setFeCreacion(new \DateTime('now'));
                                        $objServicioHist->setUsrCreacion($entityServicio->getUsrCreacion());
                                        $objServicioHist->setEstado($entityServicio->getEstado());
                                        $this->emcom->persist($objServicioHist);
                                    }
                                }
                            }
                        }
                        
                        //Verificación de característica 'APWIFI' sólo para productos
                        $arrayParametrosCaractApWifi = array( 'intIdProducto'         => $id, 
                                                              'strDescCaracteristica' => 'APWIFI', 
                                                              'strEstado'             => 'Activo' );
                        $strEsApWifi                 = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaractApWifi);                                        
                        
                        if(!empty($strEsApWifi) && $strEsApWifi == "S")
                        {                            
                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                           $objProducto, 
                                                                                           'APWIFI',
                                                                                           'S',
                                                                                           $usrCreacion); 
                        }
                        
                        //Verificación de característica 'FACTURACION_UNICA' sólo para productos
                        $arrayParametrosCaractFactUnica= array( 'intIdProducto'         => $id, 
                                                                'strDescCaracteristica' => 'FACTURACION_UNICA', 
                                                                'strEstado'             => 'Activo' );
                        $strTieneFactUnica             = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaractFactUnica);
                        
                        $arrayParametrosCaractRenta    = array( 'intIdProducto'         => $id, 
                                                                'strDescCaracteristica' => 'RENTA_MENSUAL', 
                                                                'strEstado'             => 'Activo' );
                        $strTieneRentaMensual          = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaractRenta);
                        
                        if((!empty($strTieneFactUnica) && $strTieneFactUnica == "S" ) 
                            && (empty($strTieneRentaMensual) || (!empty($strTieneRentaMensual) && $strTieneRentaMensual == "N"))
                        )
                        {
                            if($frecuencia != "0")
                            {                              
                                 throw new \Exception('No se puede agregar producto '.$objProducto->getDescripcionProducto().' ya que es de '
                                    . '[FACTURACION_UNICA] y la Frecuencia que debe escoger es [UNICA]');
                            }
                        }
                        else
                        {
                            if(!empty($strTieneFactUnica) && $strTieneFactUnica == "N" && $frecuencia == "0")
                            {                                
                                 throw new \Exception('No se puede agregar producto '.$objProducto->getDescripcionProducto().' ya que no es de '
                                    . '[FACTURACION_UNICA] no puede escoger Frecuencia [UNICA]');
                            }
                        }
                        $strValorFactUnica     = ( is_numeric($frecuencia) && $frecuencia == 0 ) ? "S" : "N";
                        $strValorRentaMensual  = ( is_numeric($frecuencia) && $frecuencia >=1 ) ? "S" : "N";                                                
                        
                        if(!empty($strTieneFactUnica) && $strTieneFactUnica == "S")
                        {   
                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                           $objProducto, 
                                                                                           'FACTURACION_UNICA',
                                                                                           $strValorFactUnica,
                                                                                           $usrCreacion); 
                        }
                        if(!empty($strTieneRentaMensual) && $strTieneRentaMensual == "S")
                        {   
                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                           $objProducto, 
                                                                                           'RENTA_MENSUAL',
                                                                                           $strValorRentaMensual,
                                                                                           $usrCreacion); 
                        }
                    }                        
                                            
                    /**
                     * Bloque que almacena la plantilla de comisionista en caso de existir
                     */
                    if( !empty($strPlantillaComisionista) )
                    {
                        $arrayPlantillaComisionista = explode('|', $strPlantillaComisionista);

                        if( !empty($arrayPlantillaComisionista) )
                        {
                            $strObservacionServicio = "Personal a comisionar:<br/>";

                            foreach( $arrayPlantillaComisionista as $strPersonalSeleccionado )
                            {
                                if( !empty($strPersonalSeleccionado) )
                                {
                                    $arrayPersonalSeleccionado = explode('---', $strPersonalSeleccionado);

                                    if( isset($arrayPersonalSeleccionado[0]) && !empty($arrayPersonalSeleccionado[0]) 
                                        && isset($arrayPersonalSeleccionado[1]) && !empty($arrayPersonalSeleccionado[1]) )
                                    {
                                        $intIdComisionDet              = $arrayPersonalSeleccionado[0];
                                        $intIdPersonalSeleccionado     = $arrayPersonalSeleccionado[1];
                                        $strNombrePersonalSeleccionado = "";
                                        $strLoginPersonalSeleccionado  = "";
                                        $floatComisionVenta            = 0;
                                        
                                        if(is_numeric($intIdComisionDet) && is_numeric($intIdPersonalSeleccionado)) 
                                        {
                                            $objInfoPersonaEmpresaRol = $this->emcom->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                             ->findOneById($intIdPersonalSeleccionado);

                                            if( is_object($objInfoPersonaEmpresaRol) )
                                            {
                                                $objInfoPersona = $objInfoPersonaEmpresaRol->getPersonaId();

                                                if( is_object($objInfoPersona) )
                                                {
                                                    $strNombres                   = $objInfoPersona->getNombres();
                                                    $strApellidos                 = $objInfoPersona->getApellidos();
                                                    $strLoginPersonalSeleccionado = $objInfoPersona->getLogin();

                                                    if( !empty($strNombres) || !empty($strApellidos) )
                                                    {
                                                        $strNombrePersonalSeleccionado = trim( ucwords(strtolower(trim($strNombres))).' '.
                                                                                                  ucwords(strtolower(trim($strApellidos))) );
                                                    }//( !empty($strNombres) || !empty($strApellidos) )
                                                }//( is_object($objInfoPersona) )
                                            }//( is_object($objInfoPersonaEmpresaRol) )

                                            $objAdmiComisionDet = $this->emcom->getRepository('schemaBundle:AdmiComisionDet')
                                                                       ->findOneById($intIdComisionDet);

                                            if( is_object($objAdmiComisionDet) )
                                            {
                                                $floatComisionVenta = $objAdmiComisionDet->getComisionVenta();
                                                $intIdParametroDet  = $objAdmiComisionDet->getParametroDetId();

                                                if( $intIdParametroDet > 0 )
                                                {
                                                    $objAdmiParametroDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                ->findOneById($intIdParametroDet);

                                                    if( is_object($objAdmiParametroDet) )
                                                    {
                                                        $strDescripcion     = $objAdmiParametroDet->getDescripcion();
                                                        $strValor3Parametro = $objAdmiParametroDet->getValor3();

                                                        if( $strValor3Parametro == 'VENDEDOR' && !empty($strLoginPersonalSeleccionado) )
                                                        {
                                                            error_log('$strLoginPersonalSeleccionado'.$strLoginPersonalSeleccionado);
                                                            $entityServicio->setUsrVendedor($strLoginPersonalSeleccionado);
                                                        }//( $strValor3Parametro == 'VENDEDOR' && !empty($strLoginPersonalSeleccionado) )

                                                        if( !empty($strDescripcion) && !empty($strNombrePersonalSeleccionado) )
                                                        {
                                                            $strObservacionServicio .= "<b>".$strDescripcion.":</b> ".$strNombrePersonalSeleccionado
                                                                                       ."<br/>";
                                                        }//( !empty($strDescripcion) && !empty($strNombrePersonalSeleccionado) )
                                                    }//( is_object($objAdmiParametroDet) )
                                                }//( $intIdParametroDet > 0 )
                                            }//( is_object($objAdmiComisionDet) )

                                            if( is_object($objInfoPersonaEmpresaRol) && is_object($objAdmiComisionDet))
                                            {
                                                $objInfoServicioComision = new InfoServicioComision();
                                                $objInfoServicioComision->setComisionDetId($objAdmiComisionDet);
                                                $objInfoServicioComision->setPersonaEmpresaRolId($objInfoPersonaEmpresaRol);
                                                $objInfoServicioComision->setServicioId($entityServicio);
                                                $objInfoServicioComision->setComisionVenta($floatComisionVenta);
                                                $objInfoServicioComision->setEstado('Activo');
                                                $objInfoServicioComision->setFeCreacion(new \DateTime('now'));
                                                $objInfoServicioComision->setIpCreacion($clientIp);
                                                $objInfoServicioComision->setUsrCreacion($usrCreacion);

                                                $this->emcom->persist($objInfoServicioComision);
                                            }//( is_object($objInfoPersonaEmpresaRol) && is_object($objAdmiComisionDet) )
                                        }
                                    }//( isset($arrayPersonalSeleccionado[0]) && !empty($arrayPersonalSeleccionado[0])...
                                }//( !empty($strPersonalSeleccionado) )
                            }//foreach( $arrayPlantillaComisionista as $arrayPersonalSeleccionado )

                            $objServicioHistorialComision = new InfoServicioHistorial();
                            $objServicioHistorialComision->setServicioId($entityServicio);
                            $objServicioHistorialComision->setObservacion($strObservacionServicio);
                            $objServicioHistorialComision->setIpCreacion($clientIp);
                            $objServicioHistorialComision->setUsrCreacion($usrCreacion);
                            
                            if(!is_null($objProducto))
                            {
                                $arrayClienteCamara = $emGeneral->getRepository("schemaBundle:AdmiParametroDet")->get(
                                    "CLIENTES SOPORTE LOGICO CAMARA",
                                    "COMERCIAL",
                                    "",
                                    "",
                                    $entityPunto->getPersonaEmpresaRolId()->getId(),
                                    $objProducto->getId(),
                                    "",
                                    "",
                                    "",
                                    $strCodEmpresa
                                );

                                if(is_array($arrayClienteCamara) && !empty($arrayClienteCamara))
                                {
                                                                
                                    $objServicioHistorialComision->setFeCreacion(new \DateTime($arrayClienteCamara[0]["valor4"]));
                                    
                                }else
                                {
                                    $objServicioHistorialComision->setFeCreacion(new \DateTime('now'));
                                }
                            }else
                            {
                                $objServicioHistorialComision->setFeCreacion(new \DateTime('now'));
                            }
                            
                            $objServicioHistorialComision->setEstado($entityServicio->getEstado());

                            $this->emcom->persist($objServicioHistorialComision);
                        }//( !empty($arrayPlantillaComisionista) )
                    }//( !empty($strPlantillaComisionista) )


                    if($strPrefijoEmpresa === 'TN' || $strPrefijoEmpresa === 'TNP'  || $strPrefijoEmpresa === 'TNG')
                    {
                        //Agrego que la verificacion de productos especiales solo sea para el ingreso de servicios opcion "Por Producto"
                        if(is_object($objProducto) && $info == 'C' &&
                          ($objProducto->getNombreTecnico() === "INTERNET SMALL BUSINESS"
                           || $objProducto->getNombreTecnico() === "TELCOHOME"))
                        {                        
                            $floatValorDescuentoInstalacion = 0;
                            $entityServicio->setPrecioInstalacion(floatval($valor['precio_instalacion_pactado']));
                        } //if(is_object($objProducto) && $info == 'C')

                        if ($strPrefijoEmpresa == 'TNP' && is_object($objProducto) && $objProducto->getEsEnlace() === 'SI' && $strEsIsb)
                        {
                            $entityServicio->setEstado('Pre-servicio');
                        }
                        
                        if($boolGeneraSolicitudDcto)
                        {
                            // Se crea solicitud de descuento
                            $strDescripcionCarac   = 'DESCUENTO UNITARIO FACT';
                            $objAdmiCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                                 ->findOneBy(array('descripcionCaracteristica' => $strDescripcionCarac,
                                                                                   'estado'                    => 'Activo'));                            

                            $strObservacionSolDcto="Solicitud de descuento creada por usr: ".$usrCreacion." ".$strPrefijoEmpresa;

                            $objTipoSolicitud = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')->findOneBy(
                                                 array('descripcionSolicitud' => 'SOLICITUD DESCUENTO', 'estado' => 'Activo'));

                            $objAdmiMotivo = $this->emcom->getRepository('schemaBundle:AdmiMotivo')->findOneBy(
                                                 array('nombreMotivo' => 'Margen de Negociacion', 'estado' => 'Activo'));                          

                            $objInfoDetalleSolicitud = new InfoDetalleSolicitud();
                            $objInfoDetalleSolicitud->setMotivoId($objAdmiMotivo->getId());
                            $objInfoDetalleSolicitud->setServicioId($entityServicio);
                            $objInfoDetalleSolicitud->setTipoSolicitudId($objTipoSolicitud);
                            $objInfoDetalleSolicitud->setPrecioDescuento($intPrecioSolicitado);
                            $objInfoDetalleSolicitud->setObservacion($strObservacionSolDcto);
                            $objInfoDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                            $objInfoDetalleSolicitud->setUsrCreacion($usrCreacion);
                            $objInfoDetalleSolicitud->setEstado('Pendiente');
                            $this->emcom->persist($objInfoDetalleSolicitud);
                            $this->emcom->flush();
                            //Grabamos en la tabla de historial de la solicitud
                            $objInfoDetalleSolHist= new InfoDetalleSolHist();
                            $objInfoDetalleSolHist->setEstado('Pendiente');
                            $objInfoDetalleSolHist->setDetalleSolicitudId($objInfoDetalleSolicitud);
                            $objInfoDetalleSolHist->setUsrCreacion($usrCreacion);
                            $objInfoDetalleSolHist->setFeCreacion(new \DateTime('now'));
                            $objInfoDetalleSolHist->setIpCreacion($clientIp);
                            $objInfoDetalleSolHist->setMotivoId($objAdmiMotivo->getId());
                            $objInfoDetalleSolHist->setObservacion($usrCreacion);
                            $this->emcom->persist($objInfoDetalleSolHist);
                            $this->emcom->flush(); 
                            
                            if(is_object($objAdmiCaracteristica))
                            {                            
                                //Crea array para generar el objeto detalle solicitud caracteristica
                                $arrayRequestDetalleSolCaract = array();
                                $arrayRequestDetalleSolCaract['entityAdmiCaracteristica'] = $objAdmiCaracteristica;
                                $arrayRequestDetalleSolCaract['floatValor']               = round( $intPrecioSolicitado  , 2);
                                $arrayRequestDetalleSolCaract['entityDetalleSolicitud']   = $objInfoDetalleSolicitud;
                                $arrayRequestDetalleSolCaract['strEstado']                = 'Pendiente';
                                $arrayRequestDetalleSolCaract['strUsrCreacion']           = $usrCreacion;

                                //Crea el objeto InfoDetalleSolCaract
                                $objDetalleSolCaract = $this->serviceComercial->creaObjetoInfoDetalleSolCaract($arrayRequestDetalleSolCaract);
                                $this->emcom->persist($objDetalleSolCaract);
                                $this->emcom->flush(); 
                            }
                        }//($boolGeneraSolicitudDcto)

                        if(is_object($entityServicio) && is_object($objProducto) && $objProducto->getNombreTecnico() === 'DATOS FWA')
                        {
                            $arrayCapacidad = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                  ->getOne('CAPACIDAD FWA',
                                                                           '',
                                                                           '',
                                                                           '',
                                                                           '',
                                                                           '',
                                                                           '',
                                                                           '',
                                                                           '',
                                                                           $strCodEmpresa);
                            if(empty($arrayCapacidad["valor1"]) && isset($arrayCapacidad))
                            {
                                throw new \Exception("No existe la capacidad Registrada. Favor comunicarse con Sistemas");
                            }
                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                           $objProducto,
                                                                                           'CAPACIDAD1',
                                                                                           $arrayCapacidad["valor1"],
                                                                                           $usrCreacion
                                                                                          );

                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                           $objProducto,
                                                                                           'CAPACIDAD2',
                                                                                           $arrayCapacidad["valor1"],
                                                                                           $usrCreacion
                                                                                          );
                            //Agrego la caracteristica de NO_REQUIERE_FACTIBILIDAD debido a que este producto no requiere tener planificación
                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                           $objProducto,
                                                                                           'NO_REQUIERE_FACTIBILIDAD',
                                                                                           'S',
                                                                                           $usrCreacion);

                            $strObservacionSol  ="Solicitud de factibilidad creada por usr: ".$usrCreacion." ".$strPrefijoEmpresa;
                            $objTipoSolicitud   = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                ->findOneBy(array(
                                                                                  'descripcionSolicitud' => 'SOLICITUD PLANIFICACION',
                                                                                  'estado' => 'Activo'));
                            if(is_object($objTipoSolicitud))
                            {
                                $objInfoDetalleSolicitud = new InfoDetalleSolicitud();
                                $objInfoDetalleSolicitud->setServicioId($entityServicio);
                                $objInfoDetalleSolicitud->setTipoSolicitudId($objTipoSolicitud);
                                $objInfoDetalleSolicitud->setObservacion($strObservacionSol);
                                $objInfoDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                                $objInfoDetalleSolicitud->setUsrCreacion($usrCreacion);
                                $objInfoDetalleSolicitud->setEstado('Pendiente');
                                $this->emcom->persist($objInfoDetalleSolicitud);
                                $this->emcom->flush();
                                //Grabamos en la tabla de historial de la solicitud
                                $objInfoDetalleSolHist= new InfoDetalleSolHist();
                                $objInfoDetalleSolHist->setEstado('Pendiente');
                                $objInfoDetalleSolHist->setDetalleSolicitudId($objInfoDetalleSolicitud);
                                $objInfoDetalleSolHist->setUsrCreacion($usrCreacion);
                                $objInfoDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                $objInfoDetalleSolHist->setIpCreacion($clientIp);
                                $objInfoDetalleSolHist->setObservacion($usrCreacion);
                                $this->emcom->persist($objInfoDetalleSolHist);
                                $this->emcom->flush();

                                $entityServicio->setEstado('PrePlanificada');

                                $this->crearOrdenTrabajoServicio($strCodEmpresa, $idOficina, $entityPunto, $usrCreacion, $clientIp, $entityServicio,
                                                                 $tipoOrden, 'PrePlanificada', $objTipoSolicitud);
                            }
                            else
                            {
                                throw new \Exception("No existe la solicitud de factibilidad");
                            }
                        }

                        if($strPrefijoEmpresa == "TN" && is_object($entityServicio->getProductoId()))
                        {
                            $strDescripServicio =  $entityServicio->getProductoId()->getDescripcionProducto();      
                            //Validar si el producto esta configurado para escenarios de servicios adicionales DATOS GPON
                            $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                              ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                                       'INFRAESTRUCTURA',
                                                                       'PARAMETROS',
                                                                       'VALIDAR RELACION SERVICIO ADICIONAL CON DATOS SAFECITY',
                                                                       $entityServicio->getProductoId()->getId(),
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       $strCodEmpresa);

                            if(!empty($arrayParametrosDet["valor1"]) && isset($arrayParametrosDet["valor1"]))
                            {
                                if(is_object($entityPunto))
                                {
                                    $intIdPunto = $entityPunto->getId();
                                }

                                $arrayParametrosEstadoActualizar["strIdPunto"]                = $intIdPunto;
                                $arrayParametrosEstadoActualizar["strIdProductoPreferencial"] = $arrayParametrosDet["valor2"];
                                $arrayParametrosEstadoActualizar["strCodEmpresa"]             = $strCodEmpresa;

                                $arrayRespuestaServPref = $this->getEstadoServicioXProdPreferencial($arrayParametrosEstadoActualizar);

                                if(!empty($arrayRespuestaServPref))
                                {
                                    $entityServicio->setEstado($arrayRespuestaServPref["strEstadoPreferencial"]);

                                    //Registro de caracteristica que relaciona a la camara con el DATOS-SAFECITY
                                    $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                                   $objProducto,
                                                                                                   'RELACION_SERVICIOS_GPON_SAFECITY',
                                                                                                   $arrayRespuestaServPref["objServPref"]->getId(),
                                                                                                   $usrCreacion);

                                    $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                                   $objProducto,
                                                                                                   'SERVICIO_ADICIONAL',
                                                                                                   "S",
                                                                                                   $usrCreacion);
                                    //verificar tipo de red sin ingreso en la orden de servicio
                                    $arrayParTipoRed = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->getOne('CONFIG_PRODUCTO_DATOS_SAFE_CITY',
                                                                            'COMERCIAL',
                                                                            '',
                                                                            '',
                                                                            'TIPO_RED_NO_VISIBLE_ORDEN_SERVICIO',
                                                                            $entityServicio->getProductoId()->getId(),
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            $strCodEmpresa);
                                    if(isset($arrayParTipoRed["valor3"]) && !empty($arrayParTipoRed["valor3"]))
                                    {
                                        $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                            $entityServicio->getProductoId(),
                                                                                            'TIPO_RED',
                                                                                            $arrayParTipoRed["valor3"],
                                                                                            $usrCreacion);
                                    }
                                    //Generar Login Aux del servicio
                                    $this->servicioTecnico->generarLoginAuxiliar($entityServicio->getId());                                    

                                    //historial servicio adicional
                                    $objServicioHistorialAdicional = new InfoServicioHistorial();
                                    $objServicioHistorialAdicional->setServicioId($entityServicio);
                                    $objServicioHistorialAdicional->setObservacion("Servicio ".
                                                                                   $entityServicio->getProductoId()->getDescripcionProducto().
                                                                                   " adicional");
                                    $objServicioHistorialAdicional->setIpCreacion($clientIp);
                                    $objServicioHistorialAdicional->setUsrCreacion($usrCreacion);
                                    $objServicioHistorialAdicional->setFeCreacion(new \DateTime('now'));
                                    $objServicioHistorialAdicional->setEstado($entityServicio->getEstado());
                                    $this->emcom->persist($objServicioHistorialAdicional);
                                    $this->emcom->flush();

                                    //Si el estado a heredar es Factible entonces se crean automaticamente las solicitudes de Factibilidad
                                    //e historiales
                                    if($arrayRespuestaServPref["strBanderaHeredarFactibilidad"] == "S")
                                    {
                                        $objAdmiTipoSolicitud = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                            ->findOneBy(array("descripcionSolicitud" => "SOLICITUD FACTIBILIDAD",
                                                                                              "estado"               => "Activo"));

                                        if(is_object($objAdmiTipoSolicitud))
                                        {
                                            $objInfoDetSolicitud = $this->emcom->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                             ->findOneBy(array("servicioId"      => $arrayRespuestaServPref["objServPref"]->getId(),
                                                                               "tipoSolicitudId" => $objAdmiTipoSolicitud),
                                                                         array('feCreacion'      => 'DESC'));

                                            if(is_object($objInfoDetSolicitud))
                                            {
                                                $objInfoDetalleSolicitud = new InfoDetalleSolicitud();
                                                $objInfoDetalleSolicitud->setServicioId($entityServicio);
                                                $objInfoDetalleSolicitud->setTipoSolicitudId($objAdmiTipoSolicitud);
                                                $objInfoDetalleSolicitud->setEstado('Factible');
                                                $objInfoDetalleSolicitud->setUsrCreacion($usrCreacion);
                                                $objInfoDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                                                $objInfoDetalleSolicitud->setObservacion($objInfoDetSolicitud->getObservacion());
                                                $this->emcom->persist($objInfoDetalleSolicitud);
                                                $this->emcom->flush();

                                                $objDetalleSolHist = new InfoDetalleSolHist();
                                                $objDetalleSolHist->setDetalleSolicitudId($objInfoDetalleSolicitud);
                                                $objDetalleSolHist->setIpCreacion($clientIp);
                                                $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                                $objDetalleSolHist->setUsrCreacion($usrCreacion);
                                                $objDetalleSolHist->setObservacion($objInfoDetSolicitud->getObservacion());
                                                $objDetalleSolHist->setEstado('Factible');
                                                $this->emcom->persist($objDetalleSolHist);
                                                $this->emcom->flush();

                                                $objServicioHistorialFactible = new InfoServicioHistorial();
                                                $objServicioHistorialFactible->setServicioId($entityServicio);
                                                $objServicioHistorialFactible->setObservacion("Por estar el servicio ".
                                                        $arrayRespuestaServPref["objServPref"]->getProductoId()->getDescripcionProducto().
                                                        "  en ".$arrayRespuestaServPref["objServPref"]->getEstado().
                                                        " el servicio ".$objProducto->getDescripcionProducto()." se crea con estado ".
                                                        $arrayRespuestaServPref["strEstadoPreferencial"]);
                                                $objServicioHistorialFactible->setIpCreacion($clientIp);
                                                $objServicioHistorialFactible->setUsrCreacion($usrCreacion);
                                                $objServicioHistorialFactible->setFeCreacion(new \DateTime('now'));
                                                $objServicioHistorialFactible->setEstado("Factible");
                                                $this->emcom->persist($objServicioHistorialFactible);
                                                $this->emcom->flush();

                                                $objServicioHistorialFactible2 = new InfoServicioHistorial();
                                                $objServicioHistorialFactible2->setServicioId($entityServicio);
                                                $objServicioHistorialFactible2->setObservacion($objInfoDetSolicitud->getObservacion());
                                                $objServicioHistorialFactible2->setIpCreacion($clientIp);
                                                $objServicioHistorialFactible2->setUsrCreacion($usrCreacion);
                                                $objServicioHistorialFactible2->setFeCreacion(new \DateTime('now'));
                                                $objServicioHistorialFactible2->setEstado("Factible");
                                                $this->emcom->persist($objServicioHistorialFactible2);
                                                $this->emcom->flush();
                                            }

                                            //Se replican los registros de la info_servicio_tecnico
                                            $objInfoServTec = $this->emcom->getRepository('schemaBundle:InfoServicioTecnico')
                                                                           ->findOneBy(array("servicioId" => $arrayRespuestaServPref["objServPref"]));

                                            if(is_object($objInfoServTec))
                                            {
                                                $strBanderaInfoTecnicaAddDatosGpon   = "S";
                                                $objInfoServicioTecnicoDatosSafecity = $objInfoServTec;
                                            }
                                        }
                                    }
                                }
                            }

                            //Validar si el producto esta configurado para escenarios SERVICIO-MASCARILLA
                            $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                              ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                                       'INFRAESTRUCTURA',
                                                                       'PARAMETROS',
                                                                       'VALIDAR RELACION MASCARILLA CON SAFE VIDEO ANALYTICS CAM',
                                                                       $entityServicio->getProductoId()->getId(),
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       $strCodEmpresa);

                            if(!empty($arrayParametrosDet["valor1"]) && isset($arrayParametrosDet["valor1"]))
                            {
                                $entityServicio->setEstado('Pendiente');
                            }
                        }

                        if( $floatValorDescuentoInstalacion > 0 )
                        {
                            // Se crea solicitud de instalacion 
                            $strObservacionSolDctoIns="Solicitud de instalacion creada por usr: ".$usrCreacion." TN";

                            $objTipoSolicitud = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')->findOneBy(
                                                 array('descripcionSolicitud' => 'SOLICITUD INSTALACION GRATIS', 'estado' => 'Activo'));

                            $objAdmiMotivo = $this->emcom->getRepository('schemaBundle:AdmiMotivo')->findOneBy(
                                                 array('nombreMotivo' => 'Negociacion Asesor Comercial', 'estado' => 'Activo'));                          
                            if(isset($valor["intIdMotivoInstalacion"]) && !empty($valor["intIdMotivoInstalacion"]) 
                               && $valor["intIdMotivoInstalacion"]!=0)
                            {
                                $objAdmiMotivo = $this->emcom->getRepository('schemaBundle:AdmiMotivo')->find($valor["intIdMotivoInstalacion"]);
                            }
                            $objInfoDetalleSolicitud = new InfoDetalleSolicitud();
                            $objInfoDetalleSolicitud->setMotivoId($objAdmiMotivo->getId());
                            $objInfoDetalleSolicitud->setServicioId($entityServicio);
                            $objInfoDetalleSolicitud->setTipoSolicitudId($objTipoSolicitud);
                            $objInfoDetalleSolicitud->setPrecioDescuento($floatValorDescuentoInstalacion);
                            $objInfoDetalleSolicitud->setObservacion($strObservacionSolDctoIns);
                            $objInfoDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                            $objInfoDetalleSolicitud->setUsrCreacion($usrCreacion);
                            $objInfoDetalleSolicitud->setEstado('Pendiente');
                            $this->emcom->persist($objInfoDetalleSolicitud);
                            $this->emcom->flush();
                            //Grabamos en la tabla de historial de la solicitud
                            $objInfoDetalleSolHist= new InfoDetalleSolHist();
                            $objInfoDetalleSolHist->setEstado('Pendiente');
                            $objInfoDetalleSolHist->setDetalleSolicitudId($objInfoDetalleSolicitud);
                            $objInfoDetalleSolHist->setUsrCreacion($usrCreacion);
                            $objInfoDetalleSolHist->setFeCreacion(new \DateTime('now'));
                            $objInfoDetalleSolHist->setIpCreacion($clientIp);
                            $objInfoDetalleSolHist->setMotivoId($objAdmiMotivo->getId());
                            $objInfoDetalleSolHist->setObservacion($usrCreacion);
                            $this->emcom->persist($objInfoDetalleSolHist);
                            $this->emcom->flush();     
                            //Notificación de solicitud de instalación.
                            $strCuerpoCorreo = "El presente correo es para indicarle que se creó una solicitud en TelcoS+ con los siguientes datos:";
                            if($strPrefijoEmpresa == 'TN')
                            {
                                $arrayDestinatarios = array();
                                $strVendedor        = (is_object($entityPunto)) ? $entityPunto->getUsrVendedor():"";
                                $objPersona         = (is_object($entityPunto)) ? $entityPunto->getPersonaEmpresaRolId()->getPersonaId():"";
                                $strCliente         = "";
                                $strIdentificacion  = (is_object($objPersona)) ? $objPersona->getIdentificacionCliente():"";
                                $strCliente         = (is_object($objPersona) && $objPersona->getRazonSocial()) ? 
                                                      $objPersona->getRazonSocial() : $objPersona->getNombres() . " " .$objPersona->getApellidos();

                                $floatPrecioInstalacion   = $entityServicio->getPrecioInstalacion() ? $entityServicio->getPrecioInstalacion():0;
                                $floatPrecioDescuento     = $objInfoDetalleSolicitud->getPrecioDescuento() ? 
                                                            $objInfoDetalleSolicitud->getPrecioDescuento() : 0;
                                $floatPorcentajeDescuento = $objInfoDetalleSolicitud->getPorcentajeDescuento() ? 
                                                            $objInfoDetalleSolicitud->getPorcentajeDescuento() : 0;
                                $floatValorFinal = $floatPrecioInstalacion - $floatPrecioDescuento;
                                if((empty($floatPorcentajeDescuento)&&$floatPorcentajeDescuento==0)&&
                                   (!empty($floatPrecioDescuento)&&$floatPrecioDescuento>0))
                                {
                                    $floatPorcentajeDescuento = ($floatPrecioDescuento * 100)/$floatPrecioInstalacion;
                                }
                                $objCargosCab = $this->emgen->getRepository('schemaBundle:AdmiParametroCab')
                                                            ->findOneBy(array('nombreParametro' => "RANGO_APROBACION_SOLICITUDES",
                                                                              'modulo'          => "COMERCIAL",
                                                                              'proceso'         => "ADMINISTRACION_CARGOS_SOLICITUDES",
                                                                              'estado'          => 'Activo'));
                                if(!is_object($objCargosCab) || empty($objCargosCab))
                                {
                                    throw new \Exception('No se encontraron datos con los parámetros enviados.');
                                }
                                $arrayCargosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                              ->findBy(array('parametroId' => $objCargosCab->getId(),
                                                                             'valor4'      => 'ES_JEFE',
                                                                             'valor7'      => 'SI',
                                                                             'estado'      => 'Activo'));
                                $strCargoAsignado = "";
                                if(is_array($arrayCargosDet))
                                {
                                    foreach($arrayCargosDet as $objCargosItem)
                                    {
                                        if(floatval($floatPorcentajeDescuento) >= floatval($objCargosItem->getValor1()) && 
                                            floatval($floatPorcentajeDescuento) <= floatval($objCargosItem->getValor2()))
                                        {
                                            $strCargoAsignado = ucwords(strtolower(str_replace("_"," ",$objCargosItem->getValor3())));
                                        }
                                    }
                                }
                                //Correo de la persona quien crea la solicitud.
                                $arrayCorreos = $this->emcom->getRepository('schemaBundle:InfoPersona')
                                                            ->getContactosByLoginPersonaAndFormaContacto($usrCreacion,"Correo Electronico");
                                if(!empty($arrayCorreos) && is_array($arrayCorreos))
                                {
                                    foreach($arrayCorreos as $arrayItem)
                                    {
                                        if( !empty($arrayItem['valor']) && isset($arrayItem['valor']) )
                                        {
                                            $arrayDestinatarios[] = $arrayItem['valor'];
                                        }
                                    }
                                }
                                //Correo del vendedor.
                                $arrayCorreos = $this->emcom->getRepository('schemaBundle:InfoPersona')
                                                            ->getContactosByLoginPersonaAndFormaContacto($strVendedor,
                                                                                                        "Correo Electronico");
                                if(!empty($arrayCorreos) && is_array($arrayCorreos))
                                {
                                    foreach($arrayCorreos as $arrayItem)
                                    {
                                        if(!empty($arrayItem['valor']) && isset($arrayItem['valor']))
                                        {
                                            $arrayDestinatarios[] = $arrayItem['valor'];
                                        }
                                    }
                                }
                                //Correo del subgerente
                                $arrayResultadoCorreo    = $this->emcom->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                ->getSubgerentePorLoginVendedor(array("strLogin"=>$strVendedor));
                                if(!empty($arrayResultadoCorreo["registros"]) && isset($arrayResultadoCorreo["registros"]))
                                {
                                    $arrayRegistrosCorreo = $arrayResultadoCorreo['registros'];
                                    $arrayCorreos         = $this->emcom->getRepository('schemaBundle:InfoPersona')
                                                                 ->getContactosByLoginPersonaAndFormaContacto(
                                                                 $arrayRegistrosCorreo[0]["LOGIN_SUBGERENTE"],"Correo Electronico");
                                    if(!empty($arrayCorreos) && is_array($arrayCorreos))
                                    {
                                        foreach($arrayCorreos as $arrayItem)
                                        {
                                            if(!empty($arrayItem['valor']) && isset($arrayItem['valor']))
                                            {
                                                $arrayDestinatarios[] = $arrayItem['valor'];
                                            }
                                        }
                                    }
                                }
                                $arrayParametrosMail  = array("strNombreCliente"         => $strCliente,
                                                              "strIdentificacionCliente" => $strIdentificacion,
                                                              "strObservacion"           => $strObservacionSolDctoIns,
                                                              "strCuerpoCorreo"          => $strCuerpoCorreo,
                                                              "strCargoAsignado"         => $strCargoAsignado);
                                $this->serviceEnvioPlantilla->generarEnvioPlantilla("CREACIÓN DE SOLICITUD DE INSTALACIÓN",
                                                                                    array_unique($arrayDestinatarios),
                                                                                    "NOTIFICACION",
                                                                                    $arrayParametrosMail,
                                                                                    $strPrefijoEmpresa,
                                                                                    "",
                                                                                    "",
                                                                                    null,
                                                                                    true,
                                                                                    "notificaciones_telcos@telconet.ec");
                            }
                        }//( $floatValorDescuentoInstalacion > 0 )                   
                    }//($strPrefijoEmpresa == 'TN')
                    
                    $entityInfoServicioTecnico  = new InfoServicioTecnico();
                    $entityInfoServicioTecnico->setServicioId($entityServicio);
                    
                    if($strPrefijoEmpresa == 'TN')
                    {
                        $strDescripcionServicio = $entityServicio->getProductoId()->getDescripcionProducto();
                        $arrayEstadoFinal= $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                            ->getOne('ESTADO_CLEAR_CHANNEL','COMERCIAL','','ESTADO_CLEAR_CHANNEL','','','','','',$strCodEmpresa);
                        $arrayHabilitarClearChannel= $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('HABILITAR_APROVISIO_CLEAR_CHANNEL',
                                                             'COMERCIAL',
                                                             '',
                                                             $strDescripcionServicio,
                                                             '',
                                                             '',
                                                             '',
                                                             '',
                                                             '',
                                                            $strCodEmpresa);
                        $strHabilitarClearChannel = $arrayHabilitarClearChannel["valor1"];
                        if(count($arrayEstadoFinal) && $strDescripcionServicio === $arrayEstadoFinal["valor1"]
                          && $strHabilitarClearChannel === 'SI')
                        {
                            //CUANDO EL PRODUCTO ES CLEAR CHANNEL PUNTO A PUNTO 
                            //ULTIMA MILLA FO POR DEFECTO
                            $entityInfoServicioTecnico->setUltimaMillaId(1);
                        }
                    }

                    if($ultimaMillaId) // Última milla por servicio único, dato recibido por el consumo de este service.
                    {
                        $entityInfoServicioTecnico->setUltimaMillaId($ultimaMillaId); 
                    }
                    elseif(intval($valor['ultimaMilla']) > 0) // Última milla de cada servicio
                    {
                        $entityInfoServicioTecnico->setUltimaMillaId(intval($valor['ultimaMilla']));
                        
                        //Se valida si el Cliente/Punto se encuentre configurado en esquema Edificio/PseudoPe necesario
                        //para poder ser activado
                        $boolEsPseudoPe       = $this->emcom->getRepository("schemaBundle:InfoServicio")->esServicioPseudoPe($entityServicio);
                        
                        if($boolEsPseudoPe)
                        {
                            $objTipoMedioPseudoPe = $this->eminf->getRepository("schemaBundle:AdmiTipoMedio")->find(intval($valor['ultimaMilla']));
                            $intIdTercerizadora   = 0;
                            
                            //Si es tercerizada se guarda la referencia en el servicio de la tercerizadora
                            if($objTipoMedioPseudoPe->getNombreTipoMedio() == 'TERCERIZADA')
                            {
                                $objInfoPuntoDatoAdicional  = $this->emcom->getRepository("schemaBundle:InfoPuntoDatoAdicional")
                                                                          ->findOneByPuntoId($entityServicio->getPuntoId()->getId());
                                
                                if(is_object($objInfoPuntoDatoAdicional))
                                {
                                    $intElementoEdificio    = $objInfoPuntoDatoAdicional->getElementoId()->getId();
                                    
                                    $objRelacionTercerizada = $this->eminf->getRepository("schemaBundle:InfoRelacionElemento")
                                                                          ->findOneBy(array('elementoIdA' => $intElementoEdificio,
                                                                                            'observacion' => 'Relacion Tercerizadora',
                                                                                            'estado'      => 'Activo')
                                                                                     );
                                    if(is_object($objRelacionTercerizada))
                                    {
                                        $intIdTercerizadora = $objRelacionTercerizada->getElementoIdB();
                                    }
                                }
                                
                                //Si se encuentra tercerizadora se registra la misma
                                if($intIdTercerizadora != 0)
                                {
                                    $objCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                                     ->findOneBy(array('descripcionCaracteristica' => 'TERCERIZADORA', 
                                                                                       'tipo'                      => 'COMERCIAL')
                                                                               );
                                    if(!$objCaracteristica)
                                    {
                                        throw new \Exception("No se ha definido la característica TERCERIZADORA");
                                    }

                                    $objProdCaractTercerizado = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                            ->findOneBy(array( 
                                                                                              "productoId"       => $objProducto->getId(),
                                                                                              "caracteristicaId" => $objCaracteristica->getId(),
                                                                                              "estado"           => "Activo"
                                                                                             )); 
                                    if(!is_object($objProdCaractTercerizado))
                                    {
                                        throw new \Exception("No se ha definido la característica TERCERIZADORA para el Producto");
                                    }

                                    $entityServicioProdCaract  = new InfoServicioProdCaract();
                                    $entityServicioProdCaract->setServicioId($entityServicio->getId());
                                    $entityServicioProdCaract->setProductoCaracterisiticaId($objProdCaractTercerizado->getId());
                                    $entityServicioProdCaract->setValor($intIdTercerizadora);
                                    $entityServicioProdCaract->setEstado('Activo');
                                    $entityServicioProdCaract->setUsrCreacion($usrCreacion);
                                    $entityServicioProdCaract->setFeCreacion(new \DateTime('now'));
                                    $this->emcom->persist($entityServicioProdCaract);

                                    $objTercerizadora = $this->emcom->getRepository("schemaBundle:InfoPersona")->find($intIdTercerizadora);

                                    $strTercerizadora = '';

                                    if(is_object($objTercerizadora))
                                    {
                                        $strTercerizadora = $objTercerizadora->getInformacionPersona();
                                    }

                                    //Historial por tercerizadora
                                    $objServicioHist = new InfoServicioHistorial();
                                    $objServicioHist->setServicioId($entityServicio);
                                    $objServicioHist->setObservacion('Se relaciona al Servicio la Tercerizadora : <b>'.$strTercerizadora.'</b>');
                                    $objServicioHist->setIpCreacion($clientIp);
                                    $objServicioHist->setUsrCreacion($usrCreacion);
                                    $objServicioHist->setFeCreacion(new \DateTime('now'));
                                    $objServicioHist->setEstado($entityServicio->getEstado());
                                    $this->emcom->persist($objServicioHist);
                                }
                                else
                                {
                                    throw new \Exception("No se encuentra relacionada la Tercerizadora, porfavor notificar a Sistemas");
                                }
                            }                            
                        }
                    }
                    
                    //Si es un producto FWA se envia notificación de tarea y agrego la UM TERCERIZADO.
                    if(is_object($entityServicio->getProductoId()) && $entityServicio->getProductoId()->getNombreTecnico() === 'DATOS FWA')
                    {
                        $objTipoMedioTerce = $this->eminf->getRepository("schemaBundle:AdmiTipoMedio")
                                                         ->findOneByCodigoTipoMedio('TER');
                        if(is_object($objTipoMedioTerce))
                        {
                            $entityInfoServicioTecnico->setUltimaMillaId($objTipoMedioTerce->getId());
                        }
                        $arrayRespuestaFWA = $this->serviceSoporte
                                                  ->crearTareaYNotificacionFWA(array(
                                                                                        "objServicio"           => $entityServicio,
                                                                                        "objPunto"              => $entityPunto,
                                                                                        "strPrefijoEmpresa"     => $strPrefijoEmpresa,
                                                                                        "strCodEmpresa"         => $strCodEmpresa,
                                                                                        "strIpClient"           => $clientIp,
                                                                                        "strNombreParametro"    => 'PYL_CONTACTO_FWA',
                                                                                        "strEstadoSolServicio"  => "Pendiente",
                                                                                        "strUsrSession"         => $usrCreacion
                                                                                      ));
                        if(!empty($arrayRespuestaFWA))
                        {
                            if($arrayRespuestaFWA["strStatus"] === "OK")
                            {
                                //Grabar la caracteristica del número de tarea creada al contacto comercial de Telconet-Telefónica
                                $intTareaFWA = $arrayRespuestaFWA['arrayData']['intIdTarea'];
                                if(isset($intTareaFWA))
                                {
                                    $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                                   $objProducto,
                                                                                                   'TAREA_FWA',
                                                                                                   $intTareaFWA,
                                                                                                   $usrCreacion);
                                }
                                else
                                {
                                    throw new \Exception('No se obtiene el número de tarea para el producto FWA');
                                }
                            }
                            else if($arrayRespuestaFWA["strStatus"] === "ERROR")
                            {
                                throw new \Exception($arrayRespuestaFWA["strMensaje"]);
                            }
                            else
                            {
                                throw new \Exception('Error desconocido al momento de crear la tarea del producto del producto FWA');
                            }
                        }
                        else
                        {
                            throw new \Exception("Imposible crear tarea para el producto".$entityServicio->getProductoId()->getNombreTecnico());
                        }
                    }

                    // Si se realiza un cambio de tipo medio se setea el mismo tipo de enlace del servicio a cambiarse.
                    if ($tipoOrden == 'C')
                    {
                        $strObservacionHistorial = $strObservacionHistorial.' por Cambio Tipo Medio';
                        $objServicioAnterior     = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                               ->findOneById($intIdServicioPrincipal);
                        // Clono el servicio anterior
                        if(is_object($objServicioAnterior))
                        {
                            $entityServicio->setProductoId($objServicioAnterior->getProductoId());
                            if($objServicioAnterior->getCicloId() != null)
                            {
                                $entityServicio->setCicloId($objServicioAnterior->getCicloId());
                            }
                            if($objServicioAnterior->getEsVenta() != null)
                            {
                                $entityServicio->setEsVenta($objServicioAnterior->getEsVenta());
                            }
                            $entityServicio->setCantidad($objServicioAnterior->getCantidad());
                            $entityServicio->setPrecioVenta($objServicioAnterior->getPrecioVenta());
                            $entityServicio->setCosto($objServicioAnterior->getCosto());
                            $entityServicio->setFrecuenciaProducto($objServicioAnterior->getFrecuenciaProducto());
                            $entityServicio->setMesesRestantes($objServicioAnterior->getMesesRestantes());
                            $entityServicio->setDescripcionPresentaFactura($objServicioAnterior->getDescripcionPresentaFactura());
                            $entityServicio->setPuntoFacturacionId($objServicioAnterior->getPuntoFacturacionId());
                            $entityServicio->setPrecioFormula($objServicioAnterior->getPrecioFormula());
                            $entityServicio->setPrecioInstalacion(floatval($valor['floatPrecioFacturable']));
                        }
                        $objServicioTecnico      = $this->emcom->getRepository('schemaBundle:InfoServicioTecnico')
                                                               ->findOneByServicioId($intIdServicioPrincipal);
                        $entityInfoServicioTecnico->setTipoEnlace($objServicioTecnico->getTipoEnlace());
                        if($objServicioTecnico->getTipoEnlace() == 'BACKUP')
                        {
                            $entityCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                                ->findOneBy(array('descripcionCaracteristica' => 'ES_BACKUP', 'tipo' => 'COMERCIAL'));
                            if(!$entityCaracteristica)
                            {
                                throw new \Exception("No se ha definido la característica ES_BACKUP");
                            }
                            $objProdCaractBackup = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                               ->findOneBy(array(
                                                                                 "productoId"       => $objServicioAnterior->getProductoId(),
                                                                                 "caracteristicaId" => $entityCaracteristica->getId(),
                                                                                 "estado"           => "Activo"
                                                                            ));

                            if (is_object($objProdCaractBackup))
                            {
                                $entityInfoServicioProdCaract = $this->emcom->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                     ->findOneBy(array(
                                                                                    'productoCaracterisiticaId' => $objProdCaractBackup->getId(),
                                                                                    'servicioId'                => $intIdServicioPrincipal,
                                                                                    'estado'                    => "Activo"));

                                if (is_object($entityInfoServicioProdCaract))
                                {
                                    $entityServicioProdCaract  = new InfoServicioProdCaract();
                                    $entityServicioProdCaract  = clone $entityInfoServicioProdCaract;
                                    $entityServicioProdCaract->setServicioId($entityServicio->getId());
                                    $entityServicioProdCaract->setUsrCreacion($usrCreacion);
                                    $entityServicioProdCaract->setFeCreacion(new \DateTime('now'));
                                    $this->emcom->persist($entityServicioProdCaract);
                                }
                            }
                            else
                            {
                                throw new \Exception("No se ha definido la característica ES_BACKUP para el Producto". 
                                                                                                            $objProducto->getDescripcionProducto());
                            }
                        }
                        $entityAdmiCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                         ->findOneBy(array('descripcionCaracteristica' => "ENLACE_DATOS",
                                                                           'estado'                    => "Activo"
                                                                          )
                                                                    );
                        //Pregunta si existe la caracteristica
                        if ($entityAdmiCaracteristica)
                        {
                            $entityAdmiProductoCaracteristica = $this->emcom
                                                                     ->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                     ->findOneBy(array('caracteristicaId'=> $entityAdmiCaracteristica->getId(),
                                                                                       'productoId'      => $objServicioAnterior->getProductoId(),
                                                                                       'estado'          => "Activo"
                                                                                      )
                                                                                );
                            if (is_object($entityAdmiProductoCaracteristica))
                            {
                                $entityInfoServicioProdCaract = $this->emcom->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                     ->findOneBy(array(
                                                                                    'productoCaracterisiticaId' => $entityAdmiProductoCaracteristica->
                                                                                                                    getId(),
                                                                                    'servicioId'                => $intIdServicioPrincipal,
                                                                                    'estado'                    => "Activo"));

                                if (is_object($entityInfoServicioProdCaract))
                                {
                                    $entityServicioProdCaract  = new InfoServicioProdCaract();
                                    $entityServicioProdCaract  = clone $entityInfoServicioProdCaract;
                                    $entityServicioProdCaract->setServicioId($entityServicio->getId());
                                    $entityServicioProdCaract->setUsrCreacion($usrCreacion);
                                    $entityServicioProdCaract->setFeCreacion(new \DateTime('now'));
                                    $this->emcom->persist($entityServicioProdCaract);
                                }
                            }
                        }
                        // Se conserva el idServicio del servicio a trasladarse
                        $objCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                         ->findOneBy(array('descripcionCaracteristica' => "ID_CAMBIO_TIPO_MEDIO",
                                                                           'estado'                    => "Activo"
                                                                          )
                                                                    );
                        if(!$objCaracteristica)
                        {
                            throw new \Exception("No se ha definido la característica ID_CAMBIO_TIPO_MEDIO");
                        }

                        $objProdCaractTipoMedio = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                ->findOneBy(array(
                                                                                  "productoId"       => $objServicioAnterior->getProductoId(),
                                                                                  "caracteristicaId" => $objCaracteristica->getId(),
                                                                                  "estado"           => "Activo"
                                                                                 ));
                        if(!$objProdCaractTipoMedio)
                        {
                            throw new \Exception("No se ha definido la característica ID_CAMBIO_TIPO_MEDIO para el Producto ".
                                                                                                            $objProducto->getDescripcionProducto());
                        }
                        $entityServicioProdCaract  = new InfoServicioProdCaract();
                        $entityServicioProdCaract->setServicioId($entityServicio->getId());
                        $entityServicioProdCaract->setProductoCaracterisiticaId($objProdCaractTipoMedio->getId());
                        $entityServicioProdCaract->setValor($intIdServicioPrincipal);
                        $entityServicioProdCaract->setEstado('Activo');
                        $entityServicioProdCaract->setUsrCreacion($usrCreacion);
                        $entityServicioProdCaract->setFeCreacion(new \DateTime('now'));
                        $this->emcom->persist($entityServicioProdCaract);
                    }
                    else
                    {
                        if($intIdServicioPrincipal)
                        {
                            $entityCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                                ->findOneBy(array('descripcionCaracteristica' => 'ES_BACKUP', 'tipo' => 'COMERCIAL'));
                            if(!$entityCaracteristica)
                            {
                                throw new \Exception("No se ha definido la característica ES_BACKUP");
                            }
                            $objProdCaractBackup = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                               ->findOneBy(array(
                                                                                 "productoId"       => $objProducto->getId(),
                                                                                 "caracteristicaId" => $entityCaracteristica->getId(),
                                                                                 "estado"           => "Activo"
                                                                            ));
                            if(!is_object($objProdCaractBackup))
                            {
                                throw new \Exception("No se ha definido la característica ES_BACKUP para el Producto");
                            }

                            $entityInfoServicioTecnico->setTipoEnlace('BACKUP');

                            // Si el servicio es Backup de otro se guarda la relación
                            // El campo valor hace referencia al servicio Principal.
                            // Servicio Id almacena al nuevo servicio de backup.
                            $entityServicioProdCaract  = new InfoServicioProdCaract();
                            $entityServicioProdCaract->setServicioId($entityServicio->getId());
                            $entityServicioProdCaract->setProductoCaracterisiticaId($objProdCaractBackup->getId());
                            $entityServicioProdCaract->setValor($intIdServicioPrincipal);
                            $entityServicioProdCaract->setEstado('Activo');
                            $entityServicioProdCaract->setUsrCreacion($usrCreacion);
                            $entityServicioProdCaract->setFeCreacion(new \DateTime('now'));

                            $this->emcom->persist($entityServicioProdCaract);
                            $arrayHabilitarClearChannel= $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                ->getOne('HABILITAR_APROVISIO_CLEAR_CHANNEL',
                                            'COMERCIAL',
                                            '',
                                            $objProducto->getDescripcionProducto(),
                                            '',
                                            '',
                                            '',
                                            '',
                                            '',
                                            $strCodEmpresa);
                             $strHabilitarClearChannel = $arrayHabilitarClearChannel["valor1"];
                            if($objProducto->getDescripcionProducto() == $strDescripcionClearChannel 
                                && $strHabilitarClearChannel == 'SI')
                            {
                                $objCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                                ->findOneBy(array('descripcionCaracteristica' => 'MODELO BACKUP', 
                                                                                     'tipo' => 'COMERCIAL'));
                                if($objCaracteristica)
                                {
                                    $objProdCaractBackup = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                               ->findOneBy(array(
                                                                                 "productoId"       => $objProducto->getId(),
                                                                                 "caracteristicaId" => $objCaracteristica->getId(),
                                                                                 "estado"           => "Activo"
                                                                            ));
                                    if(is_object($objProdCaractBackup))
                                    {
                                        //Se graba caracteristica MODELO BACKUP
                                        $objServiProdCaractBackUp  = new InfoServicioProdCaract();
                                        $objServiProdCaractBackUp->setServicioId($entityServicio->getId());
                                        $objServiProdCaractBackUp->setProductoCaracterisiticaId($objProdCaractBackup->getId());
                                        $objServiProdCaractBackUp->setValor($strTipoBackUp);
                                        $objServiProdCaractBackUp->setEstado('Activo');
                                        $objServiProdCaractBackUp->setUsrCreacion($usrCreacion);
                                        $objServiProdCaractBackUp->setFeCreacion(new \DateTime('now'));

                                        $this->emcom->persist($objServiProdCaractBackUp);
                                    }
                                }

                                
                            }
                        }
                        else
                        {
                            $boolEsSdwan         = $this->servicioTecnico->isContieneCaracteristica($objProducto,'SDWAN');

                            if($boolEsSdwan)
                            {
                                $arrayParametroSdwan['strIdPunto']     = $entityPunto->getId();
                                $arrayParametroSdwan['intIdProducto']  = $objProducto->getId();
                                $arrayServicio=$this->emcom->getRepository('schemaBundle:InfoServicio')
                                                               ->getServicioTipoEnlace($arrayParametroSdwan);
                                $intNumServicio = $arrayServicio["total"];
                                if($intNumServicio>0)
                                {
                                    $entityInfoServicioTecnico->setTipoEnlace('PRINCIPAL'.$intNumServicio);
                                }
                                else
                                {
                                    $entityInfoServicioTecnico->setTipoEnlace('PRINCIPAL');
                                }
                            }
                            else
                            {
                                $entityInfoServicioTecnico->setTipoEnlace('PRINCIPAL');
                            }
                        }
                    }

                    //Para productos CAMARAS SAFECITY se valida si se debe actualizar la informacion tecnica del servicio
                    if($strBanderaInfoTecnicaAddDatosGpon == "S")
                    {
                        $entityInfoServicioTecnico->setServicioId($entityServicio);
                        $entityInfoServicioTecnico->setUltimaMillaId($objInfoServicioTecnicoDatosSafecity->getUltimaMillaId());
                        $entityInfoServicioTecnico->setTipoEnlace($objInfoServicioTecnicoDatosSafecity->getTipoEnlace());
                        $entityInfoServicioTecnico->setElementoId($objInfoServicioTecnicoDatosSafecity->getElementoId());
                        $entityInfoServicioTecnico->setInterfaceElementoId($objInfoServicioTecnicoDatosSafecity->getInterfaceElementoId());
                        $entityInfoServicioTecnico->setElementoConectorId($objInfoServicioTecnicoDatosSafecity->getElementoConectorId());
                        $entityInfoServicioTecnico
                            ->setInterfaceElementoConectorId($objInfoServicioTecnicoDatosSafecity->getInterfaceElementoConectorId());
                        $entityInfoServicioTecnico->setElementoContenedorId($objInfoServicioTecnicoDatosSafecity->getElementoContenedorId());
                    }

                    $this->emcom->persist($entityInfoServicioTecnico);

                    $entityServicioHist = new InfoServicioHistorial();
                    $entityServicioHist->setServicioId($entityServicio);
                    
                    // Solo para TN y si producto a agregar posee definido el estado inicial Activo, se verifica si Posee o no Contrato
                    if($strPrefijoEmpresa == 'TN' && $objProducto && $objProducto->getEstadoInicial() === 'Activo')
                    {
                        if($boolTieneContratoActivo)
                        {
                            // Si Posee Contrato Activo es Cliente y se Procede realizar Activacion automatica del servicio y se genera historial
                            $entityServicioHist->setObservacion('Producto no requiere flujo. Se realiza Activación automática.');
                        }
                        else
                        {
                            // Si no Posee Contrato Activo es Prospecto y se procede a crear el servicio Pendiente para que se active en la
                            // aprobacion del contrato y se genera historial
                            $entityServicioHist->setObservacion('Producto no requiere flujo. Se realizará Activación automática '
                                                              . 'en la Aprobación del Contrato.');
                        }
                    }
                    else if(is_object($objProducto) && $objProducto->getDescripcionProducto() === 'SECURITY NG FIREWALL')
                    {
                        if (isset($valor['caracteristicasProducto']))
                        {
                            $arrayCaracteristicasNGF = ($valor['caracteristicasProducto']);

                            if (!is_array($arrayCaracteristicasNGF))
                            {
                                try
                                {
                                    $arrayCaracteristicasNGF = json_decode($arrayCaracteristicasNGF, true);
                                }
                                catch(Exception $e)
                                {
                                    $arrayCaracteristicasNGF =  null;
                                }
                            }

                            foreach($arrayCaracteristicasNGF as $objItem)
                            {
                                if($objItem['caracteristica'] === '[SEC FW NUBES PUBLICAS]')
                                {
                                    $entityServicioHist->setObservacion("Se creo el servicio</br><b>Nube P&#250;blica: </b>{$objItem['valor']}</br>");
                                    break;
                                }
                            }
                        
                        }
                    }
                    else
                    {
                        //SE AGREGA EN EL HISTORIAL SI REQUIERE TRANSPORTE
                        $arrayHabilitarClearChannel= $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                            ->getOne('HABILITAR_APROVISIO_CLEAR_CHANNEL',
                                        'COMERCIAL',
                                        '',
                                        $strDescripServicio,
                                        '',
                                        '',
                                        '',
                                        '',
                                        '',
                                        $strCodEmpresa);
                        $strHabilitarClearChannel = $arrayHabilitarClearChannel["valor1"];
                        if($strPrefijoEmpresa == "TN" && $strDescripcionClearChannel==$strDescripServicio
                           && $strHabilitarClearChannel == "SI")
                        {
                            if($valor['esBackup'] == 'S')
                            {
                                $strTipoBackUp = $valor['modeloBackUp'];
                                $objInfoServicioPrincipal = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                               ->findOneById($valor['servicio']);
                                
                                $arrayResponse = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('CARACT_BACKUP_CLEAR_CHANNEL',
                                                                        'COMERCIAL',
                                                                        null,
                                                                        'CARACT_BACKUP_PRINCIPAL',
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        null,
                                                                        $strCodEmpresa);

                                foreach($arrayResponse as $objCaractPrincipal) 
                                {
                                    $objInfoCaract = $serviceTecnico->getServicioProductoCaracteristica($objInfoServicioPrincipal,
                                                                                            $objCaractPrincipal['valor1'],
                                                                                            $objInfoServicioPrincipal->getProductoId());
                                    
                                    $serviceTecnico->ingresarServicioProductoCaracteristica($entityServicio, 
                                                                                                    $objProducto, 
                                                                                                    $objCaractPrincipal['valor1'], 
                                                                                                    $objInfoCaract->getValor(), 
                                                                                                    $strUsrCreacion);
                                    if ($objCaractPrincipal['valor1'] == "REQUIERE TRANSPORTE" )
                                    {
                                        $entityServicioHist->setObservacion("Se creo el servicio</br>
                                        <b>Requiere Transporte: </b>{$objInfoCaract->getValor()}</br>
                                        <b>Tipo de Backup: </b>{$strTipoBackUp}</br>");
                                    }
                                }
                            }   
                            else
                            {
                                $arrayCaractServicio = $valor['caracteristicasProducto'];
                                if (isset($arrayCaractServicio) && !is_array($arrayCaractServicio) )
                                {
                                    $arrayCaractServicio = json_decode($arrayCaractServicio, true);  
                                }

                                foreach ($arrayCaractServicio as $objCaracteristicaCh)
                                {
                                    $strInstCaract = str_replace('[', '', $objCaracteristicaCh['caracteristica']);
                                    $strInstCaract = str_replace(']', '', $strInstCaract);
                                    if ($strInstCaract == "REQUIERE TRANSPORTE" )
                                    {
                                        $entityServicioHist
                                    ->setObservacion("Se creo el servicio</br><b>Requiere Transporte: </b>{$objCaracteristicaCh['valor']}</br>");
                                    }
                                }
                            }
                        }
                        else
                        {
                            $entityServicioHist->setObservacion($strObservacionHistorial);
                        }
                    }

                    // Si es un producto adicional solicitado, pero no konibit y se crea activo confirmamos en el historial
                    if (!empty($arrayListadoServicios))
                    {
                        foreach($arrayListadoServicios as $objListado)
                        {
                            if ($objProducto->getId() == $objListado['valor1'] &&
                                $objListado['valor3'] == "NO" &&
                                $entityServicio->getEstado() == 'Activo')
                            {
                                $entityServicioHist->setAccion('confirmarServicio');
                            }
                        }
                    }

                    $entityServicioHist->setIpCreacion($clientIp);

                    if(!is_null($objProducto))
                    {
                        $arrayClienteCamara = $emGeneral->getRepository("schemaBundle:AdmiParametroDet")->get(
                            "CLIENTES SOPORTE LOGICO CAMARA",
                            "COMERCIAL",
                            "",
                            "",
                            $entityPunto->getPersonaEmpresaRolId()->getId(),
                            $objProducto->getId(),
                            "",
                            "",
                            "",
                            $strCodEmpresa
                        );

                        if(is_array($arrayClienteCamara) && !empty($arrayClienteCamara))
                        {
                                                      
                          $entityServicioHist->setFeCreacion(new \DateTime($arrayClienteCamara[0]["valor4"]));
                          
                        }else
                        {
                         $entityServicioHist->setFeCreacion(new \DateTime('now'));
                        }
                    }else
                    {
                        $entityServicioHist->setFeCreacion(new \DateTime('now'));
                    }

                    $entityServicioHist->setUsrCreacion($usrCreacion);
                    $entityServicioHist->setEstado($entityServicio->getEstado());
                    $this->emcom->persist($entityServicioHist);


                    // Si es Cliente de MD y si el producto contiene caracteristica Konibit,
                    // se genera Historial y se confirma Servicio para que entre en proceso
                    // de facturación
                    $boolEsKonobit = $this->servicioTecnico->isContieneCaracteristica($objProducto,'KONIBIT');

                    if($strPrefijoEmpresa == 'MD' && $objProducto && $objProducto->getEstadoInicial() === 'Activo'
                        && $boolEsKonobit)
                    {
                        $objServicioHist = new InfoServicioHistorial();
                        $objServicioHist->setServicioId($entityServicio);
                        $objServicioHist->setObservacion('KONIBIT: Se Confirmo el Servicio');
                        $objServicioHist->setIpCreacion($clientIp);
                        $objServicioHist->setUsrCreacion($usrCreacion);
                        $objServicioHist->setFeCreacion(new \DateTime('now'));
                        $objServicioHist->setAccion('confirmarServicio');
                        $objServicioHist->setEstado($entityServicio->getEstado());
                        $this->emcom->persist($objServicioHist);
                    }
                                       
                    // Si es Cliente y posee contrato activo, y si producto no requiere flujo, se activa automaticamente el servicio
                    // y se genera Historial Se confirma servicio para que entre en proceso de Facturacion.
                    if($strPrefijoEmpresa == 'TN' && $objProducto && $objProducto->getEstadoInicial() === 'Activo'
                        && $objProducto->getDescripcionProducto()!='Provisión de Servicios Varios')
                    {
                        if($boolTieneContratoActivo)
                        {
                            $objServicioHist = new InfoServicioHistorial();
                            $objServicioHist->setServicioId($entityServicio);
                            $objServicioHist->setObservacion('Se Confirmo el Servicio');
                            $objServicioHist->setIpCreacion($clientIp);
                            $objServicioHist->setUsrCreacion($usrCreacion);
                            $objServicioHist->setFeCreacion(new \DateTime('now'));
                            $objServicioHist->setAccion('confirmarServicio');
                            $objServicioHist->setEstado($entityServicio->getEstado());
                            $this->emcom->persist($objServicioHist);
                            
                            if(empty($session))
                            {
                                $strUsrSession = $usrCreacion;
                            }
                            else
                            {
                                $strUsrSession = $session->get('empleado');

                            }
                            $arrayParametrosEnvioMail=array("servicio"                      => $entityServicio,
                                                            "observacionActivarServicio"    => 'Se Confirmo el Servicio',
                                                            "idEmpresa"                     => $strCodEmpresa,
                                                            "prefijoEmpresa"                => $strPrefijoEmpresa,
                                                            "empleadoSesion"                => $strUsrSession,
                                                            'user'                          => $usrCreacion,
                                                            'ipClient'                      => $clientIp);
                            
                            $this->servicioConfirmar->envioMailConfirmarServicio($arrayParametrosEnvioMail);
                        }
                    }
                    // flush para guardar caracteristicas tecnicas
                    $this->emcom->flush();
                    
                    if($boolEnvioNotifIPSB)
                    {
                        $arrayRespuestaIPSB = $this->serviceSoporte
                                                   ->crearTareaYNotificacionIPSB(array(
                                                                                        "objProducto"           => $objProducto,
                                                                                        "objServicio"           => $entityServicio,
                                                                                        "objPunto"              => $entityPunto,
                                                                                        "strPrefijoEmpresa"     => $strPrefijoEmpresa,
                                                                                        "strCodEmpresa"         => $strCodEmpresa,
                                                                                        "strIpClient"           => $clientIp,
                                                                                        "strEstadoSolServicio"  => "PreAsignacionInfoTecnica",
                                                                                        "strOpcion"             => $strNompreOpcionIpSb,
                                                                                        "strUsrSession"         => $usrCreacion,
                                                                                        "strNombreTecnicoProd"  => $strNombreTecnicoProd
                                                                                       ));
                        if($arrayRespuestaIPSB["strStatus"] === "ERROR")
                        {
                            throw new \Exception($arrayRespuestaIPSB["strMensaje"]);
                        }
                    }
                    
                    /*
                     * Se migra lógica para su ejecución post autorización del contrato.
                     * Aplica cuando el servicio de internet se encuentre en estado Factible
                     */
                    if($boolEnvioNotifAgregarEquipo && $strAplicaServicioCIH == "NO")
                    {
                        $this->servicioTecnico->envioNotifAgregarEquipo(array( 
                                                                                "objPunto"                  => $entityPunto,
                                                                                "objServicio"               => $entityServicio,
                                                                                "strObservacionCorreo"      => 
                                                                                'SOLICITUD AGREGAR EQUIPO creada automáticamente'
                                                                                .$strObservacionAgregarEquipo,
                                                                                "strDescripcionSolicitud"   => 'SOLICITUD AGREGAR EQUIPO',
                                                                                "strUsrCreacion"            => $usrCreacion,
                                                                                "strIpCreacion"             => $clientIp,
                                                                                ));
                    }
                    
                    if($entityPlan && $info == 'P')
                    {
                        //Guardo informacion de las caracteristicas de los planes                     
                        $caracteristicasPlan = $this->emcom->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                           ->getCaracteristicasPlan($entityPlan->getId());
                        foreach($caracteristicasPlan as $caracteristica)
                        {
                            $entityservicioplancaract = new InfoServicioPlanCaract();
                            $entityservicioplancaract->setServicioId($entityServicio->getId());
                            $entityservicioplancaract->setPlanCaracteristicaId($caracteristica['idPlanCaract']);
                            $entityservicioplancaract->setValor($caracteristica['valor']);
                            $entityservicioplancaract->setEstado("Activo");
                            $entityservicioplancaract->setUsrCreacion($usrCreacion);
                            $entityservicioplancaract->setFeCreacion(new \DateTime('now'));
                            $this->emcom->persist($entityservicioplancaract);
                        }
                    }
                    $this->emcom->flush();
                    //llego aqui
                    if (isset($valor['caracteristicasProducto']))
                    {
                        if (!is_array($valor['caracteristicasProducto']))
                        {
                            $valor['caracteristicasProducto'] = json_decode($valor['caracteristicasProducto'], true);
                            

                        }
                        //bandera para netvoice tb
                        foreach ($valor['caracteristicasProducto'] as $objCaracteristica)
                        {
                            if($objCaracteristica['valor'] == 'FIJA SMB')
                            {
                                $boolFijaSmb = true;
                            }
                            $strInstCaract = str_replace('[', '', $objCaracteristica['caracteristica']);
                            $strInstCaract = str_replace(']', '', $strInstCaract);
                            if ($strInstCaract == "INSTALACION_SIMULTANEA_COU_TELEFONIA_FIJA" 
                                && $objCaracteristica['valor'] !== "null")
                            {
                                $boolInstalSimultanea = true;
                                $arrayInstalSimultanea['valor']            = $objCaracteristica['valor'];
                                $arrayInstalSimultanea['caracteristica']   = $strInstCaract;
                                $arrayInstalSimultanea['idCaracteristica'] = $objCaracteristica['idCaracteristica'];
                            }
                          
                        }
                        
                        $arrayParams = array(   'servicio'      =>  $entityServicio,
                                                'caractProd'    =>  $valor['caracteristicasProducto'],
                                                'objProducto'   =>  $entityServicio->getProductoId(),
                                                'strEmpresaCod' =>  $strCodEmpresa);
                        $this->crearServicioProdCaract($arrayParams);

                        if(is_object($entityServicio->getProductoId()))
                        {
                            //Se obtiene el nombre tecnico del producto
                            $strNombreTecnico = $entityServicio->getProductoId()->getNombreTecnico();
                            //Registrar el tipo de RED para el servicio BACKUP
                            if($entityInfoServicioTecnico->getTipoEnlace() === "BACKUP" && ( $strNombreTecnico == "L3MPLS" ||
                                $strNombreTecnico == "INTERNET" || $strNombreTecnico == "INTMPLS"))
                            {
                                $this->emcom->flush();
                                $objInfoServicioProdCaract = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                            'TIPO_RED',
                                                                                                            $entityServicio->getProductoId());
                                if($strNombreTecnico == "INTERNET" && !is_object($objInfoServicioProdCaract))
                                {
                                    $objProductoINTMPLS = $this->emcom->getRepository('schemaBundle:AdmiProducto')
                                                                            ->findOneBy(array("nombreTecnico" => "INTMPLS",
                                                                                              "empresaCod"    => '10',
                                                                                              "estado"        => "Inactivo"));
                                    $objInfoServicioProdCaract = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                                'TIPO_RED',
                                                                                                                $objProductoINTMPLS);
                                }
                                if(is_object($objInfoServicioProdCaract))
                                {
                                    $objInfoServicioProdCaract->setValor($strTipoRed);
                                    $objInfoServicioProdCaract->setUsrUltMod($usrCreacion);
                                    $objInfoServicioProdCaract->setFeUltMod(new \DateTime('now'));
                                    $this->emcom->persist($objInfoServicioProdCaract);
                                }
                                else
                                {
                                    $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                                   $entityServicio->getProductoId(),
                                                                                                   'TIPO_RED',
                                                                                                   $strTipoRed,
                                                                                                   $usrCreacion);
                                }
                            }
                            else if($tipoOrden == 'C' && ( $strNombreTecnico == "L3MPLS" ||
                                    $strNombreTecnico == "INTERNET" || $strNombreTecnico == "INTMPLS"))
                            {
                                $this->emcom->flush();
                                $objInfoServicioProdCaract = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                            'TIPO_RED',
                                                                                                            $entityServicio->getProductoId());
                                if(is_object($objInfoServicioProdCaract))
                                {
                                    $objInfoServicioProdCaract->setValor($strTipoRed);
                                    $objInfoServicioProdCaract->setUsrUltMod($usrCreacion);
                                    $objInfoServicioProdCaract->setFeUltMod(new \DateTime('now'));
                                    $this->emcom->persist($objInfoServicioProdCaract);
                                }
                                else
                                {
                                    $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                                   $entityServicio->getProductoId(),
                                                                                                   'TIPO_RED',
                                                                                                   $strTipoRed,
                                                                                                   $usrCreacion);
                                }
                            }
                        }
                    }

                    $objServicioCanal = $this->emcom->getRepository("schemaBundle:InfoServicio")
                                                    ->findOneBy(array(  'puntoId'                    => $entityPunto->getId(),
                                                                        'descripcionPresentaFactura' => 'CANAL TELEFONIA',
                                                                        'estado'  => array('Activo', 'Pre-servicio', 'AsignadoTarea')));

                    //validacion para producto de netvoice en caso de TN se creara un servicio adicional que servira como concentrador
                    if($strPrefijoEmpresa == 'TN' && !is_object($objServicioCanal) && is_object($entityServicio) 
                       && $entityServicio->getProductoId()->getNombreTecnico() == "TELEFONIA_NETVOICE" 
                       && !$boolFijaSmb)
                    {
                        $boolServicioCanales = true;
                    }
                }
                else
                {
                    if (isset($valor['caracteristicasProducto']))
                    {
                        if (!is_array($valor['caracteristicasProducto']))
                        {
                            $valor['caracteristicasProducto'] = json_decode($valor['caracteristicasProducto'], true);
                        }
                        
                        foreach ($valor['caracteristicasProducto']  as $objCaracteristica)
                        {
                            if($valor['valor'] == 'FIJA SMB')
                            {
                                $boolFijaSmb = true;
                            }
                        }
                        $arrayParams = array(   'servicio'      =>  $entityServicio,
                                                'punto'         =>  $entityPunto,
                                                'usrCreacion'   =>  $usrCreacion,
                                                'caractProd'    =>  $valor['caracteristicasProducto'],
                                                'producto'      =>  $valor,
                                                'isValor'       =>  true );
                        $this->crearServicioProdCaract($arrayParams);
                    }
                }
                
                $boolAplicaCaractAP     = false;
                $boolTieneContrato      = false;
                $intIdContratoPrincipal = 0;
                
                $arrayObjContrato = $this->emcom->getRepository('schemaBundle:InfoContrato')->findBy(array(
                                                                                              "personaEmpresaRolId"=>
                                                                                              $entityPunto->getPersonaEmpresaRolId()->getId()));
                if(!empty($arrayObjContrato))
                {
                    foreach ($arrayObjContrato  as $ObjContrato)
                    {
                        $strEstadoContrato = $ObjContrato->getEstado();
                        if($strEstadoContrato == "Activo" || $strEstadoContrato == "Pendiente" || $strEstadoContrato == "porAutorizar")
                        {
                            $boolTieneContrato      = true;
					        $intIdContratoPrincipal = $ObjContrato->getId();
					        break; 
                        }
                    }
                    
                    if($boolTieneContrato) 
                    {
                        
                        $objAdendum = $this->emcom->getRepository('schemaBundle:InfoAdendum')->findOneBy(array(
                                                                                                            "tipo" => "C",
                                                                                                            "contratoId"=>$intIdContratoPrincipal));
                        if(!empty($objAdendum))
                        {
                            $arrayObjServicio = $this->emcom->getRepository('schemaBundle:InfoServicio')->findBy(array(
                                                                                                            "puntoId" => $objAdendum->getPuntoId()));
                             
                            if(!empty($arrayObjServicio))
                            {
                                foreach ($arrayObjServicio  as $objServicio)
                                {
                                    if($objServicio->getPlanId() != null )
                                    {
                                        $boolAplicaCaractAP=true;
                                        break; 
                                    }
                                } 
                            }
                        }
                        
                    }   
                }
                
                    if (($strPrefijoEmpresa === 'MD' ||$strPrefijoEmpresa === 'EN') &&
                        is_object($entityServicio) && 
                        is_object($entityServicio->getPlanId()) && 
                        $boolAplicaCaractAP )
                    {
                        $objCarFacturacion = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                         ->findOneBy(array('descripcionCaracteristica' => "PROM_INSTALACION",
                                                                           'estado'                    => "Activo"));
    
                        if ($objCarFacturacion)
                        {
                            $objInfoServCaracIns   = $this->emcom->getRepository("schemaBundle:InfoServicioCaracteristica")
                                                                 ->findOneBy(array("servicioId"       => $entityServicio,
                                                                                   "caracteristicaId" => $objCarFacturacion,
                                                                                   "estado"           => "Activo"));
                            if (empty($objInfoServCaracIns))
                            {
                                $objInfoServicioCaracFcat = new InfoServicioCaracteristica();
                                $objInfoServicioCaracFcat->setServicioId($entityServicio);
                                $objInfoServicioCaracFcat->setFeCreacion(new \DateTime('now'));
                                $objInfoServicioCaracFcat->setIpCreacion($clientIp);
                                $objInfoServicioCaracFcat->setUsrCreacion($usrCreacion);
                                $objInfoServicioCaracFcat->setValor('');
                                $objInfoServicioCaracFcat->setEstado('Activo');
                                $objInfoServicioCaracFcat->setObservacion("Se crea característica para facturación por punto adicional.");
                                $objInfoServicioCaracFcat->setCaracteristicaId($objCarFacturacion);
                                $this->emcom->persist($objInfoServicioCaracFcat);
                                $this->emcom->flush();
                            }
                        }
                    }

                 $boolEmpresa= ( $strPrefijoEmpresa === 'MD' || $strPrefijoEmpresa === 'EN' );
                 $boolCaractCodigoPromo=(isset($valor['caractCodigoPromo']) && !empty($valor['caractCodigoPromo']));
                 $boolPrudocto=(is_object($entityServicio->getProductoId()) || is_object($entityServicio->getPlanId()));
                 if ($strOrigen === 'WEB' && $boolCaractCodigoPromo && 
                    $boolEmpresa && 
                    is_object($entityServicio) && 
                    $boolPrudocto                 
                    && isset($valor['nombrePromo']) && !empty($valor['nombrePromo']) &&
                    isset($valor['idTipoPromo']) && !empty($valor['idTipoPromo']) )
                  {
                        $objCarMensualidad = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                        ->findOneBy(array('descripcionCaracteristica' => "PROM_COD_NUEVO",
                                          'estado'                    => "Activo"));

                        if ($objCarMensualidad)
                        {
                            $objInfoServicioCaracMens = new InfoServicioCaracteristica();
                            $objInfoServicioCaracMens->setServicioId($entityServicio);
                            $objInfoServicioCaracMens->setFeCreacion(new \DateTime('now'));
                            $objInfoServicioCaracMens->setIpCreacion($clientIp);
                            $objInfoServicioCaracMens->setUsrCreacion($usrCreacion);
                            $objInfoServicioCaracMens->setValor($valor['idTipoPromo']);
                            $objInfoServicioCaracMens->setEstado('Activo');
                            $objInfoServicioCaracMens->setObservacion("Se crea el código {$valor['caractCodigoPromo']} promocional"
                                                                . " para Mensualidad servicio nuevo.");
                            $objInfoServicioCaracMens->setCaracteristicaId($objCarMensualidad);
                            $this->emcom->persist($objInfoServicioCaracMens);

                            //Historial del servicio por ingreso de Código promocional
                            $objInfoServicioHistMens = new InfoServicioHistorial();
                            $objInfoServicioHistMens->setServicioId($entityServicio);
                            $objInfoServicioHistMens->setObservacion("Se agregó el código promocional: {$valor['caractCodigoPromo']}"
                                                                . ", de la promoción {$valor['nombrePromo']}");
                            $objInfoServicioHistMens->setEstado($entityServicio->getEstado());
                            $objInfoServicioHistMens->setUsrCreacion($usrCreacion);
                            $objInfoServicioHistMens->setFeCreacion(new \DateTime('now'));
                            $objInfoServicioHistMens->setIpCreacion($clientIp);
                            $this->emcom->persist($objInfoServicioHistMens);
                            $this->emcom->flush();
                        }
                        if(isset($valor['strServiciosMix']) && !empty($valor['strServiciosMix']))
                        {
                            $arrayServiciosMix = explode(",", $valor['strServiciosMix']);
                            for ($intServicio=0; $intServicio<count($arrayServiciosMix); $intServicio++)
                            {
                                $intIdServicioMix  = ($arrayServiciosMix[$intServicio]);
                                $arrayParametrosMix                        = array();
                                $arrayParametrosMix['intIdServicio']       = $intIdServicioMix;
                                $arrayParametrosMix['strIpCreacion']       = $clientIp;
                                $arrayParametrosMix['strUsrCreacion']      = $usrCreacion;
                                $arrayParametrosMix['strCodigo']           = $valor['caractCodigoPromo'];
                                $arrayParametrosMix['strPromocion']        = $valor['nombrePromo'];
                                $arrayParametrosMix['strEstado']           = 'Activo';
                                $arrayParametrosMix['strObservacion']      = "Se crea el código {$valor['caractCodigoPromo']}".
                                                                            " promocional para Mensualidad ervicio nuevo.";
                                $arrayParametrosMix['objCaracteristica']   = $objCarMensualidad;
                                $arrayParametrosMix['strIdTipoPromocion']  = $valor['idTipoPromo'];
                                $servicePromocion                          = $this->container->get('comercial.Promocion');
                                $servicePromocion->guardarCodigoServicioCarac($arrayParametrosMix);

                            }
                        }
                }

                if ($strOrigen === 'WEB' && isset($valor['caractCodigoPromoIns']) 
                    && !empty($valor['caractCodigoPromoIns']) && 
                    ($strPrefijoEmpresa === 'MD' || $strPrefijoEmpresa === 'EN' ) 
                    && is_object($entityServicio) 
                    && is_object($entityServicio->getPlanId()) &&
                    isset($valor['nombrePromoIns']) && !empty($valor['nombrePromoIns']) &&
                    isset($valor['idTipoPromoIns']) && !empty($valor['idTipoPromoIns']))
                {
                        $objCarInstalacion = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                        ->findOneBy(array('descripcionCaracteristica' => "PROM_COD_INST",
                                          'estado'                    => "Activo"));

                        if ($objCarInstalacion)
                        {
                            $objInfoServicioCaracInst = new InfoServicioCaracteristica();
                            $objInfoServicioCaracInst->setServicioId($entityServicio);
                            $objInfoServicioCaracInst->setFeCreacion(new \DateTime('now'));
                            $objInfoServicioCaracInst->setIpCreacion($clientIp);
                            $objInfoServicioCaracInst->setUsrCreacion($usrCreacion);
                            $objInfoServicioCaracInst->setValor($valor['idTipoPromoIns']);
                            $objInfoServicioCaracInst->setEstado('Activo');
                            $objInfoServicioCaracInst->setObservacion("Se crea el código {$valor['caractCodigoPromoIns']} promocional"
                                                                . " por instalación.");
                            $objInfoServicioCaracInst->setCaracteristicaId($objCarInstalacion);
                            $this->emcom->persist($objInfoServicioCaracInst);

                            //Historial del servicio por ingreso de Código promocional
                            $objInfoServicioHistInst = new InfoServicioHistorial();
                            $objInfoServicioHistInst->setServicioId($entityServicio);
                            $objInfoServicioHistInst->setObservacion("Se agregó el código promocional: {$valor['caractCodigoPromoIns']}"
                                                                . ", de la promoción {$valor['nombrePromoIns']}");
                            $objInfoServicioHistInst->setEstado($entityServicio->getEstado());
                            $objInfoServicioHistInst->setUsrCreacion($usrCreacion);
                            $objInfoServicioHistInst->setFeCreacion(new \DateTime('now'));
                            $objInfoServicioHistInst->setIpCreacion($clientIp);
                            $this->emcom->persist($objInfoServicioHistInst);
                            $this->emcom->flush();
                        }        

                }
                
                if ($strOrigen === 'WEB' && isset($valor['caractCodigoPromoBw']) && 
                    !empty($valor['caractCodigoPromoBw']) && 
                    ($strPrefijoEmpresa === 'MD' || $strPrefijoEmpresa === 'EN' )  && 
                    is_object($entityServicio) && is_object($entityServicio->getPlanId()) &&
                    isset($valor['nombrePromoBw']) && !empty($valor['nombrePromoBw']) &&
                    isset($valor['idTipoPromoBw']) && !empty($valor['idTipoPromoBw']))
                {
                        $objCarAnchoBanda = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                        ->findOneBy(array('descripcionCaracteristica' => "PROM_COD_BW",
                                          'estado'                    => "Activo"));

                        if ($objCarAnchoBanda)
                        {
                            $objInfoServicioCaracBW = new InfoServicioCaracteristica();
                            $objInfoServicioCaracBW->setServicioId($entityServicio);
                            $objInfoServicioCaracBW->setFeCreacion(new \DateTime('now'));
                            $objInfoServicioCaracBW->setIpCreacion($clientIp);
                            $objInfoServicioCaracBW->setUsrCreacion($usrCreacion);
                            $objInfoServicioCaracBW->setValor($valor['idTipoPromoBw']);
                            $objInfoServicioCaracBW->setEstado('Activo');
                            $objInfoServicioCaracBW->setObservacion("Se crea el código {$valor['caractCodigoPromoBw']} promocional"
                                                                . " por ancho de banda.");
                            $objInfoServicioCaracBW->setCaracteristicaId($objCarAnchoBanda);
                            $this->emcom->persist($objInfoServicioCaracBW);

                            //Historial del servicio por ingreso de Código promocional
                            $objInfoServicioHistBW = new InfoServicioHistorial();
                            $objInfoServicioHistBW->setServicioId($entityServicio);
                            $objInfoServicioHistBW->setObservacion("Se agregó el código promocional: {$valor['caractCodigoPromoBw']}"
                                                            . ", de la promoción {$valor['nombrePromoBw']}");
                            $objInfoServicioHistBW->setEstado($entityServicio->getEstado());
                            $objInfoServicioHistBW->setUsrCreacion($usrCreacion);
                            $objInfoServicioHistBW->setFeCreacion(new \DateTime('now'));
                            $objInfoServicioHistBW->setIpCreacion($clientIp);
                            $this->emcom->persist($objInfoServicioHistBW);
                            $this->emcom->flush();
                        }

                }
                
                if(is_object($entityServicio) && is_object($entityServicio->getProductoId()) 
                    && $entityServicio->getProductoId()->getNombreTecnico() == "TELCOHOME")
                {
                    $this->emcom->flush();
                    $objSpcVelocidadTelcoHome   = $this->servicioTecnico->getServicioProductoCaracteristica(    $entityServicio,
                                                                                                                'VELOCIDAD_TELCOHOME',
                                                                                                                $entityServicio->getProductoId()
                                                                                                            );
                    if(is_object($objSpcVelocidadTelcoHome))
                    {
                        $strVelocidadTelcoHome      = $objSpcVelocidadTelcoHome->getValor();
                        $arrayInfoVelocidadAutoriza = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                  ->getOne( 'PROD_VELOCIDAD_TELCOHOME', 
                                                                            '', 
                                                                            '', 
                                                                            '', 
                                                                            $strVelocidadTelcoHome,
                                                                            '', 
                                                                            'SI', 
                                                                            '', 
                                                                            '', 
                                                                            '');
                        if(!empty($arrayInfoVelocidadAutoriza))
                        {
                            $arrayCreaSolAutorizacion   = $this->validaAutorizacionServicio(array(  "objServicio"           => $entityServicio,
                                                                                                    "objPunto"              => $entityPunto,
                                                                                                    "objProducto"           => $objProducto,
                                                                                                    "strPrefijoEmpresa"     => $strPrefijoEmpresa,
                                                                                                    "strCodEmpresa"         => $strCodEmpresa,
                                                                                                    "strIpClient"           => $clientIp,
                                                                                                    "strUsrCreacion"        => $usrCreacion,
                                                                                                    "strVelocidadTelcoHome" => $strVelocidadTelcoHome,
                                                                                                    "strNombreProducto"     => 
                                                                                                    $objProducto->getDescripcionProducto(),
                                                                                                    "strUrlSolicitudes"     =>
                                                                                                    $arrayInfoVelocidadAutoriza['valor4'],
                                                                                                ));
                            if($arrayCreaSolAutorizacion["strStatus"] === "ERROR")
                            {
                                throw new \Exception($arrayCreaSolAutorizacion["strMensaje"]);
                            }
                        }
                    }
                }
                //se agrega codigo para almacenar entidades de servicios agregados
                if ($entityServicio)
                {
                    $arrayServicios[] = $entityServicio;
                }

                /*
                 * INICIO DEL PROCESO DE CREACIÓN DE UNA SOLUCIÓN.
                 */
                if($boolEsTipoSolucion)
                {
                    $strTipoProductoSol  = $valor['tipoProducto'];
                    $objProductoSolucion = $entityServicio->getProductoId();

                    //Array Detalle de solución.
                    $boolEsCoreHousing      = $this->servicioTecnico->isContieneCaracteristica($objProductoSolucion,'ES_HOUSING');
                    $boolEsCoreHosting      = $this->servicioTecnico->isContieneCaracteristica($objProductoSolucion,'ES_POOL_RECURSOS');
                    $strEsCore              = $boolEsCoreHousing || $boolEsCoreHosting ? 'SI' : 'NO';
                    $arrayDetalleSolucion[] = array('servicioId'          => $entityServicio->getId(),
                                                    'tipoSolucion'        => $valor['tipoSubSolucion'],
                                                    'descripcion'         => $objProductoSolucion->getDescripcionProducto(),
                                                    'esCore'              => $strEsCore,
                                                    'solucionReferencial' => $valor['tipoSubSolucionReferencial'],
                                                    'esPreferencial'      => $strTipoProductoSol == 'P' ? 'SI' : 'NO');

                    //Si el producto del servicio es Housing, obtenemos las características del recurso.
                    if ($boolEsCoreHousing)
                    {
                        $boolValidaHousing    = false;
                        $arrayCaracteristicas = $valor['caracteristicasProducto'];
                        foreach ($arrayCaracteristicas as $arrayCaractHousing)
                        {
                            $strDescripcion   = $arrayCaractHousing['descripcion'];
                            if ($strDescripcion == '[HS ESPACIO]' || $strDescripcion == 'HS ESPACIO')
                            {
                                $strTipoRecurso = $strDescripcion;
                                $strValor       = $arrayCaractHousing['valor'];
                                $boolValidaHousing = true;
                            }
                        }
                        if ($boolValidaHousing)
                        {
                            $strTipoRecurso = $strTipoRecurso == '[HS ESPACIO]' ? 'HS ESPACIO' : $strTipoRecurso;
                        }
                        else
                        {
                            $strDescripcion = $arrayCaracteristicas[0]['descripcion'];
                            $strValor       = $arrayCaracteristicas[0]['valor'];
                            $strTipoRecurso = $strDescripcion == '[HS ESPACIO]' ? 'HS ESPACIO' : $strDescripcion;
                        }
                        
                        $arrayRecursos[]      = array('servicioId'         => $entityServicio->getId(),
                                                      'secuencial'         => $valor['secuencial'],
                                                      'tipoRecurso'        => $strTipoRecurso,
                                                      'descripcionRecurso' => $strValor,
                                                      'cantidad'           => $valor['cantidad']);
                    }

                    //Si el producto es de tipo Preferencial para el agrupamiento se lo marca como tal en las caracteristicas
                    if($strTipoProductoSol == 'P')
                    {
                        if($objProductoSolucion->getEsConcentrador() == 'SI' && $objProductoSolucion->getNombreTecnico()=='DATOSDC')
                        {
                            //Como es concentrador y las características de CAPACIDAD1 y CAPACIDAD2 no se muestran en la creación se las crea
                            //en esta instancia en 0
                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                           $objProductoSolucion,
                                                                                           'CAPACIDAD1',
                                                                                           0,
                                                                                           $usrCreacion
                                                                                          );
                            
                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                           $objProductoSolucion,
                                                                                           'CAPACIDAD2',
                                                                                           0,
                                                                                           $usrCreacion
                                                                                          );
                        }

                        if ($boolEsEdicionSolucion && !empty($valor['tipoSubSolucionReferencial']))
                        {
                            $arrayInformacionEdicion = array_filter(explode("|", $valor['tipoSubSolucionReferencial']));
                            foreach ($arrayInformacionEdicion as $strSubTipo)
                            {
                                if (!empty($valor['tipoSubSolucion']) && $valor['tipoSubSolucion'] != $strSubTipo)
                                {
                                    $arrayServiciosCore        = array();
                                    $arrayServiciosCoreSubTipo = $this->emcom->getRepository("schemaBundle:InfoServicio")
                                            ->getArrayServiciosPorSolucionYTipoSolucion($intNumeroSecuencia,$strSubTipo,'CORE');

                                    if (!empty($arrayServiciosCoreSubTipo) && count($arrayServiciosCoreSubTipo) > 0)
                                    {
                                        foreach ($arrayServiciosCoreSubTipo as $objInfoServicioSol)
                                        {
                                            $objInfoSolucionDet = $this->emcom->getRepository('schemaBundle:InfoSolucionDet')
                                                    ->findOneBy(array('servicioId' =>  $objInfoServicioSol->getId(),
                                                                      'estado'     => 'Activo',
                                                                      'esCore'     => 'SI'));

                                            if (is_object($objInfoSolucionDet))
                                            {
                                                $arrayServiciosCore[] = $objInfoServicioSol->getId();
                                            }
                                        }

                                        if (!empty($arrayServiciosCore) && count($arrayServiciosCore) > 0)
                                        {
                                            $arraySubTipos[] = array('servicio'  => $entityServicio->getId(),
                                                                     'servicios' => $arrayServiciosCore);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        //Si es edicion de solucion y ademas es un CORE nuevo, se agrega la referencial al Preferencial al cual esta siendo
                        //ligado
                        if ($boolEsEdicionSolucion && isset($valor['informacionPorEdicion']) && !empty($valor['informacionPorEdicion'])
                                && $strEsCore == 'SI')
                        {
                            $arrayInformacionEdicion = array_filter(explode("|", $valor['informacionPorEdicion']));
                            foreach ($arrayInformacionEdicion as $strInfo)
                            {
                                $intIdServicio   = explode("@", $strInfo)[0];
                                $objServicioPref = $this->emcom->getRepository("schemaBundle:InfoServicio")->find($intIdServicio);

                                if (is_object($objServicioPref))
                                {
                                    $arraySubTipos[] = array('servicio'  => $objServicioPref->getId(),
                                                             'servicios' => array($entityServicio->getId()));
                                }
                            }
                        }
                    }

                    //Si el producto tiene una configuracion multi-caracteristicas se guarda la informacion de manera especial
                    $boolMultipleCaracteristica = $this->servicioTecnico
                            ->isContieneCaracteristica($objProductoSolucion,'ES_MULTIPLE_CARACTERISTICAS');
                    
                    if ($boolMultipleCaracteristica)
                    {
                        $boolEsPoolRecursos   = $this->servicioTecnico->isContieneCaracteristica($objProductoSolucion,'ES_POOL_RECURSOS');
                        $boolEsLicenciamiento = $this->servicioTecnico->isContieneCaracteristica($objProductoSolucion,'ES_LICENCIAMIENTO_SO');
 
                        $arrayValores     = json_decode($valor['caracteristicasPoolRecursos'], true);
                        $strLicenciasHist = '';

                        //Acumula licencias  
                        if ($boolEsLicenciamiento)
                        {
                            $arrayLicenciaHist = array();
                            $strLicenciasHist  = 'Licencias Adquiridas:<br/>';

                            foreach ($arrayValores as $array)
                            {
                                $intContLicencias = 0;

                                if (!in_array($array['caracteristica'], $arrayLicenciaHist))
                                {
                                    foreach ($arrayValores as $arrayVal)
                                    {
                                        if($array['idRaw'] == $arrayVal['idRaw'])
                                        {
                                            $intContLicencias++;
                                        }
                                    }
                                }

                                if (empty($arrayLicenciaHist) || !in_array($array['caracteristica'], $arrayLicenciaHist))
                                {
                                    $arrayLicenciaHist[] = $array['caracteristica'];
                                    $strLicenciasHist .= '<i class="fa fa-long-arrow-right" aria-hidden="true"></i>'.
                                                         '<b>'.$array['tipoRecurso'].' : </b>'.$array['caracteristica'].
                                                         ' <b>('.$intContLicencias.' Licencias)</b><br/>';
                                }
                            }
                        }

                        foreach ($arrayValores as $array)
                        {
                            $strCaracteristica  = $array['tipoRecurso'];
                            $strTipoRecursoAdic = '';
                            $boolAgregar        = true;

                            //Se realiza ajuste para que el tipo de licenciamiento pertenezca a una misma clasificacion
                            if($boolEsLicenciamiento)
                            {
                                //Verificamos la duplicidad de las licencias para sumarlas.
                                $arrayListaServicios = array_map(function($arrayResultDc)
                                {
                                    return $arrayResultDc['servicioId'];
                                },$arrayRecursos);

                                //Obtenemos el listado de las licencias del servicio.
                                $arrayServiciosLic = array_keys($arrayListaServicios, $entityServicio->getId());

                                foreach ($arrayServiciosLic as $intPosicion)
                                {
                                    if ($arrayRecursos[$intPosicion]['tipoRecurso']        === $array['tipoRecurso'] &&
                                        $arrayRecursos[$intPosicion]['descripcionRecurso'] === $array['caracteristica'])
                                    {
                                        $boolAgregar = false;
                                        $arrayRecursos[$intPosicion]['cantidad'] += $array['cantidad'];
                                    }
                                }

                                $strCaracteristica  = 'TIPO LICENCIAMIENTO SERVICE';
                                $strTipoRecursoAdic = $array['tipoRecurso'];
                            }

                            //Obtenemos las características de los recursos Hosting.
                            if ($boolAgregar)
                            {
                                $intCantidad     = $array['cantidad'] ? $array['cantidad'] : $valor['cantidad'];
                                $arrayRecursos[] = array('servicioId'         => $entityServicio->getId(),
                                                         'secuencial'         => $valor['secuencial'],
                                                         'tipoRecurso'        => $array['tipoRecurso'],
                                                         'descripcionRecurso' => $array['caracteristica'],
                                                         'cantidad'           => $intCantidad,
                                                         'esLicenciamiento'   => $boolEsLicenciamiento);
                            }

                            $objCaracteristica = $this->emcom->getRepository("schemaBundle:AdmiCaracteristica")
                                    ->findOneByDescripcionCaracteristica($strCaracteristica);

                            if(is_object($objCaracteristica))
                            {
                                $objProdCaract = $this->emcom->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                        ->findOneBy(array('productoId'       => $objProductoSolucion->getId(),
                                                          'caracteristicaId' => $objCaracteristica->getId()));

                                if(is_object($objProdCaract))
                                {
                                    $objServicioProdCaract  = new InfoServicioProdCaract();
                                    $objServicioProdCaract->setServicioId($entityServicio->getId());
                                    $objServicioProdCaract->setProductoCaracterisiticaId($objProdCaract->getId());
                                    $objServicioProdCaract->setValor(!empty($strTipoRecursoAdic)?
                                                                     $strTipoRecursoAdic.'@'.$array['caracteristica']:$array['caracteristica']);
                                    $objServicioProdCaract->setEstado('Activo');
                                    $objServicioProdCaract->setUsrCreacion($entityServicio->getUsrCreacion());
                                    $objServicioProdCaract->setFeCreacion(new \DateTime('now'));
                                    $this->emcom->persist($objServicioProdCaract);
                                    $this->emcom->flush();
                                }
                            }
                            
                            //Agregar referencia de los descuentos en caso de existir
                            if($array['descuento']!=0 || !empty($array['descuento']))
                            {
                                $objCaracteristica = $this->emcom->getRepository("schemaBundle:AdmiCaracteristica")
                                        ->findOneByDescripcionCaracteristica('DESCUENTO_POR_CARACTERISTICA');

                                if(is_object($objCaracteristica))
                                {
                                    $objProdCaract = $this->emcom->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                            ->findOneBy(array('productoId'       => $objProductoSolucion->getId(),
                                                              'caracteristicaId' => $objCaracteristica->getId()));

                                    $objServicioProdCaractDescto  = new InfoServicioProdCaract();
                                    $objServicioProdCaractDescto->setServicioId($entityServicio->getId());
                                    $objServicioProdCaractDescto->setProductoCaracterisiticaId($objProdCaract->getId());
                                    $objServicioProdCaractDescto->setValor($array['descuento']);
                                    $objServicioProdCaractDescto->setEstado('Activo');
                                    $objServicioProdCaractDescto->setRefServicioProdCaractId($objServicioProdCaract->getId());
                                    $objServicioProdCaractDescto->setUsrCreacion($entityServicio->getUsrCreacion());
                                    $objServicioProdCaractDescto->setFeCreacion(new \DateTime('now'));
                                    $this->emcom->persist($objServicioProdCaractDescto);
                                    $this->emcom->flush();
                                }
                            }
                        }

                        if($boolEsLicenciamiento)
                        {
                            $objServicioHist = new InfoServicioHistorial();
                            $objServicioHist->setServicioId($entityServicio);
                            $objServicioHist->setObservacion($strLicenciasHist);
                            $objServicioHist->setIpCreacion($clientIp);
                            $objServicioHist->setUsrCreacion($usrCreacion);
                            $objServicioHist->setFeCreacion(new \DateTime('now'));
                            $objServicioHist->setEstado($entityServicio->getEstado());
                            $this->emcom->persist($objServicioHist);
                        }

                        if($boolEsPoolRecursos)
                        {
                            $arrayMaquinaPorPool = array();

                            //Validar que máquinas virtuales pertenecen a determinado Pool de Recursos
                            foreach($arrayMaquinasVirtuales as $arrayMVs)
                            {
                                if($arrayMVs->secuencial == $valor['secuencial'] && !empty($arrayMVs->maquinasVirtuales))
                                {
                                    $arrayMaquinaPorPool = $arrayMVs->maquinasVirtuales;
                                }
                            }

                            if(!empty($arrayMaquinaPorPool))
                            {
                                $arrayParametrosMV                             = array();
                                $arrayParametrosMV['strJson']                  = json_encode($arrayMaquinaPorPool);
                                $arrayParametrosMV['intIdServicio']            = $entityServicio->getId();
                                $arrayParametrosMV['intIdVcenter']             = '';
                                array_push($arrayServicioMV, $arrayParametrosMV);
                            }
                        }
                    }
                }

                 //Si el servicio pasa a estado asignada se verifica si no tiene login aux para poder crearlo
                if(($entityServicio->getEstado() == "Activo" && $strPrefijoEmpresa === 'TN') || $strPrefijoEmpresa ==='TNP')
                {
                    //Generacion de Login Auxiliar al Servicio            
                    $this->servicioTecnico->generarLoginAuxiliar($entityServicio->getId());
                }
                
                if($tipoOrden == 'C' && is_object($entityServicio))
                {
                    
                    $objServicioTecnico = $this->emcom->getRepository('schemaBundle:InfoServicioTecnico')
                                                      ->findOneByServicioId($entityServicio->getId());

                    if(is_object($objServicioTecnico))
                    {
                        $intUltimaMillaId = $objServicioTecnico->getUltimaMillaId();
                        $strTipoEnlace    = $objServicioTecnico->getTipoEnlace();

                        //validar que el punto exista
                        if(is_object($entityPunto))
                        {
                            // Obtenemos cantidad de servicios que posean la misma ultima milla y tipo de enlace del servicio pasado como parámetro
                            $arrayServiciosUM = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                            ->getServiciosPorUmTipoEnlace(array("intIdEmpresa"     => $strCodEmpresa,
                                                                                                "intIdPunto"       => $entityPunto->getId(),
                                                                                                "intUltimaMillaId" => $intUltimaMillaId,
                                                                                                "strTipoEnlace"    => $strTipoEnlace));

                            $intTotalServicios = $arrayServiciosUM['total'];
                        }
                    }
                }
                $arrayRespuestaServicio['intIdServicio']          = $entityServicio->getId();
                $arrayRespuestaServicio['intTotalServiciosPunto'] = $intTotalServicios;                
                //Verificar si el Producto es de tipo Cloudform
                $boolEsConsumo = $this->servicioTecnico->isContieneCaracteristica($entityServicio->getProductoId(),'FACTURACION POR CONSUMO');
                
                if($boolEsConsumo && $strPrefijoEmpresa == 'TN')
                {
                    $objPunto = $entityServicio->getPuntoId();
                    
                    $boolContinua = $this->eminf->getRepository("schemaBundle:InfoPunto")
                                                ->isSolicitudCloudFormAprobadaPorPunto($objPunto->getLogin());
                                        
                    if($boolContinua)
                    {                        
                        $strNombreCanton = '';
                        $intIdCanton     = 0;
                        $intIdOficina    = $objPunto->getPuntoCoberturaId()->getOficinaId();

                        $objOficina      = $this->emcom->getRepository("schemaBundle:InfoOficinaGrupo")->find($intIdOficina);

                        if(is_object($objOficina))
                        {
                            $objCanton = $this->emcom->getRepository("schemaBundle:AdmiCanton")->find($objOficina->getCantonId());

                            if(is_object($objCanton))
                            {
                                $strRegion = $objCanton->getProvinciaId()->getRegionId()->getNombreRegion();
                            }
                        }

                        $arrayParametros =  $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('RELACION REGION CON CIUDAD PARA DATACENTER', 
                                                                   'COMERCIAL', 
                                                                   '',
                                                                   $strRegion,
                                                                   '', 
                                                                   '',
                                                                   '',
                                                                   '', 
                                                                   '', 
                                                                   $strCodEmpresa);
                        if(!empty($arrayParametros))
                        {
                            $strNombreCanton = $arrayParametros['valor1'];

                            $objCanton = $this->emgen->getRepository("schemaBundle:AdmiCanton")->findOneByNombreCanton($strNombreCanton);

                            if(is_object($objCanton))
                            {
                                $intIdCanton = $objCanton->getId();
                            }
                        }

                        $arrayInfoEnvio   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->get('CLOUDFORM TAREAS POR DEPARTAMENTO', 
                                                                  'SOPORTE', 
                                                                  '',
                                                                  'ACTIVACION DE SERVICIO CLOUDFORM',
                                                                  $strNombreCanton, 
                                                                  '',
                                                                  '',
                                                                  '', 
                                                                  '', 
                                                                  $strCodEmpresa);

                        $strObservacion = '<b>Tarea Automática :</b><br>Se generó tarea para activación de Servicio CloudForm<br>'
                                         .'<b>Login : </b> '.$objPunto->getLogin().'<br>';

                        //Obtener la solicitud
                        $objCaractPunto = $this->emcom->getRepository("schemaBundle:AdmiCaracteristica")
                                                      ->findOneBy( array('estado'                    => "Activo",
                                                                         'descripcionCaracteristica' => "ID_PUNTO") );
                        $intIdSolicitud = '';

                        if(is_object($objCaractPunto))
                        {
                            $objSolicitud = $this->emcom->getRepository("schemaBundle:InfoDetalleSolCaract")
                                                        ->findOneBy(array('estado'           => 'Aprobada',
                                                                          'valor'            => $objPunto->getId(),
                                                                          'caracteristicaId' => $objCaractPunto->getId()));
                            if(is_object($objSolicitud))
                            {
                                $intIdSolicitud = $objSolicitud->getDetalleSolicitudId()->getId();
                            }
                        }

                        //Tarea a cobranzas
                        $arrayParametrosEnvioPlantilla                      = array();
                        $arrayParametrosEnvioPlantilla['strObservacion']    = $strObservacion;
                        $arrayParametrosEnvioPlantilla['strUsrCreacion']    = $usrCreacion;
                        $arrayParametrosEnvioPlantilla['strIpCreacion']     = $clientIp;
                        $arrayParametrosEnvioPlantilla['intDetalleSolId']   = $intIdSolicitud;
                        $arrayParametrosEnvioPlantilla['strTipoAfectado']   = 'Cliente';
                        $arrayParametrosEnvioPlantilla['objPunto']          = $objPunto;
                        $arrayParametrosEnvioPlantilla['strCantonId']       = $intIdCanton;
                        $arrayParametrosEnvioPlantilla['strEmpresaCod']     = $strCodEmpresa;
                        $arrayParametrosEnvioPlantilla['strPrefijoEmpresa'] = $strPrefijoEmpresa;                       

                        foreach($arrayInfoEnvio as $array)
                        {
                            $objTarea  = $this->emSoporte->getRepository("schemaBundle:AdmiTarea")->findOneByNombreTarea($array['valor3']);

                            $arrayParametrosEnvioPlantilla['arrayCorreos']   = array($array['valor2']);
                            $arrayParametrosEnvioPlantilla['intTarea']       = is_object($objTarea)?$objTarea->getId():'';

                            //Se obtiene el departamento
                            $objDepartamento = $this->emSoporte->getRepository("schemaBundle:AdmiDepartamento")
                                                               ->findOneByNombreDepartamento($array['valor4']);

                            $arrayParametrosEnvioPlantilla['objDepartamento']    = $objDepartamento;
                            $arrayParametrosEnvioPlantilla["strBanderaTraslado"] = "";
                            $this->serviceInfoCambiarPlan->crearTareaRetiroEquipoPorDemo($arrayParametrosEnvioPlantilla);
                        }
                    }
                }                                                
                //VALIDAMOS QUE TENGA LA CARACTERISTICA SDWAN
                $boolEsSdwan         = $this->servicioTecnico->isContieneCaracteristica($objProducto,'SDWAN');

                if($boolEsSdwan)
                {
                    $objCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                            ->findOneBy(array('descripcionCaracteristica' => 'SDWAN',
                                                                            'tipo'                      => 'TECNICA',
                                                                            'estado'                    => 'Activo'
                                                                    ));
                    
                    if(is_object($objCaracteristica))
                    {
                        $objProdCaract = $this->emcom->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                                        ->findOneBy(array('productoId'       => $objProducto->getId(),
                                                                        'caracteristicaId' => $objCaracteristica->getId(),
                                                                        'estado'           => 'Activo'));
                        if(is_object($objProdCaract))
                        {
                            $objServicioProdCaract  = new InfoServicioProdCaract();
                            $objServicioProdCaract->setServicioId($entityServicio->getId());
                            $objServicioProdCaract->setProductoCaracterisiticaId($objProdCaract->getId());
                            $objServicioProdCaract->setValor('S');
                            $objServicioProdCaract->setEstado('Activo');
                            $objServicioProdCaract->setUsrCreacion($entityServicio->getUsrCreacion());
                            $objServicioProdCaract->setFeCreacion(new \DateTime('now'));
                            $this->emcom->persist($objServicioProdCaract);
                            $this->emcom->flush();
                        }
                    }
                }
                if ($strPrefijoEmpresa == "MD" || $strPrefijoEmpresa == "EN")
                {
                    $entityAdendum = $this->emcom->getRepository('schemaBundle:InfoAdendum')
                                                    ->findOneBy(array('puntoId'     => $entityPunto->getId(),
                                                                    'servicioId'  => $entityServicio->getId()));   
                    if(!is_object($entityAdendum))
                    {
                        $entityInfoAdendum = new InfoAdendum();
                        $entityInfoAdendum->setFeCreacion(new \DateTime('now'));
                        $entityInfoAdendum->setPuntoId($entityPunto->getId());
                        $entityInfoAdendum->setServicioId($entityServicio->getId());
                        $entityInfoAdendum->setIpCreacion($clientIp);
                        $entityInfoAdendum->setUsrCreacion($entityServicio->getUsrCreacion());
                        $entityInfoAdendum->setEstado("Pendiente");
                        $this->emcom->persist($entityInfoAdendum);
                        $this->emcom->flush();
                    }

                }
                
                if(!empty($valor['boom_id']))
                {                        
                    $intBoomId   = $valor['boom_id'];

                    $objAdmiCaracteristicaNomB = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                 ->findOneBy(array("descripcionCaracteristica" => 'ID_BOOM',
                                                                   "estado"                    => "Activo"));


                    if(is_object($objAdmiCaracteristicaNomB))
                    {
                        $objAdmiProdCaractNomB = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                         ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                           "caracteristicaId" => $objAdmiCaracteristicaNomB,
                                                                           "estado"           => "Activo")); 
                    }
                    if(is_object($objAdmiProdCaractNomB) && !empty($intBoomId))
                    {
                        $objServicioProdCaract  = new InfoServicioProdCaract();
                        $objServicioProdCaract->setServicioId($entityServicio->getId());
                        $objServicioProdCaract->setProductoCaracterisiticaId($objAdmiProdCaractNomB->getId());
                        $objServicioProdCaract->setValor($intBoomId);
                        $objServicioProdCaract->setEstado('Activo');
                        $objServicioProdCaract->setUsrCreacion($entityServicio->getUsrCreacion());
                        $objServicioProdCaract->setFeCreacion(new \DateTime('now'));
                        $this->emcom->persist($objServicioProdCaract);
                        $this->emcom->flush();
                    }
                }
                /*AGREGAMOS SI ES PROYECTO*/
                if(isset($valor['intIdProyecto']) && !empty($valor['intIdProyecto']))
                {                        
                    $intProyectoId   = $valor['intIdProyecto'];

                    /*Agregamos el proyecto*/
                    $objAdmiCaracteristicaProy = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                 ->findOneBy(array("descripcionCaracteristica" => 'PROYECTO_CRM',
                                                                   "estado"                    => "Activo"));


                    if(is_object($objAdmiCaracteristicaProy))
                    {
                        $objAdmiProdCaractProy = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                         ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                           "caracteristicaId" => $objAdmiCaracteristicaProy,
                                                                           "estado"           => "Activo")); 
                    }
                    if(is_object($objAdmiProdCaractProy) && !empty($intProyectoId))
                    {
                        $objServicioProdCaract  = new InfoServicioProdCaract();
                        $objServicioProdCaract->setServicioId($entityServicio->getId());
                        $objServicioProdCaract->setProductoCaracterisiticaId($objAdmiProdCaractProy->getId());
                        $objServicioProdCaract->setValor($intProyectoId);
                        $objServicioProdCaract->setEstado('Activo');
                        $objServicioProdCaract->setUsrCreacion($entityServicio->getUsrCreacion());
                        $objServicioProdCaract->setFeCreacion(new \DateTime('now'));
                        $this->emcom->persist($objServicioProdCaract);
                        $this->emcom->flush();
                    }
                    /*Agregamos la caracteristica de estado para flujo de proyecto*/
                    $objAdmiCaracteristicaPed = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                 ->findOneBy(array("descripcionCaracteristica" => 'PEDIDO_ESTADO',
                                                                   "estado"                    => "Activo"));


                    if(is_object($objAdmiCaracteristicaPed))
                    {
                        $objAdmiProdCaractPed = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                         ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                           "caracteristicaId" => $objAdmiCaracteristicaPed,
                                                                           "estado"           => "Activo")); 
                    }
                    if(is_object($objAdmiProdCaractPed) && !empty($intProyectoId))
                    {
                        $objServicioProdCaract  = new InfoServicioProdCaract();
                        $objServicioProdCaract->setServicioId($entityServicio->getId());
                        $objServicioProdCaract->setProductoCaracterisiticaId($objAdmiProdCaractPed->getId());
                        $objServicioProdCaract->setValor('PEDIDO_GENERADO');
                        $objServicioProdCaract->setEstado('Activo');
                        $objServicioProdCaract->setUsrCreacion($entityServicio->getUsrCreacion());
                        $objServicioProdCaract->setFeCreacion(new \DateTime('now'));
                        $this->emcom->persist($objServicioProdCaract);
                        $this->emcom->flush();
                    }
                }
                /*AGREGAMOS CAMBIOS PARA COTIZACION*/
                if($valor['cotizacion'])
                {                        
                    $intCotizacion   = $valor['cotizacion'];
                    $strCotizacion   = $valor['cot_desc'];

                    $objAdmiCaracteristicaNom = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                 ->findOneBy(array("descripcionCaracteristica" => 'COTIZACION_NOMBRE',
                                                                   "estado"                    => "Activo"));


                    if(is_object($objAdmiCaracteristicaNom))
                    {
                        $objAdmiProdCaractNom = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                         ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                           "caracteristicaId" => $objAdmiCaracteristicaNom,
                                                                           "estado"           => "Activo")); 
                    }
                    if(is_object($objAdmiProdCaractNom) && !empty($strCotizacion))
                    {
                        $objServicioProdCaract  = new InfoServicioProdCaract();
                        $objServicioProdCaract->setServicioId($entityServicio->getId());
                        $objServicioProdCaract->setProductoCaracterisiticaId($objAdmiProdCaractNom->getId());
                        $objServicioProdCaract->setValor($strCotizacion);
                        $objServicioProdCaract->setEstado('Activo');
                        $objServicioProdCaract->setUsrCreacion($entityServicio->getUsrCreacion());
                        $objServicioProdCaract->setFeCreacion(new \DateTime('now'));
                        $this->emcom->persist($objServicioProdCaract);
                        $this->emcom->flush();
                    }

                    $objAdmiCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                 ->findOneBy(array("descripcionCaracteristica" => 'COTIZACION_PRODUCTOS',
                                                                   "estado"                    => "Activo"));


                    if(is_object($objAdmiCaracteristica))
                    {
                        $objAdmiProdCaract = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                         ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                           "caracteristicaId" => $objAdmiCaracteristica,
                                                                           "estado"           => "Activo")); 
                    }
                    if(is_object($objAdmiProdCaract))
                    {
                        $objServicioProdCaract  = new InfoServicioProdCaract();
                        $objServicioProdCaract->setServicioId($entityServicio->getId());
                        $objServicioProdCaract->setProductoCaracterisiticaId($objAdmiProdCaract->getId());
                        $objServicioProdCaract->setValor($intCotizacion);
                        $objServicioProdCaract->setEstado('Activo');
                        $objServicioProdCaract->setUsrCreacion($entityServicio->getUsrCreacion());
                        $objServicioProdCaract->setFeCreacion(new \DateTime('now'));
                        $this->emcom->persist($objServicioProdCaract);
                        $this->emcom->flush();

                        $objAdmiCaracProyecto = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                            ->findOneBy(array("descripcionCaracteristica" => 'TIPO_PROYECTO',
                                                                              "estado"                    => "Activo"));
                        if( is_object($objAdmiCaracProyecto) && !empty($objAdmiCaracProyecto) )
                        {
                            $objAdmiProdCaractProyecto = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                     ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                                       "caracteristicaId" => $objAdmiCaracProyecto,
                                                                                       "estado"           => "Activo"));
                            if( is_object($objAdmiProdCaractProyecto) && !empty($objAdmiProdCaractProyecto) )
                            {
                                $objServicioProdCaract  = new InfoServicioProdCaract();
                                $objServicioProdCaract->setServicioId($entityServicio->getId());
                                $objServicioProdCaract->setProductoCaracterisiticaId($objAdmiProdCaractProyecto->getId());
                                $objServicioProdCaract->setValor("PYL");
                                $objServicioProdCaract->setEstado('Activo');
                                $objServicioProdCaract->setUsrCreacion($entityServicio->getUsrCreacion());
                                $objServicioProdCaract->setFeCreacion(new \DateTime('now'));
                                $this->emcom->persist($objServicioProdCaract);
                                $this->emcom->flush();
                            }
                        }

                        $objInfoContrato = $this->emcom->getRepository('schemaBundle:InfoContrato')
                                        ->findContratoActivoPorPersonaEmpresaRol($entityPunto->getPersonaEmpresaRolId()->getId());
                        if (!empty($objInfoContrato))
                        {
                            $objTipoSolicitudProyecto = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                    ->findOneBy(array("descripcionSolicitud" => "SOLICITUD DE PROYECTO",
                                                                                      "estado"               => "Activo"));
                            if( !is_object($objTipoSolicitudProyecto) && empty($objTipoSolicitudProyecto) )
                            {
                                throw new \Exception("No existe Objeto para el tipo de Solicitud de Proyecto");
                            }

                            $objDetTipoSolProyecto= new InfoDetalleSolicitud();
                            $objDetTipoSolProyecto->setServicioId($entityServicio);
                            $objDetTipoSolProyecto->setTipoSolicitudId($objTipoSolicitudProyecto);
                            $objDetTipoSolProyecto->setObservacion("Se crea Solicitud para crear un proyecto en TelcoCRM.");
                            $objDetTipoSolProyecto->setFeCreacion(new \DateTime('now'));
                            $objDetTipoSolProyecto->setUsrCreacion($entityServicio->getUsrCreacion());
                            $objDetTipoSolProyecto->setEstado('Pendiente');
                            $this->emcom->persist($objDetTipoSolProyecto);
                            $this->emcom->flush();
                            $objDetTipoSolProyectoHist = new InfoDetalleSolHist();
                            $objDetTipoSolProyectoHist->setDetalleSolicitudId($objDetTipoSolProyecto);
                            $objDetTipoSolProyectoHist->setEstado($objDetTipoSolProyecto->getEstado());
                            $objDetTipoSolProyectoHist->setFeCreacion(new \DateTime('now'));
                            $objDetTipoSolProyectoHist->setUsrCreacion($entityServicio->getUsrCreacion());
                            $objDetTipoSolProyectoHist->setObservacion("Se crea Solicitud de Proyecto");
                            $objDetTipoSolProyectoHist->setIpCreacion($clientIp);
                            $this->emcom->persist($objDetTipoSolProyectoHist);
                            $this->emcom->flush();
                        }
                    }
                }
                $strPropuesta   = "";
                $intIdPropuesta = "";
                if(isset($valor['strPropuesta']) && !empty($valor['strPropuesta']) &&
                   isset($valor['intIdPropuesta']) && !empty($valor['intIdPropuesta']))
                {
                    $strPropuesta                = $valor['strPropuesta'];
                    $intIdPropuesta              = $valor['intIdPropuesta'];
                    $objAdmiCaracNombrePropuesta = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                               ->findOneBy(array("descripcionCaracteristica" => 'NOMBRE_PROPUESTA',
                                                                                 "estado"                    => "Activo"));
                    if(is_object($objAdmiCaracNombrePropuesta) && !empty($objAdmiCaracNombrePropuesta))
                    {
                        $objAdmiProdCaractNombrePropuesta = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                        ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                                          "caracteristicaId" => $objAdmiCaracNombrePropuesta,
                                                                                          "estado"           => "Activo"));
                        if(is_object($objAdmiProdCaractNombrePropuesta) && !empty($objAdmiProdCaractNombrePropuesta))
                        {
                            $objServicioProdCaract  = new InfoServicioProdCaract();
                            $objServicioProdCaract->setServicioId($entityServicio->getId());
                            $objServicioProdCaract->setProductoCaracterisiticaId($objAdmiProdCaractNombrePropuesta->getId());
                            $objServicioProdCaract->setValor($strPropuesta);
                            $objServicioProdCaract->setEstado('Activo');
                            $objServicioProdCaract->setUsrCreacion($entityServicio->getUsrCreacion());
                            $objServicioProdCaract->setFeCreacion(new \DateTime('now'));
                            $this->emcom->persist($objServicioProdCaract);
                            $this->emcom->flush();
                        }
                    }

                    $objAdmiCaracIdPropuesta = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                           ->findOneBy(array("descripcionCaracteristica" => 'ID_PROPUESTA',
                                                                             "estado"                    => "Activo"));
                    if(is_object($objAdmiCaracIdPropuesta) && !empty($objAdmiCaracIdPropuesta))
                    {
                        $objAdmiProdCaractIdPropuesta = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                    ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                                      "caracteristicaId" => $objAdmiCaracIdPropuesta,
                                                                                      "estado"           => "Activo"));
                        if(is_object($objAdmiProdCaractIdPropuesta) && !empty($objAdmiProdCaractIdPropuesta))
                        {
                            $objServicioProdCaract  = new InfoServicioProdCaract();
                            $objServicioProdCaract->setServicioId($entityServicio->getId());
                            $objServicioProdCaract->setProductoCaracterisiticaId($objAdmiProdCaractIdPropuesta->getId());
                            $objServicioProdCaract->setValor($intIdPropuesta);
                            $objServicioProdCaract->setEstado('Activo');
                            $objServicioProdCaract->setUsrCreacion($entityServicio->getUsrCreacion());
                            $objServicioProdCaract->setFeCreacion(new \DateTime('now'));
                            $this->emcom->persist($objServicioProdCaract);
                            $this->emcom->flush();
                        }
                    }
                    $objPersona   = $this->emcom->getRepository('schemaBundle:InfoPersona')
                                                ->find($entityPunto->getPersonaEmpresaRolId()
                                                                   ->getPersonaId()
                                                                   ->getId());
                    if(is_object($objPersona) && !empty($objPersona))
                    {
                        $arrayParametros      = array("strRuc"                 => $objPersona->getIdentificacionCliente(),
                                                      "intIdPropuesta"         => $intIdPropuesta,
                                                      "strLogin"               => $entityPunto->getLogin(),
                                                      "strDescripcionProducto" => $objProducto->getDescripcionProducto(),
                                                      "strBandera"             => "DETALLE",
                                                      "strPrefijoEmpresa"      => $strPrefijoEmpresa, 
                                                      "strCodEmpresa"          => $strCodEmpresa);
                        $arrayParametrosWSCrm = array("arrayParametrosCRM"     => $arrayParametros,
                                                      "strOp"                  => 'editPropuesta',
                                                      "strFuncion"             => 'procesar');
                        $arrayRespuestaWSCrm  = $this->serviceTelcoCrm->getRequestCRM($arrayParametrosWSCrm);
                        if(!empty($arrayRespuestaWSCrm["error"]) && isset($arrayRespuestaWSCrm["error"]))
                        {
                            throw new \Exception('Error al Actualizar Estado de la propuesta en TelcoCrm: '.$arrayRespuestaWSCrm["error"]);
                        }
                    }
                }
                if(!empty($strPrefijoEmpresa) && $strPrefijoEmpresa == 'TN')
                {
                    $objCaractRazonSocialCltDist    = $this->emcom->getRepository("schemaBundle:AdmiCaracteristica")
                                                                ->findOneBy(array("descripcionCaracteristica" => 'RAZON_SOCIAL_CLT_DISTRIBUIDOR',
                                                                                    "estado"                    => 'Activo'));
                    $objCaractIdentificacionCltDist = $this->emcom->getRepository("schemaBundle:AdmiCaracteristica")
                                                                ->findOneBy(array("descripcionCaracteristica" => 'IDENTIFICACION_CLT_DISTRIBUIDOR',
                                                                                    "estado"                    => 'Activo'));
                    if((!empty($objCaractRazonSocialCltDist)    && is_object($objCaractRazonSocialCltDist)) && 
                    (!empty($objCaractIdentificacionCltDist) && is_object($objCaractIdentificacionCltDist)))
                    {
                        $objInfoPuntoCaractRazonSocialClt = $this->emcom->getRepository("schemaBundle:InfoPuntoCaracteristica")
                                                                        ->findOneBy(array("puntoId"          => $entityPunto,
                                                                                        "caracteristicaId" => $objCaractRazonSocialCltDist,
                                                                                        "estado"           => "Activo"));
                        $objInfoPuntoCaractIdentificacionClt = $this->emcom->getRepository("schemaBundle:InfoPuntoCaracteristica")
                                                                    ->findOneBy(array("puntoId"          => $entityPunto,
                                                                                        "caracteristicaId" => $objCaractIdentificacionCltDist,
                                                                                        "estado"           => "Activo"));
                        if((!empty($objInfoPuntoCaractRazonSocialClt) && is_object($objInfoPuntoCaractRazonSocialClt)) && 
                        (!empty($objInfoPuntoCaractIdentificacionClt) && is_object($objInfoPuntoCaractIdentificacionClt)))
                        {
                            $strRazonSocialCltDistribuidor    = $objInfoPuntoCaractRazonSocialClt->getValor() ? 
                                                                $objInfoPuntoCaractRazonSocialClt->getValor():"";
                            $objAdmiProdCaractRazonSocialClt  = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                            ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                                            "caracteristicaId" => $objCaractRazonSocialCltDist,
                                                                                            "estado"           => "Activo"));
                            if( is_object($objAdmiProdCaractRazonSocialClt) && !empty($objAdmiProdCaractRazonSocialClt) )
                            {
                                $objServicioProdCaract  = new InfoServicioProdCaract();
                                $objServicioProdCaract->setServicioId($entityServicio->getId());
                                $objServicioProdCaract->setProductoCaracterisiticaId($objAdmiProdCaractRazonSocialClt->getId());
                                $objServicioProdCaract->setValor($strRazonSocialCltDistribuidor);
                                $objServicioProdCaract->setEstado('Activo');
                                $objServicioProdCaract->setUsrCreacion($entityServicio->getUsrCreacion());
                                $objServicioProdCaract->setFeCreacion(new \DateTime('now'));
                                $this->emcom->persist($objServicioProdCaract);
                                $this->emcom->flush();
                            }
                            $strIdentificacionCltDistribuidor    = $objInfoPuntoCaractIdentificacionClt->getValor() ? 
                                                                $objInfoPuntoCaractIdentificacionClt->getValor():"";
                            $objAdmiProdCaractIdentificacionClt  = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                    ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                                        "caracteristicaId" => $objCaractIdentificacionCltDist,
                                                                                        "estado"           => "Activo"));
                            if( is_object($objAdmiProdCaractIdentificacionClt) && !empty($objAdmiProdCaractIdentificacionClt) )
                            {
                                $objServicioProdCaract  = new InfoServicioProdCaract();
                                $objServicioProdCaract->setServicioId($entityServicio->getId());
                                $objServicioProdCaract->setProductoCaracterisiticaId($objAdmiProdCaractIdentificacionClt->getId());
                                $objServicioProdCaract->setValor($strIdentificacionCltDistribuidor);
                                $objServicioProdCaract->setEstado('Activo');
                                $objServicioProdCaract->setUsrCreacion($entityServicio->getUsrCreacion());
                                $objServicioProdCaract->setFeCreacion(new \DateTime('now'));
                                $this->emcom->persist($objServicioProdCaract);
                                $this->emcom->flush();
                            }
                        }
                    }
                }
                if(is_object($objProducto) && !empty($objProducto) && $objProducto->getNombreTecnico() == 'SECSALES')
                {
                    $intIdOficina    = $entityPunto->getPuntoCoberturaId()->getOficinaId();

                    $objOficina      = $this->emcom->getRepository("schemaBundle:InfoOficinaGrupo")->find($intIdOficina);

                    if(is_object($objOficina))
                    {
                        $objCanton = $this->emcom->getRepository("schemaBundle:AdmiCanton")->find($objOficina->getCantonId());

                        if(is_object($objCanton))
                        {
                            $strRegion      = $objCanton->getProvinciaId()->getRegionId()->getNombreRegion();
                            $strRegionTarea = $objCanton->getRegion();
                        }
                    }
                    if (!$boolParametroNombreTecnico)
                    {
                        $arrayInfoSeguSdwan = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                          ->getOne( 'CREAR_TAREA_SEGURIDAD_L2', 
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        'AsignadoTarea',
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        $strCodEmpresa);
                    }
                    else
                    {
                        $arrayInfoSeguSdwan = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                              ->getOne( 'CREAR_TAREA_SEGURIDAD_CPE_L2', 
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        'AsignadoTarea',
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        $strCodEmpresa);
                    }
                    
                    foreach ($valor['caracteristicasProducto']  as $objCaracteristicaMigra)
                    {
                        $strInstCaract = str_replace('[', '', $objCaracteristicaMigra['caracteristica']);
                        $strInstCaract = str_replace(']', '', $strInstCaract);
                        if ($strInstCaract == "ES PARA MIGRACION" 
                                && $objCaracteristicaMigra['valor'] !== "null")
                        {
                            $strValor             = $objCaracteristicaMigra['valor'];
                            if ($strValor == 'S')
                            {
                                //Si es para migracion asignamos la tarea de migración
                                $arrayInfoSeguSdwan = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                              ->getOne( 'CREAR_TAREA_MIGRACION_CPE_L2', 
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        'AsignadoTarea',
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        $strCodEmpresa);
                                $boolAsignaTarea = true;
                            }
                        }
                    }
                    
                    if(empty($arrayInfoSeguSdwan))
                    {
                        throw new \Exception("No se ha podido obtener la información para el envío de notificación");
                    }
                    $strNombreDepartamento  = $arrayInfoSeguSdwan['valor2'];
                    $strNombreTarea         = $arrayInfoSeguSdwan['valor3'];
                    $strObservacionTarea    = $arrayInfoSeguSdwan['valor4'];

                    $arrayDescripcionRol   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                 ->getOne('ASIGNAR_TAREA_JEFES',
                                                                          '',
                                                                          '',
                                                                          '',
                                                                          $strRegionTarea,
                                                                          $strNombreDepartamento,
                                                                          '',
                                                                          '',
                                                                          '',
                                                                          '');
                    if(!empty($arrayDescripcionRol) && !empty($arrayDescripcionRol["valor2"])
                            && $arrayDescripcionRol["valor2"] === $strNombreDepartamento)
                    {
                        $strDescripcionRol = (!empty($arrayDescripcionRol["valor3"])) ? $arrayDescripcionRol["valor3"] : $strDescripcionRol;
                    }
                    $arrayParametrosResponsable = array(
                                                        'idEmpresa'                     => $strCodEmpresa,
                                                        'estado'                        => 'Activo',
                                                        'strDescripcionRol'             => $strDescripcionRol,
                                                        'strDescripcionTipoRol'         => 'Empleado',
                                                        'strNombreDepartamento'         => $strNombreDepartamento,
                                                        'strRegionEmpleado'             => $strRegionTarea,
                                                        'esJefe'                        => 'S',
                                                        'strDescripcionFormaContacto'   => 'Correo Electronico'
                                                );
                    $arrayRespuestaResponsables = $this->emcom->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                    ->getResultadoPersonaEmpresaRolPorCriterios($arrayParametrosResponsable);
                    $arrayResultadoResponsables  = $arrayRespuestaResponsables['resultado'];
                    if(empty($arrayResultadoResponsables[0]))
                    {
                        throw new \Exception("No se ha podido encontrar el Jefe para la asignación de tarea");
                    }
                    else
                    {
                        $arrayJefeResponsable = $arrayResultadoResponsables[0];
                    }
                    $arrayDestinatariosJefes    = array();
                    if(isset($arrayJefeResponsable["contactos"]) && !empty($arrayJefeResponsable["contactos"]))
                    {
                        $arrayDestinatariosJefes    = explode(',', $arrayJefeResponsable["contactos"]);
                    }

                    $objEmpleadoUsrCreacion = $this->emcom->getRepository('schemaBundle:InfoPersona')
                                                                    ->getPersonaPorLogin($entityServicio->getUsrCreacion());
                    if(is_object($objEmpleadoUsrCreacion))
                    {
                        $strEmpleadoUsrCreacion = $objEmpleadoUsrCreacion->getNombres().' '.$objEmpleadoUsrCreacion->getApellidos();
                    }
                    else
                    {
                        $strEmpleadoUsrCreacion = "";
                    }

                    $objPersonaEmpresaRol       = $entityPunto->getPersonaEmpresaRolId();
                    if(is_object($objPersonaEmpresaRol))
                    {
                        $objPersona = $objPersonaEmpresaRol->getPersonaId();
                        $strCliente = sprintf("%s",$objPersona);
                    }
                    
                    $arrayParametrosTareaNotif  = array('strIdEmpresa'               => $strCodEmpresa,
                                                        'strPrefijoEmpresa'          => $strPrefijoEmpresa == 'TNP'?'TN':$strPrefijoEmpresa,
                                                        'strNombreTarea'             => $strNombreTarea,
                                                        'strObservacion'             => $strObservacionTarea,
                                                        'strNombreDepartamento'      => $strNombreDepartamento,
                                                        'strEmpleado'                => $strEmpleadoUsrCreacion,
                                                        'strUsrCreacion'             => $entityServicio->getUsrCreacion(),
                                                        'strIp'                      => $clientIp,
                                                        'strOrigen'                  => 'WEB-TN',
                                                        'strLogin'                   => $entityPunto->getLogin(),
                                                        'intPuntoId'                 => $entityPunto->getId(),
                                                        'strNombreCliente'           => $strCliente,
                                                        'arrayJefeResponsable'       => $arrayJefeResponsable,
                                                        'objDetalleSolicitud'	     => $objSolicitudInfoTecnica,
                                                        'arrayDestinatarios'         => array_merge($arrayDestinatarios,$arrayDestinatariosJefes),
                                                        'boolParametroNombreTecnico' => $boolParametroNombreTecnico
                                                        );
                    $arrayRespuestaCreacion     = $this->serviceSoporte->ingresarTareaInterna($arrayParametrosTareaNotif);
                    $strStatus                  = $arrayRespuestaCreacion['status'];
                    $strMensaje                 = $arrayRespuestaCreacion['mensaje'];
                }

                if ($strPrefijoEmpresa == "TN")
                {
                    //Consultamos si el producto es creado bajo red GPON para ingresar como caracteristica Ip Privada
                    $objParametroCabIpPrivada = $this->emgen->getRepository('schemaBundle:AdmiParametroCab')
                                                            ->findOneBy(array('nombreParametro' => 'IP_PRIVADA_FIJA_GPON',
                                                                              'estado'          => 'Activo'));
                    if (is_object($objParametroCabIpPrivada))
                    {
                        $arrayParDetIpPrivada = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                     ->findBy(array('parametroId'   => $objParametroCabIpPrivada->getId(),
                                                                                    'estado'        => 'Activo'));
                        if (is_array($arrayParDetIpPrivada) && !empty($arrayParDetIpPrivada))
                        {
                            $arrayIpPrivada = explode(",",$arrayParDetIpPrivada[0]->getValor1());
                        }
                    }
                    
                    //Consultamos el nombre tecnico y la empresa para generar login auxiliar para los productos son de TN, pero bajo red Gpon
                    if(in_array($objProducto->getId(),$arrayIpPrivada))   
                    {
                        //Agrego la caracteristica de TIPO_ENRUTAMIENTO para productos bajo red GPON
                        $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                       $objProducto,
                                                                                       'TIPO_ENRUTAMIENTO',
                                                                                       'Privada',
                                                                                       $usrCreacion);
                    }
                    
                    /*
                    * INICIO - AGREGAR SERVICIO FASTCLOUD SI EL PRODUCTO ES UN DIRECTLINK-MPLS
                    */
                    //seteo el id del producto relacionado
                    $intIdProductoRelacion     = null;
                    $strDescPreFacturaRelacion = null;
                    //se obtiene el parametro si se agrega un servicio relacionado
                    $arrayParAgregarServicio = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('CONFIG_PRODUCTO_DIRECT_LINK_MPLS',
                                                         'TECNICO',
                                                         '',
                                                         '',
                                                         $objProducto->getId(),
                                                         'AGREGAR_SERVICIO_RELACION',
                                                         '',
                                                         '',
                                                         '',
                                                         $strCodEmpresa);
                    if( isset($arrayParAgregarServicio) && !empty($arrayParAgregarServicio) )
                    {
                        $intIdProductoRelacion     = $arrayParAgregarServicio['valor3'];
                        $strDescPreFacturaRelacion = $arrayParAgregarServicio['valor4'];
                    }
                    //verifico si se agrega un nuevo servicio relacionado
                    if( !empty($intIdProductoRelacion) )
                    {
                        $objAdmiProdRel     = $this->emcom->getRepository('schemaBundle:AdmiProducto')->find($intIdProductoRelacion);
                        $objServicioTecnico = $this->emcom->getRepository('schemaBundle:InfoServicioTecnico')
                                                          ->findOneByServicioId($entityServicio->getId());
                        if(is_object($objAdmiProdRel) && $entityServicio->getTipoOrden() == 'N' 
                                                      && $objServicioTecnico->getTipoEnlace() == 'PRINCIPAL')
                        {
                            $objServicioRelacion = new InfoServicio();
                            $objServicioRelacion->setProductoId($objAdmiProdRel);
                            $objServicioRelacion->setPuntoId($entityServicio->getPuntoId());
                            $objServicioRelacion->setOrigen($entityServicio->getOrigen());
                            $objServicioRelacion->setTipoOrden($entityServicio->getTipoOrden());
                            $objServicioRelacion->setEsVenta($entityServicio->getEsVenta());
                            $objServicioRelacion->setCantidad($entityServicio->getCantidad());
                            $objServicioRelacion->setPrecioVenta(0);
                            $objServicioRelacion->setPuntoFacturacionId($entityServicio->getPuntoFacturacionId());
                            $objServicioRelacion->setUsrVendedor($entityServicio->getUsrVendedor());
                            $objServicioRelacion->setFeCreacion(new \DateTime('now'));
                            $objServicioRelacion->setUsrCreacion($entityServicio->getUsrCreacion());
                            $objServicioRelacion->setIpCreacion($clientIp);
                            $objServicioRelacion->setFrecuenciaProducto($entityServicio->getFrecuenciaProducto());
                            $objServicioRelacion->setMesesRestantes($entityServicio->getMesesRestantes());
                            $objServicioRelacion->setEstado('Pendiente');
                            $objServicioRelacion->setDescripcionPresentaFactura($strDescPreFacturaRelacion);
                            $this->validator->validateAndThrowException($objServicioRelacion);
                            $this->emcom->persist($objServicioRelacion);
                            $this->emcom->flush();
                            if( is_object($objServicioRelacion) )
                            {
                                //agrego el historial del servicio
                                $objServicioHistorialRel = new InfoServicioHistorial();
                                $objServicioHistorialRel->setServicioId($objServicioRelacion);
                                $objServicioHistorialRel->setObservacion('Creación automática de FastCloud luego de ingresar un servicio DirectLink');
                                $objServicioHistorialRel->setUsrCreacion($objServicioRelacion->getUsrCreacion());
                                $objServicioHistorialRel->setFeCreacion(new \DateTime('now'));
                                $objServicioHistorialRel->setIpCreacion($clientIp);
                                $objServicioHistorialRel->setEstado($objServicioRelacion->getEstado());
                                $this->emcom->persist($objServicioHistorialRel);
                                $this->emcom->flush();

                                //agrego la relacion del servicio FastCloud con el DirectLink-MPLS
                                $objAdmiCaracFastCloud = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                            ->findOneBy(array("descripcionCaracteristica" => 'RELACION_FAST_CLOUD',
                                                                              "estado"                    => "Activo"));
                                if( !is_object($objAdmiCaracFastCloud) )
                                {
                                    throw new \Exception("No se encuentra la caracteristica RELACION_FAST_CLOUD, favor de notificar a Sistemas.");
                                }
                                $objAdmiProdCaractFastCloud = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                         ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                                           "caracteristicaId" => $objAdmiCaracFastCloud,
                                                                                           "estado"           => "Activo"));
                                if( !is_object($objAdmiProdCaractFastCloud) )
                                {
                                    throw new \Exception("No se encuentra la caracteristica del producto RELACION_FAST_CLOUD, ".
                                                         "favor de notificar a Sistemas.");
                                }
                                $objServicioProdCaractRel = new InfoServicioProdCaract();
                                $objServicioProdCaractRel->setServicioId($entityServicio->getId());
                                $objServicioProdCaractRel->setProductoCaracterisiticaId($objAdmiProdCaractFastCloud->getId());
                                $objServicioProdCaractRel->setValor($objServicioRelacion->getId());
                                $objServicioProdCaractRel->setEstado('Activo');
                                $objServicioProdCaractRel->setUsrCreacion($entityServicio->getUsrCreacion());
                                $objServicioProdCaractRel->setFeCreacion(new \DateTime('now'));
                                $this->emcom->persist($objServicioProdCaractRel);
                                $this->emcom->flush();
                            }
                            else
                            {
                                throw new \Exception("No se pudo crear el servicio relacionado FastCloud, favor de notificar a Sistemas.");
                            }
                        }
                    }
                    /*
                    * FIN - AGREGAR SERVICIO FASTCLOUD
                    */
                }

                //verificar si el servicio posee validacion de caracteristica unica
                if($strPrefijoEmpresa === 'TN' && is_object($objProducto))
                {
                    $this->emcom->flush();
                    //obtener estados no permitidos
                    $arrayEstadosNoPermitidos = array();
                    $arrayParametrosEstados   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('PARAMETROS_SEG_VEHICULOS',
                                                                    'TECNICO',
                                                                    '',
                                                                    '',
                                                                    'ESTADOS_SERVICIOS_NO_PERMITIDOS_FLUJO',
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    '');
                    foreach($arrayParametrosEstados as $arrayDetalles)
                    {
                        $arrayEstadosNoPermitidos[] = $arrayDetalles['valor2'];
                    }
                    //validar caracteristica
                    $arrayValidarCarUnica = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('PARAMETROS_SEG_VEHICULOS',
                                                                      'TECNICO',
                                                                      '',
                                                                      'VALIDAR_CARACTERISTICA_UNICA',
                                                                      $objProducto->getId(),
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      $strCodEmpresa);
                    foreach($arrayValidarCarUnica as $arrayItemCarUnica)
                    {
                        $objSpcCaractUnica = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                       $arrayItemCarUnica['valor2'],
                                                                                                       $objProducto);
                        if(is_object($objSpcCaractUnica))
                        {
                            $objSpcCaractUnica->setValor(strtoupper($objSpcCaractUnica->getValor()));
                            $this->emcom->persist($objSpcCaractUnica);
                            $this->emcom->flush();
                            //obtengo el servicio
                            $objServicioCarUnica = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                        ->createQueryBuilder('s')
                                                        ->innerJoin('schemaBundle:InfoServicioProdCaract', 'car', 'WITH', 'car.servicioId = s.id')
                                                        ->innerJoin('schemaBundle:AdmiProductoCaracteristica', 'pc', 'WITH',
                                                                'pc.id = car.productoCaracterisiticaId')
                                                        ->innerJoin('schemaBundle:AdmiCaracteristica', 'c', 'WITH', 'c.id = pc.caracteristicaId')
                                                        ->where("s.id != :idServicio")
                                                        ->andWhere("s.productoId = :productoId")
                                                        ->andWhere("s.estado NOT IN (:estados)")
                                                        ->andWhere("car.valor = :valorSerCaract")
                                                        ->andWhere("c.descripcionCaracteristica = :desCaracteristica")
                                                        ->andWhere("c.estado = :estadoActivo")
                                                        ->andWhere("pc.estado = :estadoActivo")
                                                        ->andWhere("car.estado = :estadoActivo")
                                                        ->setParameter('idServicio', $entityServicio->getId())
                                                        ->setParameter('productoId', $objProducto->getId())
                                                        ->setParameter('valorSerCaract', $objSpcCaractUnica->getValor())
                                                        ->setParameter('desCaracteristica', $arrayItemCarUnica["valor2"])
                                                        ->setParameter('estados', array_values($arrayEstadosNoPermitidos))
                                                        ->setParameter('estadoActivo', 'Activo')
                                                        ->setMaxResults(1)
                                                        ->getQuery()
                                                        ->getOneOrNullResult();
                            if(is_object($objServicioCarUnica))
                            {
                                throw new \Exception(str_replace(array(":VALOR",":LOGIN",":ESTADO"),
                                                     array($objSpcCaractUnica->getValor(),
                                                            $objServicioCarUnica->getLoginAux(),
                                                            $objServicioCarUnica->getEstado()),
                                                     $arrayItemCarUnica['observacion']));
                            }
                        }
                    }
                }

                //verificar si el servicio posee validacion de caracteristica regex
                if($strPrefijoEmpresa === 'TN' && is_object($objProducto))
                {
                    $this->emcom->flush();
                    //validar caracteristica regex
                    $arrayValidarCarRegex = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('VALIDAR_PRODUCTO_CARACTERISTICA_REGEX',
                                                                      'COMERCIAL',
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      $objProducto->getId(),
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      $strCodEmpresa);
                    foreach($arrayValidarCarRegex as $arrayItemCarRegex)
                    {
                        $objSpcCaractRegex = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                       $arrayItemCarRegex['valor3'],
                                                                                                       $objProducto);
                        $objSpcCarValidRex = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                       $arrayItemCarRegex['valor4'],
                                                                                                       $objProducto);
                        if(is_object($objSpcCaractRegex))
                        {
                            if(is_object($objSpcCarValidRex))
                            {
                                $arrayRegexCaract = json_decode($arrayItemCarRegex['valor1'],true);
                                if(isset($arrayRegexCaract[$objSpcCarValidRex->getValor()]))
                                {
                                    $strRegexCaract  = $arrayRegexCaract[$objSpcCarValidRex->getValor()]['regex'];
                                    $strRegexMensaje = str_replace(":MENSAJE",$arrayRegexCaract[$objSpcCarValidRex->getValor()]['mensaje'],
                                                       $arrayItemCarRegex['observacion']);
                                }
                                else
                                {
                                    $strRegexCaract  = $arrayRegexCaract['default']['regex'];
                                    $strRegexMensaje = str_replace(":MENSAJE",$arrayRegexCaract['default']['mensaje'],
                                                       $arrayItemCarRegex['observacion']);
                                }
                            }
                            else
                            {
                                $strRegexCaract  = $arrayItemCarRegex['valor1'];
                                $strRegexMensaje = $arrayItemCarRegex['observacion'];
                            }
                            if(!preg_match($strRegexCaract,$objSpcCaractRegex->getValor()))
                            {
                                throw new \Exception(str_replace(":VALOR",$objSpcCaractRegex->getValor(),$strRegexMensaje));
                            }
                        }
                    }
                }

                //validar producto IP INTERNET VPNoGPON
                if ($strPrefijoEmpresa == "TN" && is_object($objProducto) && $objProducto->getNombreTecnico() == "IPSB" )
                {
                    $arrayParamsProIp   = array("strValor1ParamsProdsTnGpon"    => "PRODUCTOS_RELACIONADOS_INTERNET_IP",
                                                "strCodEmpresa"                 => $strCodEmpresa,
                                                "intIdProductoIp"               => $objProducto->getId());
                    $arrayInfoProdsPrincipalConIp = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                                        ->obtenerParametrosProductosTnGpon($arrayParamsProIp);
                    if(isset($arrayInfoProdsPrincipalConIp) && !empty($arrayInfoProdsPrincipalConIp))
                    {
                        $arrayInfoProdPrincipalConIp    = $arrayInfoProdsPrincipalConIp[0];
                        $intIdProductoPrincipal         = $arrayInfoProdPrincipalConIp["intIdProdInternet"];
                        $strDescripcionProdPrincipal    = $arrayInfoProdPrincipalConIp["strDescripcionProdInternet"];
                        $intIdProductoIp                = $arrayInfoProdPrincipalConIp["intIdProdIp"];
                        $strDescripcionProdIp           = $arrayInfoProdPrincipalConIp["strDescripcionProdIp"];
                        $strNombreTecnicoProdPrincipal  = $arrayInfoProdPrincipalConIp["strNombreTecnicoProdIp"];
                        $strCaractRelProdPrincipal      = $arrayInfoProdPrincipalConIp["strCaractRelProdIp"];
                        $arrayParamsProIp["intIdPunto"]                      = $entityPunto->getId();
                        $arrayParamsProIp["intIdProductoPrincipal"]          = $intIdProductoPrincipal;
                        $arrayParamsProIp["strDescripcionProdPrincipal"]     = $strDescripcionProdPrincipal;
                        $arrayParamsProIp["intIdProductoIp"]                 = $intIdProductoIp;
                        $arrayParamsProIp["strDescripcionProdIp"]            = $strDescripcionProdIp;
                        $arrayParamsProIp["strNombreTecnicoProdPrincipal"]   = $strNombreTecnicoProdPrincipal;
                        $arrayParamsProIp["strCaractRelProdPrincipal"]       = $strCaractRelProdPrincipal;
                        $arrayValidarIpMaxPermitidas                         = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                                                ->validarIpsMaxPermitidasProducto($arrayParamsProIp);
                        if($arrayValidarIpMaxPermitidas["strStatus"] == "OK" && isset($strCaractRelProdPrincipal)
                            && !empty($strCaractRelProdPrincipal))
                        {
                            $intIdServicioProdPri = $arrayValidarIpMaxPermitidas["arrayServicioValidarIpsMax"]["intIdServicio"];
                            if(isset($intIdServicioProdPri) && !empty($intIdServicioProdPri))
                            {
                                $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                               $objProducto,
                                                                                               $strCaractRelProdPrincipal,
                                                                                               $intIdServicioProdPri,
                                                                                               $usrCreacion);
                            }
                        }
                    }
                }

                //validar producto DATOS SAFECITY
                if($strPrefijoEmpresa === 'TN' && is_object($objProducto) && $objProducto->getNombreTecnico() == "DATOS SAFECITY")
                {
                    $this->emcom->flush();
                    //validar caracteres
                    $strLogin            = $entityServicio->getPuntoId()->getLogin();
                    $arrayMaxCaractLogin = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('NUEVA_RED_GPON_TN',
                                                                        'COMERCIAL',
                                                                        '',
                                                                        'MAXIMO_CARACTERES_LOGIN',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $strCodEmpresa);
                    if(isset($arrayMaxCaractLogin) && isset($arrayMaxCaractLogin['valor1']) && !empty($arrayMaxCaractLogin['valor1'])
                        && strlen($strLogin) > $arrayMaxCaractLogin['valor1'])
                    {
                        throw new \Exception("El login del punto excede los caracteres máximos(".$arrayMaxCaractLogin['valor1'].
                                            ") para el servicio ".$objProducto->getDescripcionProducto().
                                            ", favor de notificar a Sistemas.");
                    }
                    //ingresar capacidades
                    $objSpcVelocidadGpon = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                     'VELOCIDAD_GPON',
                                                                                                     $objProducto);
                    if(is_object($objSpcVelocidadGpon))
                    {
                        $arrayCapacidadGpon = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->getOne('PROD_VELOCIDAD_GPON',
                                                                            'COMERCIAL',
                                                                            '',
                                                                            '',
                                                                            $objSpcVelocidadGpon->getValor(),
                                                                            'MB',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            $strCodEmpresa);
                        if(isset($arrayCapacidadGpon) && isset($arrayCapacidadGpon['valor3']) && !empty($arrayCapacidadGpon['valor3']))
                        {
                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                           $objProducto,
                                                                                           'CAPACIDAD1',
                                                                                           $arrayCapacidadGpon['valor3'],
                                                                                           $usrCreacion);
                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                           $objProducto,
                                                                                           'CAPACIDAD2',
                                                                                           $arrayCapacidadGpon['valor3'],
                                                                                           $usrCreacion);
                        }
                    }
                }
                //actualizo la característica VELOCIDAD_GPON
                if($strPrefijoEmpresa === 'TN' && is_object($objProducto) && $objProducto->getNombreTecnico() != "DATOS SAFECITY")
                {
                    $this->emcom->flush();
                    $objSpcVelocidadGpon = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                     'VELOCIDAD_GPON',
                                                                                                     $objProducto);
                    if(is_object($objSpcVelocidadGpon))
                    {
                        $arrayCapacidadGpon = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                    ->getOne('PROD_VELOCIDAD_GPON',
                                                                            'COMERCIAL',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            'MB',
                                                                            $objSpcVelocidadGpon->getValor(),
                                                                            '',
                                                                            '',
                                                                            $strCodEmpresa);
                        if(isset($arrayCapacidadGpon) && isset($arrayCapacidadGpon['valor1']) && !empty($arrayCapacidadGpon['valor1']))
                        {
                            $objSpcVelocidadGpon->setValor($arrayCapacidadGpon['valor1']);
                            $this->emcom->persist($objSpcVelocidadGpon);
                            $this->emcom->flush();
                        }
                    }
                }
                //ingresar TIPO_FACTIBILIDAD al producto L3MPLS y INTERNET
                if($strPrefijoEmpresa === 'TN' && is_object($objProducto) && $objProducto->getNombreTecnico() != "DATOS SAFECITY")
                {
                    $this->emcom->flush();
                    $objSpcTipoRed = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                               'TIPO_RED',
                                                                                               $objProducto);
                    //se verifica si el servicio es tipo de red GPON
                    $booleanTipoRedGpon = false;
                    if(is_object($objSpcTipoRed))
                    {
                        $arrayParVerTipoRed = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                                'COMERCIAL',
                                                                                                                '',
                                                                                                                'VERIFICAR TIPO RED',
                                                                                                                'VERIFICAR_GPON',
                                                                                                                $objSpcTipoRed->getValor(),
                                                                                                                '',
                                                                                                                '',
                                                                                                                '');
                        if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                        {
                            $booleanTipoRedGpon = true;
                        }
                    }
                    if(is_object($objSpcTipoRed) && $booleanTipoRedGpon)
                    {
                        $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                       $objProducto,
                                                                                       'TIPO_FACTIBILIDAD',
                                                                                       'RUTA',
                                                                                       $usrCreacion);
                        $objSpcVelocidadGpon = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                         'VELOCIDAD_GPON',
                                                                                                         $objProducto);
                        $objSpcCapacidadUno  = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                         'CAPACIDAD1',
                                                                                                         $objProducto);
                        if(!is_object($objSpcVelocidadGpon) && is_object($objSpcCapacidadUno))
                        {
                            $arrayCapacidadGpon = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->getOne('PROD_VELOCIDAD_GPON',
                                                                                'COMERCIAL',
                                                                                '',
                                                                                '',
                                                                                '',
                                                                                'MB',
                                                                                $objSpcCapacidadUno->getValor(),
                                                                                '',
                                                                                '',
                                                                                $strCodEmpresa);
                            if(isset($arrayCapacidadGpon) && isset($arrayCapacidadGpon['valor1']) && !empty($arrayCapacidadGpon['valor1']))
                            {
                                $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                               $objProducto,
                                                                                               'VELOCIDAD_GPON',
                                                                                               $arrayCapacidadGpon['valor1'],
                                                                                               $usrCreacion);
                            }
                        }
                    }
                }
                //ingresar TIPO_RED al producto SERVICIOS-CAMARA-SAFECITY
                if($strPrefijoEmpresa === 'TN' && is_object($objProducto) && $objProducto->getNombreTecnico() == "SERVICIOS-CAMARA-SAFECITY")
                {
                    $this->emcom->flush();
                    //obtener tipo red gpon-mpls
                    $strTipoRedGpon = "GPON_MPLS";
                    $arrayParVerTipoRedGpon = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                            'COMERCIAL',
                                                                                                            '',
                                                                                                            'VERIFICAR TIPO RED',
                                                                                                            'VERIFICAR_GPON',
                                                                                                            '',
                                                                                                            '',
                                                                                                            '',
                                                                                                            '');
                    if(isset($arrayParVerTipoRedGpon) && !empty($arrayParVerTipoRedGpon) && !empty($arrayParVerTipoRedGpon['valor2']))
                    {
                        $strTipoRedGpon = $arrayParVerTipoRedGpon['valor2'];
                    }
                    $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                                   $objProducto,
                                                                                   'TIPO_RED',
                                                                                   $strTipoRedGpon,
                                                                                   $usrCreacion);
                }

                /**
                 * VALIDACION TIPO DE RED
                 * Se recorre las caracteristicas del servicio, si el tipo de red es MPLS y la cobertura del punto pertenece al 
                 * listado parametrizado, se crea una solicitud de aprobación y se guarda en estado PENDIENTE, 
                 * caso contrario sigue el flujo normal.
                */
                if($strPrefijoEmpresa === 'TN' && is_object($objProducto))
                {
                    $arrayCiudadDisponible = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                         ->get('NUEVA_RED_GPON_TN',
                                                               'COMERCIAL',
                                                               '',
                                                               '',
                                                               $entityPunto->getPuntoCoberturaId()->getId(),
                                                               $entityPunto->getPuntoCoberturaId()->getNombreJurisdiccion(),
                                                               '',
                                                               'S',
                                                               'CIUDADES_DISPONIBLES',
                                                               $strCodEmpresa);

                    $arrayValidaProducto   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                         ->get('NUEVA_RED_GPON_TN',
                                                               'COMERCIAL',
                                                               '',
                                                               '',
                                                               $objProducto->getId(),
                                                               '',
                                                               '',
                                                               'S',
                                                               'RELACION_PRODUCTO_CARACTERISTICA',
                                                               $strCodEmpresa);

                    if(!empty($arrayValidaProducto) && !empty($arrayCiudadDisponible))
                    {
                        //verificar solicitud aprobacion
                        $this->emcom->flush();
                        $objSpcTipoRed = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                   'TIPO_RED',
                                                                                                   $objProducto);
                        if(is_object($objSpcTipoRed))
                        {
                            $arrayValidaProductoSolicitud = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                ->getOne('NUEVA_RED_GPON_TN',
                                                                                        'COMERCIAL',
                                                                                        '',
                                                                                        'VALIDAR_PRODUCTO_SOLICITUD_APROBACION',
                                                                                        $objProducto->getId(),
                                                                                        $entityPunto->getPuntoCoberturaId()->getId(),
                                                                                        $objSpcTipoRed->getValor(),
                                                                                        '',
                                                                                        '',
                                                                                        $strCodEmpresa);
                            if(isset($arrayValidaProductoSolicitud) && !empty($arrayValidaProductoSolicitud)
                               && isset($arrayValidaProductoSolicitud['valor4']) && $arrayValidaProductoSolicitud['valor4'] == "SI")
                            {
                                $arrayParametrosMpls     = array("objServicio"         => $entityServicio,
                                                                 "objPunto"            => $entityPunto,
                                                                 "objProducto"         => $objProducto,
                                                                 "strPrefijoEmpresa"   => $strPrefijoEmpresa,
                                                                 "strCodEmpresa"       => $strCodEmpresa,
                                                                 "strIpClient"         => $clientIp,
                                                                 "strUsrCreacion"      => $usrCreacion,
                                                                 "strNombreProducto"   => $objProducto->getDescripcionProducto(),
                                                                 "strTipoRed"          => $objSpcTipoRed->getValor());

                                $arrayValidaServicioMpls = $this->validaAutorizacionServicioMPLS($arrayParametrosMpls);

                                if($arrayValidaServicioMpls["strStatus"] === "ERROR")
                                {
                                    throw new \Exception($arrayValidaServicioMpls["strMensaje"]);
                                }
                            }
                        }
                    }
                }

                /***GENERACION AUTOMATICA DE SERVICIOS ADICIONALES***/
                //se obtiene el parametro si se agrega los servicios adicionales
                if($strPrefijoEmpresa === 'TN' && isset($valor['caracteristicasProducto'])
                   && is_array($valor['caracteristicasProducto']) && is_object($objProducto))
                {
                    //verificar solicitud aprobacion
                    $this->emcom->flush();
                    //obtengo el servicio tecnico
                    $objServicioTecnico = $this->emcom->getRepository('schemaBundle:InfoServicioTecnico')
                                                      ->findOneByServicioId($entityServicio->getId());
                    //obtengo id de productos de ip privadas
                    $arrayIpPrivada           = array();
                    $objParametroCabIpPrivada = $this->emgen->getRepository('schemaBundle:AdmiParametroCab')
                                                    ->findOneBy(array('nombreParametro' => 'IP_PRIVADA_FIJA_GPON',
                                                                      'estado'          => 'Activo'));
                    if(is_object($objParametroCabIpPrivada))
                    {
                        $arrayParDetIpPrivada = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->findBy(array('parametroId' => $objParametroCabIpPrivada->getId(),
                                                                       'estado'      => 'Activo'));
                        if (is_array($arrayParDetIpPrivada) && !empty($arrayParDetIpPrivada))
                        {
                            $arrayIpPrivada = explode(",",$arrayParDetIpPrivada[0]->getValor1());
                        }
                    }
                    foreach($valor['caracteristicasProducto'] as $arrayItemCarac)
                    {
                        /***GENERACION AUTOMATICA DE SERVICIOS ADICIONALES***/
                        //se obtiene el parametro si se agrega los servicios adicionales
                        $arrayParAddServicioDatosGpon = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('CONFIG_PRODUCTO_DATOS_SAFE_CITY',
                                                             'COMERCIAL',
                                                             '',
                                                             '',
                                                             $objProducto->getId(),
                                                             'AGREGAR_SERVICIO_ADICIONAL',
                                                             $arrayItemCarac['caracteristica'],
                                                             '',
                                                             '',
                                                             $strCodEmpresa);
                        //verifico si se agrega un nuevo servicio relacionado
                        if( isset($arrayParAddServicioDatosGpon) && !empty($arrayParAddServicioDatosGpon)
                            && !empty($arrayParAddServicioDatosGpon['valor4'])
                            && $entityServicio->getTipoOrden() == 'N' && $objServicioTecnico->getTipoEnlace() == 'PRINCIPAL'
                            && ($arrayItemCarac['valor'] != "" && $arrayItemCarac['valor'] != 0 && is_numeric($arrayItemCarac['valor'])) )
                        {
                            $strDescripcionProductoPri  = $objProducto->getDescripcionProducto();
                            $intIdProductoAdicional     = $arrayParAddServicioDatosGpon['valor4'];
                            $strDescPreFacturaAdicional = $arrayParAddServicioDatosGpon['valor5'];
                            $strCractRelacionAdicional  = $arrayParAddServicioDatosGpon['valor6'];
                            $strTipoRedSerAdicional     = $arrayParAddServicioDatosGpon['valor7'];
                            //agrego la característica relacion del servicio adicional
                            $objAdmiCaracRelDatosSafe = null;
                            if( !empty($strCractRelacionAdicional) )
                            {
                                $objAdmiCaracRelDatosSafe = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                            ->findOneBy(array("descripcionCaracteristica" => $strCractRelacionAdicional,
                                                                              "estado"                    => "Activo"));
                                if( !is_object($objAdmiCaracRelDatosSafe) )
                                {
                                    throw new \Exception("No se encuentra la característica adicional $strCractRelacionAdicional ".
                                                         "para ".$arrayItemCarac['caracteristica']." del servicio $strDescripcionProductoPri, ".
                                                         "favor de notificar a Sistemas.");
                                }
                            }
                            //se obtiene el producto del servicio adicional
                            $objAdmiProdAdicional = $this->emcom->getRepository('schemaBundle:AdmiProducto')->find($intIdProductoAdicional);
                            if(is_object($objAdmiProdAdicional))
                            {
                                //seteo la velocidad
                                $strVelocidadGponDefault   = "";
                                $strCapacidadGponDefault   = "";
                                $arrayVelocidadServicioAdd = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                ->getOne('CONFIG_PRODUCTO_DATOS_SAFE_CITY',
                                                                                         'COMERCIAL',
                                                                                         '',
                                                                                         '',
                                                                                         $objAdmiProdAdicional->getId(),
                                                                                         'VELOCIDAD_SERVICIO',
                                                                                         '',
                                                                                         '',
                                                                                         '',
                                                                                         $strCodEmpresa);
                                if(isset($arrayVelocidadServicioAdd) && isset($arrayVelocidadServicioAdd['valor3'])
                                    && isset($arrayVelocidadServicioAdd['valor4']))
                                {
                                    $strVelocidadGponDefault = $arrayVelocidadServicioAdd['valor3'];
                                    $strCapacidadGponDefault = $arrayVelocidadServicioAdd['valor4'];
                                }
                                //se obtiene el prod característica del servicio adicional
                                $objAdmiProdCaractAdicional = null;
                                if( is_object($objAdmiCaracRelDatosSafe) )
                                {
                                    $objAdmiProdCaractAdicional = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                        ->findOneBy(array("productoId"       => $objAdmiProdAdicional->getId(),
                                                                                          "caracteristicaId" => $objAdmiCaracRelDatosSafe,
                                                                                          "estado"           => "Activo"));
                                    if( !is_object($objAdmiProdCaractAdicional) )
                                    {
                                        throw new \Exception("No se encuentra la característica del producto adicional $strCractRelacionAdicional ".
                                                             "para ".$arrayItemCarac['caracteristica']." del servicio $strDescripcionProductoPri, ".
                                                             "favor de notificar a Sistemas.");
                                    }
                                }
                                //obtener producto caracteristica relacionada
                                $objSpcPrecioServAdd = null;
                                $arrayProdCaractRel  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                ->getOne('PRODUCTO_CARACTERISTICA_RELACION_PRODUCTO',
                                                                                         'COMERCIAL',
                                                                                         '',
                                                                                         '',
                                                                                         $arrayItemCarac['idCaracteristica'],
                                                                                         '',
                                                                                         $objAdmiProdAdicional->getId(),
                                                                                         '',
                                                                                         '',
                                                                                         $strCodEmpresa);
                                if(isset($arrayProdCaractRel) && !empty($arrayProdCaractRel) && isset($arrayProdCaractRel['valor2'])
                                   && !empty($arrayProdCaractRel['valor2']))
                                {
                                    $objProdCaractRel = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                        ->find($arrayProdCaractRel['valor2']);
                                    if(is_object($objProdCaractRel))
                                    {
                                        $objSpcPrecioServAdd = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                    $objProdCaractRel->getCaracteristicaId()->getDescripcionCaracteristica(),
                                                                    $objProducto);
                                    }
                                }
                                //se recorre el for para los creación de los servicios adicionales
                                for($intAddSer = 1; $intAddSer <=  $arrayItemCarac['valor']; $intAddSer++)
                                {
                                    $strDescripcionProAdd = $objAdmiProdAdicional->getDescripcionProducto();
                                    if(is_object($objSpcPrecioServAdd) && is_numeric($objSpcPrecioServAdd->getValor()))
                                    {
                                        $strPrecioProAdic  = $objSpcPrecioServAdd->getValor();
                                    }
                                    else
                                    {
                                        $strFuncionPrecio = $objAdmiProdAdicional->getFuncionPrecio();
                                        if(strpos($strFuncionPrecio,"VELOCIDAD") !== false)
                                        {
                                            $strPrecioProAdic       = 0;
                                            $arrayParamsReemplazar  = array('[VELOCIDAD]','PRECIO');
                                            //obtener característica velocidad
                                            $objSpcVelServAdd = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                                          "VELOCIDAD",
                                                                                                                          $objProducto);
                                            if(!is_object($objSpcVelServAdd))
                                            {
                                                throw new \Exception("No se encuentra la característica(VELOCIDAD)".
                                                                     " del servicio adicional $strDescripcionProductoPri, ".
                                                                     "favor de notificar a Sistemas.");
                                            }
                                            $arrayValoresReemplazar = array($objSpcVelServAdd->getValor(), '$strPrecioProAdic');
                                            $strFuncionPrecio       = str_replace($arrayParamsReemplazar,$arrayValoresReemplazar,$strFuncionPrecio);
                                            $strDigitoVerificacion  = substr($strFuncionPrecio, -1, 1);
                                            if(is_numeric($strDigitoVerificacion))
                                            {
                                                $strFuncionPrecio = $strFuncionPrecio . ";";
                                            }
                                            eval($strFuncionPrecio);
                                            //actualizar descripcion
                                            $strDescPreFacturaAdicional .= " ".$objSpcVelServAdd->getValor();
                                        }
                                        elseif(strpos($strFuncionPrecio,"PRECIO=") !== false)
                                        {
                                            $arrayPrecioProAdd = explode("PRECIO=", $strFuncionPrecio);
                                            $strPrecioProAdic  = is_array($arrayPrecioProAdd) && isset($arrayPrecioProAdd[1])
                                                                 && is_numeric($arrayPrecioProAdd[1]) ? $arrayPrecioProAdd[1] : 0;
                                        }
                                        elseif(strpos($strFuncionPrecio,"Precio=") !== false)
                                        {
                                            $arrayPrecioProAdd = explode("Precio=", $strFuncionPrecio);
                                            $strPrecioProAdic  = is_array($arrayPrecioProAdd) && isset($arrayPrecioProAdd[1])
                                                                 && is_numeric($arrayPrecioProAdd[1]) ? $arrayPrecioProAdd[1] : 0;
                                        }
                                    }
                                    $objServicioAdicional = new InfoServicio();
                                    $objServicioAdicional->setProductoId($objAdmiProdAdicional);
                                    $objServicioAdicional->setPuntoId($entityServicio->getPuntoId());
                                    $objServicioAdicional->setOrigen($entityServicio->getOrigen());
                                    $objServicioAdicional->setTipoOrden($entityServicio->getTipoOrden());
                                    $objServicioAdicional->setEsVenta($entityServicio->getEsVenta());
                                    $objServicioAdicional->setCantidad($entityServicio->getCantidad());
                                    $objServicioAdicional->setPrecioVenta($strPrecioProAdic);
                                    $objServicioAdicional->setPuntoFacturacionId($entityServicio->getPuntoFacturacionId());
                                    $objServicioAdicional->setUsrVendedor($entityServicio->getUsrVendedor());
                                    $objServicioAdicional->setFeCreacion(new \DateTime('now'));
                                    $objServicioAdicional->setUsrCreacion($usrCreacion);
                                    $objServicioAdicional->setIpCreacion($clientIp);
                                    $objServicioAdicional->setFrecuenciaProducto($entityServicio->getFrecuenciaProducto());
                                    $objServicioAdicional->setMesesRestantes($entityServicio->getMesesRestantes());
                                    $objServicioAdicional->setEstado($objAdmiProdAdicional->getEstadoInicial());
                                    $objServicioAdicional->setPrecioFormula($strPrecioProAdic);
                                    $objServicioAdicional->setPrecioInstalacion($objAdmiProdAdicional->getInstalacion());
                                    $objServicioAdicional->setDescripcionPresentaFactura($strDescPreFacturaAdicional);
                                    $this->validator->validateAndThrowException($objServicioAdicional);
                                    $this->emcom->persist($objServicioAdicional);
                                    $this->emcom->flush();
                                    if( is_object($objServicioAdicional) )
                                    {
                                        //ingresar característica relacionar proyecto
                                        $objSpcRelProyecto = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                                       "Relacionar Proyecto",
                                                                                                                       $objProducto);
                                        if(is_object($objSpcRelProyecto))
                                        {
                                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioAdicional,
                                                                                                           $objAdmiProdAdicional,
                                                                                                           "Relacionar Proyecto",
                                                                                                           $objSpcRelProyecto->getValor(),
                                                                                                           $usrCreacion);
                                        }
                                        //agrego el historial del servicio
                                        $objServicioHistorialRel = new InfoServicioHistorial();
                                        $objServicioHistorialRel->setServicioId($objServicioAdicional);
                                        $objServicioHistorialRel->setObservacion("Creación automática del servicio ".$strDescripcionProAdd.
                                                                                 " con el producto ".$strDescripcionProductoPri);
                                        $objServicioHistorialRel->setUsrCreacion($usrCreacion);
                                        $objServicioHistorialRel->setFeCreacion(new \DateTime('now'));
                                        $objServicioHistorialRel->setIpCreacion($clientIp);
                                        $objServicioHistorialRel->setEstado($objServicioAdicional->getEstado());
                                        $this->emcom->persist($objServicioHistorialRel);
                                        $this->emcom->flush();
                                        //agrego el historial del servicio
                                        $objServicioHistorialRelDesc = new InfoServicioHistorial();
                                        $objServicioHistorialRelDesc->setServicioId($objServicioAdicional);
                                        $objServicioHistorialRelDesc->setObservacion("Servicio Principal: ".
                                                                                     $entityServicio->getDescripcionPresentaFactura());
                                        $objServicioHistorialRelDesc->setUsrCreacion($usrCreacion);
                                        $objServicioHistorialRelDesc->setFeCreacion(new \DateTime('now'));
                                        $objServicioHistorialRelDesc->setIpCreacion($clientIp);
                                        $objServicioHistorialRelDesc->setEstado($objServicioAdicional->getEstado());
                                        $this->emcom->persist($objServicioHistorialRelDesc);
                                        $this->emcom->flush();
                                        //se agrega la característica al servicio adicional
                                        if(is_object($objAdmiProdCaractAdicional))
                                        {
                                            $objServicioProdCaractAdd = new InfoServicioProdCaract();
                                            $objServicioProdCaractAdd->setServicioId($objServicioAdicional->getId());
                                            $objServicioProdCaractAdd->setProductoCaracterisiticaId($objAdmiProdCaractAdicional->getId());
                                            $objServicioProdCaractAdd->setValor($entityServicio->getId());
                                            $objServicioProdCaractAdd->setEstado('Activo');
                                            $objServicioProdCaractAdd->setUsrCreacion($usrCreacion);
                                            $objServicioProdCaractAdd->setFeCreacion(new \DateTime('now'));
                                            $this->emcom->persist($objServicioProdCaractAdd);
                                            $this->emcom->flush();
                                        }
                                        //característica tipo de red
                                        if(!empty($strTipoRedSerAdicional))
                                        {
                                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioAdicional,
                                                                                                           $objAdmiProdAdicional,
                                                                                                           "TIPO_RED",
                                                                                                           $strTipoRedSerAdicional,
                                                                                                           $usrCreacion);
                                        }
                                        //se agrega el servicio tecnico del servicio adicional
                                        $objServicioTecnicoAdicional = new InfoServicioTecnico();
                                        $objServicioTecnicoAdicional->setServicioId($objServicioAdicional);
                                        $objServicioTecnicoAdicional->setTipoEnlace('PRINCIPAL');
                                        //verificar ultima milla
                                        $arrayParDetUltMilla = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                        ->getOne('PRODUCTO_AUTOMATICO_ULTIMA_MILLA',
                                                                                                 'COMERCIAL',
                                                                                                 '',
                                                                                                 '',
                                                                                                 $objAdmiProdAdicional->getId(),
                                                                                                 '',
                                                                                                 '',
                                                                                                 '',
                                                                                                 '',
                                                                                                 $strCodEmpresa);
                                        if(isset($arrayParDetUltMilla) && !empty($arrayParDetUltMilla))
                                        {
                                            $intIdUltimaMillaAdd = $arrayParDetUltMilla['valor2'];
                                            if(!empty($intIdUltimaMillaAdd))
                                            {
                                                $objServicioTecnicoAdicional->setUltimaMillaId($intIdUltimaMillaAdd);
                                            }
                                        }
                                        else
                                        {
                                            $objServicioTecnicoAdicional->setUltimaMillaId($objServicioTecnico->getUltimaMillaId());
                                        }
                                        $this->emcom->persist($objServicioTecnicoAdicional);
                                        $this->emcom->flush();
                                        //característica velocidad
                                        if(!empty($strVelocidadGponDefault))
                                        {
                                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioAdicional,
                                                                                            $objAdmiProdAdicional,
                                                                                            'VELOCIDAD_GPON',
                                                                                            $strVelocidadGponDefault,
                                                                                            $usrCreacion);
                                        }
                                        //característica capacidad
                                        if(!empty($strCapacidadGponDefault))
                                        {
                                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioAdicional,
                                                                                                    $objAdmiProdAdicional,
                                                                                                    'CAPACIDAD1',
                                                                                                    $strCapacidadGponDefault,
                                                                                                    $usrCreacion);
                                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioAdicional,
                                                                                                    $objAdmiProdAdicional,
                                                                                                    'CAPACIDAD2',
                                                                                                    $strCapacidadGponDefault,
                                                                                                    $usrCreacion);
                                        }
                                        //obtener valores caracteristicas e ingresar
                                        $arrayDetProdCaractRel = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                        ->get('PRODUCTO_CARACTERISTICA_RELACION_PRODUCTO',
                                                                                            'COMERCIAL',
                                                                                            '',
                                                                                            '',
                                                                                            $arrayItemCarac['idCaracteristica'],
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            $strCodEmpresa);
                                        foreach($arrayDetProdCaractRel as $arrayProdCaractRel)
                                        {
                                            if(!empty($arrayProdCaractRel['valor4']))
                                            {
                                                $objSpcProdCaractRel = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                                    $arrayProdCaractRel['valor4'],
                                                                                                                    $objProducto);
                                                if(is_object($objSpcProdCaractRel))
                                                {
                                                    $strDescPreFacturaAdicional .= " ".$objSpcProdCaractRel->getValor();
                                                    $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioAdicional,
                                                                                                    $objAdmiProdAdicional,
                                                                                                    $arrayProdCaractRel['valor4'],
                                                                                                    $objSpcProdCaractRel->getValor(),
                                                                                                    $usrCreacion);
                                                }
                                            }
                                        }
                                        //actualizar descripcion presente factura
                                        $objServicioAdicional->setDescripcionPresentaFactura($strDescPreFacturaAdicional);
                                        $this->emcom->persist($objServicioAdicional);
                                        $this->emcom->flush();
                                        //verificar producto
                                        if($objAdmiProdAdicional->getRequiereInfoTecnica() == "SI"
                                           && $objServicioAdicional->getEstado() == "PreAsignacionInfoTecnica")
                                        {
                                            //ingresar solicitud de info tecnica
                                            $objTipoSolInfoTecnica = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                                   ->findOneByDescripcionSolicitud('SOLICITUD INFO TECNICA');
                                            if(is_object($objTipoSolInfoTecnica))
                                            {
                                                $this->crearOrdenTrabajoServicio($strCodEmpresa,$idOficina,$entityPunto,
                                                                                 $usrCreacion,$clientIp,$objServicioAdicional,
                                                                                 $objServicioAdicional->getTipoOrden(),
                                                                                 'PreAsignacionInfoTecnica',
                                                                                 $objTipoSolInfoTecnica);
                                            }
                                            //flush para guardar caracteristicas tecnicas
                                            $this->emcom->flush();
                                            if($objAdmiProdAdicional->getNombreTecnico() === "IPSB")
                                            {
                                                $arrayRespuestaIPSB = $this->serviceSoporte
                                                            ->crearTareaYNotificacionIPSB(array(
                                                                 "objProducto"           => $objAdmiProdAdicional,
                                                                 "objServicio"           => $objServicioAdicional,
                                                                 "objPunto"              => $entityPunto,
                                                                 "strPrefijoEmpresa"     => $strPrefijoEmpresa,
                                                                 "strCodEmpresa"         => $strCodEmpresa,
                                                                 "strIpClient"           => $clientIp,
                                                                 "strEstadoSolServicio"  => "PreAsignacionInfoTecnica",
                                                                 "strOpcion"             => "CREAR_".$objAdmiProdAdicional->getNombreTecnico(),
                                                                 "strUsrSession"         => $usrCreacion,
                                                                 "strNombreTecnicoProd"  => $objAdmiProdAdicional->getNombreTecnico()
                                                             ));
                                                if($arrayRespuestaIPSB["strStatus"] === "ERROR")
                                                {
                                                    throw new \Exception($arrayRespuestaIPSB["strMensaje"]);
                                                }
                                            }
                                        }
                                        //ingreso la caracteristica de TIPO_ENRUTAMIENTO para productos bajo red GPON
                                        if(in_array($objAdmiProdAdicional->getId(),$arrayIpPrivada))   
                                        {
                                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioAdicional,
                                                                                                           $objAdmiProdAdicional,
                                                                                                           'TIPO_ENRUTAMIENTO',
                                                                                                           'Privada',
                                                                                                           $usrCreacion);
                                        }
                                        //obtener valores caracteristicas e ingresar
                                        $arrayDetProdCaractRel = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                        ->get('CARACTERISTICA_PROD_INGRESAR_PRODUCTO',
                                                                                            'COMERCIAL',
                                                                                            '',
                                                                                            '',
                                                                                            $objProducto->getId(),
                                                                                            $objAdmiProdAdicional->getId(),
                                                                                            '',
                                                                                            '',
                                                                                            '',
                                                                                            $strCodEmpresa);
                                        foreach($arrayDetProdCaractRel as $arrayProdCaractRel)
                                        {
                                            $objSpcProdCaractRel = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                                $arrayProdCaractRel['valor3'],
                                                                                                                $objProducto);
                                            if(is_object($objSpcProdCaractRel))
                                            {
                                                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioAdicional,
                                                                                                $objAdmiProdAdicional,
                                                                                                $arrayProdCaractRel['valor3'],
                                                                                                $objSpcProdCaractRel->getValor(),
                                                                                                $usrCreacion);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        throw new \Exception("No se pudo crear el servicio adicional ".$arrayItemCarac['caracteristica'].
                                                             " para el servicio $strDescripcionProductoPri, favor de notificar a Sistemas.");
                                    }
                                }
                                //guardar historial del servicio principal
                                $objServicioHistorialPri = new InfoServicioHistorial();
                                $objServicioHistorialPri->setServicioId($entityServicio);
                                $objServicioHistorialPri->setObservacion("Se generaron ".$arrayItemCarac['valor'].
                                                                         " servicios adicionales de la característica ".
                                                                         $arrayItemCarac['caracteristica']);
                                $objServicioHistorialPri->setUsrCreacion($entityServicio->getUsrCreacion());
                                $objServicioHistorialPri->setFeCreacion(new \DateTime('now'));
                                $objServicioHistorialPri->setIpCreacion($clientIp);
                                $objServicioHistorialPri->setEstado($entityServicio->getEstado());
                                $this->emcom->persist($objServicioHistorialPri);
                                $this->emcom->flush();
                            }
                            else
                            {
                                throw new \Exception("No se encuentra el producto adicional para ".$arrayItemCarac['caracteristica'].
                                                     " del servicio $strDescripcionProductoPri, favor de notificar a Sistemas.");
                            }
                        }
                    }
                }
                /***FIN GENERACION AUTOMATICA DE SERVICIOS ADICIONALES***/

                //verificar si el servicio es tipo de red GPON-MPLS
                if($strPrefijoEmpresa === 'TN' && is_object($objProducto))
                {
                    $arrayValidarServAddGpon = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                                     'INFRAESTRUCTURA',
                                                                     '',
                                                                     'VALIDAR RELACION SERVICIO ADICIONAL CON DATOS SAFECITY',
                                                                     $objProducto->getId(),
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     $strCodEmpresa);
                    if( ( isset($arrayValidarServAddGpon) && !empty($arrayValidarServAddGpon)
                          && $arrayValidarServAddGpon['valor5'] != "SWITCHPOE"
                          && $arrayValidarServAddGpon['valor5'] != "CAMARAVPN" )    
                        || $objProducto->getNombreTecnico() == "DATOS SAFECITY" )
                    {
                        $booleanVerDispPuertoGpon = true;
                        $strNombreTecnicoServGpon = $objProducto->getNombreTecnico();
                    }
                }

                if(is_object($objProducto) && $objProducto->getNombreTecnico() == 'SAFE ENTRY')
                {
                    $entityTipoSolicitudPlanificacion = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                    ->findOneByDescripcionSolicitud('SOLICITAR NUEVO SERVICIO');
                    $this->crearOrdenTrabajoServicio($strCodEmpresa, $idOficina, $entityPunto, $usrCreacion, $clientIp, 
                                                                         $entityServicio, $tipoOrden, $strEstadoInicial, 
                                                                         $entityTipoSolicitudPlanificacion);
                    //Se registra el detalle solicitud
                    $objDetalleSolicitud= new InfoDetalleSolicitud();
                    $objDetalleSolicitud->setServicioId($entityServicio);
                    $objDetalleSolicitud->setTipoSolicitudId($entityTipoSolicitudPlanificacion);
                    $objDetalleSolicitud->setObservacion("Se crea Solicitud para la implemetacion del servico SAFE ENTRY.");
                    $objDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                    $objDetalleSolicitud->setUsrCreacion($entityServicio->getUsrCreacion());
                    $objDetalleSolicitud->setEstado('Pendiente');
                    $this->emcom->persist($objDetalleSolicitud);
                    $this->emcom->flush();

                    $arrayParametros = array(
                        "objServicio"         => $entityServicio,
                        "objProducto"         => $objProducto,
                        "objDetalleSolicitud" => $objDetalleSolicitud,
                        "strPrefijoEmpresa"   => $strPrefijoEmpresa,
                        "strCodEmpresa"       => $strCodEmpresa,
                        "strIpCliente"        => $clientIp,
                        "strUsrCreacion"      => $usrCreacion,
                        "arrayArchivos"       => $arrayArchivos);

                    $arrayRespuesta = $this->generarTareaImplementacionSafeEntry($arrayParametros);

                    if($arrayRespuesta['status'] != 'OK')
                    {
                        throw new Exception($arrayRespuesta['mensaje']);
                    }                                                    

                }
            }

            /***GENERACION AUTOMATICA DE SW POE PARA SERVICIOS GPON_MPLS***/
            if($booleanVerDispPuertoGpon)
            {
                $this->emcom->flush();
                $arrayValidarPuertoOntGpon = $this->servicioTecnico->validarPuertoDisponibleOntGponMpls(array("objPunto"      => $entityPunto,
                                                                                                              "strCodEmpresa" => $strCodEmpresa));
                if($arrayValidarPuertoOntGpon['status'] == "OK" && $arrayValidarPuertoOntGpon['disponible'] == "NO")
                {
                    //servicio principal
                    $objServicioPriGpon     = $arrayValidarPuertoOntGpon['objServicio'];
                    //estado del servicio
                    $arrayParametrosEstadoActualizar["strIdPunto"]                = $entityPunto->getId();
                    $arrayParametrosEstadoActualizar["strIdProductoPreferencial"] = $objServicioPriGpon->getProductoId()->getId();
                    $arrayParametrosEstadoActualizar["strCodEmpresa"]             = $strCodEmpresa;
                    $arrayRespuestaServPref = $this->getEstadoServicioXProdPreferencial($arrayParametrosEstadoActualizar);
                    //se obtiene los datos del producto SW POE
                    $arrayDatosProdutoSwPoe = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('CONFIG_PRODUCTO_DATOS_SAFE_CITY',
                                                         'COMERCIAL',
                                                         '',
                                                         '',
                                                         'PRODUCTO_ADICIONAL_SW_POE',
                                                         '',
                                                         '',
                                                         '',
                                                         '',
                                                         $strCodEmpresa);
                    if(isset($arrayDatosProdutoSwPoe) && !empty($arrayDatosProdutoSwPoe) && isset($arrayDatosProdutoSwPoe['valor2'])
                       && isset($arrayDatosProdutoSwPoe['valor3']) && isset($arrayDatosProdutoSwPoe['valor6']) && !empty($arrayRespuestaServPref))
                    {
                        $intIdProductoAdicional     = $arrayDatosProdutoSwPoe['valor2'];
                        $strDescPreFacturaAdicional = $arrayDatosProdutoSwPoe['valor3'];
                        $strCaractRelacionAdicional = $arrayDatosProdutoSwPoe['valor6'];
                        $strTipoRedSerAdicional     = $arrayDatosProdutoSwPoe['valor7'];
                        //descripcion del servicio principal
                        $strDescripcionProductoPri  = $objServicioPriGpon->getProductoId()->getDescripcionProducto();
                        //se obtiene el producto del servicio adicional
                        $objAdmiProdAdicional = $this->emcom->getRepository('schemaBundle:AdmiProducto')->find($intIdProductoAdicional);
                        if(is_object($objAdmiProdAdicional))
                        {
                            $strDescripcionProAdd = $objAdmiProdAdicional->getDescripcionProducto();
                            //obtener precio
                            $arrayPrecioProAdd = explode("PRECIO=", $objAdmiProdAdicional->getFuncionPrecio());
                            $strPrecioProAdic  = is_array($arrayPrecioProAdd) && isset($arrayPrecioProAdd[1])
                                                 && is_numeric($arrayPrecioProAdd[1]) ? $arrayPrecioProAdd[1] : 0;
                            //obtener costo
                            $arrayCostoProAdd  = explode("COSTO=", $objAdmiProdAdicional->getFuncionCosto());
                            $strCostoProAdic   = is_array($arrayCostoProAdd) && isset($arrayCostoProAdd[1])
                                                 && is_numeric($arrayCostoProAdd[1]) ? $arrayCostoProAdd[1] : 0;
                            //agregar servicio
                            $objServicioAdicional = new InfoServicio();
                            $objServicioAdicional->setProductoId($objAdmiProdAdicional);
                            $objServicioAdicional->setPuntoId($objServicioPriGpon->getPuntoId());
                            $objServicioAdicional->setOrigen($objServicioPriGpon->getOrigen());
                            $objServicioAdicional->setTipoOrden($objServicioPriGpon->getTipoOrden());
                            $objServicioAdicional->setEsVenta($objServicioPriGpon->getEsVenta());
                            $objServicioAdicional->setCantidad($objServicioPriGpon->getCantidad());
                            $objServicioAdicional->setCosto($strCostoProAdic);
                            $objServicioAdicional->setPrecioVenta($strPrecioProAdic);
                            $objServicioAdicional->setPuntoFacturacionId($objServicioPriGpon->getPuntoFacturacionId());
                            $objServicioAdicional->setUsrVendedor($objServicioPriGpon->getUsrVendedor());
                            $objServicioAdicional->setFeCreacion(new \DateTime('now'));
                            $objServicioAdicional->setUsrCreacion($usrCreacion);
                            $objServicioAdicional->setIpCreacion($clientIp);
                            $objServicioAdicional->setFrecuenciaProducto($objServicioPriGpon->getFrecuenciaProducto());
                            $objServicioAdicional->setMesesRestantes($objServicioPriGpon->getMesesRestantes());
                            $objServicioAdicional->setEstado($arrayRespuestaServPref["strEstadoPreferencial"]);
                            $objServicioAdicional->setDescripcionPresentaFactura($strDescPreFacturaAdicional);
                            $this->validator->validateAndThrowException($objServicioAdicional);
                            $this->emcom->persist($objServicioAdicional);
                            $this->emcom->flush();
                            if( is_object($objServicioAdicional) )
                            {
                                //agrego el historial del servicio
                                $objServicioHistorialRel = new InfoServicioHistorial();
                                $objServicioHistorialRel->setServicioId($objServicioAdicional);
                                $objServicioHistorialRel->setObservacion("Creación automática del servicio ".$strDescripcionProAdd.
                                                                         " con el producto ".$strDescripcionProductoPri);
                                $objServicioHistorialRel->setUsrCreacion($usrCreacion);
                                $objServicioHistorialRel->setFeCreacion(new \DateTime('now'));
                                $objServicioHistorialRel->setIpCreacion($clientIp);
                                $objServicioHistorialRel->setEstado($objServicioAdicional->getEstado());
                                $this->emcom->persist($objServicioHistorialRel);
                                $this->emcom->flush();
                                //agrego el historial del servicio
                                $objServicioHistorialRelDesc = new InfoServicioHistorial();
                                $objServicioHistorialRelDesc->setServicioId($objServicioAdicional);
                                $objServicioHistorialRelDesc->setObservacion("Servicio Principal: ".
                                                                             $objServicioPriGpon->getDescripcionPresentaFactura());
                                $objServicioHistorialRelDesc->setUsrCreacion($usrCreacion);
                                $objServicioHistorialRelDesc->setFeCreacion(new \DateTime('now'));
                                $objServicioHistorialRelDesc->setIpCreacion($clientIp);
                                $objServicioHistorialRelDesc->setEstado($objServicioAdicional->getEstado());
                                $this->emcom->persist($objServicioHistorialRelDesc);
                                $this->emcom->flush();
                                //característica de la relación del servicio adicional
                                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioAdicional,
                                                                                               $objAdmiProdAdicional,
                                                                                               $strCaractRelacionAdicional,
                                                                                               $objServicioPriGpon->getId(),
                                                                                               $usrCreacion);
                                //característica tipo de red
                                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioAdicional,
                                                                                               $objAdmiProdAdicional,
                                                                                               "TIPO_RED",
                                                                                               $strTipoRedSerAdicional,
                                                                                               $usrCreacion);
                                //característica del servicio adicional
                                if($strNombreTecnicoServGpon != "DATOS SAFECITY")
                                {
                                    $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioAdicional,
                                                                                                   $objAdmiProdAdicional,
                                                                                                   'SERVICIO_ADICIONAL',
                                                                                                   "S",
                                                                                                   $usrCreacion);
                                }
                                //heredar factibilidad
                                if($arrayRespuestaServPref["strBanderaHeredarFactibilidad"] == "S")
                                {
                                    $objAdmiTipoSolicitud = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                        ->findOneBy(array("descripcionSolicitud" => "SOLICITUD FACTIBILIDAD",
                                                                                          "estado"               => "Activo"));

                                    if(is_object($objAdmiTipoSolicitud))
                                    {
                                        $objInfoDetSolicitud = $this->emcom->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                         ->findOneBy(array("servicioId"      => $objServicioPriGpon->getId(),
                                                                           "tipoSolicitudId" => $objAdmiTipoSolicitud),
                                                                     array('feCreacion'      => 'DESC'));

                                        if(is_object($objInfoDetSolicitud))
                                        {
                                            //se crea la solicitud
                                            $objInfoDetalleSolicitud = new InfoDetalleSolicitud();
                                            $objInfoDetalleSolicitud->setServicioId($objServicioAdicional);
                                            $objInfoDetalleSolicitud->setTipoSolicitudId($objAdmiTipoSolicitud);
                                            $objInfoDetalleSolicitud->setEstado($objInfoDetSolicitud->getEstado());
                                            $objInfoDetalleSolicitud->setUsrCreacion($usrCreacion);
                                            $objInfoDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                                            $objInfoDetalleSolicitud->setObservacion($objInfoDetSolicitud->getObservacion());
                                            $this->emcom->persist($objInfoDetalleSolicitud);
                                            $this->emcom->flush();
                                            //se crea el historial solicitud
                                            $objDetalleSolHist = new InfoDetalleSolHist();
                                            $objDetalleSolHist->setDetalleSolicitudId($objInfoDetalleSolicitud);
                                            $objDetalleSolHist->setIpCreacion($clientIp);
                                            $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                            $objDetalleSolHist->setUsrCreacion($usrCreacion);
                                            $objDetalleSolHist->setObservacion($objInfoDetSolicitud->getObservacion());
                                            $objDetalleSolHist->setEstado($objInfoDetSolicitud->getEstado());
                                            $this->emcom->persist($objDetalleSolHist);
                                            $this->emcom->flush();
                                            //guardar historial
                                            $objServicioHistorialFactible = new InfoServicioHistorial();
                                            $objServicioHistorialFactible->setServicioId($objServicioAdicional);
                                            $objServicioHistorialFactible->setObservacion("Por estar el servicio ".
                                                    $strDescripcionProductoPri."  en ".$objServicioPriGpon->getEstado().
                                                    " el servicio ".$strDescripcionProAdd." se crea con estado ".
                                                    $arrayRespuestaServPref["strEstadoPreferencial"]);
                                            $objServicioHistorialFactible->setIpCreacion($clientIp);
                                            $objServicioHistorialFactible->setUsrCreacion($usrCreacion);
                                            $objServicioHistorialFactible->setFeCreacion(new \DateTime('now'));
                                            $objServicioHistorialFactible->setEstado("Factible");
                                            $this->emcom->persist($objServicioHistorialFactible);
                                            $this->emcom->flush();
                                            //guardar historial
                                            $objServicioHistorialFactible2 = new InfoServicioHistorial();
                                            $objServicioHistorialFactible2->setServicioId($objServicioAdicional);
                                            $objServicioHistorialFactible2->setObservacion($objInfoDetSolicitud->getObservacion());
                                            $objServicioHistorialFactible2->setIpCreacion($clientIp);
                                            $objServicioHistorialFactible2->setUsrCreacion($usrCreacion);
                                            $objServicioHistorialFactible2->setFeCreacion(new \DateTime('now'));
                                            $objServicioHistorialFactible2->setEstado("Factible");
                                            $this->emcom->persist($objServicioHistorialFactible2);
                                            $this->emcom->flush();
                                        }
                                    }
                                }
                                //guardar servicio técnico
                                $objServicioTecnico = $this->emcom->getRepository('schemaBundle:InfoServicioTecnico')
                                                                        ->findOneByServicioId($objServicioPriGpon->getId());
                                if(is_object($objServicioTecnico))
                                {
                                    $objServicioTecnicoSerAdd = new InfoServicioTecnico();
                                    $objServicioTecnicoSerAdd->setServicioId($objServicioAdicional);
                                    $objServicioTecnicoSerAdd->setUltimaMillaId($objServicioTecnico->getUltimaMillaId());
                                    $objServicioTecnicoSerAdd->setTipoEnlace($objServicioTecnico->getTipoEnlace());
                                    $objServicioTecnicoSerAdd->setElementoId($objServicioTecnico->getElementoId());
                                    $objServicioTecnicoSerAdd->setInterfaceElementoId($objServicioTecnico->getInterfaceElementoId());
                                    $objServicioTecnicoSerAdd->setElementoConectorId($objServicioTecnico->getElementoConectorId());
                                    $objServicioTecnicoSerAdd->setInterfaceElementoConectorId($objServicioTecnico->getInterfaceElementoConectorId());
                                    $objServicioTecnicoSerAdd->setElementoContenedorId($objServicioTecnico->getElementoContenedorId());
                                    $this->emcom->persist($objServicioTecnicoSerAdd);
                                    $this->emcom->flush();
                                }
                            }
                            else
                            {
                                throw new \Exception("No se pudo crear el servicio adicional ".$strDescripcionProAdd.
                                                     " para el servicio $strDescripcionProductoPri, favor de notificar a Sistemas.");
                            }
                            //guardar historial del servicio principal
                            $objServicioHistorialPri = new InfoServicioHistorial();
                            $objServicioHistorialPri->setServicioId($objServicioPriGpon);
                            $objServicioHistorialPri->setObservacion("Se generó el servicio adicional ".$strDescripcionProAdd);
                            $objServicioHistorialPri->setUsrCreacion($usrCreacion);
                            $objServicioHistorialPri->setFeCreacion(new \DateTime('now'));
                            $objServicioHistorialPri->setIpCreacion($clientIp);
                            $objServicioHistorialPri->setEstado($objServicioPriGpon->getEstado());
                            $this->emcom->persist($objServicioHistorialPri);
                            $this->emcom->flush();
                        }
                        else
                        {
                            throw new \Exception("No se encuentra el producto adicional SW POE para ".
                                                 "el servicio $strDescripcionProductoPri, favor de notificar a Sistemas.");
                        }
                    }
                    else
                    {
                        throw new \Exception("No se encontró los datos del producto adicional SWITCH POE en los parámetros, ".
                                             "por favor notificar a Sistemas.");
                    }
                }
                elseif($arrayValidarPuertoOntGpon['status'] == "ERROR")
                {
                    throw new \Exception($arrayValidarPuertoOntGpon['mensaje']);
                }
            }
            
            
            // Reconoce los productos konibit para activar en el WS si internet ya esta activo
            if ($strPrefijoEmpresa === 'MD' && !empty($objServicioActual) && $objServicioActual->getEstado() == $objParamEstado['valor2'])
            {
                
                foreach($arrayListadoServicios as $objListado)
                {
                    if ($objProducto->getId() == $objListado['valor1'] &&
                        $objListado['valor3'] == "SI")
                    {
                        array_push($arrayServKonibit, $entityServicio->getId());
                    }
                }
            }
            /***FIN GENERACION AUTOMATICA DE SW POE PARA SERVICIOS GPON_MPLS***/

            /***VALIDACION VERIFICACION DE LA VRF CAMARA PARA SERVICIOS GPON_MPLS***/
            if($strPrefijoEmpresa === 'TN')
            {
                $this->emcom->flush();
                $arrayValidarVrfCamaras = $this->servicioTecnico->validarVrfCamaraGponMpls(array("objPunto"          => $entityPunto,
                                                                                                 "strTipoOrden"      => 'NUEVO_SERVICIO',
                                                                                                 "strCodEmpresa"     => $strCodEmpresa,
                                                                                                 "strPrefijoEmpresa" => $strPrefijoEmpresa,
                                                                                                 "strUsrCreacion"    => $usrCreacion,
                                                                                                 "strIpCreacion"     => $clientIp));
                if($arrayValidarVrfCamaras['status'] == "ERROR")
                {
                    throw new \Exception($arrayValidarVrfCamaras['mensaje']);
                }
            }
            /***FIN VALIDACION VERIFICACION DE LA VRF CAMARA PARA SERVICIOS GPON_MPLS***/

            //Llamada al micro-servicio que crea la solución DC.
            if ($boolEsTipoSolucion)
            {
                $arrayDatosDc = array('strUser'         => $usrCreacion,
                                      'strIp'           => $clientIp,
                                      'intIdEmpresa'    => $strCodEmpresa,
                                      'arraySolucion'   => array('numeroSolucion' => $intNumeroSecuencia,
                                                                 'nombreSolucion' => $strNombreSolucion,
                                                                 'puntoId'        => $entityPunto->getId(),
                                                                 'detalle'        => $arrayDetalleSolucion),
                                      'arrayRecursos'   => $arrayRecursos,
                                      'arrayServicioMV' => $arrayServicioMV,
                                      'arraySubTipos'   => $arraySubTipos);

                $arrayRespSolucion = $this->container->get('comercial.InfoSolucion')->crearSolucionDc($arrayDatosDc);

                if (!$arrayRespSolucion['status'])
                {
                    throw new \Exception('Solucion : '.$arrayRespSolucion['message']);
                }

                $arrayRespuestaServicio['numeroSolucion'] = $arrayRespSolucion['data']['numeroSolucion'];
            }

            //actualiza estado del punto
            $entityPunto->setEstado('Activo');
            $this->emcom->persist($entityPunto); 
            // flush antes de commit
            $this->emcom->flush();
            $this->emcom->commit();

            

            /* Obtención de parámetro que contiene códigos que aplican */
            $objParametroDetValProd =   $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                ->getOne("PROD_APLICA_PAQUETE_HORAS", //nombre parametro cab
                        "COMERCIAL", "", 
                        "PRODUCTOS QUE APLICAN Y NO APLICAN PARA PAQUETE DE HORAS DE SOPORTE", //descripcion det
                        "", "", "", "", "", $strCodEmpresa
                    );
 
            /* Validación para comprobar que el parámetro retorne información */
            if (!empty($objParametroDetValProd) && isset($objParametroDetValProd))
            {
                /* Se obtiene código de producto para validar si aplica para paquete de horas de soporte */
                $intCodigoProducto = $entityServicio->getProductoId()->getId();
                
                /* Conversión de json a arreglo PHP */ 
                $arrayProductosAplican = json_decode($objParametroDetValProd['valor1'])->SI;

                /* Validación para generar login auxiliar en productos que apliquen para paquete de horas de soporte */
                if ($strPrefijoEmpresa == 'TN' && $strCodEmpresa == '10' && in_array($intCodigoProducto, $arrayProductosAplican))
                {
                    $this->servicioTecnico->generarLoginAuxiliar($entityServicio->getId());
                }
            }

            

            
            if ($arrayPaqueteHorasSop)
            {
                $this->serviceGestionPaqueteSoporte->crearPaqueteSoporte($arrayPaqueteHorasSop);
            }

         

                if ($strTipoProducto == $strValorProductoPaqHorasRec && $strCodEmpresa == '10' && $strPrefijoEmpresa == 'TN')
                {
                    $strAccion                    = 'confirmarServicio';
                    $strDescripcionCaracteristica = 'Embebido';
                    $objCaracteristicaEmb = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                        ->findOneBy(array("descripcionCaracteristica" => $strDescripcionCaracteristica,
                                                                        "estado"                    => "Activo"));
        
                    $objAdmiProdCaractEmb = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                        ->findOneBy(array("productoId"       => $objProducto->getId(),
                                                                        "caracteristicaId" => $objCaracteristicaEmb->getId(),
                                                                        "estado"           => "Activo"));
        
                    $objInfoServProdCaractEmb = $this->emcom->getRepository('schemaBundle:InfoServicioProdCaract')
                                                            ->findOneBy(array("servicioId"                => $entityServicio->getId(),
                                                                            "productoCaracterisiticaId" => $objAdmiProdCaractEmb->getId()));
        
                    $strValorCaractEmbebido = $objInfoServProdCaractEmb->getValor();
                    if ($strValorCaractEmbebido =='S')
                    {
                        $strAccion ='';
                    }
                    $entityServicio->setEstado('Activo');
                    //Historial del servicio por Activación del Servicio Paquete de horas recarga
                    $objInfoServicioHistorialPaq = new InfoServicioHistorial();
                    $objInfoServicioHistorialPaq->setServicioId($entityServicio);
                    $objInfoServicioHistorialPaq->setObservacion("Se confirmo el servicio");
                    $objInfoServicioHistorialPaq->setEstado("Activo");
                    $objInfoServicioHistorialPaq->setUsrCreacion('Telcos');
                    $objInfoServicioHistorialPaq->setFeCreacion(new \DateTime('now'));
                    $objInfoServicioHistorialPaq->setIpCreacion($clientIp);
                    $objInfoServicioHistorialPaq->setAccion($strAccion);
                    $this->emcom->persist($objInfoServicioHistorialPaq);
                    $this->emcom->flush();
                }

            
            if (!$boolParametroNombreTecnico && !$boolEnvioNotifIPSB)
            {
                if ($this->emComunicacion->getConnection()->isTransactionActive())
                {
                    $this->emComunicacion->getConnection()->commit();
                }
                if ($this->emSoporte->getConnection()->isTransactionActive())
                {
                    $this->emSoporte->getConnection()->commit();
                }

            }

            // Creados los servicios adicionales procedemos a notificarlos a konibit de existir alguno
            if (!empty($arrayServKonibit))
            {
                $this->emcom->beginTransaction();

                foreach ($arrayServKonibit as $intIdServKonibit)
                {
                    $arrayResKonibit = $this->emInfraestructura->getRepository('schemaBundle:InfoServicioTecnico')
                                            ->notificarKonibit(array ('intIdServicio'  => $intIdServKonibit,
                                                                    'strTipoProceso' => 'ACTIVAR',
                                                                    'strTipoTrx'     => 'INDIVIDUAL',
                                                                    'strUsuario'     => $usrCreacion,
                                                                    'strIp'          => $clientIp,
                                                                    'objUtilService' => $this->utilServicio));
                    $strKonibit = $arrayResKonibit['status'];
                    $objSerKonibit = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                            ->find($intIdServKonibit);
                    if (!empty($strKonibit) && $strKonibit == "ok")
                    {
                        $objSerKonibit->setEstado('Activo');
                        $this->emcom->persist($objSerKonibit);
                        
                        $objServHistorial = new InfoServicioHistorial();
                        $objServHistorial->setServicioId($objSerKonibit);
                        $objServHistorial->setObservacion("Se activa servicio adicional con konibit por servicio de internet ya activo");
                        $objServHistorial->setEstado("Activo");
                        $objServHistorial->setAccion('confirmarServicio');
                        $objServHistorial->setUsrCreacion($usrCreacion);
                        $objServHistorial->setFeCreacion(new \DateTime('now'));
                        $objServHistorial->setIpCreacion($clientIp);
                        $this->emcom->persist($objServHistorial);                             
                        $this->emcom->flush();
                        
                        //Se guarda la caracteristica "ACTIVO KONIBIT SI" luego que el producto adicional se activará 
                        $this->servicioTecnico->ingresarServicioProductoCaracteristica($objSerKonibit,
                                                                                       $objProducto,
                                                                                       "ACTIVO KONIBIT",
                                                                                       "SI",
                                                                                       $usrCreacion);
                        
                        
                    }
                    else
                    {
                        $strObservacionError = "El producto adicional no se activó en Konibit,";
                        $strObservacionError = $strObservacionError." motivo: ".$arrayResKonibit['message'];
                        $objServHistKonibit = new InfoServicioHistorial();
                        $objServHistKonibit->setServicioId($objSerKonibit);
                        $objServHistKonibit->setObservacion($strObservacionError);
                        $objServHistKonibit->setEstado("Pendiente");
                        $objServHistKonibit->setUsrCreacion($usrCreacion);
                        $objServHistKonibit->setFeCreacion(new \DateTime('now'));
                        $objServHistKonibit->setIpCreacion($clientIp);
                        $this->emcom->persist($objServHistKonibit);
                        $this->emcom->flush();

                        //Se guarda la caracteristica "ACTIVO KONIBIT NO" luego que el producto adicional no se activará  
                        $this->servicioTecnico->ingresarServicioProductoCaracteristica($objSerKonibit,
                                                                                       $objProducto,
                                                                                       "ACTIVO KONIBIT",
                                                                                       "NO",
                                                                                       $usrCreacion);

                        

                        // Envio de mail cuando falla los reintentos
                        $objPunto = $this->emcom->getRepository('schemaBundle:InfoPunto')
                                            ->findOneById($objSerKonibit->getPuntoId()->getId());
                        $objProdServicio = $objSerKonibit->getProductoId();
                        $strAsunto = "Error al activar el producto ".$objProdServicio->getDescripcionProducto();
                        $arrayDestinatarios = null;
                        $arrayValoresParametros = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->get('PRODUCTOS ADICIONALES AUTOMATICOS','COMERCIAL','',
                                                'Lista de correos a enviar para error en konibit',
                                                '','','','','',$strCodEmpresa);
                        if(is_array($arrayValoresParametros) && !empty($arrayValoresParametros))
                        {
                            $arrayDestinatarios = $this->utilServicio->obtenerValoresParametro($arrayValoresParametros);
                        }
                        // Enviamos correo para incluir el error
                        $strRegitro = date('d-m-Y h:i:s a', time()).' - '.$arrayResKonibit['message'];
                        $strMensajeCorreo = '<tr>'.'<td>'.$strRegitro.'</td>'.'</tr>';

                        // Enviamos correo para incluir el error
                        $arrayParamClientes = array(
                            'idServicio'        => $objSerKonibit->getId(),
                            'booleanEsProducto' => true
                        );
                        $objCliente = $this->emcom->getRepository('schemaBundle:InfoPersona')
                                                ->getDatosClienteDelPuntoPorIdServicio($arrayParamClientes);
                        $strCliente = $objCliente['NOMBRES']. " con identificacion ".$objCliente['IDENTIFICACION_CLIENTE'];
                        $arrayParametrosMail = array(
                            "cliente"  => $strCliente,
                            "login"    => $objPunto->getLogin(),
                            "producto" => $objProdServicio->getDescripcionProducto(),
                            "mensaje"  => $strMensajeCorreo
                        );

                        $this->serviceEnvioPlantilla->generarEnvioPlantilla(
                                $strAsunto,
                                $arrayDestinatarios,
                                'NOT_ERR_KON',
                                $arrayParametrosMail,
                                $strCodEmpresa,
                                '',
                                '',
                                null,
                                false,
                                'notificaciones_telcos@telconet.ec'
                        );
                    }
                }
                
                // Guardamos en base
                $this->emcom->flush();
                $this->emcom->commit();
            }
            
            //se agrega codigo para realizar activacion de servicios McAfee y NetlifeCloud Automaticamente
            foreach ($arrayServicios as $servicioAdicional)
            {
                if ($servicioAdicional->getProductoId())
                {
                    $entityAdmiProducto                   = $this->emcom->getRepository('schemaBundle:AdmiProducto')
                                                                 ->find($servicioAdicional->getProductoId());                     

                    $booleanValidaProductoOffice          = strpos($entityAdmiProducto->getDescripcionProducto(), 'NetlifeCloud');
                    
                    $booleanValidaProducto                = strpos($entityAdmiProducto->getDescripcionProducto(), 'I. PROTEGIDO');
                    $booleanValidaProductoProteccionTotal = strpos($entityAdmiProducto->getDescripcionProducto(), 'I. PROTECCION');
                    //se valida que sea un producto de tipo McAfee u NetlifeCloud
                    if ($booleanValidaProducto !== false || $booleanValidaProductoProteccionTotal !== false ||
                        $booleanValidaProductoOffice !== false)
                    {
                        $arrayPeticiones['idServicio']  = $servicioAdicional->getId();
                        $arrayPeticiones['idEmpresa']   = $strCodEmpresa;
                        $arrayPeticiones['idOficina']   = $idOficina;
                        $arrayPeticiones['idAccion']    = '847';
                        $arrayPeticiones['usrCreacion'] = $usrCreacion;
                        $arrayPeticiones['clientIp']    = $clientIp;
                        $arrayRespuesta                 = $this->activarService->activarServiciosOtros($arrayPeticiones);
                        if ($booleanValidaProducto !== false || $booleanValidaProductoProteccionTotal !== false )
                        {
                            if ($arrayRespuesta['status'] == 'OK')
                            {
                                if ($session)
                                {
                                    $session->getFlashBag()->add('success', 'Servicio ' .$entityAdmiProducto->getDescripcionProducto().
                                                                            ' activado correctamente');
                                }
                            }
                            else
                            {
                                if ($session)
                                {
                                    $session->getFlashBag()->add('success', 
                                                                 'Servicio '.$entityAdmiProducto->getDescripcionProducto().
                                                                 ' presento problemas al activar, ' . 
                                                                 $arrayRespuesta['mensaje'] . '.');
                                }
                            }
                        } 
                        else if($booleanValidaProductoOffice !== false)
                        {
                            if ($arrayRespuesta['status'] == 'OK')
                            {
                                if ($session)
                                {
                                    $session->getFlashBag()->add('success', 'Servicio NetlifeCloud activado correctamente');
                                }
                            }
                            else
                            {
                                if ($session)
                                {
                                    $session->getFlashBag()->add('success', 
                                                                 'Servicio NetlifeCloud presento problemas al activar, ' .
                                                                 $arrayRespuesta['mensaje'] . '.');
                                }
                            }
                        }    
                    }
                }
            }// foreach ($arrayServicios as $servicioAdicional)

            //validacion para producto de netvoice en caso de TN se creara un servicio adicional que servira como concentrador
            if($boolServicioCanales)
            {
                $objProductoCanal = $this->emcom->getRepository("schemaBundle:AdmiProducto")
                                                ->findOneBy(array(  'descripcionProducto'   => 'L3MPLS',
                                                                    'nombreTecnico'         => 'L3MPLS'));



                $arrayServicioAdicional['objPunto']         = $entityPunto;
                $arrayServicioAdicional['objProducto']      = $objProductoCanal;
                $arrayServicioAdicional['estadoServicio']   = 'Pre-servicio';
                $arrayServicioAdicional['strUser']          = $usrCreacion;
                $arrayServicioAdicional['strIp']            = $clientIp;
                $arrayServicioAdicional['intEmpresa']       = $strCodEmpresa;
                $arrayServicioAdicional['strCodigoTipo']    = 'FO';
                $arrayServicioAdicional['strDescFactura']   = 'CANAL TELEFONIA';
                $arrayServicioAdicional['intBw']            = 128; //se pone un valor minimo
                
                //Consultamos si el producto tiene marca de activación simultánea
                if ($boolInstalSimultanea)
                {
                    $arrayServicioAdicional['valorSim']     = $arrayInstalSimultanea['valor'];
                    $arrayServicioAdicional['caractSim']    = $arrayInstalSimultanea['caracteristica'];
                    $arrayServicioAdicional['idCaractSim']  = $arrayInstalSimultanea['idCaracteristica'];
                    $arrayServicioAdicional['instSimul']    = 'S';
                    $objProdInstalSim = $this->emcom->getRepository("schemaBundle:AdmiProducto")
                                                    ->findOneBy(array(  'descripcionProducto'   => 'COU LINEAS TELEFONIA FIJA'));
                    $arrayServicioAdicional['objProdInstalSim']  = $objProdInstalSim;
                }
                                
                //si no existe lo mando a crear
                $this->crearServicioAdicional($arrayServicioAdicional);
            }

            if( $boolExisteServNetHome )
            {
                $arrayParamServNetHome = array(  "strCodEmpresa"         => $strCodEmpresa, 
                                                 "intIdOficina"          => $idOficina,
                                                 "strUsrCreacion"        => $usrCreacion,
                                                 "strClientIp"           => $clientIp,
                                                 "strTipoOrden"          => $tipoOrden,
                                                 "strEsVenta"            => 'S',
                                                 "objInfoPunto"          => $entityPunto,         
                                                 'arrayServiciosNetHome' => $arrayServiciosNetHome);
                $arrayRespuesta        = $this->crearServicioProdCaractNetHome($arrayParamServNetHome);
                
                if ($arrayRespuesta["strEstado"] != "OK")
                {
                    throw new \Exception("No se ha podido ingresar productos NETHOME: " . $arrayRespuesta["strMensaje"]);
                }
            }
            
            if(isset($arrayInfoWyAp) && !empty($arrayInfoWyAp))
            {
                $arrayInfoGestionWyAp   = $arrayInfoWyAp[0];
                if(isset($arrayInfoGestionWyAp["strEliminaServiciosAdiWdb"]) && !empty($arrayInfoGestionWyAp["strEliminaServiciosAdiWdb"])
                    && $arrayInfoGestionWyAp["strEliminaServiciosAdiWdb"] === "SI")
                {
                    $arrayRespuestaEliminaServiciosAdiWdb   = $this->servicioTecnico
                                                                   ->cancelaOEliminaServiciosDualBand(
                                                                            array(  "intIdPunto"                    => $entityPunto->getId(),
                                                                                    "strNombreTecnicoProducto"      => "WIFI_DUAL_BAND",
                                                                                    "intIdServicioUnicoACancelar"   => null,
                                                                                    "intIdServicioANoCancelar"      => null,
                                                                                    "strEliminaDataTecnica"         => "NO",
                                                                                    "strObsProcesoEjecutante"       => " por creación de servicio "
                                                                                    .$arrayInfoGestionWyAp["strDescripcionProducto"],
                                                                                    "strUsrCreacion"                => $usrCreacion,
                                                                                    "strIpCreacion"                 => $clientIp));
                    if($arrayRespuestaEliminaServiciosAdiWdb["status"] === "ERROR" && $session)
                    {
                        $session->getFlashBag()->add('success', 
                                                     'Se presentaron problemas al eliminar servicios adicionales Wifi Dual Band por creación de '.
                                                     'servicio '.$arrayInfoGestionWyAp["strDescripcionProducto"]);
                    }
                }
                
                if(isset($arrayInfoGestionWyAp["strEliminaSolsDualBand"]) && !empty($arrayInfoGestionWyAp["strEliminaSolsDualBand"])
                    && $arrayInfoGestionWyAp["strEliminaSolsDualBand"] === "SI")
                {
                    $arrayRespuestaEliminaSolsDualBand  = $this->servicioTecnico
                                                               ->eliminaSolicitudesDualBand(
                                                                    array("intIdServicio"        => $arrayInfoGestionWyAp["intIdServicioInternet"],
                                                                          "intIdSolicitudValida" => $arrayInfoGestionWyAp["intIdSolAgregarEquipo"]));
                    if($arrayRespuestaEliminaSolsDualBand["status"] === "ERROR" && $session)
                    {
                        $session->getFlashBag()->add('success', 
                                                     'Se presentaron problemas al eliminar las solicitudes asociadas a servicios Dual Band '.
                                                     'por creación de servicio '.$arrayInfoGestionWyAp["strDescripcionProducto"]);
                    }
                }
                
                if(isset($arrayInfoGestionWyAp["strEliminaSolsGestionOnt"]) && !empty($arrayInfoGestionWyAp["strEliminaSolsGestionOnt"])
                    && $arrayInfoGestionWyAp["strEliminaSolsGestionOnt"] === "SI")
                {
                    $arrayRespuestaEliminaSolsGestionOnt = $this->servicioTecnico
                                                                ->eliminaSolicitudesGestionaOnt(
                                                                    array("intIdServicio"        => $arrayInfoGestionWyAp["intIdServicioInternet"],
                                                                          "intIdSolicitudValida" => $arrayInfoGestionWyAp["intIdSolAgregarEquipo"]));
                    if($arrayRespuestaEliminaSolsGestionOnt["status"] === "ERROR" && $session)
                    {
                        $session->getFlashBag()->add('success', 
                                                     'Se presentaron problemas al eliminar las solicitudes que gestionan el equipo CPE ONT '.
                                                     'por creación de servicio '.$arrayInfoGestionWyAp["strDescripcionProducto"]);
                    }
                }
            }
            
            /*
             * Se migra lógica para su ejecución post autorización del contrato.
             * Aplica cuando el servicio de internet se encuentre en estado Factible
             */
            if(isset($arrayInfoExtender) && !empty($arrayInfoExtender))
            {
                $arrayInfoGestionXExtender = $arrayInfoExtender[0];
                if(isset($arrayInfoGestionXExtender["strEliminaSolsDualBand"]) && !empty($arrayInfoGestionXExtender["strEliminaSolsDualBand"])
                    && $arrayInfoGestionXExtender["strEliminaSolsDualBand"] === "SI")
                {
                    $arrayRespuestaEliminaSolsDualBand  = $this->servicioTecnico
                                                               ->eliminaSolicitudesDualBand(
                                                                    array(  "intIdServicio"        => 
                                                                            $arrayInfoGestionXExtender["intIdServicioInternet"],
                                                                            "intIdSolicitudValida" => 
                                                                            $arrayInfoGestionXExtender["intIdSolAgregarEquipo"]));
                    if($arrayRespuestaEliminaSolsDualBand["status"] === "ERROR" && $session)
                    {
                        $session->getFlashBag()->add('success', 
                                                     'Se presentaron problemas al eliminar las solicitudes asociadas a servicios Dual Band '.
                                                     'por creación de servicio '.$arrayInfoGestionXExtender["strDescripcionProducto"]);
                    }
                }
                
                if(isset($arrayInfoGestionXExtender["strEliminaSolsGestionOnt"]) && !empty($arrayInfoGestionXExtender["strEliminaSolsGestionOnt"])
                    && $arrayInfoGestionXExtender["strEliminaSolsGestionOnt"] === "SI")
                {
                    $arrayRespuestaEliminaSolsGestionOnt = $this->servicioTecnico
                                                                ->eliminaSolicitudesGestionaOnt(
                                                                    array(  "intIdServicio"        => 
                                                                            $arrayInfoGestionXExtender["intIdServicioInternet"],
                                                                            "intIdSolicitudValida" => 
                                                                            $arrayInfoGestionXExtender["intIdSolAgregarEquipo"]));
                    if($arrayRespuestaEliminaSolsGestionOnt["status"] === "ERROR" && $session)
                    {
                        $session->getFlashBag()->add('success', 
                                                     'Se presentaron problemas al eliminar las solicitudes que gestionan el equipo CPE ONT '.
                                                     'por creación de servicio '.$arrayInfoGestionXExtender["strDescripcionProducto"]);
                    }
                }
                
                
            }
            
        }
        catch (\Exception $e)
        {
            if ($this->emcom->getConnection()->isTransactionActive())
            {
                $this->emcom->getConnection()->rollback();
            }
            $this->emcom->getConnection()->close();
            if ($this->emComunicacion->getConnection()->isTransactionActive())
            {
                $this->emComunicacion->getConnection()->rollback();
            }
            $this->emComunicacion->getConnection()->close();
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
            }
            $this->emSoporte->getConnection()->close();
            
            if($entityPunto->getOrigenWeb() === 'N')
            {
                $strMensaje = 'Error al ingresar Servicio: ';
                $arrayParametrosLog['enterpriseCode']   = $arrayParametros['codEmpresa'];
                $arrayParametrosLog['logType']          = "1";
                $arrayParametrosLog['logOrigin']        = "TELCOS";
                $arrayParametrosLog['application']      = "InfoServicioService";
                $arrayParametrosLog['appClass']         = "InfoServicioService";
                $arrayParametrosLog['appMethod']        = "crearServicio";
                $arrayParametrosLog['appAction']        = "crearServicio";
                $arrayParametrosLog['messageUser']      = "ERROR";
                $arrayParametrosLog['status']           = "Error";
                $arrayParametrosLog['descriptionError'] = $strMensaje.$e->getMessage();
                $arrayParametrosLog['inParameters']     = json_encode($arrayParametros);
                $arrayParametrosLog['creationUser']     = $arrayParametros['usrCreacion'];    

                $this->utilServicio->insertLog($arrayParametrosLog);
            }
            
            throw $e;
        }
        return $arrayRespuestaServicio;
    }
    
    /**
     * Funcion que consulta el estado del servicio que es enviado como parametro: strProductoPreferencial
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 03-05-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 28-09-2021 - Se valida los estados permitidos para obtener el servicio principal
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.2 01-08-2022 - Se agrega validación para obtener el servicio principal
     *                           con relación a servicios adicionales de cámaras.
     *
     * @param $arrayParametros: [ strCodEmpresa             => codigo de la empresa
     *                            strIdPunto                => id del punto actual
     *                            strIdProductoPreferencial => id del producto preferencial
     *                            strIdProductoCamara       => id del producto camara
     *                          ]
     *
     * @return String $arrayRespuesta [
     *                                  strEstadoPreferencial         => estado del servicio a heredar
     *                                  objServPref                   => objeto del servicio principal
     *                                  strBanderaHeredarFactibilidad => bandera para heredar factibilidad
     *                                 ]
     */
    public function getEstadoServicioXProdPreferencial($arrayParametros)
    {
        $arrayRespuesta                = array();
        $strEstado                     = "Pendiente";
        $objServicioPreferencial       = "";
        $strBanderaHeredarFactibilidad = "N";

        //Consultar el objeto producto
        $objAdmiProducto = $this->emcom->getRepository('schemaBundle:AdmiProducto')
                                       ->findOneBy(array('id'     => $arrayParametros["strIdProductoPreferencial"],
                                                         'estado' => "Activo"));

        //Consultar el objeto punto
        $objAdmiPunto = $this->emcom->getRepository('schemaBundle:InfoPunto')->find($arrayParametros["strIdPunto"]);

        if(is_object($objAdmiProducto) && is_object($objAdmiPunto))
        {
            //obtener estados no permitidos
            $arrayEstadosNoPermitidos = array();
            $arrayParametrosEstados   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')->get('NUEVA_RED_GPON_TN',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    '',
                                                                                                    'ESTADOS_SERVICIOS_NO_PERMITIDOS_FLUJO',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '',
                                                                                                    '');
            foreach($arrayParametrosEstados as $arrayDetalles)
            {
                $arrayEstadosNoPermitidos[] = $arrayDetalles['valor2'];
            }
            //obtengo el servicio
            $objInfoServcio = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                        ->createQueryBuilder('s')
                                        ->innerJoin('schemaBundle:InfoServicioProdCaract', 'car', 'WITH', 'car.valor = s.id')
                                        ->innerJoin('schemaBundle:AdmiProductoCaracteristica', 'pc', 'WITH',
                                                'pc.id = car.productoCaracterisiticaId')
                                        ->innerJoin('schemaBundle:AdmiCaracteristica', 'c', 'WITH', 'c.id = pc.caracteristicaId')
                                        ->where('s.puntoId = :puntoId')
                                        ->andWhere("s.productoId = :productoId")
                                        ->andWhere("s.estado NOT IN (:estados)")
                                        ->andWhere("c.descripcionCaracteristica = :desCaracteristica")
                                        ->andWhere("car.estado = :estadoActivo")
                                        ->setParameter('puntoId', $objAdmiPunto->getId())
                                        ->setParameter('productoId', $objAdmiProducto->getId())
                                        ->setParameter('desCaracteristica', "RELACION_SERVICIOS_GPON_SAFECITY")
                                        ->setParameter('estados', array_values($arrayEstadosNoPermitidos))
                                        ->setParameter('estadoActivo', 'Activo')
                                        ->setMaxResults(1)
                                        ->getQuery()
                                        ->getOneOrNullResult();
            //verificar objeto del servicio
            if(is_object($objInfoServcio))
            {
                //Se consulta el estado en la tabla de mapeo
                $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                  ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                           'INFRAESTRUCTURA',
                                                           'PARAMETROS',
                                                           'MAPEO_ESTADOS',
                                                           $objInfoServcio->getEstado(),
                                                           '',
                                                           '',
                                                           '',
                                                           '',
                                                           $arrayParametros["strCodEmpresa"]);

                if(!empty($arrayParametrosDet["valor2"]) && isset($arrayParametrosDet["valor2"]))
                {
                    $strEstado                     = $arrayParametrosDet["valor2"];
                    $strBanderaHeredarFactibilidad = $arrayParametrosDet["valor3"];
                }
                else
                {
                    $strEstado = $objInfoServcio->getEstado();
                }

                $objServicioPreferencial = $objInfoServcio;
            }
        }

        $arrayRespuesta["strEstadoPreferencial"]         = $strEstado;
        $arrayRespuesta["objServPref"]                   = $objServicioPreferencial;
        $arrayRespuesta["strBanderaHeredarFactibilidad"] = $strBanderaHeredarFactibilidad;

        return $arrayRespuesta;
    }


    /**
     * Funcion que consulta el estado del servicio que es enviado como parametro: strProductoPreferencial
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 03-05-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 11-10-2021 - Se valida que debe existir una cámara activa sin relación con mascarilla
     *
     * @param $arrayParametros: [ intIdPunto     => id del punto del cliente en sesion
     *                            intIdProducto  => id de producto,
     *                            strCodEmpresa  => codigo de la empresa ]
     *
     * @return $arrayRespuesta  => [ status  => OK u ERROR
     *                               mensaje => mensaje de respuesta ]
     */
    public function validarCamaraActiva($arrayParametros)
    {
        $arrayRespuesta      = array();
        $strEstado           = "Pendiente";
        $intIdPunto          = $arrayParametros["intIdPunto"];
        $strIdProducto       = $arrayParametros["intIdProducto"];
        $strIdProductoCamara = "";
        $strEstatus          = "ERROR";
        $strMensaje          = "";

        if(!empty($intIdPunto) && !empty($strIdProducto))
        {
            //Se consulta el estado en la tabla de mapeo
            $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                              ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                       'INFRAESTRUCTURA',
                                                       'PARAMETROS',
                                                       'VALIDAR RELACION MASCARILLA CON SAFE VIDEO ANALYTICS CAM',
                                                       $strIdProducto,
                                                       '',
                                                       '',
                                                       '',
                                                       '',
                                                       $arrayParametros["strCodEmpresa"]);

            if(!empty($arrayParametrosDet["valor2"]) && isset($arrayParametrosDet["valor2"]))
            {
                $strIdProductoCamara = $arrayParametrosDet["valor2"];

                //Consultar el objeto producto
                $objAdmiProducto = $this->emcom->getRepository('schemaBundle:AdmiProducto')
                                               ->findOneBy(array('id'     => $strIdProductoCamara,
                                                                 'estado' => "Activo"));

                $objInfoPunto = $this->emcom->getRepository('schemaBundle:InfoPunto')->find($intIdPunto);

                if(is_object($objAdmiProducto) && is_object($objInfoPunto))
                {
                    //Consultar si en el punto existe un servicio camara en estado Activo
                    $strMensaje       = "Debe existir un servicio ".$objAdmiProducto->getDescripcionProducto()." Activo, ".
                                        "y no poseer una mascarilla relacionada.";
                    $arrayInfoServcio = $this->emcom->getRepository('schemaBundle:InfoServicio')->findBy(array('puntoId'    => $objInfoPunto,
                                                                                                               'productoId' => $objAdmiProducto,
                                                                                                               'estado'     => 'Activo'));
                    foreach($arrayInfoServcio as $objInfoServcio)
                    {
                        $objRelacionMascarilla = $this->servicioTecnico->getServicioProductoCaracteristica($objInfoServcio,
                                                                                                           'RELACION_MASCARILLA_CAMARA_SAFECITY',
                                                                                                           $objAdmiProducto);
                        if(!is_object($objRelacionMascarilla))
                        {
                            $strEstatus = "OK";
                            $strMensaje = "Exito";
                            break;
                        }
                    }
                }
            }
        }

        $arrayRespuesta["status"]    = $strEstatus;
        $arrayRespuesta["respuesta"] = $strMensaje;

        return $arrayRespuesta;
    }

    /**
     * Funcion que consulta el estado del servicio que es enviado como parametro: strProductoPreferencial
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 14-05-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 06-08-2021 - Se obtiene la vlan, vrf y ip por el producto del servicio
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.2 04-10-2021 - Se valida la asignación de ip para servicios CAM SAFECITY
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 15-06-2022 - Se pasa el id de la empresa al método de obtener la vrf y vlan de los servicios safecity.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.4 01-08-2022 - Se valida la asignación de ip para los servicios Cámaras VPN GPON.
     *
     * @param $arrayParametros: [ objServicio                  => objeto servicio
     *                            intIdDetalleSolicitudInstalacion => id de detalle solicitud
     *                            strProtocoloEnrutamiento      => protocolo de enrutamiento
     *                            strUsrCreacion                => id de producto,
     *                            strIpCreacion                 => ip de creacion,
     *                            strCodEmpresa                 => codigo de la empresa ]
     *
     * @return $arrayRespuesta  => [ status  => OK u ERROR
     *                               mensaje => mensaje de respuesta ]
     */
    public function migrarServicioAEstadoAsignada($arrayParametros) 
    {
        $arrayRespuesta                     = array();
        $intIdDetalleSolicitudInstalacion   = $arrayParametros["intIdDetalleSolicitudInstalacion"];
        $strProtocoloEnrutamiento           = $arrayParametros["strProtocoloEnrutamiento"];
        $strTipoServicio                    = $arrayParametros["strTipoServicio"];
        $objServicio                        = $arrayParametros["objServicio"];
        $intIdDepartamento                  = $arrayParametros["strIdDepartamento"];
        $strUsrCreacion                     = $arrayParametros["strUsrCreacion"];
        $strIpCreacion                      = $arrayParametros["strIpCreacion"];
        $strCodEmpresa                      = $arrayParametros["strCodEmpresa"];

        $this->emcom->getConnection()->beginTransaction();
        $this->emInfraestructura->getConnection()->beginTransaction();
        $this->emSoporte->getConnection()->beginTransaction();

        try
        {
            $strObservacionServicio = "Se actualiza el estado del servicio Asignada por migración.";
            //obtengo los datos de vlan y vrf por servicio
            if($objServicio->getProductoId()->getNombreTecnico() == "SAFECITYDATOS"
               || $objServicio->getProductoId()->getNombreTecnico() == "SAFECITYWIFI")
            {
                $arrayResultadoVlanVrf = $this->servicioTecnico
                                                ->getVlanVrfPorServicio(array("objServicio"   => $objServicio,
                                                                              "strCodEmpresa" => $strCodEmpresa));
                if($arrayResultadoVlanVrf['status'] != "OK")
                {
                    throw new \Exception($arrayResultadoVlanVrf['mensaje']);
                }
                $objDetalleEleVlan      = $arrayResultadoVlanVrf['objDetalleElementoVlan'];
                $objPersonaEmpCaractVrf = $arrayResultadoVlanVrf['objPersonaEmpCaractVrf'];
                //insertar protocolo
                $objProdCaractProtocolo = $this->servicioTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                    'PROTOCOLO_ENRUTAMIENTO',
                                                                                                    $objServicio->getProductoId());
                if(!is_object($objProdCaractProtocolo))
                {
                    $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicio,
                                                                                   $objServicio->getProductoId(),
                                                                                   'PROTOCOLO_ENRUTAMIENTO',
                                                                                   $strProtocoloEnrutamiento,
                                                                                   $strUsrCreacion);
                }
            }
            //verificar si el servicio es WIFI
            if($objServicio->getProductoId()->getNombreTecnico() == "SAFECITYWIFI")
            {
                $objDetalleEleVlanAdmin      = $arrayResultadoVlanVrf['objDetalleElementoVlanAdmin'];
                $objPersonaEmpCaractVrfAdmin = $arrayResultadoVlanVrf['objPersonaEmpCaractVrfAdmin'];
                //insertar vlan ssid
                $objProdCaractVlan = $this->servicioTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                               'VLAN SSID',
                                                                                               $objServicio->getProductoId());
                if(!is_object($objProdCaractVlan))
                {
                    $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicio,$objServicio->getProductoId(),
                                                            "VLAN SSID",$objDetalleEleVlan->getId(),$strUsrCreacion);
                }
                //insertar vlan admin
                $objProdCaractVlan = $this->servicioTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                               'VLAN ADMIN',
                                                                                               $objServicio->getProductoId());
                if(!is_object($objProdCaractVlan))
                {
                    $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicio,$objServicio->getProductoId(),
                                                            "VLAN ADMIN",$objDetalleEleVlanAdmin->getId(),$strUsrCreacion);
                }
                //insertar vrf ssid
                $objProdCaractVrf = $this->servicioTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                              'VRF SSID',
                                                                                              $objServicio->getProductoId());
                if(!is_object($objProdCaractVrf))
                {
                    $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicio,$objServicio->getProductoId(),
                                                            "VRF SSID",$objPersonaEmpCaractVrf->getId(),$strUsrCreacion);
                }
                //insertar vrf admin
                $objProdCaractVrf = $this->servicioTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                              'VRF ADMIN',
                                                                                              $objServicio->getProductoId());
                if(!is_object($objProdCaractVrf))
                {
                    $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicio,$objServicio->getProductoId(),
                                                            "VRF ADMIN",$objPersonaEmpCaractVrfAdmin->getId(),$strUsrCreacion);
                }
                //seteo historial
                $strObservacionServicio  = "Se asignaron los siguientes recursos de red: <br/><br/>";
                $strObservacionServicio .= "&#10140;<b>Vlan SSID:</b> ".$objDetalleEleVlan->getDetalleValor()."<br/>";
                $strObservacionServicio .= "&#10140;<b>Vrf SSID:</b> ".$objPersonaEmpCaractVrf->getValor()."<br/>";
                $strObservacionServicio .= "&#10140;<b>Vlan ADMIN:</b> ".$objDetalleEleVlanAdmin->getDetalleValor()."<br/>";
                $strObservacionServicio .= "&#10140;<b>Vrf ADMIN:</b> ".$objPersonaEmpCaractVrfAdmin->getValor()."<br/>";
            }
            elseif($objServicio->getProductoId()->getNombreTecnico() == "SAFECITYDATOS")
            {
                //insertar vlan
                $objProdCaractVlan = $this->servicioTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                               'VLAN',
                                                                                               $objServicio->getProductoId());
                if(!is_object($objProdCaractVlan))
                {
                    $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicio,$objServicio->getProductoId(),
                                                            "VLAN",$objDetalleEleVlan->getId(),$strUsrCreacion);
                }
                //insertar vrf
                $objProdCaractVrf = $this->servicioTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                              'VRF',
                                                                                              $objServicio->getProductoId());
                if(!is_object($objProdCaractVrf))
                {
                    $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicio,$objServicio->getProductoId(),
                                                            "VRF",$objPersonaEmpCaractVrf->getId(),$strUsrCreacion);
                }
            }

            //Se actualiza el Servicio,Historial,Solicitud e Historial de la solicitud
            $objServicio->setEstado("Asignada");
            $this->emcom->persist($objServicio);
            $this->emcom->flush();
            //Actualizar estado de solicitud
            $objTipoSolicitudPlanficacion = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                      ->findOneBy(array("descripcionSolicitud" => "SOLICITUD PLANIFICACION",
                                                                        "estado"               => "Activo"));
            if(is_object($objTipoSolicitudPlanficacion))
            {
                $objSolicitudPlanficacion = $this->emcom->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                        ->findOneBy(array("servicioId"      => $objServicio->getId(),
                                                                          "tipoSolicitudId" => $objTipoSolicitudPlanficacion->getId(),
                                                                          "estado"          => "AsignadoTarea"),
                                                                    array('id'              => 'DESC'));
                if (is_object($objSolicitudPlanficacion))
                {
                    $objSolicitudPlanficacion->setEstado("Asignada");
                    $this->emcom->persist($objSolicitudPlanficacion);
                    $this->emcom->flush();
                    //Se actualiza el historial de la solicitud
                    $objDetalleSolicitudHistorial = new InfoDetalleSolHist();
                    $objDetalleSolicitudHistorial->setDetalleSolicitudId($objSolicitudPlanficacion);
                    $objDetalleSolicitudHistorial->setObservacion("Se cambia estado automáticamente");
                    $objDetalleSolicitudHistorial->setIpCreacion($strIpCreacion);
                    $objDetalleSolicitudHistorial->setFeCreacion(new \DateTime('now'));
                    $objDetalleSolicitudHistorial->setUsrCreacion($strUsrCreacion);
                    $objDetalleSolicitudHistorial->setEstado("Asignada");
                    $this->emcom->persist($objDetalleSolicitudHistorial);
                    $this->emcom->flush();
                }
            }

            //verificar si el servicio no es WIFI para la asignación de ip
            if($objServicio->getProductoId()->getNombreTecnico() == "SAFECITYDATOS" || $strTipoServicio === "CAMARAVPN")
            {
                $objIpServicio = $this->emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                          ->findOneBy(array("servicioId" => $objServicio->getId(),
                                                                            "estado"     => "Reservada"));
                if(is_object($objIpServicio))
                {
                    $strIpServicioAdd     = $objIpServicio->getIp();
                    $objSubredServicioAdd = $this->emInfraestructura->getRepository("schemaBundle:InfoSubred")->find($objIpServicio->getSubredId());
                }
                else
                {
                    $arrayResultadoSubred = $this->servicioTecnico
                                            ->getIpDisponiblePorServicio(array("objServicio"    => $objServicio,
                                                                               "strCodEmpresa"  => $strCodEmpresa,
                                                                               "strUsrCreacion" => $strUsrCreacion,
                                                                               "strIpCreacion"  => $strIpCreacion));
                    if($arrayResultadoSubred['status'] == "OK")
                    {
                        $objSubredServicioAdd = $arrayResultadoSubred['objSubred'];
                        $strIpServicioAdd     = $arrayResultadoSubred['strIpServicio'];
                        //Se deja en estado Reservada la IP que fue asignada para la camara
                        $objInfoIp = new InfoIp();
                        $objInfoIp->setIp($strIpServicioAdd);
                        $objInfoIp->setSubredId($objSubredServicioAdd->getId());
                        $objInfoIp->setServicioId($objServicio->getId());
                        $objInfoIp->setMascara($objSubredServicioAdd->getMascara());
                        $objInfoIp->setFeCreacion(new \DateTime('now'));
                        $objInfoIp->setUsrCreacion($strUsrCreacion);
                        $objInfoIp->setIpCreacion($strIpCreacion);
                        $objInfoIp->setEstado("Reservada");
                        $objInfoIp->setTipoIp("LAN");
                        $objInfoIp->setVersionIp("IPV4");
                        $this->emInfraestructura->persist($objInfoIp);
                        $this->emInfraestructura->flush();
                    }
                    else
                    {
                        throw new \Exception($arrayResultadoSubred['mensaje']);
                    }
                }
                //seteo historial
                $strObservacionServicio  = "Se asignaron los siguientes recursos de red: <br/><br/>";
                $strObservacionServicio .= "&#10140;<b>Subred del Servicio:</b> ".$objSubredServicioAdd->getSubred()."<br/>";
                $strObservacionServicio .= "&#10140;<b>Mascara:</b> ".$objSubredServicioAdd->getMascara()."<br/>";
                $strObservacionServicio .= "&#10140;<b>Gateway:</b> ".$objSubredServicioAdd->getGateway()."<br/>";
                $strObservacionServicio .= "&#10140;<b>IP del Servicio:</b> ".$strIpServicioAdd."<br/>";
                if($objServicio->getProductoId()->getNombreTecnico() == "SAFECITYDATOS")
                {
                    $strObservacionServicio .= "&#10140;<b>Vlan:</b> ".$objDetalleEleVlan->getDetalleValor()."<br/>";
                    $strObservacionServicio .= "&#10140;<b>Vrf:</b> ".$objPersonaEmpCaractVrf->getValor()."<br/>";
                }
            }

            //Ingresar historial del servicio
            $this->servicioTecnico->ingresarServicioHistorial($objServicio, "Asignada", $strObservacionServicio,
                                                              $strUsrCreacion, $strIpCreacion);
            //Generacion de Login Auxiliar al Servicio
            $this->servicioTecnico->generarLoginAuxiliar($objServicio->getId());
            //Ingresar como seguimiento en la tarea de instalacion la IP asignada para la SAFE VIDEO ANALYTICS CAM
            if($objServicio->getProductoId()->getNombreTecnico() != "SAFECITYSWPOE" && !empty($intIdDetalleSolicitudInstalacion))
            {
                $objDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                              ->findOneBy(array('detalleSolicitudId' => $intIdDetalleSolicitudInstalacion));

                if(is_object($objDetalle))
                {
                    $arrayParametrosHist                            = array();
                    $arrayParametrosHist["strCodEmpresa"]           = $strCodEmpresa;
                    $arrayParametrosHist["strUsrCreacion"]          = $strUsrCreacion;
                    $arrayParametrosHist["strIpCreacion"]           = $strIpCreacion;
                    $arrayParametrosHist["strOpcion"]               = "Seguimiento";
                    $arrayParametrosHist["intIdDepartamentoOrigen"] = $intIdDepartamento;
                    $arrayParametrosHist["intDetalleId"]            = $objDetalle->getId();
                    $arrayParametrosHist["strObservacion"]          = $strObservacionServicio;
                    $arrayParametrosHist["strEstadoActual"]         = "Asignada";
                    $this->serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);
                }
            }

            //se guardan los cambios
            if ($this->emInfraestructura->getConnection()->isTransactionActive())
            {
                $this->emInfraestructura->getConnection()->commit();
                $this->emInfraestructura->getConnection()->close();
            }
            if ($this->emcom->getConnection()->isTransactionActive())
            {
                $this->emcom->getConnection()->commit();
                $this->emcom->getConnection()->close();
            }
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->commit();
                $this->emSoporte->getConnection()->close();
            }

            //setear respuesta
            $arrayRespuesta["status"]  = "OK";
            $arrayRespuesta["mensaje"] = "Se generaron los recursos de red del servicio.";
        }
        catch(\Exception $ex)
        {
            //setear respuesta
            $arrayRespuesta["status"]  = "ERROR";
            $arrayRespuesta["mensaje"] = $ex->getMessage();
            //rollback
            if ($this->emInfraestructura->getConnection()->isTransactionActive())
            {
                $this->emInfraestructura->getConnection()->rollback();
                $this->emInfraestructura->getConnection()->close();
            }
            if ($this->emcom->getConnection()->isTransactionActive())
            {
                $this->emcom->getConnection()->rollback();
                $this->emcom->getConnection()->close();
            }
            if ($this->emSoporte->getConnection()->isTransactionActive())
            {
                $this->emSoporte->getConnection()->rollback();
                $this->emSoporte->getConnection()->close();
            }
        }
        return $arrayRespuesta;
    }

    /**
     * Funcion encargada de relacionar un tipo de servicio con la camara
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 21-05-2021
     *
     * @param $arrayParametros: [ intEmpresaId          => codigo de la empresa,
     *                            intServicioOrigenId   => servicio origen,
     *                            intIdServicioCamara   => servicio destino,
     *                            strTipoDeServicio     => tipo de servicio: CAMARA, 
     *                            strUsrCreacion        => usuario de creacion,
     *                            strIpCreacion         => ip del cliente,
     *                            strDepartamentoOrigen => departamento de la sesion ]
     *
     * @return $arrayRespuesta  => [ status  => OK u ERROR
     *                               mensaje => mensaje de respuesta ]
     */
    public function relacionarServicioACamara($arrayParametros)
    {
        $arrayRespuesta       = array();
        $strEstatus           = "OK";
        $strMensaje           = "";
        
        $this->emcom->getConnection()->beginTransaction();
        $this->emInfraestructura->getConnection()->beginTransaction();
        $this->emSoporte->getConnection()->beginTransaction();        
        
        try
        {                
            //Se obtiene el nombre del parametro con el cual se va asociar el servicio mascarilla con la camara
            $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                              ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                       'INFRAESTRUCTURA',
                                                       'PARAMETROS',
                                                       'TIPO_SERVICIO',
                                                       $arrayParametros["strTipoDeServicio"],
                                                       '',
                                                       '',
                                                       '',
                                                       '',
                                                       $arrayParametros["intEmpresaId"]);

            if(!empty($arrayParametrosDet["valor1"]) && isset($arrayParametrosDet["valor1"]))
            {
                $strNombreCaracteristica = $arrayParametrosDet["valor2"];
            }
            
            if(!empty($arrayParametros["intServicioOrigenId"]))
            {
                $objInfoServicioOrigen = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                     ->find($arrayParametros["intServicioOrigenId"]);
            }             

            //Se obtiene el objeto servicio camara
            if(!empty($arrayParametros["intIdServicioCamara"]))
            {
                $objInfoServicioCamara = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                     ->find($arrayParametros["intIdServicioCamara"]);
            }        

            if(!empty($strNombreCaracteristica) && is_object($objInfoServicioCamara) && is_object($objInfoServicioOrigen))
            {
                $strLoginAux = $objInfoServicioCamara->getLoginAux();
                $strMensaje  = "Tipo: ".$arrayParametros["strTipoDeServicio"]." , Asociado con exito a la camara: ".$strLoginAux;

                //se agrega relacion a la camara
                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objInfoServicioCamara,
                                                                               $objInfoServicioCamara->getProductoId(),
                                                                               $strNombreCaracteristica,
                                                                               $arrayParametros["intServicioOrigenId"],
                                                                               $arrayParametros["strUsrCreacion"]);
                //se agrega relacion a la mascarilla
                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objInfoServicioOrigen,
                                                                               $objInfoServicioOrigen->getProductoId(),
                                                                               $strNombreCaracteristica,
                                                                               $arrayParametros["intIdServicioCamara"],
                                                                               $arrayParametros["strUsrCreacion"]);

                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($objInfoServicioOrigen);
                $objServicioHistorial->setObservacion("Servicio asociado a la camara: ".$strLoginAux);
                $objServicioHistorial->setIpCreacion($arrayParametros["strIpCreacion"]);
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setUsrCreacion($arrayParametros["strUsrCreacion"]);
                $objServicioHistorial->setEstado($objInfoServicioOrigen->getEstado());
                $this->emcom->persist($objServicioHistorial);
                $this->emcom->flush();     
                
                $objServicioHistorial2 = new InfoServicioHistorial();
                $objServicioHistorial2->setServicioId($objInfoServicioCamara);
                $objServicioHistorial2->setObservacion("Se agrego un: ".$arrayParametros["strTipoDeServicio"]);
                $objServicioHistorial2->setIpCreacion($arrayParametros["strIpCreacion"]);
                $objServicioHistorial2->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial2->setUsrCreacion($arrayParametros["strUsrCreacion"]);
                $objServicioHistorial2->setEstado($objInfoServicioCamara->getEstado());
                $this->emcom->persist($objServicioHistorial2);
                $this->emcom->flush(); 

                if($objInfoServicioCamara->getEstado() == "Activo")
                {
                    //Se crea la tarea para la configuracion de la caracteristica para la camara
                    $this->activarService->envioTareaServicioMascarilla($arrayParametros);   
                }
            }

            $this->emcom->commit();
            $this->emInfraestructura->commit();
            $this->emSoporte->commit();            
            
            $strEstatus = "OK";
        }
        catch(\Exception $ex)
        {
            $this->emcom->rollback();
            $this->emInfraestructura->rollback();
            $this->emSoporte->rollback();            
            
            $strEstatus = "ERROR";
            $strMensaje = "Ocurrió un error en asociar el servicio con la camara: ".$strLoginAux.", Por favor consultar con Sistemas.";            
        }

        $arrayRespuesta["status"]    = $strEstatus;
        $arrayRespuesta["respuesta"] = $strMensaje;

        return $arrayRespuesta;
    }        
    

    /**
     * Funcion que se encarga de ejecutar acciones sobre el servicio y solicitud relacionadas a los servicios adicionales de un preferencial,
     * EJ: CAMARAS-SAFECITY 
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 07-05-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 01-08-2022 - Se agrega validación para obtener la tarea de instalación de los servicios adicionales.
     *
     * @param $arrayParametros: [ strOpcion                              => 'Rechazada'
     *                            strObservacion                         => observacion ingresada por el usuario
     *                            intIdMotivo                            => id del motivo ingresado por el usuario
     *                            objRequest                             => objeto request que contiene datos de la sesion
     *                            objSession                             => objeto sesion
     *                            strUsrCreacion                         => usuario de creacion
     *                            strIpCreacion                          => ip de creacion
     *                            strOjServicioPreferencial              => id_servicio preferencial
     *                            strPrefijoEmpresa                      => prefijo de la empresa
     *                            strCodEmpresa                          => codigo de la empresa
     *                            arrayParametrosAsignaciorPlanificacion => arrayParamtrosAsignarResponsable ]
     *
     * @return String $arrayRespuesta [ strEstatus => estatus de la accion ejecutada,
     *                                  strMensaje => mensaje de respuesta ]
     */
    public function actualizarServiciosYSolicitudesAdicionales($arrayParametros)
    {
        $arrayRespuesta     = array();
        $arrayParametrosAsi = $arrayParametros["arrayParametrosAsignaciorPlanificacion"];

        if(is_object($arrayParametros["strOjServicioPreferencial"]))
        {
            //seteo variable orden trabajo
            $objOrdenTrabajoServ    = $arrayParametros["strOjServicioPreferencial"]->getOrdenTrabajoId();
            //seteo variable
            $objServicioPrincipal   = $arrayParametros["strOjServicioPreferencial"];
            $arrayParametrosDetPoe  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                              ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                       'INFRAESTRUCTURA',
                                                       'PARAMETROS',
                                                       'VALIDAR RELACION SERVICIO ADICIONAL CON DATOS SAFECITY',
                                                       $objServicioPrincipal->getProductoId()->getId(),
                                                       '',
                                                       '',
                                                       '',
                                                       '',
                                                       $arrayParametros["strCodEmpresa"]);
            if(!empty($arrayParametrosDetPoe) && isset($arrayParametrosDetPoe["valor5"]) && $arrayParametrosDetPoe["valor5"] == "SWITCHPOE")
            {
                $objCaractServicioPrincipal = $this->serviceGeneral->getServicioProductoCaracteristica($objServicioPrincipal,
                                                        'RELACION_SERVICIOS_GPON_SAFECITY',$objServicioPrincipal->getProductoId());
                if(is_object($objCaractServicioPrincipal))
                {
                    $objServicioPrincipal = $this->emcom->getRepository('schemaBundle:InfoServicio')->find($objCaractServicioPrincipal->getValor());
                    if(!is_object($objServicioPrincipal))
                    {
                        $objServicioPrincipal = $arrayParametros["strOjServicioPreferencial"];
                    }
                }
            }
            /***OBTENER LOS SERVICIOS ADICIONALES***/
            $arrayParServAdd = array("intIdProducto"      => $objServicioPrincipal->getProductoId()->getId(),
                                     "intIdServicio"      => $objServicioPrincipal->getId(),
                                     "strNombreParametro" => 'CONFIG_PRODUCTO_DATOS_SAFE_CITY',
                                     "strUsoDetalles"     => 'AGREGAR_SERVICIO_ADICIONAL');

            $arrayProdCaracConfProAdd  = $this->emcom->getRepository('schemaBundle:InfoServicioProdCaract')
                                                     ->getServiciosPorProdAdicionalesSafeCity($arrayParServAdd);

            if($arrayProdCaracConfProAdd['status'] == 'OK' && count($arrayProdCaracConfProAdd['result']) > 0)
            {
                foreach($arrayProdCaracConfProAdd['result'] as $arrayServicioConfProAdd)
                {
                    $objInfoServicioAdicional = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                            ->findOneBy(array("id"             => $arrayServicioConfProAdd['idServicio'],
                                                                              "ordenTrabajoId" => $objOrdenTrabajoServ,
                                                                              "estado"         => $arrayParametros["strEstadoServicio"]));

                    if(is_object($objInfoServicioAdicional)
                       && $objInfoServicioAdicional->getId() != $arrayParametros["strOjServicioPreferencial"]->getId())
                    {
                        //Se actualiza el servicio
                        $objInfoServicioAdicional->setEstado($arrayParametros["strOpcion"]);
                        $this->emcom->persist($objInfoServicioAdicional);
                        $this->emcom->flush();

                        if($arrayParametros["strOpcion"] != "Replanificada" && $arrayParametros["strOpcion"] != "Detenido")
                        {
                            $arrayParametros['intIdServicio'] = $objInfoServicioAdicional->getId();
                            //Se procede a eliminar todas las caracteristicas SERVICIO_MISMA_ULTIMA_MILLA que dependan de este servicio
                            $this->serviceGeneral->eliminarDependenciaMismaUM($objInfoServicioAdicional,
                                                                              $arrayParametros["strUsrCreacion"],
                                                                              $arrayParametros["strIpCreacion"]);

                            ///Se eliminan las características asociadas al servicio
                            $arraySpcServicioAdi = $this->emcom->getRepository('schemaBundle:InfoServicioProdCaract')
                                                               ->findBy(array("servicioId"    => $objInfoServicioAdicional->getId(),
                                                                              "estado"        => "Activo"));

                            foreach($arraySpcServicioAdi as $objSpcServicioAdi)
                            {
                                $objSpcServicioAdi->setEstado('Eliminado');
                                $objSpcServicioAdi->setUsrUltMod($arrayParametros["strUsrCreacion"]);
                                $objSpcServicioAdi->setFeUltMod(new \DateTime('now'));
                                $this->emcom->persist($objSpcServicioAdi);
                                $this->emcom->flush();
                            }
                        }

                        //Se ingresa historial del servicio
                        $objServicioHistorial = new InfoServicioHistorial();
                        $objServicioHistorial->setServicioId($objInfoServicioAdicional);
                        $objServicioHistorial->setMotivoId($arrayParametros["intIdMotivo"]);

                        if($arrayParametros["strOpcion"] == "Replanificada") 
                        {
                            $strObservacionServicio     = $arrayParametros["strObservacion"];
                            $strObservacionServicio    .= "<br>";
                            $strFechaReplanificada      = $arrayParametros["strFechaPlanificacion"][2] . "/" .
                                                       $arrayParametros["strFechaPlanificacion"][1] . "/" . 
                                                       $arrayParametros["strFechaPlanificacion"][0];

                            $arrayHoraInicioServicio = explode(':', $arrayParametros["strHoraInicio"][1]);
                            $arrayHoraFinServicio    = explode(':', $arrayParametros["strHoraFin"][1]);

                            $strObservacionServicio .= "<br>Fecha Replanificada: " . $strFechaReplanificada;
                            $strObservacionServicio .= "<br>Hora Inicio: " . $arrayHoraInicioServicio[0] . ":" . $arrayHoraInicioServicio[1];
                            $strObservacionServicio .= "<br>Hora Fin: " . $arrayHoraFinServicio[0] . ":" . $arrayHoraFinServicio[1];
                            $strObservacionServicio .= "<br><br>";

                            $objServicioHistorial->setObservacion($strObservacionServicio);
                        }
                        else
                        {
                            $objServicioHistorial->setObservacion($arrayParametros["strObservacion"]);
                        }

                        $objServicioHistorial->setIpCreacion($arrayParametros["strIpCreacion"]);
                        $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                        $objServicioHistorial->setUsrCreacion($arrayParametros["strUsrCreacion"]);
                        $objServicioHistorial->setEstado($arrayParametros["strOpcion"]);
                        $this->emcom->persist($objServicioHistorial);
                        $this->emcom->flush();

                        //Se consulta la solicitud de instalacion del servicio adicional
                        $objTipoSolicitudPlanficacion = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                  ->findOneBy(array("descripcionSolicitud" => "SOLICITUD PLANIFICACION",
                                                                                    "estado"               => "Activo"));

                        if (is_object($objTipoSolicitudPlanficacion))
                        {
                            $objSolicitudPlanficacion = $this->emcom->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                    ->findOneBy(array("servicioId"      => $objInfoServicioAdicional->getId(),
                                                                                      "tipoSolicitudId" => $objTipoSolicitudPlanficacion->getId()),
                                                                                array('id'              => 'DESC'));
                            if (is_object($objSolicitudPlanficacion))
                            {
                                if($arrayParametros["strOpcion"] == "Detenido")
                                {
                                    $objEntityRangos = $this->emcom->getRepository('schemaBundle:InfoCupoPlanificacion')
                                                                   ->findBy(array('solicitudId' => $objSolicitudPlanficacion->getId()));

                                    foreach ($objEntityRangos as $idxEntity)
                                    {
                                        $objInfoCupoPlanificacion = $this->emcom->getRepository('schemaBundle:InfoCupoPlanificacion')
                                                                                ->find($idxEntity->getId());

                                        $objInfoCupoPlanificacion->setSolicitudId(null);
                                        $objInfoCupoPlanificacion->setCuadrillaId(null);
                                        $this->emcom->persist($objInfoCupoPlanificacion);
                                        $this->emcom->flush();
                                    }
                                }

                                //Se actualiza el estado de la solicitud
                                $objSolicitudPlanficacion->setMotivoId($arrayParametros["intIdMotivo"]);

                                if($arrayParametros["strOpcion"] == 'Replanificada' || $arrayParametros["strOpcion"] == 'Detenido')
                                {
                                    if($arrayParametros["strOpcion"] == 'Replanificada' )
                                    {
                                        $strMensajeObservacion = "Replanificada:";
                                    }
                                    if($arrayParametros["strOpcion"] == 'Detenido' )
                                    {
                                        $strMensajeObservacion = "Detenido:";
                                    }

                                    $strObservacionSolicitud = $objSolicitudPlanficacion->getEstado().': '
                                                              .$objSolicitudPlanficacion->getObservacion()."\n".$strMensajeObservacion
                                                              .$arrayParametros["strObservacion"];

                                    $objSolicitudPlanficacion->setObservacion($strObservacionSolicitud);
                                }
                                else
                                {
                                    $objSolicitudPlanficacion->setObservacion($arrayParametros["strObservacion"]);
                                }

                                $objSolicitudPlanficacion->setEstado($arrayParametros["strOpcion"]);
                                $objSolicitudPlanficacion->setUsrRechazo($arrayParametros["strUsrCreacion"]);
                                $objSolicitudPlanficacion->setFeRechazo(new \DateTime('now'));
                                $this->emcom->persist($objSolicitudPlanficacion);
                                $this->emcom->flush();

                                //Se actualiza el historial de la solicitud
                                $objDetalleSolicitudHistorial = new InfoDetalleSolHist();
                                $objDetalleSolicitudHistorial->setDetalleSolicitudId($objSolicitudPlanficacion);

                                if($arrayParametros["strOpcion"] == 'Replanificada')
                                {
                                    $objFechaInicioReplanificacionSql=date("Y/m/d G:i:s", strtotime($arrayParametros["strFechaPlanificacion"][2]."-".
                                                                                                    $arrayParametros["strFechaPlanificacion"][1]."-".
                                                                                                    $arrayParametros["strFechaPlanificacion"][0]." ".
                                                                                                    $arrayParametros["strHoraInicio"][1]));

                                    $objFechaFinReplanificacionSql = date("Y/m/d G:i:s", strtotime($arrayParametros["strFechaPlanificacion"][2]."-".
                                                                                                   $arrayParametros["strFechaPlanificacion"][1]."-".
                                                                                                   $arrayParametros["strFechaPlanificacion"][0]." ".
                                                                                                   $arrayParametros["strHoraFin"][1]));

                                    $objDetalleSolicitudHistorial->setFeIniPlan(new \DateTime($objFechaInicioReplanificacionSql));
                                    $objDetalleSolicitudHistorial->setFeFinPlan(new \DateTime($objFechaFinReplanificacionSql));
                                }

                                $objDetalleSolicitudHistorial->setObservacion($arrayParametros["strObservacion"]);
                                $objDetalleSolicitudHistorial->setMotivoId($arrayParametros["intIdMotivo"]);
                                $objDetalleSolicitudHistorial->setIpCreacion($arrayParametros["strIpCreacion"]);
                                $objDetalleSolicitudHistorial->setFeCreacion(new \DateTime('now'));
                                $objDetalleSolicitudHistorial->setUsrCreacion($arrayParametros["strUsrCreacion"]);
                                $objDetalleSolicitudHistorial->setEstado($arrayParametros["strOpcion"]);
                                $this->emcom->persist($objDetalleSolicitudHistorial);
                                $this->emcom->flush();
                            }

                            //Rechazar y Cancelar tareas
                            $arrayParametrosTarea                 = array();
                            $arrayParametrosTarea['cargarTiempo'] = "cliente";
                            $arrayParametrosTarea['esSolucion']   = "N";
                            $arrayParametrosTarea['estado']       = $arrayParametros["strOpcion"];
                            $arrayParametrosTarea['observacion']  = "La Orden de Trabajo cambia a estado: ".$arrayParametros["strOpcion"];

                            $arrayParametrosReasignacion['idEmpresa']             = $arrayParametros['strCodEmpresa'];
                            $arrayParametrosReasignacion['prefijoEmpresa']        = $arrayParametros['strPrefijoEmpresa'];
                            $arrayParametrosReasignacion['motivo']                = $arrayParametros['strObservacion'];
                            $arrayParametrosReasignacion['departamento_asignado'] = $arrayParametros['objSession']->get('idDepartamento');
                            $arrayParametrosReasignacion['id_departamento']       = $arrayParametros['objSession']->get('idDepartamento');
                            $arrayParametrosReasignacion['empleado_asignado']     = $arrayParametros['objSession']->get('id_empleado');
                            $arrayParametrosReasignacion['user']                  = $arrayParametros["strUsrCreacion"];
                            $arrayParametrosReasignacion['empleado_logueado']     = $arrayParametros["strUsrCreacion"];
                            $arrayParametrosReasignacion['clientIp']              = $arrayParametros["strIpCreacion"];

                            $arrayDetalles = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                                             ->findBy(array('detalleSolicitudId' => $objSolicitudPlanficacion->getId()));

                            if($arrayDetalles)
                            {
                                foreach($arrayDetalles as $idxDetalle)
                                {
                                    if($arrayParametros["strOpcion"] == 'Detenido')
                                    {
                                        $arrayParametrosReasignacion['id_detalle']            = $idxDetalle->getId();
                                        $arrayParametrosReasignacion['fecha_ejecucion']       = (new \DateTime('now'))->format('Y-m-d H:i');

                                        $arrayResultadoReasignacion  = $this->serviceSoporte->reasignarTarea($arrayParametrosReasignacion);

                                        if(!$arrayResultadoReasignacion["success"])
                                        {
                                            $strRespuesta = "Ciertas tareas no pudieron ser reasignadas. Favor notificar a Sistemas.";

                                            $this->emcom->getConnection()->rollback();
                                            $this->emComunicacion->getConnection()->rollback();

                                            return $strRespuesta;
                                        }
                                    }

                                    $strRespuestaTarea = $this->serviceSoporte->cambiarEstadoTarea($idxDetalle,
                                                                                                   null,
                                                                                                   $arrayParametros["objRequest"],
                                                                                                   $arrayParametrosTarea);

                                    if($strRespuestaTarea != "OK")
                                    {
                                        $strRespuesta = "Ciertas tareas no pudieron ser rechazadas. Favor notificar a Sistemas.";

                                        $this->emcom->getConnection()->rollback();
                                        $this->emComunicacion->getConnection()->rollback();

                                        return $strRespuesta;
                                    }

                                    if($arrayParametros["strOpcion"] != 'Replanificada' && $arrayParametros["strOpcion"] != 'Detenido' )
                                    {
                                        //Cambiar estado a Cancelada
                                        $arrayParametrosTarea['observacion']     = "Cancelación automática por rechazo de Orden de Trabajo";
                                        $arrayParametrosTarea['estado']          = "Cancelada";

                                        $strRespuestaCancelacionTarea = $this->serviceSoporte->cambiarEstadoTarea($idxDetalle,
                                                                                                                  null,
                                                                                                                  $arrayParametros["objRequest"],
                                                                                                                  $arrayParametrosTarea);
                                        if($strRespuestaCancelacionTarea != "OK")
                                        {
                                            $strRespuesta = "Ciertas tareas no pudieron ser canceladas. Favor notificar a Sistemas.";

                                            $this->emcom->getConnection()->rollback();
                                            $this->emComunicacion->getConnection()->rollback();

                                            return $strRespuesta;
                                        }
                                    }
                                }
                            }
                        }

                        if(is_object($objSolicitudPlanficacion) && is_object($objServicioHistorial) &&
                            $arrayParametros["strOpcion"] == 'Replanificada')
                        {
                            $arrayParametrosAsi['serviceInfoServicio']   = $this->serviceInfoServicio;
                            $arrayParametrosAsi['intIdFactibilidad']     = $objSolicitudPlanficacion->getId();
                            $arrayParametrosAsi['objServicioHistorial']  = $objServicioHistorial;
                            $arrayParametrosAsi['boolEsReplanificacion'] = true;
                            //cambiar tarea del servicio
                            $arrayParamResponGpon   = explode("|", $arrayParametrosAsi['strParamResponsables']);
                            $arrayParDetCamSafeCity = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne('NUEVA_RED_GPON_TN',
                                                                     'COMERCIAL',
                                                                     '',
                                                                     'TAREA DE INSTALACION DEL SERVICIO',
                                                                     $objInfoServicioAdicional->getProductoId()->getId(),
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     $arrayParametros["strCodEmpresa"]);
                            if( isset($arrayParDetCamSafeCity) && !empty($arrayParDetCamSafeCity)
                                && isset($arrayParDetCamSafeCity['valor3'])&& !empty($arrayParDetCamSafeCity['valor3']) )
                            {
                                //obtengo la tarea
                                $objAdmiTareaGpon = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')
                                                        ->findOneBy(array("nombreTarea" => $arrayParDetCamSafeCity['valor3'],
                                                                          "estado"      => "Activo"));
                                if(is_object($objAdmiTareaGpon))
                                {
                                    $intIdTareaGpon = $objAdmiTareaGpon->getId();
                                    //verifico los responsables
                                    foreach($arrayParamResponGpon as $keyDet => $arrayDetResponGpon)
                                    {
                                        $arrayVariablesRespon = explode("@@", $arrayDetResponGpon);
                                        if(is_array($arrayVariablesRespon) && count($arrayVariablesRespon) > 0
                                           && $arrayVariablesRespon[0] != $intIdTareaGpon)
                                        {
                                            $arrayVariablesRespon[0] = $intIdTareaGpon;
                                            $arrayDetResponGpon      = implode('@@',$arrayVariablesRespon);
                                            $arrayParamResponGpon[$keyDet] = $arrayDetResponGpon;
                                            $arrayParametrosAsi['strParamResponsables'] = implode("|", $arrayParamResponGpon);
                                        }
                                    }
                                }
                            }
                            //planificar servicio
                            $arrayResultado = $this->planificarService->asignarPlanificacion($arrayParametrosAsi);
                        }
                    }
                }
            }
        }

        $arrayRespuesta["strEstatus"] = "OK";
        $arrayRespuesta["strMensaje"] = "OK";

        return $arrayRespuesta;
    }


    /**
     * Funcion que se encarga de validar el limite maximo de camaras safecity por punto.
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 12-05-2021
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.1 23-06-2022 - Se valida el límite de cámaras para los servicios INTERNET VPNoGPON.
     *
     * @param $arrayParametros: [ strCodEmpresa    => codigo de la empresa,
     *                            intIdProducto    => id del producto,
     *                            intIdPunto       => id del punto ]
     *
     * @return $arrayRespuesta  => [ status  => OK u ERROR
     *                               mensaje => mensaje de respuesta ]
     */
    public function validarLimiteCamarasSafecityPorPunto($arrayParametros)
    {
        $arrayRespuesta = array();
        try
        {
            $strValorMaximoPorPunto = "";
            //Se obtiene el valor maximo de camaras por punto y codigo de producto DATOS SAFECITY
            $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                              ->getOne('PARAMETROS PROYECTO GPON SAFECITY',
                                                       'INFRAESTRUCTURA',
                                                       'PARAMETROS',
                                                       'MAXIMO_CAMARAS_POR_PUNTO',
                                                       '',
                                                       '',
                                                       $arrayParametros["intIdProducto"],
                                                       '',
                                                       '',
                                                       $arrayParametros["strCodEmpresa"]);

            if(!empty($arrayParametrosDet["valor1"]) && isset($arrayParametrosDet["valor1"]))
            {
                $strValorMaximoPorPunto    = $arrayParametrosDet["valor1"];
            }

            //obtener estados no permitidos
            $arrayEstadosNoPermitidos = array();
            $arrayParametrosEstados   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->get('NUEVA_RED_GPON_TN',
                                                                            'COMERCIAL',
                                                                            '',
                                                                            '',
                                                                            'ESTADOS_SERVICIOS_NO_PERMITIDOS_FLUJO',
                                                                            '',
                                                                            '',
                                                                            '',
                                                                            '');
            foreach($arrayParametrosEstados as $arrayDetalles)
            {
                $arrayEstadosNoPermitidos[] = $arrayDetalles['valor2'];
            }

            //obtengo los servicios
            $arrayServicios = $this->emcom->getRepository("schemaBundle:InfoServicio")
                                                    ->createQueryBuilder('s')
                                                    ->where("s.puntoId = :puntoId")
                                                    ->andWhere("s.productoId = :productoId")
                                                    ->andWhere("s.estado NOT IN (:estados)")
                                                    ->setParameter('puntoId', $arrayParametros["intIdPunto"])
                                                    ->setParameter('productoId', $arrayParametros["intIdProducto"])
                                                    ->setParameter('estados', array_values($arrayEstadosNoPermitidos))
                                                    ->getQuery()
                                                    ->getResult();

            if(count($arrayServicios) >= $strValorMaximoPorPunto)
            {
                $arrayRespuesta["status"]    = "ERROR";
                $arrayRespuesta["respuesta"] = "Ya se alcanzo el límite máximo de CAMARAS por punto";
            }
            else
            {
                $arrayRespuesta["status"]    = "OK";
                $arrayRespuesta["respuesta"] = "OK";
            }
        }
        catch (\Exception $ex)
        {
            $arrayRespuesta["status"]    = "ERROR";
            $arrayRespuesta["respuesta"] = "ERROR";
        }

        return $arrayRespuesta;
    }

    /**
     * Función para generar una tarea interna enviando parámetros necesarios.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 15-08-2019 | Versión Inicial.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.1 07-01-2020 | Se agrega funcionalidad que permite generar una tarea al departamento de Radio
     *                           cuando el servicio es Alquiler de Equipos.
     * 
     * @param $arrayParametros:
     *
     * entityPunto        ➜ Representa una entidad de un punto.
     * entityServicio     ➜ Representa una entidad de un servicio.
     * idEmpresa          ➜ Representa el id de una empresa.
     * prefijoEmpresa     ➜ Representa un string que contiene el prefijo de la empresa.
     * clientIp           ➜ Representa un string que contiene la IP del request.
     * nombreProceso      ➜ Representa un string que contiene el nombre del proceso.
     * nombreTarea        ➜ Representa un string que contiene el nombre de la tarea.
     * observacion        ➜ Representa un string que contiene el una observación.
     * nombreDepartamento ➜ Representa un string que contiene el nombre del departamento de la petición.
     * comentario         ➜ Representa un string que contiene un comentario.
     * estado             ➜ Representa un string que contiene un estado.
     *
     * @throws \Exception
     */

    public function generarTareaInterna($arrayParametros)
    {
        $entityPunto            = $arrayParametros['entityPunto'];
        $entityServicio         = $arrayParametros['entityServicio'];
        $intIdEmpresa           = $arrayParametros['idEmpresa'];
        $strPrefijoEmpresa      = $arrayParametros['prefijoEmpresa'];
        $strClientIp            = $arrayParametros['clientIp'];
        $strNombreProceso       = $arrayParametros['nombreProceso'];
        $strNombreTarea         = $arrayParametros['nombreTarea'];
        $strObservacion         = $arrayParametros['observacion'];
        $strNombreDepartamento  = $arrayParametros['nombreDepartamento'];
        $strComentario          = $arrayParametros['comentario'];
        $strEstado              = $arrayParametros['estado'];


        $entitySector           = $this->emcom->getRepository('schemaBundle:AdmiSector')
                                              ->findOneBy(array('id'=> $entityPunto->getSectorId()));

        $entityParroquia        = $this->emcom->getRepository('schemaBundle:AdmiParroquia')
                                              ->findOneBy(array('id'=>$entitySector->getParroquiaId()));

        $entityCanton           = $this->emcom->getRepository('schemaBundle:AdmiCanton')
                                              ->findOneBy(array('id'=>$entityParroquia->getCantonId()));

        $objCreationUser        = $this->emcom->getRepository('schemaBundle:InfoPersona')
                                              ->findOneBy(array('login'=>$entityServicio->getUsrCreacion()));



        $entityInfoPerEmpRol    = $this->emcom->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                              ->findOneBy(array(
                                                  'id'              =>  $entityPunto->getPersonaEmpresaRolId(),
                                                  'empresaRolId'    =>  1,
                                                  'estado'          =>  'Activo'));

        $entityCliente          = $this->emcom->getRepository('schemaBundle:InfoPersona')
                                              ->findOneBy(array('id'=>$entityInfoPerEmpRol->getPersonaId()));

        $objInfoDetSol          = $this->emcom->getRepository('schemaBundle:InfoDetalleSolicitud')
                                              ->findOneBy(array('servicioId'=>$entityServicio->getId()));

        $objProceso = $this->emSoporte->getRepository("schemaBundle:AdmiProceso")
                                      ->findOneBy(array('nombreProceso'=>$strNombreProceso));

        $objTarea   = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')
                                      ->findOneBy(array(
                                          'nombreTarea'   => $strNombreTarea,
                                          'estado'        => 'Activo',
                                          'procesoId'     =>  $objProceso->getId()
                                      ));

        /*Valido si el servicio es Wifi Alquiler de equipos.*/
        if($entityServicio->getProductoId()->getDescripcionProducto() == 'WIFI Alquiler Equipos')
        {
            /*Obtengo parámetros que contienen los coordinadores por regiones.*/
            $arrayParamCoordinadores = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                ->getOne('COORDINADORES_RADIO',
                    'TECNICO',
                    '',
                    'PARAMETROS_COORDINADORES_RADIO',
                    '',
                    '',
                    '',
                    '',
                    '',
                    '10',
                    '');

            /*Se valida que respuesta no este vacía.*/
            if(!empty($arrayParamCoordinadores) && is_array($arrayParamCoordinadores) && !empty($arrayParamCoordinadores['valor1']))
            {
                /*Decodifico el valor1 a un objeto de PHP.*/
                $arrayCoordinadoresRadio = json_decode($arrayParamCoordinadores['valor1'], true);

                /*valido que el objeto este correcto.*/
                if ($arrayCoordinadoresRadio)
                {
                    /*En base a la region del servicio defino al jefe responsable.*/
                    if($entityCanton->getRegion() == 'R1')
                    {
                        $arrayJefeResponsable = $arrayCoordinadoresRadio['R1'];
                    } elseif ($entityCanton->getRegion() == 'R2')
                    {
                        $arrayJefeResponsable = $arrayCoordinadoresRadio['R2'];
                    }
                }
            }
        }

        $arrayParamsTarea = array(
            'strIdEmpresa'          => $intIdEmpresa,
            'strPrefijoEmpresa'     => $strPrefijoEmpresa,
            'strNombreTarea'        => $objTarea->getNombreTarea(),
            'strObservacion'        => $strObservacion,
            'strNombreDepartamento' => $strNombreDepartamento,
            'strCiudad'             => $entityCanton->getNombreCanton(),
            'strEmpleado'           => $objCreationUser->getNombres().' '.$objCreationUser->getApellidos() ,
            'strUsrCreacion'        => $objCreationUser->getLogin(),
            'strIp'                 => $strClientIp,
            'strOrigen'             => 'WEB-TN',
            'strLogin'              => $entityPunto->getLogin(),
            'intPuntoId'            => $entityPunto->getId(),
            'strNombreCliente'      => $entityCliente->getNombres() ? $entityCliente->getNombres().' '.$entityCliente->getApellidos() :
                                       $entityCliente->getRazonSocial(),
            'objDetalleSolicitud'   => $objInfoDetSol,
            'strRegion'             => $entityCanton->getRegion(),
            'strValidacionTags'     => 'NO'
        );

        /*Si la variable esta definida, la agrego al arreglo de parámetros.*/
        if(isset($arrayJefeResponsable))
        {
            $arrayParamsTarea['arrayJefeResponsable'] = $arrayJefeResponsable;
        }

        $strNumeroTarea = $this->serviceSoporte->ingresarTareaInterna($arrayParamsTarea);

        if ($strNumeroTarea['status'] == 'OK')
        {
            try
            {
                $strObservacion = "<b>Se generó la tarea automática: </b> #" . $strNumeroTarea['id'] . " " . $strComentario . ".<br/>";
                // Se agrega numero de tarea en el historial del servicio.
                $objServicioHistorial = new InfoServicioHistorial();
                $objServicioHistorial->setServicioId($entityServicio);
                $objServicioHistorial->setObservacion($strObservacion);
                $objServicioHistorial->setUsrCreacion($entityServicio->getUsrCreacion());
                $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objServicioHistorial->setIpCreacion($strClientIp);
                $objServicioHistorial->setEstado($strEstado);

                $this->emcom->persist($objServicioHistorial);
            }
            catch (OptimisticLockException $e)
            {
                if ($this->emcom->getConnection()->isTransactionActive())
                {
                    $this->emcom->getConnection()->rollback();
                    $this->emcom->close();
                }
                $this->utilServicio->insertError('Telcos+',
                    'InfoServicioService.generarTareaInterna',
                    "Error: <br>" . $e->getMessage(),
                    $entityServicio->getUsrCreacion(),
                    $strClientIp);
            }
        }
    }

    /**
     * getValorCaracteristicaServicio - este método obtiene la característica asociada a un Servicio
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.0 11-04-2019
     *
     * @param $array $arrayParametros[objServicio             => objeto del servicio
     *                                strNombreCaracteristica => nombre de la caracteristica ]
     *
     * @return String strValor
     */
    public function getValorCaracteristicaServicio($arrayParametros)
    {
        $objAdmiCaracteristica      = null;
        $objAdmiProdCaract          = null;
        $objInfoServicioProdCaract  = null;

        $objAdmiCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                             ->findOneBy(array("descripcionCaracteristica" => $arrayParametros["strNombreCaracteristica"],
                                                               "estado"                    => "Activo"));

        if($objAdmiCaracteristica && $arrayParametros["objServicio"])
        {
            $objAdmiProdCaract = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                             ->findOneBy(array("productoId"       => $arrayParametros["objServicio"]->getProductoId(),
                                                               "caracteristicaId" => $objAdmiCaracteristica,
                                                               "estado"           => "Activo"));
            if($objAdmiProdCaract)
            {
                $objInfoServicioProdCaract = $this->emcom->getRepository('schemaBundle:InfoServicioProdCaract')
                                                         ->findOneBy(array("servicioId"                => $arrayParametros["objServicio"],
                                                                           "productoCaracterisiticaId" => $objAdmiProdCaract,
                                                                           "estado"                    => "Activo"));
            }
        }

        return $objInfoServicioProdCaract;
    }

     /**
     * Función crearServicioProdCaractNetHome
     * Insertara el detalle de los productos que corresponden al nombre Tecnico NETHOME contenidos en el array 'arrayServiciosNetHome'
     * a nivel de caracteristicas en INFO_SERVICIO_PROD_CARACT asociados al servicio generico 'NETHOME'  que se insertara en la INFO_SERVICIO
     * Y que se obtendra por parametro y que tendra el valor total de los servicios NETHOME ingresados.    
     * Se Genera Solicitud de Facturación Unica para los servicios Nethome
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.0  14-09-2018     
     * @param $arrayParamServNetHome[
     *                                "strCodEmpresa"         => Codigo de la empresa en sesion, 
     *                                "intIdOficina"          => Id de la Oficina del usuasio en sesion,
     *                                "strUsrCreacion"        => Usuario en sesion,
     *                                "strClientIp"           => Ip del usuario en sesion,
     *                                "strTipoOrden"          => Tipo de Orden N: Nueva
     *                                "strEsVenta"            => Indica si el servicio es Venta = 'S'
     *                                "objInfoPunto"          => objeto del Punto o Login al cual se asigna el servicio
     *                                "arrayServiciosNetHome" => Array que contiene los servicios NETHOME que seran ingresados a nivel de 
     *                                                           caracteristicas en INFO_SERVICIO_PROD_CARACT
     *                             ]
     */
    public function crearServicioProdCaractNetHome($arrayParamServNetHome)
    {       
        $strCodEmpresa          = $arrayParamServNetHome["strCodEmpresa"];
        $intIdOficina           = $arrayParamServNetHome["intIdOficina"];
        $strUsrCreacion         = $arrayParamServNetHome["strUsrCreacion"];
        $strClientIp            = $arrayParamServNetHome["strClientIp"];
        $strTipoOrden           = $arrayParamServNetHome["strTipoOrden"];        
        $strEsVenta             = ( $arrayParamServNetHome["strEsVenta"]=='S' || 
                                    $arrayParamServNetHome["strEsVenta"]=='N') ? $arrayParamServNetHome["strEsVenta"] : "S";
        $arrayServiciosNetHome  = $arrayParamServNetHome["arrayServiciosNetHome"];
        $fltPrecioDetalle       = 0;
        $fltPrecioNetHome       = 0;
        $strVendedorDetalle     = '';
        $intCantidadDetalle     = 0; 
        $strObsDetallenetHome   = '';
        $arrayRespuesta["strEstado"]  = "ERROR";
        $arrayRespuesta["strMensaje"] = "Ha ocurrido un error al agregar servicios NETHOME";

        $this->emcom->getConnection()->beginTransaction();
        try
        {      
            $objPunto = $arrayParamServNetHome['objInfoPunto'];                        
            if(!is_object($objPunto))
            {
                throw new \Exception("No existe Objeto del Punto Cliente para asignar el servicio");
            }
            $objInfoPunto = $this->emcom->getRepository('schemaBundle:InfoPunto')->find($objPunto->getId());
            if(!is_object($objInfoPunto))
            {
                throw new \Exception("No existe Punto Cliente o Login para asignar el servicio");
            }
            //Obtengo el producto NETHOME generico a nivel de parametro que agrupara el totalizado de todos los servicios NETHOME ingresados.
            $arrayParametroDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                             ->getOne('PRODUCTO_NETHOME_GENERICO', 'COMERCIAL', 'AGREGAR_SERVICIO_NETHOME',
                                                      '', '', '', '', '', '', $strCodEmpresa);
            $strCodProductoNetHome    = ( isset($arrayParametroDet['valor1']) && !empty($arrayParametroDet['valor1']) )
                                        ? trim($arrayParametroDet['valor1']) : 0;
            $intCantidadNetHome       = ( isset($arrayParametroDet['valor3']) && !empty($arrayParametroDet['valor3']) )
                                        ? trim($arrayParametroDet['valor3']) : 1;
            $strCodUltimaMillaNetHome = ( isset($arrayParametroDet['valor4']) && !empty($arrayParametroDet['valor4']) )
                                        ? trim($arrayParametroDet['valor4']) : '';
            $strCaracFacturacionUnica = ( isset($arrayParametroDet['valor5']) && !empty($arrayParametroDet['valor5']) )
                                        ? trim($arrayParametroDet['valor5']) : '';
            
            $objProducto = $this->emcom->getRepository('schemaBundle:AdmiProducto')->findOneBy(array('codigoProducto' => $strCodProductoNetHome,
                                                                                                     'empresaCod'     => $strCodEmpresa));
            if(!is_object($objProducto))
            {
                throw new \Exception('No se permite el ingreso del servicio, producto no encontrado: '.$strCodProductoNetHome);
            }
            $objTipoMedio = $this->eminf->getRepository('schemaBundle:AdmiTipoMedio')
                                        ->findOneBy(array('codigoTipoMedio' => $strCodUltimaMillaNetHome,
                                                          'estado'          => 'Activo'));
             if(!is_object($objTipoMedio))
            {
                throw new \Exception('No se permite el ingreso del servicio, Ultima Milla no encontrada');
            }
            $objInfoServicio = new InfoServicio();
            $objInfoServicio->setPuntoId($objInfoPunto);
            $objInfoServicio->setTipoOrden($strTipoOrden);
            $objInfoServicio->setEsVenta($strEsVenta);
            $objInfoServicio->setCantidad($intCantidadNetHome);

            $objPadreFacturacion = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                               ->getResultadoPadreFacturacionDefault($objInfoPunto->getId());

            // Compara la clase perteneciente a la variable, por excepción será el string del error.
            if(is_object($objPadreFacturacion))
            {
                $objInfoServicio->setPuntoFacturacionId($objPadreFacturacion);
            }
            else
            {
                throw new \Exception("Cliente no posee padre de facturación, por favor verificar la información");
            }
            error_log('usrvendedorpunto1'.$objInfoPunto->getUsrVendedor());
            $objInfoServicio->setUsrVendedor($objInfoPunto->getUsrVendedor());            
            $objInfoServicio->setProductoId($objProducto); //id de producto generico nethome            

            if($objProducto->getEsEnlace() == 'SI')
            {
                $objInfoServicio->setEstado('Pre-servicio');
            }
            else
            {
                if($objProducto->getRequierePlanificacion() == 'SI')
                {
                    $objTipoSolicitudPlanificacion = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                 ->findOneByDescripcionSolicitud('SOLICITUD PLANIFICACION');
                    $this->crearOrdenTrabajoServicio($strCodEmpresa, $intIdOficina, $objInfoPunto, 
                                                     $strUsrCreacion, $strClientIp, $objInfoServicio, 
                                                     $strTipoOrden, 'PrePlanificada', $objTipoSolicitudPlanificacion);
                }
                else if($objProducto->getRequiereInfoTecnica() == 'SI')
                {
                    $objTipoSolicitudInfoTecnica = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                               ->findOneByDescripcionSolicitud('SOLICITUD INFO TECNICA');
                    $this->crearOrdenTrabajoServicio($strCodEmpresa, $intIdOficina, $objInfoPunto,
                                                     $strUsrCreacion, $strClientIp, $objInfoServicio, 
                                                     $strTipoOrden, 'PreAsignacionInfoTecnica', $objTipoSolicitudInfoTecnica);
                }
                else
                {
                    $strEstadoInicial = $objProducto->getEstadoInicial();

                    if(isset($strEstadoInicial) && !empty($strEstadoInicial))
                    {
                        $objInfoServicio->setEstado($strEstadoInicial);
                    }
                    else
                    {
                        $objInfoServicio->setEstado('Pendiente');
                    }
                }
            }           
            $objInfoServicio->setUsrCreacion($strUsrCreacion);
            $objInfoServicio->setIpCreacion($strClientIp);
            $objInfoServicio->setFeCreacion(new \DateTime('now'));
                
            //Verificación de característica 'FACTURACION_UNICA' definida a nivel de parametro
            $arrayParametrosCaractFactUnica = array('intIdProducto'          => $objProducto->getId(),
                                                    'strDescCaracteristica'  => $strCaracFacturacionUnica);
            $strTieneFactUnica = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaractFactUnica);
            $intFrecuencia     = 1;
            if(!empty($strTieneFactUnica) && $strTieneFactUnica == "S")
            {
                $intFrecuencia = 0;                  
            }           
            $objInfoServicio->setFrecuenciaProducto($intFrecuencia);
            $objInfoServicio->setMesesRestantes($intFrecuencia); // Meses restantes será igual a la frecuencia de facturación.                        
            $this->emcom->persist($objInfoServicio);            
            $this->emcom->flush(); 
            if(!empty($strTieneFactUnica) && $strTieneFactUnica == "S")
            {               
                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objInfoServicio,
                                                                               $objProducto, 
                                                                               $strCaracFacturacionUnica,
                                                                               'S',
                                                                               $strUsrCreacion); 
            }
           //Verifico Caracteristica NETHOME asociada al producto
            $arrayParametrosCaractNetHome = array('intIdProducto'          => $objProducto->getId(),
                                                  'strDescCaracteristica'  => 'NETHOME');
            $strEsNetHome= $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaractNetHome);
            if(!empty($strEsNetHome) && $strEsNetHome == "S")
            {      
                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objInfoServicio,
                                                                               $objProducto, 
                                                                               'NETHOME',
                                                                               'S',
                                                                               $strUsrCreacion);                                
            }
            $objInfoServicioTecnico = new InfoServicioTecnico();
            $objInfoServicioTecnico->setServicioId($objInfoServicio);
            $objInfoServicioTecnico->setUltimaMillaId($objTipoMedio->getId());
            $objInfoServicioTecnico->setTipoEnlace('PRINCIPAL');
            $this->emcom->persist($objInfoServicioTecnico);

            $objServicioHist = new InfoServicioHistorial();
            $objServicioHist->setServicioId($objInfoServicio);
            $objServicioHist->setObservacion('Se creo el servicio');
            $objServicioHist->setIpCreacion($strClientIp);
            $objServicioHist->setFeCreacion(new \DateTime('now'));
            $objServicioHist->setUsrCreacion($strUsrCreacion);
            $objServicioHist->setEstado($objInfoServicio->getEstado());
            $this->emcom->persist($objServicioHist);            

            $objInfoPunto->setEstado('Activo');
            $this->emcom->persist($objInfoPunto);   
                        
            $arrayServNhomeSinDuplicados = array();  
            foreach($arrayServiciosNetHome as $arrayValor)
            {
                $boolInserta = true;                
                foreach($arrayServNhomeSinDuplicados as $intClaveNHome => $arrayNhome)
                {
                    if($arrayValor['codigo']==$arrayNhome['codigo'])
                    {
                        $boolInserta = false;
                        $arrayServNhomeSinDuplicados[$intClaveNHome]['cantidad'] = (int)$arrayNhome['cantidad'] + (int)$arrayValor['cantidad'];                        
                    }
                }
                if($boolInserta)
                {                    
                    $arrayServNhomeSinDuplicados[] = $arrayValor;   
                }                
            }              
            
            //Genero Solicitud de Facturación Unica para los servicios Nethome
            $objTipoSolicitudFacturacionUnica = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                      ->findOneBy(array("descripcionSolicitud" => "SOLICITUD FACTURACION UNICA POR DETALLE",
                                                                        "estado"               => "Activo"));
            if(!is_object($objTipoSolicitudFacturacionUnica))
            {
                throw new \Exception("No existe Objeto para el tipo de Solicitud de Facturación Única");
            }
            
            $objMotivoSolicitudFact =   $this->emcom->getRepository('schemaBundle:AdmiMotivo')
                                                          ->findOneBy(array("nombreMotivo" => "Facturacion Unica por Detalle",
                                                                            "estado"       => "Activo"));             
            if(!is_object($objMotivoSolicitudFact))
            {
                throw new \Exception("No existe el motivo para la generación de la Solicitud de Facturación Única");
            }
            //Se inserta Solicitud de Facturacion Unica
            $objDetalleSolFacturacionUnica= new InfoDetalleSolicitud();
            $objDetalleSolFacturacionUnica->setServicioId($objInfoServicio);
            $objDetalleSolFacturacionUnica->setTipoSolicitudId($objTipoSolicitudFacturacionUnica);
            $objDetalleSolFacturacionUnica->setObservacion("Se crea Solicitud de Facturacion Nethome");            
            if(is_object($objMotivoSolicitudFact))
            {
                $objDetalleSolFacturacionUnica->setMotivoId($objMotivoSolicitudFact->getId());
            }
            $objDetalleSolFacturacionUnica->setFeCreacion(new \DateTime('now'));
            $objDetalleSolFacturacionUnica->setUsrCreacion($strUsrCreacion);
            $objDetalleSolFacturacionUnica->setEstado('Creada');
            $this->emcom->persist($objDetalleSolFacturacionUnica);            

            //Se inserta el historial de la solicitud de Facturación Unica
            $objInfoDetalleSolFactHistorial = new InfoDetalleSolHist();
            $objInfoDetalleSolFactHistorial->setDetalleSolicitudId($objDetalleSolFacturacionUnica);
            $objInfoDetalleSolFactHistorial->setEstado($objDetalleSolFacturacionUnica->getEstado());
            $objInfoDetalleSolFactHistorial->setFeCreacion(new \DateTime('now'));
            $objInfoDetalleSolFactHistorial->setUsrCreacion($strUsrCreacion);
            $objInfoDetalleSolFactHistorial->setObservacion("Se crea Solicitud de Facturacion Nethome");
            $objInfoDetalleSolFactHistorial->setIpCreacion($strClientIp);
            $this->emcom->persist($objInfoDetalleSolFactHistorial);            
               
             // Se agrega caracteristica FACTURACION DETALLADA                    
            $objAdmiCaractFactDet = $this->emcom->getRepository("schemaBundle:AdmiCaracteristica")
                                         ->findOneBy(array("descripcionCaracteristica" => "FACTURACION DETALLADA",
                                                           "estado" => "Activo"));
            $objSolCaractFactDet = new InfoDetalleSolCaract();
            $objSolCaractFactDet->setCaracteristicaId($objAdmiCaractFactDet);
            $objSolCaractFactDet->setDetalleSolicitudId($objDetalleSolFacturacionUnica);
            $objSolCaractFactDet->setValor('S');
            $objSolCaractFactDet->setEstado("Activo");
            $objSolCaractFactDet->setUsrCreacion($strUsrCreacion);
            $objSolCaractFactDet->setFeCreacion(new \DateTime('now'));
            $this->emcom->persist($objSolCaractFactDet);

            //Recorro el array que contiene el detalle de los productos con nombre tecnico NETHOME y los inserto a nivel de caracteristica en
            //INFO_SERVICIO_PROD_CARACT y sumarizo el precio total que sera insertado a nivel de INFO_SERVICIO (PRECIO_VENTA, PRECIO_FORMULA)
            $strObsDetallenetHome .='<table border="1" width="80%"><tr><td><b>ELEMENTO</b></td>'
                                  . '<td><b>CANTIDAD</b></td><td><b>PRECIO</b></td>'
                                  .' <td><b>VENDEDOR</b></td></tr>';
            foreach($arrayServNhomeSinDuplicados as $arrayValor)
            {
                if(isset($arrayValor['caracteristicasProducto']))
                {
                    if(!is_array($arrayValor['caracteristicasProducto']))
                    {
                        $arrayValor['caracteristicasProducto'] = json_decode($arrayValor['caracteristicasProducto'], true);
                    }
                    //Inserto las caracteristicas definidas a nivel de detalle de los productos
                    $arrayParams = array(   'servicio'      =>  $objInfoServicio,
                                            'caractProd'    =>  $arrayValor['caracteristicasProducto']);
                    $this->crearServicioProdCaract($arrayParams);
                }
                
                if (!is_numeric($arrayValor['codigo']))
                {
                    throw new \Exception('No se permite el ingreso del servicio, detalle producto no encontrado');
                }
                
                $objProductoDetalle = $this->emcom->getRepository('schemaBundle:AdmiProducto')->findOneById($arrayValor['codigo']);
                if(!is_object($objProductoDetalle))
                {
                    throw new \Exception('No se permite el ingreso del servicio, detalle producto NETHOME no encontrado');
                }
                if(!isset($arrayValor['precio']) || empty($arrayValor['precio']))
                {
                    throw new \Exception('No se permite el ingreso del servicio debido a que el producto '
                                         .$objProductoDetalle->getDescripcionProducto(). ' no posee un precio valido para su Facturacion');
                } 
                $fltPrecioDetalle = $arrayValor['precio'];               
                if(!isset($arrayValor['cantidad']) || empty($arrayValor['cantidad']))
                {
                    throw new \Exception('No se permite el ingreso del servicio debido a que el producto '
                                         .$objProductoDetalle->getDescripcionProducto(). ' no posee una cantidad valida para su Facturacion');
                }
                $intCantidadDetalle = $arrayValor['cantidad'];                
                if(!isset($arrayValor['login_vendedor']) || empty($arrayValor['login_vendedor']))
                {
                    throw new \Exception('No se permite el ingreso del servicio debido a que el producto '
                                         .$objProductoDetalle->getDescripcionProducto(). ' no posee asignado vendedor');
                }      
                $fltPrecioNetHome = $fltPrecioNetHome + ($fltPrecioDetalle*$intCantidadDetalle);
                $strVendedorDetalle = $arrayValor['login_vendedor'];
               if($objProductoDetalle->getNombreTecnico() == 'NETHOME')
               {
                   $objServProdCaracCantidad = $this->servicioTecnico->ingresarServicioProductoCaracteristica($objInfoServicio, 
                                                                                                              $objProductoDetalle, 
                                                                                                              'CANTIDAD_NETHOME',
                                                                                                              $intCantidadDetalle, 
                                                                                                              $strUsrCreacion);
                   $objServProdCaracPrecio =   $this->servicioTecnico->ingresarServicioProductoCaracteristica($objInfoServicio, 
                                                                                                              $objProductoDetalle, 
                                                                                                              'PRECIO_NETHOME',
                                                                                                              $fltPrecioDetalle, 
                                                                                                              $strUsrCreacion); 
                   $objServProdCaracPrecio->setRefServicioProdCaractId($objServProdCaracCantidad->getId());
                   $this->emcom->persist($objServProdCaracPrecio);
                   $objServProdCaracVendedor = $this->servicioTecnico->ingresarServicioProductoCaracteristica($objInfoServicio, 
                                                                                                              $objProductoDetalle, 
                                                                                                              'VENDEDOR_NETHOME',
                                                                                                              $strVendedorDetalle, 
                                                                                                              $strUsrCreacion);
                   $this->emcom->persist($objServProdCaracVendedor);
                                      
                   //Busco el parametro que tiene los items o productos que estan configurados para permitir generar la SOLICITUD DE FACTURACION.
                   $arrayParametroDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                             ->getOne('FACTURACION SOLICITUD DETALLADA', 'FINANCIERO', 'FACTURACION',
                                                      '',$objProductoDetalle->getId(), '', '', '', '', $strCodEmpresa);     
                   
                   // Se obtiene por parametro la caracteristica que define el Producto y Precio a facturarse
                   $intCaractDetalleNetHome  = ( isset($arrayParametroDet['valor3']) && !empty($arrayParametroDet['valor3']) )
                                               ? trim($arrayParametroDet['valor3']) : 0;
                   
                   $objCaractDetalleNetHome = $this->emcom->getRepository("schemaBundle:AdmiCaracteristica")
                                                          ->find($intCaractDetalleNetHome);
                   if(!is_object($objCaractDetalleNetHome))
                   {
                       throw new \Exception('No se permite el ingreso del servicio debido a que el producto '
                                         . $objProductoDetalle->getDescripcionProducto(). ' no posee la Caracteristica para definir la'
                                         . 'Solicitud de Facturacion Nethome');
                   }
                   //Inserto la caracteristica del Producto con el Precio del Items al Facturarse en la solicitud
                    $objSolCaractNetHomePrecio = new InfoDetalleSolCaract();
                    $objSolCaractNetHomePrecio->setCaracteristicaId($objCaractDetalleNetHome);
                    $objSolCaractNetHomePrecio->setDetalleSolicitudId($objDetalleSolFacturacionUnica);                    
                    $objSolCaractNetHomePrecio->setValor($fltPrecioDetalle);
                    $objSolCaractNetHomePrecio->setEstado("Facturable");
                    $objSolCaractNetHomePrecio->setUsrCreacion($strUsrCreacion);
                    $objSolCaractNetHomePrecio->setFeCreacion(new \DateTime('now'));
                    $this->emcom->persist($objSolCaractNetHomePrecio);

                    // Busco Caracteristica de Cantidad para definir en la solicitud
                    $objAdmiCaractCantidadNethome = $this->emcom->getRepository("schemaBundle:AdmiCaracteristica")
                                                                ->findOneBy(array("descripcionCaracteristica" => "CANTIDAD_DETALLE",
                                                                                  "estado"                    => "Activo"));
                   if(!is_object($objAdmiCaractCantidadNethome))
                   {
                       throw new \Exception('No se permite el ingreso del servicio debido a que no posee la Caracteristica CANTIDAD_DETALLE '
                                           . 'para definir la Solicitud de Facturacion Detallada');
                   }
                   //Inserto la caracteristica CANTIDAD que define la cantidad del Item al Facturarse en la solicitud y lo relaciono con 
                   //su PRODUCTO Y PRECIO a nivel de caracteristicas en la Solicitud.
                    $objSolCaractNetHomeCantidad = new InfoDetalleSolCaract();
                    $objSolCaractNetHomeCantidad->setCaracteristicaId($objAdmiCaractCantidadNethome);
                    $objSolCaractNetHomeCantidad->setDetalleSolicitudId($objDetalleSolFacturacionUnica);
                    $objSolCaractNetHomeCantidad->setDetalleSolCaractId($objSolCaractNetHomePrecio->getId());
                    $objSolCaractNetHomeCantidad->setValor($intCantidadDetalle);
                    $objSolCaractNetHomeCantidad->setEstado("Activo");
                    $objSolCaractNetHomeCantidad->setUsrCreacion($strUsrCreacion);
                    $objSolCaractNetHomeCantidad->setFeCreacion(new \DateTime('now'));
                    $this->emcom->persist($objSolCaractNetHomeCantidad);
                                       
                    $strObsDetallenetHome  .='<tr><td>'.$objProductoDetalle->getDescripcionProducto().'</td>'.                                            
                                            '<td>'.$intCantidadDetalle.'</td>'.                                         
                                            '<td>'.$fltPrecioDetalle.'</td>'.
                                            '<td>'.$strVendedorDetalle.'</td></tr>';
                                
               }
            }
            $strObsDetallenetHome .='</table>';
            // Para MD precio venta = precio formula (precio unitario)           
            // precio sumariza el total de servicios Nethome ingresados a nivel de caracteristica
            $objInfoServicio->setPrecioVenta($fltPrecioNetHome);
            $objInfoServicio->setPrecioFormula($fltPrecioNetHome);
            $this->emcom->persist($objInfoServicio);
            
            // Genero la Solicitud con el Precio total o precio de Venta del Nethome
            $objDetalleSolFacturacionUnica->setPrecioDescuento($fltPrecioNetHome);
            $this->emcom->persist($objDetalleSolFacturacionUnica);            
            
            //Creo Historial con el detalle de los servicios NetHome Ingresados a nivel de Caracteristicas
            $objServicioHist = new InfoServicioHistorial();
            $objServicioHist->setServicioId($objInfoServicio);
            $objServicioHist->setObservacion($strObsDetallenetHome);
            $objServicioHist->setIpCreacion($strClientIp);
            $objServicioHist->setFeCreacion(new \DateTime('now'));
            $objServicioHist->setUsrCreacion($strUsrCreacion);
            $objServicioHist->setEstado($objInfoServicio->getEstado());
            $this->emcom->persist($objServicioHist);       
            
            $this->emcom->flush();                                  
            $this->emcom->getConnection()->commit();
            $arrayRespuesta["strEstado"]  = "OK";
            $arrayRespuesta["strMensaje"] = "";
        }
        catch(\Exception $ex)
        {
            $arrayRespuesta["strMensaje"] = $ex->getMessage();
            if ($this->emcom->getConnection()->isTransactionActive())
            {
                $this->emcom->getConnection()->rollback();
                $this->emcom->getConnection()->close();
            }
        }
        return $arrayRespuesta;
    }
    
    /**
     * Función que crea la característica por CRS 'FACTURACION_CRS_CICLO_FACT' a los servicios. (INFO_SERVICIO_CARACTERISTICA)
     * Si tiene una característica de este tipo asociada, se inactiva y se migra al nuevo servicio.
     * Si no tiene una característica se crea por CRS para facturar el alcance.
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.0
     * @since 12-06-2018
     *
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.1
     * @since 13-09-2018
     * Se agrega la validación para que exista el $objAdmiCicloOrigen.
     *
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.2
     * @since 27-09-2018
     * Se agrega la validación por la fecha de facturación del servicio. Si viene null, se lanza la excepción.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 Se elimina transacción ya que ésta función es invocada desde otras funciones que ya hacen el beginTransaction
     * 
     * 
     * @param $arrayParametros
     */
    public function crearServicioCaracteristicaPorCRS($arrayParametros)
    {
        $strAplicaCiclosFac  = $arrayParametros["strAplicaCiclosFac"];
        $emComercial         = $this->emcom;
        $emFinanciero        = $this->emfinan;
        $objServicioOrigen   = $arrayParametros["objServicioOrigen"];
        $objServicioDestino  = $arrayParametros["objServicioDestino"];
        $objAdmiCicloOrigen  = $arrayParametros["objAdmiCicloOrigen"];
        $strUsrCreacion      = $arrayParametros["strUsrCreacion"];
        $strIpCreacion       = $arrayParametros["strIpCreacion"];
        //ARRAY DE RESPUESTA
        $arrayRespuesta["strEstado"]  = "ERROR";
        $arrayRespuesta["strMensaje"] = "Ha ocurrido un error al asignar la característica a los servicios por CRS.";

        //Si la empresa aplica ciclo de facturación, se inactivan sus características por CRS.
        if ('S' != $strAplicaCiclosFac)
        {
            return array("strEstado" => "OK");
        }
        try
        {
            if (!isset($objAdmiCicloOrigen))
            {
                throw new \Exception("No existe el ciclo de facturación del cliente origen.");
            }
            /* Se crea la característica del servicio para posteriormente realizar su facturación.*/
            $objAdmiCaracteristica = $emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                     ->findOneBy(array("estado"                    => "Activo",
                                                       "descripcionCaracteristica" => "FACTURACION_CRS_CICLO_FACT",
                                                       "tipo"                      => "COMERCIAL"));
            if(!is_object($objAdmiCaracteristica))
            {
                throw new \Exception("Hubo un error al obtener la característica de cambio de razón social.");
            }
            $arrayListCaracteristicaCRS = $emComercial->getRepository("schemaBundle:InfoServicioCaracteristica")
                                          ->findBy(array("servicioId"       => $objServicioOrigen,
                                                         "caracteristicaId" => $objAdmiCaracteristica,
                                                         "estado"           => "Activo",
                                                         "valor"            => "S"));
            $objInfoServCaractCRSNuevo = null;
            foreach($arrayListCaracteristicaCRS as $objInfoServCaractCRS)
            {
                $objInfoServCaractCRSNuevo = clone $objInfoServCaractCRS;
                $objInfoServCaractCRS->setEstado("Inactivo");
                $objInfoServCaractCRS->setValor("N");
                $objInfoServCaractCRS->setFeUltMod(new \DateTime('now'));
                $objInfoServCaractCRS->setUsrUltMod('regulaCRS');
                $objInfoServCaractCRS->setIpUltMod($strIpCreacion);
                $objInfoServCaractCRS->setObservacion("Se inactiva por CRS de la característica activa."
                        . " Se migra al servicio destino:" . $objServicioDestino->getId());
                $emComercial->persist($objInfoServCaractCRS);
                $emComercial->flush();
            }
            //Si ya tengo una característica, la clono para el nuevo servicio
            if (is_object($objInfoServCaractCRSNuevo))
            {
                $strMensajeHereda = "Se hereda característica activa:";
                $strObservacion = (strrpos($objInfoServCaractCRSNuevo->getObservacion(), $strMensajeHereda) === false ?
                       $strMensajeHereda . $objInfoServCaractCRSNuevo->getObservacion() :
                       $objInfoServCaractCRSNuevo->getObservacion());
                $objInfoServCaractCRSNuevo->setServicioId($objServicioDestino);
                $objInfoServCaractCRSNuevo->setObservacion(substr($strObservacion,-500));
                $objInfoServCaractCRSNuevo->setFeCreacion(new \DateTime('now'));
                $objInfoServCaractCRSNuevo->setUsrCreacion($strUsrCreacion);
                $objInfoServCaractCRSNuevo->setIpCreacion($strIpCreacion);
                $emComercial->persist($objInfoServCaractCRSNuevo);
                $emComercial->flush();
            }
            //Caso contrario, creo la característica por cambio de ciclo.
            else
            {
                $strFeFacturacion = $emFinanciero->getRepository("schemaBundle:AdmiCiclo")
                                                 ->obtieneFeSiguienteCicloFacturar(array("intIdCiclo" => $objAdmiCicloOrigen->getId()));
                if (!trim($strFeFacturacion))
                {
                    throw new \Exception("No ha sido posible generar la fecha de facturación del servicio.");
                }
                //Se inserta en INFO_SERVICIO_CARACTERISTICA ya sea cliente nuevo o existente.
                //Siempre se ejecuta primero su facturación por regularización de CRS, al siguiente mes en la masiva.
                $objInfoServicioCaracteristica = new InfoServicioCaracteristica();
                $objInfoServicioCaracteristica->setServicioId($objServicioDestino);
                $objInfoServicioCaracteristica->setFeCreacion(new \DateTime('now'));
                $objInfoServicioCaracteristica->setIpCreacion($strIpCreacion);
                $objInfoServicioCaracteristica->setUsrCreacion($strUsrCreacion);
                $objInfoServicioCaracteristica->setValor('S');
                $objInfoServicioCaracteristica->setEstado('Activo');
                $objInfoServicioCaracteristica->setObservacion('Se crea el registro por alcance para el CRS. Servicio origen:'
                                                              . $objServicioOrigen->getId());
                $objInfoServicioCaracteristica->setCaracteristicaId($objAdmiCaracteristica);
                $objInfoServicioCaracteristica->setFeFacturacion(new \DateTime($strFeFacturacion));
                $objInfoServicioCaracteristica->setCicloOrigenId($objAdmiCicloOrigen->getId());
                $emComercial->persist($objInfoServicioCaracteristica);
                $emComercial->flush();
            }
            $arrayRespuesta["strEstado"]  = "OK";
            $arrayRespuesta["strMensaje"] = "";
        }
        catch(\Exception $ex)
        {
            $arrayRespuesta["strMensaje"] = $ex->getMessage();
        }
        return $arrayRespuesta;
    }
    
    /**
     * crearServicioAdicional
     * crear servicio adicional de un servicio
     * 
     * 
     * @return String   $content
     * 
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 24-07-2018
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.1 13-03-2020   Si es CANAL TELEFONIA consultar si tiene la marca de activación simultánea para relacionar
     *                           con el servicio tradicional
    */    
    
    public function crearServicioAdicional($arrayParametros)
    {
        
        try
        {
        
            $objPunto           = $arrayParametros['objPunto']; 
            $objProducto        = $arrayParametros['objProducto'];     
            $strEstadoServicio  = $arrayParametros['estadoServicio']; 
            $strUser            = $arrayParametros['strUser'];       
            $strIp              = $arrayParametros['strIp'];         
            $strCodigoTipo      = $arrayParametros['strCodigoTipo'];
            $strDescFactura     = $arrayParametros['strDescFactura'];  
            $intBw              = $arrayParametros['intBw'];  
            
            $objTipoMedio       = $this->emcom->getRepository('schemaBundle:AdmiTipoMedio')->findOneByCodigoTipoMedio($strCodigoTipo);


            $objServicio = new InfoServicio();
            $objServicio->setPuntoId($objPunto);
            $objServicio->setProductoId($objProducto);
            $objServicio->setEsVenta('N');
            $objServicio->setPrecioVenta(0);
            $objServicio->setCantidad(1);
            $objServicio->setTipoOrden('N');
            $objServicio->setEstado($strEstadoServicio);
            $objServicio->setFrecuenciaProducto(1);
            $objServicio->setDescripcionPresentaFactura($strDescFactura);
            $objServicio->setUsrCreacion($strUser);
            $objServicio->setFeCreacion(new \DateTime('now'));
            $objServicio->setIpCreacion($strIp);
            $this->emcom->persist($objServicio);
            $this->emcom->flush();


            //historial del servicio
            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objServicio);
            $objServicioHistorial->setObservacion("Se creo el servicio.");
            $objServicioHistorial->setEstado($strEstadoServicio);
            $objServicioHistorial->setUsrCreacion($strUser);
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($strIp);
            $this->emcom->persist($objServicioHistorial);
            $this->emcom->flush();

            //se estableció con el usuario que la capacidad sea 100Kb
            $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "CAPACIDAD1", $intBw, $strUser);
            $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicio, $objProducto, "CAPACIDAD2", $intBw, $strUser);
            
            //Consultamos si el producto tiene la marca de activación simultánea                    
            if ($arrayParametros['instSimul'] == 'S')
            {
                $objProdInstalSim   = $arrayParametros['objProdInstalSim'];
                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicio, $objProdInstalSim, $arrayParametros['caractSim'],
                                        $arrayParametros['valorSim'], $strUser);
            }
            
            $arrayParametros = $this->emcom->getRepository('schemaBundle:AdmiParametroDet')
                                           ->getOne('PARAMETROS_LINEAS_TELEFONIA', 'TECNICO', '', 'ENLACE_DATOS', '', '', '', '', '', '');
            $objServicioEnlace = null;
            if($arrayParametros['valor2'])
            {
                $objServicioEnlace = $this->emcom->getRepository('schemaBundle:InfoServicio')->findOneByLoginAux($arrayParametros['valor2']);

                if(is_object($objServicioEnlace))
                {
                    $this->servicioTecnico->ingresarServicioProductoCaracteristica( $objServicio, $objProducto, "ENLACE_DATOS", 
                                                                                    $objServicioEnlace->getId(), $strUser);
                }
            }

            $objServicioTecnico = new InfoServicioTecnico();
            $objServicioTecnico->setServicioId($objServicio);
            $objServicioTecnico->setTipoEnlace('PRINCIPAL');
            $objServicioTecnico->setUltimaMillaId($objTipoMedio->getId());
            $this->emcom->persist($objServicioTecnico);
            $this->emcom->flush();
        
        }
        catch (\Exception $ex) 
        {             
            error_log($ex->getMessage());
        }
    }
    
    
    

    /**
     * Crea orden de trabajo, detalle solicitud e historial para el servicio dado
     * @param string $codEmpresa
     * @param integer $idOficina
     * @param InfoPunto $entityPunto
     * @param string $usrCreacion
     * @param string $clientIp
     * @param InfoServicio $entityServicio
     * @param string $tipoOrden
     * @param string $estadoSolicitud
     * @param AdmiTipoSolicitud $entityTipoSolicitud
     * 
     * 
     */
    private function crearOrdenTrabajoServicio($codEmpresa, $idOficina, InfoPunto $entityPunto, $usrCreacion, $clientIp, InfoServicio $entityServicio, $tipoOrden, $estadoSolicitud, AdmiTipoSolicitud $entityTipoSolicitud)
    {
        $datosNumeracion = $this->emcom->getRepository('schemaBundle:AdmiNumeracion')->findByEmpresaYOficina($codEmpresa,$idOficina,'ORD');
        $secuencia_asig = str_pad($datosNumeracion->getSecuencia(),7, '0', STR_PAD_LEFT);
        $numero_de_contrato = $datosNumeracion->getNumeracionUno().'-'.$datosNumeracion->getNumeracionDos().'-'.$secuencia_asig;
        
        $entityOrdenTrabajo  = new InfoOrdenTrabajo();
        $entityOrdenTrabajo->setPuntoId($entityPunto);
        $entityOrdenTrabajo->setTipoOrden('N');
        $entityOrdenTrabajo->setNumeroOrdenTrabajo($numero_de_contrato);
        $entityOrdenTrabajo->setFeCreacion(new \DateTime('now'));
        $entityOrdenTrabajo->setUsrCreacion($usrCreacion);
        $entityOrdenTrabajo->setIpCreacion($clientIp);
        $entityOrdenTrabajo->setOficinaId($idOficina);
        $entityOrdenTrabajo->setEstado('Pendiente');
        $this->emcom->persist($entityOrdenTrabajo);
        
        //Actualizo la numeracion en la tabla
        $numero_act = ($datosNumeracion->getSecuencia()+1);
        $datosNumeracion->setSecuencia($numero_act);
        $this->emcom->persist($datosNumeracion);
        
        $arrayParDet= $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                 ->getOne('ESTADO_CLEAR_CHANNEL','COMERCIAL','','ESTADO_CLEAR_CHANNEL','','','','','',10);
        
        $objProducto = $entityServicio->getProductoId();
        if($codEmpresa == 10)
        {
            $arrayHabilitarClearChannel = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                            ->getOne('HABILITAR_APROVISIO_CLEAR_CHANNEL',
                                    'COMERCIAL',
                                    '',
                                    $objProducto->getDescripcionProducto(),
                                    '',
                                    '',
                                    '',
                                    '',
                                    '',
                                    $codEmpresa);
            $strHabilitarClearChannel = $arrayHabilitarClearChannel["valor1"];
            if(is_object($objProducto) && $arrayParDet["valor1"] == $objProducto->getDescripcionProducto()
                && $strHabilitarClearChannel =='SI')
            {
                if($estadoSolicitud == 'BGP')
                {
                    $estadoSolicitud = $arrayParDet["valor2"];
                }
                elseif ($estadoSolicitud == 'Última Milla') 
                {
                    $estadoSolicitud = $arrayParDet["valor4"];
                }
                else
                {
                    $estadoSolicitud = $arrayParDet["valor2"];
                }
                
            }
        }
        
        $entityServicio->setOrdenTrabajoId($entityOrdenTrabajo);
        $entityServicio->setEstado($estadoSolicitud);
        $entityServicio->setUsrCreacion($usrCreacion);
        $entityServicio->setIpCreacion($clientIp);
        $entityServicio->setFeCreacion(new \DateTime('now'));
        $this->validator->validateAndThrowException($entityServicio);
        $this->emcom->persist($entityServicio);
        
        $entityDetalleSolicitud  = new InfoDetalleSolicitud();
        $entityDetalleSolicitud->setServicioId($entityServicio);
        $entityDetalleSolicitud->setTipoSolicitudId($entityTipoSolicitud);
        $entityDetalleSolicitud->setEstado($estadoSolicitud);
        $entityDetalleSolicitud->setUsrCreacion($usrCreacion);
        $entityDetalleSolicitud->setFeCreacion(new \DateTime('now'));
        $this->emcom->persist($entityDetalleSolicitud);
        
        //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
        $entityDetalleSolHist = new InfoDetalleSolHist();
        $entityDetalleSolHist->setDetalleSolicitudId($entityDetalleSolicitud);
        $entityDetalleSolHist->setIpCreacion($clientIp);
        $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
        $entityDetalleSolHist->setUsrCreacion($usrCreacion);
        $entityDetalleSolHist->setEstado($estadoSolicitud);
        $this->emcom->persist($entityDetalleSolHist);
    }

    /**
     * Crea la informacion de caracteristicas de productos por servicio
     * @param InfoServicio $entityServicio
     * @param array $carac_val array de arrays idCaracteristica/valor
     * @param boolean $isValor true si se debe validar que la caracteristica tenga valor (default FALSE)
     * Since 1.0
     *
     * @throws \Exception
     * @author Anabelle Penaherrera <apenaherrera@telconet.ec>
     * @version 1.1 23-08-2018 -Se agrega el ingreso en INFO_SERVICIO_CARACTERISTICA que si el Producto
     * posee la característica FACTURABLE_ADICIONAL
     * y se esta agregando la caracteristica METRAJE_NETFIBER con su valor de metraje, entonces debo
     * insertar en INFO_SERVICIO_CARACTERISTICA
     * la característica FACTURABLE_ADICIONAL asociada al servicio con el valor del ID_SERVICIO_PROD_CARACT
     * que contiene el valor de metraje a facturarse.
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 18-12-2018 - Se agrega validación para verificar que el servicio se encuentre asociado a
     * un producto
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.3 14-03-2019 - Se agrega funcionalidad para agregar el tipo de esquema al historial del
     * servicio cuando se trate de una característica "TIPO_ESQUEMA" la cual pertenece al servicio
     * "Internet Wifi".
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.4 23-05-2019 - Se agrega funcionalidad para que cuando exista la característica "INSTALACION_SIMULTANEA_WIFI",
     * se guarde el la descripción de la factura en el historial del servicio.
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.5 14-08-2019 - Se agrega funcionalidad para que cuando exista la característica "REQUIERE_INSPECCION",
     * se guarde el registro en el historial y ademas genere una tarea atuomatica a Radio para inspeccion.
     *
     * @author Adrian Ortega <amortega@telconet.ec>
     * @version 1.6 02-10-2019 - Se modifica funcionalidad para que cuando exista la característica "INSTALACION_SIMULTANEA_WIFI",
     * se guarde el la descripción de la factura en el historial del servicio. 
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.7 22-11-2019 - Se agrega logica para que cuando se obtenga la caracteristica TIPO_ESQUEMA se guarde la caracteristica
     *                           TIPO_FACTIBILIDAD como ruta para los servicios INTERNET WIFI.
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.8 11-02-2020 - Se agrega logica cuando se marca instalación simultánea al momento de agregar servicio con el producto
     *                           COU LINEAS TELEFONIA FIJA
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.9 30-05-2020 - Se agrega logica para soportar los servicios con caracteristica INSTALACION_SIMULTANEA con o sin flujo.
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 2.0 23-06-2020 - Se agrega funcionalidad para que cuando exista la característica "REQUIERE_TRABAJO",
     *                           se guarde el registro en el historial.
     * 
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 2.1 30-09-2020 - Se agrega funcionalidad para agregar servicioProdCaract FoxPremium, Paramount y Noggin.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 2.2 20-09-2021 - Se agrega logica para la validación de características de servicios adicionales.
     *
     * @author Jean Pierre Nazareno Martinez <jnazareno@telconet.ec>
     * @version 2.2 12-10-2021 - Se agrega funcionalidad para nueva caracteristica "Migración de Tecnología SDWAN"
     *
     * 
     */
    private function crearServicioProdCaract($arrayParametros)
    {
        $entityServicio = $arrayParametros['servicio'];
        $arrayCaracVal  = $arrayParametros['caractProd'];
        $objProducto    = $arrayParametros['objProducto'];
        $strEmpresaCod  = $arrayParametros['strEmpresaCod'];
        if(isset($arrayParametros['isValor']) && !empty($arrayParametros['isValor']))
        {
            $boolIsValor    = $arrayParametros['isValor'];
        }
        else
        {
            $boolIsValor    = false;
        }
        
        $strRequiereTrabajo = 'REQUIERE TRABAJO';
        $strObservacionRequiereTrabajo = '';
        $strCaractMigraTecSdwan = 'Migración de Tecnología SDWAN';
        //seteo de arreglo de características de relaciones
        $arrayCaractRelacion = array();

        if ($arrayCaracVal)
        {
            foreach ($arrayCaracVal as $car)
            {
                if ($car && !empty($car['idCaracteristica']) && (!$boolIsValor || !empty($car['valor'])))
                {
                    //validar características de servicios adicionales vacías
                    if(!empty($car['caracteristica']) && isset($strEmpresaCod) && !empty($strEmpresaCod) && is_object($objProducto))
                    {
                        $arrayParAddSerDatosGpon = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('CONFIG_PRODUCTO_DATOS_SAFE_CITY',
                                                             'COMERCIAL',
                                                             '',
                                                             '',
                                                             $objProducto->getId(),
                                                             'AGREGAR_SERVICIO_ADICIONAL',
                                                             $car['caracteristica'],
                                                             '',
                                                             '',
                                                             $strEmpresaCod);
                        if(isset($arrayParAddSerDatosGpon) && !empty($arrayParAddSerDatosGpon)
                           && ($car['valor'] == "" || $car['valor'] == 0))
                        {
                            $arrayCaractRelacion[] = $car['idCaracteristica'];
                            continue;
                        }
                        //validar que la característica principal de la adicional, este ingresada
                        $arrayParProdCaractRel = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('PRODUCTO_CARACTERISTICA_RELACION_PRODUCTO',
                                                             'COMERCIAL',
                                                             '',
                                                             '',
                                                             '',
                                                             $car['idCaracteristica'],
                                                             '',
                                                             '',
                                                             '',
                                                             $strEmpresaCod);
                        if(isset($arrayParProdCaractRel) && !empty($arrayParProdCaractRel)
                           && isset($arrayParProdCaractRel['valor1']) && in_array($arrayParProdCaractRel['valor1'], $arrayCaractRelacion))
                        {
                            continue;
                        }
                    }

                    //Guardar informacion de la caracteristica del producto
                    //Se consulta si la característica es REQUIERE TRABAJO para trabajar con los valores del json de esa característica
                    if ($car['valor'] == $strRequiereTrabajo)
                    {
                        //Consulto el codigo de la empresa del producto
                        $objProdCaract  = $this->emcom->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                                  ->findOneBy(array('id' => $car['idCaracteristica']));
                        
                        if(is_object($objProdCaract))
                        {
                            //Obtenemos la empresa que está relacionado con la empresa
                            $objProducto    = $this->emcom->getRepository('schemaBundle:AdmiProducto')->find($objProdCaract->getProductoId());

                            if(is_object($objProducto))
                            {
                                $intCodEmpresa  = $objProducto->getEmpresaCod()->getId();
                            }
                        }
                        
                        //Busco el id del departamento Eléctrico
                        $objAdmiDepartamento    = $this->emSoporte->getRepository("schemaBundle:AdmiDepartamento")
                                                   ->findOneBy(array('nombreDepartamento'  => 'ELECTRICO', 
                                                                     'estado'              => 'Activo', 
                                                                     'empresaCod'          => $intCodEmpresa ));
                        if(is_object($objAdmiDepartamento))
                        {
                            //Id del departamento
                            $intIdDepartamento = $objAdmiDepartamento->getId();
                        }
                        //Grabo en la tabla INFO_SERVICIO_PROD_CARACT CON EL DEPARTAMENTO ELECTRICO
                        $entityServicioProdCaract  = new InfoServicioProdCaract();
                        $entityServicioProdCaract->setServicioId($entityServicio->getId());
                        $entityServicioProdCaract->setProductoCaracterisiticaId($car['idCaracteristica']);
                        $entityServicioProdCaract->setValor($intIdDepartamento);
                        $entityServicioProdCaract->setEstado('Activo');
                        $entityServicioProdCaract->setUsrCreacion($entityServicio->getUsrCreacion());
                        $entityServicioProdCaract->setFeCreacion(new \DateTime('now'));
                        $this->emcom->persist($entityServicioProdCaract);
                        
                        foreach ($car['REQUIERE TRABAJO'] as $objRequiereTrabajo)
                        {
                            if ($objRequiereTrabajo['VALOR'] == 'S')
                            {
                                //Busco el id del departamento Eléctrico
                                //Se obtiene el departamento
                                $objAdmiDepartamento    = $this->emSoporte->getRepository("schemaBundle:AdmiDepartamento")
                                                           ->findOneBy(array('nombreDepartamento'  => $objRequiereTrabajo['DEPARTAMENTO'], 
                                                                             'estado'              => 'Activo', 
                                                                             'empresaCod'          => $intCodEmpresa ));
                                if(is_object($objAdmiDepartamento))
                                {
                                    //Id del departamento
                                    $intIdDepartamento = $objAdmiDepartamento->getId();
                                }
                                
                                //Grabo en la tabla INFO_SERVICIO_PROD_CARACT CON EL DEPARTAMENTO seleccionado
                                $entityServicioProdCaract  = new InfoServicioProdCaract();
                                $entityServicioProdCaract->setServicioId($entityServicio->getId());
                                $entityServicioProdCaract->setProductoCaracterisiticaId($car['idCaracteristica']);
                                $entityServicioProdCaract->setValor($intIdDepartamento);
                                $entityServicioProdCaract->setEstado('Activo');
                                $entityServicioProdCaract->setUsrCreacion($entityServicio->getUsrCreacion());
                                $entityServicioProdCaract->setFeCreacion(new \DateTime('now'));
                                $this->emcom->persist($entityServicioProdCaract);
                                
                                $strObservacionRequiereTrabajo .= $objRequiereTrabajo['DEPARTAMENTO']."-";
                            }
                        }
                        
                        if ($strObservacionRequiereTrabajo != '')
                        {
                            $objServicioHist = new InfoServicioHistorial();
                            $objServicioHist->setServicioId($entityServicio);
                            $objServicioHist->setObservacion("<b>Se Requiere Trabajo: </b>". $strObservacionRequiereTrabajo."<br/>");
                            $objServicioHist->setIpCreacion($entityServicio->getIpCreacion());
                            $objServicioHist->setFeCreacion(new \DateTime('now'));
                            $objServicioHist->setUsrCreacion($entityServicio->getUsrCreacion());
                            $objServicioHist->setEstado($entityServicio->getEstado());
                            $this->emcom->persist($objServicioHist);
                        }
                    }
                    else
                    {
                        $entityServicioProdCaract  = new InfoServicioProdCaract();
                        $entityServicioProdCaract->setServicioId($entityServicio->getId());
                        $entityServicioProdCaract->setProductoCaracterisiticaId($car['idCaracteristica']);
                        $entityServicioProdCaract->setValor($car['valor']);
                        $entityServicioProdCaract->setEstado('Activo');
                        $entityServicioProdCaract->setUsrCreacion($entityServicio->getUsrCreacion());
                        $entityServicioProdCaract->setFeCreacion(new \DateTime('now'));
                        $this->emcom->persist($entityServicioProdCaract);
                    }
                    

                    $objProdCaract  = $this->emcom->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                                  ->findOneBy(array('id' => $car['idCaracteristica']));
                    if(is_object($objProdCaract))
                    {
                        $objAdmiCaract  = $this->emcom->getRepository("schemaBundle:AdmiCaracteristica")
                                                      ->findOneBy(array('id'=>$objProdCaract->getCaracteristicaId()));
                    }

                    if(is_object($objAdmiCaract))
                    {
                   /*Obtenemos el array del parámetro*/
                   $objParamsDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                   ->get('CARACTERISTICAS_SERVICIOS_SIMULTANEOS',
                       'TECNICO',
                       'INSTALACION_SIMULTANEA',
                       '',
                       '',
                       '',
                       '',
                       '',
                       '',
                       10);

                    /*Se la operacion anterior haya traido data.*/
                    if (is_array($objParamsDet) && !empty($objParamsDet))
                    {
                        /*Convertimos el contenido de VALOR1 a un objeto asociativo.*/
                        $objCaracteristicasServiciosSimultaneos = json_decode($objParamsDet[0]['valor1'], true);

                        $arrayParams['strNeedle'] = $objAdmiCaract->getDescripcionCaracteristica();
                        $arrayParams['strKey'] = 'DESCRIPCION_CARACTERISTICA';
                        $arrayParams['arrayToSearch'] = $objCaracteristicasServiciosSimultaneos;

                        /*Ejecutamos una búsqueda por la característica, en el objeto definido anteriormente.*/
                        $objCaracteristicasServicioSimultaneo = $this->serviceGeneral->searchByKeyInArray($arrayParams);
                    }

                    /*Validamos si la variable '$objCaracteristicasServicioSimultaneo' fue creada.*/
                    if (isset($objCaracteristicasServicioSimultaneo) && !is_null($objCaracteristicasServicioSimultaneo) && $car['valor'] !== "null")
                    {
                        /*Definimos una variable con el ID del punto.*/
                        $intPunto = $entityServicio->getPuntoId();

                        /*Realizamos una búsqueda en el punto de los servicios en estado Factible.*/
                        $objInfoServTrad = $this->emcom->getRepository('schemaBundle:InfoServicio')
                            ->findOneBy(array(
                                'puntoId'=>$intPunto,
                                'estado'=>array('Factible', 'PrePlanificada')
                            ));

                        /*Obtenemos el producto del servicio.*/
                        $objProducto = $this->emcom->getRepository('schemaBundle:AdmiProducto')->find($entityServicio->getProductoId());

                        $arrayParams['strNeedle'] = $objProducto->getDescripcionProducto();
                        $arrayParams['strKey'] = 'DESCRIPCION_PRODUCTO';
                        $arrayParams['arrayToSearch'] = $objCaracteristicasServiciosSimultaneos;

                        /*Realizamos uns búsqueda del producto obtenido en el objeto de características simultaneo.*/
                        $arrayCaracteristicasServicioSimultaneo = $this->serviceGeneral->searchByKeyInArray($arrayParams);

                        /*Validamos el resultado de la búsqueda anterior.*/
                        if (isset($arrayCaracteristicasServicioSimultaneo) && !is_null($arrayCaracteristicasServicioSimultaneo))
                        {
                            /*Se valida si el servicio debe ser agrupado y si no tiene flujo.*/
                            if ($arrayCaracteristicasServicioSimultaneo['OS_AGRUPADAS'] && !$arrayCaracteristicasServicioSimultaneo['TIENE_FLUJO'])
                            {
                                $entityServicio->setEstado('Pendiente');

                                //Consultamos si el producto requiere flujo ya que antes no lo tenia
                                $arrayParametrosRequiereFlujo =   $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                       ->getOne("REQUIERE_FLUJO", 
                                                                                "TECNICO", 
                                                                                "", 
                                                                                "", 
                                                                                $objProducto->getDescripcionProducto(), 
                                                                                "", 
                                                                                "",
                                                                                "",
                                                                                "",
                                                                                10
                                                                                );
                                if(!is_array($arrayParametrosRequiereFlujo) && empty($arrayParametrosRequiereFlujo))
                                {
                                    $boolRequiereFlujo = false;
                                }
                                else
                                {
                                    $boolRequiereFlujo = true;
                                }
                                
                                if ($boolRequiereFlujo)
                                {
                                    $entityServicio->setEstado('Asignada');
                                }
                                else
                                {
                                    $entityServicio->setEstado('Pendiente');
                                }
                            }
                            /*Se valida si el servicio no debe ser agrupado y si no tiene flujo.*/
                            elseif(!$arrayCaracteristicasServicioSimultaneo['OS_AGRUPADAS'] && 
                            !$arrayCaracteristicasServicioSimultaneo['TIENE_FLUJO'])
                            {
                                $entityServicio->setEstado('Factible');
                            }
                        }

                        /*Se valida para agregar al historial.*/
                        if (is_object($objInfoServTrad) && method_exists($objInfoServTrad, 'getId'))
                        {
                            $strDescFacServTrad = $objInfoServTrad->getDescripcionPresentaFactura();

                            $strObservacion = "<b>Instalación Simultánea con el servicio: </b><br/>
                                                <b>&emsp; • Descripción Factura: </b><span>$strDescFacServTrad</span>
                                                <br/>
                                                ";

                            $objServicioHist = new InfoServicioHistorial();
                            $objServicioHist->setServicioId($entityServicio);
                            $objServicioHist->setObservacion($strObservacion);
                            $objServicioHist->setIpCreacion($entityServicio->getIpCreacion());
                            $objServicioHist->setFeCreacion(new \DateTime('now'));
                            $objServicioHist->setUsrCreacion($entityServicio->getUsrCreacion());
                            $objServicioHist->setEstado($entityServicio->getEstado());
                            $this->emcom->persist($objServicioHist);
                        }
                    }


                    // Se valida si la catacteristica es "TIPO_ESQUEMA" mediante su ID para generar el historial.
                    if($objAdmiCaract->getDescripcionCaracteristica() == "TIPO_ESQUEMA")
                    {
                        $objProducto    = $this->emcom->getRepository("schemaBundle:AdmiProducto")
                                                      ->find($entityServicio->getProductoId());

                        $objServicioHist = new InfoServicioHistorial();
                        $objServicioHist->setServicioId($entityServicio);
                        $objServicioHist->setObservacion("<b>Tipo Esquema: </b>". $car['valor']."<br/>");
                        $objServicioHist->setIpCreacion($entityServicio->getIpCreacion());
                        $objServicioHist->setFeCreacion(new \DateTime('now'));
                        $objServicioHist->setUsrCreacion($entityServicio->getUsrCreacion());
                        $objServicioHist->setEstado($entityServicio->getEstado());
                        $this->emcom->persist($objServicioHist);

                        if(is_object($objProducto))
                        {
                            /* Establece el tipo de factibilidad como tipo RUTA. */
                            $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                            $objProducto,
                            'TIPO_FACTIBILIDAD',
                            'RUTA',
                            $entityServicio->getUsrCreacion());
                        }

                    }
                    /* Valido la caracteristica, y que no sea null, este seria el escenario de 1er ingreso
                    del servicio "Wifi Alquiler de Equipos". */
                    if($objAdmiCaract->getDescripcionCaracteristica() == "REQUIERE_INSPECCION" && $car['valor'] !== "null")
                    {
                        $strInspeccion = $car['valor'] == 'S' ? 'SI' : 'NO';

                        if ($car['valor'] == 'S')
                        {
                            $objServicioHist = new InfoServicioHistorial();
                            $objServicioHist->setServicioId($entityServicio);
                            $objServicioHist->setObservacion("<b>Se Requiere Inspección: </b>". $strInspeccion."<br/>");
                            $objServicioHist->setIpCreacion($entityServicio->getIpCreacion());
                            $objServicioHist->setFeCreacion(new \DateTime('now'));
                            $objServicioHist->setUsrCreacion($entityServicio->getUsrCreacion());
                            $objServicioHist->setEstado($entityServicio->getEstado());
                            $this->emcom->persist($objServicioHist);

                            $entityPunto    = $this->emcom->getRepository('schemaBundle:InfoPunto')->find($entityServicio->getPuntoId());
                            $entityEmpresa  = $this->emcom->getRepository('schemaBundle:InfoEmpresaGrupo')
                                                          ->find($entityPunto->getPersonaEmpresaRolId()->getEmpresaRolId()->getEmpresaCod()->getId());

                            /*Se definen los parámetros necesarios para la creación de la tarea.*/
                            $arrayParametros['entityPunto']         = $entityPunto;
                            $arrayParametros['entityServicio']      = $entityServicio;
                            $arrayParametros['idEmpresa']           = $entityEmpresa->getId();
                            $arrayParametros['prefijoEmpresa']      = $entityEmpresa->getPrefijo();
                            $arrayParametros['clientIp']            = $entityServicio->getIpCreacion();
                            /*Se crea tarea con el proceso y tarea indicado por RADIO.*/
                            $arrayParametros['nombreProceso']       = 'TAREAS DE RADIOENLACE WIFI - COBERTURA';
                            $arrayParametros['nombreTarea']         = 'Inspección WIFI';
                            $arrayParametros['observacion']         = 'Se ha ingresado una solicitud de inspección, ' .
                                                                      'para un servicio Wifi Alquiler de Equipos';
                            $arrayParametros['nombreDepartamento']  = 'RADIO';
                            $arrayParametros['comentario']          = 'para una inspección de Radio.';
                            $arrayParametros['estado']              = 'FactibilidadEnProceso';

                            $this->generarTareaInterna($arrayParametros);
                            $entityServicio->setEstado($arrayParametros['estado']);

                        /* Se valida que la caracteristica sea numerica. Este seria el escenario del ingreso del resto
                        de servicio "Wifi Alquiler de equipos" luego de la inspeccion de RADIO. */
                        }
                        elseif (is_numeric($car['valor']))
                        {
                            $arrayValServicioAlquilerFactible   = $this->validarInspeccionRealizada($entityServicio->getPuntoId()->getId());

                            if ($arrayValServicioAlquilerFactible['boolValidacion'])
                            {
                                $strObservacion  = "<b>Se Requiere Inspección: </b>". $strInspeccion."<br/>";
                                $strObservacion .= "<b>Inspección realizada anteriormente: </b> SI";

                                $entityServicio->setEstado('Factible');

                                $objServicioHist = new InfoServicioHistorial();
                                $objServicioHist->setServicioId($entityServicio);
                                $objServicioHist->setObservacion($strObservacion);
                                $objServicioHist->setIpCreacion($entityServicio->getIpCreacion());
                                $objServicioHist->setFeCreacion(new \DateTime('now'));
                                $objServicioHist->setUsrCreacion($entityServicio->getUsrCreacion());
                                $objServicioHist->setEstado($entityServicio->getEstado());
                                $this->emcom->persist($objServicioHist);
                            }

                        }
                        else
                        {
                            $objServicioHist = new InfoServicioHistorial();
                            $objServicioHist->setServicioId($entityServicio);
                            $objServicioHist->setObservacion("<b>Se Requiere Inspección: </b>" . $strInspeccion . "<br/>");
                            $objServicioHist->setIpCreacion($entityServicio->getIpCreacion());
                            $objServicioHist->setFeCreacion(new \DateTime('now'));
                            $objServicioHist->setUsrCreacion($entityServicio->getUsrCreacion());
                            $objServicioHist->setEstado('Factible');
                            $this->emcom->persist($objServicioHist);

                            $entityServicio->setEstado('Factible');

                            /*Obtengo el objeto de la solicitud de factibilidad.*/
                            $entityTipoSolicitud = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                               ->findOneByDescripcionSolicitud("SOLICITUD FACTIBILIDAD");

                            /*Creo una solicitud de factibilidad en estado 'Factible'.*/
                            $entitySolicitud = new InfoDetalleSolicitud();
                            $entitySolicitud->setServicioId($entityServicio);
                            $entitySolicitud->setTipoSolicitudId($entityTipoSolicitud);
                            $entitySolicitud->setEstado('Factible');
                            $entitySolicitud->setUsrCreacion($entityServicio->getUsrCreacion());
                            $entitySolicitud->setFeCreacion(new \DateTime('now'));
                            $this->emcom->persist($entitySolicitud);

                        }

                    }
                    if ($objAdmiCaract->getDescripcionCaracteristica() == "INSTALACION_SIMULTANEA_WIFI" && $car['valor'] !== "null")
                    {
                        $intPunto = $entityServicio->getPuntoId();
                        $objInfoServTrad = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                       ->findOneBy(array(
                                                           'puntoId'=>$intPunto,
                                                           'estado'=>array('Factible', 'PrePlanificada')
                                                       ));

                        if (is_object($objInfoServTrad) && method_exists($objInfoServTrad, 'getId'))
                        {

                            $strDescFacServTrad = $objInfoServTrad->getDescripcionPresentaFactura();

                            $strObservacion = "<b>Instalación Simultánea con el servicio: </b><br/>
                                              <b>&emsp; • Descripción Factura: </b><span>$strDescFacServTrad</span>
                                              <br/>
                                              ";

                            $objServicioHist = new InfoServicioHistorial();
                            $objServicioHist->setServicioId($entityServicio);
                            $objServicioHist->setObservacion($strObservacion);
                            $objServicioHist->setIpCreacion($entityServicio->getIpCreacion());
                            $objServicioHist->setFeCreacion(new \DateTime('now'));
                            $objServicioHist->setUsrCreacion($entityServicio->getUsrCreacion());
                            $objServicioHist->setEstado($entityServicio->getEstado());
                            $this->emcom->persist($objServicioHist);
                        }
                    }
                    
                    //Verifico si el Producto COU LINEA TELEFONICA FIJA tiene marcado instalación simultánea 
                    if ($objAdmiCaract->getDescripcionCaracteristica() == "INSTALACION_SIMULTANEA_COU_TELEFONIA_FIJA" && $car['valor'] !== "null")
                    {
                        $intPunto = $entityServicio->getPuntoId();
                        $objInfoServTrad = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                       ->findOneBy(array(
                                                           'puntoId'=>$intPunto,
                                                           'estado'=>array('Factible', 'PrePlanificada')
                                                       ));

                        if (is_object($objInfoServTrad) && method_exists($objInfoServTrad, 'getId'))
                        {

                            $strDescFacServTrad = $objInfoServTrad->getDescripcionPresentaFactura();

                            $strObservacion = "<b>Instalación Simultánea con el servicio: </b><br/>
                                              <b>&emsp; • Descripción Factura: </b><span>$strDescFacServTrad</span>
                                              <br/>
                                              ";

                            $objServicioHist = new InfoServicioHistorial();
                            $objServicioHist->setServicioId($entityServicio);
                            $objServicioHist->setObservacion($strObservacion);
                            $objServicioHist->setIpCreacion($entityServicio->getIpCreacion());
                            $objServicioHist->setFeCreacion(new \DateTime('now'));
                            $objServicioHist->setUsrCreacion($entityServicio->getUsrCreacion());
                            $objServicioHist->setEstado($entityServicio->getEstado());
                            $this->emcom->persist($objServicioHist);
                        }
                    }

                    // Se valida si la catacteristica es "Migración de Tecnología SDWAN" mediante su ID para generar el historial.
                    if($objAdmiCaract->getDescripcionCaracteristica() == $strCaractMigraTecSdwan && $car['valor'] !== "null")
                    {
                        $strValor = ($car['valor'] == 'S') ? 'SI' : 'NO';

                        $objServicioHist = new InfoServicioHistorial();
                        $objServicioHist->setServicioId($entityServicio);
                        $objServicioHist->setObservacion("<b>" . $strCaractMigraTecSdwan .": </b>". $strValor."<br/>");
                        $objServicioHist->setIpCreacion($entityServicio->getIpCreacion());
                        $objServicioHist->setFeCreacion(new \DateTime('now'));
                        $objServicioHist->setUsrCreacion($entityServicio->getUsrCreacion());
                        $objServicioHist->setEstado($entityServicio->getEstado());
                        $this->emcom->persist($objServicioHist);
                    }
                }
                    //Verifico si el Producto posee la Caracteristica FACTURABLE_ADICIONAL que me indica que se Facturara valores por 
                    //metraje adicional
                    $objCaracteristica = $this->emcom->getRepository("schemaBundle:AdmiCaracteristica")
                                                     ->findOneByDescripcionCaracteristica("FACTURABLE_ADICIONAL");

                    if(is_object($objCaracteristica) && is_object($entityServicio->getProductoId()))
                    {
                        $objProdCaract = $this->emcom->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                                     ->findOneBy(array('productoId'       => $entityServicio->getProductoId()->getId(),
                                                                       'caracteristicaId' => $objCaracteristica->getId()));
                      
                        //Si el Producto posee la caracteristica FACTURABLE_ADICIONAL y se esta agregando la caracteristica METRAJE_NETFIBER
                        //y su valor de metraje, entonces debo insertar en INFO_SERVICIO_CARACTERISTICA la caracteristica FACTURABLE_ADICIONAL 
                        //asociada al servicio con el valor del ID_SERVICIO_PROD_CARACT que contiene el valor de metraje a facturarse.
                        
                        if(is_object($objProdCaract) && $car['caracteristica'] =='[METRAJE_NETFIBER]')
                        { 
                            $objServicioHist = new InfoServicioHistorial();
                            $objServicioHist->setServicioId($entityServicio);
                            $objServicioHist->setObservacion('Se ingresó valor de [METRAJE_NETFIBER] : '.$car['valor']);
                            $objServicioHist->setIpCreacion($entityServicio->getIpCreacion());
                            $objServicioHist->setFeCreacion(new \DateTime('now'));
                            $objServicioHist->setUsrCreacion($entityServicio->getUsrCreacion());
                            $objServicioHist->setEstado($entityServicio->getEstado());
                            $this->emcom->persist($objServicioHist);

                            //Verifico por Parametro si el PRODUCTO_CARACTERISTICA esta definido como FACTURABLE_ADICIONAL                           
                            $objProducto       = $this->emcom->getRepository('schemaBundle:AdmiProducto')
                                                             ->find($entityServicio->getProductoId()->getId());
                            if(!is_object($objProducto))
                            {
                                throw new \Exception("No se encontro Producto para el servicio");
                            }
                            $strCodEmpresa = $objProducto->getEmpresaCod()->getId();
                           
                            //Verifico si esta configurado en el parametro que el ID_PRODUCTO_CARACTERISITICA es FACTURABLE_ADICIONAL 'S'
                            $arrayParametroDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                             ->getOne('FACTURABLES_FACTURACION_UNICA',
                                                                      'FACTURACION',
                                                                      'FACTURACION_UNICA', 
                                                                      '',
                                                                      $objProdCaract->getId(), 
                                                                      'FACTURABLE_ADICIONAL' , 
                                                                      '', '', '', $strCodEmpresa);
                            $strEsFacturableAdicional = 'N';                             
                            if(isset($arrayParametroDet["valor4"]) && !empty($arrayParametroDet["valor4"]))
                            {
                                $strEsFacturableAdicional = $arrayParametroDet["valor4"];
                            }
                            if( !empty($strEsFacturableAdicional) && $strEsFacturableAdicional == "S" )
                            {
                                //Inserto en INFO_SERVICIO_CARACTERISTICA, la referencia de la caracteristica que tiene el metraje o cantidad 
                                //a facturar en la FACTURACION_ADICIONAL                                
                                $objInfoServicioCaracteristica = new InfoServicioCaracteristica();
                                $objInfoServicioCaracteristica->setServicioId($entityServicio);
                                $objInfoServicioCaracteristica->setFeCreacion(new \DateTime('now'));
                                $objInfoServicioCaracteristica->setIpCreacion($entityServicio->getIpCreacion());
                                $objInfoServicioCaracteristica->setUsrCreacion($entityServicio->getUsrCreacion());
                                $objInfoServicioCaracteristica->setValor($entityServicioProdCaract->getId());
                                $objInfoServicioCaracteristica->setEstado('Activo');
                                $objInfoServicioCaracteristica->setObservacion('Se crea el registro campo valor: [ID_SERVICIO_PLAN_CARACT] '
                                    . ' del [METRAJE_NETFIBER] Correpondiente a la Caracteristica: FACTURABLE_ADICIONAL');
                                $objInfoServicioCaracteristica->setCaracteristicaId($objCaracteristica);                                                               
                                $this->emcom->persist($objInfoServicioCaracteristica);                                
                            }
                        }
                    }
                }
            }
        }
        else if( isset($arrayParametros['producto']) && !empty($arrayParametros['producto']))
        {
            $entityPunto    = $arrayParametros['punto'];
            $strUsrCreacion = $arrayParametros['usrCreacion'];
            $arrayProd      = $arrayParametros['producto'];
            $objProducto    = $this->emcom->getRepository('schemaBundle:AdmiProducto')
                                            ->findOneById($arrayProd['codigo']);
            //determina si es el producto de paramount, noggin o foxpremium
            if( (is_object($objProducto)) && ($objProducto->getNombreTecnico() == self::FOXPREMIUM ||
                                              $objProducto->getNombreTecnico() == self::PARAMOUNT ||
                                              $objProducto->getNombreTecnico() == self::NOGGIN))
            {
                $arrayProducto = $this->serviceFoxPremium->determinarProducto(array('intIdProducto'=>$objProducto->getId()));
                if ($arrayProducto['Status'] == 'OK')
                {
                    $arrayParametrosCaract = array( 'intIdProducto'         => $objProducto->getId(), 
                                                    'strDescCaracteristica' => $arrayProducto['strDescCaracteristica'], 
                                                    'strEstado'             => 'Activo' );
                    $strEsProdCarac  = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaract);
                    if( !empty($strEsProdCarac) && $strEsProdCarac == "S" )
                    {                            
                        $objInfoPersona = $this->emcom->getRepository('schemaBundle:InfoPersona')
                                                    ->find($entityPunto->getPersonaEmpresaRolId()
                                                                        ->getPersonaId()
                                                                        ->getId());
                        if(!is_object($objInfoPersona))
                        {
                            throw new \Exception("No se pudo guardar el Servicio - No se encontro Persona para generar Usuario para el servicio "
                                . $arrayProducto['strMensaje']); 
                        }
                        //guarda las caracteristicas y sus valores en servicio prod caract
                        $arrayParametrosServProdCarac = array('intIdPersona'=> $objInfoPersona->getId(), 
                                                        'intIdPersonaRol'   => $entityPunto->getPersonaEmpresaRolId()->getId(),
                                                        'intIdServicio'     => $entityServicio->getId(),
                                                        'intIdProducto'     => $objProducto->getId(),
                                                        'strUsrCreacion'    => $strUsrCreacion,
                                                        'intIdPuntoCliente' => $entityPunto->getId()
                                                        );
                        $this->serviceFoxPremium->guardaServProdCarac($arrayParametrosServProdCarac);
                    }
                }
                else
                {
                    $strResultado  = $arrayProducto['Mensaje'];
                    throw new \Exception($strResultado);
                }
            }
        }
    }


    /**
     * Funcion que obtiene la factibilidad automatica de un producto
     *
     * @param $arrayParams
     * @return String   $content
     *
     * @throws \Doctrine\DBAL\ConnectionException
     * @author John Vera <javera@telconet.ec>
     * @version 1.0 26-12-2015
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.1 14-05-2019 - Se agrega funcionalidad para que cuando se solicita factibilidad
     * se valide si el servicio tiene un valor en la característica de instalacion simultanea.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @versio 1.2 08-07-2019 - Se modifica funcionalidad para se genere la solicitud de factibilidad
     * simultaneamente de todos los servicios Internet Wifi con el mismo CPE-WIFI y en una unica accion.
     *
     */

    public function solicitarFactibilidadProducto($arrayParams)
    {
        $intIdServicio     = $arrayParams['intId'];
        $strUsrCreacion    = $arrayParams['strUsrCreacion'];
        $strClientIp       = $arrayParams['strClienteIp'];
        $entityEm          = $this->emcom;

        $objInstalacionSimultanea    = $this->getIdServicioTradicionalInstalacionWifi($intIdServicio);
        
        if (isset($objInstalacionSimultanea['boolInstalacionSimultanea']) &&
            $objInstalacionSimultanea['boolInstalacionSimultanea'])
        {
            try
            {
                $arrayServiciosWifiInstalacionSimultanea = $this->planificarService->getArrayServiciosWifiInstalacionSimultanea($intIdServicio);
                
                if (count($arrayServiciosWifiInstalacionSimultanea) >= 1)
                {
                    $objServicio = $this->emcom->getRepository('schemaBundle:InfoServicio')
                        ->findOneBy(array(
                            'id' => $intIdServicio
                        ));
                    $objPunto = $this->emcom->getRepository('schemaBundle:InfoPunto')
                        ->findOneBy(array(
                            'id' => $objServicio->getPuntoId()
                        ));
                    $objModeloElemento = $this->eminf->getRepository('schemaBundle:AdmiModeloElemento')
                        ->findOneBy(array(
                            'nombreModeloElemento' => 'CLIENTE',
                            'descripcionModeloElemento' => 'NODO WIFI',
                            'estado' => 'Activo'
                        ));
                    $strNombreCPE = $this->generarNombreElementoWifi($objPunto->getLogin(), $objModeloElemento->getId());
                    $intIdElemento = null;
                    foreach ($arrayServiciosWifiInstalacionSimultanea as $key => $objServicioWifi)
                    {
                        $arraySolFactInstSim = $this->solFactInstSim($objServicioWifi->getId(), $strUsrCreacion, $strClientIp);

                        if ($arraySolFactInstSim['status'] == 'OK')
                        {
                            $entityTipoSolicitud = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                ->findOneByDescripcionSolicitud("SOLICITUD NODO WIFI");

                            $objSolicitud = $this->emcom->getRepository('schemaBundle:InfoDetalleSolicitud')
                                ->findOneBy(array(
                                    'servicioId' => $objServicioWifi->getId(),
                                    'tipoSolicitudId' => $entityTipoSolicitud->getId(),
                                    'estado' => 'PreFactibilidad'
                                ));

                            if (method_exists($objSolicitud, 'getId')
                                && method_exists($objServicioWifi, 'getId')
                                && method_exists($objPunto, 'getId'))
                            {
                                $arrayParams['idSolicitud'] = $objSolicitud->getId();
                                $arrayParams['idPunto'] = $objPunto->getId();
                                $arrayParams['nombreProducto'] = 'INTERNET WIFI';
                                $arrayParams['longitud'] = $objPunto->getLongitud();
                                $arrayParams['latitud'] = $objPunto->getLatitud();
                                $arrayParams['direccion'] = $objPunto->getDireccion();
                                $arrayParams['nombreElemento'] = $strNombreCPE;
                                $arrayParams['descripcion'] = $arrayParams['nombreElemento'];
                                $arrayParams['tipoElemento'] = $objModeloElemento->getId();
                                $arrayParams['tipoEsquema'] = $this->planificarService->getTipoEsquema($objServicioWifi);
                                $arrayParams['idParroquia'] = $objPunto->getSectorId()->getParroquiaId()->getId();
                                $arrayParams['fechaProgramacion'] = new \DateTime('now');
                                $arrayParams['index'] = $key;
                                $arrayParams['idElemento'] = $intIdElemento ? $intIdElemento : null;

                                $arrayFechaFactibilidadNuevoElemento = $this->planificarService->fechaFactibilidadNuevoElemento($arrayParams);

                                if ($arrayFechaFactibilidadNuevoElemento['status'] == 'OK')
                                {
                                    $strContent      = "Se creó el <b>" . $strNombreCPE . "</b>";
                                    $strContent     .= ", por favor continúe con la gestión del servicio tradicional";
                                    $intIdElemento   = $arrayFechaFactibilidadNuevoElemento['idElemento'];

                                }
                                else
                                {
                                    throw new \Exception($arrayFechaFactibilidadNuevoElemento['msg']);
                                }
                            }
                        }
                        else
                        {
                            throw new \Exception($arraySolFactInstSim['msg']);
                        }
                    }
                }else
                {
                    throw new \Exception('No se pudieron obtener los servicios de Internet Wifi.');
                }
            }
            catch (\Exception $e)
            {
                if ($entityEm->getConnection()->isTransactionActive())
                {
                    $strContent = "Error: <br>" . $e->getMessage();
                    $entityEm->getConnection()->rollback();
                    $entityEm->close();
                }
                $this->utilServicio->insertError('Telcos+',
                    'InfoServicioService.solicitarFactibilidadProducto',
                    "Error: <br>" . $e->getMessage(),
                    $strUsrCreacion,
                    $strClientIp);
            }
        }else
        {
            $entityEm               = $this->emcom;
            $entityServicio         = $entityEm->getRepository('schemaBundle:InfoServicio')
                                                ->find($intIdServicio);
            $entityTipoSolicitud    = $entityEm->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                ->findOneByDescripcionSolicitud("SOLICITUD NODO WIFI");
            $strContent             = "";
            $estado                 = "PreFactibilidad";
            $entityEm->getConnection()->beginTransaction();
            
            try
            {
                if($entityServicio)
                {
                    $observacionFactibilidad = "Se creo la solicitud de factibilidad";
                    $entityServicio->setEstado($estado);
                    $entityEm->persist($entityServicio);
                    $entityEm->flush();
                    //GUARDAR INFO SERVICIO HISTORIAL
                    $entityServicioHistorial = new InfoServicioHistorial();
                    $entityServicioHistorial->setServicioId($entityServicio);
                    $entityServicioHistorial->setIpCreacion($strClientIp);
                    $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $entityServicioHistorial->setUsrCreacion($strUsrCreacion);
                    $entityServicioHistorial->setObservacion("Se creo la solicitud de factibilidad");
                    $entityServicioHistorial->setEstado($estado);
                    $entityEm->persist($entityServicioHistorial);
                    $entityEm->flush();

                    $entitySolicitud = new InfoDetalleSolicitud();
                    $entitySolicitud->setServicioId($entityServicio);
                    $entitySolicitud->setTipoSolicitudId($entityTipoSolicitud);
                    $entitySolicitud->setEstado($estado);
                    $entitySolicitud->setUsrCreacion($strUsrCreacion);
                    $entitySolicitud->setObservacion($observacionFactibilidad);
                    $entitySolicitud->setFeCreacion(new \DateTime('now'));
                    $entityEm->persist($entitySolicitud);
                    $entityEm->flush();

                    //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                    $entityDetalleSolHist = new InfoDetalleSolHist();
                    $entityDetalleSolHist->setDetalleSolicitudId($entitySolicitud);
                    $entityDetalleSolHist->setIpCreacion($strClientIp);
                    $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                    $entityDetalleSolHist->setUsrCreacion($strUsrCreacion);
                    $entityDetalleSolHist->setObservacion($observacionFactibilidad);
                    $entityDetalleSolHist->setEstado($estado);
                    $entityEm->persist($entityDetalleSolHist);
                    $entityEm->flush();

                    $entityEm->getConnection()->commit();

                    $strContent = $observacionFactibilidad;

                }
                else
                {
                    $strContent = "No existe el registro";
                }
            }
            catch(\Exception $e)
            {
                if ($entityEm->getConnection()->isTransactionActive())
                {
                    $strContent = "Error: <br>" . $e->getMessage();
                    $entityEm->getConnection()->rollback();
                    $entityEm->close();
                }
                $this->utilServicio->insertError('Telcos+',
                    'InfoServicioService.solicitarFactibilidadProducto',
                    "Error: <br>" . $e->getMessage(),
                    $strUsrCreacion,
                    $strClientIp);
            }
        }
        return $strContent;
    }

   /**
     * Método que obtiene la factibilidad para extranet
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 11-03-2021
     * 
     */    
    public function solicitarFactibilidadServicioExtranet($arrayData)
    {
        $arrayRespuesta     = array();
        $intCodEmpresa      = $arrayData['strEmpresaCod'];
        $strPrefijoEmpresa  = $arrayData['strPrefijoEmpresa'];
        $intIdServicio      = $arrayData['intIdServicioInternet'];
        $strUsrCreacion     = $arrayData['strUsuarioCreacion'];
        $strClientIp        = $arrayData['strIpCreacion'];

        $strFactibilidadAut   = "Se asignó factibilidad automática";
        $strFactibilidadAutMD = "Datos Nuevos:<br>";
        $strFactibilidadGis   = "Se envio una solicitud a GIS para la Factibilidad";

        try
        {
            $strResponse = $this->solicitarFactibilidadServicio($intCodEmpresa, 
                                                                $strPrefijoEmpresa, 
                                                                $intIdServicio, 
                                                                $strUsrCreacion, 
                                                                $strClientIp);
            
            
            $strPost    = strpos($strResponse,$strFactibilidadAut);
            $strPostMD  = strpos($strResponse,$strFactibilidadAutMD);
            $strPostGis = strpos($strResponse,$strFactibilidadGis);

            if ($strPost !== false || $strPostMD !== false) 
            {
                $arrayRespuesta['status'] = '200';
            }
            else if($strPostGis !== false)
            {
                $arrayRespuesta['status'] = '205';
                throw new \Exception($strResponse);
            }
            else
            {
                $arrayRespuesta['status'] = '500';
                throw new \Exception($strResponse);
            }
        }
        catch (\Exception $e)
        { 
            $this->utilServicio->insertError(  'Telcos+', 
                                               'InfoServicioService.solicitarFactibilidadServicioExtranet', 
                                                $e->getMessage(), 
                                                $strUsrCreacion, 
                                                $strClientIp );
           
            
        }
        return $arrayRespuesta;
    }

    /**
     * Método que obtiene la factibilidad para extranet
     * 
     * @author Néstor Naula <nnaulal@telconet.ec>
     * @version 1.0 11-03-2021
     * 
     */    
    public function rechazoFactibilidadExtranet($arrayData)
    {
        $arrayRespuesta     = array();
        $emComercial        = $this->emcom;
        $strUsrCreacion     = $arrayData['strUsuarioCreacion'];
        $strClientIp        = $arrayData['strIpCreacion'];
        $intIdServicio      = $arrayData['intIdServicioInternet'];

        $strEstadoInferface = "not connect";
        $strEstadoServicio  = "Rechazado";
        $strEstadoSolicitud = "Rechazada";
        $strObsServicioHist = "Se rechazó registro por falla del proceso Extranet";

        try
        {
            if(!$emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->beginTransaction();
            }

            if(!empty($intIdServicio))
            {
                $entityServicio = $emComercial->getRepository('schemaBundle:InfoServicio')
                                            ->findOneById($intIdServicio);
            }
            else
            {
                throw new \Exception("No se ha enviado la variable idServicio");
            }

            if(is_object($entityServicio))
            {
                $entityServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                         ->findOneByServicioId($entityServicio->getId());

                if(is_object($entityServicioTecnico))
                {
                    $entityInterfaceElementoConector = $emComercial->getRepository('schemaBundle:InfoInterfaceElemento')
                                                       ->find($entityServicioTecnico->getInterfaceElementoConectorId());
                }
                else
                {
                    throw new \Exception("No se encontró el registro en la info servicio técnico");
                }
                
                if(!is_object($entityInterfaceElementoConector))
                {
                    throw new \Exception("No se encontró elemento conector");
                }

                $entityInterfaceElementoConector->setEstado($strEstadoInferface);
                $emComercial->persist($entityInterfaceElementoConector);
                $emComercial->flush();
                                
                $entityServicioTecnico->setElementoId(null);
                $entityServicioTecnico->setInterfaceElementoId(null);
                $entityServicioTecnico->setElementoContenedorId(null);
                $entityServicioTecnico->setElementoConectorId(null);
                $entityServicioTecnico->setInterfaceElementoConectorId(null);
                $emComercial->persist($entityServicioTecnico);
                $emComercial->flush();

                $entityServicio->setEstado($strEstadoServicio);
                $emComercial->persist($entityServicio);
                $emComercial->flush();

                //GUARDAR INFO SERVICIO HISTORIAL
                $entityServicioHistorial = new InfoServicioHistorial();
                $entityServicioHistorial->setServicioId($entityServicio);
                $entityServicioHistorial->setIpCreacion($strClientIp);
                $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
                $entityServicioHistorial->setUsrCreacion($strUsrCreacion);
                $entityServicioHistorial->setObservacion($strObsServicioHist);
                $entityServicioHistorial->setEstado($strEstadoServicio);
                $emComercial->persist($entityServicioHistorial);
                $emComercial->flush();

                $entityDetSolicitud = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                  ->findOneByServicioId($entityServicio->getId());
                
                if(!is_object($entityDetSolicitud))
                {
                    throw new \Exception("No se encontró el detalle de la solicitud");
                }
                
                $entityDetSolicitud->setEstado($strEstadoSolicitud);
                $entityDetSolicitud->setUsrRechazo($strUsrCreacion);
                $entityDetSolicitud->setFeRechazo(new \DateTime('now'));
                $emComercial->persist($entityDetSolicitud);
                $emComercial->flush();
                
                $entityDetalleSolHist = new InfoDetalleSolHist();
                $entityDetalleSolHist->setDetalleSolicitudId($entityDetSolicitud);
                $entityDetalleSolHist->setIpCreacion($strClientIp);
                $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                $entityDetalleSolHist->setUsrCreacion($strUsrCreacion);
                $entityDetalleSolHist->setObservacion($strObsServicioHist);
                $entityDetalleSolHist->setEstado($strEstadoSolicitud);
                $emComercial->persist($entityDetalleSolHist);
                $emComercial->flush();

                $emComercial->getConnection()->commit();

                $arrayRespuesta['status'] = '200'; 
            }
            else
            {
                throw new \Exception("No se encontró el servicio enviado");
            }
        }
        catch (\Exception $e)
        { 
            $this->utilServicio->insertError(  'Telcos+', 
                                               'InfoServicioService.rechazoFactibilidadExtranet', 
                                                $objEx->getMessage(), 
                                                $strUsrCreacion, 
                                                $strIpCreacion );

            $arrayRespuesta['status'] = '500';           
            
        }
        return $arrayRespuesta;
    }

    /**
     * Funcion que obtiene la factibilidad automatica de un Servicio de Internet
     *
     * @param String $codEmpresa
     * @param String $prefijoEmpresa
     * @param String $idServicio
     * @param String $usrCreacion
     * @param String $clientIp
     *
     * @return String   $content
     *
     * @throws \Doctrine\DBAL\ConnectionException
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0 26-12-2015
     * @since 1.0
     *
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.1 17-04-2016 Se aumento la validacion para realizar la factibilidad manual para TN
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.2 15-06-2016 Se agrega filtro de tecnologia de aprovisionamiento de recursos de red para cualquier plan que
     *                         tenga la caracteristica TECNOLOGIA_FACTIBILIDAD asignada a un plan
     *
     * @author Alexander Samaniego <awsamaniego@telconet.ec>
     * @version 1.3 27-06-2016 Se quita la validacion para realizar la factibilidad manual para TN
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.4 01-07-2016 Se modifica la generacion de factibilidad automatica para TN
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.5  23-09-2016 Se aplica un metodo que valida si el enlace entre el ODF y el CASSETTE
     *                          tiene configurado un bufferHiloId
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.6 14-10-2016 Se valida que los logines que están en un edificio de tipo CENTRO COMERCIAL no deben pasar por factibilidad automática
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.7 09-11-2016 Se valida que los servicios BACKUPS no deben pasar por factibilidad automática
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.8 14-11-2016 Se realiza factibilidad automática cuando el servicio está relacionado a un punto que es un pseudo pe
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.9 20-04-2017 Se realiza ajuste para realizar factibilidad automatica para esquema pseudo pe cuando se crea un servicio nuevo
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 2.0 08-06-2017 Se realiza ajuste para realizar factibilidad automatica para esquema VSAT
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 2.1 18-09-2017 Se realiza ajuste para flujos de DATACENTER que requieren realizar Factibilidad Manual
     *                         Cuando el producto de DC se trate de Alquiler de Servidores este siempre buscara factibilidad automática en base
     *                         a un stock disponible
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 2.2 30-01-2018 Se realiza ajuste para flujos de DATACENTER en donde se cambia para que obtenga el departamento de los parametros
     *                         configurados en la base de datos por tipo de proceso a realizar
     *
     * @author Ricardo Coello Quezada <rcoello@telconet.ec>
     * @version 2.2 23-01-2018 Se realiza ajuste para realizar factibilidad automatica o manual para produtos especiales con ultima milla FTTX.
     * Con la finalidad de usar la logica de factibilidad automatica de Megadatos para el producto "INTERNET SMALL BUSINESS".
     * Se envía bandera "SI" por el producto "ISB" para la busqueda de la caja mas cercana.
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.3 20-02-2018 Se agrega validación para filtrar factibilidad MD con servicios sin dependencia de edificios y
     *                         con dependencia de edificios
     * @since 2.2
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 2.4 28-02-2018 Se realiza ajuste para flujos de DATACENTER en donde se requiere revisar Factibilidad de mas de un servidores para
     *                         escenario de Alquiler de Servidores
     *                         Se ajusta para que soporte figura Multi Solucion ( Nx N )
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 2.5 27-06-2018 - Se agrega parametro al llamado de la funcion crearTareaRetiroEquipoPorDemo
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.6 20-07-2018 Se agrega validaciones para servicios ISB, no se debe dar factibilidad automática para tecnologías parametrizadas
     * @since 2.5
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.7 30-08-2018 Se agrega validación para dar factibilidad sobre la misma tecnología de olt cuando el tipo de orden del servicio
     *                         sea un traslado de MD
     * @since 2.6
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.8 28-09-2018 Se agrega el envío de la notificación cuando se dé la factibilidad a un servicio Small Business con tipo de orden
     *                         traslado y dicha factibilidad en el punto destino haya provisto un olt diferente al olt del punto origen
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.9 28-08-2018 Se agrega validación para planes 1GBPS, solo se debe permitir factibilidad en
     *                         equipos olt's con tecnología HW
     * @since 2.7
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.10 27-11-2018 Se agregan validaciones para gestionar productos para la empresa TNP
     * @since 2.8
     *
     * @author Nestor Naula <nnaulal@telconet.ec>
     * @version 2.11 06-02-2019 Se válida que no se duplique una solicitud de factibilidad, que se encuentre en estado: Factible o Prefactibilidad
     * @since 2.10
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.12 07-02-2019 Se agregan validaciones para traslado de servicios TelcoHome
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.13 27-02-2019 Se agrega traslado de solicitud de agregar equipo en destino de traslado para que pueda ser procesada
     *                          por proyecto de nuevos planes MD
     *
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.14 22-03-2019 - Se agrega validación para que la notificación por traslado sólo se envíe cuando sea un traslado de Small Business
     *
     * @since 2.10
     *
     * @author Jose Alava <jialava@telconet.ec>
     * @version 2.14 19-03-2019 Se valida que  aparezca  el registro en Asignar recursos de red cuando un servicio es hosting
     *                          anteriormente en la etapa de factibilidad no se mostraban  las opciones del hosting
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 2.15 04-06-2019 - Se agregó un registro booleano ($boolProductoEspecial) para identificar cuando un servicio es "Especial",
     *                            además, se agregaron 2 parametros mas al $arrayParametros, para poder determinar cuando una caja esta restringida.
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 2.16 19-06-2019 - Se modificó el nombre del método encargado de  clonar las solicitudes se Agregar Equipo y Cambio de
     *                            equipo por soporte (antes: trasladarSolicitudAgregarEquipo y ahora: clonarSolicitudesPorTraslado)
     * @since 2.15
     *
     * @author David Leon <mdleon@telconet.ec>
     * @version 2.17 01-07-2019 - Se agrega la validación si el producto es Sdwan, se solicita factibilidad manual.
     * 
     * @author David Leon <mdleon@telconet.ec>
     * @version 2.18 05-08-2019 - Se agrega la validación si el producto es L3MPLS Sdwan, a partir del segundo enlace se solicita factibilidad manual.
     * 
     * @author David Leon <mdleon@telconet.ec>
     * @version 2.19 04-09-2019 - Se agrega a la solución Cloud o Hosting los productos INTERNET DC SDWAN Y DATOS DC SDWAN.
     *                            Se agrega los productos INTERNET DC SDWAN Y DATOS DC SDWAN a las notificaciones de IT.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 2.20 27-07-2020 Se agrega nueva programación que verifica equipos dual band y clona las solicitudes para traslados, se deja de usar
     *                          la función clonarSolicitudesPorTraslado y se usa en su lugar generaSolsPorTraslado
     *
     * @author Karen Rodríguez V. <kyrodriguezv@telconet.ec>
     * @version 3.0 14-07-2020 - La lógica de factibilidad automática para CLOUD IAAS ALQUILER SERVIDOR se migra a MS.
     *                         - Se mantiene la lógica para crear solicitud de factibilidad adaptando a las nuevas 
     *                           estructuras para soluciones.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 3.1 01-12-2020 - Al momento de generar factibilidad para el producto CLOUD IAAS ALQUILER SERVIDOR, se obtiene
     *                           el proceso y la tarea en estado Activo.
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.2 09-03-2021 - Se agrega modificacion para que se obtenga $arrayParametrosDet buscando por los parametros de GPON
     *                           y asi continue por el flujo de Internet Small Business (MD).
     *
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.3 26-04-2021 - Se agrega validación para actualizar los estados de los servicios adicionales del producto Datos SafeCity.
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 3.4 16-03-2022 - Se valida cantidad de vrf del elemento olt para los servicios Cámara Safecity para la red GPON_MPLS.
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 3.5 11-01-2022 - Se agrega generación de retiro de equipos para traslados MD en diferente tecnología
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 3.6 29-08-2022 - Se realiza ajuste en el uso de objeto "request" que se encuentra en $this->container, inicialmente se colocó la
     *                           recuperación de este objeto en la función setDependencies, según las definiciones de desarrollo que indican
     *                           que en los servicies todo lo que recuperemos de este objeto "$this->container" sea seteado en la función 
     *                           setDependencies. Para este caso en específico esta linea agregada en el setDependencies causó problemas en el
     *                           proyecto SCRIPT-TELCOS por lo que se realiza el ajuste respectivo recuperando directamente la información
     *                           de "$this->container" en la función del services donde se utiliza. 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 3.7 21-08-2022 - Se agrega llamada al microservicio para obtener la caja mas cercana al servicio por medio del
     *  .                        del nuevo algoritmo de factibilidad 
     * 
     * @author Steven Ruano <sruano@telconet.ec> 
     * @version 3.8 20-12-2022 - Se agrego variables booleanas para los servicios GPON_MPLS    
     * 
     * @author Jefferson Leon <jlleona@telconet.ec>
     * @version 3.9 24-02-2023 - Se inserta el valor del metraje como caracteristica del servicio
     *
     * @author Jonathan Mazón Sánchez <jmazon@telconet.ec> 
     * @version 4.0 13-02-2023 - Se agrega bandera de Prefijo Empresa EN para Ecuanet flujos activacion y traslado.
     * 
     * @author Steven Ruano <sruano@telconet.ec>
     * @version 4.1 19-04-2023 - Se agrego validacion para guardar informacion del proceso nuevo algoritmo factiblidad
     *                           en la tabla INFO_SERVICIO_HISTORIAL desde telcos.
     *
     * @author Steven Ruano <sruano@telconet.ec>
     * @version 4.2 20-04-2022 - Se soluciona el error de objServicio al momento de guardar el proceso nuevo algoritmo factbilidad
     *                           en la tabla INFO_SERVICIO_HISTORIAL desde telcos.
     * 
     * @author Steven Ruano <sruano@telconet.ec>
     * @version 4.3 21-04-2023 - Solucion para visualizar la factibilidad en el historial del servicio.
     * 
     * @author Steven Ruano <sruano@telconet.ec>
     * @version 4.4 24-05-2023 - Validacion para verificar correctamente el nombre de las caja enviada por el proceso de algoritmo
     *                           factibilidad.
     *  
     * @author Andre Lazo <alazo@telconet.ec> 
     * @version 4.1 16-02-2023 - Se agrego invocacion de registro de infoserviciohistorial cuando sean traslado de doferente tecnologia 
     *                             y envio de parametros necesario
     */
    public function solicitarFactibilidadServicio($codEmpresa, $prefijoEmpresa, $idServicio, $usrCreacion, $clientIp)
    {
        $em                     = $this->emcom;
        $em_infraestructura     = $this->eminf;
        $emGeneral              = $this->emgen;
        $idEmpresa              = $codEmpresa;
        $intIdEmpresaOrigin      = $codEmpresa;
        $strPrefifoEmpresaOrigin = $prefijoEmpresa;
        $entityServicio         = $em->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $entityTipoSolicitud    = $em->getRepository('schemaBundle:AdmiTipoSolicitud')->findOneByDescripcionSolicitud("SOLICITUD FACTIBILIDAD");
        $content                = "";
        $strTipoInterface       = "";
        $boolEsSatelital        = false; 
        //Flujos DC
        $boolGenerarTarea       = false;
        $strNombreCanton        = '';
        $intIdCanton            = 0;
        $strLogin               = '';
        $strNombreTecnico       = '';
        $strDescripcionProducto = '';

        $boolEsISB              = false;
        $arrayParametros        = array();
        $strDependeDeEdificio   = "";
        $boolFactibilidadOk     = false;
        $strTipoOrdenServicio   = "";
        $strObligaTecnologia    = "NO";
        $strTecnologiaDestinoTraslado = "";
        $strTecnologiaOrigenTraslado  = "";

        //Variables para Extranet
        $strEstadoActivo        = 'Activo';
        $strCaracteristica      = 'PUNTO_DE_VENTA_CANAL';
        $strParamCabExtra       = 'CANALES_PUNTO_VENTA';
        $strParamDetExtra       = 'NUEVO CANAL EXTRANET';
        
        if(!$em->getConnection()->isTransactionActive())
        {
            $em->getConnection()->beginTransaction();
        }
        if(!$em_infraestructura->getConnection()->isTransactionActive())
        {
            $em_infraestructura->getConnection()->beginTransaction();
        }
        
        try
        {
            if ($entityServicio)
            {
                $strTipoOrdenServicio    = $entityServicio->getTipoOrden();
                $estadoFactibilidad      = "";
                $observacionFactibilidad = "Se creo la solicitud de factibilidad";
                $boolGrabo               = false;
                //migracion clientes transtelco - se agrega parametro ultima milla, se recupera ultima milla del servicio
                $ultimaMilla             = '';
                $servicioTecnico = $em->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($idServicio);
                $objAdmiProducto   = ($entityServicio->getProductoId() ? $entityServicio->getProductoId() : null );
                $strTipoEnlace = 'PRINCIPAL';
                
                $objServicioTecnicoOrigen   = $em->getRepository('schemaBundle:InfoServicioTecnico')
                                                    ->findOneByServicioId($intIdServicioOrigen);

                if ($servicioTecnico)
                {
                    $strTipoEnlace = $servicioTecnico->getTipoEnlace();
                    if(!$strTipoEnlace)
                    {
                        $strTipoEnlace = 'PRINCIPAL';
                    }
                    if ($servicioTecnico->getUltimaMillaId())
                    {
                        $entityUltimaMilla = $em_infraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                ->find($servicioTecnico->getUltimaMillaId());
                        $ultimaMilla = $entityUltimaMilla->getNombreTipoMedio();
                    }
                    
                    //Verifico si es producto es especial y si se encuentra definido en la parametros 
                    //Para buscar factibilidad del producto en MD.
                    if( is_object($objAdmiProducto) )
                    {
                        $strNombreTecnico       = trim($objAdmiProducto->getNombreTecnico());
                        $strDescripcionProducto = $objAdmiProducto->getDescripcionProducto();
                        if( !empty($strNombreTecnico) )
                        {
                            //Se obtienen la ultimas milla correspondiente al producto especial hibrido para TN.
                            $arrayParametrosDet = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->getOne('PRODUCTOS_ESPECIALES_UM', 
                                                                                 'COMERCIAL', 
                                                                                 '',
                                                                                 '',
                                                                                 strtoupper(trim($strNombreTecnico)),
                                                                                 '',
                                                                                 '',
                                                                                 '',
                                                                                 '',
                                                                                 $idEmpresa);

                            /*Obtenemos la característica del tipo de red.*/
                            $booleanTipoRedGpon = false;
                            $objTipoRed = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                    'TIPO_RED',
                                                                                                    $objAdmiProducto);
                            if(is_object($objTipoRed))
                            {
                                //seteo el tipo red en el parámetro
                                $arrayParametros['strTipoRed'] = $objTipoRed->getValor();
                                //se valida si el tipo de red es GPON
                                $arrayParVerTipoRed = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->getOne('NUEVA_RED_GPON_TN',
                                                                                'COMERCIAL',
                                                                                '',
                                                                                'VERIFICAR TIPO RED',
                                                                                'VERIFICAR_GPON',
                                                                                $objTipoRed->getValor(),
                                                                                '',
                                                                                '',
                                                                                '');
                                if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                                {
                                    $booleanTipoRedGpon = true;
                                }
                            }
                            $arrayParametros['booleanTipoRedGpon'] = $booleanTipoRedGpon;
                            /*Valido si la primera búsqueda esta vacía, para buscar por servicios GPON.*/
                            if (empty($arrayParametrosDet) && $booleanTipoRedGpon)
                            {
                                $arrayParametrosDet = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('NUEVA_RED_GPON_TN',
                                                                    'COMERCIAL',
                                                                    '',
                                                                    'UM FTTX',
                                                                    strtoupper(trim($strNombreTecnico)),
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    $idEmpresa);
                            }

                            if( $arrayParametrosDet && count($arrayParametrosDet) > 0 )
                            {
                                if(isset($arrayParametrosDet['valor2']) && !empty($arrayParametrosDet['valor2']))
                                {
                                    $strUltimaMillaProdEsp          = strtoupper($arrayParametrosDet['valor2']);
                                    $strNombreTecnicoSbTelcoHome    = $strNombreTecnico;
                                    $boolEsISB                      =  true;
                                    if ($prefijoEmpresa != 'TNP')
                                    {
                                        /*Obtenemos las capacidades del servicio.*/
                                        $objCapacidad1 = $this->getValorCaracteristicaServicio(
                                            array(
                                                'objServicio' => $entityServicio,
                                                "strNombreCaracteristica" => "CAPACIDAD1"
                                            ));
                                        if(is_object($objCapacidad1))
                                        {
                                            $arrayParametros['intCapacidad1'] = $objCapacidad1->getValor();
                                        }

                                        /*Obtenemos las capacidades del servicio.*/
                                        $objCapacidad2 = $this->getValorCaracteristicaServicio(
                                            array(
                                                'objServicio' => $entityServicio,
                                                "strNombreCaracteristica" => "CAPACIDAD2"
                                            ));
                                        if(is_object($objCapacidad2))
                                        {
                                            $arrayParametros['intCapacidad2'] = $objCapacidad2->getValor();
                                        }

                                        /* Valido si el objeto existe para poder obtener el punto de cobertura id. */
                                        if ( $booleanTipoRedGpon && is_object($entityServicio->getPuntoId()->getPuntoCoberturaId()) ) 
                                        {
                                            /* Obtengo el punto de cobertura id. */
                                            $intPuntoCobertura = $entityServicio->getPuntoId()->getPuntoCoberturaId()->getId();
                                            /* Obtengo un arreglo con las ciudades permitidas para GPON. */
                                            $arrayCiudadesGPON = $em->getRepository('schemaBundle:AdmiParametroDet')
                                                                                        ->get('NUEVA_RED_GPON_TN',
                                                                                                'COMERCIAL',
                                                                                                '',
                                                                                                '',
                                                                                                $intPuntoCobertura,
                                                                                                '',
                                                                                                '',
                                                                                                'S',
                                                                                                'CIUDADES_DISPONIBLES',
                                                                                                $idEmpresa);

                                            /* Valido que el arreglo no este vacio. */
                                            $boolFactibilidadPermitidaGPON = false;
                                            if(!empty($arrayCiudadesGPON) && count($arrayCiudadesGPON) >= 1)
                                            {
                                                $boolFactibilidadPermitidaGPON = true;
                                            }
                                            /*Si la factibilidad no es permitida, lanza excepción.*/
                                            if (!$boolFactibilidadPermitidaGPON) 
                                            {
                                                $boolFactibilidadOk = false;
                                                throw new \Exception('Factibilidad GPON no soportada.');
                                            }
                                        }

                                        $prefijoEmpresa          =  $arrayParametrosDet['valor3'];
                                        $idEmpresa               =  $arrayParametrosDet['valor4'];
                                        $boolProductoEspecial    =  true;
                                    }
                                }
                            }
                        }
                    }
                }
                //migracion clientes transtelco - se agrega validacion ultima milla
                $strAdministra = '';
                //si es un cliente de MD y depende de un edificio tipo CENTRO COMERCIAL se debe ir por factibilidad manual
                $stringEsCentroComercial = 'NO';
                if($entityServicio->getPuntoId())
                {
                    $objPuntoDato = $em->getRepository('schemaBundle:InfoPuntoDatoAdicional')->findOneByPuntoId($entityServicio->getPuntoId());
                    if(is_object($objPuntoDato))
                    {
                        if ($objPuntoDato->getElementoId())
                        {
                            $objElemento = $em->getRepository('schemaBundle:InfoElemento')->find($objPuntoDato->getElementoId());
                            if(is_object($objElemento))
                            {
                                //consulto si es o no un pseudo pe
                                $objDetallePseudo = $em->getRepository('schemaBundle:InfoDetalleElemento')
                                                       ->findOneBy(array('elementoId'   => $objElemento->getId(),
                                                                         'detalleNombre'=> 'ADMINISTRA',
                                                                         'estado'       => 'Activo' ));
                                if (is_object($objDetallePseudo))
                                {
                                    $strAdministra = $objDetallePseudo->getDetalleValor();
                                }
                                
                                $objModeloElemento = $objElemento->getModeloElementoId();
                                if(is_object($objModeloElemento))
                                {
                                    if($objModeloElemento->getNombreModeloElemento()=='CENTRO COMERCIAL')
                                    {
                                        $stringEsCentroComercial = 'SI';
                                    }
                                }                                
                            }
                        }
                    }
                }
                //Si es Data Center se genera Factibilidad Manual
                if($prefijoEmpresa == 'TN' &&  strpos($entityServicio->getProductoId()->getGrupo(), 'DATACENTER')!==false )
                {
                    $strAdministra    = 'DATACENTER';
                    $strNombreTecnico = $entityServicio->getProductoId()->getNombreTecnico();
                }

                //nombre de canton
                $intIdOficina = $entityServicio->getPuntoId()->getPuntoCoberturaId()->getOficinaId();
                    
                $objOficina   = $this->emcom->getRepository("schemaBundle:InfoOficinaGrupo")->find($intIdOficina);

                if(is_object($objOficina))
                {
                    $objCanton = $this->emcom->getRepository("schemaBundle:AdmiCanton")->find($objOficina->getCantonId());

                    if(is_object($objCanton))
                    {
                        $strNombreCanton = $objCanton->getNombreCanton();
                        $intIdCanton     = $objCanton->getId();
                    }
                }
                
                if(($strNombreTecnico==='INTERNET SDWAN' || $strNombreTecnico==='L3MPLS SDWAN') && $strTipoEnlace!='PRINCIPAL')
                {
                    $estadoFactibilidad       = "PreFactibilidad";
                    $observacionFactibilidad  = "Se envio una solicitud a GIS para la Factibilidad, del enlace SDWAN";
                }
                else if(is_object($entityServicio->getProductoId()) &&
                        $entityServicio->getProductoId()->getNombreTecnico() === 'DATOS FWA')
                {
                    $strEstadoServicio          = 'Asignada';
                    $arrayParametrosSolicitudes = array('servicioId'        => $entityServicio->getId(),
                                                        'estado'            => 'Pendiente');

                    $objDetalleSolFWA           = $em->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                     ->findOneBy($arrayParametrosSolicitudes);

                    if(is_object($objDetalleSolFWA))
                    {
                        //Reasignar la tarea al dpto de L2.
                        $objServProdCaractTipoFact = $this->servicioTecnico
                                                          ->getServicioProductoCaracteristica($entityServicio,
                                                                                              'TAREA_FWA',
                                                                                               $entityServicio->getProductoId());
                        if($objServProdCaractTipoFact)
                        {
                            $arrayDetalle       = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")
                                                                  ->findByDetalleSolicitudId($objDetalleSolFWA->getId());
                            $strRegionServicio  = "";
                            if(is_object($entityServicio->getPuntoId()))
                            {
                                $intIdOficinaServicio   = is_object($entityServicio->getPuntoId()->getPuntoCoberturaId()) ?
                                                                    $entityServicio->getPuntoId()->getPuntoCoberturaId()->getOficinaId() : 0;
                                $objOficinaServicio     = $this->emcom->getRepository("schemaBundle:InfoOficinaGrupo")
                                                                      ->find($intIdOficinaServicio);
                                if(is_object($objOficinaServicio))
                                {
                                    $objCantonServicio = $this->emcom->getRepository("schemaBundle:AdmiCanton")
                                                                     ->find($objOficinaServicio->getCantonId());
                                    if(is_object($objCantonServicio))
                                    {
                                        $strRegionServicio = $objCantonServicio->getRegion();
                                    }
                                }
                            }
                            //Obtengo el rol del jefe del departamento.
                            $arrayDescripcionRol   = $em->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('ASIGNAR_TAREA_JEFES',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 $strRegionServicio,
                                                                 'IPCCL2',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 '');
                            if(!empty($arrayDescripcionRol) && !empty($arrayDescripcionRol["valor2"]))
                            {
                                $strDescripcionRol = (!empty($arrayDescripcionRol["valor3"])) ? $arrayDescripcionRol["valor3"] :
                                                     $strDescripcionRol;
                            }
                            $arrayParametrosResponsable = array(
                                                                'idEmpresa'                     => $idEmpresa == '26'?'10':$idEmpresa,
                                                                'estado'                        => 'Activo',
                                                                'strDescripcionRol'             => $strDescripcionRol,
                                                                'strDescripcionTipoRol'         => 'Empleado',
                                                                'strNombreDepartamento'         => 'IPCCL2',
                                                                'strRegionEmpleado'             => $strRegionServicio,
                                                                'esJefe'                        => 'S',
                                                                'strDescripcionFormaContacto'   => 'Correo Electronico'
                                                        );
                            $arrayRespuestaResponsables = $this->emcom->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                               ->getResultadoPersonaEmpresaRolPorCriterios($arrayParametrosResponsable);
                            $arrayResultadoResponsables  = $arrayRespuestaResponsables['resultado'];
                            if(empty($arrayResultadoResponsables[0]))
                            {
                                throw new \Exception("No se ha podido encontrar el Jefe para la asignación de tarea");
                            }
                            else
                            {
                                $arrayJefeResponsable = $arrayResultadoResponsables[0];
                            }
                            if(!empty($arrayDetalle))
                            {
                                //Obtener el departamento de quien reasigna la tarea.
                                $arrayDetalleAsignacion    = $this->emSoporte->getRepository("schemaBundle:InfoDetalleAsignacion")
                                                                             ->findByDetalleId($arrayDetalle[0]->getId());
                                $arrayReasignar = array('idEmpresa'             => $idEmpresa,
                                                        'prefijoEmpresa'        => $prefijoEmpresa,
                                                        'id_detalle'            => $arrayDetalle[0]->getId(),
                                                        'motivo'                => 'Aprovisionamiento del producto FWA',
                                                        'departamento_asignado' => $arrayJefeResponsable['idDepartamento'],
                                                        'empleado_asignado'     => $arrayJefeResponsable['idPersona'].'@@'.
                                                                                   $arrayJefeResponsable['idPersonaEmpresaRol'],
                                                        'tipo_asignado'         => 'EMPLEADO', //EMPLEADO
                                                        'fecha_ejecucion'       => (new \DateTime('now'))->format('Y-m-d H:i'), //fechaSistema
                                                        'id_departamento'       => $arrayDetalleAsignacion[0]->getAsignadoId(),
                                                        'clientIp'              => $clientIp,
                                                        'user'                  => $usrCreacion,
                                                       );
                                /* @var $soporteService \telconet\soporteBundle\Service\SoporteService */
                                $arrayResultado = $this->serviceSoporte->reasignarTarea($arrayReasignar);
                                $intTareaFWA    = $objServProdCaractTipoFact->getValor();
                                if($arrayResultado['success'])
                                {
                                    $observacionFactibilidad    = $arrayResultado['asignado'].'<br>'.
                                                                  "Tarea id. <b>".$intTareaFWA."</b>";
                                }
                            }
                        }
                        else
                        {
                            throw new \Exception("No se encontró la tarea del producto FWA");
                        }
                        $strObservacionFWA = "Se procedio a dar factibilidad y se asigna la tarea ".$intTareaFWA." al dpto L2 <br>".
                                              $arrayJefeResponsable['nombreCompleto'];
                        $objDetalleSolFWA->setEstado('Finalizada');
                        $em->persist($objDetalleSolFWA);
                        $em->flush();

                        //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                        $entityDetalleSolHist = new InfoDetalleSolHist();
                        $entityDetalleSolHist->setDetalleSolicitudId($objDetalleSolFWA);
                        $entityDetalleSolHist->setIpCreacion($clientIp);
                        $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                        $entityDetalleSolHist->setUsrCreacion($usrCreacion);
                        $entityDetalleSolHist->setObservacion($strObservacionFWA);
                        $entityDetalleSolHist->setEstado('Finalizada');
                        $em->persist($entityDetalleSolHist);
                        $em->flush();
                    }
                    $entityServicio->setEstado($strEstadoServicio);
                    $em->persist($entityServicio);
                    $em->flush();
                    //GUARDAR INFO SERVICIO HISTORIAL
                    $entityServicioHistorial = new InfoServicioHistorial();
                    $entityServicioHistorial->setServicioId($entityServicio);
                    $entityServicioHistorial->setIpCreacion($clientIp);
                    $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $entityServicioHistorial->setUsrCreacion($usrCreacion);
                    $entityServicioHistorial->setObservacion($strObservacionFWA);
                    $entityServicioHistorial->setEstado($strEstadoServicio);
                    $em->persist($entityServicioHistorial);
                    $em->flush();

                    $em->getConnection()->commit();
                    $em_infraestructura->getConnection()->commit();
                    return $strObservacionFWA;
                }
                else
                {
                    if($strAdministra == '')
                    {
                        if ($stringEsCentroComercial == 'NO' && substr($strTipoEnlace, 0, 9) == 'PRINCIPAL')
                        {
                            if ($ultimaMilla == "Fibra Optica" || $strUltimaMillaProdEsp === 'FTTX')
                            {
                                $entityPunto   = $entityServicio->getPuntoId();
                                $latitudPunto  = $entityPunto->getLatitud();
                                $longitudPunto = $entityPunto->getLongitud();

                                $cajaMasCercana['distancia_caja'] = 0;
                                $cajaMasCercana['id_caja']        = 0;

                                //se agrega codigo para recuperación de caracteristica de plan TECNOLOGIA_FACTIBILIDAD
                                $strTecnologiaFactibilidad = null;
                                if("MD" === $prefijoEmpresa || "EN" === $prefijoEmpresa)
                                {
                                    if($strTipoOrdenServicio === "T")
                                    {
                                        if($boolEsISB)
                                        {
                                            $strNombreTecnicoTraslado   = $strNombreTecnicoSbTelcoHome;
                                            $strCodEmpresaTraslado      = $codEmpresa;
                                        }
                                        else
                                        {
                                            $strNombreTecnicoTraslado   = "INTERNET";
                                            $strCodEmpresaTraslado      = $idEmpresa;
                                        }

                                        $objProductoInternet    = $em->getRepository('schemaBundle:AdmiProducto')
                                                                     ->findOneBy(array("esPreferencia" => "SI",
                                                                                       "nombreTecnico" => $strNombreTecnicoTraslado,
                                                                                       "empresaCod"    => $strCodEmpresaTraslado,
                                                                                       "estado"        => "Activo"));

                                        if(is_object($objProductoInternet))
                                        {
                                            $objSpcTraslado = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio, 
                                                                                                                        "TRASLADO", 
                                                                                                                        $objProductoInternet);
                                            if(is_object($objSpcTraslado))
                                            {
                                                $intIdServicioOrigen        = $objSpcTraslado->getValor();
                                                $objServicioTecnicoOrigen   = $em->getRepository('schemaBundle:InfoServicioTecnico')
                                                                                 ->findOneByServicioId($intIdServicioOrigen);
                                                if(is_object($objServicioTecnicoOrigen))
                                                {
                                                    $intIdOltOrigen = $objServicioTecnicoOrigen->getElementoId();
                                                    $objOltOrigen   = $em_infraestructura->getRepository('schemaBundle:InfoElemento')
                                                                                         ->find($intIdOltOrigen);
                                                    if(is_object($objOltOrigen))
                                                    {
                                                        $strTecnologiaFactibilidad  = $objOltOrigen->getModeloElementoId()
                                                                                                   ->getMarcaElementoId()
                                                                                                   ->getNombreMarcaElemento();

                                                        $strTecnologiaOrigenTraslado = $strTecnologiaFactibilidad;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    $objInfoPlanCab            = ($entityServicio->getPlanId() ? $entityServicio->getPlanId() : null );

                                    if(is_object($objInfoPlanCab))
                                    {
                                        $objAdmiCaracteristica     = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                                                    ->findOneBy(array("descripcionCaracteristica" => "TECNOLOGIA_FACTIBILIDAD", 
                                                                                      "estado"                    => "Activo"));
                                        $objInfoPlanCaract     = $em->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                                    ->findOneBy(
                                                                                array(
                                                                                      "planId"           => $objInfoPlanCab->getId(),
                                                                                      "caracteristicaId" => $objAdmiCaracteristica->getId(),
                                                                                      "estado"           => $objInfoPlanCab->getEstado()
                                                                                     )
                                                                               );
                                        if($objInfoPlanCaract)
                                        {
                                            $strTecnologiaFactibilidad = $objInfoPlanCaract->getValor();
                                            $strObligaTecnologia       = "SI";
                                        }

                                        $objCaracteristicaGbps = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                                                    ->findOneBy(array("descripcionCaracteristica" => "GBPS", "estado" => "Activo"));
                                        $objPlanCaractGbps     = $em->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                                    ->findOneBy(
                                                                                array(
                                                                                      "planId"           => $objInfoPlanCab->getId(),
                                                                                      "caracteristicaId" => $objCaracteristicaGbps->getId(),
                                                                                      "valor"            => "SI",
                                                                                      "estado"           => $objInfoPlanCab->getEstado()
                                                                                     )
                                                                               );
                                        if(is_object($objPlanCaractGbps))
                                        {
                                            $arrayParametros['strPlanGbps'] = "SI";
                                        }
                                    }

                                    if($boolEsISB)
                                    {
                                       $arrayParametros['strEsISB'] = 'SI';
                                    }                                
                                }

                                $objInfoPuntoDatoAdicional = $this->emcom
                                                                  ->getRepository("schemaBundle:InfoPuntoDatoAdicional")
                                                                  ->findOneByPuntoId($entityServicio->getPuntoId()->getId());

                                if(is_object($objInfoPuntoDatoAdicional))
                                {
                                    $strDependeDeEdificio = $objInfoPuntoDatoAdicional->getDependeDeEdificio();
                                }

                                $arrayTecnologiasNoPermitidas = array();
                                if ($arrayParametros['strEsISB'] == 'SI' || $arrayParametros['strPlanGbps'] == 'SI')
                                {
                                    $strNombreParametroCab = "GBPS_TECNOLOGIAS_NO_PERMITIDAS";
                                    if ($arrayParametros['strEsISB'] == 'SI' )
                                    {
                                        $strNombreParametroCab = "ISB_TECNOLOGIAS_NO_PERMITIDAS";
                                    }

                                    //Se obtienen parametro para restringir factibilidad de servicios ISB en ciertas tecnologías
                                    $arrayParametrosDetTec = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                       ->getOne($strNombreParametroCab, 
                                                                                'COMERCIAL', 
                                                                                '',
                                                                                '',
                                                                                'TECNOLOGIAS',
                                                                                '',
                                                                                '',
                                                                                '');

                                    if($arrayParametrosDetTec && 
                                       count($arrayParametrosDetTec) > 0 &&
                                       isset($arrayParametrosDetTec['valor2']) && 
                                       !empty($arrayParametrosDetTec['valor2']))
                                    {
                                        $strTecnologiasNoPermitidas   = $arrayParametrosDetTec['valor2'];
                                        $arrayTecnologiasNoPermitidas = explode("|",$strTecnologiasNoPermitidas);
                                    }
                                }
                                /*Hago una consulta para obtener el objeto de la empresa en base al prefijo.*/
                                $objInfoEmpresa = $this->emcom->getRepository('schemaBundle:InfoEmpresaGrupo')
                                    ->findOneBy(array(
                                        'prefijo' => $prefijoEmpresa,
                                        'estado'  => 'Activo'
                                    ));
                                /*Genero un objeto con datos necesarios para poder evaluar la restricción.*/
                                $objParametrosRestriccion = array(
                                    'boolProductoEspecial'  =>  isset($boolProductoEspecial) ? $boolProductoEspecial : null,
                                    'objInfoEmpresa'        =>  $objInfoEmpresa
                                );
                                
                                //Llamaremos al microservicio para obtener la caja mas cercana con menor distancia
                                //desde ARCGIS
                                $booleanNuevoAlgoritmo = false;
                                $arrayParNuevoAlgoritmo = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->getOne('FACTIBILIDAD_NUEVO_ALGORITMO',
                                                                                'TECNICO',
                                                                                '',
                                                                                '',
                                                                                'BANDERA_NUEVO_ALGORITMO_FACTIBILIDAD',
                                                                                'SI',
                                                                                '',
                                                                                '',
                                                                                '');
                                if(isset($arrayParNuevoAlgoritmo) && !empty($arrayParNuevoAlgoritmo))
                                {
                                    $booleanNuevoAlgoritmo = true;
                                }
                                
                                /*Obtenemos el parametro desde la base.*/
                                $arrayNuevaFactibilidad  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                            ->getOne('VALIDACION_FACTIBILIDAD_NUEVO_ALGORITMO',
                                                                                     'TECNICO',
                                                                                     '',
                                                                                     '',
                                                                                     '',
                                                                                     '',
                                                                                     '',
                                                                                     '',
                                                                                     '',
                                                                                     '');

                                /*Validamos que haya llegado el parámetro mediante un ternario.*/
                                $arrayEmpresasPermitidas = !empty($arrayNuevaFactibilidad) ?
                                json_decode($arrayNuevaFactibilidad['valor4'], true) :
                                null;

                                $boolEmpresaPermitida = false;
                                /*Validamos que el contenido de la variable sea un array.*/
                                if (is_array($arrayEmpresasPermitidas))
                                {
                                    /*Validamos que el canton id este dentro del arreglo de ciudades/cantones permitidos.*/
                                    $boolEmpresaPermitida = in_array($prefijoEmpresa, $arrayEmpresasPermitidas);
                                }
                                                    
                                if ($booleanNuevoAlgoritmo && $boolEmpresaPermitida)
                                {
                                    $strLogin          = $entityServicio->getPuntoId()->getLogin();
                                    $arrayTokenCas     = $this->serviceTokenCas->generarTokenCas();
                                                                        
                                    $arrayParamsFactibilidad['longitud']           = $longitudPunto; 
                                    $arrayParamsFactibilidad['latitud']            = $latitudPunto; 
                                    $arrayParamsFactibilidad['dependeDeEdificio']  = $strDependeDeEdificio; 
                                    $arrayParamsFactibilidad['idEmpresa']          = $idEmpresa;
                                    $arrayParamsFactibilidad['prefijoEmpresa']     = $prefijoEmpresa;
                                    $arrayParamsFactibilidad['strUsrCreacion']     = $usrCreacion;
                                    $arrayParamsFactibilidad['strIpCreacion']      = $clientIp;
                                    $arrayParamsFactibilidad['strLogin']           = $strLogin;
                                    $arrayParamsFactibilidad['token']              = $arrayTokenCas['strToken'];
                                    $arrayParamsFactibilidad['booleanTipoRedGpon'] = 
                                      isset($arrayParametros['booleanTipoRedGpon']) ? $arrayParametros['booleanTipoRedGpon'] : false;
                                    $arrayParamsFactibilidad['intIdServicio']      = $entityServicio->getId();
          
                                    $arrayCajaMasCercana = $this->obtenerFactibilidadMS($arrayParamsFactibilidad);
                                    
                                    if ($arrayParametros['booleanTipoRedGpon'] && !empty($arrayCajaMasCercana['id_interface_elemento_conector']))
                                    {
                                        $arrayValidarVrfCamaras = $this->servicioTecnico->validarVrfCamaraGponMpls(
                                                    array("objPunto"               => $entityServicio->getPuntoId(),
                                                          "strTipoOrden"           => 'FACTIBILIDAD',
                                                          "intIdInterfaceConector" => $arrayCajaMasCercana['id_interface_elemento_conector'],
                                                          "strCodEmpresa"          => $intIdEmpresaOrigin,
                                                          "strPrefijoEmpresa"      => $strPrefifoEmpresaOrigin,
                                                          "strUsrCreacion"         => $usrCreacion,
                                                          "strIpCreacion"          => $clientIp));
                                        if($arrayValidarVrfCamaras['status'] == "ERROR")
                                        {
                                            $arrayCajaMasCercana['id_caja'] = 0;
                                            $arrayCajaMasCercana['nombre_caja'] = "";
                                            $arrayCajaMasCercana['estado_caja'] = "";
                                            $arrayCajaMasCercana['id_elemento_conector'] = 0;
                                            $arrayCajaMasCercana['nombre_elemento_conector'] = "";
                                            $arrayCajaMasCercana['estado_elemento_conector'] = "";
                                            $arrayCajaMasCercana['id_interface_elemento_conector'] = 0;
                                            $arrayCajaMasCercana['nombre_interface_elemento_conector'] = "";
                                            $arrayCajaMasCercana['distancia_caja'] = 0;
                                        }
                                    }
                                }
                                else
                                {
                                    $arrayParametros['objServicio']                  = $entityServicio;
                                    $arrayParametros['intIdEmpresa']                 = $idEmpresa;
                                    $arrayParametros['intLatitudPunto']              = $latitudPunto;
                                    $arrayParametros['intLongitudPunto']             = $longitudPunto;
                                    $arrayParametros['strTecnologiaFactibilidad']    = $strTecnologiaFactibilidad;
                                    $arrayParametros['strPrefijoEmpresa']            = $prefijoEmpresa;
                                    $arrayParametros['strDependeEdificio']           = $strDependeDeEdificio;
                                    $arrayParametros['arrayTecnologiasNoPermitidas'] = $arrayTecnologiasNoPermitidas;
                                    $arrayParametros['infoServicioService']          = $this;
                                    $arrayParametros['objParametrosRestriccion']     = $objParametrosRestriccion;
                                    $arrayParametros['servicioTecnico']              = $this->servicioTecnico;
                                    $arrayParametros['intIdEmpresaOrigin']           = $intIdEmpresaOrigin;
                                    $arrayParametros['strPrefijoEmpresaOrigin']      = $strPrefifoEmpresaOrigin;
                                    $arrayParametros['strUsrCreacion']               = $usrCreacion;
                                    $arrayParametros['strIpCreacion']                = $clientIp;
                                    $arrayCajaMasCercana                         = $em_infraestructura->getRepository('schemaBundle:InfoElemento')
                                                                                                          ->findCajaMasCercana($arrayParametros);
                                }
                                
                                //bloque de codigo para generar factibilidad automatica de TN
                                if ($prefijoEmpresa == "TN")
                                {
                                    //se recupera capacidad de ancho de banda de servicio para asignación de tipos de Interface de sw a aprovisionar
                                    $objServProdCaractCap1 = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                                       'CAPACIDAD1',
                                                                                                                     $entityServicio->getProductoId()
                                                                                                                      );

                                    if($objServProdCaractCap1)
                                    {
                                        /*Segun definiciones de GIS si el ancho de banda esta entre 0 y 81920 kbps se debe aprovisionar
                                          factibilidad en puertos Fa */
                                        if ( (int)$objServProdCaractCap1->getValor() > 0 &&  (int)$objServProdCaractCap1->getValor() <= 81920)
                                        {
                                            $strTipoInterface = 'Fa';
                                        }
                                        /*Segun definiciones de GIS si el ancho de banda es mayor a 81920 kbps se debe aprovisionar
                                          factibilidad en puertos Gi */
                                        else
                                        {
                                            $strTipoInterface = 'Gi';
                                        }
                                    }
                                    else
                                    {
                                        return "No existe Capacidad 1 en el servicio, imposible dar factibilidad";
                                    }
                                    //Verificación de enlaces y disponibilidad de puertos de SW, generación de información tecnica de factibilidad
                                    $arrayRespuestaFacTn = $this->generarFactibilidadTn($arrayCajaMasCercana,$strTipoInterface);

                                    if( $arrayRespuestaFacTn['tieneFactibilidad'] == "SI" )
                                    {
                                        $cajaMasCercana = $arrayRespuestaFacTn;
                                    }
                                }
                                else
                                {
                                    $cajaMasCercana = $arrayCajaMasCercana;
                                }

                                //Se obtiene el valor del metraje
                                $intMetrosDeDistancia = 250;
                                if(isset($booleanTipoRedGpon) && $booleanTipoRedGpon === true)
                                {
                                    $strDesParValorMetraje = 'VALOR DE LA DISTANCIA USADO PARA LAS CAJAS RED GPON';
                                }
                                else
                                {
                                    $strDesParValorMetraje = 'VALOR DE LA DISTANCIA USADO PARA LAS CAJAS';
                                }
                                $arrayParValorMetraje = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                            ->getOne('PROYECTO PARAMETRIZAR DISTANCIA DE CAJAS',
                                                                                    'TECNICO',
                                                                                    'PROCESO DE FACTIBILIDAD',
                                                                                    $strDesParValorMetraje,
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    '10');
                                if(isset($arrayParValorMetraje["valor1"]) && !empty($arrayParValorMetraje["valor1"]))
                                {
                                    $intMetrosDeDistancia = $arrayParValorMetraje["valor1"];
                                }
                                /*cuando el resultado de la busqueda es 0 setea el estado y la observacion para este caso 
                                  y no se realiza la factibilidad automatica */
                                if ($cajaMasCercana['id_caja'] == 0 && $cajaMasCercana['distancia_caja'] == 0)
                                {
                                    $estadoFactibilidad       = "PreFactibilidad";
                                    $observacionFactibilidad  = "Se envio una solicitud a GIS para la Factibilidad, ";
                                    if($arrayRespuestaFacTn['existeErrorEnEnlace'] == "SI")
                                    {
                                        $observacionFactibilidad .= "ya que existen problemas con uno o varios Enlaces";
                                    }
                                    else
                                    {
                                        $observacionFactibilidad .= "ya que no existe una caja cercana que cumpla"
                                                                 . " los $intMetrosDeDistancia mts ó no hay hilos disponibles";
                                    }
                                }

                                if ($cajaMasCercana['id_caja'] > 0)
                                {
                                    if ($cajaMasCercana['supera_distancia'] == "si")
                                    {
                                        $estadoFactibilidad       = "PreFactibilidad";
                                        $observacionFactibilidad  = "Se envio una solicitud a GIS para la Factibilidad, ";
                                        $observacionFactibilidad .= "ya que no existe una caja cercana que cumpla"
                                                                 . " los $intMetrosDeDistancia mts ó no hay hilos disponibles";
                                    }
                                    elseif (($cajaMasCercana['distancia_caja']) || ($cajaMasCercana['distancia_caja'] == 0))
                                    {
                                        $estadoFactibilidad      = "Factible";
                                        $observacionFactibilidad = "Servicio Factible<br>";

                                        $servicioTecnico = $em->getRepository('schemaBundle:InfoServicioTecnico')
                                                              ->findOneByServicioId($entityServicio->getId());

                                        if ($servicioTecnico)
                                        {

                                            $arrayElementoEquivalente = $em->getRepository('schemaBundle:AdmiParametroDet')
                                                                           ->getOne("FACTIBILIDAD_ELEMENTO_EQUIVALENTE",
                                                                                    "",
                                                                                    "",
                                                                                    "ELEMENTO_EQUIVALENTE",
                                                                                    $prefijoEmpresa,
                                                                                    "",
                                                                                    "",
                                                                                    "");
                                            if ($prefijoEmpresa == "MD" || $prefijoEmpresa == "TNP" || $prefijoEmpresa == "EN")
                                            {
                                                $arrayElementoContenedor = $em_infraestructura->getRepository('schemaBundle:InfoElemento')
                                                                                              ->getElementoPadre(
                                                                                                $cajaMasCercana['id_interface_elemento_conector'],
                                                                                                'INTERFACE',
                                                                                                $arrayElementoEquivalente['valor2']);
                                                if ($arrayElementoContenedor)
                                                {
                                                    $infoInterfaceElementoFactibilidad = $em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                            ->find($arrayElementoContenedor[0]
                                                                                                   ['IDINTERFACEELEMENTO']);
                                                }
                                                else
                                                {
                                                    $infoInterfaceElementoFactibilidad = " con mas de un Enlace ó con enlaces incorrectos." .
                                                                                         " Se envio una solicitud a GIS para la Factibilidad.";
                                                }

                                            }
                                            else
                                            {
                                                /*Si es TN entra por este flujo.*/
                                                $infoInterfaceElementoFactibilidad = $cajaMasCercana['objInterfaceSw'];
                                                //creo enlace entre SW y ODF disponible para generar factibilidad automatica

                                                $objTipoMedio = $em_infraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                                                                   ->findOneBy(array("codigoTipoMedio" => 'FO',
                                                                                                     "estado" => "Activo"));

                                                $objEnlace = new InfoEnlace();
                                                $objEnlace->setInterfaceElementoIniId($cajaMasCercana['objInterfaceSw']);
                                                $objEnlace->setInterfaceElementoFinId($cajaMasCercana['objInterfaceOdf']);
                                                $objEnlace->setTipoMedioId($objTipoMedio);
                                                $objEnlace->setTipoEnlace("PRINCIPAL");

                                                $objEnlace->setCapacidadInput(1);
                                                $objEnlace->setCapacidadOutput(1);
                                                $objEnlace->setUnidadMedidaInput("mbps");
                                                $objEnlace->setUnidadMedidaOutput("mbps");

                                                $objEnlace->setCapacidadIniFin(1);
                                                $objEnlace->setCapacidadFinIni(1);
                                                $objEnlace->setUnidadMedidaUp("mbps");
                                                $objEnlace->setUnidadMedidaDown("mbps");
                                                $objEnlace->setEstado("Activo");
                                                $objEnlace->setUsrCreacion($usrCreacion);
                                                $objEnlace->setFeCreacion(new \DateTime('now'));
                                                $objEnlace->setIpCreacion($clientIp);
                                                $em_infraestructura->persist($objEnlace);
                                                $em_infraestructura->flush();

                                                $objInterfaceSw  = $cajaMasCercana['objInterfaceSw'];
                                                $objInterfaceSw->setEstado("connected");
                                                $em_infraestructura->persist($objInterfaceSw);
                                                $em_infraestructura->flush();

                                                $objInterfaceOdf = $cajaMasCercana['objInterfaceOdf'];
                                                $objInterfaceOdf->setEstado("connected");
                                                $em_infraestructura->persist($objInterfaceOdf);
                                                $em_infraestructura->flush();
                                            }


                                            if (is_string($infoInterfaceElementoFactibilidad))
                                            {
                                                $estadoFactibilidad      = "PreFactibilidad";
                                                $observacionFactibilidad = "Caja " . $cajaMasCercana['nombre_caja']
                                                                           . $infoInterfaceElementoFactibilidad;
                                            }
                                            else
                                            {
                                                if ($infoInterfaceElementoFactibilidad)
                                                {
                                                    //obtengo datos de factibilidad
                                                    $objElementoDistribuidor         = $infoInterfaceElementoFactibilidad->getElementoId();
                                                    
                                                    if($booleanNuevoAlgoritmo && $boolEmpresaPermitida)
                                                    {
                                                        
                                                        $objInfoRelacionElmento = $em_infraestructura
                                                                ->getRepository('schemaBundle:InfoRelacionElemento')
                                                                ->findOneBy(array('elementoIdB' => $cajaMasCercana['id_elemento_conector'],
                                                                               'estado' => 'Activo'));

                                                        $intIdRelacionElementocontenedor = $objInfoRelacionElmento->getElementoIdA();
                                                        
                                                        
                                                        $objElementoInfo = $em
                                                                        ->getRepository('schemaBundle:InfoElemento')
                                                                        ->findOneby(array('id' => $cajaMasCercana['id_caja']));
                                                        
                                                        $intIdCajaInf =  $objElementoInfo->getId();
                                                        
                                                        if($intIdCajaInf != $intIdRelacionElementocontenedor)
                                                        {
                                                            
                                                            $strElementoContenedor = sprintf("%s", 
                                                                                    $em->getRepository('schemaBundle:InfoElemento')
                                                                                      ->find($intIdRelacionElementocontenedor));  
                                                        }
                                                        else
                                                        {
                                                            
                                                            $strElementoContenedor = sprintf("%s", 
                                                                                    $em->getRepository('schemaBundle:InfoElemento')
                                                                                      ->find($cajaMasCercana['id_caja']));  
                                                        }
                                                    }
                                                    else
                                                    {
                                                        $strElementoContenedor = sprintf("%s", 
                                                                                $em->getRepository('schemaBundle:InfoElemento')
                                                                                ->find($cajaMasCercana['id_caja']));    
                                                    }
                                                        
                                                        
                                                        
                                                    
                                                    

                                                    $elementoConector                = sprintf("%s", $em->getRepository('schemaBundle:InfoElemento')
                                                                                                        ->find($cajaMasCercana['id_elemento_conector']
                                                                                                              ));
                                                    $entityInterfaceElementoConector = $em->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                          ->find($cajaMasCercana['id_interface_elemento_conector']);

                                                    $datosNuevos = "Datos Nuevos:<br>";

                                                    if ($prefijoEmpresa == "MD" || $prefijoEmpresa == "EN" || 
                                                        ($prefijoEmpresa == "TNP" && (is_object($entityServicio->getPlanId()) || $boolEsISB))
                                                       )
                                                    {
                                                        $datosNuevos .= "Olt: " . $objElementoDistribuidor . "<br>";
                                                    }
                                                    else
                                                    {
                                                        $datosNuevos .= "Switch: " . $objElementoDistribuidor . "<br>";
                                                    }
                                                    $strTecnologiaDestinoTraslado = $objElementoDistribuidor->getModeloElementoId()
                                                                                                           ->getMarcaElementoId()
                                                                                                           ->getNombreMarcaElemento();
                                                    $datosNuevos .= "Marca: " . $strTecnologiaDestinoTraslado . "<br>";

                                                    if ($prefijoEmpresa == "MD" || $prefijoEmpresa == "EN" || 
                                                        ($prefijoEmpresa == "TNP" && (is_object($entityServicio->getPlanId()) || $boolEsISB))
                                                       )
                                                    {
                                                        $datosNuevos .= "Linea: " . $infoInterfaceElementoFactibilidad . "<br>";
                                                    }
                                                    else
                                                    {
                                                        $datosNuevos .= "Puerto: " . $infoInterfaceElementoFactibilidad . "<br>";
                                                    }

                                                    $datosNuevos .= "Caja: "  . $strElementoContenedor . "<br>";
                                                    $datosNuevos .= "Distancia: " . $cajaMasCercana['distancia_caja'] . "mts<br>";

                                                    if ($prefijoEmpresa == "MD" || $prefijoEmpresa == "EN" || 
                                                        ($prefijoEmpresa == "TNP" && (is_object($entityServicio->getPlanId()) || $boolEsISB))
                                                       )
                                                    {
                                                        $datosNuevos .= "Splitter: "     . $elementoConector . "<br>";
                                                        $datosNuevos .= "Int SPlitter: " . $entityInterfaceElementoConector->getNombreInterfaceElemento() ."<br>";
                                                    }
                                                    else
                                                    {
                                                        $datosNuevos .= "Cassette: "     . $elementoConector . "<br>";
                                                        $datosNuevos .= "Int Cassette: " . $entityInterfaceElementoConector->getNombreInterfaceElemento() ."<br>";
                                                    }

                                                    $observacionFactibilidad .=$datosNuevos;
                                                    //reservo una interface del splitter
                                                    $entityInterfaceElementoConector->setEstado('Factible');
                                                    $em->persist($entityInterfaceElementoConector);
                                                    $em->flush();
                                                    //guardo datos de factibilidad
                                                    $servicioTecnico->setElementoId($objElementoDistribuidor->getId());
                                                    $servicioTecnico->setInterfaceElementoId($infoInterfaceElementoFactibilidad->getId());
                                                    if($booleanNuevoAlgoritmo && $boolEmpresaPermitida)
                                                    {
                                                       if($intIdCajaInf != $intIdRelacionElementocontenedor)
                                                       {
                                                          $servicioTecnico->setElementoContenedorId($intIdRelacionElementocontenedor);  
                                                       }
                                                       else
                                                       {
                                                          $servicioTecnico->setElementoContenedorId($cajaMasCercana['id_caja']);   
                                                       }
                                                      
                                                    }else
                                                    {
                                                      $servicioTecnico->setElementoContenedorId($cajaMasCercana['id_caja']);  
                                                    }
                                                    
                                                    
                                                    $servicioTecnico->setElementoConectorId($cajaMasCercana['id_elemento_conector']);
                                                    $servicioTecnico->setInterfaceElementoConectorId($cajaMasCercana['id_interface_elemento_conector'
                                                                                                                    ]);
                                                    $em->persist($servicioTecnico);
                                                    $em->flush();
                                                    $boolFactibilidadOk = true;
                                                }
                                                else
                                                {
                                                    //validacion anterior eliminada por mucho error de GIS
                                                    $estadoFactibilidad = "PreFactibilidad";
                                                    $observacionFactibilidad  = "Se envio una solicitud a GIS para la Factibilidad, ";
                                                    $observacionFactibilidad .= "ya que no existe una caja cercana que cumpla los ".
                                                                                "$intMetrosDeDistancia mts ó no hay hilos disponibles";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            $em->getConnection()->rollback();
                                            return "Imposible dar Factibilidad , sin servicio tecnico. Favor notificar a sistemas";
                                        }
                                    }
                                }
                            }
                            else
                            {
                                $estadoFactibilidad = "PreFactibilidad";
                            }
                        }
                        else
                        {
                            $estadoFactibilidad = "PreFactibilidad";
                        }
                    }
                    //Si es Flujo de DATACENTER la Factibilidad se generara de Manera Manual
                    else if($strAdministra == 'DATACENTER')
                    {
                        $estadoFactibilidad = 'PreFactibilidad';
                        $boolGenerarTarea   = true;

                        //Si el INternet es de Clous o Hosting este pasa directamente a AsigandoTarea para asignacion de recursos de Red
                        if($strNombreTecnico == 'INTERNETDC' || $strNombreTecnico == 'DATOSDC' || $strNombreTecnico == 'INTERNET DC SDWAN'
                           || $strNombreTecnico == 'DATOS DC SDWAN' )
                        {
                            //Validar si la solucion posee hosting o housing para determinar flujo del servicio
                            $arrayTipoSoluciones = $this->servicioTecnico->getArrayInformacionTipoSolucionPorPreferencial($entityServicio);

                            if(!empty($arrayTipoSoluciones))
                            {
                                //Si existe pool de recursos pero no contiene housing el flujo del enlace pasara por Factibilidad Fisica
                                if($arrayTipoSoluciones['boolContienePool'] && !$arrayTipoSoluciones['boolContieneHousing'])
                                {
                                    $estadoFactibilidad = 'AsignadoTarea';

                                    //Se crear solicitud de Planificacion de manera directa dado que es lo requerido 
                                    //para asignacion de recursos de Red
                                    $entityTipoSolicitud    = $em->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                 ->findOneByDescripcionSolicitud("SOLICITUD PLANIFICACION");

                                    $observacionFactibilidad = 'Se crea solicitud de Planificación, servicio pasará a estado '
                                                             . '<b>AsignadoTarea</b> para '
                                                             . 'asignación de Recursos de Red de manera directa por ser POOL RECURSOS';
                                }
                            }
                        }

                        $boolEsProductoAlquilerServ  = $this->servicioTecnico->isContieneCaracteristica($entityServicio->getProductoId(),
                                                                                                        'ES_ALQUILER_SERVIDORES');

                        //Si el producto de DATACENTER es Alquiler de Servidores se generara una Factibilidad automatica
                        //caso contrario se generara una alerta indicando el mensaje
                        if($boolEsProductoAlquilerServ)
                        {                        
                            //Obtener los servidores contratados para verificar Factibilidad de los mismos
                            $arrayParametrosRecursos                   = array();
                            $arrayParametrosRecursos['intIdServicio']  = $entityServicio->getId();
                            $arrayParametrosRecursos['strTipoRecurso'] = 'TIPO ALQUILER SERVIDOR';

                            $arrayServidores = $em->getRepository("schemaBundle:InfoServicio")
                                                  ->getArrayCaracteristicasPorTipoYServicio($arrayParametrosRecursos);

                            if(!empty($arrayServidores))
                            {
                                $boolGenerarTarea       = false;
                                $strServerNoDisponibles = '';
                                $strServerAsignados     = '';

                                $strCiudad   = $this->servicioTecnico->getCiudadRelacionadaPorRegion($entityServicio,$codEmpresa);
                                $intIdCanton = 0;

                                if(!empty($strCiudad))
                                {
                                    $objCanton = $this->emcom->getRepository("schemaBundle:AdmiCanton")->findOneByNombreCanton($strCiudad);

                                    if(is_object($objCanton))
                                    {
                                        $intIdCanton     = $objCanton->getId();
                                    }
                                }

                                $arrayParametrosServidores                      = array();
                                $arrayParametrosServidores['servicioId']        = $entityServicio->getId();
                                $arrayParametrosServidores['cantonId']          = $intIdCanton;
                                $arrayParametrosServidores['empresaCod']        = $codEmpresa;
                                $arrayParametrosServidores['usrCreacion']       = $entityServicio->getUsrCreacion();
                                $arrayParametrosServidores['estado']            = 'Activo';
                                $arrayParametrosServidores['ipCreacion']        = $clientIp;
                                $arrayParametrosServidores['habilitaCommit']    = true;
                                $serviceInfoSolucion = $this->container->get('comercial.InfoSolucion');
                                $arrayRespuestaWs    = $serviceInfoSolucion->WsPostDc(
                                                                    array( 'strUser'      =>  $arrayParametros['strUser'],
                                                                           'strIp'        =>  $arrayParametros['strIp'],
                                                                           'strOpcion'    => 'factibilidaddc',
                                                                           'strEndPoint'  => 'crearFactibilidadServidor',
                                                                           'arrayRequest' =>  $arrayParametrosServidores));

                                if (!$arrayRespuestaWs['status'])
                                {
                                    throw new \Exception($arrayRespuestaWs['message']);
                                }

                                if ($arrayRespuestaWs['data'])
                                {
                                    return $arrayRespuestaWs['data'];
                                }
                            }
                            else
                            {
                                return "No existen registros del modelo de Servidor requerido";
                            }
                        } 
                    }
                    else
                    {
                        $estadoFactibilidad = 'Factible';

                        if($strAdministra=='EMPRESA')
                        {
                            $objRelacionPseudo = $em_infraestructura->getRepository('schemaBundle:InfoRelacionElemento')
                                                                    ->findOneBy(array('elementoIdA'   => $objElemento->getId(),
                                                                                      'estado'       => 'Activo' ));
                            if(is_object($objRelacionPseudo))
                            {
                                $objInterfaceElemento = $em_infraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                           ->findOneBy(array('elementoId'   => $objRelacionPseudo->getElementoIdB(),
                                                                                             'estado'       => 'not connect' ));
                                if(is_object($objInterfaceElemento))
                                {
                                    //lleno la info técnica
                                    if(is_object($servicioTecnico))
                                    {
                                        $servicioTecnico->setElementoId($objInterfaceElemento->getElementoId()->getId());
                                        $servicioTecnico->setInterfaceElementoId($objInterfaceElemento->getId());
                                        $em->persist($servicioTecnico);
                                        $em->flush();

                                        $observacionFactibilidad = 'Se asignó factibilidad automática: '
                                                                   .'<br> Elemento: '.$objInterfaceElemento->getElementoId()->getNombreElemento()
                                                                   .'<br> Interface Elemento: '.$objInterfaceElemento->getNombreInterfaceElemento();
                                    }                                
                                }
                                else
                                {
                                    //significa que no hay puertos en el sw del pseudo pe
                                    $estadoFactibilidad = "PreFactibilidad";                                
                                }

                            }
                        }
                        else//Si el edificio es adminitrado por el Cliente
                        {
                            if($ultimaMilla == 'SATELITAL')
                            {
                                $observacionFactibilidad = 'No se generó Factibilidad Automática, notificar a Sistemas';
                                $boolEsSatelital         = true;
                                $estadoFactibilidad      = $entityServicio->getEstado();//Servicio permanece como PreServicio

                                //Obtener el HUB Satelital disponible para generacion de Factibilidad
                                $arrayResultado = $em_infraestructura->getRepository("schemaBundle:InfoElemento")->getArrayElementosHubDisponibles();

                                if(!empty($arrayResultado))
                                {
                                    //Se obtiene el primer HUB en caso de existir mas de uno, el cual es ordenado de menor a mayor segun cantidad
                                    //de puertos disponibles ( HUB con menos puertos disponibles es usado para utilizar los puertos restantes )
                                    $arrayElemento = $arrayResultado[0];

                                    //Generar factibilidad automática en HUB
                                    $objElementoHub = $em_infraestructura->getRepository("schemaBundle:InfoElemento")
                                                                         ->find($arrayElemento['idElemento']);

                                    if(is_object($objElementoHub))
                                    {                                    
                                        //Se valida puertos disponibles para efecto de la factibilidad automatica sobre el HUB
                                        // Si la cantidad de puertos es el penultimo se notificara a Satelital via correo para su debida gestión
                                        if($arrayElemento['disponibles'] == 2)
                                        {
                                            //Generar notificacion a departamento satelital indicando que queda un puerto disponible para una proxima
                                            //activacion y debe gestionar un nuevo equipo
                                            $strMensaje = 'Alerta de Disponibilidad de Hub Satelital '.$objElementoHub->getNombreElemento().'';

                                            $this->serviceEnvioPlantilla->generarEnvioPlantilla($strMensaje,
                                                                                                array(),
                                                                                                'DISP_HUB_SAT',
                                                                                                array(),
                                                                                                $codEmpresa,null,null
                                                                                               );
                                        }

                                        $objInterfaceHub =  $em_infraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                               ->findOneBy(array('elementoId'            => $objElementoHub->getId(),
                                                                                                 'estado'                => 'not connect',
                                                                                                 ),array('id'            => 'ASC'));
                                        if(is_object($objInterfaceHub))
                                        {
                                            //lleno la info técnica
                                            if(is_object($servicioTecnico))
                                            {
                                                //Se validad si la capacidad de HUB soporta las nuevas capacidades del Servicios a ser
                                                //instalado
                                                //Se obtiene la capacidad maxima de MB que soporta el Equipo
                                                $objDetalleHub = $em_infraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                    ->findOneBy(array('elementoId'    => $objElementoHub->getId(),
                                                                                                      'detalleNombre' => 'MAXIMO_BW',
                                                                                                      'estado'        => 'Activo')
                                                                                               );

                                                $intMaximoBw               = 0;
                                                $boolContinuarFactibilidad = true;

                                                if(is_object($objDetalleHub))
                                                {
                                                    //Capacidad maxima del Hub
                                                    $intMaximoBw = intval($objDetalleHub->getDetalleValor());

                                                    $arrayCapacidades                 = array();
                                                    $arrayCapacidades['strElemento']  = $objElementoHub->getNombreElemento();
                                                    $arrayCapacidades['arrayEstados'] = array('Cancel','Eliminado','Anulado','Rechazada');
                                                    $arrayCapacidadesUsadas = $em_infraestructura
                                                                                               ->getRepository('schemaBundle:InfoElemento')
                                                                                               ->getResultadoCapacidadesPorEquipo($arrayCapacidades);
                                                    if(!empty($arrayCapacidadesUsadas))
                                                    {
                                                        $intCapacidadUsadaUp   = intval($arrayCapacidadesUsadas['totalCapacidad1']);
                                                        $intCapacidadUsadaDown = intval($arrayCapacidadesUsadas['totalCapacidad2']);

                                                        //Se obtiene la capacidad configurada en el Servicio
                                                        $objCaractCap1 = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio, 
                                                                                                                                   "CAPACIDAD1", 
                                                                                                                                   $entityServicio->
                                                                                                                                   getProductoId()
                                                                                                                                  );
                                                        $objCaractCap2 = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio, 
                                                                                                                                   "CAPACIDAD2", 
                                                                                                                                   $entityServicio->
                                                                                                                                   getProductoId()
                                                                                                                                  );
                                                        if(is_object($objCaractCap1) && is_object($objCaractCap2))
                                                        {
                                                            $intCap1 = intval($objCaractCap1->getValor());
                                                            $intCap2 = intval($objCaractCap2->getValor());

                                                            //Si la capacidad es sobrepasada se alerta al usuario
                                                            if( ($intMaximoBw < $intCapacidadUsadaUp   + $intCap1) ||
                                                                ($intMaximoBw < $intCapacidadUsadaDown + $intCap2))
                                                            {
                                                                $boolContinuarFactibilidad = false;
                                                                $observacionFactibilidad = 'La Capacidad configurada en el <b>HUB</b> '
                                                                                           . 'es SOBREPASADA con '
                                                                                           . 'la configuracion del Servicio, comunicarse con'
                                                                                           . ' Departamento Satelital';
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        $boolContinuarFactibilidad = false;
                                                        $observacionFactibilidad = 'No se pudo obtener la información de Capacidad Utilizada del '
                                                                                 . 'Hub Satelital, notificar a Sistemas';
                                                    }
                                                }
                                                else
                                                {
                                                    $boolContinuarFactibilidad = false;
                                                    $observacionFactibilidad = 'El Hub Satelital no tiene configurada la Capacidad Maxima'
                                                                               . ' de Ancho de Banda disponible,'
                                                                               . ' comunicarse con Departamento Satelital';
                                                }

                                                if($boolContinuarFactibilidad)
                                                {
                                                    $servicioTecnico->setElementoId($objElementoHub->getId());
                                                    $servicioTecnico->setInterfaceElementoId($objInterfaceHub->getId());
                                                    $em->persist($servicioTecnico);
                                                    $em->flush();

                                                    $objInterfaceHub->setEstado('connected');
                                                    $em_infraestructura->persist($objInterfaceHub);
                                                    $em_infraestructura->flush();

                                                    $observacionFactibilidad = 
                                                                       'Se asignó factibilidad automática: '
                                                                       .'<br><b>Elemento ( Hub Satelital ):</b> '.$objElementoHub->getNombreElemento()
                                                                       .'<br><b>Interface Hub:</b> '.$objInterfaceHub->getNombreInterfaceElemento();

                                                    $estadoFactibilidad = 'Factible';
                                                }
                                            }      
                                        }
                                    }
                                }
                                else
                                {
                                    $observacionFactibilidad = 'No existen <b>HUB SATELITALES</b> con puertos Disponibles, por favor comunicarse con '
                                                             . 'Departamento Satelital';
                                }
                            }
                            else
                            {
                                //Se establece factibilidad manual siempre y cuando las condiciones de pseudope, no se cumplan o no esten
                                //generadas correctamente por parte de Networking o no existan puertos disponibles ( logicamente ) registrados en el telcos
                                $estadoFactibilidad = 'PreFactibilidad';

                                if(is_object($entityServicio->getProductoId()) &&
                                        $entityServicio->getProductoId()->getNombreTecnico() === 'DATOS FWA')
                                {
                                    $estadoFactibilidad     = 'AsignadoTarea';
                                    $entityTipoSolicitud    = $em->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                                     ->findOneByDescripcionSolicitud("SOLICITUD INFO TECNICA");
                                }
                                else
                                {
                                    //Si el adminstrador del EDIFICIO es CLIENTE se genera la Factibilidad de manera automatica asignando
                                    //un puerto desocupado del SW virtual atado al pseudoPe

                                    $objRelacionElemento = $em_infraestructura->getRepository("schemaBundle:InfoRelacionElemento")
                                                                              ->findOneBy(array('elementoIdA' => $objElemento->getId(),
                                                                                                'estado'      => 'Activo',
                                                                                                'observacion' => 'Pseudo Pe contiene elemento')
                                                                         );
                                    if(is_object($objRelacionElemento))
                                    {
                                        $intPseudoPe = $objRelacionElemento->getElementoIdB();

                                        $arraySwitches = $this->servicioTecnico->getSwitchesByPe($intPseudoPe);

                                        if(count($arraySwitches)>0)
                                        {
                                            //Se obtiene el primer y unico registro devuelto por NW dado que para esquema PseudoPe siempre
                                            //habra una relacion uno a uno entre el PseudoPE y el Switch Virtual
                                            $strNombreSwitchVirtual = $arraySwitches[0]['sw'];

                                            $objSwitchVirtual = $em_infraestructura->getRepository("schemaBundle:InfoElemento")
                                                                                   ->findOneByNombreElemento($strNombreSwitchVirtual);

                                            if(is_object($objSwitchVirtual))
                                            {
                                                //Obtiene una interface not connect disponible para referenciar la Factibilidad
                                                $objInterfaceElemento = $em_infraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                   ->findOneBy(array('elementoId'   => $objSwitchVirtual->getId(),
                                                                                                     'estado'       => 'not connect' ));
                                                if(is_object($objInterfaceElemento))
                                                {
                                                    //lleno la info técnica
                                                    if(is_object($servicioTecnico))
                                                    {
                                                        $servicioTecnico->setElementoId($objSwitchVirtual->getId());
                                                        $servicioTecnico->setInterfaceElementoId($objInterfaceElemento->getId());
                                                        $em->persist($servicioTecnico);
                                                        $em->flush();

                                                        $objInterfaceElemento->setEstado('connected');
                                                        $em_infraestructura->persist($objInterfaceElemento);
                                                        $em_infraestructura->flush(); 

                                                        $observacionFactibilidad = 
                                                                           'Se asignó factibilidad automática: '
                                                                           .'<br><b>Elemento ( Switch Virtual ):</b> '
                                                                           .$objSwitchVirtual->getNombreElemento()
                                                                           .'<br><b>Interface Elemento:</b> '
                                                                           .$objInterfaceElemento->getNombreInterfaceElemento();

                                                        //Se determina la Factibilidad
                                                        $objAdmiCaractTipoFact = $em->getRepository('schemaBundle:AdmiCaracteristica')
                                                                                    ->findOneBy( array("descripcionCaracteristica" => 
                                                                                                                                'TIPO_FACTIBILIDAD',
                                                                                                       "estado"                    => "Activo"));
                                                        if(is_object($objAdmiCaractTipoFact))
                                                        {
                                                            $objAdmiProdCaractTipoFact = $em->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                                            ->findOneBy(array("caracteristicaId"=> 
                                                                                                                               $objAdmiCaractTipoFact
                                                                                                                               ->getId(),
                                                                                                              "productoId"      => 
                                                                                                                                 $entityServicio
                                                                                                                                 ->getProductoId())
                                                                                                          );
                                                            if(is_object($objAdmiProdCaractTipoFact))
                                                            {
                                                                $infoServProdCaractCapacidad1 = new InfoServicioProdCaract();
                                                                $infoServProdCaractCapacidad1->setServicioId($entityServicio->getId());
                                                                $infoServProdCaractCapacidad1->setProductoCaracterisiticaId($objAdmiProdCaractTipoFact
                                                                                                                            ->getId());
                                                                $infoServProdCaractCapacidad1->setValor('DIRECTO');
                                                                $infoServProdCaractCapacidad1->setFeCreacion(new \DateTime('now'));
                                                                $infoServProdCaractCapacidad1->setUsrCreacion($usrCreacion);
                                                                $infoServProdCaractCapacidad1->setEstado("Activo");
                                                                $em->persist($infoServProdCaractCapacidad1);
                                                                $em->flush();
                                                            }
                                                        }

                                                        $estadoFactibilidad = 'Factible';
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if ($entityServicio)
                {
                    $arrayTipoFactFiltrar       = array('PreFactibilidad','Factible','AsignadoTarea');                  
                    
                    $arrayParametrosSolicitudes = array('servicioId'        => $entityServicio->getId(),
                                                        'estado'            => $arrayTipoFactFiltrar);
                    
                    $entityDetalleSolFac        = $em->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                     ->findOneBy($arrayParametrosSolicitudes);
               
                    if((isset($entityDetalleSolFac) || !empty($entityDetalleSolFac) || is_object($entityDetalleSolFac)))
                    {
                        $em->getConnection()->rollback();
                        $em_infraestructura->getConnection()->rollback();
                    }
                    else
                    {
                        $entityServicio->setEstado($estadoFactibilidad);
                        $em->persist($entityServicio);
                        $em->flush();                    
                        //GUARDAR INFO SERVICIO HISTORIAL
                        if($arrayCajaMasCercana['pasaNuevoAlgoritmo'] == 'SI' && $boolEmpresaPermitida)
                        {  
                            $strObservacionFactic= 'paso por el nuevo algoritmo factbilidad';
                                                        
                            $entityServicioHistorial = new InfoServicioHistorial();
                            $entityServicioHistorial->setServicioId($entityServicio);
                            $entityServicioHistorial->setIpCreacion($clientIp);
                            $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
                            $entityServicioHistorial->setUsrCreacion($usrCreacion);
                            $entityServicioHistorial->setObservacion($strObservacionFactic);
                            $entityServicioHistorial->setEstado('Factible');
                            $entityServicioHistorial->setAccion('algoritmoFactibilidad');
                            $em->persist($entityServicioHistorial);
                            $em->flush();
                        }

                        $entityServicioHistorial = new InfoServicioHistorial();
                        $entityServicioHistorial->setServicioId($entityServicio);
                        $entityServicioHistorial->setIpCreacion($clientIp);
                        $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
                        $entityServicioHistorial->setUsrCreacion($usrCreacion);
                        $entityServicioHistorial->setObservacion($observacionFactibilidad);
                        $entityServicioHistorial->setEstado($estadoFactibilidad);
                        $em->persist($entityServicioHistorial);  
                        
                        $em->flush();

                        if(is_object($entityServicio->getProductoId()) && $entityServicio->getProductoId()->getNombreTecnico() === 'DATOS FWA')
                        {
                            $arrayParametrosSolicitudes = array('servicioId'        => $entityServicio->getId(),
                                                                'estado'            => 'Pendiente');

                            $objDetalleSolFWA           = $em->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                             ->findOneBy($arrayParametrosSolicitudes);

                            if(is_object($objDetalleSolFWA))
                            {
                                //Reasignar la tarea al dpto de L2.
                                $objServProdCaractTipoFact = $this->servicioTecnico
                                                                  ->getServicioProductoCaracteristica($entityServicio,
                                                                                                      'TAREA_FWA',
                                                                                                       $entityServicio->getProductoId());
                                if($objServProdCaractTipoFact)
                                {
                                    $arrayDetalle       = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")
                                                                          ->findByDetalleSolicitudId($objDetalleSolFWA->getId());
                                    $strRegionServicio  = "";
                                    if(is_object($entityServicio->getPuntoId()))
                                    {
                                        $intIdOficinaServicio   = is_object($entityServicio->getPuntoId()->getPuntoCoberturaId()) ? 
                                                                            $entityServicio->getPuntoId()->getPuntoCoberturaId()->getOficinaId() : 0;
                                        $objOficinaServicio     = $this->emcom->getRepository("schemaBundle:InfoOficinaGrupo")
                                                                              ->find($intIdOficinaServicio);
                                        if(is_object($objOficinaServicio))
                                        {
                                            $objCantonServicio = $this->emcom->getRepository("schemaBundle:AdmiCanton")
                                                                             ->find($objOficinaServicio->getCantonId());
                                            if(is_object($objCantonServicio))
                                            {
                                                $strRegionServicio = $objCantonServicio->getRegion();
                                            }
                                        }
                                    }
                                    //Obtengo el rol del jefe del departamento.
                                    $arrayDescripcionRol   = $em->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('ASIGNAR_TAREA_JEFES',
                                                                         '',
                                                                         '',
                                                                         '',
                                                                         $strRegionServicio,
                                                                         'IPCCL2',
                                                                         '',
                                                                         '',
                                                                         '',
                                                                         '');
                                    if(!empty($arrayDescripcionRol) && !empty($arrayDescripcionRol["valor2"]))
                                    {
                                        $strDescripcionRol = (!empty($arrayDescripcionRol["valor3"])) ? $arrayDescripcionRol["valor3"] : 
                                                             $strDescripcionRol;
                                    }
                                    $arrayParametrosResponsable = array(
                                                                        'idEmpresa'                     => $idEmpresa == '26'?'10':$idEmpresa,
                                                                        'estado'                        => 'Activo',
                                                                        'strDescripcionRol'             => $strDescripcionRol,
                                                                        'strDescripcionTipoRol'         => 'Empleado',
                                                                        'strNombreDepartamento'         => 'IPCCL2',
                                                                        'strRegionEmpleado'             => $strRegionServicio,
                                                                        'esJefe'                        => 'S',
                                                                        'strDescripcionFormaContacto'   => 'Correo Electronico'
                                                                );
                                    $arrayRespuestaResponsables = $this->emcom->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                       ->getResultadoPersonaEmpresaRolPorCriterios($arrayParametrosResponsable);
                                    $arrayResultadoResponsables  = $arrayRespuestaResponsables['resultado'];
                                    if(empty($arrayResultadoResponsables[0]))
                                    {
                                        throw new \Exception("No se ha podido encontrar el Jefe para la asignación de tarea");
                                    }
                                    else
                                    {
                                        $arrayJefeResponsable = $arrayResultadoResponsables[0];
                                    }
                                    if(!empty($arrayDetalle))
                                    {
                                        //Obtener el departamento de quien reasigna la tarea.
                                        $arrayDetalleAsignacion    = $this->emSoporte->getRepository("schemaBundle:InfoDetalleAsignacion")
                                                                                     ->findByDetalleId($arrayDetalle[0]->getId());
                                        $arrayReasignar = array('idEmpresa'             => $idEmpresa,
                                                                'prefijoEmpresa'        => $prefijoEmpresa,
                                                                'id_detalle'            => $arrayDetalle[0]->getId(),
                                                                'motivo'                => 'Aprovisionamiento del producto FWA',
                                                                'departamento_asignado' => $arrayJefeResponsable['idDepartamento'],
                                                                'empleado_asignado'     => $arrayJefeResponsable['idPersona'].'@@'.
                                                                                           $arrayJefeResponsable['idPersonaEmpresaRol'],
                                                                'tipo_asignado'         => 'EMPLEADO', //EMPLEADO
                                                                'fecha_ejecucion'       => (new \DateTime('now'))->format('Y-m-d H:i'), //fechaSistema
                                                                'id_departamento'       => $arrayDetalleAsignacion[0]->getAsignadoId(),
                                                                'clientIp'              => $clientIp,
                                                                'user'                  => $usrCreacion,
                                                               );
                                        /* @var $soporteService \telconet\soporteBundle\Service\SoporteService */
                                        $arrayResultado = $this->serviceSoporte->reasignarTarea($arrayReasignar);
                                        $intTareaFWA    = $objServProdCaractTipoFact->getValor();
                                        if($arrayResultado['success'])
                                        {
                                            $observacionFactibilidad    = $arrayResultado['asignado'].'<br>'.
                                                                          "Tarea id. <b>".$intTareaFWA."</b>";
                                        }
                                    }
                                }
                                else
                                {
                                    throw new \Exception("No se encontró la tarea del producto FWA");
                                }
                                $strObservacionFWA = "Se procedio a dar factibilidad y se asigna la tarea ".$intTareaFWA." al dpto L2";
                                $objDetalleSolFWA->setEstado('Finalizada');
                                $em->persist($objDetalleSolFWA);
                                $em->flush();

                                //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                                $entityDetalleSolHist = new InfoDetalleSolHist();
                                $entityDetalleSolHist->setDetalleSolicitudId($objDetalleSolFWA);
                                $entityDetalleSolHist->setIpCreacion($clientIp);
                                $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                $entityDetalleSolHist->setUsrCreacion($usrCreacion);
                                $entityDetalleSolHist->setObservacion($strObservacionFWA);
                                $entityDetalleSolHist->setEstado('Finalizada');
                                $em->persist($entityDetalleSolHist);
                                $em->flush();
                            }
                        }
                        $entitySolicitud = new InfoDetalleSolicitud();
                        $entitySolicitud->setServicioId($entityServicio);
                        $entitySolicitud->setTipoSolicitudId($entityTipoSolicitud);
                        $entitySolicitud->setEstado($estadoFactibilidad);
                        $entitySolicitud->setUsrCreacion($usrCreacion);
                        $entitySolicitud->setObservacion($observacionFactibilidad);
                        $entitySolicitud->setFeCreacion(new \DateTime('now'));
                        $em->persist($entitySolicitud);
                        $em->flush();

                        //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                        $entityDetalleSolHist = new InfoDetalleSolHist();
                        $entityDetalleSolHist->setDetalleSolicitudId($entitySolicitud);
                        $entityDetalleSolHist->setIpCreacion($clientIp);
                        $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                        $entityDetalleSolHist->setUsrCreacion($usrCreacion);
                        $entityDetalleSolHist->setObservacion($observacionFactibilidad);
                        $entityDetalleSolHist->setEstado($estadoFactibilidad);
                        $em->persist($entityDetalleSolHist);
                        $em->flush();

                        /***ACTUALIZAR ESTADO DEL SERVICIO ADICIONAL***/
                        if(is_object($entityServicio) && is_object($entityServicio->getProductoId()))
                        {
                            $arrayParServAdd = array(
                                "intIdProducto"      => $entityServicio->getProductoId()->getId(),
                                "intIdServicio"      => $entityServicio->getId(),
                                "strNombreParametro" => 'CONFIG_PRODUCTO_DATOS_SAFE_CITY',
                                "strUsoDetalles"     => 'AGREGAR_SERVICIO_ADICIONAL',
                            );
                            $arrayProdCaracConfProAdd  = $em->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                    ->getServiciosPorProdAdicionalesSafeCity($arrayParServAdd);
                            if($arrayProdCaracConfProAdd['status'] == 'OK' && count($arrayProdCaracConfProAdd['result']) > 0)
                            {
                                //obtengo el servicio tecnico del servicio principal
                                $objSerTecPri = $em->getRepository('schemaBundle:InfoServicioTecnico')
                                                                        ->findOneByServicioId($entityServicio->getId());
                                foreach($arrayProdCaracConfProAdd['result'] as $arrayServicioConfProAdd)
                                {
                                    $arrayEstadosSerProAdd = array('Pre-servicio','Pendiente');
                                    $objServicioConfProAdd = $em->getRepository('schemaBundle:InfoServicio')
                                                                    ->createQueryBuilder('p')
                                                                    ->where("p.id = :idServicio")
                                                                    ->andWhere("p.estado IN (:estados)")
                                                                    ->setParameter('idServicio', $arrayServicioConfProAdd['idServicio'])
                                                                    ->setParameter('estados',    array_values($arrayEstadosSerProAdd))
                                                                    ->setMaxResults(1)
                                                                    ->getQuery()
                                                                    ->getOneOrNullResult();
                                    if(is_object($objServicioConfProAdd))
                                    {
                                        //actualizar estado del servicio adicional
                                        $objServicioConfProAdd->setEstado($entityServicio->getEstado());
                                        $em->persist($objServicioConfProAdd);
                                        $em->flush();
                                        //guardar historial del servicio adicional
                                        $objSerHisConfProAdd = new InfoServicioHistorial();
                                        $objSerHisConfProAdd->setServicioId($objServicioConfProAdd);
                                        $objSerHisConfProAdd->setIpCreacion($clientIp);
                                        $objSerHisConfProAdd->setFeCreacion(new \DateTime('now'));
                                        $objSerHisConfProAdd->setUsrCreacion($usrCreacion);
                                        $objSerHisConfProAdd->setObservacion($observacionFactibilidad);
                                        $objSerHisConfProAdd->setEstado($objServicioConfProAdd->getEstado());
                                        $em->persist($objSerHisConfProAdd);
                                        $em->flush();
                                        //se genera la solicitud para los servicios adicionales
                                        $objSolicitudProAdd = new InfoDetalleSolicitud();
                                        $objSolicitudProAdd->setServicioId($objServicioConfProAdd);
                                        $objSolicitudProAdd->setTipoSolicitudId($entityTipoSolicitud);
                                        $objSolicitudProAdd->setEstado($estadoFactibilidad);
                                        $objSolicitudProAdd->setUsrCreacion($usrCreacion);
                                        $objSolicitudProAdd->setObservacion($observacionFactibilidad);
                                        $objSolicitudProAdd->setFeCreacion(new \DateTime('now'));
                                        $em->persist($objSolicitudProAdd);
                                        $em->flush();
                                        //guardar historial de la solicitud para los servicios adicionales
                                        $objDetSolHistProdAdd = new InfoDetalleSolHist();
                                        $objDetSolHistProdAdd->setDetalleSolicitudId($objSolicitudProAdd);
                                        $objDetSolHistProdAdd->setIpCreacion($clientIp);
                                        $objDetSolHistProdAdd->setFeCreacion(new \DateTime('now'));
                                        $objDetSolHistProdAdd->setUsrCreacion($usrCreacion);
                                        $objDetSolHistProdAdd->setObservacion($observacionFactibilidad);
                                        $objDetSolHistProdAdd->setEstado($estadoFactibilidad);
                                        $em->persist($objDetSolHistProdAdd);
                                        $em->flush();
                                        //verificar servicio tecnico
                                        $objServTecConfProAdd = $em->getRepository('schemaBundle:InfoServicioTecnico')
                                                                    ->findOneByServicioId($objServicioConfProAdd->getId());
                                        if(is_object($objSerTecPri) && is_object($objServTecConfProAdd))
                                        {
                                            //actualizo servicio tecnico
                                            $objServTecConfProAdd->setElementoId($objSerTecPri->getElementoId());
                                            $objServTecConfProAdd->setInterfaceElementoId($objSerTecPri->getInterfaceElementoId());
                                            $objServTecConfProAdd->setElementoContenedorId($objSerTecPri->getElementoContenedorId());
                                            $objServTecConfProAdd->setElementoConectorId($objSerTecPri->getElementoConectorId());
                                            $objServTecConfProAdd->setInterfaceElementoConectorId($objSerTecPri->getInterfaceElementoConectorId());
                                            $em->persist($objServTecConfProAdd);
                                            $em->flush();
                                        }
                                    }
                                }
                            }
                        }
                        /***FIN ACTUALIZAR ESTADO DEL SERVICIO ADICIONAL***/
                        if($prefijoEmpresa == "TN"&&is_numeric($cajaMasCercana['distancia_caja'])&&$cajaMasCercana['distancia_caja']>0)
                        {
                            $objValorMetraje = $this->serviceGeneral
                            ->getServicioProductoCaracteristica($entityServicio,
                                                                'METRAJE FACTIBILIDAD',
                                                                $entityServicio->getProductoId());   
                            if(!is_object($objValorMetraje))
                            {
                                $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                                    $entityServicio->getProductoId(),
                                                                    'METRAJE FACTIBILIDAD',
                                                                    $cajaMasCercana['distancia_caja'],
                                                                    $usrCreacion
                                                                    );
                            }
                        }
                        //Si genera tarea automatica adicional
                        if($boolGenerarTarea)
                        {
                            $strObservacion    = '';
                            $strLogin          = $entityServicio->getPuntoId()->getLogin();
                            $boolNotificaGen   = false;
                            $strTipoSolucion   = '';

                            $arrayParametrosSolucion                  = array();
                            $arrayParametrosSolucion['objServicio']   = $entityServicio;
                            $arrayParametrosSolucion['strCodEmpresa'] = $codEmpresa;
                            $strSolucion       = $this->servicioTecnico->getNombreGrupoSolucionServicios($arrayParametrosSolucion);

                            $strNombreCanton   = $this->servicioTecnico->getCiudadRelacionadaPorRegion($entityServicio,$codEmpresa);

                            //Crear Tarea automatica
                            //HOUSING
                            //Notificacion al BOC ( Alquiler de Espacio housing )
                            if($strNombreTecnico == 'HOUSING')
                            {
                                $strNombreParametro = 'HOUSING TAREAS POR DEPARTAMENTO';
                                $strDescripcion     = 'FACTIBILIDAD RACKS';
                                $strObservacion     = 'Tarea Automática: Se solicita generación de Factibilidad de <b>HOUSING</b><br>'.
                                                      '<b>Login : </b> '.$strLogin.'<br>'.$strSolucion;

                                $boolNotificaGen    = true;
                                $strTipoSolucion    = 'HOUSING';
                            }

                            if($strNombreTecnico == 'HOSTING')
                            {
                                $boolContieneAlquiler = false;
                                $strNombreParametro   = 'HOSTING TAREAS POR DEPARTAMENTO';
                                
                                $objSolucionDetServicio =  $this->emcom->getRepository('schemaBundle:InfoSolucionDet')
                                                                        ->findOneBy(array( "servicioId"     => $entityServicio->getId()));
                                if(is_object($objSolucionDetServicio))
                                {
                                    //Obtengo el número de solución y subtipo de solución
                                    $intNumeroSolucion      = $objSolucionDetServicio->getSolucionCabId()->getNumeroSolucion();
                                    $strSubTipoSolucion        = $objSolucionDetServicio->getTipoSolucion();
                                    //Busco todos los productos ligados a este Subtipo y Solucion y verifico si existe producto de Alquiler
                                    //de Servidores para poder validar continuidad de factibilidad ( requerido )
                                    $arrayServicios = $this->emcom->getRepository("schemaBundle:InfoServicio")
                                                                  ->getArrayServiciosPorSolucionYTipoSolucion($intNumeroSolucion,
                                                                                                              $strSubTipoSolucion
                                                                                                             );

                                    //Recorro los servicios atachados a el mismo tipo de subsolucion del servicios a generar Factibilidad
                                    foreach($arrayServicios as $objServicioSubSolucion)
                                    {
                                        $objProductoSubSolucion = $objServicioSubSolucion->getProductoId();

                                        if($objServicioSubSolucion != $entityServicio)
                                        {
                                            $boolContieneAlquiler  = $this->servicioTecnico
                                                                    ->isContieneCaracteristica($objProductoSubSolucion,'ES_ALQUILER_SERVIDORES');

                                            if($boolContieneAlquiler)
                                            {
                                                break;
                                            }
                                        }
                                    }

                                    //Hosting - Notificacion a IT ( POOL DE RECURSOS )
                                    if($boolContieneAlquiler)
                                    {
                                        $strDescripcion     = 'FACTIBILIDAD POOL RECURSOS - ALQ';
                                        $strObservacion     = 'Tarea Automática: Se solicita generación de Factibilidad HOSTING '
                                                            . '( STORAGE para Alquiler de Servidores )<br> '
                                                            . '<b>Login : </b> '.$strLogin.'<br>'.$strSolucion;
                                    }
                                    else
                                    {                                
                                        $strDescripcion     = 'FACTIBILIDAD POOL RECURSOS COMPLETOS';
                                        $strObservacion     = 'Tarea Automática: Se solicita generación de Factibilidad HOSTING ( POOL de Recursos )<br> '
                                                            . '<b>Login : </b> '.$strLogin.'<br>'.$strSolucion;
                                    }

                                    $boolNotificaGen        = true;
                                    $strTipoSolucion        = 'HOSTING ( CLOUD IAAS )';

                                }
                                else
                                {
                                    return 'Servicio no posee informacion de Solución registrada correctamente, notificar a Sistemas';
                                }
                            }

                            //Internet DC - Notificacion a IT
                            if($strNombreTecnico == 'INTERNETDC' || $strNombreTecnico == 'DATOSDC' || $strNombreTecnico == 'INTERNET DC SDWAN'
                               || $strNombreTecnico == 'DATOS DC SDWAN' )
                            {
                                if(!empty($arrayTipoSoluciones))
                                {
                                    //si la solucion contiene housing de manera obligada de ir a dar factibilidad de Nexus
                                    if($arrayTipoSoluciones['boolContieneHousing'])
                                    {
                                        $strNombreParametro = 'HOUSING TAREAS POR DEPARTAMENTO';
                                        $strDescripcion     = 'FACTIBILIDAD INTERNET DC';
                                        $strProducto        = $strDescripcionProducto;
                                        $strObservacion     = 'Tarea Automática: Se solicita generación de Factibilidad de '
                                                            . '<b>'.$strProducto.' (HOUSING)</b><br> '.
                                                              '<b>Login : </b> '.$strLogin.'<br>'.$strSolucion;
                                    }
                                    else
                                    {
                                        $strNombreParametro = 'HOSTING TAREAS POR DEPARTAMENTO';

                                        if($arrayTipoSoluciones['boolContieneAlquiler']) //hosting pool recursos para Alquiler de Servidores
                                        {
                                            $strDescripcion     = 'ASIGNAR RECURSOS RED ALQUILER SERVIDORES';
                                            $strObservacion     = 'Tarea Automática: Se solicita Asignación de Recursos de '
                                                                . 'Red <b>INTERNET DC (HOSTING - Alquiler Servidores)</b><br> '
                                                                . '<b>Login : </b> '.$strLogin.'<br>'.$strSolucion;
                                        }
                                        else //hosting pool de recursos para maquinas virtuales
                                        {
                                            $strDescripcion     = 'INSTALACION FO';
                                            $strObservacion     = 'Tarea Automática: Se solicita Asignación de Recursos de '
                                                                . 'Red <b>INTERNET DC (HOSTING)</b><br> '
                                                                . '<b>Login : </b> '.$strLogin.'<br>'.$strSolucion;
                                        }
                                    }
                                }
                                else
                                {
                                    return 'Servicio de Enlace no contiene relaciones con servicios CORE ( Housing o IAAS ), notificar a Sistemas';
                                }
                            }

                            $intIdCanton      = 0;

                            if(!empty($strNombreCanton))
                            {
                                $objCanton = $this->emcom->getRepository("schemaBundle:AdmiCanton")->findOneByNombreCanton($strNombreCanton);

                                if(is_object($objCanton))
                                {
                                    $intIdCanton     = $objCanton->getId();
                                }
                            }

                            $arrayInfoEnvio   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->get($strNombreParametro, 
                                                                  'SOPORTE', 
                                                                  '',
                                                                  $strDescripcion,
                                                                  $strNombreCanton, 
                                                                  '',
                                                                  '',
                                                                  '', 
                                                                  '', 
                                                                  $codEmpresa);

                            //Tarea al BOC
                            $arrayParametrosEnvioPlantilla                      = array();
                            $arrayParametrosEnvioPlantilla['strObservacion']    = $strObservacion;
                            $arrayParametrosEnvioPlantilla['strUsrCreacion']    = $usrCreacion;
                            $arrayParametrosEnvioPlantilla['strIpCreacion']     = $clientIp;
                            $arrayParametrosEnvioPlantilla['intDetalleSolId']   = $entitySolicitud->getId();
                            $arrayParametrosEnvioPlantilla['strTipoAfectado']   = 'Cliente';
                            $arrayParametrosEnvioPlantilla['objPunto']          = $entityServicio->getPuntoId();
                            $arrayParametrosEnvioPlantilla['strCantonId']       = $intIdCanton;
                            $arrayParametrosEnvioPlantilla['strEmpresaCod']     = $codEmpresa;
                            $arrayParametrosEnvioPlantilla['strPrefijoEmpresa'] = $prefijoEmpresa;

                            foreach($arrayInfoEnvio as $array)
                            {
                                if ($boolContieneAlquiler && !empty($array['valor6']))
                                {
                                    $arrayAdmiProceso = $this->emSoporte->getRepository("schemaBundle:AdmiProceso")
                                            ->findBy(array('nombreProceso'=>  $array['valor6'],
                                                           'estado'       => 'Activo'));

                                    foreach ($arrayAdmiProceso as $objAdmiProceso)
                                    {
                                        $objTarea = $this->emSoporte->getRepository("schemaBundle:AdmiTarea")
                                                ->findOneBy(array('procesoId'   =>  $objAdmiProceso->getId(),
                                                                  'nombreTarea' =>  $array['valor3'],
                                                                  'estado'      => 'Activo'));
                                        if (is_object($objTarea))
                                        {
                                            break;
                                        }
                                    }
                                }
                                else
                                {
                                    $objTarea  = $this->emSoporte->getRepository("schemaBundle:AdmiTarea")->findOneByNombreTarea($array['valor3']);
                                }

                                $arrayParametrosEnvioPlantilla['arrayCorreos']   = array($array['valor2']);
                                $arrayParametrosEnvioPlantilla['intTarea']       = is_object($objTarea)?$objTarea->getId():'';

                                //Se obtiene el departamento
                                $objDepartamento = $this->emSoporte->getRepository("schemaBundle:AdmiDepartamento")
                                                                   ->findOneByNombreDepartamento($array['valor4']);

                                $arrayParametrosEnvioPlantilla['objDepartamento'] = $objDepartamento;
                                $arrayParametrosEnvioPlantilla["strBanderaTraslado"] = "";
                                $strNumeroTarea = $this->serviceInfoCambiarPlan->crearTareaRetiroEquipoPorDemo($arrayParametrosEnvioPlantilla);
                            }

                            if($boolNotificaGen)
                            {
                                $strAsunto = 'Información General Servicio ('.$strTipoSolucion.') con solicitud de Factibilidad para login '.$strLogin;

                                $objVendedor       = $this->emcom->getRepository("schemaBundle:InfoPersona")
                                                          ->findOneBy(array('login'  => $entityServicio->getUsrVendedor()));

                                $objAsistComercial = $this->emcom->getRepository("schemaBundle:InfoPersona")
                                                          ->findOneBy(array('login'  => $entityServicio->getUsrCreacion()));

                                $objFormaContacto  = $this->emcom->getRepository("schemaBundle:AdmiFormaContacto")
                                                                 ->findOneBy(array('descripcionFormaContacto' => 'Correo Electronico',
                                                                                   'estado'                   => 'Activo'
                                                                            ));
                                $arrayCorreo    = array();
                                $strRazonSocial = '';
                                //Correo del vendedor
                                if(is_object($objVendedor) && is_object($objFormaContacto))
                                {                                
                                    $objInfoPersonaFormaContacto = $this->emcom->getRepository('schemaBundle:InfoPersonaFormaContacto')
                                                                        ->findOneBy(array('personaId'       => $objVendedor->getId(),
                                                                                          'formaContactoId' => $objFormaContacto->getId(),
                                                                                          'estado'          => "Activo"));
                                    //OBTENGO EL CONTACTO DE LA PERSONA QUE ASIGNADA A LA TAREA
                                    if($objInfoPersonaFormaContacto)
                                    {
                                        $arrayCorreo[] = $objInfoPersonaFormaContacto->getValor(); //Correo Persona Asignada
                                    }
                                }

                                //Correo de asistente comercial
                                if(is_object($objAsistComercial) && is_object($objFormaContacto))
                                {                                
                                    $objInfoPersonaFormaContacto = $this->emcom->getRepository('schemaBundle:InfoPersonaFormaContacto')
                                                                        ->findOneBy(array('personaId'       => $objAsistComercial->getId(),
                                                                                          'formaContactoId' => $objFormaContacto->getId(),
                                                                                          'estado'          => "Activo"));
                                    //OBTENGO EL CONTACTO DE LA PERSONA QUE ASIGNADA A LA TAREA
                                    if($objInfoPersonaFormaContacto)
                                    {
                                        $arrayCorreo[] = $objInfoPersonaFormaContacto->getValor(); //Correo Persona Asignada
                                    }
                                }

                                //Razon social
                                $intIdPersonaRol = $entityServicio->getPuntoId()->getPersonaEmpresaRolId()->getId();

                                $objPersonaRol   = $this->emcom->getRepository("schemaBundle:InfoPersonaEmpresaRol")->find($intIdPersonaRol);

                                if(is_object($objPersonaRol))
                                {
                                    $strRazonSocial = $objPersonaRol->getPersonaId()->getInformacionPersona();
                                }

                                $arrayNotificacion                        = array();
                                $arrayNotificacion['tipoSolucion']        = $strTipoSolucion;
                                $arrayNotificacion['login']               = $strLogin;
                                $arrayNotificacion['razonSocial']         = $strRazonSocial;
                                $arrayNotificacion['producto']            = $entityServicio->getProductoId()->getDescripcionProducto();
                                $arrayNotificacion['descripcionProducto'] = $entityServicio->getDescripcionPresentaFactura();

                                $objDocRelacion   = $this->emComunicacion->getRepository("schemaBundle:InfoDocumentoRelacion")
                                                                         ->findOneBy(array('servicioId' => $entityServicio->getId(),
                                                                                           'estado'     => 'Activo',
                                                                                           'modulo'     => 'TECNICO'));
                                $strRutaAnexo     = null;

                                if(is_object($objDocRelacion))
                                {
                                    $objDocumento = $this->emComunicacion->getRepository("schemaBundle:InfoDocumento")
                                                                         ->find($objDocRelacion->getDocumentoId());

                                    if(is_object($objDocumento))
                                    {
                                        $strRutaAnexo = $objDocumento->getUbicacionFisicaDocumento();
                                    }
                                }

                                $this->serviceEnvioPlantilla->generarEnvioPlantilla($strAsunto,
                                                                                    $arrayCorreo,
                                                                                    'INFO-GEN-DC',
                                                                                    $arrayNotificacion,
                                                                                    $codEmpresa,
                                                                                    $intIdCanton,
                                                                                    '',
                                                                                    $strRutaAnexo
                                                                                   );
                            }
                        }

                        /* Validación diferente tecnología - ahora se debe permitir, generar retiro de equipos,
                           Levanta bandera para actualizar equipos en auditoría y mostrar pantalla */
                        if(($prefijoEmpresa == "MD" || $prefijoEmpresa == "EN") && $strTipoOrdenServicio === "T")
                        {
                            $objProdInternet = $this->emcom
                                                    ->getRepository('schemaBundle:AdmiProducto')
                                                    ->findOneBy(array("nombreTecnico" => "INTERNET",
                                                                      "empresaCod"    => $idEmpresa,
                                                                      "estado"        => "Activo"));
                                                                      
                            $objRequestUser         = $this->container->get('request');
                            $objSession             = $objRequestUser->getSession();
                            $intIdPersonaEmpresaRol = $objSession->get('idPersonaEmpresaRol');
                            $arrayParametrosRetiro = array();
                            $arrayParametrosRetiro['objServicio']            = $entityServicio;
                            $arrayParametrosRetiro['strIpCreacion']          = $clientIp;
                            $arrayParametrosRetiro['strUsrCreacion']         = $usrCreacion;
                            $arrayParametrosRetiro['objProdInternet']        = $objProdInternet;
                            $arrayParametrosRetiro['strEmpresaCod']          = $idEmpresa;
                            $arrayParametrosRetiro['intIdPersonaEmpresaRol'] = $intIdPersonaEmpresaRol;

                            if  (!empty($strTecnologiaOrigenTraslado) && !empty($strTecnologiaDestinoTraslado) &&
                                 $strTecnologiaOrigenTraslado !== $strTecnologiaDestinoTraslado)
                            {
                                    $this->generarRetiroEquiposTraslado($arrayParametrosRetiro);
                                    $this->servicioTecnico
                                         ->ingresarServicioProductoCaracteristica( $entityServicio,
                                                                                   $objProdInternet,
                                                                                   "DIFERENTE TECNOLOGIA FACTIBILIDAD",
                                                                                   "DIFERENTE TECNOLOGIA FACTIBILIDAD",
                                                                                   $usrCreacion);
                
                            }
                            else
                            {
                                $this->generaTareasInmediatasMismaTecnologia($arrayParametrosRetiro);

                               
                                   
                            }
                        }

                        $em->getConnection()->commit();
                        $em_infraestructura->getConnection()->commit();

                        $boolGrabo = true;

                    }
                }

                if (!$boolGrabo)
                {
                    $content = "Ya existe una solicitud de factibilidad ingresada, por favor verificar.";
                }
                else
                {
                    $content = $observacionFactibilidad;
                }
            }
            else
                $content = "No existe el registro";
        }
        catch (\Exception $e)
        {
            // Rollback the failed transaction attempt
            $content = "Error: <br>" . $e->getMessage();

            $em->getConnection()->rollback();
            $em_infraestructura->getConnection()->rollback();
            
            
            
            
            
        }
        
        if($boolFactibilidadOk && $boolGrabo && $strTipoOrdenServicio === "T")
        {
            if($boolEsISB && !empty($strNombreTecnico) && $strNombreTecnico === "INTERNET SMALL BUSINESS")
            {
                $arrayRespuestaNotifSb  = $this->serviceSoporte
                                               ->crearNotifFactibTrasladoSb(array(
                                                                                    "objServicio"       => $entityServicio,
                                                                                    "intIdOltOrigen"    => $intIdOltOrigen,
                                                                                    "intIdOltDestino"   => $servicioTecnico->getElementoId(),
                                                                                    "strCodEmpresa"     => $codEmpresa,
                                                                                    "strIpClient"       => $clientIp,
                                                                                    "strUsrSession"     => $usrCreacion
                                                                                ));
                if($arrayRespuestaNotifSb["strStatus"] === "OK")
                {
                    $content = $content."<br><strong style='color:red; font-size:14px;'>".$arrayRespuestaNotifSb["strMensaje"]."</strong>";
                }
            }
            
            /* Si es la empresa MD y no es Small Business ni TelcoHome, si el tipo de orden del servicio es Traslado,
             * se debe buscar alguna solicitud agregar equipo pendiente de gestión en el servicio origen 
             * del traslado para poder asignarla al nuevo punto y que se gestionen luego del traslado del 
             * internet el cambio y agregación de los nuevos equipos DUAL BAND
             */
            if ($prefijoEmpresa == "MD" && !$boolEsISB)
            {
                $arrayRespuestaGeneraSolsPorTraslado = $this->generaSolsPorTraslado(array(  "intIdServicio"     => $entityServicio->getId(),
                                                                                            "strCodEmpresa"     => $codEmpresa,
                                                                                            "strUsrCreacion"    => $usrCreacion,
                                                                                            "strIpCreacion"     => $clientIp));
                if($arrayRespuestaGeneraSolsPorTraslado['status'] === "ERROR")
                {
                    $content = $content."<br><strong style='color:red; font-size:14px;'>".$arrayRespuestaGeneraSolsPorTraslado["mensaje"]."</strong>";
                }
            }
        }
        return $content;
    }

    /**
     * generarRetiroEquiposTraslado
     *
     * Función que permite generar solicitud de retiro de equipos por traslado de diferente tencología.
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0  08-01-2022 - Versión Inicial
     *
     * @param $arrayParametrosRetiro[
     *                                "objServicio"            => Objeto del servicio que genera factibilidad
     *                                "strIpCreacion"          => Ip del usuario en sesión
     *                                "strUsrCreacion"         => Usuario en sesion
     *                                "objServicioTecnico"     => Objeto servicio técnico del servicio que genera factibilidad
     *                                "intIdPersonaEmpresaRol" => Identificador de persona empresa rol de usuario en sesión
     *                              ]
     * @author Andre Lazo <alazo@telconet.ec>
     * @version 1.1  04-05-2023 - Se añade llamado a la funcion de AdjuntarActa 
     */
    public function generarRetiroEquiposTraslado($arrayParametrosRetiro)
    {
        $emGeneral              = $this->emgen;
        $emComercial            = $this->emcom;
        $objServicio            = $arrayParametrosRetiro["objServicio"];
        $strIpCreacion          = $arrayParametrosRetiro["strIpCreacion"];
        $strUsrCreacion         = $arrayParametrosRetiro["strUsrCreacion"];
        $objProdInternet        = $arrayParametrosRetiro["objProdInternet"];
        $intIdPersonaEmpresaRol = $arrayParametrosRetiro["intIdPersonaEmpresaRol"];
        $strEmpresaCod          = $arrayParametrosRetiro["strEmpresaCod"];
        $serviceServicioTecnico = $this->serviceGeneral;

        try
        {
            $objAdmiCaracTarea = $this->emCome->getRepository('schemaBundle:AdmiCaracteristica')
                                              ->findOneBy(array("descripcionCaracteristica" => "ID_TAREA_TRASLADO",
                                                                "estado"                    => "Activo"));
                                                                
            if(!is_object($objAdmiCaracTarea) && empty($objAdmiCaracTarea))
            {
                throw new \Exception("No existe Objeto para la característica ID_TAREA_TRASLADO");
            }

            $objServProdCaractTraslado = $serviceServicioTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                    'TRASLADO',
                                                                                                    $objProdInternet
                                                                                                   );
            //crear las caract para la solicitud de retiro de equipo
            $objEntityAdmiCaracteristica = $this->emCome->getRepository('schemaBundle:AdmiCaracteristica')->find(360);

            if(is_object($objServProdCaractTraslado))
            {
                $objServicioOrigen        = $this->emCome->getRepository('schemaBundle:InfoServicio')->find($objServProdCaractTraslado->getValor());
                $objServicioTecnicoOrigen = $this->emCome
                                                 ->getRepository('schemaBundle:InfoServicioTecnico')
                                                 ->findOneByServicioId($objServicioOrigen->getId());
                //crear solicitud para retiro de equipo
                $objTipoSolicitud = $this->emCome->getRepository('schemaBundle:AdmiTipoSolicitud')
                                         ->findOneBy(array( "descripcionSolicitud" => "SOLICITUD RETIRO EQUIPO", "estado"=>"Activo"));
                $objDetalleSolicitud = new InfoDetalleSolicitud();
                $objDetalleSolicitud->setServicioId($objServicioOrigen);
                $objDetalleSolicitud->setTipoSolicitudId($objTipoSolicitud);
                $objDetalleSolicitud->setEstado("AsignadoTarea");
                $objDetalleSolicitud->setUsrCreacion($strUsrCreacion);
                $objDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                $objDetalleSolicitud->setObservacion("SOLICITA RETIRO DE EQUIPO POR TRASLADO DEL SERIVICIO DIFERENTE TECNOLOGIA");
                $this->emCome->persist($objDetalleSolicitud);

                $arrayParametros = array();
                $arrayParametros['intIdServicio']  = $objServicio->getId();
                $arrayParametros["strIpCreacion"]  = $strIpCreacion;
                $arrayParametros["strUsrCreacion"] = $strUsrCreacion;
                $arrayParametros["strCodEmpresa"]  = $strEmpresaCod;
                $arrayObtenerEquiposServicio       = $this->getElementosRetirarTraslado($arrayParametros);

                if ($arrayObtenerEquiposServicio["strStatus"] === 'OK' && count($arrayObtenerEquiposServicio["arrayElementosRetiroEquipos"]) > 0)
                {
                    foreach($arrayObtenerEquiposServicio["arrayElementosRetiroEquipos"] as $objElementoServicioEquipos)
                    {
                        $objEntityCaract= new InfoDetalleSolCaract();
                        $objEntityCaract->setCaracteristicaId($objEntityAdmiCaracteristica);
                        $objEntityCaract->setDetalleSolicitudId($objDetalleSolicitud);
                        $objEntityCaract->setValor($objElementoServicioEquipos->getId());
                        $objEntityCaract->setEstado("AsignadoTarea");
                        $objEntityCaract->setUsrCreacion($strUsrCreacion);
                        $objEntityCaract->setFeCreacion(new \DateTime('now'));
                        $this->emCome->persist($objEntityCaract);
                        $this->emCome->flush();
                    }
                    //obtener tarea
                    $objEntityProceso = $this->emSoporte
                                             ->getRepository('schemaBundle:AdmiProceso')
                                             ->findOneByNombreProceso("SOLICITAR RETIRO EQUIPO");
                    $objEntityTareas  = $this->emSoporte
                                             ->getRepository('schemaBundle:AdmiTarea')
                                             ->findTareasActivasByProceso($objEntityProceso->getId());
                    $objEntityTarea   = $objEntityTareas[0];
                    //grabar nuevo info_detalle para la solicitud de retiro de equipo
                    $objEntityDetalle = new InfoDetalle();
                    $objEntityDetalle->setDetalleSolicitudId($objDetalleSolicitud->getId());
                    $objEntityDetalle->setTareaId($objEntityTarea);
                    $objEntityDetalle->setLongitud($objServicioOrigen->getPuntoId()->getLongitud());
                    $objEntityDetalle->setLatitud($objServicioOrigen->getPuntoId()->getLatitud());
                    $objEntityDetalle->setPesoPresupuestado(0);
                    $objEntityDetalle->setValorPresupuestado(0);
                    $objEntityDetalle->setIpCreacion($strIpCreacion);
                    $objEntityDetalle->setFeCreacion(new \DateTime('now'));
                    $objEntityDetalle->setUsrCreacion($strUsrCreacion);
                    $objEntityDetalle->setFeSolicitada(new \DateTime('now'));
                    $this->emSoporte->persist($objEntityDetalle);
                    $this->emSoporte->flush();

                    //obtenemos el persona empresa rol del usuario
                    $objPersonaEmpresaRolUsr = $this->emCome
                                                    ->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                    ->find($intIdPersonaEmpresaRol);

                    //buscamos datos del dept, persona
                    $objDepartamento = $this->emgen
                                            ->getRepository('schemaBundle:AdmiDepartamento')
                                            ->find($objPersonaEmpresaRolUsr->getDepartamentoId());
                    $objPersona      = $objPersonaEmpresaRolUsr->getPersonaId();

                    //grabamos soporte.info_detalle_asignacion
                    $objDetalleAsignacion = new InfoDetalleAsignacion();
                    $objDetalleAsignacion->setDetalleId($objEntityDetalle);
                    $objDetalleAsignacion->setAsignadoId($objDepartamento->getId());
                    $objDetalleAsignacion->setAsignadoNombre($objDepartamento->getNombreDepartamento());
                    $objDetalleAsignacion->setRefAsignadoId($objPersona->getId());
                    if($objPersona->getRazonSocial()=="")
                    {
                        $strNombre = $objPersona->getNombres()." ".$objPersona->getApellidos();
                    }
                    else
                    {
                        $strNombre = $objPersona->getRazonSocial();
                    }
                    $objDetalleAsignacion->setRefAsignadoNombre($strNombre);
                    $objDetalleAsignacion->setPersonaEmpresaRolId($objPersonaEmpresaRolUsr->getId());
                    $objDetalleAsignacion->setTipoAsignado("EMPLEADO");
                    $objDetalleAsignacion->setUsrCreacion($strUsrCreacion);
                    $objDetalleAsignacion->setFeCreacion(new \DateTime('now'));
                    $objDetalleAsignacion->setIpCreacion($strIpCreacion);
                    $this->emSoporte->persist($objDetalleAsignacion);
                    $this->emSoporte->flush();
                    //Se ingresa el historial de la tarea
                    if(is_object($objEntityDetalle))
                    {
                        $arrayParametrosHist["intDetalleId"] = $objEntityDetalle->getId();
                        $intDetalleId                        = $arrayParametrosHist["intDetalleId"];
                    }
                    $arrayParametrosHist["strObservacion"]  = "Tarea Asignada";
                    $arrayParametrosHist["strEstadoActual"] = "Asignada";
                    $arrayParametrosHist["strAccion"]       = "Asignada";
                    $this->serviceSoporte->ingresaHistorialYSeguimientoPorTarea($arrayParametrosHist);
                    $strAfectadoNombre = "";
                    $intPuntoId        = "";
                    $strPuntoLogin     = "";
                    if($objServicioOrigen->getPuntoId()->getNombrePunto())
                    {
                        $strAfectadoNombre = $objServicioOrigen->getPuntoId()->getNombrePunto();
                    }

                    if($objServicioOrigen->getPuntoId())
                    {
                        $intPuntoId    = $objServicioOrigen->getPuntoId()->getId();
                        $strPuntoLogin = $objServicioOrigen->getPuntoId()->getLogin();
                    }

                    // se graba en la DB_SOPORTE.INFO_CRITERIO_AFECTADO
                    $objCriterio = new InfoCriterioAfectado();
                    $objCriterio->setId(1);
                    $objCriterio->setDetalleId($objEntityDetalle);
                    $objCriterio->setCriterio("Clientes");
                    $objCriterio->setOpcion("Cliente: " . $strAfectadoNombre . " | OPCION: Punto Cliente");
                    $objCriterio->setFeCreacion(new \DateTime('now'));
                    $objCriterio->setUsrCreacion($strUsrCreacion);
                    $objCriterio->setIpCreacion($strIpCreacion);
                    $this->emSoporte->persist($objCriterio);
                    $this->emSoporte->flush();

                    // se graba en la DB_SOPORTE.INFO_PARTE_AFECTADA
                    $objAfectado = new InfoParteAfectada();
                    $objAfectado->setTipoAfectado("Cliente");
                    $objAfectado->setDetalleId($objEntityDetalle->getId());
                    $objAfectado->setCriterioAfectadoId($objCriterio->getId());
                    $objAfectado->setAfectadoId($intPuntoId);
                    $objAfectado->setFeIniIncidencia(new \DateTime('now'));
                    $objAfectado->setAfectadoNombre($strPuntoLogin);
                    $objAfectado->setAfectadoDescripcion($strAfectadoNombre);
                    $objAfectado->setFeCreacion(new \DateTime('now'));
                    $objAfectado->setUsrCreacion($strUsrCreacion);
                    $objAfectado->setIpCreacion($strIpCreacion);
                    $this->emSoporte->persist($objAfectado);
                    $this->emSoporte->flush();

                    //crear historial para la solicitud
                    $objHistorialSolicitud = new InfoDetalleSolHist();
                    $objHistorialSolicitud->setDetalleSolicitudId($objDetalleSolicitud);
                    $objHistorialSolicitud->setEstado("AsignadoTarea");
                    $objHistorialSolicitud->setObservacion("GENERACION AUTOMATICA DE SOLICITUD RETIRO DE EQUIPO ".
                                                           "POR TRASLADO DEL SERIVICIO DIFERENTE TECNOLOGIA");
                    $objHistorialSolicitud->setUsrCreacion($strUsrCreacion);
                    $objHistorialSolicitud->setFeCreacion(new \DateTime('now'));
                    $objHistorialSolicitud->setIpCreacion($strIpCreacion);
                    $this->emCome->persist($objHistorialSolicitud);
                    $this->emCome->flush();

                    //se realiza cancelación de servicios adicionales RentaSmartWifi al detectar que el traslados es en diferentes tecnologías
                    $arrayServiciosPunto  = $this->emCome
                                                 ->getRepository('schemaBundle:InfoServicio')
                                                 ->findBy(array("puntoId" => $objServicio->getPuntoId(), "estado" => "Activo"));
                    foreach($arrayServiciosPunto as $objServicioPunto)
                    {
                        if (!is_null($objServicioPunto->getProductoId()) && 'SMARTWIFI' === $objServicioPunto->getProductoId()->getNombreTecnico() &&
                        strpos(strtoupper($objServicioPunto->getProductoId()->getDescripcionProducto()), strtoupper('Renta')) !== false)
                        {
                            $strEstadoServicioPunto = "Cancelado";
                            $objServicioPunto->setEstado($strEstadoServicioPunto);
                            $this->emCome->persist($objServicioPunto);
                            $this->emCome->flush();
                            // Actualizamos el historial del servicio
                            $objServicioHistorial = new InfoServicioHistorial();
                            $objServicioHistorial->setServicioId($objServicioPunto);
                            $objServicioHistorial->setObservacion('Se canceló el servicio por traslado en diferente tecnología');
                            $objServicioHistorial->setIpCreacion($strIpCreacion);
                            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                            $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                            $objServicioHistorial->setEstado($strEstadoServicioPunto);
                            $this->emCome->persist($objServicioHistorial);
                            $this->emCome->flush();
                            //buscar enlace local y eliminar elemento enlazado
                            $objServicioTecnico = $this->emCome
                                                       ->getRepository('schemaBundle:InfoServicioTecnico')
                                                       ->findOneBy(array( "servicioId" => $objServicioPunto->getId()));
                            if (is_object($objServicioTecnico))
                            {
                                $objEnlaceCliente = $this->emInfraestructura
                                                         ->getRepository('schemaBundle:InfoEnlace')
                                                         ->findOneBy(array("interfaceElementoFinId" =>
                                                                           $objServicioTecnico->getInterfaceElementoClienteId(),
                                                                           "estado"                 =>
                                                                           "Activo"));

                                //se valida que exista un elemento WIFI relacionado al ONT registrado dentro de los recursos tecnicos del servicio
                                if(is_object($objEnlaceCliente))
                                {
                                    //elimino enlace
                                    $objEnlaceCliente->setEstado("Eliminado");
                                    $this->emInfraestructura->persist($objEnlaceCliente);
                                    $this->emInfraestructura->flush(); 

                                    //crear las caract para la solicitud de retiro de equipo
                                    $objEnlaceClienteSiguiente = $this->emInfraestructura
                                                                 ->getRepository('schemaBundle:InfoEnlace')
                                                                 ->findOneBy(array("interfaceElementoIniId" =>
                                                                                   $objServicioTecnico->getInterfaceElementoClienteId(),
                                                                                   "estado"                 => "Activo"));

                                    //se valida que exista un elemento WIFI relacionado al ONT registrado dentro de los recursos tecnicos del servicio
                                    if(is_object($objEnlaceClienteSiguiente))
                                    {
                                        //elimino enlace
                                        $objEnlaceClienteSiguiente->setEstado("Eliminado");
                                        $this->emInfraestructura->persist($objEnlaceClienteSiguiente);
                                        $this->emInfraestructura->flush(); 

                                        $objEnlaceNuevo = new InfoEnlace();
                                        $objEnlaceNuevo->setInterfaceElementoIniId($objEnlaceCliente->getInterfaceElementoIniId());
                                        $objEnlaceNuevo->setInterfaceElementoFinId($objEnlaceClienteSiguiente->getInterfaceElementoFinId());
                                        $objEnlaceNuevo->setTipoMedioId($objEnlaceClienteSiguiente->getTipoMedioId());
                                        $objEnlaceNuevo->setTipoEnlace("PRINCIPAL");
                                        $objEnlaceNuevo->setEstado("Activo");
                                        $objEnlaceNuevo->setUsrCreacion($strUsrCreacion);
                                        $objEnlaceNuevo->setFeCreacion(new \DateTime('now'));
                                        $objEnlaceNuevo->setIpCreacion($strIpCreacion);
                                        $this->emInfraestructura->persist($objEnlaceNuevo);
                                        $this->emInfraestructura->flush(); 
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    throw new \Exception("No se encontró información acerca de los elementos del cliente a trasladar");
                }

                //Generar tareas automáticas en origen y destino
                $strParamCabTareaAut = 'PROCESO_TRASLADO_MD';
                $arrayParamTareaAut  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                   ->get($strParamCabTareaAut, 'COMERCIAL', '', 'TAREA_AUTOMATICA_TRASLADO',
                                                         '', '', '', '', '', $strEmpresaCod, '');
                $strMensaje = "Titular se acerca a solicitar el traslado del servicio. </br>".
                              "Login Origen: ".$objServicioOrigen->getPuntoId()->getLogin()."</br>".
                              "Login Destino: ".$objServicio->getPuntoId()->getLogin()."</br>".
                              "Punto Cobertura Origen: ".$objServicioOrigen->getPuntoId()->getPuntoCoberturaId()->getNombreJurisdiccion()."</br>".
                              "Punto Cobertura Destino: ".$objServicio->getPuntoId()->getPuntoCoberturaId()->getNombreJurisdiccion()."</br>".
                              "Dirección Origen: ".$objServicioOrigen->getPuntoId()->getDireccion()."</br>".
                              "Dirección Destino: ".$objServicio->getPuntoId()->getDireccion()."</br>";

                $objInfoPersonaTareaRet = $this->emCome->getRepository('schemaBundle:InfoPersona')->findOneByLogin($strUsrCreacion);
                if( !empty($objInfoPersonaTareaRet) )
                {
                    $strNombreRet           = $objInfoPersonaTareaRet->getNombres() ? $objInfoPersonaTareaRet->getNombres():'';
                    $strApellidoRet         = $objInfoPersonaTareaRet->getApellidos() ? $objInfoPersonaTareaRet->getApellidos():'';
                    $strNombresCompletos = ucwords( strtolower($strNombreRet)).' '. ucwords( strtolower($strApellidoRet));
                }

                //Servicio Origen
                $arrayTareaTrasladoOrigen = $this->serviceSoporte
                                                 ->crearTareaCasoSoporte(array (
                                                   "intIdPersonaEmpresaRol" => $intIdPersonaEmpresaRol,
                                                   "intIdEmpresa"           => $strEmpresaCod,
                                                   "strPrefijoEmpresa"      => $strPrefijoEmpresa,
                                                   "strNombreTarea"         => $arrayParamTareaAut[0]['valor2'],
                                                   "strNombreProceso"       => $arrayParamTareaAut[0]['valor3'],
                                                   "strUserCreacion"        => $strUsrCreacion,
                                                   "strIpCreacion"          => $strIpCreacion,
                                                   "strObservacionTarea"    => $strMensaje,
                                                   "strUsuarioAsigna"       => $strNombresCompletos,
                                                   "strTipoAsignacion"      => $arrayParamTareaAut[0]['valor6'],
                                                   "strTipoTarea"           => "T",
                                                   "strTareaRapida"         => "S",
                                                   "boolAsignarTarea"       => true,
                                                   "intPuntoId"             => $objServicioOrigen->getPuntoId()->getId(),
                                                   "strFechaHoraSolicitada" => null));
                $objInfoPuntoCaracteristica = new InfoPuntoCaracteristica();
                $objInfoPuntoCaracteristica->setValor($arrayTareaTrasladoOrigen['numeroDetalle']);
                $objInfoPuntoCaracteristica->setCaracteristicaId($objAdmiCaracTarea);
                $objInfoPuntoCaracteristica->setPuntoId($objServicioOrigen->getPuntoId());
                $objInfoPuntoCaracteristica->setEstado('Activo');
                $objInfoPuntoCaracteristica->setFeCreacion(new \DateTime('now'));
                $objInfoPuntoCaracteristica->setUsrCreacion($strUsrCreacion);
                $objInfoPuntoCaracteristica->setIpCreacion($strIpCreacion);
                $this->emCome->persist($objInfoPuntoCaracteristica);
                $this->emCome->flush();


                $objCaracProcesoContinuo = $emGeneral->getRepository("schemaBundle:AdmiCaracteristica")
                ->findOneBy(
                    array(
                        "descripcionCaracteristica" => 'ES_PROCESO_CONTINUO',
                        "estado"                    => 'Activo'
                    )
                );
                
                if(!empty($objCaracProcesoContinuo) && is_object($objCaracProcesoContinuo) )
            {
                $objInfoPuntoCaracProceso  = $emComercial->getRepository('schemaBundle:InfoPuntoCaracteristica')
                                                            ->findOneBy(
                                                                array(
                                                                    'puntoId'          => $objServicio->getPuntoId(),
                                                                    'caracteristicaId' => $objCaracProcesoContinuo->getId()
                                                                )
                                                            );
                if($objInfoPuntoCaracProceso->getValor()=='N')
                {
                    $arrayParametrosAdjuntarActa=array();
                    $arrayParametrosAdjuntarActa['intIdTarea']=$arrayTareaTrasladoOrigen['numeroTarea'];
                    $arrayParametrosAdjuntarActa['intIdPuntoOrigen']=$objServicioOrigen->getPuntoId()->getId();
                    $arrayParametrosAdjuntarActa['intIdPuntoDestino']=$objServicio->getPuntoId()->getId();
                    $arrayParametrosAdjuntarActa['strLogin']=$objServicio->getPuntoId()->getLogin();
                    $arrayParametrosAdjuntarActa['strUsuario']=$strUsrCreacion;
                    $arrayParametrosAdjuntarActa['strIpCliente']=$strIpCreacion;
                    $this->adjuntarActaTarea($arrayParametrosAdjuntarActa);
                }
            }
                //Servicio Destino
                $arrayTareaTrasladoDestino = $this->serviceSoporte
                                                  ->crearTareaCasoSoporte(array (
                                                    "intIdPersonaEmpresaRol" => $intIdPersonaEmpresaRol,
                                                    "intIdEmpresa"           => $strEmpresaCod,
                                                    "strPrefijoEmpresa"      => $strPrefijoEmpresa,
                                                    "strNombreTarea"         => $arrayParamTareaAut[0]['valor2'],
                                                    "strNombreProceso"       => $arrayParamTareaAut[0]['valor3'],
                                                    "strUserCreacion"        => $strUsrCreacion,
                                                    "strIpCreacion"          => $strIpCreacion,
                                                    "strObservacionTarea"    => $strMensaje,
                                                    "strUsuarioAsigna"       => $strNombresCompletos,
                                                    "strTipoAsignacion"      => $arrayParamTareaAut[0]['valor6'],
                                                    "strTipoTarea"           => "T",
                                                    "strTareaRapida"         => "S",
                                                    "boolAsignarTarea"       => true,
                                                    "intPuntoId"             => $objServicio->getPuntoId()->getId(),
                                                    "strFechaHoraSolicitada" => null));
                $objInfoPuntoCaracteristica = new InfoPuntoCaracteristica();
                $objInfoPuntoCaracteristica->setValor($arrayTareaTrasladoDestino['numeroDetalle']);
                $objInfoPuntoCaracteristica->setCaracteristicaId($objAdmiCaracTarea);
                $objInfoPuntoCaracteristica->setPuntoId($objServicio->getPuntoId());
                $objInfoPuntoCaracteristica->setEstado('Activo');
                $objInfoPuntoCaracteristica->setFeCreacion(new \DateTime('now'));
                $objInfoPuntoCaracteristica->setUsrCreacion($strUsrCreacion);
                $objInfoPuntoCaracteristica->setIpCreacion($strIpCreacion);
                $this->emCome->persist($objInfoPuntoCaracteristica);
                $this->emCome->flush();
            }
            else
            {
                throw new \Exception("No se encontró información acerca de la característica de traslado");
            }
        }
        catch (\Exception $objEx)
        {
            $this->utilServicio->insertError( 'Telcos+',
                                              'InfoServicioService.generarRetiroEquiposTraslado',
                                              'Se presentaron problemas al generar retiro de equipo del traslado: '.
                                              $objEx->getMessage(),
                                              $strUsrCreacion,
                                              $strIpCreacion );
        }
    }

    /**
     * generaTareasInmediatasMismaTecnologia
     *
     * Función que permite generar tareas de cierre inmediato en traslados de misma tecnología
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0  08-01-2022 - Versión Inicial
     *
     * @param $arrayParametrosRetiro[
     *                                "objServicio"            => Objeto del servicio que genera factibilidad
     *                                "strIpCreacion"          => Ip del usuario en sesión
     *                                "strUsrCreacion"         => Usuario en sesion
     *                                "objServicioTecnico"     => Objeto servicio técnico del servicio que genera factibilidad
     *                                "intIdPersonaEmpresaRol" => Identificador de persona empresa rol de usuario en sesión
     *                              ]
     *  
     * @author Andre Lazo <alazo@telconet.ec>
     * @version 1.1  04-05-2023 - Se añade llamado a la funcion de AdjuntarActa 
     */
    public function generaTareasInmediatasMismaTecnologia($arrayParametrosRetiro)
    {
        $emGeneral              = $this->emgen;
        $emComercial            = $this->emcom;
        $objServicio            = $arrayParametrosRetiro["objServicio"];
        $strIpCreacion          = $arrayParametrosRetiro["strIpCreacion"];
        $strUsrCreacion         = $arrayParametrosRetiro["strUsrCreacion"];
        $objProdInternet        = $arrayParametrosRetiro["objProdInternet"];
        $intIdPersonaEmpresaRol = $arrayParametrosRetiro["intIdPersonaEmpresaRol"];
        $strEmpresaCod          = $arrayParametrosRetiro["strEmpresaCod"];
        $serviceServicioTecnico = $this->serviceGeneral;

        try
        {
            $objAdmiCaracTarea = $this->emCome->getRepository('schemaBundle:AdmiCaracteristica')
                                              ->findOneBy(array("descripcionCaracteristica" => "ID_TAREA_TRASLADO",
                                                                "estado"                    => "Activo"));
            if(!is_object($objAdmiCaracTarea) && empty($objAdmiCaracTarea))
            {
                throw new \Exception("No existe Objeto para la característica ID_TAREA_TRASLADO");
            }

            $objServProdCaractTraslado = $serviceServicioTecnico->getServicioProductoCaracteristica($objServicio,
                                                                                                    'TRASLADO',
                                                                                                    $objProdInternet
                                                                                                   );
            //crear las caract para la solicitud de retiro de equipo
            $objEntityAdmiCaracteristica = $this->emCome->getRepository('schemaBundle:AdmiCaracteristica')->find(360);

            if(is_object($objServProdCaractTraslado))
            {
                $objServicioOrigen        = $this->emCome->getRepository('schemaBundle:InfoServicio')->find($objServProdCaractTraslado->getValor());
                $objServicioTecnicoOrigen = $this->emCome
                                                 ->getRepository('schemaBundle:InfoServicioTecnico')
                                                 ->findOneByServicioId($objServicioOrigen->getId());
                
                //Generar tareas automáticas en origen y destino
                $strParamCabTareaAut = 'PROCESO_TRASLADO_MD';
                $arrayParamTareaAut  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                   ->get($strParamCabTareaAut, 'COMERCIAL', '', 'TAREA_AUTOMATICA_TRASLADO',
                                                         '', '', '', '', '', $strEmpresaCod, '');
                $strMensaje = "Titular se acerca a solicitar el traslado del servicio. </br>".
                              "Login Origen: ".$objServicioOrigen->getPuntoId()->getLogin()."</br>".
                              "Login Destino: ".$objServicio->getPuntoId()->getLogin()."</br>".
                              "Punto Cobertura Origen: ".$objServicioOrigen->getPuntoId()->getPuntoCoberturaId()->getNombreJurisdiccion()."</br>".
                              "Punto Cobertura Destino: ".$objServicio->getPuntoId()->getPuntoCoberturaId()->getNombreJurisdiccion()."</br>".
                              "Dirección Origen: ".$objServicioOrigen->getPuntoId()->getDireccion()."</br>".
                              "Dirección Destino: ".$objServicio->getPuntoId()->getDireccion()."</br>";

                $objInfoPersonaTareaRet = $this->emCome->getRepository('schemaBundle:InfoPersona')->findOneByLogin($strUsrCreacion);
                if( !empty($objInfoPersonaTareaRet) )
                {
                    $strNombreRet           = $objInfoPersonaTareaRet->getNombres() ? $objInfoPersonaTareaRet->getNombres():'';
                    $strApellidoRet         = $objInfoPersonaTareaRet->getApellidos() ? $objInfoPersonaTareaRet->getApellidos():'';
                    $strNombresCompletos = ucwords( strtolower($strNombreRet)).' '. ucwords( strtolower($strApellidoRet));
                }

                //Servicio Origen
                $arrayTareaTrasladoOrigen = $this->serviceSoporte
                                                 ->crearTareaCasoSoporte(array (
                                                   "intIdPersonaEmpresaRol" => $intIdPersonaEmpresaRol,
                                                   "intIdEmpresa"           => $strEmpresaCod,
                                                   "strPrefijoEmpresa"      => $strPrefijoEmpresa,
                                                   "strNombreTarea"         => $arrayParamTareaAut[0]['valor2'],
                                                   "strNombreProceso"       => $arrayParamTareaAut[0]['valor3'],
                                                   "strUserCreacion"        => $strUsrCreacion,
                                                   "strIpCreacion"          => $strIpCreacion,
                                                   "strObservacionTarea"    => $strMensaje,
                                                   "strUsuarioAsigna"       => $strNombresCompletos,
                                                   "strTipoAsignacion"      => $arrayParamTareaAut[0]['valor6'],
                                                   "strTipoTarea"           => "T",
                                                   "strTareaRapida"         => "S",
                                                   "boolAsignarTarea"       => true,
                                                   "intPuntoId"             => $objServicioOrigen->getPuntoId()->getId(),
                                                   "strFechaHoraSolicitada" => null));
                $objInfoPuntoCaracteristica = new InfoPuntoCaracteristica();
                $objInfoPuntoCaracteristica->setValor($arrayTareaTrasladoOrigen['numeroDetalle']);
                $objInfoPuntoCaracteristica->setCaracteristicaId($objAdmiCaracTarea);
                $objInfoPuntoCaracteristica->setPuntoId($objServicioOrigen->getPuntoId());
                $objInfoPuntoCaracteristica->setEstado('Activo');
                $objInfoPuntoCaracteristica->setFeCreacion(new \DateTime('now'));
                $objInfoPuntoCaracteristica->setUsrCreacion($strUsrCreacion);
                $objInfoPuntoCaracteristica->setIpCreacion($strIpCreacion);
                $this->emCome->persist($objInfoPuntoCaracteristica);
                $this->emCome->flush();
                $objCaracProcesoContinuo = $emGeneral->getRepository("schemaBundle:AdmiCaracteristica")
                ->findOneBy(
                    array(
                        "descripcionCaracteristica" => 'ES_PROCESO_CONTINUO',
                        "estado"                    => 'Activo'
                    )
                );
                
                if(!empty($objCaracProcesoContinuo) && is_object($objCaracProcesoContinuo))
            {
                $objInfoPuntoCaracProceso  = $emComercial->getRepository('schemaBundle:InfoPuntoCaracteristica')
                                                            ->findOneBy(
                                                                array(
                                                                    'puntoId'          => $objServicio->getPuntoId(),
                                                                    'caracteristicaId' => $objCaracProcesoContinuo->getId()
                                                                )
                                                            );
               if($objInfoPuntoCaracProceso!=null && $objInfoPuntoCaracProceso->getValor()=='N')
                {
                    $arrayParametrosAdjuntarActa=array();
                    $arrayParametrosAdjuntarActa['intIdTarea']=$arrayTareaTrasladoOrigen['numeroTarea'];
                    $arrayParametrosAdjuntarActa['intIdPuntoOrigen']=$objServicioOrigen->getPuntoId()->getId();
                    $arrayParametrosAdjuntarActa['intIdPuntoDestino']=$objServicio->getPuntoId()->getId();
                    $arrayParametrosAdjuntarActa['strLogin']=$objServicio->getPuntoId()->getLogin();
                    $arrayParametrosAdjuntarActa['strUsuario']=$strUsrCreacion;
                    $arrayParametrosAdjuntarActa['strIpCliente']=$strIpCreacion;
                    $this->adjuntarActaTarea($arrayParametrosAdjuntarActa);
                }
              
            }
              
               





                //Servicio Destino
                $arrayTareaTrasladoDestino = $this->serviceSoporte
                                                  ->crearTareaCasoSoporte(array (
                                                    "intIdPersonaEmpresaRol" => $intIdPersonaEmpresaRol,
                                                    "intIdEmpresa"           => $strEmpresaCod,
                                                    "strPrefijoEmpresa"      => $strPrefijoEmpresa,
                                                    "strNombreTarea"         => $arrayParamTareaAut[0]['valor2'],
                                                    "strNombreProceso"       => $arrayParamTareaAut[0]['valor3'],
                                                    "strUserCreacion"        => $strUsrCreacion,
                                                    "strIpCreacion"          => $strIpCreacion,
                                                    "strObservacionTarea"    => $strMensaje,
                                                    "strUsuarioAsigna"       => $strNombresCompletos,
                                                    "strTipoAsignacion"      => $arrayParamTareaAut[0]['valor6'],
                                                    "strTipoTarea"           => "T",
                                                    "strTareaRapida"         => "S",
                                                    "boolAsignarTarea"       => true,
                                                    "intPuntoId"             => $objServicio->getPuntoId()->getId(),
                                                    "strFechaHoraSolicitada" => null));
                $objInfoPuntoCaracteristica = new InfoPuntoCaracteristica();
                $objInfoPuntoCaracteristica->setValor($arrayTareaTrasladoDestino['numeroDetalle']);
                $objInfoPuntoCaracteristica->setCaracteristicaId($objAdmiCaracTarea);
                $objInfoPuntoCaracteristica->setPuntoId($objServicio->getPuntoId());
                $objInfoPuntoCaracteristica->setEstado('Activo');
                $objInfoPuntoCaracteristica->setFeCreacion(new \DateTime('now'));
                $objInfoPuntoCaracteristica->setUsrCreacion($strUsrCreacion);
                $objInfoPuntoCaracteristica->setIpCreacion($strIpCreacion);
                $this->emCome->persist($objInfoPuntoCaracteristica);
                $this->emCome->flush();
            }
            else
            {
                throw new \Exception("No se encontró información acerca de la característica de traslado");
            }
        }
        catch (\Exception $objEx)
        {
            $this->utilServicio->insertError( 'Telcos+',
                                              'InfoServicioService.generaTareasInmediatasMismaTecnologia',
                                              'Se presentaron problemas al crear tareas automáticas misma tecnología traslado: '.
                                              $objEx->getMessage(),
                                              $strUsrCreacion,
                                              $strIpCreacion );
        }
    }

    /**
     * obtenerValidaElementosOrigenTraslados
     *
     * Función que permite obtener información respecto a equipos entregados por el cliente en
     * traslados diferente tecnología
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0  08-01-2022 - Versión Inicial
     *
     * @author Emmanuel Martillo <emartillo@telconet.ec>
     * @version 1.1  14-03-2023 - Se agrega validacion por prefijo de empresa para Ecuanet.
     * 
     * @param $arrayParametrosRetiro[
     *                                "intIdServicio"     => Identificador de servicio
     *                                "strIpCreacion"     => Ip del usuario en sesión
     *                                "strUsrCreacion"    => Usuario en sesion
     *                                "strCodEmpresa"     => Código de empresa de la consulta
     *                                "strProceso"        => Proceso por el cual se genera factura
     *                              ]
     */
    public function obtenerValidaElementosOrigenTraslados($arrayParametrosRetiro)
    {
        $strExistenEquiposFacturar  = 'NO';
        $strEstado                  = 'ERROR';
        $strMensaje                 = 'Existieron problemas al validar los equipos entregados por el cliente.';
        $arrayRespuesta             = array();
        $arrayElementosNoEntregados = array();
        $strProceso                 = ( isset($arrayParametrosRetiro['strProceso']) && !empty($arrayParametrosRetiro['strProceso']) ) 
                                      ? $arrayParametrosRetiro['strProceso'] : '';
        $arrayRespuesta['existenEquiposFacturar']  = '';
        try
        {
            $arrayElementosRetirar = $this->getElementosRetirarTraslado($arrayParametrosRetiro);
            // iniciar for para iterar elementos
            if ($arrayElementosRetirar['total'] > 0)
            {
                foreach($arrayElementosRetirar['encontrados'] as $arrayElementoRetirar)
                {
                    /* agregar IF si equipo a iterar es parametrizado solo se valida el estado registrado en la
                       caracteristica y se agrega a los elementos no entregados */
                    if (empty($arrayElementoRetirar['idElemento']) && $arrayElementoRetirar['estadoElemento'] === "NO ENTREGADO")
                    {
                        $strExistenEquiposFacturar = 'SI';
                        $arrayElementoNoEntregados = array();
                        $arrayElementoNoEntregados['serieElemento'] = $arrayElementoRetirar['serieElemento'];
                        $arrayElementoNoEntregados['tipoElemento']  = $arrayElementoRetirar['tipoElemento'];
                        $arrayElementosNoEntregados[] = $arrayElementoNoEntregados;
                    }
                    else
                    {
                        $arrayParametrosTrazabilidad["intStart"]        = '';
                        $arrayParametrosTrazabilidad["intLimit"]        = '';
                        $arrayParametrosTrazabilidad["strCriterio"]     = 'Login';
                        $arrayParametrosTrazabilidad["strValor"]        = $arrayElementosRetirar['loginOrigen'];
                        $arrayParametrosTrazabilidad["intModelo"]       = '';
                        $arrayParametrosTrazabilidad["strSerie"]        = $arrayElementoRetirar['serieElemento'];
                        $arrayParametrosTrazabilidad["strEstado"]       = '';
                        $arrayParametrosTrazabilidad["strCodEmpresa"]   = $arrayParametrosRetiro["strCodEmpresa"];
                        $arrayParametrosTrazabilidad["strResponsable"]  = '';
                        $arrayParametrosTrazabilidad["strUbicacion"]    = 'EnOficina';
                        $arrayParametrosTrazabilidad["strFechaDesde"]   = '';
                        $arrayParametrosTrazabilidad["strFechaHasta"]   = '';
                        $arrayParametrosTrazabilidad["strOficina"]      = '';
                        $arrayParametrosTrazabilidad["intOficina"]      = '';
                        $arrayParametrosTrazabilidad["emNaf"]           = $this->emNaf;
    
                        
                        $arrayElementos = $this->emInfraestructura
                                               ->getRepository('schemaBundle:InfoElemento')
                                               ->getElementosAuditoria($arrayParametrosTrazabilidad);
    
                        $intNumeroRegistros = $arrayElementos["total"];
    
                        if($intNumeroRegistros > 0)
                        {
                            foreach($arrayElementos["registros"] as $objElemento)
                            {
                                if(($objElemento["codEmpresa"] === "18" || $objElemento["codEmpresa"] === "33") && 
                                   $objElemento["estadoNaf"]  === "Instalado" &&
                                   $objElemento["estadoTelcos"] === "Activo" && $objElemento["estadoActivo"] !== "EnOficinaMd")
                                {
                                    $strExistenEquiposFacturar = 'SI';
                                    if ($strProceso === "ActivaTraslado")
                                    {
                                        $arrayElementoNoEntregados = array();
                                        $arrayElementoNoEntregados['serieElemento'] = $arrayElementoRetirar['serieElemento'];
                                        $arrayElementoNoEntregados['tipoElemento']  = $arrayElementoRetirar['tipoElemento'];
                                        $arrayElementosNoEntregados[] = $arrayElementoNoEntregados;
                                    }
                                }
                            }
                        }
                        else
                        {
                            $strExistenEquiposFacturar = 'SI';
                            $arrayElementoNoEntregados = array();
                            $arrayElementoNoEntregados['serieElemento'] = $arrayElementoRetirar['serieElemento'];
                            $arrayElementoNoEntregados['tipoElemento']  = $arrayElementoRetirar['tipoElemento'];
                            $arrayElementosNoEntregados[] = $arrayElementoNoEntregados;
                        }
                    }
                }
            }
            $strEstado  = "OK";
            if ($strExistenEquiposFacturar === "SI")
            {
                $strMensaje = "Se realizará la facturación automática de los equipos que no fueron entregados. <br><br><b>Login</b>: ".
                              $arrayElementosRetirar['loginOrigen']." <br><b>Dirección</b>: ". $arrayElementosRetirar['direccionOrigen'].
                              "<br><br> Si el cliente desea el no cobro de lo facturado deberá acercarse con los equipos al ".
                              "punto de atención al cliente más cercano para la emisión de una nota de crédito a su favor.";
            }
            else
            {
                $strMensaje = "Todos sus equipos fueron entregados. No tiene equipos pendientes de facturar.";
            }
        }
        catch (\Exception $objEx)
        {
            $this->utilServicio->insertError( 'Telcos+',
                                              'ComercialBundle.InfoServicioService.ajaxValidaElementosOrigenTrasladoAction',
                                              $ex->getMessage(),
                                              $arrayParametrosRetiro["strUsrCreacion"],
                                              $arrayParametrosRetiro["strIpCreacion"] );
        }
        $arrayRespuesta['strExistenEquiposFacturar']  = $strExistenEquiposFacturar;
        $arrayRespuesta["strEstado"]                  = $strEstado;
        $arrayRespuesta["strMensaje"]                 = $strMensaje;
        if ($strProceso === "ActivaTraslado")
        {
            $arrayRespuesta["arrayElementosNoEntregados"] = $arrayElementosNoEntregados;
        }
        return $arrayRespuesta;
    }

    /**
     * getElementosRetirarTraslado
     *
     * Funcion encargada de obtener los elementos origen del cliente en un traslado
     *
     * @author Creado: Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 24-01-2022 Version Inicial
     *
     * return JSON $objResponse
     */
    public function getElementosRetirarTraslado($arrayParametros)
    {
        $intCount          = 0;
        $emComercial       = $this->emCome;
        $emInfraestructura = $this->emInfraestructura;
        $emGeneral      = $this->emgen;
        $arrayResultado = array();
        $arrayResultado = array('total'       => 0 ,
                                'loginOrigen' => '',
                                'encontrados' => array('idElemento'     => 0 ,
                                                       'tipoElemento'   => 'Sin Informacion',
                                                       'serieElemento'  => 'Sin Informacion',
                                                       'estadoElemento' => 'Sin Informacion',
                                                       'observacion'    => 'Sin Informacion'));
        $strIpCreacion    = $arrayParametros["strIpCreacion"];
        $strUsrCreacion   = $arrayParametros["strUsrCreacion"];
        $strCodigoEmpresa = $arrayParametros["strCodEmpresa"];
        $arrayElementosRetirar  = array();
        $strLoginOrigen         = '';
        $booleanFalse           = false;
        try
        {
            $objProductoInternet = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                               ->findOneBy(array("nombreTecnico" => "INTERNET",
                                                                 "empresaCod"    => $strCodigoEmpresa,
                                                                 "estado"        => "Activo"));
            $objCaracteristica = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                             ->findOneBy(array("descripcionCaracteristica" => "ELEMENTO RETIRO",
                                                               "estado" => "Activo"));
            
            $objServicioDestino  = $emComercial->getRepository('schemaBundle:InfoServicio')
                                               ->find($arrayParametros['intIdServicio']);

            $objProdCarac = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                        ->findOneBy(array("productoId"        => $objProductoInternet->getId(),
                                                          "caracteristicaId"  => $objCaracteristica->getId(),
                                                          "estado"            => "Activo"));
            
            $arrayServProdCaracs = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                              ->findBy(array("servicioId"                => $objServicioDestino->getId(),
                                                             "productoCaracterisiticaId" => $objProdCarac->getId(),
                                                             "estado"                    => "Activo"),
                                                       array("id" => "ASC"));
            $arrayParametrosCaracteristica = array();
            $arrayParametrosCaracteristica['intIdServicio']     = $arrayParametros['intIdServicio'];
            $arrayParametrosCaracteristica['strCaracteristica'] ='TRASLADO' ;
            $arrayParametrosCaracteristica['strCodEmpresa']     = $strCodigoEmpresa;
            $arrayParametrosCaracteristica['strUsrCreacion']    = $strUsrCreacion;
            $arrayParametrosCaracteristica['strIpCreacion']     = $strIpCreacion;
            $objServProdCaractTraslado = $this->obtieneProductoCaracteristicaInternet($arrayParametrosCaracteristica);
            if (is_array($arrayServProdCaracs) && count($arrayServProdCaracs) > 0)
            {
                foreach($arrayServProdCaracs as $arrayServProdCarac)
                {
                    $arrayEquipoRetirar = explode("|",$arrayServProdCarac->getValor());
                    $arrayElementoRetirar = array();
                    $arrayElementoRetirar['idElemento']     = $arrayEquipoRetirar[0];
                    $arrayElementoRetirar['serieElemento']  = $arrayEquipoRetirar[1];
                    $arrayElementoRetirar['estadoElemento'] = $arrayEquipoRetirar[2];
                    $arrayElementoRetirar['observacion']    = $arrayEquipoRetirar[3];
                    $arrayElementoRetirar['tipoElemento']   = $arrayEquipoRetirar[4];
                    $arrayElementoRetirar['idServicioProdCaract'] = $arrayServProdCarac->getId();
                    $arrayElementosRetirar[] = $arrayElementoRetirar;
                }
                if(is_object($objServProdCaractTraslado))
                {
                    $objServicioOrigen  = $emComercial->getRepository('schemaBundle:InfoServicio')->find($objServProdCaractTraslado->getValor());
                    $strLoginOrigen     = $objServicioOrigen->getPuntoId()->getLogin();
                    $strDireccionOrigen = $objServicioOrigen->getPuntoId()->getDireccion();
                }
                $arrayResultado['total'] = count($arrayServProdCarac);
                $arrayResultado['encontrados'] = $arrayElementosRetirar;
                $arrayResultado['loginOrigen'] = $strLoginOrigen;
                $arrayResultado['direccionOrigen'] = $strDireccionOrigen;
            }
            else
            {
                if(is_object($objServProdCaractTraslado))
                {
                    $objServicioOrigen  = $emComercial->getRepository('schemaBundle:InfoServicio')->find($objServProdCaractTraslado->getValor());
                    $strLoginOrigen     = $objServicioOrigen->getPuntoId()->getLogin();
                    $strDireccionOrigen = $objServicioOrigen->getPuntoId()->getDireccion();
                    $objServicioTecnicoOrigen = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                            ->findOneByServicioId($objServicioOrigen->getId());
                    $arrayParametrosEquiposServicio = array();
                    $arrayParametrosEquiposServicio["objServicio"]        = $objServicioOrigen;
                    $arrayParametrosEquiposServicio["objServicioTecnico"] = $objServicioTecnicoOrigen;
                    $arrayParametrosEquiposServicio["strIpCreacion"]      = $strIpCreacion;
                    $arrayParametrosEquiposServicio["strUsrCreacion"]     = $strUsrCreacion;
                    $arrayObtenerEquiposServicio = $this->obtenerEquiposServicio($arrayParametrosEquiposServicio);
                    $intCount = count($arrayObtenerEquiposServicio["arrayElementosRetiroEquipos"]);
                    foreach($arrayObtenerEquiposServicio["arrayElementosRetiroEquipos"] as $objElementoServicioEquipos)
                    {
                        $objModeloElemento = $emInfraestructura->getRepository('schemaBundle:AdmiModeloElemento')
                                                               ->find($objElementoServicioEquipos->getModeloElementoId());
                        $objTipoElemento   = $emInfraestructura->getRepository('schemaBundle:AdmiTipoElemento')
                                                               ->find($objModeloElemento->getTipoElementoId());
                        $arrayElementoRetirar = array();
                        $arrayElementoRetirar['idElemento']     = $objElementoServicioEquipos->getId();
                        $arrayElementoRetirar['serieElemento']  = $objElementoServicioEquipos->getSerieFisica();
                        $arrayElementoRetirar['estadoElemento'] = '';
                        $arrayElementoRetirar['observacion']    = '';
                        if (strpos($objElementoServicioEquipos->getNombreElemento(), 'RentaSmartWifi') !== $booleanFalse)
                        {
                            $arrayElementoRetirar['tipoElemento'] = 'SMARTWIFI';
                        }
                        else if (strpos($objElementoServicioEquipos->getNombreElemento(), 'ExtenderDualBand') !== $booleanFalse)
                        {
                            $arrayElementoRetirar['tipoElemento'] = 'EXTENDER DUAL BAND';
                        }
                        else
                        {
                            $arrayElementoRetirar['tipoElemento'] = $objTipoElemento->getNombreTipoElemento();
                        }
                        $arrayElementosRetirar[] = $arrayElementoRetirar;
                    }

                    /* Se agrega recuperación de equipos obligatorios a solicitar a cliente y 
                       se agregan con estado NO ENTREGADO por defecto */
                    $strTecnologia                     = '';
                    $arrayParamEquipo                  = array();
                    $arrayParamEquipo['intServicioId'] = $objServicioOrigen->getId();
                    $arrayParamEquipo['strEmpresaCod'] = $strCodigoEmpresa;
                    $arrayParamEquipo["intElementoClienteId"] = $objServicioTecnicoOrigen->getElementoClienteId();
                    $arrayRespuestaEquipo = $this->serviceSolicitudes->getEquipoPorServicioId($arrayParamEquipo);
                    if(count($arrayRespuestaEquipo)>0)
                    {
                        $strTecnologia = $arrayRespuestaEquipo[0]["strNombreMarcaElemento"];
                        $arrayParamsEquiposFact = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->get('RETIRO_EQUIPOS_SOPORTE', 'FINANCIERO', 'FACTURACION_RETIRO_EQUIPOS', '',
                                                                  $strTecnologia, '', '', '', 'S', $strCodigoEmpresa, '', '', 
                                                                  'EQUIPOS DEFAULT DIFERENTE TECNOLOGIA');
                        foreach($arrayParamsEquiposFact as $arrayParamEquiposFact)
                        {
                            $arrayElementoRetirar = array();
                            $arrayElementoRetirar['idElemento']     = '';
                            $arrayElementoRetirar['serieElemento']  = '';
                            $arrayElementoRetirar['estadoElemento'] = 'NO ENTREGADO';
                            $arrayElementoRetirar['observacion']    = '';
                            $arrayElementoRetirar['tipoElemento'] = $arrayParamEquiposFact['descripcion'];
                            $arrayElementosRetirar[] = $arrayElementoRetirar;
                        }
                    }

                    if(count($arrayElementosRetirar) > 0)
                    {
                        foreach($arrayElementosRetirar as $arrayElementoRetirarItem)
                        {
                            $strValorCaracteristica = $arrayElementoRetirarItem["idElemento"]."|".
                                                      $arrayElementoRetirarItem["serieElemento"]."|".
                                                      $arrayElementoRetirarItem["estadoElemento"]."|".
                                                      $arrayElementoRetirarItem["observacion"]."|".
                                                      $arrayElementoRetirarItem["tipoElemento"];
                            /* Se ingresan los productos a retirar como características, se realiza esto porque luego de la cancelación
                               de ciertos productos los enlaces son eliminados y ocasiona que se pierda el rastro de ciertos equipos
                               que deben ser devueltos por este proceso */
                            $this->serviceGeneral
                                 ->ingresarServicioProductoCaracteristica($objServicioDestino,
                                                                          $objProductoInternet,
                                                                          "ELEMENTO RETIRO",
                                                                          $strValorCaracteristica,
                                                                          $strUsrCreacion);
                        }
                    }
                    $arrayResultado['strStatus'] = $arrayObtenerEquiposServicio['strStatus'];
                    $arrayResultado['strMensaje'] = $arrayObtenerEquiposServicio['strMensaje'];
                    $arrayResultado['arrayDataNetlifeCam']         = $arrayObtenerEquiposServicio['arrayDataNetlifeCam'];
                    $arrayResultado['arrayElementosServicio']      = $arrayObtenerEquiposServicio['arrayElementosServicio'];
                    $arrayResultado['arrayElementosSmartWifi']     = $arrayObtenerEquiposServicio['arrayElementosSmartWifi'];
                    $arrayResultado['arrayElementosRetiroEquipos'] = $arrayObtenerEquiposServicio['arrayElementosRetiroEquipos'];
                    if($intCount > 0)
                    {
                        $arrayResultado['total'] = $intCount;
                        $arrayResultado['encontrados'] = $arrayElementosRetirar;
                        $arrayResultado['loginOrigen'] = $strLoginOrigen;
                        $arrayResultado['direccionOrigen'] = $strDireccionOrigen;
                    }
                }
            }
        }
        catch (\Exception $ex)
        {
            $this->utilServicio->insertError( 'Telcos+',
                                              'ComercialBundle.InfoServicioService.getElementosRetirarTraslado',
                                              $ex->getMessage(),
                                              $strUsrCreacion,
                                              $strIpCreacion);
        }
        return $arrayResultado;
    }

    /**
     * obtieneProductoCaracteristicaInternet
     *
     * Funcion encargada de obtener una característica del producto internet del cliente consultado
     *
     * @author Creado: Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 24-01-2022 Version Inicial
     *
     * return JSON $objResponse
     */
    public function obtieneProductoCaracteristicaInternet($arrayParametros)
    {
        $emComercial       = $this->emCome;
        $objServProdCaract = null;
        try
        {
            $objProdInternet   = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                             ->findOneBy(array("nombreTecnico" => "INTERNET",
                                                               "empresaCod"    => $arrayParametros["strCodEmpresa"],
                                                               "estado"        => "Activo"));
            $objServicio       = $emComercial->getRepository('schemaBundle:InfoServicio')->find($arrayParametros['intIdServicio']);
            $objServProdCaract = $this->serviceGeneral->getServicioProductoCaracteristica($objServicio,
                                                                                          $arrayParametros['strCaracteristica'],
                                                                                          $objProdInternet
                                                                                         );
        }
        catch (\Exception $ex)
        {
            $this->utilServicio->insertError( 'Telcos+',
                                              'ComercialBundle.InfoServicioService.obtieneProductoCaracteristicaInternet',
                                              $ex->getMessage(),
                                              $arrayParametros["strUsrCreacion"],
                                              $arrayParametros["strIpCreacion"] );
        }

        return $objServProdCaract;
    }

    /**
     * obtenerEquiposServicio
     *
     * Función que permite obtener el listado de equipos que tiene contratado el cliente
     *
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0  08-01-2022 - Versión Inicial
     *
     * @param $arrayParametrosEquipos[
     *                                "objServicio"            => Objeto del servicio que genera factibilidad
     *                                "objServicioTecnico"     => Objeto servicio técnico del servicio que genera factibilidad
     *                             ]
     */
    public function obtenerEquiposServicio($arrayParametrosEquiposServicio)
    {
        $objServicio         = $arrayParametrosEquiposServicio["objServicio"];
        $objServicioTecnico  = $arrayParametrosEquiposServicio["objServicioTecnico"];
        $strIpCreacion       = $arrayParametrosEquiposServicio["strIpCreacion"];
        $strUsrCreacion      = $arrayParametrosEquiposServicio["strUsrCreacion"];
        $arrayRespuesta      = array();
        $arrayDataNetlifeCam = array();
        $arrayRespuesta["strStatus"]  = "OK";
        $arrayRespuesta["strMensaje"] = "OK";
        $arrayRespuesta["arrayDataNetlifeCam"]         = array();
        $arrayRespuesta["arrayElementosServicio"]      = array();
        $arrayRespuesta["arrayElementosSmartWifi"]     = array();
        $arrayRespuesta["arrayElementosRetiroEquipos"] = array();
        try
        {
            $arrayParams                                   = array();
            $arrayParams['interfaceElementoConectorId']    = $objServicioTecnico->getInterfaceElementoConectorId();
            $arrayParams['arrayData']                      = array();
            $arrayElementosServicio                        = $this->emInfraestructura
                                                                  ->getRepository('schemaBundle:InfoElemento')
                                                                  ->getElementosClienteByInterface($arrayParams);
            $arrayParametrosEdb = array();
            $arrayParametrosEdb['intInterfaceElementoConectorId'] = $objServicioTecnico->getInterfaceElementoClienteId();
            $arrayParametrosEdb['strTipoSmartWifi']               = 'ExtenderDualBand';
            $arrayParametrosEdb['arrayData']                      = array();
            $arrayElementosEdb = $this->emInfraestructura
                                      ->getRepository('schemaBundle:InfoElemento')
                                      ->getElementosSmartWifiByInterface($arrayParametrosEdb);
            $arrayElementosRetiroEquipos = array_merge($arrayElementosServicio,$arrayElementosEdb);
            $arrayParametrosSmartWifi = array();
            $arrayParametrosSmartWifi['intInterfaceElementoConectorId'] = $objServicioTecnico->getInterfaceElementoClienteId();
            $arrayParametrosSmartWifi['strTipoSmartWifi'] = 'RentaSmartWifi';
            $arrayParametrosSmartWifi['arrayData']        = array();
            $arrayElementosSmartWifi                      = $this->emInfraestructura
                                                                 ->getRepository('schemaBundle:InfoElemento')
                                                                 ->getElementosSmartWifiByInterface($arrayParametrosSmartWifi);
            $arrayElementosRetiroEquipos = array_merge($arrayElementosRetiroEquipos,$arrayElementosSmartWifi);

            //******Se consultan los servicios del punto y se valida si existe un servicio de NetlifeCam Activo*****//
            if(is_object($objServicio->getPuntoId()))
            {
                $objInfoServicios = $this->emCome->getRepository('schemaBundle:InfoServicio')
                                                ->findBy(array('puntoId' => $objServicio->getPuntoId()->getId(),
                                                                'estado'  => "Activo"));

                foreach($objInfoServicios as $idxInfoServicios)
                {
                    $intIdProducto = "";
                    if(is_object($idxInfoServicios->getProductoId()))
                    {
                        $intIdProducto = $idxInfoServicios->getProductoId()->getId();
                        //Se consulta si el punto tiene servicios de NetlifeCam activos
                        $arrayParametrosProductoPermitido = $this->emCome
                                                                ->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('PROYECTO NETLIFECAM',
                                                                        'INFRAESTRUCTURA',
                                                                        'ACTIVACION PARA NETLIFECAM',
                                                                        'PRODUCTO CONFIGURADO PARA REGISTRAR ELEMENTO',
                                                                        $intIdProducto,
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '18');

                        if(isset($arrayParametrosProductoPermitido["valor1"]) && !empty($arrayParametrosProductoPermitido["valor1"]))
                        {
                            //Se consulta si el servicio esta Activo y de ser asi se asocia la serie de la camara en la solicitud
                            $objServicioTecnicoItem = $this->emCome
                                                           ->getRepository('schemaBundle:InfoServicioTecnico')
                                                           ->findOneBy(array("servicioId" => $idxInfoServicios->getId()));
                            $intElementoClienteId = "";
                            if (is_object($objServicioTecnico) && $objServicioTecnicoItem->getElementoClienteId())
                            {
                                $objElementoNetlifecam = $this->emCome
                                                              ->getRepository('schemaBundle:InfoElemento')
                                                              ->find($objServicioTecnicoItem->getElementoClienteId());
                                array_push($arrayDataNetlifeCam, $objElementoNetlifecam);
                            }
                        }
                    }
                }
            }
            $arrayRespuesta["arrayElementosServicio"]  = $arrayElementosServicio;
            $arrayRespuesta["arrayElementosEdb"]       = $arrayElementosEdb;
            $arrayRespuesta["arrayDataNetlifeCam"]     = $arrayDataNetlifeCam;
            $arrayRespuesta["arrayElementosSmartWifi"] = $arrayElementosSmartWifi;
            $arrayElementosRetiroEquiposTmp = array_merge($arrayElementosRetiroEquipos,$arrayDataNetlifeCam);
            $arrayElementosRetiroEquiposFiltrado = array();
            foreach($arrayElementosRetiroEquiposTmp as $objElementoRetiroEquipo)
            {
                if (count($arrayElementosRetiroEquiposFiltrado) === 0)
                {
                    array_push($arrayElementosRetiroEquiposFiltrado, $objElementoRetiroEquipo);
                }
                else
                {
                    $boolExisteElemento = false;
                    foreach($arrayElementosRetiroEquiposFiltrado as $objElementoRetiroEquipoFiltrado)
                    {
                        if ($objElementoRetiroEquipo->getId() === $objElementoRetiroEquipoFiltrado->getId())
                        {
                            $boolExisteElemento = true;
                        }
                    }
                    if ($boolExisteElemento === false)
                    {
                        array_push($arrayElementosRetiroEquiposFiltrado, $objElementoRetiroEquipo);
                    }
                }
            }
            $arrayRespuesta["arrayElementosRetiroEquipos"] = $arrayElementosRetiroEquiposFiltrado;
        }
        catch (\Exception $objEx)
        {
            $this->utilServicio->insertError( 'Telcos+',
                                              'InfoServicioService.obtenerEquiposServicio',
                                              "Se presentaron problemas al obtener los elementos del cliente.".
                                              $objEx->getMessage(),
                                              $strUsrCreacion,
                                              $strIpCreacion );
            $arrayRespuesta["strStatus"]  = "ERROR";
            $arrayRespuesta["strMensaje"] = "Se presentaron errores al clonar las solicitudes";
        }
        return $arrayRespuesta;
    }

    /**
     * Función que permite obtener el prefijo de la empresa con restricción de factibilidad.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 - Versión Inicial.
     *
     * @return $objRestriccionEmpresa || null
     *
     */

    public function getRestriccionEmpresa()
    {
        $objAdmiParametroDet = $this->emcom->getRepository('schemaBundle:AdmiParametroDet')
            ->findOneBy(array(
                'descripcion' => 'RESTRICCION_FACTIBILIDAD_EMPRESA',
                'estado'      => 'Activo'
            ));

        if (is_object($objAdmiParametroDet)
            && method_exists($objAdmiParametroDet, 'getValor1')
            && method_exists($objAdmiParametroDet, 'getValor2'))
        {
            $objRestriccionEmpresa =
                array(
                    'strPrefijoEmpresa' => $objAdmiParametroDet->getValor2(),
                    'intIdEmpresa' => $objAdmiParametroDet->getValor1()
                );
        }


        return isset($objRestriccionEmpresa) ? $objRestriccionEmpresa : null;

    }

    /**
     * clonarSolicitudesPorCrs
     * 
     * Función que realiza la clonación de las solicitudes de un servicio por motivo de cambio de razón social
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 23-05-2019
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 04-05-2020 - Se agrega el tipo de solicitud: 'SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO' Y 'SOLICITUD AGREGAR EQUIPO MASIVO'
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 06-05-2021 Se modifica el proceso al cerrar las tareas asociadas a las solicitudes del servicio origen
     *
     * @param array $arrayParametros [
     *                                  "objServicioOrigen"  => objeto del servicio,
     *                                  "objServicioDestino" => objeto del servicio,
     *                                  "strUsrCreacion"     => usuario de creación a utilizar en el proceso
     *                                  "strIpCreacion"      => ip del usuario de creación
     *                                  "strEmpresaCod"      => codigo de empresa
     *                               ]
     * 
     * @return return $arrayRespuesta [ "strStatus"             => OK o ERROR, 
     *                                  "strMensaje"            => mensaje de error
     *                                ]
     */
    public function clonarSolicitudesPorCrs($arrayParametros)
    {
        $objServicioOrigen  = $arrayParametros["objServicioOrigen"];
        $objServicioDestino = $arrayParametros["objServicioDestino"];
        $strUsrCreacion     = $arrayParametros["strUsrCreacion"];
        $strIpCreacion      = $arrayParametros["strIpCreacion"];
        $strEmpresaCod      = $arrayParametros["strEmpresaCod"];
        $arrayRespuesta     = array();
        $objSolClonarSol    = null;
        $arrayRespuesta["strStatus"]   = "OK";
        $arrayRespuesta["strMensaje"]  = "Información trasladada exitosamente";
        $arrayEstadosNoPermitidos      = array('Rechazado', 'Rechazada', 'Anulado', 'Cancel',
                                               'Anulada', 'Eliminada', 'Eliminado', 'Finalizado', 'Finalizada');
        $arrayTipoSolicitudes          = array('SOLICITUD AGREGAR EQUIPO','SOLICITUD AGREGAR EQUIPO MASIVO','SOLICITUD CAMBIO EQUIPO POR SOPORTE',
                                               'SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO');

        try
        {
            $objProductoInternet = $this->emcom
                                        ->getRepository('schemaBundle:AdmiProducto')
                                        ->findOneBy(array("nombreTecnico" => "INTERNET",
                                                          "empresaCod"    => $strEmpresaCod,
                                                          "estado"        => "Activo"));
            
            if (is_object($objServicioOrigen) && 
                is_object($objServicioDestino) &&
                is_object($objProductoInternet))
            {
                foreach($arrayTipoSolicitudes as $strTipoSolicitud)
                {
                    $objSolClonarSol  = null;
                    $objTipoSolicitud = $this->emcom
                                             ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                             ->findOneBy(array('descripcionSolicitud' => $strTipoSolicitud,
                                                               'estado'               => 'Activo'));
                    if (is_object($objTipoSolicitud))
                    {
                        $arraySolicitudesAgregarEquipo = $this->emcom
                                                              ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                              ->findBy(array('servicioId' => $objServicioOrigen->getId(),
                                                                             'tipoSolicitudId' => $objTipoSolicitud->getId()));
                        foreach($arraySolicitudesAgregarEquipo as $objSolicitudAgregarEquipo)
                        {
                            if ( !in_array($objSolicitudAgregarEquipo->getEstado(), $arrayEstadosNoPermitidos) )
                            {
                                $objSolClonarSol = $objSolicitudAgregarEquipo;
                                break;
                            }
                        }
                        if(is_object($objSolClonarSol))
                        {
                            //crear solicitud en el servicio destino de traslado
                            $strEstadoSolicitud       = "PrePlanificada";
                            if ($objSolClonarSol->getEstado() == 'Pendiente')
                            {
                                $strEstadoSolicitud = $objSolClonarSol->getEstado();
                            }

                            $strTieneWifiDualBand     = "NO";
                            $strTieneExtenderDualBand = "NO";

                            $objCaractWifiDualBand  = $this->emcom
                                                   ->getRepository("schemaBundle:AdmiCaracteristica")
                                                   ->findOneBy(array('descripcionCaracteristica' => 'WIFI DUAL BAND',
                                                                     'estado'                    => 'Activo'));
                            if (!is_object($objCaractWifiDualBand))
                            {
                                throw new \Exception("No se encontró información acerca de característica WIFI DUAL BAND");
                            }

                            $objCaractExtenderDualBand  = $this->emcom
                                                                ->getRepository("schemaBundle:AdmiCaracteristica")
                                                                ->findOneBy(array('descripcionCaracteristica' => 'EXTENDER DUAL BAND',
                                                                                  'estado'                    => 'Activo'));
                            if (!is_object($objCaractExtenderDualBand))
                            {
                                throw new \Exception("No se encontró información acerca de característica EXTENDER DUAL BAND");
                            }

                            $objSolClonarSolNew  = new InfoDetalleSolicitud();
                            $objSolClonarSolNew->setServicioId($objServicioDestino);
                            $objSolClonarSolNew->setTipoSolicitudId($objTipoSolicitud);
                            $objSolClonarSolNew->setEstado($strEstadoSolicitud);
                            $objSolClonarSolNew->setUsrCreacion($strUsrCreacion);
                            $objSolClonarSolNew->setFeCreacion(new \DateTime('now'));
                            $this->emcom->persist($objSolClonarSolNew);
                            $this->emcom->flush();


                            $strObservacionCorreo = $objTipoSolicitud->getDescripcionSolicitud()." creada automáticamente";

                            //eliminar caracteristicas viejas y crear caracteristicas en nueva solicitud de servicio destino de traslado
                            $arrayCaracteristicasSol = $this->emcom
                                                            ->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                            ->findBy(array("detalleSolicitudId" => $objSolClonarSol->getId()));
                            foreach($arrayCaracteristicasSol as $objCaracteristicaSol)
                            {
                                $objCaracteristicaSol->setEstado("Finalizada");
                                $objCaracteristicaSol->setUsrUltMod($strUsrCreacion);
                                $objCaracteristicaSol->setFeUltMod(new \DateTime('now'));
                                $this->emcom->persist($objCaracteristicaSol);
                                $this->emcom->flush();
                                if ($objCaracteristicaSol->getCaracteristicaId()->getId() == $objCaractWifiDualBand->getId())
                                {
                                    $strTieneWifiDualBand = "SI";
                                }
                                if ($objCaracteristicaSol->getCaracteristicaId()->getId() == $objCaractExtenderDualBand->getId())
                                {
                                    $strTieneExtenderDualBand = "SI";
                                }
                                $objCaracteristicaSolDestino = new InfoDetalleSolCaract();
                                $objCaracteristicaSolDestino->setCaracteristicaId($objCaracteristicaSol->getCaracteristicaId());
                                $objCaracteristicaSolDestino->setDetalleSolicitudId($objSolClonarSolNew);
                                $objCaracteristicaSolDestino->setValor($objCaracteristicaSol->getValor());
                                $objCaracteristicaSolDestino->setEstado($strEstadoSolicitud);
                                $objCaracteristicaSolDestino->setUsrCreacion($strUsrCreacion);
                                $objCaracteristicaSolDestino->setFeCreacion(new \DateTime('now'));
                                $this->emcom->persist($objCaracteristicaSolDestino);
                                $this->emcom->flush();
                            }

                            if($strTieneWifiDualBand == "SI")
                            {
                                $strObservacionCorreo .= "<br>Incluye cambio de CPE ONT de un Wifi Estándar a un Wifi Dual Band.";
                            }

                            if($strTieneExtenderDualBand == "SI")
                            {
                                $strObservacionCorreo .= "<br>Incluye agregar equipo Extender Dual Band.";
                            }
                            //historial de la nueva solicitud en el servicio destino
                            $objDetalleSolHistEquipoDualBand = new InfoDetalleSolHist();
                            $objDetalleSolHistEquipoDualBand->setDetalleSolicitudId($objSolClonarSolNew);
                            $objDetalleSolHistEquipoDualBand->setIpCreacion($strIpCreacion);
                            $objDetalleSolHistEquipoDualBand->setFeCreacion(new \DateTime('now'));
                            $objDetalleSolHistEquipoDualBand->setUsrCreacion($strUsrCreacion);
                            $objDetalleSolHistEquipoDualBand->setEstado($strEstadoSolicitud);
                            $objDetalleSolHistEquipoDualBand->setObservacion($strObservacionCorreo);
                            $this->emcom->persist($objDetalleSolHistEquipoDualBand);
                            $this->emcom->flush();

                            //finalizar solicitud en origen de traslado
                            $objSolClonarSol->setEstado("Finalizada");
                            $this->emcom->persist($objSolClonarSol);
                            $this->emcom->flush();
                            $objHistorialSolicitudCpe = new InfoDetalleSolHist();
                            $objHistorialSolicitudCpe->setDetalleSolicitudId($objSolClonarSol);
                            $objHistorialSolicitudCpe->setEstado($objSolClonarSol->getEstado());
                            $objHistorialSolicitudCpe->setObservacion("Se finaliza ".$strTipoSolicitud." por Cambio de razón social del cliente.");
                            $objHistorialSolicitudCpe->setUsrCreacion($strUsrCreacion);
                            $objHistorialSolicitudCpe->setFeCreacion(new \DateTime('now'));
                            $objHistorialSolicitudCpe->setIpCreacion($strIpCreacion);
                            $this->emcom->persist($objHistorialSolicitudCpe);
                            $this->emcom->flush();
                            
                            $arrayParametrosFinalizaSolicitud   = array("intIdDetalleSolicitud" => $objSolClonarSol->getId(),
                                                                        "strProceso"            => 
                                                                        "SEGUIMIENTO_GENERAL:Solicitud asociada a esta tarea fue "
                                                                        ."finalizada por Cambio de razón social del cliente.");
                            $this->eminf->getRepository('schemaBundle:InfoDetalleSolicitud')
                                        ->cerrarTareasPorSolicitud($arrayParametrosFinalizaSolicitud);

                            $this->serviceGeneral
                                 ->envioNotifAgregarEquipo( array(
                                                                    "objPunto"                  => $objServicioDestino->getPuntoId(),
                                                                    "objServicio"               => $objServicioDestino,
                                                                    "strObservacionCorreo"      => $strObservacionCorreo,
                                                                    "strDescripcionSolicitud"   => $objTipoSolicitud->getDescripcionSolicitud(),
                                                                    "strUsrCreacion"            => $strUsrCreacion,
                                                                    "strIpCreacion"             => $strIpCreacion
                                                                 ));
                        }
                    }
                }
            }
        }
        catch (\Exception $objEx)
        {
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService.clonarSolicitudesPorCrs', 
                                              "Se presentaron problemas al clonar las solicitudes ".
                                              "del servicio origen del CRS. ".
                                              $objEx->getMessage(), 
                                              $strUsrCreacion, 
                                              $strIpCreacion );
            $arrayRespuesta["strStatus"]  = "ERROR";
            $arrayRespuesta["strMensaje"] = "Se presentaron errores al clonar las solicitudes";
        }
        
        return $arrayRespuesta;
    }
    
    /**
     * clonarSolicitudesPorTraslado
     * 
     * Función que traslada las solicitudes pendientes de gestión de un servicio de tipo de orden traslado
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 25-02-2019
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 04-05-2020 - Se agrega el tipo de solicitud: 'SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO' y 'SOLICITUD AGREGAR EQUIPO MASIVO'
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 06-05-2021 Se modifica el proceso al cerrar las tareas asociadas a las solicitudes del servicio origen
     *
     * @param array $arrayParametros [
     *                                  "objServicio"       => objeto del servicio,
     *                                  "strUsrCreacion"    => usuario de creación a utilizar en el proceso
     *                                  "strIpCreacion"     => ip del usuario de creación
     *                                  "strEmpresaCod"     => codigo de empresa
     *                               ]
     * 
     * @return return $arrayRespuesta [ "strStatus"             => OK o ERROR, 
     *                                  "strMensaje"            => mensaje de error
     *                                ]
     */
    public function clonarSolicitudesPorTraslado($arrayParametros)
    {
        $objServicio    = $arrayParametros["objServicio"];
        $strUsrCreacion = $arrayParametros["strUsrCreacion"];
        $strIpCreacion  = $arrayParametros["strIpCreacion"];
        $strEmpresaCod  = $arrayParametros["strEmpresaCod"];
        $arrayRespuesta = array();
        $objSolAgregarEquipoAtrasladar = null;
        $arrayRespuesta["strStatus"]   = "OK";
        $arrayRespuesta["strMensaje"]  = "Información trasladada exitosamente";
        $arrayEstadosNoPermitidos      = array('Pendiente','Rechazado', 'Rechazada', 'Anulado', 'Cancel',
                                               'Anulada', 'Eliminada', 'Eliminado', 'Finalizado', 'Finalizada');
        $arrayTipoSolicitudes          = array('SOLICITUD AGREGAR EQUIPO','SOLICITUD AGREGAR EQUIPO MASIVO','SOLICITUD CAMBIO EQUIPO POR SOPORTE',
                                               'SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO');
        try
        {
            $objProductoInternet = $this->emcom
                                        ->getRepository('schemaBundle:AdmiProducto')
                                        ->findOneBy(array("nombreTecnico"=>"INTERNET", "empresaCod" => $strEmpresaCod, "estado" => "Activo"));
            
            if (is_object($objServicio) && is_object($objProductoInternet))
            {
                $objSpcTraslado = $this->serviceGeneral->getServicioProductoCaracteristica($objServicio, "TRASLADO", $objProductoInternet);
                if (is_object($objSpcTraslado))
                {
                    $objServicioOrigenTraslado = $this->emcom->getRepository('schemaBundle:InfoServicio')->find($objSpcTraslado->getValor());
                    if ($objServicioOrigenTraslado)
                    {
                        foreach($arrayTipoSolicitudes as $strTipoSolicitud)
                        {
                            $objSolAgregarEquipoAtrasladar = null;
                            $objTipoSolicitud = $this->emcom
                                                     ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                     ->findOneBy(array('descripcionSolicitud' => $strTipoSolicitud,
                                                                       'estado'               => 'Activo'));
                            if (is_object($objTipoSolicitud))
                            {
                                $arraySolicitudesAgregarEquipo = $this->emcom
                                                                      ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                      ->findBy(array('servicioId'      => $objServicioOrigenTraslado->getId(),
                                                                                     'tipoSolicitudId' => $objTipoSolicitud->getId()));
                                foreach($arraySolicitudesAgregarEquipo as $objSolicitudAgregarEquipo)
                                {
                                    if ( !in_array($objSolicitudAgregarEquipo->getEstado(), $arrayEstadosNoPermitidos) )
                                    {
                                        $objSolAgregarEquipoAtrasladar = $objSolicitudAgregarEquipo;
                                        break;
                                    }
                                }
                                if(is_object($objSolAgregarEquipoAtrasladar))
                                {
                                    //crear solicitud en el servicio destino de traslado
                                    $strEstadoSolicitud       = "PrePlanificada";
                                    if ($objSolAgregarEquipoAtrasladar->getEstado() == 'Pendiente')
                                    {
                                        $strEstadoSolicitud = $objSolAgregarEquipoAtrasladar->getEstado();
                                    }

                                    $strTieneWifiDualBand     = "NO";
                                    $strTieneExtenderDualBand = "NO";

                                    $objCaractWifiDualBand  = $this->emcom
                                                           ->getRepository("schemaBundle:AdmiCaracteristica")
                                                           ->findOneBy(array('descripcionCaracteristica' => 'WIFI DUAL BAND',
                                                                             'estado'                    => 'Activo'));
                                    if (!is_object($objCaractWifiDualBand))
                                    {
                                        throw new \Exception("No se encontró información acerca de característica WIFI DUAL BAND");
                                    }

                                    $objCaractExtenderDualBand  = $this->emcom
                                                                        ->getRepository("schemaBundle:AdmiCaracteristica")
                                                                        ->findOneBy(array('descripcionCaracteristica' => 'EXTENDER DUAL BAND',
                                                                                          'estado'                    => 'Activo'));
                                    if (!is_object($objCaractExtenderDualBand))
                                    {
                                        throw new \Exception("No se encontró información acerca de característica EXTENDER DUAL BAND");
                                    }

                                    $objSolAgregarEquipoDualBand  = new InfoDetalleSolicitud();
                                    $objSolAgregarEquipoDualBand->setServicioId($objServicio);
                                    $objSolAgregarEquipoDualBand->setTipoSolicitudId($objTipoSolicitud);
                                    $objSolAgregarEquipoDualBand->setEstado($strEstadoSolicitud);
                                    $objSolAgregarEquipoDualBand->setUsrCreacion($strUsrCreacion);
                                    $objSolAgregarEquipoDualBand->setFeCreacion(new \DateTime('now'));
                                    $this->emcom->persist($objSolAgregarEquipoDualBand);
                                    $this->emcom->flush();


                                    $strObservacionCorreo = $objTipoSolicitud->getDescripcionSolicitud()." creada automáticamente";

                                    //eliminar caracteristicas viejas y crear caracteristicas en nueva solicitud de servicio destino de traslado
                                    $arrayCaracteristicasSol = $this->emcom
                                                                    ->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                    ->findBy(array("detalleSolicitudId" => $objSolAgregarEquipoAtrasladar->getId()));
                                    foreach($arrayCaracteristicasSol as $objCaracteristicaSol)
                                    {
                                        $objCaracteristicaSol->setEstado("Finalizada");
                                        $objCaracteristicaSol->setUsrUltMod($strUsrCreacion);
                                        $objCaracteristicaSol->setFeUltMod(new \DateTime('now'));
                                        $this->emcom->persist($objCaracteristicaSol);
                                        $this->emcom->flush();
                                        if ($objCaracteristicaSol->getCaracteristicaId()->getId() == $objCaractWifiDualBand->getId())
                                        {
                                            $strTieneWifiDualBand = "SI";
                                        }
                                        if ($objCaracteristicaSol->getCaracteristicaId()->getId() == $objCaractExtenderDualBand->getId())
                                        {
                                            $strTieneExtenderDualBand = "SI";
                                        }
                                        $objCaracteristicaSolDestino = new InfoDetalleSolCaract();
                                        $objCaracteristicaSolDestino->setCaracteristicaId($objCaracteristicaSol->getCaracteristicaId());
                                        $objCaracteristicaSolDestino->setDetalleSolicitudId($objSolAgregarEquipoDualBand);
                                        $objCaracteristicaSolDestino->setValor($objCaracteristicaSol->getValor());
                                        $objCaracteristicaSolDestino->setEstado($strEstadoSolicitud);
                                        $objCaracteristicaSolDestino->setUsrCreacion($strUsrCreacion);
                                        $objCaracteristicaSolDestino->setFeCreacion(new \DateTime('now'));
                                        $this->emcom->persist($objCaracteristicaSolDestino);
                                        $this->emcom->flush();
                                    }

                                    if($strTieneWifiDualBand == "SI")
                                    {
                                        $strObservacionCorreo .= "<br>Incluye cambio de CPE ONT de un Wifi Estándar a un Wifi Dual Band.";
                                    }

                                    if($strTieneExtenderDualBand == "SI")
                                    {
                                        $strObservacionCorreo .= "<br>Incluye agregar equipo Extender Dual Band.";
                                    }
                                    //historial de la nueva solicitud en el servicio destino
                                    $objDetalleSolHistEquipoDualBand = new InfoDetalleSolHist();
                                    $objDetalleSolHistEquipoDualBand->setDetalleSolicitudId($objSolAgregarEquipoDualBand);
                                    $objDetalleSolHistEquipoDualBand->setIpCreacion($strIpCreacion);
                                    $objDetalleSolHistEquipoDualBand->setFeCreacion(new \DateTime('now'));
                                    $objDetalleSolHistEquipoDualBand->setUsrCreacion($strUsrCreacion);
                                    $objDetalleSolHistEquipoDualBand->setEstado($strEstadoSolicitud);
                                    $objDetalleSolHistEquipoDualBand->setObservacion($strObservacionCorreo);
                                    $this->emcom->persist($objDetalleSolHistEquipoDualBand);
                                    $this->emcom->flush();

                                    //finalizar solicitud en origen de traslado
                                    $objSolAgregarEquipoAtrasladar->setEstado("Finalizada");
                                    $this->emcom->persist($objSolAgregarEquipoAtrasladar);
                                    $this->emcom->flush();
                                    $objHistorialSolicitudCpe = new InfoDetalleSolHist();
                                    $objHistorialSolicitudCpe->setDetalleSolicitudId($objSolAgregarEquipoAtrasladar);
                                    $objHistorialSolicitudCpe->setEstado($objSolAgregarEquipoAtrasladar->getEstado());
                                    $objHistorialSolicitudCpe->setObservacion("Se finaliza ".$strTipoSolicitud." por traslado de servicio");
                                    $objHistorialSolicitudCpe->setUsrCreacion($strUsrCreacion);
                                    $objHistorialSolicitudCpe->setFeCreacion(new \DateTime('now'));
                                    $objHistorialSolicitudCpe->setIpCreacion($strIpCreacion);
                                    $this->emcom->persist($objHistorialSolicitudCpe);
                                    $this->emcom->flush();
                                    
                                    $arrayParametrosFinalizaSolicitud   = array("intIdDetalleSolicitud" => $objSolAgregarEquipoAtrasladar->getId(),
                                                                                "strProceso"            => 
                                                                                "SEGUIMIENTO_GENERAL:Solicitud asociada a esta tarea fue "
                                                                                ."finalizada por traslado de servicio");
                                    $this->eminf->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                ->cerrarTareasPorSolicitud($arrayParametrosFinalizaSolicitud);
                                    
                                    $this->serviceGeneral
                                         ->envioNotifAgregarEquipo( array(
                                                                            "objPunto"                  => $objServicio->getPuntoId(),
                                                                            "objServicio"               => $objServicio,
                                                                            "strObservacionCorreo"      => $strObservacionCorreo,
                                                                            "strDescripcionSolicitud"   => $objTipoSolicitud->getDescripcionSolicitud(),
                                                                            "strUsrCreacion"            => $strUsrCreacion,
                                                                            "strIpCreacion"             => $strIpCreacion
                                                                         ));
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (\Exception $objEx)
        {
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService.clonarSolicitudesPorTraslado', 
                                              "Se presentaron problemas al trasladar las solicitudes ".
                                              "del servicio origen del traslado. ".
                                              $objEx->getMessage(), 
                                              $strUsrCreacion, 
                                              $strIpCreacion );
            $arrayRespuesta["strStatus"]  = "ERROR";
            $arrayRespuesta["strMensaje"] = "Se presentaron errores al trasladar las solicitudes";
        }
        
        return $arrayRespuesta;
    }
    
    /**
     * Función que genera las solicitudes necesarias para equipos dual band o traslada las solicitudes que tenía el servicio origen
     * 
     * @param $arrayParametros [
     *                              "intIdServicio"     => Id del servicio
     *                              "strCodEmpresa"     => Id de la empresa
     *                              "strUsrCreacion"    => Usuario de creación
     *                              "strIpCreacion"     => Ip de creación
     *                          ]
     * 
     * @return array $arrayRespuesta [ 
     *                                  "status"    => 'OK' o 'ERROR'
     *                                  "mensaje"   => Mensaje de error
     *                                ]
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 23-07-2020
     * 
     */
    public function generaSolsPorTraslado($arrayParametros)
    {
        $intIdServicio              = $arrayParametros["intIdServicio"];
        $strCodEmpresa              = $arrayParametros["strCodEmpresa"];
        $strObsProcesoEjecutante    = $arrayParametros["strObsProcesoEjecutante"] ? $arrayParametros["strObsProcesoEjecutante"] 
                                                                                  : " por traslado de servicio";
        $strUsrCreacion             = $arrayParametros["strUsrCreacion"];
        $strIpCreacion              = $arrayParametros["strIpCreacion"];
        $strStatus                  = str_repeat(' ', 5);
        $strMsjError                = str_repeat(' ', 1000);
        try
        {
            $strSql = " BEGIN 
                          DB_INFRAESTRUCTURA.INFRK_TRANSACCIONES.P_GENERA_SOLS_POR_TRASLADO(:intIdServicio,
                                                                                            :strCodEmpresa,
                                                                                            :strObsProcesoEjecutante,
                                                                                            :strUsrCreacion,
                                                                                            :strIpCreacion,
                                                                                            :strStatus, 
                                                                                            :strMsjError); 
                        END;";
            $objStmt = $this->emInfraestructura->getConnection()->prepare($strSql);
            $objStmt->bindParam('intIdServicio', $intIdServicio);
            $objStmt->bindParam('strCodEmpresa', $strCodEmpresa);
            $objStmt->bindParam('strObsProcesoEjecutante', $strObsProcesoEjecutante);
            $objStmt->bindParam('strUsrCreacion', $strUsrCreacion);
            $objStmt->bindParam('strIpCreacion', $strIpCreacion);
            $objStmt->bindParam('strStatus', $strStatus);
            $objStmt->bindParam('strMsjError', $strMsjError);
            $objStmt->execute();
            if(strlen(trim($strStatus)) > 0)
            {
                $strStatusRespuesta     = $strStatus;
                $strMensajeRespuesta    = $strMsjError;
            }
            else
            {
                $strStatusRespuesta     = "ERROR";
                $strMensajeRespuesta    = "Se presentaron problemas al trasladar las solicitudes del servicio origen del traslado. "
                                          ."Por favor comuníquese con Sistemas!";
            }
        }
        catch (\Exception $e)
        {
            $strStatusRespuesta     = "ERROR";
            $strMensajeRespuesta    = 'Ha ocurrido un error inesperado y no se ha podido trasladar las solicitudes del servicio origen del traslado. '
                                      .'Por favor comuníquese con Sistemas!';
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService->generaSolsPorTraslado', 
                                              "Ha ocurrido un error inesperado y no se ha podido trasladar  ".
                                              "las solicitudes del servicio origen del traslado. ".
                                              $e->getMessage(), 
                                              $strUsrCreacion, 
                                              $strIpCreacion );
            error_log("Error al trasladar las solicitudes del servicio origen del traslado ".$e->getMessage());
        }
        $arrayRespuesta = array("status"    => $strStatusRespuesta,
                                "mensaje"   => $strMensajeRespuesta);
        return $arrayRespuesta;
    }
    
    
    
    /**
     * recrearSolicitudesPorTraslado
     * 
     * Esta función genera nuevamente las solicitudes en el origen del traslado debido a que el destino del traslado fue 
     * rechazado o anulado
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.0 27-02-2019
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1 04-05-2020 - Se agrega el tipo de solicitud: 'SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO' y 'SOLICITUD AGREGAR EQUIPO MASIVO'
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 06-05-2021 Se modifica el proceso al cerrar las tareas asociadas a las solicitudes del servicio destino
     *
     * @param array $arrayParametros [
     *                                  "objServicio"       => objeto del servicio,
     *                                  "strUsrCreacion"    => usuario de creación a utilizar en el proceso
     *                                  "strIpCreacion"     => ip del usuario de creación
     *                                  "strEmpresaCod"     => codigo de empresa
     *                               ]
     * 
     * @return return $arrayRespuesta [ "strStatus"             => OK o ERROR, 
     *                                  "strMensaje"            => mensaje de error
     *                                ]
     */
    public function recrearSolicitudesPorTraslado($arrayParametros)
    {
        $objServicio    = $arrayParametros["objServicio"];
        $strUsrCreacion = $arrayParametros["strUsrCreacion"];
        $strIpCreacion  = $arrayParametros["strIpCreacion"];
        $strEmpresaCod  = $arrayParametros["strEmpresaCod"];
        $arrayRespuesta = array();
        $objSolAgregarEquipoAtrasladar = null;
        $arrayEstadosNoPermitidos      = array('Rechazado', 'Rechazada', 'Anulado', 'Cancel',
                                               'Anulada', 'Eliminada', 'Eliminado', 'Finalizado', 'Finalizada');
        $arrayTipoSolicitudes          = array('SOLICITUD AGREGAR EQUIPO','SOLICITUD AGREGAR EQUIPO MASIVO','SOLICITUD CAMBIO EQUIPO POR SOPORTE',
                                               'SOLICITUD CAMBIO EQUIPO POR SOPORTE MASIVO');
        $arrayRespuesta["strStatus"]   = "OK";
        $arrayRespuesta["strMensaje"]  = "Información trasladada exitosamente";
        try
        {
            $objProductoInternet = $this->emcom
                                        ->getRepository('schemaBundle:AdmiProducto')
                                        ->findOneBy(array("nombreTecnico"=>"INTERNET", "empresaCod" => $strEmpresaCod, "estado" => "Activo"));
            
            if (is_object($objServicio) && is_object($objProductoInternet))
            {
                $objSpcTraslado = $this->serviceGeneral->getServicioProductoCaracteristica($objServicio, "TRASLADO", $objProductoInternet);
                if (is_object($objSpcTraslado))
                {
                    $objServicioOrigenTraslado = $this->emcom->getRepository('schemaBundle:InfoServicio')->find($objSpcTraslado->getValor());
                    if ($objServicioOrigenTraslado)
                    {
                        foreach($arrayTipoSolicitudes as $strTipoSolicitud)
                        {
                            $objSolAgregarEquipoAtrasladar = null;
                            $objTipoSolicitud = $this->emcom
                                                     ->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                     ->findOneBy(array('descripcionSolicitud' => $strTipoSolicitud,
                                                                       'estado'               => 'Activo'));
                            if (is_object($objTipoSolicitud))
                            {
                                $arraySolicitudesAgregarEquipo = $this->emcom
                                                                      ->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                      ->findBy(array('servicioId' => $objServicio->getId(),
                                                                                     'tipoSolicitudId' => $objTipoSolicitud->getId()));
                                foreach($arraySolicitudesAgregarEquipo as $objSolicitudAgregarEquipo)
                                {
                                    if ( !in_array($objSolicitudAgregarEquipo->getEstado(), $arrayEstadosNoPermitidos) )
                                    {
                                        $objSolAgregarEquipoAtrasladar = $objSolicitudAgregarEquipo;
                                        break;
                                    }
                                }
                                if(is_object($objSolAgregarEquipoAtrasladar))
                                {
                                    //crear solicitud en el servicio destino de traslado
                                    $strEstadoSolicitud       = "PrePlanificada";
                                    $strTieneWifiDualBand     = "NO";
                                    $strTieneExtenderDualBand = "NO";

                                    $objCaractWifiDualBand  = $this->emcom
                                                           ->getRepository("schemaBundle:AdmiCaracteristica")
                                                           ->findOneBy(array('descripcionCaracteristica' => 'WIFI DUAL BAND',
                                                                             'estado'                    => 'Activo'));
                                    if (!is_object($objCaractWifiDualBand))
                                    {
                                        throw new \Exception("No se encontró información acerca de característica WIFI DUAL BAND");
                                    }

                                    $objCaractExtenderDualBand  = $this->emcom
                                                                        ->getRepository("schemaBundle:AdmiCaracteristica")
                                                                        ->findOneBy(array('descripcionCaracteristica' => 'EXTENDER DUAL BAND',
                                                                                          'estado'                    => 'Activo'));
                                    if (!is_object($objCaractExtenderDualBand))
                                    {
                                        throw new \Exception("No se encontró información acerca de característica EXTENDER DUAL BAND");
                                    }

                                    $objSolAgregarEquipoDualBand  = new InfoDetalleSolicitud();
                                    $objSolAgregarEquipoDualBand->setServicioId($objServicioOrigenTraslado);
                                    $objSolAgregarEquipoDualBand->setTipoSolicitudId($objTipoSolicitud);
                                    $objSolAgregarEquipoDualBand->setEstado($strEstadoSolicitud);
                                    $objSolAgregarEquipoDualBand->setUsrCreacion($strUsrCreacion);
                                    $objSolAgregarEquipoDualBand->setFeCreacion(new \DateTime('now'));
                                    $this->emcom->persist($objSolAgregarEquipoDualBand);
                                    $this->emcom->flush();


                                    $strObservacionCorreo = $objTipoSolicitud->getDescripcionSolicitud()." creada automáticamente";

                                    //eliminar caracteristicas viejas y crear caracteristicas en nueva solicitud de servicio destino de traslado
                                    $arrayCaracteristicasSol = $this->emcom
                                                                    ->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                    ->findBy(array("detalleSolicitudId" => $objSolAgregarEquipoAtrasladar->getId()));
                                    foreach($arrayCaracteristicasSol as $objCaracteristicaSol)
                                    {
                                        $objCaracteristicaSol->setEstado("Finalizada");
                                        $objCaracteristicaSol->setUsrUltMod($strUsrCreacion);
                                        $objCaracteristicaSol->setFeUltMod(new \DateTime('now'));
                                        $this->emcom->persist($objCaracteristicaSol);
                                        $this->emcom->flush();
                                        if ($objCaracteristicaSol->getCaracteristicaId()->getId() == $objCaractWifiDualBand->getId())
                                        {
                                            $strTieneWifiDualBand = "SI";
                                        }
                                        if ($objCaracteristicaSol->getCaracteristicaId()->getId() == $objCaractExtenderDualBand->getId())
                                        {
                                            $strTieneExtenderDualBand = "SI";
                                        }
                                        $objCaracteristicaSolDestino = new InfoDetalleSolCaract();
                                        $objCaracteristicaSolDestino->setCaracteristicaId($objCaracteristicaSol->getCaracteristicaId());
                                        $objCaracteristicaSolDestino->setDetalleSolicitudId($objSolAgregarEquipoDualBand);
                                        $objCaracteristicaSolDestino->setValor($objCaracteristicaSol->getValor());
                                        $objCaracteristicaSolDestino->setEstado($strEstadoSolicitud);
                                        $objCaracteristicaSolDestino->setUsrCreacion($strUsrCreacion);
                                        $objCaracteristicaSolDestino->setFeCreacion(new \DateTime('now'));
                                        $this->emcom->persist($objCaracteristicaSolDestino);
                                        $this->emcom->flush();
                                    }

                                    if($strTieneWifiDualBand == "SI")
                                    {
                                        $strObservacionCorreo .= "<br>Incluye cambio de CPE ONT de un Wifi Estándar a un Wifi Dual Band.";
                                    }

                                    if($strTieneExtenderDualBand == "SI")
                                    {
                                        $strObservacionCorreo .= "<br>Incluye agregar equipo Extender Dual Band.";
                                    }
                                    //historial de la nueva solicitud en el servicio destino
                                    $objDetalleSolHistEquipoDualBand = new InfoDetalleSolHist();
                                    $objDetalleSolHistEquipoDualBand->setDetalleSolicitudId($objSolAgregarEquipoDualBand);
                                    $objDetalleSolHistEquipoDualBand->setIpCreacion($strIpCreacion);
                                    $objDetalleSolHistEquipoDualBand->setFeCreacion(new \DateTime('now'));
                                    $objDetalleSolHistEquipoDualBand->setUsrCreacion($strUsrCreacion);
                                    $objDetalleSolHistEquipoDualBand->setEstado($strEstadoSolicitud);
                                    $objDetalleSolHistEquipoDualBand->setObservacion($strObservacionCorreo);
                                    $this->emcom->persist($objDetalleSolHistEquipoDualBand);
                                    $this->emcom->flush();

                                    //finalizar solicitud en origen de traslado
                                    $objSolAgregarEquipoAtrasladar->setEstado("Finalizada");
                                    $this->emcom->persist($objSolAgregarEquipoAtrasladar);
                                    $this->emcom->flush();
                                    $objHistorialSolicitudCpe = new InfoDetalleSolHist();
                                    $objHistorialSolicitudCpe->setDetalleSolicitudId($objSolAgregarEquipoAtrasladar);
                                    $objHistorialSolicitudCpe->setEstado($objSolAgregarEquipoAtrasladar->getEstado());
                                    $objHistorialSolicitudCpe->setObservacion("Se finaliza solicitud de cambio de CPE por rechazo/anulación de servicio");
                                    $objHistorialSolicitudCpe->setUsrCreacion($strUsrCreacion);
                                    $objHistorialSolicitudCpe->setFeCreacion(new \DateTime('now'));
                                    $objHistorialSolicitudCpe->setIpCreacion($strIpCreacion);
                                    $this->emcom->persist($objHistorialSolicitudCpe);
                                    $this->emcom->flush();
                                    
                                    $arrayParametrosFinalizaSolicitud   = array("intIdDetalleSolicitud" => $objSolAgregarEquipoAtrasladar->getId(),
                                                                                "strProceso"            => 
                                                                                "SEGUIMIENTO_GENERAL:Solicitud asociada a esta tarea fue "
                                                                                ."finalizada por rechazo/anulación de servicio");
                                    $this->eminf->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                ->cerrarTareasPorSolicitud($arrayParametrosFinalizaSolicitud);
                                    
                                    $this->serviceGeneral
                                         ->envioNotifAgregarEquipo( array(
                                                                            "objPunto"                  => $objServicioOrigenTraslado->getPuntoId(),
                                                                            "objServicio"               => $objServicioOrigenTraslado,
                                                                            "strObservacionCorreo"      => $strObservacionCorreo,
                                                                            "strDescripcionSolicitud"   => $objTipoSolicitud->getDescripcionSolicitud(),
                                                                            "strUsrCreacion"            => $strUsrCreacion,
                                                                            "strIpCreacion"             => $strIpCreacion,
                                                                            "strEsRechazoAnulacion"     => "SI"
                                                                         ));
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (\Exception $objEx)
        {
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService.recrearSolicitudesPorTraslado', 
                                              "Se presentaron problemas al trasladar las solicitudes ".
                                              "del servicio origen del traslado. ".
                                              $objEx->getMessage(), 
                                              $strUsrCreacion, 
                                              $strIpCreacion );
            $arrayRespuesta["strStatus"]  = "ERROR";
            $arrayRespuesta["strMensaje"] = "Se presentaron errores al trasladar las solicitudes";
        }
        
        return $arrayRespuesta;
    }

    /**
     * Documentación para el método 'generarFactibilidadTn'.
     *
     * Método utilizado para obtener factibilidad automática de un servicio TN.
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0  30-06-2016
     *
     * @author Richard Cabrera <rcabrera@telconet.ec>
     * @version 1.1  23-09-2016 Se aplica un método que valida si el enlace entre el ODF y el CASSETTE
     *                          tiene configurado un bufferHiloId
     *
     *
     * @param Array    $arrayRegistrosFactibilidad
     * @param String   $strTipoInterface
     * @param String   $strPrefijoEmpresa
     *
     * @return Array Respuesta
     *
     * @since 1.0
     */
    public function generarFactibilidadTn($arrayRegistrosFactibilidad,$strTipoInterface)
    {
        $arrayDistanciaRegFacTn              = array();
        $arrayRespuesta                      = array();
        $arrayRespuesta['tieneFactibilidad'] = 'NO';
        $arrayRespuestaFactRegistro          = array();
        $countRegistrosFactibilidad          = count($arrayRegistrosFactibilidad);


        if ($countRegistrosFactibilidad > 0 )
        {
            // Obtener una lista de columnas
            foreach ($arrayRegistrosFactibilidad as $clave => $fila)
            {
                $arrayDistanciaRegFacTn[$clave] = $fila['distancia'];
            }

            /* Ordenar los datos con distancia de forma ascendente,
               agregar $arrayRegistrosFactibilidad como el último parámetro, para ordenar por la clave común */
            array_multisort($arrayDistanciaRegFacTn, SORT_ASC, $arrayRegistrosFactibilidad);

            foreach ($arrayRegistrosFactibilidad as $registro)
            {

                //Se valida por cada puerto OUT del cassette que el enlace del OUT del odf y el IN del cassette tenga configurado
                //un bufferHiloId
                $strTieneBufferHilo = $this->eminf->getRepository('schemaBundle:InfoElemento')
                                                  ->validarBufferHilo($registro['idInterfaceElementoConector']);
                if($strTieneBufferHilo == "S")
                {
                    $arrayParametros = array ();
                    $arrayParametros['interfaceElementoConectorId'] = $registro['idInterfaceElementoConector'];
                    $arrayParametros['strTipoInterface']            = $strTipoInterface;

                    $arrayRespuestaFactRegistro = $this->eminf->getRepository('schemaBundle:InfoElemento')
                                                              ->getOdfFactTnByInterfaceOutCassette($arrayParametros);
                    if ($arrayRespuestaFactRegistro['status'] == 'OK')
                    {
                        $arrayRespuesta['objInterfaceSw']                     = $arrayRespuestaFactRegistro['objInterfaceSw']  ;
                        $arrayRespuesta['objInterfaceOdf']                    = $arrayRespuestaFactRegistro['objInterfaceOdf'] ;
                        $arrayRespuesta['id_caja']                            = $registro['idCaja'];
                        $arrayRespuesta['nombre_caja']                        = $registro['nombreCaja'];
                        $arrayRespuesta['id_elemento_conector']               = $registro['idElementoConector'];
                        $arrayRespuesta['nombre_elemento_conector']           = $registro['nombreElementoConector'];
                        $arrayRespuesta['id_interface_elemento_conector']     = $registro['idInterfaceElementoConector'];
                        $arrayRespuesta['nombre_interface_elemento_conector'] = $registro['nombreInterfaceElementoConector'];
                        $arrayRespuesta['distancia_caja']                     = $registro['distancia'];
                        $arrayRespuesta['supera_distancia']                   = "no";
                        $arrayRespuesta['tieneFactibilidad']                  = 'SI';
                        $arrayRespuesta['existeErrorEnEnlace']                = 'NO';

                        return $arrayRespuesta;
                    }
                }
                else
                {
                    $arrayRespuesta['existeErrorEnEnlace'] = 'SI';
                }
            }
        }
        
        return $arrayRespuesta;
    }
    
    /**
     * Documentación para el método 'serviciosRequiereBackup'.
     *
     * Método utilizado para obtener los servicios por producto que posee el Punto.
     *
     * @return Response Mensaje
     *
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 29-04-2016
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.1 22-05-2016
     * Se quitan del filtro de búsqueda los estados 'In-Corte' & 'Inactivo'.
     *
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.2 20-07-2016
     * Se condensan 3 parámetros en un parámetro array
     * Se recibe el nuevo parámetro EXCLUIDOS para con listado de servicios que se requieren excluir.
     * 
     * @param Array $arrayParametros ['PUNTO']     integer id del punto
     *                               ['PRODUCTO']  integer id del producto
     *                               ['EMPRESA']   integer empresa cod
     *                               ['EXCLUIDOS'] string  listado de servicios excluídos.
     */
    public function serviciosRequiereBackup($arrayParametros, $strQuery)
    {
        $objResponse   = new Response();
        
        $objResponse->headers->set('Content-type', 'text/json');
        try
        {
            $arrayEstados    = array('Anulado', 'Cancel', 'Eliminado', 'Rechazada', 'Reubicado', 'Trasladado');
            $arrayParametros = array('PUNTO'           => $arrayParametros['PUNTO'],
                                     'CODIGO'          => $arrayParametros['PRODUCTO'],
                                     'EMPRESA'         => $arrayParametros['EMPRESA'],
                                     'EXCLUIDOS'       => $arrayParametros['EXCLUIDOS'],
                                     'TIPO_ENLACE'     => 'PRINCIPAL',
                                     'ESTADOS'         => $arrayEstados,
                                     'CARACTERISTICA'  => 'REQUIERE_BACKUP',
                                     'CARACTERISTICA2' => 'ES_BACKUP');

            $strJsonServicios = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                            ->getJsonServicioRequiereBackup($arrayParametros);
            
            if(!$strQuery)
            {
                $arrayJsonServicios = json_decode($strJsonServicios, true);
                if(intval($arrayJsonServicios['total']) > 0)
                {
                    $strJsonServicios = '{"msg":"SI"}';
                }
                else
                {
                    $strJsonServicios = '{"msg":"NO"}';
                }
            }
        }
        catch(\Exception $e)
        {
            $strJsonServicios = '{"msg":"error", "error":"' . $e->getMessage() . '"}';
        }
        $objResponse->setContent($strJsonServicios);
        return $objResponse;
    }
    
    /**
     * 
     * Metodo encargado de consultar si un Servicio es capaz de ser BACKUP o si dentro de la configuracion del producto requiere crearle un backup
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0
     * @since 03-02-2017
     * 
     * @param array $arrayParametros [ intIdServcio   Servicio a consultar si requiere backup o en si mismo puede ser backup ]
     * @return String $strRequiereBackup
     */
    public function validarServicioRequiereBackup($arrayParametros)
    {
        $arrayParametros['arrayEstadosExcluidos'] = array('Anulado', 'Cancel', 'Eliminado', 'Rechazada', 'Reubicado', 'Trasladado');
        $strRequiereBackup = $this->emcom->getRepository('schemaBundle:InfoServicio')->getServicioRequiereBackup($arrayParametros);        
        return $strRequiereBackup;
    }
    
    /**
     * Documentación para el método 'exportarReporteTeleventasOutbound'.
     * 
     * Genera el reporte de Televentas Outbound.
     * 
     * @param Array  $arrayStoreTeleventas
     * @param String $strUsuario
     * @param String $strEmpresa
     * 
     * @return Documento Excel.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 03-10-2015
     */
    public function exportarReporteTeleventasOutbound($arrayStoreTeleventas, $strUsuario)
    {
        try
        {
            $objPHPExcel   = new PHPExcel();
            $cacheMethod   = PHPExcel_CachedObjectStorageFactory:: cache_to_phpTemp;
            $cacheSettings = array(' memoryCacheSize ' => '1024MB');
            
            PHPExcel_Settings::setCacheStorageMethod($cacheMethod, $cacheSettings);

            // Seteo de metadata del documento excel.
            $objPHPExcel->getProperties()->setCreator("TELCOS++");
            $objPHPExcel->getProperties()->setLastModifiedBy($strUsuario);
            $objPHPExcel->getProperties()->setTitle("Consulta de Listado Televentas Outbound");
            $objPHPExcel->getProperties()->setSubject("Consulta de Listado Televentas Outbound");
            $objPHPExcel->getProperties()->setDescription("Resultado de consulta de Listado Televentas Outbound.");
            $objPHPExcel->getProperties()->setKeywords("Televentas");
            $objPHPExcel->getProperties()->setCategory("Reporte Televentas Outbound");

            $intIndice         = 1;
            $intMayorCliente   = 0; 
            $intMayorFijo      = 17; 
            $intMayorMovil     = 17; 
            $intMayorFormaPago = 0;

            $arrayCabecera = array('CLIENTE', 'TELEFONO FIJO', 'TELEFONO MOVIL', 'FORMA DE PAGO');
            $this->setValorEstiloCabecera($objPHPExcel->getActiveSheet(), $intIndice, $arrayCabecera);
            $objPHPExcel->getActiveSheet()->freezePaneByColumnAndRow(0, 2);
            
            // Se insertan los registros del reporte en las filas del excel.
            foreach($arrayStoreTeleventas as $objTeleventa)
            {
                $intIndice++;
                
                $objPHPExcel->getActiveSheet()->getRowDimension('' . $intIndice)->setRowHeight(20);
                
                $intMayorCliente   = $this->calcularMayor($objTeleventa['cliente'],    $intMayorCliente);
                $intMayorFormaPago = $this->calcularMayor($objTeleventa['forma_pago'], $intMayorFormaPago);

                $this->setValorArrayXCelda($objPHPExcel, $intIndice, $objTeleventa);
            }
            
            // Se redimensiona el ancho de las columnas.
            $this->setAnchoColumna($objPHPExcel, array($intMayorCliente, $intMayorFijo, $intMayorMovil, $intMayorFormaPago));

            // Se define la orientación y el tamaño del documento.
            $objPHPExcel->getActiveSheet()->getPageSetup()->setOrientation(PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
            $objPHPExcel->getActiveSheet()->getPageSetup()->setPaperSize(PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);

            $objPHPExcel->getActiveSheet()->setTitle('Televentas Outbound');

            $objPHPExcel->setActiveSheetIndex(0);
            
            return array('PHPExcel' => $objPHPExcel, 'INDICE' => --$intIndice);
        }
        catch(\Exception $ex)
        {
            return array('ERROR' => $ex->getMessage());
        }
    }
    
    /**
     * Documentación para el método 'setValorEstiloCabecera'.
     * 
     * Setea el valor del contenido de cada celda de la cabecera del reporte desde la columna A a la D según los valores dentro de $arrayValores.
     * 
     * @param WorkSheet $objWorkSheet Hoja activa del documento excel
     * @param Integer   $intIndice
     * @param Array     $arrayValores
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 16-03-2016
     */
    private function setValorEstiloCabecera($objWorkSheet, $intIndice, $arrayValores)
    {
        $arrayLetras = array('A', 'B', 'C', 'D');
        
        $i = 0;
        
        $objWorkSheet->getRowDimension('' . $intIndice)->setRowHeight(20);
        
        foreach($arrayValores as $strValor)
        {
            $objWorkSheet->setCellValue($arrayLetras[$i] . $intIndice, $strValor);
            $objWorkSheet->getStyle($arrayLetras[$i] . $intIndice)->applyFromArray(array('font' => array('bold' => true)));
            $i++;
        }
    }

    /**
     * Documentación para el método 'setValorArrayXCelda'.
     * 
     * Establece el valor del contenido de cada celda según las coordenadas evaluadas, desde la columna B a la K y las filas según el orden y valor 
     * dentro de $arrayDatos, por defecto el tipo de valor dentro de la celda será PHPExcel_Cell_DataType::TYPE_STRING.
     * 
     * @param PHPExcel $objPHPExcel
     * @param Array    $arrayValores
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 03-10-2015
     */
    private function setValorArrayXCelda($objPHPExcel, $intIndice, $arrayObjetoDatos)
    {
        $arrayLetras  = array('A', 'B', 'C', 'D');
        $arrayValores = array_values($arrayObjetoDatos);
        $i            = 0;
        
        foreach($arrayValores as $strValor)
        {
            $objPHPExcel->getActiveSheet()
                        ->setCellValueExplicit($arrayLetras[$i] . $intIndice, strtoupper($strValor), PHPExcel_Cell_DataType::TYPE_STRING);
            $i++;
        }
    }
    
    /**
     * Documentación para el método 'setAnchoColumna'.
     * 
     * Setea el tamaño del ancho de la columna según el valor de cada elemento dentro de $arrayValores,
     * el seteo comienza desde la columna B hasta la K. La columna A tiene el tamaño predefinido 8.
     * 
     * @param PHPExcel $objPHPExcel
     * @param Array    $arrayValores
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 03-10-2015
     */
    private function setAnchoColumna($objPHPExcel, $arrayValores)
    {
        $arrayLetras = array('A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K');
        $i           = 0;
        
        foreach($arrayValores as $intValor)
        {
            $objPHPExcel->getActiveSheet()->getColumnDimension($arrayLetras[$i])->setWidth($this->ajustaMayor($intValor));
            $i++;
        }
    }

    /**
     * Documentación para el método 'calcularMayor'.
     * 
     * Calcular el tamaño máximo de longitud de cada valor de cada una de las columnas para determinar el mayor tamaño y así establecer el ancho de 
     * las columnas del reporte de televentas.
     * 
     * @param String $strValor
     * @param int    $intMayor
     * 
     * @return int $intMayor.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 03-10-2015
     */
    private function calcularMayor($strValor, $intMayor)
    {
        $intTamanio = strlen($strValor);
        
        if($intTamanio > $intMayor)
        {
            return $intTamanio;
        }
        
        return $intMayor;
    }
   
    /**
     * Documentación para el método 'ajustaMayor'.
     * 
     * Evalúa $intMayor y si es menor que 12 el valor devuelto es 12, si es mayor que 80 retorna 80, en este punto si es mayor que 40 responde el 
     * valor de $intMayor reducido en 5 y si no cumple ningún criterio anterior se devuelve el mismo valor de $intMayor a fin de ajustar el 
     * tamaño del ancho de las columnas del reporte de televentas.
     * 
     * @param int $intMayor
     * 
     * @return int $intMayor.
     * 
     * @author Alejandro Domínguez Vargas <adominguez@telconet.ec>
     * @version 1.0 03-10-2015
     */
    private function ajustaMayor($intMayor)
    {
        return $intMayor < 12 ? 12 : ($intMayor > 80 ? 80 : ($intMayor > 40 ? ($intMayor-5) : $intMayor));
    }
    
    /**
     * Documentación para el método 'getJsonInfoServicioMd'.
     *
     * Método utilizado para generar Json con información de servicio Md
     *
     * @author Jesus Bozada <jbozada@telconet.ec>
     * @version 1.0  08-10-2016
     * @since   1.0
     * 
     * @param Array   $arrayParametros [
     *                                  - intIdServicio                   Identificador de servicio 
     *                                 ]
     *
     * @return Json $strJsonRespuesta [
     *                                - strStatus                         Estado de ejecución de proceso
     *                                - strMensaje                        Mensaje de respuesta de ejecución de proceso
     *                                - strSolicitudMigracionFinalizada   Cadena de caracteres usada para validar si un servicio hw
     *                                                                    tiene una solicitud de migracion en estado finalizada 
     *                                - strEquipoWifiAdicional            Cadena de caracteres que indica si un servicio hw tiene 
     *                                                                    un equipo adicional wifi conectado
     *                                - strNombreCpe                      Cadena de caracteres con nombre de Cpe Ont hw
     *                                - strModeloCpe                      Cadena de caracteres con modelo de Cpe Ont hw
     *                                - strMarcaCpe                       Cadena de caracteres con marca de Cpe Ont hw
     *                                - strNombreWifi                     Cadena de caracteres con nombre de wifi adicional hw
     *                                - strModeloWifi                     Cadena de caracteres con modelo de wifi adicional hw
     *                                - strMarcaWifi                      Cadena de caracteres con marca de wifi adicional hw
     *                                - intElementoWifi                   Identificador de elemento wifi adicional hw
     *                                ]
     * 
     */
    public function getJsonInfoServicioMd($arrayParametros)
    {
        $arrayRespuesta   = array();
        $strJsonRespuesta = "";
        $arrayRespuesta['strStatus']                       = "OK";
        $arrayRespuesta['strMensje']                       = "";              
        $arrayRespuesta['strSolicitudMigracionFinalizada'] = "NO";
        $arrayRespuesta['strEquipoWifiAdicional']          = "NO";

        $arrayRespuestaInfoServicioMd = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                    ->getInfoServicioMigradoMd($arrayParametros);

        if ($arrayRespuestaInfoServicioMd)
        {
            $arrayRespuesta['strSolicitudMigracionFinalizada'] = 'SI';
            $arrayRespuesta['strNombreCpe'] = $arrayRespuestaInfoServicioMd['strNombreCpe'];
            $arrayRespuesta['strModeloCpe'] = $arrayRespuestaInfoServicioMd['strModeloCpe'];
            $arrayRespuesta['strMarcaCpe']  = $arrayRespuestaInfoServicioMd['strMarcaCpe'];
            $arrayParametrosWifi            = array("intIdServicioTecnico" => $arrayRespuestaInfoServicioMd['intIdServicioTecnico']);
            $arrayRespuestaInfoWifi = $this->emcom
                                           ->getRepository('schemaBundle:InfoServicio')
                                           ->getInfoElementoWifiAdicional($arrayParametrosWifi);

            if ($arrayRespuestaInfoWifi)
            {
                $arrayRespuesta['strEquipoWifiAdicional'] = 'SI';
                $arrayRespuesta['strNombreWifi']          = $arrayRespuestaInfoWifi['strNombreWifi'];
                $arrayRespuesta['strModeloWifi']          = $arrayRespuestaInfoWifi['strModeloWifi'];
                $arrayRespuesta['strMarcaWifi']           = $arrayRespuestaInfoWifi['strMarcaWifi'];
                $arrayRespuesta['intElementoWifi']        = $arrayRespuestaInfoWifi['intElementoWifi'];
            }
        }
        $strJsonRespuesta = json_encode($arrayRespuesta);
        
        return $strJsonRespuesta;
    }

    /**
     * Funcion que genera factibilidad  de un Servicio replicando misma última milla de uno existente
     *
     * @param array     $arrayParametros
     *
     * @return String   $strContent
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.0 14-07-2016
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.1 26-07-2016 - Se modifica para que replique caracteristica TIPO_FACTIBILIDAD en nuevo servicio
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.2 27-07-2016 Se agrega generación de orden de trabajo e historiales con estado AsignadoTarea
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.3 05-08-2016 Se agrega validacion para generar factibilidad servicios con UM Radio  (campo elementoConectorId obligatorio)
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.4 18-08-2016 Se agrega caracteristica referenciando de que servicio se replica la  info tecnica por misma ultima milla
     *
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.5 20-04-2017 Se agrega estado como filtro a la consulta de caracteristica de misma ultima milla
     *
     * @author John Vera <javera@telconet.ec>
     * @version 1.6 19-11-2018 genero tarea para L2 cuando se trate de un producto CANAL TELEFONIA
     *
     * @version 1.7 08-11-2018 Se agrega validación para cuando copie la ultima milla si es un producto COU LINEAS TELEFONIA FIJA debe copiar también
     *                         los detalles de un servicio tercerizado
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.8 02-10-2019 - Se agrega funcionalidad para que cuando se herede una UM de un servicio FTTx
     *                           se establezca "RUTA" como tiepo de factibilidad.
     *
     * @author David León <mdleon@telconet.ec>
     * @version 1.9 12-01-2020 Se modifica el flujo para servicios Sdwan con misma UM quede en estado factible.
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 2.0 10-05-2021 - Se agrega validación para desactivar la caracteristica ZeroTouch de un servicio con MismaUM.
     * 
     * @author Joel MUñoz M <jrmunoz@telconet.ec>
     * @version 2.1 09-03-2023 - Se agrega validacion para guardar concentrador y caracteristica de migracion en servicios SDWAN
     * 
     */
    public function generarFactibilidadServicioMismaUm($arrayParametros)
    {
        $emComercial      = $this->emcom;
        $intServicioId    = $arrayParametros['intServicioOrigenId'];
        $intServicioUmId  = $arrayParametros['intServicioUMId'];
        $strUsrCreacion   = $arrayParametros['strUsrCreacion'];
        $strClienteIp     = $arrayParametros['strClienteIp'];  
        $intOficinaId     = $arrayParametros['intOficinaId'];
        $intEmpresaId     = $arrayParametros['intEmpresaId'];
        $intPuntoId       = $arrayParametros['intPuntoId'];  
        $serviceTecnico   = $arrayParametros['serviceTecnico'];  
        $strPrefijoEmpresa= $arrayParametros['strPrefijoEmpresa']; 
        $boolGeneraOrdTra = true;
        
        $objInfoServicio   = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intServicioId);
        $objTipoSolicitud  = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')->findOneByDescripcionSolicitud("SOLICITUD FACTIBILIDAD");        
        $strContent        = "";

        
        $emComercial->getConnection()->beginTransaction();

        try
        {
            /*Buscamos la caracteristica ZERO_TOUCH en el servicio.*/
            $strZeroTouch = $serviceTecnico->getCaracteristicaServicio($objInfoServicio, 'FLUJO_ZEROTOUCH');

            /*Validamos que no venga vacía o nula.*/
            if (!empty($strZeroTouch) && $strZeroTouch == 'S')
            {
                /*Actualizamos la carácterisica FLUJO_ZEROTOUCH.*/
                $serviceTecnico->actualizarServicioProductoCaracteristica(
                    array(
                        'objServicio' => $objInfoServicio,
                        'objProducto' => $objInfoServicio->getProductoId(),
                        'strCaracteristica' => 'FLUJO_ZEROTOUCH',
                        'strValor' => 'N',
                        'strUsrCreacion' => $strUsrCreacion
                    ));

                /*Insertamos en el historial del servicio la información del cambio.*/
                $serviceTecnico->insertarHistorialServicio(array(
                    'intIdServicio' => $objInfoServicio->getid(),
                    'strObservacion' => 'Flujo ZeroTouch <b>deshabilitado</b> por Misma UM. <br>',
                    'strUsuarioCreacion' => $strUsrCreacion
                ));
            }

            // Generación de solicitud de factibilidad
             
            $objServicioReplicar = $emComercial->getRepository("schemaBundle:InfoServicio")->find($intServicioUmId);
            
            $objServicioTecnicoOrig     = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                      ->findOneByServicioId($intServicioId);
            $objServicioTecnicoReplicar = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                      ->findOneByServicioId($intServicioUmId);
            $boolGenerarFactibilidad    = false;
                        
                        
            $objUMServicioReplicar  = $this->eminf->getRepository('schemaBundle:AdmiTipoMedio')
                                           ->find($objServicioTecnicoReplicar->getUltimaMillaId());

            if($objServicioReplicar && $objUMServicioReplicar)
            {
                if(trim($objUMServicioReplicar->getNombreTipoMedio()) == "Fibra Optica")
                {
                    $objServProdCaractTipoFact = $serviceTecnico->getServicioProductoCaracteristica($objServicioReplicar,
                                                                                                    'TIPO_FACTIBILIDAD',
                                                                                                    $objServicioReplicar->getProductoId()
                                                                                                   );  

                    if($objServProdCaractTipoFact)
                    {                    
                        if("RUTA" === $objServProdCaractTipoFact->getValor())
                        {
                            if($objServicioTecnicoReplicar->getElementoId()                   != null    &&
                               $objServicioTecnicoReplicar->getInterfaceElementoId()          != null    &&
                               $objServicioTecnicoReplicar->getElementoConectorId()           != null    &&
                               $objServicioTecnicoReplicar->getInterfaceElementoConectorId()  != null    &&
                               $objServicioTecnicoReplicar->getElementoContenedorId()         != null
                               )
                               {      
                                  $boolGenerarFactibilidad    = true;                                  
                               }                                                       
                        }
                        else
                        {
                            if($objServicioTecnicoReplicar->getElementoId() != null && $objServicioTecnicoReplicar->getInterfaceElementoId() != null)
                            {      
                                $boolGenerarFactibilidad = true;                                
                            }                                                      
                        }                                                                        
                    } // Si es fibra y no posee tipo factibilidad se asume como RUTA
                    else
                    {
                        if($objServicioTecnicoReplicar->getElementoId()                   != null    &&
                           $objServicioTecnicoReplicar->getInterfaceElementoId()          != null    &&
                           $objServicioTecnicoReplicar->getElementoConectorId()           != null    &&
                           $objServicioTecnicoReplicar->getInterfaceElementoConectorId()  != null    &&
                           $objServicioTecnicoReplicar->getElementoContenedorId()         != null
                           )
                           {      
                                $boolGenerarFactibilidad    = true;                                 
                           }                    
                           else
                           {
                               //Cuando no tiene data de GIS es por default DIRECTO
                               if($objServicioTecnicoReplicar->getElementoId()          != null && 
                                  $objServicioTecnicoReplicar->getInterfaceElementoId() != null)
                                {      
                                    $boolGenerarFactibilidad    = true;                                     
                                }
                           }
                    }
                }
                else if(trim($objUMServicioReplicar->getNombreTipoMedio()) == "Radio")
                {
                    if($objServicioTecnicoReplicar->getElementoConectorId() != null)
                    {      
                       $boolGenerarFactibilidad = true; 
                    }                    
                }
                // UTP o FTTx                
                else 
                {
                    if($objServicioTecnicoReplicar->getElementoId() != null && $objServicioTecnicoReplicar->getInterfaceElementoId() != null)
                    {      
                       $boolGenerarFactibilidad = true; 
                    }
                }                

            }            
            

            if($objInfoServicio && $boolGenerarFactibilidad)
            {
                $strEstadoFactibilidad       = "Factible";
                
                $strObservacionFactibilidad  = "Usuario solicita usar misma Ultima Milla. ";
                
                $strDatosNuevos="";



                if($objServicioTecnicoReplicar)
                {
                    $objElementoDistribuidor      = $emComercial->getRepository('schemaBundle:InfoElemento')
                                                                ->find($objServicioTecnicoReplicar->getElementoId());

                    $objInfoInterfaceElemento     = $emComercial->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                ->find($objServicioTecnicoReplicar->getInterfaceElementoId());
                    if($objServicioTecnicoReplicar->getElementoConectorId())
                    {
                        $objElementoConector          = sprintf("%s", $emComercial->getRepository('schemaBundle:InfoElemento')
                                                                                  ->find($objServicioTecnicoReplicar->getElementoConectorId()));
                    }
                    if($objServicioTecnicoReplicar->getInterfaceElementoConectorId())
                    {
                        $objInterfaceElementoConector = $emComercial->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                    ->find($objServicioTecnicoReplicar->getInterfaceElementoConectorId());
                    }

                    if($objElementoDistribuidor)
                    {
                        $strDatosNuevos .= "<b>Switch: </b>". $objElementoDistribuidor . "<br>";
                        $strDatosNuevos .= "<b>Marca: </b>" . $objElementoDistribuidor->getModeloElementoId()->getMarcaElementoId()
                                                                               ->getNombreMarcaElemento()."<br>";
                    }
                    if($objInfoInterfaceElemento)
                    {
                        $strDatosNuevos .= "<b>Puerto: </b>"       . $objInfoInterfaceElemento ."<br>";
                    }
                    if($objElementoConector)
                    {
                        $strDatosNuevos .= "<b>Cassette: </b>"     . $objElementoConector ."<br>";
                    }                    
                    if($objInterfaceElementoConector)
                    {
                        $strDatosNuevos .= "<b>Int Cassette: </b>" . $objInterfaceElementoConector->getNombreInterfaceElemento()."<br>";
                    }                                   
                }
                
                $strObservacionHistorial .= $strObservacionFactibilidad."<br>".$strDatosNuevos ; 
                
                $strAccion = "factibilidadMismaUM";
                
                //GUARDAR INFO SERVICIO HISTORIAL
                $entityServicioHistorial = new InfoServicioHistorial();
                $entityServicioHistorial->setServicioId($objInfoServicio);
                $entityServicioHistorial->setIpCreacion($strClienteIp);
                $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
                $entityServicioHistorial->setUsrCreacion($strUsrCreacion);
                $entityServicioHistorial->setObservacion($strObservacionHistorial);
                $entityServicioHistorial->setAccion($strAccion);
                $entityServicioHistorial->setEstado($strEstadoFactibilidad);
                $emComercial->persist($entityServicioHistorial);
                $emComercial->flush(); 
              

                $objSolicitud = new InfoDetalleSolicitud();
                $objSolicitud->setServicioId($objInfoServicio);
                $objSolicitud->setTipoSolicitudId($objTipoSolicitud);
                $objSolicitud->setEstado($strEstadoFactibilidad);
                $objSolicitud->setUsrCreacion($strUsrCreacion);
                $objSolicitud->setObservacion($strObservacionFactibilidad);
                $objSolicitud->setFeCreacion(new \DateTime('now'));
                $emComercial->persist($objSolicitud);
                $emComercial->flush(); 

                //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                $objDetalleSolHist = new InfoDetalleSolHist();               
                $objDetalleSolHist->setDetalleSolicitudId($objSolicitud);
                $objDetalleSolHist->setIpCreacion($strClienteIp);
                $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
                $objDetalleSolHist->setUsrCreacion($strUsrCreacion);
                $objDetalleSolHist->setObservacion($strObservacionFactibilidad);
                $objDetalleSolHist->setEstado($strEstadoFactibilidad);
                $emComercial->persist($objDetalleSolHist);
                $emComercial->flush(); 
                
                //realizo validación que cuando se trate de un producto CANAL TELEFONIA obtenga la misma ultima milla del servicio a replicar
                if($objInfoServicio->getDescripcionPresentaFactura() == 'CANAL TELEFONIA')
                {
                    $objServicioTecnicoOrig->setUltimaMillaId($objServicioTecnicoReplicar->getUltimaMillaId());
                    
                    if($objServicioTecnicoReplicar->getUltimaMillaId() > 0)
                    {
                        $objUm   = $emComercial->getRepository('schemaBundle:AdmiTipoMedio')->find($objServicioTecnicoReplicar->getUltimaMillaId());                        
                        
                        if(is_object($objUm) && $objUm->getCodigoTipoMedio() == 'TER')
                        {
                            //copio el tercerizador
                            $objSpcReplicar = $this->servicioTecnico
                                                   ->obtenerServicioProductoCaracteristica(array('objServicio'      => $objServicioReplicar,
                                                                                                 'strCaracteristica'=> 'TERCERIZADORA' ));
                            
                            $objCaract  = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                      ->findOneBy(array('descripcionCaracteristica' => 'TERCERIZADORA', 
                                                                        'estado' => 'Activo'));   
                            if(!is_object($objCaract))
                            {
                                throw new \Exception(' No existe Característica TERCERIZADORA.');
                            }
                            
                            $objProdCaract  = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                         ->findOneBy(array('productoId' => $objInfoServicio->getProductoId()->getId(), 
                                                                           'caracteristicaId' => $objCaract->getId()));
                            
                            if(!is_object($objProdCaract))
                            {
                                throw new \Exception(' No existe la Característica TERCERIZADORA para el producto '
                                                       .$objInfoServicio->getProductoId()->getDescripcionProducto());
                            }

                            
                            if(is_object($objSpcReplicar))
                            {                                                        
                                $entityServicioProdCaract  = new InfoServicioProdCaract();
                                $entityServicioProdCaract->setServicioId($objInfoServicio->getId());
                                $entityServicioProdCaract->setProductoCaracterisiticaId($objProdCaract->getId());
                                $entityServicioProdCaract->setValor($objSpcReplicar->getValor());
                                $entityServicioProdCaract->setEstado('Activo');
                                $entityServicioProdCaract->setUsrCreacion($strUsrCreacion);
                                $entityServicioProdCaract->setFeCreacion(new \DateTime('now'));
                                $emComercial->persist($entityServicioProdCaract);
                                $emComercial->flush();
                            }                            
                        }
                    }
                }
                
                // ACTUALIZACION DE INFO TECNICA
                $objServicioTecnicoOrig->setElementoId($objServicioTecnicoReplicar->getElementoId());
                $objServicioTecnicoOrig->setInterfaceElementoId($objServicioTecnicoReplicar->getInterfaceElementoId());
                $objServicioTecnicoOrig->setElementoConectorId($objServicioTecnicoReplicar->getElementoConectorId());
                $objServicioTecnicoOrig->setInterfaceElementoConectorId($objServicioTecnicoReplicar->getInterfaceElementoConectorId());
                $objServicioTecnicoOrig->setElementoContenedorId($objServicioTecnicoReplicar->getElementoContenedorId());
                $emComercial->persist($objServicioTecnicoOrig);
                $emComercial->flush(); 


                //VALIDACIÓN PARA GUARDAR ID DE SERVICIO MIGRADO Y CONCENTRADOR
                if(is_object($objInfoServicio) && is_object($objServicioReplicar) 
                    && is_object($objInfoServicio->getProductoId()) && ($objServicioReplicar->getProductoId())
                    && ($objInfoServicio->getProductoId()->getNombreTecnico()=='L3MPLS SDWAN'
                        || $objInfoServicio->getProductoId()->getNombreTecnico()=='INTERNET SDWAN'))
                {
                    $serviceTecnico->ingresarServicioProductoCaracteristica($objInfoServicio,
                                                                            $objInfoServicio->getProductoId(),
                                                                            'SERVICIO_MIGRADO_SDWAN',
                                                                            $objServicioReplicar->getId(),
                                                                            $strUsrCreacion
                                                                            );
                    
                    $objInfoServTecnicoForSDWAN = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                    ->findOneByServicioId($objServicioReplicar->getId());

                    // SE VALIDA TIPO ENLACE PARA TOMAR CONCENTRADOR DE PRINCIPAL O BACKUP
                    if(is_object($objInfoServTecnicoForSDWAN)  && $objInfoServTecnicoForSDWAN->getTipoEnlace() === 'BACKUP')
                    {
                        $objServPrincipalBackupSDWAN = $serviceTecnico->getServicioProductoCaracteristica($objServicioReplicar,
                                                                                                        'ES_BACKUP',
                                                                                                        $objServicioReplicar->getProductoId()
                                                                                                    );

                        if(is_object($objServPrincipalBackupSDWAN))
                        {
                            $objServicioPrincipalEnlaceSDWAN = $emComercial->getRepository("schemaBundle:InfoServicio")
                                                                            ->find($objServPrincipalBackupSDWAN->getValor());


                            $objServProdCaractTipoFact = $serviceTecnico->getServicioProductoCaracteristica($objServicioPrincipalEnlaceSDWAN,
                                                                            'ENLACE_DATOS',
                                                                            $objServicioPrincipalEnlaceSDWAN->getProductoId()
                                                                        );
                        }
                        
                    }
                    else
                    {
                        $objServProdCaractTipoFact = $serviceTecnico->getServicioProductoCaracteristica($objServicioReplicar,
                                                                    'ENLACE_DATOS',
                                                                    $objServicioReplicar->getProductoId() 
                                                                );
                    }


                                                                            

                    if(is_object($objServProdCaractTipoFact))
                    {
                        $serviceTecnico->ingresarServicioProductoCaracteristica($objInfoServicio,
                                                                               $objInfoServicio->getProductoId(),
                                                                               'ENLACE_DATOS',
                                                                               $objServProdCaractTipoFact->getValor(),
                                                                               $strUsrCreacion
                                                                              );
                    }
                }
                
                //Se agrega validaciones para sdwan quede en estado factible
                if(is_object($objInfoServicio) && !empty($objInfoServicio))
                {
                    $objProducto = $emComercial->getRepository('schemaBundle:admiProducto')->find($objInfoServicio->getProductoId());
                    if(is_object($objProducto) && !empty($objProducto) && is_object($objServicioTecnicoOrig) && !empty($objServicioTecnicoOrig)
                        && $objProducto->getNombreTecnico()=='INTERNET SDWAN' )
                    {
                        $arrayServicioSdwan = $emComercial->getRepository('schemaBundle:infoServicio')
                                                                            ->findBy(array(
                                                                                           'puntoId' => $objInfoServicio->getPuntoId()->getId(),
                                                                                           'productoId' => $objInfoServicio->getProductoId()->getId(),
                                                                                           'estado'     => "Pre-servicio"));
                        if(is_array($arrayServicioSdwan) && (count($arrayServicioSdwan)<=1 ))
                        {
                            $arrayParamsInfoProds   = array("strCodEmpresa"     => $intEmpresaId,
                                                            "intIdProducto"     => $objProducto->getId(),
                                                            "strNombreAsociadoProd"  => "PRODUCTO_RELACIONADO_SDWAN");
                            $arrayInfoMapeoProds    = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                                        ->obtenerInfoMapeoProdsAsociados($arrayParamsInfoProds);
                            if(isset($arrayInfoMapeoProds) && !empty($arrayInfoMapeoProds) && $arrayInfoMapeoProds["strStatus"] == "OK")
                            {
                                $arrayData = $arrayInfoMapeoProds["arrayData"];
                                $intIdProductoAsoc          = $arrayData[0]["intIdProductoAsoc"];
                                $strNombreTecnicoProdAsoc   = $arrayData[0]["strNombreTecnicoProdAsoc"];
                                $strDescripcionProdAsoc     = $arrayData[0]["strDescripcionProdAsoc"];
                            }
                            else
                            {
                                $arrayRespuestaFinal[] = array('status'  => 'ERROR', 
                                                               'mensaje' => 'No se ha podido obtener la relación del producto Intenet Mpls'
                                                                                . 'para realizar migración a Sdwan');
                                return $arrayRespuestaFinal;
                            }
                            if(isset($strNombreTecnicoProdAsoc) && !empty($strNombreTecnicoProdAsoc)&&
                               isset($intIdProductoAsoc) && !empty($intIdProductoAsoc) &&
                               !empty($strDescripcionProdAsoc) )
                                {
                                    $arrayParametroProducto = array("id"                    => $intIdProductoAsoc,
                                                                    "descripcionProducto"   => $strDescripcionProdAsoc,
                                                                    "nombreTecnico"         => $strNombreTecnicoProdAsoc,
                                                                    "empresaCod"            => $intEmpresaId, 
                                                                    "estado"                => "Activo");

                                    $objProdAsoc                = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                                    ->findOneBy($arrayParametroProducto);
                                    if(is_object($objProdAsoc) && !empty($objProdAsoc))
                                    {
                                        $arrayServiciosTecnicosPorPuntoPro = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                            ->getElementosPorPuntoProduct($objInfoServicio,$objProdAsoc);     

                                    }

                                    if(isset($arrayServiciosTecnicosPorPuntoPro) && !empty($arrayServiciosTecnicosPorPuntoPro))
                                    {
                                        $boolGeneraOrdTra =false;
                                        $objInfoServicio->setEstado($strEstadoFactibilidad);
                                        $emComercial->persist($objInfoServicio);
                                        $emComercial->flush(); 
                                    }
                                }
                        }
                    }
                
                }
                if($boolGeneraOrdTra)
                {
                // GENERACION DE ORDEN DE TRABAJO
                $strObservacion       = "Flujo automatico factibilidad misma UM";
                $objAdmiNumeracion    = $emComercial->getRepository('schemaBundle:AdmiNumeracion')
                                                    ->findByEmpresaYOficina($intEmpresaId,$intOficinaId,"ORD");
                if($objAdmiNumeracion)
                {
                    $strSecuenciaAsignada = str_pad($objAdmiNumeracion->getSecuencia(),7, "0", STR_PAD_LEFT); 
                    $srtNumeroContrato    = $objAdmiNumeracion->getNumeracionUno()."-".$objAdmiNumeracion->getNumeracionDos()
                                                                                  ."-".$strSecuenciaAsignada;
                }

                $objInfoPunto     = $emComercial->getRepository('schemaBundle:InfoPunto')->find($intPuntoId);               
                
                
                $objOrdenTrabajo  = new InfoOrdenTrabajo();
                $objOrdenTrabajo->setPuntoId($objInfoPunto);
                $objOrdenTrabajo->setTipoOrden('N');		
                $objOrdenTrabajo->setNumeroOrdenTrabajo($srtNumeroContrato);
                $objOrdenTrabajo->setFeCreacion(new \DateTime('now'));
                $objOrdenTrabajo->setUsrCreacion($strUsrCreacion);
                $objOrdenTrabajo->setIpCreacion($strClienteIp);
                $objOrdenTrabajo->setOficinaId($intOficinaId);
                $objOrdenTrabajo->setEstado("Activa");
                $emComercial->persist($objOrdenTrabajo);
                $emComercial->flush();

                if($objOrdenTrabajo)
                {
                    //Actualizo la numeracion en la tabla
                    $intNuevaSecuencia = ($objAdmiNumeracion->getSecuencia()+1);
                    $objAdmiNumeracion->setSecuencia($intNuevaSecuencia);
                    $emComercial->persist($objAdmiNumeracion);
                    $emComercial->flush();
                }
                


                $objInfoServicio->setOrdenTrabajoId($objOrdenTrabajo);
                $objInfoServicio->setEstado("AsignadoTarea");
                $emComercial->persist($objInfoServicio);
                $emComercial->flush();

                if($objInfoServicio->getTipoOrden())
                {
                    $objOrdenTrabajo->setTipoOrden($objInfoServicio->getTipoOrden());		
                    $emComercial->persist($objOrdenTrabajo);
                    $emComercial->flush();
                }
               
               
                if($objOrdenTrabajo)
                {    

                    $entityServicios  = $emComercial->getRepository('schemaBundle:InfoServicio')->findByOrdenTrabajoId($objOrdenTrabajo->getId());
                    $objTipoSolicitud = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                    ->findOneByDescripcionSolicitud("SOLICITUD PLANIFICACION");


                    if($entityServicios && count($entityServicios)>0)
                    {

                        foreach($entityServicios as $key => $entityServicio)
                        {
                            //validacion que si tuvo orden de factibilidad se crea la orden de planificacion
                            $solicitudFactibilidad = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                 ->findOneBy(array("servicioId"=>$entityServicio->getId(), "estado"=>"Factible"));
                            if($solicitudFactibilidad)
                            {
                                if($objTipoSolicitud)
                                {    
                                    $entityDetalleSolicitud = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                          ->findCountDetalleSolicitudByIds($entityServicio->getId(), 
                                                                                                           $objTipoSolicitud->getId()
                                                                                                          ); 
                                    if(!$entityDetalleSolicitud || $entityDetalleSolicitud["cont"]<=0)
                                    {
                                        $entitySolicitud  = new InfoDetalleSolicitud();
                                        $entitySolicitud->setServicioId($entityServicio);
                                        $entitySolicitud->setTipoSolicitudId($objTipoSolicitud);	      	
                                        $entitySolicitud->setEstado("AsignadoTarea");	
                                        $entitySolicitud->setUsrCreacion($strUsrCreacion);		
                                        $entitySolicitud->setFeCreacion(new \DateTime('now'));

                                        $emComercial->persist($entitySolicitud);
                                        $emComercial->flush();  

                                        //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                                        $entityDetalleSolHist = new InfoDetalleSolHist();
                                        $entityDetalleSolHist->setDetalleSolicitudId($entitySolicitud);

                                        $entityDetalleSolHist->setIpCreacion($strClienteIp);
                                        $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                        $entityDetalleSolHist->setUsrCreacion($strUsrCreacion);
                                        $objDetalleSolHist->setObservacion($strObservacion);
                                        $entityDetalleSolHist->setEstado('AsignadoTarea');  

                                        $emComercial->persist($entityDetalleSolHist);
                                        $emComercial->flush();  						

                                    }                                                                       
                                    
                                }

                            }
                        }
                    } 
                     //GUARDAR INFO SERVICIO HISTORIAL                   
                    
                    $objServicioHistorial = new InfoServicioHistorial();
                    $objServicioHistorial->setServicioId($objInfoServicio);
                    $objServicioHistorial->setIpCreacion($strClienteIp);
                    $objServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $objServicioHistorial->setUsrCreacion($strUsrCreacion);
                    $objServicioHistorial->setEstado('AsignadoTarea');
                    $objServicioHistorial->setObservacion($strObservacion);
                    $emComercial->persist($objServicioHistorial);
                    $emComercial->flush();   
                    
                    //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                    $objDetalleSolHistorial = new InfoDetalleSolHist();
                    $objDetalleSolHistorial->setDetalleSolicitudId($objSolicitud);
                    $objDetalleSolHistorial->setFeIniPlan(new \DateTime('now'));
                    $objDetalleSolHistorial->setFeFinPlan(new \DateTime('now'));
                    $objDetalleSolHistorial->setObservacion($strObservacion);
                    $objDetalleSolHistorial->setIpCreacion($strClienteIp);
                    $objDetalleSolHistorial->setFeCreacion(new \DateTime('now'));
                    $objDetalleSolHistorial->setUsrCreacion($strUsrCreacion);
                    $objDetalleSolHistorial->setEstado('AsignadoTarea');
                    $emComercial->persist($objDetalleSolHistorial);
                    $emComercial->flush();                    
                    
                    
                }               
				              
                $objInfoServicio->setEstado('AsignadoTarea');
                $emComercial->persist($objInfoServicio);
                $emComercial->flush();  
                }

                //ACTUALIZACION/INGRESO DE VALOR DE TIPO_FACTIBILIDAD DE SERVCIO ORIGEN ( RUTA O DIRECTO )
                $objProdCaractTipoFactPrin = $serviceTecnico->getServicioProductoCaracteristica($objInfoServicio,
                                                                                                'TIPO_FACTIBILIDAD',
                                                                                                $objInfoServicio->getProductoId());
                if(!is_object($objProdCaractTipoFactPrin))
                {
                    $objInfoServicioProdCaract = new InfoServicioProdCaract();
                    $objInfoServicioProdCaract->setServicioId($objInfoServicio->getId());
                    $objServicioReplica = $emComercial->getRepository("schemaBundle:InfoServicio")->find($intServicioUmId);
                    $objServProdCaractTipoFact = $serviceTecnico
                                               ->getServicioProductoCaracteristica($objServicioReplica,
                                                                                   'TIPO_FACTIBILIDAD',
                                                                                   $objServicioReplica->getProductoId());
                    $objCaracteristica = $emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                     ->findOneByDescripcionCaracteristica("TIPO_FACTIBILIDAD");
                    $objProdCaract     = $emComercial->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                                     ->findOneBy(array('caracteristicaId'  => $objCaracteristica->getId(),
                                                                       'productoId'        => $objInfoServicio->getProductoId()->getId()));
                    if(is_object($objServProdCaractTipoFact))
                    {                    
                        $objInfoServicioProdCaract->setValor($objServProdCaractTipoFact->getValor());                    
                    }
                    else
                    {         
                        //OBTENIENDO LA ULTIMA MILLA
                        $objTipoMedio  = $this->eminf->getRepository('schemaBundle:AdmiTipoMedio')->find($objServicioTecnicoOrig->getUltimaMillaId());
                        if(is_object($objTipoMedio))
                        {
                            if($objTipoMedio && $objTipoMedio->getNombreTipoMedio() == "Fibra Optica")
                            {
                                if($objServicioTecnicoOrig->getInterfaceElementoConectorId())
                                {
                                    $objInfoServicioProdCaract->setValor("RUTA");
                                }
                                else
                                {
                                    $objInfoServicioProdCaract->setValor("DIRECTO");
                                }
                            }
                            elseif (is_object($objTipoMedio) && $objTipoMedio->getNombreTipoMedio() == "FTTx")
                            {
                                $objInfoServicioProdCaract->setValor("RUTA");
                            }
                            else
                            {
                                $objInfoServicioProdCaract->setValor("DIRECTO");
                            }
                        }
                        else
                        {
                            $objInfoServicioProdCaract->setValor("RUTA");
                        }
                    }
                    $objInfoServicioProdCaract->setProductoCaracterisiticaId($objProdCaract->getId());
                    $objInfoServicioProdCaract->setEstado("Activo");
                    $objInfoServicioProdCaract->setFeCreacion(new \DateTime('now'));
                    $objInfoServicioProdCaract->setUsrCreacion($strUsrCreacion);
                    $emComercial->persist($objInfoServicioProdCaract);
                    $emComercial->flush();
                }

                //SE GUARDA REFERENCIA DE SERVICIO DE LA CUAL SE REPLICA ULTIMA MILLA PARA LA ACTIVACION
                $objCaracteristicaMismaUM = $emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                        ->findOneByDescripcionCaracteristica("SERVICIO_MISMA_ULTIMA_MILLA");
                    
                $objProdCaractMismaUM     = $emComercial->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                                        ->findOneBy(array('caracteristicaId'  => $objCaracteristicaMismaUM->getId(),
                                                                          'productoId'        => $objInfoServicio->getProductoId()->getId(),
                                                                          'estado'            => 'Activo'));
                
                if($objProdCaractMismaUM)
                {
                    $objInfoServProdCaractUM = new InfoServicioProdCaract();
                    $objInfoServProdCaractUM->setServicioId($objInfoServicio->getId()); 
                    $objInfoServProdCaractUM->setProductoCaracterisiticaId($objProdCaractMismaUM->getId());
                    $objInfoServProdCaractUM->setValor($intServicioUmId);
                    $objInfoServProdCaractUM->setEstado("Activo");
                    $objInfoServProdCaractUM->setFeCreacion(new \DateTime('now'));
                    $objInfoServProdCaractUM->setUsrCreacion($strUsrCreacion);
                    $emComercial->persist($objInfoServProdCaractUM);
                    $emComercial->flush(); 
                }                
                               
                //genero tarea para L2 cuando se trate de un producto CANAL TELEFONIA
                if($objInfoServicio->getDescripcionPresentaFactura() == 'CANAL TELEFONIA')
                {                   
                
                    //obtengo el canton de la oficina
                    $objOficina         = $this->emSoporte->getRepository("schemaBundle:InfoOficinaGrupo")->find($intOficinaId);
                    $objTarea           = $this->emSoporte->getRepository("schemaBundle:AdmiTarea")->findOneByNombreTarea('ASIGNAR RECURSOS DE RED');
                    //Se obtiene el departamento
                    $objDepartamento    = $this->emSoporte->getRepository("schemaBundle:AdmiDepartamento")
                                                          ->findOneBy(array('nombreDepartamento'   => 'IPCCL2', 
                                                                            'empresaCod'           => $intEmpresaId ));

                    $arrayParametrosTarea                      = array();
                    $arrayParametrosTarea['strObservacion']    = $strObservacion;
                    $arrayParametrosTarea['strUsrCreacion']    = $strUsrCreacion;
                    $arrayParametrosTarea['strIpCreacion']     = $strClienteIp;
                    $arrayParametrosTarea['intDetalleSolId']   = is_object($entitySolicitud)?$entitySolicitud->getId():'';
                    $arrayParametrosTarea['strTipoAfectado']   = 'Cliente';
                    $arrayParametrosTarea['objPunto']          = $objInfoServicio->getPuntoId();
                    $arrayParametrosTarea['strCantonId']       = is_object($objOficina)?$objOficina->getCantonId():'';
                    $arrayParametrosTarea['strEmpresaCod']     = $intEmpresaId;
                    $arrayParametrosTarea['strPrefijoEmpresa'] = $strPrefijoEmpresa;
                    $arrayParametrosTarea['intTarea']          = is_object($objTarea)?$objTarea->getId():'';
                    $arrayParametrosTarea['objDepartamento']   = is_object($objDepartamento)?$objDepartamento:'';
                    $arrayParametrosTarea["strBanderaTraslado"]= "";                    

                    $this->serviceInfoCambiarPlan->crearTareaRetiroEquipoPorDemo($arrayParametrosTarea);
                        
                }
                
                $emComercial->getConnection()->commit();               
                
                $strContent  = "Se generó factibilidad correctamente .";                                    
            }
            else
            {
                $strContent  = "Error al generar Factibilidad .Verificar Servicio y datos de UM .";
                
            } 
                 

            
        }catch (\Exception $e) 
        {
            $emComercial->getConnection()->rollback();
            $strContent  = "Error al generar Factibilidad . Favor notificar a sistemas ".$e->getMessage();      
        }
        $emComercial->getConnection()->commit();
        
        return $strContent;
    }

    /**
     * Función que valida si el punto tiene un plan (con servicio de internet) existente, excluyendo los estados parametrizados.
     * Nombre del parámetro = 'RESTRICCION_PLAN_INTERNET_ADICIONAL_X_PUNTO'
     * @author Luis Cabrera <lcabrera@telconet.ec>
     * @version 1.0
     * @since 29-11-2018
     */
    public function validaOrdenesServicioPorInternetAdicional($arrayParametros)
    {
        $strAplicaRestriccion = $this->utilServicio->empresaAplicaProceso(array("strProcesoAccion" => "RESTRICCION_PLAN_INTERNET_ADICIONAL_X_PUNTO",
                                                                                "strEmpresaCod"    => $arrayParametros["strEmpresaCod"]));
        if ("S" != $strAplicaRestriccion)
        {
            return true;
        }
        //Se obtienen los estados no permitidos desde el parámetro
        $arrayParametrosEstados = array("strNombreParametroCab" => "ESTADOS_RESTRICCION_PLANES_ADICIONALES",
                                         "strEstado"             => "Activo",
                                         "strEmpresaCod"         => $arrayParametros["strEmpresaCod"]);
        //Obtiene las características de facturas de instalación por contratos MOVIL/WEB según el parámetro.
        $arrayListParams   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                         ->findParametrosDet($arrayParametrosEstados);
        foreach($arrayListParams["arrayResultado"] as $arrayDetalle)
        {
            $arrayEstadosNoPermitidos[]  = $arrayDetalle["strValor1"];
        }
        if (count($arrayEstadosNoPermitidos) > 0 )
        {
            $arrayParametros["arrayEstadosNotIn"]  = $arrayEstadosNoPermitidos;
        }
        $arrayParametros["arrayNombreTecnico"] = array("INTERNET");
        $intTotal = $this->emcom->getRepository("schemaBundle:InfoServicio")->getTotalServiciosPorNombreTecnicoXPunto($arrayParametros);
        if ($intTotal > 0)
        {
            return false;
        }
        return true;
    }
    
    
    /**
     * Documentación para el método 'generarHistorialReinicioConteo'.
     *
     * Método utilizado para guardar un historial en la 'InfoServicioHistorial' indicando la fecha con la cual se realizará el proceso de reinicio
     * de conteo para calcular los meses restantes para facturación.
     *
     * @param array $arrayParametros [ 'intIdServicioAntiguo' => 'Id del servicio antiguo',
     *                                 'objServicioNuevo'     => 'Objeto con la información del nuevo servicio creado por el cambio de razón social'
     *                                 'strPrefijoEmpresa'    => 'Prefijo de la empresa en session',
     *                                 'strUsrCreacion'       => 'Usuario que está realizando la acción de cambio de razón social',
     *                                 'intMesesRestantes'    => 'Meses restantes del servicio a consultar' ]
     * 
     * @return String $strMensajeError
     * 
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 02-03-2017
     * @author Edson Franco <efranco@telconet.ec>
     * @version 1.0 02-03-2017 - Se añade el id servicio para una mejor visualizacion del error para el soporte respectivo
     * 
     * @author Hector Lozano <hlozano@telconet.ec>
     * @version 1.1 
     * @since 06-09-2018
     * Se añade el id servicio para una mejor visualización del error al obtener la fecha de reinicio de conteo.
     */
    public function generarHistorialReinicioConteo($arrayParametros)
    {
        $strMensaje           = "OK";
        $intIdServicioAntiguo = ( isset($arrayParametros['intIdServicioAntiguo']) && !empty($arrayParametros['intIdServicioAntiguo']) ) 
                                 ? $arrayParametros['intIdServicioAntiguo'] : 0;
        $objServicioNuevo     = ( isset($arrayParametros['objServicioNuevo']) && !empty($arrayParametros['objServicioNuevo']) ) 
                                 ? $arrayParametros['objServicioNuevo'] : null;
        $strPrefijoEmpresa    = ( isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) ) 
                                 ? $arrayParametros['strPrefijoEmpresa'] : '';
        $strUsrCreacion       = ( isset($arrayParametros['strUsrCreacion']) && !empty($arrayParametros['strUsrCreacion']) ) 
                                 ? $arrayParametros['strUsrCreacion'] : 'Telcos+';
        $strIpCreacion        = ( isset($arrayParametros['strIpCreacion']) && !empty($arrayParametros['strIpCreacion']) ) 
                                 ? $arrayParametros['strIpCreacion'] : '127.0.0.1';
        $intMesesRestantes    = ( isset($arrayParametros['intMesesRestantes']) && !empty($arrayParametros['intMesesRestantes']) ) 
                                 ? $arrayParametros['intMesesRestantes'] : 0;

        try
        {
            if( !empty($intIdServicioAntiguo) && is_object($objServicioNuevo) && !empty($strPrefijoEmpresa) && !empty($strUsrCreacion) )
            {
                $strEstadoServicio = $objServicioNuevo->getEstado() ? $objServicioNuevo->getEstado() : '';
                
                if( !empty($strEstadoServicio) )
                {
                    $arrayParametrosFechaReinicioConteo = array('strPrefijoEmpresa' => $strPrefijoEmpresa,
                                                                'strEstadoServicio' => $strEstadoServicio,
                                                                'intIdServicio'     => $intIdServicioAntiguo,
                                                                'intMesesRestantes' => $intMesesRestantes);
                    
                    $arrayResultadoFechaReinicioConteo  = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                               ->getFechaReinicioConteo($arrayParametrosFechaReinicioConteo);
                    
                    if(isset($arrayResultadoFechaReinicioConteo['strMensajeError']) && empty($arrayResultadoFechaReinicioConteo['strMensajeError']))
                    {
                        if( isset($arrayResultadoFechaReinicioConteo['strFechaReinicioConteo']) 
                            && !empty($arrayResultadoFechaReinicioConteo['strFechaReinicioConteo']) )
                        {
                            $strFechaReinicioConteo = date_format(date_create($arrayResultadoFechaReinicioConteo['strFechaReinicioConteo']),'Y-m-d');
                            
                            if( !empty($strFechaReinicioConteo) )
                            {
                                $objServicioHist = new InfoServicioHistorial();
                                $objServicioHist->setServicioId($objServicioNuevo);
                                $objServicioHist->setObservacion('Fecha usada para el calculo de meses restantes');
                                $objServicioHist->setUsrCreacion($strUsrCreacion);
                                $objServicioHist->setFeCreacion(new \DateTime($strFechaReinicioConteo));
                                $objServicioHist->setAccion('reinicioConteo');
                                $objServicioHist->setEstado('Activo');
                                $this->emcom->persist($objServicioHist);
                                $this->emcom->flush();
                            }
                            else
                            {
                                $strMensaje = 'Error al guardar la fecha de reinicio de conteo usada para el calculo de meses restantes';
                            
                                throw new \Exception($strMensaje);
                            }
                        }
                        else
                        {
                            $strMensaje = 'No se obtuvo fecha de reinicio de conteo para realizar el cálculo de meses restantes correspondiente';
                            
                            throw new \Exception($strMensaje.' ID_SERVICIO: '.$intIdServicioAntiguo);
                        }//( isset($arrayResultadoFechaReinicioConteo['strFechaReinicioConteo'])...
                    }
                    else
                    {
                        $strMensaje = 'Hubo un problema al obtener la fecha de reinicio de conteo. ID_SERVICIO: '.$intIdServicioAntiguo;
                    
                        throw new \Exception($strMensaje);
                    }//(isset($arrayResultadoFechaReinicioConteo['strMensajeError']) && empty($arrayResultadoFechaReinicioConteo['strMensajeError']))
                }
                else
                {
                    $strMensaje = 'El servicio no tiene asociado un estado válido para guardar el historial de reinicio de conteo.';
                    
                    throw new \Exception($strMensaje);
                }//( !empty($strEstadoServicio) )
            }
            else
            {
                $strMensaje = 'No se enviaron los parámetros adecuados para guardar el historial de reinicio de conteo.';
                
                throw new \Exception($strMensaje);
            }//( !empty($intIdServicioAntiguo) && is_object($objServicioNuevo) && !empty($strPrefijoEmpresa) && !empty($strUsrCreacion) )
        }
        catch( \Exception $e )
        {
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService.generarHistorialReinicioConteo', 
                                              $e->getMessage(), 
                                              $strUsrCreacion, 
                                              $strIpCreacion );
            throw ($e);
        }
    
        return $strMensaje;
    }
    
    
    /**
     * Documentación para el método 'validarServiciosByCaracteristicasPlanProd'.
     *
     * Método utilizado para validar un servicio de acuerdo a las características asociadas al plan o producto
     *
     * @param array $arrayParametros [  'strTipoServicio'               => 'PRODUCTO' o 'PAQUETE',
     *                                  'strEmpresaCod'                 => id de la empresa,
     *                                  'strPrefijoEmpresa'             => prefijo de la empresa,
     *                                  'intIdPlanProd'                 => id del plan o producto del servicio,
     *                                  'intIdPtoCliente'               => id del punto cliente en sessión,
     *                               ]
     * 
     * @return array $arrayResultado[ 'strStatus'   => estado de las validaciones realizadas
     *                                'strMensaje'  => mensaje de error ]
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 04-04-2017
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 13-12-2018 Se agrega validación para servicios asociados a planes que contengan un servicio MacAfee
     * 
     * @author Jesús Bozada <jbozada@telconet.ec>
     * @version 1.2 01-04-2019 Se envían los nuevos parámetros strUsrCreacion y strIpCreacion a getCorreoDatosEnvioMd, que es el 
     *                         encargado de recuperar el correo a utilizar en productos mcafee
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.3 29-07-2019 Se agregan las validaciones necesarias para permitir licencias Kaspersky asociadas al producto 
     *                          I. PROTEGIDO MULTI PAID tanto en el piloto con los logines parametrizados o cuando ya se decida 
     *                          que todos los servicios deben ser agregados con este tipo de licencias.
     *                          Además se agrega validación para que todo plan con producto I. PROTEGIDO MULTI PAID tenga asociada
     *                          la característica PLANES NUEVOS VIGENTES.
     * 
     * @author Douglas Natha <dnatha@telconet.ec>
     * @version 1.4 24-12-2019 Se agrega condicional en la linea 8453 la cual evalua si el tipo de negocio es igual a HOME lanzará un
     *                         mensaje indicando que el tipo de negocio del punto es HOME, por lo tanto no puede crear un servicio PYME
     * @since 1.1
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.5 28-07-2020 Se elimina validación de planes nuevos vigentes, ya que los detalles de los productos no son dependientes a ésta
     * 
     * @author José Candelario <jcandelario@telconet.ec>
     * @version 1.6 19-03-2021 Se agrega información de códigos promocionales en la creación del servicio.
     * 
     */
	public function validarServiciosByCaracteristicasPlanProd($arrayParametros)
	{
        $strTipoServicio            = ( isset($arrayParametros['strTipoServicio']) && !empty($arrayParametros['strTipoServicio']) ) 
                                        ? $arrayParametros['strTipoServicio'] : '';
        $strEmpresaCod              = ( isset($arrayParametros['strEmpresaCod']) && !empty($arrayParametros['strEmpresaCod']) ) 
                                        ? $arrayParametros['strEmpresaCod'] : '';
        $strPrefijoEmpresa          = ( isset($arrayParametros['strPrefijoEmpresa']) && !empty($arrayParametros['strPrefijoEmpresa']) ) 
                                        ? $arrayParametros['strPrefijoEmpresa'] : '';
        $intIdPtoCliente            = ( isset($arrayParametros['intIdPtoCliente']) && !empty($arrayParametros['intIdPtoCliente']) )
                                        ? $arrayParametros['intIdPtoCliente'] : 0;
        $intIdPlanProd              = ( isset($arrayParametros['intIdPlanProd']) && !empty($arrayParametros['intIdPlanProd']) )
                                        ? $arrayParametros['intIdPlanProd'] : 0;
        
        $strStatus                      = "";
        $strMensaje                     = "";
        $strExisteInfoAdicional         = "";
        $strMensajeInformacion          = "";
        $strTagsAdicionales             = "";
        $strNombreSolicitud             = "";
        $strNoRequiereUltimaMilla       = "";
        $strHtmlCaratsPlanes            = "";
        
        $arrayResultadoValidaciones = array();
        $arrayResultadoValidaciones["strStatusValidaciones"]    = $strStatus;
        $arrayResultadoValidaciones["strMensajeValidaciones"]   = $strMensaje;
        $arrayResultadoValidaciones["strExisteInfoAdicional"]   = $strExisteInfoAdicional;
        $arrayResultadoValidaciones["strMensajeInformacion"]    = $strMensajeInformacion;
        $arrayResultadoValidaciones["strTagsAdicionales"]       = $strTagsAdicionales;
        $arrayResultadoValidaciones["strHtmlCaratsPlanes"]      = $strHtmlCaratsPlanes;
        
        $objCabeceraPlan = $this->emcom->getRepository('schemaBundle:InfoPlanCab')->find($intIdPlanProd);
        $strTipoNegocioPlan =$objCabeceraPlan->getTipo();

        try
        {
            if( !empty($strEmpresaCod) && !empty($strPrefijoEmpresa) && !empty($intIdPtoCliente) && !empty($strTipoServicio)
                && !empty($strTipoServicio) && !empty($intIdPlanProd))
            {
                $objPunto = $this->emcom->getRepository('schemaBundle:InfoPunto')->find($intIdPtoCliente);
                if(is_object($objPunto))
                {
                    $strTipoNegocio = $objPunto->getTipoNegocioId()->getNombreTipoNegocio();
                    if( strcmp($strTipoNegocio, $strTipoNegocioPlan) !== 0 )
                    {
                        throw new \Exception('El tipo de negocio del punto: ' . $strTipoNegocio . 
                        ' no corresponde con el tipo de negocio del plan: '. $strTipoNegocioPlan);
                    }
                    $objPer = $objPunto->getPersonaEmpresaRolId();
                    if(is_object($objPer))
                    {
                        $intIdPer   = $objPer->getId();
                        if($strTipoServicio=="PAQUETE")
                        {
                            $arrayParamsReqPlanInternet             = array(
                                                                            "intIdPlan"                         => $intIdPlanProd,
                                                                            "strDescripcionCaracteristicaPlan"  => 'REQUIERE_PLAN_INTERNET',
                                                                            "strValorCaracteristicaPlan"        => "SI",
                                                                            "strEstado"                         => "Activo"
                                                                      );
                            $arrayRespuestaReqPlanInternet          = $this->emcom->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                                                  ->getCaracteristicasPlanByCriterios($arrayParamsReqPlanInternet);
                            $intTotalCaractReqPlanInternet          = $arrayRespuestaReqPlanInternet['intTotal'];
                            $arrayResultadoCaractReqPlanInternet    = $arrayRespuestaReqPlanInternet['arrayResultado'];

                            if($intTotalCaractReqPlanInternet>0)
                            {
                                if($arrayResultadoCaractReqPlanInternet)
                                {
                                    $arrayEstadosInternet               = array();
                                    $arrayEstadosPreplanificacion       = array();
                                    $arrayEstadosPlanificacion          = array();
                                    /*
                                     * Se verifica si el plan tiene la caracteristica de FLUJO_PREPLANIFICACION_PLANIFICACION para obtener 
                                     * los respectivos estados
                                     */
                                    $arrayParamSigueFlujoPP     = array(
                                                                        "intIdPlan"                         => $intIdPlanProd,
                                                                        "strDescripcionCaracteristicaPlan"  => 'FLUJO_PREPLANIFICACION_PLANIFICACION',
                                                                        "strValorCaracteristicaPlan"        => "SI",
                                                                        "strEstado"                         => "Activo"
                                                                  );
                                    $arrayRespuestaSigueFlujoPP = $this->emcom->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                                              ->getCaracteristicasPlanByCriterios($arrayParamSigueFlujoPP);
                                    $intTotalCaractSigueFlujoPP = $arrayRespuestaSigueFlujoPP['intTotal'];

                                    if($intTotalCaractSigueFlujoPP > 0)
                                    {
                                        $strEstadosInternetFlujoPreplanif     = 'ESTADOS_INTERNET_FLUJO_PREPLANIFICACION_PLANIFICACION';
                                        $arrayParamsDetEstadosFlujoPreplanif  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                            ->get('INFO_SERVICIO', 
                                                                                                  'COMERCIAL', 
                                                                                                  'ACTIVACION_SERVICIO', 
                                                                                                  '', 
                                                                                                  $strEstadosInternetFlujoPreplanif, 
                                                                                                  '', 
                                                                                                  '', 
                                                                                                  '', 
                                                                                                  '', 
                                                                                                  $strEmpresaCod);

                                        if( !empty($arrayParamsDetEstadosFlujoPreplanif) )
                                        {
                                            foreach( $arrayParamsDetEstadosFlujoPreplanif as $arrayParamDetFlujoPreplanif )
                                            {
                                                $strEstadoInternet      = $arrayParamDetFlujoPreplanif['valor2'];
                                                $arrayEstadosInternet[] = $strEstadoInternet;

                                                if(isset($arrayParamDetFlujoPreplanif['valor3']) && !empty($arrayParamDetFlujoPreplanif['valor3'])
                                                    && $arrayParamDetFlujoPreplanif['valor3']=="SI")
                                                {
                                                    $arrayEstadosPreplanificacion[] = $strEstadoInternet;
                                                }
                                                else
                                                {
                                                    $arrayEstadosPlanificacion[] = $strEstadoInternet;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            throw new \Exception('No se encuentran los parámetros de estados del Internet para el '
                                                                . ' flujo de preplanificación');
                                        }
                                    }

                                    $arrayParamsNoRequiereUM    = array(
                                                                        "intIdPlan"                         => $intIdPlanProd,
                                                                        "strDescripcionCaracteristicaPlan"  => 'NO_REQUIERE_ULTIMA_MILLA',
                                                                        "strValorCaracteristicaPlan"        => "SI",
                                                                        "strEstado"                         => "Activo"
                                                                  );
                                    $arrayRespuestaNoRequiereUM = $this->emcom->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                                              ->getCaracteristicasPlanByCriterios($arrayParamsNoRequiereUM);
                                    $intTotalNoRequiereUM = $arrayRespuestaNoRequiereUM['intTotal'];

                                    if($intTotalNoRequiereUM > 0)
                                    {
                                        $strNoRequiereUltimaMilla = "SI";
                                    }
                                    $arrayNombreTecnicoParametrizable = array();
                                    $arrayClasificacionParametrizable = array();
                                    $arrayParametrizacionInicial      = array('strNombreParametroCab' => 'INFO_SERVICIO',
                                                                              'strModulo'             => 'COMERCIAL',
                                                                              'strProceso'            => 'ACTIVACION_SERVICIO');

                                    if( !empty($strPrefijoEmpresa) && $strPrefijoEmpresa == "MD" )
                                    {
                                        $arrayNombreTecnicoParametrizable              = $arrayParametrizacionInicial;
                                        $arrayNombreTecnicoParametrizable['strValor1'] = 'NOMBRE_TECNICO';
                                    }
                                    elseif( !empty($strPrefijoEmpresa) && $strPrefijoEmpresa == "TN" )
                                    {
                                        $arrayClasificacionParametrizable              = $arrayParametrizacionInicial;
                                        $arrayClasificacionParametrizable['strValor1'] = 'CLASIFICACION';
                                    }
                                    else
                                    {
                                        throw new \Exception('No se ha definido un flujo para la empresa con prefijo ' .$strPrefijoEmpresa);
                                    }

                                    $arrayPametrosServicios = array(
                                                                    'estadosServicios'                 => $arrayEstadosInternet,
                                                                    'productoInternetPorLogin'         => 'S',
                                                                    'estadoActivo'                     => 'Activo',
                                                                    'empresaCod'                       => $strEmpresaCod,
                                                                    'intIdPuntoCliente'                => $intIdPtoCliente,
                                                                    'arrayNombreTecnicoParametrizable' => $arrayNombreTecnicoParametrizable,
                                                                    'arrayClasificacionParametrizable' => $arrayClasificacionParametrizable);


                                    $arrayServiciosInternet = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                                          ->getServiciosByCriterios($arrayPametrosServicios);

                                    $intTotalServInternet   = $arrayServiciosInternet['total'];
                                    $arrayRegServInternet   = $arrayServiciosInternet['registros'];

                                    if($intTotalServInternet > 0 && !empty($arrayRegServInternet))
                                    {
                                        $arrayEstadosServicios  = array();
                                        foreach($arrayRegServInternet as $objServicio)
                                        {
                                            $arrayEstadosServicios[]    = $objServicio->getEstado();
                                        }
                                        $arrayEstadosServiciosUniq = array_unique($arrayEstadosServicios,SORT_STRING);


                                        $arrayIntersectPreplanif        = array_intersect($arrayEstadosPreplanificacion, $arrayEstadosServiciosUniq);
                                        $boolExisteServFlujoPreplanif   = !empty($arrayIntersectPreplanif);
                                        $arrayIntersectPlanif           = array_intersect($arrayEstadosPlanificacion, $arrayEstadosServiciosUniq);
                                        $boolExisteServActivo           = !empty($arrayIntersectPlanif);

                                        if($boolExisteServFlujoPreplanif && !$boolExisteServActivo)
                                        {
                                            $strExisteInfoAdicional = "SI";
                                            $strMensajeInformacion  = "Este servicio se creará en estado Pendiente, debido a que el cliente "
                                                                      ."posee un servicio de internet en uno de los siguientes estados: "
                                                                      .implode(",",$arrayEstadosPreplanificacion);
                                            $strNombreSolicitud     = "SOLICITUD PREPLANIFICACION";
                                        }
                                        else
                                        {
                                            $arrayVerificarDeudaCliente = $this->verificarDeudaCliente(array("intIdPer"   => $intIdPer));
                                            $strExisteInfoAdicional     = $arrayVerificarDeudaCliente["strExisteInfoAdicional"];
                                            $strMensajeInformacion      = $arrayVerificarDeudaCliente["strMensajeInformacion"];
                                            $strNombreSolicitud         = $arrayVerificarDeudaCliente["strNombreSolicitud"];
                                        }
                                    }
                                    else
                                    {
                                        $arrayVerificarDeudaCliente = $this->verificarDeudaCliente(array("intIdPer"   => $intIdPer));
                                        if($arrayVerificarDeudaCliente["boolClienteTieneDeuda"])
                                        {
                                            $strExisteInfoAdicional     = $arrayVerificarDeudaCliente["strExisteInfoAdicional"];
                                            $strMensajeInformacion      = $arrayVerificarDeudaCliente["strMensajeInformacion"];
                                            $strNombreSolicitud         = $arrayVerificarDeudaCliente["strNombreSolicitud"];
                                        }
                                        else
                                        {
                                            $strExisteInfoAdicional = "SI";
                                            $strMensajeInformacion  = "Este punto no posee un servicio de Internet Activo!";
                                            $strNombreSolicitud     = "SOLICITUD PLANIFICACION";
                                        }
                                    }

                                    if(!empty($strNombreSolicitud))
                                    {
                                        $objTipoSolicitud = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                        ->findOneByDescripcionSolicitud($strNombreSolicitud);
                                        if(is_object($objTipoSolicitud))
                                        {
                                            $strTagsAdicionales .= "<input type='hidden' id='idSolFlujoPrePlanificacion' ";
                                            $strTagsAdicionales .= "name='idSolFlujoPrePlanificacion' value='".$objTipoSolicitud->getId()."'/>";
                                        }
                                        else
                                        {
                                            throw new \Exception('No se encontró el tipo de solicitud ' .$strNombreSolicitud);
                                        }
                                    }
                                    else
                                    {
                                        throw new \Exception('No se ha obtenido el tipo de solicitud');
                                    }
                                    $strStatus  = "OK";
                                }//if($arrayResultadoCaractReqPlanInternet)
                            }//if($intTotalCaractReqPlanInternet>0)
                            else
                            {
                                $strStatus = "OK";
                            }

                            $arrayParamsRegUnitario            = array(
                                                                            "intIdPlan"                         => $intIdPlanProd,
                                                                            "strDescripcionCaracteristicaPlan"  => 'REGISTRO_UNITARIO',
                                                                            "strValorCaracteristicaPlan"        => "SI",
                                                                            "strEstado"                         => "Activo"
                                                                      );
                            $arrayRespuestaRegUnitario          = $this->emcom->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                                              ->getCaracteristicasPlanByCriterios($arrayParamsRegUnitario);

                            $intTotalCaractRegUnitario          = $arrayRespuestaRegUnitario['intTotal'];
                            $arrayResultadoCaractRegUnitario    = $arrayRespuestaRegUnitario['arrayResultado'];

                            if($intTotalCaractRegUnitario>0 && $arrayResultadoCaractRegUnitario)
                            {
                                $strTagsAdicionales .= "<input type='hidden' value='SI' name='strRegistroUnitarioPlan' "
                                                       ."id='strRegistroUnitarioPlan'/>";
                            }
                            $intContadorCaract                  = 0;
                            $boolListarCaractsIPMPEnPlan        = false;
                            $boolFalse                          = false;
                            $arrayProductosPlanCaracts          = array();
                            $arrayDetallesPlanVigente   = $this->emcom->getRepository('schemaBundle:InfoPlanDet')
                                                                      ->findByPlanIdYEstado($intIdPlanProd,"Activo");

                            foreach($arrayDetallesPlanVigente as $objDetallePlanVigente)
                            {
                                $objProductoDetallePlan = $this->emcom->getRepository('schemaBundle:AdmiProducto')
                                                                       ->find($objDetallePlanVigente->getProductoId());
                                if(is_object($objProductoDetallePlan))
                                {
                                    $boolListarCaractsIPMPEnPlan    = strpos($objProductoDetallePlan->getDescripcionProducto(), 
                                                                            'I. PROTEGIDO MULTI PAID');
                                    if($boolListarCaractsIPMPEnPlan !== $boolFalse)
                                    {
                                        $arrayProductosPlanCaracts[] = array(   "idDetalleProductoPlan"    => $objDetallePlanVigente->getId(),
                                                                                "idProductoPlan"           => $objProductoDetallePlan->getId(),
                                                                                "nombreTecnicoProducto"    => 
                                                                                $objProductoDetallePlan->getNombreTecnico());
                                        break;
                                    }
                                }
                            }
                            
                            $strFlujoAntivirus          = "";
                            $strValorAntivirus          = "";
                            if($boolListarCaractsIPMPEnPlan  !== $boolFalse )
                            {
                                $arrayValidaFlujoAntivirus  = $this->serviceLicenciasKaspersky
                                                                   ->validaFlujoAntivirus(array("intIdPunto"        => $intIdPtoCliente,
                                                                                                "strCodEmpresa"     => $strEmpresaCod
                                                                                                ));
                                $strFlujoAntivirus  = $arrayValidaFlujoAntivirus["strFlujoAntivirus"];
                                $strValorAntivirus  = $arrayValidaFlujoAntivirus["strValorAntivirus"];
                            }
                            
                            foreach($arrayProductosPlanCaracts as $arrayProductoPlanCaracts)
                            {
                                $intContadorCaract          = 0;
                                $intIdProductoPlan          = $arrayProductoPlanCaracts["idProductoPlan"];
                                $intIdDetallePlan           = $arrayProductoPlanCaracts["idDetalleProductoPlan"];
                                $arrayCaractsPlanProducto   = $this->emcom->getRepository('schemaBundle:InfoPlanDet')
                                                                          ->getCaracteristicas($intIdDetallePlan);
                                
                                foreach($arrayCaractsPlanProducto as $arrayCaractsPlanProducto)
                                {
                                    $strStyleDivAdicional               = "";
                                    $strDescripcionCaractPlanProducto   = $arrayCaractsPlanProducto["nombre"];
                                    $strValorCaractPlanProducto         = $arrayCaractsPlanProducto["valor"];
                                    $strEstadoCaractPlanProducto        = $arrayCaractsPlanProducto["estado"];
                                    $intIdProductoCaracteristica        = $arrayCaractsPlanProducto["idProductoCaracteristica"];
                                    if($strEstadoCaractPlanProducto === "Activo")
                                    {
                                        $strCampoHabilitado = "";
                                        if ($strDescripcionCaractPlanProducto === "CORREO ELECTRONICO")
                                        {
                                            if($strFlujoAntivirus === "NUEVO")
                                            {
                                                //Servicio Kaspersky - se obtiene correo en caso de que el producto sea Internet Protegido
                                                $strValorCaractPlanProducto = $this->serviceLicenciasKaspersky
                                                                                   ->getCorreoLicencias(array(  "intIdPunto"        => 
                                                                                                                $intIdPtoCliente,
                                                                                                                "strUsrCreacion"    =>
                                                                                                                'telcos',
                                                                                                                "strIpCreacion"     =>
                                                                                                                '127.0.0.1'));
                                            }
                                            else
                                            {
                                                //Servicio McAfee - se obtiene correo en caso de que el producto sea Internet Protegido
                                                $strValorCaractPlanProducto = $this->servicioTecnico
                                                                                   ->getCorreoDatosEnvioMd(array(   "intIdPunto"            => 
                                                                                                                    $intIdPtoCliente,
                                                                                                                    "strValidaCorreoMcAfee" => 
                                                                                                                    "SI",
                                                                                                                    "strUsrCreacion"       =>
                                                                                                                    'telcos',
                                                                                                                    "strIpCreacion"       =>
                                                                                                                    '127.0.0.1'));
                                            }
                                            $strStyleDivAdicional       = " style = 'margin-top: 5px; margin-bottom: 5px; ' ";
                                        }
                                        else if ($strDescripcionCaractPlanProducto === "CANTIDAD DISPOSITIVOS"
                                            || $strDescripcionCaractPlanProducto === "TIENE INTERNET")
                                        {
                                            $strCampoHabilitado     = " disabled ";
                                        }
                                        else if($strDescripcionCaractPlanProducto === "ANTIVIRUS")
                                        {
                                            if($strFlujoAntivirus === "NUEVO")
                                            {
                                                $strValorCaractPlanProducto = $strValorAntivirus;
                                                $strCampoHabilitado         = " disabled ";
                                                $strStyleDivAdicional       = " style = 'display:none; ' ";
                                            }
                                            else
                                            {
                                                continue;
                                            }
                                        }
                                        
                                        $strHtmlCaratsPlanes .= "<div id = 'div_caract_plan_producto_".$intIdProductoPlan."' "
                                                                ."name = 'div_caract_plan_producto' ".$strStyleDivAdicional.">"
                                                                ."<label class='required'>* ".$strDescripcionCaractPlanProducto."</label>"
                                                                ."<input type='text' value='".$strValorCaractPlanProducto."' ". $strCampoHabilitado
                                                                ."name='caracteristicas_pp_".$intIdProductoPlan."_".$intContadorCaract."' "
                                                                . "id='caracteristicas_pp_".$intIdProductoPlan."_".$intContadorCaract."' />"
                                                                ."<input type='hidden' value='[".$strDescripcionCaractPlanProducto."]' "
                                                                ."name='caracteristica_nombre_pp_".$intIdProductoPlan."_".$intContadorCaract."' "
                                                                ."id='caracteristica_nombre_pp_".$intIdProductoPlan."_".$intContadorCaract."'/>"
                                                                ."<input type='hidden' value='".$intIdProductoCaracteristica."' "
                                                                ."name='producto_caracteristica_pp_".$intIdProductoPlan."_".$intContadorCaract."' "
                                                                ."id='producto_caracteristica_pp_".$intIdProductoPlan."_".$intContadorCaract."'/>"
                                                                ."</div>";
                                        $intContadorCaract++;
                                        
                                    }
                                }
                                $strHtmlCaratsPlanes .= "<input type='hidden' value='" . $intContadorCaract . "' "
                                                     . "name='cantidad_caracteristicas_pp_".$intIdProductoPlan."'"
                                                     ." id='cantidad_caracteristicas_pp_".$intIdProductoPlan."'/>";
                            }
                            
                            if($strPrefijoEmpresa === 'MD' && true === $this->serviceSecurity->isGranted('ROLE_431-7759'))
                            {
                                $intPuntoAdicional = $this->emcom->getRepository('schemaBundle:AdmiGrupoPromocion')
                                                                 ->validaPuntoAdicional(array( "intIdPunto" => $intIdPtoCliente));
                                if ($intPuntoAdicional > 0)
                                {
                                    $strHtmlCaratsPlanes .= "<div>".
                                                            "<tr name = 'caracts'>".
                                                            "<td>".
                                                            "<label for='cantidad'>Código por instalación:</label>".
                                                            "</td>".
                                                            "<td style='padding-left: 5px;' >".
                                                            "<input type='text' name='PROM_INS' id='PROM_INS' onchange='validaCodigo(this.id)'>".
                                                            "</td>".
                                                            "</tr>".
                                                            "</div>".
                                                            "<br>".
                                                            "<div>".
                                                            "<tr name = 'caracts'>".
                                                            "<div class='alert alert-info' style='padding: 5px; width : 430px;' role='alert'>".
                                                            "<i class='fa fa-info-circle'></i>".
                                                            " Para aplicar a una promoción de tipo mix ".
                                                            "debe tener al menos un producto adicional agregado.".
                                                            "</div>".
                                                            "<td>".
                                                            "<label for='cantidad'>Código por mensualidad:</label>".
                                                            "</td>".
                                                            "<td style='padding-left: 5px;' >".
                                                            "<input type='text' name='PROM_MPLA' id='PROM_MPLA' onchange='validaCodigo(this.id)'>".
                                                            "Mix  <input type='checkbox' style='width : 3px; height : 1px' id='checkPromoMix'".
                                                            " onChange='controlValidaMix()' value=''>".
                                                            "</td>".
                                                            "</tr>".
                                                            "</div>".
                                                            "<br>".
                                                            "<div>".
                                                            "<tr name = 'caracts'>".
                                                            "<td>".
                                                            "<label for='cantidad'>Código por ancho de banda:</label>".
                                                            "</td>".
                                                            "<td style='padding-left: 5px;' >".
                                                            "<input type='text' name='PROM_BW' id='PROM_BW' onchange='validaCodigo(this.id)'>".
                                                            "</td>".
                                                            "</tr>".
                                                            "</div>".
                                                            "<script> strCodigoPromocionIns = ''; strNombrePromocionIns = ''; ".
                                                            " strTipoPromocionIns = ''; strCodigoPromocion = ''; strNombrePromocion = ''; ".
                                                            " strTipoPromocion = '';strCodigoPromocionBw = ''; strNombrePromocionBw = ''; ".
                                                            " strTipoPromocionBw = ''; strServiciosMix; </script>";
                                }
                            }
                        }//if($strTipoServicio=="PAQUETE")
                        else
                        {
                            $strStatus = "OK";
                        }
                    }
                    else
                    {
                        throw new \Exception('No se ha encontrado el objeto persona empresa rol');
                    }
                }
                else
                {
                    throw new \Exception('No se ha encontrado el objeto del punto');
                }
            }
            else
            {
                throw new \Exception('No se enviaron los parámetros adecuados para validar las características');
            }
        }
        catch( \Exception $e )
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }
        
        $arrayResultadoValidaciones["strStatusValidaciones"]    = $strStatus;
        $arrayResultadoValidaciones["strMensajeValidaciones"]   = $strMensaje;
        $arrayResultadoValidaciones["strExisteInfoAdicional"]   = $strExisteInfoAdicional;
        $arrayResultadoValidaciones["strMensajeInformacion"]    = $strMensajeInformacion;
        $arrayResultadoValidaciones["strTagsAdicionales"]       = $strTagsAdicionales;
        $arrayResultadoValidaciones["strNoRequiereUltimaMilla"] = $strNoRequiereUltimaMilla;
        $arrayResultadoValidaciones["strHtmlCaratsPlanes"]      = $strHtmlCaratsPlanes;
        return $arrayResultadoValidaciones;
    }
    
    
    /**
     * Documentación para el método 'verificarDeudaCliente'.
     *
     * Método utilizado para verificar si un cliente posee o no deuda
     *
     * @param array $arrayParametros [  'intIdPer'  => id persona empresa rol]
     * 
     * @return array $arrayVerificarDeudaCliente[
     *                                              "strExisteInfoAdicional"    => si es que existe información adicional para mostrar,
     *                                              "strMensajeInformacion"     => mensaje a mostrar,
     *                                              "strNombreSolicitud"        => nombre de la solicitud,
     *                                              "boolClienteTieneDeuda"     => bool para saber si el cliente posee o no deuda
     * 
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 10-04-2017
     */
	public function verificarDeudaCliente($arrayParametros)
	{
        $strExisteInfoAdicional = "";
        $strMensajeInformacion  = "";
        $strNombreSolicitud     = "";
        $boolClienteTieneDeuda  = false;
        $intIdPer               = $arrayParametros["intIdPer"];
        $arraySaldoCliente      = $this->emcom->getRepository('schemaBundle:InfoPersonaEmpresaRol')->getSaldoCliente(array("intIdPer" => $intIdPer));
        if(!empty($arraySaldoCliente))
        {
            $floatSaldoPendiente = $arraySaldoCliente[0]["saldoPendiente"];
            if($floatSaldoPendiente > 0)
            {
                $boolClienteTieneDeuda  = true;
                $strExisteInfoAdicional = "SI";
                $strMensajeInformacion  = "Este servicio se creará en estado Pendiente, debido a que el cliente "
                                          ."posee deuda. El cliente debe cancelar la deuda para proceder a la "
                                          ."activación con costo de instalación gratis";
                $strNombreSolicitud     = "SOLICITUD PREPLANIFICACION";
            }
            else
            {
                $strNombreSolicitud     = "SOLICITUD PLANIFICACION";
            }
        }
        else
        {
            $strNombreSolicitud     = "SOLICITUD PLANIFICACION";
        }
        
        $arrayVerificarDeudaCliente["strExisteInfoAdicional"]   = $strExisteInfoAdicional;
        $arrayVerificarDeudaCliente["strMensajeInformacion"]    = $strMensajeInformacion;
        $arrayVerificarDeudaCliente["strNombreSolicitud"]       = $strNombreSolicitud;
        $arrayVerificarDeudaCliente["boolClienteTieneDeuda"]    = $boolClienteTieneDeuda;
        
        return $arrayVerificarDeudaCliente;
    }

    /**
     * 
     * Metodo encargado de obtener el Array con la informacion de espacio alquilado para clientes con Servicio HOUSING
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 18-09-2017
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 06-07-2020 - Se agrega la llamada al web-service encargado de obtener la información de la ubicación en la
     *                           que se encuentra el servicio en el cuarto de TI.
     *
     * @param  Array $arrayParametros [ objServicioAlq ]
     * @return Array $arrayRespuesta [nombreFila , nombreRack , reservados , tipoEspacio]
     */
    public function getArrayInformacionEspacioHousing($arrayParametros)
    {
        $objServicioAlq = $arrayParametros['objServicioAlq'];
        $arrayRespuesta = array();

        //Obtener el producto de Alquiler de Espacio contenido en el Grupo del Producto a generar Factibilidad
        $arrayRequest        = array ('servicioId' => $objServicioAlq->getId());
        $serviceInfoSolucion = $this->container->get('comercial.InfoSolucion');
        $arrayResponseWs     = $serviceInfoSolucion->WsPostDc(array('strUser'      =>  $arrayParametros['strUser'],
                                                                    'strIp'        =>  $arrayParametros['strIp'],
                                                                    'strOpcion'    => 'soluciondc',
                                                                    'strEndPoint'  => 'listarCuartoTiServicio',
                                                                    'arrayRequest' =>  $arrayRequest));

        if ($arrayResponseWs['status'] && !empty($arrayResponseWs['data']))
        {
            //Hacemos la conversion a array de objeto.
            $arrayJson      = json_decode(json_encode($arrayResponseWs['data']));
            $strTipoEspacio = $arrayResponseWs['data'][0]['descripcionRecurso'];

            foreach($arrayJson as $objJson)
            {
                $arrayRespuesta[] = array('nombreFila'  =>  $objJson->nombreFila,
                                          'idRack'      =>  $objJson->idRack,
                                          'nombreRack'  =>  $objJson->nombreRack,
                                          'reservados'  =>  $objJson->reservados,
                                          'tipoEspacio' =>  $strTipoEspacio,
                                          'unidades'    =>  $objJson->unidadesRack);
            }
        }

        return $arrayRespuesta;
    }

    
    /**
     * Funcion que sirve para generar una solicitud de facturación por servicios creados recientemente.
     *
     * @author Walther Joao Gaibor C <wgaibor@telconet.ec>
     * @version 1.0 21-01-2018
     * @param $arrayParametros[
     *                          intIdServicio       : integer   : idServicio a generarse la factura.
     *                          strUser             : string    : Usuario en session.
     *                          floatValor          : float     : Costo a facturarse sin iva.
     *                          strNombreMotivo     : string    : Motivo por el que se crea la solicitud.
     *                          strLogin            : string    : Login del servicio.
     *                          strDescripcion      : string    : Descripcion del servicio.
     *                          strCaracteristica   : string    : Caracteristica de la solicitud a generarse.
     *                        ]
     */
    public function facturarServicio($arrayParametros)
    {
        $objServicio = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                         ->findOneById($arrayParametros['intIdServicio']);
        if(is_object($objServicio))
        {
            $objMotivo       = $this->emcom->getRepository('schemaBundle:AdmiMotivo')
                                               ->findOneByNombreMotivo($arrayParametros['strNombreMotivo']);

            $intIdMotivo     = 0;
            if( $objMotivo )
            {
                $intIdMotivo = $objMotivo->getId();
            }
            $strObservacion      = 'Facturación por Cambio Tipo Medio '.$arrayParametros['strLogin'].' '.$arrayParametros['strDescripcion'];
            $objTipoSolicitud    = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                               ->findOneByDescripcionSolicitud( $arrayParametros['strDescripcion'] );

            $objDetalleSolicitud = new InfoDetalleSolicitud();
            $objDetalleSolicitud->setEstado(self::ESTADO_APROBADO);
            $objDetalleSolicitud->setFeCreacion(new \DateTime('now'));
            $objDetalleSolicitud->setUsrCreacion($arrayParametros['strUser']);
            $objDetalleSolicitud->setServicioId($objServicio);
            $objDetalleSolicitud->setTipoSolicitudId($objTipoSolicitud);
            $objDetalleSolicitud->setMotivoId($intIdMotivo);
            $objDetalleSolicitud->setPrecioDescuento($arrayParametros['floatValor']);
            $objDetalleSolicitud->setObservacion($strObservacion);
            $this->emcom->persist($objDetalleSolicitud);
            $this->emcom->flush();

            $objAdmiCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                 ->findOneByDescripcionCaracteristica( $arrayParametros['strCaracteristica'] );

            $objDetalleSolCarac    = new InfoDetalleSolCaract();
            $objDetalleSolCarac->setDetalleSolicitudId($objDetalleSolicitud);
            $objDetalleSolCarac->setEstado(self::ESTADO_ACTIVO);
            $objDetalleSolCarac->setFeCreacion(new \DateTime('now'));
            $objDetalleSolCarac->setUsrCreacion($arrayParametros['strUser']);
            $objDetalleSolCarac->setCaracteristicaId($objAdmiCaracteristica);
            $this->emcom->persist($objDetalleSolCarac);
            $this->emcom->flush();


            $objDetalleSolHist     = new InfoDetalleSolHist();
            $objDetalleSolHist->setDetalleSolicitudId($objDetalleSolicitud);
            $objDetalleSolHist->setEstado(self::ESTADO_APROBADO);
            $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
            $objDetalleSolHist->setUsrCreacion($arrayParametros['strUser']);
            $objDetalleSolHist->setMotivoId($intIdMotivo);
            $objDetalleSolHist->setObservacion($strObservacion);
            $this->emcom->persist($objDetalleSolHist);
            $this->emcom->flush();
        }
    }
    
    /**
     * 
     * Metodo encargado de realizar la eliminacion de todos los servicios ligados a una solucion
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 16-03-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 - 13-07-2020 - Obtenemos el número de solución en base a las nuevas estructuras.
     * 
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.2 - 13-07-2020 - Se agrega a los parámetros de salida el arrayServiciosLigados
     *
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.3 - 11-11-2020 - Se agrega llamado a método de eliminación para servicios individuales.
     * 
     * @param   Array $arrayParametros
     * @return  Array $arrayRespuesta
     */
    public function eliminarServicioPorSolucion($arrayParametros)
    {
        $arrayRespuesta           = array('status' => 'OK','mensaje' => 'OK', 'arrayServiciosEliminados' => array());
        $arrayServiciosEliminados = array();
        $arrayServiciosLigados    = array();
        
        $strStatus  = 'OK';
        $strMensaje = 'OK';
        $strEstado  = 'Eliminado';
        
        $this->emcom->getConnection()->beginTransaction();
        $this->eminf->getConnection()->beginTransaction();
        
        try
        {
            $objServicio = $this->emcom->getRepository("schemaBundle:InfoServicio")->find($arrayParametros['intIdServicio']);
            
            if(is_object($objServicio))
            {
                $arrayParametros['objServicio']    = $objServicio;
                $arrayParametros['strEstado']      = $strEstado;
                $arrayParametros['strAccion']      = 'Eliminar';
                $arrayParametros['objMotivo']      = null;
                $arrayParametros['boolEsSolucion'] = true;
                
                //Eliminar el Servicio actual
                $objServicio->setEstado($strEstado);
                $this->emcom->persist($objServicio);
                $this->emcom->flush();
                
                //Eliminar comisiones
                $this->eliminarComisionesPorServicio($arrayParametros);
                
                //Eliminar Solicitudes
                $this->eliminarAnularRechazarSolicitudes($arrayParametros);
                
                //reversar Factibilidad del Servicio Actual
                $strMensaje = $this->servicioTecnico->reversaFactibilidad($arrayParametros);
                
                if(!empty($strMensaje))
                {
                    return array('status' => 'ERROR' , 'mensaje' => $strMensaje, 'arrayServiciosEliminados' => array());
                }
                
                if($objServicio->getProductoId()->getEsConcentrador() == 'SI')
                {
                    $arrayResult = $this->servicioTecnico->getServiciosPorConcentrador($arrayParametros);

                    if(!empty($arrayResult['strMensaje']))
                    {
                        $strStatus = 'ERROR';
                        
                        if($arrayResult['strStatus'] == 'OK')
                        {
                            $strMensaje = '<b>No se puede Eliminar el servicio concentrador, debido a que tiene extremos enlazados:</b>'
                                                   . '<br><br>'.$arrayResult['strMensaje'];
                        }
                        else
                        {
                            $strMensaje = $arrayResult['strMensaje'];
                        }
                        
                        return array('status' => 'ERROR' , 'mensaje' => $strMensaje);
                    }
                }
                
                //Verificar si tiene productos ligados como solucion---------------------------------------------------
                
                
                //Si es Producto CORE se obtendrá los demás elementos incluido el Preferencial
                $objProducto = $objServicio->getProductoId();

                //Consultamos el servicio en el detalle de la solución para posterior obtener el número de solución.
                $objInfoSolucionDet = $this->emcom->getRepository('schemaBundle:InfoSolucionDet')
                        ->findOneBy(array('servicioId' => $objServicio->getId(),
                                          'estado'     => 'Activo'));

                if (is_object($objInfoSolucionDet) && is_object($objInfoSolucionDet->getSolucionCabId()))
                {
                    $objInfoSolucionCab = $objInfoSolucionDet->getSolucionCabId();
                    $arrayParametros['intNumeroSolucion'] = $objInfoSolucionCab->getNumeroSolucion();

                    //Producto Preferencial a ser eliminado
                    if ($objInfoSolucionDet->getEsPreferencial() === 'SI')
                    {
                        $arrayRespuesta = $this->eliminacionServiciosPorPreferencial($arrayParametros);
                    }
                    else
                    {
                        //Verificar si son productos CORE
                        $boolPoolRecursos  = $this->servicioTecnico->isContieneCaracteristica($objProducto,'ES_POOL_RECURSOS');
                        $boolHousing       = $this->servicioTecnico->isContieneCaracteristica($objProducto,'ES_HOUSING');

                        if($boolPoolRecursos || $boolHousing)
                        {
                            $arrayRespuesta = $this->eliminacionServiciosPorCore($arrayParametros);
                        }
                        else
                        {
                            $arrayRespuesta = $this->servLigadosPorTipoSolucion($arrayParametros);
                        }
                    }
                }
                
                if($arrayRespuesta['status'] == 'OK')
                {
                    $arrayServiciosEliminados = $arrayRespuesta['arrayServiciosEliminados'];
                    $arrayServiciosLigados   = $arrayRespuesta['arrayServiciosLigados'];
                    
                    //Eliminar caracteristicas del servicio                
                    $this->eliminarAnularRechazarCaracteristicasServicio($arrayParametros);

                    //Ingresar Historial del Servicio
                    $this->servicioTecnico->ingresarServicioHistorial($objServicio,
                                                                     'Eliminado',
                                                                     'Se eliminó el servicio',
                                                                     $arrayParametros['strUsrCreacion'],
                                                                     $arrayParametros['strIpCreacion']
                                                                     );

                    $this->emcom->commit();
                    $this->eminf->commit();
                }
                else                
                {
                    $strStatus  = 'ERROR';
                    $strMensaje = $arrayRespuesta['mensaje'];
                }
                //-------------------------------------------------------------------------------                                
            }
            else
            {
                $strStatus  = 'ERROR';
                $strMensaje = 'No existe el servicio a ser Eliminado';
            }
        } 
        catch (\Exception $e) 
        {
            $strStatus  = 'ERROR';
            $strMensaje = 'Error al Eliminar el Servicio, notificar a Sistemas';
            
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService.eliminarServicio', 
                                              $e->getMessage(), 
                                              $arrayParametros['strUsrCreacion'], 
                                              $arrayParametros['strIpCreacion'] );
            
            if ($this->emcom->getConnection()->isTransactionActive())
            {
                $this->emcom->rollback();
            }
            
            if ($this->eminf->getConnection()->isTransactionActive())
            {
                $this->eminf->rollback();
            }
            
            $this->emcom->close();
            $this->eminf->close();
        }
        
        $arrayRespuesta['status']                   = $strStatus;
        $arrayRespuesta['mensaje']                  = $strMensaje;
        $arrayRespuesta['arrayServiciosEliminados'] = $arrayServiciosEliminados;
        $arrayRespuesta['arrayServiciosLigados']    = $arrayServiciosLigados;
        
        return $arrayRespuesta;
    }
    
    /**
     * 
     * Metodo encargado de realizar la anulacion de todos los servicios ligados a una solucion
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 19-03-2018
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.1 - 14-04-2019 Se modifica IF tradicional por un operador ternario.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 - 07-07-2020 Se modifica el método para obtener la data de la solución
     *                           en base a las nuevas estructuras.
     *
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.3 - 11-11-2020 - Se agrega llamado a método para listar los
     *                              servicios ligados por tipo de solucion
     * 
     *  @param   Array $arrayParametros
     * @return  Array $arrayRespuesta [ status , mensaje , arrayServiciosEliminados ]
     */
    public function anularRechazarServicioPorSolucion($arrayParametros)
    {
        $arrayRespuesta           = array('status' => 'OK','mensaje' => 'OK', 'arrayServiciosEliminados' => array());
        $arrayServiciosEliminados = array();
        
        $strStatus  = 'OK';
        $strMensaje = 'OK';

        $strEstado = $arrayParametros['strAccion'] == 'Anular' ? 'Anulado' : 'Rechazada';

        $this->emcom->getConnection()->beginTransaction();
        $this->eminf->getConnection()->beginTransaction();
        
        try
        {
            $objDetalleSolicitud  = $this->emcom->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                ->findOneById($arrayParametros['intIdSolicitud']);
            
            $objMotivo            = $this->emgen->getRepository('schemaBundle:AdmiMotivo')->findOneById($arrayParametros['intIdMotivo']);
            
            $objServicio = $this->emcom->getRepository("schemaBundle:InfoServicio")->find($arrayParametros['intIdServicio']);
            
            if(is_object($objServicio) && is_object($objDetalleSolicitud))
            {
                $strTipoSolicitud  = strtolower($objDetalleSolicitud->getTipoSolicitudId()->getDescripcionSolicitud());
                
                if($strTipoSolicitud == 'solicitud planificacion' || $strTipoSolicitud == 'solicitud factibilidad' )
                {
                    $arrayParametros['objServicio']    = $objServicio;
                    $arrayParametros['strEstado']      = $strEstado;
                    $arrayParametros['objMotivo']      = $objMotivo;
                    $arrayParametros['strAccion']      = $arrayParametros['strAccion'];
                    $arrayParametros['boolEsSolucion'] = true;
                    
                    //Eliminar el Servicio actual
                    $objServicio->setEstado($strEstado);
                    $this->emcom->persist($objServicio);
                    $this->emcom->flush();
                    
                    //Eliminar Solicitudes
                    $this->eliminarAnularRechazarSolicitudes($arrayParametros);

                    //reversar Factibilidad del Servicio Actual
                    $strMensaje = $this->servicioTecnico->reversaFactibilidad($arrayParametros);

                    if(!empty($strMensaje))
                    {
                        return array('status' => 'ERROR' , 'mensaje' => $strMensaje, 'arrayServiciosEliminados' => array());
                    }

                    if($objServicio->getProductoId()->getEsConcentrador() == 'SI')
                    {
                        $arrayResult = $this->servicioTecnico->getServiciosPorConcentrador($arrayParametros);

                        if(!empty($arrayResult['strMensaje']))
                        {
                            $strStatus = 'ERROR';

                            if($arrayResult['strStatus'] == 'OK')
                            {
                                $strMensaje = '<b>No se puede Eliminar el servicio concentrador, debido a que tiene extremos enlazados:</b>'
                                                       . '<br><br>'.$arrayResult['strMensaje'];
                            }
                            else
                            {
                                $strMensaje = $arrayResult['strMensaje'];
                            }

                            return array('status' => 'ERROR' , 'mensaje' => $strMensaje);
                        }
                    }
                    
                    $objProducto = $objServicio->getProductoId();

                    //Consultamos el servicio en el detalle de la solución para posterior obtener el número de solución.
                    $objInfoSolucionDet = $this->emcom->getRepository('schemaBundle:InfoSolucionDet')
                            ->findOneBy(array('servicioId' => $objServicio->getId(),
                                              'estado'     => 'Activo'));

                    if (is_object($objInfoSolucionDet) && is_object($objInfoSolucionDet->getSolucionCabId()))
                    {
                        $objInfoSolucionCab = $objInfoSolucionDet->getSolucionCabId();
                        $arrayParametros['intNumeroSolucion'] = $objInfoSolucionCab->getNumeroSolucion();

                        //Producto Preferencial a ser eliminado
                        if ($objInfoSolucionDet->getEsPreferencial() === 'SI')
                        {
                            $arrayRespuesta = $this->eliminacionServiciosPorPreferencial($arrayParametros);
                        }
                        else
                        {
                            //Verificar si son productos CORE
                            $boolPoolRecursos  = $this->servicioTecnico->isContieneCaracteristica($objProducto,'ES_POOL_RECURSOS');
                            $boolHousing       = $this->servicioTecnico->isContieneCaracteristica($objProducto,'ES_HOUSING');

                            if($boolPoolRecursos || $boolHousing)
                            {
                                $arrayRespuesta = $this->eliminacionServiciosPorCore($arrayParametros);
                            }
                            else
                            {
                                $arrayRespuesta = $this->servLigadosPorTipoSolucion($arrayParametros);
                            }
                        }
                    }
                    
                    if($arrayRespuesta['status'] == 'OK')
                    {
                        $arrayServiciosEliminados = $arrayRespuesta['arrayServiciosEliminados'];

                        if($arrayParametros['strAccion'] == 'Anular')
                        {
                            //Eliminar caracteristicas del servicio                
                            $this->eliminarAnularRechazarCaracteristicasServicio($arrayParametros);
                        }

                        //Ingresar Historial del Servicio
                        $this->servicioTecnico->ingresarServicioHistorial($objServicio,
                                                                          $strEstado,
                                                                          $arrayParametros['strObservacion'],
                                                                          $arrayParametros['strUsrCreacion'],
                                                                          $arrayParametros['strIpCreacion'],
                                                                          $objMotivo
                                                                         );
                        
                        $strRespuestaCancelarTarea = $this->cancelarTareasGeneradasPorServicio($arrayParametros);
                        
                        if(!empty($strRespuestaCancelarTarea))
                        {
                            $strStatus  = 'ERROR';
                            $strMensaje = $strRespuestaCancelarTarea;
                        }
                        else
                        {
                            $strMensaje = '';
                            
                            if($arrayParametros['strOrigen'] == 'coordinacion')
                            {
                                if($arrayParametros['strAccion'] == 'Anular')
                                {
                                    $strMensaje .= 'Anulación de Solicitud #';
                                }
                                else
                                {
                                    $strMensaje .= 'Rechazo de Solicitud #';
                                }
                                
                                $objMensaje =  $this->templating
                                                ->render('planificacionBundle:Coordinar:notificacion.html.twig', 
                                                          array('detalleSolicitud'     => $objDetalleSolicitud,
                                                                'detalleSolicitudHist' => null,
                                                                'motivo'               => $objMotivo)
                                                               );

                                $strAsunto = $strMensaje. $objDetalleSolicitud->getId().' del flujo de Soluciones';

                                //DESTINATARIOS.... 
                                $arrayFormasContacto = $this->emcom->getRepository('schemaBundle:InfoPersona')
                                                            ->getContactosByLoginPersonaAndFormaContacto($objServicio->getUsrVendedor(), 
                                                                                                         'Correo Electronico');
                                $arrayTo = array();

                                foreach($arrayFormasContacto as $array)
                                {
                                    $arrayTo[] = $array['valor'];
                                }

                                //ENVIO DE MAIL
                                $objMessage = \Swift_Message::newInstance()
                                    ->setSubject($strAsunto)
                                    ->setFrom('notificaciones_telcos@telconet.ec')
                                    ->setTo($arrayTo)
                                    ->setCc(array())
                                    ->setBody($objMensaje, 'text/html')
                                ;

                                if($this->mailerSend == "true")
                                {
                                    $this->mailer->send($objMessage);
                                }
                            }
                            else
                            {
                                if($arrayParametros['strAccion'] == 'Anular')
                                {
                                    $strMensaje .= 'Anulación de Solicitud de Factibilidad #';
                                }
                                else
                                {
                                    $strMensaje .= 'Rechazo de Solicitud de Factibilidad #';
                                }
                                
                                $strAsunto = $strMensaje." ".$objDetalleSolicitud->getId();
                                $arrayTo   = array();

                                if($objServicio->getUsrVendedor())
                                {
                                    //DESTINATARIOS.... 
                                    $arrayFormasContacto = $this->emcom->getRepository('schemaBundle:InfoPersona')
                                                                ->getContactosByLoginPersonaAndFormaContacto($objServicio->getUsrVendedor(),
                                                                                                            'Correo Electronico');
                                    foreach($arrayFormasContacto as $array)
                                    {
                                        $arrayTo[] = $array['valor'];
                                    }
                                }

                                /*Envío de correo por medio de plantillas**/
                                /* @var $envioPlantilla EnvioPlantilla */
                                $arrayParametros    = array('detalleSolicitud' => $objDetalleSolicitud,'motivo'=> $objMotivo);

                                $this->serviceEnvioPlantilla->generarEnvioPlantilla($strAsunto, 
                                                                                    $arrayTo, 
                                                                                    'RECHAZA_FACTIB', 
                                                                                    $arrayParametros,
                                                                                    $arrayParametros['intIdEmpresa'],
                                                                                    '',
                                                                                    '',
                                                                                    null, 
                                                                                    true,
                                                                                    'notificaciones_telcos@telconet.ec');
                            }
                            
                            $this->emcom->commit();
                            $this->eminf->commit();
                        }
                    }
                    else                
                    {
                        $strStatus  = 'ERROR';
                        $strMensaje = $arrayRespuesta['mensaje'];
                    }
                }
            }
            else
            {
                $strStatus  = 'ERROR';
                $strMensaje = 'No existe el servicio a ser Anulado/Rechazado';
            }
        } 
        catch (\Exception $e) 
        {
            $strStatus  = 'ERROR';
            $strMensaje = 'Error al Anular/Rechazar el Servicio, notificar a Sistemas';
            
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService.anularRechazarServicioPorSolucion', 
                                              $e->getMessage(), 
                                              $arrayParametros['strUsrCreacion'], 
                                              $arrayParametros['strIpCreacion'] );
            
            if ($this->emcom->getConnection()->isTransactionActive())
            {
                $this->emcom->rollback();
            }
            
            if ($this->eminf->getConnection()->isTransactionActive())
            {
                $this->eminf->rollback();
            }
            
            $this->emcom->close();
            $this->eminf->close();
        }
        
        $arrayRespuesta['status']                   = $strStatus;
        $arrayRespuesta['mensaje']                  = $strMensaje;
        $arrayRespuesta['arrayServiciosEliminados'] = $arrayServiciosEliminados;
        
        return $arrayRespuesta;
    }
    
    /**
     * 
     * Metodo encargado de realizar la eliminacion de las comisiones existentes en un Servicio
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 16-03-2018
     * 
     * @param   Array $arrayParametros [ intIdServicio ]     
     */
    private function eliminarComisionesPorServicio($arrayParametros)
    {
        $arrayInfoServicioComision = $this->emcom->getRepository('schemaBundle:InfoServicioComision')
                                           ->findBy( array('servicioId' => $arrayParametros['intIdServicio'], 'estado' => 'Activo') );
            
        if( !empty($arrayInfoServicioComision) )
        {
            foreach($arrayInfoServicioComision as $objInfoServicioComision)
            {
                $objInfoServicioComision->setEstado($arrayParametros['strEstado']);
                $objInfoServicioComision->setUsrUltMod($arrayParametros['strUsrCreacion']);
                $objInfoServicioComision->setFeUltMod(new \DateTime('now'));
                $objInfoServicioComision->setIpUltMod($arrayParametros['strIpCreacion']);
                $this->emcom->persist($objInfoServicioComision);
                $this->emcom->flush();
            }
        }
    }
    
    /**
     * 
     * Metodo encargado de realizar la eliminacion de las solicitudes creadas sobre un Servicio
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 16-03-2018
     * 
     * @param   Array $arrayParametros [ intIdServicio , intIdSolicitud ]        
     */
    private function eliminarAnularRechazarSolicitudes($arrayParametros)
    {        
        $objDetalleSolicitudIT = null;
        
        //Verifica si tiene solicitud de INFO TECNICA
        if(isset($arrayParametros['intIdSolicitud']) && $arrayParametros['intIdSolicitud']!=null)
        {
            $objDetalleSolicitudIT = $this->emcom->getRepository("schemaBundle:InfoDetalleSolicitud")->find($arrayParametros['intIdSolicitud']);
        }
        
        //Obtener todas las solicitudes atachadas al servicio a ser eliminado
        $arrayInfoDetalleSolicitud = $this->emcom->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                 ->findByServicioId($arrayParametros['intIdServicio']);
            
        if(is_object($objDetalleSolicitudIT) && !in_array($objDetalleSolicitudIT,$arrayInfoDetalleSolicitud))
        {
            $arrayInfoDetalleSolicitud[] = $objDetalleSolicitudIT;
        }
        
        if(count($arrayInfoDetalleSolicitud)>0)
        {           
            foreach($arrayInfoDetalleSolicitud as $objInfoDetalleSolicitud)
            {
                $strObservacion = '';
                
                if($arrayParametros['strAccion'] == 'Eliminar')
                {
                    $strObservacion .= 'Se realizo la eliminación de servicio, y se da de baja a la solicitud <b>Usr: '
                                       .$arrayParametros['strUsrCreacion'].'</b>';
                }
                else
                {
                    $strObservacion .= $arrayParametros['strObservacion'];
                }
                
                $objInfoDetalleSolicitud->setEstado($arrayParametros['strEstado']);
                $objInfoDetalleSolicitud->setObservacion($strObservacion);   
                
                if(is_object($arrayParametros['objMotivo']))
                {
                    $objInfoDetalleSolicitud->setMotivoId($arrayParametros['objMotivo']->getId());
                }
                
                $this->emcom->persist($objInfoDetalleSolicitud);
                $this->emcom->flush();
                
                 //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                $objInfoDetalleSolHist = new InfoDetalleSolHist();
                $objInfoDetalleSolHist->setDetalleSolicitudId($objInfoDetalleSolicitud);
                $objInfoDetalleSolHist->setObservacion($strObservacion);
                $objInfoDetalleSolHist->setIpCreacion($arrayParametros['strIpCreacion']);
                $objInfoDetalleSolHist->setFeCreacion(new \DateTime('now'));
                $objInfoDetalleSolHist->setUsrCreacion($arrayParametros['strUsrCreacion']);
                $objInfoDetalleSolHist->setEstado($arrayParametros['strEstado']);
                
                if(is_object($arrayParametros['objMotivo']))
                {
                    $objInfoDetalleSolHist->setMotivoId($arrayParametros['objMotivo']->getId());
                }
                
                $this->emcom->persist($objInfoDetalleSolHist);
                $this->emcom->flush();               
            }
        }
    }
        
    /**
     * 
     * Metodo encargado de realizar la eliminacion de las caracteristicas creadas sobre un Servicio
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 16-03-2018
     * 
     * @param   Array $arrayParametros [ intIdServicio  ]        
     */
    private function eliminarAnularRechazarCaracteristicasServicio($arrayParametros)
    {
        $arrayInfoServicioProdCaract = $this->emcom->getRepository('schemaBundle:InfoServicioProdCaract')
                                                   ->findByServicioId($arrayParametros['intIdServicio']);
            
        if(count($arrayInfoServicioProdCaract)>0)
        {           
            foreach($arrayInfoServicioProdCaract as $objInfoServicioProdCaract)
            {
                $objInfoServicioProdCaract->setEstado($arrayParametros['strEstado']);
                $objInfoServicioProdCaract->setFeUltMod(new \DateTime('now'));
                $objInfoServicioProdCaract->setUsrUltMod($arrayParametros['strUsrCreacion']);
                $this->emcom->persist($objInfoServicioProdCaract);
            }
            $this->emcom->flush();
        }
    }    
    
    /**
     * 
     * Metodo encargado de realizar la eliminacion de todos los servicios de manera general y devuelve el array de Servicios
     * Eliminados para retro alimentar al usuario
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 16-03-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 - 08-07-2018 - Retornamos un array adicional con los id de los servicios eliminados.
     *
     * @param   Array $arrayParametros
     * @return Array  [ status , mensaje, arrayServiciosEliminados ]
     */
    private function getArrayEliminarServicios($arrayParametros)
    {
        $arrayServiciosEliminados        = array();
        $arrayIdServiciosEliminados      = array();
        $arrayParametrosEliminacionHIjos = array();
        
        $arrayParametrosEliminacionHIjos['strEstado']      = $arrayParametros['strEstado'];
        $arrayParametrosEliminacionHIjos['strAccion']      = $arrayParametros['strAccion'];
        $arrayParametrosEliminacionHIjos['strUsrCreacion'] = $arrayParametros['strUsrCreacion'];
        $arrayParametrosEliminacionHIjos['strIpCreacion']  = $arrayParametros['strIpCreacion'];
        $arrayParametrosEliminacionHIjos['objRequest']     = $arrayParametros['objRequest'];
        $arrayParametrosEliminacionHIjos['objMotivo']      = $arrayParametros['objMotivo'];
        $arrayParametrosEliminacionHIjos['strObservacion'] = $arrayParametros['strObservacion'];
        $arrayParametrosEliminacionHIjos['boolEsSolucion'] = true; 
        
        $arrayServicios = $arrayParametros['arrayServicios'];
        
        //Se recorre uno a uno los servicios para proceder a ser eliminados
        foreach($arrayServicios as $objServicioSubSolucion)
        {
            $strEstado         = $objServicioSubSolucion->getEstado();
            $objProductoSubSol = $objServicioSubSolucion->getProductoId();

            if($strEstado != $arrayParametros['strEstado'] && ($strEstado != 'Activo' && $strEstado != 'EnPruebas' && 
                $strEstado != 'Asignada'))
            {
                $objServicioSubSolucion->setEstado($arrayParametros['strEstado']);
                $this->emcom->persist($objServicioSubSolucion);
                $this->emcom->flush();
                
                $arrayParametrosEliminacionHIjos['intIdServicio']  = $objServicioSubSolucion->getId();
                
                if($arrayParametros['strAccion'] == 'Eliminar')
                {
                    //Eliminar comisiones
                    $this->eliminarComisionesPorServicio($arrayParametrosEliminacionHIjos);
                }
                
                $this->eliminarAnularRechazarSolicitudes($arrayParametrosEliminacionHIjos);
                
                //Si ya genero Factibilidad se procede a reversar la misma
                if($strEstado == 'Factible' || $strEstado == 'AsignadoTarea' || $strEstado == 'PrePlanificada' ||
                   $strEstado == 'Planificada' || $strEstado == 'Replanificada' || $strEstado == 'PreFactibilidad-Pac' ||
                   $strEstado == 'FactibilidadEnProceso-Pac')
                {
                    $boolHousing  = $this->servicioTecnico->isContieneCaracteristica($objProductoSubSol,'ES_HOUSING');

                    //liberar recursos asignados de factibilidad para el housing
                    if($boolHousing)
                    {
                        $strMensaje = $this->servicioTecnico->reversaFactibilidad($arrayParametrosEliminacionHIjos);

                        if(!empty($strMensaje))
                        {
                            return array('status' => 'ERROR' , 'mensaje' => $strMensaje);
                        }
                    }
                }
                
                $boolAlquiler  = $this->servicioTecnico->isContieneCaracteristica($objProductoSubSol,'ES_ALQUILER_SERVIDORES');
                
                //Si es alquiler de servidores se libera recursos de Servidores disponible asignado
                if($boolAlquiler && $strEstado == 'Pendiente')
                {
                    $strMensaje = $this->servicioTecnico->reversaFactibilidad($arrayParametrosEliminacionHIjos);

                    if(!empty($strMensaje))
                    {
                        return array('status' => 'ERROR' , 'mensaje' => $strMensaje);
                    }
                }

                if($objServicioSubSolucion->getProductoId()->getEsConcentrador() == 'SI')
                {
                    $arrayResult = $this->servicioTecnico->getServiciosPorConcentrador($arrayParametrosEliminacionHIjos);

                    if(!empty($arrayResult['strMensaje']))
                    {
                        if($arrayResult['strStatus'] == 'OK')
                        {
                            $strMensaje = '<b>No se puede Eliminar el servicio concentrador, debido a que tiene extremos enlazados:</b>'
                                                   . '<br><br>'.$arrayResult['strMensaje'];
                        }
                        else
                        {
                            $strMensaje = $arrayResult['strMensaje'];
                        }

                        return array('status' => 'ERROR' , 'mensaje' => $strMensaje, 'arrayServiciosEliminados' => array());
                    }
                }

                if($arrayParametros['strAccion'] != 'Rechazar')
                {
                    $this->eliminarAnularRechazarCaracteristicasServicio($arrayParametrosEliminacionHIjos);
                }                
                
                $strObservacionEliminacion = '';
                
                if($arrayParametros['strAccion'] == 'Eliminar')
                {
                    $strObservacionEliminacion = 'Se eliminó el servicio por eliminación de Servicio : '
                                               . '<b>'.$arrayParametros['objProducto']->getDescripcionProducto().'</b>';
                }
                else if($arrayParametros['strAccion'] == 'Anular')
                {
                    $strObservacionEliminacion = 'Se anuló el servicio por anulación de Servicio <b>'.
                                                 $arrayParametros['objProducto']->getDescripcionProducto().'</b><br/>'
                                                 . ' <b>Observación</b> : '.$arrayParametros['strObservacion'];
                }
                else
                {
                    $strObservacionEliminacion = 'Se rechazó el servicio por Rechazo de Servicio <b>'.
                                                 $arrayParametros['objProducto']->getDescripcionProducto().'</b><br/>'
                                                 . ' <b>Observación</b> : '.$arrayParametros['strObservacion'];
                }
                
                //Ingresar Historial del Servicio
                $this->servicioTecnico->ingresarServicioHistorial($objServicioSubSolucion,
                                                                 $arrayParametros['strEstado'],
                                                                 $strObservacionEliminacion,
                                                                 $arrayParametros['strUsrCreacion'],
                                                                 $arrayParametros['strIpCreacion'],
                                                                 $arrayParametros['objMotivo']
                                                                 );
                
                $strRespuesta = $this->cancelarTareasGeneradasPorServicio($arrayParametrosEliminacionHIjos);
                
                if(!empty($strRespuesta))
                {
                    return array('status' => 'ERROR' , 'mensaje' => $strRespuesta, 'arrayServiciosEliminados' => array());
                }

                $arrayServiciosEliminados[]   = $objProductoSubSol->getDescripcionProducto().' ( '.$arrayParametros['strSubTipo'].' )';
                $arrayIdServiciosEliminados[] = $objServicioSubSolucion->getId();

            }//validacion si servicio no esta eliminado
        }//foreach servicios por subtipo solucion atachada al preferencial
        
        return array('status'  => 'OK' , 'mensaje' => 'OK',
                     'arrayServiciosEliminados'   => $arrayServiciosEliminados,
                     'arrayIdServiciosEliminados' => $arrayIdServiciosEliminados);
    }
    
    /**
     * 
     * Metodo encargado de realizar la eliminacion de todos los servicios ligados a un Servicio Preferencial
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 16-03-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 - 09-07-2020 - 1.- Se obtiene la data en base a las nuevas estructuras de solución.
     *                             2.- Se realiza el llamado al web-service encargado de eliminar los servicios de la solución. 
     * 
     * @author Karen Rodríguez V. <kyrodriguez@telconet.ec>
     * @version 1.2 - 13-07-2020 - 1.- Se suprime código que elimina serivios enlazados al preferencial. 
     *                             2.- Se agrega a los parámetros de salida el arrayServiciosLigados
     *
     * @param   Array $arrayParametros
     * @return Array  [ status , mensaje, arrayServiciosEliminados ]     
     */
    private function eliminacionServiciosPorPreferencial($arrayParametros)
    {
        $arrayServiciosEliminados   = array();
        $arrayIdServiciosEliminados = array();
        $arrayServiciosLigados      = array();

        $objServicio         = $arrayParametros['objServicio'];
        $objProducto         = $objServicio->getProductoId();
        $serviceInfoSolucion = $this->container->get('comercial.InfoSolucion');
        $arrayParametros['objProducto'] = $objProducto;

        $arrayRequest     = array ('idServicio' => $objServicio->getId(),'estado' => 'Activo');
        $arrayRespuestaWs = $serviceInfoSolucion->WsPostDc(array('strUser'      =>  $arrayParametros['strUser'],
                                                                 'strIp'        =>  $arrayParametros['strIp'],
                                                                 'strOpcion'    => 'soluciondc',
                                                                 'strEndPoint'  => 'listarDetalleSolucion',
                                                                 'arrayRequest' =>  $arrayRequest));

        if (!$arrayRespuestaWs['status'])
        {
            return array('status' => 'ERROR','mensaje' => $arrayRespuestaWs['message'],'arrayServiciosEliminados' => array());
        }

        //Si existen cores ligados se procede a realizar la eliminacion de cada uno de ellos
        if ($arrayRespuestaWs['status'] && !empty($arrayRespuestaWs['data']))
        {
            //Obtengo lo subtipos de Soluciones atachados al servicio preferencial
            $arrayServicioWs = $arrayRespuestaWs['data'][0];
            $strSubTipos     = $arrayServicioWs['coresReferentes'];
            $arraySubtipos   = explode("|",$strSubTipos);
            
            foreach($arraySubtipos as $strSubTipo)
            {
                if(!empty($strSubTipo))
                {
                    $arrayServicios = $this->emcom->getRepository("schemaBundle:InfoServicio")
                            ->getArrayServiciosPorSolucionYTipoSolucion($arrayParametros['intNumeroSolucion'],$strSubTipo);

                    $arrayParametros['strSubTipo']     = $strSubTipo;
                    $arrayParametros['arrayServicios'] = $arrayServicios;
                    $intCont  = 0;
                    foreach($arrayServicios as $obj)
                    {
                     $arrayServiciosLigados[$intCont]     = $obj->getDescripcionPresentaFactura(); 
                     $intCont = $intCont + 1;
                    }
                }
            }//foreach de subtipos de soluciones configurados en el preferencial
        }

        $arrayIdServiciosEliminados[] = $objServicio->getId();

        //Llamada al web-service encargado de eliminar los servicios de la solución.
        $arrayRequestEliminarServicios = array();
        $arrayRequestEliminarServicios['habilitaCommit'] = true;
        $arrayRequestEliminarServicios['numeroSolucion'] = $arrayParametros['intNumeroSolucion'];
        $arrayRequestEliminarServicios['usrCreacion']    = $arrayParametros['strUsrCreacion'];
        $arrayRequestEliminarServicios['ipCreacion']     = $arrayParametros['strIpCreacion'];
        $arrayRequestEliminarServicios['servicios']      = $arrayIdServiciosEliminados;

        $arrayRespuestaWs = $serviceInfoSolucion->WsPostDc(array('strUser'      =>  $arrayParametros['intNumeroSolucion'],
                                                                 'strIp'        =>  $arrayParametros['strUsrCreacion'],
                                                                 'strOpcion'    => 'soluciondc',
                                                                 'strEndPoint'  => 'eliminarServiciosSolucion',
                                                                 'arrayRequest' =>  $arrayRequestEliminarServicios));
        if (!$arrayRespuestaWs['status'])
        {
            return array('status' => 'ERROR','mensaje' => $arrayRespuestaWs['message'],'arrayServiciosEliminados' => array(),
                         'arrayServiciosLigados' => array());
        }

        return array('status' => 'OK', 'mensaje' => 'OK', 'arrayServiciosEliminados' => $arrayServiciosEliminados,
                     'arrayServiciosLigados'     => $arrayServiciosLigados);
    }
    
    /**
     * 
     * Metodo encargado de realizar la eliminacion de todos los servicios ligados a un Servicio CORE
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 16-03-2018
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.1 - 07-07-2020 - 1 - Se modifica el método para obtener el tipo de solución en base a las nuevas estructuras.
     *                             2 - Se procede a la llamada del Ws-Encargado de eliminar los servicios de la solución.
     *
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.2 - 10-11-2020 - Se elimina la consulta de productos preferenciales para que no elimine en cascada.
     * 
     * @param   Array $arrayParametros
     * @return Array  [ status , mensaje, arrayServiciosEliminados, $arrayServiciosLigados ]
     */
    private function eliminacionServiciosPorCore($arrayParametros)
    {
        $arrayServiciosEliminados   = array();
        $arrayIdServiciosEliminados = array();
        $serviceInfoSolucion        = $this->container->get('comercial.InfoSolucion');
        $objServicio                = $arrayParametros['objServicio'];
        $objProducto                = $objServicio->getProductoId();

        //Obtemos el tipo de solución del servicio de acuerdo a las nuevas estructuras.
        $objInfoSolucionDet = $this->emcom->getRepository("schemaBundle:InfoSolucionDet")
                ->findOneBy(array('servicioId' => $objServicio->getId(),'estado' => 'Activo'));

        if (is_object($objInfoSolucionDet))
        {
            $arrayParametros['objProducto'] = $objProducto;
            $strSubTipoSolucionProducto     = $objInfoSolucionDet->getTipoSolucion();

            //Obtener los servicios ligados al CORE a ser Eliminado
            $arrayServiciosCoreSubTipo    = $this->emcom->getRepository("schemaBundle:InfoServicio")
                    ->getArrayServiciosPorSolucionYTipoSolucion($arrayParametros['intNumeroSolucion'],
                                                                $strSubTipoSolucionProducto,
                                                                'CORE');
            
             $intCont  = 0;
            foreach($arrayServiciosCoreSubTipo as $obj)
            {
                if($obj->getEstado() != 'Eliminado')
                {
                   $arrayServiciosLigados[$intCont]     = $obj->getDescripcionPresentaFactura(); 
                   $intCont = $intCont + 1;
                }
            }
                    
            $arrayParametros['strSubTipo']     = $strSubTipoSolucionProducto;
            $arrayParametros['arrayServicios'][0] = $objServicio;

            //Se procede a eliminar rechazar todo los servicios de la solución.
            $arrayRespuesta = $this->getArrayEliminarServicios($arrayParametros);

            if($arrayRespuesta['status'] == 'OK')
            {
                $arrayServiciosEliminados     = $arrayRespuesta['arrayServiciosEliminados'];
                $arrayIdServiciosEliminados   = $arrayRespuesta['arrayIdServiciosEliminados'];
                $arrayIdServiciosEliminados[] = $objServicio->getId();
            }
            else
            {
                return array('status' => 'ERROR', 'mensaje' => $arrayRespuesta['mensaje'], 'arrayServiciosEliminados' => array());
            }
        }

        //Llamada al web-service encargado de eliminar los servicios de la solución.
        $arrayRequestEliminarServicios = array();
        $arrayRequestEliminarServicios['habilitaCommit'] = true;
        $arrayRequestEliminarServicios['numeroSolucion'] = $arrayParametros['intNumeroSolucion'];
        $arrayRequestEliminarServicios['usrCreacion']    = $arrayParametros['strUsrCreacion'];
        $arrayRequestEliminarServicios['ipCreacion']     = $arrayParametros['strIpCreacion'];
        $arrayRequestEliminarServicios['servicios']      = $arrayIdServiciosEliminados;

        $arrayRespuestaWs = $serviceInfoSolucion->WsPostDc(array('strUser'      =>  $arrayParametros['intNumeroSolucion'],
                                                                 'strIp'        =>  $arrayParametros['strUsrCreacion'],
                                                                 'strOpcion'    => 'soluciondc',
                                                                 'strEndPoint'  => 'eliminarServiciosSolucion',
                                                                 'arrayRequest' =>  $arrayRequestEliminarServicios));
        if (!$arrayRespuestaWs['status'])
        {
            return array('status' => 'ERROR','mensaje' => $arrayRespuestaWs['message'],'arrayServiciosEliminados' => array());
        }

        return array('status' => 'OK', 'mensaje' => 'OK', 'arrayServiciosEliminados' => $arrayServiciosEliminados,
                     'arrayServiciosLigados'     => $arrayServiciosLigados);
    }
    
    /**
     * 
     * Metodo encargado de listar los servicios ligados a un Tipo de solución
     * 
     * @author Karen Rodríguez <kyrodriguez@telconet.ec>
     * @version 1.0 - 05-11-2020
     *
     * @param   Array $arrayParametros
     * @return Array  [ status , mensaje, arrayServiciosLigados ]
     */
    private function servLigadosPorTipoSolucion($arrayParametros)
    {
        $objServicio                = $arrayParametros['objServicio'];
        $objProducto                = $objServicio->getProductoId();

        //Obtemos el tipo de solución del servicio de acuerdo a las nuevas estructuras.
        $objInfoSolucionDet = $this->emcom->getRepository("schemaBundle:InfoSolucionDet")
                ->findOneBy(array('servicioId' => $objServicio->getId(),'estado' => 'Activo'));

        if (is_object($objInfoSolucionDet))
        {
            $arrayParametros['objProducto'] = $objProducto;
            $strSubTipoSolucionProducto     = $objInfoSolucionDet->getTipoSolucion();

            //Obtener los servicios ligados al subtipo solucion a ser Eliminado
            $arrayServiciosSubTipo    = $this->emcom->getRepository("schemaBundle:InfoServicio")
                    ->getArrayServiciosPorSolucionYTipoSolucion($arrayParametros['intNumeroSolucion'],
                                                                $strSubTipoSolucionProducto,
                                                                'CORE');
                    $intCont  = 0;
                    foreach($arrayServiciosSubTipo as $obj)
                    {
                     if($obj->getEstado() != 'Eliminado')
                     {
                        $arrayServiciosLigados[$intCont]     = $obj->getDescripcionPresentaFactura(); 
                        $intCont = $intCont + 1;
                     }
                    }
        }

        return array('status' => 'OK', 'mensaje' => 'OK', 'arrayServiciosLigados'     => $arrayServiciosLigados);
    }
    /**
     *
     * Metodo encargado de cancelar las tareas relacionadas a los servicios de una solucion a ser dados de baja por (anulacion o rechazo)
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version  1.0 19-03-2018 
     * 
     * @param Array $arrayParametros
     * @return string
     */
    private function cancelarTareasGeneradasPorServicio($arrayParametros)
    {
        $parametrosCancelacion = array();
        $parametrosCancelacion['observacion']  = "Anulacion de Orden de Trabajo";
        $parametrosCancelacion['cargarTiempo'] = "cliente";
                    
        $arrayDetalleSolicitud =  $this->emcom->getRepository("schemaBundle:InfoDetalleSolicitud")
                                              ->findBy(array(
                                                           'servicioId' => $arrayParametros['intIdServicio']
                                                           ));

        foreach($arrayDetalleSolicitud as $objDetalleSolicitud)
        {
            $arrayDetalle = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")
                                            ->findByDetalleSolicitudId($objDetalleSolicitud->getId());
            
            //Se buscan todas las tareas ligadas adicionales a esta solicitud de servicio
            foreach($arrayDetalle as $objDetalle)
            {
                /* @var $soporteService \telconet\soporteBundle\Service\SoporteService */
                $strRespuestaCancelacionTarea = $this->serviceSoporte->cancelarTarea($objDetalle, 
                                                                                    null, 
                                                                                    "N", 
                                                                                    $arrayParametros['objRequest'], 
                                                                                    $parametrosCancelacion);
                if($strRespuestaCancelacionTarea != "OK")
                {
                    return "Ciertas tareas no pudieron ser canceladas. Favor notificar a Sistemas.";
                }
            }
        }
    }    
    /**
     * 
     * Metodo encargado de crear las caracteristicas y sus referenciados para flujos de Servicios multicaracteristicas ( Soluciones )
     * 
     * @author Allan Suarez <arsuarez@telconet.ec>
     * @version 1.0 - 22-03-2018
     * 
     * @param Array $arrayParametros     
     */
    public function crearRelacionMultiCaracteristicasSolucion($arrayParametros)
    {
        $objServicio            = $arrayParametros['objServicio'];
        $strCaract              = $arrayParametros['strCaracteristica'];
        $strValorCaract         = $arrayParametros['strValorCaracteristica'];
        $strCantidadCaract      = $arrayParametros['strCantidadCaracteristica'];
        $strDescuento           = $arrayParametros['strDescuento'];
        $boolEsPrincipal        = $arrayParametros['boolEsCaractPrincipal'];
        $arrayIdMaquinaVirtual  = $arrayParametros['idMaquinaVirtual']; 
        $objAdmiProdCarac       = $arrayParametros['objAdmiProdCarac'];
        
        $objServicioProdCaract  =  null;
        $boolSeAgregoNuevoPrin  =  false;
        
        //Si es servicio principal nuevo se crea la referencia principal caso contrario se usa la ya existente enviada como parametro
        if($boolEsPrincipal)
        {
            //Crea un nuevo registro de caracteristica
            $objCaracteristica = $this->emcom->getRepository("schemaBundle:AdmiCaracteristica")
                                             ->findOneByDescripcionCaracteristica($strCaract);

            if(is_object($objCaracteristica))
            {
                $objProdCaract = $this->emcom->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                             ->findOneBy(array('productoId'       => $objServicio->getProductoId()->getId(),
                                                               'caracteristicaId' => $objCaracteristica->getId()));
                if(is_object($objProdCaract))
                {
                    if($arrayParametros['boolEsLicenciamiento'])
                    {
                        $strValorCaract = $arrayParametros['licenciamientoCaract'].'@'.$strValorCaract;
                        $objProdCaract  = $objAdmiProdCarac;
                    }

                    
                    $objServicioProdCaract  = new InfoServicioProdCaract();
                    $objServicioProdCaract->setServicioId($objServicio->getId());
                    $objServicioProdCaract->setProductoCaracterisiticaId($objProdCaract->getId());
                    $objServicioProdCaract->setValor($strValorCaract);
                    $objServicioProdCaract->setEstado('Activo');
                    $objServicioProdCaract->setUsrCreacion($objServicio->getUsrCreacion());
                    $objServicioProdCaract->setFeCreacion(new \DateTime('now'));
                    $this->emcom->persist($objServicioProdCaract);
                    $this->emcom->flush();
                    
                    $boolSeAgregoNuevoPrin = true;
                    if($arrayParametros['boolEsLicenciamiento'])
                    {
                        //Se atacha el licenciamiento a la máquina

                        foreach($arrayIdMaquinaVirtual as $idMaquina)
                        {
                            $objInfoDetalleElemento = new InfoDetalleElemento();
                            $objInfoDetalleElemento->setElementoId($idMaquina);
                            $objInfoDetalleElemento->setDetalleNombre('SISTEMA_OPERATIVO');
                            $objInfoDetalleElemento->setDetalleDescripcion('SISTEMA_OPERATIVO');
                            $objInfoDetalleElemento->setDetalleValor($objServicioProdCaract->getId());
                            $objInfoDetalleElemento->setEstado("Activo");
                            $objInfoDetalleElemento->setUsrCreacion($objServicio->getUsrCreacion());
                            $objInfoDetalleElemento->setFeCreacion(new \DateTime('now'));
                            $objInfoDetalleElemento->setIpCreacion('127.0.0.0');
                            $this->emInfraestructura->persist($objInfoDetalleElemento);
                            $this->emInfraestructura->flush();

                            $objInfoDetalleElementoRef = new InfoDetalleElemento();
                            $objInfoDetalleElementoRef->setElementoId($idMaquina);
                            $objInfoDetalleElementoRef->setDetalleNombre('SISTEMA_OPERATIVO'.'_VALUE');
                            $objInfoDetalleElementoRef->setDetalleDescripcion('SISTEMA_OPERATIVO'.'_VALUE');
                            $objInfoDetalleElementoRef->setDetalleValor(1);
                            $objInfoDetalleElementoRef->setEstado("Activo");
                            $objInfoDetalleElementoRef->setUsrCreacion($objServicio->getUsrCreacion());
                            $objInfoDetalleElementoRef->setFeCreacion(new \DateTime('now'));
                            $objInfoDetalleElementoRef->setIpCreacion('127.0.0.0');

                            $objInfoDetalleElementoRef->setParent($objInfoDetalleElemento);
                            $this->emInfraestructura->persist($objInfoDetalleElementoRef);
                            $this->emInfraestructura->flush();

                        }
                        
                    }
                }
            }
        }
        else
        {
            $objServicioProdCaract = $arrayParametros['objServicioProdCaract'];
        }
        
        
        $boolEsPoolRecursos = $this->servicioTecnico->isContieneCaracteristica($objServicio->getProductoId(),'ES_POOL_RECURSOS');
        
        if($boolEsPoolRecursos && $boolSeAgregoNuevoPrin)
        {
            $objCaracteristicaValue = $this->emcom->getRepository("schemaBundle:AdmiCaracteristica")
                                                  ->findOneByDescripcionCaracteristica($strCaract.'_VALUE');

            if(is_object($objCaracteristicaValue))
            {
                $objProdCaract = $this->emcom->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                             ->findOneBy(array('productoId'       =>   $objServicio->getProductoId()->getId(),
                                                               'caracteristicaId' =>   $objCaracteristicaValue->getId()));
                if(is_object($objProdCaract))
                {
                    $objServicioProdCaractVal  = new InfoServicioProdCaract();
                    $objServicioProdCaractVal->setServicioId($objServicio->getId());
                    $objServicioProdCaractVal->setProductoCaracterisiticaId($objProdCaract->getId());
                    $objServicioProdCaractVal->setValor($strCantidadCaract);
                    $objServicioProdCaractVal->setEstado('Activo');
                    $objServicioProdCaractVal->setRefServicioProdCaractId($objServicioProdCaract->getId());
                    $objServicioProdCaractVal->setUsrCreacion($objServicio->getUsrCreacion());
                    $objServicioProdCaractVal->setFeCreacion(new \DateTime('now'));
                    $this->emcom->persist($objServicioProdCaractVal);
                    $this->emcom->flush();
                }
            }
        }
        //Agregar referencia de los descuentos en caso de existir
        if($strDescuento!=0 || !empty($strDescuento))
        {
            $objCaracteristica = $this->emcom->getRepository("schemaBundle:AdmiCaracteristica")
                                             ->findOneByDescripcionCaracteristica('DESCUENTO_POR_CARACTERISTICA');

            if(is_object($objCaracteristica))
            {
                $objProdCaract = $this->emcom->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                             ->findOneBy(array('productoId'       => $objServicio->getProductoId()->getId(),
                                                               'caracteristicaId' => $objCaracteristica->getId()));

                $objServicioProdCaractDescto  = new InfoServicioProdCaract();
                $objServicioProdCaractDescto->setServicioId($objServicio->getId());
                $objServicioProdCaractDescto->setProductoCaracterisiticaId($objProdCaract->getId());
                $objServicioProdCaractDescto->setValor($strDescuento);
                $objServicioProdCaractDescto->setEstado('Activo');
                $objServicioProdCaractDescto->setRefServicioProdCaractId($objServicioProdCaract->getId());
                $objServicioProdCaractDescto->setUsrCreacion($objServicio->getUsrCreacion());
                $objServicioProdCaractDescto->setFeCreacion(new \DateTime('now'));
                $this->emcom->persist($objServicioProdCaractDescto);
                $this->emcom->flush();
            }
        }
    }
    
    /**
     * validaAutorizacionServicio
     * 
     * Función que valida si es necesario crear una solicitud de servicio que necesite aprobación del subgerente o gerente comercial 
     * de productos Small Business y se enviará una notificación solicitando aprobación o rechazo
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 29-10-2018
     * 
     * @param array $arrayParametros [
     *                                  "objServicio"           => objeto del servicio,
     *                                  "objPunto"              => objeto del punto,
     *                                  "objProducto"           => objeto del producto,
     *                                  "strPrefijoEmpresa"     => prefijo de la empresa,
     *                                  "strCodEmpresa"         => código de la empresa,
     *                                  "strIpClient"           => ip del cliente,
     *                                  "strUsrCreacion"        => usuario en sesión,
     *                                  "strVelocidadTelcoHome" => velocidad del servicio,
     *                                  "strNombreProducto"     => nombre del producto,
     *                                  "strUrlSolicitudes"     => url de consulta de solicitudes
     *                               ]
     * 
     * @return return $arrayRespuesta [ "strStatus"     => OK o ERROR, 
     *                                  "strMensaje"    => mensaje de error
     */
    public function validaAutorizacionServicio($arrayParametros)
    {
        $objServicio                = $arrayParametros["objServicio"];
        $objPunto                   = $arrayParametros["objPunto"];
        $objProducto                = $arrayParametros["objProducto"];
        $strPrefijoEmpresa          = $arrayParametros["strPrefijoEmpresa"];
        $strNombreProducto          = $arrayParametros["strNombreProducto"];
        $strCodEmpresa              = $arrayParametros["strCodEmpresa"];
        $strIpClient                = $arrayParametros["strIpClient"];
        $strUsrCreacion             = $arrayParametros["strUsrCreacion"];
        $strVelocidadTelcoHome      = $arrayParametros["strVelocidadTelcoHome"];
        $strUrlSolicitudes          = $arrayParametros["strUrlSolicitudes"];
        $strEstadoPendiente         = "Pendiente";
        $strTipoSolicitud           = "SOLICITUD APROBACION SERVICIO";
        $strCaracteristicaIdPer     = "ID_PERSONA_ROL";
        $strMensaje                 = "";
        $strLoginPuntoSolicitud     = "";
        $strMuestraInfoSolicitud    = "";
        $strFechaCreacionSolicitud  = "";
        $strAsuntoCorreo            = "";
        $strObservacionMail         = "";
        $intNumTotalCuentas         = 0;
        $intNumMinCuentas           = 0;
        
        try
        {
            if(!is_object($objServicio) || !is_object($objPunto) || !is_object($objProducto) || empty($strIpClient) || empty($strUsrCreacion))
            {
                throw new \Exception("No se han enviado todos los parámetros necesarios para crear la solicitud");
            }
            
            $strLoginPunto              = $objPunto->getLogin();
            $strDireccionPunto          = $objPunto->getDireccion();
            $objJurisdiccionPunto       = $objPunto->getPuntoCoberturaId();
            $strNombreJurisdiccionPunto = $objJurisdiccionPunto->getNombreJurisdiccion();
            $objPerCliente              = $objPunto->getPersonaEmpresaRolId();
            $objPersonaCliente          = $objPerCliente->getPersonaId();
            $strCliente                 = sprintf("%s",$objPersonaCliente);
            $strNombreTipoOrdenServicio = "";
            $strTipoOrdenServicio       = $objServicio->getTipoOrden();
            $strDescripcionProducto     = $objProducto->getDescripcionProducto();
            if($strTipoOrdenServicio === 'T')
            {
                $strNombreTipoOrdenServicio = "Traslado";
            }
            else if($strTipoOrdenServicio=='N')
            {
                $strNombreTipoOrdenServicio = "Nueva";
            }
            $boolActualizaDataServicio  = false;
            $boolCreaSolicitud          = false;
            $arrayParamsSolicitud       = array("arrayEstadosSolicitudes"       => array("Pendiente", "Aprobada"),
                                                "intValorDetSolCaract"          => $objPerCliente->getId(),
                                                "strDescripcionSolicitud"       => $strTipoSolicitud,
                                                "strDescripcionCaracteristica"  => $strCaracteristicaIdPer,
                                                "strConServicio"                => "SI");
            
            $arrayRespuestaSolicitud    = $this->emcom->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                      ->getSolicitudesPorDetSolCaracts($arrayParamsSolicitud);
            $intTotalSolicitud          = $arrayRespuestaSolicitud["intTotal"];
            $arrayResultadoSolicitud    = $arrayRespuestaSolicitud["arrayResultado"];
            if($arrayRespuestaSolicitud["strStatus"] !== "OK")
            {
                throw new \Exception($arrayRespuestaSolicitud["strMensaje"]);
            }
            if($intTotalSolicitud > 0 && !empty($arrayResultadoSolicitud))
            {
                $strAsuntoCorreo            = "CREACION DE PRODUCTO ".$strNombreProducto;
                $arrayDetalleSolicitud      = $arrayResultadoSolicitud[0];
                $strEstadoDetalleSolicitud  = $arrayDetalleSolicitud["estadoSolicitud"];
                $strLoginPuntoSolicitud     = $arrayDetalleSolicitud["loginPuntoSolicitud"];
                $strFechaCreacionSolicitud  = $arrayDetalleSolicitud["fechaCreacionSolicitud"];
                $intIdSolicitud             = $arrayDetalleSolicitud["idSolicitud"];
                if($strEstadoDetalleSolicitud === $strEstadoPendiente)
                {
                    $boolActualizaDataServicio  = true;
                    $strMuestraInfoSolicitud    = "SI";
                }
                else
                {
                    $strMuestraInfoSolicitud    = "NO";
                    
                    $objNumTotalServiciosTelcoHome = $this->emcom->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                                 ->getOneByCaracteristica($objPerCliente->getId(),'NUM_TOTAL_SERVICIOS_TELCOHOME');
                   
                    if(is_object($objNumTotalServiciosTelcoHome))
                    {
                        $intNumTotalCuentas = intval($objNumTotalServiciosTelcoHome->getValor());
                    }
                }
            }
            else
            {
                $boolActualizaDataServicio  = true;
                $boolCreaSolicitud          = true;
                $strEstadoDetalleSolicitud  = $strEstadoPendiente;
                $strMuestraInfoSolicitud    = "SI";
                $strAsuntoCorreo            = "CREACION DE PRODUCTO Y SOLICITUD DE AUTORIZACION ".$strNombreProducto;
            }
            
            if($boolActualizaDataServicio)
            {
                $arrayServicioHistoriales   = $this->emcom->getRepository('schemaBundle:InfoServicioHistorial')
                                                            ->findBy(array( "servicioId"    => $objServicio,
                                                                            "estado"        => $objServicio->getEstado()));
                foreach($arrayServicioHistoriales as $objServicioHistorial)
                {
                    $objServicioHistorial->setEstado($strEstadoPendiente);
                    $this->emcom->persist($objServicioHistorial);
                }    
                $objServicio->setEstado($strEstadoPendiente);
                $this->emcom->persist($objServicio);
                $this->emcom->flush();
                
                if($boolCreaSolicitud)
                {
                    $strLoginPuntoSolicitud = $strLoginPunto;
                    $objTipoSolicitud       = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                          ->findOneByDescripcionSolicitud($strTipoSolicitud);
                    if(!is_object($objTipoSolicitud))
                    {
                        throw new \Exception("No existe el tipo de solicitud ".$strTipoSolicitud);
                    }

                    $objCaractIdPersonaRol  = $this->emcom->getRepository("schemaBundle:AdmiCaracteristica")
                                                          ->findOneBy(array('descripcionCaracteristica' => $strCaracteristicaIdPer,
                                                                            'estado'                    => "Activo"));
                    if(!is_object($objCaractIdPersonaRol))
                    {
                        throw new \Exception("No existe la característica ".$strCaracteristicaIdPer);
                    }

                    $strCaracteristicaVelocidad = "VELOCIDAD_TELCOHOME";
                    $objCaractVelocidad         = $this->emcom->getRepository("schemaBundle:AdmiCaracteristica")
                                                              ->findOneBy(array('descripcionCaracteristica' => $strCaracteristicaVelocidad,
                                                                                'estado'                    => "Activo"));
                    if(!is_object($objCaractVelocidad))
                    {
                        throw new \Exception("No existe la característica ".$strCaracteristicaVelocidad);
                    }

                    $strUsrVendedor = $objServicio->getUsrVendedor();
                    if(empty($strUsrVendedor))
                    {
                        throw new \Exception("No se ha podido obtener el vendedor del servicio");
                    }
                    $objDateTimeNow             = new \DateTime('now');
                    $strFechaCreacionSolicitud  = strval(date_format($objDateTimeNow, "d-m-Y"));

                    $strObservacionSolicitud    = "Para continuar con el proceso de instalación se solicita la aprobación del servicio "
                                                  .$strDescripcionProducto." de ".$strVelocidadTelcoHome."MB";
                    $objDetalleSolicitud        = new InfoDetalleSolicitud();
                    $objDetalleSolicitud->setServicioId($objServicio);
                    $objDetalleSolicitud->setTipoSolicitudId($objTipoSolicitud);
                    $objDetalleSolicitud->setEstado($strEstadoPendiente);
                    $objDetalleSolicitud->setUsrCreacion($strUsrCreacion);
                    $objDetalleSolicitud->setFeCreacion($objDateTimeNow);
                    $objDetalleSolicitud->setPrecioDescuento(0);
                    $objDetalleSolicitud->setObservacion($strObservacionSolicitud);
                    $this->emcom->persist($objDetalleSolicitud);
                    $this->emcom->flush();
                    $intIdSolicitud = $objDetalleSolicitud->getId();
                    $objDetalleSolHist = new InfoDetalleSolHist();
                    $objDetalleSolHist->setDetalleSolicitudId($objDetalleSolicitud);
                    $objDetalleSolHist->setObservacion($strObservacionSolicitud);
                    $objDetalleSolHist->setIpCreacion($strIpClient);
                    $objDetalleSolHist->setFeCreacion($objDateTimeNow);
                    $objDetalleSolHist->setUsrCreacion($strUsrCreacion);
                    $objDetalleSolHist->setEstado($strEstadoPendiente);
                    $this->emcom->persist($objDetalleSolHist);
                    $this->emcom->flush();

                    $objDetalleSolCaractPer = new InfoDetalleSolCaract();
                    $objDetalleSolCaractPer->setCaracteristicaId($objCaractIdPersonaRol);
                    $objDetalleSolCaractPer->setDetalleSolicitudId($objDetalleSolicitud);
                    $objDetalleSolCaractPer->setEstado($strEstadoPendiente);
                    $objDetalleSolCaractPer->setFeCreacion($objDateTimeNow);
                    $objDetalleSolCaractPer->setUsrCreacion($strUsrCreacion);
                    $objDetalleSolCaractPer->setValor($objPerCliente->getId());
                    $this->emcom->persist($objDetalleSolCaractPer);
                    $this->emcom->flush();

                    $objDetalleSolCaractVelocidad = new InfoDetalleSolCaract();
                    $objDetalleSolCaractVelocidad->setCaracteristicaId($objCaractVelocidad);
                    $objDetalleSolCaractVelocidad->setDetalleSolicitudId($objDetalleSolicitud);
                    $objDetalleSolCaractVelocidad->setEstado($strEstadoPendiente);
                    $objDetalleSolCaractVelocidad->setFeCreacion($objDateTimeNow);
                    $objDetalleSolCaractVelocidad->setUsrCreacion($strUsrCreacion);
                    $objDetalleSolCaractVelocidad->setValor($strVelocidadTelcoHome);
                    $this->emcom->persist($objDetalleSolCaractVelocidad);
                    $this->emcom->flush();
                }
                $strObservacionHistServicio = "El servicio requiere la aprobación de la <b>".$strTipoSolicitud
                                              ."</b> asociada al login <b>".$strLoginPuntoSolicitud
                                              ."</b> para continuar con el proceso de activación.";
                $objServicioHistorialAutoriza = new InfoServicioHistorial();
                $objServicioHistorialAutoriza->setServicioId($objServicio);
                $objServicioHistorialAutoriza->setObservacion($strObservacionHistServicio);
                $objServicioHistorialAutoriza->setIpCreacion($strIpClient);
                $objServicioHistorialAutoriza->setFeCreacion(new \DateTime('now'));
                $objServicioHistorialAutoriza->setUsrCreacion($strUsrCreacion);
                $objServicioHistorialAutoriza->setEstado($objServicio->getEstado());
                $this->emcom->persist($objServicioHistorialAutoriza);
                $this->emcom->flush();
                
                $strObservacionMail = "El servicio requiere la aprobación de la <b>".$strTipoSolicitud
                                      ."</b> asociada al login <b>".$strLoginPuntoSolicitud
                                      ."</b> para continuar con el proceso de activación."
                                      ."<br>Consulte y apruebe la solicitud en la siguiente url "
                                      ."<a href='".$strUrlSolicitudes."' target='_blank'>Solicitudes</a>";
                
                $arrayNumMinServiciosTelcohome  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                              ->getOne( 'NUM_MIN_SERVICIOS_TELCOHOME', 
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        '',
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        '', 
                                                                        $strCodEmpresa);
                if(!empty($arrayNumMinServiciosTelcohome) && intval($arrayNumMinServiciosTelcohome['valor1']) > 0)
                {
                    $intNumMinCuentas   = intval($arrayNumMinServiciosTelcohome['valor1']);
                }
            }
            else
            {
                $strObservacionMail = "El cliente ya posee una <b>".$strTipoSolicitud
                                      ."</b> asociada al login <b>".$strLoginPuntoSolicitud
                                      ."</b> en estado <b>".$strEstadoDetalleSolicitud."</b>";
            }
            
            $arrayResultadoVendedorSubgerente   = $this->getInfoVendedorSubgerente(array(   "strIpClient"       => $strIpClient,
                                                                                            "strUsrCreacion"    => $strUsrCreacion,
                                                                                            "strCodEmpresa"     => $strCodEmpresa,
                                                                                            "strLimite"         => 1, 
                                                                                            "objServicio"       => $objServicio));
            if($arrayResultadoVendedorSubgerente["strStatus"] === "ERROR")
            {
                throw new \Exception($arrayResultadoVendedorSubgerente["strMensaje"]);
            }
            else if($arrayResultadoVendedorSubgerente["strStatus"] === "OK" 
                && !empty($arrayResultadoVendedorSubgerente["arrayInfoVendedorSubg"]["vendedor"])
                && !empty($arrayResultadoVendedorSubgerente["arrayInfoVendedorSubg"]["subgerente"]))
            {
                $arrayInfoVendedorSubg          = $arrayResultadoVendedorSubgerente["arrayInfoVendedorSubg"];
                $strNombreCompletoVendedor      = $arrayInfoVendedorSubg["vendedor"]["nombreCompleto"];
                $strNombreCompletoSubgerente    = $arrayInfoVendedorSubg["subgerente"]["nombreCompleto"];
                $strLoginPersonaSubgerente      = $arrayInfoVendedorSubg["subgerente"]["login"];
            }
            else
            {
                $strNombreCompletoVendedor      = "";
                $strNombreCompletoSubgerente    = "";
                $strLoginPersonaSubgerente      = "";
            }

            $arrayDestinatarios = array();
            if(!empty($strLoginPersonaSubgerente))
            {
                $arrayCorreosSubgerenteServicio =  $this->emcom->getRepository('schemaBundle:InfoPersona')
                                                               ->getContactosByLoginPersonaAndFormaContacto($strLoginPersonaSubgerente,
                                                                                                            'Correo Electronico');
                if(!empty($arrayCorreosSubgerenteServicio))
                {
                    foreach($arrayCorreosSubgerenteServicio as $arrayCorreoSubgerenteServicio)
                    {
                        if($arrayCorreoSubgerenteServicio && !empty($arrayCorreoSubgerenteServicio['valor']))
                        {
                            $arrayDestinatarios[] = $arrayCorreoSubgerenteServicio['valor'];
                        }
                    }
                }
            }
            $arrayParamsServiciosTelcoHome      = array(
                                                        "intIdDetalleSolicitud"         => $intIdSolicitud,
                                                        "arrayEstadosSolicitudes"       => array("Pendiente", "Aprobada"),
                                                        "strDescripcionCaracteristica"  => "VELOCIDAD_TELCOHOME",
                                                        "strConServicio"                => "SI",
                                                        "strBuscarServiciosAsociados"   => "SI",
                                                        "arrayEstadosServiciosNotIn"    => array(   'Rechazado', 'Rechazada', 'Cancelado', 
                                                                                                    'Anulado', 'Cancel', 'Eliminado', 
                                                                                                    'Reubicado', 'Trasladado')
        
                                                        );
            $arrayRespuestaServiciosTelcoHome   = $this->emcom->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                              ->getSolicitudesPorDetSolCaracts($arrayParamsServiciosTelcoHome);
            if($arrayRespuestaServiciosTelcoHome["strStatus"] !== "OK")
            {
                throw new \Exception($arrayRespuestaServiciosTelcoHome["strMensaje"]);
            }
            $intNumCuentasIngresadas            = $arrayRespuestaServiciosTelcoHome['intTotal'];
            $arrayParametrosMail    = array( 
                                            "cliente"                   => $strCliente,
                                            "loginPuntoCliente"         => $strLoginPunto,
                                            "nombreJurisdiccion"        => $strNombreJurisdiccionPunto,
                                            "direccionPuntoCliente"     => $strDireccionPunto,
                                            "nombreProducto"            => $strNombreProducto,
                                            "descripcionProducto"       => $strDescripcionProducto,
                                            "prefijoEmpresa"            => $strPrefijoEmpresa,
                                            "fechaCreacionServicio"     => 
                                            strval(date_format($objServicio->getFeCreacion(), "d-m-Y")),
                                            "estadoServicio"            => $objServicio->getEstado(),
                                            "tipoOrden"                 => $strNombreTipoOrdenServicio,
                                            "velocidadIsb"              => $strVelocidadTelcoHome,
                                            "vendedor"                  => $strNombreCompletoVendedor,
                                            "subgerente"                => $strNombreCompletoSubgerente,
                                            "muestraInfoSolicitud"      => $strMuestraInfoSolicitud,
                                            "tipoSolicitud"             => $strTipoSolicitud,
                                            "fechaCreacionSolicitud"    => $strFechaCreacionSolicitud,
                                            "estadoSolicitud"           => $strEstadoDetalleSolicitud,
                                            "observacion"               => $strObservacionMail,
                                            "numTotalCuentas"           => $intNumTotalCuentas,
                                            "numMinCuentas"             => $intNumMinCuentas,
                                            "numCuentasIngresadas"      => $intNumCuentasIngresadas
                                    );

            $this->serviceEnvioPlantilla->generarEnvioPlantilla($strAsuntoCorreo, 
                                                                array_unique($arrayDestinatarios), 
                                                                'CREA_TELCOHOME', 
                                                                $arrayParametrosMail,
                                                                $strCodEmpresa,
                                                                '',
                                                                '',
                                                                null, 
                                                                true,
                                                                'notificaciones_telcos@telconet.ec');
            $strStatus = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService->validaAutorizacionServicio', 
                                              $e->getMessage(), 
                                              $strUsrCreacion, 
                                              $strIpClient );
        }
        
        $arrayRespuesta = array("strStatus" => $strStatus, "strMensaje" => $strMensaje);
        return $arrayRespuesta;
    }
    /**
     * Documentación para el función 'validaAutorizacionServicioMPLS'.
     * 
     * Función que cambia el estado del servicio a Pendiente, crea una solicitud de servicio que necesite aprobación
     * del subgerente o gerente comercial y se enviará una notificación solicitando aprobación o rechazo.
     *
     * @param array $arrayParametros [
     *                                  "objServicio"           => objeto del servicio,
     *                                  "objPunto"              => objeto del punto,
     *                                  "objProducto"           => objeto del producto,
     *                                  "strPrefijoEmpresa"     => prefijo de la empresa,
     *                                  "strCodEmpresa"         => código de la empresa,
     *                                  "strIpClient"           => ip del cliente,
     *                                  "strUsrCreacion"        => usuario en sesión,
     *                                  "strNombreProducto"     => nombre del producto,
     *                                  "strTipoRed"            => tipo de red del servicio
     *                               ]
     *
     * @return return $arrayRespuesta [
     *                                  "strStatus"     => OK o ERROR, 
     *                                  "strMensaje"    => mensaje de error
     *                                ]
     *
     * @author Kevin Baque <kbaque@telconet.ec>
     * @version 1.0 18-10-2018
     */
    public function validaAutorizacionServicioMPLS($arrayParametros)
    {
        $objServicio                = $arrayParametros["objServicio"];
        $objPunto                   = $arrayParametros["objPunto"];
        $objProducto                = $arrayParametros["objProducto"];
        $strPrefijoEmpresa          = $arrayParametros["strPrefijoEmpresa"];
        $strNombreProducto          = $arrayParametros["strNombreProducto"];
        $strCodEmpresa              = $arrayParametros["strCodEmpresa"];
        $strIpClient                = $arrayParametros["strIpClient"];
        $strUsrCreacion             = $arrayParametros["strUsrCreacion"];
        $strTipoRed                 = $arrayParametros["strTipoRed"];
        $strAsuntoCorreo            = "CREACION DE SERVICIO MPLS Y SOLICITUD DE AUTORIZACION ".$strNombreProducto;
        $strEstadoPendiente         = "Pendiente";
        $strMensaje                 = "";
        $strObservacionMail         = "";
        $strAccionMail              = "la creación";
        $strAccionUsuario           = "Pendiente";
        $strTipoSolicitud           = 'SOLICITUD APROBACION SERVICIO TIPO RED MPLS';
        $strEstadoActivo            = 'Activo';
        $strMotivo                  = 'SOLICITUD AL CREAR SERVICIO CON TIPO DE RED MPLS';
        $strObservacionSolMpls      = "Solicitud de ingreso de servicio con tipo de red Mpls, creada por usr: ".$strUsrCreacion." TN";
        try
        {
            if(!is_object($objServicio) || !is_object($objPunto) || !is_object($objProducto) || empty($strIpClient) || empty($strUsrCreacion))
            {
                throw new \Exception("No se han enviado todos los parámetros necesarios para crear la solicitud y envío de notificación");
            }
            $strLoginPunto              = $objPunto->getLogin();
            $strDireccionPunto          = $objPunto->getDireccion();
            $objJurisdiccionPunto       = $objPunto->getPuntoCoberturaId();
            $strNombreJurisdiccionPunto = $objJurisdiccionPunto->getNombreJurisdiccion();
            $objPerCliente              = $objPunto->getPersonaEmpresaRolId();
            $objPersonaCliente          = $objPerCliente->getPersonaId();
            $strCliente                 = sprintf("%s",$objPersonaCliente);
            $strNombreTipoOrdenServicio = "";
            $strTipoOrdenServicio       = $objServicio->getTipoOrden();
            $strDescripcionProducto     = $objProducto->getDescripcionProducto();
            $objPersonaGestion          = $this->emcom->getRepository('schemaBundle:InfoPersona')->findOneByLogin($strUsrCreacion);
            if(!is_object($objPersonaGestion) && empty($objPersonaGestion))
            {
                throw new \Exception("No se ha podido obtener el objeto de la persona en sesión");
            }
            $strNombreUsuarioGestion = sprintf("%s", $objPersonaGestion);
            if($strTipoOrdenServicio === 'T')
            {
                $strNombreTipoOrdenServicio = "Traslado";
            }
            else if($strTipoOrdenServicio=='N')
            {
                $strNombreTipoOrdenServicio = "Nueva";
            }

            // Se crea solicitud de aprobación por ser un servicio de tipo de red MPLS
            $arrayParametrosSolMpls = array('descripcionSolicitud' => $strTipoSolicitud,
                                            'estado'               => $strEstadoActivo);
            $objSolicitud           = $this->emcom->getRepository('schemaBundle:AdmiTipoSolicitud')->findOneBy($arrayParametrosSolMpls);

            if(!is_object($objSolicitud) && empty($objSolicitud))
            {
                throw new \Exception("No existe el tipo de solicitud: ".$strTipoSolicitud);
            }
            $arrayParametrosMotMpls = array('nombreMotivo' => $strMotivo,
                                            'estado'       => $strEstadoActivo);
            $objAdmiMotivo          = $this->emcom->getRepository('schemaBundle:AdmiMotivo')->findOneBy($arrayParametrosMotMpls);
            if(!is_object($objAdmiMotivo) && empty($objAdmiMotivo))
            {
                throw new \Exception("No existe el tipo de motivo: ".$strMotivo);
            }

            $objDetalleSolicitud = new InfoDetalleSolicitud();
            $objDetalleSolicitud->setMotivoId($objAdmiMotivo->getId());
            $objDetalleSolicitud->setServicioId($objServicio);
            $objDetalleSolicitud->setTipoSolicitudId($objSolicitud);
            $objDetalleSolicitud->setEstado($strEstadoPendiente);
            $objDetalleSolicitud->setUsrCreacion($strUsrCreacion);
            $objDetalleSolicitud->setFeCreacion(new \DateTime('now'));
            $objDetalleSolicitud->setPrecioDescuento(0);
            $objDetalleSolicitud->setObservacion($strObservacionSolMpls);
            $this->emcom->persist($objDetalleSolicitud);
            $this->emcom->flush();
            //Grabamos en la tabla de historial de la solicitud
            $objDetalleSolHist = new InfoDetalleSolHist();
            $objDetalleSolHist->setDetalleSolicitudId($objDetalleSolicitud);
            $objDetalleSolHist->setObservacion($strObservacionSolMpls);
            $objDetalleSolHist->setIpCreacion($strIpClient);
            $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
            $objDetalleSolHist->setUsrCreacion($strUsrCreacion);
            $objDetalleSolHist->setEstado($strEstadoPendiente);
            $this->emcom->persist($objDetalleSolHist);
            $this->emcom->flush();

            $strUsrVendedor = $objServicio->getUsrVendedor();
            if(empty($strUsrVendedor))
            {
                throw new \Exception("No se ha podido obtener el vendedor del servicio");
            }
            $arrayUrlSolicitudes = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                               ->getOne('NUEVA_RED_GPON_TN',
                                                        'COMERCIAL',
                                                        '',
                                                        '',
                                                        'URL',
                                                        '',
                                                        '',
                                                        'S',
                                                        'URL_SOLICITUD',
                                                        $strCodEmpresa);
            $strUrlSolicitudes   = (!empty($arrayUrlSolicitudes) && is_array($arrayUrlSolicitudes)) && isset($arrayUrlSolicitudes['valor2'])
                                    ? $arrayUrlSolicitudes['valor2'] : '';
            $strObservacionMail  = "Para continuar con el proceso de activación."
                                    ."<br>Consulte y apruebe la solicitud en la siguiente url "
                                    ."<a href='".$strUrlSolicitudes."' target='_blank'>Solicitudes</a>";

            $arrayResultadoVendedorSubgerente   = $this->getInfoVendedorSubgerente(array("strIpClient"    => $strIpClient,
                                                                                         "strUsrCreacion" => $strUsrCreacion,
                                                                                         "strCodEmpresa"  => $strCodEmpresa,
                                                                                         "strLimite"      => 1, 
                                                                                         "objServicio"    => $objServicio));
            if($arrayResultadoVendedorSubgerente["strStatus"] === "ERROR")
            {
                throw new \Exception($arrayResultadoVendedorSubgerente["strMensaje"]);
            }
            else if($arrayResultadoVendedorSubgerente["strStatus"] === "OK" 
                && !empty($arrayResultadoVendedorSubgerente["arrayInfoVendedorSubg"]["vendedor"])
                && !empty($arrayResultadoVendedorSubgerente["arrayInfoVendedorSubg"]["subgerente"]))
            {
                $arrayInfoVendedorSubg       = $arrayResultadoVendedorSubgerente["arrayInfoVendedorSubg"];
                $strNombreCompletoVendedor   = $arrayInfoVendedorSubg["vendedor"]["nombreCompleto"];
                $strNombreCompletoSubgerente = $arrayInfoVendedorSubg["subgerente"]["nombreCompleto"];
                $strLoginPersonaSubgerente   = $arrayInfoVendedorSubg["subgerente"]["login"];
            }
            else
            {
                $strNombreCompletoVendedor   = "";
                $strNombreCompletoSubgerente = "";
                $strLoginPersonaSubgerente   = "";
            }

            $arrayDestinatarios = array();
            if(!empty($strLoginPersonaSubgerente))
            {
                $arrayCorreosSubgerenteServicio =  $this->emcom->getRepository('schemaBundle:InfoPersona')
                                                               ->getContactosByLoginPersonaAndFormaContacto($strLoginPersonaSubgerente,
                                                                                                            'Correo Electronico');
                if(!empty($arrayCorreosSubgerenteServicio))
                {
                    foreach($arrayCorreosSubgerenteServicio as $arrayCorreoSubgerenteServicio)
                    {
                        if($arrayCorreoSubgerenteServicio && !empty($arrayCorreoSubgerenteServicio['valor']))
                        {
                            $arrayDestinatarios[] = $arrayCorreoSubgerenteServicio['valor'];
                        }
                    }
                }
            }
            $objServicio->setEstado($strEstadoPendiente);
            $this->emcom->persist($objServicio);
            $this->emcom->flush();
            //Grabamos en la tabla de historial del servicio
            $objServicioHist = new InfoServicioHistorial();
            $objServicioHist->setServicioId($objServicio);
            $objServicioHist->setObservacion($strObservacionSolMpls);
            $objServicioHist->setIpCreacion($strIpClient);
            $objServicioHist->setFeCreacion(new \DateTime('now'));
            $objServicioHist->setUsrCreacion($strUsrCreacion);
            $objServicioHist->setEstado($strEstadoPendiente);
            $this->emcom->persist($objServicioHist);
            $this->emcom->flush();
            $arrayParametrosMail    = array("accionMail"            => $strAccionMail,
                                            "accionUsuario"         => $strAccionUsuario,
                                            "nombreUsuarioGestion"  => $strNombreUsuarioGestion,
                                            "cliente"               => $strCliente,
                                            "loginPuntoCliente"     => $strLoginPunto,
                                            "nombreJurisdiccion"    => $strNombreJurisdiccionPunto,
                                            "direccionPuntoCliente" => $strDireccionPunto,
                                            "nombreProducto"        => $strNombreProducto,
                                            "descripcionProducto"   => $strDescripcionProducto,
                                            "observacion"           => $strObservacionMail,
                                            "tipoSolicitud"         => $objDetalleSolicitud->getTipoSolicitudId()->getDescripcionSolicitud(),
                                            "estadoSolicitud"       => $objDetalleSolicitud->getEstado(),
                                            "estadoServicio"        => $objServicio->getEstado(),
                                            "prefijoEmpresa"        => $strPrefijoEmpresa,
                                            "fechaCreacionServicio" => strval(date_format($objServicio->getFeCreacion(), "d-m-Y")),
                                            "tipoOrden"             => $strNombreTipoOrdenServicio,
                                            "tipoRed"               => $strTipoRed,
                                            "vendedor"              => $strNombreCompletoVendedor,
                                            "subgerente"            => $strNombreCompletoSubgerente);

            $this->serviceEnvioPlantilla->generarEnvioPlantilla($strAsuntoCorreo, 
                                                                array_unique($arrayDestinatarios), 
                                                                'AprbRchzSolMpls', 
                                                                $arrayParametrosMail,
                                                                $strCodEmpresa,
                                                                '',
                                                                '',
                                                                null,
                                                                true,
                                                                'notificaciones_telcos@telconet.ec');
            $strStatus = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService->validaAutorizacionServicioMPLS', 
                                              $e->getMessage(), 
                                              $strUsrCreacion, 
                                              $strIpClient );
        }
        
        $arrayRespuesta = array("strStatus" => $strStatus, "strMensaje" => $strMensaje);
        return $arrayRespuesta;
    }
    
    /**
     * gestionarServiciosAdicionales
     * 
     * Función que actualiza la información de los servicios, caarcterísticas y solicitudes asociadas a los servicios adicionales de un
     * servicio preferencial
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 14-02-2019
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 08-03-2019 Se agrega validación de id del producto adicional para productos telcohome sin producto ip adicional
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 28-04-2020 Se obtiene el parámetro objProductoPref que será enviado como parámetro a la función obtenerParametrosProductosTnGpon
     *                          usada en lugar de la función obtenerInfoMapeoProdPrefYProdsAsociados por reestructuración de servicios Small Business
     * 
     * @author Felix Caicedo <facaicedo@telconet.ec>
     * @version 1.3 11-07-2022 Se agrega la validación de la caracteristica del servicio principal INTERNET VPNoGPON,
     *                         para obtener los servicios de las ip asociadas al servicio principal.
     * 
     * @param array $arrayParametros [
     *                                  "objServicioPref"           => objeto del servicio preferencial
     *                                  "objProductoPref"           => objeto del producto preferencial
     *                                  "strCodEmpresa"             => código de la empresa,
     *                                  "strIpClient"               => ip del cliente,
     *                                  "strUsrCreacion"            => usuario en sesión,
     *                                  "strObservacionServicio"    => objeto del producto,
     *                                  "strNuevoEstadoCaracts"     => nuevo estado de las características,
     *                                  "strNuevoEstadoSol"         => nuevo estado de la solicitud,
     *                                  "strObservacionSol"         => observacion de la solicitud,
     *                               ]
     * 
     * @return return $arrayRespuesta ["strStatus"     => OK o ERROR, 
     *                                  "strMensaje"    => mensaje de error
     */
    public function gestionarServiciosAdicionales($arrayParametros)
    {
        $objServicioPref            = $arrayParametros["objServicioPref"];
        $objProductoPref            = $arrayParametros["objProductoPref"];
        $strCodEmpresa              = $arrayParametros["strCodEmpresa"];
        $strIpClient                = $arrayParametros["strIpClient"];
        $strUsrCreacion             = $arrayParametros["strUsrCreacion"];
        $strObservacionServicio     = $arrayParametros["strObservacionServicio"];
        $strMensaje                 = "";
        try
        {
            if(!is_object($objServicioPref) || !is_object($objProductoPref) || empty($strCodEmpresa) 
                || empty($strIpClient) || empty($strUsrCreacion) || empty($strObservacionServicio))
            {
                throw new \Exception("No se han enviado todos los parámetros necesarios para gestionar los servicios adicionales");
            }
            $objPunto                       = $objServicioPref->getPuntoId();
            $arrayParamsProdsAdicionales    = array(
                                                    "strValor1ParamsProdsTnGpon"    => "PRODUCTOS_RELACIONADOS_INTERNET_IP",
                                                    "strCodEmpresa"                 => $strCodEmpresa,
                                                    "intIdProductoInternet"         => $objProductoPref->getId());
            $arrayProdsAdicionales          = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                          ->obtenerParametrosProductosTnGpon($arrayParamsProdsAdicionales);
            if(isset($arrayProdsAdicionales) && !empty($arrayProdsAdicionales))
            {
                foreach($arrayProdsAdicionales as $arrayProdAdicionales)
                {
                    $intIdProductoAsoc      = $arrayProdAdicionales["intIdProdIp"];
                    $strCaractRelProdIp     = $arrayProdAdicionales["strCaractRelProdIp"];
                    //OBTENER SERVICIOS DEL PUNTO
                    if(isset($strCaractRelProdIp) && !empty($strCaractRelProdIp))
                    {
                        $arrayServiciosPunto    = $this->emcom->getRepository('schemaBundle:InfoServicio')
                            ->createQueryBuilder('s')
                            ->innerJoin('schemaBundle:InfoServicioProdCaract', 'car', 'WITH', 'car.servicioId = s.id')
                            ->innerJoin('schemaBundle:AdmiProductoCaracteristica', 'pc', 'WITH',
                                    'pc.id = car.productoCaracterisiticaId')
                            ->innerJoin('schemaBundle:AdmiCaracteristica', 'c', 'WITH', 'c.id = pc.caracteristicaId')
                            ->where('s.puntoId = :puntoId')
                            ->andWhere("s.productoId = :productoId")
                            ->andWhere("car.valor = :idServioInt")
                            ->andWhere("c.descripcionCaracteristica = :desCaracteristica")
                            ->andWhere("car.estado = :estadoActivo")
                            ->setParameter('puntoId', $objPunto->getId())
                            ->setParameter('productoId', $intIdProductoAsoc)
                            ->setParameter('idServioInt', $objServicioPref->getId())
                            ->setParameter('desCaracteristica', $strCaractRelProdIp)
                            ->setParameter('estadoActivo', 'Activo')
                            ->getQuery()
                            ->getResult();
                    }
                    else
                    {
                        $arrayServiciosPunto    = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                          ->findBy(array( "puntoId"     => $objPunto->getId(),
                                                                          "productoId"  => $intIdProductoAsoc));
                    }
                    foreach($arrayServiciosPunto as $objServicioPunto)
                    {
                        $objServicioPunto->setEstado($objServicioPref->getEstado());
                        $this->emcom->persist($objServicioPunto);
                        $this->emcom->flush();

                        //historial del servicio
                        $objServicioPuntoHistorial = new InfoServicioHistorial();
                        $objServicioPuntoHistorial->setServicioId($objServicioPunto);
                        $objServicioPuntoHistorial->setObservacion($strObservacionServicio);
                        if(isset($arrayParametros["idMotivo"]) && !empty($arrayParametros["idMotivo"]) && $arrayParametros["idMotivo"] > 0)
                        {
                            $objServicioPuntoHistorial->setMotivoId($arrayParametros["idMotivo"]);
                        }

                        $objServicioPuntoHistorial->setEstado($objServicioPref->getEstado());
                        $objServicioPuntoHistorial->setUsrCreacion($strUsrCreacion);
                        $objServicioPuntoHistorial->setFeCreacion(new \DateTime('now'));
                        $objServicioPuntoHistorial->setIpCreacion($strIpClient);
                        $this->emcom->persist($objServicioPuntoHistorial);
                        $this->emcom->flush();

                        if(isset($arrayParametros["strNuevoEstadoCaracts"]) && !empty($arrayParametros["strNuevoEstadoCaracts"]))
                        {
                            $arraySpcServicioPunto  = $this->emcom->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                  ->findBy(array("servicioId" => $objServicioPunto->getId(), 
                                                                                 "estado"     => "Activo"));
                            foreach($arraySpcServicioPunto as $objServProdCaractPunto)
                            {
                                $objServProdCaractPunto->setEstado($arrayParametros["strNuevoEstadoCaracts"]);
                                $this->emcom->persist($objServProdCaractPunto);
                                $this->emcom->flush();
                            }
                        }
                        $arraySolsServicioAdicional = $this->emcom->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                  ->findByServicioId($objServicioPunto->getId());

                        if( count($arraySolsServicioAdicional) > 0)
                        {           
                            foreach($arraySolsServicioAdicional as $objSolServicioAdicional)
                            {
                                $objSolServicioAdicional->setEstado($arrayParametros["strNuevoEstadoSol"]);
                                $objSolServicioAdicional->setObservacion($arrayParametros["strObservacionSol"]." Usr: ".$strUsrCreacion);                
                                $this->emcom->persist($objSolServicioAdicional);
                                $this->emcom->flush();

                                 //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                                $entityInfoDetalleSolHist = new InfoDetalleSolHist();
                                $entityInfoDetalleSolHist->setDetalleSolicitudId($objSolServicioAdicional);
                                $entityInfoDetalleSolHist->setObservacion($arrayParametros["strObservacionSol"]);
                                $entityInfoDetalleSolHist->setIpCreacion($strIpClient);
                                $entityInfoDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                $entityInfoDetalleSolHist->setUsrCreacion($strUsrCreacion);
                                $entityInfoDetalleSolHist->setEstado($arrayParametros["strNuevoEstadoSol"]);
                                $this->emcom->persist($entityInfoDetalleSolHist);
                                $this->emcom->flush();               
                            }
                        }
                    }
                }
            }
            $strStatus = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService->gestionarServiciosAdicionales', 
                                              $e->getMessage(), 
                                              $strUsrCreacion, 
                                              $strIpClient );
        }
        
        $arrayRespuesta = array("strStatus" => $strStatus, "strMensaje" => $strMensaje);
        return $arrayRespuesta;
    }

    
    /**
     * gestionarServiciosAdicionales
     * 
     * Función que actualiza la información de los servicios, caarcterísticas y solicitudes asociadas a los servicios adicionales de un
     * servicio preferencial
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 14-02-2019
     * 
     * @param array $arrayParametros [
     *                                  "objServicio"               => objeto del servicio
     *                                  "strPrefijoEmpresa"         => prefijo de la empresa
     *                                  "strCodEmpresa"             => código de la empresa,
     *                                  "strIpClient"               => ip del cliente,
     *                                  "strUsrCreacion"            => usuario en sesión,
     *                                  "strObservacion"            => observación que se enviará al mail,
     *                                  "strAccion"                 => acción a ejecutar
     *                               ]
     * 
     * @return return $arrayRespuesta ["strStatus"     => OK o ERROR, 
     *                                  "strMensaje"    => mensaje de error
     */
    public function gestionNotifTelcoHome($arrayParametros)
    {
        $objServicio                = $arrayParametros["objServicio"];
        $strPrefijoEmpresa          = $arrayParametros["strPrefijoEmpresa"];
        $strCodEmpresa              = $arrayParametros["strCodEmpresa"];
        $strAccion                  = $arrayParametros["strAccion"];
        $strUsrCreacion             = $arrayParametros["strUsrCreacion"];
        $strIpClient                = $arrayParametros["strIpClient"];
        $strObservacionMail         = $arrayParametros["strObservacion"];
        $intNumTotalCuentas         = 0;
        $intNumCuentasIngresadas    = 0;
        $strMensaje                 = "";
        $strAsuntoCorreo            = "";
        
        try
        {
            if(!is_object($objServicio) || empty($strCodEmpresa)  || empty($strPrefijoEmpresa) 
                || empty($strIpClient) || empty($strUsrCreacion) || empty($strAccion))
            {
                throw new \Exception("No se han enviado todos los parámetros necesarios para gestionar los servicios adicionales");
            }
            
            $objPunto                   = $objServicio->getPuntoId();
            if(!is_object($objPunto))
            {
                throw new \Exception("No se ha podido obtener el punto del servicio");
            }
            $strLoginPunto              = $objPunto->getLogin();
            $strDireccionPunto          = $objPunto->getDireccion();
            $objJurisdiccionPunto       = $objPunto->getPuntoCoberturaId();
            if(is_object($objJurisdiccionPunto))
            {
                $strNombreJurisdiccionPunto = $objJurisdiccionPunto->getNombreJurisdiccion();
            }
            else
            {
                $strNombreJurisdiccionPunto = "";
            }
            $objPerCliente              = $objPunto->getPersonaEmpresaRolId();
            if(!is_object($objPerCliente))
            {
                throw new \Exception("No se ha podido obtener el objeto persona empresa rol asociado al servicio");
            }
            $objPersonaCliente          = $objPerCliente->getPersonaId();
            if(!is_object($objPersonaCliente))
            {
                throw new \Exception("No se ha podido obtener el objeto persona asociado al servicio");
            }
            $strCliente                 = sprintf("%s",$objPersonaCliente);
            $strNombreTipoOrdenServicio = "";
            $strTipoOrdenServicio       = $objServicio->getTipoOrden();
            if(is_object($objServicio->getProductoId()))
            {
                $strDescripcionProducto     = $objServicio->getProductoId()->getDescripcionProducto();
            }
            else
            {
                $strDescripcionProducto = "";
            }
            if($strTipoOrdenServicio === 'T')
            {
                $strNombreTipoOrdenServicio = "Traslado";
            }
            else if($strTipoOrdenServicio=='N')
            {
                $strNombreTipoOrdenServicio = "Nueva";
            }
            
            if($strAccion === "ELIMINAR")
            {
                $strNombreAccion            = 'la eliminación';
                $strAsuntoCorreo            = "ELIMINACION DE SERVICIO ".$strDescripcionProducto;
            }
            else
            {
                throw new \Exception("No existe un flujo definido para la acción enviada");
            }
            
            $objNumTotalServiciosTelcoHome  = $this->emcom->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                          ->getOneByCaracteristica($objPerCliente->getId(),'NUM_TOTAL_SERVICIOS_TELCOHOME');
                   
            if(is_object($objNumTotalServiciosTelcoHome))
            {
                $intNumTotalCuentas = intval($objNumTotalServiciosTelcoHome->getValor());
            }
            $arrayParamsSolicitud       = array("arrayEstadosSolicitudes"       => array("Pendiente", "Aprobada"),
                                                "intValorDetSolCaract"          => $objPerCliente->getId(),
                                                "strDescripcionSolicitud"       => "SOLICITUD APROBACION SERVICIO",
                                                "strDescripcionCaracteristica"  => "ID_PERSONA_ROL",
                                                "strConServicio"                => "SI");
            
            $arrayRespuestaSolicitud    = $this->emcom->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                      ->getSolicitudesPorDetSolCaracts($arrayParamsSolicitud);
            $intTotalSolicitud          = $arrayRespuestaSolicitud["intTotal"];
            $arrayResultadoSolicitud    = $arrayRespuestaSolicitud["arrayResultado"];
            if($arrayRespuestaSolicitud["strStatus"] !== "OK")
            {
                throw new \Exception($arrayRespuestaSolicitud["strMensaje"]);
            }
            if($intTotalSolicitud > 0)
            {
                $intIdSolicitud                     = $arrayResultadoSolicitud[0]["idSolicitud"];
                $arrayParamsServiciosTelcoHome      = array(
                                                            "intIdDetalleSolicitud"         => $intIdSolicitud,
                                                            "arrayEstadosSolicitudes"       => array("Pendiente", "Aprobada"),
                                                            "strDescripcionCaracteristica"  => "VELOCIDAD_TELCOHOME",
                                                            "strConServicio"                => "SI",
                                                            "strBuscarServiciosAsociados"   => "SI",
                                                            "arrayEstadosServiciosNotIn"    => array(   'Rechazado', 'Rechazada', 'Cancelado', 
                                                                                                        'Anulado', 'Cancel', 'Eliminado', 
                                                                                                        'Reubicado', 'Trasladado')

                                                            );
                $arrayRespuestaServiciosTelcoHome   = $this->emcom->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                  ->getSolicitudesPorDetSolCaracts($arrayParamsServiciosTelcoHome);
                if($arrayRespuestaServiciosTelcoHome["strStatus"] !== "OK")
                {
                    throw new \Exception($arrayRespuestaServiciosTelcoHome["strMensaje"]);
                }
                $intNumCuentasIngresadas    = $arrayRespuestaServiciosTelcoHome['intTotal'];
            }
            else
            {
                throw new \Exception("No existe solicitud de aprobación de servicio telcohome asociada al servicio");
            }
            $arrayResultadoVendedorSubgerente   = $this->getInfoVendedorSubgerente(array(   "strIpClient"       => $strIpClient,
                                                                                            "strUsrCreacion"    => $strUsrCreacion,
                                                                                            "strCodEmpresa"     => $strCodEmpresa,
                                                                                            "strLimite"         => 1, 
                                                                                            "objServicio"       => $objServicio));
            if($arrayResultadoVendedorSubgerente["strStatus"] === "ERROR")
            {
                throw new \Exception($arrayResultadoVendedorSubgerente["strMensaje"]);
            }
            else if($arrayResultadoVendedorSubgerente["strStatus"] === "OK" 
                && !empty($arrayResultadoVendedorSubgerente["arrayInfoVendedorSubg"]["vendedor"])
                && !empty($arrayResultadoVendedorSubgerente["arrayInfoVendedorSubg"]["subgerente"]))
            {
                $arrayInfoVendedorSubg          = $arrayResultadoVendedorSubgerente["arrayInfoVendedorSubg"];
                $strNombreCompletoVendedor      = $arrayInfoVendedorSubg["vendedor"]["nombreCompleto"];
                $strNombreCompletoSubgerente    = $arrayInfoVendedorSubg["subgerente"]["nombreCompleto"];
                $strLoginPersonaSubgerente      = $arrayInfoVendedorSubg["subgerente"]["login"];
            }
            else
            {
                $strNombreCompletoVendedor      = "";
                $strNombreCompletoSubgerente    = "";
                $strLoginPersonaSubgerente      = "";
            }

            $arrayDestinatarios = array();
            if(!empty($strLoginPersonaSubgerente))
            {
                $arrayCorreosSubgerenteServicio =  $this->emcom->getRepository('schemaBundle:InfoPersona')
                                                               ->getContactosByLoginPersonaAndFormaContacto($strLoginPersonaSubgerente,
                                                                                                            'Correo Electronico');
                if(!empty($arrayCorreosSubgerenteServicio))
                {
                    foreach($arrayCorreosSubgerenteServicio as $arrayCorreoSubgerenteServicio)
                    {
                        if($arrayCorreoSubgerenteServicio && !empty($arrayCorreoSubgerenteServicio['valor']))
                        {
                            $arrayDestinatarios[] = $arrayCorreoSubgerenteServicio['valor'];
                        }
                    }
                }
            }
            
            $arrayParametrosMail    = array( 
                                            "accion"                    => $strNombreAccion,
                                            "cliente"                   => $strCliente,
                                            "loginPuntoCliente"         => $strLoginPunto,
                                            "nombreJurisdiccion"        => $strNombreJurisdiccionPunto,
                                            "direccionPuntoCliente"     => $strDireccionPunto,
                                            "descripcionProducto"       => $strDescripcionProducto,
                                            "vendedor"                  => $strNombreCompletoVendedor,
                                            "subgerente"                => $strNombreCompletoSubgerente,
                                            "tipoOrden"                 => $strNombreTipoOrdenServicio,
                                            "estadoServicio"            => $objServicio->getEstado(),
                                            "fechaCreacionServicio"     => 
                                            strval(date_format($objServicio->getFeCreacion(), "d-m-Y")),
                                            "observacion"               => $strObservacionMail,
                                            "numTotalCuentas"           => $intNumTotalCuentas,
                                            "numCuentasIngresadas"      => $intNumCuentasIngresadas,
                                            "prefijoEmpresa"            => $strPrefijoEmpresa
                                    );

            $this->serviceEnvioPlantilla->generarEnvioPlantilla($strAsuntoCorreo, 
                                                                array_unique($arrayDestinatarios), 
                                                                'NOTIF_TELCOHOME', 
                                                                $arrayParametrosMail,
                                                                $strCodEmpresa,
                                                                '',
                                                                '',
                                                                null, 
                                                                true,
                                                                'notificaciones_telcos@telconet.ec');
            
            $strStatus  = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService->gestionNotifTelcoHome', 
                                              $e->getMessage(), 
                                              $strUsrCreacion, 
                                              $strIpClient );
        }
        
        $arrayRespuesta = array("strStatus" => $strStatus, "strMensaje" => $strMensaje);
        return $arrayRespuesta;
    }

    /**
     * Función que permite evaluar si un servicio pasado por parametro es considerado como especial.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 12-06-2019 - Versión Inicial.
     *
     * @param $arrayParams
     *       • $idServicio          => Contiene un int con el id del servicio.
     *       • $strPrefijoEmpresa   => Contiene un string con el prefijo de la empresa.
     *
     * @return $boolProductoEspecial
     *
     */

    public function isProductoEspecial($idServicio, $strPrefijoEmpresa)
    {
        $entityServicio         = $this->emcom->getRepository('schemaBundle:InfoServicio')->find($idServicio);
        $infoServicioTecnico    = $this->emcom->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($idServicio);
        $objAdmiProducto        = ($entityServicio->getProductoId() ? $entityServicio->getProductoId() : null );
        $boolProductoEspecial   = false;

        /*Hago una consulta para obtener el objeto de la empresa en base al prefijo.*/
        $objInfoEmpresa = $this->emcom->getRepository('schemaBundle:InfoEmpresaGrupo')
            ->findOneBy(array(
                'prefijo' => $strPrefijoEmpresa,
                'estado'  => 'Activo'
            ));

        if ($infoServicioTecnico && is_object($objAdmiProducto))
        {
            //Verifico si es producto es especial y si se encuentra definido en la parametros
            //Para buscar factibilidad del producto en MD.

                $strNombreTecnico       = trim($objAdmiProducto->getNombreTecnico());

                if( !empty($strNombreTecnico) )
                {
                    //Se obtienen la ultimas milla correspondiente al producto especial hibrido para TN.
                    $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                        ->getOne('PRODUCTOS_ESPECIALES_UM',
                            'COMERCIAL',
                            '',
                            '',
                            strtoupper(trim($strNombreTecnico)),
                            '',
                            '',
                            '',
                            '',
                            $objInfoEmpresa->getId());

                    if (($arrayParametrosDet && count($arrayParametrosDet) > 0) &&
                        (isset($arrayParametrosDet['valor2']) && !empty($arrayParametrosDet['valor2'])) &&
                        ($strPrefijoEmpresa != 'TNP'))
                    {
                        $boolProductoEspecial = true;
                    }
                }

        }
        return $boolProductoEspecial;
    }

    /**
     * Función que permite evaluar si un determinado elemento esta restringido para una empresa.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 10-06-2019 - Versión Inicial.
     *
     * @param $arrayParams
     *       • strPrefijoEmpresa         => Contiene un string con el prefijo de la empresa.
     *       • intIdElementoContenedor   => Contiene un int con el id del elemento contenedor.
     *
     * @return $boolResponse
     */

    public function isValidarRestriccionPorEmpresa($arrayParams)
    {
        $strPrefijoEmpresa      = $arrayParams['strPrefijoEmpresa'];
        $intIdElemento          = $arrayParams['intIdElementoContenedor'];
        $intIdServicio          = $arrayParams['intIdServicio'];
        $boolResponse           = false;

        $objResctriccionEmpresa = $this->getRestriccionEmpresa();

        /*Valido que el producto sea Especial para TN.*/
        $boolProductoEspecial   = $this->isProductoEspecial($intIdServicio, $strPrefijoEmpresa);

        /*Hago una consulta para obtener el objeto de la empresa en base al prefijo.*/
        $objInfoEmpresa = $this->emcom->getRepository('schemaBundle:InfoEmpresaGrupo')
            ->findOneBy(array(
                'prefijo' => $strPrefijoEmpresa,
                'estado' => 'Activo'
            ));

        $objInfoElemento = $this->eminf->getRepository('schemaBundle:InfoElemento')->find($intIdElemento);

        if ($objResctriccionEmpresa['intIdEmpresa'] == $objInfoEmpresa->getId()
            && $objInfoElemento->getEstado() == 'Restringido'
            && !$boolProductoEspecial)
        {
            $boolResponse = true;
        }

        return $boolResponse;

    }

    /**
     * Función que permite filtrar un arreglo para retirar los resultados en estado "Restringido".
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 10-06-2019 - Versión Inicial.
     *
     * @params
     *       • $strJson             -> Contiene un arreglo con los elementos a ser filtrados.
     *       • $strPrefijoEmpresa   -> Contiene un string con el prefijo de la empresa.
     *       • $intIdServicio       -> Contiene un int con el id del servicio.
     *
     * @return $strJson
     */

    public function filtrarRestringidosArray($strJson, $strPrefijoEmpresa, $intIdServicio)
    {
        $arrayParams         = array(
            'strPrefijoEmpresa' => $strPrefijoEmpresa,
            'intIdServicio'     => $intIdServicio
        );

        /*Decodifico el JSON a un array manejable en PHP*/
        $arrayResponse    = json_decode($strJson, true);
        /*Valido que el total sea igual o mayor a 1 sino, se salta este paso.*/
        if ($arrayResponse[self::STR_TOTAL] >= 1)
        {
            foreach ($arrayResponse[self::STR_ENCONTRADOS] as $index=> $objElementoConector)
            {
                /*Agrego el id del elemento al arreglo que sera enviado a evaluar.*/
                $arrayParams['intIdElementoContenedor'] = isset($objElementoConector[self::STR_ID_ELEMENTO_CONECTOR])
                    ? $objElementoConector[self::STR_ID_ELEMENTO_CONECTOR] : $objElementoConector['idElemento'];
                /*Valido si el elemento esta restringido para la empresa mediante una función.*/
                $boolValidarRestriccion = $this->isValidarRestriccionPorEmpresa($arrayParams);
                /*Se valida que la respuesta sea true*/
                if ($boolValidarRestriccion)
                {
                    /*Si la respuesta fue true, se procede a eliminar el elemento del arreglo.*/
                    unset($arrayResponse[self::STR_ENCONTRADOS][$index]);
                }
                /*Se vuelve a contabilizar los elementos del arreglo.*/
                $arrayResponse[self::STR_TOTAL] = count($arrayResponse[self::STR_ENCONTRADOS]);
            }
            /*Cuando termine el loop, se asigna el valor del arreglo filtrado a la respuesta.*/
            $strJson = json_encode($arrayResponse);
        }

        return $strJson;
    }

    /**
     * getInfoVendedorSubgerente
     * 
     * Función que obtiene la información del vendedor y subgerente asociado a un servicio
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 29-10-2018
     * 
     * @param array $arrayParametros [
     *                                  "objServicio"       => objeto del servicio,
     *                                  "strCodEmpresa"     => código de la empresa,
     *                                  "strIpClient"       => ip del cliente,
     *                                  "strUsrCreacion"    => usuario en sesión,
     *                                  "strLimite"         => límite del rownum
     *                               ]
     * 
     * @return return $arrayRespuesta [ "strStatus"             => OK o ERROR, 
     *                                  "strMensaje"            => mensaje de error,
     *                                  "arrayInfoVendedorSubg" => arreglo con la información del vendedor y subgerente
     */
    public function getInfoVendedorSubgerente($arrayParametros)
    {
        $strIpClient            = $arrayParametros["strIpClient"];
        $strUsrCreacion         = $arrayParametros["strUsrCreacion"];
        $strCodEmpresa          = $arrayParametros["strCodEmpresa"];
        $strLimite              = $arrayParametros["strLimite"];
        $objServicio            = $arrayParametros["objServicio"];
        $arrayInfoVendedorSubg  = array("vendedor"      => array(),
                                        "subgerente"    => array());
        $strMensaje             = "";
        
        try
        {
            $arrayParametrosVendedor                        = array();
            $arrayParametrosVendedor['empresa']             = $strCodEmpresa;
            $arrayParametrosVendedor['estadoActivo']        = 'Activo';
            $arrayParametrosVendedor['caracteristicaCargo'] = 'CARGO_GRUPO_ROLES_PERSONAL';
            $arrayParametrosVendedor['nombreArea']          = 'Comercial';
            $arrayParametrosVendedor['strTipoRol']          = array('Empleado');
            $arrayParametrosVendedor['limite']              = $strLimite;//Para retornar un sólo registro

            //Bloque que busca los roles no permitidos para la búsqueda del vendedor
            $arrayRolesNoIncluidos = array();
            $arrayParametrosRoles  = array( 'strCodEmpresa'     => $strCodEmpresa,
                                            'strValorRetornar'  => 'descripcion',
                                            'strNombreProceso'  => 'JEFES',
                                            'strNombreModulo'   => 'COMERCIAL',
                                            'strNombreCabecera' => 'ROLES_NO_PERMITIDOS',
                                            'strUsrCreacion'    => $strUsrCreacion,
                                            'strIpCreacion'     => $strIpClient );

            $arrayResultadosRolesNoIncluidos = $this->serviceUtilidades->getDetallesParametrizables($arrayParametrosRoles);

            if( isset($arrayResultadosRolesNoIncluidos['resultado']) && !empty($arrayResultadosRolesNoIncluidos['resultado']) )
            {
                foreach( $arrayResultadosRolesNoIncluidos['resultado'] as $strRolNoIncluido )
                {
                    $arrayRolesNoIncluidos[] = $strRolNoIncluido;
                }
                $arrayParametrosVendedor['rolesNoIncluidos'] = $arrayRolesNoIncluidos;
            }

            //Bloque que busca los roles permitidos para la búsqueda del vendedor
            $arrayRolesIncluidos                       = array();
            $arrayParametrosRoles['strNombreCabecera'] = 'ROLES_PERMITIDOS';

            $arrayResultadosRolesIncluidos = $this->serviceUtilidades->getDetallesParametrizables($arrayParametrosRoles);

            if( isset($arrayResultadosRolesIncluidos['resultado']) && !empty($arrayResultadosRolesIncluidos['resultado']) )
            {
                foreach( $arrayResultadosRolesIncluidos['resultado'] as $strRolIncluido )
                {
                    $arrayRolesIncluidos[] = $strRolIncluido;
                }

                $arrayParametrosVendedor['strTipoRol'] = $arrayRolesIncluidos;
            }

            //Se valida que se consideren los departamentos comerciales agrupados en el parámetro 'GRUPO_DEPARTAMENTOS'
            $arrayParametrosDepartamentos = array('strCodEmpresa'     => $strCodEmpresa,
                                                  'strValorRetornar'  => 'valor1',
                                                  'strNombreProceso'  => 'ADMINISTRACION_JEFES',
                                                  'strNombreModulo'   => 'COMERCIAL',
                                                  'strNombreCabecera' => 'GRUPO_DEPARTAMENTOS',
                                                  'strValor2Detalle'  => 'COMERCIAL',
                                                  'strUsrCreacion'    => $strUsrCreacion,
                                                  'strIpCreacion'     => $strIpClient);

            $arrayResultadosDepartamentos = $this->serviceUtilidades->getDetallesParametrizables($arrayParametrosDepartamentos);

            if( isset($arrayResultadosDepartamentos['resultado']) && !empty($arrayResultadosDepartamentos['resultado']) )
            {
                $arrayParametrosVendedor['departamento'] = $arrayResultadosDepartamentos['resultado'];
            }

            //Se obtiene el cargo de vendedor del parámetro 'GRUPO_ROLES_PERSONAL'
            $arrayParametrosCargoVendedor = array('strCodEmpresa'     => $strCodEmpresa,
                                                  'strValorRetornar'  => 'id',
                                                  'strNombreProceso'  => 'ADMINISTRACION_JEFES',
                                                  'strNombreModulo'   => 'COMERCIAL',
                                                  'strNombreCabecera' => 'GRUPO_ROLES_PERSONAL',
                                                  'strValor3Detalle'  => 'VENDEDOR',
                                                  'strUsrCreacion'    => $strUsrCreacion,
                                                  'strIpCreacion'     => $strIpClient);

            $arrayResultadosCargoVendedor = $this->serviceUtilidades->getDetallesParametrizables($arrayParametrosCargoVendedor);

            if( isset($arrayResultadosCargoVendedor['resultado']) && !empty($arrayResultadosCargoVendedor['resultado']) )
            {
                foreach( $arrayResultadosCargoVendedor['resultado'] as $intIdCargoVendedor )
                {
                    $arrayParametrosVendedor['criterios']['cargo'] = $intIdCargoVendedor;
                }
            }
            
            $strUsrVendedorServicio = $objServicio->getUsrVendedor();
            if(empty($strUsrVendedorServicio))
            {
                throw new \Exception("No se ha podido obtener el vendedor del servicio");
            }
            $arrayParametrosVendedor['criterios']['login']  = $strUsrVendedorServicio;
            
            $arrayPerVendedor = $this->emcom->getRepository('schemaBundle:InfoPersonaEmpresaRol')->findPersonalByCriterios($arrayParametrosVendedor);
            if( isset($arrayPerVendedor['registros']) && !empty($arrayPerVendedor['registros']) 
                && isset($arrayPerVendedor['total']) && $arrayPerVendedor['total'] == 1 )
            {
                $arrayInfoVendedor                  = $arrayPerVendedor['registros'][0];
                $strNombreCompletoVendedor          = ( isset($arrayInfoVendedor['nombres']) && !empty($arrayInfoVendedor['nombres']) )
                                                        ? ucwords(strtolower($arrayInfoVendedor['nombres'])).' ' : '';
                $strNombreCompletoVendedor          .= ( isset($arrayInfoVendedor['apellidos']) && !empty($arrayInfoVendedor['apellidos'])) 
                                                        ? ucwords(strtolower($arrayInfoVendedor['apellidos'])) : '';
                $intIdReportaPersonaRol             = ( isset($arrayInfoVendedor['reportaPersonaEmpresaRolId']) 
                                                        && !empty($arrayInfoVendedor['reportaPersonaEmpresaRolId']))
                                                        ? $arrayInfoVendedor['reportaPersonaEmpresaRolId'] : 0;
                $arrayInfoVendedorSubg["vendedor"]  = array(
                                                            "idPersonaEmpresaRol"       => $arrayPerVendedor["idPersonaEmpresaRol"],
                                                            "login"                     => $strUsrVendedorServicio,
                                                            "nombreCompleto"            => $strNombreCompletoVendedor);

                if($intIdReportaPersonaRol > 0)
                {
                    $objPerSubgerente  = $this->emcom->getRepository("schemaBundle:InfoPersonaEmpresaRol")->findOneById($intIdReportaPersonaRol);

                    if( !is_object($objPerSubgerente) )
                    {
                        throw new \Exception('No se encontró la información del subgerente asignado al servicio('.
                                             $objServicio->getIdServicio().'), idSubgerente('.$intIdReportaPersonaRol.')');
                    }
                    $objPersonaSubgerente   = $objPerSubgerente->getPersonaId();

                    if( !is_object($objPersonaSubgerente) )
                    {
                        throw new \Exception('No se encontró la información personal del subgerente asignado al servicio('.
                                             $objServicio->getIdServicio().'), idSubgerente('.$intIdReportaPersonaRol.')');
                    }
                    $strNombresSubgerente                   = $objPersonaSubgerente->getNombres();
                    $strApellidosSubgerente                 = $objPersonaSubgerente->getApellidos();
                    $strNombreCompletoSubgerente            = (!empty($strNombresSubgerente)) ? ucwords(strtolower($strNombresSubgerente)).' ' : '';
                    $strNombreCompletoSubgerente            .= (!empty($strApellidosSubgerente)) ? ucwords(strtolower($strApellidosSubgerente)) : '';
                    $arrayInfoVendedorSubg["subgerente"]    = array(
                                                                    "idPersonaEmpresaRol"       => $intIdReportaPersonaRol,
                                                                    "login"                     => $objPersonaSubgerente->getLogin(),
                                                                    "nombreCompleto"            => $strNombreCompletoSubgerente);
                }
            }
            $strStatus = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }
        $arrayRespuesta = array("strStatus"             => $strStatus, 
                                "strMensaje"            => $strMensaje, 
                                "arrayInfoVendedorSubg" => $arrayInfoVendedorSubg);
        return $arrayRespuesta;
    }
    
    /**
     * Devuelve una lista de planes posibles, aplicables a las condiciones dadas.
     * 
     * @author Alex Arreaga <atarreaga@telconet.ec>
     * @version 1.0 - 11-06-2019
     * 
     * @param Array $arrayParametros['tipoNegocio']   String Tipo de negocio.
     *              $arrayParametros['formaPago']     String Forma de pago.
     *              $arrayParametros['valorPlan']     float  Valor del plan.
     * @return array
     */  
    public function obtenerPlanesPosiblesWs($arrayParametros)
    {        
        $arrayListadoPlanes = $this->emcom->getRepository('schemaBundle:InfoPlanCab')
                                          ->findByCondicionesPlanes($arrayParametros);
        
        return $arrayListadoPlanes;
    }
    
    
    /**
     * Función obtenerCapacidadesPlan.
     * Devuelve las capacidades 1 y 2 de un plan con el servicio de Internet Dedicado.
     * 
     * @author Ricardo Robles <rrobles@telconet.ec>
     * @version 1.0 - 14-06-2019
     * 
     * @param Array $arrayParametros['intIdPlanNuevo']  int Id del plan.
     *             
     * @return array
     */  
    public function obtenerCapacidadesPlan($arrayParametros)
    {
        $arrayServicio = $this->emcom->getRepository("schemaBundle:InfoServicio")
                                     ->getObtenerCapacidadesDePlan($arrayParametros);
        
        return $arrayServicio;
    }
    
    
     /**
     * Función obtenerValorPlanActual.
     * Devuelve el valor del plan actual mediante el login,
     * identificación del cliente y el servicio.
     * 
     * @author Ricardo Robles <rrobles@telconet.ec>
     * @version 1.0 - 14-06-2019
     * 
     * @param Array $arrayParametros['intIdServicio']             int Id del servicio.
     *              $arrayParametros['strLogin']                  login del punto.
     *              $arrayParametros['strIdentificacionCliente']  identificación del cliente.
     *             
     * @return array
     */  
    public function obtenerValorPlanActual($arrayParametros)
    {
        $arrayServicio = $this->emcom->getRepository("schemaBundle:InfoServicio")
                                     ->getObtenerValorPlanActual($arrayParametros);
        
        return $arrayServicio;
    }
    
    
    
     /**
     * Función obtenerValorPlanNuevo. 
     * Devuelve el valor del plan nuevo del proceso de cambio de plan consultando el id del plan.
     * 
     * @author Ricardo Robles <rrobles@telconet.ec>
     * @version 1.0 - 14-06-2019
     * 
     * @param Array $arrayParametros['intIdPlanNuevo']  int Id del plan nuevo.
     *             
     * @return array
     */  
    public function obtenerValorPlanNuevo($arrayParametros)
    {
        $arrayServicio = $this->emcom->getRepository("schemaBundle:InfoServicio")
                                     ->getObtenerValorPlanNuevo($arrayParametros);
        
        return $arrayServicio;
    }


    /**
     * 
     * Función que valida si existe un servicio tradicional en estado factible,
     * para devolver si es posible una instalación de Internet Wifi en simultaneo.
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 07-05-2019
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.1 13-08-2019 - Se modifica funcion para que acepte un parámetro adicional y asi se pueda reutilizar
     *                           en base al producto.
     * 
     * @author Adrian Ortega <amortega@telconet.ec>
     * @version 1.2 02-10-2019 - Se valida que el producto INTERNET WIFI no sea tomado en cuenta
     *                           cuando se realice activación simultánea.
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.3 03-02-2020 - Se agrega parametro de arreglo de estados para poder obtener los servicios tradicionales
     *                           de acuerdo al estado solicitado.
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.4 06-02-2020 - Se valida que el producto COU LINEAS TELEFONIA FIJA este en estado Factible
     *                           para activación simultánea.
     * 
     * @params
     *
     * $intPuntoId -> Id del punto.
     * $intIdProducto -> Id del producto.
     * $arrayEstados -> Arreglo de estados a consultar.
     *
     * @return null|$arrayRespuesta
     *
     */

    public function validarServicioTradicional($intPuntoId, $intIdProducto, $arrayEstados)
    {
        $arrayRespuesta = array();

        $objParametros               = $this->emcom->getRepository('schemaBundle:AdmiParametroDet')
                                                   ->findOneBy(array('descripcion'=>'SERVICIOS_TRADICIONALES'));
        $objProducto                 = $this->emcom->getRepository('schemaBundle:AdmiProducto')
                                                    ->find($intIdProducto);

        // Obtengo el valor desde el objeto, lo arreglo dentro un array y transformo sus valores en enteros
        $arrayServiciosTradicionales = array_map('intval', explode(',', $objParametros->getValor1()));

        $objInfoServTrad             = $this->emcom->getRepository("schemaBundle:InfoServicio")
                                                   ->findOneBy(
                                                       array(
                                                        'puntoId'        =>  $intPuntoId,
                                                        'productoId'     =>  $arrayServiciosTradicionales,
                                                        'estado'         =>  $arrayEstados
                                                       )
                                                    );

        if(is_object($objInfoServTrad) && method_exists($objInfoServTrad, 'getId'))
        {
            $strProducto = $objInfoServTrad->getProductoId()->getNombreTecnico();
                if ($strProducto == 'INTERNET SMALL BUSINESS' && $objProducto->getDescripcionProducto() == 'INTERNET WIFI')
                {
                    $arrayRespuesta = array('boolInstalacionSimultanea'=>false, 'objInfoServTrad'=>null);                  
                }
                else
                {
                    $arrayRespuesta = array('boolInstalacionSimultanea'=>true, 'objInfoServTrad'=>$objInfoServTrad);
                }
        }else
        {
            $arrayRespuesta = array('boolInstalacionSimultanea'=>false, 'objInfoServTrad'=>null);
        }

        return $arrayRespuesta;
    }

    /**
     *
     * Función que valida si existe un servicio 'Wifi Alquiler de Equipos' en estado factible
     * y que  la inspección haya sido realizada.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 14-08-2019
     *
     * @params
     *
     * $intPuntoId -> Id del punto.
     * $intIdProducto -> Id del producto.
     *
     * @return null|$arrayRespuesta
     *
     */

    public function validarInspeccionRealizada($intPuntoId)
    {
        $arrayRespuesta = array('boolValidacion'=>false, 'objServicioAlquilerFactible'=>null);

        /*Obtengo el objeto de AdmiProducto.*/
        $objAdmiProducto             = $this->emcom->getRepository('schemaBundle:AdmiProducto')
                                                   ->findOneBy(array('descripcionProducto'=>'WIFI Alquiler Equipos'));

        /*Obtengo el objeto de AdmiCaracteristica.*/
        $objAdmiCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                             ->findOneBy(array(
                                                 'descripcionCaracteristica' => 'REQUIERE_INSPECCION'
                                             ));

        /*Obtengo el objeto de AdmiProductoCaracteristica.*/
        $objAdmiProductoCaract = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                             ->findOneBy(array(
                                                 'productoId' => $objAdmiProducto->getId(),
                                                 'caracteristicaId' => $objAdmiCaracteristica->getId()
                                             ));

        /*Obtengo un arreglo de los servicios Wifi Alquiler de Equipos en estado factible.*/
        $arrayServiciosAlquilerFactible = $this->emcom->getRepository("schemaBundle:InfoServicio")
                                                   ->findBy(array(
                                                       'puntoId' => $intPuntoId,
                                                       'productoId' => $objAdmiProducto->getId(),
                                                       'estado' => 'Factible'));


        /*Valido si el arreglo no esta vacio.*/
        if (count($arrayServiciosAlquilerFactible) >= 1)
        {
            foreach ($arrayServiciosAlquilerFactible as $objServicioWifiAlquiler)
            {
                /*Obtengo el objeto de InfoServicioProdCaract.*/
                $objInfoServProdCaract = $this->emcom->getRepository('schemaBundle:InfoServicioProdCaract')
                                                     ->findOneBy(array(
                                                         'servicioId' => $objServicioWifiAlquiler->getId(),
                                                         'productoCaracterisiticaId' => $objAdmiProductoCaract->getId()
                                                     ));

                $objDocumentoRelacion  = $this->emComunicacion->getRepository('schemaBundle:InfoDocumentoRelacion')
                                                           ->findOneBy(array(
                                                               "servicioId" => $objServicioWifiAlquiler->getId(),
                                                               "estado"     => "Activo"
                                                           ));

                if ($objInfoServProdCaract->getValor() == 'S' && method_exists($objDocumentoRelacion, 'getId'))
                {
                    $arrayRespuesta = array('boolValidacion'=>true, 'objServicioAlquilerFactible'=>$objServicioWifiAlquiler);
                }
                else
                {
                    continue;
                }
            }
        }
        return $arrayRespuesta;
    }

    /**
     *
     * Permite obtener el id del servicio tradicional con el que se va a instalar el internet WIFI en simultaneo.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 09-05-2019 - Version Inicial.
     *
     * @param $intIdServicio -> Un entero que contiene el Id del servicio.
     * @return null|$objInstalacionSimultanea
     *
     */

    public function getIdServicioTradicionalInstalacionWifi($intIdServicio)
    {
        $objInstalacionSimultanea = null;

        $objAdmiCaract      = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                          ->findOneBy(array(
                                              'descripcionCaracteristica'=>'INSTALACION_SIMULTANEA_WIFI',
                                              'estado'=>'Activo'
                                          ));

        $objAdmiProdCaract  = $this->eminf->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                          ->findOneBy(array(
                                              'caracteristicaId'=>$objAdmiCaract->getId()
                                          ));
                                          
        $objServWifi        = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                            ->find($intIdServicio);

        $objInfoServProdCaract = $this->eminf->getRepository('schemaBundle:InfoServicioProdCaract')
                                             ->findOneBy(array(
                                                 'servicioId'=>$objServWifi->getId(),
                                                 'productoCaracterisiticaId'=>$objAdmiProdCaract->getId()
                                             ));

        if (is_object($objInfoServProdCaract))
        {
            $boolInstalacionSimultanea = $objInfoServProdCaract->getValor() !== 'null';
            $objInstalacionSimultanea['boolInstalacionSimultanea'] = $boolInstalacionSimultanea;
            $objInstalacionSimultanea['intIdServTradicional'] = $boolInstalacionSimultanea ? intval($objInfoServProdCaract->getValor()) : null;
        }
        return $objInstalacionSimultanea;
    }

   /**
     *
     * Permite validar si un servicio posee la característica INSTALACION_SIMULTANEA_WIFI y
     * retorna un arreglo con el objeto del servicio en ese valor.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 03-02-2020 - Version Inicial.
     *
     * @param $intIdServicio -> Un entero que contiene el Id del servicio.
     * @return array
     *
     */
    public function validaInstalacionSimultanea($intIdServicio)
    {
        $emComercial = $this->emcom;
        $arrayResponse = array('status' => false, 'objServicio' => null);

        try 
        {
            /*Obtenemos un objeto de servicio con el id que recibimos por parametro.*/
            $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);

            /*Obtenemos un objeto con la característica INSTALACION_SIMULTANEA_WIFI.*/
            $objAdmiCaract = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')->findOneBy(
                array(
                    'descripcionCaracteristica' => 'INSTALACION_SIMULTANEA_WIFI',
                    'estado' => 'Activo'
                )
            );

            /*Validaciones de objetos consultados.*/
            if ((is_object($objServicio) && is_object($objServicio->getProductoId())) &&
                is_object($objAdmiCaract))
            {
                /*Obtenemos un objeto de AdmiProductoCaracteristica.*/
                $objAdmiProdCaract = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                    ->findOneBy(
                        array(
                            'productoId' => $objServicio->getProductoId()->getId(),
                            'caracteristicaId' => $objAdmiCaract->getId()
                        ));

                if (is_object($objAdmiProdCaract))
                {
                    /*Obtenemos un objeto de InfoServicioProdCaract.*/
                    $objInfoServProdCaract = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                        ->findOneBy(
                            array(
                                'servicioId' => $objServicio->getId(),
                                'productoCaracterisiticaId' => $objAdmiProdCaract->getId(),
                                'estado' => 'Activo'
                            ));

                    if (is_object($objInfoServProdCaract) && !is_null($objInfoServProdCaract->getValor()))
                    {
                        $objServicioTrad = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                   ->find($objInfoServProdCaract->getValor());

                        if (is_object($objServicioTrad))
                        {
                            $arrayResponse['status']        = true;
                            $arrayResponse['objServicio']   = $objServicioTrad;
                        }
                    }

                }
            }

        } catch (\Exception $e) 
        {

            $objRequest = $this->container->get('request');
            $objSession = $objRequest->getSession();

            $this->utilServicio->insertError(
                'Telcos+',
                'InfoServicioService.validaInstalacionSimultanea',
                $e->getMessage(),
                $objSession->get('user'),
                $objRequest->getClientIp());
        }

        return $arrayResponse;
    }

    /**
     *
     * Genera la solicitud de instalación simultánea.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 09-05-2019 - Version Inicial.
     *
     * @params
     *       • $idServicio    -> Contiene un int con el id del servicio.
     *       • $usrCreacion   -> Contiene un string con el 'username' del usuario logueado actualmente.
     *       • $clientIp      -> Contiene un string con la ip del usuario logueado actualmente.
     *
     * @return
     * @throws \Doctrine\DBAL\ConnectionException
     */

    public function solFactInstSim($intIdServicio, $strUsrCreacion, $strClientIp)
    {
        $em                     = $this->emcom;
        $entityServicio         = $em->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
        $entityTipoSolicitud    = $em->getRepository('schemaBundle:AdmiTipoSolicitud')->findOneByDescripcionSolicitud("SOLICITUD NODO WIFI");
        $content                = "";
        $strEstado              = "PreFactibilidad";
        $em->getConnection()->beginTransaction();

        try
        {
            if($entityServicio)
            {
                $strObservacionFactibilidad = "Se creó la solicitud de factibilidad instalación simultánea";
                $entityServicio->setEstado($strEstado);
                $em->persist($entityServicio);
                $em->flush();
                //GUARDAR INFO SERVICIO HISTORIAL
                $entityServicioHistorial = new InfoServicioHistorial();
                $entityServicioHistorial->setServicioId($entityServicio);
                $entityServicioHistorial->setIpCreacion($strClientIp);
                $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
                $entityServicioHistorial->setUsrCreacion($strUsrCreacion);
                $entityServicioHistorial->setObservacion("Se creo la solicitud de factibilidad instalacion simultanea");
                $entityServicioHistorial->setEstado($strEstado);
                $em->persist($entityServicioHistorial);
                $em->flush();

                $entitySolicitud = new InfoDetalleSolicitud();
                $entitySolicitud->setServicioId($entityServicio);
                $entitySolicitud->setTipoSolicitudId($entityTipoSolicitud);
                $entitySolicitud->setEstado($strEstado);
                $entitySolicitud->setUsrCreacion($strUsrCreacion);
                $entitySolicitud->setObservacion($strObservacionFactibilidad);
                $entitySolicitud->setFeCreacion(new \DateTime('now'));
                $em->persist($entitySolicitud);
                $em->flush();

                //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                $entityDetalleSolHist = new InfoDetalleSolHist();
                $entityDetalleSolHist->setDetalleSolicitudId($entitySolicitud);
                $entityDetalleSolHist->setIpCreacion($strClientIp);
                $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                $entityDetalleSolHist->setUsrCreacion($strUsrCreacion);
                $entityDetalleSolHist->setObservacion($strObservacionFactibilidad);
                $entityDetalleSolHist->setEstado($strEstado);
                $em->persist($entityDetalleSolHist);
                $em->flush();

                $em->getConnection()->commit();

                $content['msg']     = $strObservacionFactibilidad;
                $content['status']  = 'OK';
            }
            else
            {
                $content['msg']     = "No existe el registro del servicio, notificar a Sistemas";
                $content['status']  = 'ERROR';
            }

        }
        catch(\Exception $e)
        {
            if ($em->getConnection()->isTransactionActive())
            {
                $content['msg']     = "Error: <br>" . $e->getMessage();
                $content['status']  = 'ERROR';
                $em->getConnection()->rollback();
                $em->close();
            }
            $this->utilServicio->insertError('Telcos+',
                'InfoServicioService.solicitarFactibilidadProducto',
                "Error: <br>" . $e->getMessage(),
                $strUsrCreacion,
                $strClientIp);
        }
        return $content;
    }

    /**
     * Funcion que genera el nombre del elemento WIFI y no permite que se repita.
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 09-05-2019 - Version Inicial.
     *
     * @params
     *       • $strLogin            -> Contiene un string con el login del servicio.
     *       • $intModeloElemento   -> Contiene un int con el modelo del elemento.
     *
     * @return $strNombreElemento
     *
     */
    public function generarNombreElementoWifi($strLogin, $intModeloElemento)
    {
        $intCount               = 1;
        $strNombreElemento      = "CPE-WIFI-$strLogin-$intCount";

        $objElementoRepetido    = $this->eminf->getRepository('schemaBundle:InfoElemento')
            ->findOneBy(array(
                "nombreElemento"   => strtoupper($strNombreElemento),
                "estado"           => array("Activo", "Pendiente", "Factible", "PreFactibilidad"),
                "modeloElementoId" => $intModeloElemento
            ));

        if (is_object($objElementoRepetido) && method_exists($objElementoRepetido, 'getId'))
        {
            while(is_object($objElementoRepetido) && method_exists($objElementoRepetido, 'getId'))
            {
                $intCount += 1;
                $strNombreElemento = "CPE-WIFI-$strLogin-$intCount";
                $objElementoRepetido    = $this->eminf->getRepository('schemaBundle:InfoElemento')
                    ->findOneBy(array(
                        "nombreElemento"   => strtoupper($strNombreElemento),
                        "estado"           => array("Activo", "Pendiente", "Factible", "PreFactibilidad"),
                        "modeloElementoId" => $intModeloElemento
                    ));
            }
        }

        return $strNombreElemento;

    }

    /**
     * Funcion para validar si un servicio es Wifi Alquiler de equipos y si posee un id de servicio en la caracteristica
     * REQUIERE_INSPECCION.
     *
     * @param $arrayServicios
     * @return array
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 21-08-2019 - Version Inicial.
     */

    public function validaWifiAlquilerInspeccionado($arrayServicios)
    {
        $arrayRespuesta = array();
        $arrayServiciosInspeccionNo = array();

        foreach ($arrayServicios as $arrayServicio)
        {
            $intIdServicio = $arrayServicio['id'];
            /*Obtengo un objeto del producto a validar*/
            $objProducto = $this->emcom->getRepository('schemaBundle:AdmiProducto')
                ->findOneBy(array('descripcionProducto' => 'WIFI Alquiler Equipos'));
            /*Obtengo el objeto del servicio con el id que me llega por parametro*/
            $objServicio = $this->emcom->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            /*Valido si el id del producto coincide con 'WIFI Alquiler Equipos' y si existe un productoId, para hacer la lógica.*/
            if (is_object($objServicio->getProductoId()) && $objProducto->getId() == $objServicio->getProductoId()->getId())
            {
                /*Obtengo el objeto de AdmiCaracteristica.*/
                $objAdmiCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                    ->findOneBy(array(
                        'descripcionCaracteristica' => 'REQUIERE_INSPECCION'
                    ));
                /*Obtengo el objeto de AdmiProductoCaracteristica.*/
                $objAdmiProductoCaract = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                    ->findOneBy(array(
                        'productoId' => $objProducto->getId(),
                        'caracteristicaId' => $objAdmiCaracteristica->getId()
                    ));
                /*Obtengo el objeto de InfoServicioProdCaract.*/
                $objInfoServProdCaract = $this->emcom->getRepository('schemaBundle:InfoServicioProdCaract')
                    ->findOneBy(array(
                        'servicioId' => $objServicio->getId(),
                        'productoCaracterisiticaId' => $objAdmiProductoCaract->getId()
                    ));
                if (is_object($objInfoServProdCaract))
                {
                    if (is_numeric($objInfoServProdCaract->getValor()))
                    {
                        continue;
                    }
                    elseif ($objInfoServProdCaract->getValor() == 'S')
                    {
                        array_push($arrayRespuesta, $arrayServicio);
                    }
                    elseif ($objInfoServProdCaract->getValor() == 'N')
                    {
                        array_push($arrayServiciosInspeccionNo, $arrayServicio);
                    }
                }
                else
                {
                    array_push($arrayRespuesta, $arrayServicio);
                }
            }
            else
            {
                array_push($arrayRespuesta, $arrayServicio);
            }
        }

        if (count($arrayServiciosInspeccionNo) >= 1)
        {
            $arrayResult = min($arrayServiciosInspeccionNo);
            array_push($arrayRespuesta, $arrayResult);
        }

        return $arrayRespuesta;

    }

    /**
     * Función para obtener los servicios Wifi Alquiler de Equipos en estado factible que no hayan tenido inspección,
     * para la creación de la tarea de instalación simultanea.
     *
     * @param AdmiProducto $objProducto
     * @param InfoServicio $objServicio
     * @return array
     * 
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 21-08-2019 - Version Inicial.
     * 
     */
    public function getWifiAlquilerSimultaneos(InfoServicio $objServicio, $strEstado)
    {
        /*Obtengo un objeto del producto a validar*/
        $objProducto = $this->emcom->getRepository('schemaBundle:AdmiProducto')
                                   ->findOneBy(array('descripcionProducto' => 'WIFI Alquiler Equipos'));

        $arrayServiciosWifiAlquiler = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                  ->findBy(array(
                                                      'productoId'  => $objProducto,
                                                      'estado'      => $strEstado,
                                                      'puntoId'     => $objServicio->getPuntoId()->getId()
                                                  ));

        $arrayServiciosWifiSimultaneos = array();

        if (is_array($arrayServiciosWifiAlquiler))
        {
            foreach ($arrayServiciosWifiAlquiler as $objServicioWifi)
            {
                if ($objServicioWifi->getId() != $objServicio->getId())
                {
                    array_push($arrayServiciosWifiSimultaneos, $objServicioWifi->getId());
                }
            }
        }
        return $arrayServiciosWifiSimultaneos;
    }

    /**
     * Función que retorna un arreglo con las caracteristicas de instalacion de un servicio Wifi Alquiler de equipos.
     *
     * @param $arrayServicios
     * @return array
     *
     * @author Pablo Pin <ppin@telconet.ec>
     * @version 1.0 21-08-2019 - Version Inicial.
     */
    public function getCaracteristicasInstalacion($intIdServicio, $strCaracteristica)
    {
        $objProducto = $this->emcom->getRepository('schemaBundle:AdmiProducto')
            ->findOneBy(array('descripcionProducto' => 'WIFI Alquiler Equipos'));
        /*Obtengo el objeto del servicio con el id que me llega por parametro*/
        $objServicio = $this->emcom->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
        $arrayRespuesta = array();

        if (is_object($objServicio))
        {
            /*Obtengo el objeto de AdmiCaracteristica.*/
            $objAdmiCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                ->findOneBy(array(
                    'descripcionCaracteristica' => $strCaracteristica
                ));
            /*Obtengo el objeto de AdmiProductoCaracteristica.*/
            $objAdmiProductoCaract = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                ->findOneBy(array(
                    'productoId' => $objProducto->getId(),
                    'caracteristicaId' => $objAdmiCaracteristica->getId()
                ));
            /*Obtengo el objeto de InfoServicioProdCaract.*/
            $objInfoServProdCaract = $this->emcom->getRepository('schemaBundle:InfoServicioProdCaract')
                ->findOneBy(array(
                    'servicioId' => $objServicio->getId(),
                    'productoCaracterisiticaId' => $objAdmiProductoCaract->getId()
                ));
            if (is_object($objInfoServProdCaract))
            {
                $arrayRespuesta = array('WF_Modelo'=>$objInfoServProdCaract->getValor());
            }
        }
        return $arrayRespuesta;
    }

    /*
     * Función encargada de insertar el historial del servicio.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 22-08-2019
     *
     * @params $arrayParametros [
     *                              intIdServicio      : Id del servicio.
     *                              strObservacion     : Observación del historial.
     *                              strUsuarioCreacion : Usuario creación.
     *                              strIpCreacion      : Ip creación.
     *                              intIdMotivo        : Id del motivo.
     *                              strAccion          : Acción
     *                          ]
     *
     * @return $arrayRespuesta
     *
     */
    public function putHistorialServicio($arrayParametros)
    {
        $intIdServicio      = $arrayParametros['intIdServicio'];
        $strObservacion     = $arrayParametros['strObservacion'];
        $strUsuarioCreacion = $arrayParametros['strUsuarioCreacion'];
        $strIpCreacion      = $arrayParametros['strIpCreacion'];
        $intIdMotivo        = $arrayParametros['intIdMotivo'];
        $strAccion          = $arrayParametros['strAccion'];

        $this->emcom->beginTransaction();

        try
        {
            if (!$intIdServicio)
            {
                throw new \Exception('Error : Id del Servicio Nulo');
            }

            $objInfoServicio = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                    ->find($intIdServicio);

            if (!is_object($objInfoServicio))
            {
                throw new \Exception('Error : Id del Servicio no encontrado ['.$intIdServicio.']');
            }

            $objServicioHist = new InfoServicioHistorial();
            $objServicioHist->setServicioId($objInfoServicio);
            $objServicioHist->setObservacion($strObservacion);
            $objServicioHist->setIpCreacion($strIpCreacion);
            $objServicioHist->setFeCreacion(new \DateTime('now'));
            $objServicioHist->setUsrCreacion($strUsuarioCreacion);
            $objServicioHist->setEstado($objInfoServicio->getEstado());
            $objServicioHist->setMotivoId($intIdMotivo);
            $objServicioHist->setAccion($strAccion);
            $this->emcom->persist($objServicioHist);
            $this->emcom->flush();
            $this->emcom->commit();

            $arrayRespuesta = array ('status'  => 'ok',
                                     'message' => 'Historial del servicio insertado');
        }
        catch (\Exception $objException)
        {
            if ($this->emcom->getConnection()->isTransactionActive())
            {
                $this->emcom->getConnection()->rollback();
                $this->emcom->getConnection()->close();
            }

            $strMessage = 'Error al insertar el historial del servicio.';

            if (strpos($objException->getMessage(),'Error : ') !== false)
            {
                $strMessage = $objException->getMessage();
            }

            $this->utilServicio->insertError('Telcos+',
                                            'InfoServicioService->putHistorialServicio',
                                             substr($objException->getMessage(), 0, 4000),
                                             $strUsuarioCreacion ? $strUsuarioCreacion : 'Telcos+',
                                             $strIpCreacion ? $strIpCreacion : '127.0.0.1');

            $arrayRespuesta = array ('status'  => 'fail',
                                     'message' => $strMessage);
        }
        return $arrayRespuesta;
    }

    /**
     * Función encargada de realizar las validaciones necesarias para el reingreso
     * de la orden de servicio automática.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 28-08-2019
     *
     * @params $arrayParametros [
     *                              strUsuarioCreacion : Usuario creación.
     *                              strIpCreacion      : Ip creación.
     *                              intIdServicio      : Id del servicio.
     *                              strPrefijoEmpresa  : Prefijo de la empresa.
     *                              strCodEmpresa      : Codigo Empresa.
     *                              strFlujo           : Flujo de validaciones.
     *                              intIdPersona       : Id de la persona.
     *                          ]
     *
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.1 19-02-2020 - PR-001-OP-001: Validar  Motivo de Rechazo/Anulación
     *                           Se parametrizan los motivos de Rechazo y Anulación de Orden de servicio "PARAMETROS_REINGRESO_OS_AUTOMATICA"
     *                           deacuerdo a la descripción "MOTIVOS_RECHAZO_ANULACION_OS_AUTOMATICA" y se agrega en el query casteo a número entero
     *                           dado que el campo valor1 que hace referencia al Id Motivo es string.
     *                         - PR-001-OP-002: Validar Pre-planificación Previa
     *                           Se debe validar que la OS Rechazada/Anulada haya sido "PrePlanificada" antes de haber sido rechazada/anulada.
     *                         - PR-001-OP-003: Validar 30 días de Reingreso
     *                           Validar que la OS no sobrepase los 30 días desde la fecha de "PrePlanificada" hasta la fecha del ingreso de la nueva
     *                           orden (fecha en que da click al botón “Generar OS Automática”), Si no pasa la validación la Orden de Servicio queda
     *                           en estado “Rechazada” y debe desaparecer el botón “Generar OS Automática” y la OS sigue el flujo de una OS rechazada
     *                           que debe ser reingresada manualmente. 
     *                         - PR-001-OP-004: Validar Documento de Devolución. Se validará que la Factura de Instalación de los servicios que se 
     *                           tengan en el Punto se encuentre Pagada, es decir, la factura de Instalación Cerrada con Pago asociado sin NC y 
     *                           sin anticipo y sin documento DEV asociado
     *                         - Verificación que el servicio no se encuentre reingresado o en proceso o flujo de Reingreso Automático
     *                         - Verificación que el servicio reingresado haya concluido el Proceso de Reingreso Automático para ocultar el
     *                           botón de reingreso.
     *                         - Validación de que los Datos geograficos no hayan sido editados posterior a la fecha de Preplanificación de la
     *                           Orden de servicio.
     *      
     * @author Gustavo Narea 
     * @version 1.2 27-10-2020 Parametrizacion de mensajes de validacion
     * 
     * @author Anabelle Peñaherrera
     * @version 1.3 28-01-2021 Se realiza cambios en la validación en Forma de Pago, la cual debe validar que los  Datos de la forma de pago,
     *                         y debito no hayan sido editados posterior a la fecha de Preplanificación de la orden de servicio.
     * 
     * @author Anabelle Peñaherrera
     * @version 1.4 25-05-2021  -Se modifica validación PR-001-OP-004: Validar Documento de Devolución.
     *                           Se deberá permitir reingresar la OS cuando existe una devolución siempre que se tenga una nueva factura de 
     *                           instalación pagada.
     *                           Se agrega validación que la OS tenga el contrato asociado con un estado activo y que  el cliente también se  
     *                           encuentre en estado activo, se parametrizan los estados de clientes 'ESTADOS_CLIENTES' y de contrato
     *                           'ESTADOS_CONTRATOS' en el parametro: PARAMETROS_REINGRESO_OS_AUTOMATICA
     *                           Se valida la existencia de la relacion del servicio origen del traslado en el caso del Reingreso de una Orden de  
     *                           servicio de tipo: T (Traslado) 
     * 
     * @author José Candelario
     * @version 1.5 04-04-2023 Se realiza mejora en validación Empresa no contemplada para el reingreso de OS automática afectada por proyecto EN.
     * 
     * @return $arrayRespuesta
     *
     */
    public function validarReingresoOrdenServicio($arrayParametros)
    {
        $strUsuarioCreacion  = $arrayParametros['strUsuarioCreacion'];
        $strIpCreacion       = $arrayParametros['strIpCreacion'];
        $intIdServicio       = $arrayParametros['intIdServicio'];
        $strPrefijoEmpresa   = $arrayParametros['strPrefijoEmpresa'];
        $strCodEmpresa       = $arrayParametros['strCodEmpresa'];
        $strFlujo            = $arrayParametros['strFlujo'];        
        $strSoloValidar      = $arrayParametros['strSoloValidar'];
        $boolInsertarMensaje = true;
        $intDiasPermitidos   = 30; //Dias por defecto.
        
        $strNombreParametro           = "PARAMETROS_REINGRESO_OS_AUTOMATICA";
        $strParamDetDiasPermitidos    = "MENSAJE_ERROR_DIAS_REINGRESO";
        $strParamDetDevolucionFactura = "MENSAJE_ERROR_DEVOLUCION_FACTURA";
        $strParamDetDatosGeograficos  = "MENSAJE_ERROR_DATOS_GEOGRAFICOS";
        $strDetFacturaActiva          = "MENSAJE_ERROR_POSEE_FACTURA_INSTALACION";
        $strDetNoAnticipos            = "MENSAJE_ERROR_SIN_ANTICIPOS_MAYOR_FACTURA";
        $strDetFormaPago              = "MENSAJE_ERROR_FORMA_PAGO";
        $strDetReingresoEjecutado     = "MENSAJE_ERROR_REINGRESO_EJECUTADO";
        $strParamDetEstadoCliente     = "MENSAJE_ERROR_ESTADOS_CLIENTES";
        $strParamDetEstadoContrato    = "MENSAJE_ERROR_ESTADOS_CONTRATOS";
        $strParamDetTraslado          = "MENSAJE_ERROR_TRASLADO";
        $strParamDescTraslado         = "DESC_TRASLADO";        
        $strParamDetProceso           = "REINGRESO AUTOMATICO";        
        
        try
        {
            //Solo la empresa MD pasa por el proceso de reingreso OS automática.
            if (strtoupper($strPrefijoEmpresa) !== 'MD' && strtoupper($strPrefijoEmpresa) !== 'EN' )
            {
                $boolInsertarMensaje = false;
                throw new \Exception('Error : Empresa no contemplada para el reingreso de OS automática.');
            }

            //Verificamos si el servicio existe.
            $objInfoServicio = $this->emcom->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objInfoServicio))
            {
                $boolInsertarMensaje = false;
                throw new \Exception('Error : El servicio no existe');
            }

            //Verificamos los estados permitidos.
            if (!in_array(strtoupper($objInfoServicio->getEstado()),array('RECHAZADA','ANULADO')))
            {
                $boolInsertarMensaje = false;
                throw new \Exception('Error : Estado del servicio no contemplado.<br/>'.
                                     'Estado: '.$objInfoServicio->getEstado());
            }
            
            //Valida que exista Servicio Origen del Traslado
            if (($strFlujo === 'completo' || in_array('validaOrigenTraslado',$strFlujo)) && $objInfoServicio->getTipoOrden() == 'T')
            {               
                $arrayParamDescTraslado = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                      ->getOne($strNombreParametro, '', '', $strParamDescTraslado, '', '', '', '', 
                                                               '', $strCodEmpresa);
    
                $strObserTraslado = (!empty($arrayParamDescTraslado) && !empty($arrayParamDescTraslado['valor1']))
                                     ? $arrayParamDescTraslado['valor1'] : 'Se actualizó característica TRASLADO%';
  
                $strFormatoTraslado = (!empty($arrayParamDescTraslado) && !empty($arrayParamDescTraslado['valor2']))
                                     ? $arrayParamDescTraslado['valor2'] : '\d+';
  
                $arrayIdServOrigenTraslado = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                         ->getIdServicioOrigenTraslado(array('intIdServicio'  => $objInfoServicio->getId(),
                                                                                             'strObservacion' => $strObserTraslado,
                                                                                             'strFormato'     => $strFormatoTraslado
                                                                                     ));

                $intIdServicioOrigenTraslado = $arrayIdServOrigenTraslado[0]["intIdServicioOrigenTraslado"];
                if(!$intIdServicioOrigenTraslado)
                {
                    $objInfoServicioHistorial = $this->emcom->getRepository('schemaBundle:InfoServicioHistorial')
                                                     ->findOneBy(array('servicioId' => $objInfoServicio->getId()),
                                                                 array('id'         => 'DESC'));
                       
                    if (is_object($objInfoServicioHistorial))
                    {
                        $strAccionHistorial = $objInfoServicioHistorial->getAccion();
                    }
                    $arrayParams = array('strNombreParametro' => $strNombreParametro, 
                                         'strProceso'         => $strParamDetProceso, 
                                         'strDescripcion'     => $strParamDetTraslado);
                  
                    $strMsgErrorTraslado = $this->getMensajeReprocesoOS($arrayParams);
                    if(!is_null($strMsgErrorTraslado))
                    {
                        $strObservacionHistorial = $strMsgErrorTraslado;
                    }
                    else
                    {
                        $strObservacionHistorial = "OS No procede para Reingreso Automático: No se encontro servicio origen del traslado.";
                    }
                  
                    if ($strAccionHistorial !== 'validaOrigenTraslado' && strtoupper($strSoloValidar) === 'SI')
                    {
                        $this->putHistorialServicio(array('intIdServicio'      => $objInfoServicio->getId(),
                                                          'strObservacion'     => $strObservacionHistorial,
                                                          'strUsuarioCreacion' => "telcos_reingresos",
                                                          'strIpCreacion'      => $strIpCreacion,
                                                          'strAccion'          => 'validaOrigenTraslado'));
                    }                    
                    if (strtoupper($strSoloValidar) === 'SI' || $strAccionHistorial == 'validaOrigenTraslado' )
                    {
                        $boolInsertarMensaje = false;
                        throw new \Exception('Error : '.$strObservacionHistorial);
                    }                    
                }                
            }

            //Validación estados del cliente valido.
            if ($strFlujo === 'completo' || in_array('validaEstadosCliente',$strFlujo))
            {  
                $arrayDatosOS = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                     ->getValidezServicio(array ('intIdServicio'         => $objInfoServicio->getId(),
                                                                 'strNombreParametroCab' => 'PARAMETROS_REINGRESO_OS_AUTOMATICA',
                                                                 'strNombreParametroDet' => 'ESTADOS_CLIENTES',
                                                                 'strEstadoParametro'    => 'Activo',
                                                                 'strEstadoServicio'     => $objInfoServicio->getEstado(),
                                                                 'strEstadoServicioHist' => 'PrePlanificada',
                                                                 'strOpcion'             => 'validaEstadosCliente'));
                if ($arrayDatosOS['status'] === 'fail')
                {
                    throw new \Exception('Error al validar Estado del Cliente, idServicio: '.$intIdServicio.
                                         ', Mensaje: '.$arrayDatosOS['message']);
                }
                if (empty($arrayDatosOS['result']))                
                {
                    $objInfoServicioHistorial = $this->emcom->getRepository('schemaBundle:InfoServicioHistorial')
                                                     ->findOneBy(array('servicioId' => $objInfoServicio->getId()),
                                                                 array('id'         => 'DESC'));

                    if (is_object($objInfoServicioHistorial))
                    {
                        $strAccionHistorial = $objInfoServicioHistorial->getAccion();
                    }

                    $arrayParams = array('strNombreParametro' => $strNombreParametro, 
                                         'strProceso'         => $strParamDetProceso, 
                                         'strDescripcion'     => $strParamDetEstadoCliente);
                    
                    $strMsgErrorEstadoCliente = $this->getMensajeReprocesoOS($arrayParams);
                    if(!is_null($strMsgErrorEstadoCliente))
                    {
                        $strObservacionHistorial = $strMsgErrorEstadoCliente;
                    }
                    else
                    {
                        $strObservacionHistorial = "OS No procede para Reingreso Automático: El Cliente no posee un estado valido.";
                    }
                    
                    if ($strAccionHistorial !== 'validaCliente' && strtoupper($strSoloValidar) === 'SI')
                    {
                        $this->putHistorialServicio(array('intIdServicio'      => $objInfoServicio->getId(),
                                                          'strObservacion'     => $strObservacionHistorial,
                                                          'strUsuarioCreacion' => "telcos_reingresos",
                                                          'strIpCreacion'      => $strIpCreacion,
                                                          'strAccion'          => 'validaCliente'));

                        /* =================== Envio de notificación ===================*/
                        $this->emcom->getRepository('schemaBundle:InfoPunto')
                             ->notificarProcesoReingresoOS(array('intIdServicio' => $objInfoServicio->getId(),
                                                                 'strMensaje'    => $strObservacionHistorial,
                                                                 'strUsuario'    => $strUsuarioCreacion,
                                                                 'strIp'         => $strIpCreacion));
                    }                    
                    if (strtoupper($strSoloValidar) === 'SI' || $strAccionHistorial == 'validaCliente' )
                    {
                        $boolInsertarMensaje = false;
                        throw new \Exception('Error : '.$strObservacionHistorial);
                    }
                }
            }
            //Validación estados del contrato valido.
            if ($strFlujo === 'completo' || in_array('validaEstadosContrato',$strFlujo))
            {  
                $arrayDatosOS = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                     ->getValidezServicio(array ('intIdServicio'         => $objInfoServicio->getId(),
                                                                 'strNombreParametroCab' => 'PARAMETROS_REINGRESO_OS_AUTOMATICA',
                                                                 'strNombreParametroDet' => 'ESTADOS_CONTRATOS',
                                                                 'strEstadoParametro'    => 'Activo',
                                                                 'strEstadoServicio'     => $objInfoServicio->getEstado(),
                                                                 'strEstadoServicioHist' => 'PrePlanificada',
                                                                 'strOpcion'             => 'validaEstadosContrato'));
                if ($arrayDatosOS['status'] === 'fail')
                {
                    throw new \Exception('Error al validar Estado del Contrato del Cliente, idServicio: '.$intIdServicio.
                                         ', Mensaje: '.$arrayDatosOS['message']);
                }
                if (empty($arrayDatosOS['result']))                
                {
                    $objInfoServicioHistorial = $this->emcom->getRepository('schemaBundle:InfoServicioHistorial')
                                                     ->findOneBy(array('servicioId' => $objInfoServicio->getId()),
                                                                 array('id'         => 'DESC'));

                    if (is_object($objInfoServicioHistorial))
                    {
                        $strAccionHistorial = $objInfoServicioHistorial->getAccion();
                    }

                    $arrayParams = array('strNombreParametro' => $strNombreParametro, 
                                         'strProceso'         => $strParamDetProceso, 
                                         'strDescripcion'     => $strParamDetEstadoContrato);
                    
                    $strMsgErrorEstadoContrato = $this->getMensajeReprocesoOS($arrayParams);
                    if(!is_null($strMsgErrorEstadoContrato))
                    {
                        $strObservacionHistorial = $strMsgErrorEstadoContrato;
                    }
                    else
                    {
                        $strObservacionHistorial = "OS No procede para Reingreso Automático: El Contrato del Cliente no posee un estado valido.";
                    }
                    
                    if ($strAccionHistorial !== 'validaContrato' && strtoupper($strSoloValidar) === 'SI')
                    {
                        $this->putHistorialServicio(array('intIdServicio'      => $objInfoServicio->getId(),
                                                          'strObservacion'     => $strObservacionHistorial,
                                                          'strUsuarioCreacion' => "telcos_reingresos",
                                                          'strIpCreacion'      => $strIpCreacion,
                                                          'strAccion'          => 'validaContrato'));

                        /* =================== Envio de notificación ===================*/
                        $this->emcom->getRepository('schemaBundle:InfoPunto')
                             ->notificarProcesoReingresoOS(array('intIdServicio' => $objInfoServicio->getId(),
                                                                 'strMensaje'    => $strObservacionHistorial,
                                                                 'strUsuario'    => $strUsuarioCreacion,
                                                                 'strIp'         => $strIpCreacion));
                    }                    
                    if (strtoupper($strSoloValidar) === 'SI' || $strAccionHistorial == 'validaContrato' )
                    {
                        $boolInsertarMensaje = false;
                        throw new \Exception('Error : '.$strObservacionHistorial);
                    }
                }
            }
            //Validación de que los Datos geograficos no hayan sido editados posterior a la fecha de Preplanificación de la Orden de servicio.
            if ($strFlujo === 'completo' || in_array('validarDatosGeograficos',$strFlujo))
            {                                
                $arrayDatosSecOS = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                     ->getValidezServicio(array ('intIdServicio'         => $objInfoServicio->getId(),
                                                                 'strCaracteristica'     => 'SECTOR_ID',
                                                                 'strEstadoCaract'       => 'Activo',
                                                                 'strEstadoServicio'     => $objInfoServicio->getEstado(),
                                                                 'strEstadoServicioHist' => 'PrePlanificada',
                                                                 'strOpcion'             => 'validarSector'));                                      
                if ($arrayDatosSecOS['status'] === 'fail')
                {
                    throw new \Exception('Error al validar Datos Geograficos, idServicio: '.$intIdServicio.
                                         ', Mensaje: '.$arrayDatosSecOS['message']);
                }

                $arrayDatosCobOS = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                     ->getValidezServicio(array ('intIdServicio'         => $objInfoServicio->getId(),
                                                                 'strCaracteristica'     => 'PUNTO_COBERTURA_ID',
                                                                 'strEstadoCaract'       => 'Activo',
                                                                 'strEstadoServicio'     => $objInfoServicio->getEstado(),
                                                                 'strEstadoServicioHist' => 'PrePlanificada',
                                                                 'strOpcion'             => 'validarCobertura')); 
                if ($arrayDatosCobOS['status'] === 'fail')
                {
                    throw new \Exception('Error al validar Datos Geograficos, idServicio: '.$intIdServicio.
                                         ', Mensaje: '.$arrayDatosCobOS['message']);
                }

                if ($arrayDatosSecOS['result'][0]['modificaDatosGeograficos'] == 'S' 
                    || $arrayDatosCobOS['result'][0]['modificaDatosGeograficos'] == 'S')
                {                                                           
                    $objInfoServicioHistorial = $this->emcom->getRepository('schemaBundle:InfoServicioHistorial')
                                                     ->findOneBy(array('servicioId' => $objInfoServicio->getId()),
                                                                 array('id'         => 'DESC'));

                    if (is_object($objInfoServicioHistorial))
                    {
                        $strAccionHistorial = $objInfoServicioHistorial->getAccion();
                    }

                    $arrayParams = array('strNombreParametro' => $strNombreParametro, 
                                         'strProceso'         => $strParamDetProceso, 
                                         'strDescripcion'     => $strParamDetDatosGeograficos);
                    
                    $strMsgErrorDatosGeograficos = $this->getMensajeReprocesoOS($arrayParams);
                    if(!is_null($strMsgErrorDatosGeograficos))
                    {
                        $strObservacionHistorial = $strMsgErrorDatosGeograficos;                        
                    }
                    else
                    {
                        $strObservacionHistorial = "Se ha realizado la validación de Sectorización, ".
                                                   "OS no procede para el reingreso Automático";
                    }
                    
                    if ($strAccionHistorial !== 'validarDatosGeograficos' && strtoupper($strSoloValidar) === 'SI')
                    {
                        $this->putHistorialServicio(array('intIdServicio'      => $objInfoServicio->getId(),
                                                          'strObservacion'     => $strObservacionHistorial,
                                                          'strUsuarioCreacion' => "telcos_reingresos",
                                                          'strIpCreacion'      => $strIpCreacion,
                                                          'strAccion'          => 'validarDatosGeograficos'));

                        /* =================== Envio de notificación ===================*/
                        $this->emcom->getRepository('schemaBundle:InfoPunto')
                             ->notificarProcesoReingresoOS(array('intIdServicio' => $objInfoServicio->getId(),
                                                                 'strMensaje'    => $strObservacionHistorial,
                                                                 'strUsuario'    => $strUsuarioCreacion,
                                                                 'strIp'         => $strIpCreacion));
                    }                    
                    if (strtoupper($strSoloValidar) === 'SI' || $strAccionHistorial === 'validarDatosGeograficos' )
                    {
                        $boolInsertarMensaje = false;
                        throw new \Exception('Error : '.$strObservacionHistorial);
                    }                   
                }              
            }
            
            //Validación de los motivos configurados.
            if ($strFlujo === 'completo' || in_array('validarMotivos',$strFlujo))
            {
                $arrayDatosOS = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                     ->getValidezServicio(array ('intIdServicio'         => $objInfoServicio->getId(),
                                                                 'strNombreParametroCab' => 'PARAMETROS_REINGRESO_OS_AUTOMATICA',
                                                                 'strNombreParametroDet' => 'MOTIVOS_RECHAZO_ANULACION_OS_AUTOMATICA',
                                                                 'strEstadoParametro'    => 'Activo',
                                                                 'strEstadoServicio'     => $objInfoServicio->getEstado(),
                                                                 'strEstadoServicioHist' => $objInfoServicio->getEstado(),
                                                                 'strOpcion'             => 'motivos'));

                if (empty($arrayDatosOS) || $arrayDatosOS['status'] === 'fail')
                {
                    throw new \Exception('Error al validar los motivos, idServicio: '.$intIdServicio.
                                         ', Mensaje: '.$arrayDatosOS['message']);
                }

                if (empty($arrayDatosOS['result']))
                {
                    $boolInsertarMensaje = false;
                    throw new \Exception('Error : El proceso no retornó datos al momento de validar '.
                                         'los motivos configurados');
                }
            }
            //Validación de PrePlanificación previa.
            if ($strFlujo === 'completo' || in_array('validarPrePlanificacion',$strFlujo))
            {
                $arrayDatosOS = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                     ->getValidezServicio(array ('intIdServicio'         => $objInfoServicio->getId(),
                                                                 'strEstadoServicio'     => $objInfoServicio->getEstado(),
                                                                 'strEstadoServicioHist' => 'PrePlanificada',
                                                                 'strOpcion'             => 'PrePlanificacion'));

                if (empty($arrayDatosOS) || $arrayDatosOS['status'] === 'fail')
                {
                    throw new \Exception('Error al validar existencia de PrePlanificación previa, idServicio: '.$intIdServicio.
                                         ', Mensaje: '.$arrayDatosOS['message']);
                }

                if (empty($arrayDatosOS['result']))
                {
                    $boolInsertarMensaje = false;
                    throw new \Exception('Error : El servicio no cuenta con una fecha PrePlanificada, no es posible realizar reingreso automático.');
                }                                
            }

            if($strFlujo === 'completo' || in_array("validarFormaPago",$strFlujo))
            {
                $strError             = null;
                $emCom                = $this->emcom;
                $objInfoServicio      = $emCom->getRepository('schemaBundle:InfoServicio')->find($intIdServicio); //IdServicio Orgiinal(*Rechazada)
                $objInfoPunto   = $emCom->getRepository('schemaBundle:InfoPunto')->find($objInfoServicio->getPuntoId()->getId());
                $objContrato    = $emCom->getRepository('schemaBundle:InfoContrato')->findOneBy(array(
                                                                                        "personaEmpresaRolId"=>
                                                                                        $objInfoPunto->getPersonaEmpresaRolId()->getId()));
                
                $intIdContrato = $objContrato->getId();                

                $objInfoContratoFormaPagoHist =$emCom->getRepository('schemaBundle:InfoContratoFormaPago')
                                                        ->getUltimoHistorialFormaPago($intIdContrato);
                
                $boolCambioDeFormaPago = false;
                //Si hay historial de cambio de forma de pago entro a realizar validación por la fecha del ultimo registro del historial por cambio 
                //de forma de pago (INFO_CONTRATO_FORMA_PAGO_HIST), se valida si es mayor a la fecha de Preplanificación de la OS reingresada y se
                //valida si existe cambio en la información del debito.
                if(is_object($objInfoContratoFormaPagoHist))
                {
                    //SE OBTIENE LA FECHA DE PREPLANIFICACION DE LA O/S ORIGINAL
                    $arrayPreFactibi = $emCom->getRepository('schemaBundle:InfoServicioHistorial')->findBy(
                                                                                                        array('servicioId'=> $intIdServicio,
                                                                                                              'estado'    => 'PrePlanificada'));

                    $arrayParams = array();

                    $arrayParams["intContratoId"]   = $intIdContrato ;                    
                    $arrayParams["strFechaInicial"] = date_format($arrayPreFactibi[0]->getFeCreacion(),"Y/m/d G:i");
                    error_log("FePreplanificacion:". $arrayParams["strFechaInicial"]);

                    $arrayHistorialFormaPago        = $emCom->getRepository('schemaBundle:InfoContratoFormaPago')
                                                            ->getHistorialFormaPagoPorFecha($arrayParams);
                    
                    error_log("Historial actualizado luego de la fecha PreplanifOS-Rechazada: ".count($arrayHistorialFormaPago));
                    //Hay cambio(historial) desde la fecha de preplanificacion
                    if(!empty($arrayHistorialFormaPago))
                    {
                        //Verifico si existe infomación de debito bancario.
                        $objInfoContratoFormaPago  = $emCom->getRepository('schemaBundle:InfoContratoFormaPago')
                                                           ->findOneBy(array("contratoId" => $intIdContrato,
                                                                             "estado"     => 'Activo'));
                         
                        if(is_object($objInfoContratoFormaPago))
                        {
                            $intFormaPagoId       = $objContrato->getFormaPagoId()->getId();
                            $intBancoTipoCuentaId = $objInfoContratoFormaPago->getBancoTipoCuentaId()->getId();
                            $intNumeroCtaTarjeta  = $objInfoContratoFormaPago->getNumeroCtaTarjeta();
                            $intTipoCuentaId      = $objInfoContratoFormaPago->getTipoCuentaId()->getId();

                            $arrayParams["intFormaPagoId"]       = $intFormaPagoId;
                            $arrayParams["intBancoTipoCuentaId"] = $intBancoTipoCuentaId;
                            $arrayParams["intNumeroCtaTarjeta"]  = $intNumeroCtaTarjeta;
                            $arrayParams["intTipoCuentaId"]      = $intTipoCuentaId;
                            
                            //Verifico si hay cambio en la información del debito bancario respecto al ultimo registro de su historial.
                            $arrayHistorialFormaPago  = $emCom->getRepository('schemaBundle:InfoContratoFormaPago')
                                                              ->getHistorialFormaPagoPorFecha($arrayParams);
                            
                            error_log("Los parametros iguales(formaPago-formaPagoH): " . count($arrayHistorialFormaPago));
                            //Verificamos si el ultimo historial de forma de pago es igual a infocontratoformapaago
                            if(empty($arrayHistorialFormaPago))
                            {
                                $boolCambioDeFormaPago = true;
                            }                            
                        }
                        else
                        {
                            $boolCambioDeFormaPago = true;
                        }
                        
                        //Sin bandera 
                        if($boolCambioDeFormaPago)
                        {
                             $strError    = "OS No procede para Reingreso Automático<br>Motivo: Cambio de Forma de Pago";
                                $arrayParams = array('strNombreParametro' => $strNombreParametro,
                                                     'strProceso'         => $strParamDetProceso,
                                                     'strDescripcion'     => $strDetFormaPago);
                                $strMsgError = $this->getMensajeReprocesoOS($arrayParams);

                                if(is_null($strMsgError))
                                {
                                    $strMsgError = $strError;
                                }
                               
                                $this->putHistorialServicio(array('intIdServicio'      => $intIdServicio,
                                                                  'strObservacion'     => $strMsgError,
                                                                  'strUsuarioCreacion' => "telcos_reingresos",
                                                                  'strIpCreacion'      => $strIpCreacion,
                                                                  'strAccion'          => 'forma_pago'));

                                /* =================== Envio de notificación =================== */
                                $this->emcom->getRepository('schemaBundle:InfoPunto')->notificarProcesoReingresoOS(
                                                           array('intIdServicio' => $intIdServicio,
                                                                 'strMensaje'    => $strMsgError,
                                                                 'strUsuario'    => $strUsuarioCreacion,
                                                                 'strIp'         => $strIpCreacion));

                                $boolInsertarMensaje = false; //No guarda mensaje en info_error
                                throw new \Exception("Error : " . $strMsgError);
                        }
                    }                                       
                }
            }
            
            //Validación de factura de instalacion existente
            if ($strFlujo === 'completo' || in_array('validarFacturaInstalacion',$strFlujo))
            {         
                $arrayServicios[] = $intIdServicio; 
                $arrayEstadosTodos  = array("Pendiente","Activo","Cerrado");
                //SE PROCEDE A CONSULTAR SI EXISTE UNA FACTURA DE INSTALACIÓN ENTRE LOS ESTADOS VALIDOS.
                $strFactInstPagada  = $this->emfinan->getRepository("schemaBundle:InfoDocumentoFinancieroCab")
                                                         ->esUltimaFactInstalacionPagada(array("arrayServicios"     => $arrayServicios,
                                                                                               "strNombreParametro" => "SOLICITUDES_DE_CONTRATO",
                                                                                               "arrayEstadosFact"   => $arrayEstadosTodos));
                 //La factura de instalacion ha sido pagada, sino se procede a verificar si tiene Anticipo
                if($strFactInstPagada === "S")
                {
                   $strMsgFactura = null;     
                }
                else
                {
                    $arrayParams = array('strNombreParametro' => $strNombreParametro, 
                                         'strProceso'         => $strParamDetProceso, 
                                         'strDescripcion'     => $strDetFacturaActiva);
                    $strMsgFactura = $this->getMensajeReprocesoOS($arrayParams);
                    if(is_null($strMsgFactura))
                    {
                        $strMsgFactura = "*Posee Factura de Instalación en estado Activo.";
                    }
                    
                    //SE OBTIENE EL ÚLTIMO ESTADO DE UNA FACTURA DE INSTALACIÓN PARA EVALUAR FACTURAS CERRADAS O PENDIENTES.
                    $arrayDatosFactura  = $this->emfinan->getRepository("schemaBundle:InfoDocumentoFinancieroCab")
                    ->datosUltimaFactInstalacion(array("arrayServicios"     => $arrayServicios,
                                                    "strNombreParametro" => "SOLICITUDES_DE_CONTRATO"));

                     
                    if($arrayDatosFactura[0]['strEstado'] === "Pendiente" || $arrayDatosFactura[0]['strEstado'] === "Activo")
                    {
                        
                        $entityServicio     = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                            ->find($intIdServicio);
                        $intIdPunto = $entityServicio->getPuntoId()->getId();
                        $intIdOficina                   = $entityServicio->getPuntoId()->getPuntoCoberturaId()->getOficinaId();
                        
                        $arrayParams = array();
                        $arrayParams['intIdOficina'] = $intIdOficina;
                        $arrayParams['intIdPunto']   = $intIdPunto;
                        $arrayParams['strEstado']    = "Pendiente";

                        $intValorTotalAnt = $this->getValorTotalAnticipos($arrayParams);
                        
                        $objInfoDocumentoFinancieroCab  = $this->emfinan
                                                                    ->getRepository("schemaBundle:InfoDocumentoFinancieroCab")
                                                                    ->find($arrayDatosFactura[0]['idDocumento']);
                        $intSaldoFactura                = $objInfoDocumentoFinancieroCab->getValorTotal();

                        if($intValorTotalAnt >= $intSaldoFactura)
                        {
                            $strMsgFactura = null;
                        }
                        else 
                        {
                            $arrayParams = array('strNombreParametro' => $strNombreParametro, 
                            'strProceso'         => $strParamDetProceso, 
                            'strDescripcion'     => $strDetNoAnticipos);
                            
                            $strMsgAnticipo = $this->getMensajeReprocesoOS($arrayParams);
                            if(is_null($strMsgAnticipo))
                            {
                                $strMsgFactura = $strMsgFactura."<br>No existen anticipos de valor mayor".
                                                        " o igual a la factura";
                            }
                            else 
                            {
                                $strMsgFactura = $strMsgFactura."<br>".$strMsgAnticipo;
                            }
                            
                        }
                        
                        $strObservacionHistorial = $strMsgFactura;
                    
                    }
                }
                if(!is_null($strMsgFactura))
                {       
                    $this->putHistorialServicio(array ('intIdServicio'      => $intIdServicio,
                                                        'strObservacion'     => $strObservacionHistorial,
                                                        'strUsuarioCreacion' => "telcos_reingresos",
                                                        'strIpCreacion'      => $strIpCreacion,
                                                        'strAccion'          => 'factura_instalacion'));

                    /* =================== Envio de notificación ===================*/
                    $this->emcom->getRepository('schemaBundle:InfoPunto')->notificarProcesoReingresoOS(
                                                                                        array('intIdServicio' => $intIdServicio,
                                                                                        'strMensaje'    => $strObservacionHistorial,
                                                                                        'strUsuario'    => $strUsuarioCreacion,
                                                                                        'strIp'         => $strIpCreacion));
                                                                                        

                    $boolInsertarMensaje = false; //No guarda mensaje en info_error

                    throw new \Exception('Error : '.$strObservacionHistorial);
                }
            } //Fin de validacion factura de instalacion
            
            //Validación de los días permitidos.
            if ($strFlujo === 'completo' || in_array('validarDiasOrdenServicio',$strFlujo))
            {                
                $arrayParametrosReingresoOS = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('PARAMETROS_REINGRESO_OS_AUTOMATICA','','','DIAS_RECHAZO_OS_AUTOMATICA','','','','','',
                                                             $strCodEmpresa);

                if (!empty($arrayParametrosReingresoOS) && !empty($arrayParametrosReingresoOS['valor1']))
                {
                    $intDiasPermitidos = intval($arrayParametrosReingresoOS['valor1']);
                }

                $arrayDatosOS = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                     ->getValidezServicio(array ('intIdServicio'         => $objInfoServicio->getId(),
                                                                 'strEstadoServicio'     => $objInfoServicio->getEstado(),
                                                                 'strEstadoServicioHist' => 'PrePlanificada',
                                                                 'strOpcion'             => 'dias'));

                if (empty($arrayDatosOS) || $arrayDatosOS['status'] === 'fail')
                {
                    throw new \Exception('Error al validar los días permitidos, idServicio: '.$intIdServicio.
                                         ', Mensaje: '.$arrayDatosOS['message']);
                }

                if (empty($arrayDatosOS['result']))
                {
                    $boolInsertarMensaje = false;
                    throw new \Exception('Error : El servicio no cuenta con una fecha PrePlanificada.');
                }

                if ($arrayDatosOS['result'][0]['dias'] > $intDiasPermitidos)
                {
                    $objInfoServicioHistorial = $this->emcom->getRepository('schemaBundle:InfoServicioHistorial')
                                                     ->findOneBy(array('servicioId' => $objInfoServicio->getId()),
                                                                 array('id'         => 'DESC'));

                    if (is_object($objInfoServicioHistorial))
                    {
                        $strAccionHistorial = $objInfoServicioHistorial->getAccion();
                    }

                    $arrayParams = array('strNombreParametro' => $strNombreParametro, 
                                         'strProceso'         => $strParamDetProceso, 
                                         'strDescripcion'     => $strParamDetDiasPermitidos);
                    
                    $strMsgErrorDiasReingreso = $this->getMensajeReprocesoOS($arrayParams);
                    if(!is_null($strMsgErrorDiasReingreso))
                    {
                        $strObservacionHistorial = $strMsgErrorDiasReingreso;
                        $strObservacionHistorial = str_replace("{DiasPermitidos}", $intDiasPermitidos, $strObservacionHistorial);
                    }
                    else
                    {
                        $strObservacionHistorial = "No se creó el servicio mediante Reingreso Automático, ".
                                               "motivo Cliente sobrepasa los $intDiasPermitidos ".
                                               "días permitidos para Reingreso automático.";
                    }
                    
                    if ($strAccionHistorial !== 'diasPermitidos' && strtoupper($strSoloValidar) === 'SI')
                    {
                        $this->putHistorialServicio(array('intIdServicio'      => $objInfoServicio->getId(),
                                                          'strObservacion'     => $strObservacionHistorial,
                                                          'strUsuarioCreacion' => "telcos_reingresos",
                                                          'strIpCreacion'      => $strIpCreacion,
                                                          'strAccion'          => 'diasPermitidos'));

                        /* =================== Envio de notificación ===================*/
                        $this->emcom->getRepository('schemaBundle:InfoPunto')
                             ->notificarProcesoReingresoOS(array('intIdServicio' => $objInfoServicio->getId(),
                                                                 'strMensaje'    => $strObservacionHistorial,
                                                                 'strUsuario'    => $strUsuarioCreacion,
                                                                 'strIp'         => $strIpCreacion));
                    }                    
                    if (strtoupper($strSoloValidar) === 'SI' || $strAccionHistorial == 'diasPermitidos' )
                    {
                        $boolInsertarMensaje = false;
                        throw new \Exception('Error : '.$strObservacionHistorial);
                    }
                }
            }

            //Verificación que el servicio no se encuentre reingresado o en proceso o flujo de Reingreso Automático.
            if ($strFlujo === 'completo' || in_array('validarReingresoEjecutado',$strFlujo))
            {                
                $arrayDatosOS = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                     ->getValidezServicio(array ('intIdServicio'         => $objInfoServicio->getId(),
                                                                 'strEstadoServicio'     => $objInfoServicio->getEstado(),
                                                                 'strEstadoServicioHist' => 'PrePlanificada',
                                                                 'strOpcion'             => 'reingresoEjecutado',
                                                                 'strCaracteristica'     => 'ID_SERVICIO_REINGRESO',
                                                                 'strEstadoCaract'       => 'Activo'));

                if (empty($arrayDatosOS) || $arrayDatosOS['status'] === 'fail')
                {
                    throw new \Exception('Error al realizar la verificación que el servicio no se encuentre clonado o ya reingresado, idServicio: '
                        .$intIdServicio.', Mensaje: '.$arrayDatosOS['message']);
                }

                if (empty($arrayDatosOS['result']))
                {
                    $boolInsertarMensaje = false;                                        
                    $arrayParams = array('strNombreParametro' => $strNombreParametro, 
                                         'strProceso'         => $strParamDetProceso, 
                                         'strDescripcion'     => $strDetReingresoEjecutado);
                    
                    $strMsgErrorReingresoEjecutado = $this->getMensajeReprocesoOS($arrayParams);

                    if(!is_null($strMsgErrorReingresoEjecutado) )
                    {
                        $strObservacionHistorial = $strMsgErrorReingresoEjecutado;
                    }
                    else
                    {    
                        $strObservacionHistorial = 'Error : El servicio ya cuenta con una clonación por reingreso de OS automática en proceso.';
                    }
                    throw new \Exception($strObservacionHistorial);                     
                }                                                                
            }
            //Verificación que el servicio reingresado haya concluido el Proceso de Reingreso Automático para ocultar el botón de reingreso.
            if ($strFlujo === 'completo' || in_array('validarReingresoFinalizado',$strFlujo))
            {                
                $arrayDatosOS = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                     ->getValidezServicio(array ('intIdServicio'         => $objInfoServicio->getId(),
                                                                 'strEstadoServicio'     => $objInfoServicio->getEstado(),
                                                                 'strEstadoServicioHist' => 'PrePlanificada',
                                                                 'strOpcion'             => 'reingresoFinalizado',
                                                                 'strCaracteristica'     => 'ID_SERVICIO_REINGRESO',
                                                                 'strEstadoCaract'       => 'Activo',
                                                                 'strCaracteristica2'    => 'NO_PASO_CONVERTIR_OT',
                                                                 'strEstadoCaract2'      => 'Inactivo'));               
                
                if (empty($arrayDatosOS) || $arrayDatosOS['status'] === 'fail')
                {
                    throw new \Exception('Error al realizar la verificación que el servicio reingresado haya concluido el Proceso de Reingreso'
                        . ' Automático , idServicio: '
                        .$intIdServicio.', Mensaje: '.$arrayDatosOS['message']);
                }

                if (empty($arrayDatosOS['result']))
                {
                    $boolInsertarMensaje = false;
                     throw new \Exception('Error : El servicio ya ha sido reingresado y ha concluido su Proceso de Reingreso Automático');
                }                                                                
            }

            //Validación para las facturas de instalación con devoluciones.
            if ($strFlujo === 'completo' || in_array('devoluciones',$strFlujo))
            {
                //Obtengo si existen Facturas de Instalacion cerradas con pagos a las cuales se les aplico NC , NDI , ANT y  DEV
                $arrayDocumentoConDevolucion = $this->emfinan->getRepository('schemaBundle:InfoDocumentoFinancieroCab')
                                                 ->getDocumentoDevolucion(array('intIdPunto'         => $objInfoServicio->getPuntoId()->getId(),
                                                                                'arrayEstadosPagos'  => array('Cerrado','Activo'),
                                                                                'strEstadoActivo'    => 'Activo',
                                                                                'strEstadoEliminado' => 'Eliminado',
                                                                                'arrayEstadoFactura' => array('Pendiente','Activo','Cerrado'), 
                                                                                'arrayTipoDocumento' => array('FACP','FAC'),
                                                                                'strNombreParametro' => 'SOLICITUDES_DE_CONTRATO',
                                                                                'strValor'           => 'S',
                                                                                'strPagada'          => 'N'));
                //Obtengo si existen Facturas de Instalacion cerradas con pagos sin DEV
                $arrayDocumentoSinDevolucion = $this->emfinan->getRepository('schemaBundle:InfoDocumentoFinancieroCab')
                                                 ->getDocumentoDevolucion(array('intIdPunto'         => $objInfoServicio->getPuntoId()->getId(),
                                                                                'arrayEstadosPagos'  => array('Cerrado','Activo'),
                                                                                'strEstadoActivo'    => 'Activo',
                                                                                'strEstadoEliminado' => 'Eliminado',
                                                                                'arrayEstadoFactura' => array('Pendiente','Activo','Cerrado'), 
                                                                                'arrayTipoDocumento' => array('FACP','FAC'),
                                                                                'strNombreParametro' => 'SOLICITUDES_DE_CONTRATO',
                                                                                'strValor'           => 'S',
                                                                                'strPagada'          => 'S'));
                
                if (!$arrayDocumentoConDevolucion['status'])
                {
                    throw new \Exception('Error al consultar Facturas de Instalación con documento devolución - '.
                        $arrayDocumentoConDevolucion['message']);
                }
                if (!$arrayDocumentoSinDevolucion['status'])
                {
                    throw new \Exception('Error al consultar Facturas de Instalación sin documento devolución - '.
                        $arrayDocumentoSinDevolucion['message']);
                }

                if ((!empty($arrayDocumentoConDevolucion['result']) && count($arrayDocumentoConDevolucion['result']) > 0)
                    && empty($arrayDocumentoSinDevolucion['result']))
                {
                    $objInfoServicioHistorial = $this->emcom->getRepository('schemaBundle:InfoServicioHistorial')
                                                     ->findOneBy(array('servicioId' => $objInfoServicio->getId()),
                                                                 array('id'         => 'DESC'));

                    if (is_object($objInfoServicioHistorial))
                    {
                        $strAccionHistorial = $objInfoServicioHistorial->getAccion();
                    }
                    $arrayParams = array('strNombreParametro' => $strNombreParametro, 
                                         'strProceso'         => $strParamDetProceso, 
                                         'strDescripcion'     => $strParamDetDevolucionFactura);
                    
                    $strMsgErrorDevolucionFactura = $this->getMensajeReprocesoOS($arrayParams);

                    if(!is_null($strMsgErrorDevolucionFactura) )
                    {
                        $strObservacionHistorial = $strMsgErrorDevolucionFactura;
                    }
                    else
                    {
                        $strObservacionHistorial = "No se creo el servicio mediante Reingreso Automático, ".
                                               "motivo Cliente posee una devolución o no ha pagado la Factura de Instalación: ";
                    }
                    if ($strAccionHistorial !== 'devoluciones')
                    {
                        $this->putHistorialServicio(array ('intIdServicio'      => $objInfoServicio->getId(),
                                                           'strObservacion'     => $strObservacionHistorial,
                                                           'strUsuarioCreacion' => "telcos_reingresos",
                                                           'strIpCreacion'      => $strIpCreacion,
                                                           'strAccion'          => 'devoluciones'));

                        /* =================== Envio de notificación ===================*/
                        $this->emcom->getRepository('schemaBundle:InfoPunto')->notificarProcesoReingresoOS(
                                array('intIdServicio' => $objInfoServicio->getId(),
                                      'strMensaje'    => $strObservacionHistorial,
                                      'strUsuario'    => $strUsuarioCreacion,
                                      'strIp'         => $strIpCreacion));
                    }

                    $boolInsertarMensaje = false;
                    throw new \Exception('Error : '.$strObservacionHistorial);
                }
            }

            //Ha este punto se cumplieron todas las validaciones.
            $arrayRespuesta = array ('status'  => true);
        }
        catch (\Exception $objException)
        {
            error_log($objException->getMessage());
            $strMessage = 'Error al validar el reingreso de la orden de servicio.';

            if (strpos($objException->getMessage(),'Error : ') !== false)
            {
                $strMessage = $objException->getMessage();
            }

            if ($boolInsertarMensaje)
            {
                $this->utilServicio->insertError('Telcos+',
                                                 'InfoServicioService->validarReingresoOrdenServicio',
                                                  substr($objException->getMessage(), 0, 4000),
                                                  $strUsuarioCreacion ? $strUsuarioCreacion : 'Telcos+',
                                                  $strIpCreacion ? $strIpCreacion : '127.0.0.1');
            }

            $arrayRespuesta = array ('status'  => false,
                                     'message' => $strMessage);
        }
        return $arrayRespuesta;
    }
     /**
     * Funcion que retorna el total de anticipos de un punto
     * @param     $arrayAntPendientes [
     *                              intIdOficina    : Id Oficina 
     *                              intIdPunto      : Id punto del anticipo
     *                              strEstado       : Estado del Documento
     *                              ]
     * 
	 * @return number Total de anticipos del punto
	 *
     * @author Gustavo Narea <gnarea@telconet.ec>
     * @version 1.0 03-11-2020
     * 
     */
    
    public function getValorTotalAnticipos($arrayParams)
    {
        $intIdOficina = $arrayParams["intIdOficina"];
        $intIdPunto = $arrayParams["intIdPunto"];
        $strEstado    = $arrayParams["strEstado"];
        $arrayAnticipos                 = $this->emfinan->getRepository('schemaBundle:InfoDocumentoFinancieroCab')
                                                                            ->findAnticiposEstadoDeCuenta($intIdOficina, 
                                                                                                        "", 
                                                                                                        "", 
                                                                                                        $intIdPunto, 
                                                                                                        $strEstado);
        $arrayAntPendientes = $arrayAnticipos['registros'];
        //Calculando el total de anticipos
                        
        if(!empty($arrayAntPendientes))
        {
            foreach($arrayAntPendientes as $arrayInfoAntPendientes)
            {
                $intValorAnt      = $arrayInfoAntPendientes['valorTotal'];
                $intValorTotalAnt = $intValorTotalAnt + $intValorAnt;
            }
        }
        else
        {
            $intValorTotalAnt  = 0;
        }
        return $intValorTotalAnt;
    }
    /**
     * Función que retorna los mensajes parametrizados de base de datos, usados en
     * las validaciones antes de clonar una Orden de Servicio.
     * @param     $arrayParametros [
     *                              strNombreParametro : Nombre del Parametro en admi_parametro_cab
     *                              strProceso      : Nombre del Proceso en admi_parametro_cab
     *                              strDescripcion  : Descripcon de admi_parametro_cab
     *                              ]
     * 
	 * @return string $strMsg Mensaje de validacion 
	 *
     * @author Gustavo Narea <gnarea@telconet.ec>
     * @version 1.0 27-10-2020
     * 
     */
    public function getMensajeReprocesoOS($arrayParams)
    {
        $strParametroCab    = $arrayParams['strNombreParametro'];
        $strProceso         = $arrayParams['strProceso'];
        $strDescripcion     = $arrayParams['strDescripcion'];
        error_log($strParametroCab);
        error_log($strProceso);
        error_log($strDescripcion);
        $arrayMsg = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                ->getOne(
                                $strParametroCab,
                                '',//modulo
                                $strProceso,//proceso-
                                $strDescripcion,//descripcion
                                '',//valor1
                                '',
                                '',
                                '',
                                '',
                                '18');
        
        $strMsg = (isset($arrayMsg) && !empty($arrayMsg)) ? $arrayMsg["valor1"] : null;
        return $strMsg;
    }

    /**
     * Método para crear un concentrador virtual
     *
     * @author Walther Joao Gaibor C <wgaibor@telconet.ec>
     * @version 1.0 - 31-10-2019
     *
     * @param type $arrayParametros
     * @return type $arrayRespuesta
     * @throws \Exception
     */
    public function concentradorVirtual($arrayParametros)
    {
        $emComercial            = $this->emcom;
        $emGeneral              = $this->emgen;
        $emInfraestructura      = $this->eminf;
        $arrayRespuesta         = array();
        $strStatus              = "OK";
        $strMensaje             = "";
        $objPunto               = $arrayParametros['objPunto'];
        $strEstado              = $arrayParametros['estado'];
        $objServicio            = $arrayParametros['objServicio'];
        $strUsuario             = $arrayParametros['strUsuario'];
        $strIpCreacion          = $arrayParametros['strIpCreacion'];
        $strCodEmpresa          = $arrayParametros['strEmpresaCod'];
        $strNombreTecnico       = $arrayParametros['strNombreTecnico'];
        $strLoginAux            = $arrayParametros['strLoginAux'];
        $strUltimaMillaId       = $arrayParametros['strUltimaMillaId'];
        $strTipoEnlace          = $arrayParametros['strTipoEnlace'];
        $strCapacidad1          = $arrayParametros['strCapacidad1'];
        $strCapacidad2          = $arrayParametros['strCapacidad2'];
        $objPuntoOrigen         = $arrayParametros['objPuntoOrigen'];
        $strPrefijoEmpresa      = $arrayParametros['strPrefijoEmpresa'];

        $boolCrearConcentrador  = true;
        $emComercial->getConnection()->beginTransaction();
        try
        {
            $objProdConcentrador    = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                  ->findOneBy(array("nombreTecnico"   =>  $strNombreTecnico,
                                                                    "estado"          =>  "Activo",
                                                                    "esConcentrador"  =>  "SI",
                                                                    "empresaCod"      =>  $strCodEmpresa));
            $intIdOficinaServicio   = is_object($objPunto->getPuntoCoberturaId()) ?
                                                 $objPunto->getPuntoCoberturaId()->getOficinaId() : 0;
            $objOficinaServicio     = $emComercial->getRepository("schemaBundle:InfoOficinaGrupo")
                                                  ->find($intIdOficinaServicio);
            if(is_object($objOficinaServicio))
            {
                $objCantonServicio = $emGeneral->getRepository("schemaBundle:AdmiCanton")
                                               ->find($objOficinaServicio->getCantonId());
                if(is_object($objCantonServicio))
                {
                    $strRegionServicio = $objCantonServicio->getRegion();
                }
            }
            //Consultar si tiene un concentrador virtual de INTERCONEXION
            $objCaracteristicaEnlaceDatos = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                        ->findOneBy(array(
                                                                          "descripcionCaracteristica" => 'CONCENTRADOR_FWA',
                                                                          "estado"                    => $strEstado
                                                                         ));
            $arrayConcentradorVirtual     = $emComercial->getRepository('schemaBundle:InfoPersonaEmpresaRolCarac')
                                                        ->findBy(array(
                                                                        'personaEmpresaRolId' => $objPunto->getPersonaEmpresaRolId(),
                                                                        'caracteristicaId'    => $objCaracteristicaEnlaceDatos->getId(),
                                                                        'estado'              => $strEstado));
            if(isset($arrayConcentradorVirtual) && !empty($arrayConcentradorVirtual))
            {
                foreach($arrayConcentradorVirtual as $objPerEmprRolCarac)
                {
                    $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                      ->findOneByServicioId($objPerEmprRolCarac->getValor());
                    if(!is_object($objServicioTecnico))
                    {
                        throw new \Exception("No se puede obtener el elemento del concentrador");
                    }
                    $objElementoConcentradorFWA         = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                              ->findOneById($objServicioTecnico->getElementoId());
                    if(!is_object($objElementoConcentradorFWA))
                    {
                        throw new \Exception("No existe el elemento del concentrador");
                    }
                    $arrayParametrosWs["intIdElemento"] = $objElementoConcentradorFWA->getId();
                    $arrayParametrosWs["intIdServicio"] = $objPerEmprRolCarac->getValor();

                    $objElementoPe  = $this->servicioTecnico->getPeBySwitch($arrayParametrosWs);
                    if(!is_object($objElementoPe))
                    {
                        throw new \Exception("No se puede obtener el pe del concentrador");
                    }
                    $arrayUbicacionPeFWA   = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                ->getUbicacionElementoNodo($objElementoPe->getId());
                    if(empty($arrayUbicacionPeFWA))
                    {
                        throw new \Exception("No se puede obtener la ubicación del pe del concentrador");
                    }
                    $intCantonPeFWA = $arrayUbicacionPeFWA[0]['idCanton'];
                    $objCantonPeFWA = $emComercial->getRepository("schemaBundle:AdmiCanton")
                                                  ->findOneById($intCantonPeFWA);
                    if(is_object($objCantonPeFWA))
                    {
                        $strRegionConcentradorVirtual = $objCantonPeFWA->getRegion();
                    }

                    if($strRegionServicio == $strRegionConcentradorVirtual)
                    {
                        $this->servicioTecnico
                             ->ingresarServicioProductoCaracteristica($objServicio,
                                                                      $objProdConcentrador,
                                                                      $objCaracteristicaEnlaceDatos->getDescripcionCaracteristica(),
                                                                      $objPerEmprRolCarac->getValor(),
                                                                      $strUsuario
                                                                      );
                        $boolCrearConcentrador = false;
                        $strMensaje = " Se adiciona la caracteristica ".$objCaracteristicaEnlaceDatos->getDescripcionCaracteristica();
                        break;
                    }
                }
            }
            if($boolCrearConcentrador)
            {
                $strEstado         = 'PreFactibilidad';

                $objServicioR1 = new InfoServicio();
                $objServicioR1->setPuntoId($objPuntoOrigen);
                $objServicioR1->setTipoOrden('N');
                $objServicioR1->setEsVenta('N');
                $objServicioR1->setPrecioVenta("0.00");
                $objServicioR1->setEstado($strEstado);
                $objServicioR1->setCantidad(1);
                $objServicioR1->setFrecuenciaProducto(1);
                $objServicioR1->setProductoId($objProdConcentrador);
                $objServicioR1->setDescripcionPresentaFactura("Concentrador Virtual de Interconexión");
                $objServicioR1->setLoginAux($strLoginAux);
                $objServicioR1->setIpCreacion($strIpCreacion);
                $objServicioR1->setUsrCreacion($strUsuario);
                $objServicioR1->setFeCreacion(new \DateTime('now'));

                $emComercial->persist($objServicioR1);
                $emComercial->flush();

                $objServicioR2 = new InfoServicio();
                $objServicioR2->setPuntoId($objPuntoOrigen);
                $objServicioR2->setTipoOrden('N');
                $objServicioR2->setEsVenta('N');
                $objServicioR2->setPrecioVenta("0.00");
                $objServicioR2->setEstado($strEstado);
                $objServicioR2->setCantidad(1);
                $objServicioR2->setFrecuenciaProducto(1);
                $objServicioR2->setProductoId($objProdConcentrador);
                $objServicioR2->setDescripcionPresentaFactura("Concentrador Virtual de Interconexión");
                $objServicioR2->setLoginAux($strLoginAux);
                $objServicioR2->setIpCreacion($strIpCreacion);
                $objServicioR2->setUsrCreacion($strUsuario);
                $objServicioR2->setFeCreacion(new \DateTime('now'));

                $emComercial->persist($objServicioR2);
                $emComercial->flush();

                $objServicioOrigenHistR1 = new InfoServicioHistorial();
                $objServicioOrigenHistR1->setServicioId($objServicioR1);
                $objServicioOrigenHistR1->setObservacion('Se Creo el servicio concentrador por Enlace de Datos');
                $objServicioOrigenHistR1->setIpCreacion($strIpCreacion);
                $objServicioOrigenHistR1->setFeCreacion(new \DateTime('now'));
                $objServicioOrigenHistR1->setUsrCreacion($strUsuario);
                $objServicioOrigenHistR1->setEstado($strEstado);
                $emComercial->persist($objServicioOrigenHistR1);
                $emComercial->flush();

                $objServicioOrigenHistR2 = new InfoServicioHistorial();
                $objServicioOrigenHistR2->setServicioId($objServicioR2);
                $objServicioOrigenHistR2->setObservacion('Se Creo el servicio concentrador por Enlace de Datos');
                $objServicioOrigenHistR2->setIpCreacion($strIpCreacion);
                $objServicioOrigenHistR2->setFeCreacion(new \DateTime('now'));
                $objServicioOrigenHistR2->setUsrCreacion($strUsuario);
                $objServicioOrigenHistR2->setEstado($strEstado);
                $emComercial->persist($objServicioOrigenHistR2);
                $emComercial->flush();

                $objTipoSolicitud = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                ->findOneByDescripcionSolicitud("SOLICITUD FACTIBILIDAD");

                $objSolicitudR1     = new InfoDetalleSolicitud();
                $objSolicitudR1->setServicioId($objServicioR1);
                $objSolicitudR1->setTipoSolicitudId($objTipoSolicitud);
                $objSolicitudR1->setEstado($strEstado);
                $objSolicitudR1->setUsrCreacion($strUsuario);
                $objSolicitudR1->setObservacion('Solicitud de Factibilidad CONCENTRADOR VIRTUAL FWA');
                $objSolicitudR1->setFeCreacion(new \DateTime('now'));
                $emComercial->persist($objSolicitudR1);
                $emComercial->flush();

                $objSolicitudR2     = new InfoDetalleSolicitud();
                $objSolicitudR2->setServicioId($objServicioR2);
                $objSolicitudR2->setTipoSolicitudId($objTipoSolicitud);
                $objSolicitudR2->setEstado($strEstado);
                $objSolicitudR2->setUsrCreacion($strUsuario);
                $objSolicitudR2->setObservacion('Solicitud de Factibilidad CONCENTRADOR VIRTUAL FWA');
                $objSolicitudR2->setFeCreacion(new \DateTime('now'));
                $emComercial->persist($objSolicitudR2);
                $emComercial->flush();

                //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                $objDetalleSolHistR1 = new InfoDetalleSolHist();
                $objDetalleSolHistR1->setDetalleSolicitudId($objSolicitudR1);
                $objDetalleSolHistR1->setIpCreacion($strIpCreacion);
                $objDetalleSolHistR1->setFeCreacion(new \DateTime('now'));
                $objDetalleSolHistR1->setUsrCreacion($strUsuario);
                $objDetalleSolHistR1->setObservacion('Solicitud de Factibilidad CONCENTRADOR VIRTUAL FWA');
                $objDetalleSolHistR1->setEstado($strEstado);
                $emComercial->persist($objDetalleSolHistR1);
                $emComercial->flush();

                $objDetalleSolHistR2 = new InfoDetalleSolHist();
                $objDetalleSolHistR2->setDetalleSolicitudId($objSolicitudR2);
                $objDetalleSolHistR2->setIpCreacion($strIpCreacion);
                $objDetalleSolHistR2->setFeCreacion(new \DateTime('now'));
                $objDetalleSolHistR2->setUsrCreacion($strUsuario);
                $objDetalleSolHistR2->setObservacion('Solicitud de Factibilidad CONCENTRADOR VIRTUAL FWA');
                $objDetalleSolHistR2->setEstado($strEstado);
                $emComercial->persist($objDetalleSolHistR2);
                $emComercial->flush();

                // InfoServicioTecnico
                $objServicioTecnicoR1 = new InfoServicioTecnico();
                $objServicioTecnicoR1->setServicioId($objServicioR1);
                $objServicioTecnicoR1->setUltimaMillaId($strUltimaMillaId);
                $objServicioTecnicoR1->setTipoEnlace($strTipoEnlace);
                $emComercial->persist($objServicioTecnicoR1);
                $emComercial->flush();

                $objServicioTecnicoR2 = new InfoServicioTecnico();
                $objServicioTecnicoR2->setServicioId($objServicioR2);
                $objServicioTecnicoR2->setUltimaMillaId($strUltimaMillaId);
                $objServicioTecnicoR2->setTipoEnlace($strTipoEnlace);
                $emComercial->persist($objServicioTecnicoR2);
                $emComercial->flush();

                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioR1,
                                                                               $objProdConcentrador,
                                                                               'CAPACIDAD1',
                                                                               $strCapacidad1,
                                                                               $strUsuario
                                                                              );
                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioR2,
                                                                               $objProdConcentrador,
                                                                               'CAPACIDAD1',
                                                                               $strCapacidad1,
                                                                               $strUsuario
                                                                              );

                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioR1,
                                                                               $objProdConcentrador,
                                                                               'CAPACIDAD2',
                                                                               $strCapacidad2,
                                                                               $strUsuario
                                                                              );
                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioR2,
                                                                               $objProdConcentrador,
                                                                               'CAPACIDAD2',
                                                                               $strCapacidad2,
                                                                               $strUsuario
                                                                              );

                
                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioR1,
                                                                               $objProdConcentrador,
                                                                               'INTERCONEXION_CLIENTES',
                                                                               'S',
                                                                               $strUsuario
                                                                              );
                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioR2,
                                                                               $objProdConcentrador,
                                                                               'INTERCONEXION_CLIENTES',
                                                                               'S',
                                                                               $strUsuario
                                                                              );

                $strEnlaceDatos               = 'CONCENTRADOR_FWA';
                //creacion de registros para el nuevo enlace de datos hacia el Nuevo Concentrador
                $objCaracteristicaEnlaceDatos = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                            ->findOneBy(array(
                                                                               "descripcionCaracteristica" => $strEnlaceDatos,
                                                                               "estado"                    => "Activo"
                                                                             ));

                $this->utilServicio->validaObjeto($objCaracteristicaEnlaceDatos,"No existe Caracteristica de CONCENTRADOR FWA");

                $objCaractConcentradorFWA     = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                            ->findOneBy(array(
                                                                               "productoId"       => $objProdConcentrador->getId(),
                                                                               "caracteristicaId" => $objCaracteristicaEnlaceDatos->getId(),
                                                                               "estado"           => "Activo"
                                                                              ));
                if(is_object($objCaractConcentradorFWA))
                {
                    //Crear caracteristica de concentrador INTERCONEXION FWA
                    $objPersonaEmpresaRolCaracR1 = new InfoPersonaEmpresaRolCarac();
                    $objPersonaEmpresaRolCaracR1->setPersonaEmpresaRolId($objPunto->getPersonaEmpresaRolId());
                    $objPersonaEmpresaRolCaracR1->setCaracteristicaId($objCaractConcentradorFWA->getCaracteristicaId());
                    $objPersonaEmpresaRolCaracR1->setValor($objServicioR1->getId());
                    $objPersonaEmpresaRolCaracR1->setFeCreacion(new \DateTime('now'));
                    $objPersonaEmpresaRolCaracR1->setEstado('Activo');
                    $objPersonaEmpresaRolCaracR1->setUsrCreacion($strUsuario);
                    $objPersonaEmpresaRolCaracR1->setIpCreacion($strIpCreacion);
                    $emComercial->persist($objPersonaEmpresaRolCaracR1);
                    $emComercial->flush();

                    $objPersonaEmpresaRolCaracR2 = new InfoPersonaEmpresaRolCarac();
                    $objPersonaEmpresaRolCaracR2->setPersonaEmpresaRolId($objPunto->getPersonaEmpresaRolId());
                    $objPersonaEmpresaRolCaracR2->setCaracteristicaId($objCaractConcentradorFWA->getCaracteristicaId());
                    $objPersonaEmpresaRolCaracR2->setValor($objServicioR2->getId());
                    $objPersonaEmpresaRolCaracR2->setFeCreacion(new \DateTime('now'));
                    $objPersonaEmpresaRolCaracR2->setEstado('Activo');
                    $objPersonaEmpresaRolCaracR2->setUsrCreacion($strUsuario);
                    $objPersonaEmpresaRolCaracR2->setIpCreacion($strIpCreacion);
                    $emComercial->persist($objPersonaEmpresaRolCaracR2);
                    $emComercial->flush();
                }
                else
                {
                    throw new \Exception("No se puede agregar la caracteristica CONCENTRADOR INTERCONEXION FWA");
                }
            }

            if($boolCrearConcentrador)
            {
                $arrayFactFWA      =  $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne( 'TAREA_FACTIBILIDAD_FWA',
                                                          '',
                                                          '',
                                                          '',
                                                          '',
                                                          $strRegionServicio,
                                                          '',
                                                          '',
                                                          '',
                                                          ''
                                                        );
                if(!empty($arrayFactFWA))
                {
                    $strDpto    = $arrayFactFWA['valor6'];
                }
                $arrayRespuestaFWA = $this->serviceSoporte
                                          ->crearTareaYNotificacionFWA(array(
                                                                              "objServicio"           => $objServicio,
                                                                              "objPunto"              => $objPunto,
                                                                              "strPrefijoEmpresa"     => $strPrefijoEmpresa,
                                                                              "strCodEmpresa"         => $strCodEmpresa,
                                                                              "strIpClient"           => $strIpCreacion,
                                                                              "strNombreParametro"    => 'TAREA_FACTIBILIDAD_FWA',
                                                                              "strValor2"             => $strRegionServicio,
                                                                              "strEstadoSolServicio"  => "Pendiente",
                                                                              "strUsrSession"         => $strUsuario
                                                                            ));
                if(!empty($arrayRespuestaFWA))
                {
                    if($arrayRespuestaFWA["strStatus"] === "OK")
                    {
                        $intIdTarea = $arrayRespuestaFWA['arrayData']['intIdTarea'];
                        $strStatus  = "OK";
                        $strMensaje = "<br> Se crea concentradore virtuales <br> Tarea ".$intIdTarea." asignada al dpto ".$strDpto;
                        $this->servicioTecnico
                             ->ingresarServicioProductoCaracteristica($objServicio,
                                                                      $objProdConcentrador,
                                                                      $objCaracteristicaEnlaceDatos->
                                                                      getDescripcionCaracteristica(),
                                                                      $objServicioR1->getId(),
                                                                      $strUsuario
                                                                     );
                        $this->servicioTecnico
                             ->ingresarServicioProductoCaracteristica($objServicio,
                                                                      $objProdConcentrador,
                                                                      $objCaracteristicaEnlaceDatos->
                                                                      getDescripcionCaracteristica(),
                                                                      $objServicioR2->getId(),
                                                                      $strUsuario
                                                                     );
                    }
                    else if($arrayRespuestaFWA["strStatus"] === "ERROR")
                    {
                        throw new \Exception($arrayRespuestaFWA["strMensaje"]);
                    }
                    else
                    {
                        throw new \Exception('No se puede crear la tarea de factibilidad');
                    }
                }
            }
            $emComercial->getConnection()->commit();
        }
        catch(\Exception $e)
        {
            if ($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
                $emComercial->close();
            }
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }
        $arrayRespuesta = array(
                                "strStatus"   => $strStatus,
                                "strMensaje"  => $strMensaje
                                );
        return $arrayRespuesta;
    }

    /*
     * Método encargado de dar factibilidad y convertir a orden de trabajo de un servicio
     * creado por Reingreso de OS.
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.0 05-09-2019
     *
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.1 20-03-2020 - Se guardan las modificaciones realizadas en (info_punto, info_punto_forma_contacto, info_punto_dato_adicional)
     *                           Se guarda historial de la modificaciones realizadas (info_servicio_historial, info_punto_historial
     *                           Se guarda la característica del servicio que entró como proceso de reingreso automático en
     *                           info_servicio_caracteristica, característica: "ID_SERVICIO_REINGRESO"
     *                           Con Servicio Factible se realiza proceso de Flujo de Factura de Instalación y Promociones en Instalación.
     *                           Se agrega envío de notificación cuando el proceso concluya es decir cuando el servicio se encuentre PrePlanificado.
     * 
     * @author Anabelle Peñaherrera <apenaherrera@telconet.ec>
     * @version 1.2 09-06-2021 - Se habilita la actualización de los Datos Geograficos del Punto: Jurisdiccion, canton, parroquia, sector.
     *                           Se habilita la actualizacion del nuevo login generado de manera automatica en base a la nueva sectorización
     *                           (Datos geograficos) editados.
     *                           Se agrega al flujo de Reingreso la clonacion de la ultima solicitud de descuento fijo que haya sido autorizada 
     *                          (maximo Historial de la solicitud aprobada) para el punto cliente.
     *                           Se habilita Flujo de Reingreso de ordenes de servicio para servicios con tipo de orden T: Traslado
     * 
     * @author Alex Gómez <algomez@telconet.ec>
     * @version 1.3 03-09-2022 - Se valida reingreso de servicios adicionales para ejecución de preplanificación por productos CIH.
     * 
     * @params $arrayParametros [
     *                              strUsuario            : Usuario creación.
     *                              strIp                 : Ip creación.
     *                              strCodEmpresa         : Código de empresa.
     *                              strPrefijoEmpresa     : Prefijo de la empresa : MD.
     *                              strNombrePais         : Nombre de País.
     *                              intIdPais             : Id de País.
     *                              intIdPersona          : Id de la Persona Cliente.
     *                              intIdPunto            : Id Punto Cliente.
     *                              intIdServicio         : Id del Servicio origen del reingreso.
     *                              intIdServicioNuevo    : Id del Servicio Nuevo o clonado por el reingreso.
     *                              strEstado             : Estado del Servicio.*
     *                              strFlujoCompleto      : Flujo Completo.
     *                              strLatitud            : Coordenada Latitud.
     *                              strLongitud           : Coordenada Longitud.
     *                              intElementoEdificioId : Id del Elemento Edificio
     *                              strElementoEdificio   : Descripción del Elemento Edificio
     *                              strDependeDeEdificio  : Depende de  Edificio S/N.
     *                              strNuevoNodoCliente   : Nueva Edificación.
     *                              intTipoEdificio       : Id de Nueo Nodo o Edificación.
     *                              intPuntoCobertura     : Id del Punto de Cobertura.
     *                              intCanton             : Id del Cantón.
     *                              intParroquia          : Id de la Parroquia.
     *                              intSector             : Id del Sector.
     *                              arrayFormasContactos  : Arreglo con las formas de contacto del Punto Cliente.
     *                          ]
     *
     * @return $arrayRespuesta
     *
     */
    public function reingresoOrdenServicio($arrayParametros)
    {
        $strUsuario            = $arrayParametros['strUsuario'] ? $arrayParametros['strUsuario'] : 'telcos_reingresos';
        $strUsuarioProcAutom   = 'telcos_reingresos';
        $strIp                 = $arrayParametros['strIp'] ? $arrayParametros['strIp'] : '127.0.0.1';
        $strCodEmpresa         = $arrayParametros['strCodEmpresa'];
        $strPrefijoEmpresa     = $arrayParametros['strPrefijoEmpresa'];
        $strNombrePais         = $arrayParametros['strNombrePais'];
        $intIdPais             = $arrayParametros['intIdPais'];        
        $intIdPunto            = $arrayParametros['intIdPunto'];   
        $strLoginNuevo         = $arrayParametros['strLoginNuevo']; 
        $intIdServicioOrigen   = $arrayParametros['intIdServicio'];
        $intIdServicio         = $arrayParametros['intIdServicioNuevo'];
        $strFlujoCompleto      = $arrayParametros['strFlujoCompleto'];
        $strLatitud            = $arrayParametros['strLatitud'];
        $strLongitud           = $arrayParametros['strLongitud']; 
        $intElementoEdificioId = $arrayParametros['intElementoEdificioId'];
        $strElementoEdificio   = $arrayParametros['strElementoEdificio'];
        $strDependeDeEdificio  = $arrayParametros['strDependeDeEdificio'];                
        $strNuevoNodoCliente   = $arrayParametros['strNuevoNodoCliente'];
        $intTipoEdificio       = $arrayParametros['intTipoEdificio'];       
        $intPuntoCobertura     = $arrayParametros['intPuntoCobertura'];
        $intCanton             = $arrayParametros['intCanton'];
        $intParroquia          = $arrayParametros['intParroquia'];        
        $intSector             = $arrayParametros['intSector'];
        $arrayFormasContactos  = $arrayParametros['arrayFormasContactos'];                                                     
        $strNombreParametro    = "PARAMETROS_REINGRESO_OS_AUTOMATICA";
        $strParamDetProceso    = "REINGRESO AUTOMATICO";
        $strParamProcFactInst  = "MENSAJE_ERROR_PROCESO_FACT_INST";
        $strParamNumIntentosOs = "MENSAJE_ERROR_NUMERO_INTENTOS";
        $strParamConvertirOt   = "MENSAJE_ERROR_CONVERTIR_OT";
        $strParamActSectoriz   = "MENSAJE_ACT_SECTORIZACION";
        $strParamDescTraslado  = "DESC_TRASLADO";
        
        $arrayParamsPreplanificaCIH = array();
        
        $this->emcom->getConnection()->beginTransaction();
        $this->eminf->getConnection()->beginTransaction();
        try
        {            
            $objInfoServicioReingresado =  $this->emcom->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objInfoServicioReingresado))
            {
                throw new \Exception('Error : No se encontró servicio Reingresado.');
            }
            
            $objInfoPunto = $this->emcom->getRepository('schemaBundle:InfoPunto')->find($intIdPunto);
            if (!is_object($objInfoPunto))
            {
                throw new \Exception('Error : El Punto Cliente no existe.');
            }
                    
            if ($strFlujoCompleto === 'completo')
            {    
                //Se Clona el origen del traslado para el caso de ordenes de servicio tipo: T (Traslado)                
                if($objInfoServicioReingresado->getTipoOrden()=='T')
                {                    
                    $arrayParamDescTraslado = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                   ->getOne($strNombreParametro,'','',$strParamDescTraslado,'','','','','',$strCodEmpresa);

                    $strObserTraslado = (!empty($arrayParamDescTraslado) && !empty($arrayParamDescTraslado['valor1']))
                                         ? $arrayParamDescTraslado['valor1'] : 'Se actualizó característica TRASLADO%';
                             
                    $strFormatoTraslado = (!empty($arrayParamDescTraslado) && !empty($arrayParamDescTraslado['valor2']))
                                          ? $arrayParamDescTraslado['valor2'] : '\d+';
                    
                    $arrayIdServOrigenTraslado  = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                       ->getIdServicioOrigenTraslado(array('intIdServicio'  => $intIdServicioOrigen,
                                                                                           'strObservacion' => $strObserTraslado,
                                                                                           'strFormato'     => $strFormatoTraslado
                                                                                          ));
            
                    $intIdServicioOrigenTraslado = $arrayIdServOrigenTraslado[0]["intIdServicioOrigenTraslado"];
            
                    $objProductoRelacionado = $this->emcom->getRepository('schemaBundle:AdmiProducto')
                                                          ->findOneBy(array("descripcionProducto" => "INTERNET DEDICADO", 
                                                                            "empresaCod"          => $strCodEmpresa, 
                                                                            "estado"              => "Activo"));
                    
                    $objCaracteristicaTraslado = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                             ->findOneBy(array("descripcionCaracteristica" => "TRASLADO",
                                                                               "estado"                    => "Activo"));
                    
                    if (is_object($objProductoRelacionado) && is_object($objCaracteristicaTraslado) && $intIdServicioOrigenTraslado != null)
                    {
                        $objProdCaractTrasladoInt =  $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                 ->findOneBy(array("productoId"       => $objProductoRelacionado->getId(), 
                                                                                   "caracteristicaId" => $objCaracteristicaTraslado->getId(), 
                                                                                   "estado"           => "Activo"));

                        if (is_object($objProdCaractTrasladoInt))
                        {                          
                            $objInfoServProdCaractTraslado = new InfoServicioProdCaract();
                            $objInfoServProdCaractTraslado->setServicioId($objInfoServicioReingresado->getId());
                            $objInfoServProdCaractTraslado->setProductoCaracterisiticaId($objProdCaractTrasladoInt->getId());
                            $objInfoServProdCaractTraslado->setValor($intIdServicioOrigenTraslado);
                            $objInfoServProdCaractTraslado->setFeCreacion(new \DateTime('now'));
                            $objInfoServProdCaractTraslado->setUsrCreacion($strUsuario);                          
                            $objInfoServProdCaractTraslado->setEstado('Activo');
                            $this->emcom->persist($objInfoServProdCaractTraslado);
                            $this->emcom->flush();
                        }
                        //Se migra historial con fecha de activación de servicio origen
                        $emFinanciero = $this->emfinan;
                        $objAdmiParametroCab = $this->emgen->getRepository('schemaBundle:AdmiParametroCab')
                                                           ->findOneBy(array('nombreParametro' => 'CAMBIO FORMA PAGO',
                                                                             'estado'          => 'Activo'));
                        $arrayParametrosFechaAct = array('emFinanciero'  => $emFinanciero,
                                                         'intIdServicio' => $intIdServicioOrigenTraslado
                                                        );
                        if(is_object($objAdmiParametroCab))
                        {
                            $objAdmiParametroDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                               ->findOneBy(array('parametroId' => $objAdmiParametroCab,
                                                                                 'descripcion' => 'FECHA ACTIVACION ORIGEN',
                                                                                 'valor1'      => 'TRASLADAR SERVICIO',
                                                                                 'empresaCod'  => $strCodEmpresa,
                                                                                 'estado'      => 'Activo'));

                            $strFechaActivacionOrigen = $this->emcom->getRepository('schemaBundle:InfoServicioTecnico')
                                                                    ->getFechaActivacionServicioOrigen($arrayParametrosFechaAct);

                            if(is_object($objAdmiParametroDet))
                            {
                                $strAccionHistOrigen = $objAdmiParametroDet->getValor2();

                                if(isset($strAccionHistOrigen) && isset($strFechaActivacionOrigen) && !empty($strFechaActivacionOrigen))
                                {
                                    $objServicioHistorial = new InfoServicioHistorial();
                                    $objServicioHistorial->setServicioId($objInfoServicioReingresado);
                                    $objServicioHistorial->setFeCreacion(new \DateTime($strFechaActivacionOrigen));
                                    $objServicioHistorial->setUsrCreacion($strUsuario);
                                    $objServicioHistorial->setIpCreacion($strIp);
                                    $objServicioHistorial->setEstado($objInfoServicioReingresado->getEstado());
                                    $objServicioHistorial->setAccion($strAccionHistOrigen);
                                    $objServicioHistorial->setObservacion('Fecha inicial de servicio trasladado.');
                                    $this->emcom->persist($objServicioHistorial);
                                    $this->emcom->flush();                       
                                }
                            }
                        }                        
                        $objServOrigenTraslado = $this->emcom->getRepository('schemaBundle:InfoServicio')->find($intIdServicioOrigenTraslado);
                        if(!is_object($objServOrigenTraslado))
                        {
                            throw new \Exception('Error : No se encontró servicio origen del traslado.');
                        }                        
                        $strLoginOrigenTraslado = $objServOrigenTraslado->getPuntoId()->getLogin(); 
                        
                        if($strLoginNuevo !='')
                        {
                            $strLoginDestinoTraslado = $strLoginNuevo;
                        }
                        else
                        {
                            $strLoginDestinoTraslado = $objInfoPunto->getLogin();
                        }
                        $objServicioHist = new InfoServicioHistorial();
                        $objServicioHist->setServicioId($objInfoServicioReingresado);
                        $objServicioHist->setObservacion('Se Creó el servicio por Traslado del login '.$strLoginOrigenTraslado.
                                                                ' al login '.$strLoginDestinoTraslado);                        
                        $objServicioHist->setIpCreacion($strIp);
                        $objServicioHist->setFeCreacion(new \DateTime('now'));
                        $objServicioHist->setUsrCreacion($strUsuario);
                        $objServicioHist->setEstado($objInfoServicioReingresado->getEstado());
                        $this->emcom->persist($objServicioHist);
                        $this->emcom->flush();                       
                    }                                                    
                }
                
                //Proceso para registrar las nuevas o editadas formas de contacto del cliente.
                if (is_array($arrayFormasContactos) && !empty($arrayFormasContactos))
                {                   
                    $arrayParamFormasContac                        = array ();
                    $arrayParamFormasContac['strPrefijoEmpresa']   = $strPrefijoEmpresa;
                    $arrayParamFormasContac['arrayFormasContacto'] = $arrayFormasContactos;
                    $arrayParamFormasContac['strOpcionPermitida']  = 'SI';
                    $arrayParamFormasContac['intIdPais']           = $intIdPais;
                    $arrayParamFormasContac['strNombrePais']       = $strNombrePais;
                    $arrayValidaciones   = $this->servicePersFormCont->validarFormasContactos($arrayParamFormasContac);
                    
                    if (!empty($arrayValidaciones))
                    {
                        foreach($arrayValidaciones as $arrayMensajesValidaciones)
                        {
                            foreach($arrayMensajesValidaciones as $strMensajeValidacion)
                            {
                                $strError = $strError.$strMensajeValidacion."<br/>";
                            }
                        }

                        throw new \Exception("Error : ".$strError);
                    }     
                    //Pone en estado Inactivo las formas de contacto del Punto cliente segun los tipos de formas de contacto parametrizados
                    $arrayCodFormasContacto = array();
                    $arrayAdmiParametroDet  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                          ->get('COD_FORMA_CONTACTO', 
                                                                'COMERCIAL',
                                                                'COD_FORMA_CONTACTO', 
                                                                '',  
                                                                '',
                                                                '', 
                                                                '',  
                                                                '',  
                                                                '', 
                                                                $strCodEmpresa);

                    if($arrayAdmiParametroDet && count($arrayAdmiParametroDet) > 0)
                    {                                
                        foreach($arrayAdmiParametroDet as $arrayParametroDet)
                        {
                            $arrayCodFormasContacto[] = $arrayParametroDet['valor1'];
                        }
                    }                    
                    $arrayParamFormasContactoPto  = array ('intPuntoId'              => $intIdPunto,
                                                           'strEstado'               => 'Activo',                                   
                                                           'arrayCodFormasContacto'  => $arrayCodFormasContacto,
                                                           'intLimit'                => 10000,
                                                           'intStart'                => 0);
        
                    $arrayResultado = $this->emcom->getRepository('schemaBundle:InfoPuntoFormaContacto')
                                           ->obtenerFormasContactoPorTipo($arrayParamFormasContactoPto);
                    $objFormasContactoPorTipo = $arrayResultado['registros'];
                    if($objFormasContactoPorTipo)
                    {
                        foreach($objFormasContactoPorTipo as $objFormasContactoPorTipo)                        
                        {
                            $objFormasContactoPorTipo->setEstado('Inactivo');
                            $this->emcom->persist($objFormasContactoPorTipo);  
                            $this->emcom->flush();
                        }
                    }                        
                    //Ingresa las formas de contacto por Punto
                    for($intIndice = 0; $intIndice < count($arrayFormasContactos); $intIndice++)
                    {
                        $objAdmiFormaContacto = $this->emcom->getRepository('schemaBundle:AdmiFormaContacto')
                                                     ->findPorDescripcionFormaContacto($arrayFormasContactos[$intIndice]["formaContacto"]);
                        $objInfoPuntoFormaContacto = $this->emcom->getRepository('schemaBundle:InfoPuntoFormaContacto')
                                                           ->findBy(array('puntoId'         => $objInfoPunto->getId(), 
                                                                          'valor'           => $arrayFormasContactos[$intIndice]["valor"],
                                                                          'formaContactoId' => $objAdmiFormaContacto->getId()));
                        if($objInfoPuntoFormaContacto)
                        {
                            foreach($objInfoPuntoFormaContacto as $objPuntoFormaContacto)
                            {
                                $objPuntoFormaContacto->setEstado('Activo');
                                $this->emcom->persist($objPuntoFormaContacto);
                                $this->emcom->flush();
                            }
                        }
                        else
                        {
                            $objInfoPuntoFormaContactoNuevo = new InfoPuntoFormaContacto();
                            $objInfoPuntoFormaContactoNuevo->setValor($arrayFormasContactos[$intIndice]["valor"]);
                            $objInfoPuntoFormaContactoNuevo->setEstado('Activo');
                            $objInfoPuntoFormaContactoNuevo->setFeCreacion(new \DateTime('now'));
                            $objAdmiFormaContacto = $this->emcom->getRepository('schemaBundle:AdmiFormaContacto')
                                                         ->findPorDescripcionFormaContacto($arrayFormasContactos[$intIndice]["formaContacto"]);
                            $objInfoPuntoFormaContactoNuevo->setFormaContactoId($objAdmiFormaContacto);
                            $objInfoPuntoFormaContactoNuevo->setIpCreacion($strIp);
                            $objInfoPuntoFormaContactoNuevo->setPuntoId($objInfoPunto);
                            $objInfoPuntoFormaContactoNuevo->setUsrCreacion($strUsuario);
                            $this->emcom->persist($objInfoPuntoFormaContactoNuevo);
                            $this->emcom->flush();
                        }
                    }                  
                }
                          
                //Proceso para actualizar el cambio de sectorización: Canton, Parroquia, Sector.
                $intSectorAnterior       = $objInfoPunto->getSectorId()->getId();
                $strSectorAnterior       = $objInfoPunto->getSectorId()->getNombreSector();     
                $intJurisdiccionAnterior = $objInfoPunto->getPuntoCoberturaId()->getId();
                $strJurisdiccionAnterior = $objInfoPunto->getPuntoCoberturaId()->getNombreJurisdiccion(); 
                $strLoginAnterior        = $objInfoPunto->getLogin();
                                
                $objSectorNuevo       = $this->emcom->getRepository('schemaBundle:AdmiSector')->find($intSector);
                $objJurisdiccionNuevo = $this->emcom->getRepository('schemaBundle:AdmiJurisdiccion')->find($intPuntoCobertura);
                
                $objInfoPunto->setSectorId($objSectorNuevo);
                $objInfoPunto->setPuntoCoberturaId($objJurisdiccionNuevo);
                
                if($strLoginNuevo !='')
                {
                    $objInfoPunto->setLogin($strLoginNuevo);
                }
                $this->emcom->persist($objInfoPunto);
                $this->emcom->flush();
                
                $strSectorNuevo        = $objSectorNuevo->getNombreSector();                   
                $strJurisdiccionNuevo  = $objJurisdiccionNuevo->getNombreJurisdiccion();                   
                
                //Guardo Historial en el servicio del cambio de Sectorización del Punto
                $arrayParams = array('strNombreParametro' => $strNombreParametro, 
                                     'strProceso'         => $strParamDetProceso, 
                                     'strDescripcion'     => $strParamActSectoriz);
                    
                $strMsgActSectorizacion = $this->getMensajeReprocesoOS($arrayParams);
                    
                if(!is_null($strMsgActSectorizacion))
                {
                    $strObservacionHistorial = $strMsgActSectorizacion;                        
                }
                else
                {
                    $strObservacionHistorial = "Reingreso OS: Actualización de Datos Geograficos: ";                                              
                }
                
                if($intJurisdiccionAnterior != $intPuntoCobertura)
                {
                    $strObservacionHistorial = $strObservacionHistorial . 
                                               "<br> Jurisdicción Anterior: strJurisdiccionAnterior <br> Jurisdicción Nuevo: strJurisdiccionNuevo.";
                    $strObservacionHistorial = str_replace("strJurisdiccionAnterior", $strJurisdiccionAnterior,$strObservacionHistorial);
                    $strObservacionHistorial = str_replace("strJurisdiccionNuevo", $strJurisdiccionNuevo,$strObservacionHistorial);
                }
                
                if( $intSectorAnterior != $intSector)
                {
                    $strObservacionHistorial = $strObservacionHistorial .
                                               "<br> Sector Anterior: strSectorAnterior <br> Sector Nuevo: strSectorNuevo.";
                    $strObservacionHistorial = str_replace("strSectorAnterior", $strSectorAnterior,$strObservacionHistorial);
                    $strObservacionHistorial = str_replace("strSectorNuevo", $strSectorNuevo,$strObservacionHistorial);
                }
                
                if ($strLoginAnterior != $strLoginNuevo && $strLoginNuevo != '')
                {
                    $strObservacionHistorial = $strObservacionHistorial . "<br> Login Anterior: strLoginAnterior <br> Login Nuevo: strLoginNuevo.";
                    $strObservacionHistorial = str_replace("strLoginAnterior", $strLoginAnterior,$strObservacionHistorial);
                    $strObservacionHistorial = str_replace("strLoginNuevo", $strLoginNuevo,$strObservacionHistorial);
                }               
                
                if( $intSectorAnterior != $intSector  || $intJurisdiccionAnterior != $intPuntoCobertura)
                {
                    $this->putHistorialServicio(array ('intIdServicio'      =>  $objInfoServicioReingresado->getId(),
                                                       'strObservacion'     =>  $strObservacionHistorial,
                                                       'strUsuarioCreacion' =>  $strUsuario,
                                                       'strIpCreacion'      =>  $strIp,
                                                       'strAccion'          => 'actSectorizacion'));
                }
                // Proceso que clona la ultima solicitud de descuento fijo que haya sido autorizada (maximo Historial de la solicitud aprobada) 
                // para el Punto
                $arraySolicitudUltAprob = $this->emcom->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                      ->getUltSoliDescFijoAprob(array('intIdPunto' => $objInfoPunto->getId()));
                 
                $strObsSolUltAprob =  'Solicitud clonada por proceso de reingreso de orden de servicio.';
                if($arraySolicitudUltAprob['intIdDetalleSolicitud']!= null)
                {
                    $objSolicitudUltAprob = $this->emcom->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                        ->find($arraySolicitudUltAprob['intIdDetalleSolicitud']);
                    
                    if(is_object($objSolicitudUltAprob))
                    {                       
                        $strObservacionSolicitud  =  $objSolicitudUltAprob->getObservacion(). ' - '. $strObsSolUltAprob;               
                        $objSolicitudUltAprobClon = new InfoDetalleSolicitud();
                        $objSolicitudUltAprobClon = clone $objSolicitudUltAprob;
                        $objSolicitudUltAprobClon->setServicioId($objInfoServicioReingresado);
                        $objSolicitudUltAprobClon->setFeCreacion(new \DateTime('now'));
                        $objSolicitudUltAprobClon->setEstado('Aprobado');                    
                        $objSolicitudUltAprobClon->setObservacion($strObservacionSolicitud);
                        $this->emcom->persist($objSolicitudUltAprobClon); 
                        $this->emcom->flush();
                                        
                        //agregar historial a la solicitud
                        $objSolicitudHistUltAprob = $this->emcom->getRepository('schemaBundle:InfoDetalleSolHist')
                                                         ->findBy(array("detalleSolicitudId" => $arraySolicitudUltAprob['intIdDetalleSolicitud'],
                                                                        "estado"             => 'Aprobado'
                                                                 ));
                        
                        if(is_object($objSolicitudHistUltAprob))
                        {
                            $objDetalleSolHistorialClon = new InfoDetalleSolHist();
                            $objDetalleSolHistorialClon = clone $objSolicitudHistUltAprob;
                            $objDetalleSolHistorialClon->setDetalleSolicitudId($objSolicitudUltAprobClon);                    
                            $objDetalleSolHistorialClon->setFeCreacion(new \DateTime('now'));
                            $objDetalleSolHistorialClon->setUsrCreacion($objSolicitudHistUltAprob->gettUsrCreacion());
                            $objDetalleSolHistorialClon->setEstado($objSolicitudHistUltAprob->getEstado());
                            $objDetalleSolHistorialClon->setObservacion($strObservacionSolicitud);
                            $this->emcom->persist($objDetalleSolHistorialClon);
                            $this->emcom->flush();
                        }
                        // Se actualiza descuento en el Servicio
                        if($objSolicitudUltAprobClon->getPrecioDescuento() && is_null($objSolicitudUltAprobClon->getPorcentajeDescuento()))
                        {
                            $strDescuento   = (float)($objSolicitudUltAprobClon->getPrecioDescuento());                            
                            $fltValorDcto = ($strDescuento * $objInfoServicioReingresado->getCantidad());
                            
                            $objInfoServicioReingresado->setValorDescuento(round( $fltValorDcto  ,  2));
                            $objInfoServicioReingresado->setDescuentoUnitario(round( $strDescuento  , 2));
                            $this->emcom->persist($objInfoServicioReingresado);
                            $this->emcom->flush();
                        }  
                        elseif($objSolicitudUltAprobClon->getPorcentajeDescuento())
                        {
                            $fltResultadoDctoUnitario = 0;
                            $fltResultadoValorDcto    = 0;
                            $fltPrecioVenta           = $objInfoServicioReingresado->getPrecioVenta();
                            $fltPorcentajeDcto        = $objSolicitudUltAprobClon->getPorcentajeDescuento();
                            
                            if($fltPorcentajeDcto > 0 && $fltPrecioVenta > 0)
                            {
                                $fltResultadoValorDcto    = ($fltPrecioVenta * $objInfoServicioReingresado->getCantidad())*($fltPorcentajeDcto/100);
                                $fltResultadoDctoUnitario = $fltResultadoValorDcto;
                                $objInfoServicioReingresado->setValorDescuento(round( $fltResultadoValorDcto, 2));
                                $objInfoServicioReingresado->setDescuentoUnitario(round( $fltResultadoDctoUnitario  , 2)); 
                                $this->emcom->persist($objInfoServicioReingresado);
                                $this->emcom->flush();
                            }                             
                        }
                    }
                }
                
                //Proceso para registrar el depende de edificio del punto.
                $objInfoPuntoDatoAdicional = $this->emcom->getRepository('schemaBundle:InfoPuntoDatoAdicional')
                                                  ->findOneByPuntoId($intIdPunto);

                if (is_object($objInfoPuntoDatoAdicional))
                {
                    $objInfoPuntoDatoAdicional->setDependeDeEdificio($strDependeDeEdificio);
                    $objInfoPuntoDatoAdicional->setElementoId(null);

                    if (strtoupper($strDependeDeEdificio) === 'S')
                    {
                        if (strtoupper($strNuevoNodoCliente) === 'SI')
                        {
                            $strLoginPunto     = $objInfoPuntoDatoAdicional->getPuntoId()->getLogin();
                            $strDireccionPunto = $objInfoPuntoDatoAdicional->getPuntoId()->getDireccion();

                            //Obtenemos el modelo del elemento.
                            $objModelo = $this->eminf->getRepository('schemaBundle:AdmiModeloElemento')
                                              ->findOneById($intTipoEdificio);

                            if (!is_object($objModelo))
                            {
                                throw new \Exception('Error : No se pudo obtener el modelo del elemento.');
                            }

                            $arrayEstadosElemento = array("Activo","Pendiente","Factible","PreFactibilidad");

                            $objInfoElemento = $this->emcom->getRepository('schemaBundle:InfoElemento')
                                                    ->findOneBy(array("nombreElemento"   => trim(strtoupper($strElementoEdificio)),
                                                                      "estado"           => $arrayEstadosElemento,
                                                                      "modeloElementoId" => $objModelo->getId()));

                            if (!is_object($objInfoElemento))
                            {                               
                                $strEstado                 = 'Pendiente';
                                $strEstadoSolicitud        = 'PreFactibilidad';
                                $boolEsEdifcioConvencional = true;

                                if ($objModelo->getNombreModeloElemento() == 'NODO SATELITAL')
                                {
                                    $strEstado                 = 'Activo';
                                    $strEstadoSolicitud        = 'FactibilidadEquipos';
                                    $boolEsEdifcioConvencional = false;
                                }

                                $strMensajeReingreso = 'Creado por reingreso de orden de servicio';

                                //Creamos el nuevo elemento.
                                $objInfoElemento = new InfoElemento();
                                $objInfoElemento->setDescripcionElemento('Comercial: '.$strMensajeReingreso);
                                $objInfoElemento->setNombreElemento(trim(strtoupper($strElementoEdificio)));
                                $objInfoElemento->setModeloElementoId($objModelo);
                                $objInfoElemento->setUsrResponsable($strUsuario);
                                $objInfoElemento->setUsrCreacion($strUsuario);
                                $objInfoElemento->setFeCreacion(new \DateTime('now'));
                                $objInfoElemento->setIpCreacion($strIp);
                                $objInfoElemento->setEstado($strEstado);
                                $this->eminf->persist($objInfoElemento);
                                $this->eminf->flush();

                                //Ingresamos el historial del elemento.
                                $objInfoHistorialElemento = new InfoHistorialElemento();
                                $objInfoHistorialElemento->setElementoId($objInfoElemento);
                                $objInfoHistorialElemento->setEstadoElemento($strEstado);
                                $objInfoHistorialElemento->setObservacion("$strMensajeReingreso - $strLoginPunto");
                                $objInfoHistorialElemento->setUsrCreacion($strUsuario);
                                $objInfoHistorialElemento->setFeCreacion(new \DateTime('now'));
                                $objInfoHistorialElemento->setIpCreacion($strIp);
                                $this->eminf->persist($objInfoHistorialElemento);
                                $this->eminf->flush();

                                //info ubicacion
                                $objAdmiParroquia = $this->eminf->getRepository('schemaBundle:AdmiParroquia')
                                                         ->find($intParroquia);

                                $objInfoUbicacion = new InfoUbicacion();
                                $objInfoUbicacion->setLatitudUbicacion($strLatitud ? $strLatitud
                                                                       : $objInfoPuntoDatoAdicional->getPuntoId()->getLatitud());
                                $objInfoUbicacion->setLongitudUbicacion($strLongitud ? $strLongitud
                                                                       : $objInfoPuntoDatoAdicional->getPuntoId()->getLongitud());
                                $objInfoUbicacion->setDireccionUbicacion($strDireccionPunto);
                                $objInfoUbicacion->setAlturaSnm(0);
                                $objInfoUbicacion->setParroquiaId($objAdmiParroquia);
                                $objInfoUbicacion->setUsrCreacion($strUsuario);
                                $objInfoUbicacion->setFeCreacion(new \DateTime('now'));
                                $objInfoUbicacion->setIpCreacion($strIp);
                                $this->eminf->persist($objInfoUbicacion);
                                $this->eminf->flush();

                                //empresa elemento ubicacion
                                $objInfoEmpresaElementoUbica = new InfoEmpresaElementoUbica();
                                $objInfoEmpresaElementoUbica->setEmpresaCod($strCodEmpresa);
                                $objInfoEmpresaElementoUbica->setElementoId($objInfoElemento);
                                $objInfoEmpresaElementoUbica->setUbicacionId($objInfoUbicacion);
                                $objInfoEmpresaElementoUbica->setUsrCreacion($strUsuario);
                                $objInfoEmpresaElementoUbica->setFeCreacion(new \DateTime('now'));
                                $objInfoEmpresaElementoUbica->setIpCreacion($strIp);
                                $this->eminf->persist($objInfoEmpresaElementoUbica);
                                $this->eminf->flush();

                                //empresa elemento
                                $objInfoEmpresaElemento = new InfoEmpresaElemento();
                                $objInfoEmpresaElemento->setElementoId($objInfoElemento);
                                $objInfoEmpresaElemento->setEmpresaCod($strCodEmpresa);
                                $objInfoEmpresaElemento->setEstado("Activo");
                                $objInfoEmpresaElemento->setUsrCreacion($strUsuario);
                                $objInfoEmpresaElemento->setIpCreacion($strIp);
                                $objInfoEmpresaElemento->setFeCreacion(new \DateTime('now'));
                                $this->eminf->persist($objInfoEmpresaElemento);
                                $this->eminf->flush();

                                //Creamos la solicitud.
                                $objSolicitud = $this->eminf->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                     ->findOneByDescripcionSolicitud('SOLICITUD EDIFICACION');

                                $objInfoDetalleSolicitud = new InfoDetalleSolicitud();
                                $objInfoDetalleSolicitud->setTipoSolicitudId($objSolicitud);
                                $objInfoDetalleSolicitud->setObservacion($strMensajeReingreso);
                                $objInfoDetalleSolicitud->setUsrCreacion($strUsuario);
                                $objInfoDetalleSolicitud->setFeCreacion(new \DateTime('now'));
                                $objInfoDetalleSolicitud->setEstado($strEstadoSolicitud);
                                $objInfoDetalleSolicitud->setElementoId($objInfoElemento->getId());
                                $this->eminf->persist($objInfoDetalleSolicitud);
                                $this->eminf->flush();

                                //Creamos historial de solicitud
                                $objInfoDetalleSolHist = new InfoDetalleSolHist();
                                $objInfoDetalleSolHist->setDetalleSolicitudId($objInfoDetalleSolicitud);
                                $objInfoDetalleSolHist->setIpCreacion($strIp);
                                $objInfoDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                $objInfoDetalleSolHist->setUsrCreacion($strUsuario);
                                $objInfoDetalleSolHist->setEstado($strEstadoSolicitud);
                                $objInfoDetalleSolHist->setObservacion($strMensajeReingreso);
                                $this->eminf->persist($objInfoDetalleSolHist);
                                $this->eminf->flush();

                                if (!$boolEsEdifcioConvencional)
                                {
                                    //Si es nodo SATELITAL se crean la referencia PSEUDOPE automáticamente
                                    //sin pasar por Factibilidad Mánual de parte de GIS.
                                    $objInfoDetalleElemento = new InfoDetalleElemento();
                                    $objInfoDetalleElemento->setEstado('Activo');
                                    $objInfoDetalleElemento->setElementoId($objInfoElemento->getId());
                                    $objInfoDetalleElemento->setDetalleNombre('ADMINISTRA');
                                    $objInfoDetalleElemento->setDetalleValor('CLIENTE');
                                    $objInfoDetalleElemento->setDetalleDescripcion('ADMINISTRA');
                                    $objInfoDetalleElemento->setFeCreacion(new \DateTime('now'));
                                    $objInfoDetalleElemento->setUsrCreacion($strUsuario);
                                    $objInfoDetalleElemento->setIpCreacion($strIp);
                                    $this->eminf->persist($objInfoDetalleElemento);
                                    $this->eminf->flush();

                                    $objInfoDetalleElemento1 = new InfoDetalleElemento();
                                    $objInfoDetalleElemento1->setEstado('Activo');
                                    $objInfoDetalleElemento1->setElementoId($objInfoElemento->getId());
                                    $objInfoDetalleElemento1->setDetalleNombre('TIPO_ELEMENTO_RED');
                                    $objInfoDetalleElemento1->setDetalleValor('PSEUDO_PE');
                                    $objInfoDetalleElemento1->setDetalleDescripcion('TIPO_ELEMENTO_RED');
                                    $objInfoDetalleElemento1->setFeCreacion(new \DateTime('now'));
                                    $objInfoDetalleElemento1->setUsrCreacion($strUsuario);
                                    $objInfoDetalleElemento1->setIpCreacion($strIp);
                                    $this->eminf->persist($objInfoDetalleElemento1);
                                    $this->eminf->flush();     

                                    $objInfoDetalleElemento2 = new InfoDetalleElemento();
                                    $objInfoDetalleElemento2->setEstado('Activo');
                                    $objInfoDetalleElemento2->setElementoId($objInfoElemento->getId());
                                    $objInfoDetalleElemento2->setDetalleNombre('TIPO_ADMINISTRACION');
                                    $objInfoDetalleElemento2->setDetalleValor('SATELITAL');
                                    $objInfoDetalleElemento2->setDetalleDescripcion('TIPO_ADMINISTRACION');
                                    $objInfoDetalleElemento2->setFeCreacion(new \DateTime('now'));
                                    $objInfoDetalleElemento2->setUsrCreacion($strUsuario);
                                    $objInfoDetalleElemento2->setIpCreacion($strIp);
                                    $this->eminf->persist($objInfoDetalleElemento2);
                                    $this->eminf->flush(); 
                                }                                  
                            }

                            $intElementoEdificioId = $objInfoElemento->getId();
                        }

                        $objInfoElemento = $this->emcom->getRepository('schemaBundle:InfoElemento')
                                                ->find($intElementoEdificioId);

                        $objInfoPuntoDatoAdicional->setElementoId($objInfoElemento);
                    }

                    $objInfoPuntoDatoAdicional->setFeUltMod(new \DateTime('now'));
                    $objInfoPuntoDatoAdicional->setUsrUltMod($strUsuario);
                    $this->emcom->persist($objInfoPuntoDatoAdicional);
                    $this->emcom->flush();                    
                }
                
                 //Proceso para registrar las nuevas coordenadas del punto.
                if($strLatitud !== null && $strLatitud !== '' && $strLongitud !== null && $strLongitud !== '')
                {

                    $arrayRespuestaActualizacion = $this->serviceInfoPunto
                                                        ->actualizarCoordenadaSugerida(array('intIdPunto'        => $intIdPunto,
                                                                                             'strVerificarTarea' => 'NO',
                                                                                             'strLatitud'        => $strLatitud,
                                                                                             'strLongitud'       => $strLongitud,
                                                                                             'strUsrCreacion'    => $strUsuario,
                                                                                             'strIpCreacion'     => $strIp));

                    if(empty($arrayRespuestaActualizacion) || $arrayRespuestaActualizacion["strStatus"] !== "OK")
                    {
                        throw new \Exception('Error : Hubo un problema al actualizar las coordenadas del punto.');
                    }                    
                } 
                
                $arrayParametrosCaracteristica = array('intIdServicio'     => $intIdServicio,
                                                       'strCaracteristica' => 'FLUJO_COMPLETO',
                                                       'strObservacion'    => 'Servicio ingresó al Proceso de reingreso de OS por Flujo Completo',
                                                       'strUsuario'        => $strUsuario,
                                                       'strIp'             => $strIp);
                    
                $this->serviceCovertirOt->ingresarServicioCaracteristica($arrayParametrosCaracteristica);
                
                $arrayParamCaractFlujoCompleto = array('intIdServicio'     => $intIdServicio,
                                                       'strCaracteristica' => 'FLUJO_COMPLETO',
                                                       'strObservacion'    => 'Se inactiva característica, el servicio ya ejecutó el flujo '
                                                                            . 'correspondiente',
                                                       'strUsuario'        => $strUsuario,
                                                       'strIp'             => $strIp);
                                              
                $this->emcom->commit();
                $this->eminf->commit();
            }          
           
            if ($strFlujoCompleto === 'completo' || in_array('factibilidad',$strFlujoCompleto))
            {
                $objInfoEmpresaGrupo = $this->emcom->getRepository('schemaBundle:InfoEmpresaGrupo')->find($strCodEmpresa);
                
                if (!is_object($objInfoEmpresaGrupo))
                {
                    throw new \Exception('Error : No se pudo obtener el prefijo de la empresa.');
                }
                
                $strContent = $this->solicitarFactibilidadServicio($strCodEmpresa,
                                                                   $objInfoEmpresaGrupo->getPrefijo(),
                                                                   $intIdServicio,
                                                                   $strUsuario,
                                                                   $strIp);
                
                $objInfoServicio = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                               ->findOneBy(array('id'     => (int)$intIdServicio,
                                                                 'estado' => 'Factible'));
                
                if (!is_object($objInfoServicio))
                {
                    if($strFlujoCompleto === 'completo')
                    {
                        $this->serviceCovertirOt->actualizarServicioCaracteristica($arrayParamCaractFlujoCompleto);
                    }
                    
                    $arrayRespuesta = array ('status'  => 'fail',
                                             'message' => $strContent);
                
                    return $arrayRespuesta;
                }                
                
            }
            //Obtengo parametro de numero de intentos de ejecución de Reintentos de OS.
            $arrayParametrosReingresoOS = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                               ->getOne('PARAMETROS_REINGRESO_OS_AUTOMATICA','','','NUM_INTENTOS_REINGRESO_OS','','','','','',
                                                        $strCodEmpresa);

            if (!empty($arrayParametrosReingresoOS) && !empty($arrayParametrosReingresoOS['valor1']))
            {
                $intNumIntentosReingresoOs = intval($arrayParametrosReingresoOS['valor1']);
            }                        
            
            if ($strFlujoCompleto === 'completo' || in_array('facturacion',$strFlujoCompleto))
            {   
                $arrayParametrosCaracteristica = array('intIdServicio'     => $intIdServicio,
                                                       'strCaracteristica' => 'CONT_INTENTOS_REINGRESO_OS',
                                                       'strObservacion'    => 'Cantidad de Procesos de Reintento de OS ejecutados',
                                                       'strUsuario'        => $strUsuario,
                                                       'strIp'             => $strIp);
                    
                $this->serviceCovertirOt->ingresarServicioCaracteristica($arrayParametrosCaracteristica);
                
                $strObservacion = 'Se ejecutó proceso de Facturación por Instalación';
                //SI INSERTA UNA SOLA VEZ LA CARACTERÍSTICA "FACTURACION" EN ESTADO ACTIVO.
                $arrayParametrosCaracteristica = array('intIdServicio'     => $intIdServicio,
                                                       'strCaracteristica' => 'FACTURACION',
                                                       'strObservacion'    => $strObservacion,
                                                       'strUsuario'        => $strUsuario,
                                                       'strIp'             => $strIp);
                    
                $this->serviceCovertirOt->ingresarServicioCaracteristica($arrayParametrosCaracteristica);
                
                //Si la orden es de Tipo: Nueva entra a flujo de Factura de Instalacion
                if($objInfoServicioReingresado->getTipoOrden()=='N')
                {
                    //Llamo a CMKG_REINGRESO.P_FACTURACION_INSTAL_REINGRESO
                    $arrayRespuestaFact = $this->emcom->getRepository('schemaBundle:InfoPunto')
                                          ->getFacturacionInstalReingresoOs(
                                            array('intIdServicio' => $objInfoServicioReingresado->getId(),
                                                  'intPuntoId'    => $objInfoServicioReingresado->getPuntoId()->getId(),
                                                  'strEmpresaCod' => $strCodEmpresa
                                                                          ));
                    $boolStatusFact  = $arrayRespuestaFact["status"]; 
                    $strMessage      = $arrayRespuestaFact["message"];
                    if ($boolStatusFact && $strMessage != null)
                    {                                        
                        $arrayParams = array('strNombreParametro' => $strNombreParametro, 
                                             'strProceso'         => $strParamDetProceso, 
                                             'strDescripcion'     => $strParamProcFactInst);
                    
                        $strMsgErrorProcFactInst = $this->getMensajeReprocesoOS($arrayParams);
                        
                        if(!is_null($strMsgErrorProcFactInst))
                        {
                             $strObservacionHistorial = $strMsgErrorProcFactInst;                        
                        }
                        else
                        {
                            $strObservacionHistorial = "OS-No procede para Reingreso Automático: ".
                                                       "Existió un error en el proceso de Facturación por instalación.";
                        }
                        $this->putHistorialServicio(array ('intIdServicio'      =>  $objInfoServicioReingresado->getId(),
                                                           'strObservacion'     =>  $strObservacionHistorial,
                                                           'strUsuarioCreacion' =>  $strUsuarioProcAutom,
                                                           'strIpCreacion'      =>  $strIp,
                                                           'strAccion'          => 'facturacion'));
            
                        /* =================== Envio de notificación ===================*/            
                        $this->emcom->getRepository('schemaBundle:InfoPunto')
                             ->notificarProcesoReingresoOS(array('intIdServicio' => $objInfoServicioReingresado->getId(),
                                                                 'strMensaje'    => $strObservacionHistorial,
                                                                 'strUsuario'    => $strUsuario,
                                                                 'strIp'         => $strIp));
                              
                        //Genera conteo de intentos de reingreso de OS                    
                        $objCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                  ->findOneBy(array('descripcionCaracteristica' => 'CONT_INTENTOS_REINGRESO_OS',
                                                                    'tipo'   => 'COMERCIAL',
                                                                    'estado' => 'Activo'));
                        if(!is_object($objCaracteristica))
                        {
                             throw new \Exception("Error: Hubo un error al obtener la característica para validar el conteo intentos de Reingreso "
                                 . "de OS permitidos");
                        }

                        $objInfoServCarac = $this->emcom->getRepository("schemaBundle:InfoServicioCaracteristica")
                                                 ->findOneBy(array("servicioId"       => (int) $intIdServicio,
                                                                   "caracteristicaId" => $objCaracteristica,
                                                                   "estado"           => "Activo"));

                        if(is_object($objInfoServCarac))
                        {
                            $intCantIntentosReingresoOs = intval($objInfoServCarac->getValor()) + 1;
                            if ($intCantIntentosReingresoOs <= $intNumIntentosReingresoOs) 
                            {
                                $objInfoServCarac->setEstado("Activo");
                                $objInfoServCarac->setFeUltMod(new \DateTime('now'));
                                $objInfoServCarac->setUsrUltMod($strUsuario);
                                $objInfoServCarac->setIpUltMod($strIp);
                                $objInfoServCarac->setValor($intCantIntentosReingresoOs);
                                $objInfoServCarac->setObservacion("Se realiza conteo de intentos de Reingreso de OS.");
                                $this->emcom->persist($objInfoServCarac);
                                $this->emcom->flush();
                                $this->emcom->commit();   
                            }
                        }
                        if($intCantIntentosReingresoOs === $intNumIntentosReingresoOs)
                        {
                            $objInfoServicioHistorial = $this->emcom->getRepository('schemaBundle:InfoServicioHistorial')
                                                             ->findOneBy(array('servicioId' => $objInfoServicioReingresado->getId()), 
                                                                                 array('id' => 'DESC'));

                            if(is_object($objInfoServicioHistorial))
                            {
                                $strAccionHistorial = $objInfoServicioHistorial->getAccion();
                            }
                            $arrayParams = array('strNombreParametro' => $strNombreParametro,
                                                 'strProceso'         => $strParamDetProceso,
                                                 'strDescripcion'     => $strParamNumIntentosOs);

                            $strMsgErrorNumIntentosOS = $this->getMensajeReprocesoOS($arrayParams);
                            if(!is_null($strMsgErrorNumIntentosOS))
                            {
                                $strObservacionHistorial = $strMsgErrorNumIntentosOS;
                                $strObservacionHistorial = str_replace("{NumIntentosReingresoOs}",$intNumIntentosReingresoOs,
                                    $strObservacionHistorial);
                            }
                            else
                            {
                                $strObservacionHistorial ="OS-No procede para Reingreso Automático: Motivo: Máximo($intNumIntentosReingresoOs) "
                                    . "Intentos Fallidos.";                                                                
                            }
                            if ($strAccionHistorial != 'numIntentosOs')
                            {
                                $this->putHistorialServicio(array ('intIdServicio'      =>  $objInfoServicioReingresado->getId(),
                                                                   'strObservacion'     =>  $strObservacionHistorial,
                                                                   'strUsuarioCreacion' =>  $strUsuarioProcAutom,
                                                                   'strIpCreacion'      =>  $strIp,
                                                                   'strAccion'          => 'numIntentosOs'));
            
                                /* =================== Envio de notificación ===================*/            
                                $this->emcom->getRepository('schemaBundle:InfoPunto')
                                            ->notificarProcesoReingresoOS(array('intIdServicio' => $objInfoServicioReingresado->getId(),
                                                                                'strMensaje'    => $strObservacionHistorial,
                                                                                'strUsuario'    => $strUsuario,
                                                                                'strIp'         => $strIp));
                            }
                        }
                    
                        if($strFlujoCompleto === 'completo')
                        {
                            $this->serviceCovertirOt->actualizarServicioCaracteristica($arrayParamCaractFlujoCompleto);
                        }
                        //Si no paso el flujo retorno fail.
                        $arrayRespuesta = array('status'  => 'fail',
                                                'message' => $strObservacion);

                        return $arrayRespuesta;
                    }
                    else
                    {
                        //Si la orden es de Tipo: Nueva y pasa el flujo de Factura de Instalacion debo actualizar caracteristica 'FACTURACION' 
                        //a estado Inactivo.
                        $objCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                  ->findOneBy(array('descripcionCaracteristica' => 'FACTURACION',
                                                                    'tipo'   => 'COMERCIAL',
                                                                    'estado' => 'Activo'));
                        if(!is_object($objCaracteristica))
                        {
                            throw new \Exception("Error: Hubo un error al obtener la característica para procesar Factura de Instalación");
                        }
 
                        $objInfoServCarac = $this->emcom->getRepository("schemaBundle:InfoServicioCaracteristica")
                                                 ->findOneBy(array("servicioId"       => (int) $intIdServicio,
                                                                   "caracteristicaId" => $objCaracteristica,
                                                                   "estado"           => "Activo"));
 
                        if(is_object($objInfoServCarac))
                        {
                            $objInfoServCarac->setEstado("Inactivo");
                            $objInfoServCarac->setFeUltMod(new \DateTime('now'));
                            $objInfoServCarac->setUsrUltMod($strUsuario);
                            $objInfoServCarac->setIpUltMod($strIp);
                            $objInfoServCarac->setObservacion("Se inactiva característica, el servicio ya ejecutó flujo de Factura de Instalación");
                            $this->emcom->persist($objInfoServCarac);
                            $this->emcom->flush();
                        }                    
                    }
                }
                elseif($objInfoServicioReingresado->getTipoOrden()=='T')
                {
                    //Si la orden es de Tipo: Traslado debo inactivar la Caracteristica 'FACTURACION' ya que no aplica al flujo de Factura 
                    //de Instalacion.
                    $objCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                              ->findOneBy(array('descripcionCaracteristica' => 'FACTURACION',
                                                                'tipo'   => 'COMERCIAL',
                                                                'estado' => 'Activo'));
                    if(!is_object($objCaracteristica))
                    {
                        throw new \Exception("Error: Hubo un error al obtener la característica para procesar Factura de Instalación");
                    }
                    $objInfoServCarac = $this->emcom->getRepository("schemaBundle:InfoServicioCaracteristica")
                                             ->findOneBy(array("servicioId"       => (int) $intIdServicio,
                                                               "caracteristicaId" => $objCaracteristica,
                                                               "estado"           => "Activo"));
                    if(is_object($objInfoServCarac))
                    {
                        $objInfoServCarac->setEstado("Inactivo");
                        $objInfoServCarac->setFeUltMod(new \DateTime('now'));
                        $objInfoServCarac->setUsrUltMod($strUsuario);
                        $objInfoServCarac->setIpUltMod($strIp);
                        $objInfoServCarac->setObservacion("Se inactiva característica, el servicio trasladado no aplica al flujo de Factura "
                            . "de Instalación");
                        $this->emcom->persist($objInfoServCarac);
                        $this->emcom->flush();
                    }                    
                }
            }            
            
            //Obtengo el contador de intentos asociado al servicio reingresado
            $objCaracteristica = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                      ->findOneBy(array('descripcionCaracteristica' => 'CONT_INTENTOS_REINGRESO_OS',
                                                        'tipo' => 'COMERCIAL',
                                                        'estado' => 'Activo'));
            if(!is_object($objCaracteristica))
            {
                throw new \Exception("Error: Hubo un error al obtener la característica para validar el conteo intentos de Reingreso"
                . " de OS permitidos");
            }

            $objInfoServCarac = $this->emcom->getRepository("schemaBundle:InfoServicioCaracteristica")
                                     ->findOneBy(array("servicioId" => (int) $intIdServicio,
                                                       "caracteristicaId" => $objCaracteristica,
                                                       "estado" => "Activo"));

            if(is_object($objInfoServCarac))
            {
                $intCantIntentosReingresoOs = intval($objInfoServCarac->getValor()) + 1;
            }
            
            if (($strFlujoCompleto === 'completo' || in_array('ordenTrabajo',$strFlujoCompleto)) 
                && $intCantIntentosReingresoOs <= $intNumIntentosReingresoOs)
            {   
                //SE DA FORMATO A LA CADENA CONFORMADA POR LOS ID_SERVICIOS.
                $strIdsServicios    = $intIdServicio + '|';
                $arrayValor         = explode("|", $strIdsServicios);  
                $entityServicio     = $this->emcom->getRepository('schemaBundle:InfoServicio')->find((int)$intIdServicio);
             
                if(!is_object($entityServicio))
                {
                    throw new \Exception("Error : No existe el servicio OT.");
                }
                
                $intIdOficina        = $entityServicio->getPuntoId()->getPuntoCoberturaId()->getOficinaId();

                if(empty($intIdOficina))
                {
                    throw new \Exception("Error : No se puedo obtener la oficina."); 
                }

                $objInfoEmpresaGrupo = $this->emcom->getRepository('schemaBundle:InfoEmpresaGrupo')->find($strCodEmpresa);
                
                if (!is_object($objInfoEmpresaGrupo))
                {
                    throw new \Exception("Error : No se pudo obtener el prefijo de la empresa.");
                }
                
                $strOpcion                   = 'REINGRESO';
                $arrayParametrosValidaciones = array('intIdServicio'     => (int)$intIdServicio,
                                                     'intIdPunto'        => $intIdPunto,
                                                     'strOpcion'         => $strOpcion,
                                                     'strCaracteristica' => 'FACTURACION');

                //SE INVOCA AL SERVICE QUE REALIZA LAS VALIDACIONES PREVIAS.
                $arrayParametrosOT = $this->serviceCovertirOt->
                                            validacionesPreviasConvertirOT($arrayParametrosValidaciones);

                // Entro a convertir OT si Orden es :Nueva y si pasa las validaciones previas ó si la orden es: Traslado
                if(($arrayParametrosOT['strMuestraGridOT'] === 'S' && $objInfoServicioReingresado->getTipoOrden()=='N')
                    || $objInfoServicioReingresado->getTipoOrden()=='T')
                {
                    
                    $arrayParametrosConvertirOT = array('strOficina'             => $intIdOficina,
                                                        'strUser'                => $strUsuarioProcAutom,
                                                        'strIp'                  => $strIp,
                                                        'array_valor'            => $arrayValor,
                                                        'intIdPunto'             => $intIdPunto,
                                                        'strCodEmpresa'          => $strCodEmpresa,
                                                        'strPrefijoEmpresa'      => $objInfoEmpresaGrupo->getPrefijo());                    
                    
                    //SI EL SERVICIO PASA LA VALIDACIONES PREVIAS SE PROCEDE A INVOCAR AL SERVICE CONVERTIR A OT
                    $strRespuesta               = $this->serviceCovertirOt
                                                       ->convertirOrdenTrabajo($arrayParametrosConvertirOT);

                    //SE CONSULTA SI EL SERVICIO SE ENCUENTRA EN ESTADO "PREPLANIFICADO".
                    $objInfoServicio = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                   ->findOneBy(array('id'     => (int)$intIdServicio,
                                                                     'estado' => 'PrePlanificada'));
                    
                    //SI INSERTA UNA SOLA VEZ LA CARACTERÍSTICA "NO_PASO_CONVERTIR_OT" EN ESTADO ACTIVO.
                    $arrayParametrosCaracteristica = array('intIdServicio'     => $intIdServicio,
                                                           'strCaracteristica' => 'NO_PASO_CONVERTIR_OT',
                                                           'strObservacion'    => $strRespuesta,
                                                           'strUsuario'        => $strUsuario,
                                                           'strIp'             => $strIp);
                    
                    $this->serviceCovertirOt->ingresarServicioCaracteristica($arrayParametrosCaracteristica);

     
                    if (!is_object($objInfoServicio))
                    {                       
                        if(is_object($objInfoServCarac))
                        {
                            $intCantIntentosReingresoOs = intval($objInfoServCarac->getValor()) + 1;
                            if ($intCantIntentosReingresoOs <= $intNumIntentosReingresoOs) 
                            {
                                $objInfoServCarac->setEstado("Activo");
                                $objInfoServCarac->setFeUltMod(new \DateTime('now'));
                                $objInfoServCarac->setUsrUltMod($strUsuario);
                                $objInfoServCarac->setIpUltMod($strIp);
                                $objInfoServCarac->setValor($intCantIntentosReingresoOs);
                                $objInfoServCarac->setObservacion("Se realiza conteo de intentos de Reingreso de OS.");
                                $this->emcom->persist($objInfoServCarac);
                                $this->emcom->flush();
                                $this->emcom->commit();   
                            } 
                        }
                        if($intCantIntentosReingresoOs === $intNumIntentosReingresoOs)
                        {
                            $objInfoServicioHistorial = $this->emcom->getRepository('schemaBundle:InfoServicioHistorial')
                                                             ->findOneBy(array('servicioId' => $objInfoServicioReingresado->getId()), 
                                                                                 array('id' => 'DESC'));
  
                            if(is_object($objInfoServicioHistorial))
                            {
                                $strAccionHistorial = $objInfoServicioHistorial->getAccion();
                            }
                            $arrayParams = array('strNombreParametro' => $strNombreParametro,
                                                 'strProceso'         => $strParamDetProceso,
                                                 'strDescripcion'     => $strParamNumIntentosOs);

                            $strMsgErrorNumIntentosOS = $this->getMensajeReprocesoOS($arrayParams);
                            if(!is_null($strMsgErrorNumIntentosOS))
                            {
                                $strObservacionHistorial = $strMsgErrorNumIntentosOS;
                                $strObservacionHistorial = str_replace("{NumIntentosReingresoOs}",$intNumIntentosReingresoOs,
                                    $strObservacionHistorial);
                            }
                            else
                            {
                                $strObservacionHistorial ="OS-No procede para Reingreso Automático: Motivo: Máximo($intNumIntentosReingresoOs) "
                                    . "Intentos Fallidos.";                                                                
                            }
                            if ($strAccionHistorial != 'numIntentosOs')
                            {
                                $this->putHistorialServicio(array ('intIdServicio'      =>  $objInfoServicioReingresado->getId(),
                                                                   'strObservacion'     =>  $strObservacionHistorial,
                                                                   'strUsuarioCreacion' =>  $strUsuarioProcAutom,
                                                                   'strIpCreacion'      =>  $strIp,
                                                                   'strAccion'          => 'numIntentosOs'));
             
                                /* =================== Envio de notificación ===================*/            
                                $this->emcom->getRepository('schemaBundle:InfoPunto')
                                            ->notificarProcesoReingresoOS(array('intIdServicio' => $objInfoServicioReingresado->getId(),
                                                                                'strMensaje'    => $strObservacionHistorial,
                                                                                'strUsuario'    => $strUsuario,
                                                                                'strIp'         => $strIp));
                            }
                        } 
                        
                        if($strFlujoCompleto === 'completo')
                        {
                            $this->serviceCovertirOt->actualizarServicioCaracteristica($arrayParamCaractFlujoCompleto);
                        }
                        $this->emcom->commit();   
                        //SI EL SERVICIO NO SE ENCUENTRA EN ESTADO "PREPLANIFICADO" EL PROCESO FUE FALLIDO.                       
                        $arrayRespuesta = array ('status'  => 'fail',
                                                 'message' => $strRespuesta);

                        return $arrayRespuesta;

                    }
                    else
                    {
                        /* SI EL SERVICIO SE ENCUENTRA EN ESTADO "PREPLANIFICADO" SE ACTUALIZA EL REGISTRO DE LA CARACTERÍSTICA 
                         * EN ESTADO INACTIVO.  
                         */
                        $objCaracteristica   = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                           ->findOneBy(array('descripcionCaracteristica' => 'NO_PASO_CONVERTIR_OT',
                                                                             'tipo'                      => 'COMERCIAL',
                                                                             'estado'                    => 'Activo'));
                        if(!is_object($objCaracteristica))
                        {
                            throw new \Exception("Error: Hubo un error al obtener la característica para convertir a orden de trabajo.");

                        }
                        
                        $objInfoServCarac = $this->emcom->getRepository("schemaBundle:InfoServicioCaracteristica")
                                                        ->findOneBy(array("servicioId"       => (int)$intIdServicio,
                                                                          "caracteristicaId" => $objCaracteristica,
                                                                          "estado"           => "Activo"));
 
                        if (is_object($objInfoServCarac))
                        {
                            $objInfoServCarac->setEstado("Inactivo");
                            $objInfoServCarac->setFeUltMod(new \DateTime('now'));
                            $objInfoServCarac->setUsrUltMod($strUsuario);
                            $objInfoServCarac->setIpUltMod($strIp);
                            $objInfoServCarac->setObservacion("Se inactiva característica, el servicio se convertió correctamente en OT.");
                            $this->emcom->persist($objInfoServCarac);
                            $this->emcom->flush();
                        }

                        // Verificación y generación de OT por solicitudes de preplanificación para productos CIH
                        if($strPrefijoEmpresa == "MD")
                        {
                            $arrayParamsPreplanificaCIH = array('intIdServicioInternet'  => $objInfoServicio->getId(),
                                                                'intIdPunto'             => $objInfoServicio->getPuntoId()->getId(),
                                                                'strUsuarioCreacion'     => $strUsuario,
                                                                'strIpCreacion'          => $strIp,
                                                                'strOrigen'              => "REINGRESO_SERVICIOS",
                                                                'strPrefijoEmpresa'      => $strPrefijoEmpresa,
                                                                'strCodEmpresa'          => $strCodEmpresa);

                            $arrayResponseCIH = $this->serviceInfoContrato->generacionOtServicioCIH($arrayParamsPreplanificaCIH);

                            if ($arrayResponseCIH['status'] != 'OK')
                            {
                                throw new \Exception('Error : '||$arrayResponseCIH['mensaje']);
                            }
                        }

                    }
                }
                else
                {   
                    $strMsgFactura = "".$arrayParametrosOT['strMsgFactura'];
                    //NO PASO LAS VALIDACIONES PREVIAS SE INSERTA UNA SOLA VEZ LA CARACTERISTICA "NO_PASO_CONVERTIR_OT"     
                    $arrayParams = array('strNombreParametro' => $strNombreParametro,
                                         'strProceso'         => $strParamDetProceso,
                                         'strDescripcion'     => $strParamConvertirOt);
                    $strMsgErrorConvertirOT = $this->getMensajeReprocesoOS($arrayParams);
                    
                    if(!is_null($strMsgErrorConvertirOT))
                    {
                        $strObservacion = $strMsgErrorConvertirOT;
                    }
                    else
                    {
                        $strObservacion = 'El servicio no pasó las validaciones previas para convertir a OT.';   
                    }                    
                    $strObservacion = $strMsgFactura." ".$strObservacion;
                    
                    $this->putHistorialServicio(array ('intIdServicio'      =>  $intIdServicio,
                                                       'strObservacion'     =>  $strObservacion,
                                                       'strUsuarioCreacion' =>  $strUsuarioProcAutom,
                                                       'strIpCreacion'      =>  $strIp,
                                                       'strAccion'          => 'reingresoOrdenServicio'));
            

                    /* =================== Envio de notificación ===================*/            
                    $this->emcom->getRepository('schemaBundle:InfoPunto')
                    ->notificarProcesoReingresoOS(array('intIdServicio' => $intIdServicio,
                                                        'strMensaje'    => $strObservacion,
                                                        'strUsuario'    => $strUsuario,
                                                        'strIp'         => $strIp));                    

                    $arrayParametrosCaracteristica = array('intIdServicio'     => $intIdServicio,
                                                           'strCaracteristica' => 'NO_PASO_CONVERTIR_OT',
                                                           'strObservacion'    => $strObservacion,
                                                           'strUsuario'        => $strUsuario,
                                                           'strIp'             => $strIp);
                    
                    $this->serviceCovertirOt->ingresarServicioCaracteristica($arrayParametrosCaracteristica);
                                        
                    if(is_object($objInfoServCarac))
                    {
                        $intCantIntentosReingresoOs =  intval($objInfoServCarac->getValor()) + 1;
                        
                        if ($intCantIntentosReingresoOs <= $intNumIntentosReingresoOs) 
                        {                            
                            $objInfoServCarac->setEstado("Activo");
                            $objInfoServCarac->setFeUltMod(new \DateTime('now'));
                            $objInfoServCarac->setUsrUltMod($strUsuario);
                            $objInfoServCarac->setIpUltMod($strIp);
                            $objInfoServCarac->setValor($intCantIntentosReingresoOs);
                            $objInfoServCarac->setObservacion("Se realiza conteo de intentos de Reingreso de OS.");
                            $this->emcom->persist($objInfoServCarac);
                            $this->emcom->flush();
                            $this->emcom->commit();   
                        } 
                    }
                    
                    if($intCantIntentosReingresoOs == $intNumIntentosReingresoOs)
                    {
                        $objInfoServicioHistorial = $this->emcom->getRepository('schemaBundle:InfoServicioHistorial')
                                                         ->findOneBy(array('servicioId' => $objInfoServicioReingresado->getId()), 
                                                                             array('id' => 'DESC'));

                        if(is_object($objInfoServicioHistorial))
                        {
                            $strAccionHistorial = $objInfoServicioHistorial->getAccion();
                        }
                        $arrayParams = array('strNombreParametro' => $strNombreParametro,
                                             'strProceso'         => $strParamDetProceso,
                                             'strDescripcion'     => $strParamNumIntentosOs);

                        $strMsgErrorNumIntentosOS = $this->getMensajeReprocesoOS($arrayParams);
                        if(!is_null($strMsgErrorNumIntentosOS))
                        {
                            $strObservacionHistorial = $strMsgErrorNumIntentosOS;
                            $strObservacionHistorial = str_replace("{NumIntentosReingresoOs}", $intNumIntentosReingresoOs,$strObservacionHistorial);
                        }
                        else
                        {
                            $strObservacionHistorial = "OS-No procede para Reingreso Automático: Motivo: Máximo($intNumIntentosReingresoOs) "
                                . "Intentos Fallidos.";                                                                
                        }
                       if ($strAccionHistorial != 'numIntentosOs')
                       {
                            $this->putHistorialServicio(array ('intIdServicio'      =>  $objInfoServicioReingresado->getId(),
                                                               'strObservacion'     =>  $strObservacionHistorial,
                                                               'strUsuarioCreacion' =>  $strUsuarioProcAutom,
                                                               'strIpCreacion'      =>  $strIp,
                                                               'strAccion'          => 'numIntentosOs'));
            
                           /* =================== Envio de notificación ===================*/            
                           $this->emcom->getRepository('schemaBundle:InfoPunto')
                                       ->notificarProcesoReingresoOS(array('intIdServicio' => $objInfoServicioReingresado->getId(),
                                                                           'strMensaje'    => $strObservacionHistorial,
                                                                           'strUsuario'    => $strUsuario,
                                                                           'strIp'         => $strIp));
                       }
                    }
                    if($strFlujoCompleto === 'completo')
                    {
                        $this->serviceCovertirOt->actualizarServicioCaracteristica($arrayParamCaractFlujoCompleto);
                    }
                    $this->emcom->commit();
                    $arrayRespuesta = array ('status'  => 'fail',
                                             'message' => $strObservacion);

                    return $arrayRespuesta;

                }
            }
            if($strFlujoCompleto === 'completo')
            {
                $this->serviceCovertirOt->actualizarServicioCaracteristica($arrayParamCaractFlujoCompleto);
            }
            $arrayRespuesta = array ('status'  => 'ok',
                                     'message' => 'Proceso Culminado');
            
            $strObservacion = 'Orden de Servicio reingresada ha sido PrePlanificada.';
            //Obtengo Id de Servicio Origen del reingreso ID_SERVICIO_REINGRESO          
            $objCaracteristica   = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                               ->findOneBy(array('descripcionCaracteristica' => 'ID_SERVICIO_REINGRESO',
                                                                 'tipo'                      => 'COMERCIAL',
                                                                 'estado'                    => 'Activo'));
            if(!is_object($objCaracteristica))
            {
                throw new \Exception("Error: Hubo un error al obtener la característica ID_SERVICIO_REINGRESO");
            }
                     
            $objInfoServCarac = $this->emcom->getRepository("schemaBundle:InfoServicioCaracteristica")
                                     ->findOneBy(array("servicioId"       => (int)$intIdServicio,
                                                       "caracteristicaId" => $objCaracteristica,
                                                       "estado"           => "Activo"));            
            if (!is_object($objInfoServCarac))
            {
                throw new \Exception("Error: Hubo un error al obtener el servicio origen del reingreso de orden de servicio");
            }
            $intIdServicioOrigen = $objInfoServCarac->getValor();
            
             //Ingresamos la observación en el historial del servicio Origen del Reingreso indicando que el proceso ha concluido.
            $this->putHistorialServicio(array ('intIdServicio'      =>  $intIdServicioOrigen,
                                               'strObservacion'     =>  $strObservacion,
                                               'strUsuarioCreacion' =>  $strUsuarioProcAutom,
                                               'strIpCreacion'      =>  $strIp,
                                               'strAccion'          => 'reingresoOrdenServicio'));
            
            /* =================== Envio de notificación ===================*/                        
            $this->emcom->getRepository('schemaBundle:InfoPunto')
                 ->notificarProcesoReingresoOS(array('intIdServicio' => $objInfoServicioReingresado->getId(),
                                                     'strMensaje'    => $strObservacion,
                                                     'strUsuario'    => $strUsuario,
                                                     'strIp'         => $strIp));
            $this->emcom->commit();            
                                    
            return $arrayRespuesta;
        }
        catch (\Exception $objException)
        {                      
            if($strFlujoCompleto === 'completo')
            {
                $this->serviceCovertirOt->actualizarServicioCaracteristica($arrayParamCaractFlujoCompleto);                
            }
           
            $strMessage = 'Error al realizar el proceso automático de factibilidad y '.
                          'conversión a orden de trabajo';

            //Ingresamos la observación en el historial del servicio.
            $this->putHistorialServicio(array ('intIdServicio'      =>  $intIdServicio,
                                               'strObservacion'     =>  $strMessage,
                                               'strUsuarioCreacion' =>  $strUsuarioProcAutom,
                                               'strIpCreacion'      =>  $strIp,
                                               'strAccion'          => 'reingresoOrdenServicio'));
            
             /* =================== Envio de notificación ===================*/
            $this->emcom->getRepository('schemaBundle:InfoPunto')
                 ->notificarProcesoReingresoOS(array('intIdServicio' => $objInfoServicioReingresado->getId(),
                                                     'strMensaje'    => $strMessage,
                                                     'strUsuario'    => $strUsuario,
                                                     'strIp'         => $strIp));

            
            if (strpos($objException->getMessage(),'Error : ') !== false)
            {
                $strMessage = explode('Error : ',$objException->getMessage())[1];
            }

            $this->utilServicio->insertError('Telcos+',
                                             'InfoServicioService->reingresoOrdenServicio',
                                              substr($objException->getMessage().' IdServicio: '.$intIdServicio, 0, 4000),
                                              $strUsuario,
                                              $strIp);   
                                              
            // Verificación y reverso de solicitudes por preplanificación para productos CIH
            if(!empty($arrayParamsPreplanificaCIH) && $strPrefijoEmpresa == "MD")
            {
                $this->serviceInfoContrato->reversaPreplanificacionCIH($arrayParamsPreplanificaCIH);
            }
                       
            if ($this->emcom->getConnection()->isTransactionActive())
            {
                $this->emcom->getConnection()->rollback();
                $this->emcom->close();
            }
            if ($this->eminf->getConnection()->isTransactionActive())
            {
                $this->eminf->getConnection()->rollback();
                $this->eminf->close();
            }             
            $arrayRespuesta = array ('status'  => 'fail',
                                     'message' => $strMessage);
        }
        return $arrayRespuesta;
    }
    
    /**
     * Método para crear el Servicio de Seguridad "Security Secure Sdwan", Migración Sdwan.
     *
     * @author David León <mdleon@telconet.ec>
     * @version 1.0 - 07-01-2020
     *
     * @param type $arrayParametros
     * @return type $arrayRespuesta
     * @throws \Exception
     */

    public function crearLicenciaSdwan($arrayParametros)
    {
        $strDescripcionPresentaFactura      = $arrayParametros['strDescripcionPresentaFactura'];
        $objServicioNgFire                  = $arrayParametros['objServicioNgFire'];
        $objProductoLic                     = $arrayParametros['objProductoLic'];
        $strPlanFire                        = $arrayParametros['strPlanFire'];
        $strModeloFire                      = $arrayParametros['strModeloFire'];
        $objServComision                    = $arrayParametros['objServComision'];
        $objServFireHistori                 = $arrayParametros['objServFireHistori'];
        $emComercial                        = $this->emcom;
        $strAccion                          = '';
        try
        {
            $objServLicencia = new InfoServicio();
            $objServLicencia = clone $objServicioNgFire;
            $objServLicencia->setProductoId($objProductoLic);
            $objServLicencia->setEstado('Activo');
            $objServLicencia->setUsrCreacion($arrayParametros['usrCreacion']);
            $objServLicencia->setFeCreacion(new \DateTime('now'));
            $objServLicencia->setLoginAux();
            $objServLicencia->setDescripcionPresentaFactura($strDescripcionPresentaFactura);
            $emComercial->persist($objServLicencia);
            $emComercial->flush();

            $objServTecLic = new InfoServicioTecnico();
            $objServTecLic->setServicioId($objServLicencia);
            $objServTecLic->setTipoEnlace('PRINCIPAL');
            $emComercial->persist($objServTecLic);
            $emComercial->flush();

            $objCaractPlan           = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                         ->findOneBy(array( "descripcionCaracteristica" => 'SEC PLAN SECURE SDWAN',
                                                                            "estado" => "Activo"));

            if(is_object($objCaractPlan) && !empty($objCaractPlan))
            {
                $objProdCaractPlan     = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                            ->findOneBy(array( "productoId"          => $objProductoLic->getId(),
                                                               "caracteristicaId"    => $objCaractPlan->getId(),
                                                               "estado"              => "Activo"));
                if(is_object($objProdCaractPlan) && !empty($objProdCaractPlan))
                {
                    $objCaracLicencia = new InfoServicioProdCaract();
                    $objCaracLicencia->setServicioId($objServLicencia->getId());
                    $objCaracLicencia->setProductoCaracterisiticaId($objProdCaractPlan->getId());
                    $objCaracLicencia->setValor($strPlanFire);
                    $objCaracLicencia->setUsrCreacion($arrayParametros['usrCreacion']);
                    $objCaracLicencia->setFeCreacion(new \DateTime('now'));
                    $objCaracLicencia->setEstado('Activo');
                    $emComercial->persist($objCaracLicencia);
                    $emComercial->flush();
                }
            }

            //MODELO


            $objCaractModelo          = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                          ->findOneBy(array( "descripcionCaracteristica" => 'SEC MODELO FIREWALL',
                                                                             "estado" => "Activo"));

            if(is_object($objCaractModelo) && !empty($objCaractModelo))
            {
                $objProdCaractModelo     = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                            ->findOneBy(array( "productoId"          => $objProductoLic->getId(),
                                                               "caracteristicaId"    => $objCaractModelo->getId(),
                                                               "estado"              => "Activo"));
                if(is_object($objProdCaractModelo) && !empty($objProdCaractModelo))
                {
                    $objCaracLicencia = new InfoServicioProdCaract();
                    $objCaracLicencia->setServicioId($objServLicencia->getId());
                    $objCaracLicencia->setProductoCaracterisiticaId($objProdCaractModelo->getId());
                    $objCaracLicencia->setValor($strModeloFire);
                    $objCaracLicencia->setUsrCreacion($arrayParametros['usrCreacion']);
                    $objCaracLicencia->setFeCreacion(new \DateTime('now'));
                    $objCaracLicencia->setEstado('Activo');
                    $emComercial->persist($objCaracLicencia);
                    $emComercial->flush();
                }
            }

            $objLicenComisio = new InfoServicioComision();
            $objLicenComisio = clone $objServComision;
            $objLicenComisio->setServicioId($objServLicencia);
            $objLicenComisio->setUsrCreacion($arrayParametros['usrCreacion']);
            $objLicenComisio->setFeCreacion(new \DateTime('now'));
            $emComercial->persist($objLicenComisio);
            $emComercial->flush();

            $objLicenHistorial = new InfoServicioHistorial();
            $objLicenHistorial = clone $objServFireHistori;
            $objLicenHistorial->setServicioId($objServLicencia);
            $objLicenHistorial->setUsrCreacion($arrayParametros['usrCreacion']);
            $objLicenHistorial->setFeCreacion(new \DateTime('now'));
            $emComercial->persist($objLicenHistorial);
            $emComercial->flush();

            $objLicenHistorial2 = new InfoServicioHistorial();
            $objLicenHistorial2->setServicioId($objServLicencia);
            $objLicenHistorial2->setUsrCreacion($arrayParametros['usrCreacion']);
            $objLicenHistorial2->setFeCreacion(new \DateTime('now'));
            $objLicenHistorial2->setIpCreacion($arrayParametros['ipCreacion']);
            $objLicenHistorial2->setEstado('Pendiente');
            $objLicenHistorial2->setObservacion('Se creo el servicio');
            $emComercial->persist($objLicenHistorial2);
            $emComercial->flush();

            $objAccion  = $emComercial->getRepository('schemaBundle:SistAccion')->findOneBy(array('nombreAccion' => 'confirmarServicio',
                                                                                                        'estado'       => 'Activo'));
            if (is_object($objAccion) && !empty($objAccion))
            {
                $strAccion=$objAccion->getNombreAccion();
            }

            $objLicenHistorial3 = new InfoServicioHistorial();
            $objLicenHistorial3->setServicioId($objServLicencia);
            $objLicenHistorial3->setUsrCreacion($arrayParametros['usrCreacion']);
            $objLicenHistorial3->setFeCreacion(new \DateTime('now'));
            $objLicenHistorial3->setIpCreacion($arrayParametros['ipCreacion']);
            $objLicenHistorial3->setEstado('Activo');
            $objLicenHistorial3->setAccion($strAccion);
            $objLicenHistorial3->setObservacion('Se confirmo el servicio');
            $emComercial->persist($objLicenHistorial3);
            $emComercial->flush();

            $strStatus  = "OK";
            $strMensaje = "<br> Se crea nuevo servicio <br> Servicio: SECURITY SECURE SDWAN. con Plan ".$strPlanFire;
        }
        catch(\Exception $e)
        {
            if ($emComercial->getConnection()->isTransactionActive())
            {
                $emComercial->getConnection()->rollback();
                $emComercial->close();
            }
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }
        $arrayRespuesta = array(
                                "strStatus"   => $strStatus,
                                "strMensaje"  => $strMensaje
                                );
        return $arrayRespuesta;
    }

    /*
     * Método que permite obtener el id del servicio tradicional con el que se va a instalar COU LINEAS TELEFONIA FIJA.
     *
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 12-02-2020 - Version Inicial.
     *
     * @param $intIdServicio -> Un entero que contiene el Id del servicio.
     * @return null|$objInstalacionSimultanea
     *
     */

    public function getIdServicioTradicionalInstalacionCou($intIdServicio)
    {
        $objInstalacionSimultaneaCou = null;

        $objAdmiCaract      = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                          ->findOneBy(array(
                                              'descripcionCaracteristica'=>'INSTALACION_SIMULTANEA_COU_TELEFONIA_FIJA',
                                              'estado'=>'Activo'
                                          ));

        $objAdmiProdCaract  = $this->eminf->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                          ->findOneBy(array(
                                              'caracteristicaId'=>$objAdmiCaract->getId()
                                          ));
                                          
        $objServCou        = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                            ->find($intIdServicio);

        $objInfoServProdCaract = $this->eminf->getRepository('schemaBundle:InfoServicioProdCaract')
                                             ->findOneBy(array(
                                                 'servicioId'=>$objServCou->getId(),
                                                 'productoCaracterisiticaId'=>$objAdmiProdCaract->getId()
                                             ));

        if (is_object($objInfoServProdCaract))
        {
            $boolInstalacionSimultaneaCou = $objInfoServProdCaract->getValor() !== 'null';
            $objInstalacionSimultaneaCou['boolInstalacionSimultaneaCou'] = $boolInstalacionSimultaneaCou;
            $objInstalacionSimultaneaCou['intIdServTradicional'] = $boolInstalacionSimultaneaCou ? intval($objInfoServProdCaract->getValor()) : null;
        }
        
        return $objInstalacionSimultaneaCou;
    }
    /*
     * Función que inserta el historial de un servicio enviado como parámetro, cuya acción será seteada en base a la lectura
     * de un valor parametrizado  almacenado en BD.
     *
     * @author Edgar Holguín <eholguin@telconet.ec>
     * @version 1.0 - 12-12-2019
     * 
     */
    public function insertaHistorialFeActivacion($arrayParametros)
    {
        $emComercial     = $this->emcom;
        $emGeneral       = $this->emgen;        
        $objInfoServicio = $arrayParametros['objServicio'];
        // OBTENGO EL PARAMETRO QUE TRAE LA ACCION A INSERTAR EN EL HISTORIAL DEL SERVICIO.
        $arrayValoresParametros = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne($arrayParametros["strNombreParametro"],
                                                     $arrayParametros["strModulo"],
                                                     $arrayParametros["strProceso"],
                                                     $arrayParametros["strDescripcionParametroDet"],
                                                     $arrayParametros["strValor1"],
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     $arrayParametros["strEmpresaCod"]);
        
        if(isset($arrayValoresParametros["valor2"]) && !empty($arrayValoresParametros["valor2"]))
        {
            $strAccionHistorial = $arrayValoresParametros["valor2"];
        }
        // OBTENGO LA FECHA DE ACTIVACION DEL SERVICIO DE ORIGEN 
        $arrayValoresParametros['ID SERVICIO ORIGEN']    = $objInfoServicio->getId();
	    $arrayParametrosFechaAct = array('intIdServicio' => $objInfoServicio->getId(),
                                         'intIdPunto'    => $objInfoServicio->getPuntoId());
        $strFechaActivacion = $emComercial->getRepository('schemaBundle:InfoServicio')
                                          ->getFechaActivacionMinServicio($arrayParametrosFechaAct);
        $arrayValoresParametros['strFechaActivacion'] = $strFechaActivacion;
        $objServicioHistorial = new InfoServicioHistorial();
        $objServicioHistorial->setServicioId($objInfoServicio);
        $objServicioHistorial->setObservacion($arrayValoresParametros['strObservacion']);
        $objServicioHistorial->setIpCreacion($arrayParametros['strIpClient']);
        $objServicioHistorial->setAccion($strAccionHistorial);
        $objServicioHistorial->setFeCreacion((new \DateTime($strFechaActivacion)));
        $objServicioHistorial->setUsrCreacion($arrayParametros['strUsrCreacion']);
        $objServicioHistorial->setEstado($arrayParametros['strEstado']);
        $emComercial->persist($objServicioHistorial);
        $emComercial->flush();
    }    

    /**
     * Función que valida si es posible eliminar un Servicio Small Business
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 09-05-2020
     * 
     * @param array $arrayParametros [
     *                                  "intIdProductoAEliminar"        => id del producto del servicio que se desea eliminar
     *                                  "strCodEmpresa"                 => id de la empresa en sesión
     *                                  "strIdsProductosGrid"           => cadena con los ids de los productos de los servicios que conforman el grid
     *                                                                     separada por comas
     *                                ]
     * 
     * @return array $arrayRespuesta [
     *                                  "status"    => OK o ERROR,
     *                                  "mensaje"   => mensaje de error
     *                                ]
     */
    public function validaEliminacionServicio($arrayParametros) 
    {
        $boolErrorEliminacion  = false;
        try
        {
            if(!isset($arrayParametros["intIdProductoAEliminar"]) || empty($arrayParametros["intIdProductoAEliminar"]))
            {
                throw new \Exception("No se ha enviado el id del producto");
            }
            
            if(!isset($arrayParametros["strCodEmpresa"]) || empty($arrayParametros["strCodEmpresa"]))
            {
                throw new \Exception("No se ha enviado el código de la empresa");
            }
            
            if(!isset($arrayParametros["strIdsProductosGrid"]) || empty($arrayParametros["strIdsProductosGrid"]))
            {
                throw new \Exception("No se ha enviado los ids de los productos del grid");
            }
            
            $intIdProductoAEliminar         = $arrayParametros["intIdProductoAEliminar"];
            $strCodEmpresa                  = $arrayParametros["strCodEmpresa"];
            $objProductoAEliminar           = $this->emcom->getRepository('schemaBundle:AdmiProducto')->find($intIdProductoAEliminar);
            $strErrorDescripcionesProductos = "";
            if(is_object($objProductoAEliminar) && $objProductoAEliminar->getNombreTecnico() === "INTERNET SMALL BUSINESS")
            {
                $arrayIdsProductosGrid  = explode(',', $arrayParametros["strIdsProductosGrid"]);
                $intIndiceArregloIdsProductos = 0;
                if($arrayIdsProductosGrid)
                {
                    foreach($arrayIdsProductosGrid as $strIdProductoGrid)
                    {
                        $arrayIdsProductosGrid[$intIndiceArregloIdsProductos] = intval($strIdProductoGrid);
                        error_log("***idProductoGrid***".$arrayIdsProductosGrid[$intIndiceArregloIdsProductos]);
                        $intIndiceArregloIdsProductos++;
                    }
                }
                
                $arrayParams                    = array("strValor1ParamsProdsTnGpon"    => "PRODUCTOS_RELACIONADOS_INTERNET_IP",
                                                        "strCodEmpresa"                 => $strCodEmpresa,
                                                        "intIdProductoInternet"         => $intIdProductoAEliminar);
                $arrayInfoProdsPrincipalConIp   = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                              ->obtenerParametrosProductosTnGpon($arrayParams);
                if(isset($arrayInfoProdsPrincipalConIp) && !empty($arrayInfoProdsPrincipalConIp))
                {
                    foreach($arrayInfoProdsPrincipalConIp as $arrayInfoProd)
                    {
                        if(in_array($arrayInfoProd["intIdProdIp"], $arrayIdsProductosGrid))
                        {
                            $boolErrorEliminacion           = true;
                            $strErrorDescripcionesProductos .= $arrayInfoProd["strDescripcionProdIp"].", "; 
                        }
                    }

                    if($boolErrorEliminacion)
                    {
                        $strStatus  = "ERROR";
                        $strMensaje = "El servicio ".$objProductoAEliminar->getDescripcionProducto()." no se puede eliminar ya que existen servicios "
                                      ."dependientes agregados. Por favor primero elimine los servicios: "
                                      .substr($strErrorDescripcionesProductos, 0, -2);
                    }
                    else
                    {
                        $strStatus  = "OK";
                        $strMensaje = "";
                    }
                }
                else
                {
                    $strStatus  = "ERROR";
                    $strMensaje = "No se han mapeado servicios relacionados al servicio que se desea eliminar";
                }
            }
            else
            {
                $strStatus  = "OK";
                $strMensaje = "";
            }
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            error_log("Error al intentar verificar la eliminación de un servicio ".$e->getMessage());
        }
        $arrayRespuesta = array("status"    => $strStatus,
                                "mensaje"   => $strMensaje);
        return $arrayRespuesta;
   }
   
    /**
     * Método usado para crear la solicitud de agregar equipo asociada al servicio W+AP destino tomando en cuenta el servicio origen
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 13-11-2020
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 06-05-2021 Se modifica el proceso al cerrar las tareas asociada a la solicitud del servicio origen
     * 
     * @param array $arrayParametros [
     *                                  "objServicioOrigen"     => objeto del servicio origen
     *                                  "objServicioDestino"    => objeto del servicio destino
     *                                  "strCodEmpresa"         =>  id de la empresa,
     *                                  "strUsrCreacion"        => usuario de creación
     *                                  "strIpCreacion"         => ip de creación
     *                               ]
     * @return array $arrayRespuesta [
     *                                  "status"    => OK o ERROR
     *                                  "mensaje"   => Mensaje de error
     *                               ]
     * 
     */
    public function creaSolicitudWyApTrasladoyCRS($arrayParametros)
    {
        $objServicioOrigen      = $arrayParametros["objServicioOrigen"];
        $objServicioDestino     = $arrayParametros["objServicioDestino"];
        $strCodEmpresa          = $arrayParametros["strCodEmpresa"];
        $strUsrCreacion         = $arrayParametros["strUsrCreacion"];
        $strIpCreacion          = $arrayParametros["strIpCreacion"];
        $strOpcion              = $arrayParametros["strOpcion"] ? $arrayParametros["strOpcion"] : "traslado de servicio";
        $strMensaje             = "";
        $strSolConDetWdb        = "";
        $strSolConDetEdb        = "";
        $strCreaCaractTraslado  = "SI";
        try
        {
            if(!is_object($objServicioOrigen) || !is_object($objServicioDestino))
            {
                throw new \Exception("No se han enviado correctamente los servicios origen y destino al ejecutar el flujo para servicios W+AP");
            }
            
            $strEstadoServicioOrigen    = $objServicioOrigen->getEstado();
            $strEstadoServicioDestino   = $objServicioDestino->getEstado();
            $strTipoSolAgregarEquipo    = "SOLICITUD AGREGAR EQUIPO";
            $objTipoSolicitudAgregarEquipo  = $this->emCome->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                           ->findOneByDescripcionSolicitud($strTipoSolAgregarEquipo);
            if(!is_object($objTipoSolicitudAgregarEquipo))
            {
                throw new \Exception("No se encontró información acerca del tipo de solicitud de agregar equipo");
            }

            $objCaractWifiDualBand  = $this->emCome->getRepository("schemaBundle:AdmiCaracteristica")
                                                   ->findOneBy(array(   'descripcionCaracteristica' => 'WIFI DUAL BAND',
                                                                        'estado'                    => 'Activo'));
            if (!is_object($objCaractWifiDualBand))
            {
                throw new \Exception("No se encontró información acerca de característica WIFI DUAL BAND");
            }

            $objCaractElementoCliente   = $this->emCome->getRepository('schemaBundle:AdmiCaracteristica')
                                                       ->findOneBy(array(   'descripcionCaracteristica'  => 'ELEMENTO CLIENTE',
                                                                            'estado'                     => 'Activo'));
            if (!is_object($objCaractElementoCliente))
            {
                throw new \Exception("No se encontró información acerca de característica ELEMENTO CLIENTE");
            }

            $objCaractExtenderDualBand  = $this->emCome->getRepository("schemaBundle:AdmiCaracteristica")
                                                       ->findOneBy(array(   'descripcionCaracteristica' => 'EXTENDER DUAL BAND',
                                                                            'estado'                    => 'Activo'));
            if (!is_object($objCaractExtenderDualBand))
            {
                throw new \Exception("No se encontró información acerca de característica EXTENDER DUAL BAND");
            }

            $arrayEstadosVerificaSolAgregarEquipo   = array();
            $arrayEstadosAbiertosSolAgregarEquipo   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                  ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD', 
                                                                        '', 
                                                                        '', 
                                                                        '',
                                                                        'ESTADOS_SOLICITUDES_ABIERTAS',
                                                                        'SOLICITUD AGREGAR EQUIPO',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $strCodEmpresa);
            if(is_array($arrayEstadosAbiertosSolAgregarEquipo) && count($arrayEstadosAbiertosSolAgregarEquipo) > 0)
            {
                foreach($arrayEstadosAbiertosSolAgregarEquipo as $arrayEstadoAbiertoSolAgregarEquipo)
                {   
                    $arrayEstadosVerificaSolAgregarEquipo[] = $arrayEstadoAbiertoSolAgregarEquipo['valor3'];
                }
            }

            if(!isset($arrayEstadosVerificaSolAgregarEquipo) || empty($arrayEstadosVerificaSolAgregarEquipo))
            {
                throw new \Exception("No se ha podido obtener los estados permitidos para una SOLICITUD AGREGAR EQUIPO");
            }
            
            $objProductoInternet    = $this->emCome->getRepository('schemaBundle:AdmiProducto')
                                                   ->findOneBy(array(   "nombreTecnico" => "INTERNET", 
                                                                        "empresaCod"    => $strCodEmpresa,
                                                                        "estado"        => "Activo"));
            if(!is_object($objProductoInternet))
            {
                throw new \Exception("No se ha podido obtener correctamente el producto Internet");
            }
            
            $objSpcTrasladarExtenderServicioOrigen  = $this->serviceGeneral->getServicioProductoCaracteristica( $objServicioOrigen, 
                                                                                                                "TRASLADAR EXTENDER DUAL BAND", 
                                                                                                                $objProductoInternet);
            
            if(($strEstadoServicioOrigen === "Activo" && $strEstadoServicioDestino === "PendienteAp") 
                || ($strEstadoServicioOrigen === "PendienteAp" && is_object($objSpcTrasladarExtenderServicioOrigen)))
            {
                /**
                 * Implica que ya se ha instalado el Extender, por lo que no deberá crearse una solicitud para agregar equipo.
                 * En este caso, se agregará la característica 
                 * Este proceso se lo hará una vez ejecutado el proceso de traslado, dejando una solicitud en estado Asignada.
                 * con el detalle del Extender
                 */
                $objCaractTrasladarExtender = $this->emCome->getRepository('schemaBundle:AdmiCaracteristica')
                                                           ->findOneBy(array(   "descripcionCaracteristica" => "TRASLADAR EXTENDER DUAL BAND",
                                                                                "estado" => "Activo"));
                if(!is_object($objCaractTrasladarExtender))
                {
                    throw new \Exception("No se ha podido obtener la característica para realizar el traslado del Extender dual band");
                }
                $objProdCaractTrasladarExtender = $this->emCome->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                               ->findOneBy(array("productoId"           => $objProductoInternet->getId(), 
                                                                                 "caracteristicaId"     => $objCaractTrasladarExtender->getId(), 
                                                                                 "estado"               => "Activo"));
                if(!is_object($objProdCaractTrasladarExtender))
                {
                    throw new \Exception("No se ha podido obtener correctamente la relación del producto Internet ".
                                         "con la característica trasladar extender");
                }
                
                if(is_object($objSpcTrasladarExtenderServicioOrigen))
                {
                    $objSpcTrasladarExtenderServicioOrigen->setEstado('Eliminado');
                    $objSpcTrasladarExtenderServicioOrigen->setUsrUltMod($strUsrCreacion);
                    $objSpcTrasladarExtenderServicioOrigen->setFeUltMod(new \DateTime('now'));
                    $this->emCome->persist($objSpcTrasladarExtenderServicioOrigen);
                    $this->emCome->flush();
                }
                $objSpcTrasladaExtender = new InfoServicioProdCaract();
                $objSpcTrasladaExtender->setServicioId($objServicioDestino->getId());
                $objSpcTrasladaExtender->setProductoCaracterisiticaId($objProdCaractTrasladarExtender->getId());
                $objSpcTrasladaExtender->setValor($objServicioOrigen->getId());
                $objSpcTrasladaExtender->setFeCreacion(new \DateTime('now'));
                $objSpcTrasladaExtender->setUsrCreacion($strUsrCreacion);
                $objSpcTrasladaExtender->setEstado("Activo");
                $this->emCome->persist($objSpcTrasladaExtender);
                $this->emCome->flush();
                $strCreaCaractTraslado = "NO";
            }
            else if($strEstadoServicioDestino === "PrePlanificada")
            {
                /**
                 * Implica que el servicio aún no cuenta con todos los equipos, por lo que deberá crearse la solicitud 
                 * con los respectivos detalles de cambio de equipo a un Wifi Dual Band y/o agregar el extender.
                 * Estos registros se crearán de acuerdo a como se encontraban en el servicio origen con un estado inicial
                 * de PrePlanificada para que PYL pueda gestionarlas
                 * 
                 * PrePlanificada -> PrePlanificada
                 * Asignada -> PrePlanificada
                 * PendienteAp -> PrePlanificada
                 * 
                 */
                $objSolAgregarEquipoAbiertaOrigen   = $this->emCome->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                   ->findOneBy(array('servicioId'        => $objServicioOrigen->getId(),
                                                                                     'tipoSolicitudId'   => $objTipoSolicitudAgregarEquipo->getId(),
                                                                                     'estado'            => $arrayEstadosVerificaSolAgregarEquipo));
                if(!is_object($objSolAgregarEquipoAbiertaOrigen))
                {
                    throw new \Exception("No se ha podido obtener la SOLICITUD AGREGAR EQUIPO del servicio origen");
                }
                
                $strObservacionCorreo       = $strTipoSolAgregarEquipo." creada automáticamente";
                $objSolAgregarEquipoDestino = new InfoDetalleSolicitud();
                $objSolAgregarEquipoDestino->setServicioId($objServicioDestino);
                $objSolAgregarEquipoDestino->setTipoSolicitudId($objTipoSolicitudAgregarEquipo);
                $objSolAgregarEquipoDestino->setEstado($strEstadoServicioDestino);
                $objSolAgregarEquipoDestino->setUsrCreacion($strUsrCreacion);
                $objSolAgregarEquipoDestino->setFeCreacion(new \DateTime('now'));
                $this->emCome->persist($objSolAgregarEquipoDestino);
                $this->emCome->flush();
                
                $arrayCaractsSolAgregarEquipoAbiertaOrigen  = $this->emCome->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                           ->findBy(array(  "detalleSolicitudId" => 
                                                                                            $objSolAgregarEquipoAbiertaOrigen->getId(),
                                                                                            "estado"             => 
                                                                                            $arrayEstadosVerificaSolAgregarEquipo
                                                                                     ));
                if(isset($arrayCaractsSolAgregarEquipoAbiertaOrigen) && !empty($arrayCaractsSolAgregarEquipoAbiertaOrigen))
                {
                    foreach($arrayCaractsSolAgregarEquipoAbiertaOrigen as $objCaractSolAgregarEquipoOrigen)
                    {
                        if(intval($objCaractWifiDualBand->getId()) === intval($objCaractSolAgregarEquipoOrigen->getCaracteristicaId()->getId()))
                        {
                            $strSolConDetWdb = "SI";
                        }
                        else if(intval($objCaractExtenderDualBand->getId()) ===
                            intval($objCaractSolAgregarEquipoOrigen->getCaracteristicaId()->getId()))
                        {
                            $strSolConDetEdb = "SI";
                        }

                        $objCaractSolAgregarEquipoOrigen->setEstado("Finalizada");
                        $objCaractSolAgregarEquipoOrigen->setUsrUltMod($strUsrCreacion);
                        $objCaractSolAgregarEquipoOrigen->setFeUltMod(new \DateTime('now'));
                        $this->emCome->persist($objCaractSolAgregarEquipoOrigen);
                        $this->emCome->flush();

                        $objCaractSolAgregarEquipoDestino = new InfoDetalleSolCaract();
                        $objCaractSolAgregarEquipoDestino->setCaracteristicaId($objCaractSolAgregarEquipoOrigen->getCaracteristicaId());
                        $objCaractSolAgregarEquipoDestino->setDetalleSolicitudId($objSolAgregarEquipoDestino);
                        $objCaractSolAgregarEquipoDestino->setValor($objCaractSolAgregarEquipoOrigen->getValor());
                        $objCaractSolAgregarEquipoDestino->setEstado($strEstadoServicioDestino);
                        $objCaractSolAgregarEquipoDestino->setUsrCreacion($strUsrCreacion);
                        $objCaractSolAgregarEquipoDestino->setFeCreacion(new \DateTime('now'));
                        $this->emCome->persist($objCaractSolAgregarEquipoDestino);
                        $this->emCome->flush();
                    }
                }
                else
                {
                    $arrayRespuestaServInternetValido   = $this->servicioTecnico
                                                               ->obtieneServicioInternetValido(array(   "intIdPunto"    =>
                                                                                                        $objServicioOrigen->getPuntoId()->getId(),
                                                                                                        "strCodEmpresa" => $strCodEmpresa
                                                                                                   ));
                    $strStatusServInternetValido        = $arrayRespuestaServInternetValido["status"];
                    $objServicioInternetValido          = $arrayRespuestaServInternetValido["objServicioInternet"];
                    if($strStatusServInternetValido === "OK")
                    {
                        if(!is_object($objServicioInternetValido))
                        {
                            throw new \Exception('No se ha podido obtener el Servicio de Internet en el punto origen');
                        }
                        $intIdServicioInternetValido    = $objServicioInternetValido->getId();
                        $arrayRespuestaWdbEnlazado      = $this->servicioTecnico->verificaEquipoEnlazado(
                                                                                                        array(  "intIdServicioInternet" =>
                                                                                                                $intIdServicioInternetValido,
                                                                                                                "strTipoEquipoABuscar"  =>
                                                                                                                "WIFI DUAL BAND"));
                        $strStatusWdbEnlazado       = $arrayRespuestaWdbEnlazado["status"];
                        $strMensajeWdbEnlazado      = $arrayRespuestaWdbEnlazado["mensaje"];
                        $strInfoEquipoWdbEnlazado   = $arrayRespuestaWdbEnlazado["infoEquipoEnlazado"];
                        if($strStatusWdbEnlazado === "OK")
                        {
                            if(!isset($strInfoEquipoWdbEnlazado) || empty($strInfoEquipoWdbEnlazado))
                            {
                                $strSolConDetWdb = "SI";
                            }
                        }
                        else
                        {
                            throw new \Exception('No se ha podido verificar el equipo ONT del servicio de Internet en el punto Origen. '
                                                 .$strMensajeWdbEnlazado);
                        }

                        $arrayRespuestaEdbEnlazado  = $this->servicioTecnico->verificaEquipoEnlazado(array( "intIdServicioInternet" =>
                                                                                                            $intIdServicioInternetValido,
                                                                                                            "strTipoEquipoABuscar"  =>
                                                                                                            "EXTENDER DUAL BAND"));
                        $strStatusEdbEnlazado       = $arrayRespuestaEdbEnlazado["status"];
                        $strMensajeEdbEnlazado      = $arrayRespuestaEdbEnlazado["mensaje"];
                        $strInfoEquipoEdbEnlazado   = $arrayRespuestaEdbEnlazado["infoEquipoEnlazado"];
                        if($strStatusEdbEnlazado === "OK")
                        {
                            if(!isset($strInfoEquipoEdbEnlazado) || empty($strInfoEquipoEdbEnlazado))
                            {
                                $strSolConDetEdb = "SI";
                            }
                        }
                        else
                        {
                            throw new \Exception('No se puede verificar el extender debido a que '.$strMensajeEdbEnlazado);
                        }
                        if($strSolConDetWdb !== "SI" && $strSolConDetEdb !== "SI")
                        {
                            throw new \Exception("No se ha podido obtener los detalles de la SOLICITUD AGREGAR EQUIPO asociada al servicio origen");
                        }
                    }
                    else
                    {
                        throw new \Exception('No se ha podido obtener correctamente el Servicio de Internet en el punto origen');
                    }
                }
                
                if($strSolConDetWdb == "SI")
                {
                    $strObservacionCorreo .= "<br>Incluye cambio de CPE ONT de un Wifi Estándar a un Wifi Dual Band.";
                }

                if($strSolConDetEdb == "SI")
                {
                    $strObservacionCorreo .= "<br>Incluye agregar equipo Extender Dual Band.";
                }

                $objDetSolHistAgregarEquipoDestino = new InfoDetalleSolHist();
                $objDetSolHistAgregarEquipoDestino->setDetalleSolicitudId($objSolAgregarEquipoDestino);
                $objDetSolHistAgregarEquipoDestino->setIpCreacion($strIpCreacion);
                $objDetSolHistAgregarEquipoDestino->setFeCreacion(new \DateTime('now'));
                $objDetSolHistAgregarEquipoDestino->setUsrCreacion($strUsrCreacion);
                $objDetSolHistAgregarEquipoDestino->setEstado($strEstadoServicioDestino);
                $objDetSolHistAgregarEquipoDestino->setObservacion($strObservacionCorreo);
                $this->emCome->persist($objDetSolHistAgregarEquipoDestino);
                $this->emCome->flush();

                //Se finaliza la solicitud de agregar equipo asociada al servicio origen del traslado
                $objSolAgregarEquipoAbiertaOrigen->setEstado("Finalizada");
                $this->emCome->persist($objSolAgregarEquipoAbiertaOrigen);
                $this->emCome->flush();

                $objDetSolHistAgregarEquipoOrigen = new InfoDetalleSolHist();
                $objDetSolHistAgregarEquipoOrigen->setDetalleSolicitudId($objSolAgregarEquipoAbiertaOrigen);
                $objDetSolHistAgregarEquipoOrigen->setEstado($objSolAgregarEquipoAbiertaOrigen->getEstado());
                $objDetSolHistAgregarEquipoOrigen->setObservacion("Se finaliza ".$strTipoSolAgregarEquipo." por ".$strOpcion);
                $objDetSolHistAgregarEquipoOrigen->setUsrCreacion($strUsrCreacion);
                $objDetSolHistAgregarEquipoOrigen->setFeCreacion(new \DateTime('now'));
                $objDetSolHistAgregarEquipoOrigen->setIpCreacion($strIpCreacion);
                $this->emCome->persist($objDetSolHistAgregarEquipoOrigen);
                $this->emCome->flush();
                
                $arrayParamsSolAgregarEquipoOrigen  = array("intIdDetalleSolicitud" => $objSolAgregarEquipoAbiertaOrigen->getId(),
                                                            "strProceso"            => 
                                                            "SEGUIMIENTO_GENERAL:Solicitud asociada a esta tarea fue finalizada por ".$strOpcion);
                $this->eminf->getRepository('schemaBundle:InfoDetalleSolicitud')->cerrarTareasPorSolicitud($arrayParamsSolAgregarEquipoOrigen);

                $strMensaje = "<br>Se ha creado la SOLICITUD AGREGAR EQUIPO asociada al servicio";
                $this->serviceGeneral->envioNotifAgregarEquipo(array(
                                                                        "objPunto"                  => $objServicioDestino->getPuntoId(),
                                                                        "objServicio"               => $objServicioDestino,
                                                                        "strObservacionCorreo"      => $strObservacionCorreo,
                                                                        "strDescripcionSolicitud"   => $strTipoSolAgregarEquipo,
                                                                        "strUsrCreacion"            => $strUsrCreacion,
                                                                        "strIpCreacion"             => $strIpCreacion
                                                                    ));
            }
            else
            {
                throw new \Exception("No existe un flujo definido para servicios W+Ap con el servicio origen en estado ".$strEstadoServicioOrigen
                                     ." y el servicio destino en estado ".$strEstadoServicioDestino);
            }
            $strStatus = "OK";
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService->creaSolicitudWyApTrasladoyCRS', 
                                              "Se presentaron problemas al crear la solicitud de W y Ap en Traslados y CRS. ".
                                              $e->getMessage(), 
                                              $strUsrCreacion, 
                                              $strIpCreacion );
            error_log("Error al ejecutar el flujo de W y Ap Traslados y CRS " . $e->getMessage());
        }
        $arrayRespuesta = array("status"                => $strStatus,
                                "mensaje"               => $strMensaje,
                                "creaCaractTraslado"    => $strCreaCaractTraslado);
        return $arrayRespuesta;
    }

    
    /**
     * Método usado para recrear la solicitud de agregar equipo al servicio W+AP origen al rechazarse o anularse el servicio destino
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 13-11-2020
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 06-05-2021 Se modifica el proceso al cerrar las tareas asociadas a la solicitud del servicio destino
     * 
     * @param array $arrayParametros [
     *                                  "objServicioDestino"    => objeto del servicio
     *                                  "strOpcion"             => TRASLADO
     *                                  "strCodEmpresa"         =>  id de la empresa,
     *                                  "strUsrCreacion"        => usuario de creación
     *                                  "strIpCreacion"         => ip de creación
     *                               ]
     * @return array $arrayRespuesta [
     *                                  "status"    => OK o ERROR
     *                                  "mensaje"   => Mensaje de error
     *                               ]
     * 
     */
    public function recreaSolicitudWyApTraslado($arrayParametros)
    {
        $objServicioDestino = $arrayParametros["objServicioDestino"];
        $strOpcion          = $arrayParametros["strOpcion"];
        $strCodEmpresa      = $arrayParametros["strCodEmpresa"];
        $strUsrCreacion     = $arrayParametros["strUsrCreacion"];
        $strIpCreacion      = $arrayParametros["strIpCreacion"];
        $strMensaje         = "";
        $strSolConDetWdb    = "";
        $strSolConDetEdb    = "";
        try
        {
            $strTipoSolAgregarEquipo        = "SOLICITUD AGREGAR EQUIPO";
            $objTipoSolicitudAgregarEquipo  = $this->emCome->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                           ->findOneByDescripcionSolicitud($strTipoSolAgregarEquipo);
            
            if(!is_object($objServicioDestino))
            {
                throw new \Exception("No se ha enviado correctamente el servicio destino para recrear la solicitud del W+Ap");
            }
            
            $objCaractWifiDualBand  = $this->emCome->getRepository("schemaBundle:AdmiCaracteristica")
                                                   ->findOneBy(array(   'descripcionCaracteristica' => 'WIFI DUAL BAND',
                                                                        'estado'                    => 'Activo'));
            if(!is_object($objCaractWifiDualBand))
            {
                throw new \Exception("No se encontró información acerca de característica WIFI DUAL BAND");
            }
            
            $objCaractElementoCliente   = $this->emCome->getRepository('schemaBundle:AdmiCaracteristica')
                                                       ->findOneBy(array(   'descripcionCaracteristica'  => 'ELEMENTO CLIENTE',
                                                                            'estado'                     => 'Activo'));
            if(!is_object($objCaractElementoCliente))
            {
                throw new \Exception("No se encontró información acerca de característica ELEMENTO CLIENTE");
            }
            
            $objCaractExtenderDualBand  = $this->emCome->getRepository("schemaBundle:AdmiCaracteristica")
                                                       ->findOneBy(array(   'descripcionCaracteristica' => 'EXTENDER DUAL BAND',
                                                                            'estado'                    => 'Activo'));
            if(!is_object($objCaractExtenderDualBand))
            {
                throw new \Exception("No se encontró información acerca de característica EXTENDER DUAL BAND");
            }
            
            $objProductoInternet    = $this->emCome->getRepository('schemaBundle:AdmiProducto')
                                                   ->findOneBy(array(   "nombreTecnico" => "INTERNET", 
                                                                        "empresaCod"    => $strCodEmpresa,
                                                                        "estado"        => "Activo"));
            if(!is_object($objProductoInternet))
            {
                throw new \Exception("No se ha podido obtener correctamente el producto Internet");
            }
            
            $arrayEstadosVerificaSolAgregarEquipo   = array();
            $arrayEstadosAbiertosSolAgregarEquipo   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                  ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD', 
                                                                        '', 
                                                                        '', 
                                                                        '',
                                                                        'ESTADOS_SOLICITUDES_ABIERTAS',
                                                                        $strTipoSolAgregarEquipo,
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $strCodEmpresa);
            if(is_array($arrayEstadosAbiertosSolAgregarEquipo) && count($arrayEstadosAbiertosSolAgregarEquipo) > 0)
            {
                foreach($arrayEstadosAbiertosSolAgregarEquipo as $arrayEstadoAbiertoSolAgregarEquipo)
                {   
                    $arrayEstadosVerificaSolAgregarEquipo[] = $arrayEstadoAbiertoSolAgregarEquipo['valor3'];
                }
            }
            
            if(!isset($arrayEstadosVerificaSolAgregarEquipo) || empty($arrayEstadosVerificaSolAgregarEquipo))
            {
                throw new \Exception("No se ha podido obtener los estados permitidos para una SOLICITUD AGREGAR EQUIPO");
            }
            
            //Se da de baja la solicitud del servicio destino y se crea una nueva solicitud para el servicio origen
            $objSolAgregarEquipoAbiertaDestino  = $this->emCome->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                               ->findOneBy(array(   'servicioId'      => $objServicioDestino->getId(),
                                                                                    'tipoSolicitudId' => $objTipoSolicitudAgregarEquipo->getId(),
                                                                                    'estado'          => $arrayEstadosVerificaSolAgregarEquipo));
            
            if($strOpcion === "TRASLADO")
            {
                $objSpcTraslado = $this->serviceGeneral->getServicioProductoCaracteristica($objServicioDestino, "TRASLADO", $objProductoInternet);
                if(is_object($objSpcTraslado))
                {
                    $intIdServicioOrigen = $objSpcTraslado->getValor();
                    if(isset($intIdServicioOrigen) && !empty($intIdServicioOrigen))
                    {
                        $objServicioOrigen  = $this->emCome->getRepository('schemaBundle:InfoServicio')->find($intIdServicioOrigen);
                    }
                }
            }
            
            if(is_object($objServicioOrigen) && is_object($objSolAgregarEquipoAbiertaDestino))
            {
                $objSolAgregarEquipoNuevaOrigen  = new InfoDetalleSolicitud();
                $objSolAgregarEquipoNuevaOrigen->setServicioId($objServicioOrigen);
                $objSolAgregarEquipoNuevaOrigen->setTipoSolicitudId($objTipoSolicitudAgregarEquipo);
                $objSolAgregarEquipoNuevaOrigen->setEstado("PrePlanificada");
                $objSolAgregarEquipoNuevaOrigen->setUsrCreacion($strUsrCreacion);
                $objSolAgregarEquipoNuevaOrigen->setFeCreacion(new \DateTime('now'));
                $this->emCome->persist($objSolAgregarEquipoNuevaOrigen);
                $this->emCome->flush();

                $strObservacionCorreo = $strTipoSolAgregarEquipo." creada automáticamente";

                $arrayCaractsSolAgregarEquipoAbiertaDestino = $this->emCome->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                   ->findBy(array(  "detalleSolicitudId" => 
                                                                                    $objSolAgregarEquipoAbiertaDestino->getId(),
                                                                                    "estado"             => $arrayEstadosVerificaSolAgregarEquipo));
                if(isset($arrayCaractsSolAgregarEquipoAbiertaDestino) && !empty($arrayCaractsSolAgregarEquipoAbiertaDestino))
                {
                    foreach($arrayCaractsSolAgregarEquipoAbiertaDestino as $objCaractSolAgregarEquipoDestino)
                    {
                        if(intval($objCaractWifiDualBand->getId()) === intval($objCaractSolAgregarEquipoDestino->getCaracteristicaId()->getId()))
                        {
                            $strSolConDetWdb    = "SI";
                        }
                        else if(intval($objCaractExtenderDualBand->getId()) ===
                            intval($objCaractSolAgregarEquipoDestino->getCaracteristicaId()->getId()))
                        {
                            $strSolConDetEdb    = "SI";
                        }

                        $objCaractSolAgregarEquipoNuevaOrigen = new InfoDetalleSolCaract();
                        $objCaractSolAgregarEquipoNuevaOrigen->setCaracteristicaId($objCaractSolAgregarEquipoDestino->getCaracteristicaId());
                        $objCaractSolAgregarEquipoNuevaOrigen->setDetalleSolicitudId($objSolAgregarEquipoNuevaOrigen);
                        $objCaractSolAgregarEquipoNuevaOrigen->setValor($objCaractSolAgregarEquipoDestino->getValor());
                        $objCaractSolAgregarEquipoNuevaOrigen->setEstado("PrePlanificada");
                        $objCaractSolAgregarEquipoNuevaOrigen->setUsrCreacion($strUsrCreacion);
                        $objCaractSolAgregarEquipoNuevaOrigen->setFeCreacion(new \DateTime('now'));
                        $this->emCome->persist($objCaractSolAgregarEquipoNuevaOrigen);
                        $this->emCome->flush();

                        $objCaractSolAgregarEquipoDestino->setEstado("Finalizada");
                        $objCaractSolAgregarEquipoDestino->setUsrUltMod($strUsrCreacion);
                        $objCaractSolAgregarEquipoDestino->setFeUltMod(new \DateTime('now'));
                        $this->emCome->persist($objCaractSolAgregarEquipoDestino);
                        $this->emCome->flush();
                    }
                }
                else
                {
                    $arrayRespuestaServInternetValido   = $this->servicioTecnico
                                                               ->obtieneServicioInternetValido(array(   "intIdPunto"    =>
                                                                                                        $objServicioOrigen->getPuntoId()->getId(),
                                                                                                        "strCodEmpresa" => $strCodEmpresa
                                                                                                   ));
                    $strStatusServInternetValido        = $arrayRespuestaServInternetValido["status"];
                    $objServicioInternetValido          = $arrayRespuestaServInternetValido["objServicioInternet"];
                    if($strStatusServInternetValido === "OK")
                    {
                        if(!is_object($objServicioInternetValido))
                        {
                            throw new \Exception('No se ha podido obtener el Servicio de Internet en el punto origen');
                        }
                        $intIdServicioInternetValido    = $objServicioInternetValido->getId();
                        $arrayRespuestaWdbEnlazado      = $this->servicioTecnico->verificaEquipoEnlazado(
                                                                                                        array(  "intIdServicioInternet" =>
                                                                                                                $intIdServicioInternetValido,
                                                                                                                "strTipoEquipoABuscar"  =>
                                                                                                                "WIFI DUAL BAND"));
                        $strStatusWdbEnlazado       = $arrayRespuestaWdbEnlazado["status"];
                        $strMensajeWdbEnlazado      = $arrayRespuestaWdbEnlazado["mensaje"];
                        $strInfoEquipoWdbEnlazado   = $arrayRespuestaWdbEnlazado["infoEquipoEnlazado"];
                        if($strStatusWdbEnlazado === "OK")
                        {
                            if(!isset($strInfoEquipoWdbEnlazado) || empty($strInfoEquipoWdbEnlazado))
                            {
                                $strSolConDetWdb = "SI";
                            }
                        }
                        else
                        {
                            throw new \Exception('No se ha podido verificar el equipo ONT del servicio de Internet en el punto Origen. '
                                                 .$strMensajeWdbEnlazado);
                        }

                        $arrayRespuestaEdbEnlazado  = $this->servicioTecnico->verificaEquipoEnlazado(array( "intIdServicioInternet" =>
                                                                                                            $intIdServicioInternetValido,
                                                                                                            "strTipoEquipoABuscar"  =>
                                                                                                            "EXTENDER DUAL BAND"));
                        $strStatusEdbEnlazado       = $arrayRespuestaEdbEnlazado["status"];
                        $strMensajeEdbEnlazado      = $arrayRespuestaEdbEnlazado["mensaje"];
                        $strInfoEquipoEdbEnlazado   = $arrayRespuestaEdbEnlazado["infoEquipoEnlazado"];
                        if($strStatusEdbEnlazado === "OK")
                        {
                            if(!isset($strInfoEquipoEdbEnlazado) || empty($strInfoEquipoEdbEnlazado))
                            {
                                $strSolConDetEdb = "SI";
                            }
                        }
                        else
                        {
                            throw new \Exception('No se puede verificar el extender debido a que '.$strMensajeEdbEnlazado);
                        }
                        if($strSolConDetWdb !== "SI" && $strSolConDetEdb !== "SI")
                        {
                            throw new \Exception("No se ha podido obtener los detalles de la SOLICITUD AGREGAR EQUIPO asociada al servicio origen");
                        }
                    }
                    else
                    {
                        throw new \Exception('No se ha podido obtener correctamente el Servicio de Internet en el punto origen');
                    }
                }

                if($strSolConDetWdb == "SI")
                {
                    $strObservacionCorreo .= "<br>Incluye cambio de CPE ONT de un Wifi Estándar a un Wifi Dual Band.";
                }

                if($strSolConDetEdb == "SI")
                {
                    $strObservacionCorreo .= "<br>Incluye agregar equipo Extender Dual Band.";
                }

                $objDetSolHistAgregarEquipoNuevaOrigen = new InfoDetalleSolHist();
                $objDetSolHistAgregarEquipoNuevaOrigen->setDetalleSolicitudId($objSolAgregarEquipoNuevaOrigen);
                $objDetSolHistAgregarEquipoNuevaOrigen->setIpCreacion($strIpCreacion);
                $objDetSolHistAgregarEquipoNuevaOrigen->setFeCreacion(new \DateTime('now'));
                $objDetSolHistAgregarEquipoNuevaOrigen->setUsrCreacion($strUsrCreacion);
                $objDetSolHistAgregarEquipoNuevaOrigen->setEstado("PrePlanificada");
                $objDetSolHistAgregarEquipoNuevaOrigen->setObservacion($strObservacionCorreo);
                $this->emCome->persist($objDetSolHistAgregarEquipoNuevaOrigen);
                $this->emCome->flush();

                $objSolAgregarEquipoAbiertaDestino->setEstado("Finalizada");
                $this->emCome->persist($objSolAgregarEquipoAbiertaDestino);
                $this->emCome->flush();

                $objDetSolHistAgregarEquipoDestino = new InfoDetalleSolHist();
                $objDetSolHistAgregarEquipoDestino->setDetalleSolicitudId($objSolAgregarEquipoAbiertaDestino);
                $objDetSolHistAgregarEquipoDestino->setEstado($objSolAgregarEquipoAbiertaDestino->getEstado());
                $objDetSolHistAgregarEquipoDestino->setObservacion("Se finaliza solicitud por rechazo/anulación de servicio");
                $objDetSolHistAgregarEquipoDestino->setUsrCreacion($strUsrCreacion);
                $objDetSolHistAgregarEquipoDestino->setFeCreacion(new \DateTime('now'));
                $objDetSolHistAgregarEquipoDestino->setIpCreacion($strIpCreacion);
                $this->emCome->persist($objDetSolHistAgregarEquipoDestino);
                $this->emCome->flush();
                
                $arrayParamsSolAgregarEquipoDestino = array("intIdDetalleSolicitud" => $objSolAgregarEquipoAbiertaDestino->getId(),
                                                            "strProceso"            => 
                                                            "SEGUIMIENTO_GENERAL:Solicitud asociada a esta tarea fue finalizada por "
                                                            ."rechazo/anulación de servicio");
                $this->eminf->getRepository('schemaBundle:InfoDetalleSolicitud')->cerrarTareasPorSolicitud($arrayParamsSolAgregarEquipoDestino);

                $this->serviceGeneral->envioNotifAgregarEquipo( array(
                                                                        "objPunto"                  => $objServicioOrigen->getPuntoId(),
                                                                        "objServicio"               => $objServicioOrigen,
                                                                        "strObservacionCorreo"      => $strObservacionCorreo,
                                                                        "strDescripcionSolicitud"   => $strTipoSolAgregarEquipo,
                                                                        "strUsrCreacion"            => $strUsrCreacion,
                                                                        "strIpCreacion"             => $strIpCreacion,
                                                                        "strEsRechazoAnulacion"     => "SI"
                                                                     ));
            }
            $strStatus  = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = "Se presentaron problemas al recrear la solicitud W+Ap";
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService->recreaSolicitudWyApTraslado',
                                              "Se presentaron problemas al recrear la solicitud de W y Ap en Traslados. ".
                                              $e->getMessage(), 
                                              $strUsrCreacion, 
                                              $strIpCreacion);
        }
        $arrayRespuesta = array("status"    => $strStatus,
                                "mensaje"   => $strMensaje);
        return $arrayRespuesta;
    }

    
    
    /**
     * Función que solicita nueva factibilidad sobre un mismo servicio
     *
     * @param array $arrayParametros[
     *                                  intCodEmpresa,
     *                                  strPrefijoEmpresa,
     *                                  intIdServicio,
     *                                  strUsrCreacion,
     *                                  strOrigen,
     *                                  strIpCreacion
     *                              ]
     *
     * @return String   $content
     *
     * @throws \Doctrine\DBAL\ConnectionException
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.0 19-06-2020
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 27-07-2020 Se agrega nueva programación que verifica equipos dual band y clona las solicitudes para traslados, se deja de usar
     *                         la función clonarSolicitudesPorTraslado y se usa en su lugar generaSolsPorTraslado
     *
     * @author Germán Valenzuela <gvalenzuela@telconet.ec>
     * @version 1.2 01-12-2020 - Al momento de generar factibilidad para el producto CLOUD IAAS ALQUILER SERVIDOR, se obtiene
     *                           el proceso y la tarea en estado Activo.
     * 
     * @author Jefferson Leon <jlleona@telconet.ec>
     * @version 1.3 24-02-2023 - Se inserta el valor del metraje como caracteristica del servicio
     *
     */
    public function solicitarNuevaFactibilidadMismoServicio($arrayParametros)
    {
        $intCodEmpresa      = $arrayParametros["intCodEmpresa"];
        $strPrefijoEmpresa  = $arrayParametros["strPrefijoEmpresa"];
        $intIdServicio      = $arrayParametros["intIdServicio"];
        $strUsrCreacion     = $arrayParametros["strUsrCreacion"];
        $strOrigen          = $arrayParametros["strOrigen"];
        $strClienteIp       = $arrayParametros["strIpCreacion"];
        $strMotivo          = $arrayParametros["strMotivo"];

        $emComercial            = $this->emcom;
        $emInfraestructura      = $this->eminf;
        $emGeneral              = $this->emgen;
        $entityServicio         = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
        $entityTipoSolicitud    = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                    ->findOneByDescripcionSolicitud("SOLICITUD FACTIBILIDAD");
        $strContent                = "";
        $strTipoInterface       = "";
        $boolEsSatelital        = false; 
        //Flujos DC
        $boolGenerarTarea       = false;
        $strNombreCanton        = '';
        $intIdCanton            = 0;
        $strLogin               = '';
        $strNombreTecnico       = '';
        $strDescripcionProducto = '';

        $boolEsISB              = false;
        $arrayParametros        = array();
        $strDependeDeEdificio   = "";
        $boolFactibilidadOk     = false;
        $strTipoOrdenServicio   = "";
        
        $emComercial->getConnection()->beginTransaction();
        $emInfraestructura->getConnection()->beginTransaction();
        try
        {
            if ($entityServicio)
            {
                $strTipoOrdenServicio    = $entityServicio->getTipoOrden();
                $strEstadoFactibilidad      = "";
                $strObservacionFactibilidad = "Se creo la solicitud de factibilidad";
                $boolGrabo               = false;
                //migracion clientes transtelco - se agrega parametro ultima milla, se recupera ultima milla del servicio
                $strUltimaMilla             = '';
                $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')->findOneByServicioId($intIdServicio);
                $objAdmiProducto   = ($entityServicio->getProductoId() ? $entityServicio->getProductoId() : null );
                $strTipoEnlace = 'PRINCIPAL';
                if ($objServicioTecnico)
                {
                    $strTipoEnlace = $objServicioTecnico->getTipoEnlace();
                    if(!$strTipoEnlace)
                    {
                        $strTipoEnlace = 'PRINCIPAL';
                    }
                    if ($objServicioTecnico->getUltimaMillaId())
                    {
                        $entityUltimaMilla = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                ->find($objServicioTecnico->getUltimaMillaId());
                        $strUltimaMilla = $entityUltimaMilla->getNombreTipoMedio();
                    }
                    
                    //Verifico si es producto es especial y si se encuentra definido en la parametros 
                    //Para buscar factibilidad del producto en MD.
                    if( is_object($objAdmiProducto) )
                    {
                        $strNombreTecnico       = trim($objAdmiProducto->getNombreTecnico());
                        $strDescripcionProducto = $objAdmiProducto->getDescripcionProducto();
                        if( !empty($strNombreTecnico) )
                        {
                            //Se obtienen la ultimas milla correspondiente al producto especial hibrido para TN.
                            $arrayParametrosDet = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->getOne('PRODUCTOS_ESPECIALES_UM', 
                                                                                 'COMERCIAL', 
                                                                                 '',
                                                                                 '',
                                                                                 strtoupper(trim($strNombreTecnico)),
                                                                                 '',
                                                                                 '',
                                                                                 '',
                                                                                 '',
                                                                                 $intCodEmpresa);

                            /*Obtenemos la característica del tipo de red.*/
                            $booleanTipoRedGpon = false;
                            $objTipoRed = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                    'TIPO_RED',
                                                                                                    $objAdmiProducto);
                            if(is_object($objTipoRed))
                            {
                                //seteo el tipo red en el parámetro
                                $arrayParametros['strTipoRed'] = $objTipoRed->getValor();
                                //se valida si el tipo de red es GPON
                                $arrayParVerTipoRed = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->getOne('NUEVA_RED_GPON_TN',
                                                                                'COMERCIAL',
                                                                                '',
                                                                                'VERIFICAR TIPO RED',
                                                                                'VERIFICAR_GPON',
                                                                                $objTipoRed->getValor(),
                                                                                '',
                                                                                '',
                                                                                '');
                                if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                                {
                                    $booleanTipoRedGpon = true;
                                }
                            }
                            $arrayParametros['booleanTipoRedGpon'] = $booleanTipoRedGpon;
                            /*Valido si la primera búsqueda esta vacía, para buscar por servicios GPON.*/
                            if (empty($arrayParametrosDet) && $booleanTipoRedGpon)
                            {
                                $arrayParametrosDet = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('NUEVA_RED_GPON_TN',
                                                                    'COMERCIAL',
                                                                    '',
                                                                    'UM FTTX',
                                                                    strtoupper(trim($strNombreTecnico)),
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    '',
                                                                    $intCodEmpresa);
                            }

                            if( $arrayParametrosDet && count($arrayParametrosDet) > 0 && 
                                isset($arrayParametrosDet['valor2']) && !empty($arrayParametrosDet['valor2']))
                            {
                                    $strUltimaMillaProdEsp          = strtoupper($arrayParametrosDet['valor2']);
                                    $strNombreTecnicoSbTelcoHome    = $strNombreTecnico;
                                    $boolEsISB                      =  true;
                                    if ($strPrefijoEmpresa != 'TNP')
                                    {
                                        /* Valido si el objeto existe para poder obtener el punto de cobertura id. */
                                        if ( $booleanTipoRedGpon && is_object($entityServicio->getPuntoId()->getPuntoCoberturaId()) )
                                        {
                                            /* Obtengo el punto de cobertura id. */
                                            $intPuntoCobertura = $entityServicio->getPuntoId()->getPuntoCoberturaId()->getId();
                                            /* Obtengo un arreglo con las ciudades permitidas para GPON. */
                                            $arrayCiudadesGPON = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                        ->get('NUEVA_RED_GPON_TN',
                                                                                                'COMERCIAL',
                                                                                                '',
                                                                                                '',
                                                                                                $intPuntoCobertura,
                                                                                                '',
                                                                                                '',
                                                                                                'S',
                                                                                                'CIUDADES_DISPONIBLES',
                                                                                                $intCodEmpresa);

                                            /* Valido que el arreglo no este vacio. */
                                            $boolFactibilidadPermitidaGPON = false;
                                            if(!empty($arrayCiudadesGPON) && count($arrayCiudadesGPON) >= 1)
                                            {
                                                $boolFactibilidadPermitidaGPON = true;
                                            }
                                            /*Si la factibilidad no es permitida, lanza excepción.*/
                                            if (!$boolFactibilidadPermitidaGPON)
                                            {
                                                $boolFactibilidadOk = false;
                                                throw new \Exception('Factibilidad GPON no soportada.');
                                            }
                                        }

                                        $strPrefijoEmpresa          =  $arrayParametrosDet['valor3'];
                                        $intCodEmpresa               =  $arrayParametrosDet['valor4'];
                                        $boolProductoEspecial    =  true;
                                    }
                                
                            }
                        }
                    }
                }
                //migracion clientes transtelco - se agrega validacion ultima milla
                $strAdministra = '';
                //si es un cliente de MD y depende de un edificio tipo CENTRO COMERCIAL se debe ir por factibilidad manual
                $strEsCentroComercial = 'NO';
                if($entityServicio->getPuntoId())
                {
                    $objPuntoDato = $emComercial->getRepository('schemaBundle:InfoPuntoDatoAdicional')
                                                ->findOneByPuntoId($entityServicio->getPuntoId());
                    if(is_object($objPuntoDato) && $objPuntoDato->getElementoId())
                    {
                            $objElemento = $emComercial->getRepository('schemaBundle:InfoElemento')->find($objPuntoDato->getElementoId());
                            if(is_object($objElemento))
                            {
                                //consulto si es o no un pseudo pe
                                $objDetallePseudo = $emComercial->getRepository('schemaBundle:InfoDetalleElemento')
                                                       ->findOneBy(array('elementoId'   => $objElemento->getId(),
                                                                         'detalleNombre'=> 'ADMINISTRA',
                                                                         'estado'       => 'Activo' ));
                                if (is_object($objDetallePseudo))
                                {
                                    $strAdministra = $objDetallePseudo->getDetalleValor();
                                }
                                
                                $objModeloElemento = $objElemento->getModeloElementoId();
                                if(is_object($objModeloElemento) && $objModeloElemento->getNombreModeloElemento()=='CENTRO COMERCIAL')
                                {
                                    $strEsCentroComercial = 'SI';
                                }                                
                            }
                        
                    }
                }
                //Si es Data Center se genera Factibilidad Manual
                if($strPrefijoEmpresa == 'TN' &&  strpos($entityServicio->getProductoId()->getGrupo(), 'DATACENTER')!==false )
                {
                    $strAdministra    = 'DATACENTER';
                    $strNombreTecnico = $entityServicio->getProductoId()->getNombreTecnico();
                }

                //nombre de canton
                $intIdOficina = $entityServicio->getPuntoId()->getPuntoCoberturaId()->getOficinaId();
                    
                $objOficina   = $this->emcom->getRepository("schemaBundle:InfoOficinaGrupo")->find($intIdOficina);

                if(is_object($objOficina))
                {
                    $objCanton = $this->emcom->getRepository("schemaBundle:AdmiCanton")->find($objOficina->getCantonId());

                    if(is_object($objCanton))
                    {
                        $strNombreCanton = $objCanton->getNombreCanton();
                        $intIdCanton     = $objCanton->getId();
                    }
                }
                
                if(($strNombreTecnico==='INTERNET SDWAN' || $strNombreTecnico==='L3MPLS SDWAN') && $strTipoEnlace!='PRINCIPAL')
                {
                    $strEstadoFactibilidad       = "PreFactibilidad";
                    $strObservacionFactibilidad  = "Se envio una solicitud a GIS para la Factibilidad, del enlace SDWAN";
                }
                else if(is_object($entityServicio->getProductoId()) &&
                        $entityServicio->getProductoId()->getNombreTecnico() === 'DATOS FWA')
                {
                    $strEstadoServicio          = 'Asignada';
                    $arrayParametrosSolicitudes = array('servicioId'        => $entityServicio->getId(),
                                                        'estado'            => 'Pendiente');

                    $objDetalleSolFWA           = $emComercial->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                     ->findOneBy($arrayParametrosSolicitudes);

                    if(is_object($objDetalleSolFWA))
                    {
                        //Reasignar la tarea al dpto de L2.
                        $objServProdCaractTipoFact = $this->servicioTecnico
                                                          ->getServicioProductoCaracteristica($entityServicio,
                                                                                              'TAREA_FWA',
                                                                                               $entityServicio->getProductoId());
                        if($objServProdCaractTipoFact)
                        {
                            $arrayDetalle       = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")
                                                                  ->findByDetalleSolicitudId($objDetalleSolFWA->getId());
                            $strRegionServicio  = "";
                            if(is_object($entityServicio->getPuntoId()))
                            {
                                $intIdOficinaServicio   = is_object($entityServicio->getPuntoId()->getPuntoCoberturaId()) ?
                                                                    $entityServicio->getPuntoId()->getPuntoCoberturaId()->getOficinaId() : 0;
                                $objOficinaServicio     = $this->emcom->getRepository("schemaBundle:InfoOficinaGrupo")
                                                                      ->find($intIdOficinaServicio);
                                if(is_object($objOficinaServicio))
                                {
                                    $objCantonServicio = $this->emcom->getRepository("schemaBundle:AdmiCanton")
                                                                     ->find($objOficinaServicio->getCantonId());
                                    if(is_object($objCantonServicio))
                                    {
                                        $strRegionServicio = $objCantonServicio->getRegion();
                                    }
                                }
                            }
                            //Obtengo el rol del jefe del departamento.
                            $arrayDescripcionRol   = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('ASIGNAR_TAREA_JEFES',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 $strRegionServicio,
                                                                 'IPCCL2',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 '');
                            if(!empty($arrayDescripcionRol) && !empty($arrayDescripcionRol["valor2"]))
                            {
                                $strDescripcionRol = (!empty($arrayDescripcionRol["valor3"])) ? $arrayDescripcionRol["valor3"] :
                                                     $strDescripcionRol;
                            }
                            $arrayParametrosResponsable = array(
                                                                'idEmpresa'                     => $intCodEmpresa == '26'?'10':$intCodEmpresa,
                                                                'estado'                        => 'Activo',
                                                                'strDescripcionRol'             => $strDescripcionRol,
                                                                'strDescripcionTipoRol'         => 'Empleado',
                                                                'strNombreDepartamento'         => 'IPCCL2',
                                                                'strRegionEmpleado'             => $strRegionServicio,
                                                                'esJefe'                        => 'S',
                                                                'strDescripcionFormaContacto'   => 'Correo Electronico'
                                                        );
                            $arrayRespuestaResponsables = $this->emcom->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                               ->getResultadoPersonaEmpresaRolPorCriterios($arrayParametrosResponsable);
                            $arrayResultadoResponsables  = $arrayRespuestaResponsables['resultado'];
                            if(empty($arrayResultadoResponsables[0]))
                            {
                                throw new \Exception("No se ha podido encontrar el Jefe para la asignación de tarea");
                            }
                            else
                            {
                                $arrayJefeResponsable = $arrayResultadoResponsables[0];
                            }
                            if(!empty($arrayDetalle))
                            {
                                //Obtener el departamento de quien reasigna la tarea.
                                $arrayDetalleAsignacion    = $this->emSoporte->getRepository("schemaBundle:InfoDetalleAsignacion")
                                                                             ->findByDetalleId($arrayDetalle[0]->getId());
                                $arrayReasignar = array('idEmpresa'             => $intCodEmpresa,
                                                        'prefijoEmpresa'        => $strPrefijoEmpresa,
                                                        'id_detalle'            => $arrayDetalle[0]->getId(),
                                                        'motivo'                => 'Aprovisionamiento del producto FWA',
                                                        'departamento_asignado' => $arrayJefeResponsable['idDepartamento'],
                                                        'empleado_asignado'     => $arrayJefeResponsable['idPersona'].'@@'.
                                                                                   $arrayJefeResponsable['idPersonaEmpresaRol'],
                                                        'tipo_asignado'         => 'EMPLEADO', //EMPLEADO
                                                        'fecha_ejecucion'       => (new \DateTime('now'))->format('Y-m-d H:i'), //fechaSistema
                                                        'id_departamento'       => $arrayDetalleAsignacion[0]->getAsignadoId(),
                                                        'clientIp'              => $strClienteIp,
                                                        'user'                  => $strUsrCreacion,
                                                       );
                                /* @var $soporteService \telconet\soporteBundle\Service\SoporteService */
                                $arrayResultado = $this->serviceSoporte->reasignarTarea($arrayReasignar);
                                $intTareaFWA    = $objServProdCaractTipoFact->getValor();
                                if($arrayResultado['success'])
                                {
                                    $strObservacionFactibilidad    = $arrayResultado['asignado'].'<br>'.
                                                                  "Tarea id. <b>".$intTareaFWA."</b>";
                                }
                            }
                        }
                        else
                        {
                            throw new \Exception("No se encontró la tarea del producto FWA");
                        }
                        $strObservacionFWA = "Se procedio a dar factibilidad y se asigna la tarea ".$intTareaFWA." al dpto L2 <br>".
                                              $arrayJefeResponsable['nombreCompleto'];
                        $objDetalleSolFWA->setEstado('Finalizada');
                        $emComercial->persist($objDetalleSolFWA);
                        $emComercial->flush();

                        //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                        $entityDetalleSolHist = new InfoDetalleSolHist();
                        $entityDetalleSolHist->setDetalleSolicitudId($objDetalleSolFWA);
                        $entityDetalleSolHist->setIpCreacion($strClienteIp);
                        $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                        $entityDetalleSolHist->setUsrCreacion($strUsrCreacion);
                        $entityDetalleSolHist->setObservacion($strObservacionFWA);
                        $entityDetalleSolHist->setEstado('Finalizada');
                        $emComercial->persist($entityDetalleSolHist);
                        $emComercial->flush();
                    }
                    $entityServicio->setEstado($strEstadoServicio);
                    $emComercial->persist($entityServicio);
                    $emComercial->flush();
                    //GUARDAR INFO SERVICIO HISTORIAL
                    $entityServicioHistorial = new InfoServicioHistorial();
                    $entityServicioHistorial->setServicioId($entityServicio);
                    $entityServicioHistorial->setIpCreacion($strClienteIp);
                    $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $entityServicioHistorial->setUsrCreacion($strUsrCreacion);
                    $entityServicioHistorial->setObservacion($strObservacionFWA);
                    $entityServicioHistorial->setEstado($strEstadoServicio);
                    $emComercial->persist($entityServicioHistorial);
                    $emComercial->flush();

                    $emComercial->getConnection()->commit();
                    $emInfraestructura->getConnection()->commit();
                    return $strObservacionFWA;
                }
                else
                {
                    if($strAdministra == '')
                    {
                        if ($strEsCentroComercial == 'NO' && substr($strTipoEnlace, 0, 9) == 'PRINCIPAL')
                        {
                            if ($strUltimaMilla == "Fibra Optica" || $strUltimaMillaProdEsp === 'FTTX')
                            {
                                $entityPunto   = $entityServicio->getPuntoId();
                                $intLatitudPunto  = $entityPunto->getLatitud();
                                $intLongitudPunto = $entityPunto->getLongitud();

                                $arrayCajaMasCercana['distancia_caja'] = 0;
                                $arrayCajaMasCercana['id_caja']        = 0;

                                //se agrega codigo para recuperación de caracteristica de plan TECNOLOGIA_FACTIBILIDAD
                                $strTecnologiaFactibilidad = null;
                                if("MD" === $strPrefijoEmpresa)
                                {
                                    if($strTipoOrdenServicio === "T")
                                    {
                                        if($boolEsISB)
                                        {
                                            $strNombreTecnicoTraslado   = $strNombreTecnicoSbTelcoHome;
                                            $strCodEmpresaTraslado      = $intCodEmpresa;
                                        }
                                        else
                                        {
                                            $strNombreTecnicoTraslado   = "INTERNET";
                                            $strCodEmpresaTraslado      = $intCodEmpresa;
                                        }

                                        $objProductoInternet    = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                     ->findOneBy(array("esPreferencia" => "SI",
                                                                                       "nombreTecnico" => $strNombreTecnicoTraslado,
                                                                                       "empresaCod"    => $strCodEmpresaTraslado,
                                                                                       "estado"        => "Activo"));

                                        if(is_object($objProductoInternet))
                                        {
                                            $objSpcTraslado = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio, 
                                                                                                                        "TRASLADO", 
                                                                                                                        $objProductoInternet);
                                            if(is_object($objSpcTraslado))
                                            {
                                                $intIdServicioOrigen        = $objSpcTraslado->getValor();
                                                $objServicioTecnicoOrigen   = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                                 ->findOneByServicioId($intIdServicioOrigen);
                                                if(is_object($objServicioTecnicoOrigen))
                                                {
                                                    $intIdOltOrigen = $objServicioTecnicoOrigen->getElementoId();
                                                    $objOltOrigen   = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                                         ->find($intIdOltOrigen);
                                                    if(is_object($objOltOrigen))
                                                    {
                                                        $strTecnologiaFactibilidad  = $objOltOrigen->getModeloElementoId()
                                                                                                   ->getMarcaElementoId()
                                                                                                   ->getNombreMarcaElemento();
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    $objInfoPlanCab            = ($entityServicio->getPlanId() ? $entityServicio->getPlanId() : null );

                                    if(is_object($objInfoPlanCab))
                                    {
                                        $objAdmiCaracteristica     = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                    ->findOneBy(array("descripcionCaracteristica" => "TECNOLOGIA_FACTIBILIDAD", 
                                                                                      "estado"                    => "Activo"));
                                        $objInfoPlanCaract     = $emComercial->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                                    ->findOneBy(
                                                                                array(
                                                                                      "planId"           => $objInfoPlanCab->getId(),
                                                                                      "caracteristicaId" => $objAdmiCaracteristica->getId(),
                                                                                      "estado"           => $objInfoPlanCab->getEstado()
                                                                                     )
                                                                               );
                                        if($objInfoPlanCaract)
                                        {
                                            $strTecnologiaFactibilidad = $objInfoPlanCaract->getValor();
                                        }

                                        $objCaracteristicaGbps = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                    ->findOneBy(array("descripcionCaracteristica" => "GBPS", "estado" => "Activo"));
                                        $objPlanCaractGbps     = $emComercial->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                                    ->findOneBy(
                                                                                array(
                                                                                      "planId"           => $objInfoPlanCab->getId(),
                                                                                      "caracteristicaId" => $objCaracteristicaGbps->getId(),
                                                                                      "valor"            => "SI",
                                                                                      "estado"           => $objInfoPlanCab->getEstado()
                                                                                     )
                                                                               );
                                        if(is_object($objPlanCaractGbps))
                                        {
                                            $arrayParametros['strPlanGbps'] = "SI";
                                        }
                                    }

                                    if($boolEsISB)
                                    {
                                       $arrayParametros['strEsISB'] = 'SI';
                                    }                                
                                }

                                $objInfoPuntoDatoAdicional = $this->emcom
                                                                  ->getRepository("schemaBundle:InfoPuntoDatoAdicional")
                                                                  ->findOneByPuntoId($entityServicio->getPuntoId()->getId());

                                if(is_object($objInfoPuntoDatoAdicional))
                                {
                                    $strDependeDeEdificio = $objInfoPuntoDatoAdicional->getDependeDeEdificio();
                                }

                                $arrayTecnologiasNoPermitidas = array();
                                if ($arrayParametros['strEsISB'] == 'SI' || $arrayParametros['strPlanGbps'] == 'SI')
                                {
                                    $strNombreParametroCab = "GBPS_TECNOLOGIAS_NO_PERMITIDAS";
                                    if ($arrayParametros['strEsISB'] == 'SI' )
                                    {
                                        $strNombreParametroCab = "ISB_TECNOLOGIAS_NO_PERMITIDAS";
                                    }

                                    //Se obtienen parametro para restringir factibilidad de servicios ISB en ciertas tecnologías
                                    $arrayParametrosDetTec = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                       ->getOne($strNombreParametroCab, 
                                                                                'COMERCIAL', 
                                                                                '',
                                                                                '',
                                                                                'TECNOLOGIAS',
                                                                                '',
                                                                                '',
                                                                                '');

                                    if($arrayParametrosDetTec && 
                                       count($arrayParametrosDetTec) > 0 &&
                                       isset($arrayParametrosDetTec['valor2']) && 
                                       !empty($arrayParametrosDetTec['valor2']))
                                    {
                                        $strTecnologiasNoPermitidas   = $arrayParametrosDetTec['valor2'];
                                        $arrayTecnologiasNoPermitidas = explode("|",$strTecnologiasNoPermitidas);
                                    }
                                }
                                /*Hago una consulta para obtener el objeto de la empresa en base al prefijo.*/
                                $objInfoEmpresa = $this->emcom->getRepository('schemaBundle:InfoEmpresaGrupo')
                                    ->findOneBy(array(
                                        'prefijo' => $strPrefijoEmpresa,
                                        'estado'  => 'Activo'
                                    ));
                                /*Genero un objeto con datos necesarios para poder evaluar la restricción.*/
                                $objParametrosRestriccion = array(
                                    'boolProductoEspecial'  =>  isset($boolProductoEspecial) ? $boolProductoEspecial : null,
                                    'objInfoEmpresa'        =>  $objInfoEmpresa
                                );

                                $arrayParametros['objServicio']                  = $entityServicio;
                                $arrayParametros['intIdEmpresa']                 = $intCodEmpresa;
                                $arrayParametros['intLatitudPunto']              = $intLatitudPunto;
                                $arrayParametros['intLongitudPunto']             = $intLongitudPunto;
                                $arrayParametros['strTecnologiaFactibilidad']    = $strTecnologiaFactibilidad;
                                $arrayParametros['strPrefijoEmpresa']            = $strPrefijoEmpresa;
                                $arrayParametros['strDependeEdificio']           = $strDependeDeEdificio;
                                $arrayParametros['arrayTecnologiasNoPermitidas'] = $arrayTecnologiasNoPermitidas;
                                $arrayParametros['infoServicioService']          = $this;
                                $arrayParametros['objParametrosRestriccion']     = $objParametrosRestriccion;
                                $objCajaMasCercana                         = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                                                      ->findCajaMasCercana($arrayParametros);


                                //bloque de codigo para generar factibilidad automatica de TN
                                if ($strPrefijoEmpresa == "TN")
                                {
                                    //se recupera capacidad de ancho de banda de servicio para asignación de tipos de Interface de sw a aprovisionar
                                    $objServProdCaractCap1 = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                                       'CAPACIDAD1',
                                                                                                                     $entityServicio->getProductoId()
                                                                                                                      );

                                    if($objServProdCaractCap1)
                                    {
                                        /*Segun definiciones de GIS si el ancho de banda esta entre 0 y 81920 kbps se debe aprovisionar
                                          factibilidad en puertos Fa */
                                        if ( (int)$objServProdCaractCap1->getValor() > 0 &&  (int)$objServProdCaractCap1->getValor() <= 81920)
                                        {
                                            $strTipoInterface = 'Fa';
                                        }
                                        /*Segun definiciones de GIS si el ancho de banda es mayor a 81920 kbps se debe aprovisionar
                                          factibilidad en puertos Gi */
                                        else
                                        {
                                            $strTipoInterface = 'Gi';
                                        }
                                    }
                                    else
                                    {
                                        return "No existe Capacidad 1 en el servicio, imposible dar factibilidad";
                                    }
                                    //Verificación de enlaces y disponibilidad de puertos de SW, generación de información tecnica de factibilidad
                                    $arrayRespuestaFacTn = $this->generarFactibilidadTn($objCajaMasCercana,$strTipoInterface);

                                    if( $arrayRespuestaFacTn['tieneFactibilidad'] == "SI" )
                                    {
                                        $arrayCajaMasCercana = $arrayRespuestaFacTn;
                                    }
                                }
                                else
                                {
                                    $arrayCajaMasCercana = $objCajaMasCercana;
                                }

                                //Se obtiene el valor del metraje
                                $intMetrosDeDistancia = 250;
                                if(isset($booleanTipoRedGpon) && $booleanTipoRedGpon === true)
                                {
                                    $strDesParValorMetraje = 'VALOR DE LA DISTANCIA USADO PARA LAS CAJAS RED GPON';
                                }
                                else
                                {
                                    $strDesParValorMetraje = 'VALOR DE LA DISTANCIA USADO PARA LAS CAJAS';
                                }
                                $arrayParValorMetraje = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                            ->getOne('PROYECTO PARAMETRIZAR DISTANCIA DE CAJAS',
                                                                                    'TECNICO',
                                                                                    'PROCESO DE FACTIBILIDAD',
                                                                                    $strDesParValorMetraje,
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    '',
                                                                                    '10');
                                if(isset($arrayParValorMetraje["valor1"]) && !empty($arrayParValorMetraje["valor1"]))
                                {
                                    $intMetrosDeDistancia = $arrayParValorMetraje["valor1"];
                                }
                                /*cuando el resultado de la busqueda es 0 setea el estado y la observacion para este caso 
                                  y no se realiza la factibilidad automatica */
                                if ($arrayCajaMasCercana['id_caja'] == 0 && $arrayCajaMasCercana['distancia_caja'] == 0)
                                {
                                    $strEstadoFactibilidad       = "PreFactibilidad";
                                    $strObservacionFactibilidad  = "Se envio una solicitud a GIS para la Factibilidad, ";
                                    if($arrayRespuestaFacTn['existeErrorEnEnlace'] == "SI")
                                    {
                                        $strObservacionFactibilidad .= "ya que existen problemas con uno o varios Enlaces";
                                    }
                                    else
                                    {
                                        $strObservacionFactibilidad .= "ya que no existe una caja cercana que cumpla"
                                                                 . " los $intMetrosDeDistancia mts ó no hay hilos disponibles";
                                    }
                                }

                                if ($arrayCajaMasCercana['id_caja'] > 0)
                                {
                                    if ($arrayCajaMasCercana['supera_distancia'] == "si")
                                    {
                                        $strEstadoFactibilidad       = "PreFactibilidad";
                                        $strObservacionFactibilidad  = "Se envio una solicitud a GIS para la Factibilidad, ";
                                        $strObservacionFactibilidad .= "ya que no existe una caja cercana que cumpla"
                                                                 . " los $intMetrosDeDistancia mts ó no hay hilos disponibles";
                                    }
                                    elseif (($arrayCajaMasCercana['distancia_caja']) || ($arrayCajaMasCercana['distancia_caja'] == 0))
                                    {
                                        $strEstadoFactibilidad      = "Factible";
                                        $strObservacionFactibilidad = "Servicio Factible<br>";

                                        $objServicioTecnico = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                              ->findOneByServicioId($entityServicio->getId());

                                        if ($objServicioTecnico)
                                        {

                                            $arrayElementoEquivalente = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                                           ->getOne("FACTIBILIDAD_ELEMENTO_EQUIVALENTE",
                                                                                    "",
                                                                                    "",
                                                                                    "ELEMENTO_EQUIVALENTE",
                                                                                    $strPrefijoEmpresa,
                                                                                    "",
                                                                                    "",
                                                                                    "");
                                            if ($strPrefijoEmpresa == "MD" || $strPrefijoEmpresa == "TNP")
                                            {
                                                $arrayElementoContenedor = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                        ->getElementoPadre($arrayCajaMasCercana['id_interface_elemento_conector'], 
                                                                                            'INTERFACE', 
                                                                                            $arrayElementoEquivalente['valor2']
                                                                                            );

                                                if ($arrayElementoContenedor)
                                                {
                                                    $objInfoInterfaceElementoFactibilidad = $emComercial
                                                                                         ->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                         ->find($arrayElementoContenedor[0]['IDINTERFACEELEMENTO']);
                                                }
                                                else
                                                {
                                                    $objInfoInterfaceElementoFactibilidad = " con mas de un Enlace ó con enlaces incorrectos." .
                                                                                         " Se envio una solicitud a GIS para la Factibilidad.";
                                                }
                                            }
                                            else
                                            {
                                                $objInfoInterfaceElementoFactibilidad = $arrayCajaMasCercana['objInterfaceSw'];
                                                //creo enlace entre SW y ODF disponible para generar factibilidad automatica

                                                $objTipoMedio = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                                                                   ->findOneBy(array("codigoTipoMedio" => 'FO',
                                                                                                     "estado" => "Activo"));

                                                $objEnlace = new InfoEnlace();
                                                $objEnlace->setInterfaceElementoIniId($arrayCajaMasCercana['objInterfaceSw']);
                                                $objEnlace->setInterfaceElementoFinId($arrayCajaMasCercana['objInterfaceOdf']);
                                                $objEnlace->setTipoMedioId($objTipoMedio);
                                                $objEnlace->setTipoEnlace("PRINCIPAL");

                                                $objEnlace->setCapacidadInput(1);
                                                $objEnlace->setCapacidadOutput(1);
                                                $objEnlace->setUnidadMedidaInput("mbps");
                                                $objEnlace->setUnidadMedidaOutput("mbps");

                                                $objEnlace->setCapacidadIniFin(1);
                                                $objEnlace->setCapacidadFinIni(1);
                                                $objEnlace->setUnidadMedidaUp("mbps");
                                                $objEnlace->setUnidadMedidaDown("mbps");
                                                $objEnlace->setEstado("Activo");
                                                $objEnlace->setUsrCreacion($strUsrCreacion);
                                                $objEnlace->setFeCreacion(new \DateTime('now'));
                                                $objEnlace->setIpCreacion($strClienteIp);
                                                $emInfraestructura->persist($objEnlace);
                                                $emInfraestructura->flush();

                                                $objInterfaceSw  = $arrayCajaMasCercana['objInterfaceSw'];
                                                $objInterfaceSw->setEstado("connected");
                                                $emInfraestructura->persist($objInterfaceSw);
                                                $emInfraestructura->flush();

                                                $objInterfaceOdf = $arrayCajaMasCercana['objInterfaceOdf'];
                                                $objInterfaceOdf->setEstado("connected");
                                                $emInfraestructura->persist($objInterfaceOdf);
                                                $emInfraestructura->flush();
                                            }

                                            if (is_string($objInfoInterfaceElementoFactibilidad))
                                            {
                                                $strEstadoFactibilidad      = "PreFactibilidad";
                                                $strObservacionFactibilidad = "Caja " . $arrayCajaMasCercana['nombre_caja']
                                                                           . $objInfoInterfaceElementoFactibilidad;
                                            }
                                            else
                                            {
                                                if ($objInfoInterfaceElementoFactibilidad)
                                                {
                                                    //obtengo datos de factibilidad
                                                    $objElementoDistribuidor         = $objInfoInterfaceElementoFactibilidad->getElementoId();
                                                    $strElementoContenedor           = sprintf("%s", $emComercial
                                                                                ->getRepository('schemaBundle:InfoElemento')
                                                                                ->find($arrayCajaMasCercana['id_caja']));
                                                    $strElementoConector                = sprintf("%s", $emComercial
                                                                            ->getRepository('schemaBundle:InfoElemento')
                                                                            ->find($arrayCajaMasCercana['id_elemento_conector']
                                                                                                              ));
                                                    $entityInterfaceElementoConector = $emComercial
                                                                            ->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                            ->find($arrayCajaMasCercana['id_interface_elemento_conector']);

                                                    $strDatosNuevos = "Datos Nuevos:<br>";

                                                    if ($strPrefijoEmpresa == "MD" || 
                                                        ($strPrefijoEmpresa == "TNP" && (is_object($entityServicio->getPlanId()) || $boolEsISB))
                                                       )
                                                    {
                                                        $strDatosNuevos .= "Olt: " . $objElementoDistribuidor . "<br>";
                                                    }
                                                    else
                                                    {
                                                        $strDatosNuevos .= "Switch: " . $objElementoDistribuidor . "<br>";
                                                    }

                                                    $strDatosNuevos .= "Marca: " . $objElementoDistribuidor->getModeloElementoId()
                                                                                    ->getMarcaElementoId()
                                                                                    ->getNombreMarcaElemento() . "<br>";

                                                    if ($strPrefijoEmpresa == "MD" ||
                                                        ($strPrefijoEmpresa == "TNP" && (is_object($entityServicio->getPlanId()) || $boolEsISB))
                                                       )
                                                    {
                                                        $strDatosNuevos .= "Linea: " . $objInfoInterfaceElementoFactibilidad . "<br>";
                                                    }
                                                    else
                                                    {
                                                        $strDatosNuevos .= "Puerto: " . $objInfoInterfaceElementoFactibilidad . "<br>";
                                                    }

                                                    $strDatosNuevos .= "Caja: "  . $strElementoContenedor . "<br>";
                                                    $strDatosNuevos .= "Distancia: " . $arrayCajaMasCercana['distancia_caja'] . "mts<br>";

                                                    if ($strPrefijoEmpresa == "MD" ||
                                                        ($strPrefijoEmpresa == "TNP" && (is_object($entityServicio->getPlanId()) || $boolEsISB))
                                                       )
                                                    {
                                                        $strDatosNuevos .= "Splitter: "     . $strElementoConector . "<br>";
                                                        $strDatosNuevos .= "Int SPlitter: " . 
                                                        $entityInterfaceElementoConector->getNombreInterfaceElemento() ."<br>";
                                                    }
                                                    else
                                                    {
                                                        $strDatosNuevos .= "Cassette: "     . $strElementoConector . "<br>";
                                                        $strDatosNuevos .= "Int Cassette: " . 
                                                        $entityInterfaceElementoConector->getNombreInterfaceElemento() ."<br>";
                                                    }

                                                    $strObservacionFactibilidad .=$strDatosNuevos;
                                                    //reservo una interface del splitter
                                                    $entityInterfaceElementoConector->setEstado('Factible');
                                                    $emComercial->persist($entityInterfaceElementoConector);
                                                    $emComercial->flush();
                                                    //guardo datos de factibilidad
                                                    $objServicioTecnico->setElementoId($objElementoDistribuidor->getId());
                                                    $objServicioTecnico->setInterfaceElementoId($objInfoInterfaceElementoFactibilidad->getId());
                                                    $objServicioTecnico->setElementoContenedorId($arrayCajaMasCercana['id_caja']);
                                                    $objServicioTecnico->setElementoConectorId($arrayCajaMasCercana['id_elemento_conector']);
                                                    $objServicioTecnico->setInterfaceElementoConectorId(
                                                                    $arrayCajaMasCercana['id_interface_elemento_conector']);
                                                    $emComercial->persist($objServicioTecnico);
                                                    $emComercial->flush();
                                                    $boolFactibilidadOk = true;
                                                }
                                                else
                                                {
                                                    //validacion anterior eliminada por mucho error de GIS
                                                    $strEstadoFactibilidad = "PreFactibilidad";
                                                    $strObservacionFactibilidad  = "Se envio una solicitud a GIS para la Factibilidad, ";
                                                    $strObservacionFactibilidad .= "ya que no existe una caja cercana que cumpla los ".
                                                                                "$intMetrosDeDistancia mts ó no hay hilos disponibles";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            $emComercial->getConnection()->rollback();
                                            return "Imposible dar Factibilidad , sin servicio tecnico. Favor notificar a sistemas";
                                        }
                                    }
                                }
                            }
                            else
                            {
                                $strEstadoFactibilidad = "PreFactibilidad";
                            }
                        }
                        else
                        {
                            $strEstadoFactibilidad = "PreFactibilidad";
                        }
                    }
                    //Si es Flujo de DATACENTER la Factibilidad se generara de Manera Manual
                    else if($strAdministra == 'DATACENTER')
                    {
                        $strEstadoFactibilidad = 'PreFactibilidad';
                        $boolGenerarTarea   = true;

                        //Si el INternet es de Clous o Hosting este pasa directamente a AsigandoTarea para asignacion de recursos de Red
                        if($strNombreTecnico == 'INTERNETDC' || $strNombreTecnico == 'DATOSDC' || $strNombreTecnico == 'INTERNET DC SDWAN'
                           || $strNombreTecnico == 'DATOS DC SDWAN' )
                        {
                            //Validar si la solucion posee hosting o housing para determinar flujo del servicio
                            $arrayTipoSoluciones = $this->servicioTecnico->getArrayInformacionTipoSolucionPorPreferencial($entityServicio);

                            if(!empty($arrayTipoSoluciones) && $arrayTipoSoluciones['boolContienePool'] 
                                && !$arrayTipoSoluciones['boolContieneHousing'])
                            {
                                //Si existe pool de recursos pero no contiene housing el flujo del enlace pasara por Factibilidad Fisica

                                    $strEstadoFactibilidad = 'AsignadoTarea';

                                    //Se crear solicitud de Planificacion de manera directa dado que es lo requerido 
                                    //para asignacion de recursos de Red
                                    $entityTipoSolicitud    = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                 ->findOneByDescripcionSolicitud("SOLICITUD PLANIFICACION");

                                    $strObservacionFactibilidad = 'Se crea solicitud de Planificación, servicio pasará a estado '
                                                             . '<b>AsignadoTarea</b> para '
                                                             . 'asignación de Recursos de Red de manera directa por ser POOL RECURSOS';
                                
                            }
                        }

                        $boolEsProductoAlquilerServ  = $this->servicioTecnico->isContieneCaracteristica($entityServicio->getProductoId(),
                                                                                                        'ES_ALQUILER_SERVIDORES');

                        //Si el producto de DATACENTER es Alquiler de Servidores se generara una Factibilidad automatica
                        //caso contrario se generara una alerta indicando el mensaje
                        if($boolEsProductoAlquilerServ)
                        {                        
                            //Obtener los servidores contratados para verificar Factibilidad de los mismos
                            $arrayParametrosRecursos                   = array();
                            $arrayParametrosRecursos['intIdServicio']  = $entityServicio->getId();
                            $arrayParametrosRecursos['strTipoRecurso'] = 'TIPO ALQUILER SERVIDOR';

                            $arrayServidores = $emComercial->getRepository("schemaBundle:InfoServicio")
                                                  ->getArrayCaracteristicasPorTipoYServicio($arrayParametrosRecursos);

                            if(!empty($arrayServidores))
                            {
                                $boolGenerarTarea       = false;
                                $strServerNoDisponibles = '';
                                $strServerAsignados     = '';

                                foreach($arrayServidores as $array)
                                {
                                    $objModeloServidor = $emInfraestructura->getRepository("schemaBundle:AdmiModeloElemento")
                                                                        ->findOneBy(array('nombreModeloElemento' => $array['nombreRecurso'],
                                                                                          'estado'               => 'Activo'));
                                    if(is_object($objModeloServidor))
                                    {
                                        $strCiudad   = $this->servicioTecnico->getCiudadRelacionadaPorRegion($entityServicio,$intCodEmpresa);
                                        $intIdCanton = 0;

                                        if(!empty($strCiudad))
                                        {
                                            $objCanton = $this->emcom->getRepository("schemaBundle:AdmiCanton")->findOneByNombreCanton($strCiudad);

                                            if(is_object($objCanton))
                                            {
                                                $intIdCanton     = $objCanton->getId();
                                            }
                                        }

                                        $arrayParametrosServidores                  = array();
                                        $arrayParametrosServidores['intIdModelo']   = $objModeloServidor->getId();
                                        $arrayParametrosServidores['intIdCanton']   = $intIdCanton;
                                        $arrayParametrosServidores['intEmpresaCod'] = $intCodEmpresa;
                                        $arrayServidores = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                              ->getArrayServidoresAlquilerDisponibles($arrayParametrosServidores);

                                        if(!empty($arrayServidores))
                                        {
                                            $objServidor = $arrayServidores[0];

                                            $strEstadoFactibilidad = 'Pendiente';

                                            //Servidor pasa a estado Asignado
                                            $objServidor->setEstado('Asignado');
                                            $emInfraestructura->persist($objServidor);
                                            $emInfraestructura->flush();

                                            $strServerAsignados .= '<br><b>'.$array['nombreRecurso'].'</b>';

                                            $objCaracteristica = $emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                                    ->findOneByDescripcionCaracteristica("TIPO ALQUILER SERVIDOR_VALUE");

                                            if(is_object($objCaracteristica))
                                            {
                                                $objProdCaract = $emComercial->getRepository("schemaBundle:AdmiProductoCaracteristica")
                                                                    ->findOneBy(array('productoId'       =>$entityServicio->getProductoId()->getId(),
                                                                                      'caracteristicaId' =>$objCaracteristica->getId()));
                                                if(is_object($objProdCaract))
                                                {
                                                    $objServicioProdCaractVal  = new InfoServicioProdCaract();
                                                    $objServicioProdCaractVal->setServicioId($entityServicio->getId());
                                                    $objServicioProdCaractVal->setProductoCaracterisiticaId($objProdCaract->getId());
                                                    $objServicioProdCaractVal->setValor($objServidor->getId());
                                                    $objServicioProdCaractVal->setEstado('Activo');
                                                    $objServicioProdCaractVal->setRefServicioProdCaractId($array['idRecurso']);
                                                    $objServicioProdCaractVal->setUsrCreacion($entityServicio->getUsrCreacion());
                                                    $objServicioProdCaractVal->setFeCreacion(new \DateTime('now'));
                                                    $emComercial->persist($objServicioProdCaractVal);
                                                    $emComercial->flush();
                                                }
                                            }

                                            if(count($arrayServidores) == 2)
                                            {
                                                //Si existen 2 servidores de los cuales uno es dado como asignado se genera notificacion 
                                                //preventiva al usuario
                                                $strMensaje = 'Alerta de Disponibilidad de Servidor de Alquiler '.$array['nombreRecurso'].'';

                                                $this->serviceEnvioPlantilla->generarEnvioPlantilla($strMensaje,
                                                                                                    array(),
                                                                                                    'DISP-SERV-ALQ',
                                                                                                    array('modelo' => $array['nombreRecurso']),
                                                                                                    $intCodEmpresa,
                                                                                                    $intIdCanton,
                                                                                                    null
                                                                                                   );
                                            }
                                        }
                                        else
                                        {
                                            $strServerNoDisponibles .= '<br><i class="fa fa-long-arrow-right"></i><b> '
                                                                       .$array['nombreRecurso'].'</b>';
                                        }
                                    }
                                }

                                if($strServerNoDisponibles!='')
                                {
                                    return "No existe Disponibilidad de los siguientes Servidores para generar "
                                         . "Factibilidad : ".$strServerNoDisponibles.
                                           '<br>Por favor gestionar con <b>TI</b> la disponibilidad requerida';
                                }

                                $strObservacionFactibilidad = 'Se asignó factibilidad automática de los siguientes Servidores: '.$strServerAsignados;
                            }
                            else
                            {
                                return "No existen registros del modelo de Servidor requerido";
                            }
                        } 
                    }
                    else
                    {
                        $strEstadoFactibilidad = 'Factible';

                        if($strAdministra=='EMPRESA')
                        {
                            $objRelacionPseudo = $emInfraestructura->getRepository('schemaBundle:InfoRelacionElemento')
                                                                    ->findOneBy(array('elementoIdA'   => $objElemento->getId(),
                                                                                      'estado'       => 'Activo' ));
                            if(is_object($objRelacionPseudo))
                            {
                                $objInterfaceElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                           ->findOneBy(array('elementoId'   => $objRelacionPseudo->getElementoIdB(),
                                                                                             'estado'       => 'not connect' ));
                                if(is_object($objInterfaceElemento))
                                {
                                    //lleno la info técnica
                                    if(is_object($objServicioTecnico))
                                    {
                                        $objServicioTecnico->setElementoId($objInterfaceElemento->getElementoId()->getId());
                                        $objServicioTecnico->setInterfaceElementoId($objInterfaceElemento->getId());
                                        $emComercial->persist($objServicioTecnico);
                                        $emComercial->flush();

                                        $strObservacionFactibilidad = 'Se asignó factibilidad automática: '
                                                                   .'<br> Elemento: '.$objInterfaceElemento->getElementoId()->getNombreElemento()
                                                                   .'<br> Interface Elemento: '.$objInterfaceElemento->getNombreInterfaceElemento();
                                    }                                
                                }
                                else
                                {
                                    //significa que no hay puertos en el sw del pseudo pe
                                    $strEstadoFactibilidad = "PreFactibilidad";                                
                                }

                            }
                        }
                        else//Si el edificio es adminitrado por el Cliente
                        {
                            if($strUltimaMilla == 'SATELITAL')
                            {
                                $strObservacionFactibilidad = 'No se generó Factibilidad Automática, notificar a Sistemas';
                                $boolEsSatelital         = true;
                                $strEstadoFactibilidad      = $entityServicio->getEstado();//Servicio permanece como PreServicio

                                //Obtener el HUB Satelital disponible para generacion de Factibilidad
                                $arrayResultado = $emInfraestructura->getRepository("schemaBundle:InfoElemento")->getArrayElementosHubDisponibles();

                                if(!empty($arrayResultado))
                                {
                                    //Se obtiene el primer HUB en caso de existir mas de uno, el cual es ordenado de menor a mayor segun cantidad
                                    //de puertos disponibles ( HUB con menos puertos disponibles es usado para utilizar los puertos restantes )
                                    $arrayElemento = $arrayResultado[0];

                                    //Generar factibilidad automática en HUB
                                    $objElementoHub = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                         ->find($arrayElemento['idElemento']);

                                    if(is_object($objElementoHub))
                                    {                                    
                                        //Se valida puertos disponibles para efecto de la factibilidad automatica sobre el HUB
                                        // Si la cantidad de puertos es el penultimo se notificara a Satelital via correo para su debida gestión
                                        if($arrayElemento['disponibles'] == 2)
                                        {
                                            //Generar notificacion a departamento satelital indicando que queda un puerto disponible para una proxima
                                            //activacion y debe gestionar un nuevo equipo
                                            $strMensaje = 'Alerta de Disponibilidad de Hub Satelital '.$objElementoHub->getNombreElemento().'';

                                            $this->serviceEnvioPlantilla->generarEnvioPlantilla($strMensaje,
                                                                                                array(),
                                                                                                'DISP_HUB_SAT',
                                                                                                array(),
                                                                                                $intCodEmpresa,null,null
                                                                                               );
                                        }

                                        $objInterfaceHub =  $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                               ->findOneBy(array('elementoId'            => $objElementoHub->getId(),
                                                                                                 'estado'                => 'not connect',
                                                                                                 ),array('id'            => 'ASC'));
                                        if(is_object($objInterfaceHub) && is_object($objServicioTecnico))
                                        {
                                                //Se validad si la capacidad de HUB soporta las nuevas capacidades del Servicios a ser
                                                //instalado
                                                //Se obtiene la capacidad maxima de MB que soporta el Equipo
                                                $objDetalleHub = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                    ->findOneBy(array('elementoId'    => $objElementoHub->getId(),
                                                                                                      'detalleNombre' => 'MAXIMO_BW',
                                                                                                      'estado'        => 'Activo')
                                                                                               );

                                                $intMaximoBw               = 0;
                                                $boolContinuarFactibilidad = true;

                                                if(is_object($objDetalleHub))
                                                {
                                                    //Capacidad maxima del Hub
                                                    $intMaximoBw = intval($objDetalleHub->getDetalleValor());

                                                    $arrayCapacidades                 = array();
                                                    $arrayCapacidades['strElemento']  = $objElementoHub->getNombreElemento();
                                                    $arrayCapacidades['arrayEstados'] = array('Cancel','Eliminado','Anulado','Rechazada');
                                                    $arrayCapacidadesUsadas = $emInfraestructura
                                                                                               ->getRepository('schemaBundle:InfoElemento')
                                                                                               ->getResultadoCapacidadesPorEquipo($arrayCapacidades);
                                                    if(!empty($arrayCapacidadesUsadas))
                                                    {
                                                        $intCapacidadUsadaUp   = intval($arrayCapacidadesUsadas['totalCapacidad1']);
                                                        $intCapacidadUsadaDown = intval($arrayCapacidadesUsadas['totalCapacidad2']);

                                                        //Se obtiene la capacidad configurada en el Servicio
                                                        $objCaractCap1 = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio, 
                                                                                                                                   "CAPACIDAD1", 
                                                                                                                                   $entityServicio->
                                                                                                                                   getProductoId()
                                                                                                                                  );
                                                        $objCaractCap2 = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio, 
                                                                                                                                   "CAPACIDAD2", 
                                                                                                                                   $entityServicio->
                                                                                                                                   getProductoId()
                                                                                                                                  );
                                                        if(is_object($objCaractCap1) && is_object($objCaractCap2))
                                                        {
                                                            $intCap1 = intval($objCaractCap1->getValor());
                                                            $intCap2 = intval($objCaractCap2->getValor());

                                                            //Si la capacidad es sobrepasada se alerta al usuario
                                                            if( ($intMaximoBw < $intCapacidadUsadaUp   + $intCap1) ||
                                                                ($intMaximoBw < $intCapacidadUsadaDown + $intCap2))
                                                            {
                                                                $boolContinuarFactibilidad = false;
                                                                $strObservacionFactibilidad = 'La Capacidad configurada en el <b>HUB</b> '
                                                                                           . 'es SOBREPASADA con '
                                                                                           . 'la configuracion del Servicio, comunicarse con'
                                                                                           . ' Departamento Satelital';
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        $boolContinuarFactibilidad = false;
                                                        $strObservacionFactibilidad = 'No se pudo obtener la información de Capacidad Utilizada del '
                                                                                 . 'Hub Satelital, notificar a Sistemas';
                                                    }
                                                }
                                                else
                                                {
                                                    $boolContinuarFactibilidad = false;
                                                    $strObservacionFactibilidad = 'El Hub Satelital no tiene configurada la Capacidad Maxima'
                                                                               . ' de Ancho de Banda disponible,'
                                                                               . ' comunicarse con Departamento Satelital';
                                                }

                                                if($boolContinuarFactibilidad)
                                                {
                                                    $objServicioTecnico->setElementoId($objElementoHub->getId());
                                                    $objServicioTecnico->setInterfaceElementoId($objInterfaceHub->getId());
                                                    $emComercial->persist($objServicioTecnico);
                                                    $emComercial->flush();

                                                    $objInterfaceHub->setEstado('connected');
                                                    $emInfraestructura->persist($objInterfaceHub);
                                                    $emInfraestructura->flush();

                                                    $strObservacionFactibilidad = 
                                                                       'Se asignó factibilidad automática: '
                                                                       .'<br><b>Elemento ( Hub Satelital ):</b> '.$objElementoHub->getNombreElemento()
                                                                       .'<br><b>Interface Hub:</b> '.$objInterfaceHub->getNombreInterfaceElemento();

                                                    $strEstadoFactibilidad = 'Factible';
                                                }
                                               
                                        }
                                    }
                                }
                                else
                                {
                                    $strObservacionFactibilidad = 'No existen <b>HUB SATELITALES</b> con puertos Disponibles,'. 
                                                            'por favor comunicarse con '
                                                             . 'Departamento Satelital';
                                }
                            }
                            else
                            {
                                //Se establece factibilidad manual siempre y cuando las condiciones de pseudope, no se cumplan o no esten
                                //generadas correctamente por parte de Networking o no existan puertos disponibles ( logicamente ) 
                                //registrados en el telcos
                                $strEstadoFactibilidad = 'PreFactibilidad';

                                if(is_object($entityServicio->getProductoId()) &&
                                        $entityServicio->getProductoId()->getNombreTecnico() === 'DATOS FWA')
                                {
                                    $strEstadoFactibilidad     = 'AsignadoTarea';
                                    $entityTipoSolicitud    = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                                     ->findOneByDescripcionSolicitud("SOLICITUD INFO TECNICA");
                                }
                                else
                                {
                                    //Si el adminstrador del EDIFICIO es CLIENTE se genera la Factibilidad de manera automatica asignando
                                    //un puerto desocupado del SW virtual atado al pseudoPe

                                    $objRelacionElemento = $emInfraestructura->getRepository("schemaBundle:InfoRelacionElemento")
                                                                              ->findOneBy(array('elementoIdA' => $objElemento->getId(),
                                                                                                'estado'      => 'Activo',
                                                                                                'observacion' => 'Pseudo Pe contiene elemento')
                                                                         );
                                    if(is_object($objRelacionElemento))
                                    {
                                        $intPseudoPe = $objRelacionElemento->getElementoIdB();

                                        $arraySwitches = $this->servicioTecnico->getSwitchesByPe($intPseudoPe);

                                        if(count($arraySwitches)>0)
                                        {
                                            //Se obtiene el primer y unico registro devuelto por NW dado que para esquema PseudoPe siempre
                                            //habra una relacion uno a uno entre el PseudoPE y el Switch Virtual
                                            $strNombreSwitchVirtual = $arraySwitches[0]['sw'];

                                            $objSwitchVirtual = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                                   ->findOneByNombreElemento($strNombreSwitchVirtual);

                                            if(is_object($objSwitchVirtual))
                                            {
                                                //Obtiene una interface not connect disponible para referenciar la Factibilidad
                                                $objInterfaceElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                                   ->findOneBy(array('elementoId'   => $objSwitchVirtual->getId(),
                                                                                                     'estado'       => 'not connect' ));
                                                if(is_object($objInterfaceElemento) && is_object($objServicioTecnico))
                                                {

                                                        $objServicioTecnico->setElementoId($objSwitchVirtual->getId());
                                                        $objServicioTecnico->setInterfaceElementoId($objInterfaceElemento->getId());
                                                        $emComercial->persist($objServicioTecnico);
                                                        $emComercial->flush();

                                                        $objInterfaceElemento->setEstado('connected');
                                                        $emInfraestructura->persist($objInterfaceElemento);
                                                        $emInfraestructura->flush(); 

                                                        $strObservacionFactibilidad = 
                                                                           'Se asignó factibilidad automática: '
                                                                           .'<br><b>Elemento ( Switch Virtual ):</b> '
                                                                           .$objSwitchVirtual->getNombreElemento()
                                                                           .'<br><b>Interface Elemento:</b> '
                                                                           .$objInterfaceElemento->getNombreInterfaceElemento();

                                                        //Se determina la Factibilidad
                                                        $objAdmiCaractTipoFact = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                                    ->findOneBy( array("descripcionCaracteristica" => 
                                                                                                                                'TIPO_FACTIBILIDAD',
                                                                                                       "estado"                    => "Activo"));
                                                        if(is_object($objAdmiCaractTipoFact))
                                                        {
                                                            $objAdmiProdCaractTipoFact = $emComercial
                                                                                        ->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                                        ->findOneBy(array("caracteristicaId"=> 
                                                                                                        $objAdmiCaractTipoFact->getId(),
                                                                                                        "productoId" => $entityServicio
                                                                                                                        ->getProductoId())
                                                                                                          );
                                                            if(is_object($objAdmiProdCaractTipoFact))
                                                            {
                                                                $objInfoServProdCaractCapacidad1 = new InfoServicioProdCaract();
                                                                $objInfoServProdCaractCapacidad1->setServicioId($entityServicio->getId());
                                                                $objInfoServProdCaractCapacidad1
                                                                ->setProductoCaracterisiticaId($objAdmiProdCaractTipoFact->getId());
                                                                $objInfoServProdCaractCapacidad1->setValor('DIRECTO');
                                                                $objInfoServProdCaractCapacidad1->setFeCreacion(new \DateTime('now'));
                                                                $objInfoServProdCaractCapacidad1->setUsrCreacion($strUsrCreacion);
                                                                $objInfoServProdCaractCapacidad1->setEstado("Activo");
                                                                $emComercial->persist($objInfoServProdCaractCapacidad1);
                                                                $emComercial->flush();
                                                            }
                                                        }

                                                        $strEstadoFactibilidad = 'Factible';
                                                    
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if($prefijoEmpresa == "TN"&&is_numeric($arrayCajaMasCercana['distancia_caja'])&&$arrayCajaMasCercana['distancia_caja']>0)
                {
                    $objValorMetraje = $this->serviceGeneral
                    ->getServicioProductoCaracteristica($entityServicio,
                                                        'METRAJE FACTIBILIDAD',
                                                        $entityServicio->getProductoId());   
                    if(!is_object($objValorMetraje))
                    {
                        $this->servicioTecnico->ingresarServicioProductoCaracteristica($entityServicio,
                                                            $entityServicio->getProductoId(),
                                                            'METRAJE FACTIBILIDAD',
                                                            $arrayCajaMasCercana['distancia_caja'],
                                                            $strUsrCreacion
                                                            );
                    }
                }
                if ($entityServicio)
                {
                    if($strEstadoFactibilidad == 'PreFactibilidad')
                    {
                        $entityServicio->setEstado($strEstadoFactibilidad);
                        $emComercial->persist($entityServicio);
                        $emComercial->flush();
                         
                        $arrayParametrosRechazarSol = array(
                                                                'strTipoSolicitud'  => "SOLICITUD PLANIFICACION",
                                                                'intServicioId'     => $entityServicio->getId(),
                                                                'intMotivoId'       => 0,
                                                                'strUsuario'        => $strUsrCreacion,
                                                                'strObservacion'    => $strMotivo.", Origen: ".$strOrigen
                        );
                        $arrayRespuestaRechazoSol = $this->rechazarSolicitudesYCancelarTareas($arrayParametrosRechazarSol);

                        if($arrayRespuestaRechazoSol['strStatus'] != 'OK')
                        {
                            $emComercial->getConnection()->rollback();
                            $emInfraestructura->getConnection()->rollback();
                            return $arrayRespuestaRechazoSol['strMensaje'];
                        }
                    }

                    //GUARDAR INFO SERVICIO HISTORIAL
                    $entityServicioHistorial = new InfoServicioHistorial();
                    $entityServicioHistorial->setServicioId($entityServicio);
                    $entityServicioHistorial->setIpCreacion($strClienteIp);
                    $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
                    $entityServicioHistorial->setUsrCreacion($strUsrCreacion);
                    $entityServicioHistorial->setObservacion($strObservacionFactibilidad.", Motivo: ".$strMotivo. 
                                                                                            ", Origen: " . $strOrigen);
                    $entityServicioHistorial->setEstado($entityServicio->getEstado());
                    $emComercial->persist($entityServicioHistorial);
                    $emComercial->flush();

                    if(is_object($entityServicio->getProductoId()) && $entityServicio->getProductoId()->getNombreTecnico() === 'DATOS FWA')
                    {
                        $arrayParametrosSolicitudes = array('servicioId'        => $entityServicio->getId(),
                                                            'estado'            => 'Pendiente');

                        $objDetalleSolFWA           = $emComercial->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                            ->findOneBy($arrayParametrosSolicitudes);

                        if(is_object($objDetalleSolFWA))
                        {
                            //Reasignar la tarea al dpto de L2.
                            $objServProdCaractTipoFact = $this->servicioTecnico
                                                                ->getServicioProductoCaracteristica($entityServicio,
                                                                                                    'TAREA_FWA',
                                                                                                    $entityServicio->getProductoId());
                            if($objServProdCaractTipoFact)
                            {
                                $arrayDetalle       = $this->emSoporte->getRepository("schemaBundle:InfoDetalle")
                                                                        ->findByDetalleSolicitudId($objDetalleSolFWA->getId());
                                $strRegionServicio  = "";
                                if(is_object($entityServicio->getPuntoId()))
                                {
                                    $intIdOficinaServicio   = is_object($entityServicio->getPuntoId()->getPuntoCoberturaId()) ? 
                                                                        $entityServicio->getPuntoId()->getPuntoCoberturaId()->getOficinaId() : 0;
                                    $objOficinaServicio     = $this->emcom->getRepository("schemaBundle:InfoOficinaGrupo")
                                                                            ->find($intIdOficinaServicio);
                                    if(is_object($objOficinaServicio))
                                    {
                                        $objCantonServicio = $this->emcom->getRepository("schemaBundle:AdmiCanton")
                                                                            ->find($objOficinaServicio->getCantonId());
                                        if(is_object($objCantonServicio))
                                        {
                                            $strRegionServicio = $objCantonServicio->getRegion();
                                        }
                                    }
                                }
                                //Obtengo el rol del jefe del departamento.
                                $arrayDescripcionRol   = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne('ASIGNAR_TAREA_JEFES',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $strRegionServicio,
                                                                        'IPCCL2',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '');
                                if(!empty($arrayDescripcionRol) && !empty($arrayDescripcionRol["valor2"]))
                                {
                                    $strDescripcionRol = (!empty($arrayDescripcionRol["valor3"])) ? $arrayDescripcionRol["valor3"] : 
                                                            $strDescripcionRol;
                                }
                                $arrayParametrosResponsable = array(
                                                                    'idEmpresa'                     => $intCodEmpresa == '26'?'10':$intCodEmpresa,
                                                                    'estado'                        => 'Activo',
                                                                    'strDescripcionRol'             => $strDescripcionRol,
                                                                    'strDescripcionTipoRol'         => 'Empleado',
                                                                    'strNombreDepartamento'         => 'IPCCL2',
                                                                    'strRegionEmpleado'             => $strRegionServicio,
                                                                    'esJefe'                        => 'S',
                                                                    'strDescripcionFormaContacto'   => 'Correo Electronico'
                                                            );
                                $arrayRespuestaResponsables = $this->emcom->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                                                    ->getResultadoPersonaEmpresaRolPorCriterios($arrayParametrosResponsable);
                                $arrayResultadoResponsables  = $arrayRespuestaResponsables['resultado'];
                                if(empty($arrayResultadoResponsables[0]))
                                {
                                    throw new \Exception("No se ha podido encontrar el Jefe para la asignación de tarea");
                                }
                                else
                                {
                                    $arrayJefeResponsable = $arrayResultadoResponsables[0];
                                }
                                if(!empty($arrayDetalle))
                                {
                                    //Obtener el departamento de quien reasigna la tarea.
                                    $arrayDetalleAsignacion    = $this->emSoporte->getRepository("schemaBundle:InfoDetalleAsignacion")
                                                                                    ->findByDetalleId($arrayDetalle[0]->getId());
                                    $arrayReasignar = array('idEmpresa'             => $intCodEmpresa,
                                                            'prefijoEmpresa'        => $strPrefijoEmpresa,
                                                            'id_detalle'            => $arrayDetalle[0]->getId(),
                                                            'motivo'                => 'Aprovisionamiento del producto FWA',
                                                            'departamento_asignado' => $arrayJefeResponsable['idDepartamento'],
                                                            'empleado_asignado'     => $arrayJefeResponsable['idPersona'].'@@'.
                                                                                        $arrayJefeResponsable['idPersonaEmpresaRol'],
                                                            'tipo_asignado'         => 'EMPLEADO', //EMPLEADO
                                                            'fecha_ejecucion'       => (new \DateTime('now'))->format('Y-m-d H:i'), //fechaSistema
                                                            'id_departamento'       => $arrayDetalleAsignacion[0]->getAsignadoId(),
                                                            'clientIp'              => $strClienteIp,
                                                            'user'                  => $strUsrCreacion,
                                                            );
                                    /* @var $soporteService \telconet\soporteBundle\Service\SoporteService */
                                    $arrayResultado = $this->serviceSoporte->reasignarTarea($arrayReasignar);
                                    $intTareaFWA    = $objServProdCaractTipoFact->getValor();
                                    if($arrayResultado['success'])
                                    {
                                        $strObservacionFactibilidad    = $arrayResultado['asignado'].'<br>'.
                                                                        "Tarea id. <b>".$intTareaFWA."</b>";
                                    }
                                }
                            }
                            else
                            {
                                throw new \Exception("No se encontró la tarea del producto FWA");
                            }
                            $strObservacionFWA = "Se procedio a dar factibilidad y se asigna la tarea ".$intTareaFWA." al dpto L2";
                            $objDetalleSolFWA->setEstado('Finalizada');
                            $emComercial->persist($objDetalleSolFWA);
                            $emComercial->flush();

                            //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                            $entityDetalleSolHist = new InfoDetalleSolHist();
                            $entityDetalleSolHist->setDetalleSolicitudId($objDetalleSolFWA);
                            $entityDetalleSolHist->setIpCreacion($strClienteIp);
                            $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                            $entityDetalleSolHist->setUsrCreacion($strUsrCreacion);
                            $entityDetalleSolHist->setObservacion($strObservacionFWA);
                            $entityDetalleSolHist->setEstado('Finalizada');
                            $emComercial->persist($entityDetalleSolHist);
                            $emComercial->flush();
                        }
                    }

                    $entitySolicitudFactibilidad = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                        ->findOneBy(array("servicioId"=>$entityServicio->getId(), "estado"=>"Factible"));
                    
                    
                    $objSolicitudPlanificacionHist = $emComercial->getRepository('schemaBundle:InfoDetalleSolHist')
                                                        ->findOneBy(array("detalleSolicitudId" => $entitySolicitudFactibilidad->getId()));
                    
                    if(!is_object($objSolicitudPlanificacionHist))
                    {
                        //GUARDAR PRIMER INFO DETALLE SOLICICITUD HISTORIAL
                        $entityDetalleSolHist = new InfoDetalleSolHist();
                        $entityDetalleSolHist->setDetalleSolicitudId($entitySolicitudFactibilidad);
                        $entityDetalleSolHist->setIpCreacion($strClienteIp);
                        $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                        $entityDetalleSolHist->setUsrCreacion($strUsrCreacion);
                        $entityDetalleSolHist->setObservacion($entitySolicitudFactibilidad->getObservacion());
                        $entityDetalleSolHist->setEstado($strEstadoFactibilidad);
                        $emComercial->persist($entityDetalleSolHist);
                        $emComercial->flush();
                    }
                    
                    $entitySolicitudFactibilidad->setObservacion($strObservacionFactibilidad.", Motivo: ".$strMotivo. 
                                                                                            ", Origen: " . $strOrigen);
                    $entitySolicitudFactibilidad->setEstado($strEstadoFactibilidad);
                    $emComercial->persist($entitySolicitudFactibilidad);
                    $emComercial->flush();

                    //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                    $entityDetalleSolHist = new InfoDetalleSolHist();
                    $entityDetalleSolHist->setDetalleSolicitudId($entitySolicitudFactibilidad);
                    $entityDetalleSolHist->setIpCreacion($strClienteIp);
                    $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                    $entityDetalleSolHist->setUsrCreacion($strUsrCreacion);
                    $entityDetalleSolHist->setObservacion("Se actualiza factibilidad: " . $strObservacionFactibilidad
                                                            .", Motivo: ".$strMotivo. 
                                                            ", Origen: " . $strOrigen);
                    $entityDetalleSolHist->setEstado($strEstadoFactibilidad);
                    $emComercial->persist($entityDetalleSolHist);
                    $emComercial->flush();

                    //Si genera tarea automatica adicional
                    if($boolGenerarTarea)
                    {
                        $strObservacion    = '';
                        $strLogin          = $entityServicio->getPuntoId()->getLogin();
                        $boolNotificaGen   = false;
                        $strTipoSolucion   = '';

                        $arrayParametrosSolucion                  = array();
                        $arrayParametrosSolucion['objServicio']   = $entityServicio;
                        $arrayParametrosSolucion['strCodEmpresa'] = $intCodEmpresa;
                        $strSolucion       = $this->servicioTecnico->getNombreGrupoSolucionServicios($arrayParametrosSolucion);

                        $strNombreCanton   = $this->servicioTecnico->getCiudadRelacionadaPorRegion($entityServicio,$intCodEmpresa);

                        //Crear Tarea automatica
                        //HOUSING
                        //Notificacion al BOC ( Alquiler de Espacio housing )
                        if($strNombreTecnico == 'HOUSING')
                        {
                            $strNombreParametro = 'HOUSING TAREAS POR DEPARTAMENTO';
                            $strDescripcion     = 'FACTIBILIDAD RACKS';
                            $strObservacion     = 'Tarea Automática: Se solicita generación de Factibilidad de <b>HOUSING</b><br>'.
                                                    '<b>Login : </b> '.$strLogin.'<br>'.$strSolucion;

                            $boolNotificaGen    = true;
                            $strTipoSolucion    = 'HOUSING';
                        }

                        if($strNombreTecnico == 'HOSTING')
                        {
                            $boolContieneAlquiler = false;
                            $strNombreParametro   = 'HOSTING TAREAS POR DEPARTAMENTO';

                            $objServProdCaractGrupo = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                                'SECUENCIAL_GRUPO',
                                                                                                                $entityServicio->getProductoId()
                                                                                                                );

                            //Verificar si el Hosting registrado pertenece a una subtipo de Compartido o Dedicado+
                            $objServProdSubTipoSolucion = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio,
                                                                                                                    'SUBTIPO_SOLUCION',
                                                                                                                    $entityServicio->getProductoId()
                                                                                                                    );
                            if(is_object($objServProdSubTipoSolucion) && is_object($objServProdCaractGrupo))
                            {
                                //Busco todos los productos ligados a este Subtipo y Solucion y verifico si existe producto de Alquiler
                                //de Servidores para poder validar continuidad de factibilidad ( requerido )
                                $arrayServicios = $this->emcom->getRepository("schemaBundle:InfoServicio")
                                                                ->getArrayServiciosPorSolucionYTipoSolucion($objServProdCaractGrupo->getValor(),
                                                                                                            $objServProdSubTipoSolucion->getValor()
                                                                                                            );

                                //Recorro los servicios atachados a el mismo tipo de subsolucion del servicios a generar Factibilidad
                                foreach($arrayServicios as $objServicioSubSolucion)
                                {
                                    $objProductoSubSolucion = $objServicioSubSolucion->getProductoId();

                                    if($objServicioSubSolucion != $entityServicio)
                                    {
                                        $boolContieneAlquiler  = $this->servicioTecnico
                                                                ->isContieneCaracteristica($objProductoSubSolucion,'ES_ALQUILER_SERVIDORES');

                                        if($boolContieneAlquiler)
                                        {
                                            break;
                                        }
                                    }
                                }

                                //Hosting - Notificacion a IT ( POOL DE RECURSOS )
                                if($boolContieneAlquiler)
                                {
                                    $strDescripcion     = 'FACTIBILIDAD POOL RECURSOS - ALQ';
                                    $strObservacion     = 'Tarea Automática: Se solicita generación de Factibilidad HOSTING '
                                                        . '( STORAGE para Alquiler de Servidores )<br> '
                                                        . '<b>Login : </b> '.$strLogin.'<br>'.$strSolucion;
                                }
                                else
                                {                                
                                    $strDescripcion     = 'FACTIBILIDAD POOL RECURSOS COMPLETOS';
                                    $strObservacion     = 'Tarea Automática: Se solicita generación de Factibilidad HOSTING ( POOL de Recursos )<br> '
                                                        . '<b>Login : </b> '.$strLogin.'<br>'.$strSolucion;
                                }

                                $boolNotificaGen        = true;
                                $strTipoSolucion        = 'HOSTING ( CLOUD IAAS )';

                            }
                            else
                            {
                                return 'Servicio no posee informacion de Solución registrada correctamente, notificar a Sistemas';
                            }
                        }

                        //Internet DC - Notificacion a IT
                        if($strNombreTecnico == 'INTERNETDC' || $strNombreTecnico == 'DATOSDC' || $strNombreTecnico == 'INTERNET DC SDWAN'
                            || $strNombreTecnico == 'DATOS DC SDWAN' )
                        {
                            if(!empty($arrayTipoSoluciones))
                            {
                                //si la solucion contiene housing de manera obligada de ir a dar factibilidad de Nexus
                                if($arrayTipoSoluciones['boolContieneHousing'])
                                {
                                    $strNombreParametro = 'HOUSING TAREAS POR DEPARTAMENTO';
                                    $strDescripcion     = 'FACTIBILIDAD INTERNET DC';
                                    $strProducto        = $strDescripcionProducto;
                                    $strObservacion     = 'Tarea Automática: Se solicita generación de Factibilidad de '
                                                        . '<b>'.$strProducto.' (HOUSING)</b><br> '.
                                                            '<b>Login : </b> '.$strLogin.'<br>'.$strSolucion;
                                }
                                else
                                {
                                    $strNombreParametro = 'HOSTING TAREAS POR DEPARTAMENTO';

                                    if($arrayTipoSoluciones['boolContieneAlquiler']) //hosting pool recursos para Alquiler de Servidores
                                    {
                                        $strDescripcion     = 'ASIGNAR RECURSOS RED ALQUILER SERVIDORES';
                                        $strObservacion     = 'Tarea Automática: Se solicita Asignación de Recursos de '
                                                            . 'Red <b>INTERNET DC (HOSTING - Alquiler Servidores)</b><br> '
                                                            . '<b>Login : </b> '.$strLogin.'<br>'.$strSolucion;
                                    }
                                    else //hosting pool de recursos para maquinas virtuales
                                    {
                                        $strDescripcion     = 'INSTALACION FO';
                                        $strObservacion     = 'Tarea Automática: Se solicita Asignación de Recursos de '
                                                            . 'Red <b>INTERNET DC (HOSTING)</b><br> '
                                                            . '<b>Login : </b> '.$strLogin.'<br>'.$strSolucion;
                                    }
                                }
                            }
                            else
                            {
                                return 'Servicio de Enlace no contiene relaciones con servicios CORE ( Housing o IAAS ), notificar a Sistemas';
                            }
                        }

                        $intIdCanton      = 0;

                        if(!empty($strNombreCanton))
                        {
                            $objCanton = $this->emcom->getRepository("schemaBundle:AdmiCanton")->findOneByNombreCanton($strNombreCanton);

                            if(is_object($objCanton))
                            {
                                $intIdCanton     = $objCanton->getId();
                            }
                        }

                        $arrayInfoEnvio   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->get($strNombreParametro, 
                                                                'SOPORTE', 
                                                                '',
                                                                $strDescripcion,
                                                                $strNombreCanton, 
                                                                '',
                                                                '',
                                                                '', 
                                                                '', 
                                                                $intCodEmpresa);

                        //Tarea al BOC
                        $arrayParametrosEnvioPlantilla                      = array();
                        $arrayParametrosEnvioPlantilla['strObservacion']    = $strObservacion;
                        $arrayParametrosEnvioPlantilla['strUsrCreacion']    = $strUsrCreacion;
                        $arrayParametrosEnvioPlantilla['strIpCreacion']     = $strClienteIp;
                        $arrayParametrosEnvioPlantilla['intDetalleSolId']   = $entitySolicitud->getId();
                        $arrayParametrosEnvioPlantilla['strTipoAfectado']   = 'Cliente';
                        $arrayParametrosEnvioPlantilla['objPunto']          = $entityServicio->getPuntoId();
                        $arrayParametrosEnvioPlantilla['strCantonId']       = $intIdCanton;
                        $arrayParametrosEnvioPlantilla['strEmpresaCod']     = $intCodEmpresa;
                        $arrayParametrosEnvioPlantilla['strPrefijoEmpresa'] = $strPrefijoEmpresa;

                        foreach($arrayInfoEnvio as $array)
                        {
                            if ($boolContieneAlquiler && !empty($array['valor6']))
                            {
                                $arrayAdmiProceso = $this->emSoporte->getRepository("schemaBundle:AdmiProceso")
                                        ->findBy(array('nombreProceso'=>  $array['valor6'],
                                                       'estado'       => 'Activo'));

                                foreach ($arrayAdmiProceso as $objAdmiProceso)
                                {
                                    $objTarea = $this->emSoporte->getRepository("schemaBundle:AdmiTarea")
                                            ->findOneBy(array('procesoId'   =>  $objAdmiProceso->getId(),
                                                              'nombreTarea' =>  $array['valor3'],
                                                              'estado'      => 'Activo'));
                                    if (is_object($objTarea))
                                    {
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                $objTarea  = $this->emSoporte->getRepository("schemaBundle:AdmiTarea")->findOneByNombreTarea($array['valor3']);
                            }

                            $arrayParametrosEnvioPlantilla['arrayCorreos']   = array($array['valor2']);
                            $arrayParametrosEnvioPlantilla['intTarea']       = is_object($objTarea)?$objTarea->getId():'';

                            //Se obtiene el departamento
                            $objDepartamento = $this->emSoporte->getRepository("schemaBundle:AdmiDepartamento")
                                                                ->findOneByNombreDepartamento($array['valor4']);

                            $arrayParametrosEnvioPlantilla['objDepartamento'] = $objDepartamento;
                            $arrayParametrosEnvioPlantilla["strBanderaTraslado"] = "";
                            $strNumeroTarea = $this->serviceInfoCambiarPlan->crearTareaRetiroEquipoPorDemo($arrayParametrosEnvioPlantilla);
                        }

                        if($boolNotificaGen)
                        {
                            $strAsunto = 'Información General Servicio ('.$strTipoSolucion.') con solicitud de Factibilidad para login '.$strLogin;

                            $objVendedor       = $this->emcom->getRepository("schemaBundle:InfoPersona")
                                                        ->findOneBy(array('login'  => $entityServicio->getUsrVendedor()));

                            $objAsistComercial = $this->emcom->getRepository("schemaBundle:InfoPersona")
                                                        ->findOneBy(array('login'  => $entityServicio->getUsrCreacion()));

                            $objFormaContacto  = $this->emcom->getRepository("schemaBundle:AdmiFormaContacto")
                                                                ->findOneBy(array('descripcionFormaContacto' => 'Correo Electronico',
                                                                                'estado'                   => 'Activo'
                                                                        ));
                            $arrayCorreo    = array();
                            $strRazonSocial = '';
                            //Correo del vendedor
                            if(is_object($objVendedor) && is_object($objFormaContacto))
                            {                                
                                $objInfoPersonaFormaContacto = $this->emcom->getRepository('schemaBundle:InfoPersonaFormaContacto')
                                                                    ->findOneBy(array('personaId'       => $objVendedor->getId(),
                                                                                        'formaContactoId' => $objFormaContacto->getId(),
                                                                                        'estado'          => "Activo"));
                                //OBTENGO EL CONTACTO DE LA PERSONA QUE ASIGNADA A LA TAREA
                                if($objInfoPersonaFormaContacto)
                                {
                                    $arrayCorreo[] = $objInfoPersonaFormaContacto->getValor(); //Correo Persona Asignada
                                }
                            }

                            //Correo de asistente comercial
                            if(is_object($objAsistComercial) && is_object($objFormaContacto))
                            {                                
                                $objInfoPersonaFormaContacto = $this->emcom->getRepository('schemaBundle:InfoPersonaFormaContacto')
                                                                    ->findOneBy(array('personaId'       => $objAsistComercial->getId(),
                                                                                        'formaContactoId' => $objFormaContacto->getId(),
                                                                                        'estado'          => "Activo"));
                                //OBTENGO EL CONTACTO DE LA PERSONA QUE ASIGNADA A LA TAREA
                                if($objInfoPersonaFormaContacto)
                                {
                                    $arrayCorreo[] = $objInfoPersonaFormaContacto->getValor(); //Correo Persona Asignada
                                }
                            }

                            //Razon social
                            $intIdPersonaRol = $entityServicio->getPuntoId()->getPersonaEmpresaRolId()->getId();

                            $objPersonaRol   = $this->emcom->getRepository("schemaBundle:InfoPersonaEmpresaRol")->find($intIdPersonaRol);

                            if(is_object($objPersonaRol))
                            {
                                $strRazonSocial = $objPersonaRol->getPersonaId()->getInformacionPersona();
                            }

                            $arrayNotificacion                        = array();
                            $arrayNotificacion['tipoSolucion']        = $strTipoSolucion;
                            $arrayNotificacion['login']               = $strLogin;
                            $arrayNotificacion['razonSocial']         = $strRazonSocial;
                            $arrayNotificacion['producto']            = $entityServicio->getProductoId()->getDescripcionProducto();
                            $arrayNotificacion['descripcionProducto'] = $entityServicio->getDescripcionPresentaFactura();

                            $objDocRelacion   = $this->emComunicacion->getRepository("schemaBundle:InfoDocumentoRelacion")
                                                                        ->findOneBy(array('servicioId' => $entityServicio->getId(),
                                                                                        'estado'     => 'Activo',
                                                                                        'modulo'     => 'TECNICO'));
                            $strRutaAnexo     = null;

                            if(is_object($objDocRelacion))
                            {
                                $objDocumento = $this->emComunicacion->getRepository("schemaBundle:InfoDocumento")
                                                                        ->find($objDocRelacion->getDocumentoId());

                                if(is_object($objDocumento))
                                {
                                    $strRutaAnexo = $objDocumento->getUbicacionFisicaDocumento();
                                }
                            }

                            $this->serviceEnvioPlantilla->generarEnvioPlantilla($strAsunto,
                                                                                $arrayCorreo,
                                                                                'INFO-GEN-DC',
                                                                                $arrayNotificacion,
                                                                                $intCodEmpresa,
                                                                                $intIdCanton,
                                                                                '',
                                                                                $strRutaAnexo
                                                                                );
                        }
                    }

                    $emComercial->getConnection()->commit();
                    $emInfraestructura->getConnection()->commit();

                    $boolGrabo = true;

                }

                if (!$boolGrabo)
                {
                    $strContent = "Ya existe una solicitud de factibilidad ingresada, por favor verificar.";
                }
                else
                {
                    $strContent = $strObservacionFactibilidad;
                }
            }
            else
            {
                $strContent = "No existe el registro";
            }
        }
        catch (\Exception $e)
        {
            // Rollback the failed transaction attempt
            $strContent = "Error: <br>" . $e->getMessage();

            $emComercial->getConnection()->rollback();
            $emInfraestructura->getConnection()->rollback();
        }
        
        /* Si es la empresa MD, si el tipo de orden del servicio es Traslado, 
         * se debe buscar alguna solicitud agregar equipo pendiente de gestión en el servicio origen 
         * del traslado para poder asignarla al nuevo punto y que se gestionen luego del traslado del 
         * internet el cambio y agregación de los nuevos equipos DUAL BAND
         */
        if($boolFactibilidadOk && $boolGrabo && $strTipoOrdenServicio === "T")
        {
            if($boolEsISB && !empty($strNombreTecnico) && $strNombreTecnico === "INTERNET SMALL BUSINESS")
            {
            
                $arrayRespuestaNotifSb  = $this->serviceSoporte
                                               ->crearNotifFactibTrasladoSb(array(
                                                                                    "objServicio"       => $entityServicio,
                                                                                    "intIdOltOrigen"    => $intIdOltOrigen,
                                                                                    "intIdOltDestino"   => $objServicioTecnico->getElementoId(),
                                                                                    "strCodEmpresa"     => $intCodEmpresa,
                                                                                    "strIpClient"       => $strClienteIp,
                                                                                    "strUsrSession"     => $strUsrCreacion
                                                                                ));
                if($arrayRespuestaNotifSb["strStatus"] === "OK")
                {
                    $strContent = $strContent."<br><strong style='color:red; font-size:14px;'>".$arrayRespuestaNotifSb["strMensaje"]."</strong>";
                }
            }
            
            if ($strPrefijoEmpresa == "MD" && !$boolEsISB)
            {
                $arrayRespuestaGeneraSolsPorTraslado = $this->generaSolsPorTraslado(array(  "intIdServicio"     => $entityServicio->getId(),
                                                                                            "strCodEmpresa"     => $intCodEmpresa,
                                                                                            "strUsrCreacion"    => $strUsrCreacion,
                                                                                            "strIpCreacion"     => $strClienteIp));
                if($arrayRespuestaGeneraSolsPorTraslado['status'] === "ERROR")
                {
                    $strContent = $strContent
                                  ."<br><strong style='color:red; font-size:14px;'>".$arrayRespuestaGeneraSolsPorTraslado["mensaje"]."</strong>";
                }
            }
        }
        
        return $strContent;
    }

    /**
     * 
     * Función que libera puertos de un punto factible
     *
     * @param array $arrayParametros[
     *                                  intIdServicio
     *                              ]
     *
     * @return array $arrayResponse[
     *                                  intCode,
     *                                  strStatus,
     *                                  strMensaje
     *                             ]
     *
     * @throws \Exception
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.0 19-06-2020
     * 
     */
    public function liberarPuertoPuntoFactible($arrayParametros)
    {
        $arrayResponse  = array();
        $intIdServicio  = $arrayParametros['intIdServicio'];
        $strUsrCreacion = $arrayParametros['strUsrCreacion'];
        $strMotivo      = $arrayParametros['strMotivo'];
        $strIpCreacion  = $arrayParametros['strIpCreacion'];

        try
        {
            $objInfoServicio = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                            ->findOneBy(array('id' => $intIdServicio));

            /**
             * SE LIBERAN LOS PUERTOS ASOCIADOS AL SERVICIO FACTIBLE
             */
            $objInfoServicioTecnico = $this->emcom->getRepository("schemaBundle:InfoServicioTecnico")
                                                    ->findOneByServicioId($objInfoServicio);
            
            if(!empty($objInfoServicioTecnico))
            {
                $strObservacionLiberarPuerto    = "Se libera la siguiente interface elemento conector: ";
                $intIdInterfaceElementoConector = $objInfoServicioTecnico->getInterfaceElementoConectorId();
                
                if($intIdInterfaceElementoConector > 0)
                {
                    $objInterface = $this->emInfraestructura
                                            ->getRepository("schemaBundle:InfoInterfaceElemento")
                                            ->findOneById($intIdInterfaceElementoConector);
                    
                    if(!empty($objInterface))
                    {
                        $strObservacionLiberarPuerto .= $intIdInterfaceElementoConector . ", motivo: ".$strMotivo;
                        
                        $objInterface->setEstado('not connect');
                        $this->emInfraestructura->persist($objInterface);
                        $this->emInfraestructura->flush();

                        //SE CREA HISTORIAL EN EL SERVICIO POR LIBERACIÓN DE PUERTO
                        $objInfoServicioHistorial = new InfoServicioHistorial();
                        $objInfoServicioHistorial->setEstado($objInfoServicio->getEstado());
                        $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
                        $objInfoServicioHistorial->setIpCreacion($strIpCreacion);
                        $objInfoServicioHistorial->setMotivoId(0);
                        $objInfoServicioHistorial->setObservacion($strObservacionLiberarPuerto);
                        $objInfoServicioHistorial->setServicioId($objInfoServicio);
                        $objInfoServicioHistorial->setUsrCreacion($strUsrCreacion);
                        $this->emcom->persist($objInfoServicioHistorial);
                        $this->emcom->flush();

                        $arrayResponse = array(
                            'intCode'    => 200,
                            'strStatus'  => 'OK',
                            'strMensaje' => $strObservacionLiberarPuerto
                        );
                    }
                    else
                    {
                        $arrayResponse = array(
                            'intCode'    => 404,
                            'strStatus'  => 'ERROR',
                            'strMensaje' => "No se encontró interface elemento conector para liberar"
                        );
                    }
                }
                else
                {
                    $arrayResponse = array(
                        'intCode'    => 404,
                        'strStatus'  => 'ERROR',
                        'strMensaje' => "No se encontró interface elemento conector para liberar"
                    );
                }
            }
            else
            {
                $arrayResponse = array(
                    'intCode'    => 404,
                    'strStatus'  => 'ERROR',
                    'strMensaje' => "No se encontró interface elemento conector para liberar."
                );
            }
            /**
             * FIN SE LIBERAN LOS PUERTOS ASOCIADOS AL SERVICIO FACTIBLE
             */
        }
        catch (\Exception $exception)
        {
            throw $exception;
        }

        return $arrayResponse;
    }

    /**
     * 
     * Función que rechaza solicitudes y tareas asociadas
     *
     * @param array $arrayParametros[
     *                                  strTipoSolicitud,
     *                                  intServicioId,
     *                                  intMotivoId,
     *                                  strObservacion,
     *                                  strUsuario,
     *                              ]
     *
     * @return array $arrayResponse[
     *                                  intCode,
     *                                  strStatus,
     *                                  strMensaje
     *                             ]
     *
     *
     * @author Jean Pierre Nazareno <jnazareno@telconet.ec>
     * @version 1.0 26-06-2020
     * 
     */
    public function rechazarSolicitudesYCancelarTareas($arrayParametros)
    {
        try
        {
            $arrayResponse      = array();
            $emComunicacionR    = $this->emComunicacion;
            $emComercialR       = $this->emcom;
            $emSoporteR         = $this->emSoporte; 

            $strTipoSolicitud   = $arrayParametros['strTipoSolicitud']; 
            $intServicioId      = $arrayParametros['intServicioId'];
            $intMotivoId        = $arrayParametros['intMotivoId']; 
            $strMotivo          = $arrayParametros['strObservacion']; 
            $strUsuario         = $arrayParametros['strUsuario'];  
            $strIp              = '127.0.0.1';

            $objRequest = $this->container->get('request');
            $objSession = new Session();
            $objSession->set('user', $strUsuario);
            $objRequest->setSession($objSession);
            $objPeticion = $objRequest;

            $emComunicacionR->getConnection()->beginTransaction();
            $emComercialR->getConnection()->beginTransaction();

            $objTipoSolicitud       = $emComercialR->getRepository('schemaBundle:AdmiTipoSolicitud')
                                        ->findOneByDescripcionSolicitud($strTipoSolicitud);

            $arrayDetalleSolicitud  = $emComercialR->getRepository('schemaBundle:InfoDetalleSolicitud')
                                        ->findBy(array("servicioId"=>$intServicioId, 
                                                        "tipoSolicitudId"=>$objTipoSolicitud->getId()
                                                        )
                                                );
            if($arrayDetalleSolicitud)
            {
                foreach($arrayDetalleSolicitud as $entityDetalleSolicitud)
                {
                    if($entityDetalleSolicitud->getEstado() != 'Rechazada')
                    {
                        $entityDetalleSolicitud->setMotivoId($intMotivoId);
                        $entityDetalleSolicitud->setObservacion('Solicitud rechazada por motivo: '.$strMotivo);
                        $entityDetalleSolicitud->setEstado("Rechazada");
                        $entityDetalleSolicitud->setUsrRechazo($strUsuario);
                        $entityDetalleSolicitud->setFeRechazo(new \DateTime('now'));
                        $emComercialR->persist($entityDetalleSolicitud);
                        $emComercialR->flush();

                        //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                        $entityDetalleSolHist = new InfoDetalleSolHist();
                        $entityDetalleSolHist->setDetalleSolicitudId($entityDetalleSolicitud);
                        $entityDetalleSolHist->setObservacion('Solicitud rechazada por motivo: '.$strMotivo);
                        $entityDetalleSolHist->setMotivoId($intMotivoId);
                        $entityDetalleSolHist->setIpCreacion($strIp);
                        $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                        $entityDetalleSolHist->setUsrCreacion($strUsuario);
                        $entityDetalleSolHist->setEstado('Rechazada');
                        $emComercialR->persist($entityDetalleSolHist);
                        $emComercialR->flush();

                        //Rechazar y Cancelar tareas
                        $arrayParametros                    = array();
                        $arrayParametros['cargarTiempo']    = "cliente";
                        $arrayParametros['esSolucion']      = "N";

                        $arrayDetalles = $emSoporteR->getRepository('schemaBundle:InfoDetalle')
                                            ->findBy(array('detalleSolicitudId' => $entityDetalleSolicitud->getId()));

                        if($arrayDetalles)
                        {
                            foreach($arrayDetalles as $detalle)
                            {
                                //Cambiar estado a Rechazada
                                $arrayParametros['observacion']     = "Rechazo de Orden de Trabajo, motivo: ".$strMotivo;
                                $arrayParametros['estado']          = "Rechazada";
                                $strRespuestaCancelacionTarea = $this->serviceSoporte->cambiarEstadoTarea($detalle, 
                                                                                                            null, 
                                                                                                            $objPeticion, 
                                                                                                            $arrayParametros);
                                if($strRespuestaCancelacionTarea != "OK")
                                {
                                    $strRespuesta = "Ciertas tareas no pudieron ser rechazadas. Favor notificar a Sistemas.";
                                    $emComercialR->getConnection()->rollback();
                                    $emComunicacionR->getConnection()->rollback();

                                    $arrayResponse = array(
                                        'intCode'    => 503,
                                        'strStatus'  => "ERROR",
                                        'strMensaje' => $strRespuesta
                                    );

                                    return $arrayResponse;
                                }

                                //Cambiar estado a Cancelada
                                $arrayParametros['observacion'] = "Cancelación automática por rechazo de Orden de Trabajo, motivo: ".$strMotivo;
                                $arrayParametros['estado']      = "Cancelada";
                                $strRespuestaCancelacionTarea   = $this->serviceSoporte->cambiarEstadoTarea($detalle, 
                                                                                                             null, 
                                                                                                             $objPeticion, 
                                                                                                             $arrayParametros);
                                if($strRespuestaCancelacionTarea != "OK")
                                {
                                    $strRespuesta = "Ciertas tareas no pudieron ser canceladas. Favor notificar a Sistemas.";
                                    $emComercialR->getConnection()->rollback();
                                    $emComunicacionR->getConnection()->rollback();

                                    $arrayResponse = array(
                                        'intCode'    => 503,
                                        'strStatus'  => "ERROR",
                                        'strMensaje' => $strRespuesta
                                    );

                                    return $arrayResponse;
                                }                        
                            }
                        }
                    }
                }
            }

            $emComunicacionR->getConnection()->commit();
            $emComercialR->getConnection()->commit();

            $arrayResponse = array(
                'intCode'    => 200,
                'strStatus'  => "OK",
                'strMensaje' => "Transaccion Exitosa"
            );
        }
        catch (\Exception $exception)
        {
            $emComercialR->getConnection()->rollback();
            $emComunicacionR->getConnection()->rollback();

            $arrayResponse = array(
                'intCode'    => 503,
                'strStatus'  => "ERROR",
                'strMensaje' => $exception->getMessage()
            );
        }

        return $arrayResponse;
    }

    /**
     * 
     * Metodo encargado de realizar la eliminacion de todos los servicios de manera general y devuelve el array de Servicios
     * Eliminados para retro alimentar al usuario
     * 
     * @author Edgar Pin Villavicencio <epin@telconet.ec>
     * @version 1.0 - 27-10-2020
     * 
     * @author Edgar Pin Villavicencio <epin@telconet.ec>
     * @version 1.1 - 29-12-2020 se quita la cancelación de tareas porque los servicios factibles no deben tener tarea
     *
     * @param   Array $arrayParametros
     * @return Array  [ status , mensaje, arrayIdServiciosEliminados ]
     */
    public function eliminarServicioInternetFactible($arrayParametros) 
    {
        $objServicio = $arrayParametros['objServicio']; 


        $strMensaje = 'Error al ingresar Servicio: ';
        $arrayParametrosLog['enterpriseCode']   = "18";
        $arrayParametrosLog['logType']          = "1";
        $arrayParametrosLog['logOrigin']        = "TELCOS";
        $arrayParametrosLog['application']      = "InfoServicioService";
        $arrayParametrosLog['appClass']         = "InfoServicioService";
        $arrayParametrosLog['appMethod']        = "eliminar";
        $arrayParametrosLog['appAction']        = "eliminar";
        $arrayParametrosLog['messageUser']      = "Parametros para eliminar servicio Servicio " .   $objServicio->getId();
        $arrayParametrosLog['status']           = "Info";
        $arrayParametrosLog['descriptionError'] = json_encode($arrayParametros,1);
        $arrayParametrosLog['inParameters']     = json_encode($arrayParametros,1);
        $arrayParametrosLog['creationUser']     = $arrayParametros['strUsrCreacion'];    

        $this->utilServicio->insertLog($arrayParametrosLog);

        


        $arrayParametrosEliminacion['strEstado']      = $arrayParametros['strEstado'];
        $arrayParametrosEliminacion['strAccion']      = $arrayParametros['strAccion'];
        $arrayParametrosEliminacion['strUsrCreacion'] = $arrayParametros['strUsrCreacion'];
        $arrayParametrosEliminacion['strIpCreacion']  = $arrayParametros['strIpCreacion'];
        $arrayParametrosEliminacion['objRequest']     = $arrayParametros['objRequest'];
        $arrayParametrosEliminacion['objMotivo']      = $arrayParametros['objMotivo'];
        $arrayParametrosEliminacion['strObservacion'] = $arrayParametros['strObservacion'];
        $arrayParametrosEliminacion['boolEsSolucion'] = false; 

        
        
        

        $objServicio->setEstado($arrayParametros['strEstado']);
        $this->emcom->persist($objServicio);
        $this->emcom->flush();
        
        $arrayParametrosEliminacion['intIdServicio']  = $objServicio->getId();
        
        if($arrayParametros['strAccion'] == 'Eliminar')
        {
            //Eliminar comisiones
            $this->eliminarComisionesPorServicio($arrayParametrosEliminacion);
        }
        
        $this->eliminarAnularRechazarSolicitudes($arrayParametrosEliminacion);
        
        //Si ya genero Factibilidad se procede a reversar la misma

        $strMensaje = $this->servicioTecnico->reversaFactibilidad($arrayParametrosEliminacion);

        if(!empty($strMensaje))
        {
            return array('status' => 'ERROR' , 'mensaje' => $strMensaje);
        }
        
        $strObservacionEliminacion = '';
        

        $strObservacionEliminacion = ($arrayParametros['strMensaje']) ? ($arrayParametros['strMensaje']) 
                                                                     : 'Se eliminó el servicio por certificado caducado contrato digital ';

        
        
        //Ingresar Historial del Servicio
        $this->servicioTecnico->ingresarServicioHistorial($objServicio,
                                                            $arrayParametros['strEstado'],
                                                            $strObservacionEliminacion,
                                                            $arrayParametros['strUsrCreacion'],
                                                            $arrayParametros['strIpCreacion'],
                                                            $arrayParametros['objMotivo']
                                                            );
        

        $arrayIdServiciosEliminados[] = $objServicio->getId();


        return array('status'  => 'OK' , 'mensaje' => 'OK',
                     'arrayIdServiciosEliminados' => $arrayIdServiciosEliminados);
    }
    
    
    /**
     * Metodo encargado de realizar el proceso de traslado de servicios de un punto a un nuevo punto
     * 
     * @author Ivan Mata <imata@telconet.ec>
     * @version 1.0
     * @since 12-03-2021
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.1 07-04-2021 - Se agrego proceso que permite anexar productos de cableado ethernet adicionales, solo en
     *                            los estados permitidos, asi como asignar un estado temporal a las solicitudes de origen
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.2 04-05-2021 - Se agrega validación de existencia del parámetro $intIdPtoTraslado, obtenido únicamente desde la opción directa 
     *                            de Trasladar Servicios, pero que no es enviada desde la pantalla de autorización de solicitudes
     *                            de traslado que existe sólo para TN
     * 
     * @author Antonio Ayala <afayala@telconet.ec>
     * @version 1.3 04-05-2021 Se agrega en las caracteristicas TIPO_ENRUTAMIENTO por la IP privada
     * 
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 1.4 06-04-2021 - Se agrega validación para trasladar en estado PrePlanificada el servicio EXTENDER_DUAL_BAND
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.5 17-06-2021 Se cambia funcionalidad de traslado de productos adicionales, para que tome de una lista
     *                         parametrizada e productos y no solo cableado ethernet en ciertos estados permitidos,
     *                         adicional se valido que los servicios con estados Asignados queden Replanificados y sus
     *                         tareas queden anuladas hasta completar la activacion del servicio trasladado.
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.7 03-01-2022 Se elimina envío de parámetro strValorCaractTipoOntNuevo a la función creaSolicitudCambioOntTraslado por cambio 
     *                         en dicha función para permitir Extender para ZTE
     * 
     * @author Liseth Candelario <lcandelario@telconet.ec>
     * @version 1.8 13-04-2022 Se agrega características de VELOCIDAD_TELCOHOME y TIPO_ENRUTAMIENTO al $arrayCaracteristicasValidar[]
     *                         solo para la consulta de las carácterísticas del servicio INTERNET SAFE
     * 
     * @author Emmanuel Martillo <emartillo@telconet.ec>
     * @version 1.9 19-10-2022 Se agrega validacion para productos NetlifeCam y observacion para su traslado.
     * 
     * @author Kevin Baque Puya <kbaque@telconet.ec>
     * @version 2.0 06-12-2022 - Se guardan los motivos para el ingreso de la solicitud.
     *
     *  @author Daniel Guzmán <ddguzman@telconet.ec>
     * @version 2.1 16-02-2023 - Se cambia el estado del flujo ‘Proceso Traslado’ a ‘Finalizado’ 
     *                           cuando el proceso del traslado concluyó de manera exitosa.
     *  @author Andre Lazo <alazo@telconet.ec>
     * @version 2.1 16-02-2023 - Se agrega la invocacion de generacion de tareas de 
     * cierre automatico en login de origen y armado del arrayParametros.
     *  Se agrega codigo para adjuntar caracteristica DESTINO_SERVICIO a los servicios que 
     * seran trasladado , en la cual se guarda el id del servicio destino
     * @param type $arrayParametros
     * 
     */
    public function trasladarServiciosPunto($arrayParametros)
    {
        
        $emComercial        = $this->emcom;
        $emFinanc           = $this->emfinan;
        $emInfraestructura  = $this->emInfraestructura;
        $emGeneral          = $this->emgen;
        $arrayRespuesta     = "";
        
        $strStatus                  = "";
        $strMensaje                 = "";
        $strPrecioTraslado          = "";
        $strDescripcionTraslado     = "";
        $objSolicitudTraslado       = null;
        $strNombreServicio          = "";
        $intFormaContacto           = 5;
        $strBanderaPrimerServicio   = "SI";
        $strEsTradicional           = "";
        $arrayServiciosBackup       = "";
        $booleanTieneContratoActivo = false;
        $objUltimaMillaFo           = null;
        $intDetalleSolicitudId      = 0;
        $strPuntoDestino            = "";
        $strLoginDestino            = "";
        $strRegionDestino           = "";
        $strCiudadDestino           = "";
        $strCanton                  = "";
        $strParametroCiudad         = "GYE";
        $arrayParametrosHist        = array();
        $strIpCreacion              = "";
        $objPtoCliente              = array();
      
        $objSession                 = $arrayParametros['session'];
        $objPtoClienteDestino       = $arrayParametros ['objPuntoCliente'];
        $strIp                      = $arrayParametros ['strIp'];
        $strTipoProceso             = $arrayParametros['strTipoProceso'];
        $intIdPtoCliente            = $arrayParametros['intIdPuntoCliente'];
        $intIdPtoTraslado           = $arrayParametros['intIdPtoTraslado'];
        $strPrefijoEmpresa          = $arrayParametros['strPrefijoEmpresa'];
        $strEmpresaCod              = $arrayParametros['strEmpresaCod'];
        $strPersonaEmpresaRol       = $arrayParametros['strPersonaEmpresaRol'];
        $intIdOficina               = $arrayParametros['intIdOficina'];
        $strDepartamento            = $arrayParametros['strDepartamento'];
        $strUsuarioCreacion         = $arrayParametros['strUsuarioCreacion'];
        $strCanal                   = $arrayParametros['strCanal'];
        $arrayParamProducNetCam     = $this->serviceGeneral->paramProductosNetlifeCam();
        $serviceEnviarPlantilla     = $this->serviceEnvioPlantilla;
        $serviceSoporteService      = $this->serviceSoporte;
        $serviceFoxPremiums         = $this->serviceFoxPremium;
        $serviceTecnico             = $this->serviceGeneral;
        $serviceUtilidad            = $this->serviceUtilidades;
        $serviceServicioTecnico     = $this->serviceGeneral;
        $serviceServicioIPMP        = $this->serviceLicenciasKaspersky;
        $serviceUtil                = $this->utilServicio;
        $objServicioRepository      = $emComercial->getRepository('schemaBundle:InfoServicio');
        $boolTraslado               = true;
        $strCreaCaractTraslado      = "SI";
        $strVerifSolCambioOntXExtenderEnPunto   = "NO";
        $objServicioPlanOrigenEnPunto           = null;
        $objServicioPlanDestinoEnPunto          = null;
      $arrayServicios=array();
        if($strTipoProceso=="continuo")
        {
            $arrayServicios  = $objServicioRepository->getServiciosPunto($intIdPtoTraslado);
        }
        if($strCanal === "telcos")
        {
            $intIdPuntoSession           = $arrayParametros['arrayValor']->get('idPuntoSession');
            $strIpCreacion               = $arrayParametros['arrayValor']->getClientIp();
            $objPtoCliente               = $arrayParametros['objPuntoCliente'];
            $intIdDetalleSolicitud       = $arrayParametros['arrayValor']->get('idDetalleSolicitud');
            $strBanderaAutorizarSol      = $arrayParametros['arrayValor']->get('banderaAutorizarSol');
            $arrayIdsServiciosTrasladar  = $arrayParametros['arrayValor']->get('idsServiciosTrasladar');
            $intIdMotivo                 = $arrayParametros['arrayValor']->get('objListadoMotivos');
            $arrayIdsServiciosTrasladar  = explode(",", $arrayIdsServiciosTrasladar);
           
            if($strBanderaAutorizarSol == "S")
            {
               $intIdPtoCliente = $intIdPuntoSession;
            }
            
        }
        else
        {
            $strIpCreacion              =  $arrayParametros['strIpCreacion'];
            $strBanderaAutorizarSol     =  $arrayParametros['strBanderaAutorizarSol'];
            $intIdPuntoOrigen           =  $arrayParametros['intIdPuntoOrigen'];
            $strUsuarioVendedor         =  $arrayParametros['strUsuarioVendedor'];
        }
        
        
        $emComercial->getConnection()->beginTransaction();
        
        try 
        {
            
            if($strCanal == "extranet")
            {
                //obtengo los servicios activos a trasladar del punto de origen
                $objIdServicios  = $objServicioRepository->getServiciosPunto($intIdPuntoOrigen);
                $arrayIdsServiciosTrasladar =  $objIdServicios;
                $arrayListServicios  = array();
                
                foreach($arrayIdsServiciosTrasladar as $intIdServicio)
                {
                    array_push($arrayListServicios, $intIdServicio["idServicio"]);
                }
                
                $arrayIdsServiciosTrasladar = $arrayListServicios;
                
                if(empty($arrayIdsServiciosTrasladar))
                {
                    throw new \Exception('El punto no tiene servicios activos a trasladar');
                }
                
            }            
            
            
            if($strPrefijoEmpresa !== 'MD' && $strPrefijoEmpresa !== 'EN' && $strPrefijoEmpresa !== 'TN')
            {
                throw new \Exception("Servicio no disponible para su empresa.");
            }
            
            if ($strPrefijoEmpresa == 'TN')
            {
                $strPrecioTraslado      = $arrayParametros['arrayValor']->get('precioTrasladoTn');
                $strDescripcionTraslado = $arrayParametros['arrayValor']->get('descripcionTrasladoTn');
                $objUltimaMillaFo       = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                                            ->findOneBy(array('nombreTipoMedio' => 'Fibra Optica',
                                                                              'estado'          => 'Activo' ));
                if (!is_object($objUltimaMillaFo))
                {
                    throw new \Exception("Problemas al recupera ultima milla Fibra Optica.");
                }
                
                $arrayParametrosProductos                               = array();
                $objAdmiProductoRepository                              = $emComercial->getRepository('schemaBundle:AdmiProducto');
                $arrayParametrosProductos["strEmpresaCod"]              = $strEmpresaCod;
                $arrayParametrosProductos["strSoporteMasivo"]           = "S";
                $arrayParametrosProductos["strEstadoServicio"]          = "Activo";
                $arrayParametrosProductos["strNombreTecnico"]           = "FINANCIERO";
                $arrayParametrosProductos["strFiltroOtros"]             = "OTROS";
                $arrayParametrosProductos["strEsProductoTradicional"]   = "SI";

                $arrayProductoResult     = $objAdmiProductoRepository->getProductosTradicionales($arrayParametrosProductos);
                $arrayProductosRegistros = $arrayProductoResult['registros'];
                
            }
            
            // Obtendremos los productos adicionales manuales que se pueden trasladar
            $arrayProducAdicioManuales = array();
            $arrayParamValores = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                        ->get('PRODUCTOS ADICIONALES MANUALES','COMERCIAL','',
                                        'Productos adicionales manuales para activar','','','',
                                        '','',$strEmpresaCod);
            if (is_array($arrayParamValores) && !empty($arrayParamValores))
            {
                $arrayProducAdicioManuales = $serviceUtil->obtenerValoresParametro($arrayParamValores);
            }
            // Obtenemos los estados permitidos para esos productos manuales
            $arrayEstadoAdicioManuales = array();
            $arrayParamValores = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                        ->get('PRODUCTOS ADICIONALES MANUALES','COMERCIAL','',
                                        'Estados permitidos para trasladar productos manuales',
                                        '','','','','',$strEmpresaCod);
            if (is_array($arrayParamValores) && !empty($arrayParamValores))
            {
                $arrayEstadoAdicioManuales = $serviceUtil->obtenerValoresParametro($arrayParamValores);
            }

            // Obtenemos los productos adicionales automaticos a trasladar y su estado permitido
            $arrayProducAdicioAuto = array();
            $arrayParamValores = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                        ->get('PRODUCTOS ADICIONALES AUTOMATICOS','COMERCIAL','',
                                        'Listado de productos automatico a trasladar no activos','','','',
                                        '','',$strEmpresaCod);
            if (is_array($arrayParamValores) && !empty($arrayParamValores))
            {
                $arrayProducAdicioAuto = $serviceUtil->obtenerValoresParametro($arrayParamValores);
            }
            $arrayEstadosProdAuto = array();
            $strEstadoTrasAuto = "";
            $arrayParamValores = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                        ->get('PRODUCTOS ADICIONALES AUTOMATICOS','COMERCIAL','',
                                        'Estados permitidos para los productos adicionales','','','',
                                        '','',$strEmpresaCod);
            if (is_array($arrayParamValores) && !empty($arrayParamValores))
            {
                $arrayEstadosProdAuto = $arrayParamValores[0];
                $strEstadoTrasAuto = $arrayEstadosProdAuto['valor1'];
            }

            // Obtener todos los productos adicionales validos y los agregamos al arreglo principal
            if(isset($intIdPtoTraslado) && !empty($intIdPtoTraslado))
            {
                $arrayProdAdicionales = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                    ->getProductoAdicional($intIdPtoTraslado);
                
                foreach ($arrayProdAdicionales as $prodAdicional)
                {
                    if ((in_array($prodAdicional['productoId'], $arrayProducAdicioManuales) &&
                        in_array($prodAdicional['estado'], $arrayEstadoAdicioManuales)) ||
                        (in_array($prodAdicional['productoId'], $arrayProducAdicioAuto) &&
                        $prodAdicional['estado'] == $strEstadoTrasAuto))
                    {
                        array_push($arrayIdsServiciosTrasladar, $prodAdicional['idServicio']);
                    }
                }
            }

            foreach ($arrayIdsServiciosTrasladar as $intIdServicioTrasladar)
            {
                $strCreaCaractTraslado = "SI";
                $boolTraslado = true;
                $objServicioRepository = $emComercial->getRepository('schemaBundle:InfoServicio');
                $objInfoServicioTrasladar = $objServicioRepository->find($intIdServicioTrasladar);
                
                if (is_object($objInfoServicioTrasladar))
                {
                    $fltValor   = 0;
                    $arraySaldo = array();
                    // Obtengo Rol del Cliente, No se considera validacion si el CLIENTE es Canal 
                    $objAdmiRol = $emComercial->getRepository('schemaBundle:AdmiRol')
                                              ->find($objInfoServicioTrasladar->getPuntoId()->getPersonaEmpresaRolId()
                                              ->getEmpresaRolId()->getRolId());
                    // Obtengo contrato del Cliente para saber su forma de Pago, Solo se considera validacion si la forma de pago 
                    // del cliente es EFECTIVO.
                    $objContrato = $emComercial->getRepository('schemaBundle:InfoContrato')
                                               ->findContratoActivoPorPersonaEmpresaRol($objInfoServicioTrasladar->getPuntoId()
                                                                                                              ->getPersonaEmpresaRolId());
                    if(!is_object($objContrato))
                    {
                        throw new \Exception('Cliente no posee contrato Activo - No puede realizar Traslado');
                    }
                    else
                    {
                        $booleanTieneContratoActivo = true;
                    }
                    
                    // Solo para CLIENTES MD con forma de pago Efectivo se valida que el cliente no posea deuda para permitir Trasladar.
                    if(($strPrefijoEmpresa=='MD' || $strPrefijoEmpresa=='EN') && $objContrato->getFormaPagoId()->getCodigoFormaPago()== 'EFEC' 
                        && (is_object($objAdmiRol) && $objAdmiRol->getDescripcionRol() != 'Cliente Canal'))
                    {
                        // Obtengo deuda de Punto a Trasladar
                        $arraySaldo = $emFinanc->getRepository('schemaBundle:InfoPagoCab')
                                               ->obtieneSaldoPorPunto($objInfoServicioTrasladar->getPuntoId()->getId());
                        $fltValor   = $fltValor + $arraySaldo[0]['saldo'];
                    
                        if(round($fltValor, 2) > 0)
                        {
                            throw new \Exception('El cliente tiene deuda con la empresa [Deuda] : ' . round($fltValor, 2) . ' - '
                                               . 'No puede realizar el Traslado');
                        }
                    }
                    
                    $intMesesRestantes = $objInfoServicioTrasladar->getMesesRestantes();
                    $intFrecuenciaProd = $objInfoServicioTrasladar->getFrecuenciaProducto();
                    
                    // Validación de existencia del valor de meses restantes y frecuencia de facturación.
                    if(($intFrecuenciaProd === null || $intMesesRestantes === null || $intFrecuenciaProd < 0 || $intMesesRestantes < 0 || 
                      ($intFrecuenciaProd  >  0    && $intMesesRestantes === 0)) && ($strPrefijoEmpresa == "MD" || $strPrefijoEmpresa == "EN"))
                    {
                        $strNombreServicio = $this->obtenerNombreServicios($objInfoServicioTrasladar);
                        $strFrecuenciaFact = $objInfoServicioTrasladar->getFrecuenciaProducto();
                        
                        throw new \Exception("No se puede trasladar el servicio \"$strNombreServicio\", "
                                                           . "datos de Facturación inconsistentes:\n"
                                                           . "- Frecuencia Facturación : $strFrecuenciaFact\n"
                                                           . "- Meses Restantes        : NULL [No se ha definido meses restantes]\n"
                                                           . "Regularizar con el área de Facturación.");
                    }
                    
                    $objInfoPunto = $emComercial->getRepository('schemaBundle:InfoPunto')->find($intIdPtoCliente);
                    
                    if($objInfoPunto === null)
                    {
                        throw new \Exception('No se encontró Punto Cliente');
                    }
                    
                    $strEstadoServicio            = 'Activo';
                    $boolEsEnlace              = false;
                    $boolRequierePlanificacion = false;
                    $boolRequiereInfoTecnica   = false;
                    $objServicioPlan           = $objInfoServicioTrasladar->getPlanId();
                    $strEsProdWYAp             = "";
                    $strEsProdEDB              = "";
                    $strEsPlanInternet         = "";
                    if($objServicioPlan !== null && ($strPrefijoEmpresa == 'MD' || $strPrefijoEmpresa == 'EN'))
                    {
                        $objInfoPlanDets = $emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                    ->findByPlanId($objServicioPlan->getId());
                        if ($objInfoPlanDets)
                        {
                            $objAdmiProducto                      = "";
                            $objAdmiProductoEsEnlace              = "";
                            $objAdmiProductoRequierePlanificacion = "";
                            $objAdmiProductoRequiereInfoTecnica   = "";

                            foreach ($objInfoPlanDets as $infoPlanDet)
                            {
                                $objAdmiProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($infoPlanDet->getProductoId());

                                if ($objAdmiProducto->getEsEnlace() == 'SI')
                                {
                                    $boolEsEnlace         = true;
                                    $objAdmiProductoEsEnlace = $objAdmiProducto;
                                    $strEsPlanInternet    = "SI";
                                    break;
                                }
                                else if ($objAdmiProducto->getRequierePlanificacion() == 'SI')
                                {
                                    $boolRequierePlanificacion            = true;
                                    $objAdmiProductoRequierePlanificacion = $objAdmiProducto;
                                }
                                else if ($objAdmiProducto->getRequiereInfoTecnica() == 'SI')
                                {
                                    $boolRequiereInfoTecnica            = true;
                                    $objAdmiProductoRequiereInfoTecnica = $objAdmiProducto;
                                }
                            }
                        }
                        else
                        {
                            throw new \Exception('No existe ningún detalle para el Plan : ' . $objServicioPlan->getNombrePlan() .
                                                                 ', Favor notificar a Sistemas. idPlan: '   . $objServicioPlan->getId());
                        }
                    }
                    else
                    {
                        $objAdmiProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')->find($objInfoServicioTrasladar->getProductoId());
                        
                        if (is_object($objAdmiProducto) && $objAdmiProducto->getNombreTecnico() == 'IP' 
                           && ($strPrefijoEmpresa == 'MD' || $strPrefijoEmpresa == 'EN'))
                        {
                            if ($objAdmiProducto->getEsEnlace() == 'SI')
                            {
                                $boolEsEnlace         = true;
                                $objAdmiProductoEsEnlace = $objAdmiProducto;
                                break;
                            }
                            else if ($objAdmiProducto->getRequierePlanificacion() == 'SI')
                            {
                                $boolRequierePlanificacion            = true;
                                $objAdmiProductoRequierePlanificacion = $objAdmiProducto;
                            }
                            else if ($objAdmiProducto->getRequiereInfoTecnica() == 'SI')
                            {
                                $boolRequiereInfoTecnica            = true;
                                $objAdmiProductoRequiereInfoTecnica = $objAdmiProducto;
                            }
                        }
                        else if (is_object($objAdmiProducto) && $strPrefijoEmpresa == 'TN')
                        {
                            $strEsTradicional = "NO";
                            foreach($arrayProductosRegistros as $objProducto): 
                                if ($objAdmiProducto->getId() == $objProducto['idProducto'])
                                {
                                    $strEsTradicional = "SI";
                                }
                            endforeach;
                            
                            $objCaracNoTradicional = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                 ->findOneBy(array("descripcionCaracteristica" => "NO_TRADICIONAL_FLUJO", 
                                                                                   "estado"                    => "Activo"));
                            if (is_object($objCaracNoTradicional))
                            {
                                $objProdCaractNoTradicional = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                          ->findOneBy(array("productoId"       => $objAdmiProducto->getId(),
                                                                                            "caracteristicaId" => $objCaracNoTradicional->getId(), 
                                                                                            "estado"           => "Activo"));

                            }
                            
                            if ($strEsTradicional == 'NO' && !is_object($objProdCaractNoTradicional))
                            {
                                $strEstadoServicio = "Activo";
                            }
                            else if($objAdmiProducto->getEstadoInicial() === 'Activo')
                            {   
                                if ($booleanTieneContratoActivo)
                                {
                                    $strEstadoServicio = "Activo";
                                }
                                else
                                {
                                    $strEstadoServicio = "Pendiente";
                                }
                            }
                            else
                            {
                                //Buscar si es enlace S, estado Pre-servicio | N, Pendiente
                                if ($objAdmiProducto->getEsEnlace() == 'SI')
                                {
                                    $strEstadoServicio = "Pre-servicio";
                                }
                                else
                                {
                                    if ($objAdmiProducto->getRequierePlanificacion() == 'SI')
                                    {
                                        $strEstadoServicio = "PrePlanificada";
                                    }
                                    else if ($objAdmiProducto->getRequiereInfoTecnica() == 'SI')
                                    {
                                        $strEstadoServicio = "PreAsignacionInfoTecnica";
                                    }
                                    else
                                    {
                                        $strEstadoServicio = "Pendiente";
                                    }
                                }
                            }
                        }
                        
                    }
                    
                    
                    if ($strPrefijoEmpresa == 'MD' || $strPrefijoEmpresa == 'EN')
                    {
                        if (is_object($objInfoServicioTrasladar->getProductoId()))
                        {
                            $objAdmiProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                           ->find($objInfoServicioTrasladar->getProductoId());
                        }
                        if ($boolEsEnlace)
                        {
                            $objAdmiProducto   = $objAdmiProductoEsEnlace;
                            $strEstadoServicio = 'Pre-servicio';
                        }
                        else if ($boolRequierePlanificacion)
                        {
                            $objAdmiProducto   = $objAdmiProductoRequierePlanificacion;
                            $strEstadoServicio = 'PrePlanificada';
                        }
                        else if ($boolRequiereInfoTecnica)
                        {
                            $objAdmiProducto   = $objAdmiProductoRequiereInfoTecnica;
                            $strEstadoServicio = 'PreAsignacionInfoTecnica';
                        }
                        else if (is_object($objAdmiProducto) && $objAdmiProducto->getNombreTecnico() == 'WIFI_DUAL_BAND')
                        {
                            $strEstadoServicio = "Pendiente";
                        }
                        else if(is_object($objAdmiProducto) && $objAdmiProducto->getNombreTecnico() == 'WDB_Y_EDB')
                        {
                            $strEsProdWYAp          = "SI";
                            $objProductoInternet    = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                  ->findOneBy(array("nombreTecnico" => "INTERNET", 
                                                                                    "empresaCod"    => $strEmpresaCod,
                                                                                    "estado"        => "Activo"));
                            if(!is_object($objProductoInternet))
                            {
                                throw new \Exception("No se ha podido obtener correctamente el producto Internet");
                            }
                            $objSpcTrasladarExtenderServicioOrigen  = $serviceTecnico->getServicioProductoCaracteristica(
                                                                                            $objInfoServicioTrasladar, 
                                                                                            "TRASLADAR EXTENDER DUAL BAND", 
                                                                                            $objProductoInternet);
                            if($objInfoServicioTrasladar->getEstado() === "PendienteAp" && is_object($objSpcTrasladarExtenderServicioOrigen))
                            {
                                $strEstadoServicio     = $objInfoServicioTrasladar->getEstado();
                            }
                            else
                            {
                                $arrayRegEstadoServicioXProdPermitido   = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                                    ->getOne(   'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                                '',
                                                                                                '',
                                                                                                '',
                                                                                                'TRASLADO',
                                                                                                'ESTADOS_SERVICIOS_X_PROD_PERMITIDOS',
                                                                                                'WDB_Y_EDB',
                                                                                                $objInfoServicioTrasladar->getEstado(),
                                                                                                '',
                                                                                                $strEmpresaCod);
                                if(isset($arrayRegEstadoServicioXProdPermitido) && !empty($arrayRegEstadoServicioXProdPermitido))
                                {
                                    $strEstadoServicio     = $arrayRegEstadoServicioXProdPermitido["valor5"];
                                }
                                else
                                {
                                    throw new \Exception('No existe un flujo determinado para el traslado del producto'
                                                         .$objAdmiProducto->getDescripcionProducto(). " en estado "
                                                         .$objInfoServicioTrasladar->getEstado());
                                }
                            }
                        }
                        else if(is_object($objAdmiProducto) && $objAdmiProducto->getNombreTecnico() == 'EXTENDER_DUAL_BAND')
                        {
                            $strEsProdEDB                  = "SI";
                            $objProductoInternet    = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                  ->findOneBy(array("nombreTecnico" => "INTERNET", 
                                                                                    "empresaCod"    => $strEmpresaCod,
                                                                                    "estado"        => "Activo"));
                            if(!is_object($objProductoInternet))
                            {
                                throw new \Exception("No se ha podido obtener correctamente el producto Internet");
                            }
                            $objSpcTrasladarExtenderServicioOrigen  = $serviceTecnico->getServicioProductoCaracteristica(
                                                                                            $objInfoServicioTrasladar, 
                                                                                            "TRASLADAR EXTENDER DUAL BAND", 
                                                                                            $objProductoInternet);
                            if($objInfoServicioTrasladar->getEstado() === "Pendiente" && is_object($objSpcTrasladarExtenderServicioOrigen))
                            {
                                $strEstadoServicio = $objInfoServicioTrasladar->getEstado();
                            }
                            else
                            {
                                $arrayEstadoExtenderDualBand   = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                            ->getOne(   'PARAMETROS_ASOCIADOS_A_SERVICIOS_MD',
                                                                                        '',
                                                                                        '',
                                                                                        '',
                                                                                        'TRASLADO',
                                                                                        'ESTADOS_SERVICIOS_X_PROD_PERMITIDOS',
                                                                                        'EXTENDER_DUAL_BAND',
                                                                                        $objInfoServicioTrasladar->getEstado(),
                                                                                        '',
                                                                                        $strEmpresaCod);
                                if(isset($arrayEstadoExtenderDualBand) && !empty($arrayEstadoExtenderDualBand))
                                {
                                    $strEstadoServicio     = $arrayEstadoExtenderDualBand["valor5"];
                                }
                                else 
                                {
                                    throw new \Exception('No existe un flujo determinado para el traslado del producto'
                                             .$objAdmiProducto->getDescripcionProducto(). " en estado ".$objInfoServicioTrasladar->getEstado());
                                }
                            }
                        }
                    }
                    
                    // Obtendremos los estados para el servicio de origen y detino de los productos adicionales
                    $arrayEstadosOrigen = array();
                    $arrayParamValores = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->get('PRODUCTOS ADICIONALES MANUALES','COMERCIAL','',
                                                'Estados para replanificar servicio origen','','','','',
                                                '',$strEmpresaCod);
                    if (is_array($arrayParamValores) && !empty($arrayParamValores))
                    {
                        $arrayEstadosOrigen = $serviceUtil->obtenerValoresParametro($arrayParamValores);
                    }
                    $arrayEstadosTraslado = array();
                    $arrayParamValores = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->get('PRODUCTOS ADICIONALES MANUALES','COMERCIAL','',
                                                'Estados validos que tomaran los servicios adicionales','','','','',
                                                '',$strEmpresaCod);
                    if (is_array($arrayParamValores) && !empty($arrayParamValores))
                    {
                        $arrayEstadosTraslado = $arrayParamValores[0];
                    }
                    $arrayProdCancelarTareas = array();
                    $arrayParamValores = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                ->get('PRODUCTOS ADICIONALES MANUALES','COMERCIAL','',
                                                'Productos trasladados que deben inactivar tareas','','','','',
                                                '',$strEmpresaCod);
                    if (is_array($arrayParamValores) && !empty($arrayParamValores))
                    {
                        $arrayProdCancelarTareas = $serviceUtil->obtenerValoresParametro($arrayParamValores);
                    }

                    if(is_object($objAdmiProducto) && !empty($objAdmiProducto) && !is_object($objServicioPlan) && $objServicioPlan == null)
                    {
                        $boolTraslado = true;
                        // Valida que solo entre para producto adicionales manuales
                        if (in_array($objAdmiProducto->getId(), $arrayProdCancelarTareas))
                        {
                            // Si cumple con los estados se manda a PrePlanificar y se ingresa el historial
                            $strEstadoServicio = $arrayEstadosTraslado['valor1'];
                            if (in_array($objInfoServicioTrasladar->getEstado(), $arrayEstadosOrigen))
                            {
                                $arrayDetServicios = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                        ->findByParameters(array('servicioId' => $objInfoServicioTrasladar->getId(),
                                                                                 'estado' => $objInfoServicioTrasladar->getEstado()));
                                $objInfoServicioTrasladar->setEstado($arrayEstadosTraslado['valor2']);
                                $emComercial->persist($objInfoServicioTrasladar);
                                $emComercial->flush();
                                // Obtenemos las solicitudes que deben ser mandadas a cancelar
                                $arraySolicitudServicio = array();
                                $arrayParamValores = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->get('PRODUCTOS ADICIONALES MANUALES','COMERCIAL','',
                                                            'Solicitudes anexas a los servicios adicionales manuales','','','','',
                                                            '',$strEmpresaCod);
                                if (is_array($arrayParamValores) && !empty($arrayParamValores))
                                {
                                    $arraySolicitudServicio = $serviceUtil->obtenerValoresParametro($arrayParamValores);
                                }
                                foreach($arrayDetServicios as $objDetservicio)
                                {
                                    $intIdTipSolicitud = $objDetservicio['tipoSolicitudId'];
                                    if (in_array($intIdTipSolicitud, $arraySolicitudServicio))
                                    {
                                        $entityDetSolicitud = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                        ->findOneById($objDetservicio['id']);
                                        // Cambiamos el estado de las solicitudes
                                        if (in_array($entityDetSolicitud->getEstado(), $arrayEstadosOrigen))
                                        {
                                            $entityDetSolicitud->setEstado($arrayEstadosTraslado['valor2']);
                                            $emComercial->persist($entityDetSolicitud);
                                            $emComercial->flush();
                                            // Llamamos al metodo que cancelara las tareas de estas solicitudes
                                            $arrayDatosCancelar = array ('objSolicitud'   => $entityDetSolicitud,
                                                                        'strObservacion'    => "Se cancela la tarea por traslado de servicio.",
                                                                        'strEstadoTarea'    => "Cancelada",
                                                                        'strUsuCreacion'    => $strUsuarioCreacion,
                                                                        'strIpCreacion'     => $strIpCreacion,
                                                                        'intIdPersonaRol'   => $strPersonaEmpresaRol,
                                                                        'intIdDepartamento' => $strDepartamento,
                                                                        'intCodEmpresa'     => $strEmpresaCod);
                                            $this->cancelarTareaSolicitud($arrayDatosCancelar);
                                        }
                                    }
                                }
                            }
                        }
                        // Validamos que sea uno de los automaticos
                        else if (in_array($objAdmiProducto->getId(), $arrayProducAdicioAuto))
                        {
                            $strEstadoServicio = $objInfoServicioTrasladar->getEstado();
                        }
                    }
                    else
                    {
                        $boolTraslado = true;
                        $arrayDetServicios = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                ->findByParameters(array('servicioId' => $objInfoServicioTrasladar->getId(),
                                                                         'estado' => $objInfoServicioTrasladar->getEstado()));
                        // Obtenemos las solicitudes que deben ser mandadas a cancelar
                        $arraySolicitudServicio = array();
                        $arrayParamValores = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->get('PRODUCTOS ADICIONALES MANUALES','COMERCIAL','',
                                                    'Solicitudes anexas a los servicios adicionales manuales','','','','',
                                                    '',$strEmpresaCod);
                        if (is_array($arrayParamValores) && !empty($arrayParamValores))
                        {
                            $arraySolicitudServicio = $serviceUtil->obtenerValoresParametro($arrayParamValores);
                        }
                        foreach($arrayDetServicios as $objDetservicio)
                        {
                            $intIdTipSolicitud = $objDetservicio['tipoSolicitudId'];
                            if (in_array($intIdTipSolicitud, $arraySolicitudServicio))
                            {
                                $entityDetSolicitud = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                ->findOneById($objDetservicio['id']);
                                // Cambiamos el estado de las solicitudes
                                if (in_array($entityDetSolicitud->getEstado(), $arrayEstadosOrigen))
                                {
                                    $entityDetSolicitud->setEstado($arrayEstadosTraslado['valor2']);
                                    $emComercial->persist($entityDetSolicitud);
                                    $emComercial->flush();
                                    // Llamamos al metodo que cancelara las tareas de estas solicitudes
                                    $arrayDatosCancelar = array ('objSolicitud'   => $entityDetSolicitud,
                                                                'strObservacion'    => "Se cancela la tarea por traslado de servicio.",
                                                                'strEstadoTarea'    => "Cancelada",
                                                                'strUsuCreacion'    => $strUsuarioCreacion,
                                                                'strIpCreacion'     => $strIpCreacion,
                                                                'intIdPersonaRol'   => $strPersonaEmpresaRol,
                                                                'intIdDepartamento' => $strDepartamento,
                                                                'intCodEmpresa'     => $strEmpresaCod);
                                    $this->cancelarTareaSolicitud($arrayDatosCancelar);
                                }
                            }
                        }
                    }
                    
                    if($boolTraslado)
                    {
                        $entityNewInfoServicio       = new InfoServicio();
                        $entityNewInfoServicio       = clone $objInfoServicioTrasladar;
                        $intIdPadreFacturacion       = 0;
                        $entityPuntoFact             = $objInfoServicioTrasladar->getPuntoFacturacionId();
                        $boolErrorPadreFact          = false;
                        
                        // Si el servicio no dispone de padre de facturación válido se deberá regularizar con el área de facturación.
                        if($entityPuntoFact === null)
                        {
                            $strError           = "No se ha definido el padre de facturación";
                            $boolErrorPadreFact = true;
                        }
                        else
                        {
                            // Se valida que el padre de facturación actual sea un padre de facturación válido.
                            $intIdPuntoFacturacion = $entityPuntoFact->getId();
                            $objPadreFacturacion   = $objServicioRepository->getResultadoPadreFacturacionDefault($intIdPuntoFacturacion);

                            if(!$objPadreFacturacion)
                            {
                                $strError           = "Cliente No tiene Punto Padre de Facturación alguno";
                                $boolErrorPadreFact = true;
                            } // El punto de facturación No es PF o tiene un estado No válido
                            else if($objPadreFacturacion->getId() !== $intIdPuntoFacturacion)
                            {
                                $strError           = "NO es un padre de facturación válido";
                                $boolErrorPadreFact = true;
                            }
                        }
                        
                        if($boolErrorPadreFact && $objInfoServicioTrasladar->getEsVenta()!='N' 
                           && ($strPrefijoEmpresa == "MD" || $strPrefijoEmpresa == "EN")) 
                        {
                            $strNombreServicio = $this->obtenerNombreServicios($objInfoServicioTrasladar);
                            throw new \Exception("No se puede trasladar el servicio \"$strNombreServicio\", "
                                                               . "datos de Facturación inconsistentes:\n"
                                                               . "- Punto de Facturación: NULL [$strError]\n"
                                                               . "Regularizar con el área de Facturación.");
                        }
                        
                        
                        $entityPuntoId = $objInfoServicioTrasladar->getPuntoId();

                        if($entityPuntoId->getId() === $entityPuntoFact->getId())
                        {
                            // Si Padre Fact. anterior es igual al Login del servicio entonces el nuevo Login del servicio será su Padre Fact.
                            $intIdPadreFacturacion = $objInfoPunto->getId(); 
                            $strHistorialMsg       = "Se cambió el";
                        }
                        else
                        {
                            // Se mantiene el Padre Facturación anterior.
                            $intIdPadreFacturacion = $entityPuntoFact->getId();
                            $strHistorialMsg = "Se heredó el";
                        }
                        
                        
                        $objPuntoPadreFact = $objServicioRepository->getResultadoPadreFacturacionDefault($intIdPadreFacturacion);

                        if(!$objPuntoPadreFact)
                        {
                            throw new \Exception('Padre de Facturación no disponible para asignar al servicio, '
                                                               . 'Verificar con el área Comercial');
                        }
                        else if($objPuntoPadreFact->getId() !== $intIdPadreFacturacion)
                        {
                            $strHistorialMsg = "Se asigna nuevo";
                        }
                        
                        $entityNewInfoServicio->setPuntoFacturacionId($objPuntoPadreFact);
                        $entityNewInfoServicio->setPuntoId($objInfoPunto);
                        if ($strPrefijoEmpresa == "TN")
                        {
                            $entityNewInfoServicio->setLoginAux("");
                        }
                        
                        // Validaremos que si es un producto adicional manual sin activar y lo trasladamos como nuevo
                        $arrayServManualesNoActivos = array();
                        $arrayParamValores = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->get('PRODUCTOS ADICIONALES MANUALES','COMERCIAL','',
                                                    'Servicios manuales no activos se trasladan como nuevos',
                                                    '','','','','',$strEmpresaCod);
                        if (is_array($arrayParamValores) && !empty($arrayParamValores))
                        {
                            $arrayServManualesNoActivos = $serviceUtil->obtenerValoresParametro($arrayParamValores);
                        }
                        $strProdServiTrasladado =  $objInfoServicioTrasladar->getProductoId();
                        if (!empty($strProdServiTrasladado))
                        {
                            $intIdProdTrasladado = $strProdServiTrasladado->getId();
                            $strEstProdTrasladado = $objInfoServicioTrasladar->getEstado();
                            if (in_array($intIdProdTrasladado, $arrayServManualesNoActivos) &&
                                in_array($strEstProdTrasladado, $arrayEstadoAdicioManuales))
                            {
                                $entityNewInfoServicio->setTipoOrden('N');
                            }
                            else
                            {
                                $entityNewInfoServicio->setTipoOrden('T');
                            }
                        }
                        else
                        {
                            $entityNewInfoServicio->setTipoOrden('T');
                        }
                        
                        $entityNewInfoServicio->setIpCreacion($strIpCreacion);
                        $entityNewInfoServicio->setFeCreacion(new \DateTime('now'));
                        $entityNewInfoServicio->setUsrCreacion($strUsuarioCreacion);
                        $entityNewInfoServicio->setEstado($strEstadoServicio);
                       

                        $emComercial->persist($entityNewInfoServicio);
                        $emComercial->flush();

                     $objSolicitudDescuento = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                            ->findOneBy(
                                                array('descripcionSolicitud' => 'SOLICITUD DESCUENTO',
                                                 'estado' => 'Activo'));
                     $objCaracteristicaServicioDestino = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                     ->findOneBy(array("descripcionCaracteristica" => "DESTINO_SERVICIO", 
                                        "estado" => "Activo"));
                            if (is_object($objCaracteristicaServicioDestino)&&is_object($objSolicitudDescuento))
                            {
                                $arrayEstados = array('Pendiente', 'Aprobado','Aprobada');
                                $objSolicitudDescuento = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                            ->findOneBy(
                                                            array("servicioId"=>$objInfoServicioTrasladar->getId(), 
                                                            "estado"=> $arrayEstados, 
                                                            "tipoSolicitudId" => $objSolicitudDescuento->getId()));
                                if(is_object($objSolicitudDescuento) && !empty($objSolicitudDescuento))
                                {

                                

                                
                                    $objInfoServicioCaracteristica = new InfoServicioCaracteristica();
                                    $objInfoServicioCaracteristica->setServicioId($objInfoServicioTrasladar);
                                    $objInfoServicioCaracteristica->setCaracteristicaId($objCaracteristicaServicioDestino);
                                    $objInfoServicioCaracteristica->setEstado("Activo");
                                    $objInfoServicioCaracteristica
                                    ->setObservacion('Registro del id de destino traslado
                                     al cual se realizo el traslado');
                                    $objInfoServicioCaracteristica->setUsrCreacion($strUsuarioCreacion);
                                    $objInfoServicioCaracteristica->setFeCreacion(new \DateTime('now'));
                                    $objInfoServicioCaracteristica->setIpCreacion($strIpCreacion);
                                    $objInfoServicioCaracteristica->setValor($entityNewInfoServicio->getId());
                                    $emComercial->persist($objInfoServicioCaracteristica);
                                    $emComercial->flush();
                                }
                            }

                        // Migramos las caracteristicas del producto si posee un konibit
                        $objPlanKon = $objInfoServicioTrasladar->getPlanId();
                        if (!empty($objPlanKon))
                        {
                            $intIdPlanKon = $objPlanKon->getId();
                            $arrayDetPlanesKon  = $emComercial->getRepository('schemaBundle:InfoPlanDet')
                                                            ->getPlanIdYEstados($intIdPlanKon);       
                            if(is_array($arrayDetPlanesKon) && !empty($arrayDetPlanesKon))
                            {
                                $arrayListadoServicios = array();
                                $arrayListadoServicios = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->get('PRODUCTOS ADICIONALES AUTOMATICOS','COMERCIAL','',
                                                                'Lista de productos adicionales automaticos',
                                                                '','','','','',$strEmpresaCod);
                                foreach($arrayDetPlanesKon as $objDetPlanKon)
                                {
                                    $intIdProdKon = $objDetPlanKon->getProductoId();
                                    foreach($arrayListadoServicios as $objListado)
                                    {
                                        // Si encuentra un producto konibit procede pasar la caracteristica
                                        if ($intIdProdKon == $objListado['valor1'] && $objListado['valor3'] == "SI")
                                        {
                                            $objProductoKon = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                ->find($intIdProdKon);
                                            
                                            $arrayProductoCarac  = array(
                                                "objServicio"       => $objInfoServicioTrasladar,
                                                "objProducto"       => $objProductoKon,
                                                "strUsrCreacion"    => $strUsuarioCreacion,
                                                "strCaracteristica" => "ACTIVO KONIBIT",
                                                "strValor"          => ""
                                            );
                                            $arrayResProductoCarac = $this->serviceLicenciasKaspersky
                                                                        ->obtenerValorServicioProductoCaracteristica($arrayProductoCarac);
                                            $arrayProductoCaracterKon = $arrayResProductoCarac["objServicioProdCaract"];
                                            if (!empty($arrayProductoCaracterKon))
                                            {
                                                $arrayProductoCarac["objServicio"] = $entityNewInfoServicio;
                                                $arrayProductoCarac["strValor"] = $arrayProductoCaracterKon->getValor();
                                                $arrayRespGuardado = $this->serviceLicenciasKaspersky
                                                                        ->guardaServicioProductoCaracteristica($arrayProductoCarac);
                                                if($arrayRespGuardado["status"] == 'ERROR')
                                                {
                                                    error_log("Problemas para guardar la caracteristica: ".$arrayRespGuardado["mensaje"]);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                        //Se migra historial con fecha de activación de servicio origen
                        if($strPrefijoEmpresa == 'MD' || ($strPrefijoEmpresa == 'EN'))
                        {                        
                            $emFinanciero        = $this->emfinan;
                            $objAdmiParametroCab = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                             ->findOneBy(array('nombreParametro' => 'CAMBIO FORMA PAGO', 
                                                                               'estado'          => 'Activo'));                        
                            $arrayParametrosFechaAct = array('emFinanciero'  => $emFinanciero,
                                                             'intIdServicio' => $objInfoServicioTrasladar->getId()
                                                             );
                            if(is_object($objAdmiParametroCab)) 
                            {
                                $objAdmiParametroDet = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                 ->findOneBy(array('parametroId'  => $objAdmiParametroCab,
                                                                                    'descripcion' => 'FECHA ACTIVACION ORIGEN',
                                                                                    'valor1'      => 'TRASLADAR SERVICIO',
                                                                                    'empresaCod'  => $strEmpresaCod,
                                                                                    'estado'      => 'Activo'));

                                $strFechaActivacionOrigen = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                 ->getFechaActivacionServicioOrigen($arrayParametrosFechaAct); 

                                if(is_object($objAdmiParametroDet))
                                {
                                    $strAccionHistOrigen = $objAdmiParametroDet->getValor2();

                                    if(isset($strAccionHistOrigen) && isset($strFechaActivacionOrigen) && !empty($strFechaActivacionOrigen))
                                    {
                                        $strNombreTecnico = is_object($entityNewInfoServicio->getProductoId()) ? 
                                                            $entityNewInfoServicio->getProductoId()->getNombreTecnico() : null;
                                        $objServicioHistorial = new InfoServicioHistorial();
                                        $objServicioHistorial->setServicioId($entityNewInfoServicio);
                                        $objServicioHistorial->setFeCreacion(new \DateTime($strFechaActivacionOrigen));
                                        $objServicioHistorial->setUsrCreacion($strUsuarioCreacion);
                                        $objServicioHistorial->setEstado($entityNewInfoServicio->getEstado());
                                        if(in_array($strNombreTecnico,$arrayParamProducNetCam))
                                        {
                                            $objServicioHistorial->setAccion("feOrigServicioNetlifeCam");
                                            $objServicioHistorial->setObservacion('Fecha inicial de servicio NetlifeCam.');
                                        }
                                        else
                                        {
                                            $objServicioHistorial->setAccion($strAccionHistOrigen);
                                            $objServicioHistorial->setObservacion('Fecha inicial de servicio trasladado.');
                                        } 
                                        $emComercial->persist($objServicioHistorial);
                                    }                            
                                }
                            }
                        }
                        
                        
                        if($strCanal == "extranet")
                        {
                            $entityNewInfoServicio->setUsrVendedor($strUsuarioVendedor);
                            
                            $arrayRespuesta['arrayServiciosTrasladados'] = $intIdServicioTrasladar;
                            
                            $objServicioConInternet = $objServicioRepository->getServicioInternet($intIdServicioTrasladar);
                
                            foreach ($objServicioConInternet as $intIdServicioInternet)
                            {
                                
                              if($intIdServicioInternet['descripcionProducto'] == "INTERNET DEDICADO")
                              {
                                  $intIdServicioConInternet = $entityNewInfoServicio->getId();
                                  $arrayRespuesta['IdServicioConInternet'] = $intIdServicioConInternet;
                              }
                              
                            }
                            
                            
                        }
                        
                        
                        // Se registra el historial de cómo se definió el Padre Facturación del servicio
                        $strHistorialMsg   .= " padre de facturación por traslado del servicio:" . $objPuntoPadreFact->getLogin();
                        $entityServicioHist = new InfoServicioHistorial();
                        $entityServicioHist->setServicioId($entityNewInfoServicio);
                        $entityServicioHist->setObservacion($strHistorialMsg);
                        $entityServicioHist->setIpCreacion($strIpCreacion);
                        $entityServicioHist->setFeCreacion(new \DateTime('now'));
                        $entityServicioHist->setUsrCreacion($strUsuarioCreacion);
                        $entityServicioHist->setEstado($strEstadoServicio);
                        $emComercial->persist($entityServicioHist);
                        $emComercial->flush();

                        $entityServicioHist = new InfoServicioHistorial();
                        $entityServicioHist->setServicioId($entityNewInfoServicio);
                        if($strPrefijoEmpresa == 'TN')
                        {
                            $entityServicioHist->setObservacion('Se Creó el servicio por Traslado del login '.$entityPuntoId->getLogin().
                                                                ' al login '.$objInfoPunto->getLogin());
                        }
                        else
                        {
                            $entityServicioHist->setObservacion('Se Creó el servicio por Traslado del login '.$entityPuntoId->getLogin().
                                                                ' al login '.$objPuntoPadreFact->getLogin());
                        }
                        
                        $entityServicioHist->setIpCreacion($strIpCreacion);
                        $entityServicioHist->setFeCreacion(new \DateTime('now'));
                        $entityServicioHist->setUsrCreacion($strUsuarioCreacion);
                        $entityServicioHist->setEstado($strEstadoServicio);
                        $emComercial->persist($entityServicioHist);
                        $emComercial->flush();
                        
                        
                        // Historial del servicio trasladado
                        $entityServicioHist = new InfoServicioHistorial();
                        $entityServicioHist->setServicioId($objInfoServicioTrasladar);
                        if($strPrefijoEmpresa == 'TN')
                        {
                            $entityServicioHist->setObservacion('Se trasladó el servicio al punto: ' . $objInfoPunto->getLogin());
                        }
                        else
                        {
                            $entityServicioHist->setObservacion('Se trasladó el servicio al punto: ' . $objPuntoPadreFact->getLogin());
                        }
                        $entityServicioHist->setIpCreacion($strIpCreacion);
                        $entityServicioHist->setFeCreacion(new \DateTime('now'));
                        $entityServicioHist->setUsrCreacion($strUsuarioCreacion);
                        $entityServicioHist->setEstado($objInfoServicioTrasladar->getEstado());
                        $emComercial->persist($entityServicioHist);
                        $emComercial->flush();
                        
                        if(($strPrefijoEmpresa == 'MD' || $strPrefijoEmpresa == 'EN') && $strEsPlanInternet === "SI" )
                        {
                            $objServicioPlanOrigenEnPunto   = $objInfoServicioTrasladar;
                            $objServicioPlanDestinoEnPunto  = $entityNewInfoServicio;
                        }
                        
                        if ($strEstadoServicio == "PrePlanificada" || $strEstadoServicio == "PreAsignacionInfoTecnica" 
                            || $strEsProdWYAp === "SI" || $strEsProdEDB === "SI")
                        {
                            $objDatosNumeracion    = $emComercial->getRepository('schemaBundle:AdmiNumeracion')
                                                              ->findByEmpresaYOficina($strEmpresaCod, $intIdOficina, "ORD");
                            $intSecuenciaAsig     = str_pad($objDatosNumeracion->getSecuencia(), 7, "0", STR_PAD_LEFT);
                            $intNumeroContrato = $objDatosNumeracion->getNumeracionUno() . "-" . $objDatosNumeracion->getNumeracionDos() . "-" . 
                                                  $intSecuenciaAsig;
                            $entityInfoOrdenTrabajo   = new InfoOrdenTrabajo();

                            if($strCanal === "telcos")
                            {
                                if ($objPtoCliente || $strBanderaAutorizarSol == "S")
                                {
                                   $entityPto = $emComercial->getRepository('schemaBundle:InfoPunto')->find($intIdPtoCliente);
                                   $entityInfoOrdenTrabajo->setPuntoId($entityPto);
                                }    
                            }
                            elseif($strCanal === "extranet" && $intIdPtoCliente !== "") 
                            {
                            
                                $entityPto = $emComercial->getRepository('schemaBundle:InfoPunto')->find($intIdPtoCliente);
                                $entityInfoOrdenTrabajo->setPuntoId($entityPto);
                                
                            }
                            

                            $entityInfoOrdenTrabajo->setTipoOrden("T");
                            $entityInfoOrdenTrabajo->setNumeroOrdenTrabajo($intNumeroContrato);
                            $entityInfoOrdenTrabajo->setFeCreacion(new \DateTime('now'));
                            $entityInfoOrdenTrabajo->setUsrCreacion($strUsuarioCreacion);
                            $entityInfoOrdenTrabajo->setIpCreacion($strIpCreacion);
                            $entityInfoOrdenTrabajo->setOficinaId($intIdOficina);
                            $entityInfoOrdenTrabajo->setEstado('Pendiente');
                            $emComercial->persist($entityInfoOrdenTrabajo);
                            $emComercial->flush();


                            $entityNewInfoServicio->setOrdenTrabajoId($entityInfoOrdenTrabajo);
                            $emComercial->persist($entityNewInfoServicio);
                            $emComercial->flush();

                            if ($entityInfoOrdenTrabajo)
                            {
                                //Actualizo la numeracion en la tabla
                                $intNumeroAct = ($objDatosNumeracion->getSecuencia() + 1);
                                $objDatosNumeracion->setSecuencia($intNumeroAct);
                                $emComercial->persist($objDatosNumeracion);
                                $emComercial->flush();
                            }
                            
                            if($strEsProdWYAp === "SI")
                            {
                                $arrayParamsWyApTrasladoyCRS    = array("objServicioOrigen"     => $objInfoServicioTrasladar,
                                                                        "objServicioDestino"    => $entityNewInfoServicio,
                                                                        "strCodEmpresa"         => $strEmpresaCod,
                                                                        "strUsrCreacion"        => $strUsuarioCreacion,
                                                                        "strIpCreacion"         => $strIpCreacion);
                                $arrayRespuestaWyApTrasladoyCrs = $this->creaSolicitudWyApTrasladoyCRS($arrayParamsWyApTrasladoyCRS);
                                if($arrayRespuestaWyApTrasladoyCrs["status"] === "ERROR")
                                {
                                    throw new \Exception($arrayRespuestaWyApTrasladoyCrs["mensaje"]);
                                }
                                $strCreaCaractTraslado  = $arrayRespuestaWyApTrasladoyCrs["creaCaractTraslado"];
                            }
                            // Crear solicitud para producto Extender Dual Band al trasladar
                            else if($strEsProdEDB === "SI")
                            {
                                $arrayParamsEDBTraslado    = array( "objServicioOrigen"     => $objInfoServicioTrasladar,
                                                                    "objServicioDestino"    => $entityNewInfoServicio,
                                                                    "strCodEmpresa"         => $strEmpresaCod,
                                                                    "strUsrCreacion"        => $strUsuarioCreacion,
                                                                    "strIpCreacion"         => $strIpCreacion);
                                $arrayRespuestaEDBTrasladoyCrs = $this->creaSolicitudEdbTrasladoyCRS($arrayParamsEDBTraslado);
                                if($arrayRespuestaEDBTrasladoyCrs["status"] === "ERROR")
                                {
                                    throw new \Exception($arrayRespuestaEDBTrasladoyCrs["mensaje"]);
                                }
                                $strCreaCaractTraslado          = $arrayRespuestaEDBTrasladoyCrs["creaCaractTraslado"];
                                $strVerifSolCambioOntXExtender  = $arrayRespuestaEDBTrasladoyCrs["verifSolCambioOntXExtender"];
                                if($strVerifSolCambioOntXExtender === "SI")
                                {
                                    $strVerifSolCambioOntXExtenderEnPunto   = "SI";
                                }
                            }
                            else
                            {
                                // Si el servicio es adicional de cableado se le crea el nombre de la solicitud// Validamos el tipo de solicitud
                                $arrayParametroTipos = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('VALIDA_PROD_ADICIONAL', 
                                                                    'COMERCIAL', '',
                                                                    'Solicitud cableado ethernet',
                                                                    '','','','','',$strEmpresaCod);
                                if (is_array($arrayParametroTipos) && !empty($arrayParametroTipos))
                                {
                                    $objCableParametro = $arrayParametroTipos[0];
                                }
                                $strNombreSolicitud = "SOLICITUD PLANIFICACION";
                                if ($objAdmiProducto->getId() == $objCableParametro['valor1']) 
                                {
                                    $strNombreSolicitud = $objCableParametro['valor2'];
                                }
                                $entityTipoSolicitud = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                   ->findOneByDescripcionSolicitud($strNombreSolicitud);

                                $entitySolicitud = new InfoDetalleSolicitud();
                                $entitySolicitud->setServicioId($entityNewInfoServicio);
                                $entitySolicitud->setTipoSolicitudId($entityTipoSolicitud);
                                $entitySolicitud->setEstado($strEstadoServicio);
                                $entitySolicitud->setUsrCreacion($strUsuarioCreacion);
                                $entitySolicitud->setFeCreacion(new \DateTime('now'));

                                $emComercial->persist($entitySolicitud);
                                $emComercial->flush();

                                //GUARDAR INFO DETALLE SOLICITUD HISTORIAL
                                $entityDetalleSolHist = new InfoDetalleSolHist();
                                $entityDetalleSolHist->setDetalleSolicitudId($entitySolicitud);

                                $entityDetalleSolHist->setIpCreacion($strIpCreacion);
                                $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                $entityDetalleSolHist->setUsrCreacion($strUsuarioCreacion);
                                $entityDetalleSolHist->setEstado($strEstadoServicio);

                                $emComercial->persist($entityDetalleSolHist);
                                $emComercial->flush();
                            }
                        }
                        
                        $intIdProducto   = null;
                        if($objInfoServicioTrasladar->getProductoId())
                        {
                            $objAdmiProducto = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                           ->find($objInfoServicioTrasladar->getProductoId());

                            if (is_object($objAdmiProducto))
                            {
                                $intIdProducto = $objAdmiProducto->getId();
                            }
                        }
                        
                        if ($strEstadoServicio == "Activo")
                        {
                            //copiar todas las caracteristicas del servicio reubicado               
                            $serviceProdCaracts = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                               ->findBy(array("servicioId" => $intIdServicioTrasladar,
                                                               "estado" => 'Activo'));

                            foreach ($serviceProdCaracts as $servicioProdCaract)
                            {                            
                                $entityServicioProdCaractCopy = new InfoServicioProdCaract();
                                $entityServicioProdCaractCopy = clone $servicioProdCaract;
                                $entityServicioProdCaractCopy->setServicioId($entityNewInfoServicio->getId());
                                $entityServicioProdCaractCopy->setFeCreacion(new \DateTime('now'));
                                $entityServicioProdCaractCopy->setUsrCreacion($strUsuarioCreacion);

                                $emComercial->persist($entityServicioProdCaractCopy);
                                $emComercial->flush();

                                $arrayProducto = $serviceFoxPremiums->determinarProducto(array('intIdProducto'=>$intIdProducto));
                                if ($arrayProducto['Status'] == 'OK')
                                {
                                    //Verifico si se trata de un servicio Fox_Premium,Paramount, Noggin
                                    $arrayParametrosCaracteristicas = array( 'intIdProducto'        => $intIdProducto, 
                                                                            'strDescCaracteristica' => $arrayProducto['strDescCaracteristica'], 
                                                                            'strEstado'             => 'Activo' );
                                    $strEsFoxPremium = $serviceUtilidad->validarCaracteristicaProducto($arrayParametrosCaracteristicas);
                        
                                    if( !empty($strEsFoxPremium) && $strEsFoxPremium == "S" )
                                    { 
                                        // Paso el valor de la caracteristica 'MIGRADO_XX' a S, ya que el servicio fue clonado o migrado
                                        $arrayParametrosFox = array();
                                        $objRespuestaValidacion = null;
                                        $arrayParametrosFox["strDescripcionCaracteristica"] = $arrayProducto['strMigrar'];
                                        $arrayParametrosFox["strNombreTecnico"]             = $arrayProducto['strNombreTecnico'];
                                        $arrayParametrosFox["intIdServicio"]                = $objInfoServicioTrasladar->getId();
                                        $arrayParametrosFox["intIdServProdCaract"]          = $servicioProdCaract->getId();
                                        $arrayParametrosFox["strEstadoSpc"]                 = 'Activo';
                                        
                                        $objRespuestaServProdCarac = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                                                 ->getCaracteristicaServicio($arrayParametrosFox);
                                        if (is_object($objRespuestaServProdCarac))
                                        {
                                            $servicioProdCaract->setValor('S');
                                        }
                                        // Se procede a Cancelar las caracteristicas de los Servicios Fox, Paramount y Noggin Origen del Traslado
                                        $servicioProdCaract->setEstado('Cancelado');
                                        $servicioProdCaract->setFeUltMod(new \DateTime('now'));
                                        $servicioProdCaract->setUsrUltMod($strUsuarioCreacion);
                                        $emComercial->persist($servicioProdCaract);                           
                                    }
                                }
                            }

                            $objInfoServicioTrasladar->setEstado('Trasladado');

                            $emComercial->persist($objInfoServicioTrasladar);
                            $emComercial->flush();

                            $entityServicioHist = new InfoServicioHistorial();
                            $entityServicioHist->setServicioId($objInfoServicioTrasladar);
                            $entityServicioHist->setObservacion('Se trasladó el servicio');
                            $entityServicioHist->setIpCreacion($strIpCreacion);
                            $entityServicioHist->setFeCreacion(new \DateTime('now'));
                            $entityServicioHist->setUsrCreacion($strUsuarioCreacion);
                            $entityServicioHist->setEstado('Trasladado');
                            $emComercial->persist($entityServicioHist);
                            $emComercial->flush();
                        }
                        else
                        {
                            if ($strPrefijoEmpresa == 'TN')
                            {
                                $strClonaCaracteristicas = "SI";
                                $arrayNombresTecnicosValidar = array('INTMPLS','L3MPLS','INTERNET','INTERNET WIFI', 'INTERNET SMALL BUSINESS', 'IPSB',
                                                                     'TELCOHOME','INTERNET SDWAN');
                                $arrayCaracteristicasValidar = array('CAPACIDAD1','CAPACIDAD2','Zona','Grupo Negocio','ENLACE_DATOS', 'VELOCIDAD',
                                                                     'VELOCIDAD_TELCOHOME','TIPO_ENRUTAMIENTO');
                                                                     
                                $arrayCaracteristicasValidarInternetSafe = array('VELOCIDAD_INTERNET_SAFE','SERVICE-PROFILE');
                                $strDescripcionProducto = $objAdmiProducto->getDescripcionProducto();
                                if($strDescripcionProducto=='INTERNET SAFE')
                                {
                                    $arrayCaracteristicasValidar = array_merge(
                                                                $arrayCaracteristicasValidarInternetSafe, 
                                                                $arrayCaracteristicasValidar);
                                }
                                
                                //copiar las caracteristicas del servicio reubicado               
                                $arrayServProdCaract = $emComercial->getRepository('schemaBundle:InfoServicioProdCaract')
                                                                   ->findBy(array("servicioId" => $intIdServicioTrasladar, 
                                                                                  "estado"     => 'Activo'));

                                foreach ($arrayServProdCaract as $objServicioProdCaract)
                                {
                                    $strClonaCaracteristicas = "SI";
                                    if (in_array($objAdmiProducto->getNombreTecnico(),$arrayNombresTecnicosValidar))
                                    {
                                        $objProdCaract = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                     ->find($objServicioProdCaract->getProductoCaracterisiticaId());
                                        if(is_object($objProdCaract))
                                        {
                                            $objCaract = $objProdCaract->getCaracteristicaId();
                                            if (is_object($objCaract))
                                            {
                                                $strDescripcionCaracteristica = $objCaract->getDescripcionCaracteristica();
                                                if (!in_array($strDescripcionCaracteristica,$arrayCaracteristicasValidar))
                                                {
                                                    $strClonaCaracteristicas = "NO";
                                                }
                                            }
                                        }
                                    }

                                    if($strClonaCaracteristicas == "SI")
                                    {
                                        $objServicioProdCaractCopy = new InfoServicioProdCaract();
                                        $objServicioProdCaractCopy = clone $objServicioProdCaract;
                                        $objServicioProdCaractCopy->setServicioId($entityNewInfoServicio->getId());
                                        $objServicioProdCaractCopy->setFeCreacion(new \DateTime('now'));
                                        $objServicioProdCaractCopy->setUsrCreacion($strUsuarioCreacion);

                                        $emComercial->persist($objServicioProdCaractCopy);
                                        $emComercial->flush();
                                    }
                                    
                                    //Si el servicio que se va a trasladar tiene IP fija y el parametro de ese producto está activado para
                                    //aprovisionamiento con Ip Privada se debe crear la característica para IP Privada
                                                                                       
                                    $objParametroCabIpPrivada = $emGeneral->getRepository('schemaBundle:AdmiParametroCab')
                                                                          ->findOneBy(array('nombreParametro' => 'IP_PRIVADA_FIJA_GPON',
                                                                                            'estado'            => 'Activo'));
                                    if (is_object($objParametroCabIpPrivada))
                                    {
                                        $arrayParDetIpPrivada = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                          ->findBy(array('parametroId'   => $objParametroCabIpPrivada->getId(),
                                                                                         'estado'        => 'Activo'));
                                        if (is_array($arrayParDetIpPrivada) && !empty($arrayParDetIpPrivada))
                                        {
                                            $arrayIpPrivada = explode(",",$arrayParDetIpPrivada[0]->getValor1());
                                        }
                                    }
                    
                                    if(in_array($objInfoServicioTrasladar->getProductoId()->getId(),$arrayIpPrivada))   
                                    {
                                        //buscamos en la info_ip
                                        $objInfoIp = $emComercial->getRepository("schemaBundle:InfoIp")
                                                                 ->findOneBy(array('servicioId' => $objInfoServicioTrasladar->getId()));
                                        if(is_object($objInfoIp) && $objInfoIp->getTipoIp() == 'FIJA')
                                        {
                                            //obtener producto caracteristica del aprovisionamiento de ip Privada
                                            $objCaracteristicaTraslado = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                            ->findOneBy(array("descripcionCaracteristica" => "TIPO_ENRUTAMIENTO", 
                                                                                              "estado" => "Activo"));
                                            
                                            if (is_object($objCaracteristicaTraslado))
                                            {
                                                $objProdCaractTraslado = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                        ->findOneBy(array("productoId"       => $objInfoServicioTrasladar->getProductoId()->getId(), 
                                                                          "caracteristicaId" => $objCaracteristicaTraslado->getId(), 
                                                                          "estado"           => "Activo"));
                                                if (is_object($objProdCaractTraslado))
                                                {
                                                    $intIdProductoCaracteristica = $objProdCaractTraslado->getId();
                                                }
                                            }

                                            //agregamos la característica de Ip privada
                                            $objServicioProdCaractCopy = new InfoServicioProdCaract();
                                            $objServicioProdCaractCopy->setServicioId($entityNewInfoServicio->getId());
                                            $objServicioProdCaractCopy->setFeCreacion(new \DateTime('now'));
                                            $objServicioProdCaractCopy->setUsrCreacion($strUsuarioCreacion);
                                            $objServicioProdCaractCopy->setProductoCaracterisiticaId($intIdProductoCaracteristica);
                                            $objServicioProdCaractCopy->setValor('Privada');
                                            $objServicioProdCaractCopy->setEstado('Activo');
                                            $emComercial->persist($objServicioProdCaractCopy);
                                            $emComercial->flush();
                                        
                                        }
                                    }
                                }
                            }
                        }
                        
                        
                        $objInfoServicioTecnicoTrasladar = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                                    ->findOneByServicioId($intIdServicioTrasladar);
                        
                        
                        if ($objInfoServicioTecnicoTrasladar)
                        {
                            $entityNewInfoServicioTecnico = new InfoServicioTecnico();
                            $entityNewInfoServicioTecnico->setServicioId($entityNewInfoServicio);

                            if ($strPrefijoEmpresa=='MD' || $strPrefijoEmpresa=='EN')
                            {
                                $entityNewInfoServicioTecnico->setUltimaMillaId
                                        ($objInfoServicioTecnicoTrasladar->getUltimaMillaId());
                                $entityNewInfoServicioTecnico->setElementoId
                                        ($objInfoServicioTecnicoTrasladar->getElementoId());
                                $entityNewInfoServicioTecnico->setInterfaceElementoId
                                        ($objInfoServicioTecnicoTrasladar->getInterfaceElementoId());
                                $entityNewInfoServicioTecnico->setElementoConectorId
                                        ($objInfoServicioTecnicoTrasladar->getElementoConectorId());
                                $entityNewInfoServicioTecnico->setInterfaceElementoConectorId
                                        ($objInfoServicioTecnicoTrasladar->getInterfaceElementoConectorId());
                                $entityNewInfoServicioTecnico->setElementoContenedorId
                                        ($objInfoServicioTecnicoTrasladar->getElementoContenedorId());
                                $entityNewInfoServicioTecnico->setElementoClienteId
                                        ($objInfoServicioTecnicoTrasladar->getElementoClienteId());
                                $entityNewInfoServicioTecnico->setInterfaceElementoClienteId
                                        ($objInfoServicioTecnicoTrasladar->getInterfaceElementoClienteId());
                            }
                            else if($strPrefijoEmpresa == 'TN')
                            {
                                if ($strEstadoServicio != "Activo")
                                {
                                    $intIdUmServicioTecnico = $objInfoServicioTecnicoTrasladar->getUltimaMillaId();
                                    if (!empty($intIdUmServicioTecnico))
                                    {
                                        if(is_object($objAdmiProducto) && ($objAdmiProducto->getNombreTecnico() === 'INTERNET SMALL BUSINESS' 
                                            || $objAdmiProducto->getNombreTecnico() === 'IPSB' 
                                            || $objAdmiProducto->getNombreTecnico() === 'TELCOHOME'))
                                        {
                                            $objUltimaMillaFttx = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                                                                    ->findOneBy(array('nombreTipoMedio' => 'FTTx',
                                                                                                      'estado'          => 'Activo' ));
                                            if (!is_object($objUltimaMillaFttx))
                                            {
                                                throw new \Exception("Problemas al recuperar última milla FTTx.");
                                            }
                                            $entityNewInfoServicioTecnico->setUltimaMillaId($objUltimaMillaFttx->getId());
                                        }
                                        else
                                        {
                                            $entityNewInfoServicioTecnico->setUltimaMillaId($objUltimaMillaFo->getId());
                                        }
                                    }
                                    $entityNewInfoServicioTecnico->setTipoEnlace($objInfoServicioTecnicoTrasladar->getTipoEnlace());
                                }
                                else
                                {
                                    $entityNewInfoServicioTecnico->setUltimaMillaId
                                            ($objInfoServicioTecnicoTrasladar->getUltimaMillaId());
                                    $entityNewInfoServicioTecnico->setElementoId
                                            ($objInfoServicioTecnicoTrasladar->getElementoId());
                                    $entityNewInfoServicioTecnico->setInterfaceElementoId
                                            ($objInfoServicioTecnicoTrasladar->getInterfaceElementoId());
                                    $entityNewInfoServicioTecnico->setElementoConectorId
                                            ($objInfoServicioTecnicoTrasladar->getElementoConectorId());
                                    $entityNewInfoServicioTecnico->setInterfaceElementoConectorId
                                            ($objInfoServicioTecnicoTrasladar->getInterfaceElementoConectorId());
                                    $entityNewInfoServicioTecnico->setElementoContenedorId
                                            ($objInfoServicioTecnicoTrasladar->getElementoContenedorId());
                                    $entityNewInfoServicioTecnico->setElementoClienteId($objInfoServicioTecnicoTrasladar->getElementoClienteId());
                                    $entityNewInfoServicioTecnico->setInterfaceElementoClienteId
                                            ($objInfoServicioTecnicoTrasladar->getInterfaceElementoClienteId());
                                }
                                //se agrega a un array el listado de servicios Backups a trasladar para posteriormente enlazarlos a sus principales
                                if ($objInfoServicioTecnicoTrasladar->getTipoEnlace() == "BACKUP")
                                {
                                    $arrayServiciosBackup[] = array("objServicioNuevo"  => $entityNewInfoServicio, 
                                                                    "objServicioOrigen" => $objInfoServicioTrasladar);
                                }
                            }
                            $emComercial->persist($entityNewInfoServicioTecnico);
                            $emComercial->flush();
                        }
                        else
                        {
                            if ($objAdmiProducto->getEsEnlace() == 'SI')
                            {
                                throw new \Exception('No existe Última Milla para el Servicio con Id: ' . $intIdServicioTrasladar);
                            }
                        }
                        
                        
                        if ($strPrefijoEmpresa == 'MD' || $strPrefijoEmpresa == 'EN')
                        {
                            $objProductoRelacionado = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                                  ->findOneBy(array("descripcionProducto" => "INTERNET DEDICADO", 
                                                                                    "empresaCod"          => $strEmpresaCod, 
                                                                                    "estado"              => "Activo"));
                        }
                        else if($strPrefijoEmpresa == 'TN')
                        {
                            $objProductoRelacionado = $objAdmiProducto;
                        }
                        
                        
                        $objCaracteristicaTraslado = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                              ->findOneBy(array("descripcionCaracteristica" => "TRASLADO", "estado" => "Activo"));
                        
                        
                        if (is_object($objProductoRelacionado) && is_object($objCaracteristicaTraslado))
                        {

                            $objProdCaractTrasladoInt = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                 ->findOneBy(array("productoId"       => $objProductoRelacionado->getId(), 
                                                                                   "caracteristicaId" => $objCaracteristicaTraslado->getId(), 
                                                                                   "estado"           => "Activo"));

                            if (is_object($objProdCaractTrasladoInt) && $strCreaCaractTraslado === "SI")
                            {
                                $strEstadoCaractTraslado = "Activo";
                                $entityInfoServProdCaractTraslado = new InfoServicioProdCaract();
                                $entityInfoServProdCaractTraslado->setServicioId
                                        ($entityNewInfoServicio->getId());
                                $entityInfoServProdCaractTraslado->setProductoCaracterisiticaId
                                        ($objProdCaractTrasladoInt->getId());
                                $entityInfoServProdCaractTraslado->setValor($objInfoServicioTrasladar->getId());
                                $entityInfoServProdCaractTraslado->setFeCreacion(new \DateTime('now'));
                                $entityInfoServProdCaractTraslado->setUsrCreacion($strUsuarioCreacion);
                                if ($strEstadoServicio == 'Activo' && $strPrefijoEmpresa == 'TN')
                                {
                                    $strEstadoCaractTraslado = "Eliminado";
                                }
                                $entityInfoServProdCaractTraslado->setEstado($strEstadoCaractTraslado);
                                $emComercial->persist($entityInfoServProdCaractTraslado);
                                $emComercial->flush();
                            }
                            
                            $objProductoIPMP = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                                           ->findOneBy(array("descripcionProducto" => 'I. PROTEGIDO MULTI PAID',
                                                                       "estado" => "Activo"));
                    
                            if(is_object($objProductoIPMP)) 
                            {
                                    
                                $arrayProCaractAntivirus  = array("objServicio"       => $objInfoServicioTrasladar,
                                                                  "objProducto"       => $objProductoIPMP,
                                                                  "strUsrCreacion"    => $strUsuarioCreacion,
                                                                  "strCaracteristica" => "SUSCRIBER_ID");

                                $objSpcSuscriber = $serviceServicioIPMP->obtenerValorServicioProductoCaracteristica($arrayProCaractAntivirus);
                            

                                if(is_object($objSpcSuscriber["objServicioProdCaract"]) &&
                                   $objSpcSuscriber["objServicioProdCaract"]->getEstado() == "Pendiente")
                                {
                                    $entityInfoServProdCaractTraslado = new InfoServicioProdCaract();
                                    $entityInfoServProdCaractTraslado->setServicioId($entityNewInfoServicio->getId());
                                    $entityInfoServProdCaractTraslado->setProductoCaracterisiticaId
                                            ($objSpcSuscriber["objServicioProdCaract"]->getProductoCaracterisiticaId());
                                    $entityInfoServProdCaractTraslado->setValor($objSpcSuscriber["objServicioProdCaract"]->getValor());
                                    $entityInfoServProdCaractTraslado->setFeCreacion(new \DateTime('now'));
                                    $entityInfoServProdCaractTraslado->setUsrCreacion($strUsuarioCreacion);
                                    $entityInfoServProdCaractTraslado->setEstado($objSpcSuscriber["objServicioProdCaract"]->getEstado());
                                    $emComercial->persist($entityInfoServProdCaractTraslado);
                                    $emComercial->flush(); 
                                }                         
                            }
                        }
                        
                        //crear solicitud de traslado para servicios TN con la cual se generará la facturación respectiva del traslado
                        if($strPrefijoEmpresa == 'TN' && $strEstadoServicio == "Pre-servicio" && $strBanderaPrimerServicio == "SI")
                        {
                            //Se actualiza el estado a Pendiente cuando viene del flujo de autorizacion de traslado
                            if($strBanderaAutorizarSol == "S")
                            {
                                $objSolicitudTraslado = $emComercial->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                    ->find($intIdDetalleSolicitud);
                                
                                if(is_object($objSolicitudTraslado))
                                {
                                    if(!empty($intIdMotivo))
                                    {
                                        $objMotivo = $emGeneral->getRepository('schemaBundle:AdmiMotivo')->find(intval($intIdMotivo));
                                    }
                                    if(!empty($objMotivo) && is_object($objMotivo))
                                    {
                                        $objSolicitudTraslado->setMotivoId($objMotivo->getId());
                                    }
                                    $objSolicitudTraslado->setEstado("Pendiente");
                                    $emComercial->persist($objSolicitudTraslado);
                                    $emComercial->flush();

                                    $strDescripcionTraslado = "La solicitud de traslado fue autorizada";

                                    //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                                    $objDetalleSolHist = new InfoDetalleSolHist();
                                    $objDetalleSolHist->setDetalleSolicitudId($objSolicitudTraslado);
                                    $objDetalleSolHist->setObservacion($strDescripcionTraslado);
                                    $objDetalleSolHist->setIpCreacion($strIpCreacion);
                                    $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                    $objDetalleSolHist->setUsrCreacion($strUsuarioCreacion);
                                    $objDetalleSolHist->setEstado("Pendiente");
                                    $emComercial->persist($objDetalleSolHist);
                                    $emComercial->flush();
                                    $strBanderaPrimerServicio = "NO";
                                }
                            }
                            else
                            {
                                $objTipoSolicitud = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                                ->findOneByDescripcionSolicitud("SOLICITUD TRASLADO");

                                $objSolicitud = new InfoDetalleSolicitud();
                                $objSolicitud->setServicioId($entityNewInfoServicio);
                                $objSolicitud->setTipoSolicitudId($objTipoSolicitud);
                                $objSolicitud->setEstado("Pendiente");
                                if(!empty($intIdMotivo))
                                {
                                    $objMotivo = $emGeneral->getRepository('schemaBundle:AdmiMotivo')->find(intval($intIdMotivo));
                                }
                                if(!empty($objMotivo) && is_object($objMotivo))
                                {
                                    $objSolicitud->setMotivoId($objMotivo->getId());
                                }
                                $objSolicitud->setUsrCreacion($strUsuarioCreacion);
                                $objSolicitud->setFeCreacion(new \DateTime('now'));
                                $objSolicitud->setPrecioDescuento($strPrecioTraslado);
                                $objSolicitud->setObservacion($strDescripcionTraslado);
                                $emComercial->persist($objSolicitud);
                                $emComercial->flush();

                                //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
                                $objDetalleSolHist = new InfoDetalleSolHist();
                                $objDetalleSolHist->setDetalleSolicitudId($objSolicitud);
                                $objDetalleSolHist->setObservacion($strDescripcionTraslado);
                                $objDetalleSolHist->setIpCreacion($strIpCreacion);
                                $objDetalleSolHist->setFeCreacion(new \DateTime('now'));
                                $objDetalleSolHist->setUsrCreacion($strUsuarioCreacion);
                                $objDetalleSolHist->setEstado("Pendiente");

                                $emComercial->persist($objDetalleSolHist);
                                $emComercial->flush();
                                $strBanderaPrimerServicio = "NO";

                                //SE OBTIENE LA CARACTERISTICA ID_PUNTO
                                $arrayCaracteristicasParametros = array('estado'                    => "Activo",
                                                                        'descripcionCaracteristica' => "ID_PUNTO");
                                $objCaracteristicaIdPunto = $emComercial->getRepository("schemaBundle:AdmiCaracteristica")
                                                                        ->findOneBy( $arrayCaracteristicasParametros );

                                if( is_object($objCaracteristicaIdPunto) )
                                {
                                    $objDetalleSolCaracteristica = new InfoDetalleSolCaract();
                                    $objDetalleSolCaracteristica->setCaracteristicaId($objCaracteristicaIdPunto);
                                    $objDetalleSolCaracteristica->setDetalleSolicitudId($objSolicitud);
                                    $objDetalleSolCaracteristica->setEstado('Pendiente');
                                    $objDetalleSolCaracteristica->setFeCreacion(new \DateTime('now'));
                                    $objDetalleSolCaracteristica->setUsrCreacion($strUsuarioCreacion);
                                    $objDetalleSolCaracteristica->setValor($objInfoPunto->getId());
                                    $emComercial->persist($objDetalleSolCaracteristica);
                                    $emComercial->flush();
                                }
                            }
                        }
                        
                        if ($strPrefijoEmpresa == "TN" && $strEstadoServicio == "Activo")
                        {
                            $serviceServicioTecnico->generarLoginAuxiliar($entityNewInfoServicio->getId());
                        }
                        
                    }
                       
                    
                }
                else
                {
                    throw new \Exception('No existe Servicio a Trasladar. Id: ' . $intIdServicioTrasladar);
                }
                    
            }

            if($strVerifSolCambioOntXExtenderEnPunto === "SI" 
                && is_object($objServicioPlanOrigenEnPunto) && is_object($objServicioPlanDestinoEnPunto) )
            {
                $strValorCaractMotivoCambioOnt  = "CAMBIO ONT POR AGREGAR EXTENDER";
                $arrayCreaSolCambioOntTraslado  = $this->creaSolicitudCambioOntTraslado(
                                                                        array(  "objServicioPlanOrigenEnPunto"  => $objServicioPlanOrigenEnPunto,
                                                                                "objServicioPlanDestinoEnPunto" => $objServicioPlanDestinoEnPunto,
                                                                                "strValorCaractMotivoCambioOnt" => $strValorCaractMotivoCambioOnt,
                                                                                "strCodEmpresa"                 => $strEmpresaCod,
                                                                                "strUsrCreacion"                => $strUsuarioCreacion,
                                                                                "strIpCreacion"                 => $strIpCreacion));
                if($arrayCreaSolCambioOntTraslado["status"] === "ERROR")
                {
                    throw new \Exception($arrayCreaSolCambioOntTraslado["mensaje"]);
                }
            }
            
            $emComercial->getConnection()->commit();
            
            if($strPrefijoEmpresa == 'TN')
            {
                //Enlazar servicio backup para empresa TN
                foreach ($arrayServiciosBackup as $arrayServicioBackup)
                {
                    //SE PROCEDE A BUSCAR SERVICIO PRINCIPAL DEL BACKUP ORIGEN DEL TRASLADO
                    $objServOrigenTraslado = $arrayServicioBackup['objServicioOrigen'];
                    $objServNuevoTraslado  = $arrayServicioBackup['objServicioNuevo'];
                    $objServCaractBackup   = $serviceServicioTecnico->getServicioProductoCaracteristica($objServOrigenTraslado,
                                                                                                        'ES_BACKUP',
                                                                                                        $objServOrigenTraslado->getProductoId());
                    $objProductoOrigenTraslado = $objServOrigenTraslado->getProductoId();
                    $objProdCaractTrasladoInt     = null;
                    if (is_object($objServCaractBackup))
                    {
                        //ID DE SERVICIO PRINCIPAL EN ORIGEN DE TRASLADO
                        $strIdServicioOrigPrincipal = $objServCaractBackup->getValor();
                        //RECUPERAR PRODUCTO CARACTERISTICA TRASLADO
                        if (is_object($objProductoOrigenTraslado) && is_object($objCaracteristicaTraslado))
                        {

                            $objProdCaractTrasladoInt = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                 ->findOneBy(array("productoId"       => $objProductoOrigenTraslado->getId(), 
                                                                                   "caracteristicaId" => $objCaracteristicaTraslado->getId(), 
                                                                                   "estado"           => "Activo"));
                        }
                        //SE VALIDA SI ES UN OBJETO LA CARACTERISTICA DE TRASLADO RELACIONADA CON EL PRODUCTO
                        if (is_object($objProdCaractTrasladoInt))
                        {
                            $objProdCaractTrasNuevoPrin = $emComercial
                                                          ->getRepository('schemaBundle:InfoServicioProdCaract')
                                                          ->findOneBy(array('valor'                     => $strIdServicioOrigPrincipal,
                                                                            'productoCaracterisiticaId' => $objProdCaractTrasladoInt->getId(),
                                                                            'estado'                    => 'Activo'),
                                                                      array('id' => 'DESC'));
                            if (is_object($objProdCaractTrasNuevoPrin))
                            {
                                //ID DE SERVICIO PRINCIPAL, PADRE DEL BACKUP PROCESADO EN ESTA ITERACIÓN DEL FOREACH
                                $strIdServicioPrincipalNuevo = $objProdCaractTrasNuevoPrin->getServicioId();
                                //SE CREA CARACTERISTICA ES_BACKUP PARA ENLAZAR SERVICIOS BACKUP TRASLADADOS CON SUS SERVICIOS PRINCIPALES
                                //GRABAMOS ES_BACKUP
                                $serviceServicioTecnico->ingresarServicioProductoCaracteristica( $objServNuevoTraslado, 
                                                                                                 $objServNuevoTraslado->getProductoId(), 
                                                                                                 "ES_BACKUP", 
                                                                                                 $strIdServicioPrincipalNuevo, 
                                                                                                 $strUsuarioCreacion );
                            }
                        }
                    }
                }
            }
            
            
            //Se envia notificacion al usuario creador de la solicitud de traslado con autorizacion
            if($strBanderaAutorizarSol == "S")
            {
                if(is_object($objSolicitudTraslado))
                {
                    //Se obtiene el id_persona del usuario
                    $objInfoPersona = $emComercial->getRepository('schemaBundle:InfoPersona')
                                                  ->findOneBy(array("login" => $objSolicitudTraslado->getUsrCreacion()));

                    if(is_object($objInfoPersona))
                    {
                        $intIdCreadorTraslado = $objInfoPersona->getId();
                    }

                    $intDetalleSolicitudId = $objSolicitudTraslado->getId();
                }

                //Se obtiene el departamento que autorizó - COBRANZAS
                $arrayValoresParametros = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('PARAMETROS PROYECTO TRASLADO',
                                                             'COMERCIAL',
                                                             'TRASLADO',
                                                             'DEPARTAMENTO DE COBRANZAS',
                                                             '',
                                                             '',
                                                             '',
                                                             '',
                                                             '',
                                                             '');

                if(isset($arrayValoresParametros["valor1"]) && !empty($arrayValoresParametros["valor1"]))
                {
                    $strIdDepartamento = $arrayValoresParametros["valor1"];
                }

                //Consulta la caracteristica para ID_PUNTO
                $objCaractIdPunto = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                ->findOneBy(array("descripcionCaracteristica" => 'ID_PUNTO',
                                                                  "estado"                    => "Activo"));

                if(is_object($objCaractIdPunto))
                {
                    $objInfoDetalleSolCaract = $emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                 ->findOneBy(array("detalleSolicitudId" => $intDetalleSolicitudId,
                                                                                   "caracteristicaId"   => $objCaractIdPunto->getId()));
                    if(is_object($objInfoDetalleSolCaract))
                    {
                        $strIdPuntoDestino = $objInfoDetalleSolCaract->getValor();

                        $objInfoPuntoDestino = $emComercial->getRepository('schemaBundle:InfoPunto')->find($strIdPuntoDestino);

                        if(is_object($objInfoPuntoDestino))
                        {
                            $strLoginDestino = $objInfoPuntoDestino->getLogin();
                        }
                    }
                }


                //Consulta la caracteristica para REGION
                $objCaractRegion = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                               ->findOneBy(array("descripcionCaracteristica" => 'REGION',
                                                                 "estado"                    => "Activo"));
                if(is_object($objCaractRegion))
                {
                    $objInfoDetalleSolCaract = $emComercial->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                 ->findOneBy(array("detalleSolicitudId" => $intDetalleSolicitudId,
                                                                                   "caracteristicaId"   => $objCaractRegion->getId()));
                    if(is_object($objInfoDetalleSolCaract))
                    {
                        $strRegionDestino = $objInfoDetalleSolCaract->getValor();

                        if($strRegionDestino == "R1")
                        {
                            $strParametroCiudad = "GYE";
                            $strCanton          = "CANTON_DEMO_GYE";
                        }
                        elseif($strRegionDestino == "R2")
                        {
                            $strParametroCiudad = "UIO";
                            $strCanton          = "CANTON_DEMO_UIO";
                        }

                        //Se obtiene el canton a notificar
                        $arrayValorCanton = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                              ->getOne('PARAMETROS PROYECTO DEMOS',
                                                                       'COMERCIAL',
                                                                       'DEMOS',
                                                                       $strCanton,
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       '',
                                                                       '');

                        if(isset($arrayValorCanton["valor1"]) && !empty($arrayValorCanton["valor1"]))
                        {
                            $strCiudadDestino = $arrayValorCanton["valor1"];
                        }
                    }
                }

                //Se obtiene los correos del departamento de Ventas que se necesita notificar
                $arrayValoresParametros = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->getOne('PARAMETROS PROYECTO TRASLADO',
                                                             'COMERCIAL',
                                                             'TRASLADO',
                                                             'CORREOS_VENTAS_'.$strParametroCiudad,
                                                             '',
                                                             '',
                                                             '',
                                                             '',
                                                             '',
                                                             '');

                if(isset($arrayValoresParametros["valor1"]) && !empty($arrayValoresParametros["valor1"]))
                {
                    $arrayTo[] = $arrayValoresParametros["valor1"];
                    $arrayTo[] = $arrayValoresParametros["valor2"];
                }

                //Se obtiene la forma de contacto Correo Electronico
                $objFormaContacto = $emComercial->getRepository("schemaBundle:AdmiFormaContacto")
                                                ->findOneBy(array('descripcionFormaContacto' => 'Correo Electronico',
                                                                  'estado'                   => 'Activo'));

                if(is_object($objFormaContacto))
                {
                    $intFormaContacto = $objFormaContacto->getId();
                }

                //**************************************************Se envia notificación************************************************//
                //Se obtiene el correo electronico del usuario creador de la solicitud de traslado
                $objInfoPersonaFormaContacto = $emComercial->getRepository('schemaBundle:InfoPersonaFormaContacto')
                                                           ->findOneBy(array('personaId'       => $intIdCreadorTraslado,
                                                                             'formaContactoId' => $intFormaContacto,
                                                                             'estado'          => "Activo"));

                if($objInfoPersonaFormaContacto)
                {
                    $arrayTo[] = $objInfoPersonaFormaContacto->getValor(); //Correo Persona Asignada
                }

                $strAsunto = "SE AUTORIZÓ SOLICITUD DE TRASLADO - Login: ".$strLoginDestino;

                $arrayParametrosCorreo = array('numeroSolicitud' => $intDetalleSolicitudId,
                                               'puntoDestino'    => $strLoginDestino,
                                               'empresa'         => $strPrefijoEmpresa);

                $serviceEnviarPlantilla->generarEnvioPlantilla($strAsunto,
                                                              $arrayTo,
                                                              'AUT_TRASLADO',
                                                              $arrayParametrosCorreo,
                                                              $strEmpresaCod,
                                                              $strCiudadDestino,
                                                              $strIdDepartamento);

                //**************************************************Se envia notificación************************************************//

                $arrayRespuesta['strStatus'] = "OK";
                $arrayRespuesta['strMensaje'] = "Solicitud de traslado fue autorizada con éxito";
            } 
            
            
            if($strCanal == "extranet")
            {
                $arrayRespuesta['strStatus'] = "OK";
                $arrayRespuesta['strMensaje'] = "Solicitud de traslado fue autorizada con éxito";
                
            }
            
            
            if($strPrefijoEmpresa == 'MD' && $strTipoProceso == 'continuo')
            {
                //$intIdPtoTraslado
                $objInfoPuntoCaracEstado  = null;

                $objCaracEstadoProceso = $emGeneral->getRepository("schemaBundle:AdmiCaracteristica")
                                                        ->findOneBy(
                                                            array(
                                                                "descripcionCaracteristica" => 'ESTADO_PROCESO_PUNTO',
                                                                "estado"                    => 'Activo'
                                                            )
                                                        );
                if(!is_object($objCaracEstadoProceso))
                {
                    throw new \Exception("Error: Hubo un error al obtener la característica ESTADO_PROCESO_PUNTO.");
                }

                if (!empty($objCaracEstadoProceso) && is_object($objCaracEstadoProceso))
                {

                    $objInfoPuntoCaracEstado  = $emComercial->getRepository('schemaBundle:InfoPuntoCaracteristica')
                                                                ->findOneBy(
                                                                    array(
                                                                        'puntoId'          => $intIdPtoCliente,
                                                                        'caracteristicaId' => $objCaracEstadoProceso->getId()
                                                                    )
                                                                );
                }

                if(!empty($objInfoPuntoCaracEstado) && is_object($objInfoPuntoCaracEstado))
                {
                    $objInfoPuntoCaracEstado->setValor('Finalizado');
                    $objInfoPuntoCaracEstado->setFeUltMod(new \DateTime('now'));
                    $objInfoPuntoCaracEstado->setUsrUltMod($strUsuarioCreacion);
                    $emComercial->persist($objInfoPuntoCaracEstado);
                    $emComercial->flush();
                }
                
             

                //GENERACION DE TAREA AUTOMATICA DE CIERRE
            $intIdPersonaEmpresaRol = $objSession->get('idPersonaEmpresaRol');
            $arrayParametrosCierreTarea = array();
            $arrayParametrosCierreTarea['intIdPuntoDestino']      = $objPtoClienteDestino['id'];
            $arrayParametrosCierreTarea['strIpCreacion']          = $strIp;
            $arrayParametrosCierreTarea['strUsrCreacion']         = $strUsuarioCreacion;
            $arrayParametrosCierreTarea['strEmpresaCod']          = $strEmpresaCod;
            $arrayParametrosCierreTarea['intIdPersonaEmpresaRol'] = $intIdPersonaEmpresaRol;
            $arrayParametrosCierreTarea['arrayServicios'] = $arrayServicios;
            $this->generaTareasCierrePuntoOrigen($arrayParametrosCierreTarea);
            }

            if($strCanal=='telcos' && $strPrefijoEmpresa == 'MD')
            {
                $objCaracteristica = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                     ->findOneBy(array('descripcionCaracteristica' => 'TIPO_ORIGEN_TRASLADO',
                                                       'tipo'                      => 'COMERCIAL',
                                                       'estado'                    => 'Activo'));
                    if(!is_object($objCaracteristica))
                    {
                        throw new \Exception("Error: Hubo un error al obtener la característica TIPO_ORIGEN_TRASLADO.");
                    }
                    $arrayRespuestaServInternetValido   = $this->servicioTecnico
                    ->obtieneServicioInternetValido(array(   "intIdPunto"    => 
                                                             $objPtoClienteDestino['id'],
                                                             "strCodEmpresa" => 
                                                             $strEmpresaCod,
                                                             "omiteEstadoPunto"=>"SI"
                                                       ));
                    $strStatusServInternetValido    = $arrayRespuestaServInternetValido["status"];
                    $objServicioInternetValido      = $arrayRespuestaServInternetValido["objServicioInternet"];
                    if($strStatusServInternetValido === "OK" && !is_object($objServicioInternetValido))
                    {
                    throw new \Exception('No se econtro en el nuevo punto  un Servicio de Internet trasladado');
                    
                    }

                  
                    $objInfoServicioCaracteristica = new InfoServicioCaracteristica();
                    $objInfoServicioCaracteristica->setServicioId($objServicioInternetValido);
                    $objInfoServicioCaracteristica->setCaracteristicaId($objCaracteristica);
                    $objInfoServicioCaracteristica->setEstado("Activo");
                    $objInfoServicioCaracteristica->setObservacion('Registro tipo de origen traslado por el cual se realizo el traslado');
                    $objInfoServicioCaracteristica->setUsrCreacion($strUsuarioCreacion);
                    $objInfoServicioCaracteristica->setFeCreacion(new \DateTime('now'));
                    $objInfoServicioCaracteristica->setIpCreacion($strIp);
                    $objInfoServicioCaracteristica->setValor('WEB');
                    $emComercial->persist($objInfoServicioCaracteristica);
                    $emComercial->flush();
            }
            
        } 
        catch (\Exception $e) 
        {
            
            $arrayRespuesta['strStatus']  = "ERROR";
            $arrayRespuesta['strMensaje'] = $e->getMessage();
                     

            $serviceUtil->insertError( 'Telcos+',
                                       'ComercialBundle.InfoServicioService.trasladarServiciosPunto',
                                       $e->getMessage(),
                                       $strUsuarioCreacion,
                                       $strIpCreacion);

            $emComercial->getConnection()->rollback();
           
            return $arrayRespuesta;
            
        }
        
        return $arrayRespuesta;
        
    }
   
    /**
     * Función que procesa la obtención del nombre del servicio
     *       
     * @param objeto $objInfoServicio
     * 
     * @author Ivan Mata<imata@telconet.ec>
     * @version 1.0 12-03-2021 
     *
     *  @return String Nombre del Servicio.
     */
    public function obtenerNombreServicios($objInfoServicio)
    {
        if($objInfoServicio)
        {
            $entityInfoPlan = $objInfoServicio->getPlanId();

            if($entityInfoPlan)
            {
                return $entityInfoPlan->getNombrePlan();
            }
            else
            {
                $entityAdmiProducto = $objInfoServicio->getProductoId();
                if($entityAdmiProducto)
                {
                    return $entityAdmiProducto->getDescripcionProducto();
                }
            }
        }
        return "";
    }

    /**
     * Función que cancelara la tarea sociada a la solicitud cuando se realice los traslados del servicio
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.0 22-04-2021
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.1 31-08-2021 - Se agrega parametro para obtencion de idTarea
     *
     * @author Emmanuel Martillo <emartillo@telconet.ec>
     * @version 1.2 19-10-2022 - Se agrega parametrizacion de  los productos NetlifeCam y Cancelacion de tareas.
     * @param objeto $objDatosSolicitud
     */
    public function cancelarTareaSolicitud($arrayDatosCancelar)
    {
        $objSolicitud      = $arrayDatosCancelar['objSolicitud'];
        $strObservacion    = $arrayDatosCancelar['strObservacion'];
        $strEstadoTarea    = $arrayDatosCancelar['strEstadoTarea'];
        $strUsuCreacion    = $arrayDatosCancelar['strUsuCreacion'];
        $strIpCreacion     = $arrayDatosCancelar['strIpCreacion'];
        $intIdPersonaRol   = $arrayDatosCancelar['intIdPersonaRol'];
        $intIdDepartamento = $arrayDatosCancelar['intIdDepartamento'];
        $intCodEmpresa     = $arrayDatosCancelar['intCodEmpresa'];
        $emGeneral         = $this->emgen;
        $emComercial       = $this->emcom;
        $emSoporteR        = $this->emSoporte;
        $arrayParamProducNetCam   = $this->serviceGeneral->paramProductosNetlifeCam();
        $strNomTecNetlife  = is_object($objSolicitud->getServicioId()->getProductoId()) ? 
                            $objSolicitud->getServicioId()->getProductoId()->getNombreTecnico() : null;
        $strEstadoNetlife  = $objSolicitud->getServicioId()->getEstado();
        if(in_array($strNomTecNetlife,$arrayParamProducNetCam))
        {
            $objTareaNet       = $arrayDatosCancelar['arraySolNet'];
            // Obtenemos la infoDetalle a traves de su solicitud y su tarea
            $arrayParamValores = $objTareaNet;
            if(is_object($objTareaNet))
            {
                $objInfoDetNet     = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')->findOneBy(
                    array("detalleSolicitudId" => $objSolicitud->getId()));
                $objInfoTarNet     = $this->emSoporte->getRepository('schemaBundle:InfoTarea')->findOneBy(
                                array("detalleId" => $objInfoDetNet->getId()));
            }
        }
        else
        {
            // Obtenemos la infoDetalle a traves de su solicitud y su tarea
        $objTipoSolicitud = $objSolicitud->getTipoSolicitudId();
        $arrayParamValores = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                    ->get('PRODUCTOS ADICIONALES MANUALES',
                                          'COMERCIAL','',
                                          'Listado de tareas asociadas a la solicitud',
                                          $objTipoSolicitud->getId(),
                                          $objTipoSolicitud->getDescripcionSolicitud(),
                                          '','','',$intCodEmpresa);
        }
        
        if(isset($arrayParamValores) && !empty($arrayParamValores))
        {
            $arrayDatos = $arrayParamValores[0];
            $intIdTarea = $arrayDatos["valor4"];
            $objInfoDetalle = $this->emSoporte->getRepository('schemaBundle:InfoDetalle')
                                        ->getOneDetalleByDetalleSolicitudTarea($objSolicitud->getId(),
                                                                               $intIdTarea);
            if (is_object($objInfoDetalle) && !empty($objInfoDetalle))
            {
                // Insertar en la detalle historial (INFO_DETALLE_HISTORIAL)
                $entityInfoDetalleHist = new InfoDetalleHistorial();
                $entityInfoDetalleHist->setDetalleId($objInfoDetalle);
                $entityInfoDetalleHist->setObservacion($strObservacion);
                $entityInfoDetalleHist->setEstado($strEstadoTarea);
                $entityInfoDetalleHist->setUsrCreacion($strUsuCreacion);
                $entityInfoDetalleHist->setFeCreacion(new \DateTime('now'));
                $entityInfoDetalleHist->setIpCreacion($strIpCreacion);
                $entityInfoDetalleHist->setPersonaEmpresaRolId($intIdPersonaRol);
                $entityInfoDetalleHist->setDepartamentoOrigenId($intIdDepartamento);
                $entityInfoDetalleHist->setDepartamentoDestinoId($intIdDepartamento);
                $entityInfoDetalleHist->setAccion($strEstadoTarea);
                $this->emSoporte->persist($entityInfoDetalleHist);
                $this->emSoporte->flush();
                // Insertar en la de seguiento (info_tarea_seguimiento)
                $entityInfoTareaSegui = new InfoTareaSeguimiento();
                $entityInfoTareaSegui->setDetalleId($objInfoDetalle->getId());
                $entityInfoTareaSegui->setObservacion("Tarea fue ".$strEstadoTarea." , Obs : ".$strObservacion);
                $entityInfoTareaSegui->setUsrCreacion($strUsuCreacion);
                $entityInfoTareaSegui->setFeCreacion(new \DateTime('now'));
                $entityInfoTareaSegui->setEmpresaCod($intCodEmpresa);
                $entityInfoTareaSegui->setEstadoTarea($strEstadoTarea);
                $entityInfoTareaSegui->setInterno("N");
                $entityInfoTareaSegui->setDepartamentoId($intIdDepartamento);
                $entityInfoTareaSegui->setPersonaEmpresaRolId($intIdPersonaRol);
                $this->emSoporte->persist($entityInfoTareaSegui);
                $this->emSoporte->flush();
            }
            if (in_array($strNomTecNetlife,$arrayParamProducNetCam))
            {
                $entityInfoDetalleHist->setEstado('Cancelada');
                $this->emSoporte->persist($entityInfoDetalleHist);
                $this->emSoporte->flush();
                if(is_object($objTareaNet))
                {
                    $objInfoTarNet->setEstado('Cancelada');
                    $this->emSoporte->persist($objInfoTarNet);
                    $this->emSoporte->flush();
                }
            }
        }
    }
            
    /**
     * Método usado para crear la solicitud de agregar equipo asociada al servicio de Internet destino para realizar un cambio de ont 
     * tomando en cuenta el servicio origen
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 22-04-2021
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 31-01-2021 Se modifican los nombres de las variables ya que la función se usará para cambio a ont para extender Hw y Zte
     *                         y se elimina obtención del parámetro strValorCaractTipoOntNuevo para permitir Extender para ZTE
     * 
     * @param array $arrayParametros [
     *                                  "objServicioPlanOrigenEnPunto"      => objeto del servicio origen asociado a un plan
     *                                  "objServicioPlanDestinoEnPunto"     => objeto del servicio destino asociado a un plan
     *                                  "strOpcion"                         => opción desde la cual se está ejecutando la función
     *                                  "strValorCaractMotivoCambioOnt"     => motivo por el cual se necesita un cambio de ont
     *                                  "strCodEmpresa"                     =>  id de la empresa,
     *                                  "strUsrCreacion"                    => usuario de creación
     *                                  "strIpCreacion"                     => ip de creación
     *                               ]
     * @return array $arrayRespuesta [
     *                                  "status"    => OK o ERROR
     *                                  "mensaje"   => Mensaje de error
     *                               ]
     * 
     */
    public function creaSolicitudCambioOntTraslado($arrayParametros)
    {
        $objServicioPlanOrigenEnPunto   = $arrayParametros["objServicioPlanOrigenEnPunto"];
        $objServicioPlanDestinoEnPunto  = $arrayParametros["objServicioPlanDestinoEnPunto"];
        $strCodEmpresa                  = $arrayParametros["strCodEmpresa"];
        $strUsrCreacion                 = $arrayParametros["strUsrCreacion"];
        $strIpCreacion                  = $arrayParametros["strIpCreacion"];
        $strOpcion                      = $arrayParametros["strOpcion"] ? $arrayParametros["strOpcion"] : "traslado de servicio";
        $strValorCaractMotivoCambioOnt  = $arrayParametros["strValorCaractMotivoCambioOnt"];
        $strMensaje                     = "";
        try
        {
            if(!is_object($objServicioPlanOrigenEnPunto) || !is_object($objServicioPlanDestinoEnPunto))
            {
                throw new \Exception("No se han enviado correctamente los servicios origen y destino para crear la "
                                     ."solicitud que permite el cambio de CPE ONT");
            }
            
            $arrayRespVerifSolCambioDeOntXExtender  = $this->servicioTecnico
                                                           ->verificaSolCambioDeOntPorServicioExtender(array(
                                                                                                        "intIdServicioInternet" => 
                                                                                                        $objServicioPlanOrigenEnPunto->getId(),
                                                                                                        "strCodEmpresa"         => 
                                                                                                        $strCodEmpresa,
                                                                                                        "strMotivoCambioOnt"    => 
                                                                                                        $strValorCaractMotivoCambioOnt));
            $strObtieneSolCambioOntParaExtAbiertaOrigen         = $arrayRespVerifSolCambioDeOntXExtender["strObtieneSolAgregarEquipoCambioOnt"];
            $objSolCambioOntParaExtAbiertaOrigen                = $arrayRespVerifSolCambioDeOntXExtender["objSolAgregarEquipoCambioOnt"];
            $strTipoOntNuevoSolCambioOntParaExtAbiertaOrigen    = $arrayRespVerifSolCambioDeOntXExtender["strTipoOntNuevoSolAgregarEquipoCambioOnt"];
            if($strObtieneSolCambioOntParaExtAbiertaOrigen === "SI" && is_object($objSolCambioOntParaExtAbiertaOrigen))
            {
                $objServicioTecnicoInternetOrigen   = $this->emCome->getRepository('schemaBundle:InfoServicioTecnico')
                                                                   ->findOneByServicioId($objServicioPlanOrigenEnPunto->getId());
                if(!is_object($objServicioTecnicoInternetOrigen))
                {
                    throw new \Exception("No se ha podido obtener el servicio técnico del Internet origen");
                }
                $intIdElementoClienteOrigen = $objServicioTecnicoInternetOrigen->getElementoClienteId();
                //Se crea la solicitud asociada al servicio destino
                $arrayRespuestaCrearSolCambioOntParaExtDestino  = $this->servicioTecnico
                                                               ->crearSolAutomaticaAgregarEquipoDualBand(
                                                                        array(  "objServicio"                   => $objServicioPlanDestinoEnPunto,
                                                                                "strCambioOnt"                  => "SI",
                                                                                "strMotivoCambioOnt"            => $strValorCaractMotivoCambioOnt,
                                                                                "strTipoOntNuevo"               => 
                                                                                $strTipoOntNuevoSolCambioOntParaExtAbiertaOrigen,
                                                                                "intIdElementoCliente"          => $intIdElementoClienteOrigen,
                                                                                "strEstadoSolicitud"            => "PrePlanificada",
                                                                                "strObservacionAdicServicio"    => " por ".$strOpcion,
                                                                                "strUsrCreacion"                => $strUsrCreacion,
                                                                                "strIpCreacion"                 => $strIpCreacion));
                if($arrayRespuestaCrearSolCambioOntParaExtDestino['status'] === "ERROR")
                {
                    throw new \Exception($arrayRespuestaCrearSolCambioOntParaExtDestino["mensaje"]);
                }
                
                $arrayCaractsSolCambioOntParaExtAbiertaOrigen = $this->emCome->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                     ->findBy(array(  "detalleSolicitudId" => 
                                                                                      $objSolCambioOntParaExtAbiertaOrigen->getId()));
                //Si existe una caracteristica de solicitud abierta
                if(isset($arrayCaractsSolCambioOntParaExtAbiertaOrigen) && !empty($arrayCaractsSolCambioOntParaExtAbiertaOrigen))
                {
                    foreach($arrayCaractsSolCambioOntParaExtAbiertaOrigen as $objCaractSolCambioOntParaExtAbiertaOrigen)
                    {
                        //cierra Detalle de la solicitud de la caracteristica origen
                        $objCaractSolCambioOntParaExtAbiertaOrigen->setEstado("Finalizada");
                        $objCaractSolCambioOntParaExtAbiertaOrigen->setUsrUltMod($strUsrCreacion);
                        $objCaractSolCambioOntParaExtAbiertaOrigen->setFeUltMod(new \DateTime('now'));
                        $this->emCome->persist($objCaractSolCambioOntParaExtAbiertaOrigen);
                        $this->emCome->flush();
                    }
                }
                
                $objSolCambioOntParaExtAbiertaOrigen->setEstado("Finalizada");
                $this->emCome->persist($objSolCambioOntParaExtAbiertaOrigen);
                $this->emCome->flush();

                $objDetSolHistAgregarEquipoOrigen = new InfoDetalleSolHist();
                $objDetSolHistAgregarEquipoOrigen->setDetalleSolicitudId($objSolCambioOntParaExtAbiertaOrigen);
                $objDetSolHistAgregarEquipoOrigen->setEstado($objSolCambioOntParaExtAbiertaOrigen->getEstado());
                $objDetSolHistAgregarEquipoOrigen->setObservacion("Se finaliza SOLICITUD AGREGAR EQUIPO por ".$strOpcion);
                $objDetSolHistAgregarEquipoOrigen->setUsrCreacion($strUsrCreacion);
                $objDetSolHistAgregarEquipoOrigen->setFeCreacion(new \DateTime('now'));
                $objDetSolHistAgregarEquipoOrigen->setIpCreacion($strIpCreacion);
                $this->emCome->persist($objDetSolHistAgregarEquipoOrigen);
                $this->emCome->flush();
                
                $objServicioHistorialOrigen = new InfoServicioHistorial();
                $objServicioHistorialOrigen->setServicioId($objServicioPlanOrigenEnPunto);
                $objServicioHistorialOrigen->setObservacion("Se finaliza la SOLICITUD AGREGAR EQUIPO #".$objSolCambioOntParaExtAbiertaOrigen->getId()
                                                            ." que permite cambio de CPE ONT a un ".$strTipoOntNuevoSolCambioOntParaExtAbiertaOrigen
                                                            ." por ".$strOpcion);
                $objServicioHistorialOrigen->setIpCreacion($strIpCreacion);
                $objServicioHistorialOrigen->setFeCreacion(new \DateTime('now'));
                $objServicioHistorialOrigen->setUsrCreacion($strUsrCreacion);
                $objServicioHistorialOrigen->setEstado($objServicioPlanOrigenEnPunto->getEstado());
                $this->emCome->persist($objServicioHistorialOrigen);
                $this->emCome->flush();
                
                $arrayParamsSolCambioOntParaExtOrigen   = array("intIdDetalleSolicitud" => $objSolCambioOntParaExtAbiertaOrigen->getId(),
                                                                "strProceso"            => 
                                                                "SEGUIMIENTO_GENERAL:Solicitud asociada a esta tarea fue finalizada por ".$strOpcion);
                $this->eminf->getRepository('schemaBundle:InfoDetalleSolicitud')->cerrarTareasPorSolicitud($arrayParamsSolCambioOntParaExtOrigen);
            }
            $strStatus = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }
        
        $arrayRespuesta = array("status"    => $strStatus,
                                "mensaje"   => $strMensaje);
        
        return $arrayRespuesta;
    }
    
    /**
     * Método usado para recrear la solicitud de agregar equipo asociada al servicio de Internet origen para permitir el cambio de ont
     * tomando en cuenta el servicio destino
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 22-04-2021
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 31-01-2021 Se modifican los nombres de las variables ya que la función se usará para cambio a ont para extender Hw y Zte
     *                         y se elimina obtención del parámetro strValorCaractTipoOntNuevo para permitir Extender para ZTE
     * 
     * @param array $arrayParametros [
     *                                  "objServicioPlanOrigenEnPunto"      => objeto del servicio origen asociado a un plan
     *                                  "objServicioPlanDestinoEnPunto"     => objeto del servicio destino asociado a un plan
     *                                  "strOpcion"                         => opción desde la cual se está ejecutando la función
     *                                  "strValorCaractMotivoCambioOnt"     => motivo por el cual se necesita un cambio de ont
     *                                  "strCodEmpresa"                     =>  id de la empresa,
     *                                  "strUsrCreacion"                    => usuario de creación
     *                                  "strIpCreacion"                     => ip de creación
     *                               ]
     * @return array $arrayRespuesta [
     *                                  "status"    => OK o ERROR
     *                                  "mensaje"   => Mensaje de error
     *                               ]
     * 
     */
    public function recreaSolicitudCambioOntTraslado($arrayParametros)
    {
        $objServicioPlanDestinoEnPunto      = $arrayParametros["objServicioPlanDestinoEnPunto"];
        $strCodEmpresa                      = $arrayParametros["strCodEmpresa"];
        $strUsrCreacion                     = $arrayParametros["strUsrCreacion"];
        $strIpCreacion                      = $arrayParametros["strIpCreacion"];
        $strValorCaractMotivoCambioOnt      = $arrayParametros["strValorCaractMotivoCambioOnt"];
        $strMensaje                         = "";
        try
        {
            if(!is_object($objServicioPlanDestinoEnPunto))
            {
                throw new \Exception("No se ha enviado correctamente el servicio destino para recrear la solicitud que permite el cambio de CPE ONT");
            }
            
            $arrayRespVerifSolCambioDeOntXExtender  = $this->servicioTecnico
                                                           ->verificaSolCambioDeOntPorServicioExtender(array(
                                                                                                        "intIdServicioInternet" => 
                                                                                                        $objServicioPlanDestinoEnPunto->getId(),
                                                                                                        "strCodEmpresa"         => 
                                                                                                        $strCodEmpresa,
                                                                                                        "strMotivoCambioOnt"    => 
                                                                                                        $strValorCaractMotivoCambioOnt));
            $strObtieneSolCambioOntParaExtAbiertaDestino        = $arrayRespVerifSolCambioDeOntXExtender["strObtieneSolAgregarEquipoCambioOnt"];
            $objSolCambioOntParaExtAbiertaDestino               = $arrayRespVerifSolCambioDeOntXExtender["objSolAgregarEquipoCambioOnt"];
            $strTipoOntNuevoSolCambioOntParaExtAbiertaDestino   = $arrayRespVerifSolCambioDeOntXExtender["strTipoOntNuevoSolAgregarEquipoCambioOnt"];
            if($strObtieneSolCambioOntParaExtAbiertaDestino === "SI" && is_object($objSolCambioOntParaExtAbiertaDestino))
            {
                $objProductoInternet    = $this->emCome->getRepository('schemaBundle:AdmiProducto')
                                                   ->findOneBy(array(   "nombreTecnico" => "INTERNET", 
                                                                        "empresaCod"    => $strCodEmpresa,
                                                                        "estado"        => "Activo"));
                if(!is_object($objProductoInternet))
                {
                    throw new \Exception("No se ha podido obtener correctamente el producto Internet");
                }

                $objServicioPlanOrigenEnPunto = null;
                $objSpcTraslado = $this->serviceGeneral->getServicioProductoCaracteristica( $objServicioPlanDestinoEnPunto, 
                                                                                            "TRASLADO", 
                                                                                            $objProductoInternet);
                if(is_object($objSpcTraslado))
                {
                    $intIdServicioPlanOrigenEnPunto = $objSpcTraslado->getValor();
                    if(isset($intIdServicioPlanOrigenEnPunto) && !empty($intIdServicioPlanOrigenEnPunto))
                    {
                        $objServicioPlanOrigenEnPunto   = $this->emCome->getRepository('schemaBundle:InfoServicio')
                                                                       ->find($intIdServicioPlanOrigenEnPunto);
                    }
                }

                if(!is_object($objServicioPlanOrigenEnPunto))
                {
                    throw new \Exception("No se ha podido obtener correctamente el servicio origen para recrear la solicitud "
                                         ."que permite el cambio de CPE ONT");
                }
                
                $objServicioTecnicoInternetOrigen   = $this->emCome->getRepository('schemaBundle:InfoServicioTecnico')
                                                                   ->findOneByServicioId($objServicioPlanOrigenEnPunto->getId());
                if(!is_object($objServicioTecnicoInternetOrigen))
                {
                    throw new \Exception("No se ha podido obtener el servicio técnico del Internet origen");
                }
                $intIdElementoClienteOrigen = $objServicioTecnicoInternetOrigen->getElementoClienteId();
                //Se crea la solicitud asociada al servicio destino
                $arrayRespuestaCrearSolCambioOntParaExtOrigen   = $this->servicioTecnico
                                                               ->crearSolAutomaticaAgregarEquipoDualBand(
                                                                        array(  "objServicio"                   => $objServicioPlanOrigenEnPunto,
                                                                                "strCambioOnt"                  => "SI",
                                                                                "strMotivoCambioOnt"            => $strValorCaractMotivoCambioOnt,
                                                                                "strTipoOntNuevo"               => 
                                                                                $strTipoOntNuevoSolCambioOntParaExtAbiertaDestino,
                                                                                "intIdElementoCliente"          => $intIdElementoClienteOrigen,
                                                                                "strEstadoSolicitud"            => "PrePlanificada",
                                                                                "strObservacionAdicServicio"    => " por rechazo/anulación de "
                                                                                                                   ."servicio destino",
                                                                                "strUsrCreacion"                => $strUsrCreacion,
                                                                                "strIpCreacion"                 => $strIpCreacion));
                if($arrayRespuestaCrearSolCambioOntParaExtOrigen['status'] === "ERROR")
                {
                    throw new \Exception($arrayRespuestaCrearSolCambioOntParaExtOrigen["mensaje"]);
                }
                
                $arrayCaractsSolCambioOntParaExtAbiertaDestino = $this->emCome->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                              ->findBy(array("detalleSolicitudId" => 
                                                                                             $objSolCambioOntParaExtAbiertaDestino->getId()));
                //Si existe una caracteristica de solicitud abierta
                if(isset($arrayCaractsSolCambioOntParaExtAbiertaDestino) && !empty($arrayCaractsSolCambioOntParaExtAbiertaDestino))
                {
                    foreach($arrayCaractsSolCambioOntParaExtAbiertaDestino as $objCaractSolCambioOntParaExtAbiertaDestino)
                    {
                        //cierra Detalle de la solicitud de la caracteristica origen
                        $objCaractSolCambioOntParaExtAbiertaDestino->setEstado("Finalizada");
                        $objCaractSolCambioOntParaExtAbiertaDestino->setUsrUltMod($strUsrCreacion);
                        $objCaractSolCambioOntParaExtAbiertaDestino->setFeUltMod(new \DateTime('now'));
                        $this->emCome->persist($objCaractSolCambioOntParaExtAbiertaDestino);
                        $this->emCome->flush();
                    }
                }
                
                $objSolCambioOntParaExtAbiertaDestino->setEstado("Finalizada");
                $this->emCome->persist($objSolCambioOntParaExtAbiertaDestino);
                $this->emCome->flush();

                $objDetSolHistAgregarEquipoDestino = new InfoDetalleSolHist();
                $objDetSolHistAgregarEquipoDestino->setDetalleSolicitudId($objSolCambioOntParaExtAbiertaDestino);
                $objDetSolHistAgregarEquipoDestino->setEstado($objSolCambioOntParaExtAbiertaDestino->getEstado());
                $objDetSolHistAgregarEquipoDestino->setObservacion("Se finaliza solicitud por rechazo/anulación de servicio");
                $objDetSolHistAgregarEquipoDestino->setUsrCreacion($strUsrCreacion);
                $objDetSolHistAgregarEquipoDestino->setFeCreacion(new \DateTime('now'));
                $objDetSolHistAgregarEquipoDestino->setIpCreacion($strIpCreacion);
                $this->emCome->persist($objDetSolHistAgregarEquipoDestino);
                $this->emCome->flush();
                
                $objServicioHistorialDestino = new InfoServicioHistorial();
                $objServicioHistorialDestino->setServicioId($objServicioPlanDestinoEnPunto);
                $objServicioHistorialDestino->setObservacion("Se finaliza la SOLICITUD AGREGAR EQUIPO #"
                                                            .$objSolCambioOntParaExtAbiertaDestino->getId()
                                                            ." que permite cambio de CPE ONT a un ".$strTipoOntNuevoSolCambioOntParaExtAbiertaDestino
                                                            ." por rechazo/anulación de servicio");
                $objServicioHistorialDestino->setIpCreacion($strIpCreacion);
                $objServicioHistorialDestino->setFeCreacion(new \DateTime('now'));
                $objServicioHistorialDestino->setUsrCreacion($strUsrCreacion);
                $objServicioHistorialDestino->setEstado($objServicioPlanDestinoEnPunto->getEstado());
                $this->emCome->persist($objServicioHistorialDestino);
                $this->emCome->flush();
                
                $arrayParamsSolCambioOntParaExtDestino  = array("intIdDetalleSolicitud" => $objSolCambioOntParaExtAbiertaDestino->getId(),
                                                                "strProceso"            => 
                                                                "SEGUIMIENTO_GENERAL:Solicitud asociada a esta tarea fue finalizada por ".
                                                                "rechazo/anulación de servicio");
                $this->eminf->getRepository('schemaBundle:InfoDetalleSolicitud')->cerrarTareasPorSolicitud($arrayParamsSolCambioOntParaExtDestino);
                
            }
            $strStatus = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
        }
        
        $arrayRespuesta = array("status"            => $strStatus,
                                "mensaje"           => $strMensaje,
                                "mensajeAdicional"  => $strMensajeAdicional);
        
        return $arrayRespuesta;
    }
    
    /**
     * Método usado para crear la solicitud de agregar equipo asociada al servicio Extender Dual Band tomando en cuenta el servicio origen
     * 
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 1.0 06-04-2021
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.1 21-04-2021 Se corrige recreación de solicitud
     * 
     * @author Ronny Morán <rmoranc@telconet.ec>
     * @version 1.2 25-07-2021 Se agrega la creación de la característica para el servicio con estado PrePlanificada.
     * 
     * @author Daniel Reyes <djreyes@telconet.ec>
     * @version 1.1 20-07-2021 Se mejora validacion para quecuando el servicio destino sea por preplanificado
     * 
     * @param array $arrayParametros [
     *                                  "objServicioOrigen"     => objeto del servicio origen
     *                                  "objServicioDestino"    => objeto del servicio destino
     *                                  "strCodEmpresa"         =>  id de la empresa,
     *                                  "strUsrCreacion"        => usuario de creación
     *                                  "strIpCreacion"         => ip de creación
     *                               ]
     * @return array $arrayRespuesta [
     *                                  "status"    => OK o ERROR
     *                                  "mensaje"   => Mensaje de error
     *                               ]
     * 
     */
    public function creaSolicitudEdbTrasladoyCRS($arrayParametros)
    {
        $objServicioOrigen              = $arrayParametros["objServicioOrigen"];
        $objServicioDestino             = $arrayParametros["objServicioDestino"];
        $strCodEmpresa                  = $arrayParametros["strCodEmpresa"];
        $strUsrCreacion                 = $arrayParametros["strUsrCreacion"];
        $strIpCreacion                  = $arrayParametros["strIpCreacion"];
        $strOpcion                      = $arrayParametros["strOpcion"] ? $arrayParametros["strOpcion"] : "traslado de servicio";
        $strMensaje                     = "";
        $strCreaCaractTraslado          = "SI";
        $strVerifSolCambioOntXExtender  = "NO";
        try
        {
            if(!is_object($objServicioOrigen) || !is_object($objServicioDestino))
            {
                throw new \Exception("No se han enviado correctamente los servicios origen y destino");
            }
            
            $strEstadoServicioOrigen    = $objServicioOrigen->getEstado();
            $strEstadoServicioDestino   = $objServicioDestino->getEstado();
            $strTipoSolAgregarEquipo    = "SOLICITUD AGREGAR EQUIPO";
            $objTipoSolicitudAgregarEquipo  = $this->emCome->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                           ->findOneByDescripcionSolicitud($strTipoSolAgregarEquipo);
            if(!is_object($objTipoSolicitudAgregarEquipo))
            {
                throw new \Exception("No se encontró información acerca del tipo de solicitud de agregar equipo");
            }

            $arrayEstadosVerificaSolAgregarEquipo   = array();
            $arrayEstadosAbiertosSolAgregarEquipo   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                  ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD', 
                                                                        '', 
                                                                        '', 
                                                                        '',
                                                                        'ESTADOS_SOLICITUDES_ABIERTAS',
                                                                        'SOLICITUD AGREGAR EQUIPO',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $strCodEmpresa);
            if(is_array($arrayEstadosAbiertosSolAgregarEquipo) && count($arrayEstadosAbiertosSolAgregarEquipo) > 0)
            {
                foreach($arrayEstadosAbiertosSolAgregarEquipo as $arrayEstadoAbiertoSolAgregarEquipo)
                {   
                    $arrayEstadosVerificaSolAgregarEquipo[] = $arrayEstadoAbiertoSolAgregarEquipo['valor3'];
                }
            }

            if(!isset($arrayEstadosVerificaSolAgregarEquipo) || empty($arrayEstadosVerificaSolAgregarEquipo))
            {
                throw new \Exception("No se ha podido obtener los estados permitidos para una SOLICITUD AGREGAR EQUIPO");
            }
            
            $objProductoInternet    = $this->emCome->getRepository('schemaBundle:AdmiProducto')
                                                   ->findOneBy(array(   "nombreTecnico" => "INTERNET", 
                                                                        "empresaCod"    => $strCodEmpresa,
                                                                        "estado"        => "Activo"));
            if(!is_object($objProductoInternet))
            {
                throw new \Exception("No se ha podido obtener correctamente el producto Internet");
            }
            
            $arrayRespuestaServInternetValido   = $this->servicioTecnico
                                                       ->obtieneServicioInternetValido(array(   "intIdPunto"    =>
                                                                                                $objServicioOrigen->getPuntoId()->getId(),
                                                                                                "strCodEmpresa" => $strCodEmpresa
                                                                                            ));
            $strStatusServInternetValido        = $arrayRespuestaServInternetValido["status"];
            $objServicioInternetValido          = $arrayRespuestaServInternetValido["objServicioInternet"];
            if($strStatusServInternetValido != "OK" && !is_object($objServicioInternetValido) )
            {
                throw new \Exception('No se ha podido obtener el Servicio de Internet en el punto origen');
            }
            
            //Traslada los servicio origen al destino si el servicio origen se encuentra activo
            if($strEstadoServicioOrigen === "Activo" && ($strEstadoServicioDestino === "Pendiente" || $strEstadoServicioDestino == 'PrePlanificada'))
            {
                $objCaractTrasladarExtender = $this->emCome->getRepository('schemaBundle:AdmiCaracteristica')
                                                           ->findOneBy(array(   "descripcionCaracteristica" => "TRASLADAR EXTENDER DUAL BAND",
                                                                                "estado" => "Activo"));
                if(!is_object($objCaractTrasladarExtender))
                {
                    throw new \Exception("No se ha podido obtener la característica para realizar el traslado del Extender dual band");
                }
                $objProdCaractTrasladarExtender = $this->emCome->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                               ->findOneBy(array("productoId"           => $objProductoInternet->getId(), 
                                                                                 "caracteristicaId"     => $objCaractTrasladarExtender->getId(), 
                                                                                 "estado"               => "Activo"));
                if(!is_object($objProdCaractTrasladarExtender))
                {
                    throw new \Exception("No se ha podido obtener correctamente la relación del producto Internet ".
                                         "con la característica trasladar extender");
                }

                $objSpcTrasladarExtenderServicioOrigen  = $this->serviceGeneral->getServicioProductoCaracteristica( $objServicioOrigen, 
                                                                                                                "TRASLADAR EXTENDER DUAL BAND", 
                                                                                                                $objProductoInternet);
                //cambia a estado ELiminado el ServicioProdCaract Origen
                if(is_object($objSpcTrasladarExtenderServicioOrigen))
                {
                    $objSpcTrasladarExtenderServicioOrigen->setEstado('Eliminado');
                    $objSpcTrasladarExtenderServicioOrigen->setUsrUltMod($strUsrCreacion);
                    $objSpcTrasladarExtenderServicioOrigen->setFeUltMod(new \DateTime('now'));
                    $this->emCome->persist($objSpcTrasladarExtenderServicioOrigen);
                    $this->emCome->flush();
                }
                //Crear ServicioProdCaract Destino
                $objSpcTrasladaExtender = new InfoServicioProdCaract();
                $objSpcTrasladaExtender->setServicioId($objServicioDestino->getId());
                $objSpcTrasladaExtender->setProductoCaracterisiticaId($objProdCaractTrasladarExtender->getId());
                $objSpcTrasladaExtender->setValor($objServicioOrigen->getId());
                $objSpcTrasladaExtender->setFeCreacion(new \DateTime('now'));
                $objSpcTrasladaExtender->setUsrCreacion($strUsrCreacion);
                $objSpcTrasladaExtender->setEstado("Activo");
                $this->emCome->persist($objSpcTrasladaExtender);
                $this->emCome->flush();
                $strCreaCaractTraslado = "NO";

                //crear Solicitud Destino por Activo -> PrePlanificacion
                if ($strEstadoServicioDestino == 'PrePlanificada')
                {
                    $strObservacionCorreo       = $strTipoSolAgregarEquipo." creada automáticamente";
                    $objSolAgregarEquipoDestino = new InfoDetalleSolicitud();
                    $objSolAgregarEquipoDestino->setServicioId($objServicioDestino);
                    $objSolAgregarEquipoDestino->setTipoSolicitudId($objTipoSolicitudAgregarEquipo);
                    $objSolAgregarEquipoDestino->setEstado($strEstadoServicioDestino);
                    $objSolAgregarEquipoDestino->setUsrCreacion($strUsrCreacion);
                    $objSolAgregarEquipoDestino->setFeCreacion(new \DateTime('now'));
                    $this->emCome->persist($objSolAgregarEquipoDestino);
                    $this->emCome->flush();

                    $strObservacionCorreo .= "<br>Incluye agregar equipo Extender Dual Band.";
                        
                    $objDetSolHistAgregarEquipoDestino = new InfoDetalleSolHist();
                    $objDetSolHistAgregarEquipoDestino->setDetalleSolicitudId($objSolAgregarEquipoDestino);
                    $objDetSolHistAgregarEquipoDestino->setIpCreacion($strIpCreacion);
                    $objDetSolHistAgregarEquipoDestino->setFeCreacion(new \DateTime('now'));
                    $objDetSolHistAgregarEquipoDestino->setUsrCreacion($strUsrCreacion);
                    $objDetSolHistAgregarEquipoDestino->setEstado($strEstadoServicioDestino);
                    $objDetSolHistAgregarEquipoDestino->setObservacion($strObservacionCorreo);
                    $this->emCome->persist($objDetSolHistAgregarEquipoDestino);
                    $this->emCome->flush();
                }
            }
            //Servicio Origen no está activo y se crea la solicitud para que siga el flujo normal
            else if($strEstadoServicioDestino === "PrePlanificada")
            {
                /**
                 * Estos registros se crearán de acuerdo a como se encontraban en el servicio origen con un estado inicial
                 * de PrePlanificada para que PYL pueda gestionarlas
                 * 
                 * PrePlanificada -> PrePlanificada
                 * Asignada -> PrePlanificada
                 * 
                 */

                //crear Solicitud Destino
                $strObservacionCorreo       = $strTipoSolAgregarEquipo." creada automáticamente";
                $objSolAgregarEquipoDestino = new InfoDetalleSolicitud();
                $objSolAgregarEquipoDestino->setServicioId($objServicioDestino);
                $objSolAgregarEquipoDestino->setTipoSolicitudId($objTipoSolicitudAgregarEquipo);
                $objSolAgregarEquipoDestino->setEstado($strEstadoServicioDestino);
                $objSolAgregarEquipoDestino->setUsrCreacion($strUsrCreacion);
                $objSolAgregarEquipoDestino->setFeCreacion(new \DateTime('now'));
                $this->emCome->persist($objSolAgregarEquipoDestino);
                $this->emCome->flush();

                $strObservacionCorreo .= "<br>Incluye agregar equipo Extender Dual Band.";
                    
                $objDetSolHistAgregarEquipoDestino = new InfoDetalleSolHist();
                $objDetSolHistAgregarEquipoDestino->setDetalleSolicitudId($objSolAgregarEquipoDestino);
                $objDetSolHistAgregarEquipoDestino->setIpCreacion($strIpCreacion);
                $objDetSolHistAgregarEquipoDestino->setFeCreacion(new \DateTime('now'));
                $objDetSolHistAgregarEquipoDestino->setUsrCreacion($strUsrCreacion);
                $objDetSolHistAgregarEquipoDestino->setEstado($strEstadoServicioDestino);
                $objDetSolHistAgregarEquipoDestino->setObservacion($strObservacionCorreo);
                $this->emCome->persist($objDetSolHistAgregarEquipoDestino);
                $this->emCome->flush();

                //Se cierran las tareas del origen
                $objSolAgregarEquipoAbiertaOrigen   = $this->emCome->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                                   ->findOneBy(array('servicioId'        => $objServicioOrigen->getId(),
                                                                                     'tipoSolicitudId'   => $objTipoSolicitudAgregarEquipo->getId(),
                                                                                     'estado'            => $arrayEstadosVerificaSolAgregarEquipo));
                
                if(is_object($objSolAgregarEquipoAbiertaOrigen))
                {
                    $arrayCaractsSolAgregarEquipoAbiertaOrigen  = $this->emCome->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                            ->findBy(array(  "detalleSolicitudId" => 
                                                                                                $objSolAgregarEquipoAbiertaOrigen->getId(),
                                                                                                "estado"             => 
                                                                                                $arrayEstadosVerificaSolAgregarEquipo
                                                                                        ));
                    //Si existe una caracteristica de solicitud abierta
                    if(isset($arrayCaractsSolAgregarEquipoAbiertaOrigen) && !empty($arrayCaractsSolAgregarEquipoAbiertaOrigen))
                    {
                        foreach($arrayCaractsSolAgregarEquipoAbiertaOrigen as $objCaractSolAgregarEquipoOrigen)
                        {
                            //cierra Detalle de la solicitud de la caracteristica origen
                            $objCaractSolAgregarEquipoOrigen->setEstado("Finalizada");
                            $objCaractSolAgregarEquipoOrigen->setUsrUltMod($strUsrCreacion);
                            $objCaractSolAgregarEquipoOrigen->setFeUltMod(new \DateTime('now'));
                            $this->emCome->persist($objCaractSolAgregarEquipoOrigen);
                            $this->emCome->flush();
                            //Crea Detalle de la solicitud de la Caracteristica Destino con el valor del Origen
                            $objCaractSolAgregarEquipoDestino = new InfoDetalleSolCaract();
                            $objCaractSolAgregarEquipoDestino->setCaracteristicaId($objCaractSolAgregarEquipoOrigen->getCaracteristicaId());
                            $objCaractSolAgregarEquipoDestino->setDetalleSolicitudId($objSolAgregarEquipoDestino);
                            $objCaractSolAgregarEquipoDestino->setValor($objCaractSolAgregarEquipoOrigen->getValor());
                            $objCaractSolAgregarEquipoDestino->setEstado($strEstadoServicioDestino);
                            $objCaractSolAgregarEquipoDestino->setUsrCreacion($strUsrCreacion);
                            $objCaractSolAgregarEquipoDestino->setFeCreacion(new \DateTime('now'));
                            $this->emCome->persist($objCaractSolAgregarEquipoDestino);
                            $this->emCome->flush();
                        }
                    }

                    //Se finaliza la solicitud de agregar equipo asociada al servicio origen del traslado
                    $objSolAgregarEquipoAbiertaOrigen->setEstado("Replanificada");
                    $this->emCome->persist($objSolAgregarEquipoAbiertaOrigen);
                    $this->emCome->flush();

                    $objDetSolHistAgregarEquipoOrigen = new InfoDetalleSolHist();
                    $objDetSolHistAgregarEquipoOrigen->setDetalleSolicitudId($objSolAgregarEquipoAbiertaOrigen);
                    $objDetSolHistAgregarEquipoOrigen->setEstado($objSolAgregarEquipoAbiertaOrigen->getEstado());
                    $objDetSolHistAgregarEquipoOrigen->setObservacion("Se replanifica ".$strTipoSolAgregarEquipo." por ".$strOpcion);
                    $objDetSolHistAgregarEquipoOrigen->setUsrCreacion($strUsrCreacion);
                    $objDetSolHistAgregarEquipoOrigen->setFeCreacion(new \DateTime('now'));
                    $objDetSolHistAgregarEquipoOrigen->setIpCreacion($strIpCreacion);
                    $this->emCome->persist($objDetSolHistAgregarEquipoOrigen);
                    $this->emCome->flush();
                    
                    $arrayParamsSolAgregarEquipoOrigen  = array("intIdDetalleSolicitud" => $objSolAgregarEquipoAbiertaOrigen->getId(),
                                                                "strProceso"            => 
                                                                "SEGUIMIENTO_GENERAL: La tarea fue replanificada por ".$strOpcion);
                    //Cierra solicitud Origen
                    $this->eminf->getRepository('schemaBundle:InfoDetalleSolicitud')->cerrarTareasPorSolicitud($arrayParamsSolAgregarEquipoOrigen);
                    
                    $strMensaje = "<br>Se ha creado la SOLICITUD AGREGAR EQUIPO asociada al servicio";
                    $this->serviceGeneral->envioNotifAgregarEquipo(array(
                                                                            "objPunto"                  => $objServicioDestino->getPuntoId(),
                                                                            "objServicio"               => $objServicioDestino,
                                                                            "strObservacionCorreo"      => $strObservacionCorreo,
                                                                            "strDescripcionSolicitud"   => $strTipoSolAgregarEquipo,
                                                                            "strUsrCreacion"            => $strUsrCreacion,
                                                                            "strIpCreacion"             => $strIpCreacion
                                                                        ));
                    $strVerifSolCambioOntXExtender = "SI";
                }
            }
            else
            {
                throw new \Exception("No existe un flujo definido para servicios Extender con el servicio origen en estado "
                                     .$strEstadoServicioOrigen
                                     ." y el servicio destino en estado ".$strEstadoServicioDestino);
            }
            $strStatus = "OK";
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService->creaSolicitudEdbTrasladoyCRS', 
                                              "Se presentaron problemas al crear la solicitud de Extender Dual Band en Traslados. ".
                                              $e->getMessage(), 
                                              $strUsrCreacion, 
                                              $strIpCreacion );
            error_log("Error al ejecutar el flujo de Extender Dual Band Traslados " . $e->getMessage());
        }
        $arrayRespuesta = array("status"                        => $strStatus,
                                "mensaje"                       => $strMensaje,
                                "creaCaractTraslado"            => $strCreaCaractTraslado,
                                "verifSolCambioOntXExtender"    => $strVerifSolCambioOntXExtender);
        return $arrayRespuesta;
    }

    /**
     * Método usado para recrear la solicitud de agregar equipo al servicio Extender Dual Band origen al rechazarse o anularse el servicio destino
     * 
     * @author Jonathan Mazon Sanchez <jmazon@telconet.ec>
     * @version 1.0 06-04-2021
     * 
     * @author Lizbeth Cruz <mlcruz@telconet.ec>
     * @version 1.0 21-04-2021 Se corrige recreación de solicitud
     * 
     * @param array $arrayParametros [
     *                                  "objServicioDestino"    => objeto del servicio
     *                                  "strOpcion"             => TRASLADO
     *                                  "strCodEmpresa"         =>  id de la empresa,
     *                                  "strUsrCreacion"        => usuario de creación
     *                                  "strIpCreacion"         => ip de creación
     *                               ]
     * @return array $arrayRespuesta [
     *                                  "status"    => OK o ERROR
     *                                  "mensaje"   => Mensaje de error
     *                               ]
     * 
     */
    public function recreaSolicitudEdbTraslado($arrayParametros)
    {
        $objServicioDestino = $arrayParametros["objServicioDestino"];
        $strOpcion          = $arrayParametros["strOpcion"];
        $strCodEmpresa      = $arrayParametros["strCodEmpresa"];
        $strUsrCreacion     = $arrayParametros["strUsrCreacion"];
        $strIpCreacion      = $arrayParametros["strIpCreacion"];
        $strMensaje         = "";
        try
        {
            $strTipoSolAgregarEquipo        = "SOLICITUD AGREGAR EQUIPO";
            $objTipoSolicitudAgregarEquipo  = $this->emCome->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                           ->findOneByDescripcionSolicitud($strTipoSolAgregarEquipo);
            if(!is_object($objTipoSolicitudAgregarEquipo))
            {
                throw new \Exception("No se encontró información acerca del tipo de solicitud de agregar equipo");
            }
            if(!is_object($objServicioDestino))
            {
                throw new \Exception("No se ha enviado correctamente el servicio destino para recrear la solicitud del Extender DUal Band");
            }
            
            $objProductoInternet    = $this->emCome->getRepository('schemaBundle:AdmiProducto')
                                                   ->findOneBy(array(   "nombreTecnico" => "INTERNET", 
                                                                        "empresaCod"    => $strCodEmpresa,
                                                                        "estado"        => "Activo"));
            if(!is_object($objProductoInternet))
            {
                throw new \Exception("No se ha podido obtener correctamente el producto Internet");
            }
            
            $arrayEstadosVerificaSolAgregarEquipo   = array();
            $arrayEstadosAbiertosSolAgregarEquipo   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                  ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD', 
                                                                        '', 
                                                                        '', 
                                                                        '',
                                                                        'ESTADOS_SOLICITUDES_ABIERTAS',
                                                                        $strTipoSolAgregarEquipo,
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $strCodEmpresa);
            if(is_array($arrayEstadosAbiertosSolAgregarEquipo) && count($arrayEstadosAbiertosSolAgregarEquipo) > 0)
            {
                foreach($arrayEstadosAbiertosSolAgregarEquipo as $arrayEstadoAbiertoSolAgregarEquipo)
                {   
                    $arrayEstadosVerificaSolAgregarEquipo[] = $arrayEstadoAbiertoSolAgregarEquipo['valor3'];
                }
            }
            
            if(!isset($arrayEstadosVerificaSolAgregarEquipo) || empty($arrayEstadosVerificaSolAgregarEquipo))
            {
                throw new \Exception("No se ha podido obtener los estados permitidos para una SOLICITUD AGREGAR EQUIPO");
            }
            
            //Se da de baja la solicitud del servicio destino y se crea una nueva solicitud para el servicio origen
            $objSolAgregarEquipoAbiertaDestino  = $this->emCome->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                               ->findOneBy(array(   'servicioId'      => $objServicioDestino->getId(),
                                                                                    'tipoSolicitudId' => $objTipoSolicitudAgregarEquipo->getId(),
                                                                                    'estado'          => $arrayEstadosVerificaSolAgregarEquipo));
            
            if($strOpcion === "TRASLADO")
            {
                $objSpcTraslado = $this->serviceGeneral->getServicioProductoCaracteristica($objServicioDestino, "TRASLADO", $objProductoInternet);
                if(is_object($objSpcTraslado))
                {
                    $intIdServicioOrigen = $objSpcTraslado->getValor();
                    if(isset($intIdServicioOrigen) && !empty($intIdServicioOrigen))
                    {
                        $objServicioOrigen  = $this->emCome->getRepository('schemaBundle:InfoServicio')->find($intIdServicioOrigen);
                    }
                }
            }
            
            if(is_object($objServicioOrigen) && is_object($objSolAgregarEquipoAbiertaDestino))
            {
                $arrayRespuestaServInternetValido   = $this->servicioTecnico
                                                           ->obtieneServicioInternetValido(array(   "intIdPunto"    =>
                                                                                                    $objServicioOrigen->getPuntoId()->getId(),
                                                                                                    "strCodEmpresa" => $strCodEmpresa
                                                                                                ));
                $strStatusServInternetValido        = $arrayRespuestaServInternetValido["status"];
                $objServicioInternetValido          = $arrayRespuestaServInternetValido["objServicioInternet"];
                if($strStatusServInternetValido != "OK" && !is_object($objServicioInternetValido))
                {
                    throw new \Exception('No se ha podido obtener el Servicio de Internet en el punto origen');
                }
                
                $objSolAgregarEquipoNuevaOrigen  = new InfoDetalleSolicitud();
                $objSolAgregarEquipoNuevaOrigen->setServicioId($objServicioOrigen);
                $objSolAgregarEquipoNuevaOrigen->setTipoSolicitudId($objTipoSolicitudAgregarEquipo);
                $objSolAgregarEquipoNuevaOrigen->setEstado("PrePlanificada");
                $objSolAgregarEquipoNuevaOrigen->setUsrCreacion($strUsrCreacion);
                $objSolAgregarEquipoNuevaOrigen->setFeCreacion(new \DateTime('now'));
                $this->emCome->persist($objSolAgregarEquipoNuevaOrigen);
                $this->emCome->flush();

                $strObservacionCorreo = $strTipoSolAgregarEquipo." creada automáticamente";

                $arrayCaractsSolAgregarEquipoAbiertaDestino = $this->emCome->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                   ->findBy(array(  "detalleSolicitudId" => 
                                                                                    $objSolAgregarEquipoAbiertaDestino->getId(),
                                                                                    "estado"             => $arrayEstadosVerificaSolAgregarEquipo));
                if(isset($arrayCaractsSolAgregarEquipoAbiertaDestino) && !empty($arrayCaractsSolAgregarEquipoAbiertaDestino))
                {
                    foreach($arrayCaractsSolAgregarEquipoAbiertaDestino as $objCaractSolAgregarEquipoDestino)
                    {
                        $objCaractSolAgregarEquipoNuevaOrigen = new InfoDetalleSolCaract();
                        $objCaractSolAgregarEquipoNuevaOrigen->setCaracteristicaId($objCaractSolAgregarEquipoDestino->getCaracteristicaId());
                        $objCaractSolAgregarEquipoNuevaOrigen->setDetalleSolicitudId($objSolAgregarEquipoNuevaOrigen);
                        $objCaractSolAgregarEquipoNuevaOrigen->setValor($objCaractSolAgregarEquipoDestino->getValor());
                        $objCaractSolAgregarEquipoNuevaOrigen->setEstado("PrePlanificada");
                        $objCaractSolAgregarEquipoNuevaOrigen->setUsrCreacion($strUsrCreacion);
                        $objCaractSolAgregarEquipoNuevaOrigen->setFeCreacion(new \DateTime('now'));
                        $this->emCome->persist($objCaractSolAgregarEquipoNuevaOrigen);
                        $this->emCome->flush();

                        $objCaractSolAgregarEquipoDestino->setEstado("Finalizada");
                        $objCaractSolAgregarEquipoDestino->setUsrUltMod($strUsrCreacion);
                        $objCaractSolAgregarEquipoDestino->setFeUltMod(new \DateTime('now'));
                        $this->emCome->persist($objCaractSolAgregarEquipoDestino);
                        $this->emCome->flush();
                    }
                }
                
                $strObservacionCorreo .= "<br>Incluye agregar equipo Extender Dual Band.";

                $objDetSolHistAgregarEquipoNuevaOrigen = new InfoDetalleSolHist();
                $objDetSolHistAgregarEquipoNuevaOrigen->setDetalleSolicitudId($objSolAgregarEquipoNuevaOrigen);
                $objDetSolHistAgregarEquipoNuevaOrigen->setIpCreacion($strIpCreacion);
                $objDetSolHistAgregarEquipoNuevaOrigen->setFeCreacion(new \DateTime('now'));
                $objDetSolHistAgregarEquipoNuevaOrigen->setUsrCreacion($strUsrCreacion);
                $objDetSolHistAgregarEquipoNuevaOrigen->setEstado("PrePlanificada");
                $objDetSolHistAgregarEquipoNuevaOrigen->setObservacion($strObservacionCorreo);
                $this->emCome->persist($objDetSolHistAgregarEquipoNuevaOrigen);
                $this->emCome->flush();

                $objSolAgregarEquipoAbiertaDestino->setEstado("Finalizada");
                $this->emCome->persist($objSolAgregarEquipoAbiertaDestino);
                $this->emCome->flush();

                $objDetSolHistAgregarEquipoDestino = new InfoDetalleSolHist();
                $objDetSolHistAgregarEquipoDestino->setDetalleSolicitudId($objSolAgregarEquipoAbiertaDestino);
                $objDetSolHistAgregarEquipoDestino->setEstado($objSolAgregarEquipoAbiertaDestino->getEstado());
                $objDetSolHistAgregarEquipoDestino->setObservacion("Se finaliza solicitud por rechazo/anulación de servicio");
                $objDetSolHistAgregarEquipoDestino->setUsrCreacion($strUsrCreacion);
                $objDetSolHistAgregarEquipoDestino->setFeCreacion(new \DateTime('now'));
                $objDetSolHistAgregarEquipoDestino->setIpCreacion($strIpCreacion);
                $this->emCome->persist($objDetSolHistAgregarEquipoDestino);
                $this->emCome->flush();

                //historial Origen
                $objInfoServicioHistorial = new InfoServicioHistorial();
                $objInfoServicioHistorial->setServicioId($objServicioOrigen);
                $objInfoServicioHistorial->setObservacion("Se recrea solicitud Agregar Equipo por rechazo/anulación del servicio");
                $objInfoServicioHistorial->setIpCreacion($strIpCreacion);
                $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objInfoServicioHistorial->setUsrCreacion($strUsrCreacion);
                $objInfoServicioHistorial->setEstado($objServicioOrigen->getEstado());
                $this->emCome->persist($objInfoServicioHistorial);
                $this->emCome->flush();
                
                $arrayParamsSolAgregarEquipoOrigen = array(   
                                                            "intIdDetalleSolicitud"   => $objSolAgregarEquipoAbiertaDestino->getId(),
                                                            "strProceso"              => 
                                                            "SEGUIMIENTO_GENERAL:Solicitud asociada a esta tarea fue finalizada por "
                                                            ."rechazo/anulación de servicio");
                $this->eminf->getRepository('schemaBundle:InfoDetalleSolicitud')->cerrarTareasPorSolicitud($arrayParamsSolAgregarEquipoOrigen);

                $this->serviceGeneral->envioNotifAgregarEquipo( array(
                                                                        "objPunto"                  => $objServicioOrigen->getPuntoId(),
                                                                        "objServicio"               => $objServicioOrigen,
                                                                        "strObservacionCorreo"      => $strObservacionCorreo,
                                                                        "strDescripcionSolicitud"   => $strTipoSolAgregarEquipo,
                                                                        "strUsrCreacion"            => $strUsrCreacion,
                                                                        "strIpCreacion"             => $strIpCreacion,
                                                                        "strEsRechazoAnulacion"     => "SI"
                                                                     ));
            }
            $strStatus  = "OK";
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = "Se presentaron problemas al recrear la solicitud Extender Dual Band";
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService->recreaSolicitudEdbTraslado',
                                              "Se presentaron problemas al recrear la solicitud de Extender Dual Band en Traslados. ".
                                              $e->getMessage(), 
                                              $strUsrCreacion, 
                                              $strIpCreacion);
        }
        $arrayRespuesta = array("status"    => $strStatus,
                                "mensaje"   => $strMensaje);
        return $arrayRespuesta;
    }
    
    /**
     * Documentación para el método listarCaracteristicasPorProducto
     *
     * Funcion que permite crear el html con las caracteristicas segun el producto.
     *
     * @author David León <mdleon@telconet.ec>
     * @version 1.0 01-07-2021
     * 
     * @author David León <mdleon@telconet.ec>
     * @version 1.1 01-06-2022 - Se Agrega cambios para devolver el boom id.
     *
     * @author Jonathan Quintana <jiquintana@telconet.ec>
     * @version 4.8 20-01-2023 - Se valida que no se pueda crear dos paquetes de hora para la misma razón social y que 
     *                           exista un paquete de horas para poder realizar una recarga.
     * 
     * @param Array $arrayDatosWs[
     *                                  "intIdProducto"          => Id del producto a consultar.
     *                                  "verCaracteristicas"     => Booleano que verifica si se muestra caracteristica.
     *                                  "strTipoProceso"         => Al tipo de proceso que corresponde(Creación, Modificación).
     *                                  "infoAdicionalProductos" => Información adicional sobre el producto.
     *                                  "arrayCotizacion"        => Si el cliente tiene una cotizacion se adjunta a las caracteristicas.
     *                                  "strUsuario"             => Usuario que realiza la petición.
     *                                  "strRuc"                 => Identificación del cliente del punto. 
     *                                  "strIpCreacion"          => Ip del cliente. 
     *                                  "strPrefijoEmpresa"      => Prefijo de la empresa. 
     *                                  "strCodEmpresa"          => Codigo de la empresa. 
     *                                  "strBusiness"            => si tiene la caracteristica Business. 
     *                                  "intPuntoId"             => Id del punto donde se va a instalar. 
     *                               ] 
     *
     * @return array $arrayResultado 
     */
    public function listarCaracteristicasPorProducto($arrayDatosWs)
    {
        $intProductoId               = ( isset($arrayDatosWs['intIdProducto']) && !empty($arrayDatosWs['intIdProducto']) )
                                                        ? $arrayDatosWs['intIdProducto'] : '';
        $intProyectoId               = ( isset($arrayDatosWs['intIdProyecto']) && !empty($arrayDatosWs['intIdProyecto']) )
                                                        ? $arrayDatosWs['intIdProyecto'] : '';
        $strTipoRed                  = ( isset($arrayDatosWs['strTipoRed ']) && !empty($arrayDatosWs['strTipoRed ']) )
                                                        ? $arrayDatosWs['strTipoRed '] :'MPLS';
        $boolMostarCaracteristicas   = ( isset($arrayDatosWs['verCaracteristicas']) && !empty($arrayDatosWs['verCaracteristicas']) )
                                                        ? $arrayDatosWs['verCaracteristicas'] : true;
        $strTipoProceso              = ( isset($arrayDatosWs['strTipoProceso']) && !empty($arrayDatosWs['strTipoProceso']) )
                                                        ? $arrayDatosWs['strTipoProceso'] : '';
        $strInfoAdicionalProds       = ( isset($arrayDatosWs['infoAdicionalProductos']) && !empty($arrayDatosWs['infoAdicionalProductos']) )
                                                        ? $arrayDatosWs['infoAdicionalProductos'] : '';
        $arrayCotizacion             = ( isset($arrayDatosWs['arrayCotizacion']) && !empty($arrayDatosWs['arrayCotizacion']) )
                                                        ? $arrayDatosWs['arrayCotizacion'] : '';
        $boolContinuar               = true;
        $strUsrCreacion              = ( isset($arrayDatosWs['strUsuario']) && !empty($arrayDatosWs['strUsuario']) )
                                                        ? $arrayDatosWs['strUsuario'] : 'TELCOS +';
        $strRuc                      = ( isset($arrayDatosWs['strRuc']) && !empty($arrayDatosWs['strRuc']) )
                                                        ? $arrayDatosWs['strRuc'] : '';
        $strIpCreacion               = ( isset($arrayDatosWs['strIpCreacion']) && !empty($arrayDatosWs['strIpCreacion']) )
                                                        ? $arrayDatosWs['strIpCreacion'] : '127.0.0.1';
        $strPrefijoEmpresa           = ( isset($arrayDatosWs['strPrefijoEmpresa']) && !empty($arrayDatosWs['strPrefijoEmpresa']) )
                                                        ? $arrayDatosWs['strPrefijoEmpresa'] : 'TN';
        $strEmpresaCod               = ( isset($arrayDatosWs['strCodEmpresa']) && !empty($arrayDatosWs['strCodEmpresa']) )
                                                        ? $arrayDatosWs['strCodEmpresa'] : 10;
        $intIdPersonaEmpresaRol      = '';
        $strMsg                      = 'ok';
        $strDivMsjFoxExisteCancel    = "";
        $strDivMsjNetFiber           = "";
        $strPresentarDiv             = "";
        $boolEval                    = false;
        $strNombreTecnico            = '';
        $strEsIsB                    = 'NO';
        $strEsIpWanPyme              = 'N';
        $strTipoNegociosRestringidos = '';
        $strNombreTipoNegocioPto     = '';
        $strValidaValoresCaracts     = '';
        $strValorCaractPlanProducto  = '';
        $strFormaPagoCliente         = "";
        $boolClienteTieneDeuda       = false;
        $boolBusiness                = false;

        $strOpcionConsulta           = '';
        $strRequiereTrabajo          = 'REQUIERE TRABAJO';

        $intPuntoId     = ( isset($arrayDatosWs['intPuntoId']) && !empty($arrayDatosWs['intPuntoId']) )
                                                        ? $arrayDatosWs['intPuntoId'] : '';
        $strEstado= "Activo";
        $objItems = $this->emCome->getRepository('schemaBundle:AdmiProductoCaracteristica')->findByProductoIdyEstado($intProductoId, $strEstado);

        
        if(empty($strRuc))
        {
            throw new \Exception("Ruc no puede estar vacio, favor verificar");
        }
        $objPersona = $this->emCome->getRepository('schemaBundle:InfoPersona')->findOneBy(array('identificacionCliente' => $strRuc));
        if(!is_object($objPersona) && !empty($objPersona))
        {
            throw new \Exception("No se encontro la persona, favor verificar");
        }
        
        $objPersonaEmpresaRol = $this->emCome->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                                ->findByIdentificacionTipoRolEmpresa($strRuc, 'Cliente', $strEmpresaCod);
            
        if(is_object($objPersonaEmpresaRol))
        {
            $intIdPersonaEmpresaRol = $objPersonaEmpresaRol->getId();
        }
        else
        {
            $objPersonaEmpresaRol2 = $this->emCome->getRepository('schemaBundle:InfoPersonaEmpresaRol')
                            ->findByIdentificacionTipoRolEmpresa($strRuc, 'Pre-cliente', $strEmpresaCod);
            if(is_object($objPersonaEmpresaRol2))
            {
                $intIdPersonaEmpresaRol = $objPersonaEmpresaRol2->getId();

            }
        }
        if(empty($intIdPersonaEmpresaRol)  || $intIdPersonaEmpresaRol == '')
        {
            throw new \Exception("No se encontro el Rol de la persona, favor verificar");
        }
        
        //Buscamos persona empresa rol        
        if (!empty($intIdPersonaEmpresaRol))
        {
            $objInfoPersonaEmpresaRol = $this->emCome->getRepository('schemaBundle:InfoPersonaEmpresaRol')->find($intIdPersonaEmpresaRol);
        }
        
        if(is_object($objInfoPersonaEmpresaRol) && $strPrefijoEmpresa==='TN')
        {

            $arrayParametros     = array( 'strTipoInformacion' => "DESCRIPCION_FORMA_PAGO",
                                          'intIdPersonaRol'    => $objInfoPersonaEmpresaRol->getId(),
                                          'strEstado'          => $objInfoPersonaEmpresaRol->getEstado() );

            $strFormaPagoCliente = $this->emCome->getRepository('schemaBundle:InfoContrato')->getFormaPagoContrato($arrayParametros);
        }

        /**
         * BLOQUE VERIFICAR PRODUCTO
         *
         * Bloque que verifica lo siguiente:
         *   - Verifica si existe la característica 'VALIDO_CIERTAS_PROVINCIAS' asociada al producto, para validar si la provincia asociada al punto
         *     en sessión es válida para el ingreso del producto. (Restrincción por provincias)
         *   - Verifica si el producto tiene asociado la característica de 'VENTA_EXTERNA' para validar si existe un producto de internet contratado,
         *     para poder agregar un producto de venta externa
         */
        try
        {
            if( !empty($strEmpresaCod) && !empty($strPrefijoEmpresa) )
            {
                $arrayParametrosCaracteristicas = array( 'intIdProducto'         => $intProductoId,
                                                         'strDescCaracteristica' => 'VENTA_EXTERNA',
                                                         'strEstado'             => 'Activo' );
                $strEsVentaExterna              = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaracteristicas);

                if( !empty($strEsVentaExterna) && $strEsVentaExterna == "S" )
                {
                    $arrayParametrosVentaExterna          = array('strEmpresaCod'               => $strEmpresaCod,
                                                                  'strPrefijoEmpresa'           => $strPrefijoEmpresa,
                                                                  'intIdPtoCliente'             => $intPuntoId,
                                                                  'strNombreEstadosInternet'    => 'ESTADOS_INTERNET_NOT_IN',
                                                                  'strParametroEstadosInternet' => 'estadosServiciosNotIn');
                    $arrayValidacionServiciosVentaExterna = $this->serviceInfoServicio->validarServiciosVentaExterna($arrayParametrosVentaExterna);
                    $strExisteServicioInternet            = ( isset($arrayValidacionServiciosVentaExterna['strExisteServicioInternet'])
                                                              && !empty($arrayValidacionServiciosVentaExterna['strExisteServicioInternet']) )
                                                             ? $arrayValidacionServiciosVentaExterna['strExisteServicioInternet'] : 'N';

                    if( empty($strExisteServicioInternet) || $strExisteServicioInternet == 'N' )
                    {
                        $boolContinuar   = false;
                        $strMsg          = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' ".
                                           "style='clear: both;overflow: hidden; padding-bottom: 5px;'>No se pueden agregar productos de venta ".
                                           "externa puesto que el punto en sessión no tiene un <b>Servicio de Internet </b>contratado</div></td>".
                                           "</tr>";
                    }
                }

                // Se agregan Validaciones para el ingreso del Servicio Fox Premium, Paramount y Noggin
                $arrayProducto = $this->serviceFoxPremium->determinarProducto(array('intIdProducto'=>$intProductoId));
                if ($arrayProducto['Status'] == 'OK')
                {
                    $arrayParametrosCaracteristicas = array( 'intIdProducto'         => $intProductoId,
                                                             'strDescCaracteristica' => $arrayProducto['strDescCaracteristica'],
                                                             'strEstado'             => 'Activo' );
                    $strEsFoxPremium = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaracteristicas);
                }
                
                if( !empty($strEsFoxPremium) && $strEsFoxPremium == "S" )
                {
                    $arrayParametrosFoxPremium = array('strEmpresaCod'               => $strEmpresaCod,
                                                       'strPrefijoEmpresa'           => $strPrefijoEmpresa,
                                                       'intIdPtoCliente'             => $intPuntoId,
                                                       'strNombreEstadosInternet'    => 'ESTADOS_INTERNET_'.$arrayProducto['strDescCaracteristica'],
                                                       'strParametroEstadosInternet' => 'estadosServicios',
                                                       'strDescCaracteristica'       =>  $arrayProducto['strDescCaracteristica'],
                                                       'strMigrar'                   =>  $arrayProducto['strMigrar'],
                                                       'strMensaje'                  =>  $arrayProducto['strMensaje'],
                                                       'strNombreTecnico'            =>  $arrayProducto['strNombreTecnico']);
                    //Si tiene punto valida los servicios del mismo
                    if($intPuntoId != null)
                    {
                        $arrayValidacionServiciosFoxPremium   = $this->serviceFoxPremium->validarServiciosFoxPremium($arrayParametrosFoxPremium);
    
                        $strExisteServicioInternet            = ( isset($arrayValidacionServiciosFoxPremium['strExisteServicioInternet'])
                                                                  && !empty($arrayValidacionServiciosFoxPremium['strExisteServicioInternet']) )
                                                                 ? $arrayValidacionServiciosFoxPremium['strExisteServicioInternet'] : 'N';
    
                        $strExisteServicio                   = ( isset($arrayValidacionServiciosFoxPremium['strExisteServicio'])
                                                                  && !empty($arrayValidacionServiciosFoxPremium['strExisteServicio']) )
                                                                 ? $arrayValidacionServiciosFoxPremium['strExisteServicio'] : 'N';
    
                        $strExisteServCancel        = ( isset($arrayValidacionServiciosFoxPremium['strExisteServCancel'])
                                                                  && !empty($arrayValidacionServiciosFoxPremium['strExisteServCancel']) )
                                                                 ? $arrayValidacionServiciosFoxPremium['strExisteServCancel'] : 'N';
    
                        $strExisteServicioPaNo                   = ( isset($arrayValidacionServiciosFoxPremium['strExisteServicioPaNo'])
                                                                  && !empty($arrayValidacionServiciosFoxPremium['strExisteServicioPaNo']) )
                                                                 ? $arrayValidacionServiciosFoxPremium['strExisteServicioPaNo'] : 'N';
                    }
                    else 
                    {
                        $strExisteServicioInternet  =   'S';
                        $strExisteServicio          =   'N';
                        $strExisteServCancel        =   'N';
                        $strExisteServicioPaNo      =   'N';

                    }

                    if( empty($strExisteServicioInternet) || $strExisteServicioInternet == 'N' )
                    {
                        $boolContinuar   = false;
                        $strMsg          = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' ".
                                           "style='clear: both;overflow: hidden; padding-bottom: 5px;'>No se pueden agregar productos de ".
                                           $arrayProducto['strMensaje'] . " puesto que el punto en sessión no tiene un ".
                                           "<b>Servicio de Internet Activo </b>con FO o CO contratado</div></td>".
                                           "</tr>";
                    }
                    if( empty($strExisteServicio) || $strExisteServicio == 'S' )
                    {
                        $boolContinuar   = false;
                        $strMsg          = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' ".
                                           "style='clear: both;overflow: hidden; padding-bottom: 5px;'>No se pueden agregar productos de ".
                                           $arrayProducto['strMensaje'] . " puesto que el punto en sessión ya posee un ".
                                           "<b>Servicio ".$arrayProducto['strMensaje']." </b>registrado</div></td></tr>";
                    }
                    if( $strExisteServCancel == 'S' )
                    {
                        $strDivMsjFoxExisteCancel = "<tr name='caracts'><td colspan='4'><div id='mensajeFox' class='infomessage' ".
                                           "style='clear: both;overflow: hidden; padding-bottom: 5px;'>El Cliente posee un Servicio ".
                                           $arrayProducto['strMensaje'] . " Cancelado, se procede a tomar la informacion del ".
                                           "<b>LOGIN</b> y <b>SUSCRIBER_ID</b> existente.</div></td>".
                                           "</tr>";
                    }
                    if( empty($strExisteServicioPaNo) || $strExisteServicioPaNo == 'S' )
                    {
                        $boolContinuar   = false;
                        $strMsg          = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' ".
                                           "style='clear: both;overflow: hidden; padding-bottom: 5px;'>No se pueden agregar productos de ".
                                           $arrayProducto['strMensaje'] . " puesto que el punto en sessión posee ".
                                           "<b>Servicios en estado In-Corte </b></div></td></tr>";
                    }
                }

                $objAdmiProducto = $this->emCome->getRepository('schemaBundle:AdmiProducto')->findOneById($intProductoId);

                
                $intIdProducto = $objAdmiProducto->getId();

                /* VALIDACIÓN PARA PAQUETE HORAS DE SOPORTE */

                if( $strEmpresaCod == '10' && $strPrefijoEmpresa == 'TN')
                {

                    $strTipoProducto = $objAdmiProducto->getDescripcionProducto();

                    $objParametroDetValProd =   $emgen->getRepository('schemaBundle:AdmiParametroDet')
                    ->getOne("VALIDA_PRODUCTO_PAQUETE_HORAS_SOPORTE", //nombre parametro cab
                            "SOPORTE", "", 
                            "VALORES QUE AYUDAN A IDENTIFICAR QUE PRODUCTO ES PARA LA MUESTRA DE OPCIONES EN LA VISTA", //descripcion det
                            "", "", "", "", "", $strEmpresaCod
                        );

                    $strValorProductoPaqHoras    = $objParametroDetValProd['valor1'];
                    $strValorProductoPaqHorasRec = $objParametroDetValProd['valor2'];

                    
                    /* Validación para producto PAQUETE HORAS SOPORTE. */
                    if ($strTipoProducto == $strValorProductoPaqHoras)
                    {
                        $arrayServiciosExistentes = $this->emCome->getRepository('schemaBundle:InfoServicio')
                        ->obtenerServiciosPorDescripcionProducto($strValorProductoPaqHoras, $intPuntoId, $strEmpresaCod);

                        if ($arrayServiciosExistentes['valor'] > 0)
                        {
                            $boolContinuar = false;
                            $strMsg = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' "
                                                            . "style='clear: both; overflow: hidden; padding-bottom: 5px;'>"
                                                            . "Ya existe un servicio de ".$strValorProductoPaqHoras." creado para "  
                                                            . "esta razón social </div></td> </tr>";

                        }
                    }

                    /* Validación para producto PAQUETE HORAS SOPORTE RECARGA. */
                    if ($strTipoProducto == $strValorProductoPaqHorasRec)
                    {
                        $arrayServiciosExistentes = $this->emCome->getRepository('schemaBundle:InfoServicio')
                        ->obtenerServiciosPorDescripcionProducto($strValorProductoPaqHoras, $intPuntoId, $strEmpresaCod);

                        if ($arrayServiciosExistentes['valor'] == 0)
                        {
                            $boolContinuar   = false;
                            $strMsg = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' "
                                                        . "style='clear: both; overflow: hidden; padding-bottom: 5px;'>"
                                                        . "El servicio ".$strValorProductoPaqHorasRec.
                                                        " requiere que se agregue previamente un servicio "
                                                        . $strValorProductoPaqHoras."</div></td> </tr>";
                        }
                        if (($arrayServiciosExistentes['valor'] > 0) && (!$strUuidPaquete))
                        {
                            $boolContinuar          = false;
                            $strMsg = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' "
                                                    . "style='clear: both; overflow: hidden; padding-bottom: 5px;'>"
                                                    . "El servicio ".$strValorProductoPaqHorasRec.
                                                    " requiere tener un valor que depende del "
                                                    . $strValorProductoPaqHoras." (el UUid no se encuentra)</div></td> </tr>";
                        }

                    } 
                    
                }

                

                /*Valido que el producto a listar sea un alquiler de equipos.*/
                if ($objAdmiProducto->getDescripcionProducto() == "WIFI Alquiler Equipos")
                {
                    /*Valido que tenga un servicio tradicional activo o factible.*/
                    $arrayServicioTradicionalValidado = $this->serviceInfoServicio->validarServicioTradicional(
                                                                                        $intPuntoId,
                                                                                        $intProductoId, 
                                                                                        array('Activo', 'Factible'));
                    if (!$arrayServicioTradicionalValidado['boolInstalacionSimultanea'])
                    {
                        throw new \Exception(serialize(array(
                            'msg'=>"No puede ingresar este servicio si no existe un servicio tradicional 'Activo' o 'Factible'.",
                            'code'=>'NO_TRAD'
                        )));
                    }
                }

                $arrayParametrosCaracteristicas = array( 'intIdProducto'         => $intProductoId,
                                                         'strDescCaracteristica' => 'NETFIBER',
                                                         'strEstado'             => 'Activo' );
                $strEsNetFiber                  = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaracteristicas);

                if( !empty($strEsNetFiber) && $strEsNetFiber == "S" )
                {
                    $arrayParametrosNetFiber = array(  'strEmpresaCod'                => $strEmpresaCod,
                                                       'strPrefijoEmpresa'            => $strPrefijoEmpresa,
                                                       'intIdPtoCliente'              => $intPuntoId,
                                                       'strNombreEstadosInternet'     => 'ESTADOS_INTERNET_NETFIBER',
                                                       'strParametroValorUltimaMilla' => 'ULTIMAS_MILLAS_INTERNET_NETFIBER',
                                                       'strParametroEstadosInternet'  => 'estadosServicios');

                    $arrayValidacionServiciosNetFiber  = $this->serviceInfoServicio->validarServicioPorEstadoServUm($arrayParametrosNetFiber);

                    $strExisteServicioInternet            = ( isset($arrayValidacionServiciosNetFiber['strExisteServicioInternet'])
                                                              && !empty($arrayValidacionServiciosNetFiber['strExisteServicioInternet']) )
                                                             ? $arrayValidacionServiciosNetFiber['strExisteServicioInternet'] : 'N';

                    if( empty($strExisteServicioInternet) || $strExisteServicioInternet == 'N' )
                    {
                        $boolContinuar   = false;
                        $strMsg          = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' ".
                                           "style='clear: both;overflow: hidden; padding-bottom: 5px;'>No se puede agregar producto ".
                                           $objAdmiProducto->getDescripcionProducto().
                                           " puesto que el punto en sessión no tiene un <b>Servicio de Internet Activo ".
                                           "</b>con FO, CO, RA contratado</div></td>".
                                           "</tr>";
                    }
                }

                $arrayParametrosCaracteristicas = array( 'intIdProducto'         => $intProductoId,
                                                         'strDescCaracteristica' => 'APWIFI',
                                                         'strEstado'             => 'Activo' );
                $strEsApWifi                    = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaracteristicas);

                if( !empty($strEsApWifi) && $strEsApWifi == "S" )
                {
                    $arrayParametrosApWifi = array(  'strEmpresaCod'                => $strEmpresaCod,
                                                     'strPrefijoEmpresa'            => $strPrefijoEmpresa,
                                                     'intIdPtoCliente'              => $intPuntoId,
                                                     'strNombreEstadosInternet'     => 'ESTADOS_INTERNET_APWIFI',
                                                     'strParametroValorUltimaMilla' => 'ULTIMAS_MILLAS_INTERNET_APWIFI',
                                                     'strParametroEstadosInternet'  => 'estadosServicios');

                    $arrayValidacionServiciosApWifi  = $this->serviceInfoServicio->validarServicioPorEstadoServUm($arrayParametrosApWifi);

                    $strExisteServicioInternet            = ( isset($arrayValidacionServiciosApWifi['strExisteServicioInternet'])
                                                              && !empty($arrayValidacionServiciosApWifi['strExisteServicioInternet']) )
                                                             ? $arrayValidacionServiciosApWifi['strExisteServicioInternet'] : 'N';

                    if( empty($strExisteServicioInternet) || $strExisteServicioInternet == 'N' )
                    {
                        $boolContinuar   = false;
                        $strMsg          = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' ".
                                           "style='clear: both;overflow: hidden; padding-bottom: 5px;'>No se puede agregar producto ".
                                           $objAdmiProducto->getDescripcionProducto().
                                           " puesto que el punto en sessión no tiene un <b>Servicio de Internet Activo ".
                                           "</b>con FO contratado</div></td>".
                                           "</tr>";
                    }
                }

                $arrayParametrosCaracteristicas = array( 'intIdProducto'         => $intProductoId,
                                                         'strDescCaracteristica' => 'NETHOME',
                                                         'strEstado'             => 'Activo' );
                $strEsNetHome                   = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaracteristicas);

                if( !empty($strEsNetHome) && $strEsNetHome == "S" )
                {
                    $arrayParametrosNetHome = array( 'strEmpresaCod'                => $strEmpresaCod,
                                                     'strPrefijoEmpresa'            => $strPrefijoEmpresa,
                                                     'intIdPtoCliente'              => $intPuntoId,
                                                     'strNombreEstadosInternet'     => 'ESTADOS_INTERNET_NETHOME',
                                                     'strParametroValorUltimaMilla' => 'ULTIMAS_MILLAS_INTERNET_NETHOME',
                                                     'strParametroEstadosInternet'  => 'estadosServicios');

                    $arrayValidacionServiciosNetHome  = $this->serviceInfoServicio->validarServicioPorEstadoServUm($arrayParametrosNetHome);

                    $strExisteServicioInternet            = ( isset($arrayValidacionServiciosNetHome['strExisteServicioInternet'])
                                                              && !empty($arrayValidacionServiciosNetHome['strExisteServicioInternet']) )
                                                             ? $arrayValidacionServiciosNetHome['strExisteServicioInternet'] : 'N';

                    if( empty($strExisteServicioInternet) || $strExisteServicioInternet == 'N' )
                    {
                        $boolContinuar   = false;
                        $strMsg          = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' ".
                                           "style='clear: both;overflow: hidden; padding-bottom: 5px;'>No se puede agregar producto ".
                                           $objAdmiProducto->getDescripcionProducto().
                                           " puesto que el punto en sessión no tiene un <b>Servicio de Internet Activo ".
                                           "</b>con FO contratado</div></td>".
                                           "</tr>";
                    }
                }

                $objProductoValidar   = $this->emCome->getRepository('schemaBundle:AdmiProducto')->find($intProductoId);
                if(is_object($objProductoValidar))
                {
                    $arrayParamsVerificaRazonSocial = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->getOne('PARAMS_PRODS_TN_GPON',
                                                                         '',
                                                                         '',
                                                                         '',
                                                                         'PRODUCTOS_VERIFICA_RAZON_SOCIAL',
                                                                         $objProductoValidar->getId(),
                                                                         '',
                                                                         '',
                                                                         '',
                                                                         $strEmpresaCod);
                    if(isset($arrayParamsVerificaRazonSocial) && !empty($arrayParamsVerificaRazonSocial))
                    {
                        $objPuntoSMB = $this->emCome->getRepository('schemaBundle:InfoPunto')->findOneById($intPuntoId);
                        if(is_object($objPuntoSMB) && is_object($objPuntoSMB->getPersonaEmpresaRolId()))
                        {
                            //Se obtienen los tipos de negocio restringidos para el producto 'INTERNET SMALL BUSINESS'
                            $arrayAdmiParametroDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                               ->get('LISTA_RAZON_SOCIAL_SMB',
                                                                     'COMERCIAL',
                                                                     '',
                                                                     '',
                                                                     $objPuntoSMB->getPersonaEmpresaRolId()->getId(), //persona_empresa_rol_id
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     '',
                                                                     '');
                            if(empty($arrayAdmiParametroDet))
                            {
                                $boolContinuar = false;
                                $strMsg        = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' ".
                                                 "style='clear: both;overflow: hidden; padding-bottom: 5px;'>"
                                                 ."No se puede agregar el producto ".$objProductoValidar->getDescripcionProducto().
                                                 ", debido a que la razón social del punto no esta considerada para la activación".
                                                 " de este tipo de producto</div></td></tr>";
                            }
                        }
                        
                    }
                }
                
                if( $boolContinuar )
                {
                    $arrayParametrosCaracteristicas['strDescCaracteristica'] = 'VALIDO_CIERTAS_PROVINCIAS';
                    $strValidoCiertasProvincias                              = $this->serviceUtilidades
                                                                               ->validarCaracteristicaProducto($arrayParametrosCaracteristicas);

                    //Verifico si la venta del producto está restringuido por provincias
                    if( !empty($strValidoCiertasProvincias) && $strValidoCiertasProvincias == "S" )
                    {
                        $objAdmiProducto = $this->emCome->getRepository('schemaBundle:AdmiProducto')->findOneById($intProductoId);

                        if( is_object($objAdmiProducto) )
                        {
                            $strCodigoProducto = $objAdmiProducto->getCodigoProducto();

                            if( !empty($strCodigoProducto) )
                            {
                                //Obtengo las provincias válidas para la venta del producto
                                $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('PRODUCTOS_VALIDO_CIERTAS_PROVINCIAS',
                                                                      'COMERCIAL',
                                                                      'INGRESO_SERVICIO',
                                                                      '',
                                                                      $strCodigoProducto,
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      $strEmpresaCod);

                                if( !empty($arrayParametrosDet) )
                                {
                                    $strProvincias   = "";
                                    $arrayProvincias = array();

                                    foreach( $arrayParametrosDet as $arrayParametro )
                                    {
                                        if( isset($arrayParametro['valor2']) && !empty($arrayParametro['valor2']) )
                                        {
                                            if( !empty($strProvincias) )
                                            {
                                                $strProvincias .= ','; 
                                                trim($arrayParametro['valor2']);
                                            }

                                            $strProvincias     .= trim($arrayParametro['valor2']);
                                            $arrayProvincias[] = trim($arrayParametro['valor2']);
                                        }
                                    }

                                    if( !empty($arrayProvincias) )
                                    {
                                        $arrayParametrosPuntoVentaExterna = array('arrayNombreProvincias' => $arrayProvincias,
                                                                                  'intIdPunto'            => $intPuntoId);

                                        $objInfoPunto = $this->emCome->getRepository('schemaBundle:InfoPunto')
                                                           ->validarProvinciaPuntoVentaExterna($arrayParametrosPuntoVentaExterna);

                                        if( !is_object($objInfoPunto) )
                                        {
                                            $boolContinuar   = false;
                                            $strMsg          = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' ".
                                                               "style='clear: both;overflow: hidden; padding-bottom: 5px;'>Este producto no puede ".
                                                               "ser vendido al cliente en sessi&oacute;n, puesto que existe restrincci&oacute;n de ".
                                                               "venta en la provincia a la que pertenece el punto.<br/>Las provincias permitidas ".
                                                               "para la venta del producto son: <b>".$strProvincias."</b></div></td></tr>";
                                        }//( !is_object($objInfoPunto) )
                                    }
                                    else
                                    {
                                        throw new \Exception('No se encontraron las provincias en las cuales se puede vender el producto.');
                                    }//( !empty($arrayProvincias) )
                                }
                                else
                                {
                                    throw new \Exception('No se encontraron los parámetros adecuados para validar la venta del producto.');
                                }//( !empty($arrayParametrosDet) )
                            }
                            else
                            {
                                throw new \Exception('El producto ('.$intProductoId.') no tiene un código asociado.');
                            }//( !empty($strCodigoProducto) )
                        }
                        else
                        {
                            throw new \Exception('No se encontró el producto con id ('.$intProductoId.')');
                        }//( is_object($objAdmiProducto) )
                    }//( !empty($strValidoCiertasProvincias) && $strValidoCiertasProvincias == "S" )
                }//( $boolContinuar )
            }
            else
            {
                throw new \Exception('No se encontró una empresa en sessión.');
            }//( !empty($strEmpresaCod) )
        }
        catch(\Exception $e)
        {
            $boolContinuar = false;

            if (is_array(unserialize($e->getMessage())))
            {
                $arrayError = unserialize($e->getMessage());
                $strMsg = "<tr>
                                <td colspan='4'>
                                    <div id=\"mensajeError\" class=\"alert alert-danger animated fadeIn\" role=\"alert\">
                                        <strong>ALERTA!</strong> ". $arrayError['msg']."
                                    </div>
                                </td>
                          </tr>";

            }
            else
            {
                $strMsg = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' style='clear: both; overflow: hidden; " .
                    "padding-bottom: 5px;'>Hubo un problema al validar las caracter&iacute;sticas del producto</div></td>" .
                    "</tr>";
                $this->serviceUtil->insertError('Telcos+',
                    'InfoPlanCaracteristicaController:listarCaracteristicasPorProductoAction',
                    'Error al verificar las características asociadas al producto. - ' . $e->getMessage(),
                    $strUsrCreacion,
                    $strIpCreacion);
            }
        }
        /**
         * FIN BLOQUE VERIFICAR PRODUCTO
         */


        if( $boolContinuar )
        {
            $strRequiereUltimaMillaProd         = "SI";
            $arrayParamsCaractSinUltimaMilla    = array('intIdProducto'         => $intProductoId,
                                                        'strDescCaracteristica' => 'NO_REQUIERE_ULTIMA_MILLA',
                                                        'strEstado'             => 'Activo' );
            $strNoRequiereUltimaMillaProd       = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParamsCaractSinUltimaMilla);

            if( !empty($strNoRequiereUltimaMillaProd) && $strNoRequiereUltimaMillaProd == "S" )
            {
                $strRequiereUltimaMillaProd = "NO";
            }

            $objProducto   = $this->emCome->getRepository('schemaBundle:AdmiProducto')->find($intProductoId);

            if(is_object($objProducto))
            {
                $strNombreTecnico = $objProducto->getNombreTecnico();
            }

            $intI       = 0;
            $intJ       = 0;

            $strFuncionAux     = "";

            $strPresentarDiv = "<tr name='caracts'><td colspan='4'></td></tr>"; // Definción del ancho por defecto para la primera columna

            // Se muestra Div de mensaje informativo que el Cliente ya posee un Servicio FoxPremium en estado Cancel y que se procede
            // a tomar la informacion del LOGIN (USUARIO_FOX) y SUSCRIBER_ID (SSID_FOX) existente para el nuevo servicio FOX ingresado.
            if($strDivMsjFoxExisteCancel!='')
            {
                $strPresentarDiv .= $strDivMsjFoxExisteCancel;
            }
            //Se define campo oculto con el valor del estado inicial del producto.
            $strPresentarDiv .= "<tr name='caracts'><td><input type='hidden' "
                                ."value=" . $objProducto->getEstadoInicial() . " name='estadoInicial' id='estadoInicial'/>";

            $boolEsPesudoPe       = false;
            $objTipoMedioPseudoPe = null;
            $strUltimaMilla       = '';
            $boolEsDCHosting      = false;

            if($strPrefijoEmpresa == 'TN')
            {
                $objInfoPuntoDatoAdicional  = $this->emCome->getRepository("schemaBundle:InfoPuntoDatoAdicional")->findOneByPuntoId($intPuntoId);

                if(is_object($objInfoPuntoDatoAdicional) && $objInfoPuntoDatoAdicional->getElementoId())
                {
                    $intElementoEdificio = $objInfoPuntoDatoAdicional->getElementoId()->getId();

                    if($objInfoPuntoDatoAdicional->getDependeDeEdificio() == 'S' && $intElementoEdificio )
                    {
                        $objDetalleElementoAministra =    $this->emInfraestructura->getRepository("schemaBundle:InfoDetalleElemento")
                                                                            ->findOneBy(array('detalleNombre'  =>  'ADMINISTRA',
                                                                                              'estado'         =>  'Activo',
                                                                                              'elementoId'     =>  $intElementoEdificio
                                                                                             )
                                                                                       );

                        $objDetalleElementoEsPseudoPe =   $this->emInfraestructura->getRepository("schemaBundle:InfoDetalleElemento")
                                                                            ->findOneBy(array('detalleNombre'  =>  'TIPO_ELEMENTO_RED',
                                                                                              'estado'         =>  'Activo',
                                                                                              'elementoId'     =>  $intElementoEdificio
                                                                                             )
                                                                                       );
                        //Si existe registro de elemento red siginifica que es de tipo pseudoPe
                        if( (is_object($objDetalleElementoEsPseudoPe) && is_object($objDetalleElementoAministra)) &&
                            $objDetalleElementoEsPseudoPe->getDetalleValor() == 'PSEUDO_PE' &&
                            $objDetalleElementoAministra->getDetalleValor()  == 'CLIENTE')
                        {
                            $boolEsPesudoPe = true;
                        }

                        //Se busca que tipo de Ultima milla corresponde al flujo de acuerdo a la configuracion del edificio creado
                        if($boolEsPesudoPe)
                        {
                            //Se determina la Ultima Milla a ser usada para uno de los 2 esquemas de pseudope
                            $objDetalleElementoTipoAdmin  = $this->emInfraestructura->getRepository("schemaBundle:InfoDetalleElemento")
                                                                              ->findOneBy(array('detalleNombre'  =>  'TIPO_ADMINISTRACION',
                                                                                                'estado'         =>  'Activo',
                                                                                                'elementoId'     =>  $intElementoEdificio
                                                                                               )
                                                                                         );
                            //Si es PseudoPe se muestra la ultima milla de acuerdo al tipo de administracion que tenga el edificio
                            $strPresentarDiv .= "<tr name='caracts'><td><label>* Última Milla:</label></td><td style='padding-left: 5px;'>"
                                             .  "<select name='ultimaMillaIdProd' id='ultimaMillaIdProd'>";
                            if(is_object($objDetalleElementoTipoAdmin))
                            {
                                //Obtengo la ultima milla de acuerdo al tipo de flujo pseudope que requiera ejecutarse
                                $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('FLUJO_PSEUDOPE',
                                                                      'COMERCIAL',
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      $objDetalleElementoTipoAdmin->getDetalleValor(),
                                                                      '',
                                                                      '',
                                                                      '',
                                                                      $strEmpresaCod);

                                if(!empty($arrayParametrosDet))
                                {
                                    foreach( $arrayParametrosDet as $arrayParametro )
                                    {
                                        if( isset($arrayParametro['valor1']) && !empty($arrayParametro['valor1']) )
                                        {
                                            $strUltimaMilla = $arrayParametro['valor1'];

                                            $objTipoMedioPseudoPe = $this->emInfraestructura->getRepository("schemaBundle:AdmiTipoMedio")
                                                                                      ->findOneByNombreTipoMedio($strUltimaMilla);
                                            if(is_object($objTipoMedioPseudoPe))
                                            {
                                                $strPresentarDiv .= "<option value='".$objTipoMedioPseudoPe->getId()."'>"
                                                                 .  "".$objTipoMedioPseudoPe->getNombreTipoMedio()."</option>";
                                            }
                                            else
                                            {
                                                $strPresentarDiv .= "<option value='0'>NA</option>";
                                            }
                                        }
                                        else
                                        {
                                            $strPresentarDiv .= "<option value='0'>NA</option>";
                                        }
                                    }
                                }
                                else
                                {
                                    $strPresentarDiv .= "<option value='0'>NA</option>";
                                }
                                
                                $arrayParamsVerificaUmTercerizada   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                ->getOne('PARAMS_PRODS_TN_GPON',
                                                                                         '',
                                                                                         '',
                                                                                         '',
                                                                                         'PRODUCTOS_VERIFICA_UM_TERCERIZADA',
                                                                                         $objProducto->getId(),
                                                                                         '',
                                                                                         '',
                                                                                         '',
                                                                                         $strEmpresaCod);
                                if(isset($arrayParamsVerificaUmTercerizada) && !empty($arrayParamsVerificaUmTercerizada)
                                    && $objDetalleElementoTipoAdmin->getDetalleValor() === 'TERCERIZADA')
                                {
                                    $boolContinuar   = false;
                                    $strMsg          = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' "
                                                        . "style='clear: both; overflow: hidden; padding-bottom: 5px;'>"
                                                        . "El producto no pudo ser instalado debido a que el punto su"
                                                        . " última milla es TERCERIZADO </div></td> </tr>";
                                    $strPresentarDiv = "";
                                }
                            }
                            $strPresentarDiv .= "</select>";
                        }
                    }
                }

                //Determinar tipo de Subgrupo del producto CLOUD IAAS
                if($strNombreTecnico == 'HOSTING' )
                {
                    //Determinar si el producto es el destinado a realizar Flujo
                    $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                    ->get('PRODUCTOS HOSTING RECURSOS',
                                                          'COMERCIAL',
                                                          '',
                                                          '',
                                                          $objProducto->getId(),
                                                          '',
                                                          '',
                                                          '',
                                                          '',
                                                          $strEmpresaCod);

                    if(!empty($arrayParametrosDet))
                    {
                        $boolEsDCHosting = true;
                    }
                }
            }

            //se verifica si el servicio es tipo de red GPON
            $booleanTipoRedGpon = false;
            if($strPrefijoEmpresa == 'TN' && !empty($strTipoRed))
            {
                $arrayParVerTipoRed = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')->getOne('NUEVA_RED_GPON_TN',
                                                                                                        'COMERCIAL',
                                                                                                        '',
                                                                                                        'VERIFICAR TIPO RED',
                                                                                                        'VERIFICAR_GPON',
                                                                                                        $strTipoRed,
                                                                                                        '',
                                                                                                        '',
                                                                                                        '');
                if(isset($arrayParVerTipoRed) && !empty($arrayParVerTipoRed))
                {
                    $booleanTipoRedGpon = true;
                }
            }
            
            //Si el edificio tiene configuracion pseudope la ultima milla sera asignada automaticamente en la creacion del Servicio
            if(!$boolEsPesudoPe)
            {
                //  Se define el combo con las últimas millas para el servicio Enlace.
                if(($strPrefijoEmpresa !== 'TN' || ($objProducto->getEsEnlace() && $objProducto->getEsEnlace() == 'SI'))
                    || ($strPrefijoEmpresa === 'TN' && $objProducto->getNombreTecnico() === "IPSB")
                    || ($strPrefijoEmpresa === 'TNP' && $objProducto->getNombreTecnico() === "IPSB")
                  )
                {
                    $strCssVerFilaUltimaMilla   = "";
                    $strPresentarDivOption      = "";

                    if($strRequiereUltimaMillaProd == "NO")
                    {
                        $strCssVerFilaUltimaMilla = " style='display:none;' ";
                    }
                    else
                    {
                        //1- Se comprueba si es producto especial definido en la parametros con el objetivo de formar combo de UM.
                        $strPresentarDivOption      = "";
                        $strUltimaMilla             = "";
                        $strTipoNegocioIl           = "";
                        $boolEsProductoEspecial     = false;
                        $arrayTipoMedio     = $this->emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')->findByEstado('Activo');

                        //Se obtienen la ultimas milla correspondiente al producto especial.
                        $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne('PRODUCTOS_ESPECIALES_UM',
                                                                 'COMERCIAL',
                                                                 '',
                                                                 '',
                                                                 strtoupper(trim($objProducto->getNombreTecnico())),
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 '',
                                                                 $strEmpresaCod);

                        foreach($arrayTipoMedio as $entityTipoMedio)
                        {
                            $intIdTipoMedio     = $entityTipoMedio->getId();
                            $strNombreTipoMedio = $entityTipoMedio->getNombreTipoMedio();

                            if($arrayParametrosDet && count($arrayParametrosDet) > 0)
                            {
                                if(isset($arrayParametrosDet['valor2']) && !empty($arrayParametrosDet['valor2']) &&
                                    $arrayParametrosDet['valor2'] == $strNombreTipoMedio)
                                {
                                    $strUltimaMilla = $arrayParametrosDet['valor2'];
                                    $strTipoNegocioIl = $arrayParametrosDet['valor5'];
                                    $strPresentarDivOption = "<option value='$intIdTipoMedio'>$strUltimaMilla</option>";
                                }

                                if(!empty($strPresentarDivOption))
                                {
                                    $boolEsProductoEspecial = true;
                                    break;
                                }
                            }
                            else
                            {
                                break;
                            }
                        }

                        if(is_object($objProducto)
                            && ($objProducto->getNombreTecnico() === 'INTERNET SMALL BUSINESS' || $objProducto->getNombreTecnico() === 'TELCOHOME'))
                        {
                            $strEsIsB = 'SI';

                            //Obtengo el tipo de negocio del punto.
                            $objGrupoNegocio= $this->emCome->getRepository('schemaBundle:InfoPunto')->getGrupoNegocioByPuntoId($intPuntoId);

                            if(is_object($objGrupoNegocio))
                            {
                                $strNombreTipoNegocioPto = $objGrupoNegocio->getNombreTipoNegocio();
                            }

                            //Se obtienen los tipos de negocio restringidos para el producto 'INTERNET SMALL BUSINESS'
                            $arrayAdmiParametroDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->get('RESTRICCION_TIPO_NEGOCIO',
                                                                      'COMERCIAL',
                                                                      '',
                                                                      'TIPO_NEGOCIO',
                                                                      '',
                                                                      '',
                                                                      $strPrefijoEmpresa,
                                                                      $strEmpresaCod,
                                                                      '',
                                                                      '');

                            if($arrayAdmiParametroDet && count($arrayAdmiParametroDet) > 0)
                            {
                                foreach($arrayAdmiParametroDet as $arrayParametro)
                                {
                                    if (isset($arrayParametro['valor1']) && ($arrayParametro['valor1'] != null))
                                    {
                                        $strTipoNegociosRestringidos .= $arrayParametro['valor1'] .'|';
                                    }
                                }//( $arrayAdmiParametroDet as $arrayParametro )

                                $strTipoNegociosRestringidos = (isset($strTipoNegociosRestringidos) && ($strTipoNegociosRestringidos != null)) ?
                                                                substr($strTipoNegociosRestringidos, 0, strlen($strTipoNegociosRestringidos)-1 ) : '';
                            }//($arrayAdmiParametroDet && count($arrayAdmiParametroDet) > 0)
                            
                            //Validación del producto SMALL BUSINESS CENTROS COMERCIAL el punto sea un centro comercial.
                            $arrayParamsVerificaCouFijaSmb  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->getOne('PARAMS_PRODS_TN_GPON',
                                                                                 '',
                                                                                 '',
                                                                                 '',
                                                                                 'PRODUCTOS_VERIFICA_FACTIB_CC',
                                                                                 $objProducto->getId(),
                                                                                 '',
                                                                                 '',
                                                                                 '',
                                                                                 $strEmpresaCod);
                            if(isset($arrayParamsVerificaCouFijaSmb) && !empty($arrayParamsVerificaCouFijaSmb))
                            {
                                $boolValidacionEdificio     = false;
                                $objInfoPuntoDatoAdicional  = $this->emCome->getRepository("schemaBundle:InfoPuntoDatoAdicional")
                                                                                                                ->findOneByPuntoId($intPuntoId);

                                if(is_object($objInfoPuntoDatoAdicional) && $objInfoPuntoDatoAdicional->getDependeDeEdificio() == 'S'
                                   && is_object($objInfoPuntoDatoAdicional->getElementoId()))
                                {
                                    $strModeloElemento  = $objInfoPuntoDatoAdicional
                                                           ->getElementoId()
                                                           ->getModeloElementoId()
                                                           ->getNombreModeloElemento();
                                    if(isset($strModeloElemento) || $strModeloElemento === 'CENTRO COMERCIAL')
                                    {
                                        $boolValidacionEdificio = true;
                                    }
                                }
                                else
                                {
                                    $boolValidacionEdificio = false;
                                }
                                if(!$boolValidacionEdificio)
                                {
                                    $boolContinuar   = false;
                                    $strMsg          = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' "
                                                        . "style='clear: both; overflow: hidden; padding-bottom: 5px;'>"
                                                        . "El producto no pudo ser instalado debido a que el punto no es"
                                                        . " un centro comercial</div></td> </tr>";
                                    $strPresentarDiv = "";
                                }
                            }
                        }

                        if(!$boolEsProductoEspecial)
                        {
                            $boolEsFlujoDC = false;

                        //Se obtienen las ultimas millas que no seran mostradas dentro de un Flujo Normal
                            $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->get('ULTIMAS_MILLLAS_EXCEPCIONES',
                                                                  'COMERCIAL',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  $strEmpresaCod);

                            //Verificar si es producto complemantario a HOUSING y HOSTING
                            if($objProducto->getGrupo()    && 
                               strpos($objProducto->getGrupo(),'DATACENTER')!==false && 
                               $strNombreTecnico == 'INTERNETDC' || $strNombreTecnico == 'DATOSDC' || $strNombreTecnico == 'INTERNET DC SDWAN'
                               || $strNombreTecnico == 'DATOS DC SDWAN' )
                            {
                                $strPresentarDiv .= "<tr name='caracts'><td><label>* Tipo Solución:</label></td>"
                                                 .  "<td style='padding-left: 5px;'>";
                                $strPresentarDiv .= "<select class='tipoSolucion' name='tipoSolucion' id='tipoSolucion' onchange='setUM()'>"
                                                  . "<option value='0'>Seleccione</option>";
                                $strPresentarDiv .= "<option value='HOUSING'>HOUSING</option><option value='HOSTING'>HOSTING</option>";
                                $strPresentarDiv .= "</select></td></tr>";

                                $boolEsFlujoDC        = true;

                                $arrayParametrosDetDC = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                  ->get('ULTIMAS MILLAS INTERNET Y DATOS',
                                                                        'COMERCIAL',
                                                                        '',
                                                                        $objProducto->getDescripcionProducto(),
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $strEmpresaCod);
                            }

                            if($booleanTipoRedGpon)
                            {
                                $arrayParametrosTipoRed = array('intIdProducto'         => $intProductoId,
                                                                'strDescCaracteristica' => 'TIPO_RED',
                                                                'strEstado'             => 'Activo');
                                $strEsProductoGpon      = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosTipoRed);
                                if(!empty($strEsProductoGpon) && $strEsProductoGpon == 'S')
                                {
                                    $arrayParametrosDetGPON = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->get('NUEVA_RED_GPON_TN',
                                                                              'COMERCIAL',
                                                                              '',
                                                                              '',
                                                                              $objProducto->getNombreTecnico(),
                                                                              '',
                                                                              '',
                                                                              '',
                                                                              'ULTIMA_MILLA_GPON_TN',
                                                                              $strEmpresaCod);
                                }
                            }
                            foreach($arrayTipoMedio as $entityTipoMedio)
                            {
                                $intIdTipoMedio   = $entityTipoMedio->getId();
                                $strNombre        = $entityTipoMedio->getNombreTipoMedio();

                                /*
                                 * Se valida para que los productos con tipo de Red GPON, la lista de últma milla solo sean con las que
                                 * se encuentran disponibles en el listado del detalle del parametro 'ULTIMA_MILLA_GPON_TN'.
                                */
                                if(isset($arrayParametrosDetGPON) && !empty($arrayParametrosDetGPON) && is_array($arrayParametrosDetGPON))
                                {
                                    foreach($arrayParametrosDetGPON as $arrayItemGPON)
                                    {
                                        if($arrayItemGPON['valor2'] == $strNombre && $arrayItemGPON['estado']=='Activo')
                                        {
                                            $strTempPresentarDivOption .= "<option value='$intIdTipoMedio'>$strNombre</option>";
                                        }
                                    }
                                    if(!empty($strTempPresentarDivOption))
                                    {
                                        $strPresentarDivOption = $strTempPresentarDivOption;
                                    }
                                }
                                if(!$boolEsFlujoDC)
                                {
                                    $boolSeMuestraUm  = true;

                                    if(!empty($arrayParametrosDet))
                                    {
                                        foreach($arrayParametrosDet as $arrayParametro)
                                        {
                                            if(isset($arrayParametro['valor1']) && !empty($arrayParametro['valor1']) 
                                                && $arrayParametro['valor1'] == $strNombre)
                                            {
                                                $boolSeMuestraUm = false;
                                            }
                                        }
                                    }
                                }
                                else//si el flujo es de DC ( internet o datos ) solo se mostrara las ultimas millas configuradas en los parametros
                                {
                                    $boolSeMuestraUm = false;

                                    if(!empty($arrayParametrosDetDC))
                                    {
                                        foreach($arrayParametrosDetDC as $arrayParametro)
                                        {
                                            if(isset($arrayParametro['valor1'])  &&
                                               !empty($arrayParametro['valor1']) &&
                                               $arrayParametro['valor1'] == $strNombre
                                              )
                                            {
                                                $boolSeMuestraUm = true;
                                                break;
                                            }
                                        }
                                    }
                                }

                                if($boolSeMuestraUm)
                                {
                                    $strPresentarDivOption .= "<option value='$intIdTipoMedio'>$strNombre</option>";
                                }
                            }
                        }//(!$boolEsProductoEspecial)
                    }

                    $strCaractDisabled = '';

                    if($boolEsFlujoDC)
                    {
                        $strCaractDisabled = 'disabled';
                    }

                    $strPresentarDiv .= "<div class='row'><tr".$strCssVerFilaUltimaMilla." name='caracts'><td><div class='col-lg-2'>"
                                     . "<label>* Última Milla:</label></div></td>"
                                        ."<td style='padding-left: 5px;'>";
                    $strPresentarDiv .= "<div class='col-lg-2'><select  $strCaractDisabled name='ultimaMillaIdProd' id='ultimaMillaIdProd'>"
                                        . "<option value='0'>Seleccione</option>";
                    $strPresentarDiv .= $strPresentarDivOption;
                    $strPresentarDiv .= "</select></div>";
                }
                else
                {
                    // Valor null para el dato última milla en producto que no requiere enlace
                    $strPresentarDiv .= '<div class="row"><tr name="caracts"><td colspan="4"><input type="hidden" value="" name="ultimaMillaIdProd" '.
                                        'id="ultimaMillaIdProd"/>';
                }
            }

            $strPresentarDiv .= "</td><td></td><td></td></tr></div>";

            if( $objProducto->getNombreTecnico() == "FINANCIERO" )
            {
                $strPresentarDiv .= '<tr id="lb_cantidad" name="caracts">'
                                    .'<td>'
                                        .'<label class="required" >* Cantidad:</label></td><td>'
                                        .'<input type="text" class="campo-obligatorio" name="cantidad" id="cantidad" '
                                                .'onkeypress="return validaSoloNumeros(event, this);" value="1"/></td><td>'
                                        .'<input type="hidden" value="0" name="cantidad_caracteristicas" id="cantidad_caracteristicas"/>'
                                    .'</td><td></td><td></td>'
                                    .'</tr>'.
                                    '<tr id="lb_precio" name="caracts">'
                                    .'<td>'
                                        .'<label class="required" >* Precio:</label></td><td>'
                                        .'<input type="text" class="campo-obligatorio" name="precio_unitario" id="precio_unitario" '
                                                .'onkeypress="return validaNumerosConDecimales(event, this);"/></td><td>'
                                    .'</td><td></td><td></td>'
                                    .'</tr>';
            }
            else
            {
                $strFuncionPrecio = $objProducto->getFuncionPrecio();

                if($strFuncionPrecio != "" )
                {
                    // Se procesa la indentación de la Función precio para mostrarla en una ventana modal.
                    $strFuncionAux    = $strFuncionPrecio;
                    $strFuncionPrecio = ' '.preg_replace('/\s+/', ' ', $strFuncionPrecio); // Se ajustan los espacios dobles a un espacio

                    $strPresentarDiv.= "<div class='row'><tr name='caracts'><td><div class='col-lg-2' ><label>Funci&oacute;n precio:"
                                                    . "</label></div></td><td style='padding-left: 555px;'>";
                    $strPresentarDiv.= '<textarea  id = "textarea" readonly="readonly" rows="1" cols="45" style="overflow:hidden; resize:none">';

                    if(strlen($strFuncionAux) > 55)
                    {
                        // Se muestran solo 70 caracteres
                        $strPresentarDiv.= substr(preg_replace('/\r\n/', ' ', preg_replace('/\s+/', ' ', $strFuncionAux)), 0, 51) . ' ...';
                    }
                    else
                    {
                        $strPresentarDiv.= $strFuncionAux;
                    }

                    $strPresentarDiv.= "</textarea></td><td style='vertical-align:top;'>";
                    // Componentes para la presentación en modo popup de la función precio organizada
                    $strPresentarDiv.=  '<a class="btn btn-default btn-sm" onclick="getFuncion()" role="button">
                                        <i class="fa fa-search" aria-hidden="true"></i> Ver Función</a>'
                                        . ' <div id="openModal" class="modal fade" aria-labelledby="myModalLabel" aria-hidden="true"> '
                                        . '  <div class="modal-dialog" id="modalPrecio">'
                                        . '     <div class="modal-content">'
                                        . '       <div class="modal-header">'
                                        . '         <button type="button" class="close" onclick="cerrarModal()">&times;</button> '
                                        . '         <h4 class="modal-title" id="myModalLabel">Función Precio</h4>'
                                        . '          </div>'
                                        . '       <div class="modal-body">'
                                        . '         <textarea readonly="readonly" rows="25" cols="80"> '
                                        .           $this->tabularFuncionPrecio($strFuncionPrecio)
                                        . '         </textarea> '
                                        . '          </div>'
                                        . '     </div> '
                                        . '     </div> '
                                        . ' </div> ';
                    $strPresentarDiv.= "</td><td></td></tr></div><br>";
                }
                $strPresentarDiv.= "<tr name='caracts'><td><div class='row'><div class='col-lg-2'><label>Cantidad:</label></div></td><td>";

                if($strPrefijoEmpresa === 'TN' || $strPrefijoEmpresa === 'TNP' || $strPrefijoEmpresa === 'TNG')
                {
                    $strPresentarDiv.= "<div class='col-lg-2'><input type='text' value='1' name='cantidad' 
                                            id='cantidad' onkeypress='return validaSoloNumeros(event);'
                                               onchange='actualizaTotal()'/></div></div></td><td></td><td></td></tr><br>";
                }
                else
                {
                    $strAtributoReadOnly = "";
                    $strPresentarDiv.= "<input type='text' value='1' name='cantidad' id='cantidad' /*onkeypress='validate(event)*/'
                                        $strAtributoReadOnly /></td><td></td><td></td></tr>";
                }

                //Determinar si un producto es multi-caracteristica y requiere una configuración especial
                $boolMultipleCaracteristica = $this->servicioTecnico->isContieneCaracteristica($objProducto,'ES_MULTIPLE_CARACTERISTICAS');
                $strEsPoolCompleto          = 'NO';

                //Validar que tipo de elemento para POOL de Recursos es el Producto
                if($boolMultipleCaracteristica)
                {
                    $boolEsPoolRecursos = $this->servicioTecnico->isContieneCaracteristica($objProducto,'ES_POOL_RECURSOS');
                    $boolEsLicenciamiento = $this->servicioTecnico->isContieneCaracteristica($objProducto,'ES_LICENCIAMIENTO_SO');

                    if($boolEsPoolRecursos)
                    {
                        $strEsPoolCompleto = 'SI';
                    }
                }
                else
                {
                    $boolEsCoreHousing = $this->servicioTecnico->isContieneCaracteristica($objProducto,'ES_HOUSING');
                }

                $strEsCore = $boolEsPoolRecursos || $boolEsCoreHousing ? "S" : "N";

                $arrayValidaFlujoAntivirus  = $this->serviceLicenciasKaspersky->validaFlujoAntivirus(array(   "intIdPunto"        => $intPuntoId,
                                                                                                        "strOpcionConsulta" => $strOpcionConsulta,
                                                                                                        "strCodEmpresa"     => $strEmpresaCod
                                                                                                    ));
                $strFlujoAntivirus          = $arrayValidaFlujoAntivirus["strFlujoAntivirus"];
                $strValorAntivirus          = $arrayValidaFlujoAntivirus["strValorAntivirus"];
                $arrayCaracteristica = array();

                //verifico si es gpon y agrego la característica velocidad gpon
                $booleanValidVelCapGpon = false;
                if($booleanTipoRedGpon)
                {
                    $objCaractVelGpon = $this->emCome->getRepository('schemaBundle:AdmiCaracteristica')
                                                           ->findOneBy(array("descripcionCaracteristica" => "VELOCIDAD_GPON",
                                                                             "estado" => "Activo"));
                    if(is_object($objCaractVelGpon))
                    {
                        $objProdCaracVelGpon = $this->emCome->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                          ->findOneBy(array("productoId"        => $objProducto->getId(),
                                                                            "caracteristicaId"  => $objCaractVelGpon->getId(),
                                                                            "visibleComercial"  => "NO",
                                                                            "estado"            => "Activo"));
                        if(is_object($objProdCaracVelGpon))
                        {
                            $objItems[] = $objProdCaracVelGpon;
                            $booleanValidVelCapGpon = true;
                        }
                    }
                }
                
                foreach( $objItems as $item )
                {
                    $strStyleRow = "";
                    //Cambio McAfee - Para caracteristica de correo electronico se carga automaticamente el correo registrado del cliente
                    $strValorCaracteristica = "";
                    $strCampoHabilitado     = "";
                    if ($item->getCaracteristicaId()->getDescripcionCaracteristica()=="CORREO ELECTRONICO")
                    {
                        if (!empty($intPuntoId))
                        {
                            if($strFlujoAntivirus === "NUEVO")
                            {
                                $strValorCaractPlanProducto = $this->serviceLicenciasKaspersky->getCorreoLicencias(array( "intIdPunto"        =>  
                                                                                                                    $intPuntoId,
                                                                                                                    "strUsrCreacion"    => 
                                                                                                                    $strUsrCreacion,
                                                                                                                    "strIpCreacion"     =>
                                                                                                                    $strIpCreacion
                                                                                                                  ));
                            }
                            else
                            {
                                //Cambio McAfee - se obtiene correo en caso de que el producto sea Internet Protegido
                                $strValorCaractPlanProducto = $this->serviceGeneral->getCorreoDatosEnvioMd(array("intIdPunto"            => 
                                                                                                           $intPuntoId,
                                                                                                           "strValidaCorreoMcAfee" => 
                                                                                                           "SI",
                                                                                                           "strUsrCreacion"       =>
                                                                                                           $strUsrCreacion,
                                                                                                           "strIpCreacion"       =>
                                                                                                           $strIpCreacion
                                                                                                          ));
                            }
                            $strValorCaracteristica = $strValorCaractPlanProducto;
                        }
                        $strStyleRow    = " style = 'margin-top: 5px; margin-bottom: 5px; ' ";
                    }
                    else if ($item->getCaracteristicaId()->getDescripcionCaracteristica()=="TIENE INTERNET")
                    {
                        $strValorCaracteristica = "\"SI\"";
                        $strCampoHabilitado     = " ";
                    }
                    else if ($item->getCaracteristicaId()->getDescripcionCaracteristica() === "ANTIVIRUS")
                    {
                        if((isset($strOpcionConsulta) && !empty($strOpcionConsulta) 
                            && ($strOpcionConsulta === "CREAR_PLAN" || $strOpcionConsulta === "CLONAR_PLAN"))
                            || $strFlujoAntivirus === "NUEVO")
                        {
                            $strCampoHabilitado     = " disabled";
                            $strStyleRow            = " style='display:none;' ";
                            $strValorCaracteristica = $strValorAntivirus;
                        }
                        else
                        {
                            continue;
                        }
                    }
                    else if($item->getCaracteristicaId()->getDescripcionCaracteristica()=='RELACION_INTERNET_WIFI')
                    {
                        /* Se valida que la característica sea RELACION_INTERNET_WIFI, para no presentarla, debido a que es una característica
                           exclusiva de los L3MPLS que se crean para navegación y administración del producto Internet Wifi en esquema 2. */
                        continue;
                    }
                    else if ($item->getCaracteristicaId()->getDescripcionCaracteristica()=="ES_GRATIS"
                        && ($objProducto->getNombreTecnico() === "EXTENDER_DUAL_BAND" || $objProducto->getNombreTecnico() === "WIFI_DUAL_BAND"
                            || $objProducto->getNombreTecnico() === "WDB_Y_EDB"))
                    {
                        $strValorCaracteristica = "\"NO\"";
                        if (!empty($strTipoProceso) && $strTipoProceso == "CrearServicio")
                        {
                            $strCampoHabilitado     = " disabled";
                            $strStyleRow            = " style='display:none;' ";
                        }
                    }
                    else if ($item->getCaracteristicaId()->getDescripcionCaracteristica()=="MAC"
                        && $objProducto->getNombreTecnico() === "EXTENDER_DUAL_BAND")
                    {
                        $strStyleRow            = " style='display:none;' ";
                    }
                    else if ($item->getCaracteristicaId()->getDescripcionCaracteristica()=="TIPO_FACTIBILIDAD"
                            && ($objProducto->getNombreTecnico() === "INTERNET SMALL BUSINESS" 
                            || $objProducto->getNombreTecnico()  === "TELCOHOME"))
                    {
                        $strValorCaracteristica = "RUTA";
                        $strStyleRow            = " style='enable:false;' ";
                        $strCampoHabilitado     = " disabled ";
                    }
                    else if ($item->getCaracteristicaId()->getDescripcionCaracteristica()=="VELOCIDAD" && $objProducto->getNombreTecnico() === "IPSB")
                    {
                        $strValorCaracteristica = "\"SI\"";
                        $strCampoHabilitado     = " disabled ";
                    }
                    else if($item->getCaracteristicaId()->getDescripcionCaracteristica() == "METRAJE_NETFIBER"
                        && $objProducto->getNombreTecnico() === "NETFIBER")
                    {
                        //Obtengo para el producto NETFIBER la cantidad de metraje inicial que se cobra al cliente y que se encuentra incluido
                        // en el KIT del producto NETFIBER, y obtengo el costo por metraje adicional para mostrar mensaje por pantalla.
                        $arrayParametroDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                         ->getOne('FACTURABLES_FACTURACION_UNICA',
                                                                  'FACTURACION',
                                                                  'FACTURACION_UNICA',
                                                                  '',
                                                                  $item->getId(),
                                                                  'METRAJE_NETFIBER',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  $strEmpresaCod);
                        //Obtengo el Valor a Cobrarse por metro adicional que se encuentra parametrizado para el producto NETFIBER
                        $strValorMetroAdicional     = ( isset($arrayParametroDet["valor4"]) && !empty($arrayParametroDet["valor4"]) )
                                                       ? $arrayParametroDet["valor4"] : "";
                        //Obtengo la cantidad de metraje inicial que no se cobra al cliente y que esta incluido en el KIT del Producto NETFIBER
                        $strValorCaracteristica     = ( isset($arrayParametroDet["valor5"]) && !empty($arrayParametroDet["valor5"]) )
                                                       ? $arrayParametroDet["valor5"] : "";

                        $strCaractMetrajeNetFiber  = $item->getCaracteristicaId()->getDescripcionCaracteristica();
                        $strDivMsjNetFiber = "<tr name='caracts'><td colspan='2'>".
                                           "<table border='0' width='50%'><tr><td><div id='mensajeNetfiber' class='successmessage'> ".
                                           "Producto <b>[".$objProducto->getDescripcionProducto(). "]</b> ".
                                           "posee metraje inicial de [".$strValorCaracteristica."]</b> metros incluidos en el Kit, ".
                                           "el valor a facturarse por metro adicional es <b>[".$strValorMetroAdicional."]</b>".
                                           "</div></td></tr>".
                                           "<tr><td>&nbsp;&nbsp;</td></tr>".
                                           "<tr><td><input type='hidden' value='".$strValorCaracteristica."' ".
                                           "name='c_$strCaractMetrajeNetFiber' id='c_$strCaractMetrajeNetFiber'/>".
                                           "</td></tr></table>".
                                           "</td></tr>";
                    }
                    $strPresentarDiv .= "<tr name='caracts' ".$strStyleRow."><td>";

                    //Verificar si el producto es de tipo CLOUD PUBLIC para poder validar que el cliente o punto contenga una
                    //forma de pago de tipo DEBITO o TARJETA
                    $boolFacturaPorConsumo = $this->serviceGeneral->isContieneCaracteristica($objProducto,'ES_IAAS_PUBLIC');

                    //Validar para productos de Facturación por consumo que verifique si el cliente tiene deuda o no para poder continuar
                    if($boolFacturaPorConsumo)
                    {
                        //Verificación de deuda pendiente
                        $arrayParametrosVerificaDeuda               = array();
                        $arrayParametrosVerificaDeuda['intIdPunto'] = $intPuntoId;
                        $arraySaldoCliente = $this->emfinan->getRepository("schemaBundle:InfoDocumentoFinancieroCab")
                                                          ->obtieneDeudaPorCliente($arrayParametrosVerificaDeuda);

                        if(!empty($arraySaldoCliente) && $arraySaldoCliente['saldoTotal']>0)
                        {
                            $boolClienteTieneDeuda = true;
                        }
                    }

                    $strDescripcionCaracteristica = $item->getCaracteristicaId()->getDescripcionCaracteristica();

                    if($item->getCaracteristicaId()->getTipoIngreso() == 'S' )
                    {
                        // Si tengo el Punto Login y posee las caracteristicas Zona o Grupo de Negocio debo cargar los valores de la
                        // Caracteristica en base a la informacion del Punto
                        if(($strPrefijoEmpresa == 'TN' || $strPrefijoEmpresa == 'TNP' || $strPrefijoEmpresa == 'TNG') && $intPuntoId
                            && ($strDescripcionCaracteristica == "Grupo Negocio" || $strDescripcionCaracteristica == "Zona"))
                        {
                            if($strDescripcionCaracteristica == "Grupo Negocio")
                            {
                                $objGrupoNegocio= $this->emCome->getRepository('schemaBundle:InfoPunto')->getGrupoNegocioByPuntoId($intPuntoId);
                                if($objGrupoNegocio && $objProducto->getNombreTecnico() != 'INTERNET SMALL BUSINESS'
                                    && $objProducto->getNombreTecnico() != 'TELCOHOME')
                                {

                                    $strCampoHabilitado     = " disabled ";
                                    $strPresentarDiv .= "<label id='lb_caracteristicas_$intI'>" . $strDescripcionCaracteristica
                                                        .":</label> </td><td> <input type='text' value='".$objGrupoNegocio->getGrupoNegocio()."' "
                                                        .$strCampoHabilitado."name='caracteristicas_$intI' id='caracteristicas_$intI'/>";
                                }
                                else
                                {
                                    $strPresentarDiv .= "</td><td> <input type='hidden' value='".$strTipoNegocioIl."' "
                                                        ."name='caracteristicas_$intI' id='caracteristicas_$intI'/>";
                                }
                            }
                            if($strDescripcionCaracteristica == "Zona")
                            {
                                $objZona= $em->getRepository('schemaBundle:InfoPunto')->getZonaByPuntoId($intPuntoId);
                                 if($objZona)
                                {
                                    $strCampoHabilitado     = " disabled ";
                                    $strPresentarDiv .= "<label id='lb_caracteristicas_$intI'>" . $strDescripcionCaracteristica
                                                        .":</label> </td><td> <input type='text' value='". $objZona->getZona()."' "
                                                        .$strCampoHabilitado."name='caracteristicas_$intI' id='caracteristicas_$intI'/>";
                                }
                            }
                            
                        }
                        else
                        {
                            $arrayParamsCaractsVelocidad    = array("strValor1ParamsProdsTnGpon"    => 
                                                                    "DESCRIPCION_CARACT_VELOCIDAD_X_NOMBRE_TECNICO",
                                                                    "strCodEmpresa"                 => $strEmpresaCod,
                                                                    "strValor2NombreTecnico"        => $objProducto->getNombreTecnico(),
                                                                    "strValor3DescripcionCaract"    => $strDescripcionCaracteristica,
                                                                    "strValor4EsProductoIp"         => "SI");
                            $arrayInfoCaractsVelocidad      = $this->emCome->getRepository('schemaBundle:InfoServicio')
                                                                          ->obtenerParametrosProductosTnGpon($arrayParamsCaractsVelocidad);
                            if(isset($arrayInfoCaractsVelocidad) && !empty($arrayInfoCaractsVelocidad))
                            {
                                $strValorCaracteristica         = "";
                                $arrayParams                    = array("strValor1ParamsProdsTnGpon"    => "PRODUCTOS_RELACIONADOS_INTERNET_IP",
                                                                        "strCodEmpresa"                 => $strEmpresaCod,
                                                                        "intIdProductoIp"               => $objProducto->getId());
                                $arrayInfoProdsPrincipalConIp   = $this->emCome->getRepository('schemaBundle:InfoServicio')
                                                                     ->obtenerParametrosProductosTnGpon($arrayParams);
                                //Se verifica que es un servicio Ip Small Business
                                if(isset($arrayInfoProdsPrincipalConIp) && !empty($arrayInfoProdsPrincipalConIp))
                                {
                                    $arrayInfoProdPrincipalConIp    = $arrayInfoProdsPrincipalConIp[0];
                                    $intIdProductoPrincipal         = $arrayInfoProdPrincipalConIp["intIdProdInternet"];
                                    $strDescripcionProdPrincipal    = $arrayInfoProdPrincipalConIp["strDescripcionProdInternet"];
                                    $intIdProductoIp                = $arrayInfoProdPrincipalConIp["intIdProdIp"];
                                    $strDescripcionProdIp           = $arrayInfoProdPrincipalConIp["strDescripcionProdIp"];
                                    $strNombreTecnicoProdPrincipal  = $arrayInfoProdPrincipalConIp["strNombreTecnicoProdIp"];
                                    $arrayParams["intIdPunto"]                      = $intPuntoId;
                                    $arrayParams["intIdProductoPrincipal"]          = $intIdProductoPrincipal;
                                    $arrayParams["strDescripcionProdPrincipal"]     = $strDescripcionProdPrincipal;
                                    $arrayParams["intIdProductoIp"]                 = $intIdProductoIp;
                                    $arrayParams["strDescripcionProdIp"]            = $strDescripcionProdIp;
                                    $arrayParams["strNombreTecnicoProdPrincipal"]   = $strNombreTecnicoProdPrincipal;
                                    $arrayValidarIpMaxPermitidas                    = $this->emCome->getRepository('schemaBundle:InfoServicio')
                                                                                         ->validarIpsMaxPermitidasProducto($arrayParams);
                                    if($arrayValidarIpMaxPermitidas["strStatus"] === "OK")
                                    {
                                        $arrayServicioValidarIpsMax     = $arrayValidarIpMaxPermitidas["arrayServicioValidarIpsMax"];
                                        if(isset($arrayServicioValidarIpsMax) && !empty($arrayServicioValidarIpsMax))
                                        {
                                            $strValorCaracteristica  = $arrayServicioValidarIpsMax["strVelocidadServicio"];
                                        }
                                        else if(empty($strValorCaracteristica) && !empty($strInfoAdicionalProds))
                                        {
                                            list($intIdProdCaractVelocidadSb, $strValorProdCaractVelocidadSb) = explode('||',$strInfoAdicionalProds);
                                            if(isset($intIdProdCaractVelocidadSb) && !empty($intIdProdCaractVelocidadSb) 
                                                && $intIdProdCaractVelocidadSb > 0 && isset($strValorProdCaractVelocidadSb) 
                                                && !empty($strValorProdCaractVelocidadSb))
                                            {
                                                $objProdCaractVelocidadSb=$this->emCome->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                                 ->find($intIdProdCaractVelocidadSb);
                                                if(is_object($objProdCaractVelocidadSb) && is_object($objProdCaractVelocidadSb->getProductoId()))
                                                {
                                                    if( $objProdCaractVelocidadSb->getProductoId()->getId() === $intIdProductoPrincipal)
                                                    {
                                                        error_log("valor de velocidad a considerar".$strValorProdCaractVelocidadSb);
                                                        $strValorCaracteristica = $strValorProdCaractVelocidadSb;
                                                    }
                                                    else
                                                    {
                                                        error_log("error por no existir servicio Small Business mapeado");
                                                        $strMsg = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' "
                                                        . "style='clear: both; overflow: hidden; padding-bottom: 5px;'>"
                                                        . "El servicio ".$strDescripcionProdIp." requiere que se agregue previamente un servicio "
                                                        . $strDescripcionProdPrincipal."</div></td> </tr>";
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            $strMsg = "<tr name='caracts'><td colspan='4'><div id='mensajeError' class='info-error' "
                                                        . "style='clear: both; overflow: hidden; padding-bottom: 5px;'>"
                                                        . "El servicio ".$strDescripcionProdIp." requiere que se agregue previamente un servicio "
                                                        . $strDescripcionProdPrincipal."</div></td> </tr>";
                                        }
                                    }
                                }
                                $strCampoHabilitado             = ' disabled ';
                                $boolValidarServicioPrincipal   = true;
                            }
                            else
                            {
                                $strCampoHabilitado             = '';
                                $boolValidarServicioPrincipal   = false;
                                $strValorCaracteristica         = '';
                            }
                            
                            $strOpciones        = '';
                            $arrayParametrosDet = array();
                            $strNombreParametro = 'PROD_'.$strDescripcionCaracteristica;

                            $objParametroCab = $this->emgen->getRepository('schemaBundle:AdmiParametroCab')
                                                             ->findOneBy( array( 'descripcion' => $strNombreParametro,
                                                                                 'estado'      => 'Activo' ) );

                            if( $objParametroCab )
                            {
                                if($strNombreParametro === 'PROD_VELOCIDAD' || $strNombreParametro === 'PROD_VELOCIDAD_TELCOHOME')
                                {
                                    $arrayOrderBy   = array('valor7' => 'ASC');
                                }
                                else
                                {
                                    $arrayOrderBy   = array();
                                }
                                $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                ->findBy( array( 'parametroId' => $objParametroCab,
                                                                                 'estado'      => 'Activo' ),
                                                                                 $arrayOrderBy);
                            }

                            //Se mostraran las caracteristicas de manera convencional todos los productos los cuales no esten configurados
                            //como multi-caracteristicas dado que serán tratados de manera distinta
                            if(!$boolMultipleCaracteristica)
                            {
                                $strOpciones        = '';

                                if( $arrayParametrosDet )
                                {
                                    if( !$boolValidarServicioPrincipal)
                                    {
                                        $strOpciones .= '<option value="">Seleccione</option>';
                                    }

                                    foreach( $arrayParametrosDet as $objParametro )
                                    {
                                        if($strEsIsB === 'SI' && $strNombreParametro === 'PROD_VELOCIDAD')
                                        {
                                            $arrayVerificaProdsVelocidades  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                        ->getOne('PARAMS_PRODS_TN_GPON',
                                                                                                 '',
                                                                                                 '',
                                                                                                 '',
                                                                                                 'PRODUCTOS_VERIFICA_VELOCIDAD',
                                                                                                 $objProducto->getId(),
                                                                                                 '',
                                                                                                 '',
                                                                                                 '',
                                                                                                 $strEmpresaCod);
                                            if(isset($arrayVerificaProdsVelocidades) && !empty($arrayVerificaProdsVelocidades))
                                            {
                                                $arrayVerificaVelocidadesPermitidas = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                                ->getOne('PARAMS_PRODS_TN_GPON',
                                                                                                         '',
                                                                                                         '',
                                                                                                         '',
                                                                                                         'PRODUCTOS_VERIFICA_VELOCIDADES_DISPONIBLES',
                                                                                                         $objProducto->getId(),
                                                                                                         $objParametro->getValor1(),
                                                                                                         '',
                                                                                                         '',
                                                                                                         $strEmpresaCod);
                                                
                                                if(isset($arrayVerificaVelocidadesPermitidas) && !empty($arrayVerificaVelocidadesPermitidas))
                                                {
                                                    $strOpciones .= '<option value="'.$objParametro->getValor1().'">'.
                                                                        $objParametro->getValor1().' '.$objParametro->getValor2().
                                                                    '</option>';
                                                }
                                            }
                                            else
                                            {
                                                $strOpciones    .=  '<option value="'.$objParametro->getValor1().'">'.
                                                                        $objParametro->getValor1().' '.$objParametro->getValor2().
                                                                    '</option>';
                                            }
                                        }
                                        else if($strEsIsB === 'SI' && $strNombreParametro === 'PROD_VELOCIDAD_TELCOHOME')
                                        {
                                            $strNecesitaAprobacion = $objParametro->getValor3();
                                            $strOpciones .= '<option value="'.$objParametro->getValor1().'">'.
                                                                $objParametro->getValor1().' '.$objParametro->getValor2().
                                                            '</option>';
                                            if(!empty($strNecesitaAprobacion) && $strNecesitaAprobacion === "SI")
                                            {
                                                $strValidaValoresCaracts .= $objParametro->getValor1().'|';
                                            }
                                        }
                                        else if($boolValidarServicioPrincipal)
                                        {
                                            if(!empty($strValorCaracteristica) && ($strValorCaracteristica === $objParametro->getValor1()))
                                            {
                                                $strOpciones .= '<option selected value="'.$objParametro->getValor1().'">'.
                                                                    $objParametro->getValor1().' '.$objParametro->getValor2().
                                                                '</option>';
                                            }
                                        }
                                        else if($strNombreParametro === 'PROD_VELOCIDAD_GPON')
                                        {
                                            if($booleanValidVelCapGpon)
                                            {
                                                $booleanFunctionCap = true;
                                                $strValueParametro  = $objParametro->getValor3();
                                            }
                                            else
                                            {
                                                $strValueParametro = $objParametro->getValor1();
                                            }
                                            $arrayVerificaProdsVelocidades  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                        ->getOne('NUEVA_RED_GPON_TN',
                                                                                                 'COMERCIAL',
                                                                                                 '',
                                                                                                 '',
                                                                                                 'PRODUCTOS_VERIFICA_VELOCIDAD',
                                                                                                 $objProducto->getId(),
                                                                                                 '',
                                                                                                 '',
                                                                                                 '',
                                                                                                 $strEmpresaCod);
                                            if(isset($arrayVerificaProdsVelocidades) && !empty($arrayVerificaProdsVelocidades))
                                            {
                                                $arrayVerificaVelocidadesPermitidas = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                                        ->getOne('NUEVA_RED_GPON_TN',
                                                                                                    'COMERCIAL',
                                                                                                    '',
                                                                                                    '',
                                                                                                    'PRODUCTOS_VERIFICA_VELOCIDADES_DISPONIBLES',
                                                                                                    $objProducto->getId(),
                                                                                                    $objParametro->getValor1(),
                                                                                                    '',
                                                                                                    '',
                                                                                                    $strEmpresaCod);
                                                if(isset($arrayVerificaVelocidadesPermitidas) && !empty($arrayVerificaVelocidadesPermitidas))
                                                {
                                                    $strOpciones .= '<option value="'.$strValueParametro.'">'.
                                                                        $objParametro->getValor1().' '.$objParametro->getValor2().
                                                                    '</option>';
                                                }
                                            }
                                            else
                                            {
                                                $strOpciones .= '<option value="'.$strValueParametro.'">'.
                                                                    $objParametro->getValor1().' '.$objParametro->getValor2().
                                                                '</option>';
                                            }
                                        }
                                        else
                                        {
                                            $strOpciones .= '<option value="'.$objParametro->getValor1().'">'.$objParametro->getValor1().'</option>';
                                        }
                                    }//foreach( $objParametrosDet as $objParametro )
                                }//( $objParametrosDet )
                                else
                                {
                                    if ($strDescripcionCaracteristica == 'Relacionar Proyecto')
                                    {   
                                        if(!empty($intProyectoId))
                                        {
                                            $arrayParametros['intIdProyecto']      = $intProyectoId;
                                        }
                                        $intIdEmpresa                         = $strEmpresaCod;
                                        $arrayParametros['intIdEmpresa']      = $intIdEmpresa;
                                        $arrayProyectos                       = $this->emNaf->getRepository('schemaBundle:admiProyectos')
                                                                                ->getProyectos($arrayParametros);
                                        
                                        $arrayRegistros   = $arrayProyectos['registros'];
                                        if ($arrayProyectos)
                                        { 
                                            $strOpciones = '';  
                                            if(empty($intProyectoId))
                                            {
                                                $strOpciones .= '<option value="">Seleccione</option>';
                                                $strOpciones .= '<option value="0">Sin Proyecto</option>';
                                            }
                                            foreach( $arrayRegistros as $objProyectos )
                                            {
                                                $strOpciones    .=  '<option value="'.$objProyectos["ID_PROYECTO"].'">'.
                                                                                      $objProyectos["NOMBRE"].
                                                                                 '</option>';
                                            } 
                                       }  
                                    }
                                }
                                if($strPrefijoEmpresa == 'TN' || $strPrefijoEmpresa == 'TNP' || $strPrefijoEmpresa == 'TNG')
                                {
                                    if($booleanFunctionCap)
                                    {
                                        $strChangeFunction = "actualizaCapacidadGpon(this.value)";
                                    }
                                    else
                                    {
                                        $strChangeFunction = "actualizaDescripcion(this.value)";
                                    }
                                    
                                    $strPresentarDiv .= "<div class='row'><div class='col-lg-2'><label id='lb_caracteristicas_$intI'>" 
                                                            . $strDescripcionCaracteristica . ":</label> </div></td><td>"
                                                       ."<div class='col-lg-2'><select align='left' name='caracteristicas_$intI' "
                                                                . "id='caracteristicas_$intI'"
                                                       ."onchange='actualizaDescripcion(this.value)' >".$strOpciones."</select></div></td></div><br>";
                                }
                                else
                                {
                                    $strPresentarDiv .= "<label>" . $strDescripcionCaracteristica . ":</label> </td><td>"
                                                        ."<select align='left' name='caracteristicas_$intI' id='caracteristicas_$intI'>"
                                                        .$strOpciones."</select></td>";

                                }
                            }
                            else
                            {
                                $arrayCaracteristicasMultiples = array();
                                //Devolver en json la informacion de los valores de las caracteristicas para escenario multi-caracteristicas

                                foreach( $arrayParametrosDet as $objParametro )
                                {
                                    $arrayCaracteristicasMultiples[] = array('id'    => $objParametro->getValor1(),
                                                                             'value' => $objParametro->getValor1());
                                }

                                $arrayCaracteristica[] = array('tipoCaracteristica'  => $strDescripcionCaracteristica,
                                                               'arrayCaracteristica' => $arrayCaracteristicasMultiples);
                            }
                        }
                    }
                    else
                    {

                        if($strPrefijoEmpresa === 'TN'|| $strPrefijoEmpresa === 'TNP'|| $strPrefijoEmpresa === 'TNG')
                        {
                            /*Obtenemos el array del parámetro CARACTERISTICAS_SERVICIOS_SIMULTANEOS.*/
                            $objParamsDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                ->get('CARACTERISTICAS_SERVICIOS_SIMULTANEOS',
                                    'TECNICO',
                                    'INSTALACION_SIMULTANEA',
                                    '',
                                    '',
                                    '',
                                    '',
                                    '',
                                    '',
                                    $strEmpresaCod);

                            /*Validamos que el arreglo no este vacío.*/
                            if (is_array($objParamsDet) && !empty($objParamsDet))
                            {
                                $objCaracteristicasServiciosSimultaneos = json_decode($objParamsDet[0]['valor1'], true);

                                $arrayParams['strNeedle'] = $strDescripcionCaracteristica;
                                $arrayParams['strKey'] = 'DESCRIPCION_CARACTERISTICA';
                                $arrayParams['arrayToSearch'] = $objCaracteristicasServiciosSimultaneos;
                                
                                $objCaracteristicasServicioSimultaneo = $this->serviceGeneral->searchByKeyInArray($arrayParams);
                            }

                            // Se valida si la característica es TIPO_ESQUEMA para generar un ComboBox.
                            if ($strDescripcionCaracteristica == 'TIPO_ESQUEMA')
                            {
                                $strHtml            = "<label id='lb_caracteristicas_$intI'>* Tipo de Esquema:</label></td><td>";
                                $strHtml           .= "<div id='div-tipo-esquema'>";
                                $strHtml           .= "<select onchange='actualizaDescripcion(this.value)' align='left' id='caracteristicas_$intI' 
                                name='caracteristicas_$intI'>";
                                $strHtml           .= "<option disabled selected value=''>Seleccione</option>";
                                $strHtml           .= "<option id='e1' value=\"1\">Esquema 1</option>";
                                $strHtml           .= "<option id='e2' value=\"2\">Esquema 2</option>";
                                $strHtml           .= "</select>";
                                $strHtml           .= "</div>";

                                $strPresentarDiv .= $strHtml;

                            }
                            elseif($strDescripcionCaracteristica == 'INSTALACION_SIMULTANEA_WIFI' || 
                                   $strDescripcionCaracteristica == 'INSTALACION_SIMULTANEA_COU_TELEFONIA_FIJA')
                            {
                                $arrayValServTradFact = $this->serviceInfoServicio->
                                                                           validarServicioTradicional($intPuntoId, $intProductoId, array('Factible'));
                                
                                if ($arrayValServTradFact['boolInstalacionSimultanea'] && 
                                $arrayValServTradFact['objInfoServTrad']->getEstado() == 'Factible')
                                {
                                    $intIdProductoTrad      = $arrayValServTradFact['objInfoServTrad']->getId();
                                    $strDescProdTrad        = $arrayValServTradFact['objInfoServTrad']->getDescripcionPresentaFactura();
                                    $strDescripcionProducto = '"'.$objAdmiProducto->getDescripcionProducto().'"';
                                    if ($strDescripcionCaracteristica == 'INSTALACION_SIMULTANEA_COU_TELEFONIA_FIJA')
                                    {
                                        $strHelper = 'Instalación simultánea COU';
                                    }
                                    else
                                    {
                                        $strHelper = $objAdmiProducto->getDescripcionProducto() == 'WIFI Alquiler Equipos' ?
                                                                                                   'Instalación simultánea WAE' :
                                                                                                   'Instalación simultánea en esquema 2';
                                    }
                                                                        
                                    $strHtml = "<label id='lb_caracteristicas_$intI'>
                                                <span class='required-dot'>*</span> Instalación Simultánea:
                                                </label></td><td>";
                                    $strHtml .= "<div id='div-instalacion-simultanea'>";
                                    $strHtml .= "<input title='$strDescProdTrad' style='width: 2rem;margin: 15px 2px;'
                                                type='checkbox' id='caracteristicas_$intI' name='caracteristicas_$intI'
                                                value='null' onclick='instalacionSimultanea(this, $intIdProductoTrad, $strDescripcionProducto )'>";
                                    $strHtml .= "<span class='ins-sim-helper'>($strHelper)</span>";

                                    $strHtml .= "</div>";
                                    $strPresentarDiv .= $strHtml;
                                }
                                else
                                {
                                    continue;
                                }
                            }
                            /* Validamos que este definida y no sea nula la variable, por lo tanto significa 
                               que el servicio es instalacion simultanea. */
                            elseif (isset($objCaracteristicasServicioSimultaneo) && !is_null($objCaracteristicasServicioSimultaneo))
                            {
                                /* Se valida los servicios tradicionales. */
                                $arrayValServTradFact = $this->serviceInfoServicio->
                                                                          validarServicioTradicional($intPuntoId, $intProductoId, array('Factible'));
                                
                                $arrayParams['strNeedle'] = $objAdmiProducto->getDescripcionProducto();
                                $arrayParams['strKey'] = 'DESCRIPCION_PRODUCTO';
                                $arrayParams['arrayToSearch'] = $objCaracteristicasServiciosSimultaneos;

                                /* Buscamos dentro del arreglo asociativo el producto. */
                                $objCaracteristicasServicioSimultaneo = $this->serviceGeneral->searchByKeyInArray($arrayParams);

                                /* Se realiza la validacion correspondiente. */
                                if ($arrayValServTradFact['boolInstalacionSimultanea'] &&
                                    $arrayValServTradFact['objInfoServTrad']->getEstado() == 'Factible' &&
                                    !is_null($objCaracteristicasServicioSimultaneo))
                                {

                                    $intIdProductoTrad = $arrayValServTradFact['objInfoServTrad']->getId();
                                    $strDescProdTrad = $arrayValServTradFact['objInfoServTrad']->getDescripcionPresentaFactura();
                                    $strDescripcionProducto = '"' . $objAdmiProducto->getDescripcionProducto() . '"';

                                    /* Se define variable helper para mostrar en la pantalla de ingreso de servicio. */
                                    if (!is_null($objCaracteristicasServicioSimultaneo))
                                    {
                                        $strHelper = $objCaracteristicasServicioSimultaneo['HELPER'];
                                    }
                                    else
                                    {
                                        $strHelper = 'Instalación Simultanea';
                                    }

                                    /* Se construye el HTML con los campos necesaios. */
                                    $strHtml = "<label id='lb_caracteristicas_$intI'>
                                                <span class='required-dot'>*</span> Instalación Simultánea:
                                                </label></td><td>";
                                    $strHtml .= "<div id='div-instalacion-simultanea'>";
                                    $strHtml .= "<input title='$strDescProdTrad' style='width: 2rem;margin: 15px 2px;'
                                                type='checkbox' id='caracteristicas_$intI' name='caracteristicas_$intI'
                                                value='null' onclick='instalacionSimultanea(this, $intIdProductoTrad, $strDescripcionProducto )'>";
                                    $strHtml .= "<span class='ins-sim-helper'>($strHelper)</span>";

                                    $strHtml .= "</div>";
                                    $strPresentarDiv .= $strHtml;

                                }
                                else
                                {
                                    continue;
                                }

                            }
                            elseif($strDescripcionCaracteristica == 'REQUIERE_INSPECCION')
                            {
                                $arrayValServTradFact               = $this->serviceInfoServicio->validarServicioTradicional(
                                                                                            $intPuntoId, 
                                                                                            $intProductoId, 
                                                                                            array('Activo', 'Factible'));
                                $arrayValServicioAlquilerFactible   = $this->serviceInfoServicio->validarInspeccionRealizada($intPuntoId);

                                if ($arrayValServTradFact['boolInstalacionSimultanea'] &&
                                    !$arrayValServicioAlquilerFactible['boolValidacion'])
                                {

                                    $strHtml = "<label id='lb_caracteristicas_$intI'>
                                                Requiere Inspección: </label></td><td>";
                                    $strHtml .= "<div id='div-requiere-inspeccion'>";

                                    $strHtml .= "<input style='width: 2rem;margin: 15px 2px;'
                                                type='checkbox' id='caracteristicas_$intI' name='caracteristicas_$intI'
                                                value='N' onclick='requiereInstalacionCheckboxHandler(this)'>";
                                    $strHtml .= "<span class='ins-sim-helper'>(Solo aplica para el primer servicio a ingresar)</span>";

                                    $strHtml .= "</div>";
                                    $strPresentarDiv .= $strHtml;
                                }else
                                {
                                    if ($arrayValServicioAlquilerFactible['boolValidacion'])
                                    {
                                        $objServicioFactible = $arrayValServicioAlquilerFactible['objServicioAlquilerFactible'];

                                        $strHtml = "<label id='lb_caracteristicas_$intI' hidden>
                                                    Requiere Inspección: </label></td><td>";
                                        $strHtml .= "<div id='div-requiere-inspeccion' hidden>";

                                        $strHtml .= "<input style='width: 2rem;margin: 15px 2px;'
                                                type='checkbox' id='caracteristicas_$intI' name='caracteristicas_$intI'
                                                value='".$objServicioFactible->getId()."' hidden>";
                                        $strHtml .= "<span class='ins-sim-helper' hidden>(Solo aplica para el primer servicio a ingresar)</span>";

                                        $strHtml .= "</div>";
                                        $strPresentarDiv .= $strHtml;
                                    }

                                }
                            }
                            elseif($strDescripcionCaracteristica == $strRequiereTrabajo)
                            {
                                $strPresentarDiv .= "<label id='lb_caracteristicas_$intI'>" . $strDescripcionCaracteristica
                                    .":</label></td><td><input type='hidden' value='".$strDescripcionCaracteristica."' "
                                    ."name='caracteristicas_$intI' id='caracteristicas_$intI'/>"
                                    ."<div id='div-requiere-trabajo'>";
                                
                                //Genero los checkbox para cada departamento que va a interactuar con Eléctrico
                                $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->get('REQUIERE_TRABAJO_CABLEADO_ESTRUCTURADO',
                                                                  'TECNICO',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  '',
                                                                  $strEmpresaCod);
                                
                                foreach($arrayParametrosDet as $arrayParametro)
                                {
                                    if(isset($arrayParametro['descripcion']) && !empty($arrayParametro['descripcion']))
                                    {
                                        $strDescripcionRequiereTrabajo = $arrayParametro['descripcion'];
                                        
                                        $strPresentarDiv .= "<input style='width: 2rem;margin: 15px 2px;'
                                                type='checkbox' id='requiere_trabajo_$intJ' 
                                                name='requiere_trabajo_$intJ'
                                                value='".$strDescripcionRequiereTrabajo."'>"." ".$strDescripcionRequiereTrabajo." "."</>";
                                    }
                                    $intJ++;
                                }
                                $strPresentarDiv .= "<tr name='caracts_departamento'><td><input type='hidden' value='" . $intJ 
                                                 . "' name='cantidad_departamento'"
                                                 .  " id='cantidad_departamento'/></td></tr>";                                
                                $strPresentarDiv .= "</div>";
                            }
                            elseif($strDescripcionCaracteristica == 'TIPO_RED')
                            {
                                $strCampoHabilitado = " readonly ";
                                $strPresentarDiv .= "<div class='row'><div class='col-lg-2'><label id='lb_caracteristicas_$intI'>" .
                                    $strDescripcionCaracteristica
                                    .":</label></div> </td><td><div class='col-lg-2'><input type='text' value='".$strTipoRed."' ". $strCampoHabilitado
                                    ."name='caracteristicas_$intI' id='caracteristicas_$intI' "
                                    ."onchange='actualizaDescripcion(this.value)'/></div></div><br>";
                            }
                            elseif( ($strDescripcionCaracteristica == 'CAPACIDAD1' || $strDescripcionCaracteristica == 'CAPACIDAD2')
                                     && $booleanTipoRedGpon )
                            {
                                $strPresentarDiv .= "<input type='hidden' value='".$strValorCaracteristica."' name='caracteristicas_$intI'"
                                                 ." class='update_capacidades_gpon' id='caracteristicas_$intI'"
                                                 ." onchange='actualizaDescripcion(this.value)'/>";
                            }
                            elseif($strDescripcionCaracteristica == 'Precio Camaras')
                            {
                                $strValorCaracteristica = 0;
                                $objProductoCamara = $this->emCome->getRepository('schemaBundle:AdmiProducto')
                                                                    ->findOneBy(array("descripcionProducto" => "SAFE VIDEO ANALYTICS CAM",
                                                                                      "estado"              => "Activo"));
                                if(is_object($objProductoCamara))
                                {
                                    $arrayPrecioCamara      = explode("PRECIO=", $objProductoCamara->getFuncionPrecio());
                                    $strValorCaracteristica = is_array($arrayPrecioCamara) && isset($arrayPrecioCamara[1])
                                                              && is_numeric($arrayPrecioCamara[1]) ? $arrayPrecioCamara[1] : 0;
                                }
                                $strPresentarDiv .= "<label id='lb_caracteristicas_$intI'>" . $strDescripcionCaracteristica
                                    .":</label> </td><td><input type='text' value='".$strValorCaracteristica."' ". $strCampoHabilitado
                                    ."name='caracteristicas_$intI' id='caracteristicas_$intI' "
                                    ."onkeypress='return validaNumerosConDecimales(event, this);' "
                                    ."onchange='actualizaDescripcion(this.value)'/>";
                            }
                            else
                            {
                                $strPresentarDiv .= "<div class='row'><div class='col-lg-2'><label id='lb_caracteristicas_$intI'>" 
                                    . $strDescripcionCaracteristica
                                    .":</label></div> </td><td><div class='col-lg-2'><input type='text' value='".$strValorCaracteristica."' "
                                    . $strCampoHabilitado
                                    ."name='caracteristicas_$intI' id='caracteristicas_$intI' "
                                    ."onchange='actualizaDescripcion(this.value)' style='width:120px'/></div></div><br>";
                            }
                        }
                        else
                        {
                            $strPresentarDiv .= "<label>" . $strDescripcionCaracteristica . ":</label> </td><td><input type='text' value='".
                                                $strValorCaracteristica."' ". $strCampoHabilitado ."name='caracteristicas_$intI' ".
                                                "id='caracteristicas_$intI'/>";
                        }
                    }

                    $strPresentarDiv .= "<input type='hidden' value='[".$item->getCaracteristicaId()->getDescripcionCaracteristica()."]' "
                                        ."name='caracteristica_nombre_".$intI."' id='caracteristica_nombre_".$intI."'/>";
                    $strPresentarDiv .= "<input type='hidden' value='".$item->getId()."' name='producto_caracteristica_".$intI."' "
                                        ."id='producto_caracteristica_".$intI."'/>";
                    $strPresentarDiv .= "</td><td></td><td></td></tr>";
                    
                    $intI++;
                }
                $strPresentarDiv .= "<tr name='caracts'><td><input type='hidden' value='" . $intI . "' name='cantidad_caracteristicas'"
                               .  " id='cantidad_caracteristicas'/></td></tr>";

                //Mensaje informativo si el producto es Netfiber muestro metraje inicial que no se cobra al cliente y el valor a cobrarse
                //por metro adicional
                if($strDivMsjNetFiber!="")
                {
                    $strPresentarDiv .= $strDivMsjNetFiber;
                }
                if($strPrefijoEmpresa === 'TN' || $strPrefijoEmpresa === 'TNP' && $boolMostarCaracteristicas
                                               || $strPrefijoEmpresa === 'TNG' && $boolMostarCaracteristicas)
                {
                    $intPrecioInstalacion=$objProducto->getInstalacion();
                    if($objProducto->getDescripcionProducto()=='TelcoHome' || $objProducto->getDescripcionProducto()=='TELCOTEACHER' 
                        || $objProducto->getDescripcionProducto()=='TELEWORKER')
                    {
                        $strAtributoReadOnly = '';
                    }
                    else
                    {
                        $arrayParamsEditaPrecioNegociacion  = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->getOne('PARAMETROS_ASOCIADOS_A_SERVICIOS_TN',
                                                                                 '',
                                                                                 '',
                                                                                 '',
                                                                                 'PUNTO_MD_ASOCIADO',
                                                                                 'IDS_PRODUCTOS_EDITA_PRECIO_NEGOCIACION',
                                                                                 $objProducto->getId(),
                                                                                 '',
                                                                                 '',
                                                                                 $strEmpresaCod);
                        if(isset($arrayParamsEditaPrecioNegociacion) && !empty($arrayParamsEditaPrecioNegociacion))
                        {
                            $strAtributoReadOnly = '';
                        }
                        else
                        {
                            $strAtributoReadOnly = ($strEsIsB==='SI') ? " readonly='readonly' " : "" ;
                        }
                    }

                    if(($strPrefijoEmpresa === 'TN' || $strPrefijoEmpresa === 'TNP') && $objProducto->getNombreTecnico() === "IPSB")
                    {
                        $strCssStylePrecios  =  " style='display:none;' ";
                    }

                    $strPresentarDiv .= "<div class='col-lg-3'></div><br><tr ".$strCssStylePrecios."name='caracts'><td >"
                                        . "<label style='white-space: nowrap;'>"
                                        ."* Precio Unitario (F&oacute;rmula):</label>"
                                        ."</td><td><input type='text' readonly='readonly'  class='campo-obligatorio' name='precio_unitario'"
                                        . " style='width:120px'"
                                        ."id='precio_unitario'/></td><td width='130px'>&nbsp;&nbsp;&nbsp;<label style='white-space: nowrap;'>"
                                        . "* Precio de "
                                        ."Negociaci&oacute;n:</label></td><td><input style='width:120px' type='text' ".$strAtributoReadOnly
                                        ." class='campo-obligatorio' name='precio_venta' "
                                        ."id='precio_venta' disabled='disabled' onkeypress='return validaNumerosConDecimales(event, this);' "
                                        ."onchange='actualizaTotal() '/></td></tr>";

                    if($intPrecioInstalacion>0)
                    {
                        $strPresentarDiv .= "<br><br><tr ".$strCssStylePrecios."name='caracts' id='lb_precio_ins'>
                                           <td><label style='white-space: nowrap;'>* Precio de Instalación (Fórmula):</label></td>
                                           <td><input type='text' readonly='readonly' class='campo-obligatorio' name='precio_instalacionf' 
                                           style='width:120px'
                                           id='precio_instalacionf' value='".$intPrecioInstalacion."'></td><td>
                                           <label style='white-space: nowrap;'>* Precio de Instalación (Pactado):</label></td><td>
                                           <input type='text' class='campo-obligatorio' name='precio_instalacion' id='precio_instalacion' 
                                           style='width:120px'
                                           onkeypress='return validaNumerosConDecimales(event, this);' value='".$intPrecioInstalacion."' ".
                                           $strAtributoReadOnly." ></td></tr><br><br>";
                    }
                    else
                    {
                        $strPresentarDiv .= "<tr ".$strCssStylePrecios."name='caracts'><td><input type='hidden' name='precio_instalacionf' "
                                            ." id='precio_instalacionf' value='".$intPrecioInstalacion."'></td><td>"
                                            ."<input type='hidden' class='campo-obligatorio' name='precio_instalacion' id='precio_instalacion' "
                                            . "style='width:120px'"
                                            ."value='".$intPrecioInstalacion."' ></td></tr>";
                    }

                    $strPresentarDiv  .= "<tr name='caracts'><td><label class='required' >* Precio Total:</label></td>
                                          <td><input type='text' style='width:120px'
                                          readonly='readonly' class='campo-obligatorio' name='precio_total' id='precio_total'></td><td></td><td>
                                          </td></tr>";

                    $strPresentarDiv .= "<br><tr><td>&nbsp;</td></tr>
                                         <tr name='caracts'><br><br><td><label style='white-space: nowrap;'>* Descripción Producto:</label></td>
                                         <td style='padding-left: 5px;'><textarea  class='campo-obligatorio' rows='3' cols='45'
                                         name='descripcion_producto' id='descripcion_producto'>" . $objProducto->getDescripcionProducto().
                                         "</textarea></td><td></td><td></td></tr>";
                }

                if(count($objItems) == 0 || $objProducto->getNombreTecnico() === "IPSB")
                {
                    $boolEval = true;
                }
            }//( $producto->getNombreTecnico() == "FINANCIERO" )
            if($strPrefijoEmpresa === 'TN' && !empty($arrayCotizacion))
            {
                foreach($arrayCotizacion as $arrayItem)
                {
                    $intCotizacionId    = $arrayItem['id_cotizacion'];
                    $strNombreCot       = $arrayItem['name_cotizacion'];
                    $strBoomId          = $arrayItem['id_bomm'];
                    $strPresentarDivOptionCot .= "<option value='$intCotizacionId'>$strNombreCot</option>";
                    $strPresentarDivOptionBoom.= "<option value='$strBoomId'>$strBoomId</option>";
                }
                if(!empty($intCotizacionId))
                {

                        $strPresentarDiv .= "<select style='visibility:hidden'  $strCaractDisabled name='cotizacionIdProd' id='cotizacionIdProd'>";
                        $strPresentarDiv .= $strPresentarDivOptionCot;
                        $strPresentarDiv .= "</select>";
                        $strPresentarDiv .= "<select style='visibility:hidden'  $strCaractDisabled name='boomId' id='boomId'>";
                        $strPresentarDiv .= $strPresentarDivOptionBoom;
                        $strPresentarDiv .= "</select>";

                    $strPresentarDiv .= "</td><td></td><td></td></tr>";
                }
            }
            /**
             * BLOQUE VERIFICAR CARACTERISTICA
             *
             * Bloque que verifica si existe la característica 'REGISTRO_UNITARIO' asociada al producto
             */
            $arrayParametrosCaracteristicas = array( 'intIdProducto'         => $intProductoId,
                                                     'strDescCaracteristica' => 'REGISTRO_UNITARIO',
                                                     'strEstado'             => 'Activo' );
            $strRegistroUnitario            = $this->serviceUtilidades->validarCaracteristicaProducto($arrayParametrosCaracteristicas);
            /**
             * FIN BLOQUE VERIFICAR CARACTERISTICA
             */
            if(!empty($strValidaValoresCaracts))
            {
                $strValidaValoresCaracts = substr($strValidaValoresCaracts, 0, strlen($strValidaValoresCaracts)-1 );
            }
            $strPresentarDiv .= "<tr name='caracts'><td colspan='4' align='left'>";

            $strPresentarDiv .= "<input type='hidden' value='$strFuncionAux' name='funcion_precio' id='funcion_precio'/>"
                                ."<input type='hidden' value='".$objProducto->getDescripcionProducto()."' "
                                ."name='strDescripcionProd' id='strDescripcionProd'/>"
                                ."<input type='hidden' value='".$objProducto->getNombreTecnico()."' name='strNombreTecnico' id='strNombreTecnico'/>"
                                ."<input type='hidden' value='".$strRegistroUnitario."' name='strRegistroUnitario' id='strRegistroUnitario'/>"
                                ."<input type='hidden' value='".$strTipoNegociosRestringidos."' name='strTipoNegociosRestringidos' "
                                ."id='strTipoNegociosRestringidos'/>"
                                ."<input type='hidden' value='".$strValidaValoresCaracts."' name='strValidaValoresCaracts' "
                                ."id='strValidaValoresCaracts'/>"
                                ."<input type='hidden' value='".$strEsIsB."' name='$strEsIsB' id='strEsIsB'/>"
                                ."<input type='hidden' value='".$strEsIpWanPyme."' name='strEsIpWanPyme' id='strEsIpWanPyme'/>"
                                ."<input type='hidden' value='".$strNombreTipoNegocioPto."' name='$strNombreTipoNegocioPto' "
                                . "id='strNombreTipoNegocioPto'/>"
                                ."<input type='hidden' value='".$strRequiereUltimaMillaProd."' name='strRequiereUltimaMillaProducto' "
                                ."id='strRequiereUltimaMillaProducto'/>"
                                ."<input type='hidden' value='".$strFormaPagoCliente."' name='strFormaPago' "
                                ."id='strFormaPago'/>"
                                ."<input type='hidden' value='".($boolFacturaPorConsumo?'S':'N')."' name='strEsProductoCloud' "
                                ."id='strEsProductoCloud'/>"
                                ."<input type='hidden' value='".($boolClienteTieneDeuda?'S':'N')."' name='strContieneDeuda' "
                                ."id='strContieneDeuda'/>"
                                ."</td></tr>";
        }//( $boolContinuar )
        
        if(isset($strOpcionConsulta) && !empty($strOpcionConsulta) && $strOpcionConsulta === "CLONAR_PLAN")
        {
            $strPresentarDiv = "<table>".$strPresentarDiv."</table>";
        }
        
        $arrayRespuesta = array('msg'                     => $strMsg, 
                                'div'                     => $strPresentarDiv, 
                                'eval'                    => $boolEval , 
                                //Informacion para escenario de multi-caracteristicas
                                'esCore'                  => $strEsCore,
                                'esMultiCaracteristica'   => $boolMultipleCaracteristica,
                                'esPoolCompleto'          => $strEsPoolCompleto,
                                'arrayJsonCaractMultiple' => $arrayCaracteristica,
                                'esLicencia'              => ($boolEsLicenciamiento) ? $boolEsLicenciamiento : ''
                               );

        return $arrayRespuesta;
    }
    
    /**
     * Documentación para el método tabularFuncionPrecio
     *
     * Funcion que agrega y corregi los caracteres en la funcion precio.
     *
     * @author David León <mdleon@telconet.ec>
     * @version 1.0 01-07-2021
     *
     * @param String $strExpresion Cadena de la Función Precio.
     * @return String Función corregida.
     */
    private function tabularFuncionPrecio($strExpresion)
    {
        if(!$strExpresion)
        {
            return $strExpresion;
        }

        $strEnter     = "&#10"; // Representación del Salto de Línea para el componente TextArea.
        $strExpresion = preg_replace('/\s+/',     ' ',       $strExpresion); // Se ajustan los espacios dobles a un espacio
        $strExpresion = preg_replace('/else if/', 'els@-i@', $strExpresion); // Se ajusta "else if" por "els@-i@" para distinguir de "if" y "else"
        $strExpresion = preg_replace('/if\(/',    'if (',    $strExpresion); // Se ajustan los espacios en la expresión "if(".
        $strExpresion = preg_replace('/else/',    'e15e',    $strExpresion); // Se ajusta "else" por "3ls3" para distinguir de "else if"

        // Agrego Saltos de línea antes y después de las llaves
        $strExpresion = str_replace("{", $strEnter . '{', str_replace("}", $strEnter . '}', $strExpresion));
        $strExpresion = str_replace('if', $strEnter . 'if', $strExpresion);
        $strExpresion = str_replace('els@-i@', $strEnter . 'els@-i@', $strExpresion);
        $strExpresion = str_replace('e15e', $strEnter . 'e15e', $strExpresion);
        $strExpresion = str_replace(';', ';'.$strEnter, $strExpresion);
        $strExpresion = str_replace(']=="', '] == "', $strExpresion);
        $strExpresion = str_replace(']"=="', ']" == "', $strExpresion);

        $arrayChar        = str_split($strExpresion);
        $intTotal         = count($arrayChar);
        $strFuncionPrecio = '';

        $intX = 0;
        $intF = 0;

        for($intI = 0; $intI < $intTotal; $intI++)
        {
            $intIf    = $intI;
            $intIfe   = $intI;
            $intE     = $intI;
            $strIf = '';

            $strChar  = $arrayChar[$intI];
            if($strChar == ';')
            {
                $intF++;
            }
            if($intIf < ($intTotal - 1))
            {
                $intIf = $intIf+1;
                $strIf = $strChar . $arrayChar[$intIf];
            }
            $strElseIfA = '';
            for($intC = 0; $intC < 6; $intC++)
            {
                $intIfe = $intIfe+1;
                if(($intIfe) < $intTotal)
                {
                    $strElseIfA .= $arrayChar[$intIfe];
                }
            }

            $strElseIf = $strChar . $strElseIfA;

            $strElseA = '';
            for($intC = 0; $intC < 3; $intC++)
            {
                $intE = $intE+1;
                if(($intE) < $intTotal)
                {
                    $strElseA .= $arrayChar[$intE];
                }
            }
            $strElse = $strChar . $strElseA;

            // Analiso los tokens que deban llevar indentación principal: {, if, else, esle if.
            if($strChar == '{' || strtolower($strIf) == 'if' || strtolower($strElse) == 'e15e' || strtolower($strElseIf) == 'els@-i@')
            {
                $strLine = $this->addTabs($intX, $strChar); // Agrego los N Tabs

                if($strChar == '{')
                {
                    $intX++; // Al final incremento índice para el siguiente nivel de llave {, solo si el token es una llave.
                }
            }
            else if($strChar == '}')
            {
                $intX--; // Primero disminuyo el índice para el mismo nivel de llave }

                $strLine = $this->addTabs($intX, $strChar); // Agrego los N Tabs
            }
            else
            {
                $strLine = $strChar;
            }

            $strFuncionPrecio .= $strLine; // Se va armando la nueva cadena de la función precio.
        }

        $arrayMatch = array();

        preg_match('/;(.*?)}/', $strFuncionPrecio, $arrayMatch); // Obtengo el valor para reemplazar al final de cada línea de código.

        if(count($arrayMatch) > 1 && $arrayMatch[1] && strlen($arrayMatch[1]) > 4 )
        {
            $strToClean = substr($arrayMatch[1], 4, strlen($arrayMatch[1])); // de la posición 0 a 3 está un "Enter", y obvio de la cadena limpia.
            $strFuncionPrecio = preg_replace('/;(.*?)}/', ";$strToClean}", $strFuncionPrecio); // Ajusto la última línea de código de cada bloque.
        }

        $strFuncionPrecio = preg_replace('/¡/', '&nbsp;', $strFuncionPrecio); // Agrego los espacios que representan la indentación de casa fila.

        $strFuncionPrecio = preg_replace('/e15e/', 'else', $strFuncionPrecio); //  Reemplazo los "Else"
        return preg_replace('/els@-i@/', 'else if', $strFuncionPrecio); // Reemplazo los "If Else"
    }
    
    /**
     * Documentación para el método addTabs
     *
     * Funcion agrega los Tabs a cada inicio de línea dependiendo del nivel al que le corresponda.
     *
     * @author David León <mdleon@telconet.ec>
     * @version 1.0 01-07-2021
     *
     * @param String $strExpresion Cadena de la Función Precio.
     * @return String Función tabulada.
     */
    private function addTabs($intX, $strChar)
    {
        $strTab    = '¡¡¡¡¡¡'; // El token "¡" será la representación de una espacio. 6 espacios representarán a una tabulación.
        $strTabAux = '';

        for($intJ = 0; $intJ < $intX; $intJ++)
        {
            $strTabAux .= $strTab; // Acumulo los Tabs
        }
        if($strChar == '{' || $strChar == '}')
        {
            return $strTabAux . $strChar . '&#10' . $strTabAux . $strTab; // &#10 representa un Enter en TextArea
        }
        else
        {
            return $strTabAux . $strChar;
        }
    }

    /**
     * Funcion que permite la validacion las ordenes de servicio requeridas para agregar el producto SAFE ENTRY
     * 
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 1.0 09-12-2022 - Version inicial
     * 
     * @param array ['intPuntoId' =>'Identificador del punto',
     *              'objProducto' => 'Objeto del producto SAFE ENTRY']
     * @return array [msg = OK || ERROR
     *                mensaje_validaciones = mensaje de respuesta ]
     */
     public function validarSafeEntry($arrayParametros)
    {
        $strServiciosRequeridos = "";
        $strEstado = 'OK';
        $strMensaje = "OK";
        $emComercial = $this->emcom;

        $intPuntoId = $arrayParametros ["intPuntoId"];
        $objProducto = $arrayParametros ["objProducto"];

        try
        {
            $arrayParametrosSafe = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('CONFIG SAFE ENTRY',
                                                        'COMERCIAL',
                                                        '',
                                                        'SERVICIOS_REQUERIDOS',
                                                        '',
                                                        '',
                                                        '',
                                                        '',
                                                        '',
                                                        $arrayParametros["intIdEmpresa"]);
            
            if(!is_array($arrayParametrosSafe))
            {
                throw new \Exception('No se ha podido obtener el parametro para realizar la validacion del servicio.');
            }

            //Estados validos
            $arrayEstadosValidos = json_decode($arrayParametrosSafe['valor2']);

            //Servicios requeridos
            $arrayServiciosRequeridos = array_diff(json_decode($arrayParametrosSafe['valor1']), array($objProducto->getDescripcionProducto()));

            foreach($arrayServiciosRequeridos as $strServicio)
            {
                $objServicio = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                           ->findOneBy(array('descripcionProducto' => $strServicio,
                                                             'estado'              => 'Activo'),
                                                        array('id'=> 'ASC' ));
                
                
                $objServicioPunto = $emComercial->getRepository('schemaBundle:InfoServicio')
                                                ->findOneBy(array('puntoId'    => $intPuntoId,
                                                                  'productoId' => $objServicio->getId(),
                                                                  'estado'     => $arrayEstadosValidos));
                 
                if(!isset($objServicioPunto))
                {
                    $strEstado = 'ERROR';
                    $strServiciosRequeridos .='<b> <br/>'.$objServicio->getDescripcionProducto().'</b>';
                    $strMensaje = 'Para agregar el producto '.$objProducto->getDescripcionProducto().
                    ' se requiere que el punto tenga los siguientes servicios: '.$strServiciosRequeridos;
                    $strMensaje .= '<br/> en alguno de los siguientes estados válidos: '.implode(', ',$arrayEstadosValidos);
                }
                
            }
        }
        catch(\Exception $e)
        {
            $strEstado = 'ERROR';
            $strMensaje = "No se ha podido realizar la validacion del producto";
        }
        
        return array('msg' => $strEstado, 'mensaje_validaciones' => $strMensaje);
    }

    /**
     * Funcion que permite crear la tarea de implemtacion yadjuntar los documentos del formulario
     * 
     * @param array [objProducto
     *               strPrefijoEmpresa
     *               strCodEmpresa
     *               idDepartamento
     *               strIpCliente
     *               strUsrCreacion
     *               arrayArchivos]
     * @return array [status => 'OK | ERROR'
     *                mensaje
     *                idDetalle]
     * 
     * @author Leonardo Mero <lemero@telconet.ec>
     * @version 1.0 20-09-2022 - Version inicial
     */


    public function generarTareaImplementacionSafeEntry($arrayParametros)
    {
        $objServicio          = $arrayParametros["objServicio"];
        $objDetalleSolicitud  = $arrayParametros["objDetalleSolicitud"];
        $objPunto             = $objServicio->getPuntoId();
        $objCliente           = $this->emcom->getRepository('schemaBundle:InfoPersona')
                                            ->findOneBy(array('id'  => $objPunto->getPersonaEmpresaRolId()->getPersonaId()->getId(),
                                                              'estado' => 'Activo'));
        
        $strPrefijoEmpresa    = $arrayParametros["strPrefijoEmpresa"];
        $strCodEmpresa        = $arrayParametros["strCodEmpresa"];
        $strIpCliente         = $arrayParametros["strIpCliente"];
        $strUsrCreacion       = $arrayParametros["strUsrCreacion"];
        $arrayArchivos        = $arrayParametros["arrayArchivos"];
        
        try 
        {

            //Se obtienen los detalles de la tarea
            $arrayParametrosSafe = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                ->getOne('CONFIG TAREAS SAFE ENTRY',
                                                        'COMERCIAL',
                                                        '',
                                                        'CONFIG_TAREA_IMPLEMENTACION',
                                                        '',
                                                        '',
                                                        '',
                                                        '',
                                                        '',
                                                        $strCodEmpresa);
            
            if(!is_array($arrayParametrosSafe))
            {
                throw new \Exception('No se ha podido obtener el parametro para generar la tarea automaticamente.');
            }
           
            $objTarea = $this->emSoporte->getRepository('schemaBundle:AdmiTarea')
                                        ->findOneByNombreTarea($arrayParametrosSafe['valor1']); 
            
            $objDepartamento = $this->emSoporte->getRepository('schemaBundle:AdmiDepartamento')
                                               ->findOneBy(array('nombreDepartamento' => $arrayParametrosSafe['valor3'], 
                                                                 'empresaCod'         => $strCodEmpresa)); 
            
            if(!isset($objDepartamento))
            {
                throw new Exception('No se pudo encontar el departamento parametrizado');    
            }
                                                                 
            $objInfoPersona =  $this->emcom->getRepository('schemaBundle:InfoPersona')
                                           ->findOneBy(array('login'  => $strUsrCreacion,
                                                             'estado' => 'Activo'));

            //Se crea la tarea
            $arrayParamsTarea = array(
                'strIdEmpresa'          => $strCodEmpresa,
                'strPrefijoEmpresa'     => $strPrefijoEmpresa,
                'objDetalleSolicitud'   => $objDetalleSolicitud,
                'strNombreTarea'        => $objTarea->getNombreTarea(),
                'strObservacion'        => $arrayParametrosSafe['valor2'],
                'strNombreDepartamento' => $objDepartamento->getNombreDepartamento(),
                'strEmpleado'           => $objInfoPersona->getNombres().' '.$objInfoPersona->getApellidos() ,
                'strNombreCliente'      => $objCliente->getNombres()?$objCliente->getNombres().' '.$objCliente->getApellidos()
                                           :$objCliente->getRazonSocial(),
                'strUsrCreacion'        => $strUsrCreacion,
                'strIp'                 => $strIpCliente,
                'strOrigen'             => 'WEB-TN',
                'strLogin'              => $objPunto->getLogin(),
                'intPuntoId'            => $objPunto->getId(),
                'strValidacionTags'     => 'NO',
                'boolCrearInfoTarea'    => true
            );
            $arrayRes = $this->serviceSoporte->ingresarTareaInterna($arrayParamsTarea);
            if($arrayRes["status"] !== 'OK')
            {
                throw new Exception($arrayRes['mensaje']);
            }
            if(!empty($arrayArchivos))
            {
                //Se realiza la subida de los archivos a la tarea generada
                $arrayParametrosArchivos = array(
                    "idCaso"             => 0,
                    "idTarea"            => $arrayRes['idDetalle'],
                    "servicio"           => 0,
                    "origenCaso"         => "N",
                    "origenTarea"        => "S",
                    "strCodigoDocumento" => "",
                    "strPrefijoEmpresa"  => $strPrefijoEmpresa,
                    "strUser"            => $strUsrCreacion,
                    "strIdEmpresa"       => $strCodEmpresa,
                    "arrayArchivos"      => $arrayArchivos);

                $arrayResArchivo = $this->serviceSoporte->guardarMultiplesAdjuntosCasosTareasEnNfs($arrayParametrosArchivos);

                if(strtoupper($arrayResArchivo["status"]) !== "OK")
                {
                    throw new Exception($arrayResArchivo['mensaje']);
                }
            }
           
            $strStatus  = $arrayRes["status"];
            $strMensaje = $arrayRes["mensaje"];
        }
        catch (\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = "No se pudo generar la tarea de implemetacion SAFE ENTRY: ".$e->getMessage();
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService->generarTareaImplementacionSafeEntry',
                                              "No se pudo generar la tarea de implemetacion SAFE ENTRY".
                                              $e->getMessage(), 
                                              $strUsrCreacion, 
                                              $strIpCliente);
        }

        $arrayRespuesta = array('status' => $strStatus, 'mensaje' => $strMensaje, 'idDetalle' => $arrayRes['intDetalle']);
        return $arrayRespuesta;
        
    }

    /**
     * Documentación para el método renovNetLifeCam
     *
     * Funcion que renueva automaticamente a los producto NetlifeCam cuando cumple su tiempo de permanencia minima de 
     * 24 meses.
     *
     * @author Jessenia Piloso <jpiloso@telconet.ec>
     * @version 1.0 19-10-2022
     *
     * @author Emmanuel Martillo <emartillo@telconet.ec>
     * @version 1.1 05-12-2022 - Se corrije la manera de obtener la fecha de fin de ciclo
     * 
     */
    public function renovNetLifeCam()
    {
             
        try
        {
            //Consulta todos los servicios con NetlifeCam y NetlifeCamOutDoor            
            $arrayParamProducNetCam             = $this->serviceGeneral->paramProductosNetlifeCam();   
            
            $arrayServicios  = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                           ->getServProdNetlife($arrayParamProducNetCam);

            if(is_array($arrayServicios) && !empty($arrayServicios))
            {
                foreach($arrayServicios as $objServNetlifeCam)
                {
                    //Validar si la orden ha sido ingresada
                    $objServicio  = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                                ->find($objServNetlifeCam['idServicio']);

                    $objServNuevoProCarac = $this->getValorCaracteristicaServicio(array(
                                                                    'objServicio' => $objServicio,
                                                                    "strNombreCaracteristica" => "ID_SERV_NUEVA_RENOVACION"));
                    if(is_object($objServNuevoProCarac))
                    {   
                        $strServNuevo = $objServNuevoProCarac->getValor();
                        if(isset($strServNuevo) && !empty($strServNuevo))
                        {
                            //Consultar en la infoServicio si existe 
                            $objServNuevo  = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                                ->find($strServNuevo);

                            if (is_object($objServNuevo))
                            {
                                $strPermiIngreRenova = 'N';
                            }
                            
                        }
                        
                    } 
                    else
                    {
                        //No existe el objeto caracteristica y la renovacion debe ser ingresada
                        $strPermiIngreRenova = 'S';

                    } 

                    if($strPermiIngreRenova === 'S')
                    {
                        $strIdPunto = $objServNetlifeCam['puntoid'];
                        $entityPunto = $this->emCome->getRepository('schemaBundle:InfoPunto')->find($strIdPunto);
                        $entityRol   = $this->emCome->getRepository('schemaBundle:AdmiRol')
                                        ->find($entityPunto->getPersonaEmpresaRolId()->getEmpresaRolId()->getRolId());
                        
                        //Validar fecha, Si cumple los 24 meses se renueva camara
                        $strCumplePermanenciaMinima = $this->consultaPerMin($objServNetlifeCam);

                        //Consultar su ciclo de facturación y genera el aviso de renovación 4 días antes de su finalización de ciclo de facturación
                        $strFechaPermiRenova = 'N';
                        $objCaracteristicaCiclo = $this->emcom->getRepository('schemaBundle:AdmiCaracteristica')
                                                            ->findOneBy(array(
                                                                            "descripcionCaracteristica" => 'CICLO_FACTURACION',
                                                                            "estado"                    => "Activo"
                                                                            ));
                        $objPerEmpRolCaracOrigen = $this->emcom->getRepository("schemaBundle:InfoPersonaEmpresaRolCarac")
                                                        ->findOneBy(array(
                                                            "personaEmpresaRolId" => $entityPunto->getPersonaEmpresaRolId(),
                                                            "estado"              => "Activo",
                                                            "caracteristicaId"    => $objCaracteristicaCiclo->getId()));
                        $objAdmiCicloOrigen = $this->emcom->getRepository("schemaBundle:AdmiCiclo")->find($objPerEmpRolCaracOrigen->getValor());
                        
                        //Consulta parametro de cuantos dias antes se debe activar el producto segun su Fecha Fin de Facturacion
                        $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                            ->getOne("PROYECTO NETLIFECAM", 
                                                                        "INFRAESTRUCTURA", 
                                                                        "ACTIVACION PARA NETLIFECAM", 
                                                                        "", 
                                                                        "", 
                                                                        "DIAS ANTES PARA GENERAR ORDEN DE RENOVACION", 
                                                                        "",
                                                                        "",
                                                                        "",
                                                                        "18"
                                                                    );
                                                                    
                        if(!empty($arrayParametrosDet))
                        {
                            $strDiasGeneRenova = $arrayParametrosDet['valor3']; 
                        }

                        
                        $objFechaActual = date("d-m-Y");
                        $objFeFinCiclo = $objAdmiCicloOrigen->getFeFin()->format('d-m-Y');
                        $strCicloFact = $objAdmiCicloOrigen->getNombreCiclo();
                        $arrayParamsCiclo = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                        ->getOne("CICLO_FACTURACION", "FINANCIERO", 
                                                                 "GENERAR FECHA DE CORTE",
                                                                 "PARAMETRIZACION PARA LOS CICLOS DE FACTURACION", 
                                                                  $strCicloFact,"","","","","18");
                        if(!empty($arrayParamsCiclo))
                        {
                            $strParamsCiclo = $arrayParamsCiclo['valor1']; 
                        } 
                        $strArrfechaCiclo = explode('-', $objFeFinCiclo);
                        $objValFechaActual = explode('-', $objFechaActual);

                        if($strCicloFact===$strParamsCiclo && 
                           in_array($objAdmiCicloOrigen->getId(),$arrayParamsCiclo))
                        {
                            $objFeFinMes = date("t-m-Y", strtotime($objFechaActual));
                            $strFecRen = $objFeFinMes;
                        }
                        elseif ($strCicloFact===$strParamsCiclo)
                        {
                            $strFechaRenov = $strArrfechaCiclo[0].'-'.$objValFechaActual[1].'-'.$objValFechaActual[2];
                            $arrayBoolFecha = explode('-', $strFechaRenov);
                            $boolFecha = checkdate($arrayBoolFecha[1], $arrayBoolFecha[0], $arrayBoolFecha[2]);
                            if(!$boolFecha)
                            {
                                $strFecRen = date("d-m-Y",strtotime($strArrfechaCiclo[0].'-'.$objValFechaActual[1].'-'.$objValFechaActual[2]));
                            }
                            else 
                            {
                                $strFecRen = date("d-m-Y",strtotime($strFechaRenov));
                            }
                        }
                        $objFePermiRenova = date("d-m-Y", strtotime($strFecRen."- ".$strDiasGeneRenova." days"));
                        if($objFechaActual === $objFePermiRenova)
                        {
                            $strFechaPermiRenova = 'S';
                        }   
                        /*Si cumple permanencia minima de 24 meses,  
                        servicio se encuentra en estado ACTIVO y es 4 dias antes de la fecha de su ultima facturacion
                        se crea el nuevo servicio*/
                        if ($strCumplePermanenciaMinima === 'S' && $strPermiIngreRenova === 'S'
                        && $objServNetlifeCam['estado'] == 'Activo' && $strFechaPermiRenova === 'S')
                        {   
                            $arrayRespServicio = $this->ingSerNetlifeCam($objServicio,$entityPunto);
                            if($arrayRespServicio['status'] == 'OK')
                            {
                                $objProducto = $this->emcom->getRepository('schemaBundle:AdmiProducto')->find($objServNetlifeCam['productoid']);
                                $objServicioNuevo  = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                            ->find($arrayRespServicio['intIdServicio']);
                                
                                //Ingresar caracteristicas
                                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicioNuevo,
                                                                                    $objProducto,
                                                                                    "ID_SERV_ANTERIOR_RENOVACION",
                                                                                    $objServNetlifeCam['idServicio'],
                                                                                    "Renovacion");

                                $this->servicioTecnico->ingresarServicioProductoCaracteristica($objServicio,
                                                                                    $objProducto,
                                                                                    "ID_SERV_NUEVA_RENOVACION",
                                                                                    $arrayRespServicio['intIdServicio'],
                                                                                    "Renovacion");
                            }
                        }
                    }
                    
                }
            }
            $strRespuesta = 'OK';
        }
        catch (\Exception $e)
        {
            $this->utilServicio->insertError( 'Telcos+', 
                                  'InfoServicioService->renovNetLifeCam', 
                                  "Error en la ejecución delproceso de renovación por crontab. ".$e->getMessage(), 
                                  'Renovacion', 
                                  "127.0.0.1" ); 
            return $strRespuesta = $e->getMessage();
        }
        return $strRespuesta;
    }
    

    public function ingSerNetlifeCam($objServicio,$entityPunto)
    {
        $strUsrCreacion             = 'Renovacion';
        $arrayServProdCaractNuevo   = array();     
        try
        {   
            $entityRol  = $this->emcom->getRepository('schemaBundle:AdmiRol')
                                      ->find($entityPunto->getPersonaEmpresaRolId()->getEmpresaRolId()->getRolId());
            $intOrdenId = $objServicio->getOrdenTrabajoId()->getId();             
            $objOrdenTrabajo = $this->emCome->getRepository('schemaBundle:InfoOrdenTrabajo')
                            ->find($intOrdenId);
            $objItems = $this->emcom->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                ->findByProductoIdyEstado($objServicio->getProductoId()->getId(),'Activo');
            foreach( $objItems as $objItem )
            {
                if($objItem->getCaracteristicaId()->getDescripcionCaracteristica() == "CAPACIDAD1")
                {
                    $strNombreCaracteristica = $objItem->getCaracteristicaId()->getDescripcionCaracteristica(); 
                    $strIdProduCarac = $objItem->getId();
                    $objSpcCapac1 = $this->getValorCaracteristicaServicio(array('objServicio' => $objServicio,
                                                                                "strNombreCaracteristica" => $strNombreCaracteristica));
                    if(is_object($objSpcCapac1))
                    {
                        $strValorProdCarac = $objSpcCapac1->getValor();
                        $arrayServProdCaractNuevo = array (
                                                            array(
                                                                "idCaracteristica" => $strIdProduCarac,
                                                                "caracteristica" => "[".$strNombreCaracteristica."]",
                                                                "valor" => $strValorProdCarac ? $strValorProdCarac : " "
                                                            )
                                                    );
                    }
                }
            }
                
            $arrayParametros = array(
                array(
                    'codigo'                     =>     $objServicio->getProductoId()->getId(),
                    'producto'                   =>     $objServicio->getProductoId()->getNombreTecnico(),
                    'cantidad'                   =>     1,
                    'frecuencia'                 =>     1,
                    'precio'                     =>     $objServicio->getPrecioVenta(),
                    'precio_total'               =>     $objServicio->getPrecioVenta(),
                    'info'                       =>     "C",
                    'hijo'                       =>     false,
                    'caracteristicasProducto'    =>     json_encode($arrayServProdCaractNuevo),
                    'caractCodigoPromoIns'       =>     "",
                    'nombrePromoIns'             =>     "",
                    'idTipoPromoIns'             =>     "",
                    'caractCodigoPromo'          =>     "",
                    'nombrePromo'                =>     "",
                    'idTipoPromo'                =>     "",
                    'nombrePromoBw'              =>     "",
                    'idTipoPromoBw'              =>     "",
                    'strServiciosMix'            =>     "",
                    'servicio'                   =>     0,
                    'tipoMedio'                  =>     "",
                    'backupDesc'                 =>     "",
                    'fecha'                      =>     "",
                    'precio_venta'               =>     "0",
                    'precio_instalacion'         =>     $objServicio->getPrecioInstalacion(),
                    'descripcion_producto'       =>     "",
                    'precio_instalacion_pactado' =>     "0",
                    'ultimaMilla'                =>     "1",
                    'um_desc'                    =>     "Fibra Optica",
                    'login_vendedor'             =>     $strUsrCreacion,
                    'nombre_vendedor'            =>     $strUsrCreacion,
                    'strPlantillaComisionista'   =>     "",
                    'cotizacion'                 =>     "",
                    'cot_desc'                   =>     "Ninguna",
                    'intIdPropuesta'             =>     "",
                    'strPropuesta'               =>     ""
                )
            );

            $arrayParamsServicio = array("codEmpresa"           => '18',
                                        "idOficina"             => $objOrdenTrabajo->getOficinaId(),
                                        "entityPunto"           => $entityPunto,
                                        "entityRol"             => $entityRol,
                                        "usrCreacion"           => $strUsrCreacion,
                                        "clientIp"              => '127.0.0.1',
                                        "tipoOrden"             => 'N',
                                        "ultimaMillaId"         => null,
                                        "servicios"             => $arrayParametros,
                                        "strPrefijoEmpresa"     => 'MD',
                                        "session"               => null,
                                        "intIdSolFlujoPP"       => 0,
                                        "strOrigen"             => "WEB",
                                        "arrayMaquinasVirtuales"=> ''
                                        );
            /* @var $serviceInfoServicio \telconet\comercialBundle\Service\InfoServicioService */
            $arrayRespServicio = $this->crearServicio($arrayParamsServicio);
            $arrayRespuesta = array('status'            => 'OK',
                                    'mensaje'           => 'Servicios Creado Correctamente',
                                    'intIdServicio'     => $arrayRespServicio['intIdServicio']);
            $strStatus      = "OK";
            $strMensaje     = "Servicios Creado Correctamente";
            $intIdServicio  = $arrayRespServicio['intIdServicio'];
        }
        catch (\Exception $e)
        {   
            $strStatus      = "ERROR";
            $strMensaje     = $e->getMessage();
            $intIdServicio  = 0;
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService->ingSerNetlifeCam', 
                                              "Problema al crear Servicio por renovación. ".
                                              $e->getMessage(), 
                                              $strUsrCreacion, 
                                              "127.0.0.1" ); 
        }
        $arrayRespuesta = array("status"        => $strStatus,
                                "mensaje"       => $strMensaje,
                                "intIdServicio" => $intIdServicio);
        return $arrayRespuesta;
    }
    
    public function consultaPerMin($objServNetlifeCam)
    {
        try
        {
            $strCumplePermanenciaMinima = 'N';

            // Se obtiene permanencia mínima de servicio Netlifecam
            $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne("CANCELACION VOLUNTARIA", 
                                                        "FINANCIERO", 
                                                        "FACTURACION", 
                                                        "", 
                                                        "PERMANENCIA MINIMA NETLIFECAM", 
                                                        "", 
                                                        "",
                                                        "",
                                                        "",
                                                        "18"
                                                    );
            if(!empty($arrayParametrosDet))
            {
                $intPermanenciaNetlifeCam = intval($arrayParametrosDet['valor2']); 
            }

            $intNumMesesActivoNtlCam  = str_pad(' ', 30);           

            $strSql  = "BEGIN 
                        :Ln_NumMesesActivo := 
                        DB_FINANCIERO.FNCK_CANCELACION_VOL.F_GET_MESES_ACTIVO(:Fn_IdServicio); END;";
            $objStmt = $this->emfinan->getConnection()->prepare($strSql);
            $objStmt->bindParam('Fn_IdServicio', $objServNetlifeCam['idServicio']);
            $objStmt->bindParam('Ln_NumMesesActivo', $intNumMesesActivoNtlCam);

            $objStmt->execute();
            $intNumMesesActCam = intval($intNumMesesActivoNtlCam);
            if($intNumMesesActCam  >= $intPermanenciaNetlifeCam)
            {
                $strCumplePermanenciaMinima = 'S';
                error_log("intNumMesesActivoNtlCam");
                error_log($intNumMesesActivoNtlCam);
                
            }
        
        }
        catch (\Exception $e)
        {
            return $strRespuesta = $e->getMessage();
        }
        return $strRespuesta = $strCumplePermanenciaMinima;
    }


    /**
     * Método usado para crear la solicitud de planificacion asociada al servicio NetlifeCam 
     * tomando en cuenta el servicio origen
     * 
     * @author Jessenia Piloso<jpiloso@telconet.ec>
     * @version 1.0 20-10-2022
     *
     * 
     * @param array $arrayParametros [
     *                                  "objServicioOrigen"     => objeto del servicio origen
     *                                  "objServicioDestino"    => objeto del servicio destino
     *                                  "strCodEmpresa"         =>  id de la empresa,
     *                                  "strUsrCreacion"        => usuario de creación
     *                                  "strIpCreacion"         => ip de creación
     *                               ]
     * @return array $arrayRespuesta [
     *                                  "status"    => OK o ERROR
     *                                  "mensaje"   => Mensaje de error
     *                               ]
     * 
     */
    public function creaSolicitudNetLifeCAM($arrayParametros)
    {
        $objServicioOrigen              = $arrayParametros["objServicioOrigen"];
        $objServicioDestino             = $arrayParametros["objServicioDestino"];
        $strCodEmpresa                  = $arrayParametros["strCodEmpresa"];
        $strUsrCreacion                 = $arrayParametros["strUsrCreacion"];
        $strIpCreacion                  = $arrayParametros["strIpCreacion"];
        $strOpcion                      = $arrayParametros["strOpcion"] ? $arrayParametros["strOpcion"] : "traslado de servicio";
        $strMensaje                     = "";
        try
        {
            if(!is_object($objServicioOrigen) || !is_object($objServicioDestino))
            {
                throw new \Exception("No se han enviado correctamente los servicios origen y destino");
            }
            
            $strEstadoServicioOrigen    = $objServicioOrigen->getEstado();
            $strEstadoServicioDestino   = $objServicioDestino->getEstado();
            $strTipoSolPlanificacion    = "SOLICITUD PLANIFICACION";
            $objTipoSolicitudPlanifi  = $this->emCome->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                           ->findOneByDescripcionSolicitud($strTipoSolPlanificacion);
            if(!is_object($objTipoSolicitudPlanifi))
            {
                throw new \Exception("No se encontró información acerca del tipo de solicitud de planificacion");
            }

            $arrayEstadosVerificaSolPlanificacion   = array();
            $arrayEstadosAbiertosSolPlanificacion   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                                                  ->get('PARAMETROS_ASOCIADOS_A_SERVICIOS_MD', 
                                                                        '', 
                                                                        '', 
                                                                        '',
                                                                        'ESTADOS_SOLICITUDES_ABIERTAS',
                                                                        'SOLICITUD PLANIFICACION',
                                                                        '',
                                                                        '',
                                                                        '',
                                                                        $strCodEmpresa);
            if(is_array($arrayEstadosAbiertosSolPlanificacion) && count($arrayEstadosAbiertosSolPlanificacion) > 0)
            {
                foreach($arrayEstadosAbiertosSolPlanificacion as $arrayEstadoAbiertoSolPlanificacion)
                {   
                    $arrayEstadosVerificaSolPlanificacion[] = $arrayEstadoAbiertoSolPlanificacion['valor3'];
                }
            }

            if(!isset($arrayEstadosVerificaSolPlanificacion) || empty($arrayEstadosVerificaSolPlanificacion))
            {
                throw new \Exception("No se ha podido obtener los estados permitidos para una SOLICITUD DE PLANIFICACION");
            }
            
            $objProductoInternet    = $this->emCome->getRepository('schemaBundle:AdmiProducto')
                                                   ->findOneBy(array(   "nombreTecnico" => "INTERNET", 
                                                                        "empresaCod"    => $strCodEmpresa,
                                                                        "estado"        => "Activo"));
            if(!is_object($objProductoInternet))
            {
                throw new \Exception("No se ha podido obtener correctamente el producto Internet");
            }
            
            $arrayRespuestaServInternetValido   = $this->servicioTecnico
                                            ->obtieneServicioInternetValido(array("intIdPunto"    =>
                                                                                $objServicioOrigen->getPuntoId()->getId(),
                                                                                "strCodEmpresa" => $strCodEmpresa
                                                                                ));
            $strStatusServInternetValido        = $arrayRespuestaServInternetValido["status"];
            $objServicioInternetValido          = $arrayRespuestaServInternetValido["objServicioInternet"];
            if($strStatusServInternetValido != "OK" && !is_object($objServicioInternetValido) )
            {
                throw new \Exception('No se ha podido obtener el Servicio de Internet en el punto origen');
            }
            
            //Servicio Origen no está activo y se crea la solicitud para que siga el flujo normal
            if($strEstadoServicioDestino === "PrePlanificada")
            {
                /**
                 * Estos registros se crearán de acuerdo a como se encontraban en el servicio origen con un estado inicial
                 * de PrePlanificada para que PYL pueda gestionarlas
                 * 
                 * PrePlanificada -> PrePlanificada
                 * Asignada -> PrePlanificada
                 * 
                 */

                //crear Solicitud Destino
                $strObservacionCorreo       = $strTipoSolPlanificacion." creada automáticamente";
                $objSolPlanificacionDestino = new InfoDetalleSolicitud();
                $objSolPlanificacionDestino->setServicioId($objServicioDestino);
                $objSolPlanificacionDestino->setTipoSolicitudId($objTipoSolicitudPlanifi);
                $objSolPlanificacionDestino->setEstado($strEstadoServicioDestino);
                $objSolPlanificacionDestino->setUsrCreacion($strUsrCreacion);
                $objSolPlanificacionDestino->setFeCreacion(new \DateTime('now'));
                $this->emCome->persist($objSolPlanificacionDestino);
                $this->emCome->flush();

                
                    
                $objDetSolHistPlanificacionDestino = new InfoDetalleSolHist();
                $objDetSolHistPlanificacionDestino->setDetalleSolicitudId($objSolPlanificacionDestino);
                $objDetSolHistPlanificacionDestino->setIpCreacion($strIpCreacion);
                $objDetSolHistPlanificacionDestino->setFeCreacion(new \DateTime('now'));
                $objDetSolHistPlanificacionDestino->setUsrCreacion($strUsrCreacion);
                $objDetSolHistPlanificacionDestino->setEstado($strEstadoServicioDestino);
                $objDetSolHistPlanificacionDestino->setObservacion($strObservacionCorreo);
                $this->emCome->persist($objDetSolHistPlanificacionDestino);
                $this->emCome->flush();

                //Se cierran las tareas del origen
                $objSolPlanificacionAbiertaOrigen = $this->emCome->getRepository('schemaBundle:InfoDetalleSolicitud')
                                                        ->findOneBy(array('servicioId'      => $objServicioOrigen->getId(),
                                                                        'tipoSolicitudId'   => $objTipoSolicitudPlanifi->getId(),
                                                                        'estado'            => $arrayEstadosVerificaSolPlanificacion));
                
                if(is_object($objSolPlanificacionAbiertaOrigen))
                {
                    $arrayCaractsSolPlanificacionAbiertaOrigen  = $this->emCome->getRepository('schemaBundle:InfoDetalleSolCaract')
                                                                            ->findBy(array(  "detalleSolicitudId" => 
                                                                                                $objSolPlanificacionAbiertaOrigen->getId(),
                                                                                                "estado"             => 
                                                                                                $arrayEstadosVerificaSolPlanificacion
                                                                                        ));
                    //Si existe una caracteristica de solicitud abierta
                    if(isset($arrayCaractsSolPlanificacionAbiertaOrigen) && !empty($arrayCaractsSolPlanificacionAbiertaOrigen))
                    {
                        foreach($arrayCaractsSolPlanificacionAbiertaOrigen as $objCaractSolPlanificacionOrigen)
                        {
                            //cierra Detalle de la solicitud de la caracteristica origen
                            $objCaractSolPlanificacionOrigen->setEstado("Finalizada");
                            $objCaractSolPlanificacionOrigen->setUsrUltMod($strUsrCreacion);
                            $objCaractSolPlanificacionOrigen->setFeUltMod(new \DateTime('now'));
                            $this->emCome->persist($objCaractSolPlanificacionOrigen);
                            $this->emCome->flush();
                            //Crea Detalle de la solicitud de la Caracteristica Destino con el valor del Origen
                            $objCaractSolPlanificacionDestino = new InfoDetalleSolCaract();
                            $objCaractSolPlanificacionDestino->setCaracteristicaId($objCaractSolPlanificacionOrigen->getCaracteristicaId());
                            $objCaractSolPlanificacionDestino->setDetalleSolicitudId($objSolAgregarEquipoDestino);
                            $objCaractSolPlanificacionDestino->setValor($objCaractSolPlanificacionOrigen->getValor());
                            $objCaractSolPlanificacionDestino->setEstado($strEstadoServicioDestino);
                            $objCaractSolPlanificacionDestino->setUsrCreacion($strUsrCreacion);
                            $objCaractSolPlanificacionDestino->setFeCreacion(new \DateTime('now'));
                            $this->emCome->persist($objCaractSolPlanificacionDestino);
                            $this->emCome->flush();
                        }
                    }

                    //Se finaliza la solicitud de agregar equipo asociada al servicio origen del traslado
                    $objSolPlanificacionAbiertaOrigen->setEstado("Replanificada");
                    $this->emCome->persist($objSolPlanificacionAbiertaOrigen);
                    $this->emCome->flush();

                    $objDetSolHistPlanificacionOrigen = new InfoDetalleSolHist();
                    $objDetSolHistPlanificacionOrigen->setDetalleSolicitudId($objSolPlanificacionAbiertaOrigen);
                    $objDetSolHistPlanificacionOrigen->setEstado($objSolPlanificacionAbiertaOrigen->getEstado());
                    $objDetSolHistPlanificacionOrigen->setObservacion("Se replanifica ".$strTipoSolPlanificacion." por ".$strOpcion);
                    $objDetSolHistPlanificacionOrigen->setUsrCreacion($strUsrCreacion);
                    $objDetSolHistPlanificacionOrigen->setFeCreacion(new \DateTime('now'));
                    $objDetSolHistPlanificacionOrigen->setIpCreacion($strIpCreacion);
                    $this->emCome->persist($objDetSolHistPlanificacionOrigen);
                    $this->emCome->flush();
                    
                    $arrayParamsSolPlanificacionOrigen  = array("intIdDetalleSolicitud" => $objSolPlanificacionAbiertaOrigen->getId(),
                                                                "strProceso"            => 
                                                                "SEGUIMIENTO_GENERAL: La tarea fue replanificada por ".$strOpcion);
                    //Cierra solicitud Origen
                    $this->eminf->getRepository('schemaBundle:InfoDetalleSolicitud')
                    ->cerrarTareasPorSolicitud($arrayParamsSolPlanificacionOrigen);
                    
                    
                    
                }
            }
            else
            {
                throw new \Exception("No existe un flujo definido para servicios NetlifeCam OutDoor con el servicio origen en estado "
                                     .$strEstadoServicioOrigen
                                     ." y el servicio destino en estado ".$strEstadoServicioDestino);
            }
            $strStatus = "OK";
        }
        catch(\Exception $e)
        {
            $strStatus  = "ERROR";
            $strMensaje = $e->getMessage();
            $this->utilServicio->insertError( 'Telcos+', 
                                              'InfoServicioService->creaSolicitudNetLifeCamCRS', 
                                              "Se presentaron problemas al crear la solicitud de NetLifeCam Band en CRS. ".
                                              $e->getMessage(), 
                                              $strUsrCreacion, 
                                              $strIpCreacion );
            error_log("Error al ejecutar el flujo de NetLifeCam Band en CRS " . $e->getMessage());
        }
        $arrayRespuesta = array("status"                        => $strStatus,
                                "mensaje"                       => $strMensaje);
        return $arrayRespuesta;
    }
    
    /** 
     * Función que calcula nuevo algoritmo de factibilidad por microservicios
     * 
     * @author : Antonio Ayala <afayala@telconet.ec>
     * @version 1.0 21-07-2022
     * 
     * @param 
     *         string $strTokenCas
     *         string $strPin
     * @throws Exception
     * @return $arrayResultado
     * 
     * @author : Steven Ruano <sruano@telconet.ec>
     * @version 1.1 31-03-2023  Agrega valor pasaPorNuevoAlgoritmo en la respuesta del array para validar
     *                          que paso por el proceso de Nuevo Algoritmo Factbilidad.
     * 
     */
    public function obtenerFactibilidadMS($arrayParametrosFactibilidad)
    {
        try
        {
            $objOptions         = array(CURLOPT_SSL_VERIFYPEER => false,
                                        CURLOPT_HTTPHEADER     => array('Content-Type: application/json',
                                        'tokenCas: ' . $arrayParametrosFactibilidad['token'])
                                       ); 
                        
            $strJsonData        = json_encode($arrayParametrosFactibilidad);
            $arrayResponseJson  = $this->serviceRestClient->postJSON($this->strUrlObtenerFactibilidadMs, $strJsonData , $objOptions);
            $strJsonRespuesta   = json_decode($arrayResponseJson['result'],true);

            if(isset($strJsonRespuesta['code']) && $strJsonRespuesta['code']==0 
            && isset($strJsonRespuesta['status'])
            && isset($strJsonRespuesta['message']) )
            {   
                $arrayResultadoFinal = $strJsonRespuesta['data'];
            }
            else
            {
                $arrayResultado['strStatus']      = "ERROR";
                if(empty($strJsonRespuesta['message']))
                {
                    $arrayResultado['strMensaje']  = "No Existe Conectividad con el WS MS CORE TEC FACTIBILIDAD CONNECTIVITY.";
                }
                else
                {
                    $arrayResultado['strMensaje']  = $strJsonRespuesta['message'];
                }
            }
            
            if ($arrayParametrosFactibilidad['prefijoEmpresa'] !== "TN")
            {
                $arrayResultado['id_caja']                              = $arrayResultadoFinal['idCaja'];
                $arrayResultado['nombre_caja']                          = $arrayResultadoFinal['nombreCaja'];
                $arrayResultado['estado_caja']                          = $arrayResultadoFinal['estadoCaja'];
                $arrayResultado['id_elemento_conector']                 = $arrayResultadoFinal['idElementoConector'];
                $arrayResultado['nombre_elemento_conector']             = $arrayResultadoFinal['nombreElementoConector'];
                $arrayResultado['estado_elemento_conector']             = $arrayResultadoFinal['estadoElementoConector'];
                $arrayResultado['id_interface_elemento_conector']       = $arrayResultadoFinal['idInterfaceElementoConector'];
                $arrayResultado['nombre_interface_elemento_conector']   = $arrayResultadoFinal['nombreInterfaceElementoConector'];
                $arrayResultado['distancia_caja']                       = $arrayResultadoFinal['distancia'];
                $arrayResultado['pasaNuevoAlgoritmo']                   = $arrayResultadoFinal['pasaNuevoAlgoritmo'];                
            }
            
            return $arrayResultado;
        }
        catch(\Exception $e)
        {
            $strRespuesta   = "Error al ejecutar el proceso de obtener factibilidad. Favor Notificar a Sistemas".$e->getMessage();
            $arrayResultado = array ('strMensaje'     =>$strRespuesta);
            $this->serviceUtil->insertError('Telcos+',
                                            'InfoServicioService.obtenerFactibilidadMS',
                                            'Error InfoServicioService.obtenerFactibilidadMS:'.$e->getMessage(),
                                            $arrayParametrosFactibilidad['strUsrCreacion'],
                                            $arrayParametrosFactibilidad['strIpCreacion']); 
            return $arrayResultado;
        }
    }

     /**
    * Documentación para el método validaEstadoPunto
    *
    * Funcion que valida el estado del punto no sea alguno de los que se encuentren parametrizados
    *
    * @author Alex Gómez <algomez@telconet.ec>
    * @version 1.0 19-07-2022
    *
    * @param String $arrayParametros Contiene intIdPunto, strCodEmpresa.
    * @return String Mensaje de error.
    */
   public function validaEstadoPunto($arrayParametros)
   {
       $strResultadoMensaje = '';
       $intIdPunto       = $arrayParametros['intIdPunto'];
       $strCodEmpresa    = $arrayParametros['strCodEmpresa'];
       $entityPunto      = $this->emcom->getRepository('schemaBundle:InfoPunto')->find($intIdPunto);
       $strEstadoPunto   = $entityPunto->getEstado();

       //Se obtienen los estados no permitidos desde el parámetro
       $arrayParametrosEstados = array('strNombreParametroCab' => 'ESTADOS_RESTRICCION_PUNTO_ADDSERVICIO',
                                       'strEstado'             => 'Activo',
                                       'strDescripcion'        => 'Estado del punto no permitido para agregacion de servicio.',
                                       'strEmpresaCod'         => $strCodEmpresa);


                                       

       //Obtiene los estados no permitidos según el parámetro.
       $arrayListParams   = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                               ->findParametrosDet($arrayParametrosEstados);

      

       //Valida el estado actual del punto
       foreach($arrayListParams["arrayResultado"] as $arrayEstado)
       {


           error_log($arrayEstado['strValor1']);
           if($arrayEstado['strValor1'] === $strEstadoPunto)
           {
               $strResultadoMensaje = 'El servicio no se puede agregar porque el punto se encuentra en estado <b>'. $strEstadoPunto .'</b>.';
               break;
           }
       }

       return $strResultadoMensaje;
   }

      /**
     * generaTareasCierrePuntoOrigen
     *
     * Función que permite generar tareas de cierre al trasladar en el nuevo flujo
     *
     * @author Andre Lazo <alazo@telconet.ec>
     * @version 1.0  17-02-2023 - Versión Inicial
     *
     * @param $arrayParametrosRetiro[
     *                                "intIdPunto"            => id del punto de origen
     *                                "strIpCreacion"          => Ip del usuario en sesión
     *                                "strUsrCreacion"         => Usuario en sesion
     *                                "intIdPersonaEmpresaRol" => Identificador de persona empresa rol de usuario en sesión
     *                              ]
     */
    public function generaTareasCierrePuntoOrigen($arrayParametros)
    {
        $emGeneral              = $this->emgen;
        $emComercial            = $this->emcom;
        $intIdPunto            =  $arrayParametros["intIdPuntoDestino"];
        $strIpCreacion          = $arrayParametros["strIpCreacion"];
        $strUsrCreacion         = $arrayParametros["strUsrCreacion"];
        $intIdPersonaEmpresaRol = $arrayParametros["intIdPersonaEmpresaRol"];
        $strEmpresaCod          = $arrayParametros["strEmpresaCod"];
        $arrayServicios         = $arrayParametros["arrayServicios"];
        $serviceServicioTecnico = $this->serviceGeneral;
        $intFormaContacto=null;
        $arrayDatosCaracteriticas=array();

        try
        {
            //OBTENER LAS CARACTERISTICAS NECESARIAS
            $objIdOrigenPuntoCaracteristica = $emComercial->getRepository("schemaBundle:AdmiCaracteristica")
            ->findOneBy(
                array(
                    "descripcionCaracteristica" => 'PUNTO_ORIGEN_CREACION',
                    "estado"                    => 'Activo'
                )
            );

            if(empty($objIdOrigenPuntoCaracteristica) || !is_object($objIdOrigenPuntoCaracteristica))
            {
                throw new \Exception("No se encontró característica PUNTO_ORIGEN_CREACION, , con los parámetros enviados.");
            }
            
            $objOrigenCaracteristica = $emComercial->getRepository("schemaBundle:AdmiCaracteristica")
            ->findOneBy(
                array(
                    "descripcionCaracteristica" => 'ORIGEN_REQUERIMIENTO',
                    "estado"                    => 'Activo'
                )
            );

        if(empty($objOrigenCaracteristica) || !is_object($objOrigenCaracteristica))
        {
            throw new \Exception("No se encontró característica ORIGEN_REQUERIMIENTO, con los parámetros enviados.");
        }

        $objPuntoAtencionCaracteristica  = $emComercial->getRepository("schemaBundle:AdmiCaracteristica")
        ->findOneBy(
            array(
                "descripcionCaracteristica" => 'PUNTO_ATENCION',
                "estado"                    => 'Activo'
            )
        );
        if(empty($objPuntoAtencionCaracteristica) || !is_object($objPuntoAtencionCaracteristica))
            {
                throw new \Exception("No se encontró característica PUNTO_ATENCION, con los parámetros enviados.");
            }
            //OBTENER VALORES DE LAS CARACTERISTICAS
            $objIdPuntoCaracteristicaOrigen=$emComercial->getRepository("schemaBundle:InfoPuntoCaracteristica")
            ->findOneBy(
                [
                    'puntoId'=>$intIdPunto,
                    'caracteristicaId'=>$objIdOrigenPuntoCaracteristica->getId(),
                    'estado'=>'Activo'
                ]
            );
            $intIdOrigen=$objIdPuntoCaracteristicaOrigen!=null?$objIdPuntoCaracteristicaOrigen->getValor():0;
            $objPuntoOrigen=$emComercial->getRepository('schemaBundle:InfoPunto')->find($intIdOrigen);
            $objPuntoODestino=$emComercial->getRepository('schemaBundle:InfoPunto')->find($intIdPunto);

            $objCaracteristicaOrigenRequerimiento=$emComercial->getRepository("schemaBundle:InfoPuntoCaracteristica")
            ->findOneBy(
                [
                    'puntoId'=>$intIdPunto,
                    'caracteristicaId'=>$objOrigenCaracteristica->getId(),
                    'estado'=>'Activo'
                ]
            );
            $objCaracteristicaPuntoAtencion=$emComercial->getRepository("schemaBundle:InfoPuntoCaracteristica")
            ->findOneBy(
                [
                    'puntoId'=>$intIdPunto,
                    'caracteristicaId'=>$objPuntoAtencionCaracteristica->getId(),
                    'estado'=>'Activo'
                ]
            );

            $strOrigenRequerimiento=$objCaracteristicaOrigenRequerimiento==null?"":
            $objCaracteristicaOrigenRequerimiento->getValor();

            $strPuntoAtencion=$objCaracteristicaPuntoAtencion==null?"":
            $objCaracteristicaPuntoAtencion->getValor();
            //  OBTENER LAS FORMAS DE CONTACTO DEL PUNTO DESTINO
            $arrayFormasContactoPunto = $this->serviceInfoPunto->obtenerFormasContactoPorPunto($intIdPunto, null, null);
            //OBTENER FORMAS DE CONTACTO DE LA PERSONA

            $arrayDatosFormasContactoPersona = $this->serviceCliente
                                        ->obtenerFormasContactoPorPersona(
                                        $objPuntoODestino->getPersonaEmpresaRolId()->getPersonaId(),
                                         null, null, null, true);
            $arrayFormasContactoUnidas=array_merge(
                $arrayFormasContactoPunto['registros'],
                $arrayDatosFormasContactoPersona['registros']
            );
            $strTelefonos="";
            $strCorreos="";
            foreach ($arrayFormasContactoUnidas as $contacto) 
            {
                if(strlen(stristr($contacto['formaContacto'],'Correo'))>0
                && !(strlen(stristr($strCorreos,$contacto['valor']))>0))
                {
                        $strCorreos.='-'.$contacto['valor'];
                }
                if(strlen(stristr($contacto['formaContacto'],'Telefono'))>0 
                && !(strlen(stristr($strTelefonos,$contacto['valor']))>0))
                {
                        $strTelefonos.='-'.$contacto['valor'];
                }
            }
            //OBTENER MENSAJE PARAMETRIZADO
           
            //OBTENER SERIALES Y MODELOS DE EQUIPOS 
            $strTecnologia                     = '';
            foreach ($arrayServicios as $intIdServicio) 
            {
                $objServicio=$emComercial->getRepository('schemaBundle:infoServicio')
                ->findOneBy(
                    [
                        'id'=>$intIdServicio
                    ]);



                $objServicioTecnico=$emComercial->getRepository('schemaBundle:infoServicioTecnico')
                ->findOneBy(
                    [
                        'servicioId'=>$objServicio->getId()
                    ]);
              
                $arrayParametrosEquiposServicio = array();
                $arrayParametrosEquiposServicio["objServicio"]        = $objServicio;
                $arrayParametrosEquiposServicio["objServicioTecnico"] = $objServicioTecnico;
                $arrayParametrosEquiposServicio["strIpCreacion"]      = $strIpCreacion;
                $arrayParametrosEquiposServicio["strUsrCreacion"]     = $strUsrCreacion;
                $arrayObtenerEquiposServicio = $this->obtenerEquiposServicio($arrayParametrosEquiposServicio);
                foreach($arrayObtenerEquiposServicio["arrayElementosRetiroEquipos"] as $objElementoServicioEquipos)
                {
                    if($objElementoServicioEquipos!=null)
                    {
                        $strTecnologia.='<br>&nbsp; -Serie: '.$objElementoServicioEquipos->getSerieFisica();
                        $strTecnologia.='<br>&nbsp; -Modelo: '.$objElementoServicioEquipos->getModeloElementoId()->getNombreModeloElemento();
                    }
               }
            }
            $objAdmiCaracTarea = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
            ->findOneBy(array("descripcionCaracteristica" => "ID_TAREA_TRASLADO",
                              "estado"                    => "Activo"));

            if(!is_object($objAdmiCaracTarea) && empty($objAdmiCaracTarea))
            {
                throw new \Exception("No existe Objeto para la característica ID_TAREA_TRASLADO");
            }

            if(is_object($objPuntoOrigen))
            {
             $strObservacion=$objPuntoODestino->getObservacion()==null?"":$objPuntoODestino->getObservacion();
                //Generar tareas automáticas en origen 
                $strParamCabTareaAut = 'PROCESO_TRASLADO_MD';
                $arrayParamTareaAut  = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                   ->get($strParamCabTareaAut, 'COMERCIAL', '', 'TAREA_AUTOMATICA_TRASLADO',
                                                         '', '', '', '', '', $strEmpresaCod, '');
                $strMensaje = "Cliente solicita Traslado Del Servicio de Internet. </br>".
                              "Login Origen: ".$objPuntoOrigen->getLogin()."</br>".
                              "Nuevo Login: ".$objPuntoODestino->getLogin()."</br>".
                              "Dirección actual: ".$objPuntoOrigen->getDireccion()."</br>".
                              "Dirección Nueva: ".$objPuntoODestino->getDireccion()."</br>".
                              "Equipos Actuales:".$strTecnologia."</br>".
                              "Observaciones: ".$strObservacion."</br>".
                              "Telefonos:".$strTelefonos."</br>".
                              "correos:".$strCorreos."</br>".
                              "OrigenRequerimiento:".$strOrigenRequerimiento."</br>".
                              "Pto Atención:".$strPuntoAtencion."</br>";

                $objFormaContacto=$emComercial->getRepository('schemaBundle:AdmiFormaContacto')
                ->findOneBy(['descripcionFormaContacto'=>$strOrigenRequerimiento]);
             
                
                
                if(!is_object($objFormaContacto))
                {
                    throw new \Exception("Error al obtener información sobre la forma de contacto");
                }
                $intFormaContacto=$objFormaContacto->getId();
                if($objFormaContacto->getDescripcionFormaContacto()=="ATC" && ($strPuntoAtencion != ""&&$strPuntoAtencion != null))
                {
                 
                    $objCaracteristicas = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                         ->findOneBy(array('descripcionCaracteristica' => 'PUNTO_ATENCION'));
                    
                    if(!is_object($objCaracteristicas))
                    {
                        throw new \Exception("Error al obtener información de la características");
                    }
                    $objPuntoAtencion=$emComercial->getRepository('schemaBundle:AdmiPuntoAtencion')
                    ->findOneBy(['nombrePuntoAtencion'=>$strPuntoAtencion]);
             
                
                
                    if(!is_object($objPuntoAtencion))
                    {
                        throw new \Exception("Error al obtener información sobre la punto atencion");
                    }
                    $arrayDatosCaracteriticas[] = array('intCaracteristicaId' => $objCaracteristicas->getId(),
                    'strValor'            => $objPuntoAtencion->getId());
                }
               
           
            

                //Servicio Origen
                $arrayTareaTrasladoOrigen = $this->serviceSoporte
                                                 ->crearTareaCasoSoporte(array (
                                                   "intIdPersonaEmpresaRol" => $intIdPersonaEmpresaRol,
                                                   "intIdEmpresa"           => $strEmpresaCod,
                                                   "strPrefijoEmpresa"      => $strPrefijoEmpresa,
                                                   "strNombreTarea"         => $arrayParamTareaAut[0]['valor2'],
                                                   "strNombreProceso"       => $arrayParamTareaAut[0]['valor3'],
                                                   "strUserCreacion"        => $strUsrCreacion,
                                                   "strIpCreacion"          => $strIpCreacion,
                                                   "strObservacionTarea"    => $strMensaje,
                                                   "strUsuarioAsigna"       => $strNombresCompletos,
                                                   "strTipoAsignacion"      => $arrayParamTareaAut[0]['valor6'],
                                                   "strTipoTarea"           => "T",
                                                   "strTareaRapida"         => "S",
                                                   "boolAsignarTarea"       => true,
                                                   "intPuntoId"             => $objPuntoOrigen->getId(),
                                                   "strFechaHoraSolicitada" => null,
                                                   'intFormaContacto'=>$intFormaContacto,
                                                   'arrayDatosCaracteriticas'=>$arrayDatosCaracteriticas
                                                ));
                $objInfoPuntoCaracteristica = new InfoPuntoCaracteristica();
                $objInfoPuntoCaracteristica->setValor($arrayTareaTrasladoOrigen['numeroDetalle']);
                $objInfoPuntoCaracteristica->setCaracteristicaId($objAdmiCaracTarea);
                $objInfoPuntoCaracteristica->setPuntoId($objPuntoOrigen);
                $objInfoPuntoCaracteristica->setEstado('Activo');
                $objInfoPuntoCaracteristica->setFeCreacion(new \DateTime('now'));
                $objInfoPuntoCaracteristica->setUsrCreacion($strUsrCreacion);
                $objInfoPuntoCaracteristica->setIpCreacion($strIpCreacion);
                $emComercial->persist($objInfoPuntoCaracteristica);
                $emComercial->flush();

                $arrayParametrosAdjuntarActa=array();
                $arrayParametrosAdjuntarActa['intIdTarea']=$arrayTareaTrasladoOrigen['numeroTarea'];
                $arrayParametrosAdjuntarActa['intIdPuntoOrigen']=$objPuntoOrigen->getId();
                $arrayParametrosAdjuntarActa['intIdPuntoDestino']=$intIdPunto;
                $arrayParametrosAdjuntarActa['strLogin']=$objPuntoOrigen->getLogin();
                $arrayParametrosAdjuntarActa['strUsuario']=$strUsrCreacion;
                $arrayParametrosAdjuntarActa['strIpCliente']=$strIpCreacion;
                $this->adjuntarActaTarea($arrayParametrosAdjuntarActa);
                //Servicio Destino
             
            }
            else
            {
                throw new \Exception("No se encontró información acerca de la característica de traslado");
            }
        }
        catch (\Exception $objEx)
        {
            $this->utilServicio->insertError( 'Telcos+',
                                              'InfoServicioService.generaTareasInmediatasMismaTecnologia',
                                              'Se presentaron problemas al crear tareas automáticas misma tecnología traslado: '.
                                              $objEx->getMessage(),
                                              $strUsrCreacion,
                                              $strIpCreacion );
        }
    }


     /**
     * Registro de Historial del servicio misma tecnologia
     *
     * Función que permite registrar los historiales
     *
     * @author Andre Lazo <alazo@telconet.ec>
     * @version 1.0  17-02-2023 - Versión Inicial
     *

     */
    public function registrarHistorialDiferenteTecnologia($arrayParametrosHistorial)
    {
        $emGeneral              = $this->emgen;
        $emComercial            = $this->emcom;
        $strIpCreacion          = $arrayParametrosHistorial["strIpCreacion"];
        $strUsrCreacion         = $arrayParametrosHistorial["strUsrCreacion"];
        $objServicioActual      = $arrayParametrosHistorial["objServicio"];
        $strEmpresaCod          = $arrayParametrosHistorial["strEmpresaCod"];
        $serviceServicioTecnico = $this->serviceGeneral;
        $objProdInternet        = $arrayParametrosHistorial["objProdInternet"];    
        $strPrefijoEmpresa= $arrayParametrosHistorial["strPrefijoEmpresa"];

        try
        {
            if($strPrefijoEmpresa=="MD")
            {

            
            $arrayParamMensajeParametrizado = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
            ->get('EDITAR_CAMPOS_PUNTO_MD','COMERCIAL','',
            'MENSAJE_TRASLADO','','','',
            '','',$strEmpresaCod);
            $strMensajeParametrizado="";
            if(count($arrayParamMensajeParametrizado)>0)
            {
                $strMensajeParametrizado    =$arrayParamMensajeParametrizado[0]['valor1'];
               
                 
                        $objInfoServicioHistorial = new InfoServicioHistorial();
                        $objInfoServicioHistorial->setEstado($objServicioActual->getEstado());
                        $objInfoServicioHistorial->setUsrCreacion($strUsrCreacion);
                        $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
                        $objInfoServicioHistorial->setIpCreacion($strIpCreacion);
                        $objInfoServicioHistorial->setServicioId($objServicioActual);
                        $objInfoServicioHistorial->setObservacion($strMensajeParametrizado);
                        $objInfoServicioHistorial->setAccion('Traslado');
                        $emComercial->persist($objInfoServicioHistorial);
                    
                
            } 

            $objServProdCaractTraslado = $serviceServicioTecnico->getServicioProductoCaracteristica($objServicioActual,
                                                                                                    'TRASLADO',
                                                                                                    $objProdInternet
                                                                                                   );
            if($objServProdCaractTraslado!=null)
            {
                $objServicioOrigen        = $this->emCome->getRepository('schemaBundle:InfoServicio')
                                            ->find($objServProdCaractTraslado->getValor());
                $objInfoServicioHistorial = new InfoServicioHistorial();
                $objInfoServicioHistorial->setEstado($objServicioOrigen->getEstado());
                $objInfoServicioHistorial->setUsrCreacion($strUsrCreacion);
                $objInfoServicioHistorial->setFeCreacion(new \DateTime('now'));
                $objInfoServicioHistorial->setIpCreacion($strIpCreacion);
                $objInfoServicioHistorial->setServicioId($objServicioOrigen);
                $objInfoServicioHistorial->setObservacion($strMensajeParametrizado);
                $objInfoServicioHistorial->setAccion('Traslado');
                $emComercial->persist($objInfoServicioHistorial);                            
                $emComercial->flush();
            }
        }
            
        }
        catch (\Exception $objEx)
        {
            $this->utilServicio->insertError( 'Telcos+',
                                              'InfoServicioService.registrarHistorialDiferenteTecnologia',
                                              'Se presentaron problemas al registrar historial del servicio: '.
                                              $objEx->getMessage(),
                                              $strUsrCreacion,
                                              $strIpCreacion );
        }
    }


   /**
    * Función que se encarga del consumo de microservicio ms-comp-cliente para validaciones por producto adicional.
    * 
    * @author Alex Arreaga <atarreaga@telconet.ec> 
    * @version 1.0 08-12-2022
    * 
    * @param array $arrayParametros ["strTokenCas"    :string:  Token cas,
    *                                "usrCreacion"    :string:  Usuario creación, 
    *                                "clienteIp"      :string:  Ip creación,
    *                                "idEmpresa"      :integer: Código empresa,
    *                                "idPersona"      :integer: Id de persona,
    *                                "idPunto"        :integer: Id punto ]
    * @return $arrayResultado
    */
    public function validacionProdAdicionalMs($arrayParametros)  
    {
        $arrayResultado = array();
        try 
        {
            $objOptions = array(CURLOPT_SSL_VERIFYPEER => false,
                                CURLOPT_HTTPHEADER     => array('Content-Type: application/json',
                                                                'tokencas: ' . $arrayParametros['strTokenCas']
                                                                )
                                );
            
            $strJsonData       = json_encode($arrayParametros);
            $strUrl            = $this->strUrlValidaProdAdicionalMs;
            $arrayResponseJson = $this->serviceRestClient->postJSON( $strUrl , $strJsonData, $objOptions);
            $strJsonRespuesta  = json_decode($arrayResponseJson['result'], true);
            
            if (isset($strJsonRespuesta['status']) && isset($strJsonRespuesta['message'])) 
            {
                $arrayResponse  = array('strStatus'  => $strJsonRespuesta['status'],
                                        'strMensaje' => $strJsonRespuesta['message'],
                                        'objData'    => $strJsonRespuesta['data'] );
                $arrayResultado = $arrayResponse;
            }
            else 
            {
                $arrayResultado['strStatus']  = "ERROR";
                $arrayResultado['strMensaje'] = empty($strJsonRespuesta['message']) ? 
                                                "No existe conectividad con el WS ms-comp-cliente." : $strJsonRespuesta['message'];
            } 
        } 
        catch (\Exception $ex) 
        {
            $strRespuesta   = "Error al ejecutar las validaciones MS por producto adicional. Favor Notificar a Sistemas. " . $ex->getMessage();
            $arrayResultado = array('strStatus'  => 'ERROR',
                                    'strMensaje' => $strRespuesta);
            
            $this->utilService->insertError('Telcos+',
                                            'InfoServicioService.validacionProdAdicionalMs',
                                            'Error InfoServicioService.validacionProdAdicionalMs: '. $ex->getMessage(),
                                            $arrayParametros['usrCreacion'],
                                            $arrayParametros['clienteIp']);
        }
        
        return $arrayResultado;
    }

   /**
    * Funcion utilizada para validar si se requiere cambio de equipo en servicios que migran a SDWAN
    * 
    * @author Joel Muñoz M <jrmunoz@telconet.ec>
    * @version 1.1 10-01-2023
    *
    * 
    * @param integer $intIdPunto
    * @param array $arrayServicios
    * 
    * @return array
    **/
   public function validarCambioEquipoSDWAN($intIdPunto, $arrayServicios)
   {
       $objEm       = $this->emcom;
       $emGeneral   = $this->emgen;

       $arrayIdsEquipos             = false;
       $booleanEsMigracion          = false;
       $booleanEsSdwan              = false;
       $arrayCaracteristicasAdic    = false;


       try
       {
           if (!(is_array($arrayServicios) && count($arrayServicios) > 0)) 
           {
               return array(
                   'arrayCaracteristicasAdic' =>  $arrayCaracteristicasAdic,
                   'esMigracion' => $booleanEsMigracion,
                   'requiereCambioEquipo' => false,
                   'esSdwan' => $booleanEsSdwan,
                   'arrayIdsEquipos' => $arrayIdsEquipos,
                   'error' => false,
                   'idAdmiProductoServicioMigrado' => null,
                   'msg' => null            
               );
           }
               
           foreach ($arrayServicios as $arrayServicio) 
           {
               $objProducto = $objEm->getRepository('schemaBundle:AdmiProducto')
                   ->find($arrayServicio['codigo']);
   
   
   
               //SE VALIDA SI ES SDWAN
               if (is_object($objProducto) &&  ($objProducto->getNombreTecnico() === 'INTERNET SDWAN'
                   || $objProducto->getNombreTecnico() === 'L3MPLS SDWAN')) 
                   {
                       $booleanEsSdwan =  true;
   
   
                       $arrayCaracteristicasProducto = json_decode($arrayServicio['caracteristicasProducto'], true);
   
                       //SE VALIDAN CARACTERISTICAS DEL SERVICIO
                       if (!(is_array($arrayCaracteristicasProducto) && count($arrayCaracteristicasProducto) > 0))
                       {
                           return array(
                               'arrayCaracteristicasAdic' =>  $arrayCaracteristicasAdic,
                               'esMigracion' => $booleanEsMigracion,
                               'esSdwan' => $booleanEsSdwan,
                               'arrayIdsEquipos' => $arrayIdsEquipos,
                               'requiereCambioEquipo' => false,
                               'error' => true,
                               'idAdmiProductoServicioMigrado' => null,
                               'msg' => 'Error al intentar obtener características del producto',
                           );
                       }
                       $booleanEsMigracion = count(array_filter($arrayCaracteristicasProducto,  function($objCaracteristica)
                       {
                           return $objCaracteristica['caracteristica'] === '[Migración de Tecnología SDWAN]'
                           && $objCaracteristica['valor'] === 'S';
                       }))>0;
   
   
   
                       //SE VALIDA SI ES UNA MIGRACION
                       if(!$booleanEsMigracion)
                       {
                           return array(
                               'arrayCaracteristicasAdic' =>  $arrayCaracteristicasAdic,
                               'esMigracion' => $booleanEsMigracion,
                               'esSdwan' => $booleanEsSdwan,
                               'requiereCambioEquipo' => false,
                               'idAdmiProductoServicioMigrado' => null,
                               'arrayIdsEquipos' => $arrayIdsEquipos,
                               'error' => false,
                               'msg' => '',
                           );
                       }
   
   
                       $arrayCaracteristicasMigracionServicio = $objEm->getRepository('schemaBundle:AdmiCaracteristica')
                       ->findOneBy(array(
                           'descripcionCaracteristica' => 'SERVICIO_MIGRADO_SDWAN',
                           'estado'                    => 'Activo'
                       ));
   
                       //SE VALIDA QUE EXISTA LA CARACTERISTICA
                       if(!is_object($arrayCaracteristicasMigracionServicio))
                       {
                           return array(
                               'arrayCaracteristicasAdic' =>  $arrayCaracteristicasAdic,
                               'esMigracion' => $booleanEsMigracion,
                               'requiereCambioEquipo' => false,
                               'esSdwan' => $booleanEsSdwan,
                               'arrayIdsEquipos' => $arrayIdsEquipos,
                               'error' => true,
                               'idAdmiProductoServicioMigrado' => null,
                               'msg' => 'No se encontró característica [SERVICIO_MIGRADO_SDWAN]',
                           );
                       }
   
                   
   
                       $arrayAdmiProdCaract= $objEm->getRepository('schemaBundle:AdmiProductoCaracteristica')
                       ->findOneBy(array('caracteristicaId'=> $arrayCaracteristicasMigracionServicio->getId(),
                                         'productoId'      => $objProducto->getId(),
                                         'estado'          => 'Activo'
                                   ));
   
                       //SE VALIDA QUE EXISTA EL PRODUCTO SDWAN POSEA LA CARACTERISTICA
                       if(!is_object($arrayAdmiProdCaract))
                       {
                           return array(
                               'arrayCaracteristicasAdic' =>  $arrayCaracteristicasAdic,
                               'esMigracion' => $booleanEsMigracion,
                               'esSdwan' => $booleanEsSdwan,
                               'requiereCambioEquipo' => false,
                               'arrayIdsEquipos' => $arrayIdsEquipos,
                               'error' => true,
                               'idAdmiProductoServicioMigrado' => null,
                               'msg' => 'La característica no se encuentra asociada al producto SDWAN',
                           );
                       }


                       //SE OBTIENE PARÁNETRO PARA OBTENER ESTADO(S) DE SERVICIO A BUSCAR
                       $arrayParametroTareaCambioEquipo = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                       ->getArrayDetalleParametros(array(
                           'strNombreParametroCab' => 'TAREA_CAMBIO_EQUIPO_MIGRACION_SDWAN',
                           'estado'=>'Activo'
                       ));


                       // SE VALIDA QUE EXISTA EL PARÁMETRO CON LA DATA DE LA TAREA DE CAMBIO DE EQUIPO
                       if(
                           !(is_array($arrayParametroTareaCambioEquipo) 
                           && count($arrayParametroTareaCambioEquipo)>0
                           && isset($arrayParametroTareaCambioEquipo['encontrados'])
                           && isset($arrayParametroTareaCambioEquipo['encontrados'][0]['valor2']))
                       )
                       {
                           return array(
                               'arrayCaracteristicasAdic' =>  $arrayCaracteristicasAdic,
                               'esMigracion' => $booleanEsMigracion,
                               'esSdwan' => $booleanEsSdwan,
                               'requiereCambioEquipo' => false,
                               'arrayIdsEquipos' => $arrayIdsEquipos,
                               'error' => true,
                               'idAdmiProductoServicioMigrado' => null,
                               'msg' => 'Parámetro TAREA_CAMBIO_EQUIPO_MIGRACION_SDWAN incorrecto. 
                               Póngase en contacto con Dpto. de Sistemas',
                           );
                       }

   
   
                       //SE OBTIENE LISTADO DE SERVICIOS DISPONIBLES DEL PUNTO
                       $arrayServiciosPunto = $objEm->getRepository('schemaBundle:InfoServicio')
                       ->findBy(array(
                           'puntoId' => $intIdPunto,
                           'estado' => explode(',', $arrayParametroTareaCambioEquipo['encontrados'][0]['valor6'])
                       ), array("id" => "ASC" ));
   
   
   
                       if($objProducto->getNombreTecnico() === 'INTERNET SDWAN')
                       {
                           //SE OBTIENE UN SOLO SERVICIO DE LOS DISPONIBLES CUYO ID NO ESTÉ ASOCIADO A OTRA MIGRACIÓN
                           $arrayServiciosPunto = (array_filter($arrayServiciosPunto, function($arrayServicioPunto) 
                               use($objEm, $arrayAdmiProdCaract)
                               {            
                                   $arrayInfoServProdCaract = $objEm->getRepository('schemaBundle:InfoServicioProdCaract')
                                   ->findOneBy(array('valor'                    =>$arrayServicioPunto->getId(),
                                                     'estado'                   => 'Activo',
                                                     'productoCaracterisiticaId'=>$arrayAdmiProdCaract->getId()));
       
                                   return ((strtoupper($arrayServicioPunto->getProductoId()->getDescripcionProducto()) === 'INTERNET DEDICADO'
                                                       && $arrayServicioPunto->getProductoId()->getNombreTecnico() === 'INTERNET')
                                                       || $arrayServicioPunto->getProductoId()->getNombreTecnico() === 'INTMPLS')
                                                       && !$arrayInfoServProdCaract; 
                             
                               }
                           ));
                       }
                       else if($objProducto->getNombreTecnico() === 'L3MPLS SDWAN') 
                       {
                           //SE OBTIENE UN SOLO SERVICIO DE LOS DISPONIBLES CUYO ID NO ESTÉ ASOCIADO A OTRA MIGRACIÓN
                           $arrayServiciosPunto = (array_filter($arrayServiciosPunto, function($arrayServicioPunto) 
                               use($objEm, $arrayAdmiProdCaract)
                               {            
                                   $arrayInfoServProdCaract = $objEm->getRepository('schemaBundle:InfoServicioProdCaract')
                                   ->findOneBy(array('valor'                    =>$arrayServicioPunto->getId(),
                                                       'estado'                   => 'Activo',
                                                       'productoCaracterisiticaId'=>$arrayAdmiProdCaract->getId()));
       
                                   return strtoupper($arrayServicioPunto->getProductoId()->getNombreTecnico()) === 'L3MPLS'
                                                       && strtoupper($arrayServicioPunto->getProductoId()->getDescripcionProducto())  === 'L3MPLS'
                                                       && !$arrayInfoServProdCaract; 
                               
                               }
                           ));
                       }
         
   
                       //SE VALIDA QUE EXISTA UN SERVICIO PRINCIPAL DISPONIBLE PARA VERIFICAR EQUIPO
                       if (!(is_array($arrayServiciosPunto) && count($arrayServiciosPunto) > 0))
                       {
                           return array(
                               'arrayCaracteristicasAdic' =>  $arrayCaracteristicasAdic,
                               'esMigracion' => $booleanEsMigracion,
                               'esSdwan' => $booleanEsSdwan,
                               'requiereCambioEquipo' => false,
                               'arrayIdsEquipos' => $arrayIdsEquipos,
                               'idAdmiProductoServicioMigrado' => null,
                               'error' => true,
                               'msg' => 'No existe servicio principal disponible para iniciar proceso de migración',
                           );
                       }
                       
                        $arrayCantidadUsuarios = array_filter($arrayCaracteristicasProducto, 
                        function($arrayCaracteristica)
                        use($arrayParametrosDet, $arrayEquipoCPE)
                        {
                            return $arrayCaracteristica['caracteristica'] === '[CANTIDAD USUARIOS SDWAN]';
                        });


                        if(!is_array($arrayCantidadUsuarios) || empty($arrayCantidadUsuarios))
                        {
                            return array(
                               'arrayCaracteristicasAdic' =>  $arrayCaracteristicasAdic,
                               'esMigracion' => $booleanEsMigracion,
                               'esSdwan' => $booleanEsSdwan,
                               'requiereCambioEquipo' => false,
                               'arrayIdsEquipos' => $arrayIdsEquipos,
                               'idAdmiProductoServicioMigrado' => null,
                               'error' => true,
                               'msg' => 'No existe característica [CANTIDAD USUARIOS SDWAN] definida',
                           );
                        }
                        $strCantidadUsuarios = array_shift($arrayCantidadUsuarios)['valor'];

                        $arrayCapacidadUsuarios = array_filter($arrayCaracteristicasProducto, 
                        function($arrayCaracteristica)
                        use($arrayParametrosDet, $arrayEquipoCPE)
                        {
                            return $arrayCaracteristica['caracteristica'] === '[CAPACIDAD1]';
                        });
                        if(!is_array($arrayCapacidadUsuarios) || empty($arrayCapacidadUsuarios))
                        {
                            return array(
                                'arrayCaracteristicasAdic' =>  $arrayCaracteristicasAdic,
                                'esMigracion' => $booleanEsMigracion,
                                'esSdwan' => $booleanEsSdwan,
                                'requiereCambioEquipo' => false,
                                'arrayIdsEquipos' => $arrayIdsEquipos,
                                'idAdmiProductoServicioMigrado' => null,
                                'error' => true,
                                'msg' => 'No existe característica [CAPACIDAD1] definida',
                            );
                        }
                        $strCapacidadUsuarios = array_shift($arrayCapacidadUsuarios)['valor'];
                       
                        $arrayServicioCumpleSDWAN = false;
                        foreach($arrayServiciosPunto as $arrayServicioPunto)
                        {
                            $arrayParametros = array();
                            $arrayParametros['idServicio']        = $arrayServicioPunto->getId();
                            $arrayParametros['idPunto']           = $intIdPunto;
                            $arrayParametros['strCantidadUsuarios']  = $strCantidadUsuarios;
                            $arrayParametros['strCapacidadUsuarios'] = $strCapacidadUsuarios;
            
                            //verificar
                            $arrayServicioCumpleSDWAN = $this->validarMigracionServicioSDWAN($arrayParametros);
    
                            if($arrayServicioCumpleSDWAN['esValido'] === true)
                            {
                                return array(
                                    'arrayCaracteristicasAdic' =>  $arrayCaracteristicasAdic,
                                    'esMigracion' => $booleanEsMigracion,
                                    'requiereCambioEquipo' => false,
                                    'esSdwan' => $booleanEsSdwan,
                                    'arrayIdsEquipos' => array($arrayServicioPunto),
                                    'error' => false,
                                    'idAdmiProductoServicioMigrado' => $arrayAdmiProdCaract->getId(),
                                    'msg' => null
                                );
                            }
                        }

                        if($arrayServicioCumpleSDWAN['esValido'] === false)
                        {
                            // SE GUARDAN CARACTERISTICAS ADICIONALES DEL SERVICIO SDWAN PARA HISTORIAL
                            $arrayCaracteristicasAdic = JSON_DECODE($arrayServicio['caracteristicasProducto']);
                            array_push($arrayCaracteristicasAdic, (object)array(
                                'caracteristica' => 'NombreModeloElemento',
                                'valor'          => $arrayServicioCumpleSDWAN['strNombreModeloElemento']
                            ));

                            return array(
                                'arrayCaracteristicasAdic' =>  $arrayCaracteristicasAdic,
                                'esMigracion' => $booleanEsMigracion,
                                'requiereCambioEquipo' => true,
                                'esSdwan' => $booleanEsSdwan,
                                'arrayIdsEquipos' => array($arrayServicioPunto),
                                'error' => false,
                                'idAdmiProductoServicioMigrado' => null,
                                'msg' => null
                            );
                        }
   
                   }
           }
       }
       catch (\Exception $e)
       {

            $this->utilServicio->insertError('Telcos+',
            'InfoServicioService.ValidarCambioEquiposSDWAN',
            "Error: <br>" . $e->getMessage(),
            'Telcos',
            '127.0.0.1');
           
           return array(
               'arrayCaracteristicasAdic' =>  $arrayCaracteristicasAdic,
               'esMigracion' => false,
               'esSdwan' => false,
               'arrayIdsEquipos' => $arrayIdsEquipos,
               'requiereCambioEquipo' => false,
               'idAdmiProductoServicioMigrado' => null,
               'error' => true,
               'msg' => $e->getMessage()
           );
       }
   }

       /**
    * Funcion utilizada para validar valores de usuario y capacidad recibidos desde un servicio SDWAN
    * 
    * @author Joel Muñoz M <jrmunoz@telconet.ec>
    * @version 1.1 10-01-2023
    *
    * 
    * @param array $arrayParametros
    * 
    * @return array
    **/
    public function validarMigracionServicioSDWAN($arrayParametros)
    {
        $intCantidadUuarios  = intval($arrayParametros['strCantidadUsuarios']);

        $intCapacidadUuarios = intval($arrayParametros['strCapacidadUsuarios']);
        try
        {
            // SE OBTIENEN PARÁMETROS PARA VALIDACIÓN DE EQUIPO SDWAN VALIDAR******
            $arrayEquiposSDWAN = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')->getArrayDetalleParametros(array(
                'strNombreParametroCab' => 'FACTIBILIDAD_EQUIPOS_MIGRACION_SDWAN',
                'estado'=>'Activo'
            ));
            //
            $arrayParametros['tipo']              = 'CPE';
            $arrayParametros['estadoServicio']    = 'Activo';
            $arrayParametros['fueSolicitada']     = 'N';
            $arrayParametros['prefijoEmpresa']    = 'TN';
            $arrayParametros['strTieneSmartWifi'] = 'NO';
            $arrayParametros['emInfraestructura'] = $this->emInfraestructura;
            $arrayParametros['serviceTecnico']    = $this->servicioTecnico;
            $arrayResponse = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                                ->generarElementosPorServicio($arrayParametros);

            $booleanCumpleCantidadUsuarios =  false;
            $booleanCumpleCapacidadKbps    =  false;
            $strNombreModeloElemento       = '';
    
            foreach($arrayResponse as $arrayEquipoCPE)
            {
                if($arrayEquipoCPE['nombreTipoElemento'] === 'CPE')
                {
                    $strNombreModeloElemento = $arrayEquipoCPE['nombreModeloElemento'];

    
                    foreach($arrayEquiposSDWAN['encontrados'] as $arrayParametrosDet)
                    {
                        $booleanCumpleCantidadUsuarios = $strNombreModeloElemento === $arrayParametrosDet['valor1'] 
                                                        && $intCantidadUuarios >= $arrayParametrosDet['valor3'] 
                                                        && $intCantidadUuarios <= $arrayParametrosDet['valor4'];

                        $booleanCumpleCapacidadKbps    = $strNombreModeloElemento === $arrayParametrosDet['valor1']  
                                                        && $intCapacidadUuarios <= $arrayParametrosDet['valor2'];

    
    
                        if($booleanCumpleCantidadUsuarios && $booleanCumpleCapacidadKbps)
                        {
                            return array(
                                'esValido' => true,
                                'strNombreModeloElemento' => $strNombreModeloElemento
                            );
                        }
                    }
                }
            }
            return array(
                'esValido' => false,
                'strNombreModeloElemento' => $strNombreModeloElemento
            );
        }
        catch (\Exception $e)
        {
            $this->utilServicio->insertError('Telcos+',
            'InfoServicioService.validarMigracionServicioSDWAN',
            "Error: <br>" . $e->getMessage(),
            'Telcos',
            '127.0.0.1');


            return false;
        }
    }

    /**
     * Función que valida si el punto posee servicios adicionales 
     * con los estados permitidos para realizar Reingreso Automático
     * 
     * @author Alex Gómez <algomez@telconet.ec>
     * @version 1.0 27-09-2022
     * 
     * @param array $arrayParametros [
     *                                  strUsuarioCreacion : Usuario creación.
     *                                  strIpCreacion      : Ip creación.
     *                                  intIdServicio      : Id del servicio.
     *                                  strPrefijoEmpresa  : Prefijo de la empresa.
     *                                  strCodEmpresa      : Codigo Empresa.
     *                               ]
     * @return array $arrayRespuesta [
     *                                  "arrayIdServAdicionales"  => Array de servicios a reingresar
     *                                  "status"    => OK o ERROR
     *                                  "mensaje"   => Mensaje de error
     *                               ]
     * 
     */
    public function validaRSOAdicionales($arrayParametros)
    {
        $strUsuarioCreacion  = $arrayParametros['strUsuarioCreacion'];
        $strIpCreacion       = $arrayParametros['strIpCreacion'];
        $intIdServicio       = $arrayParametros['intIdServicio'];
        $strPrefijoEmpresa   = $arrayParametros['strPrefijoEmpresa'];
        $strCodEmpresa       = $arrayParametros['strCodEmpresa'];
        $strStatus           = 'OK';
        $strMensaje          = '';
        $arrayIdServAdicionales = array();

        try
        {
            //Consulta de parámetros
            $arrayEstadosPermitidos = array();

            $arrayParametrosDet = $this->emgen->getRepository('schemaBundle:AdmiParametroDet')
                                            ->getOne('REINGRESO_SERVICIOS_ADICIONALES', 
                                                    'COMERCIAL', 
                                                    'COMERCIAL', 
                                                    '', 
                                                    'ESTADOS_PERMITIDOS', 
                                                    '','','','', 
                                                    $strCodEmpresa);

            if( !empty($arrayParametrosDet) )
            {
                $arrayEstadosPermitidos = explode('|',$arrayParametrosDet['valor2']);
            }
            else
            {
                throw new \Exception('No se encontró el parámetro REINGRESO_SERVICIOS_ADICIONALES');
            }

            //Verificamos si el servicio existe.
            $objInfoServicio = $this->emcom->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            if (!is_object($objInfoServicio))
            {
                throw new \Exception('El servicio no existe');
            }
            
            //Verificamos si el punto posee servicios con los estados permitidos
            $arrayParametros = array('arrayEstadosServicio' => $arrayEstadosPermitidos,
                                    'intIdPunto'        => $objInfoServicio->getPuntoId()->getId());

            $arrayServicios = $this->emcom->getRepository('schemaBundle:InfoServicio')
                                            ->getMaxIdServiciosAdicionales($arrayParametros);

            if($arrayServicios['total'] > 0)
            {
                foreach($arrayServicios['registros']  as $servicio)
                {
                    
                    array_push($arrayIdServAdicionales, array('intIdServicioAdc' => $servicio->getId(),
                                                              'strEstadoAdc'     => $servicio->getEstado()));
                }
            }

            if(count($arrayIdServAdicionales) == 0)
            {
                throw new \Exception('El punto no cuenta con servicios adicionales que se puedan reingresar.');
            }

            $arrayResponse = array('arrayIdServAdicionales' => $arrayIdServAdicionales,
                                    'status' => $strStatus, 
                                    'mensaje' => $strMensaje);

        }
        catch(\Exception $e)
        {
            $strStatus   = 'ERROR';
            $strMensaje  = 'Reingreso Servicio Adicional - '.$e->getMessage();
            $arrayResponse = array('status' => $strStatus, 
                                    'mensaje' => $strMensaje);
        }

        return $arrayResponse;
    }

    /**
     * Documentación para la función verificarFactibilidadServicio
     * 
     * Verificación de factibilidad post cambio en datos de edificio sobre el punto.
     * Aplica para MD
     * 
     * @author Alex Gómez <algomez@telconet.ec>
     * @version 1.0 03/11/2022
     * 
     * @param  array $arrayParametros [
     *                                  "emComercial"            => Entity manager de Comercial.
     *                                  "emInfraestructura"      => Entity manager de Infraestructura.
     *                                  "intCodEmpresa"          => Código de la empresa.
     *                                  "strUsuarioCreacion"     => Usuario.
     *                                  "strClienteIp"           => Direccion ip.
     *                                  "intIdServicio"          => Id del servicio.
     *                                ] 
     * 
     * @return array $arrayResultado [
     *                                  "intElementoId"           => Dato obtenido por factibilidad automática.
     *                                  "intInterfaceElementoId"  => Dato obtenido por factibilidad automática.
     *                                  "intElementoContenedorId" => Dato obtenido por factibilidad automática.
     *                                  "intElementoConectorId"   => Dato obtenido por factibilidad automática.
     *                                  "intInterfaceElementoConectorId" => Dato obtenido por factibilidad automática.
     *                                  "strObservacionFactibilidad"     => Dato obtenido por factibilidad automática.
     *                                  "status"  => OK o ERROR.
     *                                  "mensaje" => Mensaje de Error.
     *                               ];
     */
    public function verificarFactibilidadServicio($arrayParametros)
    {
        $emGeneral               = $this->emgen;
        $emComercial             = $arrayParametros["emComercial"];
        $emInfraestructura       = $arrayParametros["emInfraestructura"];
        $strIdEmpresa            = $arrayParametros["intCodEmpresa"];
        $strPrefijoEmpresa       = $arrayParametros["strPrefijoEmpresa"];
        $intIdServicio           = $arrayParametros["intIdServicio"];
        $strUsuarioCreacion      = $arrayParametros["strUsuarioCreacion"];
        $strClienteIp            = $arrayParametros["strClienteIp"];
 
        $entityServicio          = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
        $entityTipoSolicitud     = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                            ->findOneByDescripcionSolicitud("SOLICITUD FACTIBILIDAD");
        $strMensaje              = "";
        $boolEsSatelital         = false; 
        $arrayParamFactibilidad  = array();
        $strDependeDeEdificio    = "";
        $strStatusFactibilidad   = "";
        $strTipoOrdenServicio    = "";
        $strObligaTecnologia     = "NO";
        $strTecnologiaDestino    = "";
        $strObservacionFactibilidad = "";

        //Datos obtenidos por factibilidad automatica
        $intElementoId                  = null;
        $intInterfaceElementoId         = null;
        $intElementoContenedorId        = null;
        $intElementoConectorId          = null;
        $intInterfaceElementoConectorId = null;
                
        try
        {
            if ($entityServicio)
            {
                $strTipoOrdenServicio = $entityServicio->getTipoOrden();
                $strTipoEnlace        = 'PRINCIPAL';
                $boolGrabo            = false;
                $strAdministra        = '';
                $strUltimaMilla          = '';

                $objServicioTecnico      = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                            ->findOneByServicioId($entityServicio->getId());
                $objAdmiProducto      = ($entityServicio->getProductoId() ? $entityServicio->getProductoId() : null );

                if ($objServicioTecnico)
                {
                    $strTipoEnlace = $objServicioTecnico->getTipoEnlace();
                    if(!$strTipoEnlace)
                    {
                        $strTipoEnlace = 'PRINCIPAL';
                    }
                    if ($objServicioTecnico->getUltimaMillaId())
                    {
                        $entityUltimaMilla = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                ->find($objServicioTecnico->getUltimaMillaId());
                        $strUltimaMilla = $entityUltimaMilla->getNombreTipoMedio();
                    }
                }
                else
                {
                    throw new \Exception("No se encontraron datos técnicos del servicio. Favor notificar a sistemas");
                }

                //Si depende de un edificio tipo CENTRO COMERCIAL se debe ir por factibilidad manual
                if($entityServicio->getPuntoId())
                {
                    $objPuntoDato = $emComercial->getRepository('schemaBundle:InfoPuntoDatoAdicional')
                                        ->findOneByPuntoId($entityServicio->getPuntoId());
                    if(is_object($objPuntoDato) && $objPuntoDato->getElementoId())
                    {
                        $objElemento = $emComercial->getRepository('schemaBundle:InfoElemento')
                                                ->find($objPuntoDato->getElementoId());
                        if(is_object($objElemento))
                        {
                            //consulto si es o no un pseudo pe
                        $objDetallePseudo = $emComercial->getRepository('schemaBundle:InfoDetalleElemento')
                                                   ->findOneBy(array('elementoId'   => $objElemento->getId(),
                                                                     'detalleNombre'=> 'ADMINISTRA',
                                                                     'estado'       => 'Activo' ));
                            if (is_object($objDetallePseudo))
                            {
                                $strAdministra = $objDetallePseudo->getDetalleValor();
                            }
                            
                            $objModeloElemento = $objElemento->getModeloElementoId();
                            if(is_object($objModeloElemento) && $objModeloElemento->getNombreModeloElemento()=='CENTRO COMERCIAL')
                            {
                                throw new \Exception("El edificio es CENTRO COMERCIAL");
                            }
                        }                                
                    }
                }
                
                if($strAdministra == '')
                {
                    if (substr($strTipoEnlace, 0, 9) == 'PRINCIPAL')
                    {
                        if ($strUltimaMilla == "Fibra Optica" || $strUltimaMillaProdEsp === 'FTTX')
                        {
                            $entityPunto   = $entityServicio->getPuntoId();
                            $strLatitudPunto  = $entityPunto->getLatitud();
                            $strLongitudPunto = $entityPunto->getLongitud();

                            $arrayCajaMasCercana['distancia_caja'] = 0;
                            $arrayCajaMasCercana['id_caja']        = 0;

                            //se agrega codigo para recuperación de caracteristica de plan TECNOLOGIA_FACTIBILIDAD
                            $strTecnologiaFactibilidad = null;

                            $objInfoPlanCab            = ($entityServicio->getPlanId() ? $entityServicio->getPlanId() : null );

                            if(is_object($objInfoPlanCab))
                            {
                                $objAdmiCaracteristica     = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                            ->findOneBy(array("descripcionCaracteristica" => "TECNOLOGIA_FACTIBILIDAD", 
                                                                              "estado"                    => "Activo"));
                                $objInfoPlanCaract     = $emComercial->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                            ->findOneBy(
                                                                        array(
                                                                              "planId"           => $objInfoPlanCab->getId(),
                                                                              "caracteristicaId" => $objAdmiCaracteristica->getId(),
                                                                              "estado"           => $objInfoPlanCab->getEstado()
                                                                             )
                                                                       );
                                if($objInfoPlanCaract)
                                {
                                    $strTecnologiaFactibilidad = $objInfoPlanCaract->getValor();
                                    $strObligaTecnologia       = "SI";
                                }

                                $objCaracteristicaGbps = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                            ->findOneBy(array("descripcionCaracteristica" => "GBPS", 
                                                                                "estado" => "Activo"));
                                $objPlanCaractGbps     = $emComercial->getRepository('schemaBundle:InfoPlanCaracteristica')
                                                            ->findOneBy(
                                                                        array(
                                                                              "planId"           => $objInfoPlanCab->getId(),
                                                                              "caracteristicaId" => $objCaracteristicaGbps->getId(),
                                                                              "valor"            => "SI",
                                                                              "estado"           => $objInfoPlanCab->getEstado()
                                                                             )
                                                                       );
                                if(is_object($objPlanCaractGbps))
                                {
                                    $arrayParamFactibilidad['strPlanGbps'] = "SI";
                                }
                            }


                            $objInfoPuntoDatoAdicional = $this->emcom
                                                              ->getRepository("schemaBundle:InfoPuntoDatoAdicional")
                                                              ->findOneByPuntoId($entityServicio->getPuntoId()->getId());

                            if(is_object($objInfoPuntoDatoAdicional))
                            {
                                $strDependeDeEdificio = $objInfoPuntoDatoAdicional->getDependeDeEdificio();
                            }

                            /*Hago una consulta para obtener el objeto de la empresa en base al prefijo.*/
                            $objInfoEmpresa = $this->emcom->getRepository('schemaBundle:InfoEmpresaGrupo')
                            ->findOneBy(array(
                                'prefijo' => $strPrefijoEmpresa,
                                'estado'  => 'Activo'
                            ));
                            /*Genero un objeto con datos necesarios para poder evaluar la restricción.*/
                            $objParametrosRestriccion = array(
                                'boolProductoEspecial'  =>  null,
                                'objInfoEmpresa'        =>  $objInfoEmpresa
                            );

                            $arrayParamFactibilidad['objServicio']                  = $entityServicio;
                            $arrayParamFactibilidad['intIdEmpresa']                 = $strIdEmpresa;
                            $arrayParamFactibilidad['intLatitudPunto']              = $strLatitudPunto;
                            $arrayParamFactibilidad['intLongitudPunto']             = $strLongitudPunto;
                            $arrayParamFactibilidad['strPrefijoEmpresa']            = $strPrefijoEmpresa;
                            $arrayParamFactibilidad['strDependeEdificio']           = $strDependeDeEdificio;
                            $arrayParamFactibilidad['strTecnologiaFactibilidad']    = $strTecnologiaFactibilidad;
                            $arrayParamFactibilidad['arrayTecnologiasNoPermitidas'] = $arrayTecnologiasNoPermitidas;
                            $arrayParamFactibilidad['infoServicioService']          = $this;
                            $arrayParamFactibilidad['objParametrosRestriccion']     = $objParametrosRestriccion;
                            $arrayParamFactibilidad['servicioTecnico']              = $this->servicioTecnico;
                            $arrayParamFactibilidad['intIdEmpresaOrigin']           = $strIdEmpresa;
                            $arrayParamFactibilidad['strPrefijoEmpresaOrigin']      = $strPrefijoEmpresa;
                            $arrayParamFactibilidad['strUsrCreacion']               = $strUsuarioCreacion;
                            $arrayParamFactibilidad['strIpCreacion']                = $strClienteIp;
                            $arrayParamFactibilidad['strTipoOrdenServicio']         = $strTipoOrdenServicio;
                            $arrayParamFactibilidad['strObligaTecnologia']          = $strObligaTecnologia;
                            $arrayParamFactibilidad['serviceUtil']                  = $this->utilServicio;
                            $arrayResultadoCajaMasCercana                         = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                                                  ->findCajaMasCercana($arrayParamFactibilidad);
                            $arrayCajaMasCercana = $arrayResultadoCajaMasCercana;

                            //Se obtiene el valor del metraje
                            $intMetrosDeDistancia = 250;
                            $strDesParValorMetraje = 'VALOR DE LA DISTANCIA USADO PARA LAS CAJAS';
                            
                            $arrayParValorMetraje = $emGeneral->getRepository('schemaBundle:AdmiParametroDet')
                                                                        ->getOne('PROYECTO PARAMETRIZAR DISTANCIA DE CAJAS',
                                                                                'TECNICO',
                                                                                'PROCESO DE FACTIBILIDAD',
                                                                                $strDesParValorMetraje,
                                                                                '',
                                                                                '',
                                                                                '',
                                                                                '',
                                                                                '',
                                                                                '10');
                            if(isset($arrayParValorMetraje["valor1"]) && !empty($arrayParValorMetraje["valor1"]))
                            {
                                $intMetrosDeDistancia = $arrayParValorMetraje["valor1"];
                            }
                            /*cuando el resultado de la busqueda es 0 setea el estado y la observacion para este caso 
                              y no se realiza la factibilidad automatica */
                            if (($arrayCajaMasCercana['id_caja'] == 0 && $arrayCajaMasCercana['distancia_caja'] == 0)
                                || $arrayCajaMasCercana['supera_distancia'] == "si" )
                            {
                                throw new \Exception("No existe una caja cercana que cumpla"
                                                    . " los $intMetrosDeDistancia mts ó no hay hilos disponibles");
                                
                            }

                            if (($arrayCajaMasCercana['distancia_caja']) || ($arrayCajaMasCercana['distancia_caja'] == 0) 
                                && $arrayCajaMasCercana['id_caja'] > 0)
                            {
                                $strObservacionFactibilidad = "Servicio Factible<br>";                                

                                $arrayElementoEquivalente = $emComercial->getRepository('schemaBundle:AdmiParametroDet')
                                                               ->getOne("FACTIBILIDAD_ELEMENTO_EQUIVALENTE",
                                                                        "",
                                                                        "",
                                                                        "ELEMENTO_EQUIVALENTE",
                                                                        $strPrefijoEmpresa,
                                                                        "",
                                                                        "",
                                                                        "");
                                
                                $arrayElementoContenedor = $emInfraestructura->getRepository('schemaBundle:InfoElemento')
                                                                              ->getElementoPadre(
                                                                                $arrayCajaMasCercana['id_interface_elemento_conector'],
                                                                                'INTERFACE',
                                                                                $arrayElementoEquivalente['valor2']);
                                if ($arrayElementoContenedor)
                                {
                                    $objInterfaceElementoFactibilidad = $emComercial->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                            ->find($arrayElementoContenedor[0]
                                                                                   ['IDINTERFACEELEMENTO']);
                                }
                                else
                                {
                                    $objInterfaceElementoFactibilidad = " con mas de un Enlace ó con enlaces incorrectos.";
                                }

                                if (is_string($objInterfaceElementoFactibilidad))
                                {
                                    throw new \Exception("Caja " . $arrayCajaMasCercana['nombre_caja']
                                                        . $objInterfaceElementoFactibilidad);
                                }
                                else
                                {
                                    if ($objInterfaceElementoFactibilidad)
                                    {
                                        //obtengo datos de factibilidad
                                        $objElementoDistribuidor         = $objInterfaceElementoFactibilidad->getElementoId();
                                        $strElementoContenedor           = sprintf("%s", $emComercial->getRepository('schemaBundle:InfoElemento')
                                                                                            ->find($arrayCajaMasCercana['id_caja']));
                                        $strElementoConector                = sprintf("%s", $emComercial->getRepository('schemaBundle:InfoElemento')
                                                                                            ->find($arrayCajaMasCercana['id_elemento_conector']
                                                                                                  ));
                                        $entityInterfaceElementoConector = $emComercial->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                              ->find($arrayCajaMasCercana['id_interface_elemento_conector']);

                                        $strDatosFactibilidad = "Datos Nuevos:<br>";
                                        $strDatosFactibilidad .= "Olt: " . $objElementoDistribuidor . "<br>";
                                        
                                        $strTecnologiaDestino = $objElementoDistribuidor->getModeloElementoId()
                                                                                        ->getMarcaElementoId()
                                                                                        ->getNombreMarcaElemento();
                                        $strDatosFactibilidad .= "Marca: " . $strTecnologiaDestino . "<br>";

                                        $strDatosFactibilidad .= "Linea: " . $objInterfaceElementoFactibilidad . "<br>";
                                        $strDatosFactibilidad .= "Caja: "  . $strElementoContenedor . "<br>";
                                        $strDatosFactibilidad .= "Distancia: " . $arrayCajaMasCercana['distancia_caja'] . "mts<br>";
                                        $strDatosFactibilidad .= "Splitter: "     . $strElementoConector . "<br>";
                                        $strDatosFactibilidad .= "Int SPlitter: "  
                                                            . $entityInterfaceElementoConector->getNombreInterfaceElemento() ."<br>";

                                        $strObservacionFactibilidad .= $strDatosFactibilidad;

                                        //reservo una interface del splitter
                                        //$entityInterfaceElementoConector->setEstado('Factible');
                                        //$emComercial->persist($entityInterfaceElementoConector);
                                        //$emComercial->flush();

                                        //guardo datos de factibilidad
                                        $intElementoId                  = $objElementoDistribuidor->getId();
                                        $intInterfaceElementoId         = $objInterfaceElementoFactibilidad->getId();
                                        $intElementoContenedorId        = $arrayCajaMasCercana['id_caja'];
                                        $intElementoConectorId          = $arrayCajaMasCercana['id_elemento_conector'];
                                        $intInterfaceElementoConectorId = $arrayCajaMasCercana['id_interface_elemento_conector']; 

                                        $strStatusFactibilidad = "OK";
                                    }
                                    else
                                    {
                                        throw new \Exception("No existe una caja cercana que cumpla los ".
                                                            "$intMetrosDeDistancia mts ó no hay hilos disponibles");
                                    }
                                }
                                
                            }
                        }
                        else
                        {
                            throw new \Exception("Proceso solo soporta servicios con Fibra Optica o FTTX");
                        }
                    }
                    else
                    {
                        throw new \Exception("El tipo de enlace no es PRINCIPAL");
                    }
                }
                else
                {
                    if($strAdministra=='EMPRESA')
                    {
                        $objRelacionPseudo = $emInfraestructura->getRepository('schemaBundle:InfoRelacionElemento')
                                                                ->findOneBy(array('elementoIdA'   => $objElemento->getId(),
                                                                                  'estado'       => 'Activo' ));
                        if(is_object($objRelacionPseudo))
                        {
                            $objInterfaceElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                       ->findOneBy(array('elementoId'   => $objRelacionPseudo->getElementoIdB(),
                                                                                         'estado'       => 'not connect' ));
                            if(is_object($objInterfaceElemento))
                            {
                                //lleno la info técnica
                                $intElementoId          = $objInterfaceElemento->getElementoId()->getId();
                                $intInterfaceElementoId = $objInterfaceElemento->getId();

                                $strObservacionFactibilidad = 'Se asignó factibilidad automática: '
                                                               .'<br> Elemento: '.$objInterfaceElemento->getElementoId()->getNombreElemento()
                                                               .'<br> Interface Elemento: '.$objInterfaceElemento->getNombreInterfaceElemento();
                                
                                $strStatusFactibilidad = "OK";
                            }
                            else
                            {
                                //significa que no hay puertos en el sw del pseudo pe
                                throw new \Exception("No existen puertos disponibles en el SW del Edificio");
                            }

                        }
                    }
                    else//Si el edificio es adminitrado por el Cliente
                    {
                        if($strUltimaMilla == 'SATELITAL')
                        {
                            $boolEsSatelital         = true;

                            //Obtener el HUB Satelital disponible para generacion de Factibilidad
                            $arrayResultado = $emInfraestructura->getRepository("schemaBundle:InfoElemento")->getArrayElementosHubDisponibles();

                            if(!empty($arrayResultado))
                            {
                                //Se obtiene el primer HUB en caso de existir mas de uno, el cual es ordenado de menor a mayor segun cantidad
                                //de puertos disponibles ( HUB con menos puertos disponibles es usado para utilizar los puertos restantes )
                                $arrayElemento = $arrayResultado[0];

                                //Generar factibilidad automática en HUB
                                $objElementoHub = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                     ->find($arrayElemento['idElemento']);

                                if(is_object($objElementoHub))
                                {                                    
                                    //Se valida puertos disponibles para efecto de la factibilidad automatica sobre el HUB
                                    // Si la cantidad de puertos es el penultimo se notificara a Satelital via correo para su debida gestión
                                    if($arrayElemento['disponibles'] == 2)
                                    {
                                        //Generar notificacion a departamento satelital indicando que queda un puerto disponible para una proxima
                                        //activacion y debe gestionar un nuevo equipo
                                        $strMensaje = 'Alerta de Disponibilidad de Hub Satelital '.$objElementoHub->getNombreElemento().'';

                                        $this->serviceEnvioPlantilla->generarEnvioPlantilla($strMensaje,
                                                                                            array(),
                                                                                            'DISP_HUB_SAT',
                                                                                            array(),
                                                                                            $strIdEmpresa,null,null
                                                                                           );
                                    }

                                    $objInterfaceHub =  $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                           ->findOneBy(array('elementoId'            => $objElementoHub->getId(),
                                                                                             'estado'                => 'not connect',
                                                                                             ),array('id'            => 'ASC'));
                                    if(is_object($objInterfaceHub))
                                    {
                                        //lleno la info técnica

                                        //Se validad si la capacidad de HUB soporta las nuevas capacidades del Servicios a ser
                                        //instalado
                                        //Se obtiene la capacidad maxima de MB que soporta el Equipo
                                        $objDetalleHub = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                                ->findOneBy(array('elementoId'    => $objElementoHub->getId(),
                                                                                                  'detalleNombre' => 'MAXIMO_BW',
                                                                                                  'estado'        => 'Activo')
                                                                                           );

                                        $intMaximoBw               = 0;
                                        $boolContinuarFactibilidad = true;

                                        if(is_object($objDetalleHub))
                                        {
                                            //Capacidad maxima del Hub
                                            $intMaximoBw = intval($objDetalleHub->getDetalleValor());

                                            $arrayCapacidades                 = array();
                                            $arrayCapacidades['strElemento']  = $objElementoHub->getNombreElemento();
                                            $arrayCapacidades['arrayEstados'] = array('Cancel','Eliminado','Anulado','Rechazada');
                                            $arrayCapacidadesUsadas = $emInfraestructura
                                                                                       ->getRepository('schemaBundle:InfoElemento')
                                                                                       ->getResultadoCapacidadesPorEquipo($arrayCapacidades);
                                            if(!empty($arrayCapacidadesUsadas))
                                            {
                                                $intCapacidadUsadaUp   = intval($arrayCapacidadesUsadas['totalCapacidad1']);
                                                $intCapacidadUsadaDown = intval($arrayCapacidadesUsadas['totalCapacidad2']);

                                                //Se obtiene la capacidad configurada en el Servicio
                                                $objCaractCap1 = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio, 
                                                                                                                           "CAPACIDAD1", 
                                                                                                                           $entityServicio->
                                                                                                                           getProductoId()
                                                                                                                          );
                                                $objCaractCap2 = $this->servicioTecnico->getServicioProductoCaracteristica($entityServicio, 
                                                                                                                           "CAPACIDAD2", 
                                                                                                                           $entityServicio->
                                                                                                                           getProductoId()
                                                                                                                          );
                                                if(is_object($objCaractCap1) && is_object($objCaractCap2))
                                                {
                                                    $intCap1 = intval($objCaractCap1->getValor());
                                                    $intCap2 = intval($objCaractCap2->getValor());

                                                    //Si la capacidad es sobrepasada se alerta al usuario
                                                    if( ($intMaximoBw < $intCapacidadUsadaUp   + $intCap1) ||
                                                        ($intMaximoBw < $intCapacidadUsadaDown + $intCap2))
                                                    {
                                                        throw new \Exception('La Capacidad configurada en el <b>HUB</b> '
                                                                            . 'es SOBREPASADA con '
                                                                            . 'la configuracion del Servicio, comunicarse con'
                                                                            . ' Departamento Satelital');
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                throw new \Exception('No se pudo obtener la información de Capacidad Utilizada del '
                                                                    . 'Hub Satelital, notificar a Sistemas');
                                            }
                                        }
                                        else
                                        {
                                            throw new \Exception('El Hub Satelital no tiene configurada la Capacidad Maxima'
                                                                . ' de Ancho de Banda disponible,'
                                                                . ' comunicarse con Departamento Satelital');
                                        }

                                        $intElementoId          = $objElementoHub->getId();
                                        $intInterfaceElementoId = $objInterfaceHub->getId();

                                        $strObservacionFactibilidad = 
                                                               'Se asignó factibilidad automática: '
                                                               .'<br><b>Elemento ( Hub Satelital ):</b> '.$objElementoHub->getNombreElemento()
                                                               .'<br><b>Interface Hub:</b> '.$objInterfaceHub->getNombreInterfaceElemento();

                                        $strStatusFactibilidad = "OK";
                                    }
                                }
                            }
                            else
                            {
                                throw new \Exception('No existen <b>HUB SATELITALES</b> con puertos Disponibles, por favor comunicarse con '
                                                    . 'Departamento Satelital');
                            }
                        }
                        else
                        {
                            //Se establece factibilidad manual siempre y cuando las condiciones de pseudope, 
                            //no se cumplan o no esten generadas correctamente por parte de Networking 
                            //o no existan puertos disponibles ( logicamente ) registrados en el telcos
                            
                            //Si el adminstrador del EDIFICIO es CLIENTE se genera la Factibilidad de 
                            //manera automatica asignando un puerto desocupado del SW virtual atado al pseudoPe

                            $objRelacionElemento = $emInfraestructura->getRepository("schemaBundle:InfoRelacionElemento")
                                                                          ->findOneBy(array('elementoIdA' => $objElemento->getId(),
                                                                                            'estado'      => 'Activo',
                                                                                            'observacion' => 'Pseudo Pe contiene elemento')
                                                                     );
                            if(is_object($objRelacionElemento))
                            {
                                $intPseudoPe = $objRelacionElemento->getElementoIdB();

                                $arraySwitches = $this->servicioTecnico->getSwitchesByPe($intPseudoPe);

                                if(count($arraySwitches)>0)
                                {
                                    //Se obtiene el primer y unico registro devuelto por NW dado que para esquema PseudoPe siempre
                                    //habra una relacion uno a uno entre el PseudoPE y el Switch Virtual
                                    $strNombreSwitchVirtual = $arraySwitches[0]['sw'];

                                    $objSwitchVirtual = $emInfraestructura->getRepository("schemaBundle:InfoElemento")
                                                                           ->findOneByNombreElemento($strNombreSwitchVirtual);

                                    if(is_object($objSwitchVirtual))
                                    {
                                        //Obtiene una interface not connect disponible para referenciar la Factibilidad
                                        $objInterfaceElemento = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                           ->findOneBy(array('elementoId'   => $objSwitchVirtual->getId(),
                                                                                             'estado'       => 'not connect' ));
                                        if(is_object($objInterfaceElemento))
                                        {
                                            //lleno la info técnica
                                            $intElementoId          = $objSwitchVirtual->getId();
                                            $intInterfaceElementoId = $objInterfaceElemento->getId();

                                            $strObservacionFactibilidad = 
                                                                   'Se asignó factibilidad automática: '
                                                                   .'<br><b>Elemento ( Switch Virtual ):</b> '
                                                                   .$objSwitchVirtual->getNombreElemento()
                                                                   .'<br><b>Interface Elemento:</b> '
                                                                   .$objInterfaceElemento->getNombreInterfaceElemento();

                                            //Se determina la Factibilidad
                                            $objAdmiCaractTipoFact = $emComercial->getRepository('schemaBundle:AdmiCaracteristica')
                                                                            ->findOneBy( array("descripcionCaracteristica" => 
                                                                                                                        'TIPO_FACTIBILIDAD',
                                                                                               "estado"                    => "Activo"));
                                            if(is_object($objAdmiCaractTipoFact))
                                            {
                                                $objAdmiProdCaractTipoFact = $emComercial->getRepository('schemaBundle:AdmiProductoCaracteristica')
                                                                                    ->findOneBy(array("caracteristicaId"=> 
                                                                                                                       $objAdmiCaractTipoFact
                                                                                                                       ->getId(),
                                                                                                      "productoId"      => 
                                                                                                                         $entityServicio
                                                                                                                         ->getProductoId())
                                                                                                  );
                                                if(is_object($objAdmiProdCaractTipoFact))
                                                {
                                                    $objServProdCaractCapacidad = new InfoServicioProdCaract();
                                                    $objServProdCaractCapacidad->setServicioId($entityServicio->getId());
                                                    $objServProdCaractCapacidad->setProductoCaracterisiticaId($objAdmiProdCaractTipoFact
                                                                                                                    ->getId());
                                                    $objServProdCaractCapacidad->setValor('DIRECTO');
                                                    $objServProdCaractCapacidad->setFeCreacion(new \DateTime('now'));
                                                    $objServProdCaractCapacidad->setUsrCreacion($strUsuarioCreacion);
                                                    $objServProdCaractCapacidad->setEstado("Activo");
                                                    $emComercial->persist($objServProdCaractCapacidad);
                                                }
                                            }

                                            $strStatusFactibilidad = "OK";
                                        
                                        }
                                    }
                                }
                            }
                            
                            if($strStatusFactibilidad != "OK")
                            {
                                throw new \Exception("No se cumplen las condiciones del EDIFICIO administrado por CLIENTE");
                            }
                        }
                    }
                }
            }
            else
            {
                throw new \Exception("No se encontró datos del servicio. Favor notificar a sistemas");
            }
        }
        catch (\Exception $objEx)
        {
            $strStatusFactibilidad = "ERROR";
            $strMensaje = "No es posible actualizar los nuevos datos del edificio ya que "
                    ."no hay Factibilidad automática: <br>" . $objEx->getMessage();
        }

        $arrayResponse = array("intElementoId"                  => $intElementoId,
                                "intInterfaceElementoId"         => $intInterfaceElementoId,
                                "intElementoContenedorId"        => $intElementoContenedorId,
                                "intElementoConectorId"          => $intElementoConectorId,
                                "intInterfaceElementoConectorId" => $intInterfaceElementoConectorId,
                                "strObservacionFactibilidad"     => $strObservacionFactibilidad,
                                "status"                         => $strStatusFactibilidad,
                                "mensaje"                        => $strMensaje);

        return $arrayResponse;
    }


    /**
     * Documentación para la función asignaNuevaFactibilidadServicio
     * 
     * Asignación de nuevos datos por factibilidad generada post cambio en información
     * de edificio sobre el punto, realizando principalmente:
     * -Liberación de puertos de factibilidad anterior
     * -Eliminanción de solicitud de factibilidad anterior
     * -Asignación de puerto por datos de nueva factibilidad
     * -Generación de solicitud por datos de nueva factibilidad
     * Aplica para MD
     * 
     * @author Alex Gómez <algomez@telconet.ec>
     * @version 1.0 03/11/2022
     * 
     * @param  array $arrayParametros [
     *                                  "emComercial"            => Entity manager de Comercial.
     *                                  "emInfraestructura"      => Entity manager de Infraestructura.
     *                                  "intCodEmpresa"          => Código de la empresa.
     *                                  "strUsuarioCreacion"     => Usuario.
     *                                  "strClienteIp"           => Direccion ip.
     *                                  "intIdServicio"          => Id del servicio.
     *                                  "arrayNuevaFactibilidad" => Array con datos de factibilidad a asignar.
     *                                  "intIdPersonaEmpresaRol" => Id persona empresa rol.
     *                                ] 
     * 
     * @return array $arrayResultado [
     *                                  "status"  => OK o ERROR.
     *                                  "mensaje" => Mensaje de Error.
     *                               ];
     */
    public function asignaNuevaFactibilidadServicio($arrayParametros)
    {
        
        $serviceServicioGeneral     = $this->serviceGeneral;
        $emComercial                = $arrayParametros['emComercial'];
        $emInfraestructura          = $arrayParametros['emInfraestructura'];

        $intIdEmpresa               = $arrayParametros['intCodEmpresa'];
        $strUsrCreacion             = $arrayParametros['strUsuarioCreacion'];
        $strIpCreacion              = $arrayParametros['strClienteIp'];
        $intIdServicio              = $arrayParametros['intIdServicio'];
        $arrayNuevaFactibilidad     = $arrayParametros['arrayNuevaFactibilidad'];
        $intIdPersonaEmpresaRol     = $arrayParametros['intIdPersonaEmpresaRol'];

        $intFlagElemento               = 0;
        $intFlagInterface              = 0;
        $boolValidaCambioConector   = 0;
        $strStatus                  = "";
        $strMensaje                 = "";
        $entityUltimaMilla          = null;
        $entityTipoSolicitud         = null;

        try
        {
            $entityTipoSolicitud     = $emComercial->getRepository('schemaBundle:AdmiTipoSolicitud')
                                                    ->findOneByDescripcionSolicitud("SOLICITUD FACTIBILIDAD");
            //obtener el servicio
            $objInfoServicio   = $emComercial->getRepository('schemaBundle:InfoServicio')->find($intIdServicio);
            //obtener servicio tecnico
            $objServicioTecnicoAnterior  = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                    ->findOneBy(array("servicioId" => $objInfoServicio->getId()));
            if ($objServicioTecnicoAnterior)
            {
                $entityUltimaMilla = $emInfraestructura->getRepository('schemaBundle:AdmiTipoMedio')
                                                        ->find($objServicioTecnicoAnterior->getUltimaMillaId());
            }
            else
            {
                throw new \Exception("No se pudo obtener datos técnicos del servicio. Favor notificar a sistemas");
            }

            //Crea historial de sevicio por modificacion de datos en edificio
            $objServicioHistorial = new InfoServicioHistorial();
            $objServicioHistorial->setServicioId($objInfoServicio);
            $objServicioHistorial->setObservacion("Se realiza cambio lógico de equipo por reubicación de Edificación");
            $objServicioHistorial->setEstado($objInfoServicio->getEstado());
            $objServicioHistorial->setUsrCreacion($strUsrCreacion);
            $objServicioHistorial->setFeCreacion(new \DateTime('now'));
            $objServicioHistorial->setIpCreacion($strIpCreacion);
            $emComercial->persist($objServicioHistorial);

            //--INICIO - LIBERACION DE PUERTOS
            //VERIFICAR ELEMENTOS DIFERENTES
            if ($arrayNuevaFactibilidad["intElementoId"] != $objServicioTecnicoAnterior->getElementoId()) 
            {
                $intFlagElemento = 1;
            }

            //VERIFICAR INTERFACES DIFERENTES
            if ($arrayNuevaFactibilidad["intInterfaceElementoId"] != $objServicioTecnicoAnterior->getInterfaceElementoId()) 
            {
                $intFlagInterface = 1;
            }

            /**
             * Validar mismos olt con misma interface y diferentes splitters o 
             * mismos olts con misma interface y mismos splitters pero diferentes interfaces
             */
            if (
                $arrayNuevaFactibilidad["intElementoId"] === $objServicioTecnicoAnterior->getElementoId()
                && $arrayNuevaFactibilidad["intInterfaceElementoId"] === $objServicioTecnicoAnterior->getInterfaceElementoId()
                && (($arrayNuevaFactibilidad["intElementoConectorId"] !== $objServicioTecnicoAnterior->getElementoConectorId())
                    || ($arrayNuevaFactibilidad["intElementoConectorId"] === $objServicioTecnicoAnterior->getElementoConectorId()
                        && $arrayNuevaFactibilidad["intInterfaceElementoConectorId"] !== 
                        $objServicioTecnicoAnterior->getInterfaceElementoConectorId()))
            ) 
            {
                $boolValidaCambioConector = 1;
            }

            if ($intFlagElemento > 0 || $intFlagInterface > 0 || $boolValidaCambioConector === 1)
            {
                //puerto splitter anterior
                $objInterfaceElementoSplitterIdAnterior = $objServicioTecnicoAnterior->getInterfaceElementoConectorId();

                //puerto ont anterior
                $objInterfaceElementoClienteIdAnterior = $objServicioTecnicoAnterior->getInterfaceElementoClienteId();

                /* eliminar enlaces anteriores que tengan como inicio la interface del splitter 
                    del servicio a cancelar*/
                $arrayEnlacesAnteriores  = $emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                            ->findBy(array(
                                                                "interfaceElementoIniId" => $objInterfaceElementoSplitterIdAnterior,
                                                                "estado"                 => "Activo"
                                                            ));

                foreach ($arrayEnlacesAnteriores as $objEnlace) 
                {
                    $objEnlace->setEstado("Eliminado");
                    $emInfraestructura->persist($objEnlace);
                }

                //desconectar puerto splitter anterior
                $objInterfaceElementoSplitterAnterior  = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                        ->find($objInterfaceElementoSplitterIdAnterior);
                $objInterfaceElementoSplitterAnterior->setEstado("not connect");
                $objInterfaceElementoSplitterAnterior->setUsrUltMod($strUsrCreacion);
                $objInterfaceElementoSplitterAnterior->setFeUltMod(new \DateTime('now'));
                $emInfraestructura->persist($objInterfaceElementoSplitterAnterior);
            }
            //--FIN - LIBERACION DE PUERTOS

            /*Eliminación de ip FIJA asignada --EVALUAR*/
            $objInfoIpPlanServicio  = $emInfraestructura->getRepository('schemaBundle:InfoIp')
                                                        ->findOneBy(array(
                                                            "servicioId"    => $objInfoServicio->getId(),
                                                            "tipoIp"        => "FIJA",
                                                            "estado"        => "Activo"
                                                        ));
            if (is_object($objInfoIpPlanServicio)) 
            {
                $objInfoIpPlanServicio->setEstado("Eliminado");
                $emInfraestructura->persist($objInfoIpPlanServicio);
            }
            
            //--INICIO - VERIFICACION DE TECNOLOGIAS DIFERENTES
            if ($entityUltimaMilla->getNombreTipoMedio() == "Fibra Optica") 
            {
                $objOltAnterior = $emInfraestructura->find('schemaBundle:InfoElemento', $objServicioTecnicoAnterior->getElementoId());
                $objOltNuevo   = $emInfraestructura->find('schemaBundle:InfoElemento', $arrayNuevaFactibilidad["intElementoId"]);
                if ($objOltAnterior->getId() != $objOltNuevo->getId()) 
                {
                    if ($objOltAnterior->getModeloElementoId()->getMarcaElementoId() !=
                        $objOltNuevo->getModeloElementoId()->getMarcaElementoId()) 
                    {
                        $strDiferenteTecnologia = "SI";
                    } 
                    else 
                    {
                        $strDiferenteTecnologia = "NO";
                    }
                }

                if ($strDiferenteTecnologia == "SI") 
                {
                    //crear solicitudes de retiro de equipo
                    $arrayRetiroEquipo = array(
                        'servicio'              => $objInfoServicio,
                        'servicioTecnico'       => $objServicioTecnicoAnterior,
                        'observacion'           => "CAMBIO LÓGICO DE EQUIPO POR REUBICACION DE EDIFICACIÓN",
                        'usrCreacion'           => $strUsrCreacion,
                        'ipCreacion'            => $strIpCreacion,
                        'idPersonaEmpresaRol'   => $intIdPersonaEmpresaRol
                    );
                    $serviceServicioGeneral->crearSolicitudRetiroEquipo($arrayRetiroEquipo);

                    //eliminar ont anterior
                    $objOntAnterior = $emInfraestructura->find('schemaBundle:InfoElemento', $objServicioTecnicoAnterior->getElementoClienteId());
                    $objOntAnterior->setEstado("Eliminado");
                    $emInfraestructura->persist($objOntAnterior);
                    

                    //historial del elemento ont
                    $objHistorialElemento = new InfoHistorialElemento();
                    $objHistorialElemento->setElementoId($objOntAnterior);
                    $objHistorialElemento->setObservacion("Se elimino el ont por reubicación de edificación y cambio de tecnologia");
                    $objHistorialElemento->setEstadoElemento("Eliminado");
                    $objHistorialElemento->setUsrCreacion($strUsrCreacion);
                    $objHistorialElemento->setFeCreacion(new \DateTime('now'));
                    $objHistorialElemento->setIpCreacion($strIpCreacion);
                    $emInfraestructura->persist($objHistorialElemento);
                    

                    //eliminar wifi anterior
                    $objInterfaceElementoClienteIdAnterior = $objServicioTecnicoAnterior->getInterfaceElementoClienteId();
                    $objEnlaceOntWifiAnterior  = $emInfraestructura->getRepository('schemaBundle:InfoEnlace')
                                                                ->findOneBy(array(
                                                                    "interfaceElementoIniId" => $objInterfaceElementoClienteIdAnterior,
                                                                    "estado"                 => "Activo"
                                                                ));
                    if ($objEnlaceOntWifiAnterior && 
                        strpos($objEnlaceOntWifiAnterior->getInterfaceElementoFinId()
                                                        ->getElementoId(), 'SmartWifi') === false) 
                    {
                            //eliminar enlace anterior
                        $objEnlaceOntWifiAnterior->setEstado("Eliminado");
                        $emInfraestructura->persist($objEnlaceOntWifiAnterior);

                            //eliminar elemento wifi
                        $objWifiAnterior = $objEnlaceOntWifiAnterior->getInterfaceElementoFinId()->getElementoId();
                        $objWifiAnterior->setEstado("Eliminado");
                        $emInfraestructura->persist($objWifiAnterior);

                            //historial del elemento wifi
                        $objHistorialElementoWifi = new InfoHistorialElemento();
                        $objHistorialElementoWifi->setElementoId($objWifiAnterior);
                        $objHistorialElementoWifi->setObservacion("Se elimino el wifi por reubicación de edificación y cambio de tecnologia");
                        $objHistorialElementoWifi->setEstadoElemento("Eliminado");
                        $objHistorialElementoWifi->setUsrCreacion($strUsrCreacion);
                        $objHistorialElementoWifi->setFeCreacion(new \DateTime('now'));
                        $objHistorialElementoWifi->setIpCreacion($strIpCreacion);
                        $emInfraestructura->persist($objHistorialElementoWifi);
                    }
                }

                //Cancelacion en LDAP de servicio anterior                                
                $strTipoAprovisionamientoOlt        = "";
                $objDetElementoAprovisionamiento    = $emInfraestructura->getRepository('schemaBundle:InfoDetalleElemento')
                                                                        ->findOneBy(array(
                                                                            "elementoId"    =>
                                                                            $objServicioTecnicoAnterior->getElementoId(),
                                                                            "detalleNombre" => "APROVISIONAMIENTO_IP"
                                                                        ));
                if (is_object($objDetElementoAprovisionamiento)) 
                {
                    $strTipoAprovisionamientoOlt = $objDetElementoAprovisionamiento->getDetalleValor();
                    if ($strTipoAprovisionamientoOlt === "CNR") 
                    {
                        $arrayResultadoJsonLdap = $serviceServicioGeneral->ejecutarComandoLdap("E", $objInfoServicio->getId());
                        if ($arrayResultadoJsonLdap->status != "OK") 
                        {
                            $strMensaje = $strMensaje . "<br>" . $arrayResultadoJsonLdap->mensaje;
                        }
                    }
                }
            }
            //--FIN - VERIFICACION DE TECNOLOGIAS DIFERENTES

            //--INI - ACTUALIZACION DE DATOS TECNICOS
            //Se coloca data tecnica en los servicios de Ips adicionales
            $arrayServiciosPunto     = $emComercial->getRepository('schemaBundle:InfoServicio')
                                            ->findBy(array("puntoId" => $objInfoServicio->getPuntoId()->getId()));

            $arrayProdIp             = $emComercial->getRepository('schemaBundle:AdmiProducto')
                                            ->findBy(array(
                                                "nombreTecnico"  => "IP",
                                                "empresaCod"     => $intIdEmpresa,
                                                "estado"         => "Activo"
                                            ));

            //obtener servicios de ips adicionales
            $arrayIpsAdicionales =  array();
            foreach ($arrayServiciosPunto as $objServicio) 
            {
                if ($objServicio->getPlanId()) 
                {
                    $objPlanCab = $emComercial->getRepository('schemaBundle:InfoPlanCab')
                                        ->find($objServicio->getPlanId()->getId());
                    $arrayPlanDet = $emComercial->getRepository('schemaBundle:InfoPlanDet')
                                        ->findBy(array("planId" => $objPlanCab->getId()));

                    foreach ($arrayPlanDet as $objPlanDet) 
                    {
                        //contar las ip que estan en planes
                        foreach ($arrayProdIp as $objProductoIp) 
                        {
                            if ($objProductoIp->getId() == $objPlanDet->getProductoId()) 
                            {
                                array_push($arrayIpsAdicionales,$objServicio->getId());
                            }
                        }
                    }
                } 
                else 
                {
                    //contar las ip que estan como productos
                    $objProductoServicioPunto = $objServicio->getProductoId();
                    foreach ($arrayProdIp as $objProductoIp) 
                    {
                        if ($objProductoIp->getId() == $objProductoServicioPunto->getId()) 
                        {
                            array_push($arrayIpsAdicionales,$objServicio->getId());
                        }
                    }
                }
            }

            //añade servicio principal
            array_push($arrayIpsAdicionales,$objInfoServicio->getId());

            //setear valores de servicio tecnico en servicios ips adicionales
            foreach ($arrayIpsAdicionales as $serviciosIp) 
            {
                $objServicio = $emComercial->getRepository('schemaBundle:InfoServicio')->find($serviciosIp);

                $objServicioTecnicoIps = $emComercial->getRepository('schemaBundle:InfoServicioTecnico')
                                                ->findOneByServicioId($objServicio->getId());

                if (!$objServicioTecnicoIps) 
                {
                    $objServicioTecnicoIps = new InfoServicioTecnico();
                    $objServicioTecnicoIps->setServicioId($objServicio);
                }

                $objServicioTecnicoIps->setElementoId($arrayNuevaFactibilidad["intElementoId"]);
                $objServicioTecnicoIps->setInterfaceElementoId($arrayNuevaFactibilidad["intInterfaceElementoId"]);
                $objServicioTecnicoIps->setElementoContenedorId($arrayNuevaFactibilidad["intElementoContenedorId"]);
                $objServicioTecnicoIps->setElementoConectorId($arrayNuevaFactibilidad["intElementoConectorId"]);
                $objServicioTecnicoIps->setInterfaceElementoConectorId($arrayNuevaFactibilidad["intInterfaceElementoConectorId"]);
                if ($objServicio->getId() !== $objInfoServicio->getId()) 
                {
                    $objServicioTecnicoIps->setElementoClienteId(null);
                    $objServicioTecnicoIps->setInterfaceElementoClienteId(null);
                }
                $objServicioTecnicoIps->setUltimaMillaId($entityUltimaMilla->getId());

                $emComercial->persist($objServicioTecnicoIps);
            }

            //conectar puerto splitter nuevo
            $objInterfaceElementoSplitterNuevo  = $emInfraestructura->getRepository('schemaBundle:InfoInterfaceElemento')
                                                                ->find($arrayNuevaFactibilidad["intInterfaceElementoConectorId"]);
            $objInterfaceElementoSplitterNuevo->setEstado("connected");
            $objInterfaceElementoSplitterNuevo->setUsrUltMod($strUsrCreacion);
            $objInterfaceElementoSplitterNuevo->setFeUltMod(new \DateTime('now'));
            $emInfraestructura->persist($objInterfaceElementoSplitterNuevo);

            //--FIN - ACTUALIZACION DE DATOS TECNICOS

            //--INICIO - GENERACION SOLICITUD POR NUEVA FACTIBILIDAD
            $strEstadoSolicitud         = "";
            $arrayTipoFactFiltrar       = array('Factible','AsignadoTarea');                  
            
            $arrayParametrosSolicitudes = array('servicioId'      => $objInfoServicio->getId(),
                                                'estado'          => $arrayTipoFactFiltrar,
                                                'tipoSolicitudId' => $entityTipoSolicitud->getId());
            
            $entityDetalleSolFac        = $emComercial->getRepository("schemaBundle:InfoDetalleSolicitud")
                                                    ->findOneBy($arrayParametrosSolicitudes);
            
            if((isset($entityDetalleSolFac) || !empty($entityDetalleSolFac) || is_object($entityDetalleSolFac)))
            {
                $strEstadoSolicitud = $entityDetalleSolFac->getEstado();
                $entityDetalleSolFac->setEstado("Eliminada");
                $emComercial->persist($entityDetalleSolFac);

                $entityDetalleSolHist = new InfoDetalleSolHist();
                $entityDetalleSolHist->setDetalleSolicitudId($entityDetalleSolFac);
                $entityDetalleSolHist->setIpCreacion($strIpCreacion);
                $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
                $entityDetalleSolHist->setUsrCreacion($strUsrCreacion);
                $entityDetalleSolHist->setObservacion("Se realiza cambio lógico de equipo por reubicación de Edificación");
                $entityDetalleSolHist->setEstado($entityDetalleSolFac->getEstado());
                $emComercial->persist($entityDetalleSolHist);
            }
            
            //GUARDAR INFO SERVICIO HISTORIAL
            $entityServicioHistorial = new InfoServicioHistorial();
            $entityServicioHistorial->setServicioId($objInfoServicio);
            $entityServicioHistorial->setIpCreacion($strIpCreacion);
            $entityServicioHistorial->setFeCreacion(new \DateTime('now'));
            $entityServicioHistorial->setUsrCreacion($strUsrCreacion);
            $entityServicioHistorial->setObservacion($arrayNuevaFactibilidad["strObservacionFactibilidad"]);
            $entityServicioHistorial->setEstado($objInfoServicio->getEstado());
            $emComercial->persist($entityServicioHistorial);
            
            $entitySolicitud = new InfoDetalleSolicitud();
            $entitySolicitud->setServicioId($objInfoServicio);
            $entitySolicitud->setTipoSolicitudId($entityTipoSolicitud);
            $entitySolicitud->setEstado($strEstadoSolicitud);
            $entitySolicitud->setUsrCreacion($strUsrCreacion);
            $entitySolicitud->setObservacion($arrayNuevaFactibilidad["strObservacionFactibilidad"]);
            $entitySolicitud->setFeCreacion(new \DateTime('now'));
            $emComercial->persist($entitySolicitud);

            //GUARDAR INFO DETALLE SOLICICITUD HISTORIAL
            $entityDetalleSolHist = new InfoDetalleSolHist();
            $entityDetalleSolHist->setDetalleSolicitudId($entitySolicitud);
            $entityDetalleSolHist->setIpCreacion($strIpCreacion);
            $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
            $entityDetalleSolHist->setUsrCreacion($strUsrCreacion);
            $entityDetalleSolHist->setObservacion("Se realiza cambio lógico de equipo por reubicación de Edificación");
            $entityDetalleSolHist->setEstado($entityDetalleSolFac->getEstado());
            $emComercial->persist($entityDetalleSolHist);

            $entityDetalleSolHist = new InfoDetalleSolHist();
            $entityDetalleSolHist->setDetalleSolicitudId($entitySolicitud);
            $entityDetalleSolHist->setIpCreacion($strIpCreacion);
            $entityDetalleSolHist->setFeCreacion(new \DateTime('now'));
            $entityDetalleSolHist->setUsrCreacion($strUsrCreacion);
            $entityDetalleSolHist->setObservacion($arrayNuevaFactibilidad["strObservacionFactibilidad"]);
            $entityDetalleSolHist->setEstado($strEstadoSolicitud);
            $emComercial->persist($entityDetalleSolHist);
            
            //--FIN - GENERACION SOLICITUD POR NUEVA FACTIBILIDAD
                
            $strStatusAsignacion = "OK";
        }
        catch (\Exception $objEx)
        {
            $strStatusAsignacion = "ERROR";
            $strMensaje = "No se pudo asignar nueva factibilidad: <br>" . $objEx->getMessage();
        }

        $arrayResponse = array("status"   => $strStatusAsignacion,
                                "mensaje" => $strMensaje);

        return $arrayResponse;
    }

    /* 
    * @author Andre Lazo <alazo@telconet.ec>
    * @version 1.0 04-05-2023 Funcion adjuntarActaTarea
    * Adjunta el acta que se notifica por correo a la tarea
    * se llama ala funcion obtieneJsonPlantilla la cual devuelve la plantilla con los valores 
    * reemplazados listo para ser transformado en pdf
    * pdf
    */
    public function adjuntarActaTarea($arrayParametros)
    {
        $intIdTarea=$arrayParametros['intIdTarea'];
        $intIdPuntoOrigen=$arrayParametros['intIdPuntoOrigen'];
        $intIdPuntoDestino=$arrayParametros['intIdPuntoDestino'];
        $strDatosPlantilla  = '';        
        $boolServicioInternet=false;   
        $strLogin=$arrayParametros['strLogin'];
        $strUsuario=$arrayParametros['strUsuario'];
        $strIpCliente=$arrayParametros['strIpCliente'];
        $intCodEmpresa=18;
        $intIdServicio=-1;
        try
        {
        $objServiciointernet=$this->emcom->getRepository('schemaBundle:InfoServicio')
        ->obtieneServicioInternetxPunto($intIdPuntoDestino);
    
        $intIdServicio=$objServiciointernet->getId();
       

        
        if($objServiciointernet!=null)
        {
        $arrayTokenCas = $this->serviceTokenCas->generarTokenCas();
     
        $arrayParametrosPlantilla=array(
            'intIdPuntoDestino'=>$intIdPuntoDestino,
            'strCodEmpresa'=>$intCodEmpresa,
            'intIdServicio'=>$intIdServicio
        );
        $strDatosPlantilla=$this->emcom->getRepository('schemaBundle:InfoServicio')
        ->obtieneJsonPlantilla($arrayParametrosPlantilla);

        $objPlantilla = $this->emComunicacion->getRepository("schemaBundle:AdmiPlantilla")
        ->findOneBy(['codigo'=>'ATC_PREPLA']);

        if(empty($objPlantilla) || !is_object($objPlantilla))
        {
            throw new \Exception('No se pudo econtrar la plantilla con codigo  ATC_PREPLA');
        }

        $arrayParametros =array('token'           => $arrayTokenCas['strToken'],
        'codigoPlantilla' => $objPlantilla->getNombrePlantilla(),
        'propiedades'     => $strDatosPlantilla,
        'login'           => $strLogin,
        'strIpCliente'    => $strIpCliente,
        'html'=>$strDatosPlantilla);
    
        $objConvertDocsResponse = $this->servicePlantilla->convertDocsMs($arrayParametros);

        $this->serviceProceso->putFile(array('strFileBase64'     => $objConvertDocsResponse['objData']['base64'],
        'strFileName'       => $objPlantilla->getNombrePlantilla(),
        'strFileExtension'  => "pdf",
        'intNumeroTarea'    => $intIdTarea,
        'strOrigen'         => "t",
        'strPrefijoEmpresa' => 'MD',
        'strUsuario'        => $strUsuario,
        'strIp'             => $strIpCliente));
    
         }
        }
        catch (\Exception $e)
        {
            $this->utilServicio->insertError('Telcos+',
            'InfoServicioService.adjuntarActaTarea',
            "Error: <br>" . $e->getMessage(),
            'Telcos',
            '127.0.0.1');
        }
    }
}
